{"sha": "e4ea20c8eba2430a534db6d10059ae53051312cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlYTIwYzhlYmEyNDMwYTUzNGRiNmQxMDA1OWFlNTMwNTEzMTJjYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-04T10:35:16Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-04T10:35:16Z"}, "message": "[AArch64][10/14] Implement target pragmas\n\n\t* config.gcc (aarch64*-*-*): Specify c_target_objs and cxx_target_objs.\n\t* config/aarch64/aarch64.h (REGISTER_TARGET_PRAGMAS): Define.\n\t(TARGET_CPU_CPP_BUILTINS): Redefine to call aarch64_cpu_cpp_builtins.\n\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Remove\n\tstatic keyword.\n\t(aarch64_reset_previous_fndecl): New function.\n\t(aarch64_handle_attr_isa_flags): Handle \"+nothing\" in the beginning of\n\tthe string.\n\t* config/aarch64/aarch64-c.c: New file.\n\t* config/aarch64/arm_acle.h: Add pragma +crc+nofp at the top.\n\tPush and pop options at beginning and end.  Remove ifdef\n\t__ARM_FEATURE_CRC32.\n\t* config/aarch64/arm_neon.h: Remove #ifdef check on __ARM_NEON.\n\tAdd pragma +nothing+simd and +nothing+crypto where appropriate.\n\t* config/aarch64/t-aarch64 (aarch64-c.o): New rule.\n\t* config/aarch64/aarch64-protos.h (aarch64_cpu_cpp_builtins):\n\tDefine prototype.\n\t(aarch64_register_pragmas): Likewise.\n\t(aarch64_reset_previous_fndecl): Likewise.\n\t(aarch64_process_target_attr): Likewise.\n\t(aarch64_override_options_internal): Likewise.\n\n\t* gcc.target/aarch64/arm_neon-nosimd-error.c: Delete.\n\nFrom-SVN: r226563", "tree": {"sha": "3b889ee47d98a6a53ad181d4d3c3c0500644b304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b889ee47d98a6a53ad181d4d3c3c0500644b304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ea20c8eba2430a534db6d10059ae53051312cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ea20c8eba2430a534db6d10059ae53051312cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ea20c8eba2430a534db6d10059ae53051312cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ea20c8eba2430a534db6d10059ae53051312cb/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fd8d40c7ff31933590e23be2a59c82889bcc6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd8d40c7ff31933590e23be2a59c82889bcc6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd8d40c7ff31933590e23be2a59c82889bcc6c1"}], "stats": {"total": 368, "additions": 267, "deletions": 101}, "files": [{"sha": "5a5ba6ec23dc2a07c844ec38dbbaa1048e5ff2f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -1,3 +1,27 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Specify c_target_objs and cxx_target_objs.\n+\t* config/aarch64/aarch64.h (REGISTER_TARGET_PRAGMAS): Define.\n+\t(TARGET_CPU_CPP_BUILTINS): Redefine to call aarch64_cpu_cpp_builtins.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Remove\n+\tstatic keyword.\n+\t(aarch64_reset_previous_fndecl): New function.\n+\t(aarch64_handle_attr_isa_flags): Handle \"+nothing\" in the beginning of\n+\tthe string.\n+\t* config/aarch64/aarch64-c.c: New file.\n+\t* config/aarch64/arm_acle.h: Add pragma +crc+nofp at the top.\n+\tPush and pop options at beginning and end.  Remove ifdef\n+\t__ARM_FEATURE_CRC32.\n+\t* config/aarch64/arm_neon.h: Remove #ifdef check on __ARM_NEON.\n+\tAdd pragma +nothing+simd and +nothing+crypto where appropriate.\n+\t* config/aarch64/t-aarch64 (aarch64-c.o): New rule.\n+\t* config/aarch64/aarch64-protos.h (aarch64_cpu_cpp_builtins):\n+\tDefine prototype.\n+\t(aarch64_register_pragmas): Likewise.\n+\t(aarch64_reset_previous_fndecl): Likewise.\n+\t(aarch64_process_target_attr): Likewise.\n+\t(aarch64_override_options_internal): Likewise.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_tribools_ok_for_inlining_p):"}, {"sha": "24f6d35d5cbcb3b33dd85f20f8d09c7eccafb97a", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -302,6 +302,8 @@ m32c*-*-*)\n aarch64*-*-*)\n \tcpu_type=aarch64\n \textra_headers=\"arm_neon.h arm_acle.h\"\n+\tc_target_objs=\"aarch64-c.o\"\n+\tcxx_target_objs=\"aarch64-c.o\"\n \textra_objs=\"aarch64-builtins.o aarch-common.o cortex-a57-fma-steering.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/aarch64/aarch64-builtins.c\"\n \ttarget_has_targetm_common=yes"}, {"sha": "45da70f37331ef5a0d94ec24a74cabde791d3d07", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -0,0 +1,190 @@\n+/* Target-specific code for C family languages.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"input.h\"\n+#include \"tm_p.h\"\n+#include \"flags.h\"\n+#include \"c-family/c-common.h\"\n+#include \"cpplib.h\"\n+#include \"c-family/c-pragma.h\"\n+#include \"langhooks.h\"\n+#include \"target.h\"\n+\n+\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+#define builtin_assert(TXT) cpp_assert (pfile, TXT)\n+\n+\n+static void\n+aarch64_def_or_undef (bool def_p, const char *macro, cpp_reader *pfile)\n+{\n+  if (def_p)\n+    cpp_define (pfile, macro);\n+  else\n+    cpp_undef (pfile, macro);\n+}\n+\n+/* Define the macros that we always expect to have on AArch64.  */\n+\n+static void\n+aarch64_define_unconditional_macros (cpp_reader *pfile)\n+{\n+  builtin_define (\"__aarch64__\");\n+  builtin_define (\"__ARM_64BIT_STATE\");\n+\n+  builtin_define (\"__ARM_ARCH_ISA_A64\");\n+  builtin_define_with_int_value (\"__ARM_ALIGN_MAX_PWR\", 28);\n+  builtin_define_with_int_value (\"__ARM_ALIGN_MAX_STACK_PWR\", 16);\n+\n+  /* __ARM_ARCH_8A is not mandated by ACLE but we define it unconditionally\n+     as interoperability with the same arm macro.  */\n+  builtin_define (\"__ARM_ARCH_8A\");\n+\n+  builtin_define_with_int_value (\"__ARM_ARCH_PROFILE\", 'A');\n+  builtin_define (\"__ARM_FEATURE_CLZ\");\n+  builtin_define (\"__ARM_FEATURE_IDIV\");\n+  builtin_define (\"__ARM_FEATURE_UNALIGNED\");\n+  builtin_define (\"__ARM_PCS_AAPCS64\");\n+  builtin_define_with_int_value (\"__ARM_SIZEOF_WCHAR_T\", WCHAR_TYPE_SIZE / 8);\n+}\n+\n+/* Undefine/redefine macros that depend on the current backend state and may\n+   need to change when a target pragma modifies the backend state.  */\n+\n+static void\n+aarch64_update_cpp_builtins (cpp_reader *pfile)\n+{\n+  aarch64_def_or_undef (flag_unsafe_math_optimizations, \"__ARM_FP_FAST\", pfile);\n+\n+  builtin_define_with_int_value (\"__ARM_ARCH\", aarch64_architecture_version);\n+\n+  builtin_define_with_int_value (\"__ARM_SIZEOF_MINIMAL_ENUM\",\n+\t\t\t\t flag_short_enums ? 1 : 4);\n+  aarch64_def_or_undef (TARGET_BIG_END, \"__AARCH64EB__\", pfile);\n+  aarch64_def_or_undef (TARGET_BIG_END, \"__ARM_BIG_ENDIAN\", pfile);\n+  aarch64_def_or_undef (!TARGET_BIG_END, \"__AARCH64EL__\", pfile);\n+\n+  aarch64_def_or_undef (TARGET_FLOAT, \"__ARM_FEATURE_FMA\", pfile);\n+\n+  if (TARGET_FLOAT || TARGET_SIMD)\n+    {\n+      builtin_define_with_int_value (\"__ARM_FP\", 0x0E);\n+      builtin_define (\"__ARM_FP16_FORMAT_IEEE\");\n+      builtin_define (\"__ARM_FP16_ARGS\");\n+    }\n+  else\n+    cpp_undef (pfile, \"__ARM_FP\");\n+\n+  aarch64_def_or_undef (TARGET_SIMD, \"__ARM_FEATURE_NUMERIC_MAXMIN\", pfile);\n+  aarch64_def_or_undef (TARGET_SIMD, \"__ARM_NEON\", pfile);\n+\n+\n+  aarch64_def_or_undef (TARGET_CRC32, \"__ARM_FEATURE_CRC32\", pfile);\n+\n+  cpp_undef (pfile, \"__AARCH64_CMODEL_TINY__\");\n+  cpp_undef (pfile, \"__AARCH64_CMODEL_SMALL__\");\n+  cpp_undef (pfile, \"__AARCH64_CMODEL_LARGE__\");\n+\n+  switch (aarch64_cmodel)\n+    {\n+      case AARCH64_CMODEL_TINY:\n+      case AARCH64_CMODEL_TINY_PIC:\n+\tbuiltin_define (\"__AARCH64_CMODEL_TINY__\");\n+\tbreak;\n+      case AARCH64_CMODEL_SMALL:\n+      case AARCH64_CMODEL_SMALL_PIC:\n+\tbuiltin_define (\"__AARCH64_CMODEL_SMALL__\");\n+\tbreak;\n+      case AARCH64_CMODEL_LARGE:\n+\tbuiltin_define (\"__AARCH64_CMODEL_LARGE__\");\n+\tbreak;\n+      default:\n+\tbreak;\n+    }\n+\n+  aarch64_def_or_undef (TARGET_ILP32, \"_ILP32\", pfile);\n+  aarch64_def_or_undef (TARGET_ILP32, \"__ILP32__\", pfile);\n+\n+  aarch64_def_or_undef (TARGET_CRYPTO, \"__ARM_FEATURE_CRYPTO\", pfile);\n+}\n+\n+/* Implement TARGET_CPU_CPP_BUILTINS.  */\n+\n+void\n+aarch64_cpu_cpp_builtins (cpp_reader *pfile)\n+{\n+  aarch64_define_unconditional_macros (pfile);\n+  aarch64_update_cpp_builtins (pfile);\n+}\n+\n+/* Hook to validate the current #pragma GCC target and set the state, and\n+   update the macros based on what was changed.  If ARGS is NULL, then\n+   POP_TARGET is used to reset the options.  */\n+\n+static bool\n+aarch64_pragma_target_parse (tree args, tree pop_target)\n+{\n+  /* If args is not NULL then process it and setup the target-specific\n+     information that it specifies.  */\n+  if (args)\n+    {\n+      if (!aarch64_process_target_attr (args, \"pragma\"))\n+\treturn false;\n+\n+      aarch64_override_options_internal (&global_options);\n+    }\n+\n+  /* args is NULL, restore to the state described in pop_target.  */\n+  else\n+    {\n+      pop_target = pop_target ? pop_target : target_option_default_node;\n+      cl_target_option_restore (&global_options,\n+\t\t\t\tTREE_TARGET_OPTION (pop_target));\n+    }\n+\n+  target_option_current_node\n+    = build_target_option_node (&global_options);\n+\n+  aarch64_reset_previous_fndecl ();\n+  /* For the definitions, ensure all newly defined macros are considered\n+     as used for -Wunused-macros.  There is no point warning about the\n+     compiler predefined macros.  */\n+  cpp_options *cpp_opts = cpp_get_options (parse_in);\n+  unsigned char saved_warn_unused_macros = cpp_opts->warn_unused_macros;\n+  cpp_opts->warn_unused_macros = 0;\n+\n+  aarch64_update_cpp_builtins (parse_in);\n+\n+  cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n+\n+  return true;\n+}\n+\n+/* Implement REGISTER_TARGET_PRAGMAS.  */\n+\n+void\n+aarch64_register_pragmas (void)\n+{\n+  /* Update pragma hook to allow parsing #pragma GCC target.  */\n+  targetm.target_option.pragma_parse = aarch64_pragma_target_parse;\n+}"}, {"sha": "260c824d010e884f8d681816d7be17b409c620d7", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -313,6 +313,7 @@ tree aarch64_fold_builtin (tree, int, tree *, bool);\n unsigned aarch64_dbx_register_number (unsigned);\n unsigned aarch64_trampoline_size (void);\n void aarch64_asm_output_labelref (FILE *, const char *);\n+void aarch64_cpu_cpp_builtins (cpp_reader *);\n void aarch64_elf_asm_named_section (const char *, unsigned, tree);\n void aarch64_err_no_fpadvsimd (machine_mode, const char *);\n void aarch64_expand_epilogue (bool);\n@@ -325,6 +326,8 @@ void aarch64_init_expanders (void);\n void aarch64_print_operand (FILE *, rtx, char);\n void aarch64_print_operand_address (FILE *, rtx);\n void aarch64_emit_call_insn (rtx);\n+void aarch64_register_pragmas (void);\n+void aarch64_reset_previous_fndecl (void);\n \n /* Initialize builtins for SIMD intrinsics.  */\n void init_aarch64_simd_builtins (void);\n@@ -362,6 +365,10 @@ bool aarch64_gen_adjusted_ldpstp (rtx *, bool, enum machine_mode, RTX_CODE);\n #endif /* RTX_CODE */\n \n void aarch64_init_builtins (void);\n+\n+bool aarch64_process_target_attr (tree, const char*);\n+void aarch64_override_options_internal (struct gcc_options *);\n+\n rtx aarch64_expand_builtin (tree exp,\n \t\t\t    rtx target,\n \t\t\t    rtx subtarget ATTRIBUTE_UNUSED,"}, {"sha": "50934fe57ea28b14d762d22a0b05edec682b31b0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -7524,7 +7524,7 @@ aarch64_override_options_after_change_1 (struct gcc_options *opts)\n     as all the other target-specific codegen decisions are\n     derived from them.  */\n \n-static void\n+void\n aarch64_override_options_internal (struct gcc_options *opts)\n {\n   aarch64_tune_flags = selected_tune->flags;\n@@ -7915,6 +7915,12 @@ aarch64_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n \n static GTY(()) tree aarch64_previous_fndecl;\n \n+void\n+aarch64_reset_previous_fndecl (void)\n+{\n+  aarch64_previous_fndecl = NULL;\n+}\n+\n /* Implement TARGET_SET_CURRENT_FUNCTION.  Unpack the codegen decisions\n    like tuning and ISA features from the DECL_FUNCTION_SPECIFIC_TARGET\n    of the function, if such exists.  This function may be called multiple\n@@ -8118,6 +8124,14 @@ aarch64_handle_attr_isa_flags (char *str, const char *pragma_or_attr)\n   enum aarch64_parse_opt_result parse_res;\n   unsigned long isa_flags = aarch64_isa_flags;\n \n+  /* We allow \"+nothing\" in the beginning to clear out all architectural\n+     features if the user wants to handpick specific features.  */\n+  if (strncmp (\"+nothing\", str, 8) == 0)\n+    {\n+      isa_flags = 0;\n+      str += 8;\n+    }\n+\n   parse_res = aarch64_parse_extension (str, &isa_flags);\n \n   if (parse_res == AARCH64_PARSE_OK)"}, {"sha": "721927ffdc7b9eaf54dcba97c8216de900278655", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 76, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -23,85 +23,13 @@\n #define GCC_AARCH64_H\n \n /* Target CPU builtins.  */\n-#define TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      builtin_define (\"__aarch64__\");                   \\\n-      builtin_define (\"__ARM_64BIT_STATE\");             \\\n-      builtin_define_with_int_value                     \\\n-        (\"__ARM_ALIGN_MAX_PWR\", 28);                    \\\n-      builtin_define_with_int_value                     \\\n-        (\"__ARM_ALIGN_MAX_STACK_PWR\", 16);              \\\n-      builtin_define_with_int_value                     \\\n-        (\"__ARM_ARCH\", aarch64_architecture_version);   \\\n-      builtin_define (\"__ARM_ARCH_8A\");                   \\\n-      builtin_define (\"__ARM_ARCH_ISA_A64\");            \\\n-      builtin_define_with_int_value                     \\\n-        (\"__ARM_ARCH_PROFILE\", 'A');                    \\\n-      builtin_define (\"__ARM_FEATURE_CLZ\");             \\\n-      builtin_define (\"__ARM_FEATURE_IDIV\");            \\\n-      builtin_define (\"__ARM_FEATURE_UNALIGNED\");       \\\n-      if (flag_unsafe_math_optimizations)               \\\n-        builtin_define (\"__ARM_FP_FAST\");               \\\n-      builtin_define (\"__ARM_PCS_AAPCS64\");             \\\n-      builtin_define_with_int_value                     \\\n-        (\"__ARM_SIZEOF_WCHAR_T\", WCHAR_TYPE_SIZE / 8);  \\\n-      builtin_define_with_int_value                     \\\n-        (\"__ARM_SIZEOF_MINIMAL_ENUM\",                   \\\n-         flag_short_enums? 1 : 4);                      \\\n-      if (TARGET_BIG_END)\t\t\t\t\\\n-        {                                               \\\n-          builtin_define (\"__AARCH64EB__\");             \\\n-          builtin_define (\"__ARM_BIG_ENDIAN\");          \\\n-        }                                               \\\n-      else\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__AARCH64EL__\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-      if (TARGET_FLOAT)                                         \\\n-        {                                                       \\\n-          builtin_define (\"__ARM_FEATURE_FMA\");                 \\\n-\t  builtin_define_with_int_value (\"__ARM_FP\", 0x0E);     \\\n-\t  builtin_define (\"__ARM_FP16_FORMAT_IEEE\");\t\t\\\n-\t  builtin_define (\"__ARM_FP16_ARGS\");\t\t\t\\\n-        }                                                       \\\n-      if (TARGET_SIMD)                                          \\\n-        {                                                       \\\n-          builtin_define (\"__ARM_FEATURE_NUMERIC_MAXMIN\");      \\\n-          builtin_define (\"__ARM_NEON\");\t\t\t\\\n-          builtin_define_with_int_value (\"__ARM_NEON_FP\", 0x0C);\\\n-        }                                                       \\\n-\t\t\t\t\t\t\t        \\\n-      if (TARGET_CRC32)\t\t\t\t        \\\n-\tbuiltin_define (\"__ARM_FEATURE_CRC32\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-      switch (aarch64_cmodel)\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  case AARCH64_CMODEL_TINY:\t\t\t\\\n-\t  case AARCH64_CMODEL_TINY_PIC:\t\t\t\\\n-\t    builtin_define (\"__AARCH64_CMODEL_TINY__\");\t\\\n-\t    break;\t\t\t\t\t\\\n-\t  case AARCH64_CMODEL_SMALL:\t\t\t\\\n-\t  case AARCH64_CMODEL_SMALL_PIC:\t\t\\\n-\t    builtin_define (\"__AARCH64_CMODEL_SMALL__\");\\\n-\t    break;\t\t\t\t\t\\\n-\t  case AARCH64_CMODEL_LARGE:\t\t\t\\\n-\t    builtin_define (\"__AARCH64_CMODEL_LARGE__\");\t\\\n-\t    break;\t\t\t\t\t\\\n-\t  default:\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-      if (TARGET_ILP32)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  cpp_define (parse_in, \"_ILP32\");\t\t\\\n-\t  cpp_define (parse_in, \"__ILP32__\");\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      if (TARGET_CRYPTO)\t\t\t\t\\\n-\tbuiltin_define (\"__ARM_FEATURE_CRYPTO\");\t\\\n-    } while (0)\n+#define TARGET_CPU_CPP_BUILTINS()\t\\\n+  aarch64_cpu_cpp_builtins (pfile)\n \n \f\n \n+#define REGISTER_TARGET_PRAGMAS() aarch64_register_pragmas ()\n+\n /* Target machine storage layout.  */\n \n #define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE)\t\\"}, {"sha": "addbc6aae31dd7c3c95c2117a835fa3bc557d1e6", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -28,11 +28,15 @@\n #define _GCC_ARM_ACLE_H\n \n #include <stdint.h>\n+\n+#pragma GCC push_options\n+\n+#pragma GCC target (\"+nothing+crc\")\n+\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n \n-#ifdef __ARM_FEATURE_CRC32\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n __crc32b (uint32_t __a, uint8_t __b)\n {\n@@ -81,10 +85,10 @@ __crc32d (uint32_t __a, uint64_t __b)\n   return __builtin_aarch64_crc32x (__a, __b);\n }\n \n-#endif\n-\n #ifdef __cplusplus\n }\n #endif\n \n+#pragma GCC pop_options\n+\n #endif"}, {"sha": "6dfebe7eea69aecc78437b3c0d698af7e06c51f6", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -27,9 +27,8 @@\n #ifndef _AARCH64_NEON_H_\n #define _AARCH64_NEON_H_\n \n-#ifndef __ARM_NEON\n-#error You must enable AdvancedSIMD instructions to use arm_neon.h\n-#else\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+simd\")\n \n #include <stdint.h>\n \n@@ -11414,8 +11413,8 @@ vbslq_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n   return __builtin_aarch64_simd_bslv2di_uuuu (__a, __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n-\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+crypto\")\n /* vaes  */\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n@@ -11441,8 +11440,7 @@ vaesimcq_u8 (uint8x16_t data)\n {\n   return __builtin_aarch64_crypto_aesimcv16qi_uu (data);\n }\n-\n-#endif\n+#pragma GCC pop_options\n \n /* vcage  */\n \n@@ -21067,7 +21065,8 @@ vrsrad_n_u64 (uint64_t __a, uint64_t __b, const int __c)\n   return __builtin_aarch64_ursra_ndi_uuus (__a, __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+crypto\")\n \n /* vsha1  */\n \n@@ -21144,7 +21143,7 @@ vmull_high_p64 (poly64x2_t a, poly64x2_t b)\n   return __builtin_aarch64_crypto_pmullv2di_ppp (a, b);\n }\n \n-#endif\n+#pragma GCC pop_options\n \n /* vshl */\n \n@@ -24912,6 +24911,6 @@ __INTERLEAVE_LIST (zip)\n #undef __aarch64_vdupq_laneq_u32\n #undef __aarch64_vdupq_laneq_u64\n \n-#endif\n+#pragma GCC pop_options\n \n #endif"}, {"sha": "782853b14277a9d23e9344dede7e45baa6fa2480", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -48,6 +48,11 @@ aarch-common.o: $(srcdir)/config/arm/aarch-common.c $(CONFIG_H) $(SYSTEM_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arm/aarch-common.c\n \n+aarch64-c.o: $(srcdir)/config/aarch64/aarch64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+    coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/aarch64/aarch64-c.c\n+\n cortex-a57-fma-steering.o: $(srcdir)/config/aarch64/cortex-a57-fma-steering.c \\\n     $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(REGS_H) insn-config.h $(RTL_BASE_H) \\\n     dominance.h cfg.h cfganal.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(RECOG_H) \\"}, {"sha": "ff0281b924d398eb9abc2b5ae47ac76b14f8f5a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ea20c8eba2430a534db6d10059ae53051312cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4ea20c8eba2430a534db6d10059ae53051312cb", "patch": "@@ -1,3 +1,7 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/arm_neon-nosimd-error.c: Delete.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/cpu-diagnostics-3.c: Update expected error"}, {"sha": "6c508ec6b8c59af5547b6298291a3c639aad7673", "filename": "gcc/testsuite/gcc.target/aarch64/arm_neon-nosimd-error.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd8d40c7ff31933590e23be2a59c82889bcc6c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farm_neon-nosimd-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd8d40c7ff31933590e23be2a59c82889bcc6c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farm_neon-nosimd-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farm_neon-nosimd-error.c?ref=1fd8d40c7ff31933590e23be2a59c82889bcc6c1", "patch": "@@ -1,11 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mgeneral-regs-only\" } */\n-/* { dg-excess-errors \"You must enable\" } */\n-\n-#include \"arm_neon.h\"\n-\n-int\n-foo ()\n-{\n-  return 0;\n-}"}]}