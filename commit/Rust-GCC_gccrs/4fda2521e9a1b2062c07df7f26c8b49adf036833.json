{"sha": "4fda2521e9a1b2062c07df7f26c8b49adf036833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkYTI1MjFlOWExYjIwNjJjMDdkZjdmMjZjOGI0OWFkZjAzNjgzMw==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2000-01-29T03:11:21Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-01-29T03:11:21Z"}, "message": "c4x.h (INIT_TARGET_OPTABS): Add all missing local optab entries.\n\n2000-01-29 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n\n        * c4x.h (INIT_TARGET_OPTABS): Add all missing local optab entries.\n\t* c4x.c: Define the optab rtx values.\n\t(c4x_add_gc_roots): Add the ggc roots for these optab rtx values.\n\t(c4x_emit_libcall): Use new optab rtx values.\n\t(c4x_emit_libcall3): Likewise.\n\t(c4x_emit_libcall_mulhi): Likewise.\n\t* c4x-protos.h: Add prototypes for optab rtx values and change\n\tprototypes for above c4x_emit_libcall functions.\n\nFrom-SVN: r31683", "tree": {"sha": "f2745ad204745a38a58525098f6c5be5aad7db18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2745ad204745a38a58525098f6c5be5aad7db18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fda2521e9a1b2062c07df7f26c8b49adf036833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fda2521e9a1b2062c07df7f26c8b49adf036833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fda2521e9a1b2062c07df7f26c8b49adf036833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fda2521e9a1b2062c07df7f26c8b49adf036833/comments", "author": null, "committer": null, "parents": [{"sha": "dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfafcb4dbd18487e06d631e71c6e03dc614c94c4"}], "stats": {"total": 121, "additions": 89, "deletions": 32}, "files": [{"sha": "abf652ad75118a9bd12bc285ccd6c92e2fd3d744", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fda2521e9a1b2062c07df7f26c8b49adf036833", "patch": "@@ -1,3 +1,14 @@\n+2000-01-29 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+        * c4x.h (INIT_TARGET_OPTABS): Add all missing local optab entries.\n+\t* c4x.c: Define the optab rtx values.\n+\t(c4x_add_gc_roots): Add the ggc roots for these optab rtx values.\n+\t(c4x_emit_libcall): Use new optab rtx values.\n+\t(c4x_emit_libcall3): Likewise.\n+\t(c4x_emit_libcall_mulhi): Likewise.\n+\t* c4x-protos.h: Add prototypes for optab rtx values and change\n+\tprototypes for above c4x_emit_libcall functions.\n+\n 2000-01-29 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n         * c4x.c (c4x_output_ascii): Restrict line length of output when TI"}, {"sha": "810c05224ddd9b9b5b28be82ee99aa8ed5e70914", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=4fda2521e9a1b2062c07df7f26c8b49adf036833", "patch": "@@ -226,14 +226,14 @@ extern int c4x_T_constraint PARAMS ((rtx));\n \n extern int c4x_U_constraint PARAMS ((rtx));\n \n-extern void c4x_emit_libcall PARAMS ((const char *, enum rtx_code,\n+extern void c4x_emit_libcall PARAMS ((rtx, enum rtx_code,\n \t\t\t\t      enum machine_mode,\n \t\t\t\t      enum machine_mode, int, rtx *));\n \n-extern void c4x_emit_libcall3 PARAMS ((const char *, enum rtx_code, \n+extern void c4x_emit_libcall3 PARAMS ((rtx, enum rtx_code, \n \t\t\t\t       enum machine_mode, rtx *));\n \n-extern void c4x_emit_libcall_mulhi PARAMS ((char *, enum rtx_code,\n+extern void c4x_emit_libcall_mulhi PARAMS ((rtx, enum rtx_code,\n \t\t\t\t\t    enum machine_mode, rtx *));\n \n extern int c4x_emit_move_sequence PARAMS ((rtx *, enum machine_mode));\n@@ -251,5 +251,16 @@ extern int valid_parallel_operands_5 PARAMS ((rtx *, enum machine_mode));\n \n extern int valid_parallel_operands_6 PARAMS ((rtx *, enum machine_mode));\n \n+extern rtx smulhi3_libfunc;\n+extern rtx umulhi3_libfunc;\n+extern rtx fix_truncqfhi2_libfunc;\n+extern rtx fixuns_truncqfhi2_libfunc;\n+extern rtx fix_trunchfhi2_libfunc;\n+extern rtx fixuns_trunchfhi2_libfunc;\n+extern rtx floathiqf2_libfunc;\n+extern rtx floatunshiqf2_libfunc;\n+extern rtx floathihf2_libfunc;\n+extern rtx floatunshihf2_libfunc;\n+\n #endif /* RTX_CODE */\n "}, {"sha": "e0051ea8f40942e4523bc49bbbcc90ba5befd08b", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=4fda2521e9a1b2062c07df7f26c8b49adf036833", "patch": "@@ -46,6 +46,17 @@\n #include \"ggc.h\"\n #include \"c4x-protos.h\"\n \n+rtx smulhi3_libfunc;\n+rtx umulhi3_libfunc;\n+rtx fix_truncqfhi2_libfunc;\n+rtx fixuns_truncqfhi2_libfunc;\n+rtx fix_trunchfhi2_libfunc;\n+rtx fixuns_trunchfhi2_libfunc;\n+rtx floathiqf2_libfunc;\n+rtx floatunshiqf2_libfunc;\n+rtx floathihf2_libfunc;\n+rtx floatunshihf2_libfunc;\n+\n static int c4x_leaf_function;\n \n static char *float_reg_names[] = FLOAT_REGISTER_NAMES;\n@@ -163,6 +174,16 @@ c4x_add_gc_roots ()\n   ggc_add_tree_root (&pure_tree, 1);\n   ggc_add_tree_root (&noreturn_tree, 1);\n   ggc_add_tree_root (&interrupt_tree, 1);\n+  ggc_add_rtx_root (&smulhi3_libfunc, 1);\n+  ggc_add_rtx_root (&umulhi3_libfunc, 1);\n+  ggc_add_rtx_root (&fix_truncqfhi2_libfunc, 1);\n+  ggc_add_rtx_root (&fixuns_truncqfhi2_libfunc, 1);\n+  ggc_add_rtx_root (&fix_trunchfhi2_libfunc, 1);\n+  ggc_add_rtx_root (&fixuns_trunchfhi2_libfunc, 1);\n+  ggc_add_rtx_root (&floathiqf2_libfunc, 1);\n+  ggc_add_rtx_root (&floatunshiqf2_libfunc, 1);\n+  ggc_add_rtx_root (&floathihf2_libfunc, 1);\n+  ggc_add_rtx_root (&floatunshihf2_libfunc, 1);\n }\n \n \n@@ -1237,8 +1258,8 @@ c4x_emit_move_sequence (operands, mode)\n \n \n void\n-c4x_emit_libcall (name, code, dmode, smode, noperands, operands)\n-     const char *name;\n+c4x_emit_libcall (libcall, code, dmode, smode, noperands, operands)\n+     rtx libcall;\n      enum rtx_code code;\n      enum machine_mode dmode;\n      enum machine_mode smode;\n@@ -1247,13 +1268,9 @@ c4x_emit_libcall (name, code, dmode, smode, noperands, operands)\n {\n   rtx ret;\n   rtx insns;\n-  rtx libcall;\n   rtx equiv;\n \n   start_sequence ();\n-  if (ggc_p)\n-    name = ggc_alloc_string (name, -1);\n-  libcall = gen_rtx_SYMBOL_REF (Pmode, name);\n   switch (noperands)\n     {\n     case 2:\n@@ -1279,30 +1296,28 @@ c4x_emit_libcall (name, code, dmode, smode, noperands, operands)\n \n \n void\n-c4x_emit_libcall3 (name, code, mode, operands)\n-     const char *name;\n+c4x_emit_libcall3 (libcall, code, mode, operands)\n+     rtx libcall;\n      enum rtx_code code;\n      enum machine_mode mode;\n      rtx *operands;\n {\n-  return c4x_emit_libcall (name, code, mode, mode, 3, operands);\n+  return c4x_emit_libcall (libcall, code, mode, mode, 3, operands);\n }\n \n \n void\n-c4x_emit_libcall_mulhi (name, code, mode, operands)\n-     char *name;\n+c4x_emit_libcall_mulhi (libcall, code, mode, operands)\n+     rtx libcall;\n      enum rtx_code code;\n      enum machine_mode mode;\n      rtx *operands;\n {\n   rtx ret;\n   rtx insns;\n-  rtx libcall;\n   rtx equiv;\n \n   start_sequence ();\n-  libcall = gen_rtx_SYMBOL_REF (Pmode, name);\n   ret = emit_library_call_value (libcall, NULL_RTX, 1, mode, 2,\n                                  operands[1], mode, operands[2], mode);\n   equiv = gen_rtx_TRUNCATE (mode,\n@@ -2329,8 +2344,8 @@ c4x_shiftable_constant (op)\n \tbreak;\n     }\n   mask = ((0xffff >> i) << 16) | 0xffff;\n-  if (IS_INT16_CONST (val & 0x80000000 ? (val >> i) | ~mask\n-\t\t\t\t       : (val >> i) & mask))\n+  if (IS_INT16_CONST (val & (1 << 31) ? (val >> i) | ~mask\n+\t\t\t\t      : (val >> i) & mask))\n     return i;\n   return -1;\n } \n@@ -3000,7 +3015,6 @@ std_reg_operand (op, mode)\n   return REG_P (op) && IS_STD_OR_PSEUDO_REG (op);\n }\n \n-\n /* Standard precision or normal register.  */\n \n int"}, {"sha": "2a5bd618806a6969b438078a528fda87b0a6ff5b", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=4fda2521e9a1b2062c07df7f26c8b49adf036833", "patch": "@@ -1462,7 +1462,6 @@ CUMULATIVE_ARGS;\n \n #define FFS_LIBCALL\t    \"__ffs\"\n \n-\n #define INIT_TARGET_OPTABS \\\n   do { \\\n     smul_optab->handlers[(int) QImode].libfunc\t\t\\\n@@ -1493,6 +1492,26 @@ CUMULATIVE_ARGS;\n       = init_one_libfunc (UMODHI3_LIBCALL);\t\t\\\n     ffs_optab->handlers[(int) QImode].libfunc\t\t\\\n       = init_one_libfunc (FFS_LIBCALL);\t\t\t\\\n+    smulhi3_libfunc\t\t\t\t\t\\\n+      = init_one_libfunc(SMULHI3_LIBCALL);\t\t\\\n+    umulhi3_libfunc\t\t\t\t\t\\\n+      = init_one_libfunc(UMULHI3_LIBCALL);\t\t\\\n+    fix_truncqfhi2_libfunc\t\t\t\t\\\n+      = init_one_libfunc(FIX_TRUNCQFHI2_LIBCALL);\t\\\n+    fixuns_truncqfhi2_libfunc\t\t\t\t\\\n+      = init_one_libfunc(FIXUNS_TRUNCQFHI2_LIBCALL);\t\\\n+    fix_trunchfhi2_libfunc\t\t\t\t\\\n+      = init_one_libfunc(FIX_TRUNCHFHI2_LIBCALL);\t\\\n+    fixuns_trunchfhi2_libfunc\t\t\t\t\\\n+      = init_one_libfunc(FIXUNS_TRUNCHFHI2_LIBCALL);\t\\\n+    floathiqf2_libfunc\t\t\t\t\t\\\n+      = init_one_libfunc(FLOATHIQF2_LIBCALL);\t\t\\\n+    floatunshiqf2_libfunc\t\t\t\t\\\n+      = init_one_libfunc(FLOATUNSHIQF2_LIBCALL);\t\\\n+    floathihf2_libfunc\t\t\t\t\t\\\n+      = init_one_libfunc(FLOATHIHF2_LIBCALL);\t\t\\\n+    floatunshihf2_libfunc\t\t\t\t\\\n+      = init_one_libfunc(FLOATUNSHIHF2_LIBCALL);\t\\\n   } while (0)\n \n #define TARGET_MEM_FUNCTIONS"}, {"sha": "e0b8f7e34a455d2e6d8df10b157e37f7b58d0a77", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda2521e9a1b2062c07df7f26c8b49adf036833/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=4fda2521e9a1b2062c07df7f26c8b49adf036833", "patch": "@@ -2084,7 +2084,8 @@\n                                           operands[2]));\n             DONE;\n          }\n-       c4x_emit_libcall3 (MULQI3_LIBCALL, MULT, QImode, operands);\n+       c4x_emit_libcall3 (smul_optab->handlers[(int) QImode].libfunc,\n+\t\t\t  MULT, QImode, operands);\n        DONE;\n      }\n   \")\n@@ -2295,7 +2296,7 @@\n  \"legitimize_operands (MULT, operands, QImode);\n   if (TARGET_C3X)\n     {\n-       c4x_emit_libcall_mulhi (SMULHI3_LIBCALL, SIGN_EXTEND, QImode, operands);\n+       c4x_emit_libcall_mulhi (smulhi3_libfunc, SIGN_EXTEND, QImode, operands);\n        DONE;\n     }\n  \")\n@@ -2352,7 +2353,7 @@\n  \"legitimize_operands (MULT, operands, QImode);\n   if (TARGET_C3X) \n     {\n-      c4x_emit_libcall_mulhi (UMULHI3_LIBCALL, ZERO_EXTEND, QImode, operands);\n+      c4x_emit_libcall_mulhi (umulhi3_libfunc, ZERO_EXTEND, QImode, operands);\n       DONE;\n     }\n  \")\n@@ -3747,7 +3748,7 @@\n                    (fix:HI (match_operand:QF 1 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FIX_TRUNCQFHI2_LIBCALL, FIX, HImode, QFmode, 2, operands);\n+  \"c4x_emit_libcall (fix_truncqfhi2_libfunc, FIX, HImode, QFmode, 2, operands);\n    DONE;\")\n \n ; Is this allowed to be implementation dependent?  If so, we can\n@@ -3770,7 +3771,7 @@\n                    (unsigned_fix:HI (match_operand:QF 1 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FIXUNS_TRUNCQFHI2_LIBCALL, UNSIGNED_FIX, \n+  \"c4x_emit_libcall (fixuns_truncqfhi2_libfunc, UNSIGNED_FIX, \n                      HImode, QFmode, 2, operands);\n    DONE;\")\n \n@@ -5905,15 +5906,15 @@\n                    (fix:HI (match_operand:HF 1 \"reg_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FIX_TRUNCHFHI2_LIBCALL, FIX, HImode, HFmode, 2, operands);\n+  \"c4x_emit_libcall (fix_trunchfhi2_libfunc, FIX, HImode, HFmode, 2, operands);\n    DONE;\")\n \n (define_expand \"fixuns_trunchfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n                    (unsigned_fix:HI (match_operand:HF 1 \"reg_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FIXUNS_TRUNCHFHI2_LIBCALL, UNSIGNED_FIX, \n+  \"c4x_emit_libcall (fixuns_trunchfhi2_libfunc, UNSIGNED_FIX, \n                      HImode, HFmode, 2, operands);\n    DONE;\")\n \n@@ -6254,15 +6255,15 @@\n                    (float:QF (match_operand:HI 1 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FLOATHIQF2_LIBCALL, FLOAT, QFmode, HImode, 2, operands);\n+  \"c4x_emit_libcall (floathiqf2_libfunc, FLOAT, QFmode, HImode, 2, operands);\n    DONE;\")\n \n (define_expand \"floatunshiqf2\"\n   [(parallel [(set (match_operand:QF 0 \"reg_operand\" \"\")\n                    (unsigned_float:QF (match_operand:HI 1 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FLOATUNSHIQF2_LIBCALL, UNSIGNED_FLOAT,\n+  \"c4x_emit_libcall (floatunshiqf2_libfunc, UNSIGNED_FLOAT,\n                      QFmode, HImode, 2, operands);\n    DONE;\")\n \n@@ -6271,15 +6272,15 @@\n                    (float:HF (match_operand:HI 1 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FLOATHIHF2_LIBCALL, FLOAT, HFmode, HImode, 2, operands);\n+  \"c4x_emit_libcall (floathihf2_libfunc, FLOAT, HFmode, HImode, 2, operands);\n    DONE;\")\n \n (define_expand \"floatunshihf2\"\n   [(parallel [(set (match_operand:HF 0 \"reg_operand\" \"\")\n                    (unsigned_float:HF (match_operand:HI 1 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall (FLOATUNSHIHF2_LIBCALL, UNSIGNED_FLOAT,\n+  \"c4x_emit_libcall (floatunshihf2_libfunc, UNSIGNED_FLOAT,\n                      HFmode, HImode, 2, operands);\n    DONE;\")\n \n@@ -6846,7 +6847,8 @@\n                             (match_operand:HI 2 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"c4x_emit_libcall3 (MULHI3_LIBCALL, MULT, HImode, operands);\n+  \"c4x_emit_libcall3 (smul_optab->handlers[(int) HImode].libfunc,\n+\t\t      MULT, HImode, operands);\n    DONE;\")\n \n "}]}