{"sha": "b193dfa8991cc20e4a9702e0570243622af35d41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5M2RmYTg5OTFjYzIwZTRhOTcwMmUwNTcwMjQzNjIyYWYzNWQ0MQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-30T16:57:22Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-30T16:57:22Z"}, "message": "re PR c++/52974 (Canonicalize include paths in diagnostics)\n\n2012-04-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t    Dodji Seketeli  <dodji@seketeli.org>\n\n\tPR c++/52974\n\t* libcpp/files.c (maybe_shorter_path): New.\n\t(find_file_in_dir): Use it.\n\nCo-Authored-By: Dodji Seketeli <dodji@seketeli.org>\n\nFrom-SVN: r186991", "tree": {"sha": "581955b1c8c4cd0feeefcba220d84666458ed1c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/581955b1c8c4cd0feeefcba220d84666458ed1c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b193dfa8991cc20e4a9702e0570243622af35d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b193dfa8991cc20e4a9702e0570243622af35d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b193dfa8991cc20e4a9702e0570243622af35d41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b193dfa8991cc20e4a9702e0570243622af35d41/comments", "author": null, "committer": null, "parents": [{"sha": "a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b8107f8ee99629c28ab9e0e5b00c589d8577db"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "8ab26a92aedc3e177ad4c4e3a65c0ec39ffb296f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b193dfa8991cc20e4a9702e0570243622af35d41/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b193dfa8991cc20e4a9702e0570243622af35d41/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b193dfa8991cc20e4a9702e0570243622af35d41", "patch": "@@ -1,3 +1,10 @@\n+2012-04-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Dodji Seketeli  <dodji@seketeli.org>\n+\n+\tPR 5297\n+\t* libcpp/files.c (maybe_shorter_path): New.\n+\t(find_file_in_dir): Use it.\n+\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tSwitch -ftrack-macro-expansion=2 on by default."}, {"sha": "5b3a37b0279300466924a2745b9a83d37a4679b0", "filename": "libcpp/files.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b193dfa8991cc20e4a9702e0570243622af35d41/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b193dfa8991cc20e4a9702e0570243622af35d41/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=b193dfa8991cc20e4a9702e0570243622af35d41", "patch": "@@ -341,6 +341,25 @@ pch_open_file (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n   return valid;\n }\n \n+/* Canonicalize the path to FILE.  Return the canonical form if it is\n+   shorter, otherwise return NULL.  This function does NOT free the\n+   memory pointed by FILE.  */\n+\n+static char *\n+maybe_shorter_path (const char * file)\n+{\n+  char * file2 = lrealpath (file);\n+  if (file2 && strlen (file2) < strlen (file))\n+    {\n+      return file2;\n+    }\n+  else \n+    {\n+      free (file2);\n+      return NULL;\n+    }\n+}\n+\n /* Try to open the path FILE->name appended to FILE->dir.  This is\n    where remap and PCH intercept the file lookup process.  Return true\n    if the file was found, whether or not the open was successful.\n@@ -361,10 +380,24 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n \n   if (path)\n     {\n-      hashval_t hv = htab_hash_string (path);\n+      hashval_t hv;\n       char *copy;\n       void **pp;\n \n+      /* We try to canonicalize system headers.  */\n+      if (file->dir->sysp)\n+\t{\n+\t  char * canonical_path = maybe_shorter_path (path);\n+\t  if (canonical_path)\n+\t    {\n+\t      /* The canonical path was newly allocated.  Let's free the\n+\t\t non-canonical one.  */\n+\t      free (path);\n+\t      path = canonical_path;\n+\t    }\n+\t}\n+\n+      hv = htab_hash_string (path);\n       if (htab_find_with_hash (pfile->nonexistent_file_hash, path, hv) != NULL)\n \t{\n \t  file->err_no = ENOENT;"}]}