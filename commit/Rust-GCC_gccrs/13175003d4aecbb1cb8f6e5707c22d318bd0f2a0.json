{"sha": "13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxNzUwMDNkNGFlY2JiMWNiOGY2ZTU3MDdjMjJkMzE4YmQwZjJhMA==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2020-04-23T21:39:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-18T09:08:31Z"}, "message": "[Ada] Implement AI12-0032 fixes for 'Old attribute accessibility\n\n2020-06-18  Steve Baird  <baird@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Object_Access_Level): Treat a 'Old attribute\n\treference like an aggregate in determining its static\n\taccessibility level; after the evaluation of the relevant\n\tpost-condition, the implicitly declared constant associated with\n\tan Old attribute reference ceases to exist. Similarly for\n\tLoop_Entry attribute.\n\t* exp_ch6.adb (Expand_Call_Helper): For an attribute reference\n\tthat is expanded into a reference to an implicitly declared\n\tconstant (e.g., a 'Old or 'Loop_Entry attribute), compute the\n\tdynamic accessibility level of that constant by looking at the\n\tdeclaration of the constant (as opposed to looking at the\n\tattribute reference).", "tree": {"sha": "73031e221efce23558ffe69aa207f19cd44e4e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73031e221efce23558ffe69aa207f19cd44e4e82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6c467131b0c07ab5d9b136148cae201de540109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c467131b0c07ab5d9b136148cae201de540109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c467131b0c07ab5d9b136148cae201de540109"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "00a0aef0631586d9144563a68daf875e9d338417", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "patch": "@@ -3617,6 +3617,21 @@ package body Exp_Ch6 is\n             then\n                Prev_Orig := Prev;\n \n+            --  If the actual is an attribute reference that was expanded\n+            --  into a reference to an entity, then get accessibility level\n+            --  from that entity. AARM 6.1.1(27.d) says \"... the implicit\n+            --  constant declaration defines the accessibility level of X'Old\".\n+\n+            elsif Nkind (Prev_Orig) = N_Attribute_Reference\n+              and then Nam_In (Attribute_Name (Prev_Orig),\n+                               Name_Old,\n+                               Name_Loop_Entry)\n+              and then Is_Entity_Name (Prev)\n+              and then Present (Entity (Prev))\n+              and then Is_Object (Entity (Prev))\n+            then\n+               Prev_Orig := Prev;\n+\n             elsif Nkind (Prev_Orig) = N_Type_Conversion then\n                Prev_Orig := Expression (Prev_Orig);\n             end if;"}, {"sha": "40f34fd7b8ad118cc019ede4dd04d63be835d1ab", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13175003d4aecbb1cb8f6e5707c22d318bd0f2a0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=13175003d4aecbb1cb8f6e5707c22d318bd0f2a0", "patch": "@@ -24237,6 +24237,18 @@ package body Sem_Util is\n       elsif Nkind (Orig_Obj) = N_Aggregate then\n          return Object_Access_Level (Current_Scope);\n \n+      --  Treat an Old/Loop_Entry attribute reference like an aggregate.\n+      --  AARM 6.1.1(27.d) says \"... the implicit constant declaration\n+      --  defines the accessibility level of X'Old\", so that is what\n+      --  we are trying to implement here.\n+\n+      elsif Nkind (Orig_Obj) = N_Attribute_Reference\n+        and then Nam_In (Attribute_Name (Orig_Obj),\n+                         Name_Old,\n+                         Name_Loop_Entry)\n+      then\n+         return Object_Access_Level (Current_Scope);\n+\n       --  Otherwise return the scope level of Standard. (If there are cases\n       --  that fall through to this point they will be treated as having\n       --  global accessibility for now. ???)"}]}