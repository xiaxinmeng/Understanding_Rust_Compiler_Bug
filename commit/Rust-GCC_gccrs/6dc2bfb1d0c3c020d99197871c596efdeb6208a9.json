{"sha": "6dc2bfb1d0c3c020d99197871c596efdeb6208a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjMmJmYjFkMGMzYzAyMGQ5OTE5Nzg3MWM1OTZlZmRlYjYyMDhhOQ==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-19T09:26:27Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-19T10:34:59Z"}, "message": "Removed `base` field from `BaseRules`\n\nNow the base(pointer to Ty) is only stored in derived rules. It is\naccessible in `BaseRules` with `get_base` method, which is implemented\nin derived rules.", "tree": {"sha": "864406b083f84e335f96ed0b97ff97b3c59af228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/864406b083f84e335f96ed0b97ff97b3c59af228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc2bfb1d0c3c020d99197871c596efdeb6208a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc2bfb1d0c3c020d99197871c596efdeb6208a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc2bfb1d0c3c020d99197871c596efdeb6208a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc2bfb1d0c3c020d99197871c596efdeb6208a9/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f37f3d3a98239b01ab8101de2f4f617068927c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37f3d3a98239b01ab8101de2f4f617068927c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37f3d3a98239b01ab8101de2f4f617068927c22"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "0f58fc07091f8f96edb8933d922512dff2738eb0", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 69, "deletions": 23, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc2bfb1d0c3c020d99197871c596efdeb6208a9/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc2bfb1d0c3c020d99197871c596efdeb6208a9/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=6dc2bfb1d0c3c020d99197871c596efdeb6208a9", "patch": "@@ -60,9 +60,9 @@ class BaseRules : public TyVisitor\n     other->accept_vis (*this);\n     if (resolved != nullptr)\n       {\n-\tresolved->append_reference (base->get_ref ());\n+\tresolved->append_reference (get_base()->get_ref ());\n \tresolved->append_reference (other->get_ref ());\n-\tfor (auto ref : base->get_combined_refs ())\n+\tfor (auto ref : get_base()->get_combined_refs ())\n \t  resolved->append_reference (ref);\n \tfor (auto ref : other->get_combined_refs ())\n \t  resolved->append_reference (ref);\n@@ -97,133 +97,149 @@ class BaseRules : public TyVisitor\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (TupleType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ADTType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (InferType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (FnType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ArrayType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (BoolType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (IntType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (UintType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (USizeType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ISizeType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (FloatType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ErrorType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (StructFieldType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (CharType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ReferenceType &type) override\n-\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n   }\n \n protected:\n   BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n-      context (Resolver::TypeCheckContext::get ()), base (base),\n+      context (Resolver::TypeCheckContext::get ()),\n       resolved (new ErrorType (base->get_ref (), base->get_ref ()))\n   {}\n \n   Analysis::Mappings *mappings;\n   Resolver::TypeCheckContext *context;\n \n-  /* Pointer to the Ty that created this rule. */\n-  BaseType *base;\n-\n   /* Temporary storage for the result of a unification.\n      We could return the result directly instead of storing it in the rule\n      object, but that involves modifying the visitor pattern to accommodate\n      the return value, which is too complex. */\n   BaseType *resolved;\n+\n+private:\n+  /* Returns a pointer to the ty that created this rule. */\n+  virtual BaseType *get_base () = 0;\n };\n \n class InferRules : public BaseRules\n@@ -440,6 +456,8 @@ class InferRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   InferType *base;\n };\n \n@@ -460,6 +478,8 @@ class StructFieldTypeRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   StructFieldType *base;\n };\n \n@@ -474,6 +494,8 @@ class UnitRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   UnitType *base;\n };\n \n@@ -529,6 +551,8 @@ class FnRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   FnType *base;\n };\n \n@@ -561,6 +585,8 @@ class ArrayRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   ArrayType *base;\n };\n \n@@ -575,6 +601,8 @@ class BoolRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   BoolType *base;\n };\n \n@@ -609,6 +637,8 @@ class IntRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   IntType *base;\n };\n \n@@ -643,6 +673,8 @@ class UintRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   UintType *base;\n };\n \n@@ -676,6 +708,8 @@ class FloatRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   FloatType *base;\n };\n \n@@ -713,6 +747,8 @@ class ADTRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   ADTType *base;\n };\n \n@@ -750,6 +786,8 @@ class TupleRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   TupleType *base;\n };\n \n@@ -774,6 +812,8 @@ class USizeRules : public BaseRules\n   void visit (USizeType &type) override { resolved = type.clone (); }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   USizeType *base;\n };\n \n@@ -798,6 +838,8 @@ class ISizeRules : public BaseRules\n   void visit (ISizeType &type) override { resolved = type.clone (); }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   ISizeType *base;\n };\n \n@@ -821,6 +863,8 @@ class CharRules : public BaseRules\n   void visit (CharType &type) override { resolved = type.clone (); }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   CharType *base;\n };\n \n@@ -840,6 +884,8 @@ class ReferenceRules : public BaseRules\n   }\n \n private:\n+  BaseType *get_base () override { return base; }\n+\n   ReferenceType *base;\n };\n "}]}