{"sha": "c962b2c36f126d17df41cf01aaa67ae1bed341d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2MmIyYzM2ZjEyNmQxN2RmNDFjZjAxYWFhNjdhZTFiZWQzNDFkOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-07T08:56:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-07T08:56:45Z"}, "message": "Default special members of regex types and add noexcept\n\n\t* include/bits/regex.h (sub_match): Add noexcept to default\n\tconstructor and length observer.\n\t(match_results): Add noexcept to default constructor and observers\n\twith no preconditions. Define destructor as defaulted.\n\t(operator==, operator!=, swap): Add noexcept.\n\t(regex_iterator): Add default member initializers and define default\n\tconstructor and destructor as defaulted. Add noexcept to equality\n\tand dereference operators.\n\nFrom-SVN: r261266", "tree": {"sha": "cec312a2c83b237c3039272e593f73ccaadf2038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec312a2c83b237c3039272e593f73ccaadf2038"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c962b2c36f126d17df41cf01aaa67ae1bed341d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c962b2c36f126d17df41cf01aaa67ae1bed341d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c962b2c36f126d17df41cf01aaa67ae1bed341d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c962b2c36f126d17df41cf01aaa67ae1bed341d9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca6b7410ddb84f2131a1754981a26238f3a6bf9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6b7410ddb84f2131a1754981a26238f3a6bf9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6b7410ddb84f2131a1754981a26238f3a6bf9f"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "6d03df7b87cad7e1ccac68455b1d05dff7a86c34", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c962b2c36f126d17df41cf01aaa67ae1bed341d9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c962b2c36f126d17df41cf01aaa67ae1bed341d9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c962b2c36f126d17df41cf01aaa67ae1bed341d9", "patch": "@@ -1,3 +1,14 @@\n+2018-06-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (sub_match): Add noexcept to default\n+\tconstructor and length observer.\n+\t(match_results): Add noexcept to default constructor and observers\n+\twith no preconditions. Define destructor as defaulted.\n+\t(operator==, operator!=, swap): Add noexcept.\n+\t(regex_iterator): Add default member initializers and define default\n+\tconstructor and destructor as defaulted. Add noexcept to equality\n+\tand dereference operators.\n+\n 2018-06-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* src/c++11/debug.cc"}, {"sha": "674be9ac50c088ca00bb902aadf815bad01cebd7", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c962b2c36f126d17df41cf01aaa67ae1bed341d9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c962b2c36f126d17df41cf01aaa67ae1bed341d9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=c962b2c36f126d17df41cf01aaa67ae1bed341d9", "patch": "@@ -868,18 +868,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     public:\n       typedef typename __iter_traits::value_type      \tvalue_type;\n       typedef typename __iter_traits::difference_type \tdifference_type;\n-      typedef _BiIter\t\t\t\t   iterator;\n-      typedef std::basic_string<value_type>\t     string_type;\n+      typedef _BiIter\t\t\t\t\titerator;\n+      typedef basic_string<value_type>\t\t\tstring_type;\n \n       bool matched;\n \n-      constexpr sub_match() : matched() { }\n+      constexpr sub_match() noexcept : matched() { }\n \n       /**\n        * Gets the length of the matching sequence.\n        */\n       difference_type\n-      length() const\n+      length() const noexcept\n       { return this->matched ? std::distance(this->first, this->second) : 0; }\n \n       /**\n@@ -1602,37 +1602,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @post size() returns 0 and str() returns an empty string.\n        */\n       explicit\n-      match_results(const _Alloc& __a = _Alloc())\n+      match_results(const _Alloc& __a = _Alloc()) noexcept\n       : _Base_type(__a)\n       { }\n \n       /**\n        * @brief Copy constructs a %match_results.\n        */\n-      match_results(const match_results& __rhs) = default;\n+      match_results(const match_results&) = default;\n \n       /**\n        * @brief Move constructs a %match_results.\n        */\n-      match_results(match_results&& __rhs) noexcept = default;\n+      match_results(match_results&&) noexcept = default;\n \n       /**\n        * @brief Assigns rhs to *this.\n        */\n       match_results&\n-      operator=(const match_results& __rhs) = default;\n+      operator=(const match_results&) = default;\n \n       /**\n        * @brief Move-assigns rhs to *this.\n        */\n       match_results&\n-      operator=(match_results&& __rhs) = default;\n+      operator=(match_results&&) = default;\n \n       /**\n        * @brief Destroys a %match_results object.\n        */\n-      ~match_results()\n-      { }\n+      ~match_results() = default;\n \n       //@}\n \n@@ -1642,7 +1641,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @retval true   The object has a fully-established result state.\n        * @retval false  The object is not ready.\n        */\n-      bool ready() const { return !_Base_type::empty(); }\n+      bool ready() const noexcept { return !_Base_type::empty(); }\n \n       /**\n        * @name 28.10.2 Size\n@@ -1659,11 +1658,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @returns the number of matches found.\n        */\n       size_type\n-      size() const\n+      size() const noexcept\n       { return _Base_type::empty() ? 0 : _Base_type::size() - 3; }\n \n       size_type\n-      max_size() const\n+      max_size() const noexcept\n       { return _Base_type::max_size(); }\n \n       /**\n@@ -1672,7 +1671,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @retval false The %match_results object is not empty.\n        */\n       bool\n-      empty() const\n+      empty() const noexcept\n       { return size() == 0; }\n \n       //@}\n@@ -1776,28 +1775,28 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @brief Gets an iterator to the start of the %sub_match collection.\n        */\n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return _Base_type::begin(); }\n \n       /**\n        * @brief Gets an iterator to the start of the %sub_match collection.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return this->begin(); }\n \n       /**\n        * @brief Gets an iterator to one-past-the-end of the collection.\n        */\n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return _Base_type::end() - (empty() ? 0 : 3); }\n \n       /**\n        * @brief Gets an iterator to one-past-the-end of the collection.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return this->end(); }\n \n       //@}\n@@ -1872,7 +1871,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @brief Gets a copy of the allocator.\n        */\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const noexcept\n       { return _Base_type::get_allocator(); }\n \n       //@}\n@@ -1886,7 +1885,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @brief Swaps the contents of two match_results.\n        */\n       void\n-      swap(match_results& __that)\n+      swap(match_results& __that) noexcept\n       {\n \tusing std::swap;\n \t_Base_type::swap(__that);\n@@ -1955,7 +1954,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _Bi_iter, typename _Alloc>\n     inline bool\n     operator==(const match_results<_Bi_iter, _Alloc>& __m1,\n-\t       const match_results<_Bi_iter, _Alloc>& __m2)\n+\t       const match_results<_Bi_iter, _Alloc>& __m2) noexcept\n     {\n       if (__m1.ready() != __m2.ready())\n \treturn false;\n@@ -1979,7 +1978,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _Bi_iter, class _Alloc>\n     inline bool\n     operator!=(const match_results<_Bi_iter, _Alloc>& __m1,\n-\t       const match_results<_Bi_iter, _Alloc>& __m2)\n+\t       const match_results<_Bi_iter, _Alloc>& __m2) noexcept\n     { return !(__m1 == __m2); }\n \n   // [7.10.6] match_results swap\n@@ -1993,7 +1992,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _Bi_iter, typename _Alloc>\n     inline void\n     swap(match_results<_Bi_iter, _Alloc>& __lhs,\n-\t match_results<_Bi_iter, _Alloc>& __rhs)\n+\t match_results<_Bi_iter, _Alloc>& __rhs) noexcept\n     { __lhs.swap(__rhs); }\n \n _GLIBCXX_END_NAMESPACE_CXX11\n@@ -2490,9 +2489,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @brief Provides a singular iterator, useful for indicating\n        * one-past-the-end of a range.\n        */\n-      regex_iterator()\n-      : _M_pregex()\n-      { }\n+      regex_iterator() = default;\n \n       /**\n        * Constructs a %regex_iterator...\n@@ -2515,42 +2512,41 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       regex_iterator(_Bi_iter, _Bi_iter, const regex_type&&,\n \t\t     regex_constants::match_flag_type\n \t\t     = regex_constants::match_default) = delete;\n-      /**\n-       * Copy constructs a %regex_iterator.\n-       */\n-      regex_iterator(const regex_iterator& __rhs) = default;\n \n-      /**\n-       * @brief Assigns one %regex_iterator to another.\n-       */\n+      /// Copy constructs a %regex_iterator.\n+      regex_iterator(const regex_iterator&) = default;\n+\n+      /// Copy assigns one %regex_iterator to another.\n       regex_iterator&\n-      operator=(const regex_iterator& __rhs) = default;\n+      operator=(const regex_iterator&) = default;\n+\n+      ~regex_iterator() = default;\n \n       /**\n        * @brief Tests the equivalence of two regex iterators.\n        */\n       bool\n-      operator==(const regex_iterator& __rhs) const;\n+      operator==(const regex_iterator&) const noexcept;\n \n       /**\n        * @brief Tests the inequivalence of two regex iterators.\n        */\n       bool\n-      operator!=(const regex_iterator& __rhs) const\n+      operator!=(const regex_iterator& __rhs) const noexcept\n       { return !(*this == __rhs); }\n \n       /**\n        * @brief Dereferences a %regex_iterator.\n        */\n       const value_type&\n-      operator*() const\n+      operator*() const noexcept\n       { return _M_match; }\n \n       /**\n        * @brief Selects a %regex_iterator member.\n        */\n       const value_type*\n-      operator->() const\n+      operator->() const noexcept\n       { return &_M_match; }\n \n       /**\n@@ -2571,10 +2567,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n     private:\n-      _Bi_iter\t\t\t\t_M_begin;\n-      _Bi_iter\t\t\t\t_M_end;\n-      const regex_type*\t\t\t_M_pregex;\n-      regex_constants::match_flag_type\t_M_flags;\n+      _Bi_iter\t\t\t\t_M_begin {};\n+      _Bi_iter\t\t\t\t_M_end {};\n+      const regex_type*\t\t\t_M_pregex = nullptr;\n+      regex_constants::match_flag_type\t_M_flags {};\n       match_results<_Bi_iter>\t\t_M_match;\n     };\n "}]}