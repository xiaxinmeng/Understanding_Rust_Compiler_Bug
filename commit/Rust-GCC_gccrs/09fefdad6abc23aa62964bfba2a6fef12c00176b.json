{"sha": "09fefdad6abc23aa62964bfba2a6fef12c00176b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmZWZkYWQ2YWJjMjNhYTYyOTY0YmZiYTJhNmZlZjEyYzAwMTc2Yg==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-10-06T20:50:35Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-10-06T20:50:35Z"}, "message": "move dr->alias_set to a helper structure\n\n2015-10-06  Aditya Kumar  <aditya.k7@samsung.com>\n                Sebastian Pop  <s.pop@samsung.com>\n\n                * graphite-poly.c (new_scop): Initialize drs.\n                * graphite-poly.h (struct dr_info): New.\n                (struct scop): Add drs.\n                * graphite-sese-to-poly.c (pdr_add_alias_set): Use dr_info.\n                (pdr_add_memory_accesses): Same.\n                (build_poly_dr): Same.\n                (build_alias_set): Same.\n                (build_scop_drs): Same.\n                (build_pbb_drs): Remove.\n                * tree-data-ref.c (create_data_ref): Do not initialize alias_set.\n                * tree-data-ref.h (data_reference): Remove alias_set.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r228545", "tree": {"sha": "927101a0a9a00af19e60cc30d02515cff1ab73fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/927101a0a9a00af19e60cc30d02515cff1ab73fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09fefdad6abc23aa62964bfba2a6fef12c00176b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fefdad6abc23aa62964bfba2a6fef12c00176b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fefdad6abc23aa62964bfba2a6fef12c00176b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fefdad6abc23aa62964bfba2a6fef12c00176b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790befae61a1f5a84ab2eded7d828c14528641ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790befae61a1f5a84ab2eded7d828c14528641ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790befae61a1f5a84ab2eded7d828c14528641ba"}], "stats": {"total": 122, "additions": 82, "deletions": 40}, "files": [{"sha": "1b76230e43075695141ff72b92699cfeec735af8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09fefdad6abc23aa62964bfba2a6fef12c00176b", "patch": "@@ -1,3 +1,18 @@\n+2015-10-06  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-poly.c (new_scop): Initialize drs.\n+\t* graphite-poly.h (struct dr_info): New.\n+\t(struct scop): Add drs.\n+\t* graphite-sese-to-poly.c (pdr_add_alias_set): Use dr_info.\n+\t(pdr_add_memory_accesses): Same.\n+\t(build_poly_dr): Same.\n+\t(build_alias_set): Same.\n+\t(build_scop_drs): Same.\n+\t(build_pbb_drs): Remove.\n+\t* tree-data-ref.c (create_data_ref): Do not initialize alias_set.\n+\t* tree-data-ref.h (data_reference): Remove alias_set.\n+\n 2015-10-06  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "ab28b7a3d6977758a9d75cf36ade1689b41aaef1", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=09fefdad6abc23aa62964bfba2a6fef12c00176b", "patch": "@@ -322,6 +322,7 @@ new_scop (edge entry, edge exit)\n   scop_set_region (scop, region);\n   SCOP_BBS (scop).create (3);\n   POLY_SCOP_P (scop) = false;\n+  scop->drs.create (3);\n \n   return scop;\n }"}, {"sha": "37a1755dc4097fa0dbc79991883da22934abb9eb", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=09fefdad6abc23aa62964bfba2a6fef12c00176b", "patch": "@@ -366,6 +366,42 @@ pbb_set_black_box (poly_bb_p pbb, gimple_poly_bb_p black_box)\n   pbb->black_box = black_box;\n }\n \n+/* A helper structure to keep track of data references, polyhedral BBs, and\n+   alias sets.  */\n+\n+struct dr_info\n+{\n+  /* The data reference.  */\n+  data_reference_p dr;\n+\n+  /* ALIAS_SET is the SCC number assigned by a graph_dfs of the alias graph.  -1\n+     is an invalid alias set.  */\n+  int alias_set;\n+\n+  /* The polyhedral BB containing this DR.  */\n+  poly_bb_p pbb;\n+\n+  /* Construct a DR_INFO from a data reference DR, an ALIAS_SET, and a PBB.  */\n+  dr_info (data_reference_p dr, int alias_set, poly_bb_p pbb)\n+    : dr (dr), alias_set (alias_set), pbb (pbb) {}\n+\n+  /* A simpler constructor to be able to push these objects in a vec.  */\n+  dr_info (int i) : dr (NULL), alias_set (-1), pbb (NULL)\n+  {\n+    gcc_assert (i == 0);\n+  }\n+\n+  /* Assignment operator, to be able to iterate over a vec of these objects.  */\n+  const dr_info &\n+  operator= (const dr_info &p)\n+  {\n+    dr = p.dr;\n+    alias_set = p.alias_set;\n+    pbb = p.pbb;\n+    return *this;\n+  }\n+};\n+\n /* A SCOP is a Static Control Part of the program, simple enough to be\n    represented in polyhedral form.  */\n struct scop\n@@ -381,6 +417,9 @@ struct scop\n      representation.  */\n   vec<poly_bb_p> bbs;\n \n+  /* All the data references in this scop.  */\n+  vec<dr_info> drs;\n+\n   /* The context describes known restrictions concerning the parameters\n      and relations in between the parameters.\n "}, {"sha": "e61e0bf1b8cb0e0bb76dafa3861305efd12af528", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=09fefdad6abc23aa62964bfba2a6fef12c00176b", "patch": "@@ -930,11 +930,11 @@ build_scop_iteration_domain (scop_p scop)\n    domain.  */\n \n static isl_map *\n-pdr_add_alias_set (isl_map *acc, data_reference_p dr)\n+pdr_add_alias_set (isl_map *acc, dr_info &dri)\n {\n   isl_constraint *c = isl_equality_alloc\n       (isl_local_space_from_space (isl_map_get_space (acc)));\n-  c = isl_constraint_set_constant_si (c, -dr->alias_set);\n+  c = isl_constraint_set_constant_si (c, -dri.alias_set);\n   c = isl_constraint_set_coefficient_si (c, isl_dim_out, 0, 1);\n \n   return isl_map_add_constraint (acc, c);\n@@ -968,8 +968,10 @@ set_index (isl_map *map, int pos, isl_pw_aff *index)\n    PBB is the poly_bb_p that contains the data reference DR.  */\n \n static isl_map *\n-pdr_add_memory_accesses (isl_map *acc, data_reference_p dr, poly_bb_p pbb)\n+pdr_add_memory_accesses (isl_map *acc, dr_info &dri)\n {\n+  data_reference_p dr = dri.dr;\n+  poly_bb_p pbb = dri.pbb;\n   int i, nb_subscripts = DR_NUM_DIMENSIONS (dr);\n   scop_p scop = PBB_SCOP (pbb);\n \n@@ -1056,10 +1058,12 @@ pdr_add_data_dimensions (isl_set *subscript_sizes, scop_p scop,\n /* Build data accesses for DR in PBB.  */\n \n static void\n-build_poly_dr (data_reference_p dr, poly_bb_p pbb)\n+build_poly_dr (dr_info &dri)\n {\n   isl_map *acc;\n   isl_set *subscript_sizes;\n+  poly_bb_p pbb = dri.pbb;\n+  data_reference_p dr = dri.dr;\n   scop_p scop = PBB_SCOP (pbb);\n \n   {\n@@ -1072,19 +1076,18 @@ build_poly_dr (data_reference_p dr, poly_bb_p pbb)\n     acc = isl_map_set_tuple_id (acc, isl_dim_out, isl_id_for_dr (scop, dr));\n   }\n \n-  acc = pdr_add_alias_set (acc, dr);\n-  acc = pdr_add_memory_accesses (acc, dr, pbb);\n+  acc = pdr_add_alias_set (acc, dri);\n+  acc = pdr_add_memory_accesses (acc, dri);\n \n   {\n     isl_id *id = isl_id_for_dr (scop, dr);\n     int nb = 1 + DR_NUM_DIMENSIONS (dr);\n     isl_space *space = isl_space_set_alloc (scop->isl_context, 0, nb);\n-    int alias_set_num = dr->alias_set;\n \n     space = isl_space_set_tuple_id (space, isl_dim_set, id);\n     subscript_sizes = isl_set_nat_universe (space);\n     subscript_sizes = isl_set_fix_si (subscript_sizes, isl_dim_set, 0,\n-\t\t\t\t      alias_set_num);\n+\t\t\t\t      dri.alias_set);\n     subscript_sizes = pdr_add_data_dimensions (subscript_sizes, scop, dr);\n   }\n \n@@ -1096,17 +1099,17 @@ build_poly_dr (data_reference_p dr, poly_bb_p pbb)\n /* Compute alias-sets for all data references in DRS.  */\n \n static void\n-build_alias_set (vec<data_reference_p> drs)\n+build_alias_set (scop_p scop)\n {\n-  int num_vertices = drs.length ();\n+  int num_vertices = scop->drs.length ();\n   struct graph *g = new_graph (num_vertices);\n-  data_reference_p dr1, dr2;\n+  dr_info dr1 (0), dr2 (0);\n   int i, j;\n   int *all_vertices;\n \n-  FOR_EACH_VEC_ELT (drs, i, dr1)\n-    for (j = i+1; drs.iterate (j, &dr2); j++)\n-      if (dr_may_alias_p (dr1, dr2, true))\n+  FOR_EACH_VEC_ELT (scop->drs, i, dr1)\n+    for (j = i+1; scop->drs.iterate (j, &dr2); j++)\n+      if (dr_may_alias_p (dr1.dr, dr2.dr, true))\n \t{\n \t  add_edge (g, i, j);\n \t  add_edge (g, j, i);\n@@ -1120,30 +1123,17 @@ build_alias_set (vec<data_reference_p> drs)\n   free (all_vertices);\n \n   for (i = 0; i < g->n_vertices; i++)\n-    drs[i]->alias_set = g->vertices[i].component + 1;\n+    scop->drs[i].alias_set = g->vertices[i].component + 1;\n \n   free_graph (g);\n }\n \n-/* Build the data references for PBB.  */\n-\n-static void\n-build_pbb_drs (poly_bb_p pbb)\n-{\n-  int j;\n-  data_reference_p dr;\n-  vec<data_reference_p> gbb_drs = GBB_DATA_REFS (PBB_BLACK_BOX (pbb));\n-\n-  FOR_EACH_VEC_ELT (gbb_drs, j, dr)\n-    build_poly_dr (dr, pbb);\n-}\n-\n /* Build data references in SCOP.  */\n \n static void\n build_scop_drs (scop_p scop)\n {\n-  int i;\n+  int i, j;\n   poly_bb_p pbb;\n \n   /* Remove all the PBBs that do not have data references: these basic\n@@ -1157,16 +1147,17 @@ build_scop_drs (scop_p scop)\n \ti--;\n       }\n \n-  auto_vec<data_reference_p, 3> drs;\n+  data_reference_p dr;\n   FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n-    drs.safe_splice (GBB_DATA_REFS (PBB_BLACK_BOX (pbb)));\n-\n-  build_alias_set (drs);\n+    if (pbb)\n+      FOR_EACH_VEC_ELT (GBB_DATA_REFS (PBB_BLACK_BOX (pbb)), j, dr)\n+\tscop->drs.safe_push (dr_info (dr, -1, pbb));\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n-    build_pbb_drs (pbb);\n+  build_alias_set (scop);\n \n-  drs.release ();\n+  dr_info dri (0);\n+  FOR_EACH_VEC_ELT (scop->drs, i, dri)\n+    build_poly_dr (dri);\n }\n \n /* Analyze all the data references of STMTS and add them to the"}, {"sha": "e7087d7ebec94322a95d9ab3ce4cfb5d01762507", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=09fefdad6abc23aa62964bfba2a6fef12c00176b", "patch": "@@ -1080,7 +1080,6 @@ create_data_ref (loop_p nest, loop_p loop, tree memref, gimple *stmt,\n   DR_STMT (dr) = stmt;\n   DR_REF (dr) = memref;\n   DR_IS_READ (dr) = is_read;\n-  dr->alias_set = 0;\n \n   dr_analyze_innermost (dr, nest);\n   dr_analyze_indices (dr, nest, loop);"}, {"sha": "4c9e3574d1d4de4a8d26916670b16915d5d4fb65", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fefdad6abc23aa62964bfba2a6fef12c00176b/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=09fefdad6abc23aa62964bfba2a6fef12c00176b", "patch": "@@ -127,9 +127,6 @@ struct data_reference\n \n   /* Alias information for the data reference.  */\n   struct dr_alias alias;\n-\n-  /* The alias set for this data reference.  */\n-  int alias_set;\n };\n \n #define DR_STMT(DR)                (DR)->stmt"}]}