{"sha": "fcefc59befd396267b824c170b6a37acaf10874e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlZmM1OWJlZmQzOTYyNjdiODI0YzE3MGI2YTM3YWNhZjEwODc0ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T09:34:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T09:34:44Z"}, "message": "aarch64: Fix up aarch64_simd_clone_compute_vecsize_and_simdlen [PR99542]\n\nAs the patch shows, there are several bugs in\naarch64_simd_clone_compute_vecsize_and_simdlen.\nOne is that unlike for function declarations that aren't definitions\nit completely ignores argument types.  Such decls don't have DECL_ARGUMENTS,\nbut we can walk TYPE_ARG_TYPES instead, like the i386 backend does or like\nthe simd cloning code in the middle end does too.\n\nAnother problem is that it checks types of uniform arguments.  That is\nunnecessary, uniform arguments are passed the way it normally is, it is\na scalar argument rather than vector, so there is no reason not to support\nuniform argument of different size, or long double, structure etc.\n\n2021-03-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99542\n\t* config/aarch64/aarch64.c\n\t(aarch64_simd_clone_compute_vecsize_and_simdlen): If not a function\n\tdefinition, walk TYPE_ARG_TYPES list if non-NULL for argument types\n\tinstead of DECL_ARGUMENTS.  Ignore types for uniform arguments.\n\n\t* gcc.dg/gomp/pr99542.c: New test.\n\t* gcc.dg/gomp/pr59669-2.c (bar): Don't expect a warning on aarch64.\n\t* gcc.dg/gomp/simd-clones-2.c (setArray): Likewise.\n\t* g++.dg/vect/simd-clone-7.cc (bar): Likewise.\n\t* g++.dg/gomp/declare-simd-1.C (f37): Expect a different warning\n\ton aarch64.\n\t* gcc.dg/declare-simd.c (fn2): Expect a new warning on aarch64.", "tree": {"sha": "a0f659205cbc69589a6d7f70a96c6752f7e00ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f659205cbc69589a6d7f70a96c6752f7e00ec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcefc59befd396267b824c170b6a37acaf10874e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcefc59befd396267b824c170b6a37acaf10874e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcefc59befd396267b824c170b6a37acaf10874e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcefc59befd396267b824c170b6a37acaf10874e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1973beaf92c629f26df98eff33ab1bce7f3ea4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1973beaf92c629f26df98eff33ab1bce7f3ea4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1973beaf92c629f26df98eff33ab1bce7f3ea4ef"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "9b44d4d2148c06352a72099be52a311410662266", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fcefc59befd396267b824c170b6a37acaf10874e", "patch": "@@ -23412,11 +23412,17 @@ aarch64_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n       return 0;\n     }\n \n-  for (t = DECL_ARGUMENTS (node->decl); t; t = DECL_CHAIN (t))\n+  int i;\n+  tree type_arg_types = TYPE_ARG_TYPES (TREE_TYPE (node->decl));\n+  bool decl_arg_p = (node->definition || type_arg_types == NULL_TREE);\n+\n+  for (t = (decl_arg_p ? DECL_ARGUMENTS (node->decl) : type_arg_types), i = 0;\n+       t && t != void_list_node; t = TREE_CHAIN (t), i++)\n     {\n-      arg_type = TREE_TYPE (t);\n+      tree arg_type = decl_arg_p ? TREE_TYPE (t) : TREE_VALUE (t);\n \n-      if (!currently_supported_simd_type (arg_type, base_type))\n+      if (clonei->args[i].arg_type != SIMD_CLONE_ARG_TYPE_UNIFORM\n+\t  && !currently_supported_simd_type (arg_type, base_type))\n \t{\n \t  if (TYPE_SIZE (arg_type) != TYPE_SIZE (base_type))\n \t    warning_at (DECL_SOURCE_LOCATION (node->decl), 0,"}, {"sha": "00996b60e52760bf9fe82de7b0c42b9c846c1272", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C?ref=fcefc59befd396267b824c170b6a37acaf10874e", "patch": "@@ -287,7 +287,7 @@ struct D\n   int f37 (int a);\n   int e;\n };\n-// { dg-warning \"GCC does not currently support simdlen 16 for type 'int'\" \"\" { target aarch64*-*-* } .-3 }\n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64*-*-* } .-3 }\n \n void\n f38 (D &d)"}, {"sha": "fd5751b30bbd1df8d72d510fa66452cdb5f5f18d", "filename": "gcc/testsuite/g++.dg/vect/simd-clone-7.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-7.cc?ref=fcefc59befd396267b824c170b6a37acaf10874e", "patch": "@@ -8,5 +8,3 @@ bar (float x, float *y, int)\n {\n   return y[0] + y[1] * x;\n }\n-// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target { { aarch64*-*-* } && lp64 } } .-4 }\n-"}, {"sha": "52796f6416ec831fe447bc03dc19ced19ea3c9ef", "filename": "gcc/testsuite/gcc.dg/declare-simd.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclare-simd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclare-simd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclare-simd.c?ref=fcefc59befd396267b824c170b6a37acaf10874e", "patch": "@@ -3,6 +3,7 @@\n \n #pragma omp declare simd linear (p2, p3)\n extern void fn2 (float p1, float *p2, float *p3);\n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64*-*-* } .-1 } */\n \n float *a, *b;\n void fn1 (float *p1)"}, {"sha": "f6aad8998f1fadcc4daff4c660469f04d85a7ac1", "filename": "gcc/testsuite/gcc.dg/gomp/pr59669-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr59669-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr59669-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr59669-2.c?ref=fcefc59befd396267b824c170b6a37acaf10874e", "patch": "@@ -7,4 +7,3 @@ void\n bar (int *a)\n {\n }\n-/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64*-*-* } .-3 } */"}, {"sha": "b67ff5a37a20fdc2791b0aa9254a18d5ac43247e", "filename": "gcc/testsuite/gcc.dg/gomp/pr99542.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr99542.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr99542.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr99542.c?ref=fcefc59befd396267b824c170b6a37acaf10874e", "patch": "@@ -0,0 +1,17 @@\n+/* PR middle-end/89246 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O0 -fopenmp-simd\" } */\n+\n+#pragma omp declare simd\n+extern int foo (__int128 x);\t/* { dg-warning \"GCC does not currently support mixed size types for 'simd' function\" \"\" { target aarch64*-*-* } } */\n+/* { dg-warning \"unsupported argument type '__int128' for simd\" \"\" { target i?86-*-* x86_64-*-* } .-1 } */\n+\n+#pragma omp declare simd uniform (x)\n+extern int baz (__int128 x);\n+\n+#pragma omp declare simd\n+int\n+bar (int x)\n+{\n+  return x + foo (0) + baz (0);\n+}"}, {"sha": "75554de9339db6f4fda0e476dc932013b9c949e5", "filename": "gcc/testsuite/gcc.dg/gomp/simd-clones-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-clones-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcefc59befd396267b824c170b6a37acaf10874e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-clones-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-clones-2.c?ref=fcefc59befd396267b824c170b6a37acaf10874e", "patch": "@@ -15,7 +15,6 @@ float setArray(float *a, float x, int k)\n   return a[k];\n }\n \n-/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64*-*-* } .-6 } */\n /* { dg-final { scan-tree-dump \"_ZGVbN4ua32vl_setArray\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump \"_ZGVbN4vvva32_addit\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump \"_ZGVbM4vl66u_addit\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */"}]}