{"sha": "de925a031ee7edda8b7e991e4fb201261dc540cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU5MjVhMDMxZWU3ZWRkYThiN2U5OTFlNGZiMjAxMjYxZGM1NDBjYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-11-07T21:33:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-11-07T21:33:29Z"}, "message": "tree-ssa-structalias.c (build_succ_graph): Feed stores to anything only to variables that can take pointers.\n\n2009-11-07  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (build_succ_graph): Feed stores\n\tto anything only to variables that can take pointers.\n\t(get_constraint_for_ssa_var): Properly exclude full\n\tvariables from expanding.\n\t(first_vi_for_offset): Avoid overflow in arithmetic.\n\t(first_or_preceding_vi_for_offset): Likewise.\n\t(count_num_arguments): Fix implementation.\n\t(gate_ipa_pta): Do not run when not optimizing.\n\nFrom-SVN: r154002", "tree": {"sha": "f494c5d22400a88fca7119cac14a033d67dca658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f494c5d22400a88fca7119cac14a033d67dca658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de925a031ee7edda8b7e991e4fb201261dc540cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de925a031ee7edda8b7e991e4fb201261dc540cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de925a031ee7edda8b7e991e4fb201261dc540cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de925a031ee7edda8b7e991e4fb201261dc540cc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "451409e49392d89ab11861b47efab968c558b5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451409e49392d89ab11861b47efab968c558b5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451409e49392d89ab11861b47efab968c558b5f1"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "e1f374e6d6efb4f4fff556ad7d81a0a1b5d04fdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de925a031ee7edda8b7e991e4fb201261dc540cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de925a031ee7edda8b7e991e4fb201261dc540cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de925a031ee7edda8b7e991e4fb201261dc540cc", "patch": "@@ -1,3 +1,14 @@\n+2009-11-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (build_succ_graph): Feed stores\n+\tto anything only to variables that can take pointers.\n+\t(get_constraint_for_ssa_var): Properly exclude full\n+\tvariables from expanding.\n+\t(first_vi_for_offset): Avoid overflow in arithmetic.\n+\t(first_or_preceding_vi_for_offset): Likewise.\n+\t(count_num_arguments): Fix implementation.\n+\t(gate_ipa_pta): Do not run when not optimizing.\n+\n 2009-11-07  David Binderman <dcb314@hotmail.com>\n \n \t* builtins.c (apply_args_size, expand_builtin_mathfn, expand_powi,"}, {"sha": "619875c048d6b9f0ae4c73df7e6e8b0e5ffc7146", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de925a031ee7edda8b7e991e4fb201261dc540cc/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de925a031ee7edda8b7e991e4fb201261dc540cc/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=de925a031ee7edda8b7e991e4fb201261dc540cc", "patch": "@@ -1269,11 +1269,13 @@ build_succ_graph (void)\n \t}\n     }\n \n-  /* Add edges from STOREDANYTHING to all non-direct nodes.  */\n+  /* Add edges from STOREDANYTHING to all non-direct nodes that can\n+     receive pointers.  */\n   t = find (storedanything_id);\n   for (i = integer_id + 1; i < FIRST_REF_NODE; ++i)\n     {\n-      if (!TEST_BIT (graph->direct_nodes, i))\n+      if (!TEST_BIT (graph->direct_nodes, i)\n+\t  && get_varinfo (i)->may_have_pointers)\n \tadd_graph_edge (graph, find (i), t);\n     }\n }\n@@ -2720,7 +2722,8 @@ get_constraint_for_ssa_var (tree t, VEC(ce_s, heap) **results, bool address_p)\n \n   /* If we are not taking the address of the constraint expr, add all\n      sub-fiels of the variable as well.  */\n-  if (!address_p)\n+  if (!address_p\n+      && !vi->is_full_var)\n     {\n       for (; vi; vi = vi->next)\n \t{\n@@ -4032,7 +4035,7 @@ first_vi_for_offset (varinfo_t start, unsigned HOST_WIDE_INT offset)\n \t In that case, however, offset should still be within the size\n \t of the variable. */\n       if (offset >= start->offset\n-\t  && offset < (start->offset + start->size))\n+\t  && (offset - start->offset) < start->size)\n \treturn start;\n \n       start= start->next;\n@@ -4062,7 +4065,7 @@ first_or_preceding_vi_for_offset (varinfo_t start,\n      directly preceding offset which may be the last field.  */\n   while (start->next\n \t && offset >= start->offset\n-\t && !(offset < (start->offset + start->size)))\n+\t && !((offset - start->offset) < start->size))\n     start = start->next;\n \n   return start;\n@@ -4286,21 +4289,22 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n static unsigned int\n count_num_arguments (tree decl, bool *is_varargs)\n {\n-  unsigned int i = 0;\n+  unsigned int num = 0;\n   tree t;\n \n-  for (t = TYPE_ARG_TYPES (TREE_TYPE (decl));\n-       t;\n-       t = TREE_CHAIN (t))\n-    {\n-      if (TREE_VALUE (t) == void_type_node)\n-\tbreak;\n-      i++;\n-    }\n+  /* Capture named arguments for K&R functions.  They do not\n+     have a prototype and thus no TYPE_ARG_TYPES.  */\n+  for (t = DECL_ARGUMENTS (decl); t; t = TREE_CHAIN (t))\n+    ++num;\n \n+  /* Check if the function has variadic arguments.  */\n+  for (t = TYPE_ARG_TYPES (TREE_TYPE (decl)); t; t = TREE_CHAIN (t))\n+    if (TREE_VALUE (t) == void_type_node)\n+      break;\n   if (!t)\n     *is_varargs = true;\n-  return i;\n+\n+  return num;\n }\n \n /* Creation function node for DECL, using NAME, and return the index\n@@ -5654,7 +5658,8 @@ struct gimple_opt_pass pass_build_ealias =\n static bool\n gate_ipa_pta (void)\n {\n-  return (flag_ipa_pta\n+  return (optimize\n+\t  && flag_ipa_pta\n \t  /* Don't bother doing anything if the program has errors.  */\n \t  && !(errorcount || sorrycount));\n }"}]}