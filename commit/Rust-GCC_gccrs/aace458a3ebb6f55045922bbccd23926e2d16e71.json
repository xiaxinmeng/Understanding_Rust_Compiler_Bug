{"sha": "aace458a3ebb6f55045922bbccd23926e2d16e71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjZTQ1OGEzZWJiNmY1NTA0NTkyMmJiY2NkMjM5MjZlMmQxNmU3MQ==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@adacore.com", "date": "2007-10-15T13:54:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-10-15T13:54:02Z"}, "message": "adaint.c, [...]: Initial port to arm-mentor-nucleus.\n\n2007-10-15  Geert Bosch  <bosch@adacore.com>\n\n\t* adaint.c, socket.c, cal.c: Initial port to arm-mentor-nucleus.\n\n\t* expect.c: Initial port to arm-mentor-nucleus.\n\tUse kill for __gnat_kill() on VMS.\n\nFrom-SVN: r129319", "tree": {"sha": "cfc09e8f4cf655b1ac7a9d7401ed327f6d481fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfc09e8f4cf655b1ac7a9d7401ed327f6d481fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aace458a3ebb6f55045922bbccd23926e2d16e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aace458a3ebb6f55045922bbccd23926e2d16e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aace458a3ebb6f55045922bbccd23926e2d16e71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aace458a3ebb6f55045922bbccd23926e2d16e71/comments", "author": null, "committer": null, "parents": [{"sha": "67ce0d7e96fd6802815643dbfb8505fad5318e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ce0d7e96fd6802815643dbfb8505fad5318e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ce0d7e96fd6802815643dbfb8505fad5318e95"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "f5d4d10da01ad0db8937b50046597277391d887d", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=aace458a3ebb6f55045922bbccd23926e2d16e71", "patch": "@@ -94,6 +94,7 @@\n #include <utime.h>\n #endif\n \n+/* wait.h processing */\n #ifdef __MINGW32__\n #if OLD_MINGW\n #include <sys/wait.h>\n@@ -108,7 +109,10 @@\n    preventing the inclusion of the GCC header from doing anything.  */\n #define GCC_RESOURCE_H\n #include <sys/wait.h>\n+#elif defined (__nucleus__)\n+/* No wait() or waitpid() calls available */\n #else\n+/* Default case */\n #include <sys/wait.h>\n #endif\n \n@@ -275,7 +279,7 @@ const int __gnat_vmsp = 0;\n #elif defined (VMS)\n #define GNAT_MAX_PATH_LEN 256 /* PATH_MAX */\n \n-#elif defined (__vxworks) || defined (__OPENNT)\n+#elif defined (__vxworks) || defined (__OPENNT) || defined(__nucleus__)\n #define GNAT_MAX_PATH_LEN PATH_MAX\n \n #else\n@@ -391,38 +395,34 @@ __gnat_to_gm_time\n \n /* Place the contents of the symbolic link named PATH in the buffer BUF,\n    which has size BUFSIZ.  If PATH is a symbolic link, then return the number\n-   of characters of its content in BUF.  Otherwise, return -1.  For Windows,\n-   OS/2 and vxworks, always return -1.  */\n+   of characters of its content in BUF.  Otherwise, return -1.\n+   For systems not supporting symbolic links, always return -1.  */\n \n int\n __gnat_readlink (char *path ATTRIBUTE_UNUSED,\n \t\t char *buf ATTRIBUTE_UNUSED,\n \t\t size_t bufsiz ATTRIBUTE_UNUSED)\n {\n-#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__)\n-  return -1;\n-#elif defined (__INTERIX) || defined (VMS)\n-  return -1;\n-#elif defined (__vxworks)\n+#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \\\n+  || defined (__INTERIX) || defined (VMS) \\\n+  || defined(__vxworks) || defined (__nucleus__)\n   return -1;\n #else\n   return readlink (path, buf, bufsiz);\n #endif\n }\n \n-/* Creates a symbolic link named NEWPATH which contains the string OLDPATH.  If\n-   NEWPATH exists it will NOT be overwritten.  For Windows, OS/2, VxWorks,\n-   Interix and VMS, always return -1. */\n+/* Creates a symbolic link named NEWPATH which contains the string OLDPATH.\n+   If NEWPATH exists it will NOT be overwritten.\n+   For systems not supporting symbolic links, always return -1.  */\n \n int\n __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n \t\tchar *newpath ATTRIBUTE_UNUSED)\n {\n-#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__)\n-  return -1;\n-#elif defined (__INTERIX) || defined (VMS)\n-  return -1;\n-#elif defined (__vxworks)\n+#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \\\n+  || defined (__INTERIX) || defined (VMS) \\\n+  || defined(__vxworks) || defined (__nucleus__)\n   return -1;\n #else\n   return symlink (oldpath, newpath);\n@@ -431,7 +431,7 @@ __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n \n /* Try to lock a file, return 1 if success.  */\n \n-#if defined (__vxworks) || defined (MSDOS) || defined (_WIN32)\n+#if defined (__vxworks) || defined (__nucleus__) || defined (MSDOS) || defined (_WIN32)\n \n /* Version that does not use link. */\n \n@@ -888,6 +888,8 @@ __gnat_open_new_temp (char *path, int fmode)\n   return mkstemp (path);\n #elif defined (__Lynx__)\n   mktemp (path);\n+#elif defined (__nucleus__)\n+  return -1;\n #else\n   if (mktemp (path) == NULL)\n     return -1;\n@@ -1649,7 +1651,7 @@ __gnat_is_writable_file (char *name)\n void\n __gnat_set_writable (char *name)\n {\n-#ifndef __vxworks\n+#if ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n \n   if (stat (name, &statbuf) == 0)\n@@ -1663,7 +1665,7 @@ __gnat_set_writable (char *name)\n void\n __gnat_set_executable (char *name)\n {\n-#ifndef __vxworks\n+#if ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n \n   if (stat (name, &statbuf) == 0)\n@@ -1677,7 +1679,7 @@ __gnat_set_executable (char *name)\n void\n __gnat_set_readonly (char *name)\n {\n-#ifndef __vxworks\n+#if ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n \n   if (stat (name, &statbuf) == 0)\n@@ -1691,7 +1693,7 @@ __gnat_set_readonly (char *name)\n int\n __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n {\n-#if defined (__vxworks)\n+#if defined (__vxworks) || defined (__nucleus__)\n   return 0;\n \n #elif defined (_AIX) || defined (__APPLE__) || defined (__unix__)\n@@ -1739,7 +1741,7 @@ __gnat_portable_spawn (char *args[])\n   else\n     return status;\n \n-#elif defined (__vxworks)\n+#elif defined (__vxworks) || defined(__nucleus__)\n   return -1;\n #else\n \n@@ -2039,7 +2041,7 @@ __gnat_portable_no_block_spawn (char *args[])\n   pid = win32_no_block_spawn (args[0], args);\n   return pid;\n \n-#elif defined (__vxworks)\n+#elif defined (__vxworks) || defined (__nucleus__)\n   return -1;\n \n #else\n@@ -2074,7 +2076,7 @@ __gnat_portable_wait (int *process_status)\n #elif defined (__EMX__) || defined (MSDOS)\n   /* ??? See corresponding comment in portable_no_block_spawn.  */\n \n-#elif defined (__vxworks)\n+#elif defined (__vxworks) || defined (__nucleus__)\n   /* Not sure what to do here, so do same as __EMX__ case, i.e., nothing but\n      return zero.  */\n #else\n@@ -2897,7 +2899,7 @@ char __gnat_environment_char = '$';\n int\n __gnat_copy_attribs (char *from, char *to, int mode)\n {\n-#if defined (VMS) || defined (__vxworks)\n+#if defined (VMS) || defined (__vxworks) || defined (__nucleus__)\n   return -1;\n #else\n   struct stat fbuf;"}, {"sha": "38f68a8894259cee5163eef0c27cd2e0ddb3d615", "filename": "gcc/ada/cal.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fcal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fcal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcal.c?ref=aace458a3ebb6f55045922bbccd23926e2d16e71", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -36,7 +36,7 @@\n /*  struct timeval fields type are not normalized (they are generally       */\n /*  defined as int or long values).                                         */\n \n-#if defined(VMS)\n+#if defined(VMS) || defined(__nucleus__)\n \n /* this is temporary code to avoid build failure under VMS */\n \n@@ -62,6 +62,8 @@ __gnat_duration_to_timeval (long sec, long usec, void *t)\n #else\n #include <sys/times.h>\n #endif\n+#elif defined (__nucleus__)\n+#include <time.h>\n #else\n #include <sys/time.h>\n #endif"}, {"sha": "a9092328281ee55832c5109c098b6219aa27fb25", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=aace458a3ebb6f55045922bbccd23926e2d16e71", "patch": "@@ -55,6 +55,8 @@\n /* ??? See comment in adaint.c.  */\n #define GCC_RESOURCE_H\n #include <sys/wait.h>\n+#elif defined (__nucleus__)\n+/* No wait.h available on Nucleus */\n #else\n #include <sys/wait.h>\n #endif\n@@ -243,6 +245,13 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n #include <stdio.h>\n #include <vms/stsdef.h>\n #include <vms/iodef.h>\n+#include <signal.h>\n+\n+void\n+__gnat_kill (int pid, int sig, int close)\n+{\n+  kill (pid, sig);\n+}\n \n int\n __gnat_waitpid (int pid)\n@@ -367,8 +376,7 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n \n   return ready;\n }\n-\n-#elif defined (__unix__)\n+#elif defined (__unix__) && !defined (__nucleus__)\n \n #ifdef __hpux__\n #include <sys/ptyio.h>"}, {"sha": "913d1ca40f6a344d8dca77de82bfa57a7824863e", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aace458a3ebb6f55045922bbccd23926e2d16e71/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=aace458a3ebb6f55045922bbccd23926e2d16e71", "patch": "@@ -31,7 +31,10 @@\n  ****************************************************************************/\n \n /*  This file provides a portable binding to the sockets API                */\n-\n+#if defined (__nucleus__)\n+/* ??? Need proper implementation */\n+#warning Sockets not yet supported on Nucleus\n+#else\n #include \"gsocket.h\"\n /* Include all the necessary system-specific headers and define the\n    necessary macros (shared with gen-soccon). */\n@@ -408,3 +411,4 @@ __gnat_get_h_errno (void) {\n   return h_errno;\n #endif\n }\n+#endif /* __nucleus__ */"}]}