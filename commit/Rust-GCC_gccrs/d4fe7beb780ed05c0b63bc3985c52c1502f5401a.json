{"sha": "d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmZTdiZWI3ODBlZDA1YzBiNjNiYzM5ODVjNTJjMTUwMmY1NDAxYQ==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2013-09-30T18:11:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-09-30T18:11:42Z"}, "message": "compiler: Use backend interface for variable expressions.\n\n\t* go-gcc.cc (Backend::error_expression): New function.\n\t(Backend::var_expression): New function.\n\t(Backend::indirect_expression): New function.\n\nFrom-SVN: r203038", "tree": {"sha": "52d8a99ea0a6d13dcfb7adcea2e76a201c696426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d8a99ea0a6d13dcfb7adcea2e76a201c696426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/comments", "author": null, "committer": null, "parents": [{"sha": "a10bad862ffabecf122bfbb6b506be673c867b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10bad862ffabecf122bfbb6b506be673c867b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10bad862ffabecf122bfbb6b506be673c867b89"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "8c3a3bda041a294853ff204f26bbb85ccd143544", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "patch": "@@ -1,3 +1,9 @@\n+2013-09-30  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (Backend::error_expression): New function.\n+\t(Backend::var_expression): New function.\n+\t(Backend::indirect_expression): New function.\n+\n 2013-09-25  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (gospec.o): Remove."}, {"sha": "df8c4fc6d943c11c092ec38dac4da178de0f8730", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "patch": "@@ -208,6 +208,16 @@ class Gcc_backend : public Backend\n   Bexpression*\n   zero_expression(Btype*);\n \n+  Bexpression*\n+  error_expression()\n+  { return this->make_expression(error_mark_node); }\n+\n+  Bexpression*\n+  var_expression(Bvariable* var, Location);\n+\n+  Bexpression*\n+  indirect_expression(Bexpression* expr, bool known_valid, Location);\n+\n   // Statements.\n \n   Bstatement*\n@@ -848,6 +858,30 @@ Gcc_backend::zero_expression(Btype* btype)\n   return tree_to_expr(ret);\n }\n \n+// An expression that references a variable.\n+\n+Bexpression*\n+Gcc_backend::var_expression(Bvariable* var, Location)\n+{\n+  tree ret = var->get_tree();\n+  if (ret == error_mark_node)\n+    return this->error_expression();\n+  return tree_to_expr(ret);\n+}\n+\n+// An expression that indirectly references an expression.\n+\n+Bexpression*\n+Gcc_backend::indirect_expression(Bexpression* expr, bool known_valid,\n+                                 Location location)\n+{\n+  tree ret = build_fold_indirect_ref_loc(location.gcc_location(),\n+                                         expr->get_tree());\n+  if (known_valid)\n+    TREE_THIS_NOTRAP(ret) = 1;\n+  return tree_to_expr(ret);\n+}\n+\n // An expression as a statement.\n \n Bstatement*"}, {"sha": "18a594736c48f72c05515c37cea9d74e201b8837", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "patch": "@@ -231,6 +231,22 @@ class Backend\n   virtual Bexpression*\n   zero_expression(Btype*) = 0;\n \n+  // Create an error expression. This is used for cases which should\n+  // not occur in a correct program, in order to keep the compilation\n+  // going without crashing.\n+  virtual Bexpression*\n+  error_expression() = 0;\n+\n+  // Create a reference to a variable.\n+  virtual Bexpression*\n+  var_expression(Bvariable* var, Location) = 0;\n+\n+  // Create an expression that indirects through the pointer expression EXPR\n+  // (i.e., return the expression for *EXPR). KNOWN_VALID is true if the pointer\n+  // is known to point to a valid memory location.\n+  virtual Bexpression*\n+  indirect_expression(Bexpression* expr, bool known_valid, Location) = 0;\n+\n   // Statements.\n \n   // Create an error statement.  This is used for cases which should"}, {"sha": "430422c387633fa4244b17346b408eb78a2bac8a", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fe7beb780ed05c0b63bc3985c52c1502f5401a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=d4fe7beb780ed05c0b63bc3985c52c1502f5401a", "patch": "@@ -978,22 +978,19 @@ Var_expression::do_get_tree(Translate_context* context)\n {\n   Bvariable* bvar = this->variable_->get_backend_variable(context->gogo(),\n \t\t\t\t\t\t\t  context->function());\n-  tree ret = var_to_tree(bvar);\n-  if (ret == error_mark_node)\n-    return error_mark_node;\n   bool is_in_heap;\n+  Location loc = this->location();\n   if (this->variable_->is_variable())\n     is_in_heap = this->variable_->var_value()->is_in_heap();\n   else if (this->variable_->is_result_variable())\n     is_in_heap = this->variable_->result_var_value()->is_in_heap();\n   else\n     go_unreachable();\n+\n+  Bexpression* ret = context->backend()->var_expression(bvar, loc);\n   if (is_in_heap)\n-    {\n-      ret = build_fold_indirect_ref_loc(this->location().gcc_location(), ret);\n-      TREE_THIS_NOTRAP(ret) = 1;\n-    }\n-  return ret;\n+    ret = context->backend()->indirect_expression(ret, true, loc);\n+  return expr_to_tree(ret);\n }\n \n // Ast dump for variable expression."}]}