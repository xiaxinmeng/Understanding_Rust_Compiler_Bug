{"sha": "ad1614a7bf91e925ba8d93b8029c83e933ae482f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxNjE0YTdiZjkxZTkyNWJhOGQ5M2I4MDI5YzgzZTkzM2FlNDgyZg==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-11T15:43:16Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-11T15:43:16Z"}, "message": "re PR fortran/31820 (Warning if case label value exceeds maximum value for type)\n\ngcc/fortran/:\n2010-05-11  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/31820\n\t* resolve.c (validate_case_label_expr): Removed FIXME.\n\t(resolve_select): Raise default warning on case labels out of range\n\tof the case expression.\n\ngcc/testsuite/:\n2010-05-11  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/31820\n\t* gfortran.dg/select_5.f90: Updated.\n\nFrom-SVN: r159278", "tree": {"sha": "e0864ee4352d26fbcacdda3277d6f9877faa1754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0864ee4352d26fbcacdda3277d6f9877faa1754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1614a7bf91e925ba8d93b8029c83e933ae482f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1614a7bf91e925ba8d93b8029c83e933ae482f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1614a7bf91e925ba8d93b8029c83e933ae482f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1614a7bf91e925ba8d93b8029c83e933ae482f/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aa1419556f53e401b1ba132a3dc500947141a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa1419556f53e401b1ba132a3dc500947141a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa1419556f53e401b1ba132a3dc500947141a45"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "1b8c65ceaa49b61238c18cd927af10063d9a7c3d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ad1614a7bf91e925ba8d93b8029c83e933ae482f", "patch": "@@ -1,9 +1,16 @@\n+2010-05-11  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31820\n+\t* resolve.c (validate_case_label_expr): Removed FIXME.\n+\t(resolve_select): Raise default warning on case labels out of range\n+\tof the case expression.\n+\n 2010-05-10  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/27866\n \tPR fortran/35003\n \tPR fortran/42809\n-\t* intrinsic.c (gfc_convert_type_warn): Be more dicsriminative\n+\t* intrinsic.c (gfc_convert_type_warn): Be more discriminative\n \tabout conversion warnings.\n \n 2010-05-10  Janus Weil  <janus@gcc.gnu.org>"}, {"sha": "da8d896cba5a5af1cf4b33b1fb6af4df8d47ba51", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ad1614a7bf91e925ba8d93b8029c83e933ae482f", "patch": "@@ -6747,8 +6747,9 @@ validate_case_label_expr (gfc_expr *e, gfc_expr *case_expr)\n       return FAILURE;\n     }\n \n-  /* Convert the case value kind to that of case expression kind, if needed.\n-     FIXME:  Should a warning be issued?  */\n+  /* Convert the case value kind to that of case expression kind,\n+     if needed */\n+\n   if (e->ts.kind != case_expr->ts.kind)\n     gfc_convert_type_warn (e, &case_expr->ts, 2, 0);\n \n@@ -6834,6 +6835,31 @@ resolve_select (gfc_code *code)\n       return;\n     }\n \n+\n+  /* Raise a warning if an INTEGER case value exceeds the range of\n+     the case-expr. Later, all expressions will be promoted to the\n+     largest kind of all case-labels.  */\n+\n+  if (type == BT_INTEGER)\n+    for (body = code->block; body; body = body->block)\n+      for (cp = body->ext.case_list; cp; cp = cp->next)\n+\t{\n+\t  if (cp->low\n+\t      && gfc_check_integer_range (cp->low->value.integer,\n+\t\t\t\t\t  case_expr->ts.kind) != ARITH_OK)\n+\t    gfc_warning (\"Expression in CASE statement at %L is \"\n+\t\t\t \"not in the range of %s\", &cp->low->where,\n+\t\t\t gfc_typename (&case_expr->ts));\n+\n+\t  if (cp->high\n+\t      && cp->low != cp->high\n+\t      && gfc_check_integer_range (cp->high->value.integer,\n+\t\t\t\t\t  case_expr->ts.kind) != ARITH_OK)\n+\t    gfc_warning (\"Expression in CASE statement at %L is \"\n+\t\t\t \"not in the range of %s\", &cp->high->where,\n+\t\t\t gfc_typename (&case_expr->ts));\n+\t}\n+\n   /* PR 19168 has a long discussion concerning a mismatch of the kinds\n      of the SELECT CASE expression and its CASE values.  Walk the lists\n      of case values, and if we find a mismatch, promote case_expr to\n@@ -6856,7 +6882,6 @@ resolve_select (gfc_code *code)\n \t\t  && gfc_compare_expr (cp->low, cp->high, INTRINSIC_GT) > 0)\n \t\tcontinue;\n \n-\t      /* FIXME: Should a warning be issued?  */\n \t      if (cp->low != NULL\n \t\t  && case_expr->ts.kind != gfc_kind_max(case_expr, cp->low))\n \t\tgfc_convert_type_warn (case_expr, &cp->low->ts, 2, 0);\n@@ -6907,8 +6932,8 @@ resolve_select (gfc_code *code)\n \n \t  /* Deal with single value cases and case ranges.  Errors are\n \t     issued from the validation function.  */\n-\t  if(validate_case_label_expr (cp->low, case_expr) != SUCCESS\n-\t     || validate_case_label_expr (cp->high, case_expr) != SUCCESS)\n+\t  if (validate_case_label_expr (cp->low, case_expr) != SUCCESS\n+\t      || validate_case_label_expr (cp->high, case_expr) != SUCCESS)\n \t    {\n \t      t = FAILURE;\n \t      break;\n@@ -6930,7 +6955,7 @@ resolve_select (gfc_code *code)\n \t      value = cp->low->value.logical == 0 ? 2 : 1;\n \t      if (value & seen_logical)\n \t\t{\n-\t\t  gfc_error (\"constant logical value in CASE statement \"\n+\t\t  gfc_error (\"Constant logical value in CASE statement \"\n \t\t\t     \"is repeated at %L\",\n \t\t\t     &cp->low->where);\n \t\t  t = FAILURE;"}, {"sha": "29b19b9c4e7da1a66b7fd07ae3f75002e9a52698", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad1614a7bf91e925ba8d93b8029c83e933ae482f", "patch": "@@ -1,3 +1,8 @@\n+2010-05-11  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31820\n+\t* gfortran.dg/select_5.f90: Updated.\n+\n 2010-05-11  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/44063"}, {"sha": "9afc1603ba2cb33a3007f9ad0e44eec7a3bd3135", "filename": "gcc/testsuite/gfortran.dg/select_5.f90", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1614a7bf91e925ba8d93b8029c83e933ae482f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90?ref=ad1614a7bf91e925ba8d93b8029c83e933ae482f", "patch": "@@ -3,13 +3,20 @@\n program select_5\n   integer(kind=1) i          ! kind = 1, -128 <= i < 127\n   do i = 1, 3\n-    select case (i)     \n-    case (1_4)         ! kind = 4, reachable\n+    select case (i)\n+\n+    ! kind = 4, reachable\n+    case (1_4)\n       if (i /=  1_4) call abort\n-    case (2_8)         ! kind = 8, reachable\n+\n+    ! kind = 8, reachable\n+    case (2_8)\n       if (i /= 2_8) call abort\n-    case (200)         ! kind = 4, unreachable because of range of i\n+\n+    ! kind = 4, unreachable because of range of i\n+    case (200)                       ! { dg-warning \"not in the range\" }\n       call abort\n+\n     case default\n       if (i /= 3) call abort\n     end select"}]}