{"sha": "50b3f54d551787e0a066451ef60ef3b055a893e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiM2Y1NGQ1NTE3ODdlMGEwNjY0NTFlZjYwZWYzYjA1NWE4OTNlNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-09T17:59:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-09T17:59:10Z"}, "message": "Remove COMPL_HARD_REG_SET\n\n\"COMPL_HARD_REG_SET (x, y)\" becomes \"x = ~y\".\n\n2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* hard-reg-set.h (HARD_REG_SET::operator~): New function.\n\t(COMPL_HARD_REG_SET): Delete.\n\t* config/c6x/c6x.c (c6x_call_saved_register_used): Use ~ instead\n\tof COMPL_HARD_REG_SET.\n\t(try_rename_operands): Likewise.\n\t* config/sh/sh.c (push_regs): Likewise.\n\t* lra-assigns.c (find_hard_regno_for_1): Likewise.\n\t* lra-constraints.c (contains_reg_p): Likewise.\n\t* reload1.c (finish_spills, choose_reload_regs_init): Likewise.\n\nFrom-SVN: r275529", "tree": {"sha": "b8072c5a072c571f7f8507ee28b4c867d9f176e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8072c5a072c571f7f8507ee28b4c867d9f176e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b3f54d551787e0a066451ef60ef3b055a893e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b3f54d551787e0a066451ef60ef3b055a893e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b3f54d551787e0a066451ef60ef3b055a893e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b3f54d551787e0a066451ef60ef3b055a893e6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6576d245386e2ce52df274ef8f2ffed81cfaa1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6576d245386e2ce52df274ef8f2ffed81cfaa1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6576d245386e2ce52df274ef8f2ffed81cfaa1c3"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "69b742a0c4d15a5e34f39e8921a4e1273c4a2ea1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50b3f54d551787e0a066451ef60ef3b055a893e6", "patch": "@@ -1,3 +1,15 @@\n+2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hard-reg-set.h (HARD_REG_SET::operator~): New function.\n+\t(COMPL_HARD_REG_SET): Delete.\n+\t* config/c6x/c6x.c (c6x_call_saved_register_used): Use ~ instead\n+\tof COMPL_HARD_REG_SET.\n+\t(try_rename_operands): Likewise.\n+\t* config/sh/sh.c (push_regs): Likewise.\n+\t* lra-assigns.c (find_hard_regno_for_1): Likewise.\n+\t* lra-constraints.c (contains_reg_p): Likewise.\n+\t* reload1.c (finish_spills, choose_reload_regs_init): Likewise.\n+\n 2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hard-reg-set.h (COPY_HARD_REG_SET): Delete."}, {"sha": "f6a45184bb51ad024c54dea0d7d43a09f4bf96ce", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=50b3f54d551787e0a066451ef60ef3b055a893e6", "patch": "@@ -1094,7 +1094,7 @@ c6x_call_saved_register_used (tree call_expr)\n   INIT_CUMULATIVE_ARGS (cum_v, NULL, NULL, 0, 0);\n   cum = pack_cumulative_args (&cum_v);\n \n-  COMPL_HARD_REG_SET (call_saved_regset, call_used_reg_set);\n+  call_saved_regset = ~call_used_reg_set;\n   for (i = 0; i < call_expr_nargs (call_expr); i++)\n     {\n       parameter = CALL_EXPR_ARG (call_expr, i);\n@@ -3472,7 +3472,7 @@ try_rename_operands (rtx_insn *head, rtx_insn *tail, unit_req_table reqs,\n     }\n \n   /* If we get here, we can do the renaming.  */\n-  COMPL_HARD_REG_SET (unavailable, reg_class_contents[(int) super_class]);\n+  unavailable = ~reg_class_contents[super_class];\n \n   old_reg = this_head->regno;\n   best_reg ="}, {"sha": "4b70ac950752a6c1707ddfb5404208350dc3c57e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=50b3f54d551787e0a066451ef60ef3b055a893e6", "patch": "@@ -6908,11 +6908,8 @@ push_regs (HARD_REG_SET *mask, bool interrupt_handler)\n       if (i == FIRST_FP_REG && interrupt_handler && TARGET_FMOVD\n \t  && hard_reg_set_intersect_p (*mask, reg_class_contents[DF_REGS]))\n \t{\n-\t  HARD_REG_SET unsaved;\n-\n \t  push (FPSCR_REG);\n-\t  COMPL_HARD_REG_SET (unsaved, *mask);\n-\t  fpscr_set_from_mem (NORMAL_MODE (FP_MODE), unsaved);\n+\t  fpscr_set_from_mem (NORMAL_MODE (FP_MODE), ~*mask);\n \t  skip_fpscr = true;\n \t}\n       if (i != PR_REG"}, {"sha": "ca663e82ae9abba4303f9d9579e8dd96a947cb62", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=50b3f54d551787e0a066451ef60ef3b055a893e6", "patch": "@@ -53,6 +53,15 @@ typedef const HARD_REG_SET const_hard_reg_set;\n \n struct HARD_REG_SET\n {\n+  HARD_REG_SET\n+  operator~ () const\n+  {\n+    HARD_REG_SET res;\n+    for (unsigned int i = 0; i < ARRAY_SIZE (elts); ++i)\n+      res.elts[i] = ~elts[i];\n+    return res;\n+  }\n+\n   HARD_REG_ELT_TYPE elts[HARD_REG_SET_LONGS];\n };\n typedef const HARD_REG_SET &const_hard_reg_set;\n@@ -83,11 +92,6 @@ struct hard_reg_set_container\n    CLEAR_HARD_REG_SET and SET_HARD_REG_SET.\n    These take just one argument.\n \n-   Also define macros for copying the complement of a hard reg set:\n-   COMPL_HARD_REG_SET.\n-   This takes two arguments TO and FROM; it reads from FROM\n-   and stores into TO.\n-\n    Also define macros for combining hard reg sets:\n    IOR_HARD_REG_SET and AND_HARD_REG_SET.\n    These take two arguments TO and FROM; they read from FROM\n@@ -116,8 +120,6 @@ struct hard_reg_set_container\n #define CLEAR_HARD_REG_SET(TO) ((TO) = HARD_CONST (0))\n #define SET_HARD_REG_SET(TO) ((TO) = ~ HARD_CONST (0))\n \n-#define COMPL_HARD_REG_SET(TO, FROM) ((TO) = ~(FROM))\n-\n #define IOR_HARD_REG_SET(TO, FROM) ((TO) |= (FROM))\n #define IOR_COMPL_HARD_REG_SET(TO, FROM) ((TO) |= ~ (FROM))\n #define AND_HARD_REG_SET(TO, FROM) ((TO) &= (FROM))\n@@ -184,13 +186,6 @@ SET_HARD_REG_SET (HARD_REG_SET &set)\n     set.elts[i] = -1;\n }\n \n-inline void\n-COMPL_HARD_REG_SET (HARD_REG_SET &to, const_hard_reg_set from)\n-{\n-  for (unsigned int i = 0; i < ARRAY_SIZE (to.elts); ++i)\n-    to.elts[i] = ~from.elts[i];\n-}\n-\n inline void\n AND_HARD_REG_SET (HARD_REG_SET &to, const_hard_reg_set from)\n {"}, {"sha": "8c07e90e1646b50df8e929de0abe75538230a210", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=50b3f54d551787e0a066451ef60ef3b055a893e6", "patch": "@@ -496,7 +496,7 @@ find_hard_regno_for_1 (int regno, int *cost, int try_only_hard_regno,\n     conflict_set = lra_no_alloc_regs;\n   else\n     {\n-      COMPL_HARD_REG_SET (conflict_set, regno_set);\n+      conflict_set = ~regno_set;\n       IOR_HARD_REG_SET (conflict_set, lra_no_alloc_regs);\n     }\n   rclass = regno_allocno_class_array[regno];"}, {"sha": "c3f0c6ec68185b7aa879b9dad5823137e4eb78eb", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=50b3f54d551787e0a066451ef60ef3b055a893e6", "patch": "@@ -4559,7 +4559,7 @@ contains_reg_p (rtx x, bool hard_reg_p, bool spilled_p)\n \t    regno = lra_get_regno_hard_regno (regno);\n \t  if (regno < 0)\n \t    return false;\n-\t  COMPL_HARD_REG_SET (alloc_regs, lra_no_alloc_regs);\n+\t  alloc_regs = ~lra_no_alloc_regs;\n \t  return overlaps_hard_reg_set_p (alloc_regs, GET_MODE (x), regno);\n \t}\n       else"}, {"sha": "b2c83045eedac5ab455369bbb0cfd160aa4e86e8", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b3f54d551787e0a066451ef60ef3b055a893e6/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=50b3f54d551787e0a066451ef60ef3b055a893e6", "patch": "@@ -4310,7 +4310,7 @@ finish_spills (int global)\n \t     may be not included in the value calculated here because\n \t     of possible removing caller-saves insns (see function\n \t     delete_caller_save_insns.  */\n-\t  COMPL_HARD_REG_SET (chain->used_spill_regs, used_by_pseudos);\n+\t  chain->used_spill_regs = ~used_by_pseudos;\n \t  AND_HARD_REG_SET (chain->used_spill_regs, used_spill_regs);\n \t}\n     }\n@@ -6257,7 +6257,7 @@ choose_reload_regs_init (class insn_chain *chain, rtx *save_reload_reg_rtx)\n       CLEAR_HARD_REG_SET (reload_reg_used_in_outaddr_addr[i]);\n     }\n \n-  COMPL_HARD_REG_SET (reload_reg_unavailable, chain->used_spill_regs);\n+  reload_reg_unavailable = ~chain->used_spill_regs;\n \n   CLEAR_HARD_REG_SET (reload_reg_used_for_inherit);\n "}]}