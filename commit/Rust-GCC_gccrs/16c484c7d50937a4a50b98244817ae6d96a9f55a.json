{"sha": "16c484c7d50937a4a50b98244817ae6d96a9f55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjNDg0YzdkNTA5MzdhNGE1MGI5ODI0NDgxN2FlNmQ5NmE5ZjU1YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2002-01-08T22:51:46Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2002-01-08T22:51:46Z"}, "message": "tm.texi (EASY_DIV_EXPR, [...]): Remove documentation of obsolete macros.\n\n\t* doc/tm.texi (EASY_DIV_EXPR, IMPLICIT_FIX_EXPR,\n\tLONGJMP_RESTORE_FROM_STACK, MAX_INT_TYPE_SIZE): Remove\n\tdocumentation of obsolete macros.\n\t* system.h: Poison these macros.\n\t* config/1750a/1750a.h, config/a29k/a29k.h, config/alpha/alpha.h,\n\tconfig/arc/arc.h, config/arm/arm.h, config/avr/avr.h,\n\tconfig/c4x/c4x.h, config/clipper/clipper.h,\n\tconfig/convex/convex.h, config/cris/cris.h, config/d30v/d30v.h,\n\tconfig/dsp16xx/dsp16xx.h, config/elxsi/elxsi.h,\n\tconfig/fr30/fr30.h, config/h8300/h8300.h, config/i370/i370.h,\n\tconfig/i386/i386.h, config/i860/i860.h, config/i960/i960.h,\n\tconfig/ia64/ia64.h, config/m32r/m32r.h, config/m68hc11/m68hc11.h,\n\tconfig/m68k/m68k.h, config/m88k/m88k.h, config/mcore/mcore.h,\n\tconfig/mips/mips.h, config/mmix/mmix.h, config/mn10200/mn10200.h,\n\tconfig/mn10300/mn10300.h, config/ns32k/ns32k.h, config/pa/pa.h,\n\tconfig/pdp11/pdp11.h, config/pj/pj.h, config/romp/romp.h,\n\tconfig/rs6000/rs6000.h, config/s390/s390.h, config/sh/sh.h,\n\tconfig/sparc/sparc.h, config/stormy16/stormy16.h,\n\tconfig/v850/v850.h, config/vax/vax.h, config/we32k/we32k.h: Remove\n\tdefinitions and commented out definitions of obsolete macros.\n\t* config/mips/iris5.h (MAX_WCHAR_TYPE_SIZE): Don't define in terms\n\tof MAX_INT_TYPE_SIZE.\n\nFrom-SVN: r48665", "tree": {"sha": "e4e5015e4111ccbdbf214a7b2f907e291d41a411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4e5015e4111ccbdbf214a7b2f907e291d41a411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c484c7d50937a4a50b98244817ae6d96a9f55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c484c7d50937a4a50b98244817ae6d96a9f55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c484c7d50937a4a50b98244817ae6d96a9f55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c484c7d50937a4a50b98244817ae6d96a9f55a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9df09cce88e38c129319aa5dedde17d1e329190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9df09cce88e38c129319aa5dedde17d1e329190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9df09cce88e38c129319aa5dedde17d1e329190"}], "stats": {"total": 450, "additions": 70, "deletions": 380}, "files": [{"sha": "5b6b5ce104397e9c2660878c629facfef0a2669d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,3 +1,28 @@\n+2002-01-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/tm.texi (EASY_DIV_EXPR, IMPLICIT_FIX_EXPR,\n+\tLONGJMP_RESTORE_FROM_STACK, MAX_INT_TYPE_SIZE): Remove\n+\tdocumentation of obsolete macros.\n+\t* system.h: Poison these macros.\n+\t* config/1750a/1750a.h, config/a29k/a29k.h, config/alpha/alpha.h,\n+\tconfig/arc/arc.h, config/arm/arm.h, config/avr/avr.h,\n+\tconfig/c4x/c4x.h, config/clipper/clipper.h,\n+\tconfig/convex/convex.h, config/cris/cris.h, config/d30v/d30v.h,\n+\tconfig/dsp16xx/dsp16xx.h, config/elxsi/elxsi.h,\n+\tconfig/fr30/fr30.h, config/h8300/h8300.h, config/i370/i370.h,\n+\tconfig/i386/i386.h, config/i860/i860.h, config/i960/i960.h,\n+\tconfig/ia64/ia64.h, config/m32r/m32r.h, config/m68hc11/m68hc11.h,\n+\tconfig/m68k/m68k.h, config/m88k/m88k.h, config/mcore/mcore.h,\n+\tconfig/mips/mips.h, config/mmix/mmix.h, config/mn10200/mn10200.h,\n+\tconfig/mn10300/mn10300.h, config/ns32k/ns32k.h, config/pa/pa.h,\n+\tconfig/pdp11/pdp11.h, config/pj/pj.h, config/romp/romp.h,\n+\tconfig/rs6000/rs6000.h, config/s390/s390.h, config/sh/sh.h,\n+\tconfig/sparc/sparc.h, config/stormy16/stormy16.h,\n+\tconfig/v850/v850.h, config/vax/vax.h, config/we32k/we32k.h: Remove\n+\tdefinitions and commented out definitions of obsolete macros.\n+\t* config/mips/iris5.h (MAX_WCHAR_TYPE_SIZE): Don't define in terms\n+\tof MAX_INT_TYPE_SIZE.\n+\n 2002-01-08  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_preferred_reload_class): Never"}, {"sha": "21d60e91a2b63f5ee22820d6b6f849f5c5f6c9f9", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n@@ -759,12 +759,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "ff80dce693b5462074cc26d48b64a04db7f9b962", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for AMD Am29000 CPU.\n    Copyright (C) 1988, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n This file is part of GNU CC.\n@@ -1179,12 +1179,6 @@ extern const char *a29k_function_name;\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n "}, {"sha": "b56df5919d50dc8c6613d8465737823dfae76612", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -1504,12 +1504,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    but we should try to find some better way sometime.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "f29768dd722ec605c512be4d806fd5d430291d51", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -1430,12 +1430,6 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n    done, NIL if none.  */\n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4"}, {"sha": "2739508635eff72a9b101a9e9d72d82fc246115d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001 Free Software Foundation, Inc.\n+   2001, 2002 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com)\n@@ -2356,12 +2356,6 @@ typedef struct\n    Do not define this if the table should contain absolute addresses. */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR  FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR  TRUNC_DIV_EXPR\n-\n /* signed 'char' is most compatible, but RISC OS wants it unsigned.\n    unsigned is probably best, but may break some code.  */\n #ifndef DEFAULT_SIGNED_CHAR"}, {"sha": "efa47626331c3d57a1963766f950db95d06053d1", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for ATMEL AVR at90s8515, ATmega103/103L, ATmega603/603L microcontrollers.\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n This file is part of GNU CC.\n@@ -2570,15 +2570,6 @@ extern int avr_case_values_threshold;\n    register.  Most RISC machines have this property and most CISC\n    machines do not.  */\n \n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-/* An alias for a tree code that is the easiest kind of division to\n-   compile code for in the general case.  It may be `TRUNC_DIV_EXPR',\n-   `FLOOR_DIV_EXPR', `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four\n-   division operators differ in how they round the result to an\n-   integer.  `EASY_DIV_EXPR' is used when it is permissible to use\n-   any of those kinds of division and the choice should be made on\n-   the basis of efficiency.  */\n-\n #define MOVE_MAX 4\n /* The maximum number of bytes that a single instruction can move\n    quickly between memory and registers or between two memory"}, {"sha": "cadfe0c3c0f90b3c370922ef1850ea88e70e4340", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  TMS320C[34]x\n    Copyright (C) 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n    Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n               and Herman Ten Brugge (Haj.Ten.Brugge@net.HCC.nl).\n@@ -2103,10 +2103,6 @@ do { fprintf (asm_out_file, \"\\t.sdef\\t\");\t\t\\\n \t      \"%s\\t.val\\t.%s\\t.scl\\t-1%s\\t.endef\\n\",\t\\\n \t      SDB_DELIM, SDB_DELIM, SDB_DELIM); } while (0)\n \n-/* This is the kind of divide that is easiest to do in the general case.  */\n-\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n \n #define DEFAULT_SIGNED_CHAR 1"}, {"sha": "473cab60ed1167cbecbc835c34c86bbc434b8f41", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  Clipper version.\n    Copyright (C) 1987, 1988, 1991, 1993, 1994, 1995, 1996, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n This file is part of GNU CC.\n@@ -338,10 +338,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS, LIM_REG_CLASSES};\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if longjmp restores from saved registers\n-   rather than from what setjmp saved.  */\n-/* #define LONGJMP_RESTORE_FROM_STACK */\n-\n /* Define this if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n@@ -780,12 +776,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n    done, NIL if none.  */\n #define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "7f3d41c8833855345ffcfb1a26a5c99557b7301f", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler.  Convex version.\n-   Copyright (C) 1988, 1994, 1995, 1996, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1995, 1996, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1019,12 +1020,6 @@ enum reg_class {\n    jumps to the default label instead.  */\n /* #define CASE_DROPS_THROUGH */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "5999bfbbf5bc64782e0dcb014bb15e9cfca78a61", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -1790,12 +1790,8 @@ struct cum_args {int regs;};\n /* FIXME: Investigate CASE_VECTOR_SHORTEN_MODE to make sure HImode is not\n    used when broken-.word could possibly fail (plus test-case).  */\n \n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n #define FIXUNS_TRUNC_LIKE_FIX_TRUNC\n \n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* This is the number of bytes that can be moved in one\n    reasonably fast instruction sequence.  For CRIS, this is two\n    instructions: mem => reg, reg => mem.  */"}, {"sha": "6b9d3818560970b5c7e6e6d69fb7699e4658638a", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -887,12 +887,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    If you don't define this, the default is one word.  */\n #define INT_TYPE_SIZE 32\n \n-/* Maximum number for the size in bits of the type `int' on the target machine.\n-   If this is undefined, the default is `INT_TYPE_SIZE'.  Otherwise, it is the\n-   constant value that is the largest value that `INT_TYPE_SIZE' can have at\n-   run-time.  This is used in `cpp'.  */\n-/* #define MAX_INT_TYPE_SIZE */\n-\n /* A C expression for the size in bits of the type `short' on the target\n    machine.  If you don't define this, the default is half a word.  (If this\n    would be less than one storage unit, it is rounded up to one unit.)  */\n@@ -2157,12 +2151,6 @@ typedef struct d30v_stack {\n     abort ();\t\t\t\t\t\t\t\t\\\n }\n \n-/* Define this macro if the `longjmp' function restores registers from the\n-   stack frames, rather than from those saved specifically by `setjmp'.\n-   Certain quantities must not be kept in registers across a call to `setjmp'\n-   on such machines.  */\n-/* #define LONGJMP_RESTORE_FROM_STACK */\n-\n \f\n /* Passing Function Arguments on the Stack */\n \n@@ -5203,23 +5191,11 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND\n \n-/* An alias for a tree code that should be used by default for conversion of\n-   floating point values to fixed point.  Normally, `FIX_ROUND_EXPR' is used.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n /* Define this macro if the same instructions that convert a floating point\n    number to a signed fixed point number also convert validly to an unsigned\n    one.  */\n /* #define FIXUNS_TRUNC_LIKE_FIX_TRUNC */\n \n-/* An alias for a tree code that is the easiest kind of division to compile\n-   code for in the general case.  It may be `TRUNC_DIV_EXPR', `FLOOR_DIV_EXPR',\n-   `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four division operators differ\n-   in how they round the result to an integer.  `EASY_DIV_EXPR' is used when it\n-   is permissible to use any of those kinds of division and the choice should\n-   be made on the basis of efficiency.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* The maximum number of bytes that a single instruction can move quickly from\n    memory to memory.  */\n #define MOVE_MAX 8"}, {"sha": "8e4873e775944738af49bdb705afb76231bc4d8d", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1889,12 +1889,6 @@ const_section ()                                                   \\\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 1"}, {"sha": "6ff4d3cc83b3c4f82a5289b83eddeae541901c3c", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Elxsi version.\n-   Copyright (C) 1987, 1988, 1992, 1995, 1996, 1998, 1999, 2000\n+   Copyright (C) 1987, 1988, 1992, 1995, 1996, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Mike Stump <mrs@cygnus.com> in 1988.  This is the first\n    64 bit port of GNU CC.\n@@ -566,12 +566,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n    Do not define this if the table should contain absolute addresses. */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "760ab22d941511b48e60634a4e7f87fc18fe933c", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,7 +1,7 @@\n /*{{{  Comment.  */ \n \n /* Definitions of FR30 target. \n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n This file is part of GNU CC.\n@@ -1568,14 +1568,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    a jump-table should have.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* An alias for a tree code that is the easiest kind of division to compile\n-   code for in the general case.  It may be `TRUNC_DIV_EXPR', `FLOOR_DIV_EXPR',\n-   `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four division operators differ\n-   in how they round the result to an integer.  `EASY_DIV_EXPR' is used when it\n-   is permissible to use any of those kinds of division and the choice should\n-   be made on the basis of efficiency.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* The maximum number of bytes that a single instruction can move quickly from\n    memory to memory.  */\n #define MOVE_MAX 8"}, {"sha": "b5affd82fcea143ac5b403ea9b8b7126acc5710b", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler. \n    Hitachi H8/300 version generating coff \n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n \n@@ -949,12 +949,6 @@ struct cum_arg\n    Do not define this if the table should contain absolute addresses.  */\n /*#define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.\n \n    On the H8/300, sign extension is expensive, so we'll say that chars"}, {"sha": "7c71b0e2077762445d70060568257c436a745074", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  System/370 version.\n-   Copyright (C) 1989, 1993, 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1989, 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Jan Stein (jan@cd.chalmers.se).\n    Modified for OS/390 LanguageEnvironment C by Dave Pitts (dpitts@cozx.com)\n@@ -861,10 +861,6 @@ enum reg_class\n \n /* #define CASE_VECTOR_PC_RELATIVE */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n /* Define this if fixuns_trunc is the same as fix_trunc.  */\n \n #define FIXUNS_TRUNC_LIKE_FIX_TRUNC\n@@ -873,10 +869,6 @@ enum reg_class\n \n #define DEFAULT_SIGNED_CHAR 0\n \n-/* This is the kind of divide that is easiest to do in the general case.  */\n-\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory in one reasonably\n    fast instruction.  */\n "}, {"sha": "125810712c0355aab1e07ddbc50f34bb499252d7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -2326,14 +2326,6 @@ do {\t\t\t\t\t\t\t\t\\\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.\n-   This should be changed to take advantage of fist --wfs ??\n- */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "ad5048c7b02ddb14e9935349e9664bb268ac7225", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for Intel 860.\n-   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002 Free Software Foundation, Inc.\n    Hacked substantially by Ron Guilmette (rfg@monkeys.com) to cater to\n    the whims of the System V Release 4 assembler.\n \n@@ -844,12 +844,6 @@ struct cumulative_args { int ints, floats; };\n    Do not define this if the table should contain absolute addresses. */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Must pass floats to libgcc functions as doubles.  */\n #define LIBGCC_NEEDS_DOUBLE 1\n "}, {"sha": "ec4b9d15b4b37c7ebd536b072e3b18d68910d23f", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for Intel 80960\n-   Copyright (C) 1992, 1993, 1995, 1996, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1995, 1996, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Steven McGeady, Intel Corp.\n    Additional Work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n@@ -1170,12 +1170,6 @@ struct cum_args { int ca_nregparms; int ca_nstackparms; };\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n "}, {"sha": "d73cee7d81b291b685ac7a31cf7401b2c04fe16b", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -2458,18 +2458,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n-/* An alias for a tree code that should be used by default for conversion of\n-   floating point values to fixed point.  */\n-\n-/* ??? Looks like this macro is obsolete and should be deleted everywhere.  */\n-\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* An alias for a tree code that is the easiest kind of division to compile\n-   code for in the general case.  */\n-\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* The maximum number of bytes that a single instruction can move quickly from\n    memory to memory.  */\n #define MOVE_MAX 8"}, {"sha": "e4554fb4bf6b483b09015649cf27fec985377a82", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1990,12 +1990,6 @@ extern char m32r_punct_chars[256];\n    done, NIL if none.  */\n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4"}, {"sha": "0ef59e6b5e17442d92a54a78939c30c3e16a0009", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n \n This file is part of GNU CC.\n@@ -1690,16 +1690,10 @@ do {                                                                    \\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE\tPmode\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR\tFIX_ROUND_EXPR\n-\n /* This flag, if defined, says the same insns that convert to a signed fixnum\n    also convert validly to an unsigned one.  */\n #define FIXUNS_TRUNC_LIKE_FIX_TRUNC\n \n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR\t\tTRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory in one\n    reasonably fast instruction.  */\n #define MOVE_MAX \t\t2"}, {"sha": "dc0835a230858bc9bf5a9ef1f98e566ea470e012", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Sun 68000/68020 version.\n    Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1519,12 +1519,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "5fbad59cfded065fdd999e3d6117510c9d65609b", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler for\n    Motorola m88100 in an 88open OCS/BCS environment.\n-   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n    Currently maintained by (gcc@dg-rtp.dg.com)\n \n@@ -1473,12 +1473,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n    win very much though.  */\n #define CASE_VALUES_THRESHOLD (TARGET_88100 ? 4 : 7)\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "a8555aec66a14a58328caab6942dc4767b2ad857", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for Motorola M*CORE Processor.\n-   Copyright (C) 1993, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -968,12 +968,6 @@ extern const enum reg_class reg_class_from_letter[];\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR  FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR  TRUNC_DIV_EXPR\n-\n /* 'char' is signed by default.  */\n #define DEFAULT_SIGNED_CHAR  0\n "}, {"sha": "883450b4202a91816a249084cd66a3941a74b79f", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  Iris version 5.\n    Copyright (C) 1993, 1995, 1996, 1998, 2000,\n-   2001 Free Software Foundation, Inc.\n+   2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define WCHAR_TYPE     \"int\"\n #define WCHAR_TYPE_SIZE        INT_TYPE_SIZE\n-#define MAX_WCHAR_TYPE_SIZE    MAX_INT_TYPE_SIZE\n+#define MAX_WCHAR_TYPE_SIZE    64\n \n #define WORD_SWITCH_TAKES_ARG(STR)\t\t\t\\\n  (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\\"}, {"sha": "95df8369566e9fbde7bba02b303956e48b3c76c0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n    64 bit r4000 support by Ian Lance Taylor (ian@cygnus.com) and\n@@ -1478,12 +1478,11 @@ do {\t\t\t\t\t\t\t\\\n    target machine.  If you don't define this, the default is one\n    word.  */\n #define INT_TYPE_SIZE (TARGET_INT64 ? 64 : 32)\n-#define MAX_INT_TYPE_SIZE 64\n \n /* Tell the preprocessor the maximum size of wchar_t.  */\n #ifndef MAX_WCHAR_TYPE_SIZE\n #ifndef WCHAR_TYPE_SIZE\n-#define MAX_WCHAR_TYPE_SIZE MAX_INT_TYPE_SIZE\n+#define MAX_WCHAR_TYPE_SIZE 64\n #endif\n #endif\n \n@@ -3342,12 +3341,6 @@ while (0)\n    Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE (TARGET_MIPS16)\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #ifndef DEFAULT_SIGNED_CHAR\n #define DEFAULT_SIGNED_CHAR 1"}, {"sha": "65604c4482cad00e48fd7459d75a4c9a9782e518", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1201,10 +1201,6 @@ const_section ()\t\t\t\t\t\t\\\n    than \"unsigned int\", and we have signed characters.  FIXME: measure.  */\n #define LOAD_EXTEND_OP(MODE) (TARGET_ZERO_EXTEND ? ZERO_EXTEND : SIGN_EXTEND)\n \n-/* Whatever.  I don't really know.  This has worked before.  It's also\n-   what everybody else is using.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n #define MOVE_MAX 8\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1"}, {"sha": "f9b2d30a3b5260806fa3c1e18366efda22578031", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Matsushita MN10200 series\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -949,16 +949,10 @@ struct cum_arg { int nbytes; };\n    fast and more compact code.  */\n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n /* This flag, if defined, says the same insns that convert to a signed fixnum\n    also convert validly to an unsigned one.  */\n #define FIXUNS_TRUNC_LIKE_FIX_TRUNC\n \n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX\t2"}, {"sha": "ddd872e9cd56ef900aa1d04ecddb8705a2d988ad", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Matsushita MN10300 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -1036,16 +1036,10 @@ struct cum_arg {int nbytes; };\n \n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n /* This flag, if defined, says the same insns that convert to a signed fixnum\n    also convert validly to an unsigned one.  */\n #define FIXUNS_TRUNC_LIKE_FIX_TRUNC\n \n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX\t4"}, {"sha": "40dc12c34615e8c8d8e1410b17f9f1e5486f43f0", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  NS32000 version.\n    Copyright (C) 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001 Free Software Foundation, Inc.\n+   2001, 2002 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1103,12 +1103,6 @@ while (0)\n    Do not define this if the table should contain absolute addresses. */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "d12a92784d8c11ec3c692661512838d769229a05", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1516,12 +1516,6 @@ while (0)\n /* Jump tables must be 32 bit aligned, no matter the size of the element.  */\n #define ADDR_VEC_ALIGN(ADDR_VEC) 2\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "e2833c7c374da3591d6aed10ae4601306a5ba9b2", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for the pdp-11\n-   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000, 2001\n+   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n@@ -879,12 +879,6 @@ extern int may_call_alloca;\n    Do not define this if the table should contain absolute addresses. */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "f56564df20747ff42eefe36ea79bf5e71d88e690", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for picoJava\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -892,12 +892,6 @@ struct pj_args\n \n #define CASE_VECTOR_PC_RELATIVE 1\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR  FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR  TRUNC_DIV_EXPR\n-\n /* 'char' is signed by default.  */\n #define DEFAULT_SIGNED_CHAR  1\n "}, {"sha": "23c73e72f1961cd62c37ef250a2292100ae74fe0", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for ROMP chip.\n-   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1998, 1999, 2000, 2001\n+   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n@@ -1095,12 +1095,6 @@ struct rt_cargs {int gregs, fregs; };\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n "}, {"sha": "854ab9b60629b573119ef6a751d56e9f731b24cd", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -2163,12 +2163,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n "}, {"sha": "b21f4daef80ef4642a0cf5c6c287d5fc1b689242", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for IBM S/390\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n                   Ulrich Weigand (uweigand@de.ibm.com).\n This file is part of GNU CC.\n@@ -1048,10 +1048,6 @@ CUMULATIVE_ARGS;\n                  (MODE) == HImode ? SIGN_EXTEND : NIL)          \\\n               : ((MODE) == HImode ? SIGN_EXTEND : NIL))\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n /* Define this if fixuns_trunc is the same as fix_trunc.  */\n \n /* #define FIXUNS_TRUNC_LIKE_FIX_TRUNC */\n@@ -1060,10 +1056,6 @@ CUMULATIVE_ARGS;\n \n #define DEFAULT_SIGNED_CHAR 0\n \n-/* This is the kind of divide that is easiest to do in the general case.  */\n-\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory in one reasonably\n    fast instruction.  */\n "}, {"sha": "b4b7e8ee0e969626acee504ad237fcdbe640b494", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for Hitachi Super-H.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com).\n    Improved by Jim Wilson (wilson@cygnus.com).\n@@ -1645,12 +1645,6 @@ extern int current_function_anonymous_args;\n    Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR  FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR  TRUNC_DIV_EXPR\n-\n /* Since the SH3e has only `float' support, it is desirable to make all\n    floating point types equivalent to `float'.  */\n #define DOUBLE_TYPE_SIZE ((TARGET_SH3E && ! TARGET_SH4) ? 32 : 64)"}, {"sha": "bf5fc7e20d02614ea26fe12dacbb222d724ac008", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for Sun SPARC.\n    Copyright (C) 1987, 1988, 1989, 1992, 1994, 1995, 1996, 1997, 1998, 1999\n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n    64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n    at Cygnus Support.\n@@ -2396,12 +2396,6 @@ do {                                                                    \\\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "bf472cc598a1ac5b747eec7550a99e7e8f5018c2", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -816,12 +816,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    If you don't define this, the default is one word.  */\n #define INT_TYPE_SIZE 16\n \n-/* Maximum number for the size in bits of the type `int' on the target machine.\n-   If this is undefined, the default is `INT_TYPE_SIZE'.  Otherwise, it is the\n-   constant value that is the largest value that `INT_TYPE_SIZE' can have at\n-   run-time.  This is used in `cpp'.  */\n-/* #define MAX_INT_TYPE_SIZE */\n-\n /* A C expression for the size in bits of the type `short' on the target\n    machine.  If you don't define this, the default is half a word.  (If this\n    would be less than one storage unit, it is rounded up to one unit.)  */\n@@ -1858,12 +1852,6 @@ enum reg_class\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   (OFFSET) = xstormy16_initial_elimination_offset (FROM, TO)\n \n-/* Define this macro if the `longjmp' function restores registers from the\n-   stack frames, rather than from those saved specifically by `setjmp'.\n-   Certain quantities must not be kept in registers across a call to `setjmp'\n-   on such machines.  */\n-/* #define LONGJMP_RESTORE_FROM_STACK */\n-\n \f\n /* Passing Function Arguments on the Stack */\n \n@@ -4735,23 +4723,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define if loading short immediate values into registers sign extends.  */\n /* #define SHORT_IMMEDIATES_SIGN_EXTEND */\n \n-/* An alias for a tree code that should be used by default for conversion of\n-   floating point values to fixed point.  Normally, `FIX_ROUND_EXPR' is used.  */\n-/* #define IMPLICIT_FIX_EXPR */\n-\n /* Define this macro if the same instructions that convert a floating point\n    number to a signed fixed point number also convert validly to an unsigned\n    one.  */\n /* #define FIXUNS_TRUNC_LIKE_FIX_TRUNC */\n \n-/* An alias for a tree code that is the easiest kind of division to compile\n-   code for in the general case.  It may be `TRUNC_DIV_EXPR', `FLOOR_DIV_EXPR',\n-   `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four division operators differ\n-   in how they round the result to an integer.  `EASY_DIV_EXPR' is used when it\n-   is permissible to use any of those kinds of division and the choice should\n-   be made on the basis of efficiency.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* The maximum number of bytes that a single instruction can move quickly from\n    memory to memory.  */\n #define MOVE_MAX 2"}, {"sha": "64bdc205c5777ba5318b8cd9aa469e8cebd0a768", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler. NEC V850 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -1422,16 +1423,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Byte and short loads sign extend the value to a word.  */\n #define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n /* This flag, if defined, says the same insns that convert to a signed fixnum\n    also convert validly to an unsigned one.  */\n #define FIXUNS_TRUNC_LIKE_FIX_TRUNC\n \n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX\t4"}, {"sha": "3738affcc94f8ef438c4b16420581a9cbf7e25bb", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  VAX version.\n    Copyright (C) 1987, 1988, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -334,10 +334,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this if longjmp restores from saved registers\n-   rather than from what setjmp saved.  */\n-#define LONGJMP_RESTORE_FROM_STACK\n-\n /* Define this if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n@@ -802,12 +798,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    jumps to the default label instead.  */\n #define CASE_DROPS_THROUGH\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "98a29b4fad11161af16248dd40af962e8f6e55b7", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  AT&T we32000 version.\n-   Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000,\n+   2001, 2002 Free Software Foundation, Inc.\n    Contributed by John Wehle (john@feith1.uucp)\n \n This file is part of GNU CC.\n@@ -592,12 +592,6 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n "}, {"sha": "360198a845da167005ab043bb95b9e53a20afcf8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -1353,13 +1353,6 @@ languages, rather than to fundamental aspects of storage layout.\n A C expression for the size in bits of the type @code{int} on the\n target machine.  If you don't define this, the default is one word.\n \n-@findex MAX_INT_TYPE_SIZE\n-@item MAX_INT_TYPE_SIZE\n-Maximum number for the size in bits of the type @code{int} on the target\n-machine.  If this is undefined, the default is @code{INT_TYPE_SIZE}.\n-Otherwise, it is the constant value that is the largest value that\n-@code{INT_TYPE_SIZE} can have at run-time.  This is used in @code{cpp}.\n-\n @findex SHORT_TYPE_SIZE\n @item SHORT_TYPE_SIZE\n A C expression for the size in bits of the type @code{short} on the\n@@ -3122,13 +3115,6 @@ This macro is similar to @code{INITIAL_FRAME_POINTER_OFFSET}.  It\n specifies the initial difference between the specified pair of\n registers.  This macro must be defined if @code{ELIMINABLE_REGS} is\n defined.\n-\n-@findex LONGJMP_RESTORE_FROM_STACK\n-@item LONGJMP_RESTORE_FROM_STACK\n-Define this macro if the @code{longjmp} function restores registers from\n-the stack frames, rather than from those saved specifically by\n-@code{setjmp}.  Certain quantities must not be kept in registers across\n-a call to @code{setjmp} on such machines.\n @end table\n \n @node Stack Arguments\n@@ -8093,28 +8079,12 @@ define it as the constant @code{SIGN_EXTEND} or @code{ZERO_EXTEND}.\n Define this macro if loading short immediate values into registers sign\n extends.\n \n-@findex IMPLICIT_FIX_EXPR\n-@item IMPLICIT_FIX_EXPR\n-An alias for a tree code that should be used by default for conversion\n-of floating point values to fixed point.  Normally,\n-@code{FIX_ROUND_EXPR} is used.\n-\n @findex FIXUNS_TRUNC_LIKE_FIX_TRUNC\n @item FIXUNS_TRUNC_LIKE_FIX_TRUNC\n Define this macro if the same instructions that convert a floating\n point number to a signed fixed point number also convert validly to an\n unsigned one.\n \n-@findex EASY_DIV_EXPR\n-@item EASY_DIV_EXPR\n-An alias for a tree code that is the easiest kind of division to\n-compile code for in the general case.  It may be\n-@code{TRUNC_DIV_EXPR}, @code{FLOOR_DIV_EXPR}, @code{CEIL_DIV_EXPR} or\n-@code{ROUND_DIV_EXPR}.  These four division operators differ in how\n-they round the result to an integer.  @code{EASY_DIV_EXPR} is used\n-when it is permissible to use any of those kinds of division and the\n-choice should be made on the basis of efficiency.\n-\n @findex MOVE_MAX\n @item MOVE_MAX\n The maximum number of bytes that a single instruction can move quickly"}, {"sha": "a81b51f084b1aed59ae295a29c00657b73697249", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c484c7d50937a4a50b98244817ae6d96a9f55a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=16c484c7d50937a4a50b98244817ae6d96a9f55a", "patch": "@@ -600,7 +600,8 @@ typedef char _Bool;\n  #pragma GCC poison INT_ASM_OP ASM_OUTPUT_EH_REGION_BEG\t\t\t   \\\n \tASM_OUTPUT_EH_REGION_END ASM_OUTPUT_LABELREF_AS_INT\t\t   \\\n \tDOESNT_NEED_UNWINDER EH_TABLE_LOOKUP OBJC_SELECTORS_WITHOUT_LABELS \\\n-\tOMIT_EH_TABLE\n+\tOMIT_EH_TABLE EASY_DIV_EXPR IMPLICIT_FIX_EXPR\t\t\t   \\\n+\tLONGJMP_RESTORE_FROM_STACK MAX_INT_TYPE_SIZE\n \n #endif /* IN_GCC */\n "}]}