{"sha": "c533e34d7968ddd53f5dcdfdc580226a62da88b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzM2UzNGQ3OTY4ZGRkNTNmNWRjZGZkYzU4MDIyNmE2MmRhODhiOA==", "commit": {"author": {"name": "Zak Kipling", "email": "zak@transversal.com", "date": "2006-09-07T06:53:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-09-07T06:53:21Z"}, "message": "re PR c++/26195 (pragma interface no longer handles explicit names)\n\n        PR c++/26195\n        * decl.c (make_rtl_for_nonlocal_decl),\n        (start_preparsed_function): Don't use lbasename on\n        input_filename when calling get_fileinfo.\n        * semantics.c (begin_class_definition): Likewise.\n        * lex.c (cxx_make_type): Likewise.\n        (handle_pragma_interface): Call get_fileinfo on input_filename,\n        not on the parameter to the directive.\n\nFrom-SVN: r116740", "tree": {"sha": "8294996000e43badd6c4f6c4612d1dc1712f8576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8294996000e43badd6c4f6c4612d1dc1712f8576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c533e34d7968ddd53f5dcdfdc580226a62da88b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c533e34d7968ddd53f5dcdfdc580226a62da88b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c533e34d7968ddd53f5dcdfdc580226a62da88b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c533e34d7968ddd53f5dcdfdc580226a62da88b8/comments", "author": null, "committer": null, "parents": [{"sha": "b5b84a7f46e8baead0f3d7b62d59659d83d67271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b84a7f46e8baead0f3d7b62d59659d83d67271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b84a7f46e8baead0f3d7b62d59659d83d67271"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "c6da5e29a34a37a72eae8e6308aaeb3170668683", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -1,3 +1,14 @@\n+2006-09-06  Zak Kipling  <zak@transversal.com>\n+\n+        PR c++/26195\n+\t* decl.c (make_rtl_for_nonlocal_decl),\n+\t(start_preparsed_function): Don't use lbasename on\n+\tinput_filename when calling get_fileinfo.\n+\t* semantics.c (begin_class_definition): Likewise.\n+\t* lex.c (cxx_make_type): Likewise.\n+\t(handle_pragma_interface): Call get_fileinfo on input_filename,\n+\tnot on the parameter to the directive.\n+\n 2006-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28903"}, {"sha": "46c1d33874c3e377388a0e0282a4d21425288b4f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -4908,7 +4908,7 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n     {\n       /* Fool with the linkage of static consts according to #pragma\n \t interface.  */\n-      struct c_fileinfo *finfo = get_fileinfo (lbasename (filename));\n+      struct c_fileinfo *finfo = get_fileinfo (filename);\n       if (!finfo->interface_unknown && !TREE_PUBLIC (decl))\n \t{\n \t  TREE_PUBLIC (decl) = 1;\n@@ -10357,7 +10357,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   struct cp_binding_level *bl;\n   tree current_function_parms;\n   struct c_fileinfo *finfo\n-    = get_fileinfo (lbasename (LOCATION_FILE (DECL_SOURCE_LOCATION (decl1))));\n+    = get_fileinfo (LOCATION_FILE (DECL_SOURCE_LOCATION (decl1)));\n   bool honor_interface;\n \n   /* Sanity check.  */"}, {"sha": "d14a1baa926e3511ae9b8e899bad4f837d499476", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -503,7 +503,7 @@ handle_pragma_interface (cpp_reader* dfile ATTRIBUTE_UNUSED )\n   else\n     filename = ggc_strdup (TREE_STRING_POINTER (fname));\n \n-  finfo = get_fileinfo (filename);\n+  finfo = get_fileinfo (input_filename);\n \n   if (impl_file_chain == 0)\n     {\n@@ -809,7 +809,7 @@ cxx_make_type (enum tree_code code)\n   /* Set up some flags that give proper default behavior.  */\n   if (IS_AGGR_TYPE_CODE (code))\n     {\n-      struct c_fileinfo *finfo = get_fileinfo (lbasename (input_filename));\n+      struct c_fileinfo *finfo = get_fileinfo (input_filename);\n       SET_CLASSTYPE_INTERFACE_UNKNOWN_X (t, finfo->interface_unknown);\n       CLASSTYPE_INTERFACE_ONLY (t) = finfo->interface_only;\n     }"}, {"sha": "3c7281880d4ec10752d6b862a02e89b0562022fc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -2174,7 +2174,7 @@ begin_class_definition (tree t, tree attributes)\n      before.  */\n   if (! TYPE_ANONYMOUS_P (t))\n     {\n-      struct c_fileinfo *finfo = get_fileinfo (lbasename (input_filename));\n+      struct c_fileinfo *finfo = get_fileinfo (input_filename);\n       CLASSTYPE_INTERFACE_ONLY (t) = finfo->interface_only;\n       SET_CLASSTYPE_INTERFACE_UNKNOWN_X\n \t(t, finfo->interface_unknown);"}, {"sha": "3b306fdd8bfb8266bcb9b28d576741bc790a3a76", "filename": "gcc/testsuite/g++.dg/ext/interface2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2.C?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/26195\n+// { dg-do link }\n+// { dg-additional-sources \"interface2b.cc\" }\n+// { dg-options \"-fno-inline\" }\n+\n+#pragma implementation \"interface2-imaginary.h\"\n+#include \"interface2a.h\""}, {"sha": "efde3e24bc60ab00459556663c1a37a9eb6c99ed", "filename": "gcc/testsuite/g++.dg/ext/interface2a.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2a.h?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/26195\n+#pragma interface \"interface2-imaginary.h\"\n+\n+inline void foo1() { }\n+inline void foo2() { }"}, {"sha": "9109949b890ed0064396073f28044e32d320bc8d", "filename": "gcc/testsuite/g++.dg/ext/interface2b.cc", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2b.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2b.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface2b.cc?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/26195\n+extern void foo1();\n+extern void foo2();\n+\n+int main()\n+{\n+  foo1();\n+  foo2();\n+}"}, {"sha": "874be7509340eee3c800cb8d0b4801f1c885c490", "filename": "gcc/testsuite/g++.dg/ext/interface3/dir1/interface3.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Fdir1%2Finterface3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Fdir1%2Finterface3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Fdir1%2Finterface3.h?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/26195\n+#pragma interface \"dir1/interface3.h\"\n+#include \"../dir2/interface3.h\"\n+\n+inline void f1() { }\n+inline void f2() { }"}, {"sha": "df6f7cd2f5f08aaa8974e06e7d8d13ff5da1bce4", "filename": "gcc/testsuite/g++.dg/ext/interface3/dir2/interface3.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Fdir2%2Finterface3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Fdir2%2Finterface3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Fdir2%2Finterface3.h?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/26195\n+#pragma interface \"dir2/interface3.h\"\n+\n+inline void g1() { }\n+inline void g2() { }"}, {"sha": "b324dbef75062ea30ef58612cdad6dc3c80fb77d", "filename": "gcc/testsuite/g++.dg/ext/interface3/interface3a.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3a.C?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/26195\n+// { dg-do link }\n+// { dg-additional-sources \"interface3a2.cc\" }\n+// { dg-options \"-I. -fno-inline\" }\n+\n+#pragma implementation \"dir1/interface3.cc\"\n+#include \"dir1/interface3.h\""}, {"sha": "cbf1ba801bfd2f0e39810fb87b6a609c58db9ee0", "filename": "gcc/testsuite/g++.dg/ext/interface3/interface3a2.cc", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3a2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3a2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3a2.cc?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/26195\n+extern void f1();\n+extern void f2();\n+\n+int main()\n+{\n+  f1();\n+  f2();\n+}"}, {"sha": "03f7532094f4badfbc07d32b1e50bf1103b04f05", "filename": "gcc/testsuite/g++.dg/ext/interface3/interface3b.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3b.C?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/26195\n+// { dg-do link }\n+// { dg-additional-sources \"interface3b2.cc\" }\n+// { dg-options \"-fno-inline\" }\n+\n+#pragma implementation \"dir2/interface3.cc\"\n+#include \"dir1/interface3.h\""}, {"sha": "f532adc741c2ae9087664bf232d1e5409bad4bc1", "filename": "gcc/testsuite/g++.dg/ext/interface3/interface3b2.cc", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3b2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c533e34d7968ddd53f5dcdfdc580226a62da88b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3b2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finterface3%2Finterface3b2.cc?ref=c533e34d7968ddd53f5dcdfdc580226a62da88b8", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/26195\n+extern void g1();\n+extern void g2();\n+\n+int main()\n+{\n+  g1();\n+  g2();\n+}"}]}