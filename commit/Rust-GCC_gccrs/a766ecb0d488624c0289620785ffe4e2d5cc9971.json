{"sha": "a766ecb0d488624c0289620785ffe4e2d5cc9971", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc2NmVjYjBkNDg4NjI0YzAyODk2MjA3ODVmZmU0ZTJkNWNjOTk3MQ==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-01-20T05:58:47Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-01-20T05:58:47Z"}, "message": "vector long long and vector double require vsx support.\n\ngcc/testsuite/ChangeLog\n\n    * gcc.target/powerpc/altivec_vld_vst_addr.c: Remove, split into \n    altivec_vld_vst_addr-1.c and altivec_vld_vst_addr-2.c.\n    * gcc.target/powerpc/altivec_vld_vst_addr-1.c: New test.\n    * gcc.target/powerpc/altivec_vld_vst_addr-2.c: Ditto.\n\nFrom-SVN: r268102", "tree": {"sha": "26670b877bd461ca29402263199b2d464643a508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26670b877bd461ca29402263199b2d464643a508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a766ecb0d488624c0289620785ffe4e2d5cc9971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a766ecb0d488624c0289620785ffe4e2d5cc9971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a766ecb0d488624c0289620785ffe4e2d5cc9971", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a766ecb0d488624c0289620785ffe4e2d5cc9971/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c72473e47a7068488590ce3fd6116bf614c26053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72473e47a7068488590ce3fd6116bf614c26053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c72473e47a7068488590ce3fd6116bf614c26053"}], "stats": {"total": 190, "additions": 108, "deletions": 82}, "files": [{"sha": "8c1707a53b2e68def2eaae8064643e2bc81b58b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a766ecb0d488624c0289620785ffe4e2d5cc9971/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a766ecb0d488624c0289620785ffe4e2d5cc9971/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a766ecb0d488624c0289620785ffe4e2d5cc9971", "patch": "@@ -1,3 +1,10 @@\n+2019-01-20  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/altivec_vld_vst_addr.c: Remove, split into \n+\taltivec_vld_vst_addr-1.c and altivec_vld_vst_addr-2.c.\n+\t* gcc.target/powerpc/altivec_vld_vst_addr-1.c: New test.\n+\t* gcc.target/powerpc/altivec_vld_vst_addr-2.c: Ditto.\n+\n 2019-01-18  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR fortran/37835"}, {"sha": "eb6d1ebd40f38f6c142b44b05aebd155000c8816", "filename": "gcc/testsuite/gcc.target/powerpc/altivec_vld_vst_addr-1.c", "status": "renamed", "additions": 9, "deletions": 82, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a766ecb0d488624c0289620785ffe4e2d5cc9971/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a766ecb0d488624c0289620785ffe4e2d5cc9971/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr-1.c?ref=a766ecb0d488624c0289620785ffe4e2d5cc9971", "patch": "@@ -3,12 +3,12 @@\n \n /* Test vec_ld and vec_st can support both scalar and vector\n    type address points, the list is:\n-     - address of vector unsigned char/short/int/long long\n-     - address of vector signed char/short/int/long long\n-     - address of vector double/float\n-     - address of unsigned char/short/int/long long\n-     - address of signed char/short/int/long long\n-     - address of double/float */\n+     - address of unsigned char/short/int\n+     - address of signed char/short/int\n+     - address of float\n+     - address of vector unsigned char/short/int\n+     - address of vector signed char/short/int\n+     - address of vector float */\n #include <altivec.h>\n \n /* Test vec_ld can allow scalar and vector type address. */\n@@ -30,12 +30,6 @@ test_vld_scalar_ui (const unsigned int *address)\n   return __builtin_vec_ld (0, address);\n }\n \n-vector unsigned long long\n-test_vld_scalar_ul (const unsigned long long *address)\n-{\n-  return __builtin_vec_ld (0, address);\n-}\n-\n vector signed char\n test_vld_scalar_sc (const signed char *address)\n {\n@@ -54,8 +48,8 @@ test_vld_scalar_si (const signed int *address)\n   return __builtin_vec_ld (0, address);\n }\n \n-vector signed long long\n-test_vld_scalar_sl (const signed long long *address)\n+vector float\n+test_vld_scalar_f (const float *address)\n {\n   return __builtin_vec_ld (0, address);\n }\n@@ -78,12 +72,6 @@ test_vld_vector_ui (const vector unsigned int *address)\n   return __builtin_vec_ld (0, address);\n }\n \n-vector unsigned long long\n-test_vld_vector_ul (const vector unsigned long long *address)\n-{\n-  return __builtin_vec_ld (0, address);\n-}\n-\n vector signed char\n test_vld_vector_sc (const vector signed char *address)\n {\n@@ -102,36 +90,12 @@ test_vld_vector_si (const vector signed int *address)\n   return __builtin_vec_ld (0, address);\n }\n \n-vector signed long long\n-test_vld_vector_sl (const vector signed long long *address)\n-{\n-  return __builtin_vec_ld (0, address);\n-}\n-\n-vector float\n-test_vld_scalar_f (const float *address)\n-{\n-  return __builtin_vec_ld (0, address);\n-}\n-\n-vector double\n-test_vld_scalar_d (const double *address)\n-{\n-  return __builtin_vec_ld (0, address);\n-}\n-\n vector float\n test_vld_vector_f (const vector float *address)\n {\n   return __builtin_vec_ld (0, address);\n }\n \n-vector double\n-test_vld_vector_d (const vector double *address)\n-{\n-  return __builtin_vec_ld (0, address);\n-}\n-\n /* Test vec_st can allow scalar and vector type address. */\n \n void\n@@ -152,12 +116,6 @@ test_vst_scalar_ui (vector unsigned int v, unsigned int *address)\n   __builtin_vec_st (v, 0, address);\n }\n \n-void\n-test_vst_scalar_ul (vector unsigned long long v, unsigned long long *address)\n-{\n-  __builtin_vec_st (v, 0, address);\n-}\n-\n void\n test_vst_scalar_sc (vector signed char v, signed char *address)\n {\n@@ -177,7 +135,7 @@ test_vst_scalar_si (vector signed int v, signed int *address)\n }\n \n void\n-test_vst_scalar_sl (vector signed long long v, signed long long *address)\n+test_vst_scalar_f (vector float v, float *address)\n {\n   __builtin_vec_st (v, 0, address);\n }\n@@ -200,13 +158,6 @@ test_vst_vector_ui (vector unsigned int v, vector unsigned int *address)\n   __builtin_vec_st (v, 0, address);\n }\n \n-void\n-test_vst_vector_ul (vector unsigned long long v,\n-\t\t    vector unsigned long long *address)\n-{\n-  __builtin_vec_st (v, 0, address);\n-}\n-\n void\n test_vst_vector_sc (vector signed char v, vector signed char *address)\n {\n@@ -225,33 +176,9 @@ test_vst_vector_si (vector signed int v, vector signed int *address)\n   __builtin_vec_st (v, 0, address);\n }\n \n-void\n-test_vst_vector_sl (vector signed long long v, vector signed long long *address)\n-{\n-  __builtin_vec_st (v, 0, address);\n-}\n-\n-void\n-test_vst_scalar_f (vector float v, float *address)\n-{\n-  __builtin_vec_st (v, 0, address);\n-}\n-\n void\n test_vst_vector_f (vector float v, vector float *address)\n {\n   __builtin_vec_st (v, 0, address);\n }\n \n-void\n-test_vst_scalar_d (vector double v, double *address)\n-{\n-  __builtin_vec_st (v, 0, address);\n-}\n-\n-void\n-test_vst_vector_d (vector double v, vector double *address)\n-{\n-  __builtin_vec_st (v, 0, address);\n-}\n-", "previous_filename": "gcc/testsuite/gcc.target/powerpc/altivec_vld_vst_addr.c"}, {"sha": "aecccd0c7d273acd55c3a6adf12c4c16302e09ea", "filename": "gcc/testsuite/gcc.target/powerpc/altivec_vld_vst_addr-2.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a766ecb0d488624c0289620785ffe4e2d5cc9971/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a766ecb0d488624c0289620785ffe4e2d5cc9971/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr-2.c?ref=a766ecb0d488624c0289620785ffe4e2d5cc9971", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx\" } */\n+\n+/* Note that vector long long and vector double type require vsx support. */\n+\n+/* Test vec_ld and vec_st can support both scalar and vector\n+   type address points, the list is:\n+     - address of unsigned long long\n+     - address of signed long long\n+     - address of double\n+     - address of vector unsigned long long\n+     - address of vector signed long long\n+     - address of vector double */\n+#include <altivec.h>\n+\n+/* Test vec_ld can allow scalar and vector type address. */\n+\n+vector unsigned long long\n+test_vld_scalar_ul (const unsigned long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed long long\n+test_vld_scalar_sl (const signed long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector double\n+test_vld_scalar_d (const double *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned long long\n+test_vld_vector_ul (const vector unsigned long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed long long\n+test_vld_vector_sl (const vector signed long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector double\n+test_vld_vector_d (const vector double *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+/* Test vec_st can allow scalar and vector type address. */\n+\n+void\n+test_vst_scalar_ul (vector unsigned long long v, unsigned long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_sl (vector signed long long v, signed long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_d (vector double v, double *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_ul (vector unsigned long long v,\n+\t\t    vector unsigned long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_sl (vector signed long long v, vector signed long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_d (vector double v, vector double *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+"}]}