{"sha": "e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjMGRkMzk4NWNkNzA3MzJjZGI3MGJkYTgyYTFmMzBlMTNhMGY0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:48:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:48:41Z"}, "message": "[multiple changes]\n\n2010-09-10  Vincent Celier  <celier@adacore.com>\n\n\t* sem_aggr.adb, exp_prag.adb, sem_ch3.adb, exp_attr.adb,\n\tsem_res.adb, sem_attr.adb, sem_elab.adb, sem_ch4.adb, exp_disp.adb,\n\texp_aggr.adb, exp_dist.adb: Change all mentions of \"at run-time\" to\n\t\"at run time\" in comments and error/warning messages.\n\n2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_cg.adb: Handle properly bodies without specs.\n\n2010-09-10  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-nmsc.adb (Find_Source_Dirs): When a source directory is not\n\tpresent, and the user requested to either ignore this or display a\n\twarning (as opposed to an error), we still need to register the\n\tdirectory.\n\nFrom-SVN: r164184", "tree": {"sha": "f7d02653e09175f7697d7e4a9fc46a32f988fbe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7d02653e09175f7697d7e4a9fc46a32f988fbe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/comments", "author": null, "committer": null, "parents": [{"sha": "90966337970092f84e1029aa27376922fb24943c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90966337970092f84e1029aa27376922fb24943c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90966337970092f84e1029aa27376922fb24943c"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "76137955e7eebf07ee04fcb2fe83967ccd413b10", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -1,3 +1,21 @@\n+2010-09-10  Vincent Celier  <celier@adacore.com>\n+\n+\t* sem_aggr.adb, exp_prag.adb, sem_ch3.adb, exp_attr.adb,\n+\tsem_res.adb, sem_attr.adb, sem_elab.adb, sem_ch4.adb, exp_disp.adb,\n+\texp_aggr.adb, exp_dist.adb: Change all mentions of \"at run-time\" to\n+\t\"at run time\" in comments and error/warning messages.\n+\n+2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_cg.adb: Handle properly bodies without specs.\n+\n+2010-09-10  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-nmsc.adb (Find_Source_Dirs): When a source directory is not\n+\tpresent, and the user requested to either ignore this or display a\n+\twarning (as opposed to an error), we still need to register the\n+\tdirectory.\n+\n 2010-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* errout.adb: Remove tests of Parsing_Main_Subunit, since this test is"}, {"sha": "27ad463a1b4e27635d8ac3add102d32e2d5f3779", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -4946,7 +4946,7 @@ package body Exp_Aggr is\n       end if;\n \n       --  If the semantic analyzer has determined that aggregate N will raise\n-      --  Constraint_Error at run-time, then the aggregate node has been\n+      --  Constraint_Error at run time, then the aggregate node has been\n       --  replaced with an N_Raise_Constraint_Error node and we should\n       --  never get here.\n "}, {"sha": "b94944738b088c7f197250c5c90b9f957e320550", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -5520,7 +5520,7 @@ package body Exp_Attr is\n       --  that appear in GNAT's library, but will generate calls via rtsfind\n       --  to library routines for user code.\n       --  ??? For now, disable this code for JVM, since this generates a\n-      --  VerifyError exception at run-time on e.g. c330001.\n+      --  VerifyError exception at run time on e.g. c330001.\n       --  This is disabled for AAMP, to avoid making dependences on files not\n       --  supported in the AAMP library (such as s-fileio.adb).\n "}, {"sha": "84b1ee9427778a1538f3641604ec11f557867312", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -432,7 +432,9 @@ package body Exp_CG is\n       --  entity of the construct. For a subprogram, it is the entity of the\n       --  spec, which carries a homonym counter when it is overloaded.\n \n-      if Nkind (P) = N_Subprogram_Body then\n+      if Nkind (P) = N_Subprogram_Body\n+        and then not Acts_As_Spec (P)\n+      then\n          Get_External_Name (Corresponding_Spec (P), Has_Suffix => False);\n \n       else"}, {"sha": "cdb9e880599705b229238eb26c6066aff5029abf", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -3681,7 +3681,7 @@ package body Exp_Disp is\n \n          --  Calculate the number of slots of the dispatch table. If the number\n          --  of primitives of Typ is 0 we reserve a dummy single entry for its\n-         --  DT because at run-time the pointer to this dummy entry will be\n+         --  DT because at run time the pointer to this dummy entry will be\n          --  used as the tag.\n \n          if Num_Iface_Prims = 0 then\n@@ -5095,7 +5095,7 @@ package body Exp_Disp is\n                  Is_Library_Level_Tagged_Type (Typ));\n \n                --  The table of interfaces is not constant; its slots are\n-               --  filled at run-time by the IP routine using attribute\n+               --  filled at run time by the IP routine using attribute\n                --  'Position to know the location of the tag components\n                --  (and this attribute cannot be safely used before the\n                --  object is initialized)."}, {"sha": "29aab343f789b378a5c883a714904ac9c0d25277", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -8769,7 +8769,7 @@ package body Exp_Dist is\n                                  --  Struct_Counter should be reset before\n                                  --  handling a variant part. Indeed only one\n                                  --  of the case statement alternatives will be\n-                                 --  executed at run-time, so the counter must\n+                                 --  executed at run time, so the counter must\n                                  --  start at 0 for every case statement.\n \n                                  Struct_Counter := 0;\n@@ -9655,7 +9655,7 @@ package body Exp_Dist is\n                                  --  Struct_Counter should be reset before\n                                  --  handling a variant part. Indeed only one\n                                  --  of the case statement alternatives will be\n-                                 --  executed at run-time, so the counter must\n+                                 --  executed at run time, so the counter must\n                                  --  start at 0 for every case statement.\n \n                                  Struct_Counter := 0;"}, {"sha": "d8b8ad0efa479379af2e8e3f0faa9ef4d0f18f06", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -392,7 +392,7 @@ package body Exp_Prag is\n          then\n             return;\n          elsif Nam = Name_Assertion then\n-            Error_Msg_N (\"?assertion will fail at run-time\", N);\n+            Error_Msg_N (\"?assertion will fail at run time\", N);\n          else\n             Error_Msg_N (\"?check will fail at run time\", N);\n          end if;"}, {"sha": "4729ef618b5fb074f454174b75ae40caa0ce5ffd", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -5208,15 +5208,18 @@ package body Prj.Nmsc is\n                                Resolve_Links  =>\n                                  Opt.Follow_Links_For_Dirs,\n                                Case_Sensitive => True);\n+               Has_Error : Boolean := False;\n \n             begin\n                if Root_Dir'Length = 0 then\n                   Err_Vars.Error_Msg_File_1 := Base_Dir;\n                   Error_Or_Warning\n                     (Data.Flags, Data.Flags.Missing_Source_Files,\n                      \"{ is not a valid directory.\", Location, Project);\n+                  Has_Error := Data.Flags.Missing_Source_Files = Error;\n+               end if;\n \n-               else\n+               if not Has_Error then\n                   --  We have an existing directory, we register it and all of\n                   --  its subdirectories.\n \n@@ -5240,6 +5243,7 @@ package body Prj.Nmsc is\n             declare\n                Path_Name  : Path_Information;\n                Dir_Exists : Boolean;\n+               Has_Error  : Boolean := False;\n \n             begin\n                Locate_Directory\n@@ -5255,8 +5259,10 @@ package body Prj.Nmsc is\n                   Error_Or_Warning\n                     (Data.Flags, Data.Flags.Missing_Source_Files,\n                      \"{ is not a valid directory\", Location, Project);\n+                  Has_Error := Data.Flags.Missing_Source_Files = Error;\n+               end if;\n \n-               else\n+               if not Has_Error then\n                   --  links have been resolved if necessary, and Path_Name\n                   --  always ends with a directory separator\n                   Add_To_Or_Remove_From_Source_Dirs"}, {"sha": "50af15c7f31346ca512af86a225bf5ac32b18616", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -569,7 +569,7 @@ package body Sem_Aggr is\n                   Set_Raises_Constraint_Error (N);\n                   Error_Msg_N (\"sub-aggregate low bound mismatch?\", N);\n                   Error_Msg_N\n-                     (\"\\Constraint_Error will be raised at run-time?\", N);\n+                     (\"\\Constraint_Error will be raised at run time?\", N);\n                end if;\n             end if;\n \n@@ -583,7 +583,7 @@ package body Sem_Aggr is\n                   Set_Raises_Constraint_Error (N);\n                   Error_Msg_N (\"sub-aggregate high bound mismatch?\", N);\n                   Error_Msg_N\n-                     (\"\\Constraint_Error will be raised at run-time?\", N);\n+                     (\"\\Constraint_Error will be raised at run time?\", N);\n                end if;\n             end if;\n          end if;\n@@ -1255,7 +1255,7 @@ package body Sem_Aggr is\n          if OK_BH and then OK_AH and then Val_BH < Val_AH then\n             Set_Raises_Constraint_Error (N);\n             Error_Msg_N (\"upper bound out of range?\", AH);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run-time?\", AH);\n+            Error_Msg_N (\"\\Constraint_Error will be raised at run time?\", AH);\n \n             --  You need to set AH to BH or else in the case of enumerations\n             --  indices we will not be able to resolve the aggregate bounds.\n@@ -1298,13 +1298,13 @@ package body Sem_Aggr is\n          if OK_L and then Val_L > Val_AL then\n             Set_Raises_Constraint_Error (N);\n             Error_Msg_N (\"lower bound of aggregate out of range?\", N);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run-time?\", N);\n+            Error_Msg_N (\"\\Constraint_Error will be raised at run time?\", N);\n          end if;\n \n          if OK_H and then Val_H < Val_AH then\n             Set_Raises_Constraint_Error (N);\n             Error_Msg_N (\"upper bound of aggregate out of range?\", N);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run-time?\", N);\n+            Error_Msg_N (\"\\Constraint_Error will be raised at run time?\", N);\n          end if;\n       end Check_Bounds;\n \n@@ -1344,7 +1344,7 @@ package body Sem_Aggr is\n          if Range_Len < Len then\n             Set_Raises_Constraint_Error (N);\n             Error_Msg_N (\"too many elements?\", N);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run-time?\", N);\n+            Error_Msg_N (\"\\Constraint_Error will be raised at run time?\", N);\n          end if;\n       end Check_Length;\n "}, {"sha": "71730bead251cfba4e5b0d1115d4ff8d53da26be", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -6392,7 +6392,7 @@ package body Sem_Attr is\n       --  Note: for the folding case, it is fine to treat Machine_Rounding\n       --  exactly the same way as Rounding, since this is one of the allowed\n       --  behaviors, and performance is not an issue here. It might be a bit\n-      --  better to give the same result as it would give at run-time, even\n+      --  better to give the same result as it would give at run time, even\n       --  though the non-determinism is certainly permitted.\n \n       when Attribute_Machine_Rounding =>"}, {"sha": "43931b6a1bd1a9d5b4d1d3108a226f0c263b3f3f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -3148,7 +3148,7 @@ package body Sem_Ch3 is\n          --  A rather specialized test. If we see two tasks being declared\n          --  of the same type in the same object declaration, and the task\n          --  has an entry with an address clause, we know that program error\n-         --  will be raised at run-time since we can't have two tasks with\n+         --  will be raised at run time since we can't have two tasks with\n          --  entries at the same address.\n \n          if Is_Task_Type (Etype (Id)) and then More_Ids (N) then"}, {"sha": "ca4b051f2bbb4a5982a1f1295db56c3538c07042", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -3943,7 +3943,7 @@ package body Sem_Ch4 is\n \n                --  Check whether this is a component of the base type\n                --  which is absent from a statically constrained subtype.\n-               --  This will raise constraint error at run-time, but is\n+               --  This will raise constraint error at run time, but is\n                --  not a compile-time error. When the selector is illegal\n                --  for base type as well fall through and generate a\n                --  compilation error anyway."}, {"sha": "b4c214ddeeb8d7f55d2cb7a4497fea18d6d2321b", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -2288,7 +2288,7 @@ package body Sem_Elab is\n                     (\"task will be activated before elaboration of its body?\",\n                       Decl);\n                   Error_Msg_N\n-                    (\"\\Program_Error will be raised at run-time?\", Decl);\n+                    (\"\\Program_Error will be raised at run time?\", Decl);\n \n                elsif\n                  Present (Corresponding_Body (Unit_Declaration_Node (Proc)))"}, {"sha": "efc0c18bcafa3cf5ac050ea4e390081f86c3f180", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "patch": "@@ -7126,7 +7126,7 @@ package body Sem_Res is\n       --      end Test;\n \n       --  In this case we have nothing else to do. The membership test will be\n-      --  done at run-time.\n+      --  done at run time.\n \n       elsif Ada_Version >= Ada_05\n         and then Is_Class_Wide_Type (Etype (L))\n@@ -8175,7 +8175,7 @@ package body Sem_Res is\n                      --  the Sloc of the expression, not the original pragma.\n \n                      Error_Msg_N\n-                       (\"?assertion would fail at run-time!\",\n+                       (\"?assertion would fail at run time!\",\n                         Expression\n                           (First (Pragma_Argument_Associations (Orig))));\n                   end if;\n@@ -8201,7 +8201,7 @@ package body Sem_Res is\n                      null;\n                   else\n                      Error_Msg_N\n-                       (\"?check would fail at run-time!\",\n+                       (\"?check would fail at run time!\",\n                         Expression\n                           (Last (Pragma_Argument_Associations (Orig))));\n                   end if;\n@@ -8949,7 +8949,7 @@ package body Sem_Res is\n                      --  The static analysis is not enough to know if the\n                      --  interface is implemented or not. Hence we must pass\n                      --  the work to the expander to generate code to evaluate\n-                     --  the conversion at run-time.\n+                     --  the conversion at run time.\n \n                      Expand_Interface_Conversion (N, Is_Static => False);\n "}]}