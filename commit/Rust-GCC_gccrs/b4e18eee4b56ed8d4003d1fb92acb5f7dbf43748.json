{"sha": "b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMThlZWU0YjU2ZWQ4ZDQwMDNkMWZiOTJhY2I1ZjdkYmY0Mzc0OA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-02-02T16:34:17Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-02-02T16:34:17Z"}, "message": "expr.c (expand_byte_code): Call cache_this_class_ref() and cache_cpool_data_ref().\n\n2007-02-02  Andrew Haley  <aph@redhat.com>\n\n        * expr.c (expand_byte_code): Call cache_this_class_ref() and\n        cache_cpool_data_ref().\n        Set TYPE_CPOOL_DATA_REF.\n        (cache_cpool_data_ref): New function.\n        * constants.c (build_ref_from_constant_pool): Remove special-case\n        code for flag_indirect_classes.\n        (build_constant_data_ref): Move special-case code for\n        flag_indirect_classes here from build_ref_from_constant_pool.\n        * decl.c (finish_method): Move class initialization from here to\n        cache_this_class_ref.\n        * class.c (cache_this_class_ref): New function.\n        (build_class_ref): Use this_classdollar for the ouput class.\n\nFrom-SVN: r121508", "tree": {"sha": "825931419e51fa7cc806a34c9dce994cb91d820f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/825931419e51fa7cc806a34c9dce994cb91d820f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad12460bed01fc26b69eaa8292986d19f6e24cb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad12460bed01fc26b69eaa8292986d19f6e24cb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad12460bed01fc26b69eaa8292986d19f6e24cb5"}], "stats": {"total": 176, "additions": 126, "deletions": 50}, "files": [{"sha": "99e629b4a57ae3619c98c7f1d7181cbd11e9dad1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "patch": "@@ -1,3 +1,18 @@\n+2007-02-02  Andrew Haley  <aph@redhat.com>\n+\n+\t* expr.c (expand_byte_code): Call cache_this_class_ref() and\n+\tcache_cpool_data_ref().\n+\tSet TYPE_CPOOL_DATA_REF.\n+\t(cache_cpool_data_ref): New function.\n+\t* constants.c (build_ref_from_constant_pool): Remove special-case\n+\tcode for flag_indirect_classes.\n+\t(build_constant_data_ref): Move special-case code for\n+\tflag_indirect_classes here from build_ref_from_constant_pool.\n+\t* decl.c (finish_method): Move class initialization from here to\n+\tcache_this_class_ref.\n+\t* class.c (cache_this_class_ref): New function.\n+\t(build_class_ref): Use this_classdollar for the ouput class.\n+\n 2007-02-02  David Daney  <ddaney@avtrex.com>\n \n \t* class.c (is_compiled_class): Move check to avoid reloading"}, {"sha": "ec94a3c95345bf538be22c1dd16fe33d8402f509", "filename": "gcc/java/class.c", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "patch": "@@ -110,6 +110,10 @@ static GTY(()) tree class_roots[4];\n \n static GTY(()) VEC(tree,gc) *registered_class;\n \n+/* A tree that returns the address of the class$ of the class\n+   currently being compiled.  */\n+static GTY(()) tree this_classdollar;\n+\n /* Return the node that most closely represents the class whose name\n    is IDENT.  Start the search from NODE (followed by its siblings).\n    Return NULL if an appropriate node does not exist.  */\n@@ -1004,6 +1008,45 @@ build_classdollar_field (tree type)\n   return decl;\n }\n \n+/* Create a local variable that holds the the current class$.  */\n+\n+void\n+cache_this_class_ref (tree fndecl)\n+{\n+  if (optimize)\n+    {\n+      tree classdollar_field;\n+      if (flag_indirect_classes)\n+\tclassdollar_field = build_classdollar_field (output_class);\n+      else\n+\tclassdollar_field = build_static_class_ref (output_class);\n+\n+      this_classdollar = build_decl (VAR_DECL, NULL_TREE, \n+\t\t\t\t     TREE_TYPE (classdollar_field));\n+      \n+      java_add_local_var (this_classdollar);\n+      java_add_stmt (build2 (MODIFY_EXPR, TREE_TYPE (this_classdollar), \n+\t\t\t     this_classdollar, classdollar_field));\n+    }\n+  else\n+    this_classdollar = build_classdollar_field (output_class);\n+\n+  /* Prepend class initialization for static methods reachable from\n+     other classes.  */\n+  if (METHOD_STATIC (fndecl)\n+      && (! METHOD_PRIVATE (fndecl)\n+          || INNER_CLASS_P (DECL_CONTEXT (fndecl)))\n+      && ! DECL_CLINIT_P (fndecl)\n+      && ! CLASS_INTERFACE (TYPE_NAME (DECL_CONTEXT (fndecl))))\n+    {\n+      tree init = build3 (CALL_EXPR, void_type_node,\n+\t\t\t  build_address_of (soft_initclass_node),\n+\t\t\t  build_tree_list (NULL_TREE, this_classdollar),\n+\t\t\t  NULL_TREE);\n+      java_add_stmt (init);\n+    }\n+}\n+\n /* Build a reference to the class TYPE.\n    Also handles primitive types and array types. */\n \n@@ -1023,7 +1066,7 @@ build_class_ref (tree type)\n \treturn build_indirect_class_ref (type);\n \n       if (type == output_class && flag_indirect_classes)\n-\treturn build_classdollar_field (type);\n+\treturn this_classdollar;\n       \n       if (TREE_CODE (type) == RECORD_TYPE)\n \treturn build_static_class_ref (type);\n@@ -2443,7 +2486,7 @@ layout_class_methods (tree this_class)\n \n   if (TYPE_NVIRTUALS (this_class))\n     return;\n-\n+  \n   super_class = CLASSTYPE_SUPER (this_class);\n \n   if (super_class)"}, {"sha": "ca138f62130f001190b371ce5c7069b6449a0fba", "filename": "gcc/java/constants.c", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "patch": "@@ -36,7 +36,6 @@ static void set_constant_entry (CPool *, int, int, jword);\n static int find_tree_constant (CPool *, int, tree);\n static int find_name_and_type_constant (CPool *, tree, tree);\n static tree get_tag_node (int);\n-static tree build_constant_data_ref (void);\n \n /* Set the INDEX'th constant in CPOOL to have the given TAG and VALUE. */\n \n@@ -424,14 +423,36 @@ alloc_class_constant (tree clas)\n \n /* Return the decl of the data array of the current constant pool. */\n \n-static tree\n-build_constant_data_ref (void)\n+tree\n+build_constant_data_ref (bool indirect)\n {\n-  tree decl = TYPE_CPOOL_DATA_REF (output_class);\n+  if (indirect)\n+    {\n+      tree d;\n+      tree cpool_type = build_array_type (ptr_type_node, NULL_TREE);\n+      tree decl = build_class_ref (output_class);\n+      tree klass = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (decl)),\n+\t\t\t   decl);\n+      tree constants = build3 (COMPONENT_REF, \n+\t\t\t       TREE_TYPE (constants_field_decl_node), klass,\n+\t\t\t       constants_field_decl_node,\n+\t\t\t       NULL_TREE);\n+      tree data = build3 (COMPONENT_REF, \n+\t\t\t  TREE_TYPE (constants_data_field_decl_node), \n+\t\t\t  constants,\n+\t\t\t  constants_data_field_decl_node,\n+\t\t\t  NULL_TREE);\n \n-  if (decl == NULL_TREE)\n+      TREE_THIS_NOTRAP (klass) = 1;\n+      data = fold_convert (build_pointer_type (cpool_type), data);\n+      d = build1 (INDIRECT_REF, cpool_type, data);\n+      TREE_INVARIANT (d) = 1;\n+\n+      return d;\n+    }\n+  else\n     {\n-      tree type;\n+      tree type, decl;\n       tree decl_name = mangled_classname (\"_CD_\", output_class);\n \n       /* Build a type with unspecified bounds.  The will make sure\n@@ -446,38 +467,23 @@ build_constant_data_ref (void)\n \n       decl = build_decl (VAR_DECL, decl_name, type);\n       TREE_STATIC (decl) = 1;\n-      TYPE_CPOOL_DATA_REF (output_class) = decl;\n-    }\n \n-  return decl;\n+      return decl;\n+    }\n }\n \n /* Get the pointer value at the INDEX'th element of the constant pool. */\n \n tree\n build_ref_from_constant_pool (int index)\n {\n-  tree d = build_constant_data_ref ();\n-  tree i = build_int_cst (NULL_TREE, index);\n-  if (flag_indirect_classes)\n-    {\n-      tree decl = build_class_ref (output_class);\n-      tree klass = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (decl)),\n-\t\t\t   decl);\n-      tree constants = build3 (COMPONENT_REF, \n-\t\t\t       TREE_TYPE (constants_field_decl_node), klass,\n-\t\t\t       constants_field_decl_node,\n-\t\t\t       NULL_TREE);\n-      tree data = build3 (COMPONENT_REF, \n-\t\t\t  TREE_TYPE (constants_data_field_decl_node), \n-\t\t\t  constants,\n-\t\t\t  constants_data_field_decl_node,\n-\t\t\t  NULL_TREE);\n-      data = fold_convert (build_pointer_type (TREE_TYPE (d)), data);\n-      d = build1 (INDIRECT_REF, TREE_TYPE (d), data);\n-      /* FIXME: These should be cached.  */\n-      TREE_INVARIANT (d) = 1;\n-    }\n+  tree i;\n+  tree d = TYPE_CPOOL_DATA_REF (output_class);\n+\n+  if (d == NULL_TREE)\n+    d = build_constant_data_ref (flag_indirect_classes);\n+\n+  i = build_int_cst (NULL_TREE, index);\n   d = build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (d)), d, i,\n \t\t NULL_TREE, NULL_TREE);\n   TREE_INVARIANT (d) = 1;\n@@ -557,7 +563,7 @@ build_constants_constructor (void)\n       tags_list = tree_cons (NULL_TREE, get_tag_node (0), tags_list);\n       data_list = tree_cons (NULL_TREE, null_pointer_node, data_list);\n   \n-      data_decl = build_constant_data_ref ();\n+      data_decl = build_constant_data_ref (false);\n       TREE_TYPE (data_decl) = build_array_type (ptr_type_node, index_type);\n       DECL_INITIAL (data_decl) = build_constructor_from_list\n \t\t\t\t  (TREE_TYPE (data_decl), data_list);"}, {"sha": "e38c4bcbdd1882f21f0915d9a86e036e0a008a83", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "patch": "@@ -1876,22 +1876,6 @@ finish_method (tree fndecl)\n \t\t    build2 (TRY_FINALLY_EXPR, void_type_node, *tp, exit));\n     }\n \n-  /* Prepend class initialization for static methods reachable from\n-     other classes.  */\n-  if (METHOD_STATIC (fndecl)\n-      && (! METHOD_PRIVATE (fndecl)\n-          || INNER_CLASS_P (DECL_CONTEXT (fndecl)))\n-      && ! DECL_CLINIT_P (fndecl)\n-      && ! CLASS_INTERFACE (TYPE_NAME (DECL_CONTEXT (fndecl))))\n-    {\n-      tree clas = DECL_CONTEXT (fndecl);\n-      tree init = build3 (CALL_EXPR, void_type_node,\n-\t\t\t  build_address_of (soft_initclass_node),\n-\t\t\t  build_tree_list (NULL_TREE, build_class_ref (clas)),\n-\t\t\t  NULL_TREE);\n-      *tp = build2 (COMPOUND_EXPR, TREE_TYPE (*tp), init, *tp);\n-    }\n-\n   /* Convert function tree to GENERIC prior to inlining.  */\n   java_genericize (fndecl);\n "}, {"sha": "f7d35c68a251da7ae34b504b973b982315028842", "filename": "gcc/java/expr.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "patch": "@@ -83,6 +83,7 @@ static tree build_java_throw_out_of_bounds_exception (tree);\n static tree build_java_check_indexed_type (tree, tree); \n static unsigned char peek_opcode_at_pc (struct JCF *, int, int);\n static void promote_arguments (void);\n+static void cache_cpool_data_ref (void);\n \n static GTY(()) tree operand_type[59];\n \n@@ -3151,6 +3152,8 @@ expand_byte_code (JCF *jcf, tree method)\n     return;\n \n   promote_arguments ();\n+  cache_this_class_ref (method);\n+  cache_cpool_data_ref ();\n \n   /* Translate bytecodes.  */\n   linenumber_pointer = linenumber_table;\n@@ -3223,7 +3226,7 @@ expand_byte_code (JCF *jcf, tree method)\n       PC = process_jvm_instruction (PC, byte_ops, length);\n       maybe_poplevels (PC);\n     } /* for */\n-  \n+\n   if (dead_code_index != -1)\n     {\n       /* We've just reached the end of a region of dead code.  */\n@@ -3791,4 +3794,27 @@ promote_arguments (void)\n     }\n }\n \n+/* Create a local variable that points to the constant pool.  */\n+\n+static void\n+cache_cpool_data_ref (void)\n+{\n+  if (optimize)\n+    {\n+      tree cpool;\n+      tree d = build_constant_data_ref (flag_indirect_classes);\n+      tree cpool_ptr = build_decl (VAR_DECL, NULL_TREE, \n+\t\t\t\t   build_pointer_type (TREE_TYPE (d)));\n+      java_add_local_var (cpool_ptr);\n+      TREE_INVARIANT (cpool_ptr) = 1;\n+      TREE_CONSTANT (cpool_ptr) = 1;\n+\n+      java_add_stmt (build2 (MODIFY_EXPR, TREE_TYPE (cpool_ptr), \n+\t\t\t     cpool_ptr, build_address_of (d)));\n+      cpool = build1 (INDIRECT_REF, TREE_TYPE (d), cpool_ptr);\n+      TREE_THIS_NOTRAP (cpool) = 1;\n+      TYPE_CPOOL_DATA_REF (output_class) = cpool;\n+    }\n+}\n+\n #include \"gt-java-expr.h\""}, {"sha": "f564b5918fd44c88793796fe6b99acd6f14fb865", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "patch": "@@ -1129,10 +1129,12 @@ extern void layout_class (tree);\n extern int get_interface_method_index (tree, tree);\n extern tree layout_class_method (tree, tree, tree, tree);\n extern void layout_class_methods (tree);\n+extern void cache_this_class_ref (tree);\n extern tree build_class_ref (tree);\n extern tree build_dtable_decl (tree);\n extern tree build_internal_class_name (tree);\n extern tree build_constants_constructor (void);\n+extern tree build_constant_data_ref (bool);\n extern tree build_ref_from_constant_pool (int);\n extern tree build_utf8_ref (tree);\n extern tree ident_subst (const char *, int, const char *, int, int,"}]}