{"sha": "4656461585bfd0b925553995a9d114645f1287d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY1NjQ2MTU4NWJmZDBiOTI1NTUzOTk1YTlkMTE0NjQ1ZjEyODdkMA==", "commit": {"author": {"name": "Strager Neds", "email": "strager.nds@gmail.com", "date": "2020-11-11T03:57:04Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-11T03:59:01Z"}, "message": "Improve efficiency of copying section from another tree\n\ngcc/\n\t* cgraph.h (symtab_node::set_section_for_node): Declare new\n\toverload.\n\t(symtab_node::set_section_from_string): Rename from set_section.\n\t(symtab_node::set_section_from_node): Declare.\n\t* symtab.c (symtab_node::set_section_for_node): Define new\n\toverload.\n\t(symtab_node::set_section_from_string): Rename from set_section.\n\t(symtab_node::set_section_from_node): Define.\n\t(symtab_node::set_section): Call renamed set_section_from_string.\n\t(symtab_node::set_section): Call new set_section_from_node.", "tree": {"sha": "f7d27f8f244e4b089232ef01ee4280ac759b737f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7d27f8f244e4b089232ef01ee4280ac759b737f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4656461585bfd0b925553995a9d114645f1287d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4656461585bfd0b925553995a9d114645f1287d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4656461585bfd0b925553995a9d114645f1287d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4656461585bfd0b925553995a9d114645f1287d0/comments", "author": {"login": "strager", "id": 48666, "node_id": "MDQ6VXNlcjQ4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/48666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/strager", "html_url": "https://github.com/strager", "followers_url": "https://api.github.com/users/strager/followers", "following_url": "https://api.github.com/users/strager/following{/other_user}", "gists_url": "https://api.github.com/users/strager/gists{/gist_id}", "starred_url": "https://api.github.com/users/strager/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/strager/subscriptions", "organizations_url": "https://api.github.com/users/strager/orgs", "repos_url": "https://api.github.com/users/strager/repos", "events_url": "https://api.github.com/users/strager/events{/privacy}", "received_events_url": "https://api.github.com/users/strager/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e79de0682e6cb6fe041a22f81cc65375c8c15bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79de0682e6cb6fe041a22f81cc65375c8c15bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79de0682e6cb6fe041a22f81cc65375c8c15bff"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "97287bda6f0800f2ef761ec9191caeee10f86a3f", "filename": "gcc/cgraph.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4656461585bfd0b925553995a9d114645f1287d0/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4656461585bfd0b925553995a9d114645f1287d0/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=4656461585bfd0b925553995a9d114645f1287d0", "patch": "@@ -330,6 +330,10 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n      use set_section.  */\n   void set_section_for_node (const char *section);\n \n+  /* Like set_section_for_node, but copying the section name from another\n+     node.  */\n+  void set_section_for_node (const symtab_node &other);\n+\n   /* Set initialization priority to PRIORITY.  */\n   void set_init_priority (priority_type priority);\n \n@@ -646,8 +650,9 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n \t\t\t\t      void *data,\n \t\t\t\t      bool include_overwrite);\n private:\n-  /* Worker for set_section.  */\n-  static bool set_section (symtab_node *n, void *s);\n+  /* Workers for set_section.  */\n+  static bool set_section_from_string (symtab_node *n, void *s);\n+  static bool set_section_from_node (symtab_node *n, void *o);\n \n   /* Worker for symtab_resolve_alias.  */\n   static bool set_implicit_section (symtab_node *n, void *);"}, {"sha": "393d6b078707cd154c4e2a8a6f7fcc5f3031be9d", "filename": "gcc/symtab.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4656461585bfd0b925553995a9d114645f1287d0/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4656461585bfd0b925553995a9d114645f1287d0/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=4656461585bfd0b925553995a9d114645f1287d0", "patch": "@@ -1668,31 +1668,52 @@ symtab_node::set_section_for_node (const char *section)\n     }\n }\n \n-/* Worker for set_section.  */\n+void\n+symtab_node::set_section_for_node (const symtab_node &other)\n+{\n+  if (x_section == other.x_section)\n+    return;\n+  if (get_section () && other.get_section ())\n+    gcc_checking_assert (strcmp (get_section (), other.get_section ()) != 0);\n+  release_section_hash_entry (x_section);\n+  if (other.x_section)\n+    x_section = retain_section_hash_entry (other.x_section);\n+  else\n+    x_section = NULL;\n+}\n+\n+/* Workers for set_section.  */\n \n bool\n-symtab_node::set_section (symtab_node *n, void *s)\n+symtab_node::set_section_from_string (symtab_node *n, void *s)\n {\n   n->set_section_for_node ((char *)s);\n   return false;\n }\n \n+bool\n+symtab_node::set_section_from_node (symtab_node *n, void *o)\n+{\n+  const symtab_node &other = *static_cast<const symtab_node *> (o);\n+  n->set_section_for_node (other);\n+  return false;\n+}\n+\n /* Set section of symbol and its aliases.  */\n \n void\n symtab_node::set_section (const char *section)\n {\n   gcc_assert (!this->alias || !this->analyzed);\n   call_for_symbol_and_aliases\n-    (symtab_node::set_section, const_cast<char *>(section), true);\n+    (symtab_node::set_section_from_string, const_cast<char *>(section), true);\n }\n \n void\n symtab_node::set_section (const symtab_node &other)\n {\n-  const char *section = other.get_section ();\n   call_for_symbol_and_aliases\n-    (symtab_node::set_section, const_cast<char *>(section), true);\n+    (symtab_node::set_section_from_node, const_cast<symtab_node *>(&other), true);\n }\n \n /* Return the initialization priority.  */"}]}