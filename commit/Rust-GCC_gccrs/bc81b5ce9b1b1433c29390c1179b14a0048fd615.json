{"sha": "bc81b5ce9b1b1433c29390c1179b14a0048fd615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4MWI1Y2U5YjFiMTQzM2MyOTM5MGMxMTc5YjE0YTAwNDhmZDYxNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2015-03-02T18:56:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-03-02T18:56:51Z"}, "message": "check.c (gfc_check_atomic): Properly check for coarrayness and for being coindexed.\n\n2015-03-02  Tobias Burnus  <burnus@net-b.de>\n\n        * check.c (gfc_check_atomic): Properly check for coarrayness\n        and for being coindexed.\n\n2015-03-02  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_atomic_6.f90: New.\n\nFrom-SVN: r221122", "tree": {"sha": "430ad9093a901be4e63fd18520d2810c008df5fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/430ad9093a901be4e63fd18520d2810c008df5fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc81b5ce9b1b1433c29390c1179b14a0048fd615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc81b5ce9b1b1433c29390c1179b14a0048fd615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc81b5ce9b1b1433c29390c1179b14a0048fd615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc81b5ce9b1b1433c29390c1179b14a0048fd615/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af5513e96b5539e4b3368050ba9064bb41b391f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5513e96b5539e4b3368050ba9064bb41b391f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5513e96b5539e4b3368050ba9064bb41b391f2"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "e61ad02e89773e55611dbb23e60c82a9592983aa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bc81b5ce9b1b1433c29390c1179b14a0048fd615", "patch": "@@ -1,3 +1,8 @@\n+2015-03-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_atomic): Properly check for coarrayness\n+\tand for being coindexed.\n+\n 2015-02-26  Martin Liska  <mliska@suse.cz>\n \n \t* resolve.c: Rename enum 'comparison' to 'compare_result' as"}, {"sha": "cdb5ff1cba696dde5ebea8d2beb1579fccb4b6ef", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=bc81b5ce9b1b1433c29390c1179b14a0048fd615", "patch": "@@ -1022,7 +1022,7 @@ gfc_check_atomic (gfc_expr *atom, int atom_no, gfc_expr *value, int val_no,\n       return false;\n     }\n \n-  if (!gfc_expr_attr (atom).codimension)\n+  if (!gfc_is_coarray (atom) && !gfc_is_coindexed (atom))\n     {\n       gfc_error (\"ATOM argument at %L of the %s intrinsic function shall be a \"\n \t\t \"coarray or coindexed\", &atom->where, gfc_current_intrinsic);"}, {"sha": "9c4b587f6f0c71a136269d5722da1a879df54850", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc81b5ce9b1b1433c29390c1179b14a0048fd615", "patch": "@@ -1,3 +1,7 @@\n+2015-03-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_atomic_6.f90: New.\n+\n 2015-03-02  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/65184"}, {"sha": "a0f19a84eff05f114f7114da8add2e42a0f5e28b", "filename": "gcc/testsuite/gfortran.dg/coarray_atomic_6.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_atomic_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81b5ce9b1b1433c29390c1179b14a0048fd615/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_atomic_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_atomic_6.f90?ref=bc81b5ce9b1b1433c29390c1179b14a0048fd615", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! Contributed by Reinhold Bader\n+!\n+!\n+program def_and_ref\n+! compile only\n+  use, intrinsic :: iso_fortran_env\n+  implicit none\n+  type :: e\n+    integer(kind=atomic_int_kind) :: ia = 0\n+    logical(kind=atomic_logical_kind) :: la = .false.\n+  end type \n+\n+  type(e) :: a[*]\n+  \n+  integer :: ival = 0\n+  logical :: lval = .false.\n+\n+  if (this_image() == 1) then\n+    call atomic_define(a[num_images()]%ia, 4)\n+    call atomic_define(a[num_images()]%la, .true.)\n+  end if\n+  if (this_image() == num_images()) then\n+    do while (ival == 0 .or. .not. lval)\n+       call atomic_ref(ival, a%ia)\n+       call atomic_ref(lval, a%la)\n+    end do\n+    if (ival == 4 .and. lval) then\n+      write(*,*) 'OK'\n+    else\n+      write(*,*) 'FAIL: ival,lval =', ival, lval\n+    end if\n+  end if\n+end program"}]}