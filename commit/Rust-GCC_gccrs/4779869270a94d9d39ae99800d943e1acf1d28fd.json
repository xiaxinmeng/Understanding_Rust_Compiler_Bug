{"sha": "4779869270a94d9d39ae99800d943e1acf1d28fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3OTg2OTI3MGE5NGQ5ZDM5YWU5OTgwMGQ5NDNlMWFjZjFkMjhmZA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-08-23T15:39:18Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-08-23T15:39:18Z"}, "message": "s390.c (s390_expand_movstr, [...]): Use ISO C syntax for function pointer calls.\n\n\t* config/s390/s390.c (s390_expand_movstr, s390_expand_clrstr,\n\ts390_expand_cmpmem, s390_output_constant_pool, s390_build_va_list,\n\ts390_function_profiler, s390_output_mi_thunk): Use ISO C syntax\n\tfor function pointer calls.\n\t* config/s390/s390.md (\"*negdi2_31\"): Likewise.\n\nFrom-SVN: r70735", "tree": {"sha": "71d795a8f2805cd92c45b4340c3e59e1be66b166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71d795a8f2805cd92c45b4340c3e59e1be66b166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4779869270a94d9d39ae99800d943e1acf1d28fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4779869270a94d9d39ae99800d943e1acf1d28fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4779869270a94d9d39ae99800d943e1acf1d28fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4779869270a94d9d39ae99800d943e1acf1d28fd/comments", "author": null, "committer": null, "parents": [{"sha": "a0209ac28f50b768f82d83e6ad6f5eabc21e8b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0209ac28f50b768f82d83e6ad6f5eabc21e8b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0209ac28f50b768f82d83e6ad6f5eabc21e8b44"}], "stats": {"total": 96, "additions": 52, "deletions": 44}, "files": [{"sha": "e48466e1f0c9c2681603e05e9aaf7c6b9dad4f6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4779869270a94d9d39ae99800d943e1acf1d28fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4779869270a94d9d39ae99800d943e1acf1d28fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4779869270a94d9d39ae99800d943e1acf1d28fd", "patch": "@@ -1,3 +1,11 @@\n+2003-08-23  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_movstr, s390_expand_clrstr,\n+\ts390_expand_cmpmem, s390_output_constant_pool, s390_build_va_list,\n+\ts390_function_profiler, s390_output_mi_thunk): Use ISO C syntax\n+\tfor function pointer calls.\n+\t* config/s390/s390.md (\"*negdi2_31\"): Likewise.\n+\n 2003-08-23  Roger Sayle  <roger@eyesopen.com>\n \n \t* combine.c (apply_distributive_law): Correct comment."}, {"sha": "b89fcee2881dfb651677350a204f9bf3af0772df", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4779869270a94d9d39ae99800d943e1acf1d28fd/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4779869270a94d9d39ae99800d943e1acf1d28fd/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4779869270a94d9d39ae99800d943e1acf1d28fd", "patch": "@@ -2855,7 +2855,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n   if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n     {\n       if (INTVAL (len) > 0)\n-        emit_insn ((*gen_short) (dst, src, GEN_INT (INTVAL (len) - 1)));\n+        emit_insn (gen_short (dst, src, GEN_INT (INTVAL (len) - 1)));\n     }\n \n   else if (TARGET_MVCLE)\n@@ -2873,7 +2873,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n       convert_move (gen_lowpart (single_mode, reg0), len, 1);\n       convert_move (gen_lowpart (single_mode, reg1), len, 1);\n \n-      emit_insn ((*gen_long) (reg0, reg1, reg0, reg1));\n+      emit_insn (gen_long (reg0, reg1, reg0, reg1));\n     }\n \n   else\n@@ -2887,7 +2887,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n       if (mode == VOIDmode)\n         mode = word_mode;\n \n-      type = (*lang_hooks.types.type_for_mode) (mode, 1);\n+      type = lang_hooks.types.type_for_mode (mode, 1);\n       if (!type)\n         abort ();\n \n@@ -2918,7 +2918,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n \t\t\t\t\t   make_tree (type, blocks),\n \t\t\t\t\t   make_tree (type, const0_rtx)));\n \n-      emit_insn ((*gen_short) (dst, src, GEN_INT (255)));\n+      emit_insn (gen_short (dst, src, GEN_INT (255)));\n       s390_load_address (dst_addr,\n \t\t\t gen_rtx_PLUS (Pmode, dst_addr, GEN_INT (256)));\n       s390_load_address (src_addr,\n@@ -2930,7 +2930,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n \n       expand_end_loop ();\n \n-      emit_insn ((*gen_short) (dst, src, convert_to_mode (word_mode, count, 1)));\n+      emit_insn (gen_short (dst, src, convert_to_mode (word_mode, count, 1)));\n       emit_label (end_label);\n     }\n }\n@@ -2949,7 +2949,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n   if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n     {\n       if (INTVAL (len) > 0)\n-        emit_insn ((*gen_short) (dst, GEN_INT (INTVAL (len) - 1)));\n+        emit_insn (gen_short (dst, GEN_INT (INTVAL (len) - 1)));\n     }\n \n   else if (TARGET_MVCLE)\n@@ -2966,7 +2966,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n       emit_move_insn (gen_highpart (single_mode, reg1), const0_rtx);\n       emit_move_insn (gen_lowpart (single_mode, reg1), const0_rtx);\n \n-      emit_insn ((*gen_long) (reg0, reg1, reg0));\n+      emit_insn (gen_long (reg0, reg1, reg0));\n     }\n \n   else\n@@ -2980,7 +2980,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n       if (mode == VOIDmode)\n         mode = word_mode;\n \n-      type = (*lang_hooks.types.type_for_mode) (mode, 1);\n+      type = lang_hooks.types.type_for_mode (mode, 1);\n       if (!type)\n         abort ();\n \n@@ -3009,7 +3009,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n \t\t\t\t\t   make_tree (type, blocks),\n \t\t\t\t\t   make_tree (type, const0_rtx)));\n \n-      emit_insn ((*gen_short) (dst, GEN_INT (255)));\n+      emit_insn (gen_short (dst, GEN_INT (255)));\n       s390_load_address (dst_addr,\n \t\t\t gen_rtx_PLUS (Pmode, dst_addr, GEN_INT (256)));\n \n@@ -3019,7 +3019,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n \n       expand_end_loop ();\n \n-      emit_insn ((*gen_short) (dst, convert_to_mode (word_mode, count, 1)));\n+      emit_insn (gen_short (dst, convert_to_mode (word_mode, count, 1)));\n       emit_label (end_label);\n     }\n }\n@@ -3045,8 +3045,8 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n     {\n       if (INTVAL (len) > 0)\n         {\n-          emit_insn ((*gen_short) (op0, op1, GEN_INT (INTVAL (len) - 1)));\n-          emit_insn ((*gen_result) (target));\n+          emit_insn (gen_short (op0, op1, GEN_INT (INTVAL (len) - 1)));\n+          emit_insn (gen_result (target));\n         }\n       else\n         emit_move_insn (target, const0_rtx);\n@@ -3067,8 +3067,8 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n       convert_move (gen_lowpart (single_mode, reg0), len, 1);\n       convert_move (gen_lowpart (single_mode, reg1), len, 1);\n \n-      emit_insn ((*gen_long) (reg0, reg1, reg0, reg1));\n-      emit_insn ((*gen_result) (target));\n+      emit_insn (gen_long (reg0, reg1, reg0, reg1));\n+      emit_insn (gen_result (target));\n     }\n \n #if 0\n@@ -3085,7 +3085,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n       if (mode == VOIDmode)\n         mode = word_mode;\n \n-      type = (*lang_hooks.types.type_for_mode) (mode, 1);\n+      type = lang_hooks.types.type_for_mode (mode, 1);\n       if (!type)\n         abort ();\n \n@@ -3116,7 +3116,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n \t\t\t\t\t   make_tree (type, blocks),\n \t\t\t\t\t   make_tree (type, const0_rtx)));\n \n-      emit_insn ((*gen_short) (op0, op1, GEN_INT (255)));\n+      emit_insn (gen_short (op0, op1, GEN_INT (255)));\n       temp = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCSmode, 33), const0_rtx);\n       temp = gen_rtx_IF_THEN_ELSE (VOIDmode, temp,\n \t\t\tgen_rtx_LABEL_REF (VOIDmode, end_label), pc_rtx);\n@@ -3134,10 +3134,10 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n \n       expand_end_loop ();\n \n-      emit_insn ((*gen_short) (op0, op1, convert_to_mode (word_mode, count, 1)));\n+      emit_insn (gen_short (op0, op1, convert_to_mode (word_mode, count, 1)));\n       emit_label (end_label);\n \n-      emit_insn ((*gen_result) (target));\n+      emit_insn (gen_result (target));\n     }\n #endif\n }\n@@ -4696,13 +4696,13 @@ s390_output_constant_pool (rtx start_label, rtx end_label)\n     {\n       readonly_data_section ();\n       ASM_OUTPUT_ALIGN (asm_out_file, 3);\n-      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n-\t\t\t\t\t CODE_LABEL_NUMBER (start_label));\n+      targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t      CODE_LABEL_NUMBER (start_label));\n     }\n   else\n     {\n-      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n-\t\t\t\t\t CODE_LABEL_NUMBER (start_label));\n+      targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t      CODE_LABEL_NUMBER (start_label));\n       ASM_OUTPUT_ALIGN (asm_out_file, 2);\n     }\n \n@@ -4714,8 +4714,8 @@ s390_output_constant_pool (rtx start_label, rtx end_label)\n   else\n     {\n       ASM_OUTPUT_ALIGN (asm_out_file, 1);\n-      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n-\t\t\t\t\t CODE_LABEL_NUMBER (end_label));\n+      targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t      CODE_LABEL_NUMBER (end_label));\n     }\n }\n \n@@ -5883,7 +5883,7 @@ s390_build_va_list (void)\n {\n   tree f_gpr, f_fpr, f_ovf, f_sav, record, type_decl;\n \n-  record = (*lang_hooks.types.make_type) (RECORD_TYPE);\n+  record = lang_hooks.types.make_type (RECORD_TYPE);\n \n   type_decl =\n     build_decl (TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n@@ -6401,7 +6401,7 @@ s390_function_profiler (FILE *file, int labelno)\n       output_asm_insn (\"bras\\t%2,%l6\", op);\n       output_asm_insn (\".long\\t%4\", op);\n       output_asm_insn (\".long\\t%3\", op);\n-      (*targetm.asm_out.internal_label) (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n+      targetm.asm_out.internal_label (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n       output_asm_insn (\"l\\t%0,0(%2)\", op);\n       output_asm_insn (\"l\\t%2,4(%2)\", op);\n       output_asm_insn (\"basr\\t%0,%0\", op);\n@@ -6414,10 +6414,10 @@ s390_function_profiler (FILE *file, int labelno)\n \n       output_asm_insn (\"st\\t%0,%1\", op);\n       output_asm_insn (\"bras\\t%2,%l6\", op);\n-      (*targetm.asm_out.internal_label) (file, \"L\", CODE_LABEL_NUMBER (op[5]));\n+      targetm.asm_out.internal_label (file, \"L\", CODE_LABEL_NUMBER (op[5]));\n       output_asm_insn (\".long\\t%4-%l5\", op);\n       output_asm_insn (\".long\\t%3-%l5\", op);\n-      (*targetm.asm_out.internal_label) (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n+      targetm.asm_out.internal_label (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n       output_asm_insn (\"lr\\t%0,%2\", op);\n       output_asm_insn (\"a\\t%0,0(%2)\", op);\n       output_asm_insn (\"a\\t%2,4(%2)\", op);\n@@ -6562,19 +6562,19 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       if (op[5])\n \t{\n \t  output_asm_insn (\".align\\t4\", op);\n-\t  (*targetm.asm_out.internal_label) (file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (op[5]));\n+\t  targetm.asm_out.internal_label (file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (op[5]));\n \t}\n       if (op[6])\n \t{\n-\t  (*targetm.asm_out.internal_label) (file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (op[6]));\n+\t  targetm.asm_out.internal_label (file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (op[6]));\n \t  output_asm_insn (\".long\\t%2\", op);\n \t}\n       if (op[7])\n \t{\n-\t  (*targetm.asm_out.internal_label) (file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (op[7]));\n+\t  targetm.asm_out.internal_label (file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (op[7]));\n \t  output_asm_insn (\".long\\t%3\", op);\n \t}\n     }\n@@ -6589,8 +6589,8 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t{\n \t  op[5] = gen_label_rtx ();\n \t  output_asm_insn (\"basr\\t%4,0\", op);\n-\t  (*targetm.asm_out.internal_label) (file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (op[5]));\n+\t  targetm.asm_out.internal_label (file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (op[5]));\n \t}\n \n       /* Add DELTA to this pointer.  */\n@@ -6640,8 +6640,8 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t     Re-setup the base pointer (with a different base).  */\n \t  op[5] = gen_label_rtx ();\n \t  output_asm_insn (\"basr\\t%4,0\", op);\n-\t  (*targetm.asm_out.internal_label) (file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (op[5]));\n+\t  targetm.asm_out.internal_label (file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (op[5]));\n \t}\n \n       /* Jump to target.  */\n@@ -6679,22 +6679,22 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t  SYMBOL_REF_FLAGS (op[0]) = SYMBOL_FLAG_LOCAL;\n \t}\n \n-      (*targetm.asm_out.internal_label) (file, \"L\", CODE_LABEL_NUMBER (op[8]));\n+      targetm.asm_out.internal_label (file, \"L\", CODE_LABEL_NUMBER (op[8]));\n       if (!flag_pic)\n \toutput_asm_insn (\".long\\t%0\", op);\n       else\n \toutput_asm_insn (\".long\\t%0-%5\", op);\n \n       if (op[6])\n \t{\n-\t  (*targetm.asm_out.internal_label) (file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (op[6]));\n+\t  targetm.asm_out.internal_label (file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (op[6]));\n \t  output_asm_insn (\".long\\t%2\", op);\n \t}\n       if (op[7])\n \t{\n-\t  (*targetm.asm_out.internal_label) (file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (op[7]));\n+\t  targetm.asm_out.internal_label (file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (op[7]));\n \t  output_asm_insn (\".long\\t%3\", op);\n \t}\n     }"}, {"sha": "6bf46f809bc36238f37ed85dabec0c4d4bde2f81", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4779869270a94d9d39ae99800d943e1acf1d28fd/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4779869270a94d9d39ae99800d943e1acf1d28fd/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=4779869270a94d9d39ae99800d943e1acf1d28fd", "patch": "@@ -5265,7 +5265,7 @@\n   output_asm_insn (\"lcr\\t%N0,%N1\", operands);\n   output_asm_insn (\"je\\t%l0\", xop);\n   output_asm_insn (\"bctr\\t%0,0\", operands);\n-  (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n+  targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t     CODE_LABEL_NUMBER (xop[0]));\n   return \"\";\n }"}]}