{"sha": "44f30851a734c3ce962a44a8a0a2bf3f6d564204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmMzA4NTFhNzM0YzNjZTk2MmE0NGE4YTBhMmJmM2Y2ZDU2NDIwNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-08-11T19:42:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-23T08:24:43Z"}, "message": "[Ada] Take advantage of Long_Long_Long_Integer in From_String\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin.adb (From_String): Take advantage of\n\tLong_Long_Long_Integer.\n\t* libgnat/s-genbig.ads, libgnat/s-genbig.adb (To_Bignum): New\n\tfunction taking a Long_Long_Long_Integer.", "tree": {"sha": "b8862428754209cfc7f4c4abc2d003884736efad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8862428754209cfc7f4c4abc2d003884736efad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f30851a734c3ce962a44a8a0a2bf3f6d564204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f30851a734c3ce962a44a8a0a2bf3f6d564204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f30851a734c3ce962a44a8a0a2bf3f6d564204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f30851a734c3ce962a44a8a0a2bf3f6d564204/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01364aeb56648c50a59027a290e9b72156bfc427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01364aeb56648c50a59027a290e9b72156bfc427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01364aeb56648c50a59027a290e9b72156bfc427"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "70df2c26f489f7af72395d8ed55e66fe48356abe", "filename": "gcc/ada/libgnat/a-nbnbin.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f30851a734c3ce962a44a8a0a2bf3f6d564204/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f30851a734c3ce962a44a8a0a2bf3f6d564204/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb?ref=44f30851a734c3ce962a44a8a0a2bf3f6d564204", "patch": "@@ -238,8 +238,8 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    function From_String (Arg : String) return Big_Integer is\n       Result : Big_Integer;\n    begin\n-      --  ??? only support Long_Long_Integer, good enough for now\n-      Set_Bignum (Result, To_Bignum (Long_Long_Integer'Value (Arg)));\n+      --  ??? only support Long_Long_Long_Integer, good enough for now\n+      Set_Bignum (Result, To_Bignum (Long_Long_Long_Integer'Value (Arg)));\n       return Result;\n    end From_String;\n "}, {"sha": "12167acd6f87fc109e74890c0d0d659784a30013", "filename": "gcc/ada/libgnat/s-genbig.adb", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f30851a734c3ce962a44a8a0a2bf3f6d564204/gcc%2Fada%2Flibgnat%2Fs-genbig.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f30851a734c3ce962a44a8a0a2bf3f6d564204/gcc%2Fada%2Flibgnat%2Fs-genbig.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-genbig.adb?ref=44f30851a734c3ce962a44a8a0a2bf3f6d564204", "patch": "@@ -1120,7 +1120,33 @@ package body System.Generic_Bignums is\n    -- To_Bignum --\n    ---------------\n \n-   function To_Bignum (X : Long_Long_Integer) return Big_Integer is\n+   function To_Bignum (X : Long_Long_Long_Integer) return Big_Integer is\n+\n+      function Convert_128\n+        (X : Long_Long_Long_Integer; Neg : Boolean) return Big_Integer;\n+      --  Convert a 128 bits natural integer to a Big_Integer\n+\n+      -----------------\n+      -- Convert_128 --\n+      -----------------\n+\n+      function Convert_128\n+        (X : Long_Long_Long_Integer; Neg : Boolean) return Big_Integer\n+      is\n+         Vector : Digit_Vector (1 .. 4);\n+         High   : constant Unsigned_64 :=\n+           Unsigned_64 (Shift_Right (Unsigned_128 (X), 64));\n+         Low    : constant Unsigned_64 :=\n+           Unsigned_64 (Unsigned_128 (X) and 16#FFFF_FFFF_FFFF_FFFF#);\n+\n+      begin\n+         Vector (1) := SD (High / Base);\n+         Vector (2) := SD (High mod Base);\n+         Vector (3) := SD (Low / Base);\n+         Vector (4) := SD (Low mod Base);\n+         return Normalize (Vector, Neg);\n+      end Convert_128;\n+\n    begin\n       if X = 0 then\n          return Allocate_Big_Integer ((1 .. 0 => <>), False);\n@@ -1130,23 +1156,43 @@ package body System.Generic_Bignums is\n       elsif X in -(2 ** 32 - 1) .. +(2 ** 32 - 1) then\n          return Allocate_Big_Integer ((1 => SD (abs X)), X < 0);\n \n-      --  Largest negative number annoyance\n+      --  Large negative number annoyance\n \n-      elsif X = Long_Long_Integer'First then\n+      elsif X = -2 ** 63 then\n          return Allocate_Big_Integer ((2 ** 31, 0), True);\n \n+      elsif Long_Long_Long_Integer'Size = 128\n+        and then X = Long_Long_Long_Integer'First\n+      then\n+         return Allocate_Big_Integer ((2 ** 31, 0, 0, 0), True);\n+\n       --  Other negative numbers\n \n       elsif X < 0 then\n-         return Allocate_Big_Integer\n-                  ((SD ((-X) / Base), SD ((-X) mod Base)), True);\n+         if Long_Long_Long_Integer'Size = 64 then\n+            return Allocate_Big_Integer\n+                     ((SD ((-X) / Base), SD ((-X) mod Base)), True);\n+         else\n+            return Convert_128 (-X, True);\n+         end if;\n \n       --  Positive numbers\n+\n       else\n-         return Allocate_Big_Integer ((SD (X / Base), SD (X mod Base)), False);\n+         if Long_Long_Long_Integer'Size = 64 then\n+            return Allocate_Big_Integer\n+                     ((SD (X / Base), SD (X mod Base)), False);\n+         else\n+            return Convert_128 (X, False);\n+         end if;\n       end if;\n    end To_Bignum;\n \n+   function To_Bignum (X : Long_Long_Integer) return Big_Integer is\n+   begin\n+      return To_Bignum (Long_Long_Long_Integer (X));\n+   end To_Bignum;\n+\n    function To_Bignum (X : Unsigned_64) return Big_Integer is\n    begin\n       if X = 0 then"}, {"sha": "81e3843b550a5084a0d11d8325b24047dfce7d7d", "filename": "gcc/ada/libgnat/s-genbig.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f30851a734c3ce962a44a8a0a2bf3f6d564204/gcc%2Fada%2Flibgnat%2Fs-genbig.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f30851a734c3ce962a44a8a0a2bf3f6d564204/gcc%2Fada%2Flibgnat%2Fs-genbig.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-genbig.ads?ref=44f30851a734c3ce962a44a8a0a2bf3f6d564204", "patch": "@@ -101,6 +101,10 @@ package System.Generic_Bignums is\n    --  Convert Long_Long_Integer to a big integer. No exception can be raised\n    --  for any input argument.\n \n+   function To_Bignum (X : Long_Long_Long_Integer) return Big_Integer;\n+   --  Convert Long_Long_Long_Integer to a big integer. No exception can be\n+   --  raised.\n+\n    function To_Bignum (X : Interfaces.Unsigned_64) return Big_Integer;\n    --  Convert Unsigned_64 to a big integer. No exception can be raised for any\n    --  input argument."}]}