{"sha": "d256b8669e87efe692edcb1ae052cb0d2a839d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1NmI4NjY5ZTg3ZWZlNjkyZWRjYjFhZTA1MmNiMGQyYTgzOWQyOQ==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-01-27T19:25:32Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-01-27T19:25:32Z"}, "message": "avx512fintrin.h (_mm512_mask_cvtepi32_storeu_epi8): New.\n\ngcc/\n\t* config/i386/avx512fintrin.h (_mm512_mask_cvtepi32_storeu_epi8): New.\n\t(_mm512_mask_cvtsepi32_storeu_epi8): Ditto.\n\t(_mm512_mask_cvtusepi32_storeu_epi8): Ditto.\n\t(_mm512_mask_cvtepi32_storeu_epi16): Ditto.\n\t(_mm512_mask_cvtsepi32_storeu_epi16): Ditto.\n\t(_mm512_mask_cvtusepi32_storeu_epi16): Ditto.\n\t(_mm512_mask_cvtepi64_storeu_epi32): Ditto.\n\t(_mm512_mask_cvtsepi64_storeu_epi32): Ditto.\n\t(_mm512_mask_cvtusepi64_storeu_epi32): Ditto.\n\t(_mm512_mask_cvtepi64_storeu_epi16): Ditto.\n\t(_mm512_mask_cvtsepi64_storeu_epi16): Ditto.\n\t(_mm512_mask_cvtusepi64_storeu_epi16): Ditto.\n\t(_mm512_mask_cvtepi64_storeu_epi8): Ditto.\n\t(_mm512_mask_cvtsepi64_storeu_epi8): Ditto.\n\t(_mm512_mask_cvtusepi64_storeu_epi8): Ditto.\n\t(_mm512_storeu_epi64): Ditto.\n\t(_mm512_cmpge_epi32_mask): Ditto.\n\t(_mm512_cmpge_epu32_mask): Ditto.\n\t(_mm512_cmpge_epi64_mask): Ditto.\n\t(_mm512_cmpge_epu64_mask): Ditto.\n\t(_mm512_cmple_epi32_mask): Ditto.\n\t(_mm512_cmple_epu32_mask): Ditto.\n\t(_mm512_cmple_epi64_mask): Ditto.\n\t(_mm512_cmple_epu64_mask): Ditto.\n\t(_mm512_cmplt_epi32_mask): Ditto.\n\t(_mm512_cmplt_epu32_mask): Ditto.\n\t(_mm512_cmplt_epi64_mask): Ditto.\n\t(_mm512_cmplt_epu64_mask): Ditto.\n\t(_mm512_cmpneq_epi32_mask): Ditto.\n\t(_mm512_cmpneq_epu32_mask): Ditto.\n\t(_mm512_cmpneq_epi64_mask): Ditto.\n\t(_mm512_cmpneq_epu64_mask): Ditto.\n\t(_mm512_expand_pd): Ditto.\n\t(_mm512_expand_ps): Ditto.\n\t* config/i386/i386-builtin-types.def: Add PV16QI, PV16QI, PV16HI,\n\tVOID_PV8SI_V8DI_QI, VOID_PV8HI_V8DI_QI, VOID_PV16QI_V8DI_QI,\n\tVOID_PV16QI_V16SI_HI, VOID_PV16HI_V16SI_HI.\n\t* config/i386/i386.c (ix86_builtins): Add\n\tIX86_BUILTIN_EXPANDPD512_NOMASK, IX86_BUILTIN_EXPANDPS512_NOMASK,\n\tIX86_BUILTIN_PMOVDB512_MEM, IX86_BUILTIN_PMOVDW512_MEM,\n\tIX86_BUILTIN_PMOVQB512_MEM, IX86_BUILTIN_PMOVQD512_MEM,\n\tIX86_BUILTIN_PMOVQW512_MEM, IX86_BUILTIN_PMOVSDB512_MEM,\n\tIX86_BUILTIN_PMOVSDW512_MEM, IX86_BUILTIN_PMOVSQB512_MEM,\n\tIX86_BUILTIN_PMOVSQD512_MEM, IX86_BUILTIN_PMOVSQW512_MEM,\n\tIX86_BUILTIN_PMOVUSDB512_MEM, IX86_BUILTIN_PMOVUSDW512_MEM,\n\tIX86_BUILTIN_PMOVUSQB512_MEM, IX86_BUILTIN_PMOVUSQD512_MEM,\n\tIX86_BUILTIN_PMOVUSQW512_MEM.\n\t(bdesc_special_args): Add __builtin_ia32_pmovusqd512mem_mask,\n\t__builtin_ia32_pmovsqd512mem_mask,\n\t__builtin_ia32_pmovqd512mem_mask,\n\t__builtin_ia32_pmovusqw512mem_mask,\n\t__builtin_ia32_pmovsqw512mem_mask,\n\t__builtin_ia32_pmovqw512mem_mask,\n\t__builtin_ia32_pmovusdw512mem_mask,\n\t__builtin_ia32_pmovsdw512mem_mask,\n\t__builtin_ia32_pmovdw512mem_mask,\n\t__builtin_ia32_pmovqb512mem_mask,\n\t__builtin_ia32_pmovusqb512mem_mask,\n\t__builtin_ia32_pmovsqb512mem_mask,\n\t__builtin_ia32_pmovusdb512mem_mask,\n\t__builtin_ia32_pmovsdb512mem_mask,\n\t__builtin_ia32_pmovdb512mem_mask.\n\t(bdesc_args): Add __builtin_ia32_expanddf512,\n\t__builtin_ia32_expandsf512.\n\t(ix86_expand_special_args_builtin): Handle VOID_FTYPE_PV8SI_V8DI_QI, \n\tVOID_FTYPE_PV8HI_V8DI_QI, VOID_FTYPE_PV16HI_V16SI_HI,\n\tVOID_FTYPE_PV16QI_V8DI_QI, VOID_FTYPE_PV16QI_V16SI_HI.\n\t* config/i386/sse.md (unspec): Add UNSPEC_EXPAND_NOMASK.\n\t(avx512f_<code><pmov_src_lower><mode>2_mask_store): New.\n\t(*avx512f_<code>v8div16qi2_store_mask): Renamed to ...\n\t(avx512f_<code>v8div16qi2_mask_store): This.\n\t(avx512f_expand<mode>): New.\n\ntestsuite/\n\t* gcc.target/i386/avx512f-vexpandpd-1.c: Also test _mm512_expand_pd.\n\t* gcc.target/i386/avx512f-vexpandpd-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vexpandps-1.c: Also test _mm512_expand_ps.\n\t* gcc.target/i386/avx512f-vexpandps-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vmovdqu64-1.c: Also test _mm512_storeu_epi64.\n\t* gcc.target/i386/avx512f-vmovdqu64-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpged-1.c: New. \n\t* gcc.target/i386/avx512f-vpcmpged-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpgeq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpgeq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpgeud-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpgeud-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpgeuq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpgeuq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpled-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpled-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpleq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpleq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpleud-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpleud-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpleuq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpleuq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltd-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltd-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltud-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltud-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltuq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpltuq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpneqd-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpneqd-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpneqq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpneqq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpnequd-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpnequd-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpnequq-1.c: Ditto. \n\t* gcc.target/i386/avx512f-vpcmpnequq-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovdb-1.c: Also test\n\t_mm512_mask_cvtepi32_storeu_epi8.\n\t* gcc.target/i386/avx512f-vpmovdb-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovdw-1.c: Also test\n\t_mm512_mask_cvtepi32_storeu_epi16.\n\t* gcc.target/i386/avx512f-vpmovdw-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovqb-1.c: Also test\n\t_mm512_mask_cvtepi64_storeu_epi8.\n\t* gcc.target/i386/avx512f-vpmovqb-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovqw-1.c: Also test\n\t_mm512_mask_cvtepi64_storeu_epi16.\n\t* gcc.target/i386/avx512f-vpmovqw-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovqd-1.c: Also test\n\t_mm512_mask_cvtepi64_storeu_epi32.\n\t* gcc.target/i386/avx512f-vpmovqd-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovsdb-1.c: Also test\n\t_mm512_mask_cvtsepi32_storeu_epi8.\n\t* gcc.target/i386/avx512f-vpmovsdb-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovsdw-1.c: Also test\n\t_mm512_mask_cvtsepi32_storeu_epi16.\n\t* gcc.target/i386/avx512f-vpmovsdw-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovsqb-1.c: Also test\n\t_mm512_mask_cvtsepi64_storeu_epi8.\n\t* gcc.target/i386/avx512f-vpmovsqb-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovsqw-1.c: Also test\n\t_mm512_mask_cvtsepi64_storeu_epi16.\n\t* gcc.target/i386/avx512f-vpmovsqw-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovsqd-1.c: Also test\n\t_mm512_mask_cvtsepi64_storeu_epi32.\n\t* gcc.target/i386/avx512f-vpmovsqd-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovusdb-1.c: Also test\n\t_mm512_mask_cvtusepi32_storeu_epi8.\n\t* gcc.target/i386/avx512f-vpmovusdb-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovusdw-1.c: Also test\n\t_mm512_mask_cvtusepi32_storeu_epi16.\n\t* gcc.target/i386/avx512f-vpmovusdw-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovusqb-1.c: Also test\n\t_mm512_mask_cvtusepi64_storeu_epi8.\n\t* gcc.target/i386/avx512f-vpmovusqb-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovusqw-1.c: Also test\n\t_mm512_mask_cvtusepi64_storeu_epi16.\n\t* gcc.target/i386/avx512f-vpmovusqw-2.c: Ditto. \n\t* gcc.target/i386/avx512f-vpmovusqd-1.c: Also test\n\t_mm512_mask_cvtusepi64_storeu_epi32.\n\t* gcc.target/i386/avx512f-vpmovusqd-2.c: Ditto. \n\t* gcc.target/i386/m128-check.h: Add checkVs, checkVb.\n\nFrom-SVN: r207150", "tree": {"sha": "9a7af5033a998b0cdef32beb05ea3fbeb00e7c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7af5033a998b0cdef32beb05ea3fbeb00e7c99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d256b8669e87efe692edcb1ae052cb0d2a839d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d256b8669e87efe692edcb1ae052cb0d2a839d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d256b8669e87efe692edcb1ae052cb0d2a839d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d256b8669e87efe692edcb1ae052cb0d2a839d29/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e711dffdfe0561e494636ea95abad5a3b419e6d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e711dffdfe0561e494636ea95abad5a3b419e6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e711dffdfe0561e494636ea95abad5a3b419e6d9"}], "stats": {"total": 1734, "additions": 1692, "deletions": 42}, "files": [{"sha": "676e0a346db743801bbf5e340df26d56f4ea0399", "filename": "gcc/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,3 +1,78 @@\n+2014-01-27  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm512_mask_cvtepi32_storeu_epi8): New.\n+\t(_mm512_mask_cvtsepi32_storeu_epi8): Ditto.\n+\t(_mm512_mask_cvtusepi32_storeu_epi8): Ditto.\n+\t(_mm512_mask_cvtepi32_storeu_epi16): Ditto.\n+\t(_mm512_mask_cvtsepi32_storeu_epi16): Ditto.\n+\t(_mm512_mask_cvtusepi32_storeu_epi16): Ditto.\n+\t(_mm512_mask_cvtepi64_storeu_epi32): Ditto.\n+\t(_mm512_mask_cvtsepi64_storeu_epi32): Ditto.\n+\t(_mm512_mask_cvtusepi64_storeu_epi32): Ditto.\n+\t(_mm512_mask_cvtepi64_storeu_epi16): Ditto.\n+\t(_mm512_mask_cvtsepi64_storeu_epi16): Ditto.\n+\t(_mm512_mask_cvtusepi64_storeu_epi16): Ditto.\n+\t(_mm512_mask_cvtepi64_storeu_epi8): Ditto.\n+\t(_mm512_mask_cvtsepi64_storeu_epi8): Ditto.\n+\t(_mm512_mask_cvtusepi64_storeu_epi8): Ditto.\n+\t(_mm512_storeu_epi64): Ditto.\n+\t(_mm512_cmpge_epi32_mask): Ditto.\n+\t(_mm512_cmpge_epu32_mask): Ditto.\n+\t(_mm512_cmpge_epi64_mask): Ditto.\n+\t(_mm512_cmpge_epu64_mask): Ditto.\n+\t(_mm512_cmple_epi32_mask): Ditto.\n+\t(_mm512_cmple_epu32_mask): Ditto.\n+\t(_mm512_cmple_epi64_mask): Ditto.\n+\t(_mm512_cmple_epu64_mask): Ditto.\n+\t(_mm512_cmplt_epi32_mask): Ditto.\n+\t(_mm512_cmplt_epu32_mask): Ditto.\n+\t(_mm512_cmplt_epi64_mask): Ditto.\n+\t(_mm512_cmplt_epu64_mask): Ditto.\n+\t(_mm512_cmpneq_epi32_mask): Ditto.\n+\t(_mm512_cmpneq_epu32_mask): Ditto.\n+\t(_mm512_cmpneq_epi64_mask): Ditto.\n+\t(_mm512_cmpneq_epu64_mask): Ditto.\n+\t(_mm512_expand_pd): Ditto.\n+\t(_mm512_expand_ps): Ditto.\n+\t* config/i386/i386-builtin-types.def: Add PV16QI, PV16QI, PV16HI,\n+\tVOID_PV8SI_V8DI_QI, VOID_PV8HI_V8DI_QI, VOID_PV16QI_V8DI_QI,\n+\tVOID_PV16QI_V16SI_HI, VOID_PV16HI_V16SI_HI.\n+\t* config/i386/i386.c (ix86_builtins): Add\n+\tIX86_BUILTIN_EXPANDPD512_NOMASK, IX86_BUILTIN_EXPANDPS512_NOMASK,\n+\tIX86_BUILTIN_PMOVDB512_MEM, IX86_BUILTIN_PMOVDW512_MEM,\n+\tIX86_BUILTIN_PMOVQB512_MEM, IX86_BUILTIN_PMOVQD512_MEM,\n+\tIX86_BUILTIN_PMOVQW512_MEM, IX86_BUILTIN_PMOVSDB512_MEM,\n+\tIX86_BUILTIN_PMOVSDW512_MEM, IX86_BUILTIN_PMOVSQB512_MEM,\n+\tIX86_BUILTIN_PMOVSQD512_MEM, IX86_BUILTIN_PMOVSQW512_MEM,\n+\tIX86_BUILTIN_PMOVUSDB512_MEM, IX86_BUILTIN_PMOVUSDW512_MEM,\n+\tIX86_BUILTIN_PMOVUSQB512_MEM, IX86_BUILTIN_PMOVUSQD512_MEM,\n+\tIX86_BUILTIN_PMOVUSQW512_MEM.\n+\t(bdesc_special_args): Add __builtin_ia32_pmovusqd512mem_mask,\n+\t__builtin_ia32_pmovsqd512mem_mask,\n+\t__builtin_ia32_pmovqd512mem_mask,\n+\t__builtin_ia32_pmovusqw512mem_mask,\n+\t__builtin_ia32_pmovsqw512mem_mask,\n+\t__builtin_ia32_pmovqw512mem_mask,\n+\t__builtin_ia32_pmovusdw512mem_mask,\n+\t__builtin_ia32_pmovsdw512mem_mask,\n+\t__builtin_ia32_pmovdw512mem_mask,\n+\t__builtin_ia32_pmovqb512mem_mask,\n+\t__builtin_ia32_pmovusqb512mem_mask,\n+\t__builtin_ia32_pmovsqb512mem_mask,\n+\t__builtin_ia32_pmovusdb512mem_mask,\n+\t__builtin_ia32_pmovsdb512mem_mask,\n+\t__builtin_ia32_pmovdb512mem_mask.\n+\t(bdesc_args): Add __builtin_ia32_expanddf512,\n+\t__builtin_ia32_expandsf512.\n+\t(ix86_expand_special_args_builtin): Handle VOID_FTYPE_PV8SI_V8DI_QI,\n+\tVOID_FTYPE_PV8HI_V8DI_QI, VOID_FTYPE_PV16HI_V16SI_HI,\n+\tVOID_FTYPE_PV16QI_V8DI_QI, VOID_FTYPE_PV16QI_V16SI_HI.\n+\t* config/i386/sse.md (unspec): Add UNSPEC_EXPAND_NOMASK.\n+\t(avx512f_<code><pmov_src_lower><mode>2_mask_store): New.\n+\t(*avx512f_<code>v8div16qi2_store_mask): Renamed to ...\n+\t(avx512f_<code>v8div16qi2_mask_store): This.\n+\t(avx512f_expand<mode>): New.\n+\n 2014-01-27  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n         * config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd): New."}, {"sha": "5b2e196b7afec978441b2e8714bd1996065f890b", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -4566,6 +4566,13 @@ _mm512_cvtepi32_epi8 (__m512i __A)\n \t\t\t\t\t\t  (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)\n@@ -4593,6 +4600,13 @@ _mm512_cvtsepi32_epi8 (__m512i __A)\n \t\t\t\t\t\t   (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovsdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtsepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)\n@@ -4620,6 +4634,13 @@ _mm512_cvtusepi32_epi8 (__m512i __A)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovusdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtusepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)\n@@ -4648,6 +4669,13 @@ _mm512_cvtepi32_epi16 (__m512i __A)\n \t\t\t\t\t\t  (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi32_storeu_epi16 (void * __P, __mmask16 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovdw512mem_mask ((__v16hi *) __P, (__v16si) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)\n@@ -4675,6 +4703,13 @@ _mm512_cvtsepi32_epi16 (__m512i __A)\n \t\t\t\t\t\t   (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtsepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovsdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtsepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)\n@@ -4702,6 +4737,13 @@ _mm512_cvtusepi32_epi16 (__m512i __A)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtusepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovusdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtusepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)\n@@ -4730,6 +4772,13 @@ _mm512_cvtepi64_epi32 (__m512i __A)\n \t\t\t\t\t\t  (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)\n@@ -4757,6 +4806,13 @@ _mm512_cvtsepi64_epi32 (__m512i __A)\n \t\t\t\t\t\t   (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtsepi64_storeu_epi32 (void *__P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovsqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtsepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)\n@@ -4784,6 +4840,13 @@ _mm512_cvtusepi64_epi32 (__m512i __A)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtusepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovusqd512mem_mask ((__v8si*) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtusepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)\n@@ -4811,6 +4874,13 @@ _mm512_cvtepi64_epi16 (__m512i __A)\n \t\t\t\t\t\t  (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)\n@@ -4838,6 +4908,13 @@ _mm512_cvtsepi64_epi16 (__m512i __A)\n \t\t\t\t\t\t   (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovsqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)\n@@ -4865,6 +4942,13 @@ _mm512_cvtusepi64_epi16 (__m512i __A)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtusepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovusqw512mem_mask ((__v8hi*) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)\n@@ -4892,6 +4976,13 @@ _mm512_cvtepi64_epi8 (__m512i __A)\n \t\t\t\t\t\t  (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)\n@@ -4919,6 +5010,13 @@ _mm512_cvtsepi64_epi8 (__m512i __A)\n \t\t\t\t\t\t   (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovsqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)\n@@ -4946,6 +5044,13 @@ _mm512_cvtusepi64_epi8 (__m512i __A)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovusqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)\n@@ -5568,6 +5673,14 @@ _mm512_mask_storeu_epi64 (void *__P, __mmask8 __U, __m512i __A)\n \t\t\t\t     (__mmask8) __U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_storeu_epi64 (void *__P, __m512i __A)\n+{\n+  __builtin_ia32_storedqudi512_mask ((__v8di *) __P, (__v8di) __A,\n+\t\t\t\t     (__mmask8) -1);\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_loadu_epi32 (void const *__P)\n@@ -8678,6 +8791,150 @@ _mm512_cmpgt_epi64_mask (__m512i __A, __m512i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epi32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 5,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epu32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 5,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epi64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 5,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epu64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 5,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epi32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 2,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epu32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 2,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epi64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 2,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epu64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 2,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epi32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 1,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epu32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 1,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epi64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 1,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epu64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 1,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epi32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 4,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epu32_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 4,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epi64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 4,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epu64_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 4,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n #define _MM_CMPINT_EQ\t    0x0\n #define _MM_CMPINT_LT\t    0x1\n #define _MM_CMPINT_LE\t    0x2\n@@ -9546,6 +9803,13 @@ _mm512_mask_compressstoreu_epi32 (void *__P, __mmask16 __U, __m512i __A)\n \t\t\t\t\t  (__mmask16) __U);\n }\n \n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_expand_pd (__m512d __A)\n+{\n+  return (__m512d) __builtin_ia32_expanddf512 ((__v8df) __A);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_expand_pd (__m512d __W, __mmask8 __U, __m512d __A)\n@@ -9584,6 +9848,13 @@ _mm512_maskz_expandloadu_pd (__mmask8 __U, void const *__P)\n \t\t\t\t\t\t\t (__mmask8) __U);\n }\n \n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_expand_ps (__m512 __A)\n+{\n+  return (__m512) __builtin_ia32_expandsf512 ((__v16sf) __A);\n+}\n+\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_expand_ps (__m512 __W, __mmask16 __U, __m512 __A)"}, {"sha": "822c5e5043fa462fccea622d7088657afa4b1d95", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -135,8 +135,11 @@ DEF_POINTER_TYPE (PV4SF, V4SF)\n DEF_POINTER_TYPE (PV8DF, V8DF)\n DEF_POINTER_TYPE (PV8SF, V8SF)\n DEF_POINTER_TYPE (PV4SI, V4SI)\n+DEF_POINTER_TYPE (PV8HI, V8HI)\n DEF_POINTER_TYPE (PV8SI, V8SI)\n DEF_POINTER_TYPE (PV8DI, V8DI)\n+DEF_POINTER_TYPE (PV16QI, V16QI)\n+DEF_POINTER_TYPE (PV16HI, V16HI)\n DEF_POINTER_TYPE (PV16SI, V16SI)\n DEF_POINTER_TYPE (PV16SF, V16SF)\n \n@@ -604,9 +607,14 @@ DEF_FUNCTION_TYPE (V8SI, V8DI, V8SI, QI)\n DEF_FUNCTION_TYPE (V8HI, V8DI, V8HI, QI)\n DEF_FUNCTION_TYPE (V16QI, V8DI, V16QI, QI)\n DEF_FUNCTION_TYPE (VOID, PV8DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (VOID, PV8SI, V8DI, QI)\n+DEF_FUNCTION_TYPE (VOID, PV8HI, V8DI, QI)\n DEF_FUNCTION_TYPE (VOID, PV16SF, V16SF, HI)\n DEF_FUNCTION_TYPE (VOID, PV8DI, V8DI, QI)\n DEF_FUNCTION_TYPE (VOID, PV16SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (VOID, PV16HI, V16SI, HI)\n+DEF_FUNCTION_TYPE (VOID, PV16QI, V16SI, HI)\n+DEF_FUNCTION_TYPE (VOID, PV16QI, V8DI, QI)\n DEF_FUNCTION_TYPE (VOID, PDOUBLE, V2DF, QI)\n DEF_FUNCTION_TYPE (VOID, PFLOAT, V4SF, QI)\n DEF_FUNCTION_TYPE (V16SI, V16SF, V16SI, HI)"}, {"sha": "9c7bbc442eb4ef0a65bc131f40621a1402da9f12", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -28076,10 +28076,12 @@ enum ix86_builtins\n   IX86_BUILTIN_DIVPS512,\n   IX86_BUILTIN_DIVSD_ROUND,\n   IX86_BUILTIN_DIVSS_ROUND,\n+  IX86_BUILTIN_EXPANDPD512_NOMASK,\n   IX86_BUILTIN_EXPANDPD512,\n   IX86_BUILTIN_EXPANDPD512Z,\n   IX86_BUILTIN_EXPANDPDLOAD512,\n   IX86_BUILTIN_EXPANDPDLOAD512Z,\n+  IX86_BUILTIN_EXPANDPS512_NOMASK,\n   IX86_BUILTIN_EXPANDPS512,\n   IX86_BUILTIN_EXPANDPS512Z,\n   IX86_BUILTIN_EXPANDPSLOAD512,\n@@ -28181,25 +28183,40 @@ enum ix86_builtins\n   IX86_BUILTIN_PMINUD512,\n   IX86_BUILTIN_PMINUQ512,\n   IX86_BUILTIN_PMOVDB512,\n+  IX86_BUILTIN_PMOVDB512_MEM,\n   IX86_BUILTIN_PMOVDW512,\n+  IX86_BUILTIN_PMOVDW512_MEM,\n   IX86_BUILTIN_PMOVQB512,\n+  IX86_BUILTIN_PMOVQB512_MEM,\n   IX86_BUILTIN_PMOVQD512,\n+  IX86_BUILTIN_PMOVQD512_MEM,\n   IX86_BUILTIN_PMOVQW512,\n+  IX86_BUILTIN_PMOVQW512_MEM,\n   IX86_BUILTIN_PMOVSDB512,\n+  IX86_BUILTIN_PMOVSDB512_MEM,\n   IX86_BUILTIN_PMOVSDW512,\n+  IX86_BUILTIN_PMOVSDW512_MEM,\n   IX86_BUILTIN_PMOVSQB512,\n+  IX86_BUILTIN_PMOVSQB512_MEM,\n   IX86_BUILTIN_PMOVSQD512,\n+  IX86_BUILTIN_PMOVSQD512_MEM,\n   IX86_BUILTIN_PMOVSQW512,\n+  IX86_BUILTIN_PMOVSQW512_MEM,\n   IX86_BUILTIN_PMOVSXBD512,\n   IX86_BUILTIN_PMOVSXBQ512,\n   IX86_BUILTIN_PMOVSXDQ512,\n   IX86_BUILTIN_PMOVSXWD512,\n   IX86_BUILTIN_PMOVSXWQ512,\n   IX86_BUILTIN_PMOVUSDB512,\n+  IX86_BUILTIN_PMOVUSDB512_MEM,\n   IX86_BUILTIN_PMOVUSDW512,\n+  IX86_BUILTIN_PMOVUSDW512_MEM,\n   IX86_BUILTIN_PMOVUSQB512,\n+  IX86_BUILTIN_PMOVUSQB512_MEM,\n   IX86_BUILTIN_PMOVUSQD512,\n+  IX86_BUILTIN_PMOVUSQD512_MEM,\n   IX86_BUILTIN_PMOVUSQW512,\n+  IX86_BUILTIN_PMOVUSQW512_MEM,\n   IX86_BUILTIN_PMOVZXBD512,\n   IX86_BUILTIN_PMOVZXBQ512,\n   IX86_BUILTIN_PMOVZXDQ512,\n@@ -29018,6 +29035,21 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storedquv16si_mask, \"__builtin_ia32_storedqusi512_mask\", IX86_BUILTIN_STOREDQUSI512, UNKNOWN, (int) VOID_FTYPE_PV16SI_V16SI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storedquv8di_mask, \"__builtin_ia32_storedqudi512_mask\", IX86_BUILTIN_STOREDQUDI512, UNKNOWN, (int) VOID_FTYPE_PV8DI_V8DI_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storeupd512_mask, \"__builtin_ia32_storeupd512_mask\", IX86_BUILTIN_STOREUPD512, UNKNOWN, (int) VOID_FTYPE_PV8DF_V8DF_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_us_truncatev8div8si2_mask_store, \"__builtin_ia32_pmovusqd512mem_mask\", IX86_BUILTIN_PMOVUSQD512_MEM, UNKNOWN, (int) VOID_FTYPE_PV8SI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ss_truncatev8div8si2_mask_store, \"__builtin_ia32_pmovsqd512mem_mask\", IX86_BUILTIN_PMOVSQD512_MEM, UNKNOWN, (int) VOID_FTYPE_PV8SI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_truncatev8div8si2_mask_store, \"__builtin_ia32_pmovqd512mem_mask\", IX86_BUILTIN_PMOVQD512_MEM, UNKNOWN, (int) VOID_FTYPE_PV8SI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_us_truncatev8div8hi2_mask_store, \"__builtin_ia32_pmovusqw512mem_mask\", IX86_BUILTIN_PMOVUSQW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ss_truncatev8div8hi2_mask_store, \"__builtin_ia32_pmovsqw512mem_mask\", IX86_BUILTIN_PMOVSQW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_truncatev8div8hi2_mask_store, \"__builtin_ia32_pmovqw512mem_mask\", IX86_BUILTIN_PMOVQW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_us_truncatev16siv16hi2_mask_store, \"__builtin_ia32_pmovusdw512mem_mask\", IX86_BUILTIN_PMOVUSDW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16HI_V16SI_HI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ss_truncatev16siv16hi2_mask_store, \"__builtin_ia32_pmovsdw512mem_mask\", IX86_BUILTIN_PMOVSDW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16HI_V16SI_HI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_truncatev16siv16hi2_mask_store, \"__builtin_ia32_pmovdw512mem_mask\", IX86_BUILTIN_PMOVDW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16HI_V16SI_HI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_truncatev8div16qi2_mask_store, \"__builtin_ia32_pmovqb512mem_mask\", IX86_BUILTIN_PMOVQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_us_truncatev8div16qi2_mask_store, \"__builtin_ia32_pmovusqb512mem_mask\", IX86_BUILTIN_PMOVUSQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ss_truncatev8div16qi2_mask_store, \"__builtin_ia32_pmovsqb512mem_mask\", IX86_BUILTIN_PMOVSQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_us_truncatev16siv16qi2_mask_store, \"__builtin_ia32_pmovusdb512mem_mask\", IX86_BUILTIN_PMOVUSDB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16SI_HI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ss_truncatev16siv16qi2_mask_store, \"__builtin_ia32_pmovsdb512mem_mask\", IX86_BUILTIN_PMOVSDB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16SI_HI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_truncatev16siv16qi2_mask_store, \"__builtin_ia32_pmovdb512mem_mask\", IX86_BUILTIN_PMOVDB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16SI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storeups512_mask, \"__builtin_ia32_storeups512_mask\", IX86_BUILTIN_STOREUPS512, UNKNOWN, (int) VOID_FTYPE_PV16SF_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storev16sf_mask, \"__builtin_ia32_storeaps512_mask\", IX86_BUILTIN_STOREAPS512, UNKNOWN, (int) VOID_FTYPE_PV16SF_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storev16si_mask, \"__builtin_ia32_movdqa32store512_mask\", IX86_BUILTIN_MOVDQA32STORE512, UNKNOWN, (int) VOID_FTYPE_PV16SI_V16SI_HI },\n@@ -29897,8 +29929,10 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vcvtps2ph512_mask,  \"__builtin_ia32_vcvtps2ph512_mask\", IX86_BUILTIN_CVTPS2PH512, UNKNOWN, (int) V16HI_FTYPE_V16SF_INT_V16HI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_ufloatv8siv8df_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_cvtusi2sd32, \"__builtin_ia32_cvtusi2sd32\", IX86_BUILTIN_CVTUSI2SD32, UNKNOWN, (int) V2DF_FTYPE_V2DF_UINT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df, \"__builtin_ia32_expanddf512\", IX86_BUILTIN_EXPANDPD512_NOMASK, UNKNOWN, (int) V8DF_FTYPE_V8DF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df_mask, \"__builtin_ia32_expanddf512_mask\", IX86_BUILTIN_EXPANDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df_maskz, \"__builtin_ia32_expanddf512_maskz\", IX86_BUILTIN_EXPANDPD512Z, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv16sf, \"__builtin_ia32_expandsf512\", IX86_BUILTIN_EXPANDPS512_NOMASK, UNKNOWN, (int) V16SF_FTYPE_V16SF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv16sf_mask, \"__builtin_ia32_expandsf512_mask\", IX86_BUILTIN_EXPANDPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv16sf_maskz, \"__builtin_ia32_expandsf512_maskz\", IX86_BUILTIN_EXPANDPS512Z, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vextractf32x4_mask, \"__builtin_ia32_extractf32x4_mask\", IX86_BUILTIN_EXTRACTF32X4, UNKNOWN, (int) V4SF_FTYPE_V16SF_INT_V4SF_QI },\n@@ -34584,6 +34618,11 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PV2DI_V2DI_V2DI:\n     case VOID_FTYPE_PDOUBLE_V2DF_QI:\n     case VOID_FTYPE_PFLOAT_V4SF_QI:\n+    case VOID_FTYPE_PV8SI_V8DI_QI:\n+    case VOID_FTYPE_PV8HI_V8DI_QI:\n+    case VOID_FTYPE_PV16HI_V16SI_HI:\n+    case VOID_FTYPE_PV16QI_V8DI_QI:\n+    case VOID_FTYPE_PV16QI_V16SI_HI:\n       nargs = 2;\n       klass = store;\n       /* Reserve memory operand for target.  */"}, {"sha": "ac0582fc6313100e7ebc62e36feb0d98e850c1a6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -105,6 +105,7 @@\n   UNSPEC_COMPRESS\n   UNSPEC_COMPRESS_STORE\n   UNSPEC_EXPAND\n+  UNSPEC_EXPAND_NOMASK\n   UNSPEC_MASKED_EQ\n   UNSPEC_MASKED_GT\n \n@@ -7457,6 +7458,15 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"avx512f_<code><pmov_src_lower><mode>2_mask_store\"\n+  [(set (match_operand:PMOV_DST_MODE 0 \"memory_operand\")\n+    (vec_merge:PMOV_DST_MODE\n+      (any_truncate:PMOV_DST_MODE\n+        (match_operand:<pmov_src_mode> 1 \"register_operand\"))\n+      (match_dup 0)\n+      (match_operand:<avx512fmaskmode> 2 \"register_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_insn \"*avx512f_<code>v8div16qi2\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V16QI\n@@ -7513,7 +7523,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512f_<code>v8div16qi2_store_mask\"\n+(define_insn \"avx512f_<code>v8div16qi2_mask_store\"\n   [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n     (vec_concat:V16QI\n       (vec_merge:V8QI\n@@ -15351,6 +15361,18 @@\n   \"TARGET_AVX512F\"\n   \"operands[2] = CONST0_RTX (<MODE>mode);\")\n \n+(define_insn \"avx512f_expand<mode>\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v,v\")\n+\t(unspec:VI48F_512\n+\t  [(match_operand:VI48F_512 1 \"nonimmediate_operand\" \"v,m\")]\n+\t  UNSPEC_EXPAND_NOMASK))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>expand<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"memory\" \"none,load\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx512f_expand<mode>_mask\"\n   [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v,v\")\n \t(unspec:VI48F_512"}, {"sha": "2e3447090d05be4898b6e92d9868f280bfba268c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,3 +1,90 @@\n+2014-01-27  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vexpandpd-1.c: Also test _mm512_expand_pd.\n+\t* gcc.target/i386/avx512f-vexpandpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vexpandps-1.c: Also test _mm512_expand_ps.\n+\t* gcc.target/i386/avx512f-vexpandps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu64-1.c: Also test _mm512_storeu_epi64.\n+\t* gcc.target/i386/avx512f-vmovdqu64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpged-1.c: New.\n+\t* gcc.target/i386/avx512f-vpcmpged-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpled-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpled-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdb-1.c: Also test\n+\t_mm512_mask_cvtepi32_storeu_epi8.\n+\t* gcc.target/i386/avx512f-vpmovdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdw-1.c: Also test\n+\t_mm512_mask_cvtepi32_storeu_epi16.\n+\t* gcc.target/i386/avx512f-vpmovdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqb-1.c: Also test\n+\t_mm512_mask_cvtepi64_storeu_epi8.\n+\t* gcc.target/i386/avx512f-vpmovqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqw-1.c: Also test\n+\t_mm512_mask_cvtepi64_storeu_epi16.\n+\t* gcc.target/i386/avx512f-vpmovqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqd-1.c: Also test\n+\t_mm512_mask_cvtepi64_storeu_epi32.\n+\t* gcc.target/i386/avx512f-vpmovqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdb-1.c: Also test\n+\t_mm512_mask_cvtsepi32_storeu_epi8.\n+\t* gcc.target/i386/avx512f-vpmovsdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdw-1.c: Also test\n+\t_mm512_mask_cvtsepi32_storeu_epi16.\n+\t* gcc.target/i386/avx512f-vpmovsdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqb-1.c: Also test\n+\t_mm512_mask_cvtsepi64_storeu_epi8.\n+\t* gcc.target/i386/avx512f-vpmovsqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqw-1.c: Also test\n+\t_mm512_mask_cvtsepi64_storeu_epi16.\n+\t* gcc.target/i386/avx512f-vpmovsqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqd-1.c: Also test\n+\t_mm512_mask_cvtsepi64_storeu_epi32.\n+\t* gcc.target/i386/avx512f-vpmovsqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdb-1.c: Also test\n+\t_mm512_mask_cvtusepi32_storeu_epi8.\n+\t* gcc.target/i386/avx512f-vpmovusdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdw-1.c: Also test\n+\t_mm512_mask_cvtusepi32_storeu_epi16.\n+\t* gcc.target/i386/avx512f-vpmovusdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqb-1.c: Also test\n+\t_mm512_mask_cvtusepi64_storeu_epi8.\n+\t* gcc.target/i386/avx512f-vpmovusqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqw-1.c: Also test\n+\t_mm512_mask_cvtusepi64_storeu_epi16.\n+\t* gcc.target/i386/avx512f-vpmovusqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqd-1.c: Also test\n+\t_mm512_mask_cvtusepi64_storeu_epi32.\n+\t* gcc.target/i386/avx512f-vpmovusqd-2.c: Ditto.\n+\t* gcc.target/i386/m128-check.h: Add checkVs, checkVb.\n+\n 2014-01-27  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n         * gcc.target/i386/avx512pf-vgatherpf0dpd-1.c: New."}, {"sha": "2dacdd67a2a62052cbca8b338212f2bf3c5c588d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-mask-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -2,7 +2,9 @@\n #if SIZE <= 8\n #define MASK_TYPE __mmask8\n #define MASK_VALUE 0xB9\n+#define MASK_ALL_ONES 0xFF\n #elif SIZE <= 16\n #define MASK_TYPE __mmask16\n #define MASK_VALUE 0xA6BA\n+#define MASK_ALL_ONES 0xFFFF\n #endif"}, {"sha": "c8fa9cfde1ae23b9700eaade328f26f18fe259eb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandpd-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 5 } } */\n /* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n \n@@ -12,6 +13,7 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n+  x = _mm512_expand_pd (x);\n   x = _mm512_mask_expand_pd (x, m, x);\n   x = _mm512_maskz_expand_pd (m, x);\n "}, {"sha": "b59096bb281c5bd37686556c5fc5e8656c7b3f28", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandpd-2.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -24,43 +24,50 @@ CALC (double *s, double *r, MASK_TYPE mask)\n static void\n TEST (void)\n {\n-  UNION_TYPE (AVX512F_LEN, d) s1, res1, res2, res3, res4;\n+  UNION_TYPE (AVX512F_LEN, d) s1, res1, res2, res3, res4, res5;\n   MASK_TYPE mask = MASK_VALUE;\n   double s2[SIZE];\n   double res_ref1[SIZE];\n   double res_ref2[SIZE];\n+  double res_ref3[SIZE];\n   int i, sign = 1;\n \n   for (i = 0; i < SIZE; i++)\n     {\n       s1.a[i] = 123.456 * (i + 200) * sign;\n       s2[i] = 789.012 * (i + 300) * sign;\n-      res1.a[i] = DEFAULT_VALUE;\n-      res3.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n       sign = -sign;\n     }\n \n-  res1.x = INTRINSIC (_mask_expand_pd) (res1.x, mask, s1.x);\n-  res2.x = INTRINSIC (_maskz_expand_pd) (mask, s1.x);\n-  res3.x = INTRINSIC (_mask_expandloadu_pd) (res3.x, mask, s2);\n-  res4.x = INTRINSIC (_maskz_expandloadu_pd) (mask, s2);\n+  res1.x = INTRINSIC (_expand_pd) (s1.x);\n+  res2.x = INTRINSIC (_mask_expand_pd) (res2.x, mask, s1.x);\n+  res3.x = INTRINSIC (_maskz_expand_pd) (mask, s1.x);\n+  res4.x = INTRINSIC (_mask_expandloadu_pd) (res4.x, mask, s2);\n+  res5.x = INTRINSIC (_maskz_expandloadu_pd) (mask, s2);\n \n-  CALC (s1.a, res_ref1, mask);\n-  CALC (s2, res_ref2, mask);\n+  /* no mask is the same as all ones mask.  */\n+  CALC (s1.a, res_ref1, MASK_ALL_ONES);\n+  CALC (s1.a, res_ref2, mask);\n+  CALC (s2, res_ref3, mask);\n \n-  MASK_MERGE (d) (res_ref1, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref1))\n     abort ();\n \n-  MASK_ZERO (d) (res_ref1, mask, SIZE);\n-  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref1))\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref2))\n     abort ();\n \n-  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  MASK_ZERO (d) (res_ref2, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref2))\n     abort ();\n \n-  MASK_ZERO (d) (res_ref2, mask, SIZE);\n-  if (UNION_CHECK (AVX512F_LEN, d) (res4, res_ref2))\n+  MASK_MERGE (d) (res_ref3, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res4, res_ref3))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref3, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res5, res_ref3))\n     abort ();\n }"}, {"sha": "faf6150c5cd0cc400dd7d1615168d660b5b80ed8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandps-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 5 } } */\n /* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n \n@@ -12,6 +13,7 @@ volatile __mmask16 m;\n void extern\n avx512f_test (void)\n {\n+  x = _mm512_expand_ps (x);\n   x = _mm512_mask_expand_ps (x, m, x);\n   x = _mm512_maskz_expand_ps (m, x);\n "}, {"sha": "e4dc68f2f2a60d47d7cf8c53080599c74c8f30c5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandps-2.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -24,43 +24,49 @@ CALC (float *s, float *r, MASK_TYPE mask)\n static void\n TEST (void)\n {\n-  UNION_TYPE (AVX512F_LEN, ) s1, res1, res2, res3, res4;\n+  UNION_TYPE (AVX512F_LEN, ) s1, res1, res2, res3, res4, res5;\n   MASK_TYPE mask = MASK_VALUE;\n   float s2[SIZE];\n   float res_ref1[SIZE];\n   float res_ref2[SIZE];\n+  float res_ref3[SIZE];\n   int i, sign = 1;\n \n   for (i = 0; i < SIZE; i++)\n     {\n       s1.a[i] = 123.456 * (i + 200) * sign;\n       s2[i] = 789.012 * (i + 300) * sign;\n-      res1.a[i] = DEFAULT_VALUE;\n-      res3.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n       sign = -sign;\n     }\n \n-  res1.x = INTRINSIC (_mask_expand_ps) (res1.x, mask, s1.x);\n-  res2.x = INTRINSIC (_maskz_expand_ps) (mask, s1.x);\n-  res3.x = INTRINSIC (_mask_expandloadu_ps) (res3.x, mask, s2);\n-  res4.x = INTRINSIC (_maskz_expandloadu_ps) (mask, s2);\n+  res1.x = INTRINSIC (_expand_ps) (s1.x);\n+  res2.x = INTRINSIC (_mask_expand_ps) (res2.x, mask, s1.x);\n+  res3.x = INTRINSIC (_maskz_expand_ps) (mask, s1.x);\n+  res4.x = INTRINSIC (_mask_expandloadu_ps) (res4.x, mask, s2);\n+  res5.x = INTRINSIC (_maskz_expandloadu_ps) (mask, s2);\n \n-  CALC (s1.a, res_ref1, mask);\n-  CALC (s2, res_ref2, mask);\n+  CALC (s1.a, res_ref1, MASK_ALL_ONES);\n+  CALC (s1.a, res_ref2, mask);\n+  CALC (s2, res_ref3, mask);\n \n-  MASK_MERGE () (res_ref1, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref1))\n     abort ();\n \n-  MASK_ZERO () (res_ref1, mask, SIZE);\n-  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref1))\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref2))\n     abort ();\n \n-  MASK_MERGE () (res_ref2, mask, SIZE);\n+  MASK_ZERO () (res_ref2, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref2))\n     abort ();\n \n-  MASK_ZERO () (res_ref2, mask, SIZE);\n-  if (UNION_CHECK (AVX512F_LEN, ) (res4, res_ref2))\n+  MASK_MERGE () (res_ref3, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res4, res_ref3))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref3, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res5, res_ref3))\n     abort ();\n }"}, {"sha": "5bfb6c16a01540fe44d22b0227b8218d6f543141", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu64-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -3,6 +3,7 @@\n /* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 4 } } */\n \n #include <immintrin.h>\n \n@@ -17,4 +18,5 @@ avx512f_test (void)\n   x = _mm512_maskz_loadu_epi64 (m, p);\n \n   _mm512_mask_storeu_epi64 (p, m, x);\n+  _mm512_storeu_epi64 (p, x);\n }"}, {"sha": "6a9a8369e0b7edd1eed103d779f038829d39119c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu64-2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -19,7 +19,7 @@ static void\n TEST (void)\n {\n   UNION_TYPE (AVX512F_LEN, i_q) s2, res1, res2;\n-  EVAL(unaligned_array, AVX512F_LEN,) s1, res3;\n+  EVAL(unaligned_array, AVX512F_LEN,) s1, res3, res4;\n   MASK_TYPE mask = MASK_VALUE;\n   int i, sign = 1;\n \n@@ -35,6 +35,7 @@ TEST (void)\n   res1.x = INTRINSIC (_mask_loadu_epi64) (res1.x, mask, s1.a);\n   res2.x = INTRINSIC (_maskz_loadu_epi64) (mask, s1.a);\n   INTRINSIC (_mask_storeu_epi64) (res3.a, mask, s2.x);\n+  INTRINSIC (_storeu_epi64) (res4.a, s2.x);\n \n   MASK_MERGE (i_q) (s1.a, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res1, s1.a))\n@@ -44,6 +45,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res2, s1.a))\n     abort ();\n \n+  if (UNION_CHECK (AVX512F_LEN, i_q) (s2, res4.a))\n+    abort ();\n+\n   MASK_MERGE (i_q) (s2.a, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (s2, res3.a))\n     abort ();"}, {"sha": "83c259eeeec68f58ee4b63bae7025895c341debd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpged-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpge_epi32_mask (x, x);\n+}"}, {"sha": "988587810bdecc57610ae0a6d14b5db859276012", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpged-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epi32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "ec7a175107acc961df9be1371cf379954960593c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpge_epi64_mask (x, x);\n+}"}, {"sha": "dfff1dc34845c43cb6aca54646b566a995b3cd69", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epi64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "3db73a9fe3807b98344c269786bfe9675bfa5134", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeud-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpge_epu32_mask (x, x);\n+}"}, {"sha": "7bb366783979ebae954deff8462268135f720f16", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeud-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epu32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "4d9c3f4ef28a3e285f33e1225813005b81582767", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeuq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpge_epu64_mask (x, x);\n+}"}, {"sha": "78cae6941ca1636800de26e24f1c16e17a170ac4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeuq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epu64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "68f085ace4b22ff59163ef104bd18f33a1e9e656", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpled-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmple_epi32_mask (x, x);\n+}"}, {"sha": "15573766c317f187fc274d9f83f8f62b8de53b6b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpled-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epi32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "0d5b6fab6844c70f4566c5ecbfca6d538d98f9e9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmple_epi64_mask (x, x);\n+}"}, {"sha": "5fdf9d75203c85e5dacccb8cfd2feb07abd0f520", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epi64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "902f4ab05a99cac670672dc7c2ad06c95085fa8a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleud-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmple_epu32_mask (x, x);\n+}"}, {"sha": "22c825a09b5a013aa573e7d6436af247c0668508", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleud-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epu32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "5c5f0e5cc00a3965d731a03247fdd4e953831171", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleuq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmple_epu64_mask (x, x);\n+}"}, {"sha": "e7843d1e4feff0e93edbd2986b5b963e392d95af", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleuq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epu64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "16bb1bf1c717bf10d7255785fe80067518005118", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmplt_epi32_mask (x, x);\n+}"}, {"sha": "f8728cd0db1b89910c9bd6561d7a937ce8876eff", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltd-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epi32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "0e87ad14e50425ea3e842f406379d2065cd8f493", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmplt_epi64_mask (x, x);\n+}"}, {"sha": "204b69e5753c1c0ceb72f1348da29aeb9fe6c88e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epi64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "0ad8fd19579538eac5991fc69e9903c15efb4bf6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltud-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmplt_epu32_mask (x, x);\n+}"}, {"sha": "aea70ec84c6e0b46340dbe1cdfe7ad55a3bff6b0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltud-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epu32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "d428b00647660e5d0504c3154b53060e43057d3b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltuq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmplt_epu64_mask (x, x);\n+}"}, {"sha": "83becbd6f3dcf272a3c309e2b44c52aa8ec5cb33", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltuq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epu64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "2cffad59455a11d5a334b32295043f280ed950d7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpneq_epi32_mask (x, x);\n+}"}, {"sha": "fd9bfc5aa4a1d784e7549d5042c8509d6facbc80", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqd-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epi32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "4a2928acbf5017e02dd775a7c8ad580ee325305f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpneq_epi64_mask (x, x);\n+}"}, {"sha": "1beacd4490108b418e2a839dbf6ab2b93f3d487d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epi64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "2c204790d794cca23f6b29cf57bc4a7a899e2a65", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpneq_epu32_mask (x, x);\n+}"}, {"sha": "09d11f52ca8e74b65e6445ec453d9f1c641e4cd0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequd-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, int *s1, int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epu32_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+}"}, {"sha": "7701493998e6a5ec78825c4d685fc5a3449b3905", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpneq_epu64_mask (x, x);\n+}"}, {"sha": "41e1f5b63a3d693768bd603995bfeb0c871524da", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *r, long long *s1, long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epu64_mask) (src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+}"}, {"sha": "5f1190399b0830a0d1d6394e092b6b59b35952c0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovdb-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovdb\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtepi32_epi8 (s);\n   res = _mm512_mask_cvtepi32_epi8 (res, m, s);\n   res = _mm512_maskz_cvtepi32_epi8 (m, s);\n+  _mm512_mask_cvtepi32_storeu_epi8 ((void *) &res, m, s);\n }"}, {"sha": "cc63f481654828e196eebc204962c3ab48b5c39b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovdb-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -23,6 +23,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_b) res1, res2, res3;\n+  char res4[16];\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[16];\n@@ -33,11 +34,13 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtepi32_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi32_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi32_epi8) (mask, src.x);\n+  INTRINSIC (_mask_cvtepi32_storeu_epi8) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -48,6 +51,9 @@ TEST (void)\n   if (UNION_CHECK (128, i_b) (res2, res_ref))\n     abort ();\n \n+  if (checkVc (res4, res_ref, 16))\n+    abort ();\n+\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();"}, {"sha": "a4652a675d7cd19cc4ebd4ab239025e99b70c1f5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovdw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovdw\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtepi32_epi16 (s);\n   res = _mm512_mask_cvtepi32_epi16 (res, m, s);\n   res = _mm512_maskz_cvtepi32_epi16 (m, s);\n+  _mm512_mask_cvtepi32_storeu_epi16 ((void *) &res, m, s);\n }"}, {"sha": "43fe8cb163af4dfc8e66ea7e5bddbffe8c4b0744", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovdw-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -24,6 +24,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN_HALF, i_w) res1, res2, res3;\n+  short res4[SIZE_HALF];\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[SIZE_HALF];\n@@ -34,11 +35,13 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtepi32_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi32_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi32_epi16) (mask, src.x);\n+  INTRINSIC (_mask_cvtepi32_storeu_epi16) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -49,6 +52,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res2, res_ref))\n     abort ();\n \n+  if (checkVs (res4, res_ref, SIZE_HALF))\n+    abort ();\n+\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res3, res_ref))\n     abort ();"}, {"sha": "76b6ca5076fcaec4ad53c248f04bc5b5faa90aad", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqb-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovqb\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtepi64_epi8 (s);\n   res = _mm512_mask_cvtepi64_epi8 (res, m, s);\n   res = _mm512_maskz_cvtepi64_epi8 (m, s);\n+  _mm512_mask_cvtepi64_storeu_epi8 ((void *) &res, m, s);\n }"}, {"sha": "1b0fbbb3d05b411558cbac3e579a7c82ebe9b324", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqb-2.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -9,10 +9,12 @@\n #define SIZE (AVX512F_LEN / 64)\n #include \"avx512f-mask-type.h\"\n \n-CALC (char *r, long long *s)\n+CALC (char *r, long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 16; i++)\n+  /* Don't zero out upper half if destination is memory.  */\n+  int len = mem ? 8 : 16;\n+  for (i = 0; i < len; i++)\n     {\n       r[i] = (i < SIZE) ? (char) s[i] : 0;\n     }\n@@ -23,23 +25,33 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_b) res1, res2, res3;\n+  char res4[16];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[16];\n+  char res_ref2[16];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n     {\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n+    }\n+\n+  for (i = SIZE; i < 16; i++)\n+    {\n+      /* To check that memory is not touched.  */\n+      res4[i] = DEFAULT_VALUE * 2;\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n     }\n \n   res1.x = INTRINSIC (_cvtepi64_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi64_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi64_epi8) (mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_b) (res1, res_ref))\n     abort ();\n@@ -51,4 +63,13 @@ TEST (void)\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();\n+\n+\n+  INTRINSIC (_mask_cvtepi64_storeu_epi8) (res4, mask, src.x);\n+\n+  CALC (res_ref2, src.a, 1);\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+\n+  if (checkVc (res4, res_ref2, 16))\n+    abort ();\n }"}, {"sha": "4055bf8ac4d52264cf09d460dddaf80f5c8163a9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqd-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovqd\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtepi64_epi32 (s);\n   res = _mm512_mask_cvtepi64_epi32 (res, m, s);\n   res = _mm512_maskz_cvtepi64_epi32 (m, s);\n+  _mm512_mask_cvtepi64_storeu_epi32 ((void *) &res, m, s);\n }"}, {"sha": "db5054b9323c803ea9a7aac48e9ab539f5ad4117", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqd-2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -23,7 +23,8 @@ void static\n TEST (void)\n {\n   int i, sign;\n-  UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3, res5;\n+  int res4[SIZE_HALF];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   int res_ref[SIZE_HALF];\n@@ -34,11 +35,14 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtepi64_epi32) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi64_epi32) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi64_epi32) (mask, src.x);\n+  INTRINSIC (_mask_cvtepi64_storeu_epi32) (res4, mask, src.x);\n+\n \n   CALC (res_ref, src.a);\n \n@@ -49,6 +53,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n     abort ();\n \n+  if (checkVi (res4, res_ref, SIZE_HALF))\n+    abort ();\n+\n   MASK_ZERO (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n     abort ();"}, {"sha": "e63136364dec0b17e198f655ce5d25fe949bdcf1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovqw\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtepi64_epi16 (s);\n   res = _mm512_mask_cvtepi64_epi16 (res, m, s);\n   res = _mm512_maskz_cvtepi64_epi16 (m, s);\n+  _mm512_mask_cvtepi64_storeu_epi16 ((void *) &res, m, s);\n }"}, {"sha": "9bdd6e10d6f419c818c29e8098e96ebeb711dfab", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqw-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -23,6 +23,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_w) res1, res2, res3;\n+  short res4[8];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[8];\n@@ -33,11 +34,13 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtepi64_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi64_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi64_epi16) (mask, src.x);\n+  INTRINSIC (_mask_cvtepi64_storeu_epi16) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -48,6 +51,9 @@ TEST (void)\n   if (UNION_CHECK (128, i_w) (res2, res_ref))\n     abort ();\n \n+  if (checkVs (res4, res_ref, 8))\n+    abort ();\n+\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_w) (res3, res_ref))\n     abort ();"}, {"sha": "1b68d9ca76ed217a171dbfe1eb485e66463a05b9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsdb-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsdb\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovsdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtsepi32_epi8 (s);\n   res = _mm512_mask_cvtsepi32_epi8 (res, m, s);\n   res = _mm512_maskz_cvtsepi32_epi8 (m, s);\n+  _mm512_mask_cvtsepi32_storeu_epi8 ((void *) &res, m, s);\n }"}, {"sha": "4ac69b51717e576c0a662e22029d5a732e507b69", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsdb-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -30,6 +30,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_b) res1, res2, res3;\n+  char res4[16];\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[16];\n@@ -40,11 +41,13 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtsepi32_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi32_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi32_epi8) (mask, src.x);\n+  INTRINSIC (_mask_cvtsepi32_storeu_epi8) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -55,6 +58,9 @@ TEST (void)\n   if (UNION_CHECK (128, i_b) (res2, res_ref))\n     abort ();\n \n+  if (checkVc (res4, res_ref, 16))\n+    abort ();\n+\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();"}, {"sha": "ee10c12f03ebdf2a0f1c489c3f0cb45a30ac91db", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsdw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsdw\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovsdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtsepi32_epi16 (s);\n   res = _mm512_mask_cvtsepi32_epi16 (res, m, s);\n   res = _mm512_maskz_cvtsepi32_epi16 (m, s);\n+  _mm512_mask_cvtsepi32_storeu_epi16 ((void *) &res, m, s);\n }"}, {"sha": "98d8745d9feccf6cead0fdf8ef9ebf152a5a2c11", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsdw-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -31,6 +31,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN_HALF, i_w) res1, res2, res3;\n+  short res4[SIZE_HALF];\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[SIZE_HALF];\n@@ -41,11 +42,13 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtsepi32_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi32_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi32_epi16) (mask, src.x);\n+  INTRINSIC (_mask_cvtsepi32_storeu_epi16) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -56,6 +59,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res2, res_ref))\n     abort ();\n \n+  if (checkVs (res4, res_ref, SIZE_HALF))\n+    abort ();\n+\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res3, res_ref))\n     abort ();"}, {"sha": "9b2e00449d90914135af139700cbe88812041b86", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqb-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsqb\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtsepi64_epi8 (s);\n   res = _mm512_mask_cvtsepi64_epi8 (res, m, s);\n   res = _mm512_maskz_cvtsepi64_epi8 (m, s);\n+  _mm512_mask_cvtsepi64_storeu_epi8 ((void *) &res, m, s);\n }"}, {"sha": "0fb7883de059ebb4e7d216ab15041e5604e974c6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqb-2.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -10,10 +10,11 @@\n #include \"avx512f-mask-type.h\"\n #include <limits.h>\n \n-CALC (char *r, long long *s)\n+CALC (char *r, long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 16; i++)\n+  int len = mem ? 8 : 16;\n+  for (i = 0; i < len; i++)\n     {\n       if (s[i] < CHAR_MIN)\n \tr[i] = CHAR_MIN;\n@@ -30,23 +31,32 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_b) res1, res2, res3;\n+  char res4[16];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[16];\n+  char res_ref2[16];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n     {\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n+    }\n+\n+  for (i = SIZE; i < 16; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n     }\n \n   res1.x = INTRINSIC (_cvtsepi64_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi64_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi64_epi8) (mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_b) (res1, res_ref))\n     abort ();\n@@ -58,4 +68,12 @@ TEST (void)\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtsepi64_storeu_epi8) (res4, mask, src.x);\n+\n+  CALC (res_ref2, src.a, 1);\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+\n+  if (checkVc (res4, res_ref2, 16))\n+    abort ();\n }"}, {"sha": "ba61989351bae225fc805c02866e5a612d382870", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqd-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsqd\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtsepi64_epi32 (s);\n   res = _mm512_mask_cvtsepi64_epi32 (res, m, s);\n   res = _mm512_maskz_cvtsepi64_epi32 (m, s);\n+  _mm512_mask_cvtsepi64_storeu_epi32 ((void *) &res, m, s);\n }"}, {"sha": "3230528a3b08493c4d574e12a04a8c563f2a33e0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqd-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -31,6 +31,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3;\n+  int res4[SIZE_HALF];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   int res_ref[SIZE_HALF];\n@@ -41,11 +42,13 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtsepi64_epi32) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi64_epi32) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi64_epi32) (mask, src.x);\n+  INTRINSIC (_mask_cvtsepi64_storeu_epi32) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -56,6 +59,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n     abort ();\n \n+  if (checkVi (res4, res_ref, SIZE_HALF))\n+    abort ();\n+\n   MASK_ZERO (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n     abort ();"}, {"sha": "a47e76741eafdc93e3c6019370f060d2f5cae000", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsqw\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovsqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtsepi64_epi16 (s);\n   res = _mm512_mask_cvtsepi64_epi16 (res, m, s);\n   res = _mm512_maskz_cvtsepi64_epi16 (m, s);\n+  _mm512_mask_cvtsepi64_storeu_epi16 ((void *) &res, m, s);\n }"}, {"sha": "25e54a73dee8ec990f9c3a5fc0c76e40470b913e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqw-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -30,6 +30,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_w) res1, res2, res3;\n+  short res4[8];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[8];\n@@ -40,11 +41,13 @@ TEST (void)\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtsepi64_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi64_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi64_epi16) (mask, src.x);\n+  INTRINSIC (_mask_cvtsepi64_storeu_epi16) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -55,6 +58,9 @@ TEST (void)\n   if (UNION_CHECK (128, i_w) (res2, res_ref))\n     abort ();\n \n+  if (checkVs (res4, res_ref, 8))\n+    abort ();\n+\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_w) (res3, res_ref))\n     abort ();"}, {"sha": "bc0d3d5049fc1789eefafd692859cdc5560066db", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusdb-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovusdb\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovusdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusdb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtusepi32_epi8 (s);\n   res = _mm512_mask_cvtusepi32_epi8 (res, m, s);\n   res = _mm512_maskz_cvtusepi32_epi8 (m, s);\n+  _mm512_mask_cvtusepi32_storeu_epi8 ((void *) &res, m, s);\n }"}, {"sha": "f13bb95b3d88cf91d48e2b3767755605d5b6397b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusdb-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -25,6 +25,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_b) res1, res2, res3;\n+  unsigned char res4[16];\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned char res_ref[16];\n@@ -33,11 +34,13 @@ TEST (void)\n     {\n       src.a[i] = 1 + 34 * i;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtusepi32_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi32_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi32_epi8) (mask, src.x);\n+  INTRINSIC (_mask_cvtusepi32_storeu_epi8) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -48,6 +51,9 @@ TEST (void)\n   if (UNION_CHECK (128, i_b) (res2, res_ref))\n     abort ();\n \n+  if (checkVc (res4, res_ref, 16))\n+    abort ();\n+\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();"}, {"sha": "ea987eb2f844c833edc41288f610d70b05683791", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusdw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovusdw\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovusdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtusepi32_epi16 (s);\n   res = _mm512_mask_cvtusepi32_epi16 (res, m, s);\n   res = _mm512_maskz_cvtusepi32_epi16 (m, s);\n+  _mm512_mask_cvtusepi32_storeu_epi16 ((void *) &res, m, s);\n }"}, {"sha": "c33a10b71156d6e79b487bfcfbd1c3fe3b386f76", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusdw-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -26,6 +26,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN_HALF, i_w) res1, res2, res3;\n+  unsigned short res4[SIZE_HALF];\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned short res_ref[SIZE_HALF];\n@@ -34,11 +35,13 @@ TEST (void)\n     {\n       src.a[i] = 1 + 34 * i;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtusepi32_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi32_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi32_epi16) (mask, src.x);\n+  INTRINSIC (_mask_cvtusepi32_storeu_epi16) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -49,6 +52,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res2, res_ref))\n     abort ();\n \n+  if (checkVs (res4, res_ref, SIZE_HALF))\n+    abort ();\n+\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res3, res_ref))\n     abort ();"}, {"sha": "805b72403ce7ce654947ff431d0e59c7570b325f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqb-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovusqb\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtusepi64_epi8 (s);\n   res = _mm512_mask_cvtusepi64_epi8 (res, m, s);\n   res = _mm512_maskz_cvtusepi64_epi8 (m, s);\n+  _mm512_mask_cvtusepi64_storeu_epi8 ((void *) &res, m, s);\n }"}, {"sha": "43fb9d275ccf4e373503c0501af7dd88902c87df", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqb-2.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -10,10 +10,11 @@\n #include \"avx512f-mask-type.h\"\n #include <limits.h>\n \n-CALC (unsigned char *r, unsigned long long *s)\n+CALC (unsigned char *r, unsigned long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 16; i++)\n+  int len = mem ? 8 : 16;\n+  for (i = 0; i < len; i++)\n     {\n       r[i] = (s[i] > UCHAR_MAX) ? UCHAR_MAX : s[i];\n       r[i] = (i < SIZE) ? r[i] : 0;\n@@ -25,21 +26,30 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_b) res1, res2, res3;\n+  unsigned char res4[16];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned char res_ref[16];\n+  unsigned char res_ref2[16];\n \n   for (i = 0; i < SIZE; i++)\n     {\n       src.a[i] = 1 + 34 * i;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n+    }\n+\n+  for (i = SIZE; i < 16; i++)\n+    {\n+      res4[i] = DEFAULT_VALUE * 2;\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n     }\n \n   res1.x = INTRINSIC (_cvtusepi64_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi64_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi64_epi8) (mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_b) (res1, res_ref))\n     abort ();\n@@ -51,4 +61,13 @@ TEST (void)\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtusepi64_storeu_epi8) (res4, mask, src.x);\n+\n+  CALC (res_ref2, src.a, 1);\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+\n+  if (checkVc (res4, res_ref2, 16))\n+    abort ();\n+\n }"}, {"sha": "11d7ccbcf12938fb9355872ca2b6dd84e0602541", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqd-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovusqd\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtusepi64_epi32 (s);\n   res = _mm512_mask_cvtusepi64_epi32 (res, m, s);\n   res = _mm512_maskz_cvtusepi64_epi32 (m, s);\n+  _mm512_mask_cvtusepi64_storeu_epi32 ((void *) &res, m, s);\n }"}, {"sha": "79613b36ac3411b65b468a455e0a93cd6fb9224c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqd-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -26,6 +26,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3;\n+  unsigned int res4[SIZE_HALF];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned int res_ref[SIZE_HALF];\n@@ -34,11 +35,13 @@ TEST (void)\n     {\n       src.a[i] = 1 + 34 * i;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtusepi64_epi32) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi64_epi32) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi64_epi32) (mask, src.x);\n+  INTRINSIC (_mask_cvtusepi64_storeu_epi32) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -49,6 +52,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n     abort ();\n \n+  if (checkVi (res4, res_ref, SIZE_HALF))\n+    abort ();\n+\n   MASK_ZERO (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n     abort ();"}, {"sha": "1f6eb241178cd92d35c84797571e72591bf395fa", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-1.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovusqw\\[ \\\\t\\]+\\[^\\n\\]*\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovusqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n@@ -16,4 +17,5 @@ avx512f_test (void)\n   res = _mm512_cvtusepi64_epi16 (s);\n   res = _mm512_mask_cvtusepi64_epi16 (res, m, s);\n   res = _mm512_maskz_cvtusepi64_epi16 (m, s);\n+  _mm512_mask_cvtusepi64_storeu_epi16 ((void *) &res, m, s);\n }"}, {"sha": "f905eed83f0d27e0f7fd7d188cf21636bd5660b2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqw-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-2.c?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -25,6 +25,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (128, i_w) res1, res2, res3;\n+  unsigned short res4[8];\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned short res_ref[8];\n@@ -33,11 +34,13 @@ TEST (void)\n     {\n       src.a[i] = 1 + 34 * i;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtusepi64_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi64_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi64_epi16) (mask, src.x);\n+  INTRINSIC (_mask_cvtusepi64_storeu_epi16) (res4, mask, src.x);\n \n   CALC (res_ref, src.a);\n \n@@ -48,6 +51,9 @@ TEST (void)\n   if (UNION_CHECK (128, i_w) (res2, res_ref))\n     abort ();\n \n+  if (checkVs (res4, res_ref, 8))\n+    abort ();\n+\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_w) (res3, res_ref))\n     abort ();"}, {"sha": "98dc269983924ac51c273e077b7d72971e172398", "filename": "gcc/testsuite/gcc.target/i386/m128-check.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm128-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256b8669e87efe692edcb1ae052cb0d2a839d29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm128-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm128-check.h?ref=d256b8669e87efe692edcb1ae052cb0d2a839d29", "patch": "@@ -113,6 +113,8 @@ checkV##ARRAY (const TYPE *v, const TYPE *e, int n)     \\\n   return err;                                           \\\n }\n \n+CHECK_ARRAY(c, char, \"0x%hhx\")\n+CHECK_ARRAY(s, short, \"0x%hx\")\n CHECK_ARRAY(i, int, \"0x%x\")\n CHECK_ARRAY(l, long long, \"0x%llx\")\n "}]}