{"sha": "f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "node_id": "C_kwDOANBUbNoAKGYwMWNmNWVhYTA2ZTcyY2Y4ZTFlN2Q3ZjM3YjQxZjlkNWVhZjNlNWM", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-24T02:20:51Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-24T02:28:14Z"}, "message": "libstdc++: testsuite: skip fs last_write_time tests if dummy\n\nThe last_write_time functions are defined in ways that are useful, or\nthat fail immediately, depending on various macros.  When they fail\nimmediately, the filesystem last_write_time.cc tests fail noisily, but\nthe fail is entirely expected.\n\nDefine NO_LAST_WRITE_TIME in the last_write_time.cc tests, according\nto the macros that select implementations of last_write_time, and use\nit through the new dg-require-target-fs-lwt to skip tests that are\nexpected to fail.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/util/testsuite_fs.h (NO_LAST_WRITE_TIME): Define\n\twhen appropriate.\n\t* testsuite/lib/libstdc++.exp\n\t(check_v3_target_fs_last_write_time): New.\n\t* testsuite/lib/dg-options.exp (dg-require-target-fs-lwt):\n\tNew.\n\t* testsuite/27_io/filesystem/operations/last_write_time.cc:\n\tSkip the test if the features are unavailable.\n\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n\tLikewise.", "tree": {"sha": "3dc19aee0ee866270c1748306006ffbe4062bd51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc19aee0ee866270c1748306006ffbe4062bd51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/comments", "author": null, "committer": null, "parents": [{"sha": "b931c6874e846cd4eba1c31112593d33ff4bf1f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b931c6874e846cd4eba1c31112593d33ff4bf1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b931c6874e846cd4eba1c31112593d33ff4bf1f1"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "f6460fb83d70d6159dbd545893ddb8b7498a1a5d", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/last_write_time.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc?ref=f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "patch": "@@ -17,6 +17,7 @@\n \n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n+// { dg-require-target-fs-lwt \"\" }\n \n // 15.25 Permissions [fs.op.last_write_time]\n "}, {"sha": "a0bf01ea935c5cf3577b34e9e3f9466652e49805", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/last_write_time.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc?ref=f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "patch": "@@ -18,6 +18,7 @@\n // { dg-options \"-DUSE_FILESYSTEM_TS -lstdc++fs\" }\n // { dg-do run { target c++11 } }\n // { dg-require-filesystem-ts \"\" }\n+// { dg-require-target-fs-lwt \"\" }\n \n // 15.25 Permissions [fs.op.last_write_time]\n "}, {"sha": "b61c4c0cb8fcd2646a10780685e487e27246f214", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "patch": "@@ -259,6 +259,15 @@ proc dg-require-target-fs-space { args } {\n     return\n }\n \n+proc dg-require-target-fs-lwt { args } {\n+    if { ![ check_v3_target_fs_last_write_time ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}\n+\n proc add_options_for_no_pch { flags } {\n     # This forces any generated and possibly included PCH to be invalid.\n     return \"-D__GLIBCXX__=99999999\""}, {"sha": "0338b50897f5dc9e4544e7eda41c43c736b5b8c2", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "patch": "@@ -1286,6 +1286,14 @@ proc check_v3_target_fs_space { } {\n     return [v3_check_preprocessor_condition fs_space $cond $inc]\n }\n \n+# Return 1 if the libstdc++ filesystem implementation of\n+# last_write_time is not an always-failing dummy.\n+proc check_v3_target_fs_last_write_time { } {\n+    set inc \"#include <testsuite_fs.h>\"\n+    set cond \"!defined NO_LAST_WRITE_TIME\"\n+    return [v3_check_preprocessor_condition fs_last_write_time $cond $inc]\n+}\n+\n # Return 1 if the \"cxx11\" ABI is in use using the current flags, 0 otherwise.\n # Any flags provided by RUNTESTFLAGS or a target board will be used here.\n # Flags added in the test by dg-options or dg-add-options will not be used."}, {"sha": "29d0b029b75b249328e2db61a51847007c452d81", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=f01cf5eaa06e72cf8e1e7d7f37b41f9d5eaf3e5c", "patch": "@@ -51,6 +51,11 @@ namespace test_fs = std::experimental::filesystem;\n #define NO_SPACE\n #endif\n \n+#if !(_GLIBCXX_HAVE_SYS_STAT_H \\\n+      && (_GLIBCXX_USE_UTIMENSAT || _GLIBCXX_USE_UTIME))\n+#define NO_LAST_WRITE_TIME 1\n+#endif\n+\n namespace __gnu_test\n {\n #define PATH_CHK(p1, p2, fn) \\"}]}