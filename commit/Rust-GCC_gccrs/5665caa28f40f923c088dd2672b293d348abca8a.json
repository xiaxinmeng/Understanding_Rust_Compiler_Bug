{"sha": "5665caa28f40f923c088dd2672b293d348abca8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2NWNhYTI4ZjQwZjkyM2MwODhkZDI2NzJiMjkzZDM0OGFiY2E4YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-04T13:54:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-04T13:54:28Z"}, "message": "* Check in merge from gcc2.  See ChangeLog.11 and ChangeLog.12\n        for details.\n\n        * haifa-sched.c: Mirror recent changes from gcc2.\n\nFrom-SVN: r18989", "tree": {"sha": "16d4e8b16e096a56699e1e72dfc14ce4382ac277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d4e8b16e096a56699e1e72dfc14ce4382ac277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5665caa28f40f923c088dd2672b293d348abca8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5665caa28f40f923c088dd2672b293d348abca8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5665caa28f40f923c088dd2672b293d348abca8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5665caa28f40f923c088dd2672b293d348abca8a/comments", "author": null, "committer": null, "parents": [{"sha": "d6df9efb6d4a855e65f48967469cf2d29b2ebd7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6df9efb6d4a855e65f48967469cf2d29b2ebd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6df9efb6d4a855e65f48967469cf2d29b2ebd7f"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "b92658699956203d76e4c3e02e6e1c1f8abb5fd3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5665caa28f40f923c088dd2672b293d348abca8a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5665caa28f40f923c088dd2672b293d348abca8a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5665caa28f40f923c088dd2672b293d348abca8a", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the DEC Alpha.\n-   Copyright (C) 1992, 93-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -3130,8 +3130,18 @@ output_prolog (file, size)\n \t     STACK_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM);\n \n   /* Describe our frame.  */\n-  fprintf (file, \"\\t.frame $%d,%d,$26,%d\\n\", \n-\t   unwind_regno, frame_size, rsa_offset);\n+  fprintf (file, \"\\t.frame $%d,\", unwind_regno);\n+\n+  /* If the frame size is larger than an integer, print it as zero to\n+     avoid an assembler error.  We won't be properly describing such a\n+     frame, but that's the best we can do.  */\n+  fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+#if HOST_BITS_PER_WIDE_INT == 64\n+\t   frame_size >= (1l << 31) ? 0:\n+#endif\n+\t   frame_size\n+\t   );\n+  fprintf (file, \",$26,%d\\n\", rsa_offset);\n \n   /* If we have to allocate space for outgoing args, do it now.  */\n   if (current_function_outgoing_args_size != 0)\n@@ -3316,7 +3326,7 @@ alpha_does_function_need_gp ()\n void\n output_prolog (file, size)\n      FILE *file;\n-     int size;\n+     HOST_WIDE_INT size;\n {\n   HOST_WIDE_INT out_args_size\n     = ALPHA_ROUND (current_function_outgoing_args_size);\n@@ -3449,10 +3459,20 @@ output_prolog (file, size)\n   /* Describe our frame.  */\n   if (!flag_inhibit_size_directive)\n     {\n-      fprintf (file, \"\\t.frame $%d,%d,$26,%d\\n\", \n+      fprintf (file, \"\\t.frame $%d,\",\n \t       (frame_pointer_needed\n-\t        ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM),\n-\t       frame_size, current_function_pretend_args_size);\n+\t        ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM));\n+\n+      /* If the frame size is larger than an integer, print it as zero to\n+\t avoid an assembler error.  We won't be properly describing such a\n+\t frame, but that's the best we can do.  */\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+#if HOST_BITS_PER_WIDE_INT == 64\n+\t       frame_size >= (1l << 31) ? 0 :\n+#endif\n+\t       frame_size\n+\t       );\n+      fprintf (file, \",$26,%d\\n\", current_function_pretend_args_size);\n     }\n \n   /* Cope with very large offsets to the register save area.  */\n@@ -3495,8 +3515,15 @@ output_prolog (file, size)\n \n   /* Print the register mask and do floating-point saves.  */\n   if (reg_mask && !flag_inhibit_size_directive)\n-    fprintf (file, \"\\t.mask 0x%x,%d\\n\", reg_mask,\n-\t     actual_start_reg_offset - frame_size);\n+    {\n+      fprintf (file, \"\\t.mask 0x%x,\", reg_mask);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+#if HOST_BITS_PER_WIDE_INT == 64\n+\t       frame_size >= (1l << 31) ? 0 :\n+#endif\n+\t       actual_start_reg_offset - frame_size);\n+      fprintf (file, \"\\n\");\n+    }\n \n   start_reg_offset = reg_offset;\n   reg_mask = 0;\n@@ -3711,7 +3738,7 @@ alpha_output_filename (stream, name)\n     }\n \n   else if (name != current_function_file\n-      && strcmp (name, current_function_file) != 0)\n+\t   && strcmp (name, current_function_file) != 0)\n     {\n       if (inside_function && ! TARGET_GAS)\n \tfprintf (stream, \"\\t#.file\\t%d \", num_source_filenames);"}]}