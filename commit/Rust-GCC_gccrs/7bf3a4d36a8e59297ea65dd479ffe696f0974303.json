{"sha": "7bf3a4d36a8e59297ea65dd479ffe696f0974303", "node_id": "C_kwDOANBUbNoAKDdiZjNhNGQzNmE4ZTU5Mjk3ZWE2NWRkNDc5ZmZlNjk2ZjA5NzQzMDM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-20T14:30:31Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-20T14:30:31Z"}, "message": "libstdc++: Redefine __from_chars_alnum_to_val's table\n\nAfter the C++23 constexpr <charconv> patch r13-3313-g378a0f1840e694 we\nhave some modules testsuite regressions:\n\n  FAIL: g++.dg/modules/xtreme-header-4_b.C -std=c++2b (test for excess errors)\n  FAIL: g++.dg/modules/xtreme-header_b.C -std=c++2b (test for excess errors)\n\nLike with PR105297, the cause seems to be the deduced type of __table\nresolving ahead of time to a local class type, which trips up modules.\nAnd unfortunately that PR's minimal workaround of making __tables's\ninitializer value dependent doesn't help in this case.\n\nSo this patch works around this by avoiding using a local class for the\ntable type.  And I suppose we should use a static data member to define\nthe table once for all dialects (including C++14) instead of having to\ndefine it twice in C++23 mode (once as a static local variable and again\nas a variable template for sake of constexpr evaluation).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/charconv (__detail::__from_chars_alnum_to_val_table):\n\tRedefine as a class template containing the members type, value and\n\t_S_make_table.  Don't use a local class as the table type.\n\t(__detail::__table): Remove.\n\t(__detail::__from_chars_alnum_to_val): Adjust after the above.", "tree": {"sha": "a56d379e4b7cd8a4cde3a28807e3ce3e751c18cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a56d379e4b7cd8a4cde3a28807e3ce3e751c18cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf3a4d36a8e59297ea65dd479ffe696f0974303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf3a4d36a8e59297ea65dd479ffe696f0974303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf3a4d36a8e59297ea65dd479ffe696f0974303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf3a4d36a8e59297ea65dd479ffe696f0974303/comments", "author": null, "committer": null, "parents": [{"sha": "f4fda3eec408e1eb12cc966f55f0de396be71597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fda3eec408e1eb12cc966f55f0de396be71597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4fda3eec408e1eb12cc966f55f0de396be71597"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "a65fbedc21cbd22ab7302b7c0b6f4f1c015f0137", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf3a4d36a8e59297ea65dd479ffe696f0974303/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf3a4d36a8e59297ea65dd479ffe696f0974303/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=7bf3a4d36a8e59297ea65dd479ffe696f0974303", "patch": "@@ -413,30 +413,36 @@ namespace __detail\n       return true;\n     }\n \n-  // Construct and return a lookup table that maps 0-9, A-Z and a-z to their\n-  // corresponding base-36 value and maps all other characters to 127.\n-  constexpr auto\n-  __from_chars_alnum_to_val_table()\n-  {\n-    constexpr unsigned char __lower_letters[27] = \"abcdefghijklmnopqrstuvwxyz\";\n-    constexpr unsigned char __upper_letters[27] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n-    struct { unsigned char __data[1u << __CHAR_BIT__] = {}; } __table;\n-    for (auto& __entry : __table.__data)\n-      __entry = 127;\n-    for (int __i = 0; __i < 10; ++__i)\n-      __table.__data['0' + __i] = __i;\n-    for (int __i = 0; __i < 26; ++__i)\n+  template<bool _DecOnly>\n+    struct __from_chars_alnum_to_val_table\n+    {\n+      struct type { unsigned char __data[1u << __CHAR_BIT__] = {}; };\n+\n+      // Construct and return a lookup table that maps 0-9, A-Z and a-z to their\n+      // corresponding base-36 value and maps all other characters to 127.\n+      static constexpr type\n+      _S_make_table()\n       {\n-\t__table.__data[__lower_letters[__i]] = 10 + __i;\n-\t__table.__data[__upper_letters[__i]] = 10 + __i;\n+\tconstexpr unsigned char __lower_letters[27] = \"abcdefghijklmnopqrstuvwxyz\";\n+\tconstexpr unsigned char __upper_letters[27] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+\ttype __table;\n+\tfor (auto& __entry : __table.__data)\n+\t  __entry = 127;\n+\tfor (int __i = 0; __i < 10; ++__i)\n+\t  __table.__data['0' + __i] = __i;\n+\tfor (int __i = 0; __i < 26; ++__i)\n+\t  {\n+\t    __table.__data[__lower_letters[__i]] = 10 + __i;\n+\t    __table.__data[__upper_letters[__i]] = 10 + __i;\n+\t  }\n+\treturn __table;\n       }\n-    return __table;\n-  }\n \n-#if __cpp_lib_constexpr_charconv\n-  template<bool _DecOnly>\n-    inline constexpr auto __table = __from_chars_alnum_to_val_table();\n-#endif\n+      // This initializer is made superficially dependent in order\n+      // to prevent the compiler from wastefully constructing the\n+      // table ahead of time when it's not needed.\n+      static constexpr type value = (_DecOnly, _S_make_table());\n+    };\n \n   // If _DecOnly is true: if the character is a decimal digit, then\n   // return its corresponding base-10 value, otherwise return a value >= 127.\n@@ -449,16 +455,7 @@ namespace __detail\n       if _GLIBCXX17_CONSTEXPR (_DecOnly)\n \treturn static_cast<unsigned char>(__c - '0');\n       else\n-\t{\n-#if __cpp_lib_constexpr_charconv\n-\t  if (std::__is_constant_evaluated())\n-\t    return __table<_DecOnly>.__data[__c];\n-#endif\n-\t  // This initializer is deliberately made dependent in order to work\n-\t  // around modules bug PR105322.\n-\t  static constexpr auto __table = (_DecOnly, __from_chars_alnum_to_val_table());\n-\t  return __table.__data[__c];\n-\t}\n+\treturn __from_chars_alnum_to_val_table<_DecOnly>::value.__data[__c];\n     }\n \n   /// std::from_chars implementation for integers in a power-of-two base."}]}