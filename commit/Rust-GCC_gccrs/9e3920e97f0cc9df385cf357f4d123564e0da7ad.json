{"sha": "9e3920e97f0cc9df385cf357f4d123564e0da7ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzOTIwZTk3ZjBjYzlkZjM4NWNmMzU3ZjRkMTIzNTY0ZTBkYTdhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-08-26T16:39:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-08-26T16:39:26Z"}, "message": "re PR tree-optimization/44485 (ICE in get_expr_operands, at tree-ssa-operands.c:1020)\n\n\tPR tree-optimization/44485\n\t* calls.c (flags_from_decl_or_type): For const or pure\n\tnoreturn functions return ECF_LOOPING_CONST_OR_PURE|ECF_NORETURN\n\ttogether with ECF_CONST resp. ECF_PURE.\n\t* builtins.c (expand_builtin): Use flags_from_decl_or_type\n\tinstead of querying flags directly.\n\t* tree-ssa-loop-niter.c (finite_loop_p): Likewise.\n\t* tree-ssa-dce.c (find_obviously_necessary_stmts): Likewise.\n\n\t* gcc.dg/pr44485.c: New test.\n\nFrom-SVN: r163568", "tree": {"sha": "4842034f20c95beead33bfbf7d7f7eef7bca0017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4842034f20c95beead33bfbf7d7f7eef7bca0017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3920e97f0cc9df385cf357f4d123564e0da7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3920e97f0cc9df385cf357f4d123564e0da7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3920e97f0cc9df385cf357f4d123564e0da7ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3920e97f0cc9df385cf357f4d123564e0da7ad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "350b70702451004bf3f8b7e520b95728bc98cf28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350b70702451004bf3f8b7e520b95728bc98cf28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/350b70702451004bf3f8b7e520b95728bc98cf28"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "36097607bf92338dc0f36c1f7cb9e08465783c18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e3920e97f0cc9df385cf357f4d123564e0da7ad", "patch": "@@ -1,3 +1,14 @@\n+2010-08-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/44485\n+\t* calls.c (flags_from_decl_or_type): For const or pure\n+\tnoreturn functions return ECF_LOOPING_CONST_OR_PURE|ECF_NORETURN\n+\ttogether with ECF_CONST resp. ECF_PURE.\n+\t* builtins.c (expand_builtin): Use flags_from_decl_or_type\n+\tinstead of querying flags directly.\n+\t* tree-ssa-loop-niter.c (finite_loop_p): Likewise.\n+\t* tree-ssa-dce.c (find_obviously_necessary_stmts): Likewise.\n+\n 2010-08-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45255"}, {"sha": "6d755a1b5c7fde5653ac591e75b646d6b36a9942", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9e3920e97f0cc9df385cf357f4d123564e0da7ad", "patch": "@@ -5748,6 +5748,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n   tree fndecl = get_callee_fndecl (exp);\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   enum machine_mode target_mode = TYPE_MODE (TREE_TYPE (exp));\n+  int flags;\n \n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     return targetm.expand_builtin (exp, target, subtarget, mode, ignore);\n@@ -5770,8 +5771,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n      none of its arguments are volatile, we can avoid expanding the\n      built-in call and just evaluate the arguments for side-effects.  */\n   if (target == const0_rtx\n-      && (DECL_PURE_P (fndecl) || TREE_READONLY (fndecl))\n-      && !DECL_LOOPING_CONST_OR_PURE_P (fndecl))\n+      && ((flags = flags_from_decl_or_type (fndecl)) & (ECF_CONST | ECF_PURE))\n+      && !(flags & ECF_LOOPING_CONST_OR_PURE))\n     {\n       bool volatilep = false;\n       tree arg;"}, {"sha": "c50a79265f031cf8b837fb2ab3e50ebc28a57fdc", "filename": "gcc/calls.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9e3920e97f0cc9df385cf357f4d123564e0da7ad", "patch": "@@ -601,7 +601,7 @@ flags_from_decl_or_type (const_tree exp)\n \tflags |= ECF_RETURNS_TWICE;\n \n       /* Process the pure and const attributes.  */\n-      if (TREE_READONLY (exp) && ! TREE_THIS_VOLATILE (exp))\n+      if (TREE_READONLY (exp))\n \tflags |= ECF_CONST;\n       if (DECL_PURE_P (exp))\n \tflags |= ECF_PURE;\n@@ -616,11 +616,15 @@ flags_from_decl_or_type (const_tree exp)\n \n       flags = special_function_p (exp, flags);\n     }\n-  else if (TYPE_P (exp) && TYPE_READONLY (exp) && ! TREE_THIS_VOLATILE (exp))\n+  else if (TYPE_P (exp) && TYPE_READONLY (exp))\n     flags |= ECF_CONST;\n \n   if (TREE_THIS_VOLATILE (exp))\n-    flags |= ECF_NORETURN;\n+    {\n+      flags |= ECF_NORETURN;\n+      if (flags & (ECF_CONST|ECF_PURE))\n+\tflags |= ECF_LOOPING_CONST_OR_PURE;\n+    }\n \n   return flags;\n }"}, {"sha": "8eb2f3a322f92f8de6832f69112e796762defbd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e3920e97f0cc9df385cf357f4d123564e0da7ad", "patch": "@@ -1,3 +1,8 @@\n+2010-08-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/44485\n+\t* gcc.dg/pr44485.c: New test.\n+\n 2010-08-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/tls/thr-init-2.c: Use dg-add-options tls."}, {"sha": "82f05f8ce6ae38a1cf568d8851770c643db2f934", "filename": "gcc/testsuite/gcc.dg/pr44485.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44485.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44485.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44485.c?ref=9e3920e97f0cc9df385cf357f4d123564e0da7ad", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/44485 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -funsafe-math-optimizations\" } */\n+\n+unsigned short b;\n+int bar (unsigned);\n+\n+void\n+baz (void)\n+{\n+  if (bar (0))\n+    for (b = 0; b < 30; b++)\n+      ;\n+}\n+\n+int\n+bar (unsigned z)\n+{\n+  unsigned short c;\n+  for (; ; z += 1)\n+l1:\n+    if (z)\n+      goto l2;\n+l2:\n+  for (z = 0; z < 9; z++)\n+    if (z)\n+      goto l1;\n+  for (c = 0; c; c = (__UINTPTR_TYPE__) baz)\n+    ;\n+  return 0;\n+}"}, {"sha": "a1a51914fa6f574d71afd123a1212ead411faf05", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=9e3920e97f0cc9df385cf357f4d123564e0da7ad", "patch": "@@ -433,6 +433,7 @@ find_obviously_necessary_stmts (struct edge_list *el)\n   gimple_stmt_iterator gsi;\n   edge e;\n   gimple phi, stmt;\n+  int flags;\n \n   FOR_EACH_BB (bb)\n     {\n@@ -454,9 +455,8 @@ find_obviously_necessary_stmts (struct edge_list *el)\n \n   /* Pure and const functions are finite and thus have no infinite loops in\n      them.  */\n-  if ((TREE_READONLY (current_function_decl)\n-       || DECL_PURE_P (current_function_decl))\n-      && !DECL_LOOPING_CONST_OR_PURE_P (current_function_decl))\n+  flags = flags_from_decl_or_type (current_function_decl);\n+  if ((flags & (ECF_CONST|ECF_PURE)) && !(flags & ECF_LOOPING_CONST_OR_PURE))\n     return;\n \n   /* Prevent the empty possibly infinite loops from being removed.  */"}, {"sha": "d23592dfa53175ee1b2e99655120d58e855796f4", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3920e97f0cc9df385cf357f4d123564e0da7ad/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=9e3920e97f0cc9df385cf357f4d123564e0da7ad", "patch": "@@ -1970,12 +1970,12 @@ finite_loop_p (struct loop *loop)\n   edge ex;\n   struct tree_niter_desc desc;\n   bool finite = false;\n+  int flags;\n \n   if (flag_unsafe_loop_optimizations)\n     return true;\n-  if ((TREE_READONLY (current_function_decl)\n-       || DECL_PURE_P (current_function_decl))\n-      && !DECL_LOOPING_CONST_OR_PURE_P (current_function_decl))\n+  flags = flags_from_decl_or_type (current_function_decl);\n+  if ((flags & (ECF_CONST|ECF_PURE)) && !(flags & ECF_LOOPING_CONST_OR_PURE))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Found loop %i to be finite: it is within pure or const function.\\n\","}]}