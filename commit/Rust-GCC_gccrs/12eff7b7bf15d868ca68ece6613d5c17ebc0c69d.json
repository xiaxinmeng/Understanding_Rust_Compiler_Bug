{"sha": "12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJlZmY3YjdiZjE1ZDg2OGNhNjhlY2U2NjEzZDVjMTdlYmMwYzY5ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-07T13:56:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-07T13:56:00Z"}, "message": "cfgbuild.c (find_sub_basic_blocks): Remove.\n\n\t* cfgbuild.c (find_sub_basic_blocks): Remove.\n\t* basic-block.h: Remove the corresponding prototype.\n\t* cfgexpand.c, cfgrtl.c: Don't mention find_sub_basic_blocks\n\tin comments.\n\t* doc/cfg.texi: Don't mention find_sub_basic_blocks.\n\nFrom-SVN: r96016", "tree": {"sha": "40318d554a154beb13c6f80bd5976fb6400a0d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40318d554a154beb13c6f80bd5976fb6400a0d62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/comments", "author": null, "committer": null, "parents": [{"sha": "6db31844ad5b459e9f5ad0e306676bba01ea589b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db31844ad5b459e9f5ad0e306676bba01ea589b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db31844ad5b459e9f5ad0e306676bba01ea589b"}], "stats": {"total": 63, "additions": 13, "deletions": 50}, "files": [{"sha": "ac0a30af504b7af2fc78691995e8a8e5452a0ca5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "patch": "@@ -16,6 +16,12 @@\n \t* recog.c (verify_changes): Make it static.\n \t* recog.h: Remove the corresponding prototype.\n \n+\t* cfgbuild.c (find_sub_basic_blocks): Remove.\n+\t* basic-block.h: Remove the corresponding prototype.\n+\t* cfgexpand.c, cfgrtl.c: Don't mention find_sub_basic_blocks\n+\tin comments.\n+\t* doc/cfg.texi: Don't mention find_sub_basic_blocks.\n+\n 2005-03-07  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* config/i386/cygwin1.c(mingw_scan): Use xstrdup in calls to putenv."}, {"sha": "7865058de94bed0b25fa995d50dbad2164b1cb2e", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "patch": "@@ -764,7 +764,6 @@ extern rtx block_label (basic_block);\n extern bool forwarder_block_p (basic_block);\n extern bool purge_all_dead_edges (int);\n extern bool purge_dead_edges (basic_block);\n-extern void find_sub_basic_blocks (basic_block);\n extern void find_many_sub_basic_blocks (sbitmap);\n extern void rtl_make_eh_edge (sbitmap *, basic_block, rtx);\n extern bool can_fallthru (basic_block, basic_block);"}, {"sha": "0c0e9ebbc3f6186fbb4444ab020cec4a2e190077", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "patch": "@@ -28,9 +28,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    Available functionality:\n      - CFG construction\n-         find_basic_blocks\n-     - Local CFG construction\n-         find_sub_basic_blocks\t\t */\n+         find_basic_blocks  */\n \f\n #include \"config.h\"\n #include \"system.h\"\n@@ -537,7 +535,7 @@ find_basic_blocks (rtx f)\n   timevar_pop (TV_CFG);\n }\n \f\n-/* State of basic block as seen by find_sub_basic_blocks.  */\n+/* State of basic block as seen by find_many_sub_basic_blocks.  */\n enum state {BLOCK_NEW = 0, BLOCK_ORIGINAL, BLOCK_TO_SPLIT};\n \n #define STATE(BB) (enum state) ((size_t) (BB)->aux)\n@@ -771,41 +769,3 @@ find_many_sub_basic_blocks (sbitmap blocks)\n   FOR_EACH_BB (bb)\n     SET_STATE (bb, 0);\n }\n-\n-/* Like above but for single basic block only.  */\n-\n-void\n-find_sub_basic_blocks (basic_block bb)\n-{\n-  basic_block min, max, b;\n-  basic_block next = bb->next_bb;\n-\n-  min = bb;\n-  find_bb_boundaries (bb);\n-  max = next->prev_bb;\n-\n-  /* Now re-scan and wire in all edges.  This expect simple (conditional)\n-     jumps at the end of each new basic blocks.  */\n-  make_edges (min, max, 1);\n-\n-  /* Update branch probabilities.  Expect only (un)conditional jumps\n-     to be created with only the forward edges.  */\n-  FOR_BB_BETWEEN (b, min, max->next_bb, next_bb)\n-    {\n-      edge e;\n-      edge_iterator ei;\n-\n-      if (b != min)\n-\t{\n-\t  b->count = 0;\n-\t  b->frequency = 0;\n-\t  FOR_EACH_EDGE (e, ei, b->preds)\n-\t    {\n-\t      b->count += e->count;\n-\t      b->frequency += EDGE_FREQUENCY (e);\n-\t    }\n-\t}\n-\n-      compute_outgoing_frequencies (b);\n-    }\n-}"}, {"sha": "e339505596f4436d44942f2cc34b60fea3ba3f7a", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "patch": "@@ -1003,7 +1003,7 @@ expand_gimple_tailcall (basic_block bb, tree stmt, bool *can_fallthru)\n \n   /* This is somewhat ugly: the call_expr expander often emits instructions\n      after the sibcall (to perform the function return).  These confuse the\n-     find_sub_basic_blocks code, so we need to get rid of these.  */\n+     find_many_sub_basic_blocks code, so we need to get rid of these.  */\n   last = NEXT_INSN (last);\n   gcc_assert (BARRIER_P (last));\n \n@@ -1088,7 +1088,7 @@ expand_gimple_basic_block (basic_block bb, FILE * dump_file)\n       e->flags &= ~EDGE_EXECUTABLE;\n \n       /* At the moment not all abnormal edges match the RTL representation.\n-         It is safe to remove them here as find_sub_basic_blocks will\n+         It is safe to remove them here as find_many_sub_basic_blocks will\n          rediscover them.  In the future we should get this fixed properly.  */\n       if (e->flags & EDGE_ABNORMAL)\n \tremove_edge (e);"}, {"sha": "c0d17beed58b4b91b9fa944236dfb6973fd65884", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "patch": "@@ -1684,7 +1684,7 @@ commit_one_edge_insertion (edge e, int watch_calls)\n   else\n     gcc_assert (!JUMP_P (last));\n \n-  /* Mark the basic block for find_sub_basic_blocks.  */\n+  /* Mark the basic block for find_many_sub_basic_blocks.  */\n   bb->aux = &bb->aux;\n }\n "}, {"sha": "92033027066bf518f34fcf02510e91060554d395", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eff7b7bf15d868ca68ece6613d5c17ebc0c69d/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=12eff7b7bf15d868ca68ece6613d5c17ebc0c69d", "patch": "@@ -580,14 +580,12 @@ low level functions, such as @code{redirect_jump} that operate on RTL\n chain only.  The CFG hooks defined in @file{cfghooks.h} should provide\n the complete API required for manipulating and maintaining the CFG@.\n \n-@findex find_sub_basic_blocks, split_block\n+@findex split_block\n It is also possible that a pass has to insert control flow instruction\n into the middle of a basic block, thus creating an entry point in the\n middle of the basic block, which is impossible by definition: The\n block must be split to make sure it only has one entry point, i.e.@: the\n-head of the basic block.  In the RTL representation, the\n-@code{find_sub_basic_blocks} may be used to split existing basic block\n-and add necessary edges.  The CFG hook @code{split_block} may be used\n+head of the basic block.  The CFG hook @code{split_block} may be used\n when an instruction in the middle of a basic block has to become the\n target of a jump or branch instruction.\n "}]}