{"sha": "69fff50e08365770deca864efd7a904ac9eb25e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmZmY1MGUwODM2NTc3MGRlY2E4NjRlZmQ3YTkwNGFjOWViMjVlMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T12:58:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T12:58:06Z"}, "message": "[multiple changes]\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Case_Statement): If a choice is a\n\tsubtype indication and the case statement has only two choices,\n\treplace subtype indication with its range, because the resulting\n\tmembership test cannot have a subtype indication as an operand.\n\n2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch3.adb: Update comments, minor reformatting.\n\nFrom-SVN: r213583", "tree": {"sha": "a54cb3b7846c90023e478f75bdca955a38b9297e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54cb3b7846c90023e478f75bdca955a38b9297e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69fff50e08365770deca864efd7a904ac9eb25e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69fff50e08365770deca864efd7a904ac9eb25e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69fff50e08365770deca864efd7a904ac9eb25e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69fff50e08365770deca864efd7a904ac9eb25e0/comments", "author": null, "committer": null, "parents": [{"sha": "e85f4337c3c9ced8e7eece753962443d230b487f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85f4337c3c9ced8e7eece753962443d230b487f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85f4337c3c9ced8e7eece753962443d230b487f"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "c417df3a7af0949ecefc8fba42386d50758c264d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69fff50e08365770deca864efd7a904ac9eb25e0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69fff50e08365770deca864efd7a904ac9eb25e0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=69fff50e08365770deca864efd7a904ac9eb25e0", "patch": "@@ -1,3 +1,14 @@\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Case_Statement): If a choice is a\n+\tsubtype indication and the case statement has only two choices,\n+\treplace subtype indication with its range, because the resulting\n+\tmembership test cannot have a subtype indication as an operand.\n+\n+2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch3.adb: Update comments, minor reformatting.\n+\n 2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Declarations): Explain why the bodies of"}, {"sha": "2f21d488dd08a20c7e85b22e8e448bd5c4cfac61", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69fff50e08365770deca864efd7a904ac9eb25e0/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69fff50e08365770deca864efd7a904ac9eb25e0/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=69fff50e08365770deca864efd7a904ac9eb25e0", "patch": "@@ -4570,8 +4570,8 @@ package body Exp_Ch3 is\n \n    begin\n       --  Expand_Record_Extension is called directly from the semantics, so\n-      --  we must check to see whether expansion is active before proceeding\n-      --  Because this affects the visibility of selected components in bodies\n+      --  we must check to see whether expansion is active before proceeding,\n+      --  because this affects the visibility of selected components in bodies\n       --  of instances.\n \n       if not Expander_Active then\n@@ -4686,9 +4686,7 @@ package body Exp_Ch3 is\n          --  record parameter for an entry declaration. No master is created\n          --  for such a type.\n \n-         if Comes_From_Source (N)\n-           and then Has_Task (Desig_Typ)\n-         then\n+         if Comes_From_Source (N) and then Has_Task (Desig_Typ) then\n             Build_Master_Entity (Ptr_Typ);\n             Build_Master_Renaming (Ptr_Typ);\n \n@@ -5743,8 +5741,7 @@ package body Exp_Ch3 is\n                --  allocated in place, delay checks until assignments are\n                --  made, because the discriminants are not initialized.\n \n-               if Nkind (Expr) = N_Allocator\n-                 and then No_Initialization (Expr)\n+               if Nkind (Expr) = N_Allocator and then No_Initialization (Expr)\n                then\n                   null;\n \n@@ -7134,9 +7131,8 @@ package body Exp_Ch3 is\n       --  routine. There is no need to add predefined primitives of interfaces\n       --  because all their predefined primitives are abstract.\n \n-      if Is_Tagged_Type (Def_Id)\n-        and then not Is_Interface (Def_Id)\n-      then\n+      if Is_Tagged_Type (Def_Id) and then not Is_Interface (Def_Id) then\n+\n          --  Do not add the body of predefined primitives in case of CPP tagged\n          --  type derivations that have convention CPP.\n \n@@ -7990,10 +7986,9 @@ package body Exp_Ch3 is\n          end if;\n \n          --  The final expression is obtained by doing an unchecked conversion\n-         --  of this result to the base type of the required subtype. We use\n-         --  the base type to prevent the unchecked conversion from chopping\n-         --  bits, and then we set Kill_Range_Check to preserve the \"bad\"\n-         --  value.\n+         --  of this result to the base type of the required subtype. Use the\n+         --  base type to prevent the unchecked conversion from chopping bits,\n+         --  and then we set Kill_Range_Check to preserve the \"bad\" value.\n \n          Result := Unchecked_Convert_To (Base_Type (T), Val);\n "}, {"sha": "b39145c7daae935d4f16480e7277f0ebde54a1c5", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69fff50e08365770deca864efd7a904ac9eb25e0/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69fff50e08365770deca864efd7a904ac9eb25e0/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=69fff50e08365770deca864efd7a904ac9eb25e0", "patch": "@@ -2681,13 +2681,23 @@ package body Exp_Ch5 is\n                            and then Attribute_Name (Choice) = Name_Range)\n                  or else (Is_Entity_Name (Choice)\n                            and then Is_Type (Entity (Choice)))\n-                 or else Nkind (Choice) = N_Subtype_Indication\n                then\n                   Cond :=\n                     Make_In (Loc,\n                       Left_Opnd  => Expression (N),\n                       Right_Opnd => Relocate_Node (Choice));\n \n+               --  A subtype indication is not a legal operator in a membership\n+               --  test, so retrieve its range.\n+\n+               elsif Nkind (Choice) = N_Subtype_Indication then\n+                  Cond :=\n+                    Make_In (Loc,\n+                      Left_Opnd  => Expression (N),\n+                      Right_Opnd =>\n+                        Relocate_Node\n+                          (Range_Expression (Constraint (Choice))));\n+\n                --  For any other subexpression \"expression = value\"\n \n                else\n@@ -2715,10 +2725,9 @@ package body Exp_Ch5 is\n          --  compute the contents of the Others_Discrete_Choices which is not\n          --  needed by the back end anyway.\n \n-         --  The reason we do this is that the back end always needs some\n-         --  default for a switch, so if we have not supplied one in the\n-         --  processing above for validity checking, then we need to supply\n-         --  one here.\n+         --  The reason for this is that the back end always needs some default\n+         --  for a switch, so if we have not supplied one in the processing\n+         --  above for validity checking, then we need to supply one here.\n \n          if not Others_Present then\n             Others_Node := Make_Others_Choice (Sloc (Last_Alt));\n@@ -2810,7 +2819,7 @@ package body Exp_Ch5 is\n       I_Spec        : constant Node_Id    := Iterator_Specification (Isc);\n       Element       : constant Entity_Id  := Defining_Identifier (I_Spec);\n       Container     : constant Node_Id    := Entity (Name (I_Spec));\n-      Container_Typ : constant Entity_Id := Base_Type (Etype (Container));\n+      Container_Typ : constant Entity_Id  := Base_Type (Etype (Container));\n       Stats         : constant List_Id    := Statements (N);\n \n       Cursor    : constant Entity_Id :="}]}