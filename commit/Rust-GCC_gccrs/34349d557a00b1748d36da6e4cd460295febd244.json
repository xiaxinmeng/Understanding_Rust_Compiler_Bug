{"sha": "34349d557a00b1748d36da6e4cd460295febd244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzNDlkNTU3YTAwYjE3NDhkMzZkYTZlNGNkNDYwMjk1ZmViZDI0NA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-03-05T19:43:11Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-03-05T19:43:11Z"}, "message": "re PR target/64342 (Tests failing when compiled with '-m32 -fpic' after r216154.)\n\n2015-03-05  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/64342\n\t* lra-assigns.c (find_hard_regno_for): Rename to\n\tfind_hard_regno_for_1.  Add a new parameter.\n\t(find_hard_regno_for): New function using find_hard_regno_for_1.\n\nFrom-SVN: r221223", "tree": {"sha": "baa33f1f984e0d46216b036d4c5bb6a6fd522470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa33f1f984e0d46216b036d4c5bb6a6fd522470"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34349d557a00b1748d36da6e4cd460295febd244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34349d557a00b1748d36da6e4cd460295febd244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34349d557a00b1748d36da6e4cd460295febd244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34349d557a00b1748d36da6e4cd460295febd244/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53c615a2769209147ad242d646051954b3a2b8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c615a2769209147ad242d646051954b3a2b8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c615a2769209147ad242d646051954b3a2b8f4"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "c4496f5b758a55650ddd101a0fa7c45bfd49126b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34349d557a00b1748d36da6e4cd460295febd244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34349d557a00b1748d36da6e4cd460295febd244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34349d557a00b1748d36da6e4cd460295febd244", "patch": "@@ -1,3 +1,10 @@\n+2015-03-05  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/64342\n+\t* lra-assigns.c (find_hard_regno_for): Rename to\n+\tfind_hard_regno_for_1.  Add a new parameter.\n+\t(find_hard_regno_for): New function using find_hard_regno_for_1.\n+\n 2015-03-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR rtl-optimization/65067"}, {"sha": "e19156b32807c9b7a821b3f484da1c917eac44e9", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34349d557a00b1748d36da6e4cd460295febd244/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34349d557a00b1748d36da6e4cd460295febd244/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=34349d557a00b1748d36da6e4cd460295febd244", "patch": "@@ -491,10 +491,13 @@ adjust_hard_regno_cost (int hard_regno, int incr)\n    pseudos in complicated situations where pseudo sizes are different.\n \n    If TRY_ONLY_HARD_REGNO >= 0, consider only that hard register,\n-   otherwise consider all hard registers in REGNO's class.  */\n+   otherwise consider all hard registers in REGNO's class.\n+\n+   If REGNO_SET is not empty, only hard registers from the set are\n+   considered.  */\n static int\n-find_hard_regno_for (int regno, int *cost, int try_only_hard_regno,\n-\t\t     bool first_p)\n+find_hard_regno_for_1 (int regno, int *cost, int try_only_hard_regno,\n+\t\t       bool first_p, HARD_REG_SET regno_set)\n {\n   HARD_REG_SET conflict_set;\n   int best_cost = INT_MAX, best_priority = INT_MIN, best_usage = INT_MAX;\n@@ -509,7 +512,13 @@ find_hard_regno_for (int regno, int *cost, int try_only_hard_regno,\n   bool *rclass_intersect_p;\n   HARD_REG_SET impossible_start_hard_regs, available_regs;\n \n-  COPY_HARD_REG_SET (conflict_set, lra_no_alloc_regs);\n+  if (hard_reg_set_empty_p (regno_set))\n+    COPY_HARD_REG_SET (conflict_set, lra_no_alloc_regs);\n+  else\n+    {\n+      COMPL_HARD_REG_SET (conflict_set, regno_set);\n+      IOR_HARD_REG_SET (conflict_set, lra_no_alloc_regs);\n+    }\n   rclass = regno_allocno_class_array[regno];\n   rclass_intersect_p = ira_reg_classes_intersect_p[rclass];\n   curr_hard_regno_costs_check++;\n@@ -680,6 +689,33 @@ find_hard_regno_for (int regno, int *cost, int try_only_hard_regno,\n   return best_hard_regno;\n }\n \n+/* A wrapper for find_hard_regno_for_1 (see comments for that function\n+   description).  This function tries to find a hard register for\n+   preferred class first if it is worth.  */\n+static int\n+find_hard_regno_for (int regno, int *cost, int try_only_hard_regno, bool first_p)\n+{\n+  int hard_regno;\n+  HARD_REG_SET regno_set;\n+\n+  /* Only original pseudos can have a different preferred class.  */\n+  if (try_only_hard_regno < 0 && regno < lra_new_regno_start)\n+    {\n+      enum reg_class pref_class = reg_preferred_class (regno);\n+      \n+      if (regno_allocno_class_array[regno] != pref_class)\n+\t{\n+\t  hard_regno = find_hard_regno_for_1 (regno, cost, -1, first_p,\n+\t\t\t\t\t      reg_class_contents[pref_class]);\n+\t  if (hard_regno >= 0)\n+\t    return hard_regno;\n+\t}\n+    }\n+  CLEAR_HARD_REG_SET (regno_set);\n+  return find_hard_regno_for_1 (regno, cost, try_only_hard_regno, first_p,\n+\t\t\t\tregno_set);\n+}\n+\n /* Current value used for checking elements in\n    update_hard_regno_preference_check.\t*/\n static int curr_update_hard_regno_preference_check;"}]}