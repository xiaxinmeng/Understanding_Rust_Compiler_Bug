{"sha": "dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiZDc1MmRjNGJiNDEyYWM0Y2JhN2JiODVlMjRhMjI0MGI2NWM3NQ==", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2007-11-07T14:49:46Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@gcc.gnu.org", "date": "2007-11-07T14:49:46Z"}, "message": "a-tasatt.adb: Use 'Access instead of 'Unchecked_Access when applicable.\n\n    gcc/ada/\n\t* a-tasatt.adb: Use 'Access instead of 'Unchecked_Access when\n\tapplicable. Local lifetime is the one of the package.\n\t(Set_Value): W is allocated on the heap.\n\n\t* g-socket.adb: Use 'Access instead of 'Unchecked_Access when\n\tapplicable.\n\t(Get_Socket_Option): Optlen formal of C_Getsockopt is of an anonymous\n\taccess type.\n\t(Receive_Socket): Fromlen formal of C_Recvfrom is of an anonymous\n\taccess type.\n\n\t* s-taasde.adb: Use 'Access instead of 'Unchecked_Access when\n\tapplicable.\n\t(elaboration code): Timer_Queue lifetime is the one of the\n\tpackage.\n\nFrom-SVN: r129963", "tree": {"sha": "7165cf5e6d5b9b91519feb9606f0ccefa5aebbc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7165cf5e6d5b9b91519feb9606f0ccefa5aebbc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9d806de0b5f93a0ceb957e7895cafa83761392b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d806de0b5f93a0ceb957e7895cafa83761392b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d806de0b5f93a0ceb957e7895cafa83761392b"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "f614c26a929dc5e07dfa729146e8589361dea1ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "patch": "@@ -2,6 +2,21 @@\n \n \t* a-tasatt.adb: Type Wrapper should be declared in comment instead\n \tof already declared type Node_Access.\n+\tUse 'Access instead of 'Unchecked_Access when applicable. Local\n+\tlifetime is the one of the package.\n+\t(Set_Value): W is allocated on the heap.\n+\n+\t* g-socket.adb: Use 'Access instead of 'Unchecked_Access when\n+\tapplicable.\n+\t(Get_Socket_Option): Optlen formal of C_Getsockopt is of an anonymous\n+\taccess type.\n+\t(Receive_Socket): Fromlen formal of C_Recvfrom is of an anonymous\n+\taccess type.\n+\n+\t* s-taasde.adb: Use 'Access instead of 'Unchecked_Access when\n+\tapplicable.\n+\t(elaboration code): Timer_Queue lifetime is the one of the\n+\tpackage.\n \n 2007-11-07  Olivier Hainque  <hainque@adacore.com>\n "}, {"sha": "cd205915708baa834dd139d3b6838106ed535508", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "patch": "@@ -415,7 +415,7 @@ package body Ada.Task_Attributes is\n             POP.Lock_RTS;\n \n             while P /= null loop\n-               if P.Instance = Access_Instance'(Local'Unchecked_Access) then\n+               if P.Instance = Access_Instance'(Local'Access) then\n                   POP.Unlock_RTS;\n                   Undefer_Abort (Self_Id);\n                   return To_Access_Wrapper (P.Wrapper).Value'Access;\n@@ -429,11 +429,10 @@ package body Ada.Task_Attributes is\n             --  holding any other lock.\n \n             POP.Unlock_RTS;\n-            W := new Wrapper'\n-                  ((null, Local'Unchecked_Access, null), Initial_Value);\n+            W := new Wrapper'((null, Local'Access, null), Initial_Value);\n             POP.Lock_RTS;\n \n-            P := W.Dummy_Node'Unchecked_Access;\n+            P := W.Dummy_Node'Access;\n             P.Wrapper := To_Access_Dummy_Wrapper (W);\n             P.Next := To_Access_Node (TT.Indirect_Attributes);\n             TT.Indirect_Attributes := To_Access_Address (P);\n@@ -494,7 +493,7 @@ package body Ada.Task_Attributes is\n             Q := To_Access_Node (TT.Indirect_Attributes);\n \n             while Q /= null loop\n-               if Q.Instance = Access_Instance'(Local'Unchecked_Access) then\n+               if Q.Instance = Access_Instance'(Local'Access) then\n                   if P = null then\n                      TT.Indirect_Attributes := To_Access_Address (Q.Next);\n                   else\n@@ -581,7 +580,7 @@ package body Ada.Task_Attributes is\n \n          while P /= null loop\n \n-            if P.Instance = Access_Instance'(Local'Unchecked_Access) then\n+            if P.Instance = Access_Instance'(Local'Access) then\n                To_Access_Wrapper (P.Wrapper).Value := Val;\n                POP.Unlock_RTS;\n                Undefer_Abort (Self_Id);\n@@ -595,9 +594,9 @@ package body Ada.Task_Attributes is\n          --  from using new (i.e the Global_Lock) while holding any other lock.\n \n          POP.Unlock_RTS;\n-         W := new Wrapper'((null, Local'Unchecked_Access, null), Val);\n+         W := new Wrapper'((null, Local'Access, null), Val);\n          POP.Lock_RTS;\n-         P := W.Dummy_Node'Unchecked_Access;\n+         P := W.Dummy_Node'Access;\n          P.Wrapper := To_Access_Dummy_Wrapper (W);\n          P.Next := To_Access_Node (TT.Indirect_Attributes);\n          TT.Indirect_Attributes := To_Access_Address (P);\n@@ -669,7 +668,7 @@ package body Ada.Task_Attributes is\n          P := To_Access_Node (TT.Indirect_Attributes);\n \n          while P /= null loop\n-            if P.Instance = Access_Instance'(Local'Unchecked_Access) then\n+            if P.Instance = Access_Instance'(Local'Access) then\n                Result := To_Access_Wrapper (P.Wrapper).Value;\n                POP.Unlock_RTS;\n                Undefer_Abort (Self_Id);\n@@ -724,8 +723,7 @@ begin\n       --  Add this instantiation to the list of all instantiations\n \n       Local.Next := System.Tasking.Task_Attributes.All_Attributes;\n-      System.Tasking.Task_Attributes.All_Attributes :=\n-        Local'Unchecked_Access;\n+      System.Tasking.Task_Attributes.All_Attributes := Local'Access;\n \n       --  Try to find space for the attribute in the TCB\n "}, {"sha": "0efe260e1b1b73079429322d843f6c8fd2a667e9", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "patch": "@@ -978,7 +978,7 @@ package body GNAT.Sockets is\n           (C.int (Socket),\n            Levels (Level),\n            Options (Name),\n-           Add, Len'Unchecked_Access);\n+           Add, Len'Access);\n \n       if Res = Failure then\n          Raise_Socket_Error (Socket_Errno);\n@@ -1440,7 +1440,7 @@ package body GNAT.Sockets is\n            Item'Length,\n            To_Int (Flags),\n            Sin'Unchecked_Access,\n-           Len'Unchecked_Access);\n+           Len'Access);\n \n       if Res = Failure then\n          Raise_Socket_Error (Socket_Errno);"}, {"sha": "28e31e0ec93e97cd01791cf1fababab11490bc37", "filename": "gcc/ada/s-taasde.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbd752dc4bb412ac4cba7bb85e24a2240b65c75/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=dcbd752dc4bb412ac4cba7bb85e24a2240b65c75", "patch": "@@ -437,8 +437,8 @@ package body System.Tasking.Async_Delays is\n    ------------------------------\n \n begin\n-   Timer_Queue.Succ := Timer_Queue'Unchecked_Access;\n-   Timer_Queue.Pred := Timer_Queue'Unchecked_Access;\n+   Timer_Queue.Succ := Timer_Queue'Access;\n+   Timer_Queue.Pred := Timer_Queue'Access;\n    Timer_Queue.Resume_Time := Duration'Last;\n    Timer_Server_ID := To_System (Timer_Server'Identity);\n end System.Tasking.Async_Delays;"}]}