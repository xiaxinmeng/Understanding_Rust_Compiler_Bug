{"sha": "dca19fe10daf00bfef714e3f9f98c63ff70c7a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhMTlmZTEwZGFmMDBiZmVmNzE0ZTNmOWY5OGM2M2ZmNzBjN2E2NA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-06-21T10:46:02Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-06-21T10:46:02Z"}, "message": "Improve dup pattern\n\nImprove the dup pattern to prefer vector registers.  When doing a dup\nafter a load, the register allocator thinks the costs are identical\nand chooses an integer load.  However a dup from an integer register\nincludes an int->fp transfer which is not modelled.  Adding a '?' to\nthe integer variant means the cost is increased slightly so we prefer\nusing a vector register.  This improves the following example:\n\n#include <arm_neon.h>\nvoid f(unsigned *a, uint32x4_t *b)\n{\n  b[0] = vdupq_n_u32(a[1]);\n  b[1] = vdupq_n_u32(a[2]);\n}\n\nto:\n        ldr     s0, [x0, 4]\n        dup     v0.4s, v0.s[0]\n        str     q0, [x1]\n        ldr     s0, [x0, 8]\n        dup     v0.4s, v0.s[0]\n        str     q0, [x1, 16]\n        ret\n\n    gcc/\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup):\n\tSwap alternatives, make integer dup more expensive.\n\nFrom-SVN: r249443", "tree": {"sha": "299fb3d6951d77ea9481949905d0bce787c70afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/299fb3d6951d77ea9481949905d0bce787c70afb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dca19fe10daf00bfef714e3f9f98c63ff70c7a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca19fe10daf00bfef714e3f9f98c63ff70c7a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca19fe10daf00bfef714e3f9f98c63ff70c7a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca19fe10daf00bfef714e3f9f98c63ff70c7a64/comments", "author": null, "committer": null, "parents": [{"sha": "f28e54bd06f3733ff147128107a8da6d3e6d428e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28e54bd06f3733ff147128107a8da6d3e6d428e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28e54bd06f3733ff147128107a8da6d3e6d428e"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "1fc622bed97add726ff7a57002ebf28a75c5c3ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca19fe10daf00bfef714e3f9f98c63ff70c7a64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca19fe10daf00bfef714e3f9f98c63ff70c7a64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dca19fe10daf00bfef714e3f9f98c63ff70c7a64", "patch": "@@ -1,3 +1,8 @@\n+2017-06-21  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup):\n+\tSwap alternatives, make integer dup more expensive.\n+\n 2017-06-21  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_legitimate_constant_p):"}, {"sha": "c94946563e620ada88df1cfa0f7724143a147df7", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca19fe10daf00bfef714e3f9f98c63ff70c7a64/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca19fe10daf00bfef714e3f9f98c63ff70c7a64/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=dca19fe10daf00bfef714e3f9f98c63ff70c7a64", "patch": "@@ -44,12 +44,12 @@\n (define_insn \"aarch64_simd_dup<mode>\"\n   [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w, w\")\n \t(vec_duplicate:VDQ_I\n-\t  (match_operand:<VEL> 1 \"register_operand\" \"r, w\")))]\n+\t  (match_operand:<VEL> 1 \"register_operand\" \"w,?r\")))]\n   \"TARGET_SIMD\"\n   \"@\n-   dup\\\\t%0.<Vtype>, %<vw>1\n-   dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\"\n-  [(set_attr \"type\" \"neon_from_gp<q>, neon_dup<q>\")]\n+   dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\n+   dup\\\\t%0.<Vtype>, %<vw>1\"\n+  [(set_attr \"type\" \"neon_dup<q>, neon_from_gp<q>\")]\n )\n \n (define_insn \"aarch64_simd_dup<mode>\""}]}