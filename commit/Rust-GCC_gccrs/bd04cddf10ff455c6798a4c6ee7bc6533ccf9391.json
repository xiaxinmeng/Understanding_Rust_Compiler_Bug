{"sha": "bd04cddf10ff455c6798a4c6ee7bc6533ccf9391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwNGNkZGYxMGZmNDU1YzY3OThhNGM2ZWU3YmM2NTMzY2NmOTM5MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-12-03T21:57:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-03T21:57:15Z"}, "message": "* alias.c (alias_set_subset_of, alias_sets_must_conflict_p)\n\tShort circuit for !flag_strict_aliasing\n\t(get_alias_set): Remove flag_strict_aliasing check.\n\t(new_alias_set): Likewise.\n\nFrom-SVN: r231239", "tree": {"sha": "a0e3d8b6f2fe134e8aa08d7498f3ad40d3b4c578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e3d8b6f2fe134e8aa08d7498f3ad40d3b4c578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391/comments", "author": null, "committer": null, "parents": [{"sha": "5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "900119a765a29dfc95b5812fdd59776b3b4cdbb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd04cddf10ff455c6798a4c6ee7bc6533ccf9391", "patch": "@@ -1,3 +1,10 @@\n+2015-12-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* alias.c (alias_set_subset_of, alias_sets_must_conflict_p)\n+\tShort circuit for !flag_strict_aliasing\n+\t(get_alias_set): Remove flag_strict_aliasing check.\n+\t(new_alias_set): Likewise.\n+\n 2015-12-03  Evandro Menezes  <e.menezes@samsung.com>\n \n \t* config/aarch64/aarch64-cores.def: Use the Exynos M1 cost model."}, {"sha": "66aedcef4c904e21836cf91c6223852bb17213f8", "filename": "gcc/alias.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd04cddf10ff455c6798a4c6ee7bc6533ccf9391/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=bd04cddf10ff455c6798a4c6ee7bc6533ccf9391", "patch": "@@ -405,6 +405,10 @@ alias_set_subset_of (alias_set_type set1, alias_set_type set2)\n {\n   alias_set_entry *ase2;\n \n+  /* Disable TBAA oracle with !flag_strict_aliasing.  */\n+  if (!flag_strict_aliasing)\n+    return true;\n+\n   /* Everything is a subset of the \"aliases everything\" set.  */\n   if (set2 == 0)\n     return true;\n@@ -537,6 +541,9 @@ alias_sets_conflict_p (alias_set_type set1, alias_set_type set2)\n int\n alias_sets_must_conflict_p (alias_set_type set1, alias_set_type set2)\n {\n+  /* Disable TBAA oracle with !flag_strict_aliasing.  */\n+  if (!flag_strict_aliasing)\n+    return 1;\n   if (set1 == 0 || set2 == 0)\n     {\n       ++alias_stats.num_alias_zero;\n@@ -816,10 +823,12 @@ get_alias_set (tree t)\n {\n   alias_set_type set;\n \n-  /* If we're not doing any alias analysis, just assume everything\n-     aliases everything else.  Also return 0 if this or its type is\n-     an error.  */\n-  if (! flag_strict_aliasing || t == error_mark_node\n+  /* We can not give up with -fno-strict-aliasing because we need to build\n+     proper type representation for possible functions which are build with\n+     -fstirct-aliasing.  */\n+\n+  /* return 0 if this or its type is an error.  */\n+  if (t == error_mark_node\n       || (! TYPE_P (t)\n \t  && (TREE_TYPE (t) == 0 || TREE_TYPE (t) == error_mark_node)))\n     return 0;\n@@ -1085,15 +1094,10 @@ get_alias_set (tree t)\n alias_set_type\n new_alias_set (void)\n {\n-  if (flag_strict_aliasing)\n-    {\n-      if (alias_sets == 0)\n-\tvec_safe_push (alias_sets, (alias_set_entry *) NULL);\n-      vec_safe_push (alias_sets, (alias_set_entry *) NULL);\n-      return alias_sets->length () - 1;\n-    }\n-  else\n-    return 0;\n+  if (alias_sets == 0)\n+    vec_safe_push (alias_sets, (alias_set_entry *) NULL);\n+  vec_safe_push (alias_sets, (alias_set_entry *) NULL);\n+  return alias_sets->length () - 1;\n }\n \n /* Indicate that things in SUBSET can alias things in SUPERSET, but that"}]}