{"sha": "6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5ZDg2NTExOWExMDc3MDgxZGUzZDRlYTlkMmNhZjY0MWM4ZGNiNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-16T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-16T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "49f89a6a7ca7e0c41deec2b3ed74d1595eb85ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49f89a6a7ca7e0c41deec2b3ed74d1595eb85ffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/comments", "author": null, "committer": null, "parents": [{"sha": "42181708da1908bf7ea792d1a2bc6d12ff82148f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42181708da1908bf7ea792d1a2bc6d12ff82148f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42181708da1908bf7ea792d1a2bc6d12ff82148f"}], "stats": {"total": 776, "additions": 775, "deletions": 1}, "files": [{"sha": "ec74e4ea06243fd6ee20f58f2efb4169f5a5a40d", "filename": "ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,18 @@\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Makefile.def\n+\t* Makefile.in\n+\t* Makefile.tpl\n+\t* configure\n+\t* configure.ac\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Makefile.def: Add libcody.\n+\t* configure.ac: Add libcody.\n+\t* Makefile.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2020-12-14  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* .dir-locals.el (c-mode): Set 'fill-column' to 80 columns."}, {"sha": "a659b5dcee4cd404b37b0d9154bd81eae91c4b00", "filename": "c++tools/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/c%2B%2Btools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/c%2B%2Btools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,13 @@\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Makefile.in: New.\n+\t* config.h.in: New.\n+\t* configure: New.\n+\t* configure.ac: New.\n+\t* resolver.cc: New.\n+\t* resolver.h: New.\n+\t* server.cc: New.\n+\n \f\n Copyright (C) 2020 Free Software Foundation, Inc.\n "}, {"sha": "e78c0568d529481001e097b59796f9503d519437", "filename": "contrib/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,12 @@\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc_update: Add c++tools & libcody.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc-changelog/git_commit.py (changelog_locations): Add\n+\tlibcody, c++tools.\n+\n 2020-12-08  Martin Liska  <mliska@suse.cz>\n \n \t* filter-clang-warnings.py: Filter more cases."}, {"sha": "0b20c23f9f784e4f83f75dd20a17a4e5cd4b924c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,58 @@\n+2020-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96094\n+\t* match.pd (X / bool_range_Y -> X): New simplification.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/cppopts.texi: Document new cpp opt.\n+\t* doc/invoke.texi: Add C++20 module option & documentation.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Makefile.in (CODYINC, CODYLIB, CODYLIB_H): New. Use them.\n+\n+2020-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98274\n+\t* config/i386/i386-options.c (ix86_option_override_internal): Set\n+\tix86_tune_string to \"generic\" even when it wasn't specified and\n+\tix86_arch_string is \"x86-64-v2\", \"x86-64-v3\" or \"x86-64-v4\".\n+\tRemove useless {}s around a single statement.\n+\n+2020-12-15  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/98275\n+\t* lto-wrapper.c: Do not use -j0 when we are unable to detect\n+\tnumber of cores.\n+\n+2020-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386-options.c (ix86_option_override_internal): Don't\n+\terror on -march=x86-64-v[234] with -m32 or -mabi=ms.\n+\t* config.gcc: Don't reject --with-arch=x86-64-v[234] or\n+\t--with-arch_32=x86-64-v[234].\n+\t* doc/invoke.texi (-march=x86-64-v[234]): Document what the option\n+\tdoes for other ABIs.\n+\n+2020-12-15  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/98273\n+\t* gcov.c (output_json_intermediate_file): Use stack of nested\n+\tfunctions for lines in a source file.  Pop when a function ends.\n+\n+2020-12-15  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/invoke.texi (Instrumentation Options): Update link to\n+\tKernelAddressSanitizer.\n+\n+2020-12-15  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/predicates.md (addsubx_operand): Change accepted\n+\tvalues from 2/4/8 to 1..3.\n+\t* config/xtensa/xtensa.md (*addx, *subx): Change RTL pattern\n+\tto use 'ashift' instead of 'mult'. Update operands[3] value.\n+\n 2020-12-14  Piotr Kubaj  <pkubaj@FreeBSD.org>\n \t    Gerald Pfeifer  <gerald@pfeifer.com>\n "}, {"sha": "4bd61d40c28b8dc5c879bafc27ce06b429f948ce", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1 +1 @@\n-20201215\n+20201216"}, {"sha": "21bc46bfde31d29c1e2df32a97628d523922ba3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 460, "deletions": 0, "changes": 460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,463 @@\n+2020-12-15  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-sercom__linux.adb (Set): Use cfsetospeed and\n+\tcfsetispeed to set the baud rate. Clear non-blocking serial port\n+\tstatus when blocking is requested.\n+\n+2020-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valrea.adb (Integer_to_Real): Always use Extra.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch5.adb (P_Condition): Simplify condition for warning\n+\tabout extra parens and make it easier to understand.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.ads (Error_Msg_Ada_2005_Extension): New routine (spec).\n+\t* errout.adb (Error_Msg_Ada_2005_Extension): New routine (body).\n+\t* par-ch10.adb: Reuse new routine; correct casing for \"LIMITED\n+\tWITH\".\n+\t* par-ch11.adb: Likewise.\n+\t* par-ch12.adb: Likewise.\n+\t* par-ch3.adb: Likewise.\n+\t* par-ch4.adb: Likewise; replace \"box\" with \"<>\".\n+\t* par-ch6.adb: Likewise.\n+\t* par-ch9.adb: Likewise; correct casing for \"THEN ABORT\".\n+\n+2020-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Minor fix.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* libgnat/s-valuer.ads (Precision_Limit): New formal parameter.\n+\t* libgnat/s-valuer.adb (Precision_Limit): Remove.\n+\t(Scan_Decimal_Digits): Robustify overflow check.\n+\t(Scan_Integral_Digits): Likewise.\n+\t* libgnat/s-valrea.adb: Add assertion on the size of the unsigned\n+\ttype and instantiate System.Value_R with the mantissa limit.\n+\t(Integer_to_Real): Add Extra parameter and take it into account.\n+\t(Scan_Real): Pass Extra to Integer_to_Real.\n+\t(Value_Real): Likewise.\n+\t* libgnat/s-valued.adb: Add assertion on the size of the unsigned\n+\ttype and instantiate System.Value_R with the mantissa limit.\n+\t* libgnat/s-valuef.adb: Likewise.\n+\n+2020-12-15  Justin Squirek  <squirek@adacore.com>\n+\n+\t* contracts.adb, contracts.ads (Build_Postconditions_Procedure):\n+\tAdd declarations for Postcond_Enabled,\n+\tResult_Object_For_Postcondition, and\n+\tReturn_Success_For_Postcond, and place all postconditions within\n+\tan if statement to control their execution for interactions when\n+\tcleanup actions get generated.\n+\t(Get_Postcond_Enabled): Created to fetch object declared to\n+\thandle new expansion of postconditions.\n+\t(Get_Result_Object_For_Postcond): Created to fetch object\n+\tdeclared to handle new expansion of postconditions.\n+\t(Get_Return_Success_For_Postcond): Created to fetch object\n+\tdeclared to handle new expansion of postconditions.\n+\t* einfo.adb, einfo.ads: Modify flag Stores_Attribute_Old_Prefix\n+\tto apply to constants, variables, and types.\n+\t* exp_ch6.adb (Add_Return): Add assignment to\n+\tReturn_Success_For_Postcond.\n+\t(Expand_Non_Function_Return): Add assignment to\n+\tReturn_Success_For_Postcond\n+\t(Expand_Simple_Function_Return): Add assignment to\n+\tResult_Object_For_Postcond and Return_Success_For_Postcond.\n+\t* exp_ch7.adb (Build_Finalization_Master): Mark finalization\n+\tmasters which finalize types created store 'Old objects as\n+\tstoring 'Old objects.\n+\t(Build_Finalizer): Created to generated a unified and special\n+\texpansion for finalization when postconditions are present.\n+\t(Build_Finalizer_Helper): Renamed Build_Finalizer and added\n+\tparameter to facilitate the creation of separate finalization\n+\troutines for 'Old objects and general objects.\n+\t(Create_Finalizer): Add condition for the insertion of the\n+\tfinalizer spec to avoid malformed trees.\n+\t(Expand_Cleanup_Actions): Move _postconditions and related\n+\tdeclarations to the new declarative section.  Fix the loop to\n+\tproperly stop at the subprogram declaration for the\n+\tpostconditions procedure and exclude its body from being moved\n+\tto the new list of declarations to avoid freezing issues.\n+\t* exp_prag.adb (Expand_Attributes): Mark temporary created to\n+\tstore 'Old objects as storing a 'Old attribute.\n+\t* sem_ch6.adb (Find_What_Applies_To): Remove strange exception\n+\tto postconditions when traversing the scope stack.\n+\t* sem_prag.adb (Find_Related_Declaration_Or_Body): Use the newly\n+\tcreated Enclosing_HSS function to find the HSS for a potentially\n+\tnested statement.\n+\t* sem_util.adb, sem_util.ads (Declare_Indirect_Temp): Mark types\n+\tcreated to store 'Old objects as storing 'Old attributes.\n+\t(Enclosing_HSS): Created to find the enclosing handled sequence\n+\tof statements for a given statement.\n+\t* snames.ads-tmpl: Add multiple names to aid in the expansion of\n+\tfinalization and to control the evaluation of postconditions.\n+\tIncluding _finalization_controller, a new routine to centralize\n+\tfinalization actions and postcondition evaluation.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch5.adb (P_Loop_Parameter_Specification): Complain about\n+\tmissing -gnat2020 switch.\n+\t(P_Iterator_Specification): Likewise.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch4.adb (P_Aggregate_Or_Paren_Expr): Simplify with\n+\tAppend_New.\n+\n+2020-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Remove s-fatsfl$(objext)\n+\tand add s-valflt$(objext), s-vallfl$(objext), s-valllf$(objext).\n+\t* exp_attr.adb (Find_Fat_Info): Merge Short_Float and Float cases.\n+\t* exp_imgv.adb (Expand_Value_Attribute): Replace RE_Value_Real with\n+\tRE_Value_Long_Long_Float for fixed-point types and use appropriate\n+\tbase type for floating-point types.\n+\t* rtsfind.ads (RTU_Id): Remove System_Fat_IEEE_Long_Float,\n+\tSystem_Fat_IEEE_Short_Float and System_Val_Real, add System_Val_Flt,\n+\tSystem_Val_LFlt and System_Val_LLF.\n+\t(RE_Id): Remove RE_Attr_IEEE_Long, RE_Fat_IEEE_Long,\n+\tRE_Attr_IEEE_Short, RE_Fat_IEEE_Short, RE_Attr_Short_Float, add\n+\tRE_Value_Float, RE_Value_Long_Float, RE_Value_Long_Long_Float,\n+\t(RE_Unit_Table): Likewise.\n+\t* libgnat/a-ticoau.ads: Add with clause for Float_Aux and make the\n+\tpackage generic.\n+\t(Get): Change parameter types to Num.\n+\t(Put): Likewise.\n+\t(Gets): Likewise.\n+\t(Puts): Likewise.\n+\t* libgnat/a-ticoau.adb: Remove clause and renaming for Float_Aux.\n+\t(Get): Change parameter types to Num.\n+\t(Gets): Likewise.\n+\t(Put): Likewise.\n+\t(Puts): Likewise.  Add conversion to Long_Long_Float.\n+\t* libgnat/a-ticoio.adb: Remove with clause for Ada.Text_IO, add with\n+\tclause for Float_Aux, add with and use clauses for System.Val_Flt,\n+\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux and\n+\tComplex_Aux on Float, Long_Float, and Long_Long_Float.\n+\t(OK_Float): New boolean constant.\n+\t(OK_Long_Float): Likewise.\n+\t(Get): Call appropriate Get routine from auxiliary package.\n+\t(Get): Call appropriate Gets routine from auxiliary package.\n+\t(Put): Call appropriate Put routine from auxiliary package.\n+\t(Put): Call appropriate Puts routine from auxiliary package.\n+\t* libgnat/a-tideau.adb: Remove with and use clause for Float_Aux.\n+\t* libgnat/a-tifiau.adb: Likewise.\n+\t* libgnat/a-tifiio.adb: Add with and use clause for System.Val_LLF.\n+\tInstantiate Float_Aux on Long_Long_Float.\n+\t(Get): Adjust call to Get routine from auxiliary package.\n+\t(Get): Adjust call to Gets routine from auxiliary package.\n+\t(Put): Adjust call to Put routine from auxiliary package.\n+\t(Put): Adjust call to Puts routine from auxiliary package.\n+\t* libgnat/a-tifiio__128.adb: Likewise.\n+\t(Get): Likewise.\n+\t(Get): Likewise.\n+\t(Put): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-tiflau.ads: Make the package generic.\n+\t(Get): Change parameter type to Num.\n+\t(Put): Likewise.\n+\t(Gets): Likewise.\n+\t(Puts): Likewise.\n+\t* libgnat/a-tiflau.adb: Remove clauses for System.Val_Real.\n+\t(Get): Change parameter type to Num and call Scan routine.\n+\t(Gets): Likewise.\n+\t(Load_Real): Move to...\n+\t(Put): Change parameter type and add conversion to Long_Long_Float.\n+\t(Puts): Likewise.\n+\t* libgnat/a-tiflio.adb: Add with and use clauses for System.Val_Flt,\n+\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux on Float,\n+\tLong_Float and Long_Long_Float.\n+\t(OK_Float): New boolean constant.\n+\t(OK_Long_Float): Likewise.\n+\t(Get): Call appropriate Get routine from auxiliary package.\n+\t(Get): Call previous variant.\n+\t(Get): Call appropriate Gets routine from auxiliary package.\n+\t(Put): Call appropriate Put routine from auxiliary package.\n+\t(Put): Call previous variant.\n+\t(Put): Call appropriate Puts routine from auxiliary package.\n+\t* libgnat/a-tigeau.ads (Load_Real): New procedure.\n+\t* libgnat/a-tigeau.adb (Load_Real): ...here.\n+\t* libgnat/a-wtcoau.ads: Add with clause for Float_Aux and make the\n+\tpackage generic.\n+\t(Get): Change parameter types to Num.\n+\t(Put): Likewise.\n+\t(Gets): Likewise.\n+\t(Puts): Likewise.\n+\t* libgnat/a-wtcoau.adb: Remove clause and renaming for Float_Aux.\n+\t(Get): Change parameter types to Num.\n+\t(Gets): Likewise.\n+\t(Put): Likewise.\n+\t(Puts): Likewise.  Add conversion to Long_Long_Float.\n+\t* libgnat/a-wtcoio.ads: Remove use clause for Complex_Types and use\n+\tqualified names throughout accordingly.\n+\t* libgnat/a-wtcoio.adb: Remove clause for Ada.Unchecked_Conversion,\n+\tadd with clause for Float_Aux, add clauses for System.Val_Flt,\n+\tSystem.Val_LFlt and System.Val_LLF. Add clause for Complex_Types.\n+\tInstantiate Float_Aux and Complex_Aux on Float, Long_Float, and\n+\tLong_Long_Float.  Remove LLF subtype and TFT instantiation.\n+\t(OK_Float): New boolean constant.\n+\t(OK_Long_Float): Likewise.\n+\t(Get): Call appropriate Get routine from auxiliary package.\n+\t(Get): Call appropriate Gets routine from auxiliary package.\n+\t(Put): Call appropriate Put routine from auxiliary package.\n+\t(Put): Call appropriate Puts routine from auxiliary package.\n+\t* libgnat/a-wtdeau.adb: Remove with and use clause for Float_Aux.\n+\t* libgnat/a-wtfiau.adb: Likewise.\n+\t* libgnat/a-wtfiio.adb: Add with and use clause for System.Val_LLF.\n+\tInstantiate Float_Aux on Long_Long_Float.\n+\t(Get): Adjust call to Get routine from auxiliary package.\n+\t(Get): Adjust call to Gets routine from auxiliary package.\n+\t(Put): Adjust call to Put routine from auxiliary package.\n+\t(Put): Adjust call to Puts routine from auxiliary package.\n+\t* libgnat/a-wtfiio__128.adb: Likewise.\n+\t(Get): Likewise.\n+\t(Get): Likewise.\n+\t(Put): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtflau.ads: Make the package generic.\n+\t(Get): Change parameter type to Num.\n+\t(Put): Likewise.\n+\t(Gets): Likewise.\n+\t(Puts): Likewise.\n+\t* libgnat/a-wtflau.adb: Remove clauses for System.Val_Real.\n+\t(Get): Change parameter type to Num and call Scan routine. Set\n+\tPtr parameter lazily.\n+\t(Gets): Likewise.\n+\t(Load_Real): Move to...\n+\t(Put): Change parameter type and add conversion to Long_Long_Float.\n+\tBump buffer length to Max_Real_Image_Length.\n+\t(Puts): Likewise.\n+\t* libgnat/a-wtflio.adb: Add with and use clauses for System.Val_Flt,\n+\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux on Float,\n+\tLong_Float and Long_Long_Float.\n+\t(OK_Float): New boolean constant.\n+\t(OK_Long_Float): Likewise.\n+\t(Get): Call appropriate Get routine from auxiliary package.  Add\n+\tpragma Unsuppress (Range_Check) and manual validity check.\n+\t(Get): Call appropriate Gets routine from auxiliary package. Add\n+\tpragma Unsuppress (Range_Check) and manual validity check.\n+\t(Put): Call appropriate Put routine from auxiliary package.\n+\t(Put): Call appropriate Puts routine from auxiliary package.\n+\t* libgnat/a-wtgeau.ads (Load_Real): New procedure.\n+\t* libgnat/a-wtgeau.adb (Load_Real): ...here.\n+\t* libgnat/a-ztcoau.ads: Add with clause for Float_Aux and make the\n+\tpackage generic.\n+\t(Get): Change parameter types to Num.\n+\t(Put): Likewise.\n+\t(Gets): Likewise.\n+\t(Puts): Likewise.\n+\t* libgnat/a-ztcoau.adb: Remove clause and renaming for Float_Aux.\n+\t(Get): Change parameter types to Num.\n+\t(Gets): Likewise.\n+\t(Put): Likewise.\n+\t(Puts): Likewise.  Add conversion to Long_Long_Float.\n+\t* libgnat/a-ztcoio.ads: Remove use clause for Complex_Types and use\n+\tqualified names throughout accordingly.\n+\t* libgnat/a-ztcoio.adb: Remove clause for Ada.Unchecked_Conversion,\n+\tadd with clause for Float_Aux, add clauses for System.Val_Flt,\n+\tSystem.Val_LFlt and System.Val_LLF. Add clause for Complex_Types.\n+\tInstantiate Float_Aux and Complex_Aux on Float, Long_Float, and\n+\tLong_Long_Float. Remove LLF subtype and TFT instantiation.\n+\t(OK_Float): New boolean constant.\n+\t(OK_Long_Float): Likewise.\n+\t(Get): Call appropriate Get routine from auxiliary package.\n+\t(Get): Call appropriate Gets routine from auxiliary package.\n+\t(Put): Call appropriate Put routine from auxiliary package.\n+\t(Put): Call appropriate Puts routine from auxiliary package.\n+\t* libgnat/a-ztdeau.adb: Remove with and use clause for Float_Aux.\n+\t* libgnat/a-ztfiau.adb: Likewise.\n+\t* libgnat/a-ztfiio.adb: Add with and use clause for System.Val_LLF.\n+\tInstantiate Float_Aux on Long_Long_Float.\n+\t(Get): Adjust call to Get routine from auxiliary package.\n+\t(Get): Adjust call to Gets routine from auxiliary package.\n+\t(Put): Adjust call to Put routine from auxiliary package.\n+\t(Put): Adjust call to Puts routine from auxiliary package.\n+\t* libgnat/a-ztfiio__128.adb: Likewise.\n+\t(Get): Likewise.\n+\t(Get): Likewise.\n+\t(Put): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztflau.ads: Make the package generic.\n+\t(Get): Change parameter type to Num.\n+\t(Put): Likewise.\n+\t(Gets): Likewise.\n+\t(Puts): Likewise.\n+\t* libgnat/a-ztflau.adb: Remove clauses for System.Val_Real.\n+\t(Get): Change parameter type to Num and call Scan routine. Set\n+\tPtr parameter lazily.\n+\t(Gets): Likewise.\n+\t(Load_Real): Move to...\n+\t(Put): Change parameter type and add conversion to Long_Long_Float.\n+\tBump buffer length to Max_Real_Image_Length.\n+\t(Puts): Likewise.\n+\t* libgnat/a-ztflio.adb: Add with and use clauses for System.Val_Flt,\n+\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux on Float,\n+\tLong_Float and Long_Long_Float.\n+\t(OK_Float): New boolean constant.\n+\t(OK_Long_Float): Likewise.\n+\t(Get): Call appropriate Get routine from auxiliary package.  Add\n+\tpragma Unsuppress (Range_Check) and manual validity check.\n+\t(Get): Call appropriate Gets routine from auxiliary package. Add\n+\tpragma Unsuppress (Range_Check) and manual validity check.\n+\t(Put): Call appropriate Put routine from auxiliary package.\n+\t(Put): Call appropriate Puts routine from auxiliary package.\n+\t* libgnat/a-ztgeau.ads (Load_Real): New procedure.\n+\t* libgnat/a-ztgeau.adb (Load_Real): ...here.\n+\t* libgnat/s-fatsfl.ads: Delete.\n+\t* libgnat/s-valflt.ads: New package.\n+\t* libgnat/s-vallfl.ads: Likewise.\n+\t* libgnat/s-valllf.ads: Likewise.\n+\t* libgnat/s-valrea.ads: Make generic. Add assertions, defensive\n+\tcode and clarify intent.\n+\t(Scan_Real): Change parameter type to Num.\n+\t(Value_Real): Likewise.\n+\t* libgnat/s-valrea.adb: Instantiate Value_R on Uns.\n+\t(Integer_to_Real): Change parameter and result to Num.\n+\tCall Float_Control.Reset only if the mantissa is 64 bits.  Use\n+\ta divide to compute the final value if the scale is negative.\n+\t(Scan_Real): Change result to Num.\n+\t(Value_Real): Likewise.\n+\t* libgnat/s-valuer.adb: Add assertions, defensive code and\n+\tclarify intent.\n+\t(F_Limit): Delete.\n+\t(I_Limit): Likewise.\n+\t(Precision_Limit): Always use the integer limit.\n+\t* libgnat/s-fatgen.adb: Add pragma Annotate.\n+\n+2020-12-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-tiflio.adb: Mark body not in SPARK.\n+\t* libgnat/a-tiflio.ads: Mark spec in SPARK.\n+\n+2020-12-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Build_Procedure_Body_Form): Adjust, the\n+\tdeclaration of the procedure form is now insert before the\n+\toriginal function body rather than after.\n+\t(Expand_N_Subprogram_Declaration): Deal with private types whose\n+\tfull views are arrays.\n+\t* exp_unst.adb (Unnest_Subprogram): Deal with private types.\n+\t(Needs_Fat_Pointer): Code cleanup.\n+\t* freeze.adb (Freeze_Subprogram): Ditto.\n+\t* exp_util.adb (Build_Procedure_Form): Insert the procedure form\n+\tdecl before and not after.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build missing\n+\tspec when needed for Transform_Function_Array.\n+\t* sem_util.adb (Get_Fullest_View): Deal with null entity.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Simplify code\n+\tfor aspect Priority.\n+\t* sem_prag.adb (Analyze_Pragma): Simplify code for pragma\n+\tPriority.\n+\n+2020-12-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch7.adb (Reset_Scopes_To_Block_Elab_Proc): Do not crash on\n+\ta block with no Identifier. Code cleanups.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Reuse existing code for\n+\tattribute Value when analyzing attributes Wide_Value and\n+\tWide_Wide_Value.\n+\n+2020-12-15  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-diopit.adb (Find): Fix possible infinite recursion\n+\tin Find iterator.\n+\t* libgnat/g-diopit.ads (Find): Update comments accordingly.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tCallable and Terminated attributes; refactor calls to Set_Etype\n+\toccurring in both THEN and ELSE branches of an IF statement for\n+\tattribute Storage_Size.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tWide_Wide_Width, Wide_Width and Width attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tPred and Succ attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tSize, Object_Size and Value_Size attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Consistently call\n+\tCheck_Fixed_Point_Type before checking the number of attribute\n+\texpressions (like it is done for floating point types); reuse\n+\tCheck_Fixed_Point_Type_0.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_disp.adb (Make_Tags): Remove call to UI_To_Int.\n+\t* sem_attr.adb (Check_Array_Type): Likewise; also, refine type\n+\tof a local variable.\n+\t(Analyze_Attribute): Likewise.\n+\t(Get_Enclosing_Object): Likewise.\n+\t* sem_util.adb (Get_Enum_Lit_From_Pos): Likewise.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tFirst_Bit/Last_Bit and Position attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tMachine_Radix and Mantissa attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tMachine_Overflows and Machine_Rounds attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tLarge, Small, Safe_Large and Safe_Small attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tEpsilon, Model_Epsilon, Model_Small, Safe_First and Safe_Las\n+\tattributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tEmax, Machine_Emax, Machine_Emin, Machine_Mantissa, Model_Emin,\n+\tModel_Mantissa and Safe_Emax attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tDenorm and Signed_Zeros attributes.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tAdjacent, Copy_Sign and Remainder attributes.\n+\t(Check_Floating_Point_Type_2): Fix style in comment.\n+\n+2020-12-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tCompose, Leading_Part and Scaling attributes.\n+\n 2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute): Resolve second parameter of"}, {"sha": "716fb6f205630b0404fb7acc2e79fa7d2aad9aa5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,25 @@\n+2020-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.c (in_template_function): Inspect cfun->decl instead of\n+\tcurrent_function_decl.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc: Replace stubs with implementation.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Make-lang.in (CXX_AND_OBJCXX_OBJS): Add mapper-client &\n+\tmapper-resolver.\n+\t* mapper-client.h: New.\n+\t* mapper-client.cc: New.\n+\t* mapper-resolver.cc: New.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (do_namespace_alias): Set originating module\n+\tbefore pushing.\n+\n 2020-12-11  Jason Merrill  <jason@redhat.com>\n \n \tPR libstdc++/97600"}, {"sha": "0f55436f50ba824d789edd62e7cc86a284eb4750", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,10 @@\n+2020-12-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/98277\n+\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Move setting of\n+\tDECL_INITIAL for manifest constants to ...\n+\t(get_symbol_decl): ... here.\n+\n 2020-11-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-target.def (d_minfo_section): New hook."}, {"sha": "5c6f7335d9e9cbd4a70febc1fefb43c367cabdef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,13 @@\n+2020-12-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/90207\n+\t* invoke.texi: Document -fdebug-aux-vars.\n+\t* lang.opt: Add -fdebug-aux-vars.\n+\t* trans.c (MAX_PREFIX_LEN): New macro.\n+\t(create_var_debug_raw): New function.\n+\t(gfc_create_var_np): Call create_var_debug_raw if\n+\tflag_debug_aux_vars is set.\n+\n 2020-12-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* dump-parse-tree.c (show_array_ref): Also show coarrays."}, {"sha": "984299c6c4e0325bc10355b178898b06661feefe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,66 @@\n+2020-12-15  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-52830.C: Remove dg-ice.\n+\n+2020-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96094\n+\t* gcc.dg/tree-ssa/pr96094.c: New test.\n+\n+2020-12-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/98277\n+\t* gdc.dg/pr98277.d: New test.\n+\n+2020-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-requires23.C: New test.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/mod-decl-0-2a.C: New.\n+\t* g++.dg/modules/mod-decl-0.C: New.\n+\t* g++.dg/modules/mod-decl-1.C: New.\n+\t* g++.dg/modules/mod-decl-2_a.C: New.\n+\t* g++.dg/modules/mod-decl-2_b.C: New.\n+\t* g++.dg/modules/mod-decl-2_c.C: New.\n+\t* g++.dg/modules/mod-decl-3.C: New.\n+\t* g++.dg/modules/mod-decl-5_a.C: New.\n+\t* g++.dg/modules/mod-decl-5_b.C: New.\n+\n+2020-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98274\n+\t* gcc.target/i386/pr98274.c: New test.\n+\n+2020-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/x86-64-v2.c: Don't expect\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 to be defined with -m32.\n+\t* gcc.target/i386/x86-64-v2-other.c: New test.\n+\t* gcc.target/i386/x86-64-v2-msabi.c: New test.\n+\t* gcc.target/i386/x86-64-v3.c: Fix a comment pasto.  Don't expect\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 to be defined with -m32.\n+\t* gcc.target/i386/x86-64-v3-other.c: New test.\n+\t* gcc.target/i386/x86-64-v3-msabi.c: New test.\n+\t* gcc.target/i386/x86-64-v4.c:Don't expect\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 to be defined with -m32.\n+\t* gcc.target/i386/x86-64-v4-other.c: New test.\n+\t* gcc.target/i386/x86-64-v4-msabi.c: New test.\n+\n+2020-12-15  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* gcc.target/xtensa/pr98285.c: New test.\n+\n+2020-12-15  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go.test/go-test.exp (errchk): Retain any characters at the end\n+\tof the comment.\n+\n+2020-12-15  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr78102.c: Adjust testcase.\n+\n 2020-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/98166"}, {"sha": "ea3d1613a89ea9b5cc5b3a96fde796714bd2c4a1", "filename": "libcody/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/libcody%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/libcody%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,61 @@\n+2020-12-15  Marek Polacek  <polacek@redhat.com>\n+\n+\t* buffer.cc (MessageBuffer::Lex): Remove unused variable.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Makefile.in: Disable some flags.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config.m4: Avoid var+=...\n+\t* configure: Rebuilt\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config.m4: Avoid non-dash idiom\n+\t* configure: Rebuilt.\n+\n+2020-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* configure.ac: New.\n+\t* CMakeLists.txt: New.\n+\t* CODING.md: New.\n+\t* CONTRIB.md: New.\n+\t* LICENSE: New.\n+\t* LICENSE.gcc: New.\n+\t* Makefile.in: New.\n+\t* Makesub.in: New.\n+\t* README.md: New.\n+\t* buffer.cc: New.\n+\t* build-aux/config.guess: New.\n+\t* build-aux/config.sub: New.\n+\t* build-aux/install-sh: New.\n+\t* client.cc: New.\n+\t* cmake/libcody-config-ix.cmake\n+\t* cody.hh: New.\n+\t* config.h.in: New.\n+\t* config.m4: New.\n+\t* configure: New.\n+\t* configure.ac: New.\n+\t* dox.cfg.in: New.\n+\t* fatal.cc: New.\n+\t* gdbinit.in: New.\n+\t* internal.hh: New.\n+\t* netclient.cc: New.\n+\t* netserver.cc: New.\n+\t* packet.cc: New.\n+\t* resolver.cc: New.\n+\t* server.cc: New.\n+\t* tests/01-serialize/connect.cc: New.\n+\t* tests/01-serialize/decoder.cc: New.\n+\t* tests/01-serialize/encoder.cc: New.\n+\t* tests/02-comms/client-1.cc: New.\n+\t* tests/02-comms/pivot-1.cc: New.\n+\t* tests/02-comms/server-1.cc: New.\n+\t* tests/Makesub.in: New.\n+\t* tests/jouster: New.\n+\n \f\n Copyright (C) 2020 Free Software Foundation, Inc.\n "}, {"sha": "a058b79c3fb4b19dd872582acd78a3ea680dafe8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d865119a1077081de3d4ea9d2caf641c8dcb7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e9d865119a1077081de3d4ea9d2caf641c8dcb7", "patch": "@@ -1,3 +1,68 @@\n+2020-12-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tRevert:\n+\t2020-12-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98108\n+\t* include/std/iostream (__ioinit): Add init_priority attribute.\n+\n+2020-12-15  Keith Packard  <keithp@keithp.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_CSTDIO): Allow \"stdio_pure\"\n+\toption and define _GLIBCXX_USE_PURE_STDIO when it is used. Also\n+\tadd \"stdio_posix\" option as an alias for \"stdio\".\n+\t* config/io/basic_file_stdio.cc [_GLIBCXX_USE_PURE_STDIO]: Only\n+\tuse defined stdio entry points for all I/O operations, without\n+\tdirect calls to underlying POSIX functions.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+2020-12-15  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\t* testsuite/27_io/rvalue_streams.cc: Run the extraction to a char*\n+\tfor C++17 and lower only.\n+\n+2020-12-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/25_algorithms/lexicographical_compare/deque_iterators/1.cc:\n+\tAdd dg-timeout-factor directive.\n+\t* testsuite/ext/pb_ds/regression/tree_map_rand_debug.cc:\n+\tIncrease timeout factor from 2.0 to 3.0.\n+\t* testsuite/ext/pb_ds/regression/tree_set_rand_debug.cc:\n+\tLikewise.\n+\t* testsuite/lib/libstdc++.exp (check_effective_target_debug-mode):\n+\tDefine \"debug-mode\" as an effective-target keyword.\n+\n+2020-12-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (__glibcxx_assert_1): Define as empty\n+\tfor C++11.\n+\n+2020-12-15  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\t* testsuite/22_locale/locale/cons/5.cc: Add missing directives\n+\tfor required locales.\n+\n+2020-12-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (incrementable_traits<Tp>):\n+\tRemove workaround for PR c++/78173.\n+\n+2020-12-15  Vladimir Vishnevsky  <vv.os.swe@gmail.com>\n+\n+\t* configure.ac: Skip AC_LIBTOOL_DLOPEN check if avr-libc is used.\n+\t* configure: Regenerate.\n+\n+2020-12-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98108\n+\t* include/std/iostream (__ioinit): Add init_priority attribute.\n+\n+2020-12-15  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/codecvt.xml: Update link to Unicode-HOWTO.\n+\t* doc/html/manual/facets.html: Regenerate.\n+\n 2020-12-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* testsuite/23_containers/array/debug/back1_neg.cc: Target c++14 because assertion"}]}