{"sha": "976d5a222fc23279e239ad926472c7810869e494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2ZDVhMjIyZmMyMzI3OWUyMzlhZDkyNjQ3MmM3ODEwODY5ZTQ5NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2014-07-30T15:02:59Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2014-07-30T15:02:59Z"}, "message": "re PR c/59855 (Support sparse-style __attribute__((designated_init)) on structures, requiring designated initializers)\n\n2014-07-30  Tom Tromey  <tromey@redhat.com>\n\n\tPR c/59855\n\t* doc/invoke.texi (Warning Options): Document -Wdesignated-init.\n\t* doc/extend.texi (Type Attributes): Document designated_init\n\tattribute.\n\n2014-07-30  Tom Tromey  <tromey@redhat.com>\n\n\tPR c/59855\n\t* c.opt (Wdesignated-init): New option.\n\t* c-common.c (c_common_attribute_table): Add \"designated_init\".\n\t(handle_designated_init): New function.\n\n2014-07-30  Tom Tromey  <tromey@redhat.com>\n\n\t* c-typeck.c (struct constructor_stack) <designator_depth>: New\n\tfield.\n\t(really_start_incremental_init, push_init_level): Initialize\n\tdesignator_depth.\n\t(pop_init_level): Set global designator_depth.\n\t(process_init_element): Check for designated_init attribute.\n\nFrom-SVN: r213293", "tree": {"sha": "45b34e40286f6fd87f049a30ca4443da457a0501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45b34e40286f6fd87f049a30ca4443da457a0501"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/976d5a222fc23279e239ad926472c7810869e494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976d5a222fc23279e239ad926472c7810869e494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976d5a222fc23279e239ad926472c7810869e494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976d5a222fc23279e239ad926472c7810869e494/comments", "author": null, "committer": null, "parents": [{"sha": "41c79d60e56ed6c48f2b52ff9e9b750420cf9cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c79d60e56ed6c48f2b52ff9e9b750420cf9cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c79d60e56ed6c48f2b52ff9e9b750420cf9cbf"}], "stats": {"total": 191, "additions": 189, "deletions": 2}, "files": [{"sha": "888217de1bf7bad9218cf11adec9abf748cef7fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -1,3 +1,10 @@\n+2014-07-30  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c/59855\n+\t* doc/invoke.texi (Warning Options): Document -Wdesignated-init.\n+\t* doc/extend.texi (Type Attributes): Document designated_init\n+\tattribute.\n+\n 2014-07-30  Roman Gareev  <gareevroman@gmail.com>\n \n \t* graphite-isl-ast-to-gimple.c:"}, {"sha": "31d10b070c2cf508fdc0d548dfc3b384e4e1e9b1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -1,3 +1,10 @@\n+2014-07-30  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c/59855\n+\t* c.opt (Wdesignated-init): New option.\n+\t* c-common.c (c_common_attribute_table): Add \"designated_init\".\n+\t(handle_designated_init): New function.\n+\n 2014-07-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/57653"}, {"sha": "79d0f2f214ff00a50021a2e4ac349a1409a4ec70", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -380,6 +380,7 @@ static tree handle_omp_declare_simd_attribute (tree *, tree, tree, int,\n \t\t\t\t\t       bool *);\n static tree handle_omp_declare_target_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n+static tree handle_designated_init_attribute (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, int, tree *);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -773,6 +774,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_alloc_align_attribute, false },\n   { \"assume_aligned\",\t      1, 2, false, true, true,\n \t\t\t      handle_assume_aligned_attribute, false },\n+  { \"designated_init\",        0, 0, false, true, false,\n+\t\t\t      handle_designated_init_attribute, false },\n   { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n@@ -9275,6 +9278,21 @@ handle_returns_nonnull_attribute (tree *node, tree, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"designated_init\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_designated_init_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t  bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != RECORD_TYPE)\n+    {\n+      error (\"%qE attribute is only valid on %<struct%> type\", name);\n+      *no_add_attrs = true;\n+    }\n+  return NULL_TREE;\n+}\n+\n \f\n /* Check for valid arguments being passed to a function with FNTYPE.\n    There are NARGS arguments in the array ARGARRAY.  */"}, {"sha": "ac3eb440372d290860ffde53d39921bdf3b401f0", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -359,6 +359,10 @@ Wdeprecated\n C C++ ObjC ObjC++ Var(warn_deprecated) Init(1) Warning\n Warn if a deprecated compiler feature, class, method, or field is used\n \n+Wdesignated-init\n+C ObjC Var(warn_designated_init) Init(1) Warning\n+Warn about positional initialization of structs requiring designated initializers\n+\n Wdiscarded-qualifiers\n C ObjC Var(warn_discarded_qualifiers) Init(1) Warning\n Warn if type qualifiers on pointers are discarded"}, {"sha": "b5e7a177672262a211f359dc8d2a448082907115", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -1,3 +1,12 @@\n+2014-07-30  Tom Tromey  <tromey@redhat.com>\n+\n+\t* c-typeck.c (struct constructor_stack) <designator_depth>: New\n+\tfield.\n+\t(really_start_incremental_init, push_init_level): Initialize\n+\tdesignator_depth.\n+\t(pop_init_level): Set global designator_depth.\n+\t(process_init_element): Check for designated_init attribute.\n+\n 2014-07-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61852"}, {"sha": "a93893319b9a328a6c1a6c3200cfb2180ef4d2d1", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -6956,6 +6956,7 @@ struct constructor_stack\n   char outer;\n   char incremental;\n   char designated;\n+  int designator_depth;\n };\n \n static struct constructor_stack *constructor_stack;\n@@ -7127,6 +7128,7 @@ really_start_incremental_init (tree type)\n   p->outer = 0;\n   p->incremental = constructor_incremental;\n   p->designated = constructor_designated;\n+  p->designator_depth = designator_depth;\n   p->next = 0;\n   constructor_stack = p;\n \n@@ -7276,6 +7278,7 @@ push_init_level (location_t loc, int implicit,\n   p->outer = 0;\n   p->incremental = constructor_incremental;\n   p->designated = constructor_designated;\n+  p->designator_depth = designator_depth;\n   p->next = constructor_stack;\n   p->range_stack = 0;\n   constructor_stack = p;\n@@ -7583,6 +7586,7 @@ pop_init_level (location_t loc, int implicit,\n   constructor_erroneous = p->erroneous;\n   constructor_incremental = p->incremental;\n   constructor_designated = p->designated;\n+  designator_depth = p->designator_depth;\n   constructor_pending_elts = p->pending_elts;\n   constructor_depth = p->depth;\n   if (!p->implicit)\n@@ -8652,6 +8656,15 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n   if (constructor_type == 0)\n     return;\n \n+  if (!implicit && warn_designated_init && !was_designated\n+      && TREE_CODE (constructor_type) == RECORD_TYPE\n+      && lookup_attribute (\"designated_init\",\n+\t\t\t   TYPE_ATTRIBUTES (constructor_type)))\n+    warning_init (loc,\n+\t\t  OPT_Wdesignated_init,\n+\t\t  \"positional initialization of field \"\n+\t\t  \"in %<struct%> declared with %<designated_init%> attribute\");\n+\n   /* If we've exhausted any levels that didn't have braces,\n      pop them now.  */\n   while (constructor_stack->implicit)"}, {"sha": "591aaeba3e3d1dfb3c16a7d0c90cfdfeaa989639", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -5890,6 +5890,17 @@ and caught in another, the class must have default visibility.\n Otherwise the two shared objects are unable to use the same\n typeinfo node and exception handling will break.\n \n+@item designated_init\n+This attribute may only be applied to structure types.  It indicates\n+that any initialization of an object of this type must use designated\n+initializers rather than positional initializers.  The intent of this\n+attribute is to allow the programmer to indicate that a structure's\n+layout may change, and that therefore relying on positional\n+initialization will result in future breakage.\n+\n+GCC emits warnings based on this attribute by default; use\n+@option{-Wno-designated-init} to suppress them.\n+\n @end table\n \n To specify multiple attributes, separate them by commas within the"}, {"sha": "5dfa5868108cbbc1461935479b5d280dfdc07ad9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -244,8 +244,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  @gol\n -Wconversion -Wcoverage-mismatch -Wdate-time -Wdelete-incomplete -Wno-cpp  @gol\n--Wno-deprecated -Wno-deprecated-declarations -Wdisabled-optimization  @gol\n--Wno-discarded-qualifiers @gol\n+-Wno-deprecated -Wno-deprecated-declarations -Wno-designated-init @gol\n+-Wdisabled-optimization -Wno-discarded-qualifiers @gol\n -Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare @gol\n -Wno-endif-labels -Werror  -Werror=* @gol\n -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n@@ -5180,6 +5180,12 @@ a suffix.  When used together with @option{-Wsystem-headers} it\n warns about such constants in system header files.  This can be useful\n when preparing code to use with the @code{FLOAT_CONST_DECIMAL64} pragma\n from the decimal floating-point extension to C99.\n+\n+@item -Wno-designated-init @r{(C and Objective-C only)}\n+Suppress warnings when a positional initializer is used to initialize\n+a structure that has been marked with the @code{designated_init}\n+attribute.\n+\n @end table\n \n @node Debugging Options"}, {"sha": "a334ad71f382cae6f6de3df3073811add3f0da10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -1,3 +1,8 @@\n+2014-07-30  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c/59855\n+\t* gcc.dg/Wdesignated-init.c: New file.\n+\n 2014-07-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/ipa/devirt-34.C: New testcase."}, {"sha": "b9ca572206ccfd959d1d3ad5a3473f2f0630e66d", "filename": "gcc/testsuite/gcc.dg/Wdesignated-init.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976d5a222fc23279e239ad926472c7810869e494/gcc%2Ftestsuite%2Fgcc.dg%2FWdesignated-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976d5a222fc23279e239ad926472c7810869e494/gcc%2Ftestsuite%2Fgcc.dg%2FWdesignated-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWdesignated-init.c?ref=976d5a222fc23279e239ad926472c7810869e494", "patch": "@@ -0,0 +1,107 @@\n+/* PR c/59855 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef int vvv  __attribute__((designated_init)); /* { dg-error \"only valid\" } */\n+\n+union U {\n+  int a;\n+  double b;\n+} __attribute__((designated_init)); /* { dg-error \"only valid\" } */\n+\n+enum E { ONE, TWO }  __attribute__((designated_init)); /* { dg-error \"only valid\" } */\n+\n+struct Pok {\n+  int x;\n+  int y;\n+};\n+\n+struct Des {\n+  int x;\n+  int y;\n+} __attribute__ ((designated_init));\n+\n+struct Des d1 = { 5, 5 }; /* { dg-warning \"(positional|near initialization)\" } */\n+struct Des d2 = { .x = 5, .y = 5 };\n+struct Des d3 = { .x = 5, 5 }; /* { dg-warning \"(positional|near initialization)\" } */\n+\n+struct Des fd1 (void)\n+{\n+  return (struct Des) { 5, 5 }; /* { dg-warning \"(positional|near initialization)\" } */\n+}\n+\n+struct Des fd2 (void)\n+{\n+  return (struct Des) { .x = 5, .y = 5 };\n+}\n+\n+struct Des fd3 (void)\n+{\n+  return (struct Des) { .x = 5, 5 }; /* { dg-warning \"(positional|near initialization)\" } */\n+}\n+\n+struct Wrap {\n+  struct Pok p;\n+  struct Des d;\n+} __attribute__ ((designated_init));\n+\n+struct Wrap w1 = { { 0, 1 }, { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+struct Wrap w2 = { .p = { 0, 1 }, { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+struct Wrap w3 = { .p = { 0, 1 }, .d = { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+struct Wrap w4 = { { 0, 1 }, .d = { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+struct Wrap w5 = { .p = { 0, 1 }, .d = { .x = 2, .y = 3} };\n+\n+struct Wrap w6 = { { 0, 1 }, .d.x = 2, .d.y = 3 }; /* { dg-warning \"(positional|near initialization)\" } */\n+struct Wrap w7 = { .p = { 0, 1 }, .d.x = 2, .d.y = 3 };\n+struct Wrap w8 = { .p = { 0, 1 }, .d = { 2, 0 }, .d.y = 3 }; /* { dg-warning \"(positional|near initialization)\" } */\n+struct Wrap w9 = { .p = { 0, 1 }, .d = { .x = 2 }, .d.y = 3 };\n+\n+struct Wrap fw1 (void)\n+{\n+  return (struct Wrap) { { 0, 1 }, { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+};\n+\n+struct Wrap fw2 (void)\n+{\n+  return (struct Wrap) { .p = { 0, 1 }, { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+}\n+\n+struct Wrap fw3 (void)\n+{\n+  return (struct Wrap) { .p = { 0, 1 }, .d = { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+}\n+\n+struct Wrap fw4 (void)\n+{\n+  return (struct Wrap) { { 0, 1 }, .d = { 2, 3} }; /* { dg-warning \"(positional|near initialization)\" } */\n+}\n+\n+struct Wrap fw5 (void)\n+{\n+  return (struct Wrap) { .p = { 0, 1 }, .d = { .x = 2, .y = 3} };\n+}\n+\n+struct Wrap fw6 (void)\n+{\n+  return (struct Wrap) { { 0, 1 }, .d.x = 2, .d.y = 3 }; /* { dg-warning \"(positional|near initialization)\" } */\n+}\n+\n+struct Wrap fw7 (void)\n+{\n+  return (struct Wrap) { .p = { 0, 1 }, .d.x = 2, .d.y = 3 };\n+}\n+\n+struct Wrap fw8 (void)\n+{\n+  return (struct Wrap) { .p = { 0, 1 }, .d = { 2, 0 }, .d.y = 3 }; /* { dg-warning \"(positional|near initialization)\" } */\n+}\n+\n+struct Wrap fw9 (void)\n+{\n+  return (struct Wrap) { .p = { 0, 1 }, .d = { .x = 2 }, .d.y = 3 };\n+}\n+\n+struct Des da[] = {\n+  { .x = 1, .y = 2 },\n+  { 5, 5 } /* { dg-warning \"(positional|near initialization)\" } */\n+};"}]}