{"sha": "5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4YzJlYjE3ZTBlYjIzN2ZlODk0NThjYWFkY2I5MzVmYjllMjBmZg==", "commit": {"author": {"name": "Zdenek Sojka", "email": "zsojka@seznam.cz", "date": "2016-04-05T16:58:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-05T16:58:50Z"}, "message": "re PR tree-optimization/70509 (wrong code with extract from a v64qi)\n\n\tPR tree-optimization/70509\n\t* tree-ssa-forwprop.c (simplify_bitfield_ref): Use bitsize_int instead\n\tof the vector base type for index.\n\n\t* gcc.target/i386/avx512bw-pr70509.c: New test.\n\nFrom-SVN: r234754", "tree": {"sha": "901ac968cac4e3136dab48d308c51cda3f90056b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/901ac968cac4e3136dab48d308c51cda3f90056b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/comments", "author": {"login": "zsojka", "id": 11824660, "node_id": "MDQ6VXNlcjExODI0NjYw", "avatar_url": "https://avatars.githubusercontent.com/u/11824660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zsojka", "html_url": "https://github.com/zsojka", "followers_url": "https://api.github.com/users/zsojka/followers", "following_url": "https://api.github.com/users/zsojka/following{/other_user}", "gists_url": "https://api.github.com/users/zsojka/gists{/gist_id}", "starred_url": "https://api.github.com/users/zsojka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zsojka/subscriptions", "organizations_url": "https://api.github.com/users/zsojka/orgs", "repos_url": "https://api.github.com/users/zsojka/repos", "events_url": "https://api.github.com/users/zsojka/events{/privacy}", "received_events_url": "https://api.github.com/users/zsojka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0daf32d0cd8c1ddac7f347058ea42caf15afd96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0daf32d0cd8c1ddac7f347058ea42caf15afd96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0daf32d0cd8c1ddac7f347058ea42caf15afd96"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "c2a26d5ee78cd6a791a3945de7e66d956733d8a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "patch": "@@ -1,3 +1,9 @@\n+2016-04-05  Zdenek Sojka  <zsojka@seznam.cz>\n+\n+\tPR tree-optimization/70509\n+\t* tree-ssa-forwprop.c (simplify_bitfield_ref): Use bitsize_int instead\n+\tof the vector base type for index.\n+\n 2016-04-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/70510"}, {"sha": "92ea4a51b23124c1196eb53e3cc88039f00e05fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "patch": "@@ -1,3 +1,8 @@\n+2016-04-05  Zdenek Sojka  <zsojka@seznam.cz>\n+\n+\tPR tree-optimization/70509\n+\t* gcc.target/i386/avx512bw-pr70509.c: New test.\n+\n 2016-04-05  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/70452"}, {"sha": "d7bd659f73ad52daf67c0f94d05d73c70cab1e7b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr70509.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70509.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70509.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70509.c?ref=5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "patch": "@@ -0,0 +1,26 @@\n+/* PR tree-optimization/70509 */\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512BW\n+#include \"avx512f-helper.h\"\n+\n+typedef char V __attribute__ ((vector_size (64)));\n+\n+int __attribute__ ((noinline, noclone))\n+foo (V u, V v)\n+{\n+  u /= v[0x20];\n+  return u[0];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int x = foo ((V) { 9 }, (V) { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t3 });\n+  if (x != 3)\n+    abort ();\n+}"}, {"sha": "c40f9e20d22cb1ce5da5ba2008230b07fac63701", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8c2eb17e0eb237fe89458caadcb935fb9e20ff/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=5e8c2eb17e0eb237fe89458caadcb935fb9e20ff", "patch": "@@ -1773,7 +1773,7 @@ simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n \n   if (code == VEC_PERM_EXPR)\n     {\n-      tree p, m, index, tem;\n+      tree p, m, tem;\n       unsigned nelts;\n       m = gimple_assign_rhs3 (def_stmt);\n       if (TREE_CODE (m) != VECTOR_CST)\n@@ -1790,9 +1790,8 @@ simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n \t  p = gimple_assign_rhs2 (def_stmt);\n \t  idx -= nelts;\n \t}\n-      index = build_int_cst (TREE_TYPE (TREE_TYPE (m)), idx * size);\n       tem = build3 (BIT_FIELD_REF, TREE_TYPE (op),\n-\t\t    unshare_expr (p), op1, index);\n+\t\t    unshare_expr (p), op1, bitsize_int (idx * size));\n       gimple_assign_set_rhs1 (stmt, tem);\n       fold_stmt (gsi);\n       update_stmt (gsi_stmt (*gsi));"}]}