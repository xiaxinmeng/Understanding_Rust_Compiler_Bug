{"sha": "36349f8be4d205674b7ac3a4711ffdf2e2220792", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzNDlmOGJlNGQyMDU2NzRiN2FjM2E0NzExZmZkZjJlMjIyMDc5Mg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1999-08-25T18:01:48Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-08-25T18:01:48Z"}, "message": "sbitmap.h (sbitmap_intersection_of_succs): Add prototype.\n\n\nWed Aug 25 13:55:47 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n\n\t* sbitmap.h (sbitmap_intersection_of_succs): Add prototype.\n\t(sbitmap_intersection_of_preds, sbitmap_union_of_succs,\n\tsbitmap_union_of_preds): Add prototypes.\n\t* sbitmap.c (sbitmap_intersection_of_succs): New function to compute\n\tthe intersection of successors with the new flow graph structures.\n\t(sbitmap_intersection_of_preds): New function to compute the\n\tintersection of predecessors with the new flow graph structures.\n\t(sbitmap_union_of_succs): New function to compute the union of\n\tsuccessors with the new flow graph structures.\n\t(sbitmap_union_of_preds): New function to compute the union of\n\tpredecessors with the new flow graph structures.\n\t* gcse.c (compute_rdm, compute_available): Use new sbitmap routines.\n\t(expr_reaches_here_p): Use edge and basic_block structures instead\n\tof s_preds and s_succs.\n\t(compute_cprop_avinout): Use new sbitmap routines.\n\t(pre_expr_reaches_here_p): Use edge and basic_block structures instead\n\tof s_preds and s_succs.\n\t* flow.c (compute_flow_dominators): Compute dominators using\n\tedges and basic blocks instead of s_preds and s_succs.\n\nFrom-SVN: r28866", "tree": {"sha": "ba955e0fe6c71fda70442293df272f976fb43e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba955e0fe6c71fda70442293df272f976fb43e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36349f8be4d205674b7ac3a4711ffdf2e2220792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36349f8be4d205674b7ac3a4711ffdf2e2220792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36349f8be4d205674b7ac3a4711ffdf2e2220792", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36349f8be4d205674b7ac3a4711ffdf2e2220792/comments", "author": null, "committer": null, "parents": [{"sha": "3d31bc7f586d9d4980995289e5057beed1a8227a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d31bc7f586d9d4980995289e5057beed1a8227a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d31bc7f586d9d4980995289e5057beed1a8227a"}], "stats": {"total": 257, "additions": 245, "deletions": 12}, "files": [{"sha": "7267f064574e85c7047453c53a2bfb19a06df459", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36349f8be4d205674b7ac3a4711ffdf2e2220792", "patch": "@@ -1,3 +1,25 @@\n+Wed Aug 25 13:55:47 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* sbitmap.h (sbitmap_intersection_of_succs): Add prototype.\n+\t(sbitmap_intersection_of_preds, sbitmap_union_of_succs, \n+\tsbitmap_union_of_preds): Add prototypes.\n+\t* sbitmap.c (sbitmap_intersection_of_succs): New function to compute\n+\tthe intersection of successors with the new flow graph structures.\n+\t(sbitmap_intersection_of_preds): New function to compute the \n+\tintersection of predecessors with the new flow graph structures.\n+\t(sbitmap_union_of_succs): New function to compute the union of \n+\tsuccessors with the new flow graph structures.\n+\t(sbitmap_union_of_preds): New function to compute the union of \n+\tpredecessors with the new flow graph structures.\n+\t* gcse.c (compute_rdm, compute_available): Use new sbitmap routines.\n+\t(expr_reaches_here_p): Use edge and basic_block structures instead \n+\tof s_preds and s_succs.\n+\t(compute_cprop_avinout): Use new sbitmap routines.\n+\t(pre_expr_reaches_here_p): Use edge and basic_block structures instead \n+\tof s_preds and s_succs.\n+\t* flow.c (compute_flow_dominators): Compute dominators using\n+\tedges and basic blocks instead of s_preds and s_succs.\n+\n Wed Aug 25 13:41:47 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* lists.c (unused_insn_list, unused_expr_list): New file for"}, {"sha": "a6420a745077470b8fd2d92f300a5c8bc84bedf4", "filename": "gcc/flow.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=36349f8be4d205674b7ac3a4711ffdf2e2220792", "patch": "@@ -4678,6 +4678,50 @@ compute_dominators (dominators, post_dominators, s_preds, s_succs)\n   free (temp_bitmap);\n }\n \n+/* Compute dominator relationships using new flow graph structures.  */\n+void\n+compute_flow_dominators (dominators, post_dominators)\n+     sbitmap *dominators;\n+     sbitmap *post_dominators;\n+{\n+  int bb, changed, passes;\n+  sbitmap *temp_bitmap;\n+\n+  temp_bitmap = sbitmap_vector_alloc (n_basic_blocks, n_basic_blocks);\n+  sbitmap_vector_ones (dominators, n_basic_blocks);\n+  sbitmap_vector_ones (post_dominators, n_basic_blocks);\n+  sbitmap_vector_zero (temp_bitmap, n_basic_blocks);\n+\n+  sbitmap_zero (dominators[0]);\n+  SET_BIT (dominators[0], 0);\n+\n+  sbitmap_zero (post_dominators[n_basic_blocks - 1]);\n+  SET_BIT (post_dominators[n_basic_blocks - 1], 0);\n+\n+  passes = 0;\n+  changed = 1;\n+  while (changed)\n+    {\n+      changed = 0;\n+      for (bb = 1; bb < n_basic_blocks; bb++)\n+\t{\n+\t  sbitmap_intersection_of_preds (temp_bitmap[bb], dominators, bb);\n+\t  SET_BIT (temp_bitmap[bb], bb);\n+\t  changed |= sbitmap_a_and_b (dominators[bb],\n+\t\t\t\t      dominators[bb],\n+\t\t\t\t      temp_bitmap[bb]);\n+\t  sbitmap_intersection_of_succs (temp_bitmap[bb], post_dominators, bb);\n+\t  SET_BIT (temp_bitmap[bb], bb);\n+\t  changed |= sbitmap_a_and_b (post_dominators[bb],\n+\t\t\t\t      post_dominators[bb],\n+\t\t\t\t      temp_bitmap[bb]);\n+\t}\n+      passes++;\n+    }\n+\n+  free (temp_bitmap);\n+}\n+\n /* Given DOMINATORS, compute the immediate dominators into IDOM.  */\n \n void"}, {"sha": "7a484ab2be7624fe4e424d725eb328589d86842a", "filename": "gcc/gcse.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=36349f8be4d205674b7ac3a4711ffdf2e2220792", "patch": "@@ -2632,8 +2632,7 @@ compute_rd ()\n       changed = 0;\n       for (bb = 0; bb < n_basic_blocks; bb++)\n \t{\n-\t  sbitmap_union_of_predecessors (reaching_defs[bb], rd_out,\n-\t\t\t\t\t bb, s_preds);\n+\t  sbitmap_union_of_preds (reaching_defs[bb], rd_out, bb);\n \t  changed |= sbitmap_union_of_diff (rd_out[bb], rd_gen[bb],\n \t\t\t\t\t    reaching_defs[bb], rd_kill[bb]);\n \t}\n@@ -2833,7 +2832,7 @@ compute_available ()\n       changed = 0;\n       for (bb = 1; bb < n_basic_blocks; bb++)\n \t{\n-\t  sbitmap_intersect_of_predecessors (ae_in[bb], ae_out, bb, s_preds);\n+\t  sbitmap_intersection_of_preds (ae_in[bb], ae_out, bb);\n \t  changed |= sbitmap_union_of_diff (ae_out[bb], ae_gen[bb],\n \t\t\t\t\t    ae_in[bb], ae_kill[bb]);\n \t}\n@@ -2870,17 +2869,17 @@ expr_reaches_here_p (occr, expr, bb, check_self_loop, visited)\n      int check_self_loop;\n      char *visited;\n {\n-  int_list_ptr pred;\n+  edge pred;\n \n   if (visited == NULL)\n     {\n       visited = (char *) alloca (n_basic_blocks);\n       bzero (visited, n_basic_blocks);\n     }\n \n-  for (pred = s_preds[bb]; pred != NULL; pred = pred->next)\n+  for (pred = BASIC_BLOCK(bb)->pred; pred != NULL; pred = pred->pred_next)\n     {\n-      int pred_bb = INT_LIST_VAL (pred);\n+      int pred_bb = pred->src->index;\n \n       if (visited[pred_bb])\n \t{\n@@ -3512,8 +3511,7 @@ compute_cprop_avinout ()\n       for (bb = 0; bb < n_basic_blocks; bb++)\n \t{\n \t  if (bb != 0)\n-\t    sbitmap_intersect_of_predecessors (cprop_avin[bb],\n-\t\t\t\t\t       cprop_avout, bb, s_preds);\n+\t    sbitmap_intersection_of_preds (cprop_avin[bb], cprop_avout, bb);\n \t  changed |= sbitmap_union_of_diff (cprop_avout[bb],\n \t\t\t\t\t    cprop_pavloc[bb],\n \t\t\t\t\t    cprop_avin[bb],\n@@ -4125,19 +4123,19 @@ pre_expr_reaches_here_p (occr_bb, expr, bb, check_pre_comp, visited)\n      int check_pre_comp;\n      char *visited;\n {\n-  int_list_ptr pred;\n+  edge pred;\n \n   if (visited == NULL)\n     {\n       visited = (char *) alloca (n_basic_blocks);\n       bzero (visited, n_basic_blocks);\n     }\n \n-  for (pred = s_preds[bb]; pred != NULL; pred = pred->next)\n+  for (pred = BASIC_BLOCK (bb)->pred; pred != NULL; pred = pred->pred_next)\n     {\n-      int pred_bb = INT_LIST_VAL (pred);\n+      int pred_bb = pred->src->index;\n \n-      if (pred_bb == ENTRY_BLOCK\n+      if (pred->src == ENTRY_BLOCK_PTR\n \t  /* Has predecessor has already been visited?  */\n \t  || visited[pred_bb])\n \t{"}, {"sha": "89d6600927d181b44d5ef509cab0655a3e1d7dfb", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=36349f8be4d205674b7ac3a4711ffdf2e2220792", "patch": "@@ -429,6 +429,166 @@ sbitmap_union_of_predsucc (dst, src, bb, pred_succ)\n     }\n }\n \n+/* Set the bitmap DST to the intersection of SRC of successors of\n+   block number BB, using the new flow graph structures.  */\n+\n+void\n+sbitmap_intersection_of_succs (dst, src, bb)\n+     sbitmap dst;\n+     sbitmap *src;\n+     int bb;\n+{\n+  basic_block b = BASIC_BLOCK (bb);\n+  edge e = b->succ;\n+  int set_size = dst->size;\n+\n+  for ( ; e != NULL; e = e->succ_next)\n+    {\n+      if (e->dest == EXIT_BLOCK_PTR)\n+        continue;\n+      sbitmap_copy (dst, src[e->dest->index]);\n+      break;\n+    }\n+  if (e == NULL)\n+    sbitmap_ones (dst);\n+  else\n+    {\n+      for ( e = e->succ_next; e != NULL; e = e->succ_next)\n+        {\n+\t  int i;\n+\t  sbitmap_ptr p,r;\n+\n+\t  if (e->dest == EXIT_BLOCK_PTR)\n+\t    continue;\n+\n+\t  p = src[e->dest->index]->elms;\n+\t  r = dst->elms;\n+\t  for (i = 0; i < set_size; i++)\n+\t    *r++ &= *p++;\n+\t}\n+    }\n+}\n+\n+/* Set the bitmap DST to the intersection of SRC of predecessors of\n+   block number BB, using the new flow graph structures.  */\n+\n+void\n+sbitmap_intersection_of_preds (dst, src, bb)\n+     sbitmap dst;\n+     sbitmap *src;\n+     int bb;\n+{\n+  basic_block b = BASIC_BLOCK (bb);\n+  edge e = b->pred;\n+  int set_size = dst->size;\n+\n+  for ( ; e != NULL; e = e->pred_next)\n+    {\n+      if (e->src== ENTRY_BLOCK_PTR)\n+        continue;\n+      sbitmap_copy (dst, src[e->src->index]);\n+      break;\n+    }\n+  if (e == NULL)\n+    sbitmap_ones (dst);\n+  else\n+    {\n+      for ( e = e->pred_next; e != NULL; e = e->pred_next)\n+        {\n+\t  int i;\n+\t  sbitmap_ptr p,r;\n+\n+\t  if (e->src == ENTRY_BLOCK_PTR)\n+\t    continue;\n+\n+\t  p = src[e->src->index]->elms;\n+\t  r = dst->elms;\n+\t  for (i = 0; i < set_size; i++)\n+\t    *r++ &= *p++;\n+\t}\n+    }\n+}\n+\n+/* Set the bitmap DST to the union of SRC of successors of\n+   block number BB, using the new flow graph structures.  */\n+\n+void\n+sbitmap_union_of_succs (dst, src, bb)\n+     sbitmap dst;\n+     sbitmap *src;\n+     int bb;\n+{\n+  basic_block b = BASIC_BLOCK (bb);\n+  edge e = b->succ;\n+  int set_size = dst->size;\n+\n+  for ( ; e != NULL; e = e->succ_next)\n+    {\n+      if (e->dest == EXIT_BLOCK_PTR)\n+        continue;\n+      sbitmap_copy (dst, src[e->dest->index]);\n+      break;\n+    }\n+  if (e == NULL)\n+    sbitmap_zero (dst);\n+  else\n+    {\n+      for ( e = e->succ_next; e != NULL; e = e->succ_next)\n+        {\n+\t  int i;\n+\t  sbitmap_ptr p,r;\n+\n+\t  if (e->dest == EXIT_BLOCK_PTR)\n+\t    continue;\n+\n+\t  p = src[e->dest->index]->elms;\n+\t  r = dst->elms;\n+\t  for (i = 0; i < set_size; i++)\n+\t    *r++ |= *p++;\n+\t}\n+    }\n+}\n+\n+/* Set the bitmap DST to the union of SRC of predecessors of\n+   block number BB, using the new flow graph structures.  */\n+\n+void\n+sbitmap_union_of_preds (dst, src, bb)\n+     sbitmap dst;\n+     sbitmap *src;\n+     int bb;\n+{\n+  basic_block b = BASIC_BLOCK (bb);\n+  edge e = b->pred;\n+  int set_size = dst->size;\n+\n+  for ( ; e != NULL; e = e->pred_next)\n+    {\n+      if (e->src== ENTRY_BLOCK_PTR)\n+        continue;\n+      sbitmap_copy (dst, src[e->src->index]);\n+      break;\n+    }\n+  if (e == NULL)\n+    sbitmap_zero (dst);\n+  else\n+    {\n+      for ( e = e->pred_next; e != NULL; e = e->pred_next)\n+        {\n+\t  int i;\n+\t  sbitmap_ptr p,r;\n+\n+\t  if (e->src == ENTRY_BLOCK_PTR)\n+\t    continue;\n+\n+\t  p = src[e->src->index]->elms;\n+\t  r = dst->elms;\n+\t  for (i = 0; i < set_size; i++)\n+\t    *r++ |= *p++;\n+\t}\n+    }\n+}\n+\n void\n dump_sbitmap (file, bmap)\n      FILE *file;"}, {"sha": "ca2f99730a551e98c6cc4ff260a054875a130004", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36349f8be4d205674b7ac3a4711ffdf2e2220792/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=36349f8be4d205674b7ac3a4711ffdf2e2220792", "patch": "@@ -120,3 +120,12 @@ extern void sbitmap_union_of_predsucc PROTO ((sbitmap, sbitmap *, int,\n \t\t\t\t\t      struct int_list **));\n #define sbitmap_union_of_predecessors  sbitmap_union_of_predsucc\n #define sbitmap_union_of_successors    sbitmap_union_of_predsucc\n+\n+/* Intersection and Union of preds/succs using the new flow graph \n+   structure instead of the pred/succ arrays.  */\n+\n+extern void sbitmap_intersection_of_succs    PROTO ((sbitmap, sbitmap *, int));\n+extern void sbitmap_intersection_of_preds    PROTO ((sbitmap, sbitmap *, int));\n+extern void sbitmap_union_of_succs\t     PROTO ((sbitmap, sbitmap *, int));\n+extern void sbitmap_union_of_preds\t     PROTO ((sbitmap, sbitmap *, int));\n+"}]}