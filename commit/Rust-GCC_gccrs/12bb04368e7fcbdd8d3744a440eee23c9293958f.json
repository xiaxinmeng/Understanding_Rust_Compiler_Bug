{"sha": "12bb04368e7fcbdd8d3744a440eee23c9293958f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiYjA0MzY4ZTdmY2JkZDhkMzc0NGE0NDBlZWUyM2M5MjkzOTU4Zg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2019-07-10T15:16:12Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2019-07-10T15:16:12Z"}, "message": "Fix wi::lshift\n\n2019-07-10  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* wide-int.h (wi::lshift): Reject negative values for the fast path.\n\nFrom-SVN: r273356", "tree": {"sha": "d42462664d0531c8c7ebf8a561cb119e81ce2946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d42462664d0531c8c7ebf8a561cb119e81ce2946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12bb04368e7fcbdd8d3744a440eee23c9293958f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bb04368e7fcbdd8d3744a440eee23c9293958f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bb04368e7fcbdd8d3744a440eee23c9293958f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bb04368e7fcbdd8d3744a440eee23c9293958f/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95efa2279195e2b86afc986fd6e917c2704575d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95efa2279195e2b86afc986fd6e917c2704575d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95efa2279195e2b86afc986fd6e917c2704575d0"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "f109a8cc5eff90560313e98cf8db8f0bc9cbdb4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bb04368e7fcbdd8d3744a440eee23c9293958f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bb04368e7fcbdd8d3744a440eee23c9293958f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12bb04368e7fcbdd8d3744a440eee23c9293958f", "patch": "@@ -1,3 +1,7 @@\n+2019-07-10  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* wide-int.h (wi::lshift): Reject negative values for the fast path.\n+\n 2019-07-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91126"}, {"sha": "6c816cc260bca1fd1ca14eb89e3984202c3f59cc", "filename": "gcc/wide-int.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bb04368e7fcbdd8d3744a440eee23c9293958f/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bb04368e7fcbdd8d3744a440eee23c9293958f/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=12bb04368e7fcbdd8d3744a440eee23c9293958f", "patch": "@@ -3034,8 +3034,7 @@ wi::lshift (const T1 &x, const T2 &y)\n       if (STATIC_CONSTANT_P (xi.precision > HOST_BITS_PER_WIDE_INT)\n \t  ? (STATIC_CONSTANT_P (shift < HOST_BITS_PER_WIDE_INT - 1)\n \t     && xi.len == 1\n-\t     && xi.val[0] <= (HOST_WIDE_INT) ((unsigned HOST_WIDE_INT)\n-\t\t\t\t\t      HOST_WIDE_INT_MAX >> shift))\n+\t     && IN_RANGE (xi.val[0], 0, HOST_WIDE_INT_MAX >> shift))\n \t  : precision <= HOST_BITS_PER_WIDE_INT)\n \t{\n \t  val[0] = xi.ulow () << shift;"}]}