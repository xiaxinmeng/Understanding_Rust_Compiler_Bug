{"sha": "32ab41edd231c7d3872369c4ec6efa0feda6e77a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJhYjQxZWRkMjMxYzdkMzg3MjM2OWM0ZWM2ZWZhMGZlZGE2ZTc3YQ==", "commit": {"author": {"name": "Guilhem Lavaux", "email": "guilhem@kaffe.org", "date": "2003-12-20T12:28:25Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-20T12:28:25Z"}, "message": "URLParseError.java: New file.\n\n2003-12-20  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* gnu/java/net/URLParseError.java: New file.\n\t* gnu/java/net/protocol/jar/Handler.java\n\t(parseURL): Throw URLParseError if needed, fix '/' handling.\n\t* java/net/URL.java (URL): Catch URLParseError and\n\ttransform it into a MalformedURLException.\n\nFrom-SVN: r74877", "tree": {"sha": "022c21e00d55eed907ff37587379b378acb0e2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/022c21e00d55eed907ff37587379b378acb0e2f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ab41edd231c7d3872369c4ec6efa0feda6e77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ab41edd231c7d3872369c4ec6efa0feda6e77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ab41edd231c7d3872369c4ec6efa0feda6e77a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ab41edd231c7d3872369c4ec6efa0feda6e77a/comments", "author": null, "committer": null, "parents": [{"sha": "1713a69f0a1af440caa41ab9e60490ecd7247922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1713a69f0a1af440caa41ab9e60490ecd7247922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1713a69f0a1af440caa41ab9e60490ecd7247922"}], "stats": {"total": 107, "additions": 99, "deletions": 8}, "files": [{"sha": "869b50f356174adf100efdff7ab0ec3c5bda7a1e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=32ab41edd231c7d3872369c4ec6efa0feda6e77a", "patch": "@@ -1,3 +1,11 @@\n+2003-12-20  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* gnu/java/net/URLParseError.java: New file.\n+\t* gnu/java/net/protocol/jar/Handler.java\n+\t(parseURL): Throw URLParseError if needed, fix '/' handling.\n+\t* java/net/URL.java (URL): Catch URLParseError and\n+\ttransform it into a MalformedURLException.\n+\n 2003-12-19  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/ChannelOutputStream.java: New file."}, {"sha": "95eed65ddcdb418fda6bfde62843c3405a602449", "filename": "libjava/gnu/java/net/URLParseError.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2Fgnu%2Fjava%2Fnet%2FURLParseError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2Fgnu%2Fjava%2Fnet%2FURLParseError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FURLParseError.java?ref=32ab41edd231c7d3872369c4ec6efa0feda6e77a", "patch": "@@ -0,0 +1,57 @@\n+/* URLParseError.java -- Helps bypassing the exception limitation for\n+                         URLStreamHandler.parseURL().\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.net;\n+\n+/**\n+ * This class helps the people writing protocols to report URL parse\n+ * errors in parseUrl as this method cannot report other exceptions\n+ * than Errors.\n+ *\n+ * The main drawback is that it uses the Error mechanism which should not\n+ * be used for that type of error reporting.\n+ *\n+ * @author Guilhem Lavaux <guilhem@kaffe.org>\n+ */\n+public class URLParseError extends Error\n+{\n+  public URLParseError(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "d1235032c382cca3d6255df785c93c4d18305637", "filename": "libjava/gnu/java/net/protocol/jar/Handler.java", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FHandler.java?ref=32ab41edd231c7d3872369c4ec6efa0feda6e77a", "patch": "@@ -38,7 +38,9 @@\n \n package gnu.java.net.protocol.jar;\n \n+import gnu.java.net.URLParseError;\n import java.io.IOException;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n@@ -91,10 +93,11 @@ protected void parseURL (URL url, String url_string, int start, int end)\n         if (url_string.startsWith(\"/\"))\n           { //url string is an absolute path\n             int idx = file.lastIndexOf (\"!/\");\n-            if (idx == -1) //context path is weird\n-                file = file + \"!\" + url_string; \n-            else\n-                file = file.substring (0, idx + 1) + url_string;\n+\t    \n+\t    if (idx < 0)\n+\t      throw new URLParseError(\"no !/ in spec\");\n+\t    \n+\t    file = file.substring (0, idx + 1) + url_string;\n           }\n         else\n           {\n@@ -108,7 +111,7 @@ else if (idx == (file.length() - 1))\n               // according to Java API Documentation, here is a little different \n               // with URLStreamHandler.parseURL\n               // but JDK seems doesn't handle it well\n-              file = file + \"/\" + url_string;\n+              file = file.substring(0, idx + 1) + url_string;\n           }\n         \n         setURL (url, \"jar\", url.getHost(), url.getPort(), file, null);\n@@ -125,9 +128,22 @@ else if (idx == (file.length() - 1))\n     \n     // Skip remains of protocol\n     url_string = url_string.substring (start, end);\n+\n+    int jar_stop;\n+    if ((jar_stop = url_string.indexOf(\"!/\")) < 0)\n+      throw new URLParseError(\"no !/ in spec\");\n+\n+    try\n+      {\n+\tnew URL(url_string.substring (0, jar_stop));\n+      }\n+    catch (MalformedURLException e)\n+      {\n+\tthrow new URLParseError(\"invalid inner URL: \" + e.getMessage());\n+      }\n     \n     if (!url.getProtocol().equals (\"jar\") )\n-      return;\n+      throw new URLParseError(\"unexpected protocol \" + url.getProtocol());\n         \n     setURL (url, \"jar\", url.getHost(), url.getPort(), url_string, null);\n   }"}, {"sha": "79771d916dec21a0c2d6cb6f7328014964a43172", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ab41edd231c7d3872369c4ec6efa0feda6e77a/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=32ab41edd231c7d3872369c4ec6efa0feda6e77a", "patch": "@@ -38,6 +38,7 @@\n \n package java.net;\n \n+import gnu.java.net.URLParseError;\n import java.io.InputStream;\n import java.io.IOException;\n import java.io.Serializable;\n@@ -432,8 +433,17 @@ else if (context != null)\n     // is to be excluded by passing the 'limit' as the indexOf the '#'\n     // if one exists, otherwise pass the end of the string.\n     int hashAt = spec.indexOf('#', colon + 1);\n-    this.ph.parseURL(this, spec, colon + 1,\n-\t\t     hashAt < 0 ? spec.length() : hashAt);\n+\n+    try\n+      {\n+\tthis.ph.parseURL(this, spec, colon + 1,\n+\t\t\t hashAt < 0 ? spec.length() : hashAt);\n+      }\n+    catch (URLParseError e)\n+      {\n+\tthrow new MalformedURLException(e.getMessage());\n+      }\n+    \n     if (hashAt >= 0)\n       ref = spec.substring(hashAt + 1);\n "}]}