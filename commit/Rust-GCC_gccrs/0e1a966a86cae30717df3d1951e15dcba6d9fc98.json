{"sha": "0e1a966a86cae30717df3d1951e15dcba6d9fc98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxYTk2NmE4NmNhZTMwNzE3ZGYzZDE5NTFlMTVkY2JhNmQ5ZmM5OA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-09-19T11:40:29Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-09-19T11:40:29Z"}, "message": "re PR libstdc++/58338 (Add noexcept to functions with a narrow contract)\n\n2013-09-19  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/58338\n\t* include/bits/stl_tree.h (_Rb_tree_node_base) [_S_minimum, _S_maximum]:\n\tMark as noexcept.\n\t(_Rb_tree_iterator) [_Rb_tree_iterator, operator*, operator->,\n\toperator++, operator--, operator==, operator!=]: Likewise.\n\t(_Rb_tree_const_iterator) [_Rb_tree_const_iterator, _M_const_cast,\n\toperator*, operator->, operator++, operator--, operator==, operator!=]:\n\tLikewise.\n\t(operator==(const _Rb_tree_iterator&, const _Rb_tree_const_iterator&),\n\toperator!=(const _Rb_tree_iterator&, const _Rb_tree_const_iterator&)):\n\tLikewise.\n\t(_Rb_tree) [_M_put_node, _M_destroy_node, _M_root, _M_leftmost,\n\t_M_rightmost, _M_begin, _M_end, _S_left, _S_right, _S_minimum,\n\t_S_maximum]: Likewise.\n\t* include/debug/string (basic_string) [basic_string(const _Allocator&),\n\tshrink_to_fit, operator[], pop_back]: Likewise.\n\t* include/ext/vstring.h (__versa_string) [_M_limit, _M_disjunct,\n\t_M_ibegin, _M_iend, __versa_string(const _Alloc&),\n\toperator=(__versa_string&&), shrink_to_fit, operator[], front,\n\tback, assign(__versa_string&&), swap]: Likewise.\n\t(__versa_string) [__versa_string(), __versa_string(const _Alloc&)]:\n\tMerge.\n\nFrom-SVN: r202737", "tree": {"sha": "dda22cef0280d0cd2800503a2218f67c3df74de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dda22cef0280d0cd2800503a2218f67c3df74de7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e1a966a86cae30717df3d1951e15dcba6d9fc98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1a966a86cae30717df3d1951e15dcba6d9fc98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1a966a86cae30717df3d1951e15dcba6d9fc98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1a966a86cae30717df3d1951e15dcba6d9fc98/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06c055fcb593011e424c7f34318e823c6dcd797f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c055fcb593011e424c7f34318e823c6dcd797f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c055fcb593011e424c7f34318e823c6dcd797f"}], "stats": {"total": 166, "additions": 93, "deletions": 73}, "files": [{"sha": "e2c846f98e90b1fff913c476d00d85e59d0d59b2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e1a966a86cae30717df3d1951e15dcba6d9fc98", "patch": "@@ -1,3 +1,28 @@\n+2013-09-19  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/58338\n+\t* include/bits/stl_tree.h (_Rb_tree_node_base) [_S_minimum, _S_maximum]:\n+\tMark as noexcept.\n+\t(_Rb_tree_iterator) [_Rb_tree_iterator, operator*, operator->,\n+\toperator++, operator--, operator==, operator!=]: Likewise.\n+\t(_Rb_tree_const_iterator) [_Rb_tree_const_iterator, _M_const_cast,\n+\toperator*, operator->, operator++, operator--, operator==, operator!=]:\n+\tLikewise.\n+\t(operator==(const _Rb_tree_iterator&, const _Rb_tree_const_iterator&),\n+\toperator!=(const _Rb_tree_iterator&, const _Rb_tree_const_iterator&)):\n+\tLikewise.\n+\t(_Rb_tree) [_M_put_node, _M_destroy_node, _M_root, _M_leftmost,\n+\t_M_rightmost, _M_begin, _M_end, _S_left, _S_right, _S_minimum,\n+\t_S_maximum]: Likewise.\n+\t* include/debug/string (basic_string) [basic_string(const _Allocator&),\n+\tshrink_to_fit, operator[], pop_back]: Likewise.\n+\t* include/ext/vstring.h (__versa_string) [_M_limit, _M_disjunct,\n+\t_M_ibegin, _M_iend, __versa_string(const _Alloc&),\n+\toperator=(__versa_string&&), shrink_to_fit, operator[], front,\n+\tback, assign(__versa_string&&), swap]: Likewise.\n+\t(__versa_string) [__versa_string(), __versa_string(const _Alloc&)]:\n+\tMerge.\n+\n 2013-09-18  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/58338"}, {"sha": "5ed3760633e40a5435e252f9e6a888a133069098", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=0e1a966a86cae30717df3d1951e15dcba6d9fc98", "patch": "@@ -99,28 +99,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Base_ptr\t\t_M_right;\n \n     static _Base_ptr\n-    _S_minimum(_Base_ptr __x)\n+    _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n     {\n       while (__x->_M_left != 0) __x = __x->_M_left;\n       return __x;\n     }\n \n     static _Const_Base_ptr\n-    _S_minimum(_Const_Base_ptr __x)\n+    _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT\n     {\n       while (__x->_M_left != 0) __x = __x->_M_left;\n       return __x;\n     }\n \n     static _Base_ptr\n-    _S_maximum(_Base_ptr __x)\n+    _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n     {\n       while (__x->_M_right != 0) __x = __x->_M_right;\n       return __x;\n     }\n \n     static _Const_Base_ptr\n-    _S_maximum(_Const_Base_ptr __x)\n+    _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT\n     {\n       while (__x->_M_right != 0) __x = __x->_M_right;\n       return __x;\n@@ -167,58 +167,58 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;\n       typedef _Rb_tree_node<_Tp>*           _Link_type;\n \n-      _Rb_tree_iterator()\n+      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT\n       : _M_node() { }\n \n       explicit\n-      _Rb_tree_iterator(_Link_type __x)\n+      _Rb_tree_iterator(_Link_type __x) _GLIBCXX_NOEXCEPT\n       : _M_node(__x) { }\n \n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       { return static_cast<_Link_type>(_M_node)->_M_value_field; }\n \n       pointer\n-      operator->() const\n+      operator->() const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(static_cast<_Link_type>\n \t\t\t\t(_M_node)->_M_value_field); }\n \n       _Self&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _Rb_tree_increment(_M_node);\n \treturn *this;\n       }\n \n       _Self\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _Rb_tree_increment(_M_node);\n \treturn __tmp;\n       }\n \n       _Self&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _Rb_tree_decrement(_M_node);\n \treturn *this;\n       }\n \n       _Self\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _Rb_tree_decrement(_M_node);\n \treturn __tmp;\n       }\n \n       bool\n-      operator==(const _Self& __x) const\n+      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node == __x._M_node; }\n \n       bool\n-      operator!=(const _Self& __x) const\n+      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node != __x._M_node; }\n \n       _Base_ptr _M_node;\n@@ -240,66 +240,66 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;\n       typedef const _Rb_tree_node<_Tp>*           _Link_type;\n \n-      _Rb_tree_const_iterator()\n+      _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT\n       : _M_node() { }\n \n       explicit\n-      _Rb_tree_const_iterator(_Link_type __x)\n+      _Rb_tree_const_iterator(_Link_type __x) _GLIBCXX_NOEXCEPT\n       : _M_node(__x) { }\n \n-      _Rb_tree_const_iterator(const iterator& __it)\n+      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT\n       : _M_node(__it._M_node) { }\n \n       iterator\n-      _M_const_cast() const\n+      _M_const_cast() const _GLIBCXX_NOEXCEPT\n       { return iterator(static_cast<typename iterator::_Link_type>\n \t\t\t(const_cast<typename iterator::_Base_ptr>(_M_node))); }\n \n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       { return static_cast<_Link_type>(_M_node)->_M_value_field; }\n \n       pointer\n-      operator->() const\n+      operator->() const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(static_cast<_Link_type>\n \t\t\t\t(_M_node)->_M_value_field); }\n \n       _Self&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _Rb_tree_increment(_M_node);\n \treturn *this;\n       }\n \n       _Self\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _Rb_tree_increment(_M_node);\n \treturn __tmp;\n       }\n \n       _Self&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _Rb_tree_decrement(_M_node);\n \treturn *this;\n       }\n \n       _Self\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _Rb_tree_decrement(_M_node);\n \treturn __tmp;\n       }\n \n       bool\n-      operator==(const _Self& __x) const\n+      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node == __x._M_node; }\n \n       bool\n-      operator!=(const _Self& __x) const\n+      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node != __x._M_node; }\n \n       _Base_ptr _M_node;\n@@ -308,13 +308,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Val>\n     inline bool\n     operator==(const _Rb_tree_iterator<_Val>& __x,\n-               const _Rb_tree_const_iterator<_Val>& __y)\n+               const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_node == __y._M_node; }\n \n   template<typename _Val>\n     inline bool\n     operator!=(const _Rb_tree_iterator<_Val>& __x,\n-               const _Rb_tree_const_iterator<_Val>& __y)\n+               const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_node != __y._M_node; }\n \n   void\n@@ -370,7 +370,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_impl._Node_allocator::allocate(1); }\n \n       void\n-      _M_put_node(_Link_type __p)\n+      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT\n       { _M_impl._Node_allocator::deallocate(__p, 1); }\n \n #if __cplusplus < 201103L\n@@ -416,7 +416,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       void\n-      _M_destroy_node(_Link_type __p)\n+      _M_destroy_node(_Link_type __p) noexcept\n       {\n \t_M_get_Node_allocator().destroy(__p);\n \t_M_put_node(__p);\n@@ -474,46 +474,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     protected:\n       _Base_ptr&\n-      _M_root()\n+      _M_root() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_header._M_parent; }\n \n       _Const_Base_ptr\n-      _M_root() const\n+      _M_root() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_header._M_parent; }\n \n       _Base_ptr&\n-      _M_leftmost()\n+      _M_leftmost() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_header._M_left; }\n \n       _Const_Base_ptr\n-      _M_leftmost() const\n+      _M_leftmost() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_header._M_left; }\n \n       _Base_ptr&\n-      _M_rightmost()\n+      _M_rightmost() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_header._M_right; }\n \n       _Const_Base_ptr\n-      _M_rightmost() const\n+      _M_rightmost() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_header._M_right; }\n \n       _Link_type\n-      _M_begin()\n+      _M_begin() _GLIBCXX_NOEXCEPT\n       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }\n \n       _Const_Link_type\n-      _M_begin() const\n+      _M_begin() const _GLIBCXX_NOEXCEPT\n       {\n \treturn static_cast<_Const_Link_type>\n \t  (this->_M_impl._M_header._M_parent);\n       }\n \n       _Link_type\n-      _M_end()\n+      _M_end() _GLIBCXX_NOEXCEPT\n       { return static_cast<_Link_type>(&this->_M_impl._M_header); }\n \n       _Const_Link_type\n-      _M_end() const\n+      _M_end() const _GLIBCXX_NOEXCEPT\n       { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }\n \n       static const_reference\n@@ -525,19 +525,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _KeyOfValue()(_S_value(__x)); }\n \n       static _Link_type\n-      _S_left(_Base_ptr __x)\n+      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return static_cast<_Link_type>(__x->_M_left); }\n \n       static _Const_Link_type\n-      _S_left(_Const_Base_ptr __x)\n+      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return static_cast<_Const_Link_type>(__x->_M_left); }\n \n       static _Link_type\n-      _S_right(_Base_ptr __x)\n+      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return static_cast<_Link_type>(__x->_M_right); }\n \n       static _Const_Link_type\n-      _S_right(_Const_Base_ptr __x)\n+      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return static_cast<_Const_Link_type>(__x->_M_right); }\n \n       static const_reference\n@@ -549,19 +549,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _KeyOfValue()(_S_value(__x)); }\n \n       static _Base_ptr\n-      _S_minimum(_Base_ptr __x)\n+      _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return _Rb_tree_node_base::_S_minimum(__x); }\n \n       static _Const_Base_ptr\n-      _S_minimum(_Const_Base_ptr __x)\n+      _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return _Rb_tree_node_base::_S_minimum(__x); }\n \n       static _Base_ptr\n-      _S_maximum(_Base_ptr __x)\n+      _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return _Rb_tree_node_base::_S_maximum(__x); }\n \n       static _Const_Base_ptr\n-      _S_maximum(_Const_Base_ptr __x)\n+      _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return _Rb_tree_node_base::_S_maximum(__x); }\n \n     public:"}, {"sha": "925575e662a8645b20a313cf5b266c6825799f5c", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=0e1a966a86cae30717df3d1951e15dcba6d9fc98", "patch": "@@ -70,6 +70,7 @@ namespace __gnu_debug\n \n     // 21.3.1 construct/copy/destroy:\n     explicit basic_string(const _Allocator& __a = _Allocator())\n+    _GLIBCXX_NOEXCEPT\n     : _Base(__a)\n     { }\n \n@@ -238,7 +239,7 @@ namespace __gnu_debug\n \n #if __cplusplus >= 201103L\n     void\n-    shrink_to_fit()\n+    shrink_to_fit() noexcept\n     {\n       if (capacity() > size())\n \t{\n@@ -267,7 +268,7 @@ namespace __gnu_debug\n \n     // 21.3.4 element access:\n     const_reference\n-    operator[](size_type __pos) const\n+    operator[](size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n \t\t\t    _M_message(__gnu_debug::__msg_subscript_oob)\n@@ -278,7 +279,7 @@ namespace __gnu_debug\n     }\n \n     reference\n-    operator[](size_type __pos)\n+    operator[](size_type __pos) _GLIBCXX_NOEXCEPT\n     {\n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n       __glibcxx_check_subscript(__pos);\n@@ -582,7 +583,7 @@ namespace __gnu_debug\n \n #if __cplusplus >= 201103L\n     void\n-    pop_back()\n+    pop_back() noexcept\n     {\n       __glibcxx_check_nonempty();\n       _Base::pop_back();"}, {"sha": "bd93c803c236ccfc148d5ccae8a847d38f31e86b", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1a966a86cae30717df3d1951e15dcba6d9fc98/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=0e1a966a86cae30717df3d1951e15dcba6d9fc98", "patch": "@@ -98,15 +98,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // NB: _M_limit doesn't check for a bad __pos value.\n       size_type\n-      _M_limit(size_type __pos, size_type __off) const\n+      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT\n       {\n \tconst bool __testoff =  __off < this->size() - __pos;\n \treturn __testoff ? __off : this->size() - __pos;\n       }\n \n       // True if _Rep and source do not overlap.\n       bool\n-      _M_disjunct(const _CharT* __s) const\n+      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n       {\n \treturn (std::less<const _CharT*>()(__s, this->_M_data())\n \t\t|| std::less<const _CharT*>()(this->_M_data()\n@@ -116,29 +116,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // For the internal use we have functions similar to `begin'/`end'\n       // but they do not call _M_leak.\n       iterator\n-      _M_ibegin() const\n+      _M_ibegin() const _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_data()); }\n \n       iterator\n-      _M_iend() const\n+      _M_iend() const _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_data() + this->_M_length()); }\n \n     public:\n       // Construct/copy/destroy:\n       // NB: We overload ctors in some cases instead of using default\n       // arguments, per 17.4.4.4 para. 2 item 2.\n \n-      /**\n-       *  @brief  Default constructor creates an empty string.\n-       */\n-      __versa_string()\n-      : __vstring_base() { }\n-      \n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n        */\n       explicit\n-      __versa_string(const _Alloc& __a)\n+      __versa_string(const _Alloc& __a = _Alloc()) _GLIBCXX_NOEXCEPT\n       : __vstring_base(__a) { }\n \n       // NB: per LWG issue 42, semantics different from IS:\n@@ -269,7 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  copying).  @a __str is a valid, but unspecified string.\n        */\n       __versa_string&\n-      operator=(__versa_string&& __str)\n+      operator=(__versa_string&& __str) noexcept\n       {\n \t// NB: DR 1204.\n \tthis->swap(__str);\n@@ -470,7 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       /// A non-binding request to reduce capacity() to size().\n       void\n-      shrink_to_fit()\n+      shrink_to_fit() noexcept\n       {\n \tif (capacity() > size())\n \t  {\n@@ -538,7 +532,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  see at().)\n        */\n       const_reference\n-      operator[] (size_type __pos) const\n+      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_ASSERT(__pos <= this->size());\n \treturn this->_M_data()[__pos];\n@@ -555,7 +549,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  see at().)  Unshares the string.\n        */\n       reference\n-      operator[](size_type __pos)\n+      operator[](size_type __pos) _GLIBCXX_NOEXCEPT\n       {\n         // Allow pos == size() both in C++98 mode, as v3 extension,\n \t// and in C++11 mode.\n@@ -611,31 +605,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  element of the %string.\n        */\n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       { return operator[](0); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %string.\n        */\n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       { return operator[](0); }\n \n       /**\n        *  Returns a read/write reference to the data at the last\n        *  element of the %string.\n        */\n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       { return operator[](this->size() - 1); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %string.\n        */\n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       { return operator[](this->size() - 1); }\n #endif\n \n@@ -814,7 +808,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @a __str is a valid, but unspecified string.\n        */\n       __versa_string&\n-      assign(__versa_string&& __str)\n+      assign(__versa_string&& __str) noexcept\n       {\n \tthis->swap(__str);\n \treturn *this;\n@@ -1631,7 +1625,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  constant time.\n       */\n       void\n-      swap(__versa_string& __s)\n+      swap(__versa_string& __s) _GLIBCXX_NOEXCEPT\n       { this->_M_swap(__s); }\n \n       // String operations:"}]}