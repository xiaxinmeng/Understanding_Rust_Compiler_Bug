{"sha": "8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkNzdlMjJhOThmMjVkYzFlZGRmMjJmYjRiYzUwYjc2NTdhYWM0ZQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-07-08T11:35:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-07-08T11:35:18Z"}, "message": "basic-block.h (dump_regset, [...]): Remove duplicate prototypes.\n\n2009-07-08  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* basic-block.h (dump_regset, debug_regset): Remove duplicate\n\tprototypes.\n\t* c-objc-common.h (c_initialize_diagnostics): Ditto.\n\t* ebitmap.h (dump_ebitmap): Ditto.\n\t* optabs.h (optab_libfunc): Ditto.\n\t* tree.h (tree_expr_nonzero_warnv_p): Ditto.\n\t* tree-flow.h (vect_can_force_dr_alignment_p,\n\tget_vectype_for_scalar_type): Ditto.\t\n\t(vectorize_loops): Move prototype to ...\n\t* tree-vectorizer.h: ... here. Also, adjust comment. \n\t(vect_set_verbosity_level): Remove duplicate prototype.\n\t* tree-ssa-loop.c: Include tree-vectorizer.h.\n\t* Makefile.in (tree-ssa-loop.o): Depend on tree-vectorizer.h.\n\nFrom-SVN: r149364", "tree": {"sha": "2abd59c2109527c98ee3da6ce4d884137ae1d222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2abd59c2109527c98ee3da6ce4d884137ae1d222"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/comments", "author": null, "committer": null, "parents": [{"sha": "c6075b134c6292f624b3d3ae5543a34f9a78e4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6075b134c6292f624b3d3ae5543a34f9a78e4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6075b134c6292f624b3d3ae5543a34f9a78e4dd"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "456879c53d382d910d8ef59d2396952bef277816", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -1,3 +1,19 @@\n+2009-07-08  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* basic-block.h (dump_regset, debug_regset): Remove duplicate\n+\tprototypes.\n+\t* c-objc-common.h (c_initialize_diagnostics): Ditto.\n+\t* ebitmap.h (dump_ebitmap): Ditto.\n+\t* optabs.h (optab_libfunc): Ditto.\n+\t* tree.h (tree_expr_nonzero_warnv_p): Ditto.\n+\t* tree-flow.h (vect_can_force_dr_alignment_p,\n+\tget_vectype_for_scalar_type): Ditto.\t\n+\t(vectorize_loops): Move prototype to ...\n+\t* tree-vectorizer.h: ... here. Also, adjust comment. \n+\t(vect_set_verbosity_level): Remove duplicate prototype.\n+\t* tree-ssa-loop.c: Include tree-vectorizer.h.\n+\t* Makefile.in (tree-ssa-loop.o): Depend on tree-vectorizer.h.\n+\n 2009-07-08  Nick Clifton  <nickc@redhat.com>\n \n \t* config/i386/unix.h (ASM_COMMENT_START): Add a space after the"}, {"sha": "6a9c2fe4b91f27183b1be5c50d12709e66a11015", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -2308,7 +2308,7 @@ tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n tree-ssa-loop.o : tree-ssa-loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(TM_P_H) hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TREE_PASS_H) $(TIMEVAR_H) \\\n-   $(CFGLOOP_H) $(FLAGS_H) $(TREE_INLINE_H) tree-scalar-evolution.h\n+   $(CFGLOOP_H) $(FLAGS_H) $(TREE_INLINE_H) tree-scalar-evolution.h tree-vectorizer.h\n tree-ssa-loop-unswitch.o : tree-ssa-loop-unswitch.c $(TREE_FLOW_H) \\\n    $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n    $(PARAMS_H) output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) \\"}, {"sha": "12256a23f07abc244f6556236f197cd93baebce5", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -857,8 +857,6 @@ extern bool br_prob_note_reliable_p (const_rtx);\n extern bool predictable_edge_p (edge);\n \n /* In cfg.c  */\n-extern void dump_regset (regset, FILE *);\n-extern void debug_regset (regset);\n extern void init_flow (struct function *);\n extern void debug_bb (basic_block);\n extern basic_block debug_bb_n (int);"}, {"sha": "aaff1c9e3906dd5b01417508f6de9627e27892be", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -21,9 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_C_OBJC_COMMON\n #define GCC_C_OBJC_COMMON\n \n-/* In c-objc-common.c.  */\n-extern void c_initialize_diagnostics (diagnostic_context *);\n-\n /* Lang hooks that are shared between C and ObjC are defined here.  Hooks\n    specific to C or ObjC go in c-lang.c and objc/objc-lang.c, respectively.  */\n "}, {"sha": "4f9fd44ceb3e5a828bb80aad73d855e6f5cc233d", "filename": "gcc/ebitmap.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Febitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Febitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Febitmap.h?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -64,7 +64,6 @@ extern bool ebitmap_equal_p (ebitmap, ebitmap);\n extern void ebitmap_clear (ebitmap);\n extern int ebitmap_last_set_bit (ebitmap);\n extern void debug_ebitmap (ebitmap);\n-extern void dump_ebitmap (FILE *, ebitmap);\n extern unsigned long ebitmap_popcount(ebitmap, unsigned long);\n \n /* The iterator for ebitmap.  */"}, {"sha": "2cb8f676f3e7cf679a9cb91b1d2b2430773a6ac5", "filename": "gcc/optabs.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -781,7 +781,6 @@ extern rtx expand_vec_shift_expr (tree, rtx);\n #define convert_optab_handler(optab,mode,mode2) \\\n \t(&(optab)->handlers[(int) (mode)][(int) (mode2)])\n \n-extern rtx optab_libfunc (optab optab, enum machine_mode mode);\n extern rtx optab_libfunc (optab optab, enum machine_mode mode);\n extern rtx convert_optab_libfunc (convert_optab optab, enum machine_mode mode1,\n \t\t\t          enum machine_mode mode2);"}, {"sha": "c7733104dd0ded6c40b0cb22b60e17c7a4af6936", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -729,11 +729,6 @@ struct tree_niter_desc\n   enum tree_code cmp;\n };\n \n-/* In tree-vectorizer.c */\n-unsigned vectorize_loops (void);\n-extern bool vect_can_force_dr_alignment_p (const_tree, unsigned int);\n-extern tree get_vectype_for_scalar_type (tree);\n-\n /* In tree-ssa-phiopt.c */\n bool empty_block_p (basic_block);\n basic_block *blocks_in_phiopt_order (void);"}, {"sha": "0aab6d3a2d3d69da0954dc621c9ac31767890c14", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tree-inline.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"tree-vectorizer.h\"\n \n /* The loop superpass.  */\n "}, {"sha": "05f5e4783f7406676b1f32f4be524bb4d7bfb22d", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -861,8 +861,9 @@ typedef gimple (* vect_recog_func_ptr) (gimple, tree *, tree *);\n #define NUM_PATTERNS 4\n void vect_pattern_recog (loop_vec_info);\n \n-/*  Vectorization debug information - in tree-vectorizer.c.  */\n+/* In tree-vectorizer.c.  */\n+unsigned vectorize_loops (void);\n+/* Vectorization debug information */\n extern bool vect_print_dump_info (enum verbosity_levels);\n-extern void vect_set_verbosity_level (const char *);\n \n #endif  /* GCC_TREE_VECTORIZER_H  */"}, {"sha": "2f2a65aedee22811aacb109f87696fffd6ad08d5", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8ed77e22a98f25dc1eddf22fb4bc50b7657aac4e", "patch": "@@ -4749,7 +4749,6 @@ extern bool tree_unary_nonzero_warnv_p (enum tree_code, tree, tree, bool *);\n extern bool tree_binary_nonzero_warnv_p (enum tree_code, tree, tree, tree op1,\n                                          bool *);\n extern bool tree_single_nonzero_warnv_p (tree, bool *);\n-extern bool tree_expr_nonzero_warnv_p (tree, bool *);\n extern bool tree_unary_nonnegative_warnv_p (enum tree_code, tree, tree, bool *);\n extern bool tree_binary_nonnegative_warnv_p (enum tree_code, tree, tree, tree,\n                                              bool *);"}]}