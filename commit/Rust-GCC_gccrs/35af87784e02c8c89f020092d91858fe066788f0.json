{"sha": "35af87784e02c8c89f020092d91858fe066788f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhZjg3Nzg0ZTAyYzhjODlmMDIwMDkyZDkxODU4ZmUwNjY3ODhmMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-11T18:22:52Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-11T18:22:52Z"}, "message": "Daily bump.", "tree": {"sha": "43124a7ac963ad10c65ab4e4b3c863a2483635fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43124a7ac963ad10c65ab4e4b3c863a2483635fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35af87784e02c8c89f020092d91858fe066788f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35af87784e02c8c89f020092d91858fe066788f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35af87784e02c8c89f020092d91858fe066788f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35af87784e02c8c89f020092d91858fe066788f0/comments", "author": null, "committer": null, "parents": [{"sha": "ab264f4b39c69ee6be595c56110eaa23600f75e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab264f4b39c69ee6be595c56110eaa23600f75e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab264f4b39c69ee6be595c56110eaa23600f75e7"}], "stats": {"total": 548, "additions": 547, "deletions": 1}, "files": [{"sha": "277eaaffd241a95876c2c2a6b3cbe978b465b754", "filename": "gcc/ChangeLog", "status": "modified", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af87784e02c8c89f020092d91858fe066788f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af87784e02c8c89f020092d91858fe066788f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35af87784e02c8c89f020092d91858fe066788f0", "patch": "@@ -1,3 +1,243 @@\n+2020-12-11  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (VDQ): Remove TARGET_HAVE_MVE\n+\tconditions.\n+\t* config/arm/vec-common.md (and<mode>3): Use\n+\tARM_HAVE_<MODE>_ARITH.\n+\t(ior<mode>3): Likewise.\n+\n+2020-12-11  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_active_insn): Ignore all non essential\n+\tinstructions when getting the next active instruction.\n+\t(check_store_cacheline_hazard): Update.\n+\t(workaround_arc_anomaly): Remove obsolete cache hazard code.\n+\n+2020-12-11  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_reorg): Avoid limm in BRcc.\n+\n+2020-12-11  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (arc_scheduling_not_expected): Remove\n+\tit.\n+\t(arc_sets_cc_p): Likewise.\n+\t(arc_need_delay): Likewise.\n+\t* config/arc/arc.c (arc_sets_cc_p): Likewise.\n+\t(arc_need_delay): Likewise.\n+\t(arc_scheduling_not_expected): Likewise.\n+\t* config/arc/arc.md: Convert adc/sbc patterns to simple\n+\tinstruction definitions.\n+\n+2020-12-11  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (supf): Remove VORRQ_S and VORRQ_U.\n+\t(VORRQ): Remove.\n+\t* config/arm/mve.md (mve_vorrq_s<mode>): New entry for vorr\n+\tinstruction using expression ior.\n+\t(mve_vorrq_u<mode>): New expander.\n+\t(mve_vorrq_f<mode>): Use ior code instead of unspec.\n+\t* config/arm/neon.md (ior<mode>3): Renamed into ior<mode>3_neon.\n+\t* config/arm/predicates.md (imm_for_neon_logic_operand): Enable\n+\tfor MVE.\n+\t* config/arm/unspecs.md (VORRQ_S, VORRQ_U, VORRQ_F): Remove.\n+\t* config/arm/vec-common.md (ior<mode>3): New expander.\n+\n+2020-12-11  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (mpyd<su_optab>_arcv2hs): New template\n+\tpattern.\n+\t(*pmpyd<su_optab>_arcv2hs): Likewise.\n+\t(*pmpyd<su_optab>_imm_arcv2hs): Likewise.\n+\t(mpyd_arcv2hs): Moved into above template.\n+\t(mpyd_imm_arcv2hs): Moved into above template.\n+\t(mpydu_arcv2hs): Likewise.\n+\t(mpydu_imm_arcv2hs): Likewise.\n+\t(su_optab): New optab prefix for sign/zero-extending operations.\n+\n+2020-12-11  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98219\n+\t* config/i386/uintrintrin.h (__uintr_frame): Remove uirrv.\n+\n+2020-12-11  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* doc/sourcebuild.texi (arm_softfloat): Improve documentation.\n+\n+2020-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/98229\n+\t* optabs.c (expand_doubleword_mod): Canonicalize op1 and\n+\t1 - INTVAL (op1) as word_mode constants when used in\n+\tword_mode arithmetics.\n+\n+2020-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98235\n+\t* tree-vect-slp.c (vect_build_slp_tree): Exchange npermutes\n+\tfor limit.  Decrement that for each cache miss and fail\n+\tdiscovery when it reaches zero.\n+\t(vect_build_slp_tree_2): Remove npermutes handling and\n+\tsimply pass down limit.\n+\t(vect_build_slp_instance): Use pass down limit.\n+\t(vect_analyze_slp_instance): Likewise.\n+\t(vect_analyze_slp): Base the SLP discovery limit on\n+\tmax_tree_size and pass it down.\n+\n+2020-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/98190\n+\t* expr.c (expand_assignment): If to_rtx is a promoted SUBREG,\n+\tensure sign or zero extension either through use of store_expr\n+\tor by extending manually.\n+\n+2020-12-11  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\tPR rtl-optimization/97092\n+\t* ira-color.c (update_costs_from_allocno): Do not carry over mode\n+\tbetween subsequent iterations.\n+\n+2020-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95582\n+\t* tree-vect-patterns.c (vect_recog_bool_pattern): Check\n+\tfor VECT_SCALAR_BOOLEAN_TYPE_P, not just precision one.\n+\n+2020-12-11  Hongyu  <hongyu.wang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tMove check for HRESET/AVX_VNNI/UINTR out of avx512_usable.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/98212\n+\t* dojump.c (do_compare_rtx_and_jump): Change computation of\n+\tfirst_prob for and_them.  Add comment explaining and_them case.\n+\n+2020-12-10  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/98174\n+\t* gimple-range-cache.cc (ranger_cache::ssa_range_in_bb): Only push\n+\tpoor values to be examined if it isn't a pure global.\n+\t(ranger_cache::block_range): Don't process pure globals.\n+\t(ranger_cache::fill_block_cache): Adjust has_edge_range call.\n+\t* gimple-range-gori.cc (gori_map::all_outgoing): New bitmap.\n+\t(gori_map::gori_map): Allocate all_outgoing.\n+\t(gori_map::is_export_p): No specified BB returns global context.\n+\t(gori_map::calculate_gori): Accumulate each block into global.\n+\t(gori_compute::gori_compute): Preprocess each block for exports.\n+\t(gori_compute::has_edge_range_p): No edge returns global context.\n+\t* gimple-range-gori.h (has_edge_range_p): Provide default parameter.\n+\n+2020-12-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (loc_list_from_tree_1) <PLACEHOLDER_EXPR>: Deal with\n+\ta nested context type\n+\n+2020-12-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* cfgexpand.c (expand_gimple_basic_block): Remove special handling\n+\tof debug_inline_entries without block info.\n+\t* tree-inline.c (remap_gimple_stmt): Drop debug_nonbind_markers when\n+\tthe call statement has no block info.\n+\t(copy_debug_stmt): Remove debug_nonbind_markers when inlining\n+\tand the block info is mapped to NULL.\n+\t* tree-ssa-live.c (clear_unused_block_pointer): Remove\n+\tdebug_nonbind_markers originating from removed inline functions.\n+\n+2020-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_assignment): Remove special\n+\tallowance of VECTOR_BOOLEAN_TYPE_P conversions.\n+\n+2020-12-10  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (supf): Remove VANDQ_S and VANDQ_U.\n+\t(VANQ): Remove.\n+\t(VDQ): Add TARGET_HAVE_MVE condition where relevant.\n+\t* config/arm/mve.md (mve_vandq_u<mode>): New entry for vand\n+\tinstruction using expression 'and'.\n+\t(mve_vandq_s<mode>): New expander.\n+\t(mve_vaddq_n_f<mode>): Use 'and' code instead of unspec.\n+\t* config/arm/neon.md (and<mode>3): Rename into and<mode>3_neon.\n+\t* config/arm/predicates.md (imm_for_neon_inv_logic_operand):\n+\tEnable for MVE.\n+\t* config/arm/unspecs.md (VANDQ_S, VANDQ_U, VANDQ_F): Remove.\n+\t* config/arm/vec-common.md (and<mode>3): New expander.\n+\n+2020-12-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98069\n+\t* tree-data-ref.c (compute_distributive_range): New function.\n+\t(nop_conversion_for_offset_p): Likewise.\n+\t(split_constant_offset): In the internal overload, treat integer\n+\texpressions as having an implicit cast to sizetype and express\n+\tthem accordingly.  Pass back the range of the original (uncast)\n+\texpression in a new range parameter.\n+\t(split_constant_offset_1): Likewise.  Rework the handling of\n+\tconversions to account for the implicit sizetype casts.\n+\n+2020-12-10  Joel Hutton  <joel.hutton@arm.com>\n+\n+\tPR tree-optimization/97929\n+\t* tree-vect-data-refs.c (vect_get_smallest_scalar_type): Add\n+\tWIDEN_PLUS/WIDEN_MINUS case.\n+\n+2020-12-10  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* tree-pretty-print.c (dump_generic_node): Add case for\n+\tVEC_WIDEN_(PLUS/MINUS)_(HI/LO)_EXPR and WIDEN_(PLUS/MINUS)_EXPR.\n+\n+2020-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98211\n+\t* tree-vect-stmts.c (vectorizable_assignment): Disallow\n+\tinvalid conversions to bool vector types.\n+\n+2020-12-10  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree.c (build_common_builtin_nodes): Drop __builtin_ from\n+\t__clear_cache libname.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/98212\n+\t* dojump.c (do_compare_rtx_and_jump): When splitting NE and backend\n+\tcan do UNEQ, prefer splitting x != y into x unord y || !(x uneq y)\n+\tinstead of into x unord y || x ltgt y.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98169\n+\t* dojump.c (do_compare_rtx_and_jump): Don't split self-EQ/NE\n+\tcomparisons, just use ORDERED or UNORDERED.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/98205\n+\t* omp-expand.c (expand_omp_for_generic): Fix up broken_loop handling.\n+\n+2020-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Do\n+\tnot mark the defs to occur in a pattern if it is the\n+\tpattern root and record the original stmt defs in that\n+\tcase.\n+\n+2020-12-10  Simon Cook  <simon.cook@embecosm.com>\n+\n+\t* config/riscv/multilib-generator (arch_canonicalize): Invoke\n+\tpython interpreter when calling arch-canonicalize script.\n+\n+2020-12-10  Nikhil Benesch  <nikhil.benesch@gmail.com>\n+\n+\t* godump.c (go_format_type): Don't consider whether a type has\n+\tbeen seen when determining whether to output a type by name.\n+\tConsider only the use_type_name parameter.\n+\t(go_output_typedef): When outputting a typedef, format the\n+\tdeclaration's original type, which contains the name of the\n+\tunderlying type rather than the name of the typedef.\n+\n 2020-12-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/98188"}, {"sha": "77ef0ead5262935c6d73e0758eabd9d9d8ccb2ea", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af87784e02c8c89f020092d91858fe066788f0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af87784e02c8c89f020092d91858fe066788f0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=35af87784e02c8c89f020092d91858fe066788f0", "patch": "@@ -1 +1 @@\n-20201210\n+20201211"}, {"sha": "23a5d4b01f38dac6456c0a84560ac07d1c65dc75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af87784e02c8c89f020092d91858fe066788f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af87784e02c8c89f020092d91858fe066788f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=35af87784e02c8c89f020092d91858fe066788f0", "patch": "@@ -1,3 +1,9 @@\n+2020-12-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\tPR ada/98230\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case Mod): Use base\n+\ttype of argument to obtain static bound and required size.\n+\n 2020-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Remove ^L characters."}, {"sha": "353308efddc1dc09d884fafbf6542ea9cdeaf28d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af87784e02c8c89f020092d91858fe066788f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af87784e02c8c89f020092d91858fe066788f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=35af87784e02c8c89f020092d91858fe066788f0", "patch": "@@ -1,3 +1,133 @@\n+2020-12-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (map_context_from, map_context_to): Declare.\n+\t* module.cc (map_context_from, map_context_to): Define.\n+\t* tree.c (cp_tree_equal): Check map_context_{from,to} for parm\n+\tcontext difference.  Allow NON_LVALUE_EXPR and VIEW_CONVERT_EXPR\n+\twith null types.\n+\n+2020-12-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-lang.c (LANG_HOOKS_PREPROCESS_MAIN_FILE): Override.\n+\t(LANG_HOOKS_PREPROCESS_OPTIONS): Override.\n+\t(LANG_HOOKS_PREPROCESS_TOKEN): Override.\n+\t* cp-objcp-common.c (cp_register_dumps): Add module dump.\n+\t(cp_handle_option): New.\n+\t* cp-objcp-common.h (cp_handle_option): Declare.\n+\t(LANG_HOOKS_HANDLE_OPTION): Override.\n+\t* cp-tree.h (module_dump_id): Declare.\n+\t* module.cc (module_dump_id): Define.\n+\t(module_begin_main_file, handle_module_option)\n+\t(module_preproces_options): Stubs.\n+\n+2020-12-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (lazy_specializations_p): Stub.\n+\t* name-lookup.h (append_imported_binding_slot)\n+\t(mergeable_namespacE_slots, lookup_class_binding)\n+\t(walk_module_binding, import_module_binding, set_module_binding)\n+\t(note_pending_specializations, load_pending_specializations)\n+\t(add_module_decl, add_imported_namespace): Declare.\n+\t(get_cxx_dialect_name): Declare.\n+\t(enum WMB_flags): New.\n+\t* name-lookup.c (append_imported_binding_slot)\n+\t(mergeable_namespacE_slots, lookup_class_binding)\n+\t(walk_module_binding, import_module_binding, set_module_binding)\n+\t(note_pending_specializations, load_pending_specializations)\n+\t(add_module_decl, add_imported_namespace): New.\n+\t(get_cxx_dialect_name): Make extern.\n+\n+2020-12-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/78173\n+\t* typeck.c (pointer_diff): Use complete_type_or_maybe_complain\n+\tinstead of complete_type_or_else.\n+\n+2020-12-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (struct type_identity): New.\n+\t(make_temp_override): New.\n+\t* decl.c (grokdeclarator): Use it.\n+\t* except.c (maybe_noexcept_warning): Use it.\n+\t* parser.c (cp_parser_enum_specifier): Use it.\n+\t(cp_parser_parameter_declaration_clause): Use it.\n+\t(cp_parser_gnu_attributes_opt): Use it.\n+\t(cp_parser_std_attribute): Use it.\n+\n+2020-12-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (do_nonmember_using_decl): Add INSERT_P parm.\n+\tDeal with exporting using decls.\n+\t(finish_nonmember_using_decl): Examine BINDING_VECTOR.\n+\n+2020-12-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (visible_instantiation_path): Renamed.\n+\t* module.cc (get_originating_module_decl, lazy_load_binding)\n+\t(lazy_load_members, visible_instantiation_path): Stubs.\n+\t* name-lookup.c (STAT_TYPE_VISIBLE_P, STAT_VISIBLE): New.\n+\t(search_imported_binding_slot, init_global_partition)\n+\t(get_fixed_binding_slot): New.\n+\t(name_lookup::process_module_binding): New.\n+\t(name_lookup::search_namespace_only): Search BINDING_VECTOR.\n+\t(name_lookup::adl_namespace_fns): Likewise.\n+\t(name_lookip::search_adl): Search visible instantiation path.\n+\t(maybe_lazily_declare): Maybe lazy load members.\n+\t(implicitly_exporT_namespace): New.\n+\t(maybe_record_mergeable_decl): New.\n+\t(check_module_override): New.\n+\t(do_pushdecl): Deal with BINDING_VECTOR, check override.\n+\t(add_mergeable_namespace_entity): New.\n+\t(get_namespace_binding): Deal with BINDING_VECTOR.\n+\t(do_namespace_alias): Call set_originating_module.\n+\t(lookup_elaborated_type_1): Deal with BINDING_VECTOR.\n+\t(do_pushtag): Call set_originating_module.\n+\t(reuse_namespace): New.\n+\t(make_namespace_finish): Add FROM_IMPORT parm.\n+\t(push_namespace): Deal with BINDING_VECTOR & namespace reuse.\n+\t(maybe_save_operator_binding): Save when module CMI in play.\n+\t* name-lookup.h (add_mergeable_namespace_entity): Declare.\n+\n+2020-12-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c: Include bitmap.h.\n+\t(enum binding_slots): New.\n+\t(maybe_add_fuzzy_binding): Return bool true if found.\n+\t(consider_binding_level): Add module support.\n+\t* module.cc (get_import_bitmap): Stub.\n+\n+2020-12-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (pop_local_binding): Check for IDENTIFIER_ANON_P.\n+\t(update_binding): Level may be null, don't add namespaces to\n+\tlevel.\n+\t(newbinding_bookkeeping): New, broken out of ...\n+\t(do_pushdecl): ... here, call it.  Don't push anonymous decls.\n+\t(pushdecl, add_using_namespace): Correct comments.\n+\t(do_push_nested_namespace): Remove assert.\n+\t(make_namespace, make_namespace_finish): New, broken out of ...\n+\t(push_namespace): ... here.  Call them.  Add namespace to level\n+\there.\n+\n+2020-12-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* error.c (dump_module_suffix): New.\n+\t(dump_aggr_type, dump_simple_decl, dump_function_name): Call it.\n+\t* ptree.c (cxx_print_decl): Print module information.\n+\t* module.cc (module_name, get_importing_module): Stubs.\n+\n+2020-12-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.h (set_class_bindings): Return vector, take signed\n+\t'extra' parm.\n+\t* name-lookup.c (maybe_lazily_declare): Break out ...\n+\t(get_class_binding): .. of here, call it.\n+\t(find_member_slot): Adjust get_class_bindings call.\n+\t(set_class_bindings): Allow -ve extra.  Return the vector.\n+\t(set_identifier_type_value_with_scope): Remove checking assert.\n+\t(lookup_using_decl): Set decl's context.\n+\t(do_pushtag): Adjust set_identifier_type_value_with_scope handling.\n+\n 2020-12-09  Nathan Sidwell  <nathan@acm.org>\n \n \t* parser.h (struct cp_token): Add main_source_p field."}, {"sha": "6458628f38196762c92057368013df5891a84499", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af87784e02c8c89f020092d91858fe066788f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af87784e02c8c89f020092d91858fe066788f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35af87784e02c8c89f020092d91858fe066788f0", "patch": "@@ -1,3 +1,163 @@\n+2020-12-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/modules.exp: New.\n+\n+2020-12-11  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vorr.c: Add vorr tests.\n+\n+2020-12-11  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/pmpyd.c: New test.\n+\t* gcc.target/arc/tmac-1.c: Update.\n+\n+2020-12-11  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98219\n+\t* gcc.dg/guality/pr98219-1.c: New test.\n+\t* gcc.dg/guality/pr98219-2.c: Likewise.\n+\t* gcc.dg/torture/pr98219-1.c: Likewise.\n+\t* gcc.dg/torture/pr98219-2.c: Likewise.\n+\t* gcc.target/i386/uintr-2.c: Scan \"add[lq] $8, %[er]sp\".\n+\t(uword_t): New.\n+\t(foo): Add a uword_t argument.\n+\t(UINTR_hanlder): Likewise.\n+\t* gcc.target/i386/uintr-3.c: Scan \"add[lq] $8, %[er]sp\".\n+\t(uword_t): New.\n+\t(UINTR_hanlder): Add a uword_t argument.\n+\t* gcc.target/i386/uintr-4.c (uword_t): New.\n+\t(UINTR_hanlder): Add a uword_t argument.\n+\t* gcc.target/i386/uintr-5.c (uword_t): New.\n+\t(UINTR_hanlder): Add a uword_t argument.\n+\n+2020-12-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/78173\n+\t* g++.dg/cpp2a/concepts-pr78173.C: New test.\n+\n+2020-12-11  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_softfloat):\n+\tImprove documentation.\n+\n+2020-12-11  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/lob2.c: Use '-march=armv8.1-m.main+fp'.\n+\t* gcc.target/arm/lob3.c: Skip with '-mfloat-abi=hard'.\n+\t* gcc.target/arm/lob4.c: Likewise.\n+\t* gcc.target/arm/lob5.c: Use '-march=armv8.1-m.main+fp'.\n+\n+2020-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/98244\n+\t* gcc.dg/vect/vect-live-6.c: Require vect_condition.\n+\n+2020-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/98242\n+\t* gcc.dg/vect/bb-slp-subgroups-3.c: Require vect_int_mult.\n+\n+2020-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/98240\n+\t* gcc.dg/vect/pr97678.c: Require vect_int_mult and\n+\tvect_pack_trunc.\n+\n+2020-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/98239\n+\t* gcc.dg/vect/bb-slp-69.c: Require vect_condition.\n+\n+2020-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/98229\n+\t* gcc.c-torture/compile/pr98229.c: New test.\n+\n+2020-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98235\n+\t* gcc.dg/torture/pr98235.c: New testcase.\n+\n+2020-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/98190\n+\t* gcc.dg/pr98190.c: New test.\n+\n+2020-12-11  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pr97092.c: New test.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/98212\n+\t* gcc.dg/predict-8.c: Adjust expected probability.\n+\n+2020-12-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/modular6.adb: New test.\n+\n+2020-12-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91506\n+\t* g++.dg/init/array60.C: New test.\n+\n+2020-12-10  Dennis Zhang  <denzha01@e124712.cambridge.arm.com>\n+\n+\t* gcc.target/arm/simd/mve-vsub_1.c: Fix typo.\n+\tRemove needless dg-additional-options.\n+\n+2020-12-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/68451\n+\t* g++.dg/cpp0x/friend6.C: New test.\n+\n+2020-12-10  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vand.c: New test.\n+\n+2020-12-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98069\n+\t* gcc.dg/vect/pr98069.c: New file.\n+\n+2020-12-10  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* gcc.dg/vect/pr97929.c: New test.\n+\n+2020-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98211\n+\t* gcc.dg/pr98211.c: New testcase.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/98212\n+\t* gcc.target/i386/pr98212.c: New test.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98169\n+\t* gcc.target/i386/pr98169.c: New test.\n+\n+2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/98205\n+\t* c-c++-common/gomp/doacross-4.c: New test.\n+\n+2020-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-div-1.c: Expect the load to be\n+\tvectorized.\n+\n+2020-12-10  Nikhil Benesch  <nikhil.benesch@gmail.com>\n+\n+\t* gcc.misc-tests/godump-1.c: Add test case.\n+\n+2020-12-10  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go.test/go-test.exp (go-gc-tests): Recognize errorcheckdir -n,\n+\tfor bug345.go.\n+\n 2020-12-09  Ian Lance Taylor  <iant@golang.org>\n \n \t* go.test/go-test.exp (errchk): Rewrite regexp quoting to use"}, {"sha": "e5a1d8c0a1945fd240ec9c3557e32cac8fee9103", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af87784e02c8c89f020092d91858fe066788f0/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af87784e02c8c89f020092d91858fe066788f0/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=35af87784e02c8c89f020092d91858fe066788f0", "patch": "@@ -1,3 +1,7 @@\n+2020-12-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.c (cpp_init_builtins): Update __cplusplus for C++20.\n+\n 2020-12-01  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n \n \t* charset.c (init_iconv_desc): Initialize \"to\" and \"from\" fields."}, {"sha": "45c3d673731235fef8bf5a6a3569fb6a27408131", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af87784e02c8c89f020092d91858fe066788f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af87784e02c8c89f020092d91858fe066788f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=35af87784e02c8c89f020092d91858fe066788f0", "patch": "@@ -1,3 +1,9 @@\n+2020-12-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98226\n+\t* include/std/bit (__countl_one, __countr_one): Remove redundant\n+\tbranches.\n+\n 2020-12-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Define NO_SLEEP"}]}