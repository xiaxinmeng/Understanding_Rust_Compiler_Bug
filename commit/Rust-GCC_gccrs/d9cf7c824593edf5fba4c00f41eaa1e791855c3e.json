{"sha": "d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljZjdjODI0NTkzZWRmNWZiYTRjMDBmNDFlYWExZTc5MTg1NWMzZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-24T02:08:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-24T02:08:45Z"}, "message": "c-common.c (combine_strings): Also set TREE_READONLY.\n\n\t* c-common.c (combine_strings): Also set TREE_READONLY.\n\tChange warn_write_strings to flag_const_strings.\n\t* c-decl.c, c-tree.h: Likewise.\ncp/\n\t* tree.c (lvalue_type): Fix for arrays.\n\t* typeck.c (string_conv_p): New fn.\n\t(convert_for_assignment): Use it.\n\t(build_unary_op): Use lvalue_type.\n\t* call.c (standard_conversion, convert_like): Use string_conv_p.\n\t(add_function_candidate): Use lvalue_type.\n\t* cvt.c (convert_to_reference): Likewise.\n\t* decl2.c (lang_decode_option): Ignore -traditional.\n\t* decl.c (init_decl_processing): flag_writable_strings inhibits\n\tflag_const_strings.\n\t* lang-options.h (lang_options): Add fconst-strings to the list\n\tof valid options.\n\t* decl2.c (lang_f_options, lang_decode_option): Likewise.\n\nFrom-SVN: r21928", "tree": {"sha": "a665b0240e32b8e9553746924e2725aa56002700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a665b0240e32b8e9553746924e2725aa56002700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/comments", "author": null, "committer": null, "parents": [{"sha": "df44f2b0e98dccd15796b2e9af364c1704fba95e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df44f2b0e98dccd15796b2e9af364c1704fba95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df44f2b0e98dccd15796b2e9af364c1704fba95e"}], "stats": {"total": 112, "additions": 97, "deletions": 15}, "files": [{"sha": "89169581ac3304079b5899bd274c78609163c935", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -298,7 +298,6 @@ combine_strings (strings)\n       value = make_node (STRING_CST);\n       TREE_STRING_POINTER (value) = p;\n       TREE_STRING_LENGTH (value) = length;\n-      TREE_CONSTANT (value) = 1;\n     }\n   else\n     {\n@@ -313,8 +312,9 @@ combine_strings (strings)\n \n   /* Create the array type for the string constant.\n      -Wwrite-strings says make the string constant an array of const char\n-     so that copying it to a non-const pointer will get a warning.  */\n-  if (warn_write_strings\n+     so that copying it to a non-const pointer will get a warning.\n+     For C++, this is the standard behavior.  */\n+  if (flag_const_strings\n       && (! flag_traditional  && ! flag_writable_strings))\n     {\n       tree elements\n@@ -328,7 +328,8 @@ combine_strings (strings)\n     TREE_TYPE (value)\n       = build_array_type (wide_flag ? wchar_type_node : char_type_node,\n \t\t\t  build_index_type (build_int_2 (nchars - 1, 0)));\n-  TREE_CONSTANT (value) = 1;\n+\n+  TREE_READONLY (value) = TREE_CONSTANT (value) = ! flag_writable_strings;\n   TREE_STATIC (value) = 1;\n   return value;\n }"}, {"sha": "9f880c3be5ea64408834f759240ad7c0458c7c45", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -498,7 +498,7 @@ int mesg_implicit_function_declaration;\n    to get extra warnings from them.  These warnings will be too numerous\n    to be useful, except in thoroughly ANSIfied programs.  */\n \n-int warn_write_strings;\n+int flag_const_strings;\n \n /* Nonzero means warn about pointer casts that can drop a type qualifier\n    from the pointer target type.  */\n@@ -713,9 +713,9 @@ c_decode_option (argc, argv)\n   else if (!strcmp (p, \"-Wno-long-long\"))\n     warn_long_long = 0;\n   else if (!strcmp (p, \"-Wwrite-strings\"))\n-    warn_write_strings = 1;\n+    flag_const_strings = 1;\n   else if (!strcmp (p, \"-Wno-write-strings\"))\n-    warn_write_strings = 0;\n+    flag_const_strings = 0;\n   else if (!strcmp (p, \"-Wcast-qual\"))\n     warn_cast_qual = 1;\n   else if (!strcmp (p, \"-Wno-cast-qual\"))"}, {"sha": "6635fd1c9acc2f763eed9104c9b2637fe99dcaa6", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -430,7 +430,7 @@ extern int warn_implicit;\n    to get extra warnings from them.  These warnings will be too numerous\n    to be useful, except in thoroughly ANSIfied programs.  */\n \n-extern int warn_write_strings;\n+extern int flag_const_strings;\n \n /* Nonzero means warn about sizeof (function) or addition/subtraction\n    of function pointers.  */"}, {"sha": "19db217998f0900cc38e7601cef634f5cd6679d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -1,3 +1,22 @@\n+1998-08-24  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (lvalue_type): Fix for arrays.\n+\t* typeck.c (string_conv_p): New fn.\n+\t(convert_for_assignment): Use it.\n+\t(build_unary_op): Use lvalue_type.\n+\t* call.c (standard_conversion, convert_like): Use string_conv_p.\n+\t(add_function_candidate): Use lvalue_type.\n+\t* cvt.c (convert_to_reference): Likewise.\n+\t* decl2.c (lang_decode_option): Ignore -traditional.\n+\t* decl.c (init_decl_processing): flag_writable_strings inhibits\n+\tflag_const_strings.\n+\n+1998-08-24  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* lang-options.h (lang_options): Add fconst-strings to the list\n+\tof valid options.\n+\t* decl2.c (lang_f_options, lang_decode_option): Likewise.\n+\n 1998-08-24  Nathan Sidwell  <nathan@acm.org>\n \n         * lex.c (real_yylex): Don't warn about long long constants if"}, {"sha": "7c1e683baf09c4628c073728ba8b56578b6fd84b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -883,6 +883,9 @@ standard_conversion (to, from, expr)\n \t/* OK */;\n       else if (comp_ptr_ttypes (TREE_TYPE (to), TREE_TYPE (from)))\n \tconv = build_conv (QUAL_CONV, to, conv);\n+      else if (expr && string_conv_p (to, expr, 0))\n+\t/* converting from string constant to char *.  */\n+\tconv = build_conv (QUAL_CONV, to, conv);\n       else if (ptr_reasonably_similar (TREE_TYPE (to), TREE_TYPE (from)))\n \t{\n \t  conv = build_conv (PTR_CONV, to, conv);\n@@ -3172,6 +3175,11 @@ convert_like (convs, expr)\n     case LVALUE_CONV:\n       return decay_conversion (expr);\n \n+    case QUAL_CONV:\n+      /* Warn about deprecated conversion if appropriate.  */\n+      string_conv_p (TREE_TYPE (convs), expr, 1);\n+      break;\n+      \n     default:\n       break;\n     }"}, {"sha": "26e39a95892aaec1ade544b0a72edebc72c89645", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -342,9 +342,13 @@ extern int warn_ctor_dtor_privacy;\n \n extern int warn_return_type;\n \n-/* Nonzero means give string constants the type `const char *'\n-   to get extra warnings from them.  These warnings will be too numerous\n-   to be useful, except in thoroughly ANSIfied programs.  */\n+/* Nonzero means give string constants the type `const char *', as mandated\n+   by the standard.  */\n+\n+extern int flag_const_strings;\n+\n+/* Nonzero means warn about deprecated conversion from string constant to\n+   `char *'.  */\n \n extern int warn_write_strings;\n "}, {"sha": "8c3a32bd2e9f11b88fcc5747a9c49bed5d57e66a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -6200,6 +6200,11 @@ init_decl_processing ()\n \n   print_error_function = lang_print_error_function;\n   lang_get_alias_set = &c_get_alias_set;\n+\n+  /* Maintain consistency.  Perhaps we should just complain if they\n+     say -fwritable-strings?  */\n+  if (flag_writable_strings)\n+    flag_const_strings = 0;\n }\n \n /* Function to print any language-specific context for an error message.  */"}, {"sha": "9333d8dcf12a1ad2f7fa2e96ddaa4a290a447c81", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -211,9 +211,13 @@ int flag_use_repository;\n \n int flag_optional_diags = 1;\n \n-/* Nonzero means give string constants the type `const char *'\n-   to get extra warnings from them.  These warnings will be too numerous\n-   to be useful, except in thoroughly ANSIfied programs.  */\n+/* Nonzero means give string constants the type `const char *', as mandated\n+   by the standard.  */\n+\n+int flag_const_strings = 1;\n+\n+/* Nonzero means warn about deprecated conversion from string constant to\n+   `char *'.  */\n \n int warn_write_strings;\n \n@@ -482,6 +486,7 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"builtin\", &flag_no_builtin, 0},\n   {\"ident\", &flag_no_ident, 0},\n   {\"labels-ok\", &flag_labels_ok, 1},\n+  {\"const-strings\", &flag_const_strings, 1},\n   {\"stats\", &flag_detailed_statistics, 1},\n   {\"this-is-variable\", &flag_this_is_variable, 1},\n   {\"strict-prototype\", &flag_strict_prototype, 1},"}, {"sha": "3c2aee93114dad1b3923e7faa477e645700fa297", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -38,6 +38,8 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-fno-check-new\", \"\" },\n   { \"-fconserve-space\", \"Reduce size of object files\" },\n   { \"-fno-conserve-space\", \"\" },\n+  { \"-fconst-strings\", \"\" },\n+  { \"-fno-const-strings\", \"Make string literals `char[]' instead of `const char[]'\" },\n   { \"-fdefault-inline\", \"\" },\n   { \"-fno-default-inline\", \"Do not inline mmeber functions be default\"},\n   { \"-frtti\", \"\" },"}, {"sha": "61ebe186a2fa43d2abdc99985653fb77206890af", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cf7c824593edf5fba4c00f41eaa1e791855c3e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d9cf7c824593edf5fba4c00f41eaa1e791855c3e", "patch": "@@ -1757,6 +1757,42 @@ inline_conversion (exp)\n     }\n   return exp;\n }\n+\n+/* Returns nonzero iff exp is a STRING_CST or the result of applying\n+   decay_conversion to one.  */\n+\n+int\n+string_conv_p (totype, exp, warn)\n+     tree totype, exp;\n+     int warn;\n+{\n+  tree t;\n+\n+  if (! flag_const_strings || TREE_CODE (totype) != POINTER_TYPE)\n+    return 0;\n+\n+  t = TREE_TYPE (totype);\n+  if (! comptypes (t, char_type_node, 1)\n+      && ! comptypes (t, wchar_type_node, 1))\n+    return 0;\n+\n+  if (TREE_CODE (exp) != STRING_CST)\n+    {\n+      t = build_pointer_type (build_type_variant (t, 1, 0));\n+      if (! comptypes (TREE_TYPE (exp), t, 1))\n+\treturn 0;\n+      STRIP_NOPS (exp);\n+      if (TREE_CODE (exp) != ADDR_EXPR\n+\t  || TREE_CODE (TREE_OPERAND (exp, 0)) != STRING_CST)\n+\treturn 0;\n+    }\n+\n+  /* This warning is not very useful, as it complains about printf.  */\n+  if (warn && warn_write_strings)\n+    cp_warning (\"deprecated conversion from string constant to `char *'\");\n+\n+  return 1;\n+}\n \f\n tree\n build_object_ref (datum, basetype, field)\n@@ -6799,7 +6835,9 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t\t}\n \t      else if (! TYPE_READONLY (ttl) && TYPE_READONLY (ttr))\n \t\t{\n-\t\t  if (fndecl)\n+\t\t  if (string_conv_p (type, rhs, 1))\n+\t\t    /* converting from string constant to char *, OK.  */;\n+\t\t  else if (fndecl)\n \t\t    cp_pedwarn (\"passing `%T' as argument %P of `%D' discards const\",\n \t\t\t\trhstype, parmnum, fndecl);\n \t\t  else"}]}