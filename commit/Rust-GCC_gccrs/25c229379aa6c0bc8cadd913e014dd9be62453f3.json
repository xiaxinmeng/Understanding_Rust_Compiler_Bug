{"sha": "25c229379aa6c0bc8cadd913e014dd9be62453f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVjMjI5Mzc5YWE2YzBiYzhjYWRkOTEzZTAxNGRkOWJlNjI0NTNmMw==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2013-06-03T22:28:09Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2013-06-03T22:28:09Z"}, "message": "Fixed a bug in expansion of array notations in if-statement conditions.\n\n2013-06-03  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n       * c-typeck.c (c_finish_if_stmt): Added a check to see if the rank of the\n       condition of the if-statement matches the rank of else-block and then-\n       block when array notations are used.\n       * c-parser.c (c_parser_declaration_or_fndef): Expanded array notation\n       expression after the entire function body is parsed.\n       (c_parser_expr_no_commas): Delayed creating array notation expressions\n       to the end of function parsing.\n       * c-array-notation.c (fix_conditional_array_notations_1): Expanded the\n       whole if-statement instead of just the condition.\n       (expand_array_notation_exprs): Added MODIFY_EXPR case.\n\n\n2013-06-03  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n       * c-c++-common/cilk-plus/AN/if_test_errors.c (main): New testcase.\n       * c-c++-common/cilk-plus/AN/rank_mismatch.c: Added a '-w' option to\n       dg-option and an header comment.\n\nFrom-SVN: r199628", "tree": {"sha": "6714a569c16b57dd993b27c2763c4eb5a607bc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6714a569c16b57dd993b27c2763c4eb5a607bc3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25c229379aa6c0bc8cadd913e014dd9be62453f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c229379aa6c0bc8cadd913e014dd9be62453f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c229379aa6c0bc8cadd913e014dd9be62453f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c229379aa6c0bc8cadd913e014dd9be62453f3/comments", "author": null, "committer": null, "parents": [{"sha": "edd2564566a0b6e9ca7252b3ac66f346deb31a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd2564566a0b6e9ca7252b3ac66f346deb31a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edd2564566a0b6e9ca7252b3ac66f346deb31a2f"}], "stats": {"total": 149, "additions": 129, "deletions": 20}, "files": [{"sha": "48be2fd8a6974cb4800dd3374daf9e40b0feb238", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=25c229379aa6c0bc8cadd913e014dd9be62453f3", "patch": "@@ -1,3 +1,16 @@\n+2013-06-03  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-typeck.c (c_finish_if_stmt): Added a check to see if the rank of the\n+\tcondition of the if-statement matches the rank of else-block and then-\n+\tblock when array notations are used.\n+\t* c-parser.c (c_parser_declaration_or_fndef): Expanded array notation\n+\texpression after the entire function body is parsed.\n+\t(c_parser_expr_no_commas): Delayed creating array notation expressions\n+\tto the end of function parsing.\n+\t* c-array-notation.c (fix_conditional_array_notations_1): Expanded the\n+\twhole if-statement instead of just the condition.\n+\t(expand_array_notation_exprs): Added MODIFY_EXPR case.\t\n+\n 2013-06-03  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \tPR c/57474"}, {"sha": "bcd09224d0cfca3d8de26667b9851170fd9c8b9d", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=25c229379aa6c0bc8cadd913e014dd9be62453f3", "patch": "@@ -1879,7 +1879,7 @@ fix_conditional_array_notations_1 (tree stmt)\n   if (!find_rank (location, cond, cond, false, &rank))\n     return error_mark_node;\n   \n-  extract_array_notation_exprs (cond, false, &array_list);\n+  extract_array_notation_exprs (stmt, false, &array_list);\n   loop_init = push_stmt_list ();\n   for (ii = 0; ii < vec_safe_length (array_list); ii++)\n     { \n@@ -1899,12 +1899,12 @@ fix_conditional_array_notations_1 (tree stmt)\n \t      vec_safe_push (sub_list, array_node);\n \t      vec_safe_push (new_var_list, new_var);\n \t      add_stmt (builtin_loop);\n-\t      replace_array_notations (&cond, false, sub_list, new_var_list); \n+\t      replace_array_notations (&stmt, false, sub_list, new_var_list); \n \t    }\n \t}\n     }\n \n-  if (!find_rank (location, cond, cond, true, &rank))\n+  if (!find_rank (location, stmt, stmt, true, &rank))\n     {\n       pop_stmt_list (loop_init);\n       return error_mark_node;\n@@ -1915,7 +1915,7 @@ fix_conditional_array_notations_1 (tree stmt)\n       pop_stmt_list (loop_init); \n       return loop_init;\n     }  \n-  extract_array_notation_exprs (cond, true, &array_list);\n+  extract_array_notation_exprs (stmt, true, &array_list);\n \n   if (vec_safe_length (array_list) == 0)\n     return stmt;\n@@ -2765,6 +2765,18 @@ expand_array_notation_exprs (tree t)\n \t    expand_array_notation_exprs (*tsi_stmt_ptr (ii_tsi));\n       }\n       return t;\n+    case MODIFY_EXPR:\n+      {\n+\tlocation_t loc = EXPR_HAS_LOCATION (t) ? EXPR_LOCATION (t) :\n+\t  UNKNOWN_LOCATION;\n+\ttree lhs = TREE_OPERAND (t, 0);\n+\ttree rhs = TREE_OPERAND (t, 1);\n+\tlocation_t rhs_loc = EXPR_HAS_LOCATION (rhs) ? EXPR_LOCATION (rhs) :\n+\t  UNKNOWN_LOCATION;\n+\tt = build_array_notation_expr (loc, lhs, TREE_TYPE (lhs), NOP_EXPR,\n+\t\t\t\t       rhs_loc, rhs, TREE_TYPE (rhs));\n+\treturn t;\n+      }\n     case CALL_EXPR:\n       t = fix_array_notation_call_expr (t);\n       return t;"}, {"sha": "d6a500e72b37e41faa621e085c2f348556193efe", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=25c229379aa6c0bc8cadd913e014dd9be62453f3", "patch": "@@ -1756,6 +1756,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n \t= c_parser_peek_token (parser)->location;\n       fnbody = c_parser_compound_statement (parser);\n+      if (flag_enable_cilkplus && contains_array_notation_expr (fnbody))\n+\tfnbody = expand_array_notation_exprs (fnbody);\n       if (nested)\n \t{\n \t  tree decl = current_function_decl;\n@@ -5445,20 +5447,9 @@ c_parser_expr_no_commas (c_parser *parser, struct c_expr *after)\n   rhs = c_parser_expr_no_commas (parser, NULL);\n   rhs = default_function_array_read_conversion (exp_location, rhs);\n   \n-  /* The line below is where the statement has the form:\n-     A = B, where A and B contain array notation exprs. So this is where\n-     we handle those.  */\n-  if (flag_enable_cilkplus\n-      && (contains_array_notation_expr (lhs.value)\n-\t  || contains_array_notation_expr (rhs.value)))\n-    ret.value = build_array_notation_expr (op_location, lhs.value,\n-\t\t\t\t\t   lhs.original_type, code,\n-\t\t\t\t\t   exp_location, rhs.value,\n-\t\t\t\t\t   rhs.original_type);\n-  else\n-    ret.value = build_modify_expr (op_location, lhs.value, lhs.original_type,\n-\t\t\t\t   code, exp_location, rhs.value,\n-\t\t\t\t   rhs.original_type);\n+  ret.value = build_modify_expr (op_location, lhs.value, lhs.original_type,\n+\t\t\t\t code, exp_location, rhs.value,\n+\t\t\t\t rhs.original_type);\n   if (code == NOP_EXPR)\n     ret.original_code = MODIFY_EXPR;\n   else"}, {"sha": "e5e1455faa1e3709828fac6c07857bd8fe4f8838", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=25c229379aa6c0bc8cadd913e014dd9be62453f3", "patch": "@@ -8983,6 +8983,34 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n {\n   tree stmt;\n \n+  /* If the condition has array notations, then the rank of the then_block and\n+     else_block must be either 0 or be equal to the rank of the condition.  If\n+     the condition does not have array notations then break them up as it is\n+     broken up in a normal expression.  */\n+  if (flag_enable_cilkplus && contains_array_notation_expr (cond))\n+    {\n+      size_t then_rank = 0, cond_rank = 0, else_rank = 0;\n+      if (!find_rank (if_locus, cond, cond, true, &cond_rank))\n+\treturn;\n+      if (then_block\n+\t  && !find_rank (if_locus, then_block, then_block, true, &then_rank))\n+\treturn;\n+      if (else_block\n+\t  && !find_rank (if_locus, else_block, else_block, true, &else_rank)) \n+\treturn;\n+      if (cond_rank != then_rank && then_rank != 0)\n+\t{\n+\t  error_at (if_locus, \"rank-mismatch between if-statement%'s condition\"\n+\t\t    \" and the then-block\");\n+\t  return;\n+\t}\n+      else if (cond_rank != else_rank && else_rank != 0)\n+\t{\n+\t  error_at (if_locus, \"rank-mismatch between if-statement%'s condition\"\n+\t\t    \" and the else-block\");\n+\t  return;\n+\t}\n+    }\n   /* Diagnose an ambiguous else if if-then-else is nested inside if-then.  */\n   if (warn_parentheses && nested_if && else_block == NULL)\n     {"}, {"sha": "e0f75fdc0a245feaab90da43e753b62e5c83201d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25c229379aa6c0bc8cadd913e014dd9be62453f3", "patch": "@@ -1,3 +1,9 @@\n+2013-06-03  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-c++-common/cilk-plus/AN/if_test_errors.c (main): New testcase.\n+\t* c-c++-common/cilk-plus/AN/rank_mismatch.c: Added a '-w' option to\n+\tdg-option and an header comment.\n+\t\n 2013-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57419"}, {"sha": "d17d8cf5de20fdbddc5e2bb936773f9f916d2f1c", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/if_test_errors.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fif_test_errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fif_test_errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fif_test_errors.c?ref=25c229379aa6c0bc8cadd913e014dd9be62453f3", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+#include <stdlib.h>\n+int main (void)\n+{\n+  int x = 3, y, z, array[10], array2[10], TwodArray[10][10], jj,kk,ll ;\n+  int array2_check[10], array2d_check[10][10], array2d[10][10];\n+  int FourDArray[10][10][10][10], array4[10][10][10][10];\n+  int array4_check[10][10][10][10];\n+  int ii = 0;\n+\n+  x = 5;\n+  y = 10;\n+  z = 2;\n+\n+  if (!array[:]) /* This is OK! */\n+    array2[:] = 5;\n+  else\n+    array2[:] = 10;\n+  if (!(array[0:10:1] + array[0:10:1])) /* { dg-error \"condition and the then-block\" } */\n+    array2d[:][:] = 5;\n+  else\n+    array2[:] = 10;\n+\n+  if (!(array[0:10:1] + array[0:10:1])) /* { dg-error \"condition and the else-block\" } */\n+    array2[:] = 5;\n+  else\n+    array2d[:][:] = 10;\n+\n+\n+  if (TwodArray[:][:] != 10) /* { dg-error \"condition and the then-block\" } */\n+    array2[:] = 10; \n+  else\n+    array2[:] = 5;\n+\n+  if (FourDArray[43][:][:][:] != 10) /* This is OK!  */ \n+    array4[45][:][:][:] = 10; \n+  else\n+    array4[32][:][:][:] = 5;\n+\n+  /* atoi(argv[1]) == 10, so it will convert all 10's to 5's */\n+  if (FourDArray[42][0:10:1][9:10:-1][0:5:2] != 10) /* { dg-error \"condition and the then-block\" } */\n+    array4[0:10:1][0:5:2][9:10:-1][0:5:2] = 10; \n+  else\n+    array4[0:10:1][0:5:2][9:10:-1][0:5:2] = 5;\n+\n+  /* atoi(argv[1]) == 10, so it will convert all 10's to 5's */\n+  if (FourDArray[0:10:1][0:5:2][9:10:-1][x:y:z] +\n+      FourDArray[0:10:1][0:5:2][9:-10:1][x:y:z]  != 20) \n+    array4[0:10:1][0:5:2][9:10:-1][x:y:z] = 10; \n+  else\n+    array4[0:10][0:5:2][9:10:-1][x:y:z] = 5;\n+\n+  return 0;\n+}"}, {"sha": "b5e37ced12d6ec79adcc554ea1ae2703f82bb9ba", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/rank_mismatch.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Frank_mismatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c229379aa6c0bc8cadd913e014dd9be62453f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Frank_mismatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Frank_mismatch.c?ref=25c229379aa6c0bc8cadd913e014dd9be62453f3", "patch": "@@ -1,7 +1,10 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fcilkplus\" } */\n+/* { dg-options \"-fcilkplus -w\" } */\n \n-int main (int argc, char **argv)\n+/* We use -w because in the first error, there will be a warning of setting an\n+   integer to a pointer.  Just ignore it to expose the rank mismatch error.  */\n+\n+int main (void)\n {\n   int x = 0;\n   int array[10][10], array2[10];"}]}