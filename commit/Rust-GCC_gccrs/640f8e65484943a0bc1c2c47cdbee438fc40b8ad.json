{"sha": "640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwZjhlNjU0ODQ5NDNhMGJjMWMyYzQ3Y2RiZWU0MzhmYzQwYjhhZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-25T13:32:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-25T13:32:52Z"}, "message": "functional_hash.h (__hash_combine): Remove.\n\n2010-02-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/functional_hash.h (__hash_combine): Remove.\n\t(_Fnv_hash_base<>::hash(const char*, size_t)): Add defaulted\n\thash parameter.\n\t(_Fnv_hash::__hash_combine(const _Tp&, size_t)): Add.\n\t* include/std/system_error (hash<system_error>): Adjust.\n\t* src/compatibility-c++0x.cc (hash<system_error>): Likewise.\n\nFrom-SVN: r157065", "tree": {"sha": "b9e6efc036872718e4cffb509db23e692c0321e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9e6efc036872718e4cffb509db23e692c0321e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/comments", "author": null, "committer": null, "parents": [{"sha": "0679656478759e3bfd02f6f0a4b22fd792b736d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0679656478759e3bfd02f6f0a4b22fd792b736d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0679656478759e3bfd02f6f0a4b22fd792b736d7"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "d36328280814b9a20ec08c34504c2b5499d2e2dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "patch": "@@ -1,3 +1,12 @@\n+2010-02-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/functional_hash.h (__hash_combine): Remove.\n+\t(_Fnv_hash_base<>::hash(const char*, size_t)): Add defaulted\n+\thash parameter.\n+\t(_Fnv_hash::__hash_combine(const _Tp&, size_t)): Add.\n+\t* include/std/system_error (hash<system_error>): Adjust.\n+\t* src/compatibility-c++0x.cc (hash<system_error>): Likewise.\n+\n 2010-02-24  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/faq.xml: Adjust structure for pdf index."}, {"sha": "41fe11fae8f5f9055eae66c6ae62ed4ca9940178", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "patch": "@@ -123,45 +123,43 @@ namespace std\n     struct _Fnv_hash_base\n     {\n       static size_t\n-      hash(const char* __first, size_t __length)\n+      hash(const char* __first, size_t __length, size_t __hash = 0)\n       {\n-\tsize_t __result = 0;\n-\tfor (; __length > 0; --__length)\n-\t  __result = (__result * 131) + *__first++;\n-\treturn __result;\n+\tfor (; __length; --__length)\n+\t  __hash = (__hash * 131) + *__first++;\n+\treturn __hash;\n       }\n     };\n \n   template<>\n     struct _Fnv_hash_base<4>\n     {\n       static size_t\n-      hash(const char* __first, size_t __length)\n+      hash(const char* __first, size_t __length,\n+\t   size_t __hash = static_cast<size_t>(2166136261UL))\n       {\n-\tsize_t __result = static_cast<size_t>(2166136261UL);\n-\tfor (; __length > 0; --__length)\n+\tfor (; __length; --__length)\n \t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(16777619UL);\n+\t    __hash ^= static_cast<size_t>(*__first++);\n+\t    __hash *= static_cast<size_t>(16777619UL);\n \t  }\n-\treturn __result;\n+\treturn __hash;\n       }\n     };\n   \n   template<>\n     struct _Fnv_hash_base<8>\n     {\n       static size_t\n-      hash(const char* __first, size_t __length)\n+      hash(const char* __first, size_t __length,\n+\t   size_t __hash = static_cast<size_t>(14695981039346656037ULL))\n       {\n-\tsize_t __result =\n-\t  static_cast<size_t>(14695981039346656037ULL);\n-\tfor (; __length > 0; --__length)\n+\tfor (; __length; --__length)\n \t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(1099511628211ULL);\n+\t    __hash ^= static_cast<size_t>(*__first++);\n+\t    __hash *= static_cast<size_t>(1099511628211ULL);\n \t  }\n-\treturn __result;\n+\treturn __hash;\n       }\n     };\n \n@@ -175,16 +173,13 @@ namespace std\n         hash(const _Tp& __val)\n         { return hash(reinterpret_cast<const char*>(&__val),\n \t\t      sizeof(__val)); }\n-    };\n \n-  // Inspired by the Boost facility hash_combine.\n-  template<typename _Tp>\n-    inline size_t\n-    __hash_combine(size_t __hash, const _Tp& __val)\n-    {\n-      const size_t __tmp = std::_Fnv_hash::hash(__val);\n-      return __hash ^ (__tmp + 0x9e3779b9 + (__hash << 6) + (__hash >> 2));\n-    }\n+      template<typename _Tp>\n+        static size_t\n+        __hash_combine(const _Tp& __val, size_t __hash)\n+        { return hash(reinterpret_cast<const char*>(&__val),\n+\t\t      sizeof(__val), __hash); }\n+    };\n \n   /// Specialization for float.\n   template<>"}, {"sha": "920b9dee37b90e085a241b2a4aea3d721cc7dec3", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "patch": "@@ -356,7 +356,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator()(const error_code& __e) const\n       {\n \tconst size_t __tmp = std::_Fnv_hash::hash(__e._M_value);\n-\treturn std::__hash_combine(__tmp, __e._M_cat);\n+\treturn std::_Fnv_hash::__hash_combine(__e._M_cat, __tmp);\n       }\n     };\n "}, {"sha": "759267ab3a5d2b6e4d8f4eb6f21c858d733f07eb", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640f8e65484943a0bc1c2c47cdbee438fc40b8ad/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=640f8e65484943a0bc1c2c47cdbee438fc40b8ad", "patch": "@@ -57,6 +57,6 @@ namespace std\n     hash<error_code>::operator()(error_code __e) const\n     {\n       const size_t __tmp = std::_Fnv_hash::hash(__e._M_value);\n-      return std::__hash_combine(__tmp, __e._M_cat);\n+      return std::_Fnv_hash::__hash_combine(__e._M_cat, __tmp);\n     }\n }"}]}