{"sha": "ad9fcb961c0705f56907a728c3748c011a0a8048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5ZmNiOTYxYzA3MDVmNTY5MDdhNzI4YzM3NDhjMDExYTBhODA0OA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-09-04T14:48:43Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-09-07T12:28:07Z"}, "message": "x86: Enable FMA in unsigned SI to SF expanders\n\nEnable FMA in scalar/vector unsigned SI to SF expanders.  Don't check\nTARGET_AVX512F which has vcvtusi2ss and vcvtudq2ps instructions.\n\ngcc/\n\n\tPR target/85819\n\t* config/i386/i386-expand.c (ix86_expand_convert_uns_sisf_sse):\n\tEnable FMA.\n\t(ix86_expand_vector_convert_uns_vsivsf): Likewise.\n\ngcc/testsuite/\n\n\tPR target/85819\n\t* gcc.target/i386/pr85819-1a.c: New test.\n\t* gcc.target/i386/pr85819-1b.c: Likewise.\n\t* gcc.target/i386/pr85819-2a.c: Likewise.\n\t* gcc.target/i386/pr85819-2b.c: Likewise.\n\t* gcc.target/i386/pr85819-2c.c: Likewise.\n\t* gcc.target/i386/pr85819-3.c: Likewise.", "tree": {"sha": "b460f8064adedd9e6298223f1b0595ef551fe3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b460f8064adedd9e6298223f1b0595ef551fe3bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9fcb961c0705f56907a728c3748c011a0a8048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9fcb961c0705f56907a728c3748c011a0a8048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9fcb961c0705f56907a728c3748c011a0a8048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9fcb961c0705f56907a728c3748c011a0a8048/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843068149ec8fcaaaec12751f5b70221a1153857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843068149ec8fcaaaec12751f5b70221a1153857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843068149ec8fcaaaec12751f5b70221a1153857"}], "stats": {"total": 106, "additions": 94, "deletions": 12}, "files": [{"sha": "3f90f67a9946c12efa2ddf802ec9cd5a99bf4b3b", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=ad9fcb961c0705f56907a728c3748c011a0a8048", "patch": "@@ -1851,12 +1851,21 @@ ix86_expand_convert_uns_sisf_sse (rtx target, rtx input)\n   fp_lo = gen_reg_rtx (SFmode);\n   emit_insn (gen_floatsisf2 (fp_hi, int_hi));\n   emit_insn (gen_floatsisf2 (fp_lo, int_lo));\n-  fp_hi = expand_simple_binop (SFmode, MULT, fp_hi, x, fp_hi,\n-\t\t\t       0, OPTAB_DIRECT);\n-  fp_hi = expand_simple_binop (SFmode, PLUS, fp_hi, fp_lo, target,\n-\t\t\t       0, OPTAB_DIRECT);\n-  if (!rtx_equal_p (target, fp_hi))\n-    emit_move_insn (target, fp_hi);\n+  if (TARGET_FMA)\n+    {\n+      x = validize_mem (force_const_mem (SFmode, x));\n+      fp_hi = gen_rtx_FMA (SFmode, fp_hi, x, fp_lo);\n+      emit_move_insn (target, fp_hi);\n+    }\n+  else\n+    {\n+      fp_hi = expand_simple_binop (SFmode, MULT, fp_hi, x, fp_hi,\n+\t\t\t\t   0, OPTAB_DIRECT);\n+      fp_hi = expand_simple_binop (SFmode, PLUS, fp_hi, fp_lo, target,\n+\t\t\t\t   0, OPTAB_DIRECT);\n+      if (!rtx_equal_p (target, fp_hi))\n+\temit_move_insn (target, fp_hi);\n+    }\n }\n \n /* floatunsv{4,8}siv{4,8}sf2 expander.  Expand code to convert\n@@ -1888,12 +1897,20 @@ ix86_expand_vector_convert_uns_vsivsf (rtx target, rtx val)\n   real_ldexp (&TWO16r, &dconst1, 16);\n   tmp[5] = const_double_from_real_value (TWO16r, SFmode);\n   tmp[5] = force_reg (fltmode, ix86_build_const_vector (fltmode, 1, tmp[5]));\n-  tmp[6] = expand_simple_binop (fltmode, MULT, tmp[4], tmp[5], NULL_RTX, 1,\n-\t\t\t\tOPTAB_DIRECT);\n-  tmp[7] = expand_simple_binop (fltmode, PLUS, tmp[3], tmp[6], target, 1,\n-\t\t\t\tOPTAB_DIRECT);\n-  if (tmp[7] != target)\n-    emit_move_insn (target, tmp[7]);\n+  if (TARGET_FMA)\n+    {\n+      tmp[6] = gen_rtx_FMA (fltmode, tmp[4], tmp[5], tmp[3]);\n+      emit_move_insn (target, tmp[6]);\n+    }\n+  else\n+    {\n+      tmp[6] = expand_simple_binop (fltmode, MULT, tmp[4], tmp[5],\n+\t\t\t\t    NULL_RTX, 1, OPTAB_DIRECT);\n+      tmp[7] = expand_simple_binop (fltmode, PLUS, tmp[3], tmp[6],\n+\t\t\t\t    target, 1, OPTAB_DIRECT);\n+      if (tmp[7] != target)\n+\temit_move_insn (target, tmp[7]);\n+    }\n }\n \n /* Adjust a V*SFmode/V*DFmode value VAL so that *sfix_trunc* resp. fix_trunc*"}, {"sha": "db02282d100f7b600d13932589cffc3c9fd74abd", "filename": "gcc/testsuite/gcc.target/i386/pr85819-1a.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-1a.c?ref=ad9fcb961c0705f56907a728c3748c011a0a8048", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-avx512f -mfma -mfpmath=sse\" } */\n+\n+float\n+foo (unsigned int x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"vfmadd132ss\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"vcvtsi2ssq\" { target { ! ia32 } } } } */"}, {"sha": "f1408c4f46318e81dfd602ab2123d5856519c28b", "filename": "gcc/testsuite/gcc.target/i386/pr85819-1b.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-1b.c?ref=ad9fcb961c0705f56907a728c3748c011a0a8048", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mfpmath=sse\" } */\n+\n+#include \"pr85819-1a.c\"\n+\n+/* { dg-final { scan-assembler \"vcvtusi2ss\" } } */"}, {"sha": "cea599fe41665a90c8b0e75c4bc6bbf619877db8", "filename": "gcc/testsuite/gcc.target/i386/pr85819-2a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2a.c?ref=ad9fcb961c0705f56907a728c3748c011a0a8048", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-avx512f -mavx2 -mfma -mfpmath=sse\" } */\n+\n+typedef float To __attribute__ ((__vector_size__ (32)));\n+typedef unsigned int From __attribute__ ((__vector_size__ (32)));\n+\n+#define A2(I) (float)a[I], (float)a[1+I]\n+#define A4(I) A2(I), A2(2+I)\n+#define A8(I) A4(I), A4(4+I)\n+\n+To\n+f(From a)\n+{\n+  return __extension__ (To) {A8(0)};\n+}\n+\n+/* { dg-final { scan-assembler \"vfmadd132ps\" } } */"}, {"sha": "0750e56f29e32b39c1563273afdf533d9642a1db", "filename": "gcc/testsuite/gcc.target/i386/pr85819-2b.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2b.c?ref=ad9fcb961c0705f56907a728c3748c011a0a8048", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mfpmath=sse\" } */\n+\n+#include \"pr85819-2a.c\"\n+\n+/* { dg-final { scan-assembler \"vcvtudq2ps\" } } */"}, {"sha": "821166908da2065c2fbfff5c9c709312fa3a1177", "filename": "gcc/testsuite/gcc.target/i386/pr85819-2c.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-2c.c?ref=ad9fcb961c0705f56907a728c3748c011a0a8048", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-fma -mno-avx2 -mno-avx512vl -mavx512f -mfpmath=sse\" } */\n+\n+#include \"pr85819-2a.c\"\n+\n+/* { dg-final { scan-assembler-not \"vcvtudq2ps\" } } */\n+/* { dg-final { scan-assembler-not \"vfmadd132ps\" } } */"}, {"sha": "cd3bf9b8d35211799f69c35340ef0d189262d0bf", "filename": "gcc/testsuite/gcc.target/i386/pr85819-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fcb961c0705f56907a728c3748c011a0a8048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85819-3.c?ref=ad9fcb961c0705f56907a728c3748c011a0a8048", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mfpmath=sse\" } */\n+\n+typedef float To __attribute__ ((__vector_size__ (64)));\n+typedef unsigned int From __attribute__ ((__vector_size__ (64)));\n+\n+#define A2(I) (float)a[I], (float)a[1+I]\n+#define A4(I) A2(I), A2(2+I)\n+#define A8(I) A4(I), A4(4+I)\n+#define A16(I) A8(I), A8(8+I)\n+\n+To\n+f(From a)\n+{\n+  return __extension__ (To) {A16(0)};\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtudq2ps\" } } */"}]}