{"sha": "4a39a91800be2599ec3358a6adc0066277f7ef24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzOWE5MTgwMGJlMjU5OWVjMzM1OGE2YWRjMDA2NjI3N2Y3ZWYyNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-04T22:39:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-04T22:39:21Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r163", "tree": {"sha": "16d5374e1014656d7e03a1d1cb812832f6ffdc19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d5374e1014656d7e03a1d1cb812832f6ffdc19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a39a91800be2599ec3358a6adc0066277f7ef24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a39a91800be2599ec3358a6adc0066277f7ef24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a39a91800be2599ec3358a6adc0066277f7ef24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a39a91800be2599ec3358a6adc0066277f7ef24/comments", "author": null, "committer": null, "parents": [{"sha": "6434da253184ad038fef9a6e90c25fe33f13fad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6434da253184ad038fef9a6e90c25fe33f13fad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6434da253184ad038fef9a6e90c25fe33f13fad9"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "4f88de0f8597e3011710090a1ecdbfddabf58d96", "filename": "gcc/machmode.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a39a91800be2599ec3358a6adc0066277f7ef24/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a39a91800be2599ec3358a6adc0066277f7ef24/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=4a39a91800be2599ec3358a6adc0066277f7ef24", "patch": "@@ -59,7 +59,7 @@ extern char *mode_name[];\n #define GET_MODE_NAME(MODE)\t\t(mode_name[(int)(MODE)])\n \n enum mode_class { MODE_RANDOM, MODE_INT, MODE_FLOAT, MODE_PARTIAL_INT, MODE_CC,\n-\t\t  MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT };\n+\t\t  MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MAX_MODE_CLASS};\n \n /* Get the general kind of object that mode MODE represents\n    (integer, floating, complex, etc.)  */\n@@ -108,4 +108,15 @@ extern enum machine_mode get_best_mode ();\n   MIN (BIGGEST_ALIGNMENT, \t   \\\n        MAX (1, (GET_MODE_UNIT_SIZE (MODE) * BITS_PER_UNIT)))\n \n+/* For each class, get the narrowest mode in that class.  */\n+\n+extern enum machine_mode class_narrowest_mode[];\n+#define GET_CLASS_NARROWEST_MODE(CLASS) class_narrowest_mode[(int)(CLASS)]\n+\n+/* Define the integer modes whose sizes are BITS_PER_UNIT\n+   and BITS_PER_WORD.  */\n+\n+extern enum machine_mode byte_mode;\n+extern enum machine_mode word_mode;\n+\n #endif /* not HAVE_MACHINE_MODES */"}, {"sha": "8b8a1372994965044d7418af4af72065a8457f74", "filename": "gcc/rtl.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a39a91800be2599ec3358a6adc0066277f7ef24/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a39a91800be2599ec3358a6adc0066277f7ef24/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=4a39a91800be2599ec3358a6adc0066277f7ef24", "patch": "@@ -117,6 +117,15 @@ enum machine_mode mode_wider_mode[(int) MAX_MACHINE_MODE] = {\n \n #undef DEF_MACHMODE\n \n+/* Indexed by mode class, gives the narrowest mode for each class.  */\n+\n+enum machine_mode class_narrowest_mode[(int) MAX_MODE_CLASS];\n+\n+/* Commonly used modes.  */\n+\n+enum machine_mode byte_mode;\t/* Mode whose width is BITS_PER_UNIT */\n+enum machine_mode word_mode;\t/* Mode whose width is BITS_PER_WORD */\n+\n /* Indexed by rtx code, gives a sequence of operand-types for\n    rtx's of that code.  The sequence is a C string in which\n    each charcter describes one operand.  */\n@@ -774,11 +783,14 @@ read_rtx (infile)\n }\n \f\n /* This is called once per compilation, before any rtx's are constructed.\n-   It initializes the vector `rtx_length' and the extra CC modes, if any.  */\n+   It initializes the vector `rtx_length', the extra CC modes, if any,\n+   and computes certain commonly-used modes.  */\n \n void\n init_rtl ()\n {\n+  int min_class_size[(int) MAX_MODE_CLASS];\n+  enum machine_mode mode;\n   int i;\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n@@ -816,4 +828,27 @@ init_rtl ()\n       mode_wider_mode[i] = VOIDmode;\n     }\n #endif\n+\n+  /* Find the narrowest mode for each class and compute the word and byte\n+     modes.  */\n+\n+  for (i = 0; i < (int) MAX_MODE_CLASS; i++)\n+    min_class_size[i] = 1000;\n+\n+  for (mode = VOIDmode; (int) mode < (int) MAX_MACHINE_MODE;\n+       mode = (enum machine_mode) ((int) mode + 1))\n+    {\n+      if (GET_MODE_SIZE (mode) < min_class_size[(int) GET_MODE_CLASS (mode)])\n+\t{\n+\t  class_narrowest_mode[(int) GET_MODE_CLASS (mode)] = mode;\n+\t  min_class_size[(int) GET_MODE_CLASS (mode)] = GET_MODE_SIZE (mode);\n+\t}\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && GET_MODE_BITSIZE (mode) == BITS_PER_UNIT)\n+\tbyte_mode = mode;\n+\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && GET_MODE_BITSIZE (mode) == BITS_PER_WORD)\n+\tword_mode = mode;\n+    }\n }"}]}