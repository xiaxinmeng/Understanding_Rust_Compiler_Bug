{"sha": "eb9678e7193f97b21d45d4cfe0534c7f22052563", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5Njc4ZTcxOTNmOTdiMjFkNDVkNGNmZTA1MzRjN2YyMjA1MjU2Mw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2015-10-28T14:41:10Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-28T14:41:10Z"}, "message": "Handle noplt in call expanders for AArch64.\n\n\n\n\n2015-10-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* config/aarch64/aarch64.md (call, call_value, sibcall): Handle noplt.\n\t(sibcall_value): Likewise.\n\nFrom-SVN: r229488", "tree": {"sha": "e5c1e82424d5bf74a361659a9cfadb799eee682d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5c1e82424d5bf74a361659a9cfadb799eee682d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb9678e7193f97b21d45d4cfe0534c7f22052563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9678e7193f97b21d45d4cfe0534c7f22052563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9678e7193f97b21d45d4cfe0534c7f22052563", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9678e7193f97b21d45d4cfe0534c7f22052563/comments", "author": null, "committer": null, "parents": [{"sha": "e3091406955ec3f0642271143a5007f46ec8c876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3091406955ec3f0642271143a5007f46ec8c876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3091406955ec3f0642271143a5007f46ec8c876"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "42cf7e28f5abb2f6362f7e365948d651199c3dfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9678e7193f97b21d45d4cfe0534c7f22052563/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9678e7193f97b21d45d4cfe0534c7f22052563/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb9678e7193f97b21d45d4cfe0534c7f22052563", "patch": "@@ -1,3 +1,8 @@\n+2015-10-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/aarch64/aarch64.md (call, call_value, sibcall): Handle noplt.\n+\t(sibcall_value): Likewise.\n+\n 2015-10-28  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.h (struct machine_function): Add"}, {"sha": "82438f23c14186b2fc8a447f20f421c696b9ac04", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9678e7193f97b21d45d4cfe0534c7f22052563/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9678e7193f97b21d45d4cfe0534c7f22052563/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=eb9678e7193f97b21d45d4cfe0534c7f22052563", "patch": "@@ -696,7 +696,8 @@\n        the branch-and-link.  */\n     callee = XEXP (operands[0], 0);\n     if (GET_CODE (callee) == SYMBOL_REF\n-\t? aarch64_is_long_call_p (callee)\n+\t? (aarch64_is_long_call_p (callee)\n+\t   || aarch64_is_noplt_call_p (callee))\n \t: !REG_P (callee))\n       XEXP (operands[0], 0) = force_reg (Pmode, callee);\n \n@@ -755,7 +756,8 @@\n        the branch-and-link.  */\n     callee = XEXP (operands[1], 0);\n     if (GET_CODE (callee) == SYMBOL_REF\n-\t? aarch64_is_long_call_p (callee)\n+\t? (aarch64_is_long_call_p (callee)\n+\t   || aarch64_is_noplt_call_p (callee))\n \t: !REG_P (callee))\n       XEXP (operands[1], 0) = force_reg (Pmode, callee);\n \n@@ -805,10 +807,11 @@\n   \"\"\n   {\n     rtx pat;\n-\n-    if (!REG_P (XEXP (operands[0], 0))\n-       && (GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF))\n-     XEXP (operands[0], 0) = force_reg (Pmode, XEXP (operands[0], 0));\n+    rtx callee = XEXP (operands[0], 0);\n+    if (!REG_P (callee)\n+       && ((GET_CODE (callee) != SYMBOL_REF)\n+\t   || aarch64_is_noplt_call_p (callee)))\n+      XEXP (operands[0], 0) = force_reg (Pmode, callee);\n \n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n@@ -835,10 +838,11 @@\n   \"\"\n   {\n     rtx pat;\n-\n-    if (!REG_P (XEXP (operands[1], 0))\n-       && (GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF))\n-     XEXP (operands[1], 0) = force_reg (Pmode, XEXP (operands[1], 0));\n+    rtx callee = XEXP (operands[1], 0);\n+    if (!REG_P (callee)\n+       && ((GET_CODE (callee) != SYMBOL_REF)\n+\t   || aarch64_is_noplt_call_p (callee)))\n+      XEXP (operands[1], 0) = force_reg (Pmode, callee);\n \n     if (operands[3] == NULL_RTX)\n       operands[3] = const0_rtx;"}]}