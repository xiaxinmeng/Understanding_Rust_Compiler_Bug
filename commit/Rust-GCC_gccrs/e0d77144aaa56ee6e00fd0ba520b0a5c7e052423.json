{"sha": "e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "node_id": "C_kwDOANBUbNoAKGUwZDc3MTQ0YWFhNTZlZTZlMDBmZDBiYTUyMGIwYTVjN2UwNTI0MjM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-22T17:00:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-29T23:36:08Z"}, "message": "libstdc++: Fix constexpr functions in <experimental/internet>\n\nChange ip::basic_endpoint to work in constant expressions, but only for\nC++20 and later (due to the use of a union, which cannot change active\nmember in constexpr evaluation until C++20).\n\nDuring constant evaluation we cannot inspect the common initial sequence\nof basic_endpoint's union members to check whether sin_family == AF_INET\nor AF_INET6.  This means we need to store an additional boolean member\nthat remembers whether we have a v4 or v6 address. The address type can\nchange behind our backs if a user copies an address to the data()\npointer and then calls resize(n), so we need to inspect the sa_family_t\nmember in the union after a resize and update the boolean. POSIX only\nguarantees that the sa_family_t member of each protocol-specific address\nstructure is at the same offset and of the same type, not that there is\na common initial sequence. The check in resize is done using memcmp, so\nthat we avoid accessing an inactive member of the union if the\nsockaddr_in and sockaddr_in6 structures do not have a common initial\nsequence that includes the sa_family_t member.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/internet (ip::make_address): Implement\n\tmissing overload.\n\t(ip::address_v4::broadcast()): Avoid undefined shift.\n\t(ip::basic_endpoint): Fix member functions for constexpr.\n\t(ip::basic_endpoint::_M_is_v6): Replace member function with\n\tdata member, adjust member functions using it.\n\t(ip::basic_endpoint::resize): Update _M_is_v6 based on sockaddr\n\tcontent.\n\t* testsuite/experimental/net/internet/address/v4/cons.cc: Fix\n\tconstexpr checks to work in C++14.\n\t* testsuite/experimental/net/internet/address/v4/creation.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/endpoint/cons.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/network/v4/cons.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/network/v4/members.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/endpoint/extensible.cc: New test.", "tree": {"sha": "ad7e99c748a4247dbb64374a33d8e35979271fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad7e99c748a4247dbb64374a33d8e35979271fa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce39714a1ce58f2f32e8a44a224061290670db0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce39714a1ce58f2f32e8a44a224061290670db0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce39714a1ce58f2f32e8a44a224061290670db0f"}], "stats": {"total": 246, "additions": 185, "deletions": 61}, "files": [{"sha": "dff81b456abcba7d190bd558868957aabfc32cb6", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 75, "deletions": 28, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "patch": "@@ -977,7 +977,8 @@ namespace ip\n   { return make_address(__str, __throw_on_error{\"make_address\"}); }\n \n   inline address\n-  make_address(const string& __str, error_code& __ec) noexcept; // TODO\n+  make_address(const string& __str, error_code& __ec) noexcept\n+  { return make_address(__str.c_str(), __ec); }\n \n   inline address\n   make_address(const string& __str)\n@@ -1275,7 +1276,12 @@ namespace ip\n \n     constexpr address_v4\n     broadcast() const noexcept\n-    { return address_v4{_M_addr.to_uint() | (0xFFFFFFFFu >> _M_prefix_len)}; }\n+    {\n+      auto __b = _M_addr.to_uint();\n+      if (_M_prefix_len < 32)\n+\t__b |= 0xFFFFFFFFu >> _M_prefix_len;\n+      return address_v4{__b};\n+    }\n \n     address_v4_range\n     hosts() const noexcept\n@@ -1510,19 +1516,31 @@ namespace ip\n       basic_endpoint() noexcept : _M_data()\n       { _M_data._M_v4.sin_family = protocol_type::v4().family(); }\n \n-      constexpr\n+      _GLIBCXX20_CONSTEXPR\n       basic_endpoint(const protocol_type& __proto,\n \t\t     port_type __port_num) noexcept\n       : _M_data()\n       {\n-\t__glibcxx_assert(__proto == protocol_type::v4()\n-\t\t\t  || __proto == protocol_type::v6());\n-\n-\t_M_data._M_v4.sin_family = __proto.family();\n-\t_M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n+\tif (__proto == protocol_type::v4())\n+\t  {\n+\t    _M_data._M_v4.sin_family = __proto.family();\n+\t    _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n+\t  }\n+\telse if (__proto == protocol_type::v6())\n+\t  {\n+\t    std::_Construct(&_M_data._M_v6);\n+\t    _M_data._M_v6.sin6_family = __proto.family();\n+\t    _M_data._M_v6.sin6_port = address_v4::_S_hton_16(__port_num);\n+\t    _M_is_v6 = true;\n+\t  }\n+\telse\n+\t  {\n+\t    __glibcxx_assert(__proto == protocol_type::v4()\n+\t\t\t       || __proto == protocol_type::v6());\n+\t  }\n       }\n \n-      constexpr\n+      _GLIBCXX20_CONSTEXPR\n       basic_endpoint(const ip::address& __addr,\n \t\t     port_type __port_num) noexcept\n       : _M_data()\n@@ -1535,75 +1553,105 @@ namespace ip\n \t  }\n \telse\n \t  {\n-\t    _M_data._M_v6 = {};\n+\t    std::_Construct(&_M_data._M_v6);\n \t    _M_data._M_v6.sin6_family = protocol_type::v6().family();\n \t    _M_data._M_v6.sin6_port = address_v4::_S_hton_16(__port_num);\n-\t    __builtin_memcpy(_M_data._M_v6.sin6_addr.s6_addr,\n-\t\t\t     __addr._M_v6._M_bytes.data(), 16);\n+\t    uint8_t* __s6a = _M_data._M_v6.sin6_addr.s6_addr;\n+\t    for (int __i = 0; __i < 16; ++__i)\n+\t      __s6a[__i] = __addr._M_v6._M_bytes[__i];\n \t    _M_data._M_v6.sin6_scope_id = __addr._M_v6._M_scope_id;\n+\t    _M_is_v6 = true;\n \t  }\n       }\n \n       // members:\n+\n       constexpr protocol_type protocol() const noexcept\n       {\n-\treturn _M_is_v6() ? protocol_type::v6() : protocol_type::v4();\n+\treturn _M_is_v6 ? protocol_type::v6() : protocol_type::v4();\n       }\n \n       constexpr ip::address\n       address() const noexcept\n       {\n-\tip::address __addr;\n-\tif (_M_is_v6())\n+\tif (_M_is_v6)\n \t  {\n-\t    __builtin_memcpy(&__addr._M_v6._M_bytes,\n-\t\t\t     _M_data._M_v6.sin6_addr.s6_addr, 16);\n-\t    __addr._M_is_v4 = false;\n+\t    address_v6 __v6;\n+\t    const uint8_t* __s6a = _M_data._M_v6.sin6_addr.s6_addr;\n+\t    for (int __i = 0; __i < 16; ++__i)\n+\t      __v6._M_bytes[__i] = __s6a[__i];\n+\t    __v6._M_scope_id = _M_data._M_v6.sin6_scope_id;\n+\t    return __v6;\n \t  }\n \telse\n \t  {\n-\t    __builtin_memcpy(&__addr._M_v4._M_addr,\n-\t\t\t     &_M_data._M_v4.sin_addr.s_addr, 4);\n+\t    address_v4 __v4;\n+\t    __v4._M_addr = _M_data._M_v4.sin_addr.s_addr;\n+\t    return __v4;\n \t  }\n-\treturn __addr;\n       }\n \n       void\n       address(const ip::address& __addr) noexcept\n       {\n \tif (__addr.is_v6())\n \t  {\n-\t    _M_data._M_v6 = {};\n+\t    std::_Construct(&_M_data._M_v6);\n \t    _M_data._M_v6.sin6_family = protocol_type::v6().family();\n \t    __builtin_memcpy(_M_data._M_v6.sin6_addr.s6_addr,\n \t\t\t     __addr._M_v6._M_bytes.data(), 16);\n \t    _M_data._M_v6.sin6_scope_id = __addr._M_v6._M_scope_id;\n+\t    _M_is_v6 = true;\n \t  }\n \telse\n \t  {\n+\t    std::_Construct(&_M_data._M_v4);\n \t    _M_data._M_v4.sin_family = protocol_type::v4().family();\n \t    _M_data._M_v4.sin_addr.s_addr = __addr._M_v4._M_addr;\n+\t    _M_is_v6 = false;\n \t  }\n       }\n \n       constexpr port_type\n       port() const noexcept\n-      { return address_v4::_S_ntoh_16(_M_data._M_v4.sin_port); }\n+      {\n+\tport_type __p = 0;\n+\tif (_M_is_v6)\n+\t  __p = _M_data._M_v6.sin6_port;\n+\telse\n+\t  __p = _M_data._M_v4.sin_port;\n+\treturn address_v4::_S_ntoh_16(__p);\n+      }\n \n       void\n       port(port_type __port_num) noexcept\n-      { _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num); }\n+      {\n+\t__port_num = address_v4::_S_hton_16(__port_num);\n+\tif (_M_is_v6)\n+\t  _M_data._M_v6.sin6_port = __port_num;\n+\telse\n+\t  _M_data._M_v4.sin_port = __port_num;\n+      }\n \n       void* data() noexcept { return &_M_data; }\n \n       const void* data() const noexcept { return &_M_data; }\n \n-      constexpr size_t size() const noexcept\n-      { return _M_is_v6() ? sizeof(sockaddr_in6) : sizeof(sockaddr_in); }\n+      constexpr size_t\n+      size() const noexcept\n+      { return _M_is_v6 ? sizeof(sockaddr_in6) : sizeof(sockaddr_in); }\n \n       void\n       resize(size_t __s)\n       {\n+\t__glibcxx_assert(__s >= 0);\n+\tstatic_assert(offsetof(sockaddr_in6, sin6_family)\n+\t\t\t== offsetof(sockaddr_in, sin_family),\n+\t\t      \"sockaddr_in::sin_family and sockaddr_in6::sin6_family \"\n+\t\t      \"must be at the same offset\");\n+\tconst sa_family_t __in6 = AF_INET6;\n+\tconst auto* __ptr = (char*)&_M_data + offsetof(sockaddr_in, sin_family);\n+\t_M_is_v6 = __builtin_memcmp(&__in6, __ptr, sizeof(__in6)) == 0;\n \tif (__s != size())\n \t  __throw_length_error(\"net::ip::basic_endpoint::resize\");\n       }\n@@ -1617,8 +1665,7 @@ namespace ip\n \tsockaddr_in6\t_M_v6;\n       } _M_data;\n \n-      constexpr bool _M_is_v6() const noexcept\n-      { return _M_data._M_v4.sin_family == AF_INET6; }\n+      bool _M_is_v6 = false;\n     };\n \n   /** basic_endpoint comparisons"}, {"sha": "49bfb63baf6233b82750528e0edca4491de6d933", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/cons.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc?ref=e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "patch": "@@ -68,17 +68,21 @@ test03()\n   VERIFY( a1.to_bytes() == address_v4::bytes_type( 5, 6, 7, 8 ) );\n }\n \n+constexpr bool\n+test_constexpr()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return true;\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n \n-  constexpr bool c = []{\n-    test01();\n-    test02();\n-    test03();\n-    return true;\n-  };\n+  static_assert( test_constexpr(), \"valid in constant expressions\" );\n }"}, {"sha": "8469b1267e1e9762537c7c3436df2179e97cbd7d", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/creation.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc?ref=e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "patch": "@@ -88,16 +88,20 @@ test03()\n   VERIFY( ec == std::errc::invalid_argument );\n }\n \n+constexpr bool\n+test_constexpr()\n+{\n+  test01();\n+  test02();\n+  return true;\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n \n-  constexpr bool c = []{\n-    test01();\n-    test02();\n-    return true;\n-  };\n+  static_assert( test_constexpr(), \"valid in constant expressions\" );\n }"}, {"sha": "b4bef88b4a3d30206815d878e636baaa90897e4e", "filename": "libstdc++-v3/testsuite/experimental/net/internet/endpoint/cons.cc", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc?ref=e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "patch": "@@ -21,7 +21,10 @@ test_default()\n   VERIFY( t2.port() == 0 );\n }\n \n-constexpr void\n+#if __cplusplus >= 202002\n+constexpr\n+#endif\n+void\n test_proto()\n {\n   ip::tcp::endpoint t1(ip::tcp::v4(), 22);\n@@ -35,7 +38,10 @@ test_proto()\n   VERIFY( t2.port() == 80 );\n }\n \n-constexpr void\n+#if __cplusplus >= 202002\n+constexpr\n+#endif\n+void\n test_addr()\n {\n   ip::address_v4 a1(ip::address_v4::bytes_type(1, 2, 3, 4));\n@@ -51,16 +57,23 @@ test_addr()\n   VERIFY( t2.port() == 80 );\n }\n \n+constexpr bool\n+test_constexpr()\n+{\n+  test_default();\n+#if __cplusplus >= 202002\n+  // Non-default basic_endpoint constructors are only constexpr in C++20.\n+  test_proto();\n+  test_addr();\n+#endif\n+  return true;\n+}\n+\n int main()\n {\n   test_default();\n   test_proto();\n   test_addr();\n \n-  constexpr bool c = [] {\n-    test_default();\n-    test_proto();\n-    test_addr();\n-    return true;\n-  };\n+  static_assert( test_constexpr(), \"valid in constant expressions\" );\n }"}, {"sha": "d205024c799ee7dd91e3ce1a9317dd811ccc5a60", "filename": "libstdc++-v3/testsuite/experimental/net/internet/endpoint/extensible.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc?ref=e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n+// { dg-add-options net_ts }\n+\n+#include <experimental/internet>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::experimental::net;\n+\n+void\n+test_extensible()\n+{\n+  static_assert(ip::tcp::endpoint().capacity() == sizeof(sockaddr_in6),\n+\t\t\"ip::tcp::endpoint::capacity() can store a sockaddr_in6\");\n+\n+  ip::tcp::endpoint t1(ip::tcp::v4(), 22);\n+  VERIFY(t1.size() == sizeof(sockaddr_in));\n+  t1.resize(sizeof(sockaddr_in));\n+  try {\n+    t1.resize(2 * sizeof(sockaddr_in));\n+    VERIFY(false);\n+  } catch (const std::length_error&) {\n+  }\n+\n+  ip::tcp::endpoint t2(ip::tcp::v6(), 80);\n+  VERIFY(t2.size() == sizeof(sockaddr_in6));\n+  t2.resize(sizeof(sockaddr_in6));\n+  try {\n+    t2.resize(2 * sizeof(sockaddr_in6));\n+    VERIFY(false);\n+  } catch (const std::length_error&) {\n+  }\n+\n+  ip::tcp::endpoint t3;\n+  std::memcpy(t3.data(), t1.data(), t1.size());\n+  t3.resize(t1.size());\n+  VERIFY( t3 == t1 );\n+  std::memcpy(t3.data(), t2.data(), t2.size());\n+  t3.resize(t2.size());\n+  VERIFY( t3 == t2 );\n+}\n+\n+int main()\n+{\n+  test_extensible();\n+}"}, {"sha": "c49f8435584c96d46ec5c87ff7fff6199a0abfeb", "filename": "libstdc++-v3/testsuite/experimental/net/internet/network/v4/cons.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fcons.cc?ref=e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "patch": "@@ -111,6 +111,16 @@ test03_errors()\n   }\n }\n \n+constexpr bool\n+test_constexpr()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return true;\n+}\n+\n+\n int\n main()\n {\n@@ -120,10 +130,5 @@ main()\n   test03();\n   test03_errors();\n \n-  constexpr bool c = []{\n-    test01();\n-    test02();\n-    test03();\n-    return true;\n-  };\n+  static_assert( test_constexpr(), \"valid in constant expressions\" );\n }"}, {"sha": "7587eb1202bd1cc85527a8d34de0b472635b01c2", "filename": "libstdc++-v3/testsuite/experimental/net/internet/network/v4/members.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d77144aaa56ee6e00fd0ba520b0a5c7e052423/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fmembers.cc?ref=e0d77144aaa56ee6e00fd0ba520b0a5c7e052423", "patch": "@@ -166,6 +166,17 @@ test_to_string()\n   VERIFY( str2 == \"87.65.43.21/4\" );\n }\n \n+constexpr bool\n+test_constexpr()\n+{\n+  test_netmask();\n+  test_network();\n+  test_broadcast();\n+  test_canonical();\n+  test_is_host();\n+  return true;\n+}\n+\n int main()\n {\n   test_netmask();\n@@ -175,12 +186,5 @@ int main()\n   test_is_host();\n   test_to_string();\n \n-  constexpr bool c = []{\n-    test_netmask();\n-    test_network();\n-    test_broadcast();\n-    test_canonical();\n-    test_is_host();\n-    return true;\n-  };\n+  static_assert( test_constexpr(), \"valid in constant expressions\" );\n }"}]}