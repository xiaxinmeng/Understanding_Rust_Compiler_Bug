{"sha": "c0ed0531e5b067d780d4a6444027c5b4a399c027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlZDA1MzFlNWIwNjdkNzgwZDRhNjQ0NDAyN2M1YjRhMzk5YzAyNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2008-06-21T21:17:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2008-06-21T21:17:40Z"}, "message": "tree.h (enum tree_code): Include all-tree.def, not tree.def.\n\n\t* tree.h (enum tree_code): Include all-tree.def, not tree.def.\n\tDefine END_OF_BASE_TREE_CODES around inclusion.\n\t* tree.c (tree_code_type): New global array.\n\t(tree_code_length, tree_code_name): Likewise.\n\t* Makefile.in (TREE_H): Add all-tree.def, c-common.def, and\n\t$(lang_tree_files).\n\t(all-tree.def, s-alltree): New targets.\n\t(gencheck.h, s-gencheck): Remove.\n\t(tree.o): Depend upon all-tree.def.\n\t(build/gencheck.o): Remove gencheck.h dependency.\n\t(mostlyclean): Don't remove gencheck.h.\n\t* c-common.h (enum c_tree_code): Remove.\n\t* c-lang.c (tree_code_type): Remove.\n\t(tree_code_length, tree_code_name): Remove.\n\t* gencheck.c (tree_codes): Include all-tree.def, rather than\n\ttree.def, c-common.def, and gencheck.h.  Undefined DEFTREECODE\n\tafter it is used.\n\t* tree-browser.c (tb_tree_codes): Include all-tree.def, rather\n\tthan tree.def.\n\t* cp/cp-tree.h (enum cplus_tree_code): Remove.\n\t(operator_name_info): Size to MAX_TREE_CODES.\n\t(assignment_operator_name_info): Likewise.\n\t* cp/cp-lang.c (tree_code_type): Remove.\n\t(tree_code_length, tree_code_name): Remove.\n\t* cp/lex.c (operator_name_info): Size to MAX_TREE_CODES.\n\t(assignment_operator_name_info): Likewise.\n\t* cp/decl.c (grok_op_properties): Change LAST_CPLUS_TREE_CODE to\n\tMAX_TREE_CODES.\n\t* cp/mangle.c (write_expression): Likewise.\n\t* cp/Make-lang.in (CXX_TREE_H): Remove cp/cp-tree.def.\n\t* fortran/f95-lang.c (tree_code_type): Remove.\n\t(tree_code_length, tree_code_name): Remove.\n\t* java/java-tree.h (enum java_tree_code): Remove.\n\t* java/lang.c (tree_code_type): Remove.\n\t(tree_code_length, tree_code_name): Remove.\n\t* java/Make-lang.in (JAVA_TREE_H): Remove java/java-tree.def.\n\t* objc/objc-act.h (enum objc_tree_code): Remove.\n\t* objc/objc-lang.c (tree_code_type): Remove.\n\t(tree_code_length, tree_code_name): Remove.\n\t* objcp/objcp-lang.c (tree_code_type): Remove.\n\t(tree_code_length, tree_code_name): Remove.\n\t* ada/ada-tree.h (enum gnat_tree_code): Remove.\n\t* ada/Make-lang.in (ADA_TREE_H): Remove ada/ada-tre.def.\n\t* ada/misc.c (tree_code_type): Remove.\n\t(tree_code_length, tree_code_name): Remove.\n\nFrom-SVN: r137006", "tree": {"sha": "2e9690d6203b5ccd3ed8f56a19182d4c4d026c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9690d6203b5ccd3ed8f56a19182d4c4d026c98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0ed0531e5b067d780d4a6444027c5b4a399c027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ed0531e5b067d780d4a6444027c5b4a399c027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ed0531e5b067d780d4a6444027c5b4a399c027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ed0531e5b067d780d4a6444027c5b4a399c027/comments", "author": null, "committer": null, "parents": [{"sha": "14e5606b70a73e4e826ff7ccbeff67ab465e1fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e5606b70a73e4e826ff7ccbeff67ab465e1fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e5606b70a73e4e826ff7ccbeff67ab465e1fbc"}], "stats": {"total": 486, "additions": 126, "deletions": 360}, "files": [{"sha": "f92bae9d901f91e839a096a9dff218c7413efa93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -1,3 +1,51 @@\n+2008-06-21  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree.h (enum tree_code): Include all-tree.def, not tree.def.\n+\tDefine END_OF_BASE_TREE_CODES around inclusion.\n+\t* tree.c (tree_code_type): New global array.\n+\t(tree_code_length, tree_code_name): Likewise.\n+\t* Makefile.in (TREE_H): Add all-tree.def, c-common.def, and\n+\t$(lang_tree_files).\n+\t(all-tree.def, s-alltree): New targets.\n+\t(gencheck.h, s-gencheck): Remove.\n+\t(tree.o): Depend upon all-tree.def.\n+\t(build/gencheck.o): Remove gencheck.h dependency.\n+\t(mostlyclean): Don't remove gencheck.h.\n+\t* c-common.h (enum c_tree_code): Remove.\n+\t* c-lang.c (tree_code_type): Remove.\n+\t(tree_code_length, tree_code_name): Remove.\n+\t* gencheck.c (tree_codes): Include all-tree.def, rather than\n+\ttree.def, c-common.def, and gencheck.h.  Undefined DEFTREECODE\n+\tafter it is used.\n+\t* tree-browser.c (tb_tree_codes): Include all-tree.def, rather\n+\tthan tree.def.\n+\t* cp/cp-tree.h (enum cplus_tree_code): Remove.\n+\t(operator_name_info): Size to MAX_TREE_CODES.\n+\t(assignment_operator_name_info): Likewise.\n+\t* cp/cp-lang.c (tree_code_type): Remove.\n+\t(tree_code_length, tree_code_name): Remove.\n+\t* cp/lex.c (operator_name_info): Size to MAX_TREE_CODES.\n+\t(assignment_operator_name_info): Likewise.\n+\t* cp/decl.c (grok_op_properties): Change LAST_CPLUS_TREE_CODE to\n+\tMAX_TREE_CODES.\n+\t* cp/mangle.c (write_expression): Likewise.\n+\t* cp/Make-lang.in (CXX_TREE_H): Remove cp/cp-tree.def.\n+\t* fortran/f95-lang.c (tree_code_type): Remove.\n+\t(tree_code_length, tree_code_name): Remove.\n+\t* java/java-tree.h (enum java_tree_code): Remove.\n+\t* java/lang.c (tree_code_type): Remove.\n+\t(tree_code_length, tree_code_name): Remove.\n+\t* java/Make-lang.in (JAVA_TREE_H): Remove java/java-tree.def.\n+\t* objc/objc-act.h (enum objc_tree_code): Remove.\n+\t* objc/objc-lang.c (tree_code_type): Remove.\n+\t(tree_code_length, tree_code_name): Remove.\n+\t* objcp/objcp-lang.c (tree_code_type): Remove.\n+\t(tree_code_length, tree_code_name): Remove.\n+\t* ada/ada-tree.h (enum gnat_tree_code): Remove.\n+\t* ada/Make-lang.in (ADA_TREE_H): Remove ada/ada-tre.def.\n+\t* ada/misc.c (tree_code_type): Remove.\n+\t(tree_code_length, tree_code_name): Remove.\n+\n 2008-06-21  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \t* tree-ssa-pre.c (fini_antic): Bitmap_sets have to be freed before"}, {"sha": "fc960c32f52b5e12925bae2dc272f9a310cd0735", "filename": "gcc/Makefile.in", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -772,7 +772,8 @@ RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n RTL_H = $(RTL_BASE_H) genrtl.h\n PARAMS_H = params.h params.def\n BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def\n-TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h $(BUILTINS_DEF) \\\n+TREE_H = tree.h all-tree.def tree.def c-common.def $(lang_tree_files) \\\n+          $(MACHMODE_H) tree-check.h $(BUILTINS_DEF) \\\n           input.h statistics.h vec.h treestruct.def $(HASHTAB_H) \\\n           double-int.h alias.h\n BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h $(PARTITION_H) \\\n@@ -1376,6 +1377,19 @@ ifneq ($(xmake_file),)\n include $(xmake_file)\n endif\n \n+# all-tree.def includes all the tree.def files.\n+all-tree.def: s-alltree; @true\n+s-alltree: Makefile\n+\trm -f tmp-all-tree.def\n+\techo '#include \"tree.def\"' > tmp-all-tree.def\n+\techo 'END_OF_BASE_TREE_CODES' >> tmp-all-tree.def\n+\techo '#include \"c-common.def\"' >> tmp-all-tree.def\n+\tltf=\"$(lang_tree_files)\"; for f in $$ltf; do \\\n+\t  echo \"#include \\\"$$f\\\"\"; \\\n+\tdone | sed 's|$(srcdir)/||' >> tmp-all-tree.def\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-all-tree.def all-tree.def\n+\t$(STAMP) s-alltree\n+\n #\f\n \n # -----------------------------\n@@ -1895,14 +1909,6 @@ gccspec.o: gccspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n \n cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n \n-gencheck.h : s-gencheck ; @true\n-s-gencheck : Makefile\n-\tltf=\"$(lang_tree_files)\"; for f in $$ltf; do \\\n-\t    echo \"#include \\\"$$f\\\"\"; \\\n-\tdone | sed 's|$(srcdir)/||' > tmp-gencheck.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-gencheck.h gencheck.h\n-\t$(STAMP) s-gencheck\n-\n specs.h : s-specs ; @true\n s-specs : Makefile\n \tlsf=\"$(lang_specs_files)\"; for f in $$lsf; do \\\n@@ -1984,7 +1990,7 @@ langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    langhooks.h $(LANGHOOKS_DEF_H) $(FLAGS_H) $(GGC_H) $(DIAGNOSTIC_H) intl.h \\\n    $(TREE_GIMPLE_H)\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(FLAGS_H) $(FUNCTION_H) $(PARAMS_H) \\\n+   all-tree.def $(FLAGS_H) $(FUNCTION_H) $(PARAMS_H) \\\n    toplev.h $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n    $(REAL_H) gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H) \\\n    $(OBSTACK_H) pointer-set.h fixed-value.h\n@@ -3239,7 +3245,7 @@ build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n build/genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n   $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h vec.h\t\t\\\n   $(HASHTAB_H) gensupport.h\n-build/gencheck.o : gencheck.c gencheck.h tree.def $(BCONFIG_H) $(GTM_H)\t\\\n+build/gencheck.o : gencheck.c tree.def $(BCONFIG_H) $(GTM_H)\t\t\\\n \t$(SYSTEM_H) coretypes.h $(lang_tree_files)\n build/genchecksum.o : genchecksum.c $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)\n build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n@@ -3863,7 +3869,7 @@ mostlyclean: lang.mostlyclean\n \t-rm -f mddeps.mk\n # Delete other built files.\n \t-rm -f xsys-protos.hT\n-\t-rm -f specs.h gencheck.h options.c options.h\n+\t-rm -f specs.h options.c options.h\n # Delete the stamp and temporary files.\n \t-rm -f s-* tmp-* stamp-* stmp-*\n \t-rm -f */stamp-* */tmp-*"}, {"sha": "4136ebe5dca24c381838c259ca7c0349f227c312", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -980,7 +980,7 @@ ada/sdefault.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-wchcon.ads ada/system.ads ada/table.adb ada/table.ads ada/tree_io.ads \\\n    ada/types.ads ada/unchdeal.ads ada/unchconv.ads\n \n-ADA_TREE_H = ada/ada-tree.h ada/ada-tree.def\n+ADA_TREE_H = ada/ada-tree.h\n \n # force debugging information on s-tasdeb.o so that it is always\n # possible to set conditional breakpoints on tasks."}, {"sha": "008a5a496e54dea0f0fe602e52467870a63049e4", "filename": "gcc/ada/ada-tree.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fada%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fada%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.h?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -23,15 +23,6 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-/* Ada language-specific GC tree codes.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n-enum gnat_tree_code {\n-  __DUMMY = LAST_AND_UNUSED_TREE_CODE,\n-#include \"ada-tree.def\"\n-  LAST_GNAT_TREE_CODE\n-};\n-#undef DEFTREECODE\n-\n /* Ada uses the lang_decl and lang_type fields to hold a tree.  */\n union lang_tree_node\n   GTY((desc (\"0\"),"}, {"sha": "f8137242175630df0153f62081cbabd4541d04db", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -160,45 +160,6 @@ static tree gnat_type_max_size\t\t(const_tree);\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-/* Tables describing GCC tree codes used only by GNAT.\n-\n-   Table indexed by tree code giving a string containing a character\n-   classifying the tree code.  Possibilities are\n-   t, d, s, c, r, <, 1 and 2.  See cp-tree.def for details.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-  tcc_exceptional,\n-#include \"ada-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0,\n-#include \"ada-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\",\n-#include \"ada-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n /* How much we want of our DWARF extensions.  Some of our dwarf+ extensions\n    are incompatible with regular GDB versions, so we must make sure to only\n    produce them on explicit request.  This is eventually reflected into the"}, {"sha": "000936969a38d603177eab4f3002145aff6a2f88", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -763,16 +763,6 @@ extern void finish_file\t(void);\n #define COMPOUND_LITERAL_EXPR_DECL(NODE)\t\t\t\\\n   DECL_EXPR_DECL (COMPOUND_LITERAL_EXPR_DECL_STMT (NODE))\n \n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n-\n-enum c_tree_code {\n-  C_DUMMY_TREE_CODE = LAST_AND_UNUSED_TREE_CODE,\n-#include \"c-common.def\"\n-  LAST_C_TREE_CODE\n-};\n-\n-#undef DEFTREECODE\n-\n extern int anon_aggr_type_p (const_tree);\n \n /* For a VAR_DECL that is an anonymous union, these are the various"}, {"sha": "50781e8ce30c45fbd30948c195aad46541459c88", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -47,41 +47,6 @@ enum c_language_kind c_language = clk_c;\n /* Each front end provides its own lang hook initializer.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-/* Tree code classes.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-  tcc_exceptional,\n-#include \"c-common.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0,\n-#include \"c-common.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\",\n-#include \"c-common.def\"\n-};\n-#undef DEFTREECODE\n-\n /* Final processing of file-scope data.  The Objective-C version of\n    this function still does something.  */\n void"}, {"sha": "3831bb9f91f937bd37f73f0e3d65e58cc044c2b9", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -222,7 +222,7 @@ c++.stagefeedback: stagefeedback-start\n #\f\n # .o: .h dependencies.\n CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h $(C_COMMON_H) \\\n-\tcp/cp-tree.def c-common.def $(FUNCTION_H) $(VARRAY_H) \\\n+\tc-common.def $(FUNCTION_H) $(VARRAY_H) \\\n \t$(SYSTEM_H) coretypes.h $(CONFIG_H) $(TARGET_H) $(GGC_H) \\\n \t$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h\n "}, {"sha": "b30ad81cd0498a5f38f9f6e51ecb4de94530bac2", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -61,47 +61,6 @@ static enum classify_record cp_classify_record (tree type);\n /* Each front end provides its own lang hook initializer.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-/* Tree code classes.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-  tcc_exceptional,\n-#include \"c-common.def\"\n-  tcc_exceptional,\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0,\n-#include \"c-common.def\"\n-  0,\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\",\n-#include \"c-common.def\"\n-  \"@@dummy\",\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n /* Lang hook routines common to C++ and ObjC++ appear in cp/cp-objcp-common.c;\n    there should be very few routines below.  */\n "}, {"sha": "d090d8ff0e2fc21eca485b83555cc609e44d0ff0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -926,15 +926,6 @@ struct language_function GTY(())\n   ((NODE) == error_mark_node\t\t\t\t\t\\\n    || ((NODE) && TREE_TYPE ((NODE)) == error_mark_node))\n \f\n-/* C++ language-specific tree codes.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n-enum cplus_tree_code {\n-  CP_DUMMY_TREE_CODE = LAST_C_TREE_CODE,\n-#include \"cp-tree.def\"\n-  LAST_CPLUS_TREE_CODE\n-};\n-#undef DEFTREECODE\n-\n /* TRUE if a tree code represents a statement.  */\n extern bool statement_code_p[MAX_TREE_CODES];\n \n@@ -3865,10 +3856,10 @@ typedef struct operator_name_info_t GTY(())\n \n /* A mapping from tree codes to operator name information.  */\n extern GTY(()) operator_name_info_t operator_name_info\n-  [(int) LAST_CPLUS_TREE_CODE];\n+  [(int) MAX_TREE_CODES];\n /* Similar, but for assignment operators.  */\n extern GTY(()) operator_name_info_t assignment_operator_name_info\n-  [(int) LAST_CPLUS_TREE_CODE];\n+  [(int) MAX_TREE_CODES];\n \n /* A type-qualifier, or bitmask therefore, using the TYPE_QUAL\n    constants.  */"}, {"sha": "32be05cc7c33e2c38eafa3e80b93c513fd5e25cf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -9773,7 +9773,7 @@ grok_op_properties (tree decl, bool complain)\n \tgcc_unreachable ();\n       }\n     while (0);\n-  gcc_assert (operator_code != LAST_CPLUS_TREE_CODE);\n+  gcc_assert (operator_code != MAX_TREE_CODES);\n   SET_OVERLOADED_OPERATOR_CODE (decl, operator_code);\n \n   if (class_type)"}, {"sha": "c2744c9f8fda61051d835c1f013ee98ab6e17eeb", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -89,9 +89,9 @@ cxx_finish (void)\n }\n \n /* A mapping from tree codes to operator name information.  */\n-operator_name_info_t operator_name_info[(int) LAST_CPLUS_TREE_CODE];\n+operator_name_info_t operator_name_info[(int) MAX_TREE_CODES];\n /* Similar, but for assignment operators.  */\n-operator_name_info_t assignment_operator_name_info[(int) LAST_CPLUS_TREE_CODE];\n+operator_name_info_t assignment_operator_name_info[(int) MAX_TREE_CODES];\n \n /* Initialize data structures that keep track of operator names.  */\n "}, {"sha": "b27b2db9b3a2b0d2ac508dc56139340f15085dcf", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -2108,7 +2108,7 @@ write_expression (tree expr)\n \t      /* Unfortunately, there is no easy way to go from the\n \t\t name of the operator back to the corresponding tree\n \t\t code.  */\n-\t      for (i = 0; i < LAST_CPLUS_TREE_CODE; ++i)\n+\t      for (i = 0; i < MAX_TREE_CODES; ++i)\n \t\tif (operator_name_info[i].identifier == member)\n \t\t  {\n \t\t    /* The ABI says that we prefer binary operator"}, {"sha": "794cc41a2d0708626495e210bbb8ed8d2a542264", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -154,40 +154,6 @@ static alias_set_type gfc_get_alias_set (tree);\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-/* A list (chain of TREE_LIST nodes) of all LABEL_DECLs in the function\n-   that have names.  Here so we can clear out their names' definitions\n-   at the end of the function.  */\n-\n-/* Tree code classes.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-\n #define NULL_BINDING_LEVEL (struct binding_level *) NULL\n \n /* A chain of binding_level structures awaiting reuse.  */"}, {"sha": "7fc69142b5d38c9629e46307c2fbb2a9e6d517c1", "filename": "gcc/gencheck.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -24,14 +24,16 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n \n #define DEFTREECODE(SYM, NAME, TYPE, LEN) #SYM,\n+#define END_OF_BASE_TREE_CODES\n \n static const char *const tree_codes[] = {\n-#include \"tree.def\"\n-#include \"c-common.def\"\n-#include \"gencheck.h\"\n+#include \"all-tree.def\"\n (char*) 0\n };\n \n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n+\n static void usage (void);\n \n static void"}, {"sha": "d1201cd70349337c5468d68f189b076d0f116a4f", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -242,7 +242,7 @@ java.stagefeedback: stageprofile-start\n \n #\f\n # .o:.h dependencies.\n-JAVA_TREE_H = $(TREE_H) $(HASHTAB_H) java/java-tree.h java/java-tree.def\n+JAVA_TREE_H = $(TREE_H) $(HASHTAB_H) java/java-tree.h\n \n java/jcf-dump.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(JAVA_TREE_H) \\\n   java/jcf-dump.c java/jcf-reader.c java/jcf.h java/javaop.h java/javaop.def \\"}, {"sha": "a046a0f450a2f4ee1169c78eeb35e2843ce528a0", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -30,15 +30,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"hashtab.h\"\n \n-/* Java language-specific tree codes.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n-enum java_tree_code {\n-  __DUMMY = LAST_AND_UNUSED_TREE_CODE,\n-#include \"java-tree.def\"\n-  LAST_JAVA_TREE_CODE\n-};\n-#undef DEFTREECODE\n-\n struct JCF;\n \n /* Usage of TREE_LANG_FLAG_?:"}, {"sha": "c259da4f484b316d236c34f4eeabdbedb12a1cba", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -69,43 +69,6 @@ static enum classify_record java_classify_record (tree type);\n # define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n \n-/* Table indexed by tree code giving a string containing a character\n-   classifying the tree code.  Possibilities are\n-   t, d, s, c, r, <, 1 and 2.  See java/java-tree.def for details.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-  tcc_exceptional,\n-#include \"java-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0,\n-#include \"java-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\",\n-#include \"java-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n /* Table of machine-independent attributes.  */\n const struct attribute_spec java_attribute_table[] =\n {"}, {"sha": "e4b8a93bf3944c6d512b3001de8571aa6280d90c", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -122,24 +122,6 @@ enum gimplify_status objc_gimplify_expr (tree *, tree *, tree *);\n #define OBJC_TYPE_NAME(TYPE) TYPE_NAME(TYPE)\n #define OBJC_SET_TYPE_NAME(TYPE, NAME) (TYPE_NAME (TYPE) = NAME)\n \n-/* Define the Objective-C or Objective-C++ language-specific tree codes.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n-enum objc_tree_code {\n-#if defined (GCC_CP_TREE_H)\n-  LAST_BASE_TREE_CODE = LAST_CPLUS_TREE_CODE,\n-#else \n-#if defined (GCC_C_TREE_H)\n-  LAST_BASE_TREE_CODE = LAST_C_TREE_CODE,\n-#else\n-  #error You must include <c-tree.h> or <cp/cp-tree.h> before <objc/objc-act.h>\n-#endif\n-#endif\n-#include \"objc-tree.def\"\n-  LAST_OBJC_TREE_CODE\n-};\n-#undef DEFTREECODE\n-\n /* Hash tables to manage the global pool of method prototypes.  */\n \n typedef struct hashed_entry\t*hash;"}, {"sha": "11ba6ac462c84cd1a7d8b6d48749c4ff70daa342", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -56,48 +56,6 @@ static void objc_init_ts (void);\n /* Each front end provides its own lang hook initializer.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-/* Table indexed by tree code giving a string containing a character\n-   classifying the tree code.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-  tcc_exceptional,\n-#include \"c-common.def\"\n-  tcc_exceptional,\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0,\n-#include \"c-common.def\"\n-  0,\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char * const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\",\n-#include \"c-common.def\"\n-  \"@@dummy\",\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n /* Lang hook routines common to C and ObjC appear in c-objc-common.c;\n    there should be very few (if any) routines below.  */\n "}, {"sha": "d595ba22cd7d1ea2627c05525b2e51c7ad98c8ac", "filename": "gcc/objcp/objcp-lang.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -56,53 +56,6 @@ static void objcxx_init_ts (void);\n /* Each front end provides its own lang hook initializer.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-/* Tree code classes.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-  tcc_exceptional,\n-#include \"c-common.def\"\n-  tcc_exceptional,\n-#include \"cp-tree.def\"\n-  tcc_exceptional,\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0,\n-#include \"c-common.def\"\n-  0,\n-#include \"cp-tree.def\"\n-  0,\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\",\n-#include \"c-common.def\"\n-  \"@@dummy\",\n-#include \"cp-tree.def\"\n-  \"@@dummy\",\n-#include \"objc-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n /* Lang hook routines common to C++ and ObjC++ appear in cp/cp-objcp-common.c;\n    there should be very few (if any) routines below.  */\n "}, {"sha": "ae3d270843d533b2b389525acf36a02f10a48751", "filename": "gcc/tree-browser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ftree-browser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ftree-browser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-browser.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -71,11 +71,14 @@ struct tb_tree_code {\n };\n \n #define DEFTREECODE(SYM, STRING, TYPE, NARGS) { SYM, STRING, sizeof (STRING) - 1 },\n+#define END_OF_BASE_TREE_CODES \\\n+  { LAST_AND_UNUSED_TREE_CODE, \"@dummy\", sizeof (\"@dummy\") - 1 },\n static const struct tb_tree_code tb_tree_codes[] =\n {\n-#include \"tree.def\"\n+#include \"all-tree.def\"\n };\n #undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n \n #define TB_TREE_CODE(N) (tb_tree_codes[N].code)\n #define TB_TREE_CODE_TEXT(N) (tb_tree_codes[N].code_string)"}, {"sha": "91b2ec5c0a41ba43534d4d6d8c7c5c5e88c9d00e", "filename": "gcc/tree.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -52,6 +52,44 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"fixed-value.h\"\n \n+/* Tree code classes.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+#define END_OF_BASE_TREE_CODES tcc_exceptional,\n+\n+const enum tree_code_class tree_code_type[] = {\n+#include \"all-tree.def\"\n+};\n+\n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+#define END_OF_BASE_TREE_CODES 0,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"all-tree.def\"\n+};\n+\n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+#define END_OF_BASE_TREE_CODES \"@dummy\",\n+\n+const char *const tree_code_name[] = {\n+#include \"all-tree.def\"\n+};\n+\n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n+\n /* Each tree code class has an associated string representation.\n    These must correspond to the tree_code_class entries.  */\n "}, {"sha": "9c7fff97cea8e520da2154f2c7f6558a1bd33fd6", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ed0531e5b067d780d4a6444027c5b4a399c027/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c0ed0531e5b067d780d4a6444027c5b4a399c027", "patch": "@@ -33,17 +33,16 @@ along with GCC; see the file COPYING3.  If not see\n /* Codes of tree nodes */\n \n #define DEFTREECODE(SYM, STRING, TYPE, NARGS)   SYM,\n+#define END_OF_BASE_TREE_CODES LAST_AND_UNUSED_TREE_CODE,\n \n enum tree_code {\n-#include \"tree.def\"\n-\n-  LAST_AND_UNUSED_TREE_CODE\t/* A convenient way to get a value for\n-\t\t\t\t   NUM_TREE_CODES.  */\n+#include \"all-tree.def\"\n+MAX_TREE_CODES\n };\n \n #undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n \n-#define MAX_TREE_CODES 512\n extern unsigned char tree_contains_struct[MAX_TREE_CODES][64];\n #define CODE_CONTAINS_STRUCT(CODE, STRUCT) (tree_contains_struct[(CODE)][(STRUCT)])\n "}]}