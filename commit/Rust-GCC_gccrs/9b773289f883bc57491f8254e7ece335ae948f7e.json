{"sha": "9b773289f883bc57491f8254e7ece335ae948f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3NzMyODlmODgzYmM1NzQ5MWY4MjU0ZTdlY2UzMzVhZTk0OGY3ZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-07T18:40:08Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-07T18:40:08Z"}, "message": "2004-01-07  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/CollationElementIterator.java\n\t(textIndex): Renamed from index.\n\t* java/text/CollationKey.java\n\t(collator): New member.\n\t(CollationKey): New argument for parent collator.\n\t(equals): Check for same collator, source string and key array.\n\t* java/text/RuleBasedCollator.java:\n\tReformated.\n\t(RuleBasedCollator): Don't re-initialize frenchAccents with default\n\tvalue.\n\t(getCollationElementIterator): Rewritten.\n\t(getCollationKey): Added new argument to CollationKey constructor.\n\nFrom-SVN: r75510", "tree": {"sha": "195faa2550e69c0ed1060d2bf90a2b1c688588a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195faa2550e69c0ed1060d2bf90a2b1c688588a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b773289f883bc57491f8254e7ece335ae948f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b773289f883bc57491f8254e7ece335ae948f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b773289f883bc57491f8254e7ece335ae948f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b773289f883bc57491f8254e7ece335ae948f7e/comments", "author": null, "committer": null, "parents": [{"sha": "677e7ddceed691a4453804e97bb9733e53d4ea4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677e7ddceed691a4453804e97bb9733e53d4ea4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677e7ddceed691a4453804e97bb9733e53d4ea4d"}], "stats": {"total": 88, "additions": 57, "deletions": 31}, "files": [{"sha": "983e26a798579e736d0a7efc76c46d5eb3463f33", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9b773289f883bc57491f8254e7ece335ae948f7e", "patch": "@@ -1,3 +1,18 @@\n+2004-01-07  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/CollationElementIterator.java\n+\t(textIndex): Renamed from index.\n+\t* java/text/CollationKey.java\n+\t(collator): New member.\n+\t(CollationKey): New argument for parent collator.\n+\t(equals): Check for same collator, source string and key array.\n+\t* java/text/RuleBasedCollator.java:\n+\tReformated.\n+\t(RuleBasedCollator): Don't re-initialize frenchAccents with default\n+\tvalue.\n+\t(getCollationElementIterator): Rewritten.\n+\t(getCollationKey): Added new argument to CollationKey constructor.\n+\n 2004-01-07  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/DatagramChannelImpl.java"}, {"sha": "ecc95231d3095f0f0291493b778750dca0c58a0a", "filename": "libjava/java/text/CollationElementIterator.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationElementIterator.java?ref=9b773289f883bc57491f8254e7ece335ae948f7e", "patch": "@@ -76,7 +76,7 @@\n   /**\n    * This is the index into the String where we are currently scanning.\n    */\n-  int index;\n+  int textIndex;\n \n   // A piece of lookahead.\n   boolean lookahead_set;\n@@ -107,7 +107,7 @@\n    */\n   public int next()\n   {\n-    if (index == text.length())\n+    if (textIndex == text.length())\n       return NULLORDER;\n \n     return collator.ceiNext (this);\n@@ -133,7 +133,7 @@ public static final int primaryOrder(int order)\n    */\n   public void reset()\n   {\n-    index = 0;\n+    textIndex = 0;\n   }\n \n   /**\n@@ -175,7 +175,7 @@ public static final short tertiaryOrder(int order)\n   public void setText(String text)\n   {\n     this.text = text;\n-    this.index = 0;\n+    this.textIndex = 0;\n     this.lookahead_set = false;\n     this.lookahead = 0;\n   }\n@@ -190,6 +190,6 @@ public void setText(String text)\n    */\n   public int getOffset()\n   {\n-    return index;\n+    return textIndex;\n   }\n }"}, {"sha": "8859b320463259490be23f5ec3bf42c88bfe240c", "filename": "libjava/java/text/CollationKey.java", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2Fjava%2Ftext%2FCollationKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2Fjava%2Ftext%2FCollationKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationKey.java?ref=9b773289f883bc57491f8254e7ece335ae948f7e", "patch": "@@ -65,6 +65,11 @@\n  */\n public final class CollationKey implements Comparable\n {\n+  /**\n+   * This is the <code>Collator</code> this object was created from.\n+   */\n+  private Collator collator;\n+\n   /**\n    * This is the <code>String</code> this object represents.\n    */\n@@ -75,9 +80,10 @@ public final class CollationKey implements Comparable\n    */\n   private int[] key;\n \n-  CollationKey (CollationElementIterator iter, String originalText,\n-\t\tint strength)\n+  CollationKey(Collator collator, CollationElementIterator iter,\n+\t       String originalText, int strength)\n   {\n+    this.collator = collator;\n     this.originalText = originalText;\n \n     // Compute size of required array.\n@@ -153,12 +159,14 @@ public boolean equals (Object obj)\n \n     CollationKey ck = (CollationKey) obj;\n \n-    if (key.length != ck.key.length)\n+    if (ck.collator != collator)\n       return false;\n \n-    for (int i = 0; i < key.length; ++i)\n-      if (key[i] != ck.key[i])\n-\treturn false;\n+    if (!ck.getSourceString ().equals (getSourceString ()))\n+      return false;\n+\n+    if (!ck.toByteArray ().equals (toByteArray ()))\n+      return false;\n \n     return true;\n   }"}, {"sha": "5b1dc0cfbede7fb5fef4241281479f29d199bc6a", "filename": "libjava/java/text/RuleBasedCollator.java", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b773289f883bc57491f8254e7ece335ae948f7e/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java?ref=9b773289f883bc57491f8254e7ece335ae948f7e", "patch": "@@ -152,13 +152,12 @@ public class RuleBasedCollator extends Collator\n     String key;\n     char relation;\n \n-    CollationElement (String key, char relation)\n+    CollationElement(String key, char relation)\n     {\n       this.key = key;\n       this.relation = relation;\n     }\n-\n-  } // inner class CollationElement\n+  }\n \n   // True if we are using French-style accent ordering.\n   private boolean frenchAccents;\n@@ -188,21 +187,21 @@ public class RuleBasedCollator extends Collator\n    */\n   public RuleBasedCollator(String rules) throws ParseException\n   {\n-    if (rules.equals (\"\"))\n-      throw new ParseException (\"empty rule set\", 0);\n+    if (rules.equals(\"\"))\n+      throw new ParseException(\"empty rule set\", 0);\n     \n     this.rules = rules;\n-    this.frenchAccents = false;\n \n     // We keep each rule in order in a vector.  At the end we traverse\n     // the vector and compute collation values from it.\n     int insertion_index = 0;\n     Vector vec = new Vector ();\n \n-    StringBuffer argument = new StringBuffer ();\n-\n+    int index;\n+    StringBuffer argument = new StringBuffer();\n     int len = rules.length();\n-    for (int index = 0; index < len; ++index)\n+\n+    for (index = 0; index < len; ++index)\n       {\n \tchar c = rules.charAt(index);\n \n@@ -339,7 +338,7 @@ int ceiNext (CollationElementIterator cei)\n \treturn cei.lookahead;\n       }\n \n-    int save = cei.index;\n+    int save = cei.textIndex;\n     int max = cei.text.length();\n     String s = null;\n \n@@ -368,7 +367,7 @@ int ceiNext (CollationElementIterator cei)\n       }\n \n     // Update state.\n-    cei.index = i;\n+    cei.textIndex = i;\n \n     if (obj == null)\n       {\n@@ -490,10 +489,12 @@ public boolean equals(Object obj)\n    */\n   public CollationElementIterator getCollationElementIterator(String source)\n   {\n-    StringBuffer expand = new StringBuffer (source.length());\n-    int max = source.length();\n-    for (int i = 0; i < max; ++i)\n-      decomposeCharacter (source.charAt(i), expand);\n+    int len = source.length();\n+    StringBuffer expand = new StringBuffer(len);\n+    \n+    for (int index = 0; index < len; ++index)\n+      decomposeCharacter(source.charAt(index), expand);\n+    \n     return new CollationElementIterator(this, expand.toString());\n   }\n \n@@ -508,11 +509,13 @@ public CollationElementIterator getCollationElementIterator(String source)\n    */\n   public CollationElementIterator getCollationElementIterator(CharacterIterator source)\n   {\n-    StringBuffer expand = new StringBuffer();\n-    for (char c = source.first ();\n+    StringBuffer expand = new StringBuffer(\"\");\n+    \n+    // Right now we assume that we will read from the beginning of the string.\n+    for (char c = source.first();\n \t c != CharacterIterator.DONE;\n-\t c = source.next ())\n-      decomposeCharacter (c, expand);\n+\t c = source.next())\n+      decomposeCharacter(c, expand);\n \n     return new CollationElementIterator(this, expand.toString());\n   }\n@@ -530,7 +533,7 @@ public CollationElementIterator getCollationElementIterator(CharacterIterator so\n    */\n   public CollationKey getCollationKey(String source)\n   {\n-    return new CollationKey(getCollationElementIterator(source), source,\n+    return new CollationKey(this, getCollationElementIterator(source), source,\n \t\t\t    strength);\n   }\n "}]}