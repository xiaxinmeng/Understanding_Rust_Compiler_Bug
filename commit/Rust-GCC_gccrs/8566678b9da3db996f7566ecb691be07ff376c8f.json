{"sha": "8566678b9da3db996f7566ecb691be07ff376c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2NjY3OGI5ZGEzZGI5OTZmNzU2NmVjYjY5MWJlMDdmZjM3NmM4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-06-04T15:02:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-06-04T15:02:07Z"}, "message": "Fix expand_expr_real_1 handling of BLKmode bitfield references\n\nThe handling of bitfield references in expand_expr_real_1 includes:\n\n            machine_mode ext_mode = mode;\n\n            if (ext_mode == BLKmode\n                && ! (target != 0 && MEM_P (op0)\n                      && MEM_P (target)\n                      && multiple_p (bitpos, BITS_PER_UNIT)))\n              ext_mode = int_mode_for_size (bitsize, 1).else_blk ();\n\n            if (ext_mode == BLKmode)\n              {\n                [...]\n                gcc_assert (MEM_P (op0)\n\nHere \"mode\" is the TYPE_MODE of the result, so when mode == BLKmode,\nthe target must be a MEM if nonnull, since no other rtl objects can\nhave BLKmode.  But there's no guarantee that the source value op0 is also\nBLKmode and thus also a MEM: we can reach the assert for any source if\nthe bitsize being extracted is larger than the largest integer mode\n(or larger than MAX_FIXED_MODE_SIZE).\n\nThis triggered for SVE with -msve-vector-bits=512, where we could\nsometimes try to extract a BLKmode value from a 512-bit vector,\nand where int_mode_for_size would rightly fail for large bitsizes.\n\nThe patch reuses the existing:\n\n\t/* Otherwise, if this is a constant or the object is not in memory\n\t   and need be, put it there.  */\n\telse if (CONSTANT_P (op0) || (!MEM_P (op0) && must_force_mem))\n\t  {\n\t    memloc = assign_temp (TREE_TYPE (tem), 1, 1);\n\t    emit_move_insn (memloc, op0);\n\t    op0 = memloc;\n\t    clear_mem_expr = true;\n\t  }\n\nto handle this case.\n\n2018-05-29  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* expr.c (expand_expr_real_1): Force the operand into memory if\n\tits TYPE_MODE is BLKmode and if there is no integer mode for\n\tthe number of bits being extracted.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/extract_5.c: New test.\n\nFrom-SVN: r261150", "tree": {"sha": "140b2b6b07bda90ed0314c7223b1b643c120011a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/140b2b6b07bda90ed0314c7223b1b643c120011a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8566678b9da3db996f7566ecb691be07ff376c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8566678b9da3db996f7566ecb691be07ff376c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8566678b9da3db996f7566ecb691be07ff376c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8566678b9da3db996f7566ecb691be07ff376c8f/comments", "author": null, "committer": null, "parents": [{"sha": "1fc9aa543f41a1485187c96806950795a7966974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc9aa543f41a1485187c96806950795a7966974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc9aa543f41a1485187c96806950795a7966974"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "78541036ba9e2b1d3f3b37f57dc42ae85fbc4c06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8566678b9da3db996f7566ecb691be07ff376c8f", "patch": "@@ -1,3 +1,9 @@\n+2018-06-04  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* expr.c (expand_expr_real_1): Force the operand into memory if\n+\tits TYPE_MODE is BLKmode and if there is no integer mode for\n+\tthe number of bits being extracted.\n+\n 2018-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85832"}, {"sha": "f15037adfb63a7fab83af546bda5787451e2ce1e", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8566678b9da3db996f7566ecb691be07ff376c8f", "patch": "@@ -10579,6 +10579,8 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t   to a larger size.  */\n \tmust_force_mem = (offset\n \t\t\t  || mode1 == BLKmode\n+\t\t\t  || (mode == BLKmode\n+\t\t\t      && !int_mode_for_size (bitsize, 1).exists ())\n \t\t\t  || maybe_gt (bitpos + bitsize,\n \t\t\t\t       GET_MODE_BITSIZE (mode2)));\n "}, {"sha": "459958eb5eaa88a9f7b74259752842c200e9581f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8566678b9da3db996f7566ecb691be07ff376c8f", "patch": "@@ -1,3 +1,7 @@\n+2018-06-04  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/extract_5.c: New test.\n+\n 2018-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85832"}, {"sha": "652ba838dcf24891a92c48ce168d379467b1fd1f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_5.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8566678b9da3db996f7566ecb691be07ff376c8f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_5.c?ref=8566678b9da3db996f7566ecb691be07ff376c8f", "patch": "@@ -0,0 +1,71 @@\n+/* Originally from gcc.dg/vect/vect-alias-check-10.c.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#define N 87\n+#define M 6\n+\n+typedef signed char sc;\n+typedef unsigned char uc;\n+typedef signed short ss;\n+typedef unsigned short us;\n+typedef int si;\n+typedef unsigned int ui;\n+typedef signed long long sll;\n+typedef unsigned long long ull;\n+\n+#define FOR_EACH_TYPE(M) \\\n+  M (sc) M (uc) \\\n+  M (ss) M (us) \\\n+  M (si) M (ui) \\\n+  M (sll) M (ull) \\\n+  M (float) M (double)\n+\n+#define TEST_VALUE(I) ((I) * 5 / 2)\n+\n+#define ADD_TEST(TYPE)\t\t\t\t\\\n+  void __attribute__((noinline, noclone))\t\\\n+  test_##TYPE (TYPE *a, int step)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\ta[i * step + 0] = a[i * step + 0] + 1;\t\\\n+\ta[i * step + 1] = a[i * step + 1] + 2;\t\\\n+\ta[i * step + 2] = a[i * step + 2] + 4;\t\\\n+\ta[i * step + 3] = a[i * step + 3] + 8;\t\\\n+      }\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+  void __attribute__((noinline, noclone))\t\\\n+  ref_##TYPE (TYPE *a, int step)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\ta[i * step + 0] = a[i * step + 0] + 1;\t\\\n+\ta[i * step + 1] = a[i * step + 1] + 2;\t\\\n+\ta[i * step + 2] = a[i * step + 2] + 4;\t\\\n+\ta[i * step + 3] = a[i * step + 3] + 8;\t\\\n+\tasm volatile (\"\");\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  }\n+\n+#define DO_TEST(TYPE)\t\t\t\t\t\\\n+  for (int j = -M; j <= M; ++j)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TYPE a[N * M], b[N * M];\t\t\t\t\\\n+      for (int i = 0; i < N * M; ++i)\t\t\t\\\n+\ta[i] = b[i] = TEST_VALUE (i);\t\t\t\\\n+      int offset = (j < 0 ? N * M - 4 : 0);\t\t\\\n+      test_##TYPE (a + offset, j);\t\t\t\\\n+      ref_##TYPE (b + offset, j);\t\t\t\\\n+      if (__builtin_memcmp (a, b, sizeof (a)) != 0)\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+    }\n+\n+FOR_EACH_TYPE (ADD_TEST)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_TYPE (DO_TEST)\n+  return 0;\n+}"}]}