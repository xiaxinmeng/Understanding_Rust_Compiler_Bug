{"sha": "36537a1c41adabc6da23ae19e7c3a933582b19dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY1MzdhMWM0MWFkYWJjNmRhMjNhZTE5ZTdjM2E5MzM1ODJiMTlkZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-05-22T19:37:48Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-05-22T19:37:48Z"}, "message": "PR middle-end/85359 - duplicate -Wstringop-overflow for a strcmp call with a nonstring pointer\n\ngcc/ChangeLog:\n\n\tPR middle-end/85359\n\t* builtins.c (expand_builtin_strcpy): Call maybe_warn_nonstring_arg\n\tonly when expasion succeeds.\n\t(expand_builtin_strcmp): Same.\n\t(expand_builtin_strncmp): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/85359\n\t* gcc.dg/attr-nonstring.c: New test.\n\nFrom-SVN: r260550", "tree": {"sha": "a8f5351bc207a35be81c86a6e2470a214629639e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8f5351bc207a35be81c86a6e2470a214629639e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36537a1c41adabc6da23ae19e7c3a933582b19dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36537a1c41adabc6da23ae19e7c3a933582b19dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36537a1c41adabc6da23ae19e7c3a933582b19dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36537a1c41adabc6da23ae19e7c3a933582b19dd/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aab778d3825052d262e3fc6d87af67e7cc196273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab778d3825052d262e3fc6d87af67e7cc196273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab778d3825052d262e3fc6d87af67e7cc196273"}], "stats": {"total": 173, "additions": 161, "deletions": 12}, "files": [{"sha": "79a5e374d5a88acc846b07587e16a3521549da7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36537a1c41adabc6da23ae19e7c3a933582b19dd", "patch": "@@ -24,6 +24,14 @@\n \n \t* config/aarch64/aarch64.md (*ashift<mode>_extv_bfiz): New pattern.\n \n+2018-05-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/85359\n+\t* builtins.c (expand_builtin_strcpy): Call maybe_warn_nonstring_arg\n+\tonly when expasion succeeds.\n+\t(expand_builtin_strcmp): Same.\n+\t(expand_builtin_strncmp): Same.\n+\n 2018-05-22  Martin Sebor  <msebor@redhat.com>\n \n \t* calls.c (maybe_warn_nonstring_arg): Fix a typo in a comment."}, {"sha": "841c1ef4da798de64897b8b7c2d3f2db50ad3a7a", "filename": "gcc/builtins.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=36537a1c41adabc6da23ae19e7c3a933582b19dd", "patch": "@@ -3783,7 +3783,17 @@ expand_builtin_strcpy (tree exp, rtx target)\n \t\t    src, destsize);\n     }\n \n-  return expand_builtin_strcpy_args (dest, src, target);\n+  if (rtx ret = expand_builtin_strcpy_args (dest, src, target))\n+    {\n+      /* Check to see if the argument was declared attribute nonstring\n+\t and if so, issue a warning since at this point it's not known\n+\t to be nul-terminated.  */\n+      tree fndecl = get_callee_fndecl (exp);\n+      maybe_warn_nonstring_arg (fndecl, exp);\n+      return ret;\n+    }\n+\n+  return NULL_RTX;\n }\n \n /* Helper function to do the actual work for expand_builtin_strcpy.  The\n@@ -4576,14 +4586,14 @@ expand_builtin_strcmp (tree exp, ATTRIBUTE_UNUSED rtx target)\n \t}\n     }\n \n-  /* Check to see if the argument was declared attribute nonstring\n-     and if so, issue a warning since at this point it's not known\n-     to be nul-terminated.  */\n   tree fndecl = get_callee_fndecl (exp);\n-  maybe_warn_nonstring_arg (fndecl, exp);\n-\n   if (result)\n     {\n+      /* Check to see if the argument was declared attribute nonstring\n+\t and if so, issue a warning since at this point it's not known\n+\t to be nul-terminated.  */\n+      maybe_warn_nonstring_arg (fndecl, exp);\n+\n       /* Return the value in the proper mode for this function.  */\n       machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n       if (GET_MODE (result) == mode)\n@@ -4680,14 +4690,14 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n \t\t\t\t\t arg2_rtx, TREE_TYPE (len), arg3_rtx,\n \t\t\t\t\t MIN (arg1_align, arg2_align));\n \n-  /* Check to see if the argument was declared attribute nonstring\n-     and if so, issue a warning since at this point it's not known\n-     to be nul-terminated.  */\n   tree fndecl = get_callee_fndecl (exp);\n-  maybe_warn_nonstring_arg (fndecl, exp);\n-\n   if (result)\n     {\n+      /* Check to see if the argument was declared attribute nonstring\n+\t and if so, issue a warning since at this point it's not known\n+\t to be nul-terminated.  */\n+      maybe_warn_nonstring_arg (fndecl, exp);\n+\n       /* Return the value in the proper mode for this function.  */\n       mode = TYPE_MODE (TREE_TYPE (exp));\n       if (GET_MODE (result) == mode)"}, {"sha": "35bcff7c6e579b0e890187756daa03f20fef69d9", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=36537a1c41adabc6da23ae19e7c3a933582b19dd", "patch": "@@ -1671,7 +1671,10 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n   /* Determine the range of the bound argument (if specified).  */\n   tree bndrng[2] = { NULL_TREE, NULL_TREE };\n   if (bound)\n-    get_size_range (bound, bndrng);\n+    {\n+      STRIP_NOPS (bound);\n+      get_size_range (bound, bndrng);\n+    }\n \n   if (*lenrng)\n     {"}, {"sha": "bd1007f761e0358ec9ef0be51a1f157706dcc7bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36537a1c41adabc6da23ae19e7c3a933582b19dd", "patch": "@@ -1,3 +1,8 @@\n+2018-05-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/85359\n+\t* gcc.dg/attr-nonstring.c: New test.\n+\n 2018-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/85345"}, {"sha": "46f5c0d7c59e0e5cf2b22d38f579475f64d55d8a", "filename": "gcc/testsuite/gcc.dg/attr-nonstring.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-nonstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36537a1c41adabc6da23ae19e7c3a933582b19dd/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-nonstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-nonstring.c?ref=36537a1c41adabc6da23ae19e7c3a933582b19dd", "patch": "@@ -0,0 +1,123 @@\n+/* PR middle-end/85359 - duplicate -Wstringop-overflow for a strcmp call\n+   with a nonstring pointer\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+typedef __SIZE_TYPE__       size_t;\n+typedef __builtin_va_list   va_list;\n+\n+int printf (const char*, ...);\n+int puts (const char*);\n+int puts_unlocked (const char*);\n+int sprintf (char*, const char*, ...);\n+int snprintf (char*, size_t, const char*, ...);\n+int vsprintf (char*, const char*, va_list);\n+int vsnprintf (char*, size_t, const char*, va_list);\n+\n+int strcmp (const char*, const char*);\n+int strncmp (const char*, const char*, size_t);\n+\n+char* stpcpy (char*, const char*);\n+char* stpncpy (char*, const char*, size_t);\n+\n+char* strcat (char*, const char*);\n+char* strncat (char*, const char*, size_t);\n+\n+char* strcpy (char*, const char*);\n+char* strncpy (char*, const char*, size_t);\n+\n+char* strchr (const char*, int);\n+char* strrchr (const char*, int);\n+char* strstr (const char*, const char*);\n+char* strdup (const char*);\n+size_t strlen (const char*);\n+size_t strnlen (const char*, size_t);\n+char* strndup (const char*, size_t);\n+\n+#define NONSTRING __attribute__ ((nonstring))\n+\n+extern char ns5[5] NONSTRING;\n+\n+int strcmp_nonstring_1 (NONSTRING const char *a, const char *b)\n+{\n+  /* dg-warning matches one or more instances of the warning so it's\n+     no good on its own.  Use dg-regexp instead to verify that just\n+     one instance of the warning is issued.  See gcc.dg/pr64223-1\n+     for a different approach.  */\n+  return strcmp (a, b);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strcmp. argument 1 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strcmp\" } */\n+}\n+\n+int strcmp_nonstring_2 (const char *a, NONSTRING const char *b)\n+{\n+  return strcmp (a, b);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strcmp. argument 2 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strcmp\" } */\n+}\n+\n+int strncmp_nonstring_1 (const char *s)\n+{\n+  return strncmp (s, ns5, sizeof ns5 + 1);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strncmp. argument 2 declared attribute .nonstring. \\[^\\n\\r\\]+ \\\\\\[-Wstringop-overflow=]\" \"strncmp\" } */\n+}\n+\n+int strncmp_nonstring_2 (const char *s)\n+{\n+  return strncmp (ns5, s, sizeof ns5 + 1);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strncmp. argument 1 declared attribute .nonstring. \\[^\\n\\r\\]+ \\\\\\[-Wstringop-overflow=]\" \"strncmp\" } */\n+}\n+\n+char* stpcpy_nonstring (char *d, NONSTRING const char *s)\n+{\n+  return stpcpy (d, s);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .stpcpy. argument 2 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"stpcpy\" } */\n+}\n+\n+char* stpncpy_nonstring (char *d)\n+{\n+  return stpncpy (d, ns5, sizeof ns5 + 1);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .stpncpy. argument 2 declared attribute .nonstring. \\[^\\n\\r\\]+ \\\\\\[-Wstringop-overflow=]\" \"stpncpy\" } */\n+}\n+\n+char* strchr_nonstring (NONSTRING const char *s, int c)\n+{\n+  return strchr (s, c);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strchr. argument 1 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strchr\" } */\n+}\n+\n+char* strrchr_nonstring (NONSTRING const char *s, int c)\n+{\n+  return strrchr (s, c);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strrchr. argument 1 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strrchr\" } */\n+}\n+\n+char* strcpy_nonstring (char *d, NONSTRING const char *s)\n+{\n+  return strcpy (d, s);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strcpy. argument 2 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strcpy\" } */\n+}\n+\n+char* strncpy_nonstring (char *d)\n+{\n+  return strncpy (d, ns5, sizeof ns5 + 1);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strncpy. argument 2 declared attribute .nonstring. \\[^\\n\\r\\]+ \\\\\\[-Wstringop-overflow=]\" \"strncpy\" } */\n+}\n+\n+char* strstr_nonstring_1 (NONSTRING const char *a, const char *b)\n+{\n+  return strstr (a, b);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strstr. argument 1 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strstr\" } */\n+}\n+\n+char* strstr_nonstring_2 (const char *a, NONSTRING const char *b)\n+{\n+  return strstr (a, b);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strstr. argument 2 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strstr\" } */\n+}\n+\n+char* stdup_nonstring (NONSTRING const char *s)\n+{\n+  return strdup (s);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strdup. argument 1 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strdup\" } */\n+}\n+\n+size_t strlen_nonstring (NONSTRING const char *s)\n+{\n+  return strlen (s);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .strlen. argument 1 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"strlen\" } */\n+}\n+\n+int printf_nonstring (NONSTRING const char *s)\n+{\n+  return printf (s);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .printf. argument 1 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"printf\" } */\n+}\n+\n+int sprintf_nonstring_2 (char *d, NONSTRING const char *s)\n+{\n+  return sprintf (d, s);  /* { dg-regexp \"\\[^\\n\\r\\]+: warning: .sprintf. argument 2 declared attribute .nonstring. \\\\\\[-Wstringop-overflow=]\" \"sprintf\" } */\n+}"}]}