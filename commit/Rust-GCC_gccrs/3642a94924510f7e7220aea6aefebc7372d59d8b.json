{"sha": "3642a94924510f7e7220aea6aefebc7372d59d8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0MmE5NDkyNDUxMGY3ZTcyMjBhZWE2YWVmZWJjNzM3MmQ1OWQ4Yg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-26T21:14:19Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-26T21:14:19Z"}, "message": "eh_term_handler.cc: Add comment about embedded systems.\n\n2002-12-26  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* libsupc++/eh_term_handler.cc:  Add comment about embedded systems.\n\t* docs/html/debug.html:  Cosmetic and HTML changes.  Point to\n\tverb-term notes.\n\t* docs/html/documentation.html:  Link to the FAQ.\n\t* docs/html/17_intro/howto.html:  Mention use of isatty(3).\n\t* docs/html/19_diagnostics/howto.html:  Update verb-term description.\n\nFrom-SVN: r60528", "tree": {"sha": "f66065999fa229c8f6d604e81b12a0d16ef6c490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f66065999fa229c8f6d604e81b12a0d16ef6c490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3642a94924510f7e7220aea6aefebc7372d59d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3642a94924510f7e7220aea6aefebc7372d59d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3642a94924510f7e7220aea6aefebc7372d59d8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3642a94924510f7e7220aea6aefebc7372d59d8b/comments", "author": null, "committer": null, "parents": [{"sha": "f411c849f0c36e909d82823c517fd6c6c9a457e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f411c849f0c36e909d82823c517fd6c6c9a457e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f411c849f0c36e909d82823c517fd6c6c9a457e2"}], "stats": {"total": 107, "additions": 62, "deletions": 45}, "files": [{"sha": "32ee235c4fc7e7fc81ed19abd58fd6b2c6e74d0f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3642a94924510f7e7220aea6aefebc7372d59d8b", "patch": "@@ -1,3 +1,12 @@\n+2002-12-26  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* libsupc++/eh_term_handler.cc:  Add comment about embedded systems.\n+\t* docs/html/debug.html:  Cosmetic and HTML changes.  Point to\n+\tverb-term notes.\n+\t* docs/html/documentation.html:  Link to the FAQ.\n+\t* docs/html/17_intro/howto.html:  Mention use of isatty(3).\n+\t* docs/html/19_diagnostics/howto.html:  Update verb-term description.\n+\n 2002-12-25  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* src/vterminate.cc:  Move to..."}, {"sha": "9d9bbddb13023c9035bec74880d325e8afdfade3", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=3642a94924510f7e7220aea6aefebc7372d59d8b", "patch": "@@ -189,6 +189,9 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n    <p>For each entry, we give the section number of the standard, when\n       applicable.  This list is probably incomplet and inkorrekt.\n    </p>\n+   <p><strong>[1.9]/11 #3</strong> If <code>isatty(3)</code> is true, then\n+      interactive stream support is implied.\n+   </p>\n    <p><strong>[17.4.4.5]</strong> Non-reentrant functions are probably best\n       discussed in the various sections on multithreading (see above).\n    </p>"}, {"sha": "dbfcc9cb054ba0a4b0a564612a81e82e2ae26922", "filename": "libstdc++-v3/docs/html/19_diagnostics/howto.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html?ref=3642a94924510f7e7220aea6aefebc7372d59d8b", "patch": "@@ -169,6 +169,13 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n    %</pre>\n    <p>The 'Aborted' line comes from the call to abort(), of course.\n    </p>\n+   <p><strong>UPDATE:</strong> Starting with GCC 3.4, this is the default\n+      termination handler; nothing need be done to use it.  To go back to\n+      the previous &quot;silent death&quot; method, simply include\n+      <code>&lt;exception&gt;<code> and <code>&lt;cstdlib&gt;<code>, and call\n+   </p>\n+   <pre>\n+       std::set_terminate (std::abort);</pre>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>"}, {"sha": "ff20d249c36025fc0d27f1521792a22ff70b2b37", "filename": "libstdc++-v3/docs/html/debug.html", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html?ref=3642a94924510f7e7220aea6aefebc7372d59d8b", "patch": "@@ -28,16 +28,14 @@ <h1 class=\"centered\"><a name=\"top\">Debugging schemes and strategies</a></h1>\n \n <!-- ####################################################### -->\n <hr />\n-<p>\n-   There are numerous things that can be done to improve the ease with\n+<p>There are numerous things that can be done to improve the ease with\n    which C++ binaries are debugged when using the GNU C++\n    tool chain. Here are some things to keep in mind when debugging C++\n    code with GNU tools.\n </p>\n \n <h3 class=\"left\"><a name=\"g++\">Compiler flags determine debug info</a></h3>\n-<p>\n-   The default optimizations and debug flags for a libstdc++ build are\n+<p>The default optimizations and debug flags for a libstdc++ build are\n    <code>-g -O2</code>. However, both debug and optimization flags can\n    be varied to change debugging characteristics. For instance,\n    turning off all optimization via the <code>-g -O0</code> flag will\n@@ -53,53 +51,45 @@ <h3 class=\"left\"><a name=\"g++\">Compiler flags determine debug info</a></h3>\n    in the gcc sources.\n </p>\n \n-<p>\n-   Many other options are available: please see\n+<p>Many other options are available: please see\n <a href=http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging%20Options> \"Options for Debugging Your Program\" </a>\n    in Using the GNU Compiler Collection (GCC) for a complete list.\n </p>\n \n \n <h3 class=\"left\"><a name=\"lib\">Using special flags to make a debug binary</a></h3>\n-<p>\n-   There are two ways to build libstdc++ with debug flags. The first\n+<p>There are two ways to build libstdc++ with debug flags. The first\n    is to run make from the toplevel in a freshly-configured tree with\n    specialized debug <code>CXXFLAGS</code>, as in <dd> <code> make\n    CXXFLAGS='-g3 -O0' all </code></dd>\n </p>\n \n-<p>\n-   This quick and dirty approach is often sufficient for quick\n+<p>This quick and dirty approach is often sufficient for quick\n    debugging tasks, but the lack of state can be confusing in the long\n    term.\n </p>\n \n-<p>\n-   A second approach is to use the configuration flags \n+<p>A second approach is to use the configuration flags \n </p>\n \n-   <dd><code>--enable-debug  </code></dd>\n+   <dd><code>--enable-debug</code></dd>\n \n-<p>\n-   and perhaps \n-</p>\n+<p>and perhaps</p>\n \n-   <dd><code>--enable-debug-flags  </code></dd>\n+   <dd><code>--enable-debug-flags='...'</code></dd>\n \n-<p>\n-   to create a separate debug build. Both the normal build and the\n+<p>to create a separate debug build. Both the normal build and the\n    debug build will persist, without having to specify\n    <code>CXXFLAGS</code>, and the debug library will be installed in a\n    separate directory tree, in <code>(prefix)/lib/debug</code>. For\n    more information, look at the configuration options document \n-<a href=http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html> here</a>\n+<a href=http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html>here</a>\n </p>\n \n \n <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n \n-<p>\n-   There are various third party memory tracing and debug utilities\n+<p>There are various third party memory tracing and debug utilities\n    that can be used to provide detailed memory allocation information\n    about C++ code. An exhaustive list of tools is not going to be\n    attempted, but include <code>mtrace</code>, <code>valgrind</code>,\n@@ -108,8 +98,7 @@ <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n    forget right now.\n </p>\n \n-<p>\n-   Regardless of the memory debugging tool being used, there is one\n+<p>Regardless of the memory debugging tool being used, there is one\n    thing of great importance to keep in mind when debugging C++ code\n    that uses <code>new</code> and <code>delete</code>:\n    there are different kinds of allocation schemes that can be used by\n@@ -118,14 +107,13 @@ <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n    document </a> and look specifically for <code>GLIBCPP_FORCE_NEW</code>. \n </p>\n \n-<p>\n-   In a nutshell, the default allocator used by <code>\n+<p>In a nutshell, the default allocator used by <code>\n    std::allocator</code> is a high-performance pool allocator, and can\n    give the mistaken impression that memory is being leaked, when in\n    reality the memory is reclaimed after program termination.\n </p>\n \n-<p> For valgrind, there are some specific items to keep in mind. First\n+<p>For valgrind, there are some specific items to keep in mind. First\n    of all, use a version of valgrind that will work with current GNU\n    C++ tools: the first that can do this is valgrind 1.0.4, but later\n    versions should work at least as well. Second of all, use a\n@@ -134,15 +122,14 @@ <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n    cluttering debug information. \n </p>\n \n-<p>\n-   Fourth, it may be necessary to force deallocation in other\n+<p>Fourth, it may be necessary to force deallocation in other\n    libraries as well, namely the \"C\" library. On linux, this can be\n    accomplished with the appropriate use of the\n    <code>__cxa_atexit</code> or <code>atexit</code> functions.\n </p>\n \n <pre>\n-   #include <cstdlib>\n+   #include &lt;cstdlib&gt;\n \n    extern \"C\" void __libc_freeres(void);\n \n@@ -151,15 +138,13 @@ <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n    int main()\n    {\n      atexit(__libc_freeres);\n-     do_test();\n+     do_something();\n      return 0;\n    }\n </pre>\n \n \n-<p>\n-   or, using <code>__cxa_atexit</code>:\n-</p>\n+<p>or, using <code>__cxa_atexit</code>:</p>\n \n <pre>\n    extern \"C\" void __libc_freeres(void);\n@@ -171,14 +156,13 @@ <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n    {\n       extern void* __dso_handle __attribute__ ((__weak__));\n       __cxa_atexit((void (*) (void *)) __libc_freeres, NULL, \n-\t           &__dso_handle ? __dso_handle : NULL);\n+                   &amp;__dso_handle ? __dso_handle : NULL);\n       do_test();\n       return 0;\n    }\n </pre>\n \n-<p>\n-   Suggested valgrind flags, given the suggestions above about setting\n+<p>Suggested valgrind flags, given the suggestions above about setting\n    up the runtime environment, library, and test file, might be:\n  \n    <dd><code>valgrind -v --num-callers=20 --leak-check=yes\n@@ -187,14 +171,13 @@ <h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n \n \n <h3 class=\"left\"><a name=\"gdb\">Some gdb strategies</a></h3>\n-<p>\n-   Many options are available for gdb itself: please see <a\n-href=http://sources.redhat.com/gdb/current/onlinedocs/gdb_13.html#SEC109>\n-\"GDB features for C++\" </a> in the gdb documentation. Also\n-recommended: the other parts of this manual.\n-</p>\n-<p> \n-   These settings can either be switched on in at the gdb command\n+<p>Many options are available for gdb itself: please see <a\n+   href=http://sources.redhat.com/gdb/current/onlinedocs/gdb_13.html#SEC109>\n+   \"GDB features for C++\" </a> in the gdb documentation. Also\n+   recommended: the other parts of this manual.\n+</p>\n+\n+<p>These settings can either be switched on in at the gdb command\n    line, or put into a .gdbint file to establish default debugging\n    characteristics, like so:\n </p>\n@@ -209,6 +192,13 @@ <h3 class=\"left\"><a name=\"gdb\">Some gdb strategies</a></h3>\n </pre>\n \n \n+<h3 class=\"left\"><a name=\"verbterm\">Tracking uncaught exceptions</a></h3>\n+<p>The <a href=\"19_diagnostics/howto.html#4\">verbose termination handler</a>\n+   gives information about uncaught exceptions which are killing the\n+   program.  It is described in the linked-to page.\n+</p>\n+\n+\n <p>Return <a href=\"#top\">to the top of the page</a> or\n    <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>.\n </p>"}, {"sha": "c0e3cdb112db743090c54455ea0294f77afdbd46", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=3642a94924510f7e7220aea6aefebc7372d59d8b", "patch": "@@ -39,6 +39,8 @@ <h2><a name=\"1\">Introduction</a></h2>\n          - latest version info, recent changes and news</li>\n          <li><a href=\"17_intro/TODO\">TODO</a>\n          - tasks yet undone</li>\n+         <li><a href=\"faq/index.html\">FAQ (HTML)</a>, \n+             <a href=\"faq/index.txt\">FAQ (text)</a></li>\n       </ul>\n \n <hr />"}, {"sha": "df2ccf989fd7ad5d85994163d4f39d09383ce428", "filename": "libstdc++-v3/libsupc++/eh_term_handler.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3642a94924510f7e7220aea6aefebc7372d59d8b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc?ref=3642a94924510f7e7220aea6aefebc7372d59d8b", "patch": "@@ -29,6 +29,12 @@\n \n #include \"unwind-cxx.h\"\n \n+/* We default to the talkative, informative handler.  This pulls in the\n+   demangler, the dyn-string utilities, and elements of the I/O library.\n+   For a low-memory environment, you can return to the earlier \"silent death\"\n+   handler by including <cstdlib>, initializg to \"std::abort\", and rebuilding\n+   the library.  */\n+\n /* The current installed user handler.  */\n std::terminate_handler __cxxabiv1::__terminate_handler =\n                                        __gnu_cxx::__verbose_terminate_handler;"}]}