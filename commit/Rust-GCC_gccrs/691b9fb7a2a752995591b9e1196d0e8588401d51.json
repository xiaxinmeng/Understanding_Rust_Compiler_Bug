{"sha": "691b9fb7a2a752995591b9e1196d0e8588401d51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxYjlmYjdhMmE3NTI5OTU1OTFiOWUxMTk2ZDBlODU4ODQwMWQ1MQ==", "commit": {"author": {"name": "Petr Murzin", "email": "petr.murzin@intel.com", "date": "2014-11-24T12:00:54Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2014-11-24T12:00:54Z"}, "message": "simplify-rtx.c (simplify_ternary_operation): Simplify vec_merge (vec_duplicate (vec_select)).\n\n2014-11-24  Petr Murzin  <petr.murzin@intel.com>\n\ngcc/\n\t* simplify-rtx.c (simplify_ternary_operation): Simplify\n\tvec_merge (vec_duplicate (vec_select)).\n\ngcc/testsuite/\n\t* gcc.target/i386/extract-insert-combining.c: New test.\n\nFrom-SVN: r218015", "tree": {"sha": "378a0906b48bd1be15ef3583648053654b1a1751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/378a0906b48bd1be15ef3583648053654b1a1751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/691b9fb7a2a752995591b9e1196d0e8588401d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691b9fb7a2a752995591b9e1196d0e8588401d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691b9fb7a2a752995591b9e1196d0e8588401d51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691b9fb7a2a752995591b9e1196d0e8588401d51/comments", "author": null, "committer": null, "parents": [{"sha": "d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "e362f1d80434702e851a470c017a01663677c381", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=691b9fb7a2a752995591b9e1196d0e8588401d51", "patch": "@@ -1,3 +1,8 @@\n+2014-11-24  Petr Murzin  <petr.murzin@intel.com>\n+\n+\t* simplify-rtx.c (simplify_ternary_operation): Simplify\n+\tvec_merge (vec_duplicate (vec_select)).\n+\n 2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (AARCH64_FUSE_ADRP_LDR): Define."}, {"sha": "055ba787ac6e5b503d1cf7f3c8438b546c107e79", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=691b9fb7a2a752995591b9e1196d0e8588401d51", "patch": "@@ -5233,6 +5233,22 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n \t\t\t\t\t\t op0, XEXP (op1, 0), op2);\n \t\t}\n \t    }\n+\n+\t  /* Replace (vec_merge (vec_duplicate (vec_select a parallel (i))) a 1 << i)\n+\t     with a.  */\n+\t  if (GET_CODE (op0) == VEC_DUPLICATE\n+\t      && GET_CODE (XEXP (op0, 0)) == VEC_SELECT\n+\t      && GET_CODE (XEXP (XEXP (op0, 0), 1)) == PARALLEL\n+\t      && mode_nunits[GET_MODE (XEXP (op0, 0))] == 1)\n+\t    {\n+\t      tem = XVECEXP ((XEXP (XEXP (op0, 0), 1)), 0, 0);\n+\t      if (CONST_INT_P (tem) && CONST_INT_P (op2))\n+\t\t{\n+\t\t  if (XEXP (XEXP (op0, 0), 0) == op1\n+\t\t      && UINTVAL (op2) == HOST_WIDE_INT_1U << UINTVAL (tem))\n+\t\t    return op1;\n+\t\t}\n+\t    }\n \t}\n \n       if (rtx_equal_p (op0, op1)"}, {"sha": "07b00cf2bb4f4cc73b1c33820cd7be1f08c4011b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=691b9fb7a2a752995591b9e1196d0e8588401d51", "patch": "@@ -1,3 +1,7 @@\n+2014-11-24  Petr Murzin  <petr.murzin@intel.com>\n+\n+\t* gcc.target/i386/extract-insert-combining.c: New test.\n+\n 2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/fuse_adrp_add_1.c: New test."}, {"sha": "f27f92c083f510849c24a1ff48160e96c6c88397", "filename": "gcc/testsuite/gcc.target/i386/extract-insert-combining.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-insert-combining.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691b9fb7a2a752995591b9e1196d0e8588401d51/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-insert-combining.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-insert-combining.c?ref=691b9fb7a2a752995591b9e1196d0e8588401d51", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-msse4.2 -O3\" } */\n+/* { dg-final { scan-assembler-times \"(?:vmovd|movd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpaddd|paddd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpinsrd|pinsrd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovss\" } } */\n+\n+#include <immintrin.h>\n+\n+int\n+main (int a, int b)\n+{\n+  int res;\n+\n+  __m128i xa, xb, xres;\n+\n+  xa = _mm_insert_epi32 (xa, a, 0);\n+  xb = _mm_insert_epi32 (xb, b, 0);\n+\n+  xres = _mm_add_epi32 (xa, xb);\n+\n+  res = _mm_extract_epi32 (xres, 0);\n+\n+  xres = _mm_insert_epi32 (xres, res, 0);\n+  xb   = _mm_insert_epi32 (xb, b, 0);\n+\n+  xres = _mm_add_epi32 (xres, xb);\n+\n+  res = _mm_extract_epi32 (xres, 0);\n+\n+  return res;\n+}\n+"}]}