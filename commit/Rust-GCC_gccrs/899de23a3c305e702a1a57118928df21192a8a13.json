{"sha": "899de23a3c305e702a1a57118928df21192a8a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5ZGUyM2EzYzMwNWU3MDJhMWE1NzExODkyOGRmMjExOTJhOGExMw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2015-10-02T13:08:43Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-02T13:08:43Z"}, "message": "[AArch64] Use default_elf_asm_named_section instead of special cased hook\n\nHi,\n\nThe hook for TARGET_ASM_NAMED_SECTION was defined separately in\nthe backend around the time frame for GCC 4.7 under the assumption\nthat '@' would be used as a comment character in the binutils port.\n\nThis was indeed true in versions of the AArch64 port that never made it\ninto the FSF tree. However this practice was killed\nbefore the binutils port made it upstream. Doing archaeology into\nvarious revisions including the first commit of upstream binutils,\ntalking to Marcus about the history of this and actually testing the\nfirst commit of binutils, I can confidently say that the upstream binutils\nport never had any use of '@' as a comment character for AArch64\nHowever we never got rid of the special cased handling in\nGCC and the duplication of code in the AArch64 backend.\n\nThis was found when I was playing with Virtual Table verification\non ARM and AArch64 and discovered ICEs which were similar but manifested\nin different places begging the obvious question.\n\nTested on aarch64-none-elf with no regressions.\n\nOk to apply ?\n\nRamana\n\n2015-10-02  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_elf_asm_named_section): Delete.\n\t(TLS_SECTION_ASM_FLAG): Delete.\n\nFrom-SVN: r228390", "tree": {"sha": "d9b1f1a8f2f4536987d59fe6f19159139704b7f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b1f1a8f2f4536987d59fe6f19159139704b7f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/899de23a3c305e702a1a57118928df21192a8a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899de23a3c305e702a1a57118928df21192a8a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899de23a3c305e702a1a57118928df21192a8a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899de23a3c305e702a1a57118928df21192a8a13/comments", "author": null, "committer": null, "parents": [{"sha": "3e3b8d63e54773e0f5add898ad55acf1be22d950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3b8d63e54773e0f5add898ad55acf1be22d950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3b8d63e54773e0f5add898ad55acf1be22d950"}], "stats": {"total": 79, "additions": 5, "deletions": 74}, "files": [{"sha": "c9aa659427645093eed98dd8bf6480217fadd359", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899de23a3c305e702a1a57118928df21192a8a13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899de23a3c305e702a1a57118928df21192a8a13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=899de23a3c305e702a1a57118928df21192a8a13", "patch": "@@ -1,3 +1,8 @@\n+2015-10-02  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_elf_asm_named_section): Delete.\n+\t(TLS_SECTION_ASM_FLAG): Delete.\n+\n 2015-10-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64249"}, {"sha": "d4c5665cf4d0b046a6129c35007fc2ae8265812f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899de23a3c305e702a1a57118928df21192a8a13/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899de23a3c305e702a1a57118928df21192a8a13/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=899de23a3c305e702a1a57118928df21192a8a13", "patch": "@@ -10568,80 +10568,6 @@ aarch64_shift_truncation_mask (machine_mode mode)\n      || aarch64_vect_struct_mode_p (mode)) ? 0 : (GET_MODE_BITSIZE (mode) - 1);\n }\n \n-#ifndef TLS_SECTION_ASM_FLAG\n-#define TLS_SECTION_ASM_FLAG 'T'\n-#endif\n-\n-void\n-aarch64_elf_asm_named_section (const char *name, unsigned int flags,\n-\t\t\t       tree decl ATTRIBUTE_UNUSED)\n-{\n-  char flagchars[10], *f = flagchars;\n-\n-  /* If we have already declared this section, we can use an\n-     abbreviated form to switch back to it -- unless this section is\n-     part of a COMDAT groups, in which case GAS requires the full\n-     declaration every time.  */\n-  if (!(HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n-      && (flags & SECTION_DECLARED))\n-    {\n-      fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n-      return;\n-    }\n-\n-  if (!(flags & SECTION_DEBUG))\n-    *f++ = 'a';\n-  if (flags & SECTION_WRITE)\n-    *f++ = 'w';\n-  if (flags & SECTION_CODE)\n-    *f++ = 'x';\n-  if (flags & SECTION_SMALL)\n-    *f++ = 's';\n-  if (flags & SECTION_MERGE)\n-    *f++ = 'M';\n-  if (flags & SECTION_STRINGS)\n-    *f++ = 'S';\n-  if (flags & SECTION_TLS)\n-    *f++ = TLS_SECTION_ASM_FLAG;\n-  if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n-    *f++ = 'G';\n-  *f = '\\0';\n-\n-  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);\n-\n-  if (!(flags & SECTION_NOTYPE))\n-    {\n-      const char *type;\n-      const char *format;\n-\n-      if (flags & SECTION_BSS)\n-\ttype = \"nobits\";\n-      else\n-\ttype = \"progbits\";\n-\n-#ifdef TYPE_OPERAND_FMT\n-      format = \",\" TYPE_OPERAND_FMT;\n-#else\n-      format = \",@%s\";\n-#endif\n-\n-      fprintf (asm_out_file, format, type);\n-\n-      if (flags & SECTION_ENTSIZE)\n-\tfprintf (asm_out_file, \",%d\", flags & SECTION_ENTSIZE);\n-      if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n-\t{\n-\t  if (TREE_CODE (decl) == IDENTIFIER_NODE)\n-\t    fprintf (asm_out_file, \",%s,comdat\", IDENTIFIER_POINTER (decl));\n-\t  else\n-\t    fprintf (asm_out_file, \",%s,comdat\",\n-\t\t     IDENTIFIER_POINTER (DECL_COMDAT_GROUP (decl)));\n-\t}\n-    }\n-\n-  putc ('\\n', asm_out_file);\n-}\n-\n /* Select a format to encode pointers in exception handling data.  */\n int\n aarch64_asm_preferred_eh_data_format (int code ATTRIBUTE_UNUSED, int global)"}]}