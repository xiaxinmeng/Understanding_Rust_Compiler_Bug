{"sha": "e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThmY2M5ZmEzNjk2ZjNkYTNkY2FhNjM4OGYwMmUxZmQ4YjM0YTc1Mw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2016-12-14T22:42:44Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2016-12-14T22:42:44Z"}, "message": "aarch64-cores.def: Add -1 as the variant to all of the cores.\n\n2016-12-14  Andrew Pinski  <apinski@cavium.com>\n\n        * config/aarch64/aarch64-cores.def: Add -1 as the variant to all\n        of the cores.\n        (thunderx): Update to include LSE by default.\n        (thunderxt88p1): New core.\n        (thunderxt88): New core.\n        (thunderxt81): New core.\n        (thunderxt83): New core.\n        * config/aarch64/driver-aarch64.c (struct aarch64_core_data):\n        Add variant field.\n        (ALL_VARIANTS): New define.\n        (AARCH64_CORE): Support VARIANT operand.\n        (cpu_data): Likewise.\n        (host_detect_local_cpu): Parse variant field of /proc/cpuinfo.\n        Combine the arch and single core case and support variant searching.\n        * common/config/aarch64/aarch64-common.c (AARCH64_CORE):\n        Add VARIANT operand.\n        * config/aarch64/aarch64-opts.h (AARCH64_CORE): Likewise.\n        * config/aarch64/aarch64.c (AARCH64_CORE): Likewise.\n        * config/aarch64/aarch64.h (AARCH64_CORE): Likewise.\n        * config/aarch64/aarch64-tune.md: Regenerate.\n        * doc/invoke.texi (AARCH64/mtune): Document thunderxt88,\n        thunderxt88p1, thunderxt81, thunderxt83 as available options.\n\nFrom-SVN: r243675", "tree": {"sha": "88eec5dbe421ccfe2c6dd821879ace31aeed271d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88eec5dbe421ccfe2c6dd821879ace31aeed271d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01914336a927902b9a4e726e41018b5e1223fcb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01914336a927902b9a4e726e41018b5e1223fcb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01914336a927902b9a4e726e41018b5e1223fcb6"}], "stats": {"total": 173, "additions": 110, "deletions": 63}, "files": [{"sha": "0aacd3b12a7511968d6d1ba3b6b9847f2671cb21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -1,3 +1,28 @@\n+2016-12-14  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Add -1 as the variant to all\n+\tof the cores.\n+\t(thunderx): Update to include LSE by default.\n+\t(thunderxt88p1): New core.\n+\t(thunderxt88): New core.\n+\t(thunderxt81): New core.\n+\t(thunderxt83): New core.\n+\t* config/aarch64/driver-aarch64.c (struct aarch64_core_data):\n+\tAdd variant field.\n+\t(ALL_VARIANTS): New define.\n+\t(AARCH64_CORE): Support VARIANT operand.\n+\t(cpu_data): Likewise.\n+\t(host_detect_local_cpu): Parse variant field of /proc/cpuinfo.\n+\tCombine the arch and single core case and support variant searching.\n+\t* common/config/aarch64/aarch64-common.c (AARCH64_CORE):\n+\tAdd VARIANT operand.\n+\t* config/aarch64/aarch64-opts.h (AARCH64_CORE): Likewise.\n+\t* config/aarch64/aarch64.c (AARCH64_CORE): Likewise.\n+\t* config/aarch64/aarch64.h (AARCH64_CORE): Likewise.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi (AARCH64/mtune): Document thunderxt88,\n+\tthunderxt88p1, thunderxt81, thunderxt83 as available options.\n+\n 2016-12-14  Martin Jambor  <mjambor@suse.cz>\n \n \t    * omp-offload.c: Fix coding style."}, {"sha": "dac84f2dec5b908175ca2f274ee80290850354b9", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -145,7 +145,7 @@ struct arch_to_arch_name\n    the default set of architectural feature flags they support.  */\n static const struct processor_name_to_arch all_cores[] =\n {\n-#define AARCH64_CORE(NAME, X, IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART) \\\n+#define AARCH64_CORE(NAME, X, IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   {NAME, AARCH64_ARCH_##ARCH_IDENT, FLAGS},\n #include \"config/aarch64/aarch64-cores.def\"\n   {\"generic\", AARCH64_ARCH_8A, AARCH64_FL_FOR_ARCH8},"}, {"sha": "6dd6ba6f6e00144ec4f7fb049ce8a188afd9d9ab", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -21,7 +21,7 @@\n \n    Before using #include to read this file, define a macro:\n \n-      AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHEDULER_IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART)\n+      AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHEDULER_IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART, VARIANT)\n \n    The CORE_NAME is the name of the core, represented as a string constant.\n    The CORE_IDENT is the name of the core, represented as an identifier.\n@@ -39,40 +39,48 @@\n    PART is the part number of the CPU.  On a GNU/Linux system it can be\n    found in /proc/cpuinfo.  For big.LITTLE systems this should use the\n    macro AARCH64_BIG_LITTLE where the big part number comes as the first\n-   argument to the macro and little is the second.  */\n+   argument to the macro and little is the second.\n+   VARIANT is the variant of the CPU.  In a GNU/Linux system it can found\n+   in /proc/cpuinfo.  If this is -1, this means it can match any variant.  */\n \n /* V8 Architecture Processors.  */\n \n /* ARM ('A') cores. */\n-AARCH64_CORE(\"cortex-a35\",  cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa35, 0x41, 0xd04)\n-AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53, 0x41, 0xd03)\n-AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, 0x41, 0xd07)\n-AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, 0x41, 0xd08)\n-AARCH64_CORE(\"cortex-a73\",  cortexa73, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, 0x41, 0xd09)\n+AARCH64_CORE(\"cortex-a35\",  cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa35, 0x41, 0xd04, -1)\n+AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53, 0x41, 0xd03, -1)\n+AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, 0x41, 0xd07, -1)\n+AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, 0x41, 0xd08, -1)\n+AARCH64_CORE(\"cortex-a73\",  cortexa73, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, 0x41, 0xd09, -1)\n \n /* Samsung ('S') cores. */\n-AARCH64_CORE(\"exynos-m1\",   exynosm1,  exynosm1,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, exynosm1,  0x53, 0x001)\n+AARCH64_CORE(\"exynos-m1\",   exynosm1,  exynosm1,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, exynosm1,  0x53, 0x001, -1)\n \n /* Qualcomm ('Q') cores. */\n-AARCH64_CORE(\"falkor\",      falkor,    cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x51, 0xC00)\n-AARCH64_CORE(\"qdf24xx\",     qdf24xx,   cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x51, 0xC00)\n+AARCH64_CORE(\"falkor\",      falkor,    cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x51, 0xC00, -1)\n+AARCH64_CORE(\"qdf24xx\",     qdf24xx,   cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x51, 0xC00, -1)\n \n /* Cavium ('C') cores. */\n-AARCH64_CORE(\"thunderx\",    thunderx,  thunderx,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a1)\n+AARCH64_CORE(\"thunderx\",      thunderx,      thunderx,  8A,    AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_LSE, thunderx,  0x43, 0x0a0, -1)\n+/* Do not swap around \"thunderxt88p1\" and \"thunderxt88\",\n+   this order is required to handle variant correctly. */\n+AARCH64_CORE(\"thunderxt88p1\", thunderxt88p1, thunderx,  8A,    AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO,\t\t   thunderx,  0x43, 0x0a1, 0)\n+AARCH64_CORE(\"thunderxt88\",   thunderxt88,   thunderx,  8A,    AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_LSE, thunderx,  0x43, 0x0a1, -1)\n+AARCH64_CORE(\"thunderxt81\",   thunderxt81,   thunderx,  8_1A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_LSE, thunderx,  0x43, 0x0a2, -1)\n+AARCH64_CORE(\"thunderxt83\",   thunderxt83,   thunderx,  8_1A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_LSE, thunderx,  0x43, 0x0a3, -1)\n \n /* APM ('P') cores. */\n-AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_ARCH8, xgene1, 0x50, 0x000)\n+AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_ARCH8, xgene1, 0x50, 0x000, -1)\n \n /* V8.1 Architecture Processors.  */\n \n /* Broadcom ('B') cores. */\n-AARCH64_CORE(\"vulcan\",  vulcan, cortexa57, 8_1A,  AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_CRYPTO, vulcan, 0x42, 0x516)\n+AARCH64_CORE(\"vulcan\",  vulcan, cortexa57, 8_1A,  AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_CRYPTO, vulcan, 0x42, 0x516, -1)\n \n /* V8 big.LITTLE implementations.  */\n \n-AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, 0x41, AARCH64_BIG_LITTLE (0xd07, 0xd03))\n-AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, 0x41, AARCH64_BIG_LITTLE (0xd08, 0xd03))\n-AARCH64_CORE(\"cortex-a73.cortex-a35\",  cortexa73cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd04))\n-AARCH64_CORE(\"cortex-a73.cortex-a53\",  cortexa73cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd03))\n+AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, 0x41, AARCH64_BIG_LITTLE (0xd07, 0xd03), -1)\n+AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, 0x41, AARCH64_BIG_LITTLE (0xd08, 0xd03), -1)\n+AARCH64_CORE(\"cortex-a73.cortex-a35\",  cortexa73cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd04), -1)\n+AARCH64_CORE(\"cortex-a73.cortex-a53\",  cortexa73cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd03), -1)\n \n #undef AARCH64_CORE"}, {"sha": "634b044c41cb8085ffa662f6376537dac70763cd", "filename": "gcc/config/aarch64/aarch64-opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -25,7 +25,7 @@\n /* The various cores that implement AArch64.  */\n enum aarch64_processor\n {\n-#define AARCH64_CORE(NAME, INTERNAL_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n+#define AARCH64_CORE(NAME, INTERNAL_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   INTERNAL_IDENT,\n #include \"aarch64-cores.def\"\n   /* Used to indicate that no processor has been specified.  */"}, {"sha": "5b71cd755c6b4957bf8c47433da351a340559b7d", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,exynosm1,falkor,qdf24xx,thunderx,xgene1,vulcan,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53\"\n+\t\"cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,exynosm1,falkor,qdf24xx,thunderx,thunderxt88p1,thunderxt88,thunderxt81,thunderxt83,xgene1,vulcan,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "80af0ab014fd82e1de4ed5102fe3fdbe6e1c0c35", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -835,7 +835,7 @@ static const struct processor all_architectures[] =\n /* Processor cores implementing AArch64.  */\n static const struct processor all_cores[] =\n {\n-#define AARCH64_CORE(NAME, IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n+#define AARCH64_CORE(NAME, IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   {NAME, IDENT, SCHED, AARCH64_ARCH_##ARCH,\t\t\t\t\\\n   all_architectures[AARCH64_ARCH_##ARCH].architecture_version,\t\\\n   FLAGS, &COSTS##_tunings},"}, {"sha": "66c3fa09acd3d623715262caebd44904228d2da0", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -490,7 +490,7 @@ enum reg_class\n \n enum target_cpus\n {\n-#define AARCH64_CORE(NAME, INTERNAL_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n+#define AARCH64_CORE(NAME, INTERNAL_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   TARGET_CPU_##INTERNAL_IDENT,\n #include \"aarch64-cores.def\"\n   TARGET_CPU_generic"}, {"sha": "c6f7e67c96441218938ee5e690485307be043278", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 52, "deletions": 39, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -48,21 +48,23 @@ struct aarch64_core_data\n   const char* arch;\n   unsigned char implementer_id; /* Exactly 8 bits */\n   unsigned int part_no; /* 12 bits + 12 bits */\n+  unsigned variant;\n   const unsigned long flags;\n };\n \n #define AARCH64_BIG_LITTLE(BIG, LITTLE) \\\n   (((BIG)&0xFFFu) << 12 | ((LITTLE) & 0xFFFu))\n #define INVALID_IMP ((unsigned char) -1)\n #define INVALID_CORE ((unsigned)-1)\n+#define ALL_VARIANTS ((unsigned)-1)\n \n-#define AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n-  { CORE_NAME, #ARCH, IMP, PART, FLAGS },\n+#define AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART, VARIANT) \\\n+  { CORE_NAME, #ARCH, IMP, PART, VARIANT, FLAGS },\n \n static struct aarch64_core_data aarch64_cpu_data[] =\n {\n #include \"aarch64-cores.def\"\n-  { NULL, NULL, INVALID_IMP, INVALID_CORE, 0 }\n+  { NULL, NULL, INVALID_IMP, INVALID_CORE, ALL_VARIANTS, 0 }\n };\n \n \n@@ -160,7 +162,6 @@ contains_core_p (unsigned *arr, unsigned core)\n const char *\n host_detect_local_cpu (int argc, const char **argv)\n {\n-  const char *arch_id = NULL;\n   const char *res = NULL;\n   static const int num_exts = ARRAY_SIZE (aarch64_extensions);\n   char buf[128];\n@@ -172,6 +173,8 @@ host_detect_local_cpu (int argc, const char **argv)\n   unsigned char imp = INVALID_IMP;\n   unsigned int cores[2] = { INVALID_CORE, INVALID_CORE };\n   unsigned int n_cores = 0;\n+  unsigned int variants[2] = { ALL_VARIANTS, ALL_VARIANTS };\n+  unsigned int n_variants = 0;\n   bool processed_exts = false;\n   const char *ext_string = \"\";\n   unsigned long extension_flags = 0;\n@@ -215,6 +218,19 @@ host_detect_local_cpu (int argc, const char **argv)\n \t    goto not_found;\n \t}\n \n+      if (strstr (buf, \"variant\") != NULL)\n+\t{\n+\t  unsigned cvariant = parse_field (buf);\n+\t  if (!contains_core_p (variants, cvariant))\n+\t    {\n+              if (n_variants == 2)\n+                goto not_found;\n+\n+              variants[n_variants++] = cvariant;\n+\t    }\n+          continue;\n+        }\n+\n       if (strstr (buf, \"part\") != NULL)\n \t{\n \t  unsigned ccore = parse_field (buf);\n@@ -267,33 +283,48 @@ host_detect_local_cpu (int argc, const char **argv)\n   f = NULL;\n \n   /* Weird cpuinfo format that we don't know how to handle.  */\n-  if (n_cores == 0 || n_cores > 2 || imp == INVALID_IMP)\n+  if (n_cores == 0\n+      || n_cores > 2\n+      || (n_cores == 1 && n_variants != 1)\n+      || imp == INVALID_IMP)\n     goto not_found;\n \n-  if (arch)\n+  /* Simple case, one core type or just looking for the arch. */\n+  if (n_cores == 1 || arch)\n     {\n       /* Search for one of the cores in the list. */\n       for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n \tif (aarch64_cpu_data[i].implementer_id == imp\n-\t    && contains_core_p (cores, aarch64_cpu_data[i].part_no))\n-\t  {\n-\t    arch_id = aarch64_cpu_data[i].arch;\n-\t    break;\n-\t  }\n-      if (!arch_id)\n-\tgoto not_found;\n-\n-      struct aarch64_arch_driver_info* arch_info = get_arch_from_id (arch_id);\n+            && cores[0] == aarch64_cpu_data[i].part_no\n+            && (aarch64_cpu_data[i].variant == ALL_VARIANTS\n+                || variants[0] == aarch64_cpu_data[i].variant))\n+\t  break;\n+      if (aarch64_cpu_data[i].name == NULL)\n+        goto not_found;\n+\n+      if (arch)\n+\t{\n+\t  const char *arch_id = aarch64_cpu_data[i].arch;\n+\t  aarch64_arch_driver_info* arch_info = get_arch_from_id (arch_id);\n \n-      /* We got some arch indentifier that's not in aarch64-arches.def?  */\n-      if (!arch_info)\n-\tgoto not_found;\n+\t  /* We got some arch indentifier that's not in aarch64-arches.def?  */\n+\t  if (!arch_info)\n+\t    goto not_found;\n \n-      res = concat (\"-march=\", arch_info->name, NULL);\n-      default_flags = arch_info->flags;\n+\t  res = concat (\"-march=\", arch_info->name, NULL);\n+\t  default_flags = arch_info->flags;\n+\t}\n+      else\n+\t{\n+\t  default_flags = aarch64_cpu_data[i].flags;\n+\t  res = concat (\"-m\",\n+\t\t\tcpu ? \"cpu\" : \"tune\", \"=\",\n+\t\t\taarch64_cpu_data[i].name,\n+\t\t\tNULL);\n+\t}\n     }\n   /* We have big.LITTLE.  */\n-  else if (n_cores == 2)\n+  else\n     {\n       for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n \t{\n@@ -311,24 +342,6 @@ host_detect_local_cpu (int argc, const char **argv)\n       if (!res)\n \tgoto not_found;\n     }\n-  /* The simple, non-big.LITTLE case.  */\n-  else\n-    {\n-      int core_idx = -1;\n-      for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n-\tif (cores[0] == aarch64_cpu_data[i].part_no\n-\t    && aarch64_cpu_data[i].implementer_id == imp)\n-\t  {\n-\t    core_idx = i;\n-\t    break;\n-\t  }\n-      if (core_idx == -1)\n-\tgoto not_found;\n-\n-      res = concat (\"-m\", cpu ? \"cpu\" : \"tune\", \"=\",\n-\t\t    aarch64_cpu_data[core_idx].name, NULL);\n-      default_flags = aarch64_cpu_data[core_idx].flags;\n-    }\n \n   if (tune)\n     return res;"}, {"sha": "4a14bdfc24fcabce7732a73c43a21ff43e85e7fc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e8fcc9fa3696f3da3dcaa6388f02e1fd8b34a753", "patch": "@@ -14024,8 +14024,9 @@ Specify the name of the target processor for which GCC should tune the\n performance of the code.  Permissible values for this option are:\n @samp{generic}, @samp{cortex-a35}, @samp{cortex-a53}, @samp{cortex-a57},\n @samp{cortex-a72}, @samp{cortex-a73}, @samp{exynos-m1}, @samp{falkor},\n-@samp{qdf24xx}, @samp{thunderx}, @samp{xgene1}, @samp{vulcan},\n-@samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},\n+@samp{qdf24xx}, @samp{xgene1}, @samp{vulcan}, @samp{thunderx},\n+@samp{thunderxt88}, @samp{thunderxt88p1}, @samp{thunderxt81},\n+@samp{thunderxt83}, @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},\n @samp{cortex-a73.cortex-a35}, @samp{cortex-a73.cortex-a53}, @samp{native}.\n \n The values @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},"}]}