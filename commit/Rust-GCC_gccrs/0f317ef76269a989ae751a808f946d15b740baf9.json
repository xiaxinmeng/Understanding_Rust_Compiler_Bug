{"sha": "0f317ef76269a989ae751a808f946d15b740baf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzMTdlZjc2MjY5YTk4OWFlNzUxYTgwOGY5NDZkMTViNzQwYmFmOQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2018-10-25T13:03:13Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2018-10-25T13:03:13Z"}, "message": "Relocation (= move+destroy)\n\n2018-10-25  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/87106\n\t* include/bits/alloc_traits.h (_S_construct, _S_destroy, construct,\n\tdestroy): Add noexcept specification.\n\t* include/bits/allocator.h (construct, destroy): Likewise.\n\t* include/ext/alloc_traits.h (construct, destroy): Likewise.\n\t* include/ext/malloc_allocator.h (construct, destroy): Likewise.\n\t* include/ext/new_allocator.h (construct, destroy): Likewise.\n\t* include/bits/stl_uninitialized.h (__relocate_object_a, __relocate_a,\n\t__relocate_a_1): New functions.\n\t(__is_trivially_relocatable): New class.\n\t* include/bits/stl_vector.h (__use_relocate): New static member.\n\t* include/bits/vector.tcc (reserve, _M_realloc_insert,\n\t_M_default_append): Use __relocate_a.\n\t(reserve, _M_assign_aux, _M_realloc_insert, _M_fill_insert,\n\t_M_default_append, _M_range_insert): Move _GLIBCXX_ASAN_ANNOTATE_REINIT\n\tafter _Destroy.\n\t* testsuite/23_containers/vector/modifiers/push_back/49836.cc:\n\tReplace CopyConsOnlyType with DelAnyAssign.\n\nFrom-SVN: r265485", "tree": {"sha": "9da28f80357d64a8e89cdd7f85a670e3161265a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da28f80357d64a8e89cdd7f85a670e3161265a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f317ef76269a989ae751a808f946d15b740baf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f317ef76269a989ae751a808f946d15b740baf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f317ef76269a989ae751a808f946d15b740baf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f317ef76269a989ae751a808f946d15b740baf9/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09d3f04eaea862476be3c74fd84f06ec1afb1e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d3f04eaea862476be3c74fd84f06ec1afb1e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d3f04eaea862476be3c74fd84f06ec1afb1e68"}], "stats": {"total": 253, "additions": 213, "deletions": 40}, "files": [{"sha": "575e52a70b6edbc547d8385c0575ae5d260c653f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -1,3 +1,24 @@\n+2018-10-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/87106\n+\t* include/bits/alloc_traits.h (_S_construct, _S_destroy, construct,\n+\tdestroy): Add noexcept specification.\n+\t* include/bits/allocator.h (construct, destroy): Likewise.\n+\t* include/ext/alloc_traits.h (construct, destroy): Likewise.\n+\t* include/ext/malloc_allocator.h (construct, destroy): Likewise.\n+\t* include/ext/new_allocator.h (construct, destroy): Likewise.\n+\t* include/bits/stl_uninitialized.h (__relocate_object_a, __relocate_a,\n+\t__relocate_a_1): New functions.\n+\t(__is_trivially_relocatable): New class.\n+\t* include/bits/stl_vector.h (__use_relocate): New static member.\n+\t* include/bits/vector.tcc (reserve, _M_realloc_insert,\n+\t_M_default_append): Use __relocate_a.\n+\t(reserve, _M_assign_aux, _M_realloc_insert, _M_fill_insert,\n+\t_M_default_append, _M_range_insert): Move _GLIBCXX_ASAN_ANNOTATE_REINIT\n+\tafter _Destroy.\n+\t* testsuite/23_containers/vector/modifiers/push_back/49836.cc:\n+\tReplace CopyConsOnlyType with DelAnyAssign.\n+\n 2018-10-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/safe_unordered_container.h"}, {"sha": "9321fdff352cc6e13ad53841ea87894a2e95dae1", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -240,24 +240,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Tp, typename... _Args>\n \tstatic _Require<__has_construct<_Tp, _Args...>>\n \t_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\n+\tnoexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))\n \t{ __a.construct(__p, std::forward<_Args>(__args)...); }\n \n       template<typename _Tp, typename... _Args>\n \tstatic\n \t_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,\n \t\t\t       is_constructible<_Tp, _Args...>>>\n \t_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)\n+\tnoexcept(noexcept(::new((void*)__p)\n+\t\t\t  _Tp(std::forward<_Args>(__args)...)))\n \t{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }\n \n       template<typename _Alloc2, typename _Tp>\n \tstatic auto\n \t_S_destroy(_Alloc2& __a, _Tp* __p, int)\n+\tnoexcept(noexcept(__a.destroy(__p)))\n \t-> decltype(__a.destroy(__p))\n \t{ __a.destroy(__p); }\n \n       template<typename _Alloc2, typename _Tp>\n \tstatic void\n \t_S_destroy(_Alloc2&, _Tp* __p, ...)\n+\tnoexcept(noexcept(__p->~_Tp()))\n \t{ __p->~_Tp(); }\n \n       template<typename _Alloc2>\n@@ -340,6 +345,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       template<typename _Tp, typename... _Args>\n \tstatic auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\n+\tnoexcept(noexcept(_S_construct(__a, __p,\n+\t\t\t\t       std::forward<_Args>(__args)...)))\n \t-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))\n \t{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }\n \n@@ -353,6 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       template<typename _Tp>\n \tstatic void destroy(_Alloc& __a, _Tp* __p)\n+\tnoexcept(noexcept(_S_destroy(__a, __p, 0)))\n \t{ _S_destroy(__a, __p, 0); }\n \n       /**\n@@ -472,6 +480,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up, typename... _Args>\n \tstatic void\n \tconstruct(allocator_type& __a, _Up* __p, _Args&&... __args)\n+\tnoexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))\n \t{ __a.construct(__p, std::forward<_Args>(__args)...); }\n \n       /**\n@@ -484,6 +493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up>\n \tstatic void\n \tdestroy(allocator_type& __a, _Up* __p)\n+\tnoexcept(noexcept(__a.destroy(__p)))\n \t{ __a.destroy(__p); }\n \n       /**"}, {"sha": "9f018ea239c6cb40282f75ade1eb807a8054946e", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -88,11 +88,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up, typename... _Args>\n \tvoid\n \tconstruct(_Up* __p, _Args&&... __args)\n+\tnoexcept(noexcept(::new((void *)__p)\n+\t\t\t    _Up(std::forward<_Args>(__args)...)))\n \t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n \n       template<typename _Up>\n \tvoid\n-\tdestroy(_Up* __p) { __p->~_Up(); }\n+\tdestroy(_Up* __p)\n+\tnoexcept(noexcept(__p->~_Up()))\n+\t{ __p->~_Up(); }\n #endif\n     };\n "}, {"sha": "94c7e151e29abcbc3804c0e3333ff5ab4f480f04", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -879,6 +879,68 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n+#if __cplusplus >= 201103L\n+  template<typename _Tp, typename _Up, typename _Allocator>\n+    inline void\n+    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)\n+    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,\n+\t\t\t __dest, std::move(*__orig)))\n+\t     && noexcept(std::allocator_traits<_Allocator>::destroy(\n+\t\t\t    __alloc, std::__addressof(*__orig))))\n+    {\n+      typedef std::allocator_traits<_Allocator> __traits;\n+      __traits::construct(__alloc, __dest, std::move(*__orig));\n+      __traits::destroy(__alloc, std::__addressof(*__orig));\n+    }\n+\n+  // This class may be specialized for specific types.\n+  template<typename _Tp>\n+    struct __is_trivially_relocatable\n+    : is_trivial<_Tp> { };\n+\n+  template <typename _Tp, typename _Up>\n+    inline __enable_if_t<std::__is_trivially_relocatable<_Tp>::value, _Tp*>\n+    __relocate_a_1(_Tp* __first, _Tp* __last,\n+\t\t   _Tp* __result, allocator<_Up>& __alloc)\n+    {\n+      ptrdiff_t __count = __last - __first;\n+      __builtin_memmove(__result, __first, __count * sizeof(_Tp));\n+      return __result + __count;\n+    }\n+\n+  template <typename _InputIterator, typename _ForwardIterator,\n+\t    typename _Allocator>\n+    inline _ForwardIterator\n+    __relocate_a_1(_InputIterator __first, _InputIterator __last,\n+\t\t   _ForwardIterator __result, _Allocator& __alloc)\n+    {\n+      typedef typename iterator_traits<_InputIterator>::value_type\n+\t_ValueType;\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType2;\n+      static_assert(std::is_same<_ValueType, _ValueType2>::value);\n+      static_assert(noexcept(std::__relocate_object_a(std::addressof(*__result),\n+\t\t\t\t\t\t      std::addressof(*__first),\n+\t\t\t\t\t\t      __alloc)));\n+      _ForwardIterator __cur = __result;\n+      for (; __first != __last; ++__first, (void)++__cur)\n+\tstd::__relocate_object_a(std::__addressof(*__cur),\n+\t\t\t\t std::__addressof(*__first), __alloc);\n+      return __cur;\n+    }\n+\n+  template <typename _InputIterator, typename _ForwardIterator,\n+\t    typename _Allocator>\n+    inline _ForwardIterator\n+    __relocate_a(_InputIterator __first, _InputIterator __last,\n+\t\t _ForwardIterator __result, _Allocator& __alloc)\n+    {\n+      return __relocate_a_1(std::__niter_base(__first),\n+\t\t\t    std::__niter_base(__last),\n+\t\t\t    std::__niter_base(__result), __alloc);\n+    }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "40debd62396ed30402dd20963c5da43f3fb87a31", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -421,6 +421,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef ptrdiff_t\t\t\t\t\tdifference_type;\n       typedef _Alloc\t\t\t\t\tallocator_type;\n \n+    private:\n+#if __cplusplus >= 201103L\n+      static constexpr bool __use_relocate =\n+\tnoexcept(std::__relocate_object_a(\n+\t\t\tstd::addressof(*std::declval<pointer>()),\n+\t\t\tstd::addressof(*std::declval<pointer>()),\n+\t\t\tstd::declval<_Tp_alloc_type&>()));\n+#endif\n+\n     protected:\n       using _Base::_M_allocate;\n       using _Base::_M_deallocate;"}, {"sha": "8df0f4180d4c1d304b2248ed50e25b623af1d4e1", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 90, "deletions": 34, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -71,12 +71,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       if (this->capacity() < __n)\n \t{\n \t  const size_type __old_size = size();\n-\t  pointer __tmp = _M_allocate_and_copy(__n,\n-\t    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),\n-\t    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));\n+\t  pointer __tmp;\n+#if __cplusplus >= 201103L\n+\t  if constexpr (__use_relocate)\n+\t    {\n+\t      __tmp = this->_M_allocate(__n);\n+\t      std::__relocate_a(this->_M_impl._M_start,\n+\t\t\t\tthis->_M_impl._M_finish,\n+\t\t\t\t__tmp, _M_get_Tp_allocator());\n+\t    }\n+\t  else\n+#endif\n+\t    {\n+\t      __tmp = _M_allocate_and_copy(__n,\n+\t\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),\n+\t\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));\n+\t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t\t    _M_get_Tp_allocator());\n+\t    }\n \t  _GLIBCXX_ASAN_ANNOTATE_REINIT;\n-\t  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n-\t\t\t_M_get_Tp_allocator());\n \t  _M_deallocate(this->_M_impl._M_start,\n \t\t\tthis->_M_impl._M_end_of_storage\n \t\t\t- this->_M_impl._M_start);\n@@ -295,9 +308,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  {\n \t    _S_check_init_len(__len, _M_get_Tp_allocator());\n \t    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));\n-\t    _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t  _M_get_Tp_allocator());\n+\t    _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t    _M_deallocate(this->_M_impl._M_start,\n \t\t\t  this->_M_impl._M_end_of_storage\n \t\t\t  - this->_M_impl._M_start);\n@@ -443,17 +456,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \t  __new_finish = pointer();\n \n-\t  __new_finish\n-\t    = std::__uninitialized_move_if_noexcept_a\n-\t    (__old_start, __position.base(),\n-\t     __new_start, _M_get_Tp_allocator());\n+#if __cplusplus >= 201103L\n+\t  if constexpr (__use_relocate)\n+\t    {\n+\t      __new_finish\n+\t\t= std::__relocate_a\n+\t\t(__old_start, __position.base(),\n+\t\t __new_start, _M_get_Tp_allocator());\n+\n+\t      ++__new_finish;\n+\n+\t      __new_finish\n+\t\t= std::__relocate_a\n+\t\t(__position.base(), __old_finish,\n+\t\t __new_finish, _M_get_Tp_allocator());\n+\t    }\n+\t  else\n+#endif\n+\t    {\n+\t      __new_finish\n+\t\t= std::__uninitialized_move_if_noexcept_a\n+\t\t(__old_start, __position.base(),\n+\t\t __new_start, _M_get_Tp_allocator());\n \n-\t  ++__new_finish;\n+\t      ++__new_finish;\n \n-\t  __new_finish\n-\t    = std::__uninitialized_move_if_noexcept_a\n-\t    (__position.base(), __old_finish,\n-\t     __new_finish, _M_get_Tp_allocator());\n+\t      __new_finish\n+\t\t= std::__uninitialized_move_if_noexcept_a\n+\t\t(__position.base(), __old_finish,\n+\t\t __new_finish, _M_get_Tp_allocator());\n+\t    }\n \t}\n       __catch(...)\n \t{\n@@ -465,8 +497,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_deallocate(__new_start, __len);\n \t  __throw_exception_again;\n \t}\n+#if __cplusplus >= 201103L\n+      if constexpr (!__use_relocate)\n+#endif\n+\tstd::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());\n       _GLIBCXX_ASAN_ANNOTATE_REINIT;\n-      std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());\n       _M_deallocate(__old_start,\n \t\t    this->_M_impl._M_end_of_storage - __old_start);\n       this->_M_impl._M_start = __new_start;\n@@ -562,9 +597,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  _M_deallocate(__new_start, __len);\n \t\t  __throw_exception_again;\n \t\t}\n-\t      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t    _M_get_Tp_allocator());\n+\t      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t      _M_deallocate(this->_M_impl._M_start,\n \t\t\t    this->_M_impl._M_end_of_storage\n \t\t\t    - this->_M_impl._M_start);\n@@ -603,27 +638,48 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      const size_type __len =\n \t\t_M_check_len(__n, \"vector::_M_default_append\");\n \t      pointer __new_start(this->_M_allocate(__len));\n-\t      pointer __destroy_from = pointer();\n-\t      __try\n+#if __cplusplus >= 201103L\n+\t      if constexpr (__use_relocate)\n \t\t{\n-\t\t  std::__uninitialized_default_n_a(__new_start + __size,\n-\t\t\t\t\t\t   __n, _M_get_Tp_allocator());\n-\t\t  __destroy_from = __new_start + __size;\n-\t\t  std::__uninitialized_move_if_noexcept_a(\n-\t\t      this->_M_impl._M_start, this->_M_impl._M_finish,\n-\t\t      __new_start, _M_get_Tp_allocator());\n+\t\t  __try\n+\t\t    {\n+\t\t      std::__uninitialized_default_n_a(__new_start + __size,\n+\t\t\t      __n, _M_get_Tp_allocator());\n+\t\t    }\n+\t\t  __catch(...)\n+\t\t    {\n+\t\t      _M_deallocate(__new_start, __len);\n+\t\t      __throw_exception_again;\n+\t\t    }\n+\t\t  std::__relocate_a(this->_M_impl._M_start,\n+\t\t\t\t    this->_M_impl._M_finish,\n+\t\t\t\t    __new_start, _M_get_Tp_allocator());\n \t\t}\n-\t      __catch(...)\n+\t      else\n+#endif\n \t\t{\n-\t\t  if (__destroy_from)\n-\t\t    std::_Destroy(__destroy_from, __destroy_from + __n,\n-\t\t\t\t  _M_get_Tp_allocator());\n-\t\t  _M_deallocate(__new_start, __len);\n-\t\t  __throw_exception_again;\n+\t\t  pointer __destroy_from = pointer();\n+\t\t  __try\n+\t\t    {\n+\t\t      std::__uninitialized_default_n_a(__new_start + __size,\n+\t\t\t      __n, _M_get_Tp_allocator());\n+\t\t      __destroy_from = __new_start + __size;\n+\t\t      std::__uninitialized_move_if_noexcept_a(\n+\t\t\t      this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t\t      __new_start, _M_get_Tp_allocator());\n+\t\t    }\n+\t\t  __catch(...)\n+\t\t    {\n+\t\t      if (__destroy_from)\n+\t\t\tstd::_Destroy(__destroy_from, __destroy_from + __n,\n+\t\t\t\t      _M_get_Tp_allocator());\n+\t\t      _M_deallocate(__new_start, __len);\n+\t\t      __throw_exception_again;\n+\t\t    }\n+\t\t  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t\t\t_M_get_Tp_allocator());\n \t\t}\n \t      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n-\t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n-\t\t\t    _M_get_Tp_allocator());\n \t      _M_deallocate(this->_M_impl._M_start,\n \t\t\t    this->_M_impl._M_end_of_storage\n \t\t\t    - this->_M_impl._M_start);\n@@ -742,9 +798,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t    _M_deallocate(__new_start, __len);\n \t\t    __throw_exception_again;\n \t\t  }\n-\t\t_GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t\tstd::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t      _M_get_Tp_allocator());\n+\t\t_GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t\t_M_deallocate(this->_M_impl._M_start,\n \t\t\t      this->_M_impl._M_end_of_storage\n \t\t\t      - this->_M_impl._M_start);"}, {"sha": "f16853743665fef2372ec8bc689e756480789afd", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -80,6 +80,8 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n     template<typename _Ptr, typename... _Args>\n       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)\n+      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),\n+\t\t\t\t\t      std::forward<_Args>(__args)...)))\n       {\n \t_Base_type::construct(__a, std::__to_address(__p),\n \t\t\t      std::forward<_Args>(__args)...);\n@@ -89,6 +91,7 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n     template<typename _Ptr>\n       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n       destroy(_Alloc& __a, _Ptr __p)\n+      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))\n       { _Base_type::destroy(__a, std::__to_address(__p)); }\n \n     static _Alloc _S_select_on_copy(const _Alloc& __a)"}, {"sha": "5f91fe08af467a9f45a7b6aecad3eda3aee39144", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -151,11 +151,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)\n+\tnoexcept(noexcept(::new((void *)__p)\n+\t\t\t  _Up(std::forward<_Args>(__args)...)))\n \t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n \n       template<typename _Up>\n         void \n-        destroy(_Up* __p) { __p->~_Up(); }\n+        destroy(_Up* __p)\n+\tnoexcept(noexcept(__p->~_Up()))\n+\t{ __p->~_Up(); }\n #else\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_] allocator::construct"}, {"sha": "18a45cd75f1089b470e8580fbfcf0db67dca4658", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -142,11 +142,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up, typename... _Args>\n \tvoid\n \tconstruct(_Up* __p, _Args&&... __args)\n+\tnoexcept(noexcept(::new((void *)__p)\n+\t\t\t    _Up(std::forward<_Args>(__args)...)))\n \t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n \n       template<typename _Up>\n \tvoid\n-\tdestroy(_Up* __p) { __p->~_Up(); }\n+\tdestroy(_Up* __p)\n+\tnoexcept(noexcept( __p->~_Up()))\n+\t{ __p->~_Up(); }\n #else\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_] allocator::construct"}, {"sha": "85925ab756e33b6b17837a7f49a8830566983591", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/push_back/49836.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F49836.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f317ef76269a989ae751a808f946d15b740baf9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F49836.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F49836.cc?ref=0f317ef76269a989ae751a808f946d15b740baf9", "patch": "@@ -24,11 +24,11 @@\n // libstdc++/49836\n void test01()\n {\n-  using __gnu_test::CopyConsOnlyType;\n+  using __gnu_test::assign::DelAnyAssign;\n   using __gnu_test::MoveConsOnlyType;\n \n-  std::vector<CopyConsOnlyType> v1;\n-  CopyConsOnlyType t1(1);\n+  std::vector<DelAnyAssign> v1;\n+  DelAnyAssign t1;\n   v1.push_back(t1);\n   v1.push_back(t1);\n   v1.push_back(t1);"}]}