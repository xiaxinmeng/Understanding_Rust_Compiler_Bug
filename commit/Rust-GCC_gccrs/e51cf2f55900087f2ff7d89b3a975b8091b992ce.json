{"sha": "e51cf2f55900087f2ff7d89b3a975b8091b992ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxY2YyZjU1OTAwMDg3ZjJmZjdkODliM2E5NzViODA5MWI5OTJjZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-09-25T15:27:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-09-25T15:27:18Z"}, "message": "DR 1339\n\n\tDR 1339\n\t* doc/xml/manual/status_cxx2011.xml: Update.\n\t* include/bits/stl_uninitialized.h (uninitialized_fill_n): Return\n\tan iterator.\n\t(__uninitialized_fill_n_a, __uninitialized_default_n_a): Likewise.\n\t* include/bits/stl_vector.h (vector::_M_fill_initialize,\n\tvector::_M_default_initialize): Use returned iterator.\n\t* include/bits/vector.tcc (vector::_M_fill_assign,\n\tvector::_M_fill_insert, vector::_M_default_append): Likewise.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n\t16505.cc: Adjust return type.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n\tdr1339.cc: New.\n\nFrom-SVN: r215606", "tree": {"sha": "3d139e597e50847de4b91ee39b9023572cc17f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d139e597e50847de4b91ee39b9023572cc17f7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e51cf2f55900087f2ff7d89b3a975b8091b992ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51cf2f55900087f2ff7d89b3a975b8091b992ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e51cf2f55900087f2ff7d89b3a975b8091b992ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51cf2f55900087f2ff7d89b3a975b8091b992ce/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b497da48a5ba66d20904b971c71cf6d623067c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b497da48a5ba66d20904b971c71cf6d623067c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b497da48a5ba66d20904b971c71cf6d623067c"}], "stats": {"total": 168, "additions": 126, "deletions": 42}, "files": [{"sha": "f4478235623a4d4801534b5d2436a05e28e1985a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e51cf2f55900087f2ff7d89b3a975b8091b992ce", "patch": "@@ -1,3 +1,19 @@\n+2014-09-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tDR 1339\n+\t* doc/xml/manual/status_cxx2011.xml: Update.\n+\t* include/bits/stl_uninitialized.h (uninitialized_fill_n): Return\n+\tan iterator.\n+\t(__uninitialized_fill_n_a, __uninitialized_default_n_a): Likewise.\n+\t* include/bits/stl_vector.h (vector::_M_fill_initialize,\n+\tvector::_M_default_initialize): Use returned iterator.\n+\t* include/bits/vector.tcc (vector::_M_fill_assign,\n+\tvector::_M_fill_insert, vector::_M_default_append): Likewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n+\t16505.cc: Adjust return type.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n+\tdr1339.cc: New.\n+\n 2014-09-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/vector.tcc (vector::_M_fill_assign): Use _M_swap_data."}, {"sha": "36630cee93f91ae31336c1044b4e97d715822b9f", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=e51cf2f55900087f2ff7d89b3a975b8091b992ce", "patch": "@@ -600,11 +600,10 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>20.6.12.3</entry>\n       <entry><code>uninitialized_fill</code></entry>\n-      <entry>Partial</entry>\n-      <entry>Returns <code>void</code>..</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <?dbhtml bgcolor=\"#B0B0B0\" ?>"}, {"sha": "c864fa14bd3c2ae4bbec0ce2b595153d2eb4131f", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=e51cf2f55900087f2ff7d89b3a975b8091b992ce", "patch": "@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __uninitialized_fill_n\n     {\n       template<typename _ForwardIterator, typename _Size, typename _Tp>\n-        static void\n+        static _ForwardIterator\n         __uninit_fill_n(_ForwardIterator __first, _Size __n,\n \t\t\tconst _Tp& __x)\n         {\n@@ -199,6 +199,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    {\n \t      for (; __n > 0; --__n, ++__cur)\n \t\tstd::_Construct(std::__addressof(*__cur), __x);\n+\t      return __cur;\n \t    }\n \t  __catch(...)\n \t    {\n@@ -212,12 +213,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __uninitialized_fill_n<true>\n     {\n       template<typename _ForwardIterator, typename _Size, typename _Tp>\n-        static void\n+        static _ForwardIterator\n         __uninit_fill_n(_ForwardIterator __first, _Size __n,\n \t\t\tconst _Tp& __x)\n-        { std::fill_n(__first, __n, __x); }\n+        { return std::fill_n(__first, __n, __x); }\n     };\n \n+   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+   // DR 1339. uninitialized_fill_n should return the end of its range\n   /**\n    *  @brief Copies the value x into the range [first,first+n).\n    *  @param  __first  An input iterator.\n@@ -228,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Like fill_n(), but does not require an initialized output range.\n   */\n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n-    inline void\n+    inline _ForwardIterator\n     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n@@ -239,8 +242,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // trivial types can have deleted assignment\n       const bool __assignable = is_copy_assignable<_ValueType>::value;\n #endif\n-\n-      std::__uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::\n+      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::\n \t__uninit_fill_n(__first, __n, __x);\n     }\n \n@@ -328,7 +330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp,\n \t   typename _Allocator>\n-    void\n+    _ForwardIterator\n     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, \n \t\t\t     const _Tp& __x, _Allocator& __alloc)\n     {\n@@ -338,6 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;\n \t  for (; __n > 0; --__n, ++__cur)\n \t    __traits::construct(__alloc, std::__addressof(*__cur), __x);\n+\t  return __cur;\n \t}\n       __catch(...)\n \t{\n@@ -348,10 +351,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp,\n \t   typename _Tp2>\n-    inline void\n+    inline _ForwardIterator\n     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, \n \t\t\t     const _Tp& __x, allocator<_Tp2>&)\n-    { std::uninitialized_fill_n(__first, __n, __x); }\n+    { return std::uninitialized_fill_n(__first, __n, __x); }\n \n \n   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,\n@@ -505,14 +508,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __uninitialized_default_n_1\n     {\n       template<typename _ForwardIterator, typename _Size>\n-        static void\n+        static _ForwardIterator\n         __uninit_default_n(_ForwardIterator __first, _Size __n)\n         {\n \t  _ForwardIterator __cur = __first;\n \t  __try\n \t    {\n \t      for (; __n > 0; --__n, ++__cur)\n \t\tstd::_Construct(std::__addressof(*__cur));\n+\t      return __cur;\n \t    }\n \t  __catch(...)\n \t    {\n@@ -526,13 +530,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __uninitialized_default_n_1<true>\n     {\n       template<typename _ForwardIterator, typename _Size>\n-        static void\n+        static _ForwardIterator\n         __uninit_default_n(_ForwardIterator __first, _Size __n)\n         {\n \t  typedef typename iterator_traits<_ForwardIterator>::value_type\n \t    _ValueType;\n \n-\t  std::fill_n(__first, __n, _ValueType());\n+\t  return std::fill_n(__first, __n, _ValueType());\n \t}\n     };\n \n@@ -557,15 +561,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // __uninitialized_default_n\n   // Fills [first, first + n) with n default constructed value_type(s).\n   template<typename _ForwardIterator, typename _Size>\n-    inline void\n+    inline _ForwardIterator\n     __uninitialized_default_n(_ForwardIterator __first, _Size __n)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n       // trivial types can have deleted assignment\n       const bool __assignable = is_copy_assignable<_ValueType>::value;\n \n-      std::__uninitialized_default_n_1<__is_trivial(_ValueType)\n+      return __uninitialized_default_n_1<__is_trivial(_ValueType)\n \t\t\t\t       && __assignable>::\n \t__uninit_default_n(__first, __n);\n     }\n@@ -606,7 +610,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Fills [first, first + n) with n default constructed value_types(s),\n   // constructed with the allocator alloc.\n   template<typename _ForwardIterator, typename _Size, typename _Allocator>\n-    void\n+    _ForwardIterator\n     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, \n \t\t\t\t_Allocator& __alloc)\n     {\n@@ -616,6 +620,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;\n \t  for (; __n > 0; --__n, ++__cur)\n \t    __traits::construct(__alloc, std::__addressof(*__cur));\n+\t  return __cur;\n \t}\n       __catch(...)\n \t{\n@@ -625,10 +630,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n-    inline void\n+    inline _ForwardIterator\n     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, \n \t\t\t\tallocator<_Tp>&)\n-    { std::__uninitialized_default_n(__first, __n); }\n+    { return std::__uninitialized_default_n(__first, __n); }\n \n \n   template<typename _InputIterator, typename _Size,"}, {"sha": "dd2d4337d57242f5108616d3dd5cfff33aa7454b", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=e51cf2f55900087f2ff7d89b3a975b8091b992ce", "patch": "@@ -1297,19 +1297,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_fill_initialize(size_type __n, const value_type& __value)\n       {\n-\tstd::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, \n-\t\t\t\t      _M_get_Tp_allocator());\n-\tthis->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n+\tthis->_M_impl._M_finish =\n+\t  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,\n+\t\t\t\t\t_M_get_Tp_allocator());\n       }\n \n #if __cplusplus >= 201103L\n       // Called by the vector(n) constructor.\n       void\n       _M_default_initialize(size_type __n)\n       {\n-\tstd::__uninitialized_default_n_a(this->_M_impl._M_start, __n, \n-\t\t\t\t\t _M_get_Tp_allocator());\n-\tthis->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n+\tthis->_M_impl._M_finish =\n+\t  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,\n+\t\t\t\t\t   _M_get_Tp_allocator());\n       }\n #endif\n "}, {"sha": "19784c0ac2ecaeeabbe3cf6146114da036ebac6c", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=e51cf2f55900087f2ff7d89b3a975b8091b992ce", "patch": "@@ -233,10 +233,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       else if (__n > size())\n \t{\n \t  std::fill(begin(), end(), __val);\n-\t  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,\n-\t\t\t\t\t__n - size(), __val,\n-\t\t\t\t\t_M_get_Tp_allocator());\n-\t  this->_M_impl._M_finish += __n - size();\n+\t  this->_M_impl._M_finish =\n+\t    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,\n+\t\t\t\t\t  __n - size(), __val,\n+\t\t\t\t\t  _M_get_Tp_allocator());\n \t}\n       else\n         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));\n@@ -471,11 +471,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t}\n \t      else\n \t\t{\n-\t\t  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,\n-\t\t\t\t\t\t__n - __elems_after,\n-\t\t\t\t\t\t__x_copy,\n-\t\t\t\t\t\t_M_get_Tp_allocator());\n-\t\t  this->_M_impl._M_finish += __n - __elems_after;\n+\t\t  this->_M_impl._M_finish =\n+\t\t    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,\n+\t\t\t\t\t\t  __n - __elems_after,\n+\t\t\t\t\t\t  __x_copy,\n+\t\t\t\t\t\t  _M_get_Tp_allocator());\n \t\t  std::__uninitialized_move_a(__position.base(), __old_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n@@ -545,9 +545,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  if (size_type(this->_M_impl._M_end_of_storage\n \t\t\t- this->_M_impl._M_finish) >= __n)\n \t    {\n-\t      std::__uninitialized_default_n_a(this->_M_impl._M_finish,\n-\t\t\t\t\t       __n, _M_get_Tp_allocator());\n-\t      this->_M_impl._M_finish += __n;\n+\t      this->_M_impl._M_finish =\n+\t\tstd::__uninitialized_default_n_a(this->_M_impl._M_finish,\n+\t\t\t\t\t\t __n, _M_get_Tp_allocator());\n \t    }\n \t  else\n \t    {\n@@ -562,9 +562,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t    = std::__uninitialized_move_if_noexcept_a\n \t\t    (this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t     __new_start, _M_get_Tp_allocator());\n-\t\t  std::__uninitialized_default_n_a(__new_finish, __n,\n-\t\t\t\t\t\t   _M_get_Tp_allocator());\n-\t\t  __new_finish += __n;\n+\t\t  __new_finish =\n+\t\t    std::__uninitialized_default_n_a(__new_finish, __n,\n+\t\t\t\t\t\t     _M_get_Tp_allocator());\n \t\t}\n \t      __catch(...)\n \t\t{"}, {"sha": "72c93a5a1c8ec1e661c16e63ddea394361d9009d", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill_n/16505.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F16505.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F16505.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F16505.cc?ref=e51cf2f55900087f2ff7d89b3a975b8091b992ce", "patch": "@@ -26,5 +26,5 @@\n struct S { };\n \n template\n-  void\n+  S*\n   std::uninitialized_fill_n<S*, int, S>(S*, int, const S&);"}, {"sha": "d3ba204ef675f4af81c7c0cf40b365bc4b5ef936", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill_n/dr1339.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2Fdr1339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51cf2f55900087f2ff7d89b3a975b8091b992ce/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2Fdr1339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2Fdr1339.cc?ref=e51cf2f55900087f2ff7d89b3a975b8091b992ce", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+// test specialization for trivial types\n+void\n+test01()\n+{\n+  const int N = 10;\n+  int arr[N] = { };\n+  const int n = 5;\n+  const int over9000 = 9001;\n+  int* end = std::uninitialized_fill_n(arr, n, over9000);\n+  VERIFY( end = arr + n );\n+  for (int i = 0; i < n; ++i)\n+    VERIFY( arr[i] == over9000 );\n+  for (int i = n; i < N; ++i)\n+    VERIFY( arr[i] == 0 );\n+}\n+\n+struct T\n+{\n+  T() { }\n+  T(const T&) { ++counter; }\n+  static int counter;\n+};\n+\n+int T::counter;\n+\n+// test non-trivial\n+void\n+test02()\n+{\n+  const int n = 5;\n+  char* mem = new char[sizeof(T)*n];\n+  T* p = reinterpret_cast<T*>(mem);\n+  T* end = std::uninitialized_fill_n(p, n, T());\n+  VERIFY( end = p + n );\n+  VERIFY( T::counter == n );\n+  delete[] mem;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}