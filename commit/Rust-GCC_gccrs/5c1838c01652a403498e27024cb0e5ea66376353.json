{"sha": "5c1838c01652a403498e27024cb0e5ea66376353", "node_id": "C_kwDOANBUbNoAKDVjMTgzOGMwMTY1MmE0MDM0OThlMjcwMjRjYjBlNWVhNjYzNzYzNTM", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-10-07T14:14:00Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-10-07T15:02:19Z"}, "message": "tree-object-size: Drop unused pdecl and poff arguments\n\nThe pdecl and poff arguments were added to allow their use in\ncompute_objsize in builtins.c.  That use has been gone for a while now\nsince compute_objsize does its own size estimation, so drop these\narguments to simplify code.\n\ngcc/ChangeLog:\n\n\t* tree-object-size.c (addr_object_size,\n\tcompute_builtin_object_size): Drop PDECL and POFF arguments.\n\t(addr_object_size): Adjust calls.\n\t* tree-object-size.h (compute_builtin_object_size): Drop PDECL\n\tand POFF arguments.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "76448d3891fb7c1ddadfdd78b67ee7064933508f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76448d3891fb7c1ddadfdd78b67ee7064933508f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c1838c01652a403498e27024cb0e5ea66376353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1838c01652a403498e27024cb0e5ea66376353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1838c01652a403498e27024cb0e5ea66376353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1838c01652a403498e27024cb0e5ea66376353/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "555fa3545efe23393ff21fe0928aa3942e1b90ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555fa3545efe23393ff21fe0928aa3942e1b90ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555fa3545efe23393ff21fe0928aa3942e1b90ed"}], "stats": {"total": 45, "additions": 8, "deletions": 37}, "files": [{"sha": "6a4dc724f34ec9fc9961a912a49d3494f97f5f81", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1838c01652a403498e27024cb0e5ea66376353/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1838c01652a403498e27024cb0e5ea66376353/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=5c1838c01652a403498e27024cb0e5ea66376353", "patch": "@@ -54,8 +54,7 @@ static const unsigned HOST_WIDE_INT unknown[4] = {\n \n static tree compute_object_offset (const_tree, const_tree);\n static bool addr_object_size (struct object_size_info *,\n-\t\t\t      const_tree, int, unsigned HOST_WIDE_INT *,\n-\t\t\t      tree * = NULL, tree * = NULL);\n+\t\t\t      const_tree, int, unsigned HOST_WIDE_INT *);\n static unsigned HOST_WIDE_INT alloc_object_size (const gcall *, int);\n static tree pass_through_call (const gcall *);\n static void collect_object_sizes_for (struct object_size_info *, tree);\n@@ -209,17 +208,10 @@ decl_init_size (tree decl, bool min)\n \n static bool\n addr_object_size (struct object_size_info *osi, const_tree ptr,\n-\t\t  int object_size_type, unsigned HOST_WIDE_INT *psize,\n-\t\t  tree *pdecl /* = NULL */, tree *poff /* = NULL */)\n+\t\t  int object_size_type, unsigned HOST_WIDE_INT *psize)\n {\n   tree pt_var, pt_var_size = NULL_TREE, var_size, bytes;\n \n-  tree dummy_decl, dummy_off = size_zero_node;\n-  if (!pdecl)\n-    pdecl = &dummy_decl;\n-  if (!poff)\n-    poff = &dummy_off;\n-\n   gcc_assert (TREE_CODE (ptr) == ADDR_EXPR);\n \n   /* Set to unknown and overwrite just before returning if the size\n@@ -241,7 +233,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t  || TREE_CODE (TREE_OPERAND (pt_var, 0)) != SSA_NAME)\n \t{\n \t  compute_builtin_object_size (TREE_OPERAND (pt_var, 0),\n-\t\t\t\t       object_size_type & ~1, &sz, pdecl, poff);\n+\t\t\t\t       object_size_type & ~1, &sz);\n \t}\n       else\n \t{\n@@ -259,11 +251,6 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t  offset_int mem_offset;\n \t  if (mem_ref_offset (pt_var).is_constant (&mem_offset))\n \t    {\n-\t      if (*poff)\n-\t\t*poff = wide_int_to_tree (ptrdiff_type_node,\n-\t\t\t\t\t  mem_offset + wi::to_offset (*poff));\n-\t      else\n-\t\t*poff = wide_int_to_tree (ptrdiff_type_node, mem_offset);\n \t      offset_int dsz = wi::sub (sz, mem_offset);\n \t      if (wi::neg_p (dsz))\n \t\tsz = 0;\n@@ -281,7 +268,6 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n     }\n   else if (DECL_P (pt_var))\n     {\n-      *pdecl = pt_var;\n       pt_var_size = decl_init_size (pt_var, object_size_type & 2);\n       if (!pt_var_size)\n \treturn false;\n@@ -418,7 +404,6 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n       bytes = compute_object_offset (TREE_OPERAND (ptr, 0), var);\n       if (bytes != error_mark_node)\n \t{\n-\t  *poff = bytes;\n \t  if (TREE_CODE (bytes) == INTEGER_CST\n \t      && tree_int_cst_lt (var_size, bytes))\n \t    bytes = size_zero_node;\n@@ -438,19 +423,14 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\tbytes2 = size_zero_node;\n \t      else\n \t\tbytes2 = size_binop (MINUS_EXPR, pt_var_size, bytes2);\n-\t      *poff = size_binop (PLUS_EXPR, *poff, bytes2);\n \t      bytes = size_binop (MIN_EXPR, bytes, bytes2);\n \t    }\n \t}\n     }\n   else if (!pt_var_size)\n     return false;\n   else\n-    {\n-      bytes = pt_var_size;\n-      if (!*poff)\n-\t*poff = size_zero_node;\n-    }\n+    bytes = pt_var_size;\n \n   if (tree_fits_uhwi_p (bytes))\n     {\n@@ -548,17 +528,10 @@ pass_through_call (const gcall *call)\n \n bool\n compute_builtin_object_size (tree ptr, int object_size_type,\n-\t\t\t     unsigned HOST_WIDE_INT *psize,\n-\t\t\t     tree *pdecl /* = NULL */, tree *poff /* = NULL */)\n+\t\t\t     unsigned HOST_WIDE_INT *psize)\n {\n   gcc_assert (object_size_type >= 0 && object_size_type <= 3);\n \n-  tree dummy_decl, dummy_off = size_zero_node;\n-  if (!pdecl)\n-    pdecl = &dummy_decl;\n-  if (!poff)\n-    poff = &dummy_off;\n-\n   /* Set to unknown and overwrite just before returning if the size\n      could be determined.  */\n   *psize = unknown[object_size_type];\n@@ -567,7 +540,7 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n     init_offset_limit ();\n \n   if (TREE_CODE (ptr) == ADDR_EXPR)\n-    return addr_object_size (NULL, ptr, object_size_type, psize, pdecl, poff);\n+    return addr_object_size (NULL, ptr, object_size_type, psize);\n \n   if (TREE_CODE (ptr) != SSA_NAME\n       || !POINTER_TYPE_P (TREE_TYPE (ptr)))\n@@ -592,12 +565,11 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n \n \t      if (tree_fits_shwi_p (offset)\n \t\t  && compute_builtin_object_size (ptr, object_size_type,\n-\t\t\t\t\t\t  psize, pdecl, poff))\n+\t\t\t\t\t\t  psize))\n \t\t{\n \t\t  /* Return zero when the offset is out of bounds.  */\n \t\t  unsigned HOST_WIDE_INT off = tree_to_shwi (offset);\n \t\t  *psize = off < *psize ? *psize - off : 0;\n-\t\t  *poff = offset;\n \t\t  return true;\n \t\t}\n \t    }"}, {"sha": "ef18aea50db70cae2ae3159d219f9d4158517fae", "filename": "gcc/tree-object-size.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1838c01652a403498e27024cb0e5ea66376353/gcc%2Ftree-object-size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1838c01652a403498e27024cb0e5ea66376353/gcc%2Ftree-object-size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.h?ref=5c1838c01652a403498e27024cb0e5ea66376353", "patch": "@@ -22,8 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void init_object_sizes (void);\n extern void fini_object_sizes (void);\n-extern bool compute_builtin_object_size (tree, int, unsigned HOST_WIDE_INT *,\n-\t\t\t\t\t tree * = NULL, tree * = NULL);\n+extern bool compute_builtin_object_size (tree, int, unsigned HOST_WIDE_INT *);\n extern tree decl_init_size (tree, bool);\n \n #endif  // GCC_TREE_OBJECT_SIZE_H"}]}