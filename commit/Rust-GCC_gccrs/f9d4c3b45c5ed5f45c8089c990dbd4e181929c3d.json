{"sha": "f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "node_id": "C_kwDOANBUbNoAKGY5ZDRjM2I0NWM1ZWQ1ZjQ1YzgwODljOTkwZGJkNGUxODE5MjljM2Q", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-07-19T09:24:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-07-20T08:06:25Z"}, "message": "Lower complex type move to enable vectorization for complex type load&store.\n\n2022-07-20  Richard Biener  <richard.guenther@gmail.com>\n\t    Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/106010\n\t* tree-complex.cc (init_dont_simulate_again): Lower complex\n\ttype move.\n\t(expand_complex_move): Also expand COMPLEX_CST for rhs.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr106010-1a.c: New test.\n\t* gcc.target/i386/pr106010-1b.c: New test.\n\t* gcc.target/i386/pr106010-1c.c: New test.\n\t* gcc.target/i386/pr106010-2a.c: New test.\n\t* gcc.target/i386/pr106010-2b.c: New test.\n\t* gcc.target/i386/pr106010-2c.c: New test.\n\t* gcc.target/i386/pr106010-3a.c: New test.\n\t* gcc.target/i386/pr106010-3b.c: New test.\n\t* gcc.target/i386/pr106010-3c.c: New test.\n\t* gcc.target/i386/pr106010-4a.c: New test.\n\t* gcc.target/i386/pr106010-4b.c: New test.\n\t* gcc.target/i386/pr106010-4c.c: New test.\n\t* gcc.target/i386/pr106010-5a.c: New test.\n\t* gcc.target/i386/pr106010-5b.c: New test.\n\t* gcc.target/i386/pr106010-5c.c: New test.\n\t* gcc.target/i386/pr106010-6a.c: New test.\n\t* gcc.target/i386/pr106010-6b.c: New test.\n\t* gcc.target/i386/pr106010-6c.c: New test.\n\t* gcc.target/i386/pr106010-7a.c: New test.\n\t* gcc.target/i386/pr106010-7b.c: New test.\n\t* gcc.target/i386/pr106010-7c.c: New test.\n\t* gcc.target/i386/pr106010-8a.c: New test.\n\t* gcc.target/i386/pr106010-8b.c: New test.\n\t* gcc.target/i386/pr106010-8c.c: New test.\n\t* gcc.target/i386/pr106010-9a.c: New test.\n\t* gcc.target/i386/pr106010-9b.c: New test.\n\t* gcc.target/i386/pr106010-9c.c: New test.\n\t* gcc.target/i386/pr106010-9d.c: New test.", "tree": {"sha": "6785500e7fe62d500fed3513a561100da35b767c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6785500e7fe62d500fed3513a561100da35b767c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68871a008e686dbe56ff0b502f2864176a140716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68871a008e686dbe56ff0b502f2864176a140716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68871a008e686dbe56ff0b502f2864176a140716"}], "stats": {"total": 2142, "additions": 2141, "deletions": 1}, "files": [{"sha": "b608f484934d4aed873a29a5b4e4661f5840c67c", "filename": "gcc/testsuite/gcc.target/i386/pr106010-1a.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-vect-details -mprefer-vector-width=256\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 6 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) double>} 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) float>} 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) long long int>} 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) int>} 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) short int>} 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(32\\) char>} 2 \"vect\" } } */\n+\n+#define N 10000\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a, _Complex double* b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[i];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a, _Complex float* b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[i];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a, _Complex long long* b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[i];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a, _Complex int* b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[i];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a, _Complex short* b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[i];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a, _Complex char* b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[i];\n+}"}, {"sha": "0f377c3a5482051d8a81f68ca8d4694a88446f60", "filename": "gcc/testsuite/gcc.target/i386/pr106010-1b.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+#include <string.h>\n+#include \"pr106010-1a.c\"\n+\n+void\n+avx_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (2 * N * sizeof (double));\n+  _Complex double* pd_dst = (_Complex double*) malloc (2 * N * sizeof (double));\n+  _Complex float* ps_src = (_Complex float*) malloc (2 * N * sizeof (float));\n+  _Complex float* ps_dst = (_Complex float*) malloc (2 * N * sizeof (float));\n+  _Complex long long* epi64_src = (_Complex long long*) malloc (2 * N * sizeof (long long));\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (2 * N * sizeof (long long));\n+  _Complex int* epi32_src = (_Complex int*) malloc (2 * N * sizeof (int));\n+  _Complex int* epi32_dst = (_Complex int*) malloc (2 * N * sizeof (int));\n+  _Complex short* epi16_src = (_Complex short*) malloc (2 * N * sizeof (short));\n+  _Complex short* epi16_dst = (_Complex short*) malloc (2 * N * sizeof (short));\n+  _Complex char* epi8_src = (_Complex char*) malloc (2 * N * sizeof (char));\n+  _Complex char* epi8_dst = (_Complex char*) malloc (2 * N * sizeof (char));\n+  char* p_init = (char*) malloc (2 * N * sizeof (double));\n+\n+  __builtin_memset (pd_dst, 0, 2 * N * sizeof (double));\n+  __builtin_memset (ps_dst, 0, 2 * N * sizeof (float));\n+  __builtin_memset (epi64_dst, 0, 2 * N * sizeof (long long));\n+  __builtin_memset (epi32_dst, 0, 2 * N * sizeof (int));\n+  __builtin_memset (epi16_dst, 0, 2 * N * sizeof (short));\n+  __builtin_memset (epi8_dst, 0, 2 * N * sizeof (char));\n+\n+  for (int i = 0; i != 2 * N * sizeof (double); i++)\n+    p_init[i] = i;\n+\n+  memcpy (pd_src, p_init, 2 * N * sizeof (double));\n+  memcpy (ps_src, p_init, 2 * N * sizeof (float));\n+  memcpy (epi64_src, p_init, 2 * N * sizeof (long long));\n+  memcpy (epi32_src, p_init, 2 * N * sizeof (int));\n+  memcpy (epi16_src, p_init, 2 * N * sizeof (short));\n+  memcpy (epi8_src, p_init, 2 * N * sizeof (char));\n+\n+  foo_pd (pd_dst, pd_src);\n+  foo_ps (ps_dst, ps_src);\n+  foo_epi64 (epi64_dst, epi64_src);\n+  foo_epi32 (epi32_dst, epi32_src);\n+  foo_epi16 (epi16_dst, epi16_src);\n+  foo_epi8 (epi8_dst, epi8_src);\n+  if (__builtin_memcmp (pd_dst, pd_src, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (ps_dst, ps_src, N * 2 * sizeof (float)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi64_dst, epi64_src, N * 2 * sizeof (long long)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi32_dst, epi32_src, N * 2 * sizeof (int)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_src, N * 2 * sizeof (short)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi8_dst, epi8_src, N * 2 * sizeof (char)) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "f07e9fb2d3d69af77b26f387977900307b20e907", "filename": "gcc/testsuite/gcc.target/i386/pr106010-1c.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-1c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) _Float16>} 2 \"vect\" } } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+#define N 10000\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a, _Complex _Float16* b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[i];\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Complex _Float16* ph_src = (_Complex _Float16*) malloc (2 * N * sizeof (_Float16));\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (2 * N * sizeof (_Float16));\n+  char* p_init = (char*) malloc (2 * N * sizeof (_Float16));\n+\n+  __builtin_memset (ph_dst, 0, 2 * N * sizeof (_Float16));\n+\n+  for (int i = 0; i != 2 * N * sizeof (_Float16); i++)\n+    p_init[i] = i;\n+\n+  memcpy (ph_src, p_init, 2 * N * sizeof (_Float16));\n+\n+  foo_ph (ph_dst, ph_src);\n+  if (__builtin_memcmp (ph_dst, ph_src, N * 2 * sizeof (_Float16)) != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "d2e2f8d4f431ff37deb2419da1e4aea9a99a9d03", "filename": "gcc/testsuite/gcc.target/i386/pr106010-2a.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-slp-details -mprefer-vector-width=256\" } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 6 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) double>} 2 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) float>} 2 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) long long int>} 2 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) int>} 2 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) short int>} 2 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(32\\) char>} 2 \"slp2\" } } */\n+\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a, _Complex double* __restrict b)\n+{\n+  a[0] = b[0];\n+  a[1] = b[1];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a, _Complex float* __restrict b)\n+{\n+  a[0] = b[0];\n+  a[1] = b[1];\n+  a[2] = b[2];\n+  a[3] = b[3];\n+\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a, _Complex long long* __restrict b)\n+{\n+  a[0] = b[0];\n+  a[1] = b[1];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a, _Complex int* __restrict b)\n+{\n+  a[0] = b[0];\n+  a[1] = b[1];\n+  a[2] = b[2];\n+  a[3] = b[3];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a, _Complex short* __restrict b)\n+{\n+  a[0] = b[0];\n+  a[1] = b[1];\n+  a[2] = b[2];\n+  a[3] = b[3];\n+  a[4] = b[4];\n+  a[5] = b[5];\n+  a[6] = b[6];\n+  a[7] = b[7];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a, _Complex char* __restrict b)\n+{\n+  a[0] = b[0];\n+  a[1] = b[1];\n+  a[2] = b[2];\n+  a[3] = b[3];\n+  a[4] = b[4];\n+  a[5] = b[5];\n+  a[6] = b[6];\n+  a[7] = b[7];\n+  a[8] = b[8];\n+  a[9] = b[9];\n+  a[10] = b[10];\n+  a[11] = b[11];\n+  a[12] = b[12];\n+  a[13] = b[13];\n+  a[14] = b[14];\n+  a[15] = b[15];\n+}"}, {"sha": "ac36075269315a2ad331c7c8db5074293c381660", "filename": "gcc/testsuite/gcc.target/i386/pr106010-2b.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+#include <string.h>\n+#include \"pr106010-2a.c\"\n+\n+void\n+avx_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (32);\n+  _Complex double* pd_dst = (_Complex double*) malloc (32);\n+  _Complex float* ps_src = (_Complex float*) malloc (32);\n+  _Complex float* ps_dst = (_Complex float*) malloc (32);\n+  _Complex long long* epi64_src = (_Complex long long*) malloc (32);\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (32);\n+  _Complex int* epi32_src = (_Complex int*) malloc (32);\n+  _Complex int* epi32_dst = (_Complex int*) malloc (32);\n+  _Complex short* epi16_src = (_Complex short*) malloc (32);\n+  _Complex short* epi16_dst = (_Complex short*) malloc (32);\n+  _Complex char* epi8_src = (_Complex char*) malloc (32);\n+  _Complex char* epi8_dst = (_Complex char*) malloc (32);\n+  char* p = (char* ) malloc (32);\n+\n+  __builtin_memset (pd_dst, 0, 32);\n+  __builtin_memset (ps_dst, 0, 32);\n+  __builtin_memset (epi64_dst, 0, 32);\n+  __builtin_memset (epi32_dst, 0, 32);\n+  __builtin_memset (epi16_dst, 0, 32);\n+  __builtin_memset (epi8_dst, 0, 32);\n+\n+  for (int i = 0; i != 32; i++)\n+    p[i] = i;\n+  __builtin_memcpy (pd_src, p, 32);\n+  __builtin_memcpy (ps_src, p, 32);\n+  __builtin_memcpy (epi64_src, p, 32);\n+  __builtin_memcpy (epi32_src, p, 32);\n+  __builtin_memcpy (epi16_src, p, 32);\n+  __builtin_memcpy (epi8_src, p, 32);\n+\n+  foo_pd (pd_dst, pd_src);\n+  foo_ps (ps_dst, ps_src);\n+  foo_epi64 (epi64_dst, epi64_src);\n+  foo_epi32 (epi32_dst, epi32_src);\n+  foo_epi16 (epi16_dst, epi16_src);\n+  foo_epi8 (epi8_dst, epi8_src);\n+  if (__builtin_memcmp (pd_dst, pd_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (ps_dst, ps_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi64_dst, epi64_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi32_dst, epi32_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_src, 32) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "a002f209ec9846bbe9c9aa8ee2ed9a3b9bc39539", "filename": "gcc/testsuite/gcc.target/i386/pr106010-2c.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-2c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256 -fdump-tree-slp-details\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) _Float16>} 2 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 1 \"slp2\" } }*/\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a, _Complex _Float16* __restrict b)\n+{\n+  a[0] = b[0];\n+  a[1] = b[1];\n+  a[2] = b[2];\n+  a[3] = b[3];\n+  a[4] = b[4];\n+  a[5] = b[5];\n+  a[6] = b[6];\n+  a[7] = b[7];\n+}\n+\n+void\n+do_test (void)\n+{\n+  _Complex _Float16* ph_src = (_Complex _Float16*) malloc (32);\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (32);\n+  char* p = (char* ) malloc (32);\n+\n+   __builtin_memset (ph_dst, 0, 32);\n+ \n+  for (int i = 0; i != 32; i++)\n+    p[i] = i;\n+  __builtin_memcpy (ph_src, p, 32);\n+ \n+  foo_ph (ph_dst, ph_src);\n+  if (__builtin_memcmp (ph_dst, ph_src, 32) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "c1b64b56b1c2d40bcf7acffc08fb841e15507f18", "filename": "gcc/testsuite/gcc.target/i386/pr106010-3a.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-slp-details\" } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 6 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 2, 3, 0, 1 \\}} 2 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 6, 7, 4, 5, 2, 3, 0, 1 \\}} 1 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 2, 3, 0, 1, 6, 7, 4, 5 \\}} 1 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1 \\}} 1 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1, 30, 31, 28, 29, 26, 27, 24, 25, 22, 23, 20, 21, 18, 19, 16, 17 \\}} 1 \"slp2\" } }  */\n+\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a, _Complex double* __restrict b)\n+{\n+  a[0] = b[1];\n+  a[1] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a, _Complex float* __restrict b)\n+{\n+  a[0] = b[1];\n+  a[1] = b[0];\n+  a[2] = b[3];\n+  a[3] = b[2];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a, _Complex long long* __restrict b)\n+{\n+  a[0] = b[1];\n+  a[1] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a, _Complex int* __restrict b)\n+{\n+  a[0] = b[3];\n+  a[1] = b[2];\n+  a[2] = b[1];\n+  a[3] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a, _Complex short* __restrict b)\n+{\n+  a[0] = b[7];\n+  a[1] = b[6];\n+  a[2] = b[5];\n+  a[3] = b[4];\n+  a[4] = b[3];\n+  a[5] = b[2];\n+  a[6] = b[1];\n+  a[7] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a, _Complex char* __restrict b)\n+{\n+  a[0] = b[7];\n+  a[1] = b[6];\n+  a[2] = b[5];\n+  a[3] = b[4];\n+  a[4] = b[3];\n+  a[5] = b[2];\n+  a[6] = b[1];\n+  a[7] = b[0];\n+  a[8] = b[15];\n+  a[9] = b[14];\n+  a[10] = b[13];\n+  a[11] = b[12];\n+  a[12] = b[11];\n+  a[13] = b[10];\n+  a[14] = b[9];\n+  a[15] = b[8];\n+}"}, {"sha": "e4fa3f3a541f56e6653545734966d8aa822df8f2", "filename": "gcc/testsuite/gcc.target/i386/pr106010-3b.c", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,126 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx2 -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+#include \"pr106010-3a.c\"\n+\n+void\n+avx2_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (32);\n+  _Complex double* pd_dst = (_Complex double*) malloc (32);\n+  _Complex double* pd_exp = (_Complex double*) malloc (32);\n+  _Complex float* ps_src = (_Complex float*) malloc (32);\n+  _Complex float* ps_dst = (_Complex float*) malloc (32);\n+  _Complex float* ps_exp = (_Complex float*) malloc (32);\n+  _Complex long long* epi64_src = (_Complex long long*) malloc (32);\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (32);\n+  _Complex long long* epi64_exp = (_Complex long long*) malloc (32);\n+  _Complex int* epi32_src = (_Complex int*) malloc (32);\n+  _Complex int* epi32_dst = (_Complex int*) malloc (32);\n+  _Complex int* epi32_exp = (_Complex int*) malloc (32);\n+  _Complex short* epi16_src = (_Complex short*) malloc (32);\n+  _Complex short* epi16_dst = (_Complex short*) malloc (32);\n+  _Complex short* epi16_exp = (_Complex short*) malloc (32);\n+  _Complex char* epi8_src = (_Complex char*) malloc (32);\n+  _Complex char* epi8_dst = (_Complex char*) malloc (32);\n+  _Complex char* epi8_exp = (_Complex char*) malloc (32);\n+  char* p = (char* ) malloc (32);\n+  char* q = (char* ) malloc (32);\n+\n+  __builtin_memset (pd_dst, 0, 32);\n+  __builtin_memset (ps_dst, 0, 32);\n+  __builtin_memset (epi64_dst, 0, 32);\n+  __builtin_memset (epi32_dst, 0, 32);\n+  __builtin_memset (epi16_dst, 0, 32);\n+  __builtin_memset (epi8_dst, 0, 32);\n+\n+  for (int i = 0; i != 32; i++)\n+    p[i] = i;\n+  __builtin_memcpy (pd_src, p, 32);\n+  __builtin_memcpy (ps_src, p, 32);\n+  __builtin_memcpy (epi64_src, p, 32);\n+  __builtin_memcpy (epi32_src, p, 32);\n+  __builtin_memcpy (epi16_src, p, 32);\n+  __builtin_memcpy (epi8_src, p, 32);\n+\n+  for (int i = 0; i != 16; i++)\n+    {\n+      p[i] = i + 16;\n+      p[i + 16] = i;\n+    }\n+  __builtin_memcpy (pd_exp, p, 32);\n+  __builtin_memcpy (epi64_exp, p, 32);\n+\n+  for (int i = 0; i != 8; i++)\n+    {\n+      p[i] = i + 8;\n+      p[i + 8] = i;\n+      p[i + 16] = i + 24;\n+      p[i + 24] = i + 16;\n+      q[i] = i + 24;\n+      q[i + 8] = i + 16;\n+      q[i + 16] = i + 8;\n+      q[i + 24] = i;\n+    }\n+  __builtin_memcpy (ps_exp, p, 32);\n+  __builtin_memcpy (epi32_exp, q, 32);\n+\n+\n+  for (int i = 0; i != 4; i++)\n+    {\n+      q[i] = i + 28;\n+      q[i + 4] = i + 24;\n+      q[i + 8] = i + 20;\n+      q[i + 12] = i + 16;\n+      q[i + 16] = i + 12;\n+      q[i + 20] = i + 8;\n+      q[i + 24] = i + 4;\n+      q[i + 28] = i;\n+    }\n+  __builtin_memcpy (epi16_exp, q, 32);\n+\n+  for (int i = 0; i != 2; i++)\n+    {\n+      q[i] = i + 14;\n+      q[i + 2] = i + 12;\n+      q[i + 4] = i + 10;\n+      q[i + 6] = i + 8;\n+      q[i + 8] = i + 6;\n+      q[i + 10] = i + 4;\n+      q[i + 12] = i + 2;\n+      q[i + 14] = i;\n+      q[i + 16] = i + 30;\n+      q[i + 18] = i + 28;\n+      q[i + 20] = i + 26;\n+      q[i + 22] = i + 24;\n+      q[i + 24] = i + 22;\n+      q[i + 26] = i + 20;\n+      q[i + 28] = i + 18;\n+      q[i + 30] = i + 16;\n+    }\n+  __builtin_memcpy (epi8_exp, q, 32);\n+\n+  foo_pd (pd_dst, pd_src);\n+  foo_ps (ps_dst, ps_src);\n+  foo_epi64 (epi64_dst, epi64_src);\n+  foo_epi32 (epi32_dst, epi32_src);\n+  foo_epi16 (epi16_dst, epi16_src);\n+  foo_epi8 (epi8_dst, epi8_src);\n+  if (__builtin_memcmp (pd_dst, pd_exp, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (ps_dst, ps_exp, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi64_dst, epi64_exp, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi32_dst, epi32_exp, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_exp, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi8_dst, epi8_exp, 32) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "5a5a3d4b992a886dc988ee1dc156a6bdb31b5e42", "filename": "gcc/testsuite/gcc.target/i386/pr106010-3c.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-3c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256 -fdump-tree-slp-details\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 1 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 2, 3, 0, 1, 8, 9, 6, 7, 14, 15, 12, 13, 4, 5, 10, 11 \\}} 1 \"slp2\" } }  */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a, _Complex _Float16* __restrict b)\n+{\n+  a[0] = b[1];\n+  a[1] = b[0];\n+  a[2] = b[4];\n+  a[3] = b[3];\n+  a[4] = b[7];\n+  a[5] = b[6];\n+  a[6] = b[2];\n+  a[7] = b[5];\n+}\n+\n+void\n+do_test (void)\n+{\n+  _Complex _Float16* ph_src = (_Complex _Float16*) malloc (32);\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (32);\n+  _Complex _Float16* ph_exp = (_Complex _Float16*) malloc (32);\n+  char* p = (char* ) malloc (32);\n+  char* q = (char* ) malloc (32);\n+\n+  __builtin_memset (ph_dst, 0, 32);\n+\n+  for (int i = 0; i != 32; i++)\n+    p[i] = i;\n+  __builtin_memcpy (ph_src, p, 32);\n+\n+  for (int i = 0; i != 4; i++)\n+    {\n+      p[i] = i + 4;\n+      p[i + 4] = i;\n+      p[i + 8] = i + 16;\n+      p[i + 12] = i + 12;\n+      p[i + 16] = i + 28;\n+      p[i + 20] = i + 24;\n+      p[i + 24] = i + 8;\n+      p[i + 28] = i + 20;\n+      q[i] = i + 28;\n+      q[i + 4] = i + 24;\n+      q[i + 8] = i + 20;\n+      q[i + 12] = i + 16;\n+      q[i + 16] = i + 12;\n+      q[i + 20] = i + 8;\n+      q[i + 24] = i + 4;\n+      q[i + 28] = i;\n+    }\n+  __builtin_memcpy (ph_exp, p, 32);\n+\n+  foo_ph (ph_dst, ph_src);\n+  if (__builtin_memcmp (ph_dst, ph_exp, 32) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "b7b0b532bb1df021345bc7a6d8a18a444352376e", "filename": "gcc/testsuite/gcc.target/i386/pr106010-4a.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-slp-details\" } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 6 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) double>} 1 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) float>} 1 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) long long int>} 1 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) int>} 1 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) short int>} 1 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(32\\) char>} 1 \"slp2\" } } */\n+\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a,\n+\t_Complex double b1,\n+\t_Complex double b2)\n+{\n+  a[0] = b1;\n+  a[1] = b2;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a,\n+\t_Complex float b1, _Complex float b2,\n+\t_Complex float b3, _Complex float b4)\n+{\n+  a[0] = b1;\n+  a[1] = b2;\n+  a[2] = b3;\n+  a[3] = b4;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a,\n+\t   _Complex long long b1,\n+\t   _Complex long long b2)\n+{\n+  a[0] = b1;\n+  a[1] = b2;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a,\n+\t   _Complex int b1, _Complex int b2,\n+\t   _Complex int b3, _Complex int b4)\n+{\n+  a[0] = b1;\n+  a[1] = b2;\n+  a[2] = b3;\n+  a[3] = b4;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a,\n+\t   _Complex short b1, _Complex short b2,\n+\t   _Complex short b3, _Complex short b4,\n+\t   _Complex short b5, _Complex short b6,\n+\t   _Complex short b7,_Complex short b8)\n+{\n+  a[0] = b1;\n+  a[1] = b2;\n+  a[2] = b3;\n+  a[3] = b4;\n+  a[4] = b5;\n+  a[5] = b6;\n+  a[6] = b7;\n+  a[7] = b8;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a,\n+\t  _Complex char b1, _Complex char b2,\n+\t  _Complex char b3, _Complex char b4,\n+\t  _Complex char b5, _Complex char b6,\n+\t  _Complex char b7,_Complex char b8,\n+\t  _Complex char b9, _Complex char b10,\n+\t  _Complex char b11, _Complex char b12,\n+\t  _Complex char b13, _Complex char b14,\n+\t  _Complex char b15,_Complex char b16)\n+{\n+  a[0] = b1;\n+  a[1] = b2;\n+  a[2] = b3;\n+  a[3] = b4;\n+  a[4] = b5;\n+  a[5] = b6;\n+  a[6] = b7;\n+  a[7] = b8;\n+  a[8] = b9;\n+  a[9] = b10;\n+  a[10] = b11;\n+  a[11] = b12;\n+  a[12] = b13;\n+  a[13] = b14;\n+  a[14] = b15;\n+  a[15] = b16;\n+}"}, {"sha": "e2e79508c4b9a9ddffc56d173a4156e011caefeb", "filename": "gcc/testsuite/gcc.target/i386/pr106010-4b.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+#include <string.h>\n+#include \"pr106010-4a.c\"\n+\n+void\n+avx_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (32);\n+  _Complex double* pd_dst = (_Complex double*) malloc (32);\n+  _Complex float* ps_src = (_Complex float*) malloc (32);\n+  _Complex float* ps_dst = (_Complex float*) malloc (32);\n+  _Complex long long* epi64_src = (_Complex long long*) malloc (32);\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (32);\n+  _Complex int* epi32_src = (_Complex int*) malloc (32);\n+  _Complex int* epi32_dst = (_Complex int*) malloc (32);\n+  _Complex short* epi16_src = (_Complex short*) malloc (32);\n+  _Complex short* epi16_dst = (_Complex short*) malloc (32);\n+  _Complex char* epi8_src = (_Complex char*) malloc (32);\n+  _Complex char* epi8_dst = (_Complex char*) malloc (32);\n+  char* p = (char* ) malloc (32);\n+\n+  __builtin_memset (pd_dst, 0, 32);\n+  __builtin_memset (ps_dst, 0, 32);\n+  __builtin_memset (epi64_dst, 0, 32);\n+  __builtin_memset (epi32_dst, 0, 32);\n+  __builtin_memset (epi16_dst, 0, 32);\n+  __builtin_memset (epi8_dst, 0, 32);\n+\n+  for (int i = 0; i != 32; i++)\n+    p[i] = i;\n+  __builtin_memcpy (pd_src, p, 32);\n+  __builtin_memcpy (ps_src, p, 32);\n+  __builtin_memcpy (epi64_src, p, 32);\n+  __builtin_memcpy (epi32_src, p, 32);\n+  __builtin_memcpy (epi16_src, p, 32);\n+  __builtin_memcpy (epi8_src, p, 32);\n+\n+  foo_pd (pd_dst, pd_src[0], pd_src[1]);\n+  foo_ps (ps_dst, ps_src[0], ps_src[1], ps_src[2], ps_src[3]);\n+  foo_epi64 (epi64_dst, epi64_src[0], epi64_src[1]);\n+  foo_epi32 (epi32_dst, epi32_src[0], epi32_src[1], epi32_src[2], epi32_src[3]);\n+  foo_epi16 (epi16_dst, epi16_src[0], epi16_src[1], epi16_src[2], epi16_src[3],\n+\t     epi16_src[4], epi16_src[5], epi16_src[6], epi16_src[7]);\n+  foo_epi8 (epi8_dst, epi8_src[0], epi8_src[1], epi8_src[2], epi8_src[3],\n+\t    epi8_src[4], epi8_src[5], epi8_src[6], epi8_src[7],\n+\t    epi8_src[8], epi8_src[9], epi8_src[10], epi8_src[11],\n+\t    epi8_src[12], epi8_src[13], epi8_src[14], epi8_src[15]);\n+\n+  if (__builtin_memcmp (pd_dst, pd_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (ps_dst, ps_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi64_dst, epi64_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi32_dst, epi32_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_src, 32) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi8_dst, epi8_src, 32) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "8e02aefe3b5ecc0d0f045ee7815b31aa2b1f8e91", "filename": "gcc/testsuite/gcc.target/i386/pr106010-4c.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-4c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -fdump-tree-slp-details -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 1 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) _Float16>} 1 \"slp2\" } } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a,\n+\t_Complex _Float16 b1, _Complex _Float16 b2,\n+\t_Complex _Float16 b3, _Complex _Float16 b4,\n+\t_Complex _Float16 b5, _Complex _Float16 b6,\n+\t_Complex _Float16 b7,_Complex _Float16 b8)\n+{\n+  a[0] = b1;\n+  a[1] = b2;\n+  a[2] = b3;\n+  a[3] = b4;\n+  a[4] = b5;\n+  a[5] = b6;\n+  a[6] = b7;\n+  a[7] = b8;\n+}\n+\n+void\n+do_test (void)\n+{\n+\n+  _Complex _Float16* ph_src = (_Complex _Float16*) malloc (32);\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (32);\n+\n+  char* p = (char* ) malloc (32);\n+\n+  __builtin_memset (ph_dst, 0, 32);\n+\n+  for (int i = 0; i != 32; i++)\n+    p[i] = i;\n+\n+  __builtin_memcpy (ph_src, p, 32);\n+\n+  foo_ph (ph_dst, ph_src[0], ph_src[1], ph_src[2], ph_src[3],\n+\t  ph_src[4], ph_src[5], ph_src[6], ph_src[7]);\n+\n+  if (__builtin_memcmp (ph_dst, ph_src, 32) != 0)\n+    __builtin_abort ();\n+  return;\n+}"}, {"sha": "9d4a6f9846b99209360e63c197e04be3a1081171", "filename": "gcc/testsuite/gcc.target/i386/pr106010-5a.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,117 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-slp-details -mprefer-vector-width=256\" } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 6 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) double>} 4 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) float>} 4 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) long long int>} 4 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) int>} 4 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) short int>} 4 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(32\\) char>} 4 \"slp2\" } } */\n+\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a, _Complex double* __restrict b)\n+{\n+  a[0] = b[2];\n+  a[1] = b[3];\n+  a[2] = b[0];\n+  a[3] = b[1];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a, _Complex float* __restrict b)\n+{\n+  a[0] = b[4];\n+  a[1] = b[5];\n+  a[2] = b[6];\n+  a[3] = b[7];\n+  a[4] = b[0];\n+  a[5] = b[1];\n+  a[6] = b[2];\n+  a[7] = b[3];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a, _Complex long long* __restrict b)\n+{\n+  a[0] = b[2];\n+  a[1] = b[3];\n+  a[2] = b[0];\n+  a[3] = b[1];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a, _Complex int* __restrict b)\n+{\n+  a[0] = b[4];\n+  a[1] = b[5];\n+  a[2] = b[6];\n+  a[3] = b[7];\n+  a[4] = b[0];\n+  a[5] = b[1];\n+  a[6] = b[2];\n+  a[7] = b[3];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a, _Complex short* __restrict b)\n+{\n+  a[0] = b[8];\n+  a[1] = b[9];\n+  a[2] = b[10];\n+  a[3] = b[11];\n+  a[4] = b[12];\n+  a[5] = b[13];\n+  a[6] = b[14];\n+  a[7] = b[15];\n+  a[8] = b[0];\n+  a[9] = b[1];\n+  a[10] = b[2];\n+  a[11] = b[3];\n+  a[12] = b[4];\n+  a[13] = b[5];\n+  a[14] = b[6];\n+  a[15] = b[7];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a, _Complex char* __restrict b)\n+{\n+  a[0] = b[16];\n+  a[1] = b[17];\n+  a[2] = b[18];\n+  a[3] = b[19];\n+  a[4] = b[20];\n+  a[5] = b[21];\n+  a[6] = b[22];\n+  a[7] = b[23];\n+  a[8] = b[24];\n+  a[9] = b[25];\n+  a[10] = b[26];\n+  a[11] = b[27];\n+  a[12] = b[28];\n+  a[13] = b[29];\n+  a[14] = b[30];\n+  a[15] = b[31];\n+  a[16] = b[0];\n+  a[17] = b[1];\n+  a[18] = b[2];\n+  a[19] = b[3];\n+  a[20] = b[4];\n+  a[21] = b[5];\n+  a[22] = b[6];\n+  a[23] = b[7];\n+  a[24] = b[8];\n+  a[25] = b[9];\n+  a[26] = b[10];\n+  a[27] = b[11];\n+  a[28] = b[12];\n+  a[29] = b[13];\n+  a[30] = b[14];\n+  a[31] = b[15];\n+}"}, {"sha": "d5c6ebeb5cfda72742bd22dbfcdec17bf2f4f73b", "filename": "gcc/testsuite/gcc.target/i386/pr106010-5b.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+#include <string.h>\n+#include \"pr106010-5a.c\"\n+\n+void\n+avx_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (64);\n+  _Complex double* pd_dst = (_Complex double*) malloc (64);\n+  _Complex double* pd_exp = (_Complex double*) malloc (64);\n+  _Complex float* ps_src = (_Complex float*) malloc (64);\n+  _Complex float* ps_dst = (_Complex float*) malloc (64);\n+  _Complex float* ps_exp = (_Complex float*) malloc (64);\n+  _Complex long long* epi64_src = (_Complex long long*) malloc (64);\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (64);\n+  _Complex long long* epi64_exp = (_Complex long long*) malloc (64);\n+  _Complex int* epi32_src = (_Complex int*) malloc (64);\n+  _Complex int* epi32_dst = (_Complex int*) malloc (64);\n+  _Complex int* epi32_exp = (_Complex int*) malloc (64);\n+  _Complex short* epi16_src = (_Complex short*) malloc (64);\n+  _Complex short* epi16_dst = (_Complex short*) malloc (64);\n+  _Complex short* epi16_exp = (_Complex short*) malloc (64);\n+  _Complex char* epi8_src = (_Complex char*) malloc (64);\n+  _Complex char* epi8_dst = (_Complex char*) malloc (64);\n+  _Complex char* epi8_exp = (_Complex char*) malloc (64);\n+  char* p = (char* ) malloc (64);\n+  char* q = (char* ) malloc (64);\n+\n+  __builtin_memset (pd_dst, 0, 64);\n+  __builtin_memset (ps_dst, 0, 64);\n+  __builtin_memset (epi64_dst, 0, 64);\n+  __builtin_memset (epi32_dst, 0, 64);\n+  __builtin_memset (epi16_dst, 0, 64);\n+  __builtin_memset (epi8_dst, 0, 64);\n+\n+  for (int i = 0; i != 64; i++)\n+    {\n+      p[i] = i;\n+      q[i] = (i + 32) % 64;\n+    }\n+  __builtin_memcpy (pd_src, p, 64);\n+  __builtin_memcpy (ps_src, p, 64);\n+  __builtin_memcpy (epi64_src, p, 64);\n+  __builtin_memcpy (epi32_src, p, 64);\n+  __builtin_memcpy (epi16_src, p, 64);\n+  __builtin_memcpy (epi8_src, p, 64);\n+\n+  __builtin_memcpy (pd_exp, q, 64);\n+  __builtin_memcpy (ps_exp, q, 64);\n+  __builtin_memcpy (epi64_exp, q, 64);\n+  __builtin_memcpy (epi32_exp, q, 64);\n+  __builtin_memcpy (epi16_exp, q, 64);\n+  __builtin_memcpy (epi8_exp, q, 64);\n+\n+  foo_pd (pd_dst, pd_src);\n+  foo_ps (ps_dst, ps_src);\n+  foo_epi64 (epi64_dst, epi64_src);\n+  foo_epi32 (epi32_dst, epi32_src);\n+  foo_epi16 (epi16_dst, epi16_src);\n+  foo_epi8 (epi8_dst, epi8_src);\n+\n+  if (__builtin_memcmp (pd_dst, pd_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (ps_dst, ps_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi64_dst, epi64_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi32_dst, epi32_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi8_dst, epi8_exp, 64) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "9ce4e6dd5c0bbb618fd10d34630599c3f8267d1c", "filename": "gcc/testsuite/gcc.target/i386/pr106010-5c.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-5c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-slp-details -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 1 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) _Float16>} 4 \"slp2\" } } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a, _Complex _Float16* __restrict b)\n+{\n+  a[0] = b[8];\n+  a[1] = b[9];\n+  a[2] = b[10];\n+  a[3] = b[11];\n+  a[4] = b[12];\n+  a[5] = b[13];\n+  a[6] = b[14];\n+  a[7] = b[15];\n+  a[8] = b[0];\n+  a[9] = b[1];\n+  a[10] = b[2];\n+  a[11] = b[3];\n+  a[12] = b[4];\n+  a[13] = b[5];\n+  a[14] = b[6];\n+  a[15] = b[7];\n+}\n+\n+void\n+do_test (void)\n+{\n+  _Complex _Float16* ph_src = (_Complex _Float16*) malloc (64);\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (64);\n+  _Complex _Float16* ph_exp = (_Complex _Float16*) malloc (64);\n+  char* p = (char* ) malloc (64);\n+  char* q = (char* ) malloc (64);\n+\n+  __builtin_memset (ph_dst, 0, 64);\n+\n+  for (int i = 0; i != 64; i++)\n+    {\n+      p[i] = i;\n+      q[i] = (i + 32) % 64;\n+    }\n+  __builtin_memcpy (ph_src, p, 64);\n+\n+  __builtin_memcpy (ph_exp, q, 64);\n+\n+  foo_ph (ph_dst, ph_src);\n+\n+  if (__builtin_memcmp (ph_dst, ph_exp, 64) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "65a90d03684ff7c2ea5909fb86824b8bf980e701", "filename": "gcc/testsuite/gcc.target/i386/pr106010-6a.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-slp-details -mprefer-vector-width=256\" } */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 6 \"slp2\" } }*/\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 2, 3, 0, 1 \\}} 4 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 6, 7, 4, 5, 2, 3, 0, 1 \\}} 4 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1 \\}} 2 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 30, 31, 28, 29, 26, 27, 24, 25, 22, 23, 20, 21, 18, 19, 16, 17, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1 \\}} 2 \"slp2\" } }  */\n+\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a, _Complex double* __restrict b)\n+{\n+  a[0] = b[3];\n+  a[1] = b[2];\n+  a[2] = b[1];\n+  a[3] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a, _Complex float* __restrict b)\n+{\n+  a[0] = b[7];\n+  a[1] = b[6];\n+  a[2] = b[5];\n+  a[3] = b[4];\n+  a[4] = b[3];\n+  a[5] = b[2];\n+  a[6] = b[1];\n+  a[7] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a, _Complex long long* __restrict b)\n+{\n+  a[0] = b[3];\n+  a[1] = b[2];\n+  a[2] = b[1];\n+  a[3] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a, _Complex int* __restrict b)\n+{\n+  a[0] = b[7];\n+  a[1] = b[6];\n+  a[2] = b[5];\n+  a[3] = b[4];\n+  a[4] = b[3];\n+  a[5] = b[2];\n+  a[6] = b[1];\n+  a[7] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a, _Complex short* __restrict b)\n+{\n+  a[0] = b[15];\n+  a[1] = b[14];\n+  a[2] = b[13];\n+  a[3] = b[12];\n+  a[4] = b[11];\n+  a[5] = b[10];\n+  a[6] = b[9];\n+  a[7] = b[8];\n+  a[8] = b[7];\n+  a[9] = b[6];\n+  a[10] = b[5];\n+  a[11] = b[4];\n+  a[12] = b[3];\n+  a[13] = b[2];\n+  a[14] = b[1];\n+  a[15] = b[0];\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a, _Complex char* __restrict b)\n+{\n+  a[0] = b[31];\n+  a[1] = b[30];\n+  a[2] = b[29];\n+  a[3] = b[28];\n+  a[4] = b[27];\n+  a[5] = b[26];\n+  a[6] = b[25];\n+  a[7] = b[24];\n+  a[8] = b[23];\n+  a[9] = b[22];\n+  a[10] = b[21];\n+  a[11] = b[20];\n+  a[12] = b[19];\n+  a[13] = b[18];\n+  a[14] = b[17];\n+  a[15] = b[16];\n+  a[16] = b[15];\n+  a[17] = b[14];\n+  a[18] = b[13];\n+  a[19] = b[12];\n+  a[20] = b[11];\n+  a[21] = b[10];\n+  a[22] = b[9];\n+  a[23] = b[8];\n+  a[24] = b[7];\n+  a[25] = b[6];\n+  a[26] = b[5];\n+  a[27] = b[4];\n+  a[28] = b[3];\n+  a[29] = b[2];\n+  a[30] = b[1];\n+  a[31] = b[0];\n+}"}, {"sha": "1c5bb020939c42cc3f4384000d54919d2c60b965", "filename": "gcc/testsuite/gcc.target/i386/pr106010-6b.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx2 -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+#include \"pr106010-6a.c\"\n+\n+void\n+avx2_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (64);\n+  _Complex double* pd_dst = (_Complex double*) malloc (64);\n+  _Complex double* pd_exp = (_Complex double*) malloc (64);\n+  _Complex float* ps_src = (_Complex float*) malloc (64);\n+  _Complex float* ps_dst = (_Complex float*) malloc (64);\n+  _Complex float* ps_exp = (_Complex float*) malloc (64);\n+  _Complex long long* epi64_src = (_Complex long long*) malloc (64);\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (64);\n+  _Complex long long* epi64_exp = (_Complex long long*) malloc (64);\n+  _Complex int* epi32_src = (_Complex int*) malloc (64);\n+  _Complex int* epi32_dst = (_Complex int*) malloc (64);\n+  _Complex int* epi32_exp = (_Complex int*) malloc (64);\n+  _Complex short* epi16_src = (_Complex short*) malloc (64);\n+  _Complex short* epi16_dst = (_Complex short*) malloc (64);\n+  _Complex short* epi16_exp = (_Complex short*) malloc (64);\n+  _Complex char* epi8_src = (_Complex char*) malloc (64);\n+  _Complex char* epi8_dst = (_Complex char*) malloc (64);\n+  _Complex char* epi8_exp = (_Complex char*) malloc (64);\n+  char* p = (char* ) malloc (64);\n+  char* q = (char* ) malloc (64);\n+\n+  __builtin_memset (pd_dst, 0, 64);\n+  __builtin_memset (ps_dst, 0, 64);\n+  __builtin_memset (epi64_dst, 0, 64);\n+  __builtin_memset (epi32_dst, 0, 64);\n+  __builtin_memset (epi16_dst, 0, 64);\n+  __builtin_memset (epi8_dst, 0, 64);\n+\n+  for (int i = 0; i != 64; i++)\n+    p[i] = i;\n+\n+  __builtin_memcpy (pd_src, p, 64);\n+  __builtin_memcpy (ps_src, p, 64);\n+  __builtin_memcpy (epi64_src, p, 64);\n+  __builtin_memcpy (epi32_src, p, 64);\n+  __builtin_memcpy (epi16_src, p, 64);\n+  __builtin_memcpy (epi8_src, p, 64);\n+\n+\n+  for (int i = 0; i != 16; i++)\n+    {\n+      q[i] = i + 48;\n+      q[i + 16] = i + 32;\n+      q[i + 32] = i + 16;\n+      q[i + 48] = i;\n+    }\n+ \n+  __builtin_memcpy (pd_exp, q, 64);\n+  __builtin_memcpy (epi64_exp, q, 64);\n+\n+   for (int i = 0; i != 8; i++)\n+    {\n+      q[i] = i + 56;\n+      q[i + 8] = i + 48;\n+      q[i + 16] = i + 40;\n+      q[i + 24] = i + 32;\n+      q[i + 32] = i + 24;\n+      q[i + 40] = i + 16;\n+      q[i + 48] = i + 8;\n+      q[i + 56] = i;\n+    }\n+\n+  __builtin_memcpy (ps_exp, q, 64);\n+  __builtin_memcpy (epi32_exp, q, 64);\n+\n+  for (int i = 0; i != 4; i++)\n+    {\n+      q[i] = i + 60;\n+      q[i + 4] = i + 56;\n+      q[i + 8] = i + 52;\n+      q[i + 12] = i + 48;\n+      q[i + 16] = i + 44;\n+      q[i + 20] = i + 40;\n+      q[i + 24] = i + 36;\n+      q[i + 28] = i + 32;\n+      q[i + 32] = i + 28;\n+      q[i + 36] = i + 24;\n+      q[i + 40] = i + 20;\n+      q[i + 44] = i + 16;\n+      q[i + 48] = i + 12;\n+      q[i + 52] = i + 8;\n+      q[i + 56] = i + 4;\n+      q[i + 60] = i;\n+    }\n+\n+  __builtin_memcpy (epi16_exp, q, 64);\n+\n+  for (int i = 0; i != 2; i++)\n+    {\n+      q[i] = i + 62;\n+      q[i + 2] = i + 60;\n+      q[i + 4] = i + 58;\n+      q[i + 6] = i + 56;\n+      q[i + 8] = i + 54;\n+      q[i + 10] = i + 52;\n+      q[i + 12] = i + 50;\n+      q[i + 14] = i + 48;\n+      q[i + 16] = i + 46;\n+      q[i + 18] = i + 44;\n+      q[i + 20] = i + 42;\n+      q[i + 22] = i + 40;\n+      q[i + 24] = i + 38;\n+      q[i + 26] = i + 36;\n+      q[i + 28] = i + 34;\n+      q[i + 30] = i + 32;\n+      q[i + 32] = i + 30;\n+      q[i + 34] = i + 28;\n+      q[i + 36] = i + 26;\n+      q[i + 38] = i + 24;\n+      q[i + 40] = i + 22;\n+      q[i + 42] = i + 20;\n+      q[i + 44] = i + 18;\n+      q[i + 46] = i + 16;\n+      q[i + 48] = i + 14;\n+      q[i + 50] = i + 12;\n+      q[i + 52] = i + 10;\n+      q[i + 54] = i + 8;\n+      q[i + 56] = i + 6;\n+      q[i + 58] = i + 4;\n+      q[i + 60] = i + 2;\n+      q[i + 62] = i;\n+    }\n+  __builtin_memcpy (epi8_exp, q, 64);\n+\n+  foo_pd (pd_dst, pd_src);\n+  foo_ps (ps_dst, ps_src);\n+  foo_epi64 (epi64_dst, epi64_src);\n+  foo_epi32 (epi32_dst, epi32_src);\n+  foo_epi16 (epi16_dst, epi16_src);\n+  foo_epi8 (epi8_dst, epi8_src);\n+\n+  if (__builtin_memcmp (pd_dst, pd_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (ps_dst, ps_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi64_dst, epi64_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi32_dst, epi32_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_exp, 64) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi8_dst, epi8_exp, 64) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "b859d884a7fcfec99ec34bad22da933836feb694", "filename": "gcc/testsuite/gcc.target/i386/pr106010-6c.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-6c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256 -fdump-tree-slp-details\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*VEC_PERM_EXPR.*\\{ 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1 \\}} 2 \"slp2\" } }  */\n+/* { dg-final { scan-tree-dump-times \"basic block part vectorized using (?:32|64) byte vectors\" 1 \"slp2\" } } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a, _Complex _Float16* __restrict b)\n+{\n+  a[0] = b[15];\n+  a[1] = b[14];\n+  a[2] = b[13];\n+  a[3] = b[12];\n+  a[4] = b[11];\n+  a[5] = b[10];\n+  a[6] = b[9];\n+  a[7] = b[8];\n+  a[8] = b[7];\n+  a[9] = b[6];\n+  a[10] = b[5];\n+  a[11] = b[4];\n+  a[12] = b[3];\n+  a[13] = b[2];\n+  a[14] = b[1];\n+  a[15] = b[0];\n+}\n+\n+void\n+do_test (void)\n+{\n+  _Complex _Float16* ph_src = (_Complex _Float16*) malloc (64);\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (64);\n+  _Complex _Float16* ph_exp = (_Complex _Float16*) malloc (64);\n+  char* p = (char* ) malloc (64);\n+  char* q = (char* ) malloc (64);\n+\n+  __builtin_memset (ph_dst, 0, 64);\n+\n+  for (int i = 0; i != 64; i++)\n+    p[i] = i;\n+\n+  __builtin_memcpy (ph_src, p, 64);\n+\n+  for (int i = 0; i != 4; i++)\n+    {\n+      q[i] = i + 60;\n+      q[i + 4] = i + 56;\n+      q[i + 8] = i + 52;\n+      q[i + 12] = i + 48;\n+      q[i + 16] = i + 44;\n+      q[i + 20] = i + 40;\n+      q[i + 24] = i + 36;\n+      q[i + 28] = i + 32;\n+      q[i + 32] = i + 28;\n+      q[i + 36] = i + 24;\n+      q[i + 40] = i + 20;\n+      q[i + 44] = i + 16;\n+      q[i + 48] = i + 12;\n+      q[i + 52] = i + 8;\n+      q[i + 56] = i + 4;\n+      q[i + 60] = i;\n+    }\n+\n+  __builtin_memcpy (ph_exp, q, 64);\n+\n+  foo_ph (ph_dst, ph_src);\n+  \n+  if (__builtin_memcmp (ph_dst, ph_exp, 64) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "2ea01fac9271e6f41e15aeddafb850cbcbb15698", "filename": "gcc/testsuite/gcc.target/i386/pr106010-7a.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-vect-details -mprefer-vector-width=256\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 6 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) double>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) float>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) long long int>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) int>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) short int>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(32\\) char>} 1 \"vect\" } } */\n+\n+#define N 10000\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a, _Complex double b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a, _Complex float b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a, _Complex long long b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a, _Complex int b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a, _Complex short b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a, _Complex char b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b;\n+}"}, {"sha": "26482cc10f5ab2cc7a58ef89c1e7780e225040d8", "filename": "gcc/testsuite/gcc.target/i386/pr106010-7b.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+#include <string.h>\n+#include \"pr106010-7a.c\"\n+\n+void\n+avx_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (2 * N * sizeof (double));\n+  _Complex double* pd_dst = (_Complex double*) malloc (2 * N * sizeof (double));\n+  _Complex float* ps_src = (_Complex float*) malloc (2 * N * sizeof (float));\n+  _Complex float* ps_dst = (_Complex float*) malloc (2 * N * sizeof (float));\n+  _Complex long long* epi64_src = (_Complex long long*) malloc (2 * N * sizeof (long long));\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (2 * N * sizeof (long long));\n+  _Complex int* epi32_src = (_Complex int*) malloc (2 * N * sizeof (int));\n+  _Complex int* epi32_dst = (_Complex int*) malloc (2 * N * sizeof (int));\n+  _Complex short* epi16_src = (_Complex short*) malloc (2 * N * sizeof (short));\n+  _Complex short* epi16_dst = (_Complex short*) malloc (2 * N * sizeof (short));\n+  _Complex char* epi8_src = (_Complex char*) malloc (2 * N * sizeof (char));\n+  _Complex char* epi8_dst = (_Complex char*) malloc (2 * N * sizeof (char));\n+  char* p_init = (char*) malloc (2 * N * sizeof (double));\n+\n+  __builtin_memset (pd_dst, 0, 2 * N * sizeof (double));\n+  __builtin_memset (ps_dst, 0, 2 * N * sizeof (float));\n+  __builtin_memset (epi64_dst, 0, 2 * N * sizeof (long long));\n+  __builtin_memset (epi32_dst, 0, 2 * N * sizeof (int));\n+  __builtin_memset (epi16_dst, 0, 2 * N * sizeof (short));\n+  __builtin_memset (epi8_dst, 0, 2 * N * sizeof (char));\n+\n+  for (int i = 0; i != 2 * N * sizeof (double); i++)\n+    p_init[i] = i % 2 + 3;\n+\n+  memcpy (pd_src, p_init, 2 * N * sizeof (double));\n+  memcpy (ps_dst, p_init, 2 * N * sizeof (float));\n+  memcpy (epi64_dst, p_init, 2 * N * sizeof (long long));\n+  memcpy (epi32_dst, p_init, 2 * N * sizeof (int));\n+  memcpy (epi16_dst, p_init, 2 * N * sizeof (short));\n+  memcpy (epi8_dst, p_init, 2 * N * sizeof (char));\n+\n+  foo_pd (pd_dst, pd_src[0]);\n+  foo_ps (ps_dst, ps_src[0]);\n+  foo_epi64 (epi64_dst, epi64_src[0]);\n+  foo_epi32 (epi32_dst, epi32_src[0]);\n+  foo_epi16 (epi16_dst, epi16_src[0]);\n+  foo_epi8 (epi8_dst, epi8_src[0]);\n+  if (__builtin_memcmp (pd_dst, pd_src, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (ps_dst, ps_src, N * 2 * sizeof (float)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi64_dst, epi64_src, N * 2 * sizeof (long long)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi32_dst, epi32_src, N * 2 * sizeof (int)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi16_dst, epi16_src, N * 2 * sizeof (short)) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (epi8_dst, epi8_src, N * 2 * sizeof (char)) != 0)\n+    __builtin_abort ();\n+\n+  return;\n+}"}, {"sha": "7f4056a5eccd95ff433b2faa75f787ae4960770e", "filename": "gcc/testsuite/gcc.target/i386/pr106010-7c.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-7c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) _Float16>} 1 \"vect\" } } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+#define N 10000\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a, _Complex _Float16 b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b;\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Complex _Float16* ph_src = (_Complex _Float16*) malloc (2 * N * sizeof (_Float16));\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (2 * N * sizeof (_Float16));\n+  char* p_init = (char*) malloc (2 * N * sizeof (_Float16));\n+\n+  __builtin_memset (ph_dst, 0, 2 * N * sizeof (_Float16));\n+\n+  for (int i = 0; i != 2 * N * sizeof (_Float16); i++)\n+    p_init[i] = i % 2 + 3;\n+\n+  memcpy (ph_src, p_init, 2 * N * sizeof (_Float16));\n+\n+  foo_ph (ph_dst, ph_src[0]);\n+  if (__builtin_memcmp (ph_dst, ph_src, N * 2 * sizeof (_Float16)) != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "11054b60d30c0785cd680ac1bf9b17a16075d0da", "filename": "gcc/testsuite/gcc.target/i386/pr106010-8a.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -fdump-tree-vect-details -mprefer-vector-width=256\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 6 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) double>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) float>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(4\\) long long int>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(8\\) int>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) short int>} 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(32\\) char>} 1 \"vect\" } } */\n+\n+#define N 10000\n+void\n+__attribute__((noipa))\n+foo_pd (_Complex double* a)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = 1.0 + 2.0i;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_ps (_Complex float* a)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = 1.0f + 2.0fi;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi64 (_Complex long long* a)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = 1 + 2i;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi32 (_Complex int* a)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = 1 + 2i;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi16 (_Complex short* a)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = 1 + 2i;\n+}\n+\n+void\n+__attribute__((noipa))\n+foo_epi8 (_Complex char* a)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = 1 + 2i;\n+}"}, {"sha": "6bb0073b691687b313053a96765e8d9d7cc4107b", "filename": "gcc/testsuite/gcc.target/i386/pr106010-8b.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+#include <string.h>\n+#include \"pr106010-8a.c\"\n+\n+void\n+avx_test (void)\n+{\n+  _Complex double pd_src = 1.0 + 2.0i;\n+  _Complex double* pd_dst = (_Complex double*) malloc (2 * N * sizeof (double));\n+  _Complex float ps_src = 1.0 + 2.0i;\n+  _Complex float* ps_dst = (_Complex float*) malloc (2 * N * sizeof (float));\n+  _Complex long long epi64_src = 1 + 2i;;\n+  _Complex long long* epi64_dst = (_Complex long long*) malloc (2 * N * sizeof (long long));\n+  _Complex int epi32_src = 1 + 2i;\n+  _Complex int* epi32_dst = (_Complex int*) malloc (2 * N * sizeof (int));\n+  _Complex short epi16_src = 1 + 2i;\n+  _Complex short* epi16_dst = (_Complex short*) malloc (2 * N * sizeof (short));\n+  _Complex char epi8_src = 1 + 2i;\n+  _Complex char* epi8_dst = (_Complex char*) malloc (2 * N * sizeof (char));\n+\n+  __builtin_memset (pd_dst, 0, 2 * N * sizeof (double));\n+  __builtin_memset (ps_dst, 0, 2 * N * sizeof (float));\n+  __builtin_memset (epi64_dst, 0, 2 * N * sizeof (long long));\n+  __builtin_memset (epi32_dst, 0, 2 * N * sizeof (int));\n+  __builtin_memset (epi16_dst, 0, 2 * N * sizeof (short));\n+  __builtin_memset (epi8_dst, 0, 2 * N * sizeof (char));\n+\n+  foo_pd (pd_dst);\n+  foo_ps (ps_dst);\n+  foo_epi64 (epi64_dst);\n+  foo_epi32 (epi32_dst);\n+  foo_epi16 (epi16_dst);\n+  foo_epi8 (epi8_dst);\n+  for (int i = 0 ; i != N; i++)\n+    {\n+      if (pd_dst[i] != pd_src)\n+\t__builtin_abort ();\n+      if (ps_dst[i] != ps_src)\n+\t__builtin_abort ();\n+      if (epi64_dst[i] != epi64_src)\n+\t__builtin_abort ();\n+      if (epi32_dst[i] != epi32_src)\n+\t__builtin_abort ();\n+      if (epi16_dst[i] != epi16_src)\n+\t__builtin_abort ();\n+      if (epi8_dst[i] != epi8_src)\n+\t__builtin_abort ();\n+    }\n+}"}, {"sha": "61ae131829dc7595044c2c6ac6fecbedb17ef8bc", "filename": "gcc/testsuite/gcc.target/i386/pr106010-8c.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-8c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fvect-cost-model=unlimited -mprefer-vector-width=256 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times {(?n)add new stmt:.*MEM <vector\\(16\\) _Float16>} 1 \"vect\" } } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+#define N 10000\n+\n+void\n+__attribute__((noipa))\n+foo_ph (_Complex _Float16* a)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = 1.0f16 + 2.0f16i;\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Complex _Float16 ph_src = 1.0f16 + 2.0f16i;\n+  _Complex _Float16* ph_dst = (_Complex _Float16*) malloc (2 * N * sizeof (_Float16));\n+\n+  __builtin_memset (ph_dst, 0, 2 * N * sizeof (_Float16));\n+\n+  foo_ph (ph_dst);\n+  for (int i = 0; i != N; i++)\n+    {\n+      if (ph_dst[i] != ph_src)\n+\t__builtin_abort ();\n+    }\n+}"}, {"sha": "e922f7b540022db1184e90cf91c5843854ba80fe", "filename": "gcc/testsuite/gcc.target/i386/pr106010-9a.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9a.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx2 -fvect-cost-model=unlimited -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 6 \"vect\" } } */\n+\n+typedef struct { _Complex double c; double a1; double a2;}\n+  cdf;\n+typedef struct { _Complex double c; double a1; double a2; double a3; double a4;}\n+  cdf2;\n+typedef struct { _Complex double c1; _Complex double c2; double a1; double a2; double a3; double a4;}\n+  cdf3;\n+typedef struct { _Complex double c1; _Complex double c2; double a1; double a2;}\n+  cdf4;\n+\n+#define N 100\n+/* VMAT_ELEMENTWISE.  */\n+void\n+__attribute__((noipa))\n+foo (cdf* a, cdf* __restrict b)\n+{\n+   for (int i = 0; i < N; ++i)\n+    {\n+      a[i].c = b[i].c;\n+      a[i].a1 = b[i].a1;\n+      a[i].a2 = b[i].a2;\n+    }\n+}\n+\n+/* VMAT_CONTIGUOUS_PERMUTE.  */\n+void\n+__attribute__((noipa))\n+foo1 (cdf2* a, cdf2* __restrict b)\n+{\n+   for (int i = 0; i < N; ++i)\n+    {\n+      a[i].c = b[i].c;\n+      a[i].a1 = b[i].a1;\n+      a[i].a2 = b[i].a2;\n+      a[i].a3 = b[i].a3;\n+      a[i].a4 = b[i].a4;\n+    }\n+}\n+\n+/* VMAT_CONTIGUOUS.  */\n+void\n+__attribute__((noipa))\n+foo2 (cdf3* a, cdf3* __restrict b)\n+{\n+   for (int i = 0; i < N; ++i)\n+    {\n+      a[i].c1 = b[i].c1;\n+      a[i].c2 = b[i].c2;\n+      a[i].a1 = b[i].a1;\n+      a[i].a2 = b[i].a2;\n+      a[i].a3 = b[i].a3;\n+      a[i].a4 = b[i].a4;\n+    }\n+}\n+\n+/* VMAT_STRIDED_SLP.  */\n+void\n+__attribute__((noipa))\n+foo3 (cdf4* a, cdf4* __restrict b)\n+{\n+   for (int i = 0; i < N; ++i)\n+    {\n+      a[i].c1 = b[i].c1;\n+      a[i].c2 = b[i].c2;\n+      a[i].a1 = b[i].a1;\n+      a[i].a2 = b[i].a2;\n+    }\n+}\n+\n+/* VMAT_CONTIGUOUS_REVERSE.  */\n+void\n+__attribute__((noipa))\n+foo4 (_Complex double* a, _Complex double* __restrict b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[i] = b[N-i-1];\n+}\n+\n+/* VMAT_CONTIGUOUS_DOWN.  */\n+void\n+__attribute__((noipa))\n+foo5 (_Complex double* a, _Complex double* __restrict b)\n+{\n+  for (int i = 0; i != N; i++)\n+    a[N-i-1] = b[0];\n+}"}, {"sha": "e220445e6e3a29f936266e3e7f71cf70c9676948", "filename": "gcc/testsuite/gcc.target/i386/pr106010-9b.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9b.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -msse2 -fvect-cost-model=unlimited\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include <string.h>\n+#include \"sse2-check.h\"\n+#include \"pr106010-9a.c\"\n+\n+static void\n+sse2_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_dst = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_src2 = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_dst2 = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  cdf* cdf_src = (cdf*) malloc (N * sizeof (cdf));\n+  cdf* cdf_dst = (cdf*) malloc (N * sizeof (cdf));\n+  cdf2* cdf2_src = (cdf2*) malloc (N * sizeof (cdf2));\n+  cdf2* cdf2_dst = (cdf2*) malloc (N * sizeof (cdf2));\n+  cdf3* cdf3_src = (cdf3*) malloc (N * sizeof (cdf3));\n+  cdf3* cdf3_dst = (cdf3*) malloc (N * sizeof (cdf3));\n+  cdf4* cdf4_src = (cdf4*) malloc (N * sizeof (cdf4));\n+  cdf4* cdf4_dst = (cdf4*) malloc (N * sizeof (cdf4));\n+  \n+  char* p_init = (char*) malloc (N * sizeof (cdf3));\n+\n+  __builtin_memset (cdf_dst, 0, N * sizeof (cdf));\n+  __builtin_memset (cdf2_dst, 0, N * sizeof (cdf2));\n+  __builtin_memset (cdf3_dst, 0, N * sizeof (cdf3));\n+  __builtin_memset (cdf4_dst, 0, N * sizeof (cdf4));\n+  __builtin_memset (pd_dst, 0, N * sizeof (_Complex double));\n+  __builtin_memset (pd_dst2, 0, N * sizeof (_Complex double));\n+\n+  for (int i = 0; i != N * sizeof (cdf3); i++)\n+    p_init[i] = i;\n+\n+  memcpy (cdf_src, p_init, N * sizeof (cdf));\n+  memcpy (cdf2_src, p_init, N * sizeof (cdf2));\n+  memcpy (cdf3_src, p_init, N * sizeof (cdf3));\n+  memcpy (cdf4_src, p_init, N * sizeof (cdf4));\n+  memcpy (pd_src, p_init, N * sizeof (_Complex double));\n+  for (int i = 0; i != 2 * N * sizeof (double); i++)\n+    p_init[i] = i % 16;\n+  memcpy (pd_src2, p_init, N * sizeof (_Complex double));\n+\n+  foo (cdf_dst, cdf_src);\n+  foo1 (cdf2_dst, cdf2_src);\n+  foo2 (cdf3_dst, cdf3_src);\n+  foo3 (cdf4_dst, cdf4_src);\n+  foo4 (pd_dst, pd_src);\n+  foo5 (pd_dst2, pd_src2);\n+  for (int i = 0; i != N; i++)\n+    {\n+      p_init[(N - i - 1) * 16] = i * 16;\n+      p_init[(N - i - 1) * 16 + 1] = i * 16 + 1;\n+      p_init[(N - i - 1) * 16 + 2] = i * 16 + 2;\n+      p_init[(N - i - 1) * 16 + 3] = i * 16 + 3;\n+      p_init[(N - i - 1) * 16 + 4] = i * 16 + 4;\n+      p_init[(N - i - 1) * 16 + 5] = i * 16 + 5;\n+      p_init[(N - i - 1) * 16 + 6] = i * 16 + 6;\n+      p_init[(N - i - 1) * 16 + 7] = i * 16 + 7;\n+      p_init[(N - i - 1) * 16 + 8] = i * 16 + 8;\n+      p_init[(N - i - 1) * 16 + 9] = i * 16 + 9;\n+      p_init[(N - i - 1) * 16 + 10] = i * 16 + 10;\n+      p_init[(N - i - 1) * 16 + 11] = i * 16 + 11;\n+      p_init[(N - i - 1) * 16 + 12] = i * 16 + 12;\n+      p_init[(N - i - 1) * 16 + 13] = i * 16 + 13;\n+      p_init[(N - i - 1) * 16 + 14] = i * 16 + 14;\n+      p_init[(N - i - 1) * 16 + 15] = i * 16 + 15;\n+    }\n+  memcpy (pd_src, p_init, N * 16);\n+ \n+  if (__builtin_memcmp (pd_dst, pd_src, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (pd_dst2, pd_src2, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf_dst, cdf_src, N * sizeof (cdf)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf2_dst, cdf2_src, N * sizeof (cdf2)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf3_dst, cdf3_src, N * sizeof (cdf3)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf4_dst, cdf4_src, N * sizeof (cdf4)) != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "ff51f6195b7393a142ee1699bb52dfc7e6e9e78e", "filename": "gcc/testsuite/gcc.target/i386/pr106010-9c.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9c.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mavx2 -fvect-cost-model=unlimited\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+#include \"pr106010-9a.c\"\n+\n+static void\n+avx2_test (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_dst = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_src2 = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_dst2 = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  cdf* cdf_src = (cdf*) malloc (N * sizeof (cdf));\n+  cdf* cdf_dst = (cdf*) malloc (N * sizeof (cdf));\n+  cdf2* cdf2_src = (cdf2*) malloc (N * sizeof (cdf2));\n+  cdf2* cdf2_dst = (cdf2*) malloc (N * sizeof (cdf2));\n+  cdf3* cdf3_src = (cdf3*) malloc (N * sizeof (cdf3));\n+  cdf3* cdf3_dst = (cdf3*) malloc (N * sizeof (cdf3));\n+  cdf4* cdf4_src = (cdf4*) malloc (N * sizeof (cdf4));\n+  cdf4* cdf4_dst = (cdf4*) malloc (N * sizeof (cdf4));\n+  \n+  char* p_init = (char*) malloc (N * sizeof (cdf3));\n+\n+  __builtin_memset (cdf_dst, 0, N * sizeof (cdf));\n+  __builtin_memset (cdf2_dst, 0, N * sizeof (cdf2));\n+  __builtin_memset (cdf3_dst, 0, N * sizeof (cdf3));\n+  __builtin_memset (cdf4_dst, 0, N * sizeof (cdf4));\n+  __builtin_memset (pd_dst, 0, N * sizeof (_Complex double));\n+  __builtin_memset (pd_dst2, 0, N * sizeof (_Complex double));\n+\n+  for (int i = 0; i != N * sizeof (cdf3); i++)\n+    p_init[i] = i;\n+\n+  memcpy (cdf_src, p_init, N * sizeof (cdf));\n+  memcpy (cdf2_src, p_init, N * sizeof (cdf2));\n+  memcpy (cdf3_src, p_init, N * sizeof (cdf3));\n+  memcpy (cdf4_src, p_init, N * sizeof (cdf4));\n+  memcpy (pd_src, p_init, N * sizeof (_Complex double));\n+  for (int i = 0; i != 2 * N * sizeof (double); i++)\n+    p_init[i] = i % 16;\n+  memcpy (pd_src2, p_init, N * sizeof (_Complex double));\n+\n+  foo (cdf_dst, cdf_src);\n+  foo1 (cdf2_dst, cdf2_src);\n+  foo2 (cdf3_dst, cdf3_src);\n+  foo3 (cdf4_dst, cdf4_src);\n+  foo4 (pd_dst, pd_src);\n+  foo5 (pd_dst2, pd_src2);\n+  for (int i = 0; i != N; i++)\n+    {\n+      p_init[(N - i - 1) * 16] = i * 16;\n+      p_init[(N - i - 1) * 16 + 1] = i * 16 + 1;\n+      p_init[(N - i - 1) * 16 + 2] = i * 16 + 2;\n+      p_init[(N - i - 1) * 16 + 3] = i * 16 + 3;\n+      p_init[(N - i - 1) * 16 + 4] = i * 16 + 4;\n+      p_init[(N - i - 1) * 16 + 5] = i * 16 + 5;\n+      p_init[(N - i - 1) * 16 + 6] = i * 16 + 6;\n+      p_init[(N - i - 1) * 16 + 7] = i * 16 + 7;\n+      p_init[(N - i - 1) * 16 + 8] = i * 16 + 8;\n+      p_init[(N - i - 1) * 16 + 9] = i * 16 + 9;\n+      p_init[(N - i - 1) * 16 + 10] = i * 16 + 10;\n+      p_init[(N - i - 1) * 16 + 11] = i * 16 + 11;\n+      p_init[(N - i - 1) * 16 + 12] = i * 16 + 12;\n+      p_init[(N - i - 1) * 16 + 13] = i * 16 + 13;\n+      p_init[(N - i - 1) * 16 + 14] = i * 16 + 14;\n+      p_init[(N - i - 1) * 16 + 15] = i * 16 + 15;\n+    }\n+  memcpy (pd_src, p_init, N * 16);\n+ \n+  if (__builtin_memcmp (pd_dst, pd_src, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (pd_dst2, pd_src2, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf_dst, cdf_src, N * sizeof (cdf)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf2_dst, cdf2_src, N * sizeof (cdf2)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf3_dst, cdf3_src, N * sizeof (cdf3)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf4_dst, cdf4_src, N * sizeof (cdf4)) != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "d4d8f1dd722ff71aa148215cb62cd7c1eef059a5", "filename": "gcc/testsuite/gcc.target/i386/pr106010-9d.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106010-9d.c?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mavx512f -mavx512vl -fvect-cost-model=unlimited -mprefer-vector-width=512\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include <string.h>\n+#include <stdlib.h>\n+#define AVX512F\n+#include \"avx512-check.h\"\n+#include \"pr106010-9a.c\"\n+\n+static void\n+test_512 (void)\n+{\n+  _Complex double* pd_src = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_dst = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_src2 = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  _Complex double* pd_dst2 = (_Complex double*) malloc (N * sizeof (_Complex double));\n+  cdf* cdf_src = (cdf*) malloc (N * sizeof (cdf));\n+  cdf* cdf_dst = (cdf*) malloc (N * sizeof (cdf));\n+  cdf2* cdf2_src = (cdf2*) malloc (N * sizeof (cdf2));\n+  cdf2* cdf2_dst = (cdf2*) malloc (N * sizeof (cdf2));\n+  cdf3* cdf3_src = (cdf3*) malloc (N * sizeof (cdf3));\n+  cdf3* cdf3_dst = (cdf3*) malloc (N * sizeof (cdf3));\n+  cdf4* cdf4_src = (cdf4*) malloc (N * sizeof (cdf4));\n+  cdf4* cdf4_dst = (cdf4*) malloc (N * sizeof (cdf4));\n+  \n+  char* p_init = (char*) malloc (N * sizeof (cdf3));\n+\n+  __builtin_memset (cdf_dst, 0, N * sizeof (cdf));\n+  __builtin_memset (cdf2_dst, 0, N * sizeof (cdf2));\n+  __builtin_memset (cdf3_dst, 0, N * sizeof (cdf3));\n+  __builtin_memset (cdf4_dst, 0, N * sizeof (cdf4));\n+  __builtin_memset (pd_dst, 0, N * sizeof (_Complex double));\n+  __builtin_memset (pd_dst2, 0, N * sizeof (_Complex double));\n+\n+  for (int i = 0; i != N * sizeof (cdf3); i++)\n+    p_init[i] = i;\n+\n+  memcpy (cdf_src, p_init, N * sizeof (cdf));\n+  memcpy (cdf2_src, p_init, N * sizeof (cdf2));\n+  memcpy (cdf3_src, p_init, N * sizeof (cdf3));\n+  memcpy (cdf4_src, p_init, N * sizeof (cdf4));\n+  memcpy (pd_src, p_init, N * sizeof (_Complex double));\n+  for (int i = 0; i != 2 * N * sizeof (double); i++)\n+    p_init[i] = i % 16;\n+  memcpy (pd_src2, p_init, N * sizeof (_Complex double));\n+\n+  foo (cdf_dst, cdf_src);\n+  foo1 (cdf2_dst, cdf2_src);\n+  foo2 (cdf3_dst, cdf3_src);\n+  foo3 (cdf4_dst, cdf4_src);\n+  foo4 (pd_dst, pd_src);\n+  foo5 (pd_dst2, pd_src2);\n+  for (int i = 0; i != N; i++)\n+    {\n+      p_init[(N - i - 1) * 16] = i * 16;\n+      p_init[(N - i - 1) * 16 + 1] = i * 16 + 1;\n+      p_init[(N - i - 1) * 16 + 2] = i * 16 + 2;\n+      p_init[(N - i - 1) * 16 + 3] = i * 16 + 3;\n+      p_init[(N - i - 1) * 16 + 4] = i * 16 + 4;\n+      p_init[(N - i - 1) * 16 + 5] = i * 16 + 5;\n+      p_init[(N - i - 1) * 16 + 6] = i * 16 + 6;\n+      p_init[(N - i - 1) * 16 + 7] = i * 16 + 7;\n+      p_init[(N - i - 1) * 16 + 8] = i * 16 + 8;\n+      p_init[(N - i - 1) * 16 + 9] = i * 16 + 9;\n+      p_init[(N - i - 1) * 16 + 10] = i * 16 + 10;\n+      p_init[(N - i - 1) * 16 + 11] = i * 16 + 11;\n+      p_init[(N - i - 1) * 16 + 12] = i * 16 + 12;\n+      p_init[(N - i - 1) * 16 + 13] = i * 16 + 13;\n+      p_init[(N - i - 1) * 16 + 14] = i * 16 + 14;\n+      p_init[(N - i - 1) * 16 + 15] = i * 16 + 15;\n+    }\n+  memcpy (pd_src, p_init, N * 16);\n+ \n+  if (__builtin_memcmp (pd_dst, pd_src, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (pd_dst2, pd_src2, N * 2 * sizeof (double)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf_dst, cdf_src, N * sizeof (cdf)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf2_dst, cdf2_src, N * sizeof (cdf2)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf3_dst, cdf3_src, N * sizeof (cdf3)) != 0)\n+    __builtin_abort ();\n+\n+  if (__builtin_memcmp (cdf4_dst, cdf4_src, N * sizeof (cdf4)) != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "ea9df6114a17efbdebd23e1ee1a7bcb793fbcdc9", "filename": "gcc/tree-complex.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftree-complex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d/gcc%2Ftree-complex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.cc?ref=f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "patch": "@@ -297,6 +297,11 @@ init_dont_simulate_again (void)\n \t\tbreak;\n \n \t      default:\n+\t\t/* When expand_complex_move would trigger make sure we\n+\t\t   perform lowering even when there is no actual complex\n+\t\t   operation.  This helps consistency and vectorization.  */\n+\t\tif (TREE_CODE (TREE_TYPE (gimple_op (stmt, 0))) == COMPLEX_TYPE)\n+\t\t  saw_a_complex_op = true;\n \t\tbreak;\n \t      }\n \n@@ -869,7 +874,9 @@ expand_complex_move (gimple_stmt_iterator *gsi, tree type)\n \t  update_complex_assignment (gsi, r, i);\n \t}\n     }\n-  else if (rhs && TREE_CODE (rhs) == SSA_NAME && !TREE_SIDE_EFFECTS (lhs))\n+  else if (rhs\n+\t   && (TREE_CODE (rhs) == SSA_NAME || TREE_CODE (rhs) == COMPLEX_CST)\n+\t   && !TREE_SIDE_EFFECTS (lhs))\n     {\n       tree x;\n       gimple *t;"}]}