{"sha": "97948f419d8f77bbf30e402016c865d9de333b7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5NDhmNDE5ZDhmNzdiYmYzMGU0MDIwMTZjODY1ZDlkZTMzM2I3Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:10:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:10:04Z"}, "message": "[multiple changes]\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): Handle properly a\n\tcompletion in a grand-child unit when the parent type is itself\n\ta private type in a child unit whose full view is itself a\n\tderivation from a private type.\n\n2012-12-05  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case\n\tAttribute_Valid): Remove code for issuing warning on Valid within\n\ta predicate. Moved to Sem_Attr.  Remove with and use of Errout.\n\t* sem_attr.adb (Analyze_Attribute, case Attribute_Valid):\n\tTest for prefix's subtype having a predicate and issue warning\n\tabout infinite recursion if Valid occurs within the subtype's\n\tpredicate. Warning moved here from Exp_Attr.\n\n2012-12-05  Yannick Moy  <moy@adacore.com>\n\n\t* debug.adb: Minor comment addition.\n\n2012-12-05  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): In CodePeer mode, check\n\toverflows by default, even when the user suppresses overflow checks.\n\nFrom-SVN: r194190", "tree": {"sha": "2b357d89eb666107253f06a3c8aa831d07c304af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b357d89eb666107253f06a3c8aa831d07c304af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97948f419d8f77bbf30e402016c865d9de333b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97948f419d8f77bbf30e402016c865d9de333b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97948f419d8f77bbf30e402016c865d9de333b7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97948f419d8f77bbf30e402016c865d9de333b7f/comments", "author": null, "committer": null, "parents": [{"sha": "739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "1c137354cafee6ee470458d25f149cfc52da827c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=97948f419d8f77bbf30e402016c865d9de333b7f", "patch": "@@ -1,3 +1,29 @@\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Handle properly a\n+\tcompletion in a grand-child unit when the parent type is itself\n+\ta private type in a child unit whose full view is itself a\n+\tderivation from a private type.\n+\n+2012-12-05  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case\n+\tAttribute_Valid): Remove code for issuing warning on Valid within\n+\ta predicate. Moved to Sem_Attr.  Remove with and use of Errout.\n+\t* sem_attr.adb (Analyze_Attribute, case Attribute_Valid):\n+\tTest for prefix's subtype having a predicate and issue warning\n+\tabout infinite recursion if Valid occurs within the subtype's\n+\tpredicate. Warning moved here from Exp_Attr.\n+\n+2012-12-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb: Minor comment addition.\n+\n+2012-12-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): In CodePeer mode, check\n+\toverflows by default, even when the user suppresses overflow checks.\n+\n 2012-12-05  Thomas Quinot  <quinot@adacore.com>\n \n \t* err_vars.ads: Fix minor typo in comment."}, {"sha": "bcb6ee3322c3f9e858056311b505d3c508b1ccef", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=97948f419d8f77bbf30e402016c865d9de333b7f", "patch": "@@ -658,6 +658,10 @@ package body Debug is\n    --       reverts to the behavior of earlier compilers, which ignored\n    --       indirect calls.\n \n+   --  d.V  Extensions for formal verification. New attributes/aspects/pragmas\n+   --       defined in GNAT for formal verification with the tool GNATprove are\n+   --       only accepted under this switch.\n+\n    --  d.W  Print out debugging information for Walk_Library_Items, including\n    --       the order in which units are walked. This is primarily for use in\n    --       debugging CodePeer mode."}, {"sha": "cb31c2276a111bbe8eeadd3b82558d859e7ee892", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=97948f419d8f77bbf30e402016c865d9de333b7f", "patch": "@@ -27,7 +27,6 @@ with Atree;    use Atree;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n-with Errout;   use Errout;\n with Exp_Atag; use Exp_Atag;\n with Exp_Ch2;  use Exp_Ch2;\n with Exp_Ch3;  use Exp_Ch3;\n@@ -5611,7 +5610,7 @@ package body Exp_Attr is\n \n          --  If a predicate is present, then we do the predicate test, even if\n          --  within the predicate function (infinite recursion is warned about\n-         --  in that case).\n+         --  in Sem_Attr in that case).\n \n          declare\n             Pred_Func : constant Entity_Id := Predicate_Function (Ptyp);\n@@ -5622,19 +5621,6 @@ package body Exp_Attr is\n                  Make_And_Then (Loc,\n                    Left_Opnd  => Relocate_Node (N),\n                    Right_Opnd => Make_Predicate_Call (Ptyp, Pref)));\n-\n-               --  If the attribute appears within the subtype's own predicate\n-               --  function, then issue a warning that this will cause infinite\n-               --  recursion.\n-\n-               --  Do we have to issue these warnings in the expander rather\n-               --  than during analysis (means they are skipped in -gnatc???).\n-\n-               if Current_Scope = Pred_Func then\n-                  Error_Msg_N\n-                    (\"attribute Valid requires a predicate check?\", N);\n-                  Error_Msg_N (\"\\and will result in infinite recursion?\", N);\n-               end if;\n             end if;\n          end;\n "}, {"sha": "4d0485a9fbdd6b179b4e6c03de6120efef4101b4", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=97948f419d8f77bbf30e402016c865d9de333b7f", "patch": "@@ -180,8 +180,8 @@ procedure Gnat1drv is\n          Restrict.Restrictions.Set   (Max_Asynchronous_Select_Nesting) := True;\n          Restrict.Restrictions.Value (Max_Asynchronous_Select_Nesting) := 0;\n \n-         --  Suppress overflow, division by zero and access checks since they\n-         --  are handled implicitly by CodePeer.\n+         --  Suppress division by zero and access checks since they are handled\n+         --  implicitly by CodePeer.\n \n          --  Turn off dynamic elaboration checks: generates inconsistencies in\n          --  trees between specs compiled as part of a main unit or as part of\n@@ -201,6 +201,13 @@ procedure Gnat1drv is\n \n          Dynamic_Elaboration_Checks := False;\n \n+         --  Set STRICT mode for overflow checks if not set explicitly\n+\n+         if Suppress_Options.Overflow_Checks_General = Not_Set then\n+            Suppress_Options.Overflow_Checks_General    := Strict;\n+            Suppress_Options.Overflow_Checks_Assertions := Strict;\n+         end if;\n+\n          --  Kill debug of generated code, since it messes up sloc values\n \n          Debug_Generated_Code := False;\n@@ -328,7 +335,8 @@ procedure Gnat1drv is\n \n       --  Set proper status for overflow check mechanism\n \n-      --  If already set (by -gnato) then we have nothing to do\n+      --  If already set (by -gnato or above in CodePeer mode) then we have\n+      --  nothing to do.\n \n       if Opt.Suppress_Options.Overflow_Checks_General /= Not_Set then\n          null;"}, {"sha": "773b50205e69572ed1a586e53d173d600be3de5a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=97948f419d8f77bbf30e402016c865d9de333b7f", "patch": "@@ -5557,6 +5557,21 @@ package body Sem_Attr is\n             Error_Attr_P (\"object for % attribute must be of scalar type\");\n          end if;\n \n+         --  If the attribute appears within the subtype's own predicate\n+         --  function, then issue a warning that this will cause infinite\n+         --  recursion.\n+\n+         declare\n+            Pred_Func : constant Entity_Id := Predicate_Function (P_Type);\n+\n+         begin\n+            if Present (Pred_Func) and then Current_Scope = Pred_Func then\n+               Error_Msg_N\n+                 (\"attribute Valid requires a predicate check?\", N);\n+               Error_Msg_N (\"\\and will result in infinite recursion?\", N);\n+            end if;\n+         end;\n+\n          Set_Etype (N, Standard_Boolean);\n \n       -------------------"}, {"sha": "51d725009b827cc4b1404ac16a3eb85fb32e43d5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97948f419d8f77bbf30e402016c865d9de333b7f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=97948f419d8f77bbf30e402016c865d9de333b7f", "patch": "@@ -6516,6 +6516,7 @@ package body Sem_Ch3 is\n            and then Is_Completion\n            and then In_Private_Part (Current_Scope)\n            and then Scope (Parent_Type) /= Current_Scope\n+           and then Present (Full_View (Parent_Type))\n          then\n             --  This is the unusual case where a type completed by a private\n             --  derivation occurs within a package nested in a child unit, and\n@@ -6524,6 +6525,10 @@ package body Sem_Ch3 is\n             --  the enclosing child, and only then will the current type be\n             --  possibly non-private. We build a underlying full view that\n             --  will be installed when the enclosing child body is compiled.\n+            --  Note that if the parent has a completion in the private part,\n+            --  (which is itself a derivation from some other private type)\n+            --  it is that completion that is visible, there is no full view\n+            --  view available, and no special processing is needed.\n \n             Full_Der :=\n               Make_Defining_Identifier"}]}