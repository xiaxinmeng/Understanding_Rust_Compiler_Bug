{"sha": "916b57cedabb2d80ac3e947a682efa3bce15cf4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE2YjU3Y2VkYWJiMmQ4MGFjM2U5NDdhNjgyZWZhM2JjZTE1Y2Y0ZQ==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2003-09-03T13:44:43Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2003-09-03T13:44:43Z"}, "message": "decl.c (java_expand_body): New function.\n\n* decl.c (java_expand_body): New function.\n* expr.c (build_class_init): Set DECL_IGNORED_P.\n* java-tree.h (start_complete_expand_method,\njava_expand_body): Declare.\n* jcf-parse.c (cgraph.h): Include.\n(java_parse_file): Handle flag_unit_at_a_time.\n* lang.c (LANG_HOOKS_TREE_INLINING_START_INLINING,\nLANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Define.\n(java_estimate_num_insns): Use walk_tree_without_duplicates.\n(java_start_inlining): New function.\n* parse.h (java_finish_classes): Declare.\n* parse.y: Include cgraph.h.\n(block): Don't special-case empty block production.\n(craft_constructor): Set DECL_INLINE.\n(source_end_java_method): Handle flag_unit_at_a_time.\nReplace inline code with call to java_expand_body.\n(start_complete_expand_method): Remove static modifier.\n(java_expand_method_bodies): Patch function tree for\nclass initialization and/or synchronization as needed.\nDon't begin RTL expansion yet.\n(java_expand_classes): Check flag_unit_at_a_time before\ncalling finish_class.\n(java_finish_classes): New function.\n(java_complete_lhs): Ensure COMPOUND_EXPR has non-NULL type.\n(patch_assignment): Set DECL_CONTEXT on temporary variable.\n(emit_test_initialization): Set DECL_IGNORED_P.\n\nFrom-SVN: r71024", "tree": {"sha": "67c1212abb34f567ee45068cdd132021ed676e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c1212abb34f567ee45068cdd132021ed676e26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/916b57cedabb2d80ac3e947a682efa3bce15cf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916b57cedabb2d80ac3e947a682efa3bce15cf4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916b57cedabb2d80ac3e947a682efa3bce15cf4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916b57cedabb2d80ac3e947a682efa3bce15cf4e/comments", "author": null, "committer": null, "parents": [{"sha": "e71d3aae3f8c92f18732e8cca0d07e0b2c31f814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71d3aae3f8c92f18732e8cca0d07e0b2c31f814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71d3aae3f8c92f18732e8cca0d07e0b2c31f814"}], "stats": {"total": 251, "additions": 206, "deletions": 45}, "files": [{"sha": "3b5253696af2bbb6a5825972c76ca9af9adaaded", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -1,3 +1,32 @@\n+2003-09-03  Jeff Sturm  <jsturm@one-point.com>\n+\n+\t* decl.c (java_expand_body): New function.\n+\t* expr.c (build_class_init): Set DECL_IGNORED_P.\n+\t* java-tree.h (start_complete_expand_method,\n+\tjava_expand_body): Declare.\n+\t* jcf-parse.c (cgraph.h): Include.\n+\t(java_parse_file): Handle flag_unit_at_a_time.\n+\t* lang.c (LANG_HOOKS_TREE_INLINING_START_INLINING,\n+\tLANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Define.\n+\t(java_estimate_num_insns): Use walk_tree_without_duplicates.\n+\t(java_start_inlining): New function.\n+\t* parse.h (java_finish_classes): Declare.\n+\t* parse.y: Include cgraph.h.\n+\t(block): Don't special-case empty block production.\n+\t(craft_constructor): Set DECL_INLINE.\n+\t(source_end_java_method): Handle flag_unit_at_a_time.\n+\tReplace inline code with call to java_expand_body.\n+\t(start_complete_expand_method): Remove static modifier.\n+\t(java_expand_method_bodies): Patch function tree for\n+\tclass initialization and/or synchronization as needed.\n+\tDon't begin RTL expansion yet.\n+\t(java_expand_classes): Check flag_unit_at_a_time before\n+\tcalling finish_class.\n+\t(java_finish_classes): New function.\n+\t(java_complete_lhs): Ensure COMPOUND_EXPR has non-NULL type.\n+\t(patch_assignment): Set DECL_CONTEXT on temporary variable.\n+\t(emit_test_initialization): Set DECL_IGNORED_P.\n+\n 2003-09-03  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (enum builtin_type): Delete unused enumeration."}, {"sha": "90978e48ec88423b3ae1bca949a2139f61827276", "filename": "gcc/java/decl.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -1811,6 +1811,59 @@ end_java_method (void)\n   current_function_decl = NULL_TREE;\n }\n \n+/* Expand a function's body.  */\n+\n+void\n+java_expand_body (tree fndecl)\n+{\n+  const char *saved_input_filename = input_filename;\n+  int saved_lineno = input_line;\n+\n+  current_function_decl = fndecl;\n+  input_filename = DECL_SOURCE_FILE (fndecl);\n+  input_line = DECL_SOURCE_LINE (fndecl);\n+\n+  timevar_push (TV_EXPAND);\n+\n+  /* Prepare the function for tree completion.  */\n+  start_complete_expand_method (fndecl);\n+\n+  if (! flag_emit_class_files && ! flag_emit_xref)\n+    {\n+      /* Initialize the RTL code for the function.  */\n+      init_function_start (fndecl);\n+\n+      /* Set up parameters and prepare for return, for the function.  */\n+      expand_function_start (fndecl, 0);\n+\n+      /* Generate the RTL for this function.  */\n+      expand_expr_stmt_value (DECL_SAVED_TREE (fndecl), 0, 1);\n+    }\n+\n+  /* Pop out of its parameters.  */\n+  pushdecl_force_head (DECL_ARGUMENTS (fndecl));\n+  poplevel (1, 0, 1);\n+  BLOCK_SUPERCONTEXT (DECL_INITIAL (fndecl)) = fndecl;\n+\n+  if (! flag_emit_class_files && ! flag_emit_xref)\n+    {\n+      /* Generate RTL for function exit.  */\n+      input_line = DECL_FUNCTION_LAST_LINE (fndecl);\n+      expand_function_end ();\n+\n+      /* Run the optimizers and output the assembler code\n+\t for this function.  */\n+      rest_of_compilation (fndecl);\n+    }\n+\n+  timevar_pop (TV_EXPAND);\n+\n+  input_filename = saved_input_filename;\n+  input_line = saved_lineno;\n+\n+  current_function_decl = NULL_TREE;\n+}\n+\n /* Dump FUNCTION_DECL FN as tree dump PHASE. */\n \n static void"}, {"sha": "1c7d501f650048a4e2dd61b76ff4832e17c81203", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -1710,6 +1710,8 @@ build_class_init (tree clas, tree expr)\n              optimizing class initialization. */\n \t  if (!STATIC_CLASS_INIT_OPT_P ())\n \t    DECL_BIT_INDEX(*init_test_decl) = -1;\n+\t  /* Don't emit any symbolic debugging info for this decl.  */\n+\t  DECL_IGNORED_P (*init_test_decl) = 1;\n \t}\n \n       init = build (CALL_EXPR, void_type_node,"}, {"sha": "69eb73c3784334ee32ad7d4e9a890f81034a1695", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -1297,6 +1297,9 @@ extern void compile_resource_file (const char *, const char *);\n extern void write_resource_constructor (void);\n extern void init_resource_processing (void);\n \n+extern void start_complete_expand_method (tree);\n+extern void java_expand_body (tree);\n+\n \n #define DECL_FINAL(DECL) DECL_LANG_FLAG_3 (DECL)\n "}, {"sha": "f47dbe0897a27e020468402508877500c7031214", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -42,6 +42,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"debug.h\"\n #include \"assert.h\"\n #include \"tm_p.h\"\n+#include \"cgraph.h\"\n \n #ifdef HAVE_LOCALE_H\n #include <locale.h>\n@@ -1119,6 +1120,13 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n   java_expand_classes ();\n   if (!java_report_errors () && !flag_syntax_only)\n     {\n+      if (flag_unit_at_a_time)\n+\t{\n+\t  cgraph_finalize_compilation_unit ();\n+\t  cgraph_optimize ();\n+\t  java_finish_classes ();\n+\t}\n+\n       emit_register_classes ();\n       if (flag_indirect_dispatch)\n \temit_offset_symbol_table ();"}, {"sha": "5ade4c0844c38b59d6c3deff8fc3e50684bd3666", "filename": "gcc/java/lang.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -67,6 +67,7 @@ static bool java_dump_tree (void *, tree);\n static void dump_compound_expr (dump_info_p, tree);\n static bool java_decl_ok_for_sibcall (tree);\n static int java_estimate_num_insns (tree);\n+static int java_start_inlining (tree);\n \n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\"\n@@ -253,12 +254,18 @@ struct language_function GTY(())\n #undef LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS\n #define LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS java_estimate_num_insns\n \n+#undef LANG_HOOKS_TREE_INLINING_START_INLINING\n+#define LANG_HOOKS_TREE_INLINING_START_INLINING java_start_inlining\n+\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN java_dump_tree\n \n #undef LANG_HOOKS_DECL_OK_FOR_SIBCALL\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL java_decl_ok_for_sibcall\n \n+#undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n+#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION java_expand_body\n+\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -1178,8 +1185,21 @@ static int\n java_estimate_num_insns (tree decl)\n {\n   int num = 0;\n-  walk_tree (&DECL_SAVED_TREE (decl), java_estimate_num_insns_1, &num, NULL);\n+  walk_tree_without_duplicates (&DECL_SAVED_TREE (decl),\n+\t\t\t\tjava_estimate_num_insns_1, &num);\n   return num;\n }\n \n+/* Start inlining fn.  Called by the tree inliner via\n+   lang_hooks.tree_inlining.cannot_inline_tree_fn.  */\n+\n+static int\n+java_start_inlining (tree fn)\n+{\n+  /* A java function's body doesn't have a BLOCK structure suitable\n+     for debug output until it is expanded.  Prevent inlining functions\n+     that are not yet expanded.  */\n+  return TREE_ASM_WRITTEN (fn) ? 1 : 0;\n+}\n+\n #include \"gt-java-lang.h\""}, {"sha": "023410842b2a9918d08fdb84f3a410575e8e63cc", "filename": "gcc/java/parse.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -941,6 +941,7 @@ ATTRIBUTE_NORETURN\n #endif\n ;\n extern void java_expand_classes (void);\n+extern void java_finish_classes (void);\n \n extern GTY(()) struct parser_ctxt *ctxp;\n extern GTY(()) struct parser_ctxt *ctxp_for_generation;"}, {"sha": "8684537268c0dcfcbc908f415b992afb3aab6a23", "filename": "gcc/java/parse.y", "status": "modified", "additions": 89, "deletions": 44, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916b57cedabb2d80ac3e947a682efa3bce15cf4e/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=916b57cedabb2d80ac3e947a682efa3bce15cf4e", "patch": "@@ -71,6 +71,7 @@ definitions and other extensions.  */\n #include \"ggc.h\"\n #include \"debug.h\"\n #include \"tree-inline.h\"\n+#include \"cgraph.h\"\n \n /* Local function prototypes */\n static char *java_accstring_lookup (int);\n@@ -141,7 +142,6 @@ static tree java_complete_tree (tree);\n static tree maybe_generate_pre_expand_clinit (tree);\n static int analyze_clinit_body (tree, tree);\n static int maybe_yank_clinit (tree);\n-static void start_complete_expand_method (tree);\n static void java_complete_expand_method (tree);\n static void java_expand_method_bodies (tree);\n static int  unresolved_type_p (tree, tree *);\n@@ -1352,14 +1352,8 @@ variable_initializers:\n \n /* 19.11 Production from 14: Blocks and Statements  */\n block:\n-\tOCB_TK CCB_TK\n-\t\t{\n-\t\t  /* Store the location of the `}' when doing xrefs */\n-\t\t  if (current_function_decl && flag_emit_xref)\n-\t\t    DECL_END_SOURCE_LINE (current_function_decl) =\n-\t\t      EXPR_WFL_ADD_COL ($2.location, 1);\n-\t\t  $$ = empty_stmt_node;\n-\t\t}\n+\tblock_begin block_end\n+\t\t{ $$ = $2; }\n |\tblock_begin block_statements block_end\n \t\t{ $$ = $3; }\n ;\n@@ -5405,6 +5399,7 @@ craft_constructor (tree class_decl, tree args)\n   /* Now, mark the artificial parameters. */\n   DECL_FUNCTION_NAP (decl) = artificial;\n   DECL_FUNCTION_SYNTHETIC_CTOR (decl) = DECL_CONSTRUCTOR_P (decl) = 1;\n+  DECL_INLINE (decl) = 1;\n   return decl;\n }\n \n@@ -7476,30 +7471,20 @@ source_end_java_method (void)\n      patched.  Dump it to a file if the user requested it.  */\n   dump_java_tree (TDI_original, fndecl);\n \n-  java_optimize_inline (fndecl);\n-\n-  /* Generate function's code */\n-  if (BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl))\n-      && ! flag_emit_class_files\n-      && ! flag_emit_xref)\n-    expand_expr_stmt (BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl)));\n-\n-  /* pop out of its parameters */\n-  pushdecl_force_head (DECL_ARGUMENTS (fndecl));\n-  poplevel (1, 0, 1);\n-  BLOCK_SUPERCONTEXT (DECL_INITIAL (fndecl)) = fndecl;\n-\n-  /* Generate rtl for function exit.  */\n-  if (! flag_emit_class_files && ! flag_emit_xref)\n+  /* In unit-at-a-time mode, don't expand the method yet.  */\n+  if (DECL_SAVED_TREE (fndecl) && flag_unit_at_a_time)\n     {\n-      input_line = DECL_FUNCTION_LAST_LINE (fndecl);\n-      expand_function_end ();\n-\n-      /* Run the optimizers and output assembler code for this function. */\n-      rest_of_compilation (fndecl);\n+      cgraph_finalize_function (fndecl, DECL_SAVED_TREE (fndecl));\n+      current_function_decl = NULL_TREE;\n+      java_parser_context_restore_global ();\n+      return;\n     }\n \n-  current_function_decl = NULL_TREE;\n+  java_optimize_inline (fndecl);\n+\n+  /* Expand the function's body.  */\n+  java_expand_body (fndecl);\n+\n   java_parser_context_restore_global ();\n }\n \n@@ -7969,7 +7954,7 @@ maybe_yank_clinit (tree mdecl)\n /* Install the argument from MDECL. Suitable to completion and\n    expansion of mdecl's body.  */\n \n-static void\n+void\n start_complete_expand_method (tree mdecl)\n {\n   tree tem;\n@@ -8112,15 +8097,26 @@ java_expand_method_bodies (tree class)\n   tree decl;\n   for (decl = TYPE_METHODS (class); decl; decl = TREE_CHAIN (decl))\n     {\n-      if (!DECL_FUNCTION_BODY (decl))\n+      tree block;\n+      tree body;\n+\n+      if (! DECL_FUNCTION_BODY (decl))\n \tcontinue;\n \n       current_function_decl = decl;\n \n-      /* Save the function for inlining.  */\n-      if (flag_inline_trees)\n-\tDECL_SAVED_TREE (decl) =\n-\t  BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (decl));\n+      block = BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (decl));\n+\n+      if (TREE_CODE (block) != BLOCK)\n+\tabort ();\n+\n+      /* Save the function body for inlining.  */\n+      DECL_SAVED_TREE (decl) = block;\n+\n+      body = BLOCK_EXPR_BODY (block);\n+\n+      if (TREE_TYPE (body) == NULL_TREE)\n+\tabort ();\n \n       /* It's time to assign the variable flagging static class\n \t initialization based on which classes invoked static methods\n@@ -8153,15 +8149,41 @@ java_expand_method_bodies (tree class)\n \t    }\n \t}\n \n-      /* Prepare the function for RTL expansion */\n-      start_complete_expand_method (decl);\n+      /* Prepend class initialization to static methods.  */\n+      if (METHOD_STATIC (decl) && ! METHOD_PRIVATE (decl)\n+\t  && ! flag_emit_class_files\n+\t  && ! DECL_CLINIT_P (decl)\n+\t  && ! CLASS_INTERFACE (TYPE_NAME (class)))\n+\t{\n+\t  tree init = build (CALL_EXPR, void_type_node,\n+\t\t\t     build_address_of (soft_initclass_node),\n+\t\t\t     build_tree_list (NULL_TREE,\n+\t\t\t\t\t      build_class_ref (class)),\n+\t\t\t     NULL_TREE);\n+\t  TREE_SIDE_EFFECTS (init) = 1;\n+\t  body = build (COMPOUND_EXPR, TREE_TYPE (body), init, body);\n+\t  BLOCK_EXPR_BODY (block) = body;\n+\t}\n+\n+      /* Wrap synchronized method bodies in a monitorenter\n+\t plus monitorexit cleanup.  */\n+      if (METHOD_SYNCHRONIZED (decl) && ! flag_emit_class_files)\n+\t{\n+\t  tree enter, exit, lock;\n+\t  if (METHOD_STATIC (decl))\n+\t    lock = build_class_ref (class);\n+\t  else\n+\t    lock = DECL_ARGUMENTS (decl);\n+\t  BUILD_MONITOR_ENTER (enter, lock);\n+\t  BUILD_MONITOR_EXIT (exit, lock);\n \n-      /* Expand function start, generate initialization flag\n-\t assignment, and handle synchronized methods. */\n-      complete_start_java_method (decl);\n+\t  body = build (COMPOUND_EXPR, void_type_node,\n+\t\t\tenter,\n+\t\t\tbuild (TRY_FINALLY_EXPR, void_type_node, body, exit));\n+\t  BLOCK_EXPR_BODY (block) = body;\n+\t}\n \n-      /* Expand the rest of the function body and terminate\n-         expansion. */\n+      /* Expand the the function body.  */\n       source_end_java_method ();\n     }\n }\n@@ -9124,12 +9146,30 @@ java_expand_classes (void)\n \t  else if (! flag_syntax_only)\n \t    {\n \t      java_expand_method_bodies (current_class);\n-\t      finish_class ();\n+\t      if (!flag_unit_at_a_time)\n+\t\tfinish_class ();\n \t    }\n \t}\n     }\n }\n \n+void\n+java_finish_classes (void)\n+{\n+  static struct parser_ctxt *cur_ctxp = NULL;\n+  for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n+    {\n+      tree current;\n+      ctxp = cur_ctxp;\n+      for (current = ctxp->class_list; current; current = TREE_CHAIN (current))\n+\t{\n+\t  current_class = TREE_TYPE (current);\n+\t  outgoing_cpool = TYPE_CPOOL (current_class);\n+\t  finish_class ();\n+\t}\n+    }\n+}\n+\n /* Wrap non WFL PRIMARY around a WFL and set EXPR_WFL_QUALIFICATION to\n    a tree list node containing RIGHT. Fore coming RIGHTs will be\n    chained to this hook. LOCATION contains the location of the\n@@ -11659,6 +11699,8 @@ java_complete_lhs (tree node)\n \t\t      && TREE_CODE (wfl_op2) != DEFAULT_EXPR)\n \t\t    unreachable_stmt_error (*ptr);\n \t\t}\n+\t      if (TREE_TYPE (*ptr) == NULL_TREE)\n+\t\tTREE_TYPE (*ptr) = void_type_node;\n \t      ptr = next;\n \t    }\n \t  *ptr = java_complete_tree (*ptr);\n@@ -12889,6 +12931,7 @@ patch_assignment (tree node, tree wfl_op1)\n \t    tree block = build (BLOCK, TREE_TYPE (new_rhs), NULL);\n \t    tree assignment \n \t      = build (MODIFY_EXPR, TREE_TYPE (new_rhs), tmp, fold (new_rhs));\n+\t    DECL_CONTEXT (tmp) = current_function_decl;\n \t    BLOCK_VARS (block) = tmp;\n \t    BLOCK_EXPR_BODY (block) \n \t      = build (COMPOUND_EXPR, TREE_TYPE (new_rhs), assignment, tmp);\n@@ -16221,6 +16264,8 @@ emit_test_initialization (void **entry_p, void *info)\n       LOCAL_CLASS_INITIALIZATION_FLAG (decl) = 1;\n       DECL_CONTEXT (decl) = current_function_decl;\n       DECL_INITIAL (decl) = boolean_true_node;\n+      /* Don't emit any symbolic debugging info for this decl.  */\n+      DECL_IGNORED_P (decl) = 1;\n \n       /* The trick is to find the right context for it. */\n       block = BLOCK_SUBBLOCKS (GET_CURRENT_BLOCK (current_function_decl));"}]}