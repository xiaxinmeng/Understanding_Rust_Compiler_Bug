{"sha": "c4c7fef15c9784afd6dfd5e9efa1be2f216e29db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjN2ZlZjE1Yzk3ODRhZmQ2ZGZkNWU5ZWZhMWJlMmYyMTZlMjlkYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-28T05:42:22Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-28T05:42:22Z"}, "message": "Updated for recent change in c-parse.gperf.\n\nFrom-SVN: r3897", "tree": {"sha": "2b86ae4395691d922ebe3c0b3c3fb539044c60d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b86ae4395691d922ebe3c0b3c3fb539044c60d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4c7fef15c9784afd6dfd5e9efa1be2f216e29db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c7fef15c9784afd6dfd5e9efa1be2f216e29db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c7fef15c9784afd6dfd5e9efa1be2f216e29db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c7fef15c9784afd6dfd5e9efa1be2f216e29db/comments", "author": null, "committer": null, "parents": [{"sha": "4752d3bc315f5c0230c3c94abe15d5dfb237ad3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4752d3bc315f5c0230c3c94abe15d5dfb237ad3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4752d3bc315f5c0230c3c94abe15d5dfb237ad3d"}], "stats": {"total": 125, "additions": 67, "deletions": 58}, "files": [{"sha": "3fbe3d715d8469fcf73b8a2ef035dc9bb5df3aec", "filename": "gcc/c-lex.c", "status": "modified", "additions": 67, "deletions": 58, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c7fef15c9784afd6dfd5e9efa1be2f216e29db/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c7fef15c9784afd6dfd5e9efa1be2f216e29db/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=c4c7fef15c9784afd6dfd5e9efa1be2f216e29db", "patch": "@@ -96,12 +96,12 @@ static int ignore_escape_flag = 0;\n /* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n struct resword { char *name; short token; enum rid rid; };\n \n-#define TOTAL_KEYWORDS 57\n+#define TOTAL_KEYWORDS 61\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 13\n-#define MIN_HASH_VALUE 8\n-#define MAX_HASH_VALUE 76\n-/* maximum key range = 69, duplicates = 0 */\n+#define MIN_HASH_VALUE 10\n+#define MAX_HASH_VALUE 95\n+/* maximum key range = 86, duplicates = 0 */\n \n #ifdef __GNUC__\n __inline\n@@ -113,19 +113,19 @@ hash (str, len)\n {\n   static unsigned char asso_values[] =\n     {\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n-     77, 77, 77, 77, 77,  1, 77, 21,  5, 18,\n-      7, 11,  1,  9,  2,  5, 77,  1, 26, 26,\n-     27, 47, 12, 77, 24,  2,  1, 33, 27,  2,\n-     11, 77,  3, 77, 77, 77, 77, 77,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+     96, 96, 96, 96, 96,  1, 96, 15, 13, 23,\n+      1,  6, 32, 36,  3,  5, 96,  1, 20, 29,\n+     31, 44, 19, 96, 13,  2,  1, 54, 39, 11,\n+      5, 96,  3, 96, 96, 96, 96, 96,\n     };\n   register int hval = len;\n \n@@ -151,73 +151,82 @@ is_reserved_word (str, len)\n {\n   static struct resword wordlist[] =\n     {\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"if\",  IF, NORID},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n       {\"\",}, \n       {\"int\",  TYPESPEC, RID_INT},\n-      {\"__typeof\",  TYPEOF, NORID},\n-      {\"sizeof\",  SIZEOF, NORID},\n+      {\"\",}, \n+      {\"__signed\",  TYPESPEC, RID_SIGNED},\n       {\"__typeof__\",  TYPEOF, NORID},\n       {\"__signed__\",  TYPESPEC, RID_SIGNED},\n+      {\"__imag__\",  IMAGPART, NORID},\n       {\"switch\",  SWITCH, NORID},\n-      {\"default\",  DEFAULT, NORID},\n       {\"__inline__\",  SCSPEC, RID_INLINE},\n-      {\"__signed\",  TYPESPEC, RID_SIGNED},\n+      {\"else\",  ELSE, NORID},\n       {\"__iterator__\",  SCSPEC, RID_ITERATOR},\n-      {\"typeof\",  TYPEOF, NORID},\n-      {\"typedef\",  SCSPEC, RID_TYPEDEF},\n-      {\"break\",  BREAK, NORID},\n-      {\"while\",  WHILE, NORID},\n-      {\"signed\",  TYPESPEC, RID_SIGNED},\n       {\"__inline\",  SCSPEC, RID_INLINE},\n       {\"__extension__\",  EXTENSION, NORID},\n-      {\"__const\",  TYPE_QUAL, RID_CONST},\n-      {\"else\",  ELSE, NORID},\n-      {\"__const__\",  TYPE_QUAL, RID_CONST},\n-      {\"__asm__\",  ASM_KEYWORD, NORID},\n-      {\"__complex__\",  TYPESPEC, RID_COMPLEX},\n-      {\"__alignof\",  ALIGNOF, NORID},\n       {\"struct\",  STRUCT, NORID},\n+      {\"__real__\",  REALPART, NORID},\n+      {\"__asm__\",  ASM_KEYWORD, NORID},\n+      {\"break\",  BREAK, NORID},\n+      {\"\",}, \n+      {\"while\",  WHILE, NORID},\n       {\"__alignof__\",  ALIGNOF, NORID},\n-      {\"case\",  CASE, NORID},\n+      {\"__iterator\",  SCSPEC, RID_ITERATOR},\n       {\"__attribute__\",  ATTRIBUTE, NORID},\n       {\"__label__\",  LABEL, NORID},\n-      {\"\",}, \n-      {\"__complex\",  TYPESPEC, RID_COMPLEX},\n-      {\"__iterator\",  SCSPEC, RID_ITERATOR},\n-      {\"__volatile__\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"\",}, \n-      {\"void\",  TYPESPEC, RID_VOID},\n+      {\"__const\",  TYPE_QUAL, RID_CONST},\n       {\"__attribute\",  ATTRIBUTE, NORID},\n+      {\"__const__\",  TYPE_QUAL, RID_CONST},\n+      {\"case\",  CASE, NORID},\n+      {\"__complex__\",  TYPESPEC, RID_COMPLEX},\n+      {\"inline\",  SCSPEC, RID_INLINE},\n+      {\"__complex\",  TYPESPEC, RID_COMPLEX},\n+      {\"if\",  IF, NORID},\n+      {\"__real\",  REALPART, NORID},\n+      {\"default\",  DEFAULT, NORID},\n+      {\"__typeof\",  TYPEOF, NORID},\n+      {\"sizeof\",  SIZEOF, NORID},\n       {\"extern\",  SCSPEC, RID_EXTERN},\n-      {\"\",}, \n+      {\"signed\",  TYPESPEC, RID_SIGNED},\n       {\"static\",  SCSPEC, RID_STATIC},\n-      {\"inline\",  SCSPEC, RID_INLINE},\n+      {\"do\",  DO, NORID},\n+      {\"__imag\",  IMAGPART, NORID},\n+      {\"void\",  TYPESPEC, RID_VOID},\n+      {\"__asm\",  ASM_KEYWORD, NORID},\n+      {\"return\",  RETURN, NORID},\n+      {\"short\",  TYPESPEC, RID_SHORT},\n+      {\"__volatile__\",  TYPE_QUAL, RID_VOLATILE},\n+      {\"\",}, \n+      {\"char\",  TYPESPEC, RID_CHAR},\n       {\"__volatile\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"unsigned\",  TYPESPEC, RID_UNSIGNED},\n+      {\"__alignof\",  ALIGNOF, NORID},\n+      {\"typeof\",  TYPEOF, NORID},\n+      {\"typedef\",  SCSPEC, RID_TYPEDEF},\n       {\"const\",  TYPE_QUAL, RID_CONST},\n       {\"for\",  FOR, NORID},\n-      {\"__asm\",  ASM_KEYWORD, NORID},\n-      {\"float\",  TYPESPEC, RID_FLOAT},\n-      {\"short\",  TYPESPEC, RID_SHORT},\n-      {\"do\",  DO, NORID},\n-      {\"double\",  TYPESPEC, RID_DOUBLE},\n-      {\"return\",  RETURN, NORID},\n-      {\"\",}, {\"\",}, \n-      {\"goto\",  GOTO, NORID},\n       {\"\",}, {\"\",}, \n+      {\"auto\",  SCSPEC, RID_AUTO},\n+      {\"unsigned\",  TYPESPEC, RID_UNSIGNED},\n+      {\"\",}, \n+      {\"double\",  TYPESPEC, RID_DOUBLE},\n       {\"continue\",  CONTINUE, NORID},\n+      {\"\",}, \n       {\"register\",  SCSPEC, RID_REGISTER},\n-      {\"long\",  TYPESPEC, RID_LONG},\n-      {\"char\",  TYPESPEC, RID_CHAR},\n       {\"\",}, {\"\",}, \n-      {\"union\",  UNION, NORID},\n-      {\"\",}, \n       {\"volatile\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"auto\",  SCSPEC, RID_AUTO},\n+      {\"\",}, {\"\",}, \n+      {\"asm\",  ASM_KEYWORD, NORID},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"float\",  TYPESPEC, RID_FLOAT},\n+      {\"\",}, {\"\",}, \n+      {\"goto\",  GOTO, NORID},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"long\",  TYPESPEC, RID_LONG},\n+      {\"\",}, \n       {\"enum\",  ENUM, NORID},\n       {\"\",}, \n-      {\"asm\",  ASM_KEYWORD, NORID},\n+      {\"union\",  UNION, NORID},\n     };\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)"}]}