{"sha": "b671e5a4993a4658274fb359e6acd69b613fa5f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY3MWU1YTQ5OTNhNDY1ODI3NGZiMzU5ZTZhY2Q2OWI2MTNmYTVmNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-02-22T21:43:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-02-22T21:43:55Z"}, "message": "parser.c (cp_parser_direct_declarator): Always complain about non-constant array bounds when in a function scope.\n\n\t* parser.c (cp_parser_direct_declarator): Always complain about\n\tnon-constant array bounds when in a function scope.\n\t* semantics.c (finish_id_expression): Do not mark dependent names\n\tas non-constant.\n\nFrom-SVN: r95417", "tree": {"sha": "05b8ffe13e98f3d8142bddd8e3236b9f33c5ffc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05b8ffe13e98f3d8142bddd8e3236b9f33c5ffc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b671e5a4993a4658274fb359e6acd69b613fa5f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b671e5a4993a4658274fb359e6acd69b613fa5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b671e5a4993a4658274fb359e6acd69b613fa5f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b671e5a4993a4658274fb359e6acd69b613fa5f6/comments", "author": null, "committer": null, "parents": [{"sha": "245b65adcc2aa73201624a4ab09612f6acc8dc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245b65adcc2aa73201624a4ab09612f6acc8dc56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245b65adcc2aa73201624a4ab09612f6acc8dc56"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "4abda48a89da94afed4c2357b610e62c98370928", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b671e5a4993a4658274fb359e6acd69b613fa5f6", "patch": "@@ -1,3 +1,11 @@\n+2005-02-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19883\n+\t* parser.c (cp_parser_direct_declarator): Always complain about\n+\tnon-constant array bounds when in a function scope.\n+\t* semantics.c (finish_id_expression): Do not mark dependent names\n+\tas non-constant. \n+\n 2005-02-21  Douglas Gregor  <dgregor@cs.indiana.edu>\n \t\n \tPR c++/19076"}, {"sha": "b52ba9595e2967ddf47a8561dfb5b1f0d43281c3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b671e5a4993a4658274fb359e6acd69b613fa5f6", "patch": "@@ -11107,15 +11107,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\tbounds = fold_non_dependent_expr (bounds);\n \t      /* Normally, the array bound must be an integral constant\n \t\t expression.  However, as an extension, we allow VLAs\n-\t\t in function scopes.  And, we allow type-dependent\n-\t\t expressions in templates; sometimes we don't know for\n-\t\t sure whether or not something is a valid integral\n-\t\t constant expression until instantiation time.  (It\n-\t\t doesn't make sense to check for value-dependency, as\n-\t\t an expression is only value-dependent when it is a\n-\t\t constant expression.)  */  \n-\t      else if (!type_dependent_expression_p (bounds)\n-\t\t       && !at_function_scope_p ())\n+\t\t in function scopes.  */  \n+\t      else if (!at_function_scope_p ())\n \t\t{\n \t\t  error (\"array bound is not an integer constant\");\n \t\t  bounds = error_mark_node;"}, {"sha": "4ff333b3aada73b33f26eeb23d0cbadad591c275", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b671e5a4993a4658274fb359e6acd69b613fa5f6", "patch": "@@ -2629,11 +2629,6 @@ finish_id_expression (tree id_expression,\n \t     need.  */\n \t  if (TREE_CODE (id_expression) == TEMPLATE_ID_EXPR)\n \t    return id_expression;\n-\t  /* Since this name was dependent, the expression isn't\n-\t     constant -- yet.  No error is issued because it might be\n-\t     constant when things are instantiated.  */\n-\t  if (integral_constant_expression_p)\n-\t    *non_integral_constant_expression_p = true;\n \t  *idk = CP_ID_KIND_UNQUALIFIED_DEPENDENT;\n \t  /* If we found a variable, then name lookup during the\n \t     instantiation will always resolve to the same VAR_DECL"}, {"sha": "86857d2aa207ba1f49c93f0587a172322ae8589a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b671e5a4993a4658274fb359e6acd69b613fa5f6", "patch": "@@ -1,3 +1,8 @@\n+2005-02-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19883\n+\t* g++.dg/parse/constant6.C: New test.\n+\n 2005-02-22  Uros Bizjak  <uros@kss-loka.si>\n \n \t* g++.dg/charset/asm1.c: Check for IBM1047 code set, not IBM-1047."}, {"sha": "dae01d47be3cbe3e4e06e4d98c8804037ce22626", "filename": "gcc/testsuite/g++.dg/parse/constant6.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b671e5a4993a4658274fb359e6acd69b613fa5f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant6.C?ref=b671e5a4993a4658274fb359e6acd69b613fa5f6", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/19883\n+\n+template<typename T> struct A\n+{\n+  static const T i = 1;\n+  char a[int(i)];\n+};\n+\n+template<int> struct B {};\n+\n+template<typename T> struct C\n+{\n+  static const T i = 2;\n+  B<int(i)> a;\n+};\n+\n+template< typename T, T N >\n+struct integral_c\n+{\n+  static const T value = N;\n+\n+  typedef integral_c< T, static_cast<T>((value + 1)) > next;\n+};"}]}