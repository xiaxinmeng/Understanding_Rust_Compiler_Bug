{"sha": "cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjOGM1NGNmNzNlM2IzZDVjZDVkMzQzMWE3NmEwZmJkMWM0MjkwOA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2006-02-15T09:44:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:44:48Z"}, "message": "sem_ch8.adb (Note_Redundant_Use): Suppress unhelpful warning about redundant use clauses.\n\n2006-02-13  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch8.adb (Note_Redundant_Use): Suppress unhelpful warning about\n\tredundant use clauses.\n\tIn particular, if the scope of two use clauses overlaps, but one is not\n\tentirely included in the other, we should not warn.  This can happen\n\twith nested packages.\n\t(Analyze_Subprogram_Renaming): Protect the compiler against previously\n\treported errors. The bug was reported when the compiler was built\n\twith assertions enabled.\n\t(Find_Type): If the node is a 'Class reference and the prefix is a\n\tsynchronized type without a corresponding record, return the type\n\titself.\n\nFrom-SVN: r111093", "tree": {"sha": "10fe87d271c0182201b19bf84b34185e36bc71ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10fe87d271c0182201b19bf84b34185e36bc71ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe45e59ec7c0f225502471bf4202bee09efb63db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe45e59ec7c0f225502471bf4202bee09efb63db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe45e59ec7c0f225502471bf4202bee09efb63db"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "1f164f22a762a4d99e854a5a0b0130741bbaa664", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -438,7 +438,7 @@ package body Sem_Ch8 is\n \n    function Has_Private_With (E : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-262): Determines if the current compilation unit has a\n-   --  private with on E\n+   --  private with on E.\n \n    procedure Find_Expanded_Name (N : Node_Id);\n    --  Selected component is known to be expanded name. Verify legality\n@@ -1762,9 +1762,11 @@ package body Sem_Ch8 is\n       --  Ada 2005 AI 404: if the new subprogram is dispatching, verify that\n       --  controlling access parameters are known non-null for the renamed\n       --  subprogram. Test also applies to a subprogram instantiation that\n-      --  is dispatching.\n+      --  is dispatching. Test is skipped if some previous error was detected\n+      --  that set Old_S to Any_Id.\n \n       if Ada_Version >= Ada_05\n+        and then Old_S /= Any_Id\n         and then not Is_Dispatching_Operation (Old_S)\n         and then Is_Dispatching_Operation (New_S)\n       then\n@@ -4663,7 +4665,7 @@ package body Sem_Ch8 is\n                   --  of incomplete types, because the type must still\n                   --  appear untagged to outside units.\n \n-                  if not Present (Class_Wide_Type (T)) then\n+                  if No (Class_Wide_Type (T)) then\n                      Make_Class_Wide_Type (T);\n                   end if;\n \n@@ -4685,8 +4687,18 @@ package body Sem_Ch8 is\n \n             else\n                if Is_Concurrent_Type (T) then\n-                  C := Class_Wide_Type\n-                         (Corresponding_Record_Type (Entity (Prefix (N))));\n+                  if No (Corresponding_Record_Type (Entity (Prefix (N)))) then\n+\n+                     --  Previous error. Use current type, which at least\n+                     --  provides some operations.\n+\n+                     C := Entity (Prefix (N));\n+\n+                  else\n+                     C := Class_Wide_Type\n+                            (Corresponding_Record_Type (Entity (Prefix (N))));\n+                  end if;\n+\n                else\n                   C := Class_Wide_Type (Entity (Prefix (N)));\n                end if;\n@@ -5415,7 +5427,22 @@ package body Sem_Ch8 is\n       if not Is_Compilation_Unit (Current_Scope) then\n \n          --  If the use_clause is in an inner scope, it is made redundant\n-         --  by some clause in the current context.\n+         --  by some clause in the current context, with one exception:\n+         --  If we're compiling a nested package body, and the use_clause\n+         --  comes from the corresponding spec, the clause is not necessarily\n+         --  fully redundant, so we should not warn.  If a warning was\n+         --  warranted, it would have been given when the spec was processed.\n+\n+         if Nkind (Parent (Decl)) = N_Package_Specification then\n+            declare\n+               Package_Spec_Entity : constant Entity_Id :=\n+                                       Defining_Unit_Name (Parent (Decl));\n+            begin\n+               if In_Package_Body (Package_Spec_Entity) then\n+                  return;\n+               end if;\n+            end;\n+         end if;\n \n          Redundant := Clause;\n          Prev_Use  := Cur_Use;"}]}