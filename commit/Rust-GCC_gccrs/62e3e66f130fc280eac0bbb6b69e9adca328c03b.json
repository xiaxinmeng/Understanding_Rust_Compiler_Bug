{"sha": "62e3e66f130fc280eac0bbb6b69e9adca328c03b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlM2U2NmYxMzBmYzI4MGVhYzBiYmI2YjY5ZTlhZGNhMzI4YzAzYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-23T10:00:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-23T10:00:24Z"}, "message": "re PR tree-optimization/83518 (Missing optimization: useless instructions should be dropped)\n\n2019-07-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83518\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle aggregate\n\tinit from a constant even when partial defs are already recorded.\n\n\tc/\n\t* gimple-parser.c (c_parser_parse_gimple_body): When we have\n\ta CFG also rebuild cgraph edges.\n\n\t* gcc.dg/tree-ssa/ssa-fre-79.c: New testcase.\n\nFrom-SVN: r273732", "tree": {"sha": "83ec6d9b0fd5b3a0800a0d673c2e9204136fe1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ec6d9b0fd5b3a0800a0d673c2e9204136fe1ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e3e66f130fc280eac0bbb6b69e9adca328c03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e3e66f130fc280eac0bbb6b69e9adca328c03b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e3e66f130fc280eac0bbb6b69e9adca328c03b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e3e66f130fc280eac0bbb6b69e9adca328c03b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1eb82f5aa4f6e9ed9a6a368b54d0eda785be85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1eb82f5aa4f6e9ed9a6a368b54d0eda785be85c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1eb82f5aa4f6e9ed9a6a368b54d0eda785be85c"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "1add332e0fe98793f37d72ead013b4254e7eca85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62e3e66f130fc280eac0bbb6b69e9adca328c03b", "patch": "@@ -1,3 +1,9 @@\n+2019-07-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83518\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle aggregate\n+\tinit from a constant even when partial defs are already recorded.\n+\n 2019-07-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* i386-common.c: Use PROCESSOR_ZNVER2 scheduler for znver2."}, {"sha": "0bb1d4c1c325890f8fe0d3c2ef466ba149b15c95", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=62e3e66f130fc280eac0bbb6b69e9adca328c03b", "patch": "@@ -1,3 +1,9 @@\n+2019-07-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83518\n+\t* gimple-parser.c (c_parser_parse_gimple_body): When we have\n+\ta CFG also rebuild cgraph edges.\n+\n 2019-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_name): Handle bind clause."}, {"sha": "3f575992d327db9e589293631b9fc3626e661bae", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=62e3e66f130fc280eac0bbb6b69e9adca328c03b", "patch": "@@ -356,6 +356,8 @@ c_parser_parse_gimple_body (c_parser *cparser, char *gimple_pass,\n       gcov_type t = PARAM_VALUE (PARAM_GIMPLE_FE_COMPUTED_HOT_BB_THRESHOLD);\n       set_hot_bb_threshold (t);\n       update_max_bb_count ();\n+      cgraph_node::get_create (cfun->decl);\n+      cgraph_edge::rebuild_edges ();\n     }\n   dump_function (TDI_gimple, current_function_decl);\n }"}, {"sha": "8e6b02668fbbfaf469dacc86e839059a619c6bf7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62e3e66f130fc280eac0bbb6b69e9adca328c03b", "patch": "@@ -1,3 +1,8 @@\n+2019-07-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83518\n+\t* gcc.dg/tree-ssa/ssa-fre-79.c: New testcase.\n+\n 2019-07-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/task4.adb: New testcase."}, {"sha": "83aef9ad0f33e3b912f3578bccdbb77c6f2d521d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-79.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-79.c?ref=62e3e66f130fc280eac0bbb6b69e9adca328c03b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fgimple -fdump-tree-fre1\" } */\n+\n+struct S { char a[4]; };\n+const struct S cs = { 1, 2, 3, 4 };\n+\n+int __GIMPLE(ssa,startwith(\"fre\"))\n+main ()\n+{\n+  struct S s;\n+  short _1;\n+\n+  __BB(2):\n+  s = cs;\n+  s.a[1] = _Literal (char) 3;\n+  _1 = __MEM <short, 1> (&s + 1);\n+  if (_1 != _Literal (short) 0x303)\n+    goto __BB3;\n+  else\n+    goto __BB4;\n+\n+  __BB(3):\n+  __builtin_abort ();\n+\n+  __BB(4):\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"fre1\" } } */"}, {"sha": "9369c36f50eba2b8cddac32ae71433c01ea3f5f8", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e3e66f130fc280eac0bbb6b69e9adca328c03b/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=62e3e66f130fc280eac0bbb6b69e9adca328c03b", "patch": "@@ -2702,9 +2702,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t   && gimple_assign_single_p (def_stmt)\n \t   && (DECL_P (gimple_assign_rhs1 (def_stmt))\n \t       || TREE_CODE (gimple_assign_rhs1 (def_stmt)) == MEM_REF\n-\t       || handled_component_p (gimple_assign_rhs1 (def_stmt)))\n-\t   /* Handling this is more complicated, give up for now.  */\n-\t   && data->partial_defs.is_empty ())\n+\t       || handled_component_p (gimple_assign_rhs1 (def_stmt))))\n     {\n       tree base2;\n       int i, j, k;\n@@ -2808,8 +2806,30 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       /* Try folding the new reference to a constant.  */\n       tree val = fully_constant_vn_reference_p (vr);\n       if (val)\n-\treturn vn_reference_lookup_or_insert_for_pieces\n-\t\t (vuse, vr->set, vr->type, vr->operands, val);\n+\t{\n+\t  if (data->partial_defs.is_empty ())\n+\t    return vn_reference_lookup_or_insert_for_pieces\n+\t\t(vuse, vr->set, vr->type, vr->operands, val);\n+\t  /* This is the only interesting case for partial-def handling\n+\t     coming from targets that like to gimplify init-ctors as\n+\t     aggregate copies from constant data like aarch64 for\n+\t     PR83518.  */\n+\t  if (maxsize.is_constant (&maxsizei)\n+\t      && known_eq (ref->size, maxsize))\n+\t    {\n+\t      pd_data pd;\n+\t      pd.rhs = val;\n+\t      pd.offset = 0;\n+\t      pd.size = maxsizei / BITS_PER_UNIT;\n+\t      return data->push_partial_def (pd, vuse, maxsizei);\n+\t    }\n+\t}\n+\n+      /* Continuing with partial defs isn't easily possible here, we\n+         have to find a full def from further lookups from here.  Probably\n+\t not worth the special-casing everywhere.  */\n+      if (!data->partial_defs.is_empty ())\n+\treturn (void *)-1;\n \n       /* Adjust *ref from the new operands.  */\n       if (!ao_ref_init_from_vn_reference (&r, vr->set, vr->type, vr->operands))"}]}