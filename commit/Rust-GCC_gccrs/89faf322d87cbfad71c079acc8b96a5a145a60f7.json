{"sha": "89faf322d87cbfad71c079acc8b96a5a145a60f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmYWYzMjJkODdjYmZhZDcxYzA3OWFjYzhiOTZhNWExNDVhNjBmNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-05T08:51:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-05T08:51:53Z"}, "message": "cgraph.c (cgraph_create_edge_1): Initialize call_stmt_cannot_inline_p from the stmt if possible.\n\n2011-12-05  Richard Guenther  <rguenther@suse.de>\n\n\t* cgraph.c (cgraph_create_edge_1): Initialize\n\tcall_stmt_cannot_inline_p from the stmt if possible.\n\t(cgraph_make_edge_direct): Likewise.\n\t* gimple-streamer-in.c (input_gimple_stmt): Do not\n\tcall gimple_call_set_cannot_inline.\n\t* gimple.h (enum gf_mask): Remove GF_CALL_CANNOT_INLINE, shift\n\tvalues.\n\t(gimple_call_set_cannot_inline): Remove.\n\t(gimple_call_cannot_inline_p): Likewise.\n\t* ipa-inline-analysis.c (initialize_inline_failed): Look\n\tat the edge call_stmt_cannot_inline_p flag.\n\t* ipa-inline.c (can_inline_edge_p): Likewise.\n\t(early_inliner): Only update the edge flag.\n\t* ipa-prop.c (update_indirect_edges_after_inlining): Likewise.\n\t(ipa_modify_call_arguments): Do not call gimple_call_set_cannot_inline.\n\t* cgraphunit.c (assemble_thunk): Likewise.\n\t* gimple-fold.c (gimple_fold_call): Likewise.\n\n\t* tree.h (CALL_CANNOT_INLINE_P): Remove.\n\t* tree-mudflap.c (mf_xform_statements): Do not modify alloca calls.\n\t* builtins.c (expand_builtin_alloca): With -fmudflap do not expand\n\talloca calls inline.\n\t* cfgexpand.c (expand_call_stmt): Do not set CALL_CANNOT_INLINE_P.\n\t* gimple.c (gimple_build_call_from_tree): Do not read\n\tCALL_CANNOT_INLINE_P.\n\t* gimplify.c (gimplify_call_expr): Do not copy CALL_CANNOT_INLINE_P.\n\nFrom-SVN: r182001", "tree": {"sha": "06f9d8d603ca3da5bab04e63d6fb3e6ded7f762d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f9d8d603ca3da5bab04e63d6fb3e6ded7f762d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89faf322d87cbfad71c079acc8b96a5a145a60f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89faf322d87cbfad71c079acc8b96a5a145a60f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89faf322d87cbfad71c079acc8b96a5a145a60f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89faf322d87cbfad71c079acc8b96a5a145a60f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5275901c43a4c3f8feb32999af281ae5d009bac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5275901c43a4c3f8feb32999af281ae5d009bac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5275901c43a4c3f8feb32999af281ae5d009bac6"}], "stats": {"total": 161, "additions": 58, "deletions": 103}, "files": [{"sha": "ee84c7e7ae4f581e84ee7cdeed9d9c9b5347b5b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -1,3 +1,32 @@\n+2011-12-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cgraph.c (cgraph_create_edge_1): Initialize\n+\tcall_stmt_cannot_inline_p from the stmt if possible.\n+\t(cgraph_make_edge_direct): Likewise.\n+\t* gimple-streamer-in.c (input_gimple_stmt): Do not\n+\tcall gimple_call_set_cannot_inline.\n+\t* gimple.h (enum gf_mask): Remove GF_CALL_CANNOT_INLINE, shift\n+\tvalues.\n+\t(gimple_call_set_cannot_inline): Remove.\n+\t(gimple_call_cannot_inline_p): Likewise.\n+\t* ipa-inline-analysis.c (initialize_inline_failed): Look\n+\tat the edge call_stmt_cannot_inline_p flag.\n+\t* ipa-inline.c (can_inline_edge_p): Likewise.\n+\t(early_inliner): Only update the edge flag.\n+\t* ipa-prop.c (update_indirect_edges_after_inlining): Likewise.\n+\t(ipa_modify_call_arguments): Do not call gimple_call_set_cannot_inline.\n+\t* cgraphunit.c (assemble_thunk): Likewise.\n+\t* gimple-fold.c (gimple_fold_call): Likewise.\n+\n+\t* tree.h (CALL_CANNOT_INLINE_P): Remove.\n+\t* tree-mudflap.c (mf_xform_statements): Do not modify alloca calls.\n+\t* builtins.c (expand_builtin_alloca): With -fmudflap do not expand\n+\talloca calls inline.\n+\t* cfgexpand.c (expand_call_stmt): Do not set CALL_CANNOT_INLINE_P.\n+\t* gimple.c (gimple_build_call_from_tree): Do not read\n+\tCALL_CANNOT_INLINE_P.\n+\t* gimplify.c (gimplify_call_expr): Do not copy CALL_CANNOT_INLINE_P.\n+\n 2011-12-05  Jakub Jelinek  <jakub@redhat.com>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "019da159dd4b9dd3f633404231ec029ffd5538b0", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -4523,8 +4523,8 @@ expand_builtin_alloca (tree exp, bool cannot_accumulate)\n   bool alloca_with_align = (DECL_FUNCTION_CODE (get_callee_fndecl (exp))\n \t\t\t    == BUILT_IN_ALLOCA_WITH_ALIGN);\n \n-  /* Emit normal call if marked not-inlineable.  */\n-  if (CALL_CANNOT_INLINE_P (exp))\n+  /* Emit normal call if we use mudflap.  */\n+  if (flag_mudflap)\n     return NULL_RTX;\n \n   valid_arglist"}, {"sha": "86847217322271eeeb678c9315da5c494ff8c802", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -2050,7 +2050,6 @@ expand_call_stmt (gimple stmt)\n     CALL_ALLOCA_FOR_VAR_P (exp) = gimple_call_alloca_for_var_p (stmt);\n   else\n     CALL_FROM_THUNK_P (exp) = gimple_call_from_thunk_p (stmt);\n-  CALL_CANNOT_INLINE_P (exp) = gimple_call_cannot_inline_p (stmt);\n   CALL_EXPR_VA_ARG_PACK (exp) = gimple_call_va_arg_pack_p (stmt);\n   SET_EXPR_LOCATION (exp, gimple_location (stmt));\n   TREE_BLOCK (exp) = gimple_block (stmt);"}, {"sha": "e65ddef8aec79231ca5c71c1c9391fe04ecc3cba", "filename": "gcc/cgraph.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -988,8 +988,12 @@ cgraph_create_edge_1 (struct cgraph_node *caller, struct cgraph_node *callee,\n   edge->can_throw_external\n     = call_stmt ? stmt_can_throw_external (call_stmt) : false;\n   pop_cfun ();\n-  edge->call_stmt_cannot_inline_p =\n-    (call_stmt ? gimple_call_cannot_inline_p (call_stmt) : false);\n+  if (call_stmt\n+      && callee && callee->decl\n+      && !gimple_check_call_matching_types (call_stmt, callee->decl))\n+    edge->call_stmt_cannot_inline_p = true;\n+  else\n+    edge->call_stmt_cannot_inline_p = false;\n   if (call_stmt && caller->call_site_hash)\n     cgraph_add_edge_to_call_site_hash (edge);\n \n@@ -1184,12 +1188,9 @@ cgraph_make_edge_direct (struct cgraph_edge *edge, struct cgraph_node *callee)\n   /* Insert to callers list of the new callee.  */\n   cgraph_set_edge_callee (edge, callee);\n \n-  if (edge->call_stmt\n-      && !gimple_check_call_matching_types (edge->call_stmt, callee->decl))\n-    {\n-      gimple_call_set_cannot_inline (edge->call_stmt, true);\n-      edge->call_stmt_cannot_inline_p = true;\n-    }\n+  if (edge->call_stmt)\n+    edge->call_stmt_cannot_inline_p\n+      = !gimple_check_call_matching_types (edge->call_stmt, callee->decl);\n \n   /* We need to re-determine the inlining status of the edge.  */\n   initialize_inline_failed (edge);"}, {"sha": "886a2def0e56b408548d1f97a0d3e8693207b2a5", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -1694,7 +1694,6 @@ assemble_thunk (struct cgraph_node *node)\n         VEC_quick_push (tree, vargs, arg);\n       call = gimple_build_call_vec (build_fold_addr_expr_loc (0, alias), vargs);\n       VEC_free (tree, heap, vargs);\n-      gimple_call_set_cannot_inline (call, true);\n       gimple_call_set_from_thunk (call, true);\n       if (restmp)\n         gimple_call_set_lhs (call, restmp);"}, {"sha": "3297f11364b9de3bcfb2cd007b761e2764127dd9", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -1108,23 +1108,12 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t}\n     }\n \n-  /* Check whether propagating into the function address made the\n-     call direct, and thus possibly non-inlineable.\n-     ???  This asks for a more conservative setting of the non-inlinable\n-     flag, namely true for all indirect calls.  But that would require\n-     that we can re-compute the flag conservatively, thus it isn't\n-     ever initialized from something else than return/argument type\n-     checks .  */\n-  callee = gimple_call_fndecl (stmt);\n-  if (callee\n-      && !gimple_check_call_matching_types (stmt, callee))\n-    gimple_call_set_cannot_inline (stmt, true);\n-\n   if (inplace)\n     return changed;\n \n   /* Check for builtins that CCP can handle using information not\n      available in the generic fold routines.  */\n+  callee = gimple_call_fndecl (stmt);\n   if (callee && DECL_BUILT_IN (callee))\n     {\n       tree result = gimple_fold_builtin (stmt);"}, {"sha": "dc112d0dd934777cbee7498d4ee358f5b0690917", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -219,18 +219,11 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t}\n       if (is_gimple_call (stmt))\n \t{\n-\t  tree fndecl;\n \t  if (gimple_call_internal_p (stmt))\n \t    gimple_call_set_internal_fn\n \t      (stmt, streamer_read_enum (ib, internal_fn, IFN_LAST));\n \t  else\n \t    gimple_call_set_fntype (stmt, stream_read_tree (ib, data_in));\n-\t  /* Update the non-inlinable flag conservatively.  */\n-\t  fndecl = gimple_call_fndecl (stmt);\n-\t  if (fndecl\n-\t      && !gimple_call_cannot_inline_p (stmt)\n-\t      && !gimple_check_call_matching_types (stmt, fndecl))\n-\t    gimple_call_set_cannot_inline (stmt, true);\n \t}\n       break;\n "}, {"sha": "c72b39a0d64597c7c7909da91d639b645f4849d0", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -370,7 +370,6 @@ gimple_build_call_from_tree (tree t)\n   /* Carry all the CALL_EXPR flags to the new GIMPLE_CALL.  */\n   gimple_call_set_chain (call, CALL_EXPR_STATIC_CHAIN (t));\n   gimple_call_set_tail (call, CALL_EXPR_TAILCALL (t));\n-  gimple_call_set_cannot_inline (call, CALL_CANNOT_INLINE_P (t));\n   gimple_call_set_return_slot_opt (call, CALL_EXPR_RETURN_SLOT_OPT (t));\n   if (fndecl\n       && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL"}, {"sha": "ec4e76e13ddf237e0df77e4f206cdc9b58845ebd", "filename": "gcc/gimple.h", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -97,14 +97,13 @@ enum gimple_rhs_class\n enum gf_mask {\n     GF_ASM_INPUT\t\t= 1 << 0,\n     GF_ASM_VOLATILE\t\t= 1 << 1,\n-    GF_CALL_CANNOT_INLINE\t= 1 << 0,\n-    GF_CALL_FROM_THUNK\t\t= 1 << 1,\n-    GF_CALL_RETURN_SLOT_OPT\t= 1 << 2,\n-    GF_CALL_TAILCALL\t\t= 1 << 3,\n-    GF_CALL_VA_ARG_PACK\t\t= 1 << 4,\n-    GF_CALL_NOTHROW\t\t= 1 << 5,\n-    GF_CALL_ALLOCA_FOR_VAR\t= 1 << 6,\n-    GF_CALL_INTERNAL\t\t= 1 << 7,\n+    GF_CALL_FROM_THUNK\t\t= 1 << 0,\n+    GF_CALL_RETURN_SLOT_OPT\t= 1 << 1,\n+    GF_CALL_TAILCALL\t\t= 1 << 2,\n+    GF_CALL_VA_ARG_PACK\t\t= 1 << 3,\n+    GF_CALL_NOTHROW\t\t= 1 << 4,\n+    GF_CALL_ALLOCA_FOR_VAR\t= 1 << 5,\n+    GF_CALL_INTERNAL\t\t= 1 << 6,\n     GF_OMP_PARALLEL_COMBINED\t= 1 << 0,\n \n     /* True on an GIMPLE_OMP_RETURN statement if the return does not require\n@@ -2343,29 +2342,6 @@ gimple_call_tail_p (gimple s)\n }\n \n \n-/* Set the inlinable status of GIMPLE_CALL S to INLINABLE_P.  */\n-\n-static inline void\n-gimple_call_set_cannot_inline (gimple s, bool inlinable_p)\n-{\n-  GIMPLE_CHECK (s, GIMPLE_CALL);\n-  if (inlinable_p)\n-    s->gsbase.subcode |= GF_CALL_CANNOT_INLINE;\n-  else\n-    s->gsbase.subcode &= ~GF_CALL_CANNOT_INLINE;\n-}\n-\n-\n-/* Return true if GIMPLE_CALL S cannot be inlined.  */\n-\n-static inline bool\n-gimple_call_cannot_inline_p (gimple s)\n-{\n-  GIMPLE_CHECK (s, GIMPLE_CALL);\n-  return (s->gsbase.subcode & GF_CALL_CANNOT_INLINE) != 0;\n-}\n-\n-\n /* If RETURN_SLOT_OPT_P is true mark GIMPLE_CALL S as valid for return\n    slot optimization.  This transformation uses the target of the call\n    expansion as the return slot for calls that return in memory.  */"}, {"sha": "f548e703390523fbcc23aeca031d1b9ed94e6951", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -2449,7 +2449,6 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t  CALL_EXPR_RETURN_SLOT_OPT (*expr_p)\n \t    = CALL_EXPR_RETURN_SLOT_OPT (call);\n \t  CALL_FROM_THUNK_P (*expr_p) = CALL_FROM_THUNK_P (call);\n-\t  CALL_CANNOT_INLINE_P (*expr_p) = CALL_CANNOT_INLINE_P (call);\n \t  SET_EXPR_LOCATION (*expr_p, EXPR_LOCATION (call));\n \t  TREE_BLOCK (*expr_p) = TREE_BLOCK (call);\n "}, {"sha": "21cbecd5cb66d22d586c8db613d3ec2a206ab330", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -1249,7 +1249,7 @@ initialize_inline_failed (struct cgraph_edge *e)\n     e->inline_failed = CIF_BODY_NOT_AVAILABLE;\n   else if (callee->local.redefined_extern_inline)\n     e->inline_failed = CIF_REDEFINED_EXTERN_INLINE;\n-  else if (e->call_stmt && gimple_call_cannot_inline_p (e->call_stmt))\n+  else if (e->call_stmt_cannot_inline_p)\n     e->inline_failed = CIF_MISMATCHED_ARGUMENTS;\n   else\n     e->inline_failed = CIF_FUNCTION_NOT_CONSIDERED;"}, {"sha": "59852b5d26b0a3a2680419cd3f161962a7a1cf1f", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -246,14 +246,6 @@ can_inline_edge_p (struct cgraph_edge *e, bool report)\n   struct function *caller_cfun = DECL_STRUCT_FUNCTION (e->caller->decl);\n   struct function *callee_cfun\n     = callee ? DECL_STRUCT_FUNCTION (callee->decl) : NULL;\n-  bool call_stmt_cannot_inline_p;\n-\n-  /* If E has a call statement in it, use the inline attribute from\n-     the statement, otherwise use the inline attribute in E.  Edges\n-     will not have statements when working in WPA mode.  */\n-  call_stmt_cannot_inline_p = (e->call_stmt)\n-\t\t\t      ? gimple_call_cannot_inline_p (e->call_stmt)\n-\t\t\t      : e->call_stmt_cannot_inline_p;\n \n   if (!caller_cfun && e->caller->clone_of)\n     caller_cfun = DECL_STRUCT_FUNCTION (e->caller->clone_of->decl);\n@@ -278,7 +270,7 @@ can_inline_edge_p (struct cgraph_edge *e, bool report)\n       e->inline_failed = CIF_OVERWRITABLE;\n       return false;\n     }\n-  else if (call_stmt_cannot_inline_p)\n+  else if (e->call_stmt_cannot_inline_p)\n     {\n       e->inline_failed = CIF_MISMATCHED_ARGUMENTS;\n       inlinable = false;\n@@ -1957,8 +1949,10 @@ early_inliner (void)\n \t\t= estimate_num_insns (edge->call_stmt, &eni_size_weights);\n \t      es->call_stmt_time\n \t\t= estimate_num_insns (edge->call_stmt, &eni_time_weights);\n-\t      edge->call_stmt_cannot_inline_p\n-\t\t= gimple_call_cannot_inline_p (edge->call_stmt);\n+\t      if (edge->callee->decl\n+\t\t  && !gimple_check_call_matching_types (edge->call_stmt,\n+\t\t\t\t\t\t\tedge->callee->decl))\n+\t\tedge->call_stmt_cannot_inline_p = true;\n \t    }\n \t  timevar_pop (TV_INTEGRATION);\n \t  iterations++;"}, {"sha": "25ae3868c314c8c1d023dfd062ee50bbf014f1ff", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -1905,13 +1905,10 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n       if (new_direct_edge)\n \t{\n \t  new_direct_edge->indirect_inlining_edge = 1;\n-\t  if (new_direct_edge->call_stmt\n-\t      && !gimple_check_call_matching_types (new_direct_edge->call_stmt,\n-\t\t\t\t\t\t    new_direct_edge->callee->decl))\n-\t    {\n-\t      gimple_call_set_cannot_inline (new_direct_edge->call_stmt, true);\n-\t      new_direct_edge->call_stmt_cannot_inline_p = true;\n-\t    }\n+\t  if (new_direct_edge->call_stmt)\n+\t    new_direct_edge->call_stmt_cannot_inline_p\n+\t      = !gimple_check_call_matching_types (new_direct_edge->call_stmt,\n+\t\t\t\t\t\t   new_direct_edge->callee->decl);\n \t  if (new_edges)\n \t    {\n \t      VEC_safe_push (cgraph_edge_p, heap, *new_edges,\n@@ -2577,9 +2574,6 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n     gimple_set_location (new_stmt, gimple_location (stmt));\n   gimple_call_set_chain (new_stmt, gimple_call_chain (stmt));\n   gimple_call_copy_flags (new_stmt, stmt);\n-  if (gimple_call_cannot_inline_p (stmt))\n-    gimple_call_set_cannot_inline\n-      (new_stmt, !gimple_check_call_matching_types (new_stmt, callee_decl));\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}, {"sha": "67fea759459f40b9d542e444d3fa4d0d59aefd62", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -929,7 +929,6 @@ mf_xform_derefs_1 (gimple_stmt_iterator *iter, tree *tp,\n }\n /* Transform\n    1) Memory references.\n-   2) BUILTIN_ALLOCA calls.\n */\n static void\n mf_xform_statements (void)\n@@ -970,16 +969,6 @@ mf_xform_statements (void)\n                 }\n               break;\n \n-            case GIMPLE_CALL:\n-              {\n-                tree fndecl = gimple_call_fndecl (s);\n-                if (fndecl && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA\n-\t\t\t       || (DECL_FUNCTION_CODE (fndecl)\n-\t\t\t\t   == BUILT_IN_ALLOCA_WITH_ALIGN)))\n-                  gimple_call_set_cannot_inline (s, true);\n-              }\n-              break;\n-\n             default:\n               ;\n             }"}, {"sha": "4544f1ad126bb695aac45ef5d6d4b22a04100135", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89faf322d87cbfad71c079acc8b96a5a145a60f7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=89faf322d87cbfad71c079acc8b96a5a145a60f7", "patch": "@@ -533,9 +533,6 @@ struct GTY(()) tree_common {\n        CASE_HIGH_SEEN in\n            CASE_LABEL_EXPR\n \n-       CALL_CANNOT_INLINE_P in\n-           CALL_EXPR\n- \n        ENUM_IS_SCOPED in\n \t   ENUMERAL_TYPE\n \n@@ -1245,9 +1242,6 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define CASE_HIGH_SEEN(NODE) \\\n   (CASE_LABEL_EXPR_CHECK (NODE)->base.static_flag)\n \n-/* Used to mark a CALL_EXPR as not suitable for inlining.  */\n-#define CALL_CANNOT_INLINE_P(NODE) (CALL_EXPR_CHECK (NODE)->base.static_flag)\n-\n /* Used to mark scoped enums.  */\n #define ENUM_IS_SCOPED(NODE) (ENUMERAL_TYPE_CHECK (NODE)->base.static_flag)\n "}]}