{"sha": "8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhYWIxZjQzYmFlODk2Y2Q0ZmFiNWFhM2UxZTRkYmZhMTZlMjM5Ng==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-05-16T20:12:33Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-05-16T20:12:33Z"}, "message": "java-interp.h (breakpoint_at): Declare.\n\n        * include/java-interp.h (breakpoint_at): Declare.\n        * interpret.cc (breakpoint_at): New function.\n        * gnu/classpath/jdwp/VMVirtualMachine.java (_event_list):\n        New member.\n        * gnu/classpath/jdwp/natVMVirtualMachine.cc (initialize):\n        Initialize _event_list.\n        (handle_single_step): If there is a breakpoint at the\n        location at which we are stopping, do not send the notification.\n        Instead add the event to a list of events that occur at this\n        location.\n        (jdwpBreakpointCB): If the event list is not empty, send\n        whatever events are in it and the breakpoint event in a single\n        notification.\n        Mark parameter jni_env as MAYBE_UNUSED.\n        * classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class:\n        Regenerated.\n        * gnu/classpath/jdwp/VMVirtualMachine.h: Regenerated.\n\nFrom-SVN: r124777", "tree": {"sha": "488fc8a0b082ccaaae84342b96cdeb39d5b5ac8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/488fc8a0b082ccaaae84342b96cdeb39d5b5ac8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c747a42fb45a98b4f530aaf754ee94353ad0d632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c747a42fb45a98b4f530aaf754ee94353ad0d632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c747a42fb45a98b4f530aaf754ee94353ad0d632"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "0f27b4166503b074835e43386231a10b94d91d28", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "patch": "@@ -1,3 +1,23 @@\n+2007-05-16  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/java-interp.h (breakpoint_at): Declare.\n+\t* interpret.cc (breakpoint_at): New function.\n+\t* gnu/classpath/jdwp/VMVirtualMachine.java (_event_list):\n+\tNew member.\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.cc (initialize):\n+\tInitialize _event_list.\n+\t(handle_single_step): If there is a breakpoint at the\n+\tlocation at which we are stopping, do not send the notification.\n+\tInstead add the event to a list of events that occur at this\n+\tlocation.\n+\t(jdwpBreakpointCB): If the event list is not empty, send\n+\twhatever events are in it and the breakpoint event in a single\n+\tnotification.\n+\tMark parameter jni_env as MAYBE_UNUSED.\n+\t* classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class:\n+\tRegenerated.\n+\t* gnu/classpath/jdwp/VMVirtualMachine.h: Regenerated.\n+\n 2007-05-15  David Daney  <ddaney@avtrex.com>\n \n \t* classpath/lib/javax/swing/text/html/HTMLEditorKit.class: Regenerate"}, {"sha": "f62976a99f52472e00030c64e3ad368ea7401af8", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class?ref=8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396"}, {"sha": "f4ff5e8620daa4698c5bd82f9e064defd1175460", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h?ref=8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "patch": "@@ -86,6 +86,7 @@ class gnu::classpath::jdwp::VMVirtualMachine : public ::java::lang::Object\n   static ::java::util::Hashtable * _jdwp_suspend_counts;\n public: // actually package-private\n   static ::java::util::Hashtable * _stepping_threads;\n+  static ::java::util::ArrayList * _event_list;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "7fee49bee4c90b81403f4f89a64a154e4925aebb", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "patch": "@@ -116,6 +116,7 @@ gnu::classpath::jdwp::VMVirtualMachine::initialize ()\n {\n   _jdwp_suspend_counts = new ::java::util::Hashtable ();\n   _stepping_threads = new ::java::util::Hashtable ();\n+  _event_list = new ::java::util::ArrayList ();\n \n   JavaVM *vm = _Jv_GetJavaVM ();\n   union\n@@ -895,7 +896,23 @@ handle_single_step (jvmtiEnv *env, struct step_info *sinfo, jthread thread,\n   jobject instance = iframe->get_this_ptr ();\n   event::SingleStepEvent *event\n     = new event::SingleStepEvent (thread, loc, instance);\n-  Jdwp::notify (event);\n+\n+  // We only want to send the notification (and consequently\n+  // suspend) if we are not about to execute a breakpoint.\n+  _Jv_InterpMethod *im = reinterpret_cast<_Jv_InterpMethod *> (iframe->self);\n+  if (im->breakpoint_at (location))\n+    {\n+      // Next insn is a breakpoint -- record event and\n+      // wait for the JVMTI breakpoint notification to\n+      // enforce a suspension policy.\n+      VMVirtualMachine::_event_list->add (event);\n+    }\n+  else\n+    {\n+      // Next insn is not a breakpoint, so send notification\n+      // and enforce the suspend policy.\n+      Jdwp::notify (event);\n+    }\n }\n \n static void\n@@ -925,6 +942,7 @@ jdwpBreakpointCB (jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n   JvAssert (err == JVMTI_ERROR_NONE);\n \n   using namespace gnu::classpath::jdwp;\n+  using namespace gnu::classpath::jdwp::event;\n \n   jlong methodId = reinterpret_cast<jlong> (method);\n   VMMethod *meth = VMVirtualMachine::getClassMethod (klass, methodId);\n@@ -933,9 +951,16 @@ jdwpBreakpointCB (jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n   _Jv_InterpFrame *iframe\n     = reinterpret_cast<_Jv_InterpFrame *> (thread->interp_frame);\n   jobject instance = iframe->get_this_ptr ();\n-  event::BreakpointEvent *event\n-    = new event::BreakpointEvent (thread, loc, instance);\n-  Jdwp::notify (event);\n+  BreakpointEvent *event = new BreakpointEvent (thread, loc, instance);\n+  \n+  VMVirtualMachine::_event_list->add (event);\n+  JArray<Event *> *events\n+    = ((JArray<Event *> *)\n+       JvNewObjectArray (VMVirtualMachine::_event_list->size (),\n+\t\t\t &Event::class$, NULL));\n+  VMVirtualMachine::_event_list->toArray ((jobjectArray) events);\n+  VMVirtualMachine::_event_list->clear ();\n+  Jdwp::notify (events);\n }\n \n static void JNICALL\n@@ -1001,7 +1026,7 @@ jdwpExceptionCB (jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env, jthread thread,\n }\n \n static void JNICALL\n-jdwpSingleStepCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n+jdwpSingleStepCB (jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env, jthread thread,\n \t\t  jmethodID method, jlocation location)\n {\n   jobject si ="}, {"sha": "52a04e78e1dd51f476abe5eab4342fd1db049c7c", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "patch": "@@ -274,6 +274,9 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n      the insn or NULL if index is invalid. */\n   pc_t set_insn (jlong index, pc_t insn);\n \n+  // Is the given location in this method a breakpoint?\n+  bool breakpoint_at (jlong index);\n+\n #ifdef DIRECT_THREADED\n   friend void _Jv_CompileMethod (_Jv_InterpMethod*);\n #endif"}, {"sha": "18b4ae0e3e9550ded888af7668456bea17214604", "filename": "libjava/interpret.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=8faab1f43bae896cd4fab5aa3e1e4dbfa16e2396", "patch": "@@ -1580,6 +1580,23 @@ _Jv_InterpMethod::set_insn (jlong index, pc_t insn)\n   return &code[index];\n }\n \n+bool\n+_Jv_InterpMethod::breakpoint_at (jlong index)\n+{\n+  pc_t insn = get_insn (index);\n+  if (insn != NULL)\n+    {\n+#ifdef DIRECT_THREADED\n+      return (insn->insn == breakpoint_insn->insn);\n+#else\n+      pc_t code = reinterpret_cast<pc_t> (bytecode ());\n+      return (code[index] == breakpoint_insn);\n+#endif\n+    }\n+\n+  return false;\n+}\n+\n void *\n _Jv_JNIMethod::ncode (jclass klass)\n {"}]}