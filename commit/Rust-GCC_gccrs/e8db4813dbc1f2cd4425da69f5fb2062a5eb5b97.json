{"sha": "e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkYjQ4MTNkYmMxZjJjZDQ0MjVkYTY5ZjVmYjIwNjJhNWViNWI5Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T07:15:41Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T07:15:41Z"}, "message": "(collect_expansion): Don't add whitespace at end if inside a string and not traditional.\n\n(collect_expansion): Don't add whitespace at end\nif inside a string and not traditional.\n(rescan): At end of string, if inside macro, always keep scanning.\n\nFrom-SVN: r2506", "tree": {"sha": "be65920103fcbe9a961038e769e7cf5c7dd1d198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be65920103fcbe9a961038e769e7cf5c7dd1d198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97/comments", "author": null, "committer": null, "parents": [{"sha": "057f494bb864e11120511dc8ba4e2b8f3916650a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057f494bb864e11120511dc8ba4e2b8f3916650a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/057f494bb864e11120511dc8ba4e2b8f3916650a"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "447f2f8704927e9032223b1aa0be2a7865bbe7e0", "filename": "gcc/cccp.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=e8db4813dbc1f2cd4425da69f5fb2062a5eb5b97", "patch": "@@ -2352,14 +2352,15 @@ do { ip = &instack[indepth];\t\t\\\n \n       while (1) {\n \tif (ibp >= limit) {\n-\t  if (traditional) {\n-\t    if (ip->macro != 0) {\n-\t      /* try harder: this string crosses a macro expansion boundary */\n-\t      POPMACRO;\n-\t      RECACHE;\n-\t      continue;\n-\t    }\n-\t  } else {\n+\t  if (ip->macro != 0) {\n+\t    /* try harder: this string crosses a macro expansion boundary.\n+\t       This can happen naturally if -traditional.\n+\t       Otherwise, only -D can make a macro with an unmatched quote.  */\n+\t    POPMACRO;\n+\t    RECACHE;\n+\t    continue;\n+\t  }\n+\t  if (!traditional) {\n \t    error_with_line (line_for_error (start_line),\n \t\t\t     \"unterminated string or character constant\");\n \t    error_with_line (multiline_string_line,\n@@ -5220,8 +5221,10 @@ collect_expansion (buf, end, nargs, arglist)\n       *exp_p++ = '\\n';\n       *exp_p++ = *limit++;\n     }\n-  } else if (!traditional) {\n-    /* There is no trailing whitespace, so invent some.  */\n+  } else if (!traditional && expected_delimiter == 0) {\n+    /* There is no trailing whitespace, so invent some in ANSI mode.\n+       But not if \"inside a string\" (which in ANSI mode\n+       happens only for -D option).  */\n     *exp_p++ = '\\n';\n     *exp_p++ = ' ';\n   }"}]}