{"sha": "266d74647567e610cc6fd6fccb7db31081f538e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY2ZDc0NjQ3NTY3ZTYxMGNjNmZkNmZjY2I3ZGIzMTA4MWY1MzhlMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-12-18T16:52:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-12-18T16:52:14Z"}, "message": "libstdc++: Check FE_TONEAREST is defined before using it\n\nWe need to test that FE_TONEAREST is defined before we may use it along\nwith fegetround/fesetround to adjust the floating-point rounding mode.\nThis fixes a build failure with older versions of newlib.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_from_chars.cc (from_chars_impl)\n\t[!defined(FE_TONEAREST)]: Don't adjust the rounding mode.\n\t* src/c++17/floating_to_chars.cc (__floating_to_chars_precision):\n\tLikewise.", "tree": {"sha": "f502a772a75789d68644d0f0c62f5867a4bf6ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f502a772a75789d68644d0f0c62f5867a4bf6ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/266d74647567e610cc6fd6fccb7db31081f538e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266d74647567e610cc6fd6fccb7db31081f538e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266d74647567e610cc6fd6fccb7db31081f538e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266d74647567e610cc6fd6fccb7db31081f538e2/comments", "author": null, "committer": null, "parents": [{"sha": "3af02d32cce2ff1ff11d078cf8094305f57ca179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af02d32cce2ff1ff11d078cf8094305f57ca179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af02d32cce2ff1ff11d078cf8094305f57ca179"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "86d6d0645a98851d03013c161208ae0eaf390726", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266d74647567e610cc6fd6fccb7db31081f538e2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266d74647567e610cc6fd6fccb7db31081f538e2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=266d74647567e610cc6fd6fccb7db31081f538e2", "patch": "@@ -307,7 +307,7 @@ namespace\n       {\n \tlocale_t orig = ::uselocale(loc);\n \n-#if _GLIBCXX_USE_C99_FENV_TR1\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n \tconst int rounding = std::fegetround();\n \tif (rounding != FE_TONEAREST)\n \t  std::fesetround(FE_TONEAREST);\n@@ -333,7 +333,7 @@ namespace\n #endif\n \tconst int conv_errno = std::__exchange(errno, save_errno);\n \n-#if _GLIBCXX_USE_C99_FENV_TR1\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n \tif (rounding != FE_TONEAREST)\n \t  std::fesetround(rounding);\n #endif"}, {"sha": "474e791e717602e00dcaada18945b1bbbe07bad1", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266d74647567e610cc6fd6fccb7db31081f538e2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266d74647567e610cc6fd6fccb7db31081f538e2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=266d74647567e610cc6fd6fccb7db31081f538e2", "patch": "@@ -946,13 +946,13 @@ template<typename T>\n \t    // digit, and carefully compute and write the last digit\n \t    // ourselves.\n \t    char buffer[expected_output_length+1];\n-#if _GLIBCXX_USE_C99_FENV_TR1\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n \t    const int saved_rounding_mode = fegetround();\n \t    if (saved_rounding_mode != FE_TONEAREST)\n \t      fesetround(FE_TONEAREST); // We want round-to-nearest behavior.\n #endif\n \t    const int output_length = sprintf(buffer, \"%.0Lf\", value);\n-#if _GLIBCXX_USE_C99_FENV_TR1\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n \t    if (saved_rounding_mode != FE_TONEAREST)\n \t      fesetround(saved_rounding_mode);\n #endif\n@@ -1139,14 +1139,14 @@ template<typename T>\n \n \t// Do the sprintf into the local buffer.\n \tchar buffer[output_length_upper_bound+1];\n-#if _GLIBCXX_USE_C99_FENV_TR1\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n \tconst int saved_rounding_mode = fegetround();\n \tif (saved_rounding_mode != FE_TONEAREST)\n \t  fesetround(FE_TONEAREST); // We want round-to-nearest behavior.\n #endif\n \tint output_length\n \t  = sprintf(buffer, output_specifier, effective_precision, value);\n-#if _GLIBCXX_USE_C99_FENV_TR1\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n \tif (saved_rounding_mode != FE_TONEAREST)\n \t  fesetround(saved_rounding_mode);\n #endif"}]}