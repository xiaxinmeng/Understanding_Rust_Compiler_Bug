{"sha": "68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhjOWM2MWEwMTVkZDRmNmE1YzU4OTg2YzhhOWQ2ZTNhOTZjZTBlNA==", "commit": {"author": {"name": "Ralf Corsepius", "email": "corsepiu@faw.uni-ulm.de", "date": "2000-12-07T01:40:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-12-07T01:40:42Z"}, "message": "* thr-rtems.c: New file. Stub to compile.\n\nFrom-SVN: r38084", "tree": {"sha": "ddd2ace85335c469f04aada05d3863fcab58aed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddd2ace85335c469f04aada05d3863fcab58aed4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4/comments", "author": null, "committer": null, "parents": [{"sha": "6047d503093cdfd51a931ecbf8c5d563a5e61735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6047d503093cdfd51a931ecbf8c5d563a5e61735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6047d503093cdfd51a931ecbf8c5d563a5e61735"}], "stats": {"total": 198, "additions": 198, "deletions": 0}, "files": [{"sha": "d2657f0c0cc37f79d40201d760f07d860268e4e7", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "patch": "@@ -1,3 +1,7 @@\n+2000-12-06      Ralf Corsepius <corsepiu@faw.uni-ulm.de>\n+\n+\t* thr-rtems.c: New file. Stub to compile. \n+\n 2000-09-06  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure: Rebuilt with new libtool.m4."}, {"sha": "3fd50bef9c8df4a1c0343d5b579c54b42573f208", "filename": "libobjc/thr-rtems.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4/libobjc%2Fthr-rtems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4/libobjc%2Fthr-rtems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fthr-rtems.c?ref=68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "patch": "@@ -0,0 +1,194 @@\n+/* GNU Objective C Runtime Thread Implementation\n+   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n+   Contributed by Galen C. Hunt (gchunt@cs.rochester.edu)\n+   Renamed from thr-vxworks.c to thr-rtems.c by \n+     Ralf Corsepius (corsepiu@faw.uni-ulm.de)\n+     \n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify it under the\n+terms of the GNU General Public License as published by the Free Software\n+Foundation; either version 2, or (at your option) any later version.\n+\n+GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+details.\n+\n+You should have received a copy of the GNU General Public License along with\n+GNU CC; see the file COPYING.  If not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with files compiled with\n+   GCC to produce an executable, this does not cause the resulting executable\n+   to be covered by the GNU General Public License. This exception does not\n+   however invalidate any other reasons why the executable file might be\n+   covered by the GNU General Public License.  */\n+\n+#include <objc/thr.h>\n+#include \"runtime.h\"\n+\n+/* Thread local storage for a single thread */\n+static void *thread_local_storage = NULL;\n+\n+/* Backend initialization functions */\n+\n+/* Initialize the threads subsystem. */\n+int\n+__objc_init_thread_system(void)\n+{\n+  /* No thread support available */\n+  return -1;\n+}\n+\n+/* Close the threads subsystem. */\n+int\n+__objc_close_thread_system(void)\n+{\n+  /* No thread support available */\n+  return -1;\n+}\n+\n+/* Backend thread functions */\n+\n+/* Create a new thread of execution. */\n+objc_thread_t\n+__objc_thread_detach(void (*func)(void *arg), void *arg)\n+{\n+  /* No thread support available */\n+  return NULL;\n+}\n+\n+/* Set the current thread's priority. */\n+int\n+__objc_thread_set_priority(int priority)\n+{\n+  /* No thread support available */\n+  return -1;\n+}\n+\n+/* Return the current thread's priority. */\n+int\n+__objc_thread_get_priority(void)\n+{\n+  return OBJC_THREAD_INTERACTIVE_PRIORITY;\n+}\n+\n+/* Yield our process time to another thread. */\n+void\n+__objc_thread_yield(void)\n+{\n+  return;\n+}\n+\n+/* Terminate the current thread. */\n+int\n+__objc_thread_exit(void)\n+{\n+  /* No thread support available */\n+  /* Should we really exit the program */\n+  /* exit(&__objc_thread_exit_status); */\n+  return -1;\n+}\n+\n+/* Returns an integer value which uniquely describes a thread. */\n+objc_thread_t\n+__objc_thread_id(void)\n+{\n+  /* No thread support, use 1. */\n+  return (objc_thread_t)1;\n+}\n+\n+/* Sets the thread's local storage pointer. */\n+int\n+__objc_thread_set_data(void *value)\n+{\n+  thread_local_storage = value;\n+  return 0;\n+}\n+\n+/* Returns the thread's local storage pointer. */\n+void *\n+__objc_thread_get_data(void)\n+{\n+  return thread_local_storage;\n+}\n+\n+/* Backend mutex functions */\n+\n+/* Allocate a mutex. */\n+int\n+__objc_mutex_allocate(objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Deallocate a mutex. */\n+int\n+__objc_mutex_deallocate(objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Grab a lock on a mutex. */\n+int\n+__objc_mutex_lock(objc_mutex_t mutex)\n+{\n+  /* There can only be one thread, so we always get the lock */\n+  return 0;\n+}\n+\n+/* Try to grab a lock on a mutex. */\n+int\n+__objc_mutex_trylock(objc_mutex_t mutex)\n+{\n+  /* There can only be one thread, so we always get the lock */\n+  return 0;\n+}\n+\n+/* Unlock the mutex */\n+int\n+__objc_mutex_unlock(objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Backend condition mutex functions */\n+\n+/* Allocate a condition. */\n+int\n+__objc_condition_allocate(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* Deallocate a condition. */\n+int\n+__objc_condition_deallocate(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* Wait on the condition */\n+int\n+__objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Wake up all threads waiting on this condition. */\n+int\n+__objc_condition_broadcast(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* Wake up one thread waiting on this condition. */\n+int\n+__objc_condition_signal(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* End of File */"}]}