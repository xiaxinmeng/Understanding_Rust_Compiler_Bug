{"sha": "8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUzZDllNjczYTA3Zjg0OTA4YmI3YmI2YjhlMzEzZWM0NWU2ZWQ3OA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2014-10-24T14:25:10Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2014-10-24T14:25:10Z"}, "message": "avr-protos.h (avr_out_sign_extend): New.\n\n\t* avr-protos.h (avr_out_sign_extend): New.\n\t* avr.c (avr_adjust_insn_length) [ADJUST_LEN_SEXT]: Handle.\n\t(avr_out_sign_extend): New function.\n\t* avr.md (extendqihi2, extendqipsi2, extendqisi2, extendhipsi2)\n\t(extendhisi2, extendpsisi2): Use it.\n\t(adjust_len) [sext]: New.\n\nFrom-SVN: r216668", "tree": {"sha": "be88d9d4d42665106a73f2ba3006d79400f1fe2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be88d9d4d42665106a73f2ba3006d79400f1fe2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709def90a4b8dfa36dee0a51b40f6691d7d203cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709def90a4b8dfa36dee0a51b40f6691d7d203cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709def90a4b8dfa36dee0a51b40f6691d7d203cc"}], "stats": {"total": 125, "additions": 95, "deletions": 30}, "files": [{"sha": "8863eb6853106490b854163851b38cffe395759e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "patch": "@@ -1,3 +1,12 @@\n+2014-10-24  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* avr-protos.h (avr_out_sign_extend): New.\n+\t* avr.c (avr_adjust_insn_length) [ADJUST_LEN_SEXT]: Handle.\n+\t(avr_out_sign_extend): New function.\n+\t* avr.md (extendqihi2, extendqipsi2, extendqisi2, extendhipsi2)\n+\t(extendhisi2, extendpsisi2): Use it.\n+\t(adjust_len) [sext]: New.\n+\n 2014-10-24  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sem_function::compare_phi_node): PHI result comparison"}, {"sha": "62c2055b7c9d1f47422ae7efdbc0f1be7da45938", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "patch": "@@ -57,6 +57,7 @@ extern const char *avr_out_compare (rtx_insn *, rtx*, int*);\n extern const char *avr_out_compare64 (rtx_insn *, rtx*, int*);\n extern const char *ret_cond_branch (rtx x, int len, int reverse);\n extern const char *avr_out_movpsi (rtx_insn *, rtx*, int*);\n+extern const char *avr_out_sign_extend (rtx_insn *, rtx*, int*);\n \n extern const char *ashlqi3_out (rtx_insn *insn, rtx operands[], int *len);\n extern const char *ashlhi3_out (rtx_insn *insn, rtx operands[], int *len);"}, {"sha": "38fce723f38f68f20d008b2bc450fd6825c4f04c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "patch": "@@ -7734,6 +7734,56 @@ avr_out_bitop (rtx insn, rtx *xop, int *plen)\n }\n \n \n+/* Output sign extension from XOP[1] to XOP[0] and return \"\".\n+   If PLEN == NULL, print assembler instructions to perform the operation;\n+   otherwise, set *PLEN to the length of the instruction sequence (in words)\n+   as printed with PLEN == NULL.  */\n+\n+const char*\n+avr_out_sign_extend (rtx_insn *insn, rtx *xop, int *plen)\n+{\n+  // Size in bytes of source resp. destination operand.\n+  unsigned n_src = GET_MODE_SIZE (GET_MODE (xop[1]));\n+  unsigned n_dest = GET_MODE_SIZE (GET_MODE (xop[0]));\n+  rtx r_msb = all_regs_rtx[REGNO (xop[1]) + n_src - 1];\n+\n+  if (plen)\n+    *plen = 0;\n+\n+  // Copy destination to source\n+\n+  if (REGNO (xop[0]) != REGNO (xop[1]))\n+    {\n+      gcc_assert (n_src <= 2);\n+\n+      if (n_src == 2)\n+        avr_asm_len (AVR_HAVE_MOVW\n+                     ? \"movw %0,%1\"\n+                     : \"mov %B0,%B1\", xop, plen, 1);\n+      if (n_src == 1 || !AVR_HAVE_MOVW)\n+        avr_asm_len (\"mov %A0,%A1\", xop, plen, 1);\n+    }\n+\n+  // Set Carry to the sign bit MSB.7...\n+\n+  if (REGNO (xop[0]) == REGNO (xop[1])\n+      || !reg_unused_after (insn, r_msb))\n+    {\n+      avr_asm_len (\"mov __tmp_reg__,%0\", &r_msb, plen, 1);\n+      r_msb = tmp_reg_rtx;\n+    }\n+  \n+  avr_asm_len (\"lsl %0\", &r_msb, plen, 1);\n+                   \n+  // ...and propagate it to all the new sign bits\n+\n+  for (unsigned n = n_src; n < n_dest; n++)\n+    avr_asm_len (\"sbc %0,%0\", &all_regs_rtx[REGNO (xop[0]) + n], plen, 1);\n+\n+  return \"\";\n+}\n+\n+\n /* PLEN == NULL: Output code to add CONST_INT OP[0] to SP.\n    PLEN != NULL: Set *PLEN to the length of that sequence.\n    Return \"\".  */\n@@ -8578,6 +8628,7 @@ avr_adjust_insn_length (rtx_insn *insn, int len)\n     case ADJUST_LEN_MOVMEM: avr_out_movmem (insn, op, &len); break;\n     case ADJUST_LEN_XLOAD: avr_out_xload (insn, op, &len); break;\n     case ADJUST_LEN_LPM: avr_out_lpm (insn, op, &len); break;\n+    case ADJUST_LEN_SEXT: avr_out_sign_extend (insn, op, &len); break;\n \n     case ADJUST_LEN_SFRACT: avr_out_fract (insn, op, true, &len); break;\n     case ADJUST_LEN_UFRACT: avr_out_fract (insn, op, false, &len); break;"}, {"sha": "c6c11cff7fb6a994fde1f59d199d172642ea536c", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=8e3d9e673a07f84908bb7bb6b8e313ec45e6ed78", "patch": "@@ -147,7 +147,7 @@\n ;; Otherwise do special processing depending on the attribute.\n \n (define_attr \"adjust_len\"\n-  \"out_bitop, plus, addto_sp,\n+  \"out_bitop, plus, addto_sp, sext,\n    tsthi, tstpsi, tstsi, compare, compare64, call,\n    mov8, mov16, mov24, mov32, reload_in16, reload_in24, reload_in32,\n    ufract, sfract, round,\n@@ -4174,62 +4174,66 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n         (sign_extend:HI (match_operand:QI 1 \"combine_pseudo_register_operand\" \"0,*r\")))]\n   \"\"\n-  \"@\n-\tclr %B0\\;sbrc %0,7\\;com %B0\n-\tmov %A0,%A1\\;clr %B0\\;sbrc %A0,7\\;com %B0\"\n+  {\n+    return avr_out_sign_extend (insn, operands, NULL);\n+  }\n   [(set_attr \"length\" \"3,4\")\n-   (set_attr \"cc\" \"set_n,set_n\")])\n+   (set_attr \"adjust_len\" \"sext\")\n+   (set_attr \"cc\" \"set_n\")])\n \n (define_insn \"extendqipsi2\"\n   [(set (match_operand:PSI 0 \"register_operand\" \"=r,r\")\n         (sign_extend:PSI (match_operand:QI 1 \"combine_pseudo_register_operand\" \"0,*r\")))]\n   \"\"\n-  \"@\n-\tclr %B0\\;sbrc %A0,7\\;com %B0\\;mov %C0,%B0\n-\tmov %A0,%A1\\;clr %B0\\;sbrc %A0,7\\;com %B0\\;mov %C0,%B0\"\n+  {\n+    return avr_out_sign_extend (insn, operands, NULL);\n+  }\n   [(set_attr \"length\" \"4,5\")\n-   (set_attr \"cc\" \"set_n,set_n\")])\n+   (set_attr \"adjust_len\" \"sext\")\n+   (set_attr \"cc\" \"set_n\")])\n \n (define_insn \"extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n         (sign_extend:SI (match_operand:QI 1 \"combine_pseudo_register_operand\" \"0,*r\")))]\n   \"\"\n-  \"@\n-\tclr %B0\\;sbrc %A0,7\\;com %B0\\;mov %C0,%B0\\;mov %D0,%B0\n-\tmov %A0,%A1\\;clr %B0\\;sbrc %A0,7\\;com %B0\\;mov %C0,%B0\\;mov %D0,%B0\"\n+  {\n+    return avr_out_sign_extend (insn, operands, NULL);\n+  }\n   [(set_attr \"length\" \"5,6\")\n-   (set_attr \"cc\" \"set_n,set_n\")])\n+   (set_attr \"adjust_len\" \"sext\")\n+   (set_attr \"cc\" \"set_n\")])\n \n (define_insn \"extendhipsi2\"\n-  [(set (match_operand:PSI 0 \"register_operand\"                               \"=r,r ,r\")\n-        (sign_extend:PSI (match_operand:HI 1 \"combine_pseudo_register_operand\" \"0,*r,*r\")))]\n+  [(set (match_operand:PSI 0 \"register_operand\"                               \"=r,r\")\n+        (sign_extend:PSI (match_operand:HI 1 \"combine_pseudo_register_operand\" \"0,*r\")))]\n   \"\"\n-  \"@\n-\tclr %C0\\;sbrc %B0,7\\;com %C0\n-\tmov %A0,%A1\\;mov %B0,%B1\\;clr %C0\\;sbrc %B0,7\\;com %C0\n-\tmovw %A0,%A1\\;clr %C0\\;sbrc %B0,7\\;com %C0\"\n-  [(set_attr \"length\" \"3,5,4\")\n-   (set_attr \"isa\" \"*,mov,movw\")\n+  {\n+    return avr_out_sign_extend (insn, operands, NULL);\n+  }\n+  [(set_attr \"length\" \"3,5\")\n+   (set_attr \"adjust_len\" \"sext\")\n    (set_attr \"cc\" \"set_n\")])\n \n (define_insn \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\"                               \"=r,r ,r\")\n-        (sign_extend:SI (match_operand:HI 1 \"combine_pseudo_register_operand\" \"0,*r,*r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"                               \"=r,r\")\n+        (sign_extend:SI (match_operand:HI 1 \"combine_pseudo_register_operand\" \"0,*r\")))]\n   \"\"\n-  \"@\n-\tclr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\n-\tmov %A0,%A1\\;mov %B0,%B1\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\n-\tmovw %A0,%A1\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\"\n-  [(set_attr \"length\" \"4,6,5\")\n-   (set_attr \"isa\" \"*,mov,movw\")\n+  {\n+    return avr_out_sign_extend (insn, operands, NULL);\n+  }\n+  [(set_attr \"length\" \"4,6\")\n+   (set_attr \"adjust_len\" \"sext\")\n    (set_attr \"cc\" \"set_n\")])\n \n (define_insn \"extendpsisi2\"\n   [(set (match_operand:SI 0 \"register_operand\"                                \"=r\")\n         (sign_extend:SI (match_operand:PSI 1 \"combine_pseudo_register_operand\" \"0\")))]\n   \"\"\n-  \"clr %D0\\;sbrc %C0,7\\;com %D0\"\n+  {\n+    return avr_out_sign_extend (insn, operands, NULL);\n+  }\n   [(set_attr \"length\" \"3\")\n+   (set_attr \"adjust_len\" \"sext\")\n    (set_attr \"cc\" \"set_n\")])\n \n ;; xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x"}]}