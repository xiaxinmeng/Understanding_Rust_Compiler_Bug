{"sha": "7332899a4225f89d820af7c04bfdcd0be05f44e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzMjg5OWE0MjI1Zjg5ZDgyMGFmN2MwNGJmZGNkMGJlMDVmNDRlMw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-11-07T18:27:14Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-11-07T18:27:14Z"}, "message": "re PR c/53063 (encode group options in the .opt files)\n\ngcc/\n2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\t* doc/invoke.texi (Wformat): Update.\nc-family/\n2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\t* c.opt (Wformat): Make it Alias Wformat=1.\n\t(Wformat-contains-nul,Wformat-extra-args,Wformat-nonliteral,\n\tWformat-security,Wformat-y2k,Wformat-zero-length): Use\n\tLangEnabledBy.\n\t(Wformat=): RejectNegative. Use LangEnabledBy.\n\t(Wnonnull): Use LangEnabledBy.\n\t* c-opts.c (c_common_handle_option): Do not handle Wformat here.\n\t* c-format.c (set_Wformat): Delete.\n\t(decode_format_attr): Replace OPT_Wformat with OPT_Wformat_.\n        (maybe_read_dollar_number):  Likewise.\n        (avoid_dollar_number):  Likewise.\n        (finish_dollar_format_checking):  Likewise.\n        (check_format_info):  Likewise.\n        (check_format_info_main):  Likewise.\n        (check_format_types):  Likewise.\n        (format_type_warning):  Likewise.\n        * c-common.c (int):  Likewise.\n        (check_function_sentinel):  Likewise.\n        * c-common.h (warn_format,set_Wformat): Do not declare here.\ntestsuite/\n2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\t* gcc.dg/warn-nsstring.c: Use -Wformat explicitly.\n\nFrom-SVN: r193304", "tree": {"sha": "3c564bf33de77ab471b06b630abe131896fc4fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c564bf33de77ab471b06b630abe131896fc4fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7332899a4225f89d820af7c04bfdcd0be05f44e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7332899a4225f89d820af7c04bfdcd0be05f44e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7332899a4225f89d820af7c04bfdcd0be05f44e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7332899a4225f89d820af7c04bfdcd0be05f44e3/comments", "author": null, "committer": null, "parents": [{"sha": "0829c7f7c5210cd1581042115cfe95c97283f44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0829c7f7c5210cd1581042115cfe95c97283f44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0829c7f7c5210cd1581042115cfe95c97283f44c"}], "stats": {"total": 244, "additions": 122, "deletions": 122}, "files": [{"sha": "38b0de87e4f75857a5ef8f3ab5c822114b6d0e0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -1,3 +1,8 @@\n+2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\t* doc/invoke.texi (Wformat): Update.\n+\n 2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* optc-gen.awk: Factor code out to..."}, {"sha": "937fd6d1e2860994ac7a28c13feb6b1c1f486c05", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -1,3 +1,26 @@\n+2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\t* c.opt (Wformat): Make it Alias Wformat=1.\n+\t(Wformat-contains-nul,Wformat-extra-args,Wformat-nonliteral,\n+\tWformat-security,Wformat-y2k,Wformat-zero-length): Use\n+\tLangEnabledBy.\n+\t(Wformat=): RejectNegative. Use LangEnabledBy.\n+\t(Wnonnull): Use LangEnabledBy.\n+\t* c-opts.c (c_common_handle_option): Do not handle Wformat here.\n+\t* c-format.c (set_Wformat): Delete.\n+\t(decode_format_attr): Replace OPT_Wformat with OPT_Wformat_.\n+        (maybe_read_dollar_number):  Likewise.\n+        (avoid_dollar_number):  Likewise.\n+        (finish_dollar_format_checking):  Likewise.\n+        (check_format_info):  Likewise.\n+        (check_format_info_main):  Likewise.\n+        (check_format_types):  Likewise.\n+        (format_type_warning):  Likewise.\n+        * c-common.c (int):  Likewise.\n+        (check_function_sentinel):  Likewise.\n+        * c-common.h (warn_format,set_Wformat): Do not declare here.\n+\n 2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/53063"}, {"sha": "c3a646534710934be2322eb87aff36c50b09166f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -193,11 +193,6 @@ const char *pch_file;\n    user's namespace.  */\n int flag_iso;\n \n-/* Warn about format/argument anomalies in calls to formatted I/O functions\n-   (*printf, *scanf, strftime, strfmon, etc.).  */\n-\n-int warn_format;\n-\n /* C/ObjC language option variables.  */\n \n \n@@ -8495,7 +8490,7 @@ check_function_sentinel (const_tree fntype, int nargs, tree *argarray)\n \t in position >= the number of fixed arguments.  */\n       if ((nargs - 1 - pos) < len)\n \t{\n-\t  warning (OPT_Wformat,\n+\t  warning (OPT_Wformat_,\n \t\t   \"not enough variable arguments to fit a sentinel\");\n \t  return;\n \t}\n@@ -8510,7 +8505,7 @@ check_function_sentinel (const_tree fntype, int nargs, tree *argarray)\n \t     users to cast the NULL they have written there.\n \t     We warn with -Wstrict-null-sentinel, though.  */\n \t  && (warn_strict_null_sentinel || null_node != sentinel))\n-\twarning (OPT_Wformat, \"missing sentinel in function call\");\n+\twarning (OPT_Wformat_, \"missing sentinel in function call\");\n     }\n }\n "}, {"sha": "5c545f2950f8527278263044bcc8d3d6c88120ad", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -585,12 +585,6 @@ extern const char *pch_file;\n \n extern int flag_iso;\n \n-/* Warn about format/argument anomalies in calls to formatted I/O functions\n-   (*printf, *scanf, strftime, strfmon, etc.).  */\n-\n-extern int warn_format;\n-\n-\n /* C/ObjC language option variables.  */\n \n \n@@ -732,7 +726,6 @@ extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      unsigned HOST_WIDE_INT);\n extern bool check_builtin_function_arguments (tree, int, tree *);\n extern void check_function_format (tree, int, tree *);\n-extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern bool attribute_takes_identifier_p (const_tree);"}, {"sha": "7809c7ffc51d6ce95d490f5f62b4c9ee01e1ea19", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 44, "deletions": 65, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -33,28 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-format.h\"\n #include \"alloc-pool.h\"\n #include \"c-target.h\"\n-\f\n-/* Set format warning options according to a -Wformat=n option.  */\n-\n-void\n-set_Wformat (int setting)\n-{\n-  warn_format = setting;\n-  warn_format_extra_args = setting;\n-  warn_format_zero_length = setting;\n-  warn_format_contains_nul = setting;\n-  if (setting != 1)\n-    {\n-      warn_format_nonliteral = setting;\n-      warn_format_security = setting;\n-      warn_format_y2k = setting;\n-    }\n-  /* Make sure not to disable -Wnonnull if -Wformat=0 is specified.  */\n-  if (setting)\n-    warn_nonnull = setting;\n-}\n \n-\f\n /* Handle attributes associated with format checking.  */\n \n /* This must be in the same order as format_types, except for\n@@ -293,7 +272,7 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n \t   && info->format_type == gcc_objc_string_format_type)\n \t{\n \t  gcc_assert (!validated_p);\n-\t  warning (OPT_Wformat, \"%qE is only allowed in Objective-C dialects\",\n+\t  warning (OPT_Wformat_, \"%qE is only allowed in Objective-C dialects\",\n \t\t   format_type_id);\n \t  info->format_type = format_type_error;\n \t  return false;\n@@ -302,7 +281,7 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n       if (info->format_type == format_type_error)\n \t{\n \t  gcc_assert (!validated_p);\n-\t  warning (OPT_Wformat, \"%qE is an unrecognized format function type\",\n+\t  warning (OPT_Wformat_, \"%qE is an unrecognized format function type\",\n \t\t   format_type_id);\n \t  return false;\n \t}\n@@ -1153,7 +1132,7 @@ maybe_read_dollar_number (const char **format,\n     {\n       if (dollar_needed)\n \t{\n-\t  warning (OPT_Wformat, \"missing $ operand number in format\");\n+\t  warning (OPT_Wformat_, \"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -1174,7 +1153,7 @@ maybe_read_dollar_number (const char **format,\n     {\n       if (dollar_needed)\n \t{\n-\t  warning (OPT_Wformat, \"missing $ operand number in format\");\n+\t  warning (OPT_Wformat_, \"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -1183,14 +1162,14 @@ maybe_read_dollar_number (const char **format,\n   *format = fcp + 1;\n   if (pedantic && !dollar_format_warned)\n     {\n-      warning (OPT_Wformat, \"%s does not support %%n$ operand number formats\",\n+      warning (OPT_Wformat_, \"%s does not support %%n$ operand number formats\",\n \t       C_STD_NAME (STD_EXT));\n       dollar_format_warned = 1;\n     }\n   if (overflow_flag || argnum == 0\n       || (dollar_first_arg_num && argnum > dollar_arguments_count))\n     {\n-      warning (OPT_Wformat, \"operand number out of range in format\");\n+      warning (OPT_Wformat_, \"operand number out of range in format\");\n       return -1;\n     }\n   if (argnum > dollar_max_arg_used)\n@@ -1213,7 +1192,7 @@ maybe_read_dollar_number (const char **format,\n       && dollar_arguments_used[argnum - 1] == 1)\n     {\n       dollar_arguments_used[argnum - 1] = 2;\n-      warning (OPT_Wformat, \"format argument %d used more than once in %s format\",\n+      warning (OPT_Wformat_, \"format argument %d used more than once in %s format\",\n \t       argnum, fki->name);\n     }\n   else\n@@ -1245,7 +1224,7 @@ avoid_dollar_number (const char *format)\n     format++;\n   if (*format == '$')\n     {\n-      warning (OPT_Wformat, \"$ operand number used after format without operand number\");\n+      warning (OPT_Wformat_, \"$ operand number used after format without operand number\");\n       return true;\n     }\n   return false;\n@@ -1275,7 +1254,7 @@ finish_dollar_format_checking (format_check_results *res, int pointer_gap_ok)\n \t\t\t\t || dollar_arguments_pointer_p[i]))\n \t    found_pointer_gap = true;\n \t  else\n-\t    warning (OPT_Wformat,\n+\t    warning (OPT_Wformat_,\n \t\t     \"format argument %d unused before used argument %d in $-style format\",\n \t\t     i + 1, dollar_max_arg_used);\n \t}\n@@ -1415,10 +1394,10 @@ check_format_info (function_format_info *info, tree params)\n \t     format_types[info->format_type].name);\n \n   if (res.number_wide > 0)\n-    warning (OPT_Wformat, \"format is a wide character string\");\n+    warning (OPT_Wformat_, \"format is a wide character string\");\n \n   if (res.number_unterminated > 0)\n-    warning (OPT_Wformat, \"unterminated format string\");\n+    warning (OPT_Wformat_, \"unterminated format string\");\n }\n \n /* Callback from check_function_arguments_recurse to check a\n@@ -1662,7 +1641,7 @@ check_format_info_main (format_check_results *res,\n \tcontinue;\n       if (*format_chars == 0)\n \t{\n-\t  warning (OPT_Wformat, \"spurious trailing %<%%%> in format\");\n+\t  warning (OPT_Wformat_, \"spurious trailing %<%%%> in format\");\n \t  continue;\n \t}\n       if (*format_chars == '%')\n@@ -1706,7 +1685,7 @@ check_format_info_main (format_check_results *res,\n \t\t\t\t\t\t     *format_chars, NULL);\n \t  if (strchr (flag_chars, *format_chars) != 0)\n \t    {\n-\t      warning (OPT_Wformat, \"repeated %s in format\", _(s->name));\n+\t      warning (OPT_Wformat_, \"repeated %s in format\", _(s->name));\n \t    }\n \t  else\n \t    {\n@@ -1719,7 +1698,7 @@ check_format_info_main (format_check_results *res,\n \t      ++format_chars;\n \t      if (*format_chars == 0)\n \t\t{\n-\t\t  warning (OPT_Wformat, \"missing fill character at end of strfmon format\");\n+\t\t  warning (OPT_Wformat_, \"missing fill character at end of strfmon format\");\n \t\t  return;\n \t\t}\n \t    }\n@@ -1807,7 +1786,7 @@ check_format_info_main (format_check_results *res,\n \t\t}\n \t      if (found_width && !non_zero_width_char &&\n \t\t  (fki->flags & (int) FMT_FLAG_ZERO_WIDTH_BAD))\n-\t\twarning (OPT_Wformat, \"zero width in %s format\", fki->name);\n+\t\twarning (OPT_Wformat_, \"zero width in %s format\", fki->name);\n \t      if (found_width)\n \t\t{\n \t\t  i = strlen (flag_chars);\n@@ -1825,7 +1804,7 @@ check_format_info_main (format_check_results *res,\n \t  flag_chars[i++] = fki->left_precision_char;\n \t  flag_chars[i] = 0;\n \t  if (!ISDIGIT (*format_chars))\n-\t    warning (OPT_Wformat, \"empty left precision in %s format\", fki->name);\n+\t    warning (OPT_Wformat_, \"empty left precision in %s format\", fki->name);\n \t  while (ISDIGIT (*format_chars))\n \t    ++format_chars;\n \t}\n@@ -1901,7 +1880,7 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      if (!(fki->flags & (int) FMT_FLAG_EMPTY_PREC_OK)\n \t\t  && !ISDIGIT (*format_chars))\n-\t\twarning (OPT_Wformat, \"empty precision in %s format\", fki->name);\n+\t\twarning (OPT_Wformat_, \"empty precision in %s format\", fki->name);\n \t      while (ISDIGIT (*format_chars))\n \t\t++format_chars;\n \t    }\n@@ -1969,7 +1948,7 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      /* Warn if the length modifier is non-standard.  */\n \t      if (ADJ_STD (length_chars_std) > C_STD_VER)\n-\t\twarning (OPT_Wformat,\n+\t\twarning (OPT_Wformat_,\n \t\t\t \"%s does not support the %qs %s length modifier\",\n \t\t\t C_STD_NAME (length_chars_std), length_chars,\n \t\t\t fki->name);\n@@ -1986,7 +1965,7 @@ check_format_info_main (format_check_results *res,\n \t\t{\n \t\t  const format_flag_spec *s = get_flag_spec (flag_specs,\n \t\t\t\t\t\t\t     *format_chars, NULL);\n-\t\t  warning (OPT_Wformat, \"repeated %s in format\", _(s->name));\n+\t\t  warning (OPT_Wformat_, \"repeated %s in format\", _(s->name));\n \t\t}\n \t      else\n \t\t{\n@@ -2003,7 +1982,7 @@ check_format_info_main (format_check_results *res,\n \t  || (!(fki->flags & (int) FMT_FLAG_FANCY_PERCENT_OK)\n \t      && format_char == '%'))\n \t{\n-\t  warning (OPT_Wformat, \"conversion lacks type at end of format\");\n+\t  warning (OPT_Wformat_, \"conversion lacks type at end of format\");\n \t  continue;\n \t}\n       format_chars++;\n@@ -2014,17 +1993,17 @@ check_format_info_main (format_check_results *res,\n       if (fci->format_chars == 0)\n \t{\n \t  if (ISGRAPH (format_char))\n-\t    warning (OPT_Wformat, \"unknown conversion type character %qc in format\",\n+\t    warning (OPT_Wformat_, \"unknown conversion type character %qc in format\",\n \t\t     format_char);\n \t  else\n-\t    warning (OPT_Wformat, \"unknown conversion type character 0x%x in format\",\n+\t    warning (OPT_Wformat_, \"unknown conversion type character 0x%x in format\",\n \t\t     format_char);\n \t  continue;\n \t}\n       if (pedantic)\n \t{\n \t  if (ADJ_STD (fci->std) > C_STD_VER)\n-\t    warning (OPT_Wformat, \"%s does not support the %<%%%c%> %s format\",\n+\t    warning (OPT_Wformat_, \"%s does not support the %<%%%c%> %s format\",\n \t\t     C_STD_NAME (fci->std), format_char, fki->name);\n \t}\n \n@@ -2040,7 +2019,7 @@ check_format_info_main (format_check_results *res,\n \t      continue;\n \t    if (strchr (fci->flag_chars, flag_chars[i]) == 0)\n \t      {\n-\t\twarning (OPT_Wformat, \"%s used with %<%%%c%> %s format\",\n+\t\twarning (OPT_Wformat_, \"%s used with %<%%%c%> %s format\",\n \t\t\t _(s->name), format_char, fki->name);\n \t\td++;\n \t\tcontinue;\n@@ -2049,7 +2028,7 @@ check_format_info_main (format_check_results *res,\n \t      {\n \t\tconst format_flag_spec *t;\n \t\tif (ADJ_STD (s->std) > C_STD_VER)\n-\t\t  warning (OPT_Wformat, \"%s does not support %s\",\n+\t\t  warning (OPT_Wformat_, \"%s does not support %s\",\n \t\t\t   C_STD_NAME (s->std), _(s->long_name));\n \t\tt = get_flag_spec (flag_specs, flag_chars[i], fci->flags2);\n \t\tif (t != NULL && ADJ_STD (t->std) > ADJ_STD (s->std))\n@@ -2058,7 +2037,7 @@ check_format_info_main (format_check_results *res,\n \t\t\t\t\t     ? t->long_name\n \t\t\t\t\t     : s->long_name);\n \t\t    if (ADJ_STD (t->std) > C_STD_VER)\n-\t\t      warning (OPT_Wformat,\n+\t\t      warning (OPT_Wformat_,\n \t\t\t       \"%s does not support %s with the %<%%%c%> %s format\",\n \t\t\t       C_STD_NAME (t->std), _(long_name),\n \t\t\t       format_char, fki->name);\n@@ -2094,23 +2073,23 @@ check_format_info_main (format_check_results *res,\n \t  if (bad_flag_pairs[i].ignored)\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\twarning (OPT_Wformat,\n+\t\twarning (OPT_Wformat_,\n \t\t\t \"%s ignored with %s and %<%%%c%> %s format\",\n \t\t\t _(s->name), _(t->name), format_char,\n \t\t\t fki->name);\n \t      else\n-\t\twarning (OPT_Wformat, \"%s ignored with %s in %s format\",\n+\t\twarning (OPT_Wformat_, \"%s ignored with %s in %s format\",\n \t\t\t _(s->name), _(t->name), fki->name);\n \t    }\n \t  else\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\twarning (OPT_Wformat,\n+\t\twarning (OPT_Wformat_,\n \t\t\t \"use of %s and %s together with %<%%%c%> %s format\",\n \t\t\t _(s->name), _(t->name), format_char,\n \t\t\t fki->name);\n \t      else\n-\t\twarning (OPT_Wformat, \"use of %s and %s together in %s format\",\n+\t\twarning (OPT_Wformat_, \"use of %s and %s together in %s format\",\n \t\t\t _(s->name), _(t->name), fki->name);\n \t    }\n \t}\n@@ -2149,7 +2128,7 @@ check_format_info_main (format_check_results *res,\n \t    ++format_chars;\n \t  if (*format_chars != ']')\n \t    /* The end of the format string was reached.  */\n-\t    warning (OPT_Wformat, \"no closing %<]%> for %<%%[%> format\");\n+\t    warning (OPT_Wformat_, \"no closing %<]%> for %<%%[%> format\");\n \t}\n \n       wanted_type = 0;\n@@ -2162,7 +2141,7 @@ check_format_info_main (format_check_results *res,\n \t  wanted_type_std = fci->types[length_chars_val].std;\n \t  if (wanted_type == 0)\n \t    {\n-\t      warning (OPT_Wformat,\n+\t      warning (OPT_Wformat_,\n \t\t       \"use of %qs length modifier with %qc type character\",\n \t\t       length_chars, format_char);\n \t      /* Heuristic: skip one argument when an invalid length/type\n@@ -2180,7 +2159,7 @@ check_format_info_main (format_check_results *res,\n \t\t   && ADJ_STD (wanted_type_std) > ADJ_STD (fci->std))\n \t    {\n \t      if (ADJ_STD (wanted_type_std) > C_STD_VER)\n-\t\twarning (OPT_Wformat,\n+\t\twarning (OPT_Wformat_,\n \t\t\t \"%s does not support the %<%%%s%c%> %s format\",\n \t\t\t C_STD_NAME (wanted_type_std), length_chars,\n \t\t\t format_char, fki->name);\n@@ -2198,10 +2177,10 @@ check_format_info_main (format_check_results *res,\n \t  if (main_arg_num != 0)\n \t    {\n \t      if (suppressed)\n-\t\twarning (OPT_Wformat, \"operand number specified with \"\n+\t\twarning (OPT_Wformat_, \"operand number specified with \"\n \t\t\t \"suppressed assignment\");\n \t      else\n-\t\twarning (OPT_Wformat, \"operand number specified for format \"\n+\t\twarning (OPT_Wformat_, \"operand number specified for format \"\n \t\t\t \"taking no argument\");\n \t    }\n \t}\n@@ -2219,7 +2198,7 @@ check_format_info_main (format_check_results *res,\n \t      ++arg_num;\n \t      if (has_operand_number > 0)\n \t\t{\n-\t\t  warning (OPT_Wformat, \"missing $ operand number in format\");\n+\t\t  warning (OPT_Wformat_, \"missing $ operand number in format\");\n \t\t  return;\n \t\t}\n \t      else\n@@ -2355,15 +2334,15 @@ check_format_types (format_wanted_type *types)\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\twarning (OPT_Wformat, \"writing through null pointer \"\n+\t\twarning (OPT_Wformat_, \"writing through null pointer \"\n \t\t\t \"(argument %d)\", arg_num);\n \n \t      /* Check for reading through a NULL pointer.  */\n \t      if (types->reading_from_flag\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\twarning (OPT_Wformat, \"reading through null pointer \"\n+\t\twarning (OPT_Wformat_, \"reading through null pointer \"\n \t\t\t \"(argument %d)\", arg_num);\n \n \t      if (cur_param != 0 && TREE_CODE (cur_param) == ADDR_EXPR)\n@@ -2383,7 +2362,7 @@ check_format_types (format_wanted_type *types)\n \t\t\t  && (CONSTANT_CLASS_P (cur_param)\n \t\t\t      || (DECL_P (cur_param)\n \t\t\t\t  && TREE_READONLY (cur_param))))))\n-\t\twarning (OPT_Wformat, \"writing into constant object \"\n+\t\twarning (OPT_Wformat_, \"writing into constant object \"\n \t\t\t \"(argument %d)\", arg_num);\n \n \t      /* If there are extra type qualifiers beyond the first\n@@ -2394,7 +2373,7 @@ check_format_types (format_wanted_type *types)\n \t\t  && (TYPE_READONLY (cur_type)\n \t\t      || TYPE_VOLATILE (cur_type)\n \t\t      || TYPE_RESTRICT (cur_type)))\n-\t\twarning (OPT_Wformat, \"extra type qualifiers in format \"\n+\t\twarning (OPT_Wformat_, \"extra type qualifiers in format \"\n \t\t\t \"argument (argument %d)\",\n \t\t\t arg_num);\n \n@@ -2510,29 +2489,29 @@ format_type_warning (format_wanted_type *type, tree wanted_type, tree arg_type)\n   if (wanted_type_name)\n     {\n       if (arg_type)\n-        warning (OPT_Wformat, \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n+        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n                  \"but argument %d has type %qT\",\n                  gettext (kind_descriptions[kind]),\n                  (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n                  format_length, format_start, \n                  wanted_type_name, p, arg_num, arg_type);\n       else\n-        warning (OPT_Wformat, \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n+        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n                  gettext (kind_descriptions[kind]),\n                  (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n                  format_length, format_start, wanted_type_name, p);\n     }\n   else\n     {\n       if (arg_type)\n-        warning (OPT_Wformat, \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n+        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n                  \"but argument %d has type %qT\",\n                  gettext (kind_descriptions[kind]),\n                  (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n                  format_length, format_start, \n                  wanted_type, p, arg_num, arg_type);\n       else\n-        warning (OPT_Wformat, \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n+        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n                  gettext (kind_descriptions[kind]),\n                  (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n                  format_length, format_start, wanted_type, p);"}, {"sha": "eb6b2d9329d47a10b87704115d37076435597b8f", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -358,7 +358,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_Wall:\n       /* ??? Don't add new options here. Use LangEnabledBy in c.opt.  */\n-      set_Wformat (value);\n \n       cpp_opts->warn_trigraphs = value;\n       cpp_opts->warn_comments = value;\n@@ -385,14 +384,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->warn_endif_labels = value;\n       break;\n \n-    case OPT_Wformat:\n-      set_Wformat (value);\n-      break;\n-\n-    case OPT_Wformat_:\n-      set_Wformat (atoi (arg));\n-      break;\n-\n     case OPT_Winvalid_pch:\n       cpp_opts->warn_invalid_pch = value;\n       break;"}, {"sha": "e11aef7a365eeb238ce1c0da0e5f49e139c8da73", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -381,35 +381,36 @@ C ObjC C++ ObjC++ Var(warn_float_equal) Warning\n Warn if testing floating point numbers for equality\n \n Wformat\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ Warning Alias(Wformat=, 1, 0)\n Warn about printf/scanf/strftime/strfmon format string anomalies\n \n+Wformat-contains-nul\n+C ObjC C++ ObjC++ Var(warn_format_contains_nul) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n+Warn about format strings that contain NUL bytes\n+\n Wformat-extra-args\n-C ObjC C++ ObjC++ Var(warn_format_extra_args) Warning\n+C ObjC C++ ObjC++ Var(warn_format_extra_args) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n Warn if passing too many arguments to a function for its format string\n \n Wformat-nonliteral\n-C ObjC C++ ObjC++ Var(warn_format_nonliteral) Warning\n+C ObjC C++ ObjC++ Var(warn_format_nonliteral) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 2, 0)\n Warn about format strings that are not literals\n \n-Wformat-contains-nul\n-C ObjC C++ ObjC++ Var(warn_format_contains_nul) Warning\n-Warn about format strings that contain NUL bytes\n-\n Wformat-security\n-C ObjC C++ ObjC++ Var(warn_format_security) Warning\n+C ObjC C++ ObjC++ Var(warn_format_security) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 2, 0)\n Warn about possible security problems with format functions\n \n Wformat-y2k\n-C ObjC C++ ObjC++ Var(warn_format_y2k) Warning\n+C ObjC C++ ObjC++ Var(warn_format_y2k) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=,warn_format >= 2, 0)\n Warn about strftime formats yielding 2-digit years\n \n Wformat-zero-length\n-C ObjC C++ ObjC++ Var(warn_format_zero_length) Warning\n+C ObjC C++ ObjC++ Var(warn_format_zero_length) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=,warn_format >= 1, 0)\n Warn about zero-length formats\n \n Wformat=\n-C ObjC C++ ObjC++ Joined Warning\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0)\n+Warn about printf/scanf/strftime/strfmon format string anomalies\n \n Wignored-qualifiers\n C C++ Var(warn_ignored_qualifiers) Warning EnabledBy(Wextra)\n@@ -558,9 +559,13 @@ C++ ObjC++ Var(warn_nonvdtor) Warning\n Warn about non-virtual destructors\n \n Wnonnull\n-C ObjC C++ ObjC++ Var(warn_nonnull) Warning\n+C ObjC C++ ObjC++ Var(warn_nonnull) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=,warn_format >= 1,0)\n Warn about NULL being passed to argument slots marked as requiring non-NULL\n \n+Wnonnull\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+;\n+\n Wnormalized=\n C ObjC C++ ObjC++ Joined Warning\n -Wnormalized=<id|nfc|nfkc>\tWarn about non-normalised Unicode strings"}, {"sha": "31f16330245757f9ea69c25f34270ed54b723a7f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -3241,10 +3241,12 @@ the compiler performs the entire computation with @code{double}\n because the floating-point literal is a @code{double}.\n \n @item -Wformat\n+@itemx -Wformat=@var{n}\n @opindex Wformat\n @opindex Wno-format\n @opindex ffreestanding\n @opindex fno-builtin\n+@opindex Wformat=\n Check calls to @code{printf} and @code{scanf}, etc., to make sure that\n the arguments supplied have types appropriate to the format string\n specified, and that the conversions specified in the format string make\n@@ -3268,20 +3270,17 @@ in the selected standard version (but not for @code{strfmon} formats,\n since those are not in any version of the C standard).  @xref{C Dialect\n Options,,Options Controlling C Dialect}.\n \n-Since @option{-Wformat} also checks for null format arguments for\n-several functions, @option{-Wformat} also implies @option{-Wnonnull}.\n-\n-@option{-Wformat} is included in @option{-Wall}.  For more control over some\n-aspects of format checking, the options @option{-Wformat-y2k},\n-@option{-Wno-format-extra-args}, @option{-Wno-format-zero-length},\n-@option{-Wformat-nonliteral}, @option{-Wformat-security}, and\n-@option{-Wformat=2} are available, but are not included in @option{-Wall}.\n-\n-@item -Wformat-y2k\n-@opindex Wformat-y2k\n-@opindex Wno-format-y2k\n-If @option{-Wformat} is specified, also warn about @code{strftime}\n-formats that may yield only a two-digit year.\n+@table @gcctabopt\n+@item -Wformat=1\n+@itemx -Wformat\n+Option @option{-Wformat} is equivalent to @option{-Wformat=1}, and\n+@option{-Wno-format} is equivalent to @option{-Wformat=0}.  Since\n+@option{-Wformat} also checks for null format arguments for several\n+functions, @option{-Wformat} also implies @option{-Wnonnull}.  Some\n+aspects of this level of format checking can be disabled by the\n+options: @option{-Wno-format-contains-nul},\n+@option{-Wno-format-extra-args}, and @option{-Wno-format-zero-length}.\n+@option{-Wformat} is enabled by @option{-Wall}.\n \n @item -Wno-format-contains-nul\n @opindex Wno-format-contains-nul\n@@ -3310,6 +3309,12 @@ Unix Specification says that such unused arguments are allowed.\n If @option{-Wformat} is specified, do not warn about zero-length formats.\n The C standard specifies that zero-length formats are allowed.\n \n+\n+@item -Wformat=2\n+Enable @option{-Wformat} plus additional format checks.  Currently\n+equivalent to @option{-Wformat -Wformat-nonliteral -Wformat-security\n+-Wformat-y2k}.\n+\n @item -Wformat-nonliteral\n @opindex Wformat-nonliteral\n @opindex Wno-format-nonliteral\n@@ -3330,12 +3335,12 @@ currently a subset of what @option{-Wformat-nonliteral} warns about, but\n in future warnings may be added to @option{-Wformat-security} that are not\n included in @option{-Wformat-nonliteral}.)\n \n-@item -Wformat=2\n-@opindex Wformat=2\n-@opindex Wno-format=2\n-Enable @option{-Wformat} plus format checks not included in\n-@option{-Wformat}.  Currently equivalent to @option{-Wformat\n--Wformat-nonliteral -Wformat-security -Wformat-y2k}.\n+@item -Wformat-y2k\n+@opindex Wformat-y2k\n+@opindex Wno-format-y2k\n+If @option{-Wformat} is specified, also warn about @code{strftime}\n+formats that may yield only a two-digit year.\n+@end table\n \n @item -Wnonnull\n @opindex Wnonnull\n@@ -3796,7 +3801,6 @@ It is equivalent to @option{-Wstrict-aliasing=3}\n \n @item -Wstrict-aliasing=n\n @opindex Wstrict-aliasing=n\n-@opindex Wno-strict-aliasing=n\n This option is only active when @option{-fstrict-aliasing} is active.\n It warns about code that might break the strict aliasing rules that the\n compiler is using for optimization."}, {"sha": "6a235e0568a736c9f66f34605fb9b5cf06d85631", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -1,3 +1,8 @@\n+2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\t* gcc.dg/warn-nsstring.c: Use -Wformat explicitly.\n+\n 2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/51294"}, {"sha": "600ff34d9362ce35d90f7ace54c7277b163c39de", "filename": "gcc/testsuite/gcc.dg/warn-nsstring.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-nsstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7332899a4225f89d820af7c04bfdcd0be05f44e3/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-nsstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-nsstring.c?ref=7332899a4225f89d820af7c04bfdcd0be05f44e3", "patch": "@@ -1,6 +1,6 @@\n /* Check that the NSString format extension is rejected in c.  */\n /* { dg-do compile } */\n-\n+/* { dg-options \"-Wformat\" } */\n extern void NSLog (void *fmt, ...) __attribute__((format(__NSString__, 1, 2))); /* { dg-warning \"is only allowed in Objective-C dialects\" } */\n extern void NSLog1 (void *fmt, ...) __attribute__((format(NSString, 1, 2))); /* { dg-warning \"is only allowed in Objective-C dialects\" } */\n "}]}