{"sha": "970d683f67777319990b30302a21a860990e2ec8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwZDY4M2Y2Nzc3NzMxOTk5MGIzMDMwMmEyMWE4NjA5OTBlMmVjOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-20T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-20T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "f0c115e4057c0af3e3806702c30b5c3c7baafba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0c115e4057c0af3e3806702c30b5c3c7baafba3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/970d683f67777319990b30302a21a860990e2ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970d683f67777319990b30302a21a860990e2ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/970d683f67777319990b30302a21a860990e2ec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970d683f67777319990b30302a21a860990e2ec8/comments", "author": null, "committer": null, "parents": [{"sha": "6e02de946125c36871bd4d8eff21f7f88f01a8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e02de946125c36871bd4d8eff21f7f88f01a8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e02de946125c36871bd4d8eff21f7f88f01a8aa"}], "stats": {"total": 466, "additions": 465, "deletions": 1}, "files": [{"sha": "6eef4e842410a18c7a555116cae0b34d1109797e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1,3 +1,69 @@\n+2020-10-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97360\n+\t* gimple-range.h (range_compatible_p): New.\n+\t* gimple-range-gori.cc (is_gimple_logical_p): Use range_compatible_p.\n+\t(range_is_either_true_or_false): Ditto.\n+\t(gori_compute::outgoing_edge_range_p): Cast result to the correct\n+\ttype if necessary.\n+\t(logical_stmt_cache::cacheable_p): Use range_compatible_p.\n+\t* gimple-range.cc (gimple_ranger::calc_stmt): Check range_compatible_p\n+\tbefore casting the range.\n+\t(gimple_ranger::range_on_exit): Use range_compatible_p.\n+\t(gimple_ranger::range_on_edge): Ditto.\n+\n+2020-10-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/97456\n+\t* tree-complex.c (set_component_ssa_name): Do not replace ignored decl\n+\tdefault definitions with new component vars.  Reorder if conditions.\n+\n+2020-10-19  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/vsx.md (vextract_fp_from_shorth):  Fix vals_be.\n+\t(vextract_fp_from_shortl) Same.\n+\n+2020-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97488\n+\t* range-op.cc (operator_lshift::op1_range): Handle large right shifts.\n+\n+2020-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-modref.c (compute_parm_map): Clear vector.\n+\n+2020-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97486\n+\t* tree-vect-slp.c (vect_slp_function): Split after stmts\n+\tending a BB.\n+\n+2020-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/invoke.texi (OPptimize Options): Add missing closing\n+\tparenthesis.\n+\n+2020-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97467\n+\t* range-op.cc (operator_lshift::op1_range): Handle shifts by 0.\n+\n+2020-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97466\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Remove\n+\tspurious assert, re-indent.\n+\n+2020-10-19  Li Jia He  <helijia@gcc.gnu.org>\n+\n+\tPR tree-optimization/66552\n+\t* match.pd (x << (n % C) -> x << (n & C-1)): New simplification.\n+\n+2020-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_gimple_comparison): Drop special-case\n+\tfor pointer comparison.\n+\n 2020-10-16  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* vr-values.c (dump_all_value_ranges): Only dump names which are"}, {"sha": "90bac5173df9217de108a021d26e8cf4017c04af", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1 +1 @@\n-20201019\n+20201020"}, {"sha": "56ea2a3bd4d5788bc0b1da0c7c78c0028726c6ae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1,3 +1,245 @@\n+2020-10-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb: (P_Aggregate_Or_Paren_Expr): Recognize\n+\tIterated_Element_Component.\n+\t(P_Iterated_Component_Association): Rebuild node as an Iterated_\n+\tElement_Association when Key_Expression is present, and attach\n+\teither the Loop_Parameter_Specification or the\n+\tIterator_Specification to the new node.\n+\t* sem_aggr.adb: (Resolve_Container_Aggregate):\n+\tResolve_Iterated_Association handles bota Iterated_Component_\n+\tand Iterated_Element_Associations, in which case it analyzes and\n+\tresoles the orresponding Key_Expression.\n+\t* exp_aggr.adb (Expand_Iterated_Component): If a Key_Expression\n+\tis present, use it as the required parameter in the call to the\n+\tinsertion routine for the destination container aggregate. Call\n+\tthis routine for both kinds of Iterated_Associations.\n+\n+2020-10-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Concatenate): Enable needed range checks.\n+\n+2020-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n+\tSet the Warnings_Off flag on the pointer object used in the\n+\texpansion of iterators and similar.\n+\n+2020-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (PowerPC/Linux): Use s-taspri__posix.ads instead\n+\tof s-taspri__posix-noaltstack.ads for s-taspri.ads.\n+\n+2020-10-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Add_Call): Remove excessive condition and\n+\tunnecessary call to Set_Has_Predicates.\n+\n+2020-10-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb: Use debug switch -gnatdF for this alternative\n+\tdisplay of messages.\n+\t* errout.adb (Output_Messages): Alternative display when -gnatdF\n+\tis used.\n+\t* erroutc.adb (Output_Msg_Text): Likewise.\n+\n+2020-10-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Untagged_Equality): Check for AI12-0352.\n+\n+2020-10-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Add_View_Conversion_Invariants): Do not insert\n+\tgenerated invariant checks when the call is a function call.\n+\tThese tests are properly inserted in the code in procedure\n+\tInsert_Post_Call_Actions, which takes care of finding the proper\n+\tinsertion point for the checks.\n+\t(Insert_Post_Call_Actions): Add question marks to indicate\n+\tpossible gap in handling function calls that appear as aggregate\n+\tcomponents.\n+\n+2020-10-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* contracts.adb (Process_Preconditions_For): Do not exclude\n+\tinstances.\n+\t* sem_ch4.adb (Analyze_Quantified_Expression): Disable spurious\n+\twarning on internally generated variables.\n+\n+2020-10-19  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* debug.adb: Document -gnatd_c flag as being used for CUDA.\n+\t* gnat_cuda.ads: New file.\n+\t* gnat_cuda.adb: New file.\n+\t* rtsfind.ads: Add Interfaces_C_Strings package and\n+\tRE_Fatbin_Wrapper, RE_Register_Fat_Binary,\n+\tRE_Register_Fat_Binary_End, RE_Register_Function, RE_Chars_Ptr,\n+\tRE_New_Char_Array entities.\n+\t* rtsfind.adb: Create new Interfaces_C_Descendant subtype,\n+\thandle it.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Call CUDA init\n+\tprocedure.\n+\t* sem_prag.adb (Analyze_Pragma): Call Add_Cuda_Kernel procedure.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Add gnat_cuda.o.\n+\n+2020-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* ghost.adb (Whole_Object_Ref): New function to compute the name\n+\tof the whole object.\n+\t(Mark_And_Set_Ghost_Assignment): Rewrite to use\n+\tWhole_Object_Ref.  We need to partly analyze the left-hand side\n+\tin order to distinguish expanded names and record components.\n+\t* lib-xref.ads, lib-xref.adb (Deferred_References): Move table\n+\tto body, and add Defer_Reference to update the table, avoiding\n+\tduplicates.\n+\t(Generate_Reference): Avoid duplicates.\n+\t* sem_ch8.ads, sem_ch8.adb (Find_Direct_Name): Remove _OK\n+\tparameters, which are no longer needed. Ignore errors in\n+\tIgnore_Errors mode.\n+\t* sem_util.ads, sem_util.adb (Preanalyze_Without_Errors): Make\n+\tthis public, so we can call it from Ghost.\n+\t* errout.ads, scng.adb, sem_prag.adb: Minor.\n+\n+2020-10-19  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Check if type\n+\tdepends on discriminant.\n+\n+2020-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-coinve.adb, libgnat/a-cidlli.adb (Put_Image): Call\n+\tIterate.\n+\n+2020-10-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Properly apply\n+\tsubtype constraints when using a Default_Value.\n+\t* freeze.adb: Fix typo.\n+\n+2020-10-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Fix bug\n+\twhere a call to Error_Msg_N leads to crash due to\n+\tError_Msg_Name_1 being removed by the call, while a subsequent\n+\tcall to Error_Msg_N tries to use it. The variable\n+\tError_Msg_Name_1 should be restored prior to the next call. Also\n+\tadd checking for the new rules.\n+\n+2020-10-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* checks.adb (Apply_Type_Conversion_Checks): Minor code clean\n+\tup.\n+\t* exp_ch4.adb (Discrete_Range_Check): Optimize range checks.\n+\tUpdate comments.\n+\t(Expand_N_Type_Conversion): Generate range check when rewriting\n+\ta type conversion if needed. Add assertion.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Minor code clean\n+\tup.\n+\t* sem_res.adb (Resolve_Type_Conversion): Apply range check when\n+\tneeded.  Update comments.\n+\n+2020-10-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-textio.ads: Update top-level comment.\n+\n+2020-10-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part): Fix typo.\n+\n+2020-10-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): Simplify condition for by-copy\n+\ttypes.\n+\n+2020-10-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.ads: Add comment regarding lack of preservation of\n+\tErrout state across successive calls to the API.\n+\n+2020-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_put_image.adb (Build_Elementary_Put_Image_Call): Use the\n+\tbase type to recognize various cases of access types.\n+\t* libgnat/a-cbdlli.adb, libgnat/a-cbdlli.ads, libgnat/a-cbhama.adb,\n+\tlibgnat/a-cbhama.ads, libgnat/a-cbhase.adb, libgnat/a-cbhase.ads,\n+\tlibgnat/a-cbmutr.adb, libgnat/a-cbmutr.ads, libgnat/a-cborma.adb,\n+\tlibgnat/a-cborma.ads, libgnat/a-cborse.adb, libgnat/a-cborse.ads,\n+\tlibgnat/a-cdlili.adb, libgnat/a-cdlili.ads, libgnat/a-cidlli.adb,\n+\tlibgnat/a-cidlli.ads, libgnat/a-cihama.adb, libgnat/a-cihama.ads,\n+\tlibgnat/a-cihase.adb, libgnat/a-cihase.ads, libgnat/a-cimutr.adb,\n+\tlibgnat/a-cimutr.ads, libgnat/a-ciorma.adb, libgnat/a-ciorma.ads,\n+\tlibgnat/a-ciormu.adb, libgnat/a-ciormu.ads, libgnat/a-ciorse.adb,\n+\tlibgnat/a-ciorse.ads, libgnat/a-coboho.adb, libgnat/a-coboho.ads,\n+\tlibgnat/a-cobove.adb, libgnat/a-cobove.ads, libgnat/a-cohama.adb,\n+\tlibgnat/a-cohama.ads, libgnat/a-cohase.adb, libgnat/a-cohase.ads,\n+\tlibgnat/a-coinho.adb, libgnat/a-coinho.ads,\n+\tlibgnat/a-coinho__shared.adb, libgnat/a-coinho__shared.ads,\n+\tlibgnat/a-coinve.adb, libgnat/a-coinve.ads, libgnat/a-comutr.adb,\n+\tlibgnat/a-comutr.ads, libgnat/a-coorma.adb, libgnat/a-coorma.ads,\n+\tlibgnat/a-coormu.adb, libgnat/a-coormu.ads, libgnat/a-coorse.adb,\n+\tlibgnat/a-coorse.ads, libgnat/a-strunb.adb, libgnat/a-strunb.ads,\n+\tlibgnat/a-strunb__shared.adb, libgnat/a-strunb__shared.ads:\n+\tImplement Put_Image attibute.\n+\t* libgnat/a-stteou.ads, libgnat/s-putima.ads,\n+\tlibgnat/a-stouut.ads, libgnat/a-stoubu.adb: Make\n+\tAda.Strings.Text_Output, Ada.Strings.Text_Output.Utils, and\n+\tSystem.Put_Images Pure, so they can be with'ed by Pure units\n+\tthat should have Put_Image defined.\n+\t* libgnat/a-stouut.adb: Add missing column adjustments, and\n+\tremove a redundant one.\n+\t* libgnat/s-putima.adb (Put_Arrow): New routine to print an\n+\tarrow. Avoids adding a with clause to some containers.\n+\n+2020-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch4.adb (P_Aggregate_Or_Paren_Expr): Require matching\n+\tparens or brackets.\n+\t* par.adb, par-tchk.adb (T_Right_Bracket): New procedure to give\n+\tan error on missing ].\n+\n+2020-10-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Direct_Name): Do not trust in the decoration\n+\tof the Entity attribute in constants associated with\n+\tdiscriminals of protected types.\n+\n+2020-10-19  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Context): When the enclosing\n+\tsubprogram is abstract, bypass early return if the call is\n+\ttag-indeterminate, to continue with the later error checking.\n+\n+2020-10-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch7.adb (Uninstall_Declarations): Uninstall the\n+\tdeclaration of a subtype declaration defined in the private part\n+\tof a package.\n+\n+2020-10-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par-ch4.adb (P_Aggregate_Or_Paren_Expr): Simplify code since\n+\twe are always under -gnatX if we encounter a Tok_Left_Bracket.\n+\t* scng.adb (Scan): [] is an aggregate under -gnatX and a wide\n+\tcharacter otherwise.\n+\n+2020-10-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Cleanup.\n+\n+2020-10-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Direct_Deep_Call): Refine type from Node_Id to\n+\tEntity_Id.\n+\n+2020-10-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (May_Fold): Detect all operators, i.e. both binary\n+\tand unary ones.\n+\n+2020-10-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): Simplify repeated calls to\n+\tNkind.\n+\n 2020-10-18  Alexandre Oliva  <oliva@adacore.com>\n \n \t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Compile Ada.Numerics"}, {"sha": "004df549897e44c534169c3c21120be98451bd45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1,3 +1,13 @@\n+2020-10-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/97438\n+\t* coroutines.cc (struct coroutine_info): Add a field to\n+\trecord that we emitted a promise type error.\n+\t(coro_promise_type_found_p): Check for the case that the\n+\tpromise type contains both return_void and return_value.\n+\tEmit an error if so, with information about the wrong\n+\ttype methods.\n+\n 2020-10-16  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/97460"}, {"sha": "bbfb97b406929b8f324d4fcc99f2417ee6770623", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1,3 +1,112 @@\n+2020-10-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97360-2.c: New test.\n+\n+2020-10-19  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/sad-vectorize-1.c: Remove target.\n+\t* gcc.target/powerpc/sad-vectorize-2.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v16qi-df.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v16qi.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v16qiu-df.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v16qiu.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v2df.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v2di.c: Require lp64.\n+\t* gcc.target/powerpc/vec-extract-v4sf.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v4si-df.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v4si.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v4siu-df.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v4siu.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v8hi-df.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v8hi.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v8hiu-df.c: Remove target.\n+\t* gcc.target/powerpc/vec-extract-v8hiu.c: Remove target.\n+\t* gcc.target/powerpc/vec-init-1.c: Remove target.\n+\t* gcc.target/powerpc/vec-init-2.c: Require lp64.\n+\t* gcc.target/powerpc/vec-init-3.c: Require lp64.\n+\t* gcc.target/powerpc/vec-init-4.c: Remove target.\n+\t* gcc.target/powerpc/vec-init-5.c: Remove target.\n+\t* gcc.target/powerpc/vec-init-6.c: Require lp64.\n+\t* gcc.target/powerpc/vec-init-7.c: Require lp64.\n+\t* gcc.target/powerpc/vec-init-8.c: Remove target.\n+\t* gcc.target/powerpc/vec-init-9.c: Require lp64.\n+\t* gcc.target/powerpc/vec-setup-double.c: Remove target.\n+\t* gcc.target/powerpc/vec-setup-long.c: Remove target.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-13.c: Correct expected warnings.\n+\t* gcc.target/powerpc/vsu/vsu.exp: Enable on AIX.\n+\n+2020-10-19  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/fold-vec-extract-char.p7.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-char.p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-char.p9.c: Remove target.\n+\tExpect 3 addi for ilp32.\n+\t* gcc.target/powerpc/fold-vec-extract-double.p7.c: Remove target.\n+\tAdd -mbig-endian for Linux.\n+\t* gcc.target/powerpc/fold-vec-extract-double.p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-float.p7.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-float.p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-float.p9.c: Require lp64.\n+\t* gcc.target/powerpc/fold-vec-extract-int.p7.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-int.p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-int.p9.c: Remove target.\n+\tExpect 3 addi for ilp32.\n+\t* gcc.target/powerpc/fold-vec-extract-longlong.p7.c: Remove target.\n+\tExpect 4 addi for ilp32.\n+\t* gcc.target/powerpc/fold-vec-extract-longlong.p8.c: Remove target.\n+\tExpect 4 addi for ilp32.\n+\t* gcc.target/powerpc/fold-vec-extract-longlong.p9.c: Require lp64.\n+\t* gcc.target/powerpc/fold-vec-extract-short.p7.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-short.p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-extract-short.p9.c: Require lp64.\n+\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-double.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Remove target.\n+\tRequire 8 addi for ilp32.\n+\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-select-double.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-select-float.c: Remove target.\n+\t* gcc.target/powerpc/fold-vec-splats-int.c: Require lp64.\n+\t* gcc.target/powerpc/fold-vec-splats-longlong.c: Require lp64.\n+\n+2020-10-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/97438\n+\t* g++.dg/coroutines/pr97438.C: New test.\n+\n+2020-10-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/97456\n+\t* gcc.dg/tree-ssa/pr97456.c: New test.\n+\n+2020-10-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-c++-common/cpp/pr97471.c: New.\n+\n+2020-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97488.c: New test.\n+\n+2020-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97486\n+\t* gcc.dg/vect/bb-slp-pr97486.c: New testcase.\n+\n+2020-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97467.c: New test.\n+\n+2020-10-19  Li Jia He  <helijia@gcc.gnu.org>\n+\n+\tPR tree-optimization/66552\n+\t* gcc.dg/pr66552.c: New testcase.\n+\n 2020-10-18  Harald Anlauf  <anlauf@gmx.de>\n \n \t* gfortran.dg/matmul_20.f90: New test."}, {"sha": "411b2be8ce35b00ba910ff767bce0ffd8d6563fc", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1,3 +1,10 @@\n+2020-10-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* internal.h (struct cpp_reader): Rename 'eof' field to 'endarg'.\n+\t* init.c (cpp_create_reader): Adjust.\n+\t* macro.c (collect_args): Use endarg for separator.  Always rewind\n+\tin the not-fn case.\n+\n 2020-10-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* internal.h (enum include_type): Rename IT_MAIN_INJECT to"}, {"sha": "90e1f0527782e5d124de258c84261e0700384525", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1,3 +1,7 @@\n+2020-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Add one commit.\n+\n 2020-10-18  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* sanitizer_common/sanitizer_mac.h: Ensure that TARGET_OS_"}, {"sha": "5861f3a077e92fba5079836dabb0361fa80e15b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970d683f67777319990b30302a21a860990e2ec8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970d683f67777319990b30302a21a860990e2ec8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=970d683f67777319990b30302a21a860990e2ec8", "patch": "@@ -1,3 +1,29 @@\n+2020-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (make_unique_for_overwrite): Define\n+\tfor C++20.\n+\t* testsuite/20_util/unique_ptr/creation/array_neg.cc: Remove\n+\tunused header. Adjust standard reference.\n+\t* testsuite/20_util/unique_ptr/creation/for_overwrite.cc: New test.\n+\t* testsuite/20_util/unique_ptr/creation/for_overwrite__neg.cc: New test.\n+\n+2020-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/tuple (_Head_base<Idx, Head, true>): Use reserved\n+\tform of __no_unique_address__ attribute because\n+\tno_unique_address is not reserved prior to C++20.\n+\n+2020-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/node_handle.h (_Node_handle_common): Replace\n+\tstd::optional with custom type.\n+\t* testsuite/20_util/variant/exception_safety.cc: Add missing\n+\theader include.\n+\n+2020-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/precompiled/expc++.h: Removed.\n+\n 2020-10-17  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/97449"}]}