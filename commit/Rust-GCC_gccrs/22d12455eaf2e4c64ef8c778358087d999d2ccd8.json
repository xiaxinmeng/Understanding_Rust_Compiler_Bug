{"sha": "22d12455eaf2e4c64ef8c778358087d999d2ccd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkMTI0NTVlYWYyZTRjNjRlZjhjNzc4MzU4MDg3ZDk5OWQyY2NkOA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-08-20T01:18:09Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-08-20T01:18:09Z"}, "message": "re PR tree-optimization/61839 (More optimize opportunity for VRP)\n\n\ngcc/testsuite/ChangeLog:\n\n2016-08-20  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR tree-optimization/61839\n\t* gcc.dg/tree-ssa/pr61839_1.c: New test.\n\t* gcc.dg/tree-ssa/pr61839_2.c: New test.\n\t* gcc.dg/tree-ssa/pr61839_3.c: New test.\n\t* gcc.dg/tree-ssa/pr61839_4.c: New test.\n\ngcc/ChangeLog:\n\n2016-08-20  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR tree-optimization/61839\n\t* tree-vrp.c (two_valued_val_range_p): New.\n\t(simplify_stmt_using_ranges): Convert CST BINOP VAR where VAR is\n\ttwo-valued to VAR == VAL1 ? (CST BINOP VAL1) : (CST BINOP VAL2).\n\tAlso Convert VAR BINOP CST where VAR is two-valued to\n\tVAR == VAL1 ? (VAL1 BINOP CST) : (VAL2 BINOP CST).\n\nFrom-SVN: r239637", "tree": {"sha": "59b27eaa3e0d776ac20ff1224817253d94a968b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b27eaa3e0d776ac20ff1224817253d94a968b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d12455eaf2e4c64ef8c778358087d999d2ccd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d12455eaf2e4c64ef8c778358087d999d2ccd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d12455eaf2e4c64ef8c778358087d999d2ccd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d12455eaf2e4c64ef8c778358087d999d2ccd8/comments", "author": null, "committer": null, "parents": [{"sha": "151d752b9eedbe2648cf02c4f330adeabf22237d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151d752b9eedbe2648cf02c4f330adeabf22237d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151d752b9eedbe2648cf02c4f330adeabf22237d"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "a9946a9134bd0a2ac0826a0ccdd73978133dcd26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22d12455eaf2e4c64ef8c778358087d999d2ccd8", "patch": "@@ -1,3 +1,12 @@\n+2016-08-20  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR tree-optimization/61839\n+\t* tree-vrp.c (two_valued_val_range_p): New.\n+\t(simplify_stmt_using_ranges): Convert CST BINOP VAR where VAR is\n+\ttwo-valued to VAR == VAL1 ? (CST BINOP VAL1) : (CST BINOP VAL2).\n+\tAlso Convert VAR BINOP CST where VAR is two-valued to\n+\tVAR == VAL1 ? (VAL1 BINOP CST) : (VAL2 BINOP CST).\n+\n 2016-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-show-locus.c"}, {"sha": "6201e0cf82d736dabbc3bf14a6abdda2852d2b2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22d12455eaf2e4c64ef8c778358087d999d2ccd8", "patch": "@@ -1,3 +1,11 @@\n+2016-08-20  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR tree-optimization/61839\n+\t* gcc.dg/tree-ssa/pr61839_1.c: New test.\n+\t* gcc.dg/tree-ssa/pr61839_2.c: New test.\n+\t* gcc.dg/tree-ssa/pr61839_3.c: New test.\n+\t* gcc.dg/tree-ssa/pr61839_4.c: New test.\n+\n 2016-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/32187"}, {"sha": "9f8168a81f28448759ab53074a8982d8d7da7d62", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c?ref=22d12455eaf2e4c64ef8c778358087d999d2ccd8", "patch": "@@ -0,0 +1,44 @@\n+/* PR tree-optimization/61839.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-optimized\" } */\n+/* { dg-require-effective-target int32plus } */\n+\n+__attribute__ ((noinline))\n+int foo ()\n+{\n+  int a = -1;\n+  volatile unsigned b = 1U;\n+  int c = 1;\n+  c = (a + 972195718) >> (1LU <= b);\n+  if (c == 486097858)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int bar ()\n+{\n+  int a = -1;\n+  volatile unsigned b = 1U;\n+  int c = 1;\n+  c = (a + 972195718) >> (b ? 2 : 3);\n+  if (c == 243048929)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  foo ();\n+  bar ();\n+}\n+\n+/* Scan for c = 972195717) >> [0, 1] in function foo.  */\n+/* { dg-final { scan-tree-dump-times \"486097858 : 972195717\" 1  \"vrp1\" } } */\n+/* Scan for c = 972195717) >> [2, 3] in function bar.  */\n+/* { dg-final { scan-tree-dump-times \"243048929 : 121524464\" 2  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"486097858\" 0  \"optimized\" } } */"}, {"sha": "ffa00a7e6746b103e87457618df32441bb5becc5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c?ref=22d12455eaf2e4c64ef8c778358087d999d2ccd8", "patch": "@@ -0,0 +1,54 @@\n+/* PR tree-optimization/61839.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-require-effective-target int32plus } */\n+\n+__attribute__ ((noinline))\n+int foo ()\n+{\n+  int a = -1;\n+  volatile unsigned b = 1U;\n+  int c = 1;\n+  c = (a + 972195718) / (b ? 1 : 0);\n+  if (c == 972195717)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int bar ()\n+{\n+  int a = -1;\n+  volatile unsigned b = 1U;\n+  int c = 1;\n+  c = (a + 972195718) % (b ? 1 : 0);\n+  if (c == 972195717)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int bar2 ()\n+{\n+  int a = -1;\n+  volatile unsigned b = 1U;\n+  int c = 1;\n+  c = (a + 972195716) % (b ? 1 : 2);\n+  if (c == 972195715)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+\n+/* Dont optimize 972195717 / 0 in function foo.  */\n+/* { dg-final { scan-tree-dump-times \"972195717 / _\" 1  \"vrp1\" } } */\n+/* Dont optimize 972195717 % 0 in function bar.  */\n+/* { dg-final { scan-tree-dump-times \"972195717 % _\" 1 \"vrp1\" } } */\n+/* Optimize in function bar2.  */\n+/* { dg-final { scan-tree-dump-times \"972195715 % _\" 0 \"vrp1\" } } */"}, {"sha": "5ceb0738bded19adfcbd5ba6e02c8060f7818804", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c?ref=22d12455eaf2e4c64ef8c778358087d999d2ccd8", "patch": "@@ -0,0 +1,26 @@\n+/* PR tree-optimization/61839.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-optimized\" } */\n+\n+__attribute__ ((noinline))\n+int foo (int a, unsigned b)\n+{\n+  int c = 1;\n+  b =  a ? 12 : 13;\n+  c = b << 8;\n+  if (c == 3072)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  volatile unsigned b = 1U;\n+  foo (-1, b);\n+}\n+\n+/* Scan for c [12, 13] << 8 in function foo.  */\n+/* { dg-final { scan-tree-dump-times \"3072 : 3328\" 2  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"3072\" 0  \"optimized\" } } */"}, {"sha": "5c026c89c7d128db00d570c95ef6d222acd01dcc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_4.c?ref=22d12455eaf2e4c64ef8c778358087d999d2ccd8", "patch": "@@ -0,0 +1,28 @@\n+/* PR tree-optimization/61839.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-optimized\" } */\n+/* { dg-require-effective-target int32plus } */\n+\n+__attribute__ ((noinline))\n+int foo (int a, unsigned b)\n+{\n+  unsigned c = 1;\n+  if (b >= 1 && b <= ((unsigned)(-1) - 1))\n+    return 0;\n+  c = b >> 4;\n+  if (c == 268435455)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  volatile unsigned b = (unsigned)(-1);\n+  foo (-1, b);\n+}\n+\n+/* Scan for ~[1, 4294967294] >> 4 in function foo.  */\n+/* { dg-final { scan-tree-dump-times \"0 : 268435455\" 1  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"268435455\" 0  \"optimized\" } } */"}, {"sha": "d350a86c50cc314ad5ea3c09da18b4db45ad0696", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12455eaf2e4c64ef8c778358087d999d2ccd8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=22d12455eaf2e4c64ef8c778358087d999d2ccd8", "patch": "@@ -10036,6 +10036,40 @@ simplify_internal_call_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n   return true;\n }\n \n+/* Return true if VAR is a two-valued variable.  Set a and b with the\n+   two-values when it is true.  Return false otherwise.  */\n+\n+static bool\n+two_valued_val_range_p (tree var, tree *a, tree *b)\n+{\n+  value_range *vr = get_value_range (var);\n+  if ((vr->type != VR_RANGE\n+       && vr->type != VR_ANTI_RANGE)\n+      || TREE_CODE (vr->min) != INTEGER_CST\n+      || TREE_CODE (vr->max) != INTEGER_CST)\n+    return false;\n+\n+  if (vr->type == VR_RANGE\n+      && wi::sub (vr->max, vr->min) == 1)\n+    {\n+      *a = vr->min;\n+      *b = vr->max;\n+      return true;\n+    }\n+\n+  /* ~[TYPE_MIN + 1, TYPE_MAX - 1] */\n+  if (vr->type == VR_ANTI_RANGE\n+      && wi::sub (vr->min, vrp_val_min (TREE_TYPE (var))) == 1\n+      && wi::sub (vrp_val_max (TREE_TYPE (var)), vr->max) == 1)\n+    {\n+      *a = vrp_val_min (TREE_TYPE (var));\n+      *b = vrp_val_max (TREE_TYPE (var));\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Simplify STMT using ranges if possible.  */\n \n static bool\n@@ -10046,6 +10080,68 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n     {\n       enum tree_code rhs_code = gimple_assign_rhs_code (stmt);\n       tree rhs1 = gimple_assign_rhs1 (stmt);\n+      tree rhs2 = gimple_assign_rhs2 (stmt);\n+      tree lhs = gimple_assign_lhs (stmt);\n+      tree val1 = NULL_TREE, val2 = NULL_TREE;\n+      use_operand_p use_p;\n+      gimple *use_stmt;\n+\n+      /* Convert:\n+\t LHS = CST BINOP VAR\n+\t Where VAR is two-valued and LHS is used in GIMPLE_COND only\n+\t To:\n+\t LHS = VAR == VAL1 ? (CST BINOP VAL1) : (CST BINOP VAL2)\n+\n+\t Also handles:\n+\t LHS = VAR BINOP CST\n+\t Where VAR is two-valued and LHS is used in GIMPLE_COND only\n+\t To:\n+\t LHS = VAR == VAL1 ? (VAL1 BINOP CST) : (VAL2 BINOP CST) */\n+\n+      if (TREE_CODE_CLASS (rhs_code) == tcc_binary\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t  && ((TREE_CODE (rhs1) == INTEGER_CST\n+\t       && TREE_CODE (rhs2) == SSA_NAME)\n+\t      || (TREE_CODE (rhs2) == INTEGER_CST\n+\t\t  && TREE_CODE (rhs1) == SSA_NAME))\n+\t  && single_imm_use (lhs, &use_p, &use_stmt)\n+\t  && gimple_code (use_stmt) == GIMPLE_COND)\n+\n+\t{\n+\t  tree new_rhs1 = NULL_TREE;\n+\t  tree new_rhs2 = NULL_TREE;\n+\t  tree cmp_var = NULL_TREE;\n+\n+\t  if (TREE_CODE (rhs2) == SSA_NAME\n+\t      && two_valued_val_range_p (rhs2, &val1, &val2))\n+\t    {\n+\t      /* Optimize RHS1 OP [VAL1, VAL2].  */\n+\t      new_rhs1 = int_const_binop (rhs_code, rhs1, val1);\n+\t      new_rhs2 = int_const_binop (rhs_code, rhs1, val2);\n+\t      cmp_var = rhs2;\n+\t    }\n+\t  else if (TREE_CODE (rhs1) == SSA_NAME\n+\t\t   && two_valued_val_range_p (rhs1, &val1, &val2))\n+\t    {\n+\t      /* Optimize [VAL1, VAL2] OP RHS2.  */\n+\t      new_rhs1 = int_const_binop (rhs_code, val1, rhs2);\n+\t      new_rhs2 = int_const_binop (rhs_code, val2, rhs2);\n+\t      cmp_var = rhs1;\n+\t    }\n+\n+\t  /* If we could not find two-vals or the optimzation is invalid as\n+\t     in divide by zero, new_rhs1 / new_rhs will be NULL_TREE.  */\n+\t  if (new_rhs1 && new_rhs2)\n+\t    {\n+\t      tree cond = build2 (EQ_EXPR, TREE_TYPE (cmp_var), cmp_var, val1);\n+\t      gimple_assign_set_rhs_with_ops (gsi,\n+\t\t\t\t\t      COND_EXPR, cond,\n+\t\t\t\t\t      new_rhs1,\n+\t\t\t\t\t      new_rhs2);\n+\t      update_stmt (gsi_stmt (*gsi));\n+\t      return true;\n+\t    }\n+\t}\n \n       switch (rhs_code)\n \t{"}]}