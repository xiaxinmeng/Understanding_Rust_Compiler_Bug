{"sha": "d0123c54ca7a18cb075064502bdec4961e7eeb79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAxMjNjNTRjYTdhMThjYjA3NTA2NDUwMmJkZWM0OTYxZTdlZWI3OQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-04-11T09:21:53Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-04-11T09:21:53Z"}, "message": "ObjectStreamException.java: New file.\n\n\t* java/io/ObjectStreamException.java: New file.\n\t* java/io/OptionalDataException.java: New file.\n\t* java/io/StreamCorruptedException.java: New file.\n\t* java/math/BigDecimal.java: New file.\n\t* java/sql/CallableStatement.java: New file.\n\t* java/sql/Connection.java: New file.\n\t* java/sql/DataTruncation.java: New file.\n\t* java/sql/DatabaseMetaData.java: New file.\n\t* java/sql/Date.java: New file.\n\t* java/sql/Driver.java: New file.\n\t* java/sql/DriverManager.java: New file.\n\t* java/sql/DriverPropertyInfo.java: New file.\n\t* java/sql/PreparedStatement.java: New file.\n\t* java/sql/ResultSet.java: New file.\n\t* java/sql/ResultSetMetaData.java: New file.\n\t* java/sql/SQLException.java: New file.\n\t* java/sql/SQLWarning.java: New file.\n\t* java/sql/Statement.java: New file.\n\t* java/sql/Time.java: New file.\n\t* java/sql/Timestamp.java: New file.\n\t* java/sql/Types.java: New file.\n\t* Makefile.am: Added above new files.\n\t* Makefile.in: Rebuilt.\n\n\t* mauve-libgcj: Turned on java.math, java.sql and java.security tests.\n\t* java/net/MulticastSocket.java (MulticastSocket): Pass values a la\n\tDatagramSocket constructor instead of null.\n\njava.sql is JDK 1.1 Compliant\n\nFrom-SVN: r33077", "tree": {"sha": "4de12baf9d56287237bde8a1b1c9cf68bccf813b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4de12baf9d56287237bde8a1b1c9cf68bccf813b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0123c54ca7a18cb075064502bdec4961e7eeb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0123c54ca7a18cb075064502bdec4961e7eeb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0123c54ca7a18cb075064502bdec4961e7eeb79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0123c54ca7a18cb075064502bdec4961e7eeb79/comments", "author": null, "committer": null, "parents": [{"sha": "3a2b2c7a2062986f770f9860da7499850a5539cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2b2c7a2062986f770f9860da7499850a5539cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2b2c7a2062986f770f9860da7499850a5539cf"}], "stats": {"total": 7085, "additions": 7065, "deletions": 20}, "files": [{"sha": "d4bd1d857c04e35ea6c2e6500f3203e5fae45789", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -1,3 +1,33 @@\n+2000-04-10  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/io/ObjectStreamException.java: New file.\n+\t* java/io/OptionalDataException.java: New file.\n+\t* java/io/StreamCorruptedException.java: New file.\n+\t* java/math/BigDecimal.java: New file.\n+\t* java/sql/CallableStatement.java: New file.\n+\t* java/sql/Connection.java: New file.\n+\t* java/sql/DataTruncation.java: New file.\n+\t* java/sql/DatabaseMetaData.java: New file.\n+\t* java/sql/Date.java: New file.\n+\t* java/sql/Driver.java: New file.\n+\t* java/sql/DriverManager.java: New file.\n+\t* java/sql/DriverPropertyInfo.java: New file.\n+\t* java/sql/PreparedStatement.java: New file.\n+\t* java/sql/ResultSet.java: New file.\n+\t* java/sql/ResultSetMetaData.java: New file.\n+\t* java/sql/SQLException.java: New file.\n+\t* java/sql/SQLWarning.java: New file.\n+\t* java/sql/Statement.java: New file.\n+\t* java/sql/Time.java: New file.\n+\t* java/sql/Timestamp.java: New file.\n+\t* java/sql/Types.java: New file.\n+\t* Makefile.am: Added above new files.\n+\t* Makefile.in: Rebuilt.\n+\n+\t* mauve-libgcj: Turned on java.math, java.sql and java.security tests.\n+\t* java/net/MulticastSocket.java (MulticastSocket): Pass values a la\n+\tDatagramSocket constructor instead of null.\n+\n 2000-04-08  Anthony Green  <green@cygnus.com>\n \n \t* include/posix-threads.h (_Jv_MutexUnlock): Replace"}, {"sha": "0b8783c64a271e39d9ae5912f84254d5f8bd26eb", "filename": "libjava/Makefile.am", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -632,6 +632,8 @@ java/io/InputStreamReader.java \\\n java/io/InterruptedIOException.java \\\n java/io/LineNumberInputStream.java \\\n java/io/LineNumberReader.java \\\n+java/io/ObjectStreamException.java \\\n+java/io/OptionalDataException.java \\\n java/io/OutputStream.java \\\n java/io/OutputStreamWriter.java\t\\\n java/io/PipedInputStream.java \\\n@@ -646,6 +648,7 @@ java/io/RandomAccessFile.java \\\n java/io/Reader.java \\\n java/io/SequenceInputStream.java \\\n java/io/Serializable.java \\\n+java/io/StreamCorruptedException.java \\\n java/io/StreamTokenizer.java \\\n java/io/StringBufferInputStream.java \\\n java/io/StringReader.java \\\n@@ -731,6 +734,7 @@ java/lang/reflect/InvocationTargetException.java \\\n java/lang/reflect/Member.java \\\n java/lang/reflect/Method.java \\\n java/lang/reflect/Modifier.java\t\\\n+java/math/BigDecimal.java \\\n java/math/BigInteger.java \\\n java/net/BindException.java \\\n java/net/ConnectException.java \\\n@@ -800,6 +804,23 @@ java/security/spec/KeySpec.java \\\n java/security/spec/RSAPrivateCrtKeySpec.java \\\n java/security/spec/RSAPrivateKeySpec.java \\\n java/security/spec/RSAPublicKeySpec.java \\\n+java/sql/CallableStatement.java \\\n+java/sql/Connection.java \\\n+java/sql/DataTruncation.java \\\n+java/sql/DatabaseMetaData.java \\\n+java/sql/Date.java \\\n+java/sql/Driver.java \\\n+java/sql/DriverManager.java \\\n+java/sql/DriverPropertyInfo.java \\\n+java/sql/PreparedStatement.java \\\n+java/sql/ResultSet.java \\\n+java/sql/ResultSetMetaData.java \\\n+java/sql/SQLException.java \\\n+java/sql/SQLWarning.java \\\n+java/sql/Statement.java \\\n+java/sql/Time.java \\\n+java/sql/Timestamp.java \\\n+java/sql/Types.java \\\n java/text/BreakIterator.java \\\n java/text/CharacterIterator.java \\\n java/text/ChoiceFormat.java \\"}, {"sha": "cee37eafd13ac579835a84da863293d5aa80dcc6", "filename": "libjava/Makefile.in", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -84,6 +84,7 @@ GCOBJS = @GCOBJS@\n GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n INCLTDL = @INCLTDL@\n+LD = @LD@\n LIBDATASTARTSPEC = @LIBDATASTARTSPEC@\n LIBGCJTESTSPEC = @LIBGCJTESTSPEC@\n LIBGCJ_CFLAGS = @LIBGCJ_CFLAGS@\n@@ -94,7 +95,6 @@ LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n-OBJDUMP = @OBJDUMP@\n PACKAGE = @PACKAGE@\n PERL = @PERL@\n RANLIB = @RANLIB@\n@@ -104,6 +104,7 @@ THREADINCS = @THREADINCS@\n THREADLIBS = @THREADLIBS@\n THREADOBJS = @THREADOBJS@\n THREADSPEC = @THREADSPEC@\n+USE_SYMBOL_UNDERSCORE = @USE_SYMBOL_UNDERSCORE@\n VERSION = @VERSION@\n ZDEPS = @ZDEPS@\n ZINCS = @ZINCS@\n@@ -433,6 +434,8 @@ java/io/InputStreamReader.java \\\n java/io/InterruptedIOException.java \\\n java/io/LineNumberInputStream.java \\\n java/io/LineNumberReader.java \\\n+java/io/ObjectStreamException.java \\\n+java/io/OptionalDataException.java \\\n java/io/OutputStream.java \\\n java/io/OutputStreamWriter.java\t\\\n java/io/PipedInputStream.java \\\n@@ -447,6 +450,7 @@ java/io/RandomAccessFile.java \\\n java/io/Reader.java \\\n java/io/SequenceInputStream.java \\\n java/io/Serializable.java \\\n+java/io/StreamCorruptedException.java \\\n java/io/StreamTokenizer.java \\\n java/io/StringBufferInputStream.java \\\n java/io/StringReader.java \\\n@@ -532,6 +536,7 @@ java/lang/reflect/InvocationTargetException.java \\\n java/lang/reflect/Member.java \\\n java/lang/reflect/Method.java \\\n java/lang/reflect/Modifier.java\t\\\n+java/math/BigDecimal.java \\\n java/math/BigInteger.java \\\n java/net/BindException.java \\\n java/net/ConnectException.java \\\n@@ -601,6 +606,23 @@ java/security/spec/KeySpec.java \\\n java/security/spec/RSAPrivateCrtKeySpec.java \\\n java/security/spec/RSAPrivateKeySpec.java \\\n java/security/spec/RSAPublicKeySpec.java \\\n+java/sql/CallableStatement.java \\\n+java/sql/Connection.java \\\n+java/sql/DataTruncation.java \\\n+java/sql/DatabaseMetaData.java \\\n+java/sql/Date.java \\\n+java/sql/Driver.java \\\n+java/sql/DriverManager.java \\\n+java/sql/DriverPropertyInfo.java \\\n+java/sql/PreparedStatement.java \\\n+java/sql/ResultSet.java \\\n+java/sql/ResultSetMetaData.java \\\n+java/sql/SQLException.java \\\n+java/sql/SQLWarning.java \\\n+java/sql/Statement.java \\\n+java/sql/Time.java \\\n+java/sql/Timestamp.java \\\n+java/sql/Types.java \\\n java/text/BreakIterator.java \\\n java/text/CharacterIterator.java \\\n java/text/ChoiceFormat.java \\\n@@ -833,7 +855,7 @@ libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -931,13 +953,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/io/InputStream.P .deps/java/io/InputStreamReader.P \\\n .deps/java/io/InterruptedIOException.P \\\n .deps/java/io/LineNumberInputStream.P .deps/java/io/LineNumberReader.P \\\n-.deps/java/io/OutputStream.P .deps/java/io/OutputStreamWriter.P \\\n-.deps/java/io/PipedInputStream.P .deps/java/io/PipedOutputStream.P \\\n-.deps/java/io/PipedReader.P .deps/java/io/PipedWriter.P \\\n-.deps/java/io/PrintStream.P .deps/java/io/PrintWriter.P \\\n-.deps/java/io/PushbackInputStream.P .deps/java/io/PushbackReader.P \\\n-.deps/java/io/RandomAccessFile.P .deps/java/io/Reader.P \\\n-.deps/java/io/SequenceInputStream.P .deps/java/io/Serializable.P \\\n+.deps/java/io/ObjectStreamException.P \\\n+.deps/java/io/OptionalDataException.P .deps/java/io/OutputStream.P \\\n+.deps/java/io/OutputStreamWriter.P .deps/java/io/PipedInputStream.P \\\n+.deps/java/io/PipedOutputStream.P .deps/java/io/PipedReader.P \\\n+.deps/java/io/PipedWriter.P .deps/java/io/PrintStream.P \\\n+.deps/java/io/PrintWriter.P .deps/java/io/PushbackInputStream.P \\\n+.deps/java/io/PushbackReader.P .deps/java/io/RandomAccessFile.P \\\n+.deps/java/io/Reader.P .deps/java/io/SequenceInputStream.P \\\n+.deps/java/io/Serializable.P .deps/java/io/StreamCorruptedException.P \\\n .deps/java/io/StreamTokenizer.P .deps/java/io/StringBufferInputStream.P \\\n .deps/java/io/StringReader.P .deps/java/io/StringWriter.P \\\n .deps/java/io/SyncFailedException.P \\\n@@ -1015,12 +1039,13 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/w_exp.P .deps/java/lang/w_fmod.P \\\n .deps/java/lang/w_log.P .deps/java/lang/w_pow.P \\\n .deps/java/lang/w_remainder.P .deps/java/lang/w_sqrt.P \\\n-.deps/java/math/BigInteger.P .deps/java/net/BindException.P \\\n-.deps/java/net/ConnectException.P .deps/java/net/ContentHandler.P \\\n-.deps/java/net/ContentHandlerFactory.P .deps/java/net/DatagramPacket.P \\\n-.deps/java/net/DatagramSocket.P .deps/java/net/DatagramSocketImpl.P \\\n-.deps/java/net/FileNameMap.P .deps/java/net/HttpURLConnection.P \\\n-.deps/java/net/InetAddress.P .deps/java/net/JarURLConnection.P \\\n+.deps/java/math/BigDecimal.P .deps/java/math/BigInteger.P \\\n+.deps/java/net/BindException.P .deps/java/net/ConnectException.P \\\n+.deps/java/net/ContentHandler.P .deps/java/net/ContentHandlerFactory.P \\\n+.deps/java/net/DatagramPacket.P .deps/java/net/DatagramSocket.P \\\n+.deps/java/net/DatagramSocketImpl.P .deps/java/net/FileNameMap.P \\\n+.deps/java/net/HttpURLConnection.P .deps/java/net/InetAddress.P \\\n+.deps/java/net/JarURLConnection.P \\\n .deps/java/net/MalformedURLException.P .deps/java/net/MulticastSocket.P \\\n .deps/java/net/NoRouteToHostException.P \\\n .deps/java/net/PlainDatagramSocketImpl.P \\\n@@ -1065,6 +1090,14 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/security/spec/RSAPrivateCrtKeySpec.P \\\n .deps/java/security/spec/RSAPrivateKeySpec.P \\\n .deps/java/security/spec/RSAPublicKeySpec.P \\\n+.deps/java/sql/CallableStatement.P .deps/java/sql/Connection.P \\\n+.deps/java/sql/DataTruncation.P .deps/java/sql/DatabaseMetaData.P \\\n+.deps/java/sql/Date.P .deps/java/sql/Driver.P \\\n+.deps/java/sql/DriverManager.P .deps/java/sql/DriverPropertyInfo.P \\\n+.deps/java/sql/PreparedStatement.P .deps/java/sql/ResultSet.P \\\n+.deps/java/sql/ResultSetMetaData.P .deps/java/sql/SQLException.P \\\n+.deps/java/sql/SQLWarning.P .deps/java/sql/Statement.P \\\n+.deps/java/sql/Time.P .deps/java/sql/Timestamp.P .deps/java/sql/Types.P \\\n .deps/java/text/BreakIterator.P .deps/java/text/CharacterIterator.P \\\n .deps/java/text/ChoiceFormat.P \\\n .deps/java/text/CollationElementIterator.P \\"}, {"sha": "036cd85b8cad3ca6e1a18df2feece594926d0785", "filename": "libjava/java/io/ObjectStreamException.java", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fio%2FObjectStreamException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fio%2FObjectStreamException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamException.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.io;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public abstract class ObjectStreamException extends IOException\n+{\n+  public ObjectStreamException()\n+  {\n+    super();\n+  }\n+\n+  public ObjectStreamException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "b1e9cf4267878f6b64ea85af73de944364d21d89", "filename": "libjava/java/io/OptionalDataException.java", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fio%2FOptionalDataException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fio%2FOptionalDataException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOptionalDataException.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.io;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class OptionalDataException extends ObjectStreamException\n+{\n+  public OptionalDataException()\n+  {\n+    super();\n+  }\n+\n+  public OptionalDataException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "2741319daa416b9203b28c5699bb5a1678744ccc", "filename": "libjava/java/io/StreamCorruptedException.java", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fio%2FStreamCorruptedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fio%2FStreamCorruptedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStreamCorruptedException.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.io;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class StreamCorruptedException extends ObjectStreamException\n+{\n+  public StreamCorruptedException()\n+  {\n+    super();\n+  }\n+\n+  public StreamCorruptedException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "30384ec1719c67ba46c3ddf49d76f3cfeb8af401", "filename": "libjava/java/math/BigDecimal.java", "status": "added", "additions": 348, "deletions": 0, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fmath%2FBigDecimal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fmath%2FBigDecimal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigDecimal.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,348 @@\n+/* java.math.BigDecimal -- Arbitrary precision decimals.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.math;\n+\n+import java.math.BigInteger;\n+\n+public class BigDecimal extends Number implements Comparable {\n+  BigInteger num;\n+  int scale;\n+\n+  private final static BigDecimal ZERO = \n+    new BigDecimal (BigInteger.valueOf (0), 0);\n+\n+  private final static BigDecimal ONE = \n+    new BigDecimal (BigInteger.valueOf (1), 0);\n+\n+  public final static int ROUND_UP = 0;\n+  public final static int ROUND_DOWN = 1;\n+  public final static int ROUND_CEILING = 2;\n+  public final static int ROUND_FLOOR = 3;\n+  public final static int ROUND_HALF_UP = 4;\n+  public final static int ROUND_HALF_DOWN = 5;\n+  public final static int ROUND_HALF_EVEN = 6;\n+  public final static int ROUND_UNNECESSARY = 7;\n+\n+  public BigDecimal (BigInteger num) \n+  {\n+    this (num, 0);\n+  }\n+\n+  public BigDecimal (BigInteger num, int scale) throws NumberFormatException \n+  {\n+    if (scale < 0) \n+      throw new NumberFormatException (\"scale of \" + scale + \" is < 0\");\n+    this.num = num;\n+    this.scale = scale;\n+  }\n+\n+  public BigDecimal (double num) throws NumberFormatException \n+  {\n+    this (Double.toString (num));\n+  }\n+\n+  public BigDecimal (String num) throws NumberFormatException \n+  {\n+    int point = num.indexOf('.');\n+    this.num = new BigInteger (point == -1 ? num :\n+\t\t\t       num.substring (0, point) + \n+\t\t\t       num.substring (point + 1));\n+    scale = num.length() - (point == -1 ? num.length () : point + 1);\n+  }\n+\n+  public static BigDecimal valueOf (long val) \n+  {\n+    return valueOf (val, 0);\n+  }\n+\n+  public static BigDecimal valueOf (long val, int scale) \n+    throws NumberFormatException \n+  {\n+    if (scale == 0)\n+      switch ((int) val)\n+\t{\n+\tcase 0:\n+\t  return ZERO;\n+\tcase 1:\n+\t  return ONE;\n+\t}\n+\n+    return new BigDecimal (BigInteger.valueOf (val), scale);\n+  }\n+\n+  public BigDecimal add (BigDecimal val) \n+  {\n+    // For addition, need to line up decimals.  Note that the movePointRight\n+    // method cannot be used for this as it might return a BigDecimal with\n+    // scale == 0 instead of the scale we need.\n+    BigInteger op1 = num;\n+    BigInteger op2 = val.num;\n+    if (scale < val.scale)\n+      op1 = op1.multiply (BigInteger.valueOf (10).pow (val.scale - scale));\n+    else if (scale > val.scale)\n+      op2 = op2.multiply (BigInteger.valueOf (10).pow (scale - val.scale));\n+\n+    return new BigDecimal (op1.add (op2), Math.max (scale, val.scale));\n+  }\n+\n+  public BigDecimal subtract (BigDecimal val) \n+  {\n+    return this.add(val.negate());\n+  }\n+\n+  public BigDecimal multiply (BigDecimal val) \n+  {\n+    return new BigDecimal (num.multiply (val.num), scale + val.scale);\n+  }\n+\n+  public BigDecimal divide (BigDecimal val, int roundingMode) \n+    throws ArithmeticException, IllegalArgumentException \n+  {\n+    return divide (val, scale, roundingMode);\n+  }\n+\n+  public BigDecimal divide(BigDecimal val, int newScale, int roundingMode)\n+    throws ArithmeticException, IllegalArgumentException \n+  {\n+    if (roundingMode < 0 || roundingMode > 7)\n+      throw \n+\tnew IllegalArgumentException(\"illegal rounding mode: \" + roundingMode);\n+\n+    if (scale < 0)\n+      throw new ArithmeticException (\"scale is negative: \" + scale);\n+\n+    if (num.signum () == 0)\t// handle special case of 0.0/0.0\n+      return ZERO;\n+    \n+    BigInteger dividend = num.multiply (BigInteger.valueOf (10).pow \n+\t\t\t\t\t(newScale + 1 - (scale - val.scale)));\n+    \n+    BigInteger parts[] = dividend.divideAndRemainder (val.num);\n+//      System.out.println(\"int: \" + parts[0]);\n+//      System.out.println(\"rem: \" + parts[1]);\n+\n+    int roundDigit = parts[0].mod (BigInteger.valueOf (10)).intValue ();\n+    BigInteger unrounded = parts[0].divide (BigInteger.valueOf (10));\n+\n+    if (roundDigit == 0 && parts[1].signum () == 0) // no rounding necessary\n+      return new BigDecimal (unrounded, newScale);\n+\n+    int sign = unrounded.signum ();\n+\n+    switch (roundingMode)\n+      {\n+      case ROUND_UNNECESSARY:\n+\tthrow new ArithmeticException (\"newScale is not large enough\");\n+      case ROUND_CEILING:\n+\troundingMode = (sign == 1) ? ROUND_UP : ROUND_DOWN;\n+\tbreak;\n+      case ROUND_FLOOR:\n+\troundingMode = (sign == 1) ? ROUND_DOWN : ROUND_UP;\n+\tbreak;\n+      case ROUND_HALF_UP:\n+\troundingMode = (roundDigit >= 5) ? ROUND_UP : ROUND_DOWN;\n+\tbreak;\n+      case ROUND_HALF_DOWN:\n+\troundingMode = (roundDigit > 5) ? ROUND_UP : ROUND_DOWN;\n+\tbreak;\n+      case ROUND_HALF_EVEN:\n+\tif (roundDigit < 5)\n+\t  roundingMode = ROUND_DOWN;\n+\telse\n+\t  {\n+\t    int rightmost = \n+\t      unrounded.mod (BigInteger.valueOf (10)).intValue ();\n+\t    if (rightmost % 2 == 1) // odd, then ROUND_HALF_UP\n+\t      roundingMode = ROUND_UP;\n+\t    else // even, then ROUND_HALF_DOWN\n+\t      roundingMode = (roundDigit > 5) ? ROUND_UP : ROUND_DOWN;\n+\t  }\n+\tbreak;\n+      }\n+\n+    if (roundingMode == ROUND_UP)\n+      return new BigDecimal (unrounded.add (BigInteger.valueOf (1)), newScale);\n+\n+    // roundingMode == ROUND_DOWN\n+    return new BigDecimal (unrounded, newScale);\n+  }\n+    \n+  public int compareTo (BigDecimal val) \n+  {\n+    if (scale == val.scale)\n+      return num.compareTo (val.num);\n+\n+    BigInteger thisParts[] = \n+      num.divideAndRemainder (BigInteger.valueOf (10).pow (scale));\n+    BigInteger valParts[] =\n+      val.num.divideAndRemainder (BigInteger.valueOf (10).pow (val.scale));\n+    \n+    int compare;\n+    if ((compare = thisParts[0].compareTo (valParts[0])) != 0)\n+      return compare;\n+\n+    // quotients are the same, so compare remainders\n+\n+    // remove trailing zeros\n+    if (thisParts[1].equals (BigInteger.valueOf (0)) == false)\n+      while (thisParts[1].mod (BigInteger.valueOf (10)).equals\n+\t     (BigInteger.valueOf (0)))\n+      thisParts[1] = thisParts[1].divide (BigInteger.valueOf (10));\n+    // again...\n+    if (valParts[1].equals(BigInteger.valueOf (0)) == false)\n+      while (valParts[1].mod (BigInteger.valueOf (10)).equals\n+\t     (BigInteger.valueOf (0)))\n+\tvalParts[1] = valParts[1].divide (BigInteger.valueOf (10));\n+\n+    // and compare them\n+    return thisParts[1].compareTo (valParts[1]);\n+  }\n+\n+  public int compareTo (Object val) \n+  {\n+    return(compareTo((BigDecimal)val));\n+  }\n+\n+  public boolean equals (Object o) \n+  {\n+    return (o instanceof BigDecimal \n+\t    && scale == ((BigDecimal) o).scale\n+\t    && compareTo ((BigDecimal) o) == 0);\n+  }\n+\n+  public int hashCode() \n+  {\n+    return intValue() ^ scale;\n+  }\n+\n+  public BigDecimal max (BigDecimal val)\n+  {\n+    switch (compareTo (val)) \n+      {\n+      case 1:\n+\treturn this;\n+      default:\n+\treturn val;\n+      }\n+  }\n+\n+  public BigDecimal min (BigDecimal val) \n+  {\n+    switch (compareTo (val)) \n+      {\n+      case -1:\n+\treturn this;\n+      default:\n+\treturn val;\n+      }\n+  }\n+\n+  public BigDecimal movePointLeft (int n)\n+  {\n+    return (n < 0) ? movePointRight (-n) : new BigDecimal (num, scale + n);\n+  }\n+\n+  public BigDecimal movePointRight (int n)\n+  {\n+    if (n < 0)\n+      return movePointLeft (-n);\n+\n+    if (scale >= n)\n+      return new BigDecimal (num, scale - n);\n+\n+    return new BigDecimal (num.multiply \n+\t\t\t   (BigInteger.valueOf (10).pow (n - scale)), 0);\n+  }\n+\n+  public int signum () \n+  {\n+    return num.signum ();\n+  }\n+\n+  public int scale () \n+  {\n+    return scale;\n+  }\n+  \n+  public BigDecimal abs () \n+  {\n+    return new BigDecimal (num.abs (), scale);\n+  }\n+\n+  public BigDecimal negate () \n+  {\n+    return new BigDecimal (num.negate (), scale);\n+  }\n+\n+  public String toString () \n+  {\n+    String bigStr = num.toString();\n+    if (scale == 0) \n+      return bigStr;\n+\n+    int point = bigStr.length() - scale;\n+    boolean negative = (bigStr.charAt(0) == '-');\n+    StringBuffer sb = new StringBuffer(bigStr.length() + 1 + \n+\t\t\t\t       (point <= 0 ? -point+1 : 0));\n+    if (negative)\n+      sb.append('-');\n+    while (point <= 0)\n+      {\n+\tsb.append('0');\n+\tpoint++;\n+      }\n+    sb.append(bigStr.substring(negative ? 1 : 0));\n+    sb.insert(point, '.');\n+    return sb.toString();\n+  }\n+\n+  public BigInteger toBigInteger () \n+  {\n+    return scale == 0 ? num : num.divide (BigInteger.valueOf (10).pow (scale));\n+  }\n+\n+\f\n+  public int intValue () \n+  {\n+    return toBigInteger ().intValue ();\n+  }\n+\n+  public long longValue ()\n+  {\n+    return toBigInteger().longValue();\n+  }\n+\n+  public float floatValue() \n+  {\n+    return Float.valueOf(toString()).floatValue();\n+  }\n+\n+  public double doubleValue() \n+  {\n+    return Double.valueOf(toString()).doubleValue();\n+  }\n+}"}, {"sha": "9da0aac1719ff5d1c27b211aafca4262fa1f3e16", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -30,12 +30,12 @@ public class MulticastSocket extends DatagramSocket\n \n   public MulticastSocket() throws IOException\n   {\n-    super(0, null);\n+    super(0, ServerSocket.ANY_IF);\n   }\n \n   public MulticastSocket(int port) throws IOException\n   {\n-    super(port, null);\n+    super(port, ServerSocket.ANY_IF);\n   }\n \n   public InetAddress getInterface() throws SocketException"}, {"sha": "75a6054ce7d8dc6b51447f98c503b38a7262a4f0", "filename": "libjava/java/sql/CallableStatement.java", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FCallableStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FCallableStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FCallableStatement.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,299 @@\n+/* CallableStatement.java -- A statement for calling stored procedures.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.util.Calendar;\n+\n+/**\n+  * This interface provides a mechanism for calling stored procedures.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface CallableStatement extends PreparedStatement\n+{\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether the value of the last parameter that was fetched\n+  * was actually a SQL NULL value.\n+  *\n+  * @return <code>true</code> if the last parameter fetched was a NULL,\n+  * <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+wasNull() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>String</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>String</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getString(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>Object</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as an <code>Object</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getObject(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>boolean</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>boolean</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+getBoolean(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>byte</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>byte</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte\n+getByte(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>short</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>short</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract short\n+getShort(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>int</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>int</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getInt(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>long</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>long</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+getLong(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>float</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>float</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract float\n+getFloat(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>double</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>double</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract double\n+getDouble(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>BigDecimal</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  * @param scale The number of digits to the right of the decimal to return.\n+  *\n+  * @return The parameter value as a <code>BigDecimal</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract BigDecimal\n+getBigDecimal(int index, int scale) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * byte array.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a byte array\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte[]\n+getBytes(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>java.sql.Date</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>java.sql.Date</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Date\n+getDate(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>java.sql.Time</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>java.sql.Time</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Time\n+getTime(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>java.sql.Timestamp</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>java.sql.Timestamp</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Timestamp\n+getTimestamp(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method registers the specified parameter as an output parameter\n+  * of the specified SQL type.\n+  *\n+  * @param index The index of the parameter to register as output.\n+  * @param type The SQL type value from <code>Types</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+registerOutParameter(int index, int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method registers the specified parameter as an output parameter\n+  * of the specified SQL type and scale.\n+  *\n+  * @param index The index of the parameter to register as output.\n+  * @param type The SQL type value from <code>Types</code>.\n+  * @param scale The scale of the value that will be returned.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+registerOutParameter(int index, int type, int scale) throws SQLException;\n+\n+} // interface CallableStatement\n+\n+"}, {"sha": "bb826a67e661b92b2623abcf4d1430f3babe5308", "filename": "libjava/java/sql/Connection.java", "status": "added", "additions": 350, "deletions": 0, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FConnection.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,350 @@\n+/* Connection.java -- Manage a database connection.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This interface provides methods for managing a connection to a database.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Connection\n+{\n+\n+/**\n+  * This transaction isolation level indicates that transactions are not\n+  * supported.\n+  */\n+public static final int TRANSACTION_NONE = 0;\n+\n+/**\n+  * This transaction isolation level indicates that one transaction can\n+  * read modifications by other transactions before the other transactions\n+  * have committed their changes.  This could result in invalid reads.\n+  */\n+public static final int TRANSACTION_READ_UNCOMMITTED = 1;\n+\n+/**\n+  * This transaction isolation leve indicates that only committed data from\n+  * other transactions will be read.  If a transaction reads a row, then\n+  * another transaction commits a change to that row, the first transaction\n+  * would retrieve the changed row on subsequent reads of the same row.\n+  */\n+public static final int TRANSACTION_READ_COMMITTED = 2;\n+\n+/**\n+  * This transaction isolation level indicates that only committed data from\n+  * other transactions will be read.  It also ensures that data read from\n+  * a row will not be different on a subsequent read even if another\n+  * transaction commits a change.\n+  */\n+public static final int TRANSACTION_REPEATABLE_READ = 4;\n+\n+/**\n+  * This transaction isolation level indicates that only committed data from\n+  * other transactions will be read.  It also ensures that data read from\n+  * a row will not be different on a subsequent read even if another\n+  * transaction commits a change.  Additionally, rows modified by other\n+  * transactions will not affect the result set returned during subsequent\n+  * executions of the same WHERE clause in this transaction.\n+  */\n+public static final int TRANSACTION_SERIALIZABLE = 8;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method creates a new SQL statement.  The default result set type\n+  * and concurrency will be used.\n+  *\n+  * @return A new <code>Statement</code> object. \n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see Statement\n+  */\n+public abstract Statement\n+createStatement() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method creates a new <code>PreparedStatement</code> for the specified\n+  * SQL string.  This method is designed for use with parameterized\n+  * statements.  The default result set type and concurrency will be used.\n+  *\n+  * @param The SQL statement to use in creating this \n+  * <code>PreparedStatement</code>.\n+  *\n+  * @return A new <code>PreparedStatement</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see PreparedStatement\n+  */\n+public abstract PreparedStatement\n+prepareStatement(String sql) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method creates a new <code>CallableStatement</code> for the \n+  * specified SQL string.  Thie method is designed to be used with\n+  * stored procedures.  The default result set type and concurrency\n+  * will be used.\n+  *\n+  * @param The SQL statement to use in creating this \n+  * <code>CallableStatement</code>.\n+  *\n+  * @return A new <code>CallableStatement</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see CallableStatement\n+  */\n+public abstract CallableStatement\n+prepareCall(String sql) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method converts the specified generic SQL statement into the\n+  * native grammer of the database this object is connected to.\n+  *\n+  * @param The JDBC generic SQL statement.\n+  *\n+  * @return The native SQL statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+nativeSQL(String sql) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not auto commit mode is currently enabled.\n+  * In auto commit mode,  every SQL statement is committed its own transaction.\n+  * Otherwise a transaction must be explicitly committed or rolled back.\n+  *\n+  * @return <code>true</code> if auto commit mode is enabled, \n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see commit\n+  * @see rollback\n+  */\n+public abstract boolean\n+getAutoCommit() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method turns auto commit mode on or off.  In auto commit mode,\n+  * every SQL statement is committed its own transaction.  Otherwise a\n+  * transaction must be explicitly committed or rolled back.\n+  *\n+  * @param autoCommit <code>true</code> to enable auto commit mode,\n+  * <code>false</code> to disable it.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see commit\n+  * @see rollback\n+  */\n+public abstract void\n+setAutoCommit(boolean autoCommit) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method commits any SQL statements executed on this connection since \n+  * the last commit or rollback.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+commit() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method rolls back any SQL statements executed on this connection\n+  * since the last commit or rollback.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+rollback() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method immediately closes this database connection.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+close() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not this connection has been closed. \n+  *\n+  * @return <code>true</code> if the connection is closed, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isClosed() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the meta data for this database connection.\n+  *\n+  * @return The meta data for this database.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see DatabaseMetaData\n+  */\n+public abstract DatabaseMetaData\n+getMetaData() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not this connection is in read only mode.\n+  *\n+  * @return <code>true</code> if the connection is read only <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isReadOnly() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method turns read only mode on or off.  It may not be called while\n+  * a transaction is in progress.\n+  *\n+  * @param readOnly <code>true</code> if this connection is read only,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setReadOnly(boolean readOnly) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the catalog in use by this connection,\n+  * if any.\n+  *\n+  * @return The name of the catalog, or <code>null</code> if one does not\n+  * exist or catalogs are not supported by this database.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getCatalog() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the name of the catalog in use by this connection.\n+  * Note that this method does nothing if catalogs are not supported by\n+  * this database.\n+  *\n+  * @param catalog The name of the catalog to use for this connection.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setCatalog(String catalog) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the current transaction isolation mode.  This will\n+  * be one of the constants defined in this interface.\n+  *\n+  * @return The transaction isolation level.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getTransactionIsolation() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the transaction isolation level using one of the\n+  * constants defined in this interface.\n+  *\n+  * @param level The transaction isolation level to change to; must be\n+  * one of the TRANSACTION_* isolation values with the exception of\n+  * TRANSACTION_NONE; some databases may not support other values.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setTransactionIsolation(int level) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the first warning that occurred on this connection,\n+  * if any.  If there were any subsequence warnings, they will be chained\n+  * to the first one.\n+  *\n+  * @return The first <code>SQLWarning</code> that occurred, or \n+  * <code>null</code> if there have been no warnings.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract SQLWarning\n+getWarnings() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method clears all warnings that have occurred on this connection.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+clearWarnings() throws SQLException;\n+\n+} // interface Connection\n+"}, {"sha": "bb9ada602a4e038f2adaa587dd16563846c835b6", "filename": "libjava/java/sql/DataTruncation.java", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDataTruncation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDataTruncation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDataTruncation.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,185 @@\n+/* DataTruncation.java -- Warning when data has been truncated.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This exception is thrown when a piece of data is unexpectedly \n+  * truncated in JDBC.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class DataTruncation extends SQLWarning implements java.io.Serializable\n+{\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * The original size of the data.\n+  * @serialized\n+  */\n+private int dataSize;\n+\n+/**\n+  * The index of the parameter or column whose value was truncated.\n+  * @serialized\n+  */\n+private int index;\n+\n+/**\n+  * Indicates whether or not a parameter value was truncated.\n+  * @serialized\n+  */\n+private boolean parameter;\n+\n+/**\n+  * Indicates whether or not a data column value was truncated.\n+  * @serialized\n+  */\n+private boolean read;\n+\n+/**\n+  * This is the size of the data after truncation.\n+  * @serialized\n+  */\n+private int transferSize;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of <code>DataTruncation</code>\n+  * with the specified values.  The descriptive error message for this \n+  * exception will be \"Data truncation\", the SQL state will be \"01004\"\n+  * and the vendor specific error code will be set to 0.\n+  *\n+  * @param index The index of the parameter or column that was truncated.\n+  * @param parameter <code>true</code> if a parameter was truncated,\n+  * <code>false</code> otherwise.\n+  * @param read <code>true</code> if a data column was truncated,\n+  * <code>false</code> otherwise.\n+  * @param dataSize The original size of the data.\n+  * @param transferSize The size of the data after truncation.\n+  */\n+public\n+DataTruncation(int index, boolean parameter, boolean read, int dataSize,\n+               int transferSize)\n+{\n+  super(\"Data truncation\", \"01004\");\n+\n+  this.index = index;\n+  this.parameter = parameter;\n+  this.read = read;\n+  this.dataSize = dataSize;\n+  this.transferSize = transferSize;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns the index of the column or parameter that was\n+  * truncated.\n+  *\n+  * @return The index of the column or parameter that was truncated.\n+  */\n+public int\n+getIndex()\n+{\n+  return(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method determines whether or not it was a parameter that was\n+  * truncated.\n+  *\n+  * @return <code>true</code> if a parameter was truncated, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+getParameter()\n+{\n+  return(parameter);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method determines whether or not it was a column that was\n+  * truncated.\n+  *\n+  * @return <code>true</code> if a column was truncated, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+getRead()\n+{\n+  return(read);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the original size of the parameter or column that\n+  * was truncated.\n+  *\n+  * @return The original size of the parameter or column that was truncated.\n+  */\n+public int\n+getDataSize()\n+{\n+  return(dataSize);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the size of the parameter or column after it was\n+  * truncated.\n+  *\n+  * @return The size of the parameter or column after it was truncated.\n+  */\n+public int\n+getTransferSize()\n+{\n+  return(transferSize);\n+}\n+\n+} // class DataTruncation\n+"}, {"sha": "d0f4e1a60c3cf790fcbc6c72ff81948c48130386", "filename": "libjava/java/sql/DatabaseMetaData.java", "status": "added", "additions": 2460, "deletions": 0, "changes": 2460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,2460 @@\n+/* DatabaseMetaData.java -- Information about the database itself.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This interface provides a mechanism for obtaining information about\n+  * the database itself, as opposed to data in it.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface DatabaseMetaData\n+{\n+\n+/**\n+  * The best row may or may not be a pseudo-column.\n+  */\n+public static final int bestRowUnknown = 0;\n+\n+/**\n+  * The best row identifier is not a pseudo-column.\n+  */\n+public static final int bestRowNotPseudo = 1;\n+\n+/**\n+  * The best row identifer is a pseudo-column.\n+  */\n+public static final int bestRowPseudo = 2;\n+\n+/**\n+  * The best row's scope is only guaranteed to be valid so long as the\n+  * row is actually being used.\n+  */\n+public static final int bestRowTemporary = 0;\n+\n+/**\n+  * The best row identifer is valid to the end of the transaction.\n+  */\n+public static final int bestRowTransaction = 1;\n+\n+/**\n+  * The best row identifer is valid to the end of the session.\n+  */\n+public static final int bestRowSession = 2;\n+\n+/**\n+  * It is unknown whether or not the procedure returns a result.\n+  */\n+public static final int procedureResultUnknown = 0;\n+\n+/**\n+  * The procedure does not return a result.\n+  */\n+public static final int procedureNoResult = 1;\n+\n+/**\n+  * The procedure returns a result.\n+  */\n+public static final int procedureReturnsResult = 2;\n+\n+/**\n+  * The column type is unknown.\n+  */\n+public static final int procedureColumnUnknown = 0;\n+\n+/**\n+  * The column type is input.\n+  */\n+public static final int procedureColumnIn = 1;\n+\n+/**\n+  * The column type is input/output.\n+  */\n+public static final int procedureColumnInOut = 2;\n+\n+/**\n+  * The column type is output\n+  */\n+public static final int procedureColumnOut = 4;\n+\n+/**\n+  * The column is used for return values.\n+  */\n+public static final int procedureColumnReturn = 5;\n+\n+/**\n+  * The column is used for storing results\n+  */\n+public static final int procedureColumnResult = 3;\n+\n+/**\n+  * NULL values are not allowed.\n+  */\n+public static final int procedureNoNulls = 0;\n+\n+/**\n+  * NULL values are allowed.\n+  */\n+public static final int procedureNullable = 1;\n+\n+/**\n+  * It is unknown whether or not NULL values are allowed.\n+  */\n+public static final int procedureNullableUnknown = 2;\n+\n+/**\n+  * The column does not allow NULL\n+  */\n+public static final int columnNoNulls = 0;\n+\n+/**\n+  * The column does allow NULL\n+  */\n+public static final int columnNullable = 1;\n+\n+/**\n+  * It is unknown whether or not the column allows NULL\n+  */\n+public static final int columnNullableUnknown = 2;\n+\n+/**\n+  * It is unknown whether or not the version column is a pseudo-column.\n+  */\n+public static final int versionColumnUnknown = 0;\n+\n+/**\n+  * The version column is not a pseudo-column\n+  */\n+public static final int versionColumnNotPseudo = 1;\n+\n+/**\n+  * The version column is a pseudo-column\n+  */\n+public static final int versionColumnPseudo = 2;\n+\n+/**\n+  * Foreign key changes are cascaded in updates or deletes.\n+  */\n+public static final int importedKeyCascade = 0;\n+\n+/**\n+  * Column may not be updated or deleted in use as a foreign key.\n+  */\n+public static final int importedKeyRestrict = 1;\n+\n+/**\n+  * When primary key is updated or deleted, the foreign key is set to NULL.\n+  */\n+public static final int importedKeySetNull = 2;\n+\n+/**\n+  * If the primary key is a foreign key, it cannot be udpated or deleted.\n+  */\n+public static final int importedKeyNoAction = 3;\n+\n+/**\n+  * If the primary key is updated or deleted, the foreign key is set to\n+  * a default value.\n+  */\n+public static final int importedKeySetDefault = 4;\n+\n+/**\n+  * Wish I knew what this meant.\n+  */\n+public static final int importedKeyInitiallyDeferred = 5;\n+\n+/**\n+  * Wish I knew what this meant.\n+  */\n+public static final int importedKeyInitiallyImmediate = 6;\n+\n+/**\n+  * Wish I knew what this meant.\n+  */\n+public static final int importedKeyNotDeferrable = 7;\n+\n+/**\n+  * A NULL value is not allowed for this data type.\n+  */\n+public static final int typeNoNulls = 0;\n+\n+/**\n+  * A NULL value is allowed for this data type.\n+  */\n+public static final int typeNullable = 1;\n+\n+/**\n+  * It is unknown whether or not NULL values are allowed for this data type.\n+  */\n+public static final int typeNullableUnknown = 2;\n+\n+/**\n+  * Where clauses are not supported for this type.\n+  */\n+public static final int typePredNone = 0;\n+\n+/**\n+  * Only \"WHERE..LIKE\" style WHERE clauses are allowed on this data type.\n+  */\n+public static final int typePredChar = 1;\n+\n+/**\n+  * All WHERE clauses except \"WHERE..LIKE\" style are allowed on this data type.\n+  */\n+public static final int typePredBasic = 2;\n+\n+/**\n+  * Any type of WHERE clause is allowed for this data type.\n+  */\n+public static final int typeSearchable = 3;\n+\n+/**\n+  * This column contains table statistics.\n+  */\n+public static final short tableIndexStatistic = 0;\n+\n+/**\n+  * This table index is clustered.\n+  */\n+public static final short tableIndexClustered = 1;\n+\n+/**\n+  * This table index is hashed.\n+  */\n+public static final short tableIndexHashed = 2;\n+\n+/**\n+  * This table index is of another type.\n+  */\n+public static final short tableIndexOther = 3;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not all the procedures returned by\n+  * the <code>getProcedures</code> method can be called by this user.\n+  *\n+  * @return <code>true</code> if all the procedures can be called,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+allProceduresAreCallable() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not all the table returned by the\n+  * <code>getTables</code> method can be selected by this user.\n+  *\n+  * @return <code>true</code> if all the procedures can be called,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+allTablesAreSelectable() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the URL for this database.\n+  *\n+  * @return The URL string for this database, or <code>null</code> if it\n+  * is not known.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getURL() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the database username for this connection.\n+  *\n+  * @return The database username.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getUserName() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database is in read only mode.\n+  *\n+  * @return <code>true</code> if the database is in read only mode,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isReadOnly() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not NULL's sort as high values.\n+  *\n+  * @return <code>true</code> if NULL's sort as high values, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+nullsAreSortedHigh() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not NULL's sort as low values.\n+  *\n+  * @return <code>true</code> if NULL's sort as low values, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+nullsAreSortedLow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method test whether or not NULL's are sorted to the beginning\n+  * of the list regardless of ascending or descending sort order.\n+  *\n+  * @return <code>true</code> if NULL's always sort to the beginning,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+nullsAreSortedAtStart() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method test whether or not NULL's are sorted to the end\n+  * of the list regardless of ascending or descending sort order.\n+  *\n+  * @return <code>true</code> if NULL's always sort to the end,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+nullsAreSortedAtEnd() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the database product.\n+  *\n+  * @return The database product.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getDatabaseProductName() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the version of the database product.\n+  *\n+  * @return The version of the database product.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getDatabaseProductVersion() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the JDBC driver.\n+  *\n+  * @return The name of the JDBC driver.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getDriverName() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the version of the JDBC driver.\n+  *\n+  * @return The version of the JDBC driver.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getDriverVersion() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the major version number of the JDBC driver.\n+  *\n+  * @return The major version number of the JDBC driver.\n+  */\n+public abstract int\n+getDriverMajorVersion();\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the minor version number of the JDBC driver.\n+  *\n+  * @return The minor version number of the JDBC driver.\n+  */\n+public abstract int\n+getDriverMinorVersion();\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database uses local files to\n+  * store tables.\n+  *\n+  * @return <code>true</code> if the database uses local files, \n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+usesLocalFiles() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database uses a separate file for\n+  * each table.\n+  *\n+  * @return <code>true</code> if the database uses a separate file for each\n+  * table </code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+usesLocalFilePerTable() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports identifiers\n+  * with mixed case.\n+  *\n+  * @return <code>true</code> if the database supports mixed case identifiers,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsMixedCaseIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database treats mixed case\n+  * identifiers as all upper case.\n+  *\n+  * @exception <code>true</code> if the database treats all identifiers as\n+  * upper case, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+storesUpperCaseIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database treats mixed case\n+  * identifiers as all lower case.\n+  *\n+  * @exception <code>true</code> if the database treats all identifiers as\n+  * lower case, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+storesLowerCaseIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database stores mixed case \n+  * identifers even if it treats them as case insensitive.\n+  *\n+  * @return <code>true</code> if the database stores mixed case identifiers,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+storesMixedCaseIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports quoted identifiers\n+  * with mixed case.\n+  *\n+  * @return <code>true</code> if the database supports mixed case quoted\n+  * identifiers, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsMixedCaseQuotedIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database treats mixed case\n+  * quoted identifiers as all upper case.\n+  *\n+  * @exception <code>true</code> if the database treats all quoted identifiers \n+  * as upper case, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+storesUpperCaseQuotedIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database treats mixed case\n+  * quoted identifiers as all lower case.\n+  *\n+  * @exception <code>true</code> if the database treats all quoted identifiers \n+  * as lower case, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+storesLowerCaseQuotedIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database stores mixed case \n+  * quoted identifers even if it treats them as case insensitive.\n+  *\n+  * @return <code>true</code> if the database stores mixed case quoted \n+  * identifiers, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+storesMixedCaseQuotedIdentifiers() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This metohd returns the quote string for SQL identifiers.\n+  *\n+  * @return The quote string for SQL identifers, or a space if quoting\n+  * is not supported.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getIdentifierQuoteString() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a comma separated list of all the SQL keywords in\n+  * the database that are not in SQL92.\n+  *\n+  * @return The list of SQL keywords not in SQL92.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getSQLKeywords() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a comma separated list of math functions.\n+  *\n+  * @return The list of math functions.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getNumericFunctions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a comma separated list of string functions.\n+  *\n+  * @return The list of string functions.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getStringFunctions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a comma separated list of of system functions.\n+  *\n+  * @return A comma separated list of system functions.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getSystemFunctions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns comma separated list of time/date functions.\n+  * \n+  * @return The list of time/date functions.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getTimeDateFunctions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the string used to escape wildcards in search strings.\n+  *\n+  * @return The string used to escape wildcards in search strings.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getSearchStringEscape() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This methods returns non-standard characters that can appear in \n+  * unquoted identifiers.\n+  *\n+  * @return Non-standard characters that can appear in unquoted identifiers.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getExtraNameCharacters() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports\n+  * \"ALTER TABLE ADD COLUMN\"\n+  *\n+  * @return <code>true</code> if column add supported, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsAlterTableWithAddColumn() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports\n+  * \"ALTER TABLE DROP COLUMN\"\n+  *\n+  * @return <code>true</code> if column drop supported, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsAlterTableWithDropColumn() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not column aliasing is supported.\n+  *\n+  * @return <code>true</code> if column aliasing is supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsColumnAliasing() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether the concatenation of a NULL and non-NULL\n+  * value results in a NULL.  This will always be true in fully JDBC compliant\n+  * drivers.\n+  *\n+  * @return <code>true</code> if concatenating NULL and a non-NULL value\n+  * returns a NULL, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+nullPlusNonNullIsNull() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not CONVERT is supported.\n+  *\n+  * @return <code>true</code> if CONVERT is supported, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsConvert() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not CONVERT can be performed between the\n+  * specified types.  The types are contants from <code>Types</code>.\n+  *\n+  * @param fromType The SQL type to convert from.\n+  * @param toType The SQL type to convert to.\n+  * \n+  * @return <code>true</code> if the conversion can be performed,\n+  * <code>false</code> otherwise.\n+  *\n+  * @see Types\n+  */\n+public abstract boolean\n+supportsConvert(int fromType, int toType) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not table correlation names are \n+  * supported.  This will be always be <code>true</code> in a fully JDBC\n+  * compliant driver.\n+  *\n+  * @return <code>true</code> if table correlation names are supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsTableCorrelationNames() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether correlation names must be different from the\n+  * name of the table.\n+  *\n+  * @return <code>true</code> if the correlation name must be different from\n+  * the table name, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsDifferentTableCorrelationNames() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not expressions are allowed in an\n+  * ORDER BY lists.\n+  *\n+  * @return <code>true</code> if expressions are allowed in ORDER BY\n+  * lists, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsExpressionsInOrderBy() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or ORDER BY on a non-selected column is\n+  * allowed.\n+  *\n+  * @return <code>true</code> if a non-selected column can be used in an\n+  * ORDER BY, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsOrderByUnrelated() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not GROUP BY is supported.\n+  *\n+  * @return <code>true</code> if GROUP BY is supported, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsGroupBy() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether GROUP BY on a non-selected column is\n+  * allowed.\n+  *\n+  * @return <code>true</code> if a non-selected column can be used in a\n+  * GROUP BY, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsGroupByUnrelated() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not a GROUP BY can add columns not in the\n+  * select if it includes all the columns in the select.\n+  *\n+  * @return <code>true</code> if GROUP BY an add columns provided it includes\n+  * all columns in the select, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsGroupByBeyondSelect() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the escape character is supported in\n+  * LIKE expressions.  A fully JDBC compliant driver will always return\n+  * <code>true</code>.\n+  *\n+  * @return <code>true</code> if escapes are supported in LIKE expressions,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean supportsLikeEscapeClause() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether multiple result sets for a single statement are\n+  * supported.\n+  *\n+  * @return <code>true</code> if multiple result sets are supported for a \n+  * single statement, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsMultipleResultSets() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method test whether or not multiple transactions may be open\n+  * at once, as long as they are on different connections.\n+  *\n+  * @return <code>true</code> if multiple transactions on different\n+  * connections are supported, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsMultipleTransactions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not columns can be defined as NOT NULL.  A\n+  * fully JDBC compliant driver always returns <code>true</code>.\n+  *\n+  * @return <code>true</code> if NOT NULL columns are supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsNonNullableColumns() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the minimum grammer for ODBC is supported.\n+  * A fully JDBC compliant driver will always return <code>true</code>.\n+  *\n+  * @return <code>true</code> if the ODBC minimum grammar is supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsMinimumSQLGrammar() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the core grammer for ODBC is supported.\n+  *\n+  * @return <code>true</code> if the ODBC core grammar is supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsCoreSQLGrammar() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the extended grammer for ODBC is supported.\n+  *\n+  * @return <code>true</code> if the ODBC extended grammar is supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsExtendedSQLGrammar() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the ANSI92 entry level SQL\n+  * grammar is supported.  A fully JDBC compliant drivers must return\n+  * <code>true</code>.\n+  *\n+  * @return <code>true</code> if the ANSI92 entry level SQL grammar is\n+  * supported, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsANSI92EntryLevelSQL() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the ANSI92 intermediate SQL\n+  * grammar is supported.  \n+  *\n+  * @return <code>true</code> if the ANSI92 intermediate SQL grammar is\n+  * supported, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsANSI92IntermediateSQL() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the ANSI92 full SQL\n+  * grammar is supported.  \n+  *\n+  * @return <code>true</code> if the ANSI92 full SQL grammar is\n+  * supported, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsANSI92FullSQL() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the SQL integrity enhancement\n+  * facility is supported.\n+  *\n+  * @return <code>true</code> if the integrity enhancement facility is\n+  * supported, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsIntegrityEnhancementFacility() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports outer joins.\n+  *\n+  * @return <code>true</code> if outer joins are supported, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsOuterJoins() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports full outer joins.\n+  *\n+  * @return <code>true</code> if full outer joins are supported, \n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsFullOuterJoins() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports limited outer joins.\n+  *\n+  * @return <code>true</code> if limited outer joins are supported, \n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsLimitedOuterJoins() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the vendor's term for \"schema\".\n+  *\n+  * @return The vendor's term for schema.\n+  *\n+  * @exception SQLException if an error occurs.\n+  */\n+public abstract String\n+getSchemaTerm() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the vendor's term for \"procedure\".\n+  *\n+  * @return The vendor's term for procedure.\n+  *\n+  * @exception SQLException if an error occurs.\n+  */\n+public abstract String\n+getProcedureTerm() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the vendor's term for \"catalog\".\n+  *\n+  * @return The vendor's term for catalog.\n+  *\n+  * @exception SQLException if an error occurs.\n+  */\n+public abstract String\n+getCatalogTerm() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name appears at the beginning of\n+  * a fully qualified table name.\n+  *\n+  * @return <code>true</code> if the catalog name appears at the beginning,\n+  * <code>false</code> if it appears at the end.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isCatalogAtStart() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the separator between the catalog name and the\n+  * table name.\n+  *\n+  * @return The separator between the catalog name and the table name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getCatalogSeparator() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in a data\n+  * manipulation statement.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in a data\n+  * manipulation statement, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSchemasInDataManipulation() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in a procedure\n+  * call\n+  *\n+  * @return <code>true</code> if a catalog name can appear in a procedure\n+  * call, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSchemasInProcedureCalls() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in a table definition.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in a table\n+  * definition, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSchemasInTableDefinitions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in an index definition.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in an index\n+  * definition, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSchemasInIndexDefinitions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in privilege definitions.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in privilege\n+  * definition, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSchemasInPrivilegeDefinitions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in a data\n+  * manipulation statement.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in a data\n+  * manipulation statement, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsCatalogsInDataManipulation() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in a procedure\n+  * call\n+  *\n+  * @return <code>true</code> if a catalog name can appear in a procedure\n+  * call, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsCatalogsInProcedureCalls() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in a table definition.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in a table\n+  * definition, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsCatalogsInTableDefinitions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in an index definition.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in an index\n+  * definition, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsCatalogsInIndexDefinitions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether a catalog name can appear in privilege definitions.\n+  *\n+  * @return <code>true</code> if a catalog name can appear in privilege\n+  * definition, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsCatalogsInPrivilegeDefinitions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not that database supports positioned\n+  * deletes.\n+  *\n+  * @return <code>true</code> if positioned deletes are supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsPositionedDelete() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not that database supports positioned\n+  * updates.\n+  *\n+  * @return <code>true</code> if positioned updates are supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsPositionedUpdate() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not SELECT FOR UPDATE is supported by the\n+  * database.\n+  *\n+  * @return <code>true</code> if SELECT FOR UPDATE is supported \n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSelectForUpdate() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not stored procedures are supported on\n+  * this database.\n+  *\n+  * @return <code>true</code> if stored procedures are supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsStoredProcedures() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not subqueries are allowed in comparisons.\n+  * A fully JDBC compliant driver will always return <code>true</code>.\n+  *\n+  * @return <code>true</code> if subqueries are allowed in comparisons,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSubqueriesInComparisons() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not subqueries are allowed in exists\n+  * expressions.  A fully JDBC compliant driver will always return\n+  * <code>true</code>.\n+  *\n+  * @return <code>true</code> if subqueries are allowed in exists \n+  * expressions, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSubqueriesInExists() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether subqueries are allowed in IN statements.\n+  * A fully JDBC compliant driver will always return <code>true</code>.\n+  *\n+  * @return <code>true</code> if the driver supports subqueries in IN\n+  * statements, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSubqueriesInIns() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not subqueries are allowed in quantified\n+  * expressions.  A fully JDBC compliant driver will always return\n+  * <code>true</code>.\n+  *\n+  * @return <code>true</code> if subqueries are allowed in quantified \n+  * expressions, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsSubqueriesInQuantifieds() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method test whether or not correlated subqueries are allowed. A\n+  * fully JDBC compliant driver will always return <code>true</code>.\n+  *\n+  * @return <code>true</code> if correlated subqueries are allowed,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsCorrelatedSubqueries() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the UNION statement is supported.\n+  *\n+  * @return <code>true</code> if UNION is supported, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsUnion() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the UNION ALL statement is supported.\n+  *\n+  * @return <code>true</code> if UNION ALL is supported, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsUnionAll() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports cursors\n+  * remaining open across commits.\n+  *\n+  * @return <code>true</code> if cursors can remain open across commits,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsOpenCursorsAcrossCommit() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports cursors\n+  * remaining open across rollbacks.\n+  *\n+  * @return <code>true</code> if cursors can remain open across rollbacks,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsOpenCursorsAcrossRollback() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports statements\n+  * remaining open across commits.\n+  *\n+  * @return <code>true</code> if statements can remain open across commits,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsOpenStatementsAcrossCommit() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports statements\n+  * remaining open across rollbacks.\n+  *\n+  * @return <code>true</code> if statements can remain open across rollbacks,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsOpenStatementsAcrossRollback() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the number of hex characters allowed in an inline\n+  * binary literal.\n+  *\n+  * @return The number of hex characters allowed in a binary literal, 0 meaning\n+  * either an unknown or unlimited number.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxBinaryLiteralLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a character literal.\n+  * \n+  * @return The maximum length of a character literal.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxCharLiteralLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a column name.\n+  *\n+  * @return The maximum length of a column name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxColumnNameLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of columns in a GROUP BY statement.\n+  *\n+  * @return The maximum number of columns in a GROUP BY statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxColumnsInGroupBy() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of columns in an index.\n+  *\n+  * @return The maximum number of columns in an index.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxColumnsInIndex() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of columns in an ORDER BY statement.\n+  *\n+  * @return The maximum number of columns in an ORDER BY statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxColumnsInOrderBy() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of columns in a SELECT statement.\n+  *\n+  * @return The maximum number of columns in a SELECT statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxColumnsInSelect() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of columns in a table.\n+  *\n+  * @return The maximum number of columns in a table.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxColumnsInTable() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of connections this client\n+  * can have to the database.\n+  *\n+  * @return The maximum number of database connections.\n+  *\n+  * @SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxConnections() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a cursor name.\n+  *\n+  * @return The maximum length of a cursor name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxCursorNameLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of an index.\n+  *\n+  * @return The maximum length of an index.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxIndexLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a schema name.\n+  *\n+  * @return The maximum length of a schema name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxSchemaNameLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a procedure name.\n+  *\n+  * @return The maximum length of a procedure name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxProcedureNameLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a catalog name.\n+  *\n+  * @return The maximum length of a catalog name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxCatalogNameLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum size of a row in bytes.\n+  *\n+  * @return The maximum size of a row.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxRowSize() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the maximum row size includes BLOB's\n+  *\n+  * @return <code>true</code> if the maximum row size includes BLOB's,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+doesMaxRowSizeIncludeBlobs() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method includes the maximum length of a SQL statement.\n+  *\n+  * @return The maximum length of a SQL statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxStatementLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of statements that can be\n+  * active at any time.\n+  *\n+  * @return The maximum number of statements that can be active at any time.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxStatements() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a table name.\n+  *\n+  * @return The maximum length of a table name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxTableNameLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of tables that may be referenced\n+  * in a SELECT statement.\n+  *\n+  * @return The maximum number of tables allowed in a SELECT statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxTablesInSelect() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of a user name.\n+  *\n+  * @return The maximum length of a user name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxUserNameLength() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the default transaction isolation level of the\n+  * database.\n+  *\n+  * @return The default transaction isolation level of the database.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see Connection\n+  */\n+public abstract int\n+getDefaultTransactionIsolation() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports transactions.\n+  *\n+  * @return <code>true</code> if the database supports transactions,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsTransactions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports the specified\n+  * transaction isolation level.\n+  *\n+  * @param level The transaction isolation level.\n+  *\n+  * @return <code>true</code> if the specified transaction isolation level\n+  * is supported, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsTransactionIsolationLevel(int level) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not DDL and DML statements allowed within \n+  * the same transaction.\n+  *\n+  * @return <code>true</code> if DDL and DML statements are allowed in the\n+  * same transaction, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsDataDefinitionAndDataManipulationTransactions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not only DML statement are allowed\n+  * inside a transaction.\n+  *\n+  * @return <code>true</code> if only DML statements are allowed in\n+  * transactions, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsDataManipulationTransactionsOnly() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not a DDL statement will cause the\n+  * current transaction to be automatically committed.\n+  *\n+  * @return <code>true</code> if DDL causes an immediate transaction commit,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+dataDefinitionCausesTransactionCommit() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not DDL statements are ignored in\n+  * transactions.\n+  *\n+  * @return <code>true</code> if DDL statements are ignored in transactions,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+dataDefinitionIgnoredInTransactions() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of all the stored procedures matching the\n+  * specified pattern in the given schema and catalog.  This is returned\n+  * a <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>PROCEDURE_CAT - The catalog the procedure is in, which may be \n+  * <code>null</code>.\n+  * <li>PROCEDURE_SCHEM - The schema the procedures is in, which may be\n+  * <code>null</code>.\n+  * <li>PROCEDURE_NAME - The name of the procedure.\n+  * <li>Unused\n+  * <li>Unused\n+  * <li>Unused\n+  * <li>REMARKS - A description of the procedure\n+  * <li>PROCEDURE_TYPE - Indicates the return type of the procedure, which \n+  * is one of the contstants defined in this class \n+  * (<code>procedureResultUnknown</code>, <code>procedureNoResult</code>, or\n+  * <code>procedureReturnsResult</code>).\n+  * </ol>\n+  *\n+  * @param catalog The name of the catalog to return stored procedured from,\n+  * or \"\" to return procedures from all catalogs.\n+  * @param schemaPattern A schema pattern for the schemas to return stored\n+  * procedures from, or \"\" to return procedures from all schemas.\n+  * @param namePattern The pattern of procedures names to return.\n+  *\n+  * @returns A <code>ResultSet</code> with all the requested procedures.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getProcedures(String catalog, String schemaPattern, String namePattern)\n+              throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of the parameter and result columns for\n+  * the requested stored procedures.  This is returned in the form of a\n+  * <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>PROCEDURE_CAT - The catalog the procedure is in, which may be \n+  * <code>null</code>.\n+  * <li>PROCEDURE_SCHEM - The schema the procedures is in, which may be\n+  * <code>null</code>.\n+  * <li>PROCEDURE_NAME - The name of the procedure.\n+  * <li>COLUMN_NAME - The name of the column\n+  * <li>COLUMN_TYPE - The type of the column, which will be one of the\n+  * contants defined in this class (<code>procedureColumnUnknown</code>,\n+  * <code>procedureColumnIn</code>, <code>procedureColumnInOut</code>,\n+  * <code>procedureColumnOut</code>, <code>procedureColumnReturn</code>,\n+  * or <code>procedureColumnResult</code>).\n+  * <li>DATA_TYPE - The SQL type of the column. This is one of the constants\n+  * defined in <code>Types</code>.\n+  * <li>TYPE_NAME - The string name of the data type for this column.\n+  * <li>PRECISION - The precision of the column.\n+  * <li>LENGTH - The length of the column in bytes\n+  * <li>SCALE - The scale of the column.\n+  * <li>RADIX - The radix of the column.\n+  * <li>NULLABLE - Whether or not the column is NULLABLE.  This is one of\n+  * the constants defined in this class (<code>procedureNoNulls</code>,\n+  * <code>procedureNullable</code>, or <code>procedureNullableUnknown</code>)\n+  * <li>REMARKS - A description of the column.\n+  * </ol>\n+  *\n+  * @param catalog The name of the catalog to return stored procedured from,\n+  * or \"\" to return procedures from all catalogs.\n+  * @param schemaPattern A schema pattern for the schemas to return stored\n+  * procedures from, or \"\" to return procedures from all schemas.\n+  * @param namePattern The pattern of procedures names to return.\n+  * @param columnPattern The pattern of column names to return.\n+  *\n+  * @returns A <code>ResultSet</code> with all the requested procedures.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getProcedureColumns(String catalog, String schemaPattern, String namePattern,\n+                    String columnPattern) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of the requested table as a   \n+  * <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>TABLE_CAT - The catalog the table is in, which may be <code>null</code>.\n+  * <li>TABLE_SCHEM - The schema the table is in, which may be <code>null</code>.\n+  * <li>TABLE_NAME - The name of the table.\n+  * <li>TABLE_TYPE - A string describing the table type.  This will be one\n+  * of the values returned by the <code>getTableTypes()</code> method.\n+  * <li>REMARKS - Comments about the table.\n+  * </ol>\n+  * \n+  * @param catalog The name of the catalog to return tables from,\n+  * or \"\" to return tables from all catalogs.\n+  * @param schemaPattern A schema pattern for the schemas to return tables\n+  * from, or \"\" to return tables from all schemas.\n+  * @param namePattern The pattern of table names to return.\n+  * @param types The list of table types to include; null returns all types.\n+  *\n+  * @returns A <code>ResultSet</code> with all the requested tables.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getTables(String catalog, String schemaPattern, String namePattern,\n+\t  String types[]) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the list of database schemas as a \n+  * <code>ResultSet</code>, with one column - TABLE_SCHEM - that is the\n+  * name of the schema.\n+  *\n+  * @return A <code>ResultSet</code> with all the requested schemas.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getSchemas() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the list of database catalogs as a\n+  * <code>ResultSet</code> with one column - TABLE_CAT - that is the\n+  * name of the catalog.\n+  *\n+  * @return A <code>ResultSet</code> with all the requested catalogs.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getCatalogs() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the list of database table types as a\n+  * <code>ResultSet</code> with one column - TABLE_TYPE - that is the\n+  * name of the table type.\n+  *\n+  * @return A <code>ResultSet</code> with all the requested table types.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getTableTypes() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of the tables columns for\n+  * the requested tables.  This is returned in the form of a\n+  * <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>TABLE_CAT - The catalog the table is in, which may be \n+  * <code>null</code>.\n+  * <li>TABLE_SCHEM - The schema the tables is in, which may be\n+  * <code>null</code>.\n+  * <li>TABLE_NAME - The name of the table.\n+  * <li>COLUMN_NAME - The name of the column\n+  * <li>DATA_TYPE - The SQL type of the column. This is one of the constants\n+  * defined in <code>Types</code>.\n+  * <li>TYPE_NAME - The string name of the data type for this column.\n+  * <li>COLUMN_SIZE - The size of the column.\n+  * <li>Unused\n+  * <li>NUM_PREC_RADIX - The radix of the column.\n+  * <li>NULLABLE - Whether or not the column is NULLABLE.  This is one of\n+  * the constants defined in this class (<code>tableNoNulls</code>,\n+  * <code>tableNullable</code>, or <code>tableNullableUnknown</code>)\n+  * <li>REMARKS - A description of the column.\n+  * <li>COLUMN_DEF - The default value for the column, may be <code>null</code>.\n+  * <li>SQL_DATA_TYPE - Unused\n+  * <li>SQL_DATETIME_SUB - Unused\n+  * <li>CHAR_OCTET_LENGTH - For character columns, the maximum number of bytes\n+  * in the column.\n+  * <li>ORDINAL_POSITION - The index of the column in the table.\n+  * <li>IS_NULLABLE - \"NO\" means no, \"YES\" means maybe, and an empty string\n+  * means unknown.\n+  * </ol>\n+  *\n+  * @param catalog The name of the catalog to return table from,\n+  * or \"\" to return tables from all catalogs.\n+  * @param schemaPattern A schema pattern for the schemas to return \n+  * tables from, or \"\" to return tables from all schemas.\n+  * @param namePattern The pattern of tables names to return.\n+  * @param columnPattern The pattern of column names to return.\n+  *\n+  * @returns A <code>ResultSet</code> with all the requested tables.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getColumns(String catalog, String schemaPattern, String namePattern,\n+           String columnPattern) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the access rights that have been granted to the\n+  * requested columns.  This information is returned as a <code>ResultSet</code>\n+  * with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>TABLE_CAT - The catalog the table is in, which may be \n+  * <code>null</code>.\n+  * <li>TABLE_SCHEM - The schema the tables is in, which may be\n+  * <code>null</code>.\n+  * <li>TABLE_NAME - The name of the table.\n+  * <li>COLUMN_NAME - The name of the column.\n+  * <li>GRANTOR - The entity that granted the access.\n+  * <li>GRANTEE - The entity granted the access.\n+  * <li>PRIVILEGE - The name of the privilege granted.\n+  * <li>IS_GRANTABLE - \"YES\" if the grantee can grant the privilege to\n+  * others, \"NO\" if not, and <code>null</code> if unknown.\n+  * </ol>\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param table The table name to return information for.\n+  * @param columnPattern A pattern of column names to return information for.\n+  * \n+  * @return A <code>ResultSet</code> with all the requested privileges.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getColumnPrivileges(String catalog, String schema, String table,\n+                    String columnPattern) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the access rights that have been granted to the\n+  * requested tables.  This information is returned as a <code>ResultSet</code>\n+  * with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>TABLE_CAT - The catalog the table is in, which may be \n+  * <code>null</code>.\n+  * <li>TABLE_SCHEM - The schema the tables is in, which may be\n+  * <code>null</code>.\n+  * <li>TABLE_NAME - The name of the table.\n+  * <li>GRANTOR - The entity that granted the access.\n+  * <li>GRANTEE - The entity granted the access.\n+  * <li>PRIVILEGE - The name of the privilege granted.\n+  * <li>IS_GRANTABLE - \"YES\" if the grantee can grant the privilege to\n+  * others, \"NO\" if not, and <code>null</code> if unknown.\n+  * </ol>\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param tablePattern The table name pattern of tables to return \n+  * information for.\n+  * \n+  * @return A <code>ResultSet</code> with all the requested privileges.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getTablePrivileges(String catalog, String schema, String table)\n+                   throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the best set of columns for uniquely identifying\n+  * a row.  It returns this information as a <code>ResultSet</code> with\n+  * the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>SCOPE - The scope of the results returned.  This is one of the \n+  * constants defined in this class (<code>bestRowTemporary</code>,\n+  * <code>bestRowTransaction</code>, or <code>bestRowSession</code).\n+  * <li>COLUMN_NAME - The name of the column.\n+  * <li>DATA_TYPE - The SQL type of the column. This is one of the constants\n+  * defined in <code>Types</code>.\n+  * <li>TYPE_NAME - The string name of the data type for this column.\n+  * <li>COLUMN_SIZE - The precision of the columns\n+  * <li>BUFFER_LENGTH - Unused\n+  * <li>DECIMAL_DIGITS - The scale of the column.\n+  * <li>PSEUDO_COLUMN - Whether or not the best row identifier is a\n+  * pseudo_column.  This is one of the constants defined in this class \n+  * (<code>bestRowUnknown</code>, <code>bestRowNotPseudo</code>, or\n+  * <code>bestRowPseudo</code>).\n+  * </ol>\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param table The table name to return information for.\n+  * @param columnPattern A pattern of column names to return information for.\n+  * @param scope One of the best row id scope constants from this class.\n+  * @param nullable <code>true</code> to include columns that are nullable,\n+  * <code>false</code> otherwise.\n+  * \n+  * @return A <code>ResultSet</code> with the best row identifier.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getBestRowIdentifier(String catalog, String schema, String table,\n+                     int scope, boolean nullable) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the set of columns that are automatically updated\n+  * when the row is update. It returns this information as a \n+  * <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>SCOPE - Unused\n+  * <li>COLUMN_NAME - The name of the column.\n+  * <li>DATA_TYPE - The SQL type of the column. This is one of the constants\n+  * defined in <code>Types</code>.\n+  * <li>TYPE_NAME - The string name of the data type for this column.\n+  * <li>COLUMN_SIZE - The precision of the columns\n+  * <li>BUFFER_LENGTH - Unused\n+  * <li>DECIMAL_DIGITS - The scale of the column.\n+  * <li>PSEUDO_COLUMN - Whether or not the best row identifier is a\n+  * pseudo_column.  This is one of the constants defined in this class \n+  * (<code>versionRowUnknown</code>, <code>versionRowNotPseudo</code>, or\n+  * <code>versionRowPseudo</code>).\n+  * </ol>\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param table The table name to return information for.\n+  * @param columnPattern A pattern of column names to return information for.\n+  *\n+  * @return A <code>ResultSet</code> with the version columns.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getVersionColumns(String catalog, String schema, String table)\n+                  throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of a table's primary key columns.  These\n+  * are returned as a <code>ResultSet</code> with the following columns.\n+  * <p>\n+  * <ol>\n+  * <li>TABLE_CAT - The catalog of the table, which may be <code>null</code>.\n+  * <li>TABLE_SCHEM - The schema of the table, which may be <code>null</code>.\n+  * <li>TABLE_NAME - The name of the table.\n+  * <li>COLUMN_NAME - The name of the column.\n+  * <li>KEY_SEQ - The sequence number of the column within the primary key.\n+  * <li>PK_NAME - The name of the primary key, which may be <code>null</code>.\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param table The table name to return information for.\n+  * @param columnPattern A pattern of column names to return information for.\n+  *\n+  * @return A <code>ResultSet</code> with the primary key columns.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getPrimaryKeys(String catalog, String schema, String table)\n+               throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of the table's foreign keys.  These are\n+  * returned as a <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>PKTABLE_CAT - The catalog of the table the key was imported from.\n+  * <li>PKTABLE_SCHEM - The schema of the table the key was imported from.\n+  * <li>PKTABLE_NAME - The name of the table the key was imported from.\n+  * <li>PKCOLUMN_NAME - The name of the column that was imported.\n+  * <li>FKTABLE_CAT - The foreign key catalog name.\n+  * <li>FKTABLE_SCHEM - The foreign key schema name.\n+  * <li>FKTABLE_NAME - The foreign key table name.\n+  * <li>FKCOLUMN_NAME - The foreign key column name.\n+  * <li>KEY_SEQ - The sequence number of the column within the foreign key.\n+  * <li>UPDATE_RULE - How the foreign key behaves when the primary key is\n+  * updated.  This is one of the constants defined in this class \n+  * (<code>importedNoAction</code>, <code>importedKeyCascade</code>,\n+  * <code>importedKeySetNull</code>, <code>importedKeySetDefault</code>, or\n+  * <code>importedKeyRestrict</code>).\n+  * <li>DELETE_RULE - How the foreign key behaves when the primary key is\n+  * deleted.  This is one of the constants defined in this class \n+  * (<code>importedNoAction</code>, <code>importedKeyCascade</code>,\n+  * <code>importedKeySetNull</code>, or <code>importedKeySetDefault</code>)\n+  * <li>FK_NAME - The name of the foreign key.\n+  * <li>PK_NAME - The name of the primary key.\n+  * <li>DEFERRABILITY - The deferrability value.  This is one of the\n+  * constants defined in this table (<code>importedKeyInitiallyDeferred</code>,\n+  * <code>importedKeyInitiallyImmediate</code>, or\n+  * <code>importedKeyNotDeferrable</code>).\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param table The table name to return information for.\n+  *\n+  * @return A <code>ResultSet</code> with the foreign key columns.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getImportedKeys(String catalog, String schema, String table)\n+                throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of the table's which use this table's\n+  * primary key as a foreign key.  The information is\n+  * returned as a <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>PKTABLE_CAT - The catalog of the table the key was imported from.\n+  * <li>PKTABLE_SCHEM - The schema of the table the key was imported from.\n+  * <li>PKTABLE_NAME - The name of the table the key was imported from.\n+  * <li>PKCOLUMN_NAME - The name of the column that was imported.\n+  * <li>FKTABLE_CAT - The foreign key catalog name.\n+  * <li>FKTABLE_SCHEM - The foreign key schema name.\n+  * <li>FKTABLE_NAME - The foreign key table name.\n+  * <li>FKCOLUMN_NAME - The foreign key column name.\n+  * <li>KEY_SEQ - The sequence number of the column within the foreign key.\n+  * <li>UPDATE_RULE - How the foreign key behaves when the primary key is\n+  * updated.  This is one of the constants defined in this class \n+  * (<code>importedNoAction</code>, <code>importedKeyCascade</code>,\n+  * <code>importedKeySetNull</code>, <code>importedKeySetDefault</code>, or\n+  * <code>importedKeyRestrict</code>).\n+  * <li>DELETE_RULE - How the foreign key behaves when the primary key is\n+  * deleted.  This is one of the constants defined in this class \n+  * (<code>importedNoAction</code>, <code>importedKeyCascade</code>,\n+  * <code>importedKeySetNull</code>, or <code>importedKeySetDefault</code>)\n+  * <li>FK_NAME - The name of the foreign key.\n+  * <li>PK_NAME - The name of the primary key.\n+  * <li>DEFERRABILITY - The deferrability value.  This is one of the\n+  * constants defined in this table (<code>importedKeyInitiallyDeferred</code>,\n+  * <code>importedKeyInitiallyImmediate</code>, or\n+  * <code>importedKeyNotDeferrable</code>).\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param table The table name to return information for.\n+  *\n+  * @return A <code>ResultSet</code> with the requested information\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getExportedKeys(String catalog, String schema, String table)\n+                throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a description of how one table imports another\n+  * table's primary key as a foreign key.  The information is\n+  * returned as a <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>PKTABLE_CAT - The catalog of the table the key was imported from.\n+  * <li>PKTABLE_SCHEM - The schema of the table the key was imported from.\n+  * <li>PKTABLE_NAME - The name of the table the key was imported from.\n+  * <li>PKCOLUMN_NAME - The name of the column that was imported.\n+  * <li>FKTABLE_CAT - The foreign key catalog name.\n+  * <li>FKTABLE_SCHEM - The foreign key schema name.\n+  * <li>FKTABLE_NAME - The foreign key table name.\n+  * <li>FKCOLUMN_NAME - The foreign key column name.\n+  * <li>KEY_SEQ - The sequence number of the column within the foreign key.\n+  * <li>UPDATE_RULE - How the foreign key behaves when the primary key is\n+  * updated.  This is one of the constants defined in this class \n+  * (<code>importedNoAction</code>, <code>importedKeyCascade</code>,\n+  * <code>importedKeySetNull</code>, <code>importedKeySetDefault</code>, or\n+  * <code>importedKeyRestrict</code>).\n+  * <li>DELETE_RULE - How the foreign key behaves when the primary key is\n+  * deleted.  This is one of the constants defined in this class \n+  * (<code>importedNoAction</code>, <code>importedKeyCascade</code>,\n+  * <code>importedKeySetNull</code>, or <code>importedKeySetDefault</code>)\n+  * <li>FK_NAME - The name of the foreign key.\n+  * <li>PK_NAME - The name of the primary key.\n+  * <li>DEFERRABILITY - The deferrability value.  This is one of the\n+  * constants defined in this table (<code>importedKeyInitiallyDeferred</code>,\n+  * <code>importedKeyInitiallyImmediate</code>, or\n+  * <code>importedKeyNotDeferrable</code>).\n+  *\n+  * @param primCatalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs, on the exporting side.\n+  * @param primSchema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema, on the exporting side.\n+  * @param primTable The table name to return information for, on the exporting\n+  * side.\n+  * @param forCatalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs, on the importing side.\n+  * @param forSchema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema on the importing side.\n+  * @param forTable The table name to return information for on the importing\n+  * side.\n+  *\n+  * @return A <code>ResultSet</code> with the requested information\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getCrossReference(String primCatalog, String primSchema, String primTable,\n+                  String forCatalog, String forSchema, String forTable)\n+                  throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of the SQL types supported by this\n+  * database.  The information is returned as a <code>ResultSet</code>\n+  * with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>TYPE_NAME - The name of the data type.\n+  * <li>DATA_TYPE - A data type constant from <code>Types</code> for this\n+  * type.\n+  * <li>PRECISION - The maximum precision of this type.\n+  * <li>LITERAL_PREFIX - Prefix value used to quote a literal, which may be\n+  * <code>null</code>.\n+  * <li>LITERAL_SUFFIX - Suffix value used to quote a literal, which may be\n+  * <code>null</code>.\n+  * <li>CREATE_PARAMS - The parameters used to create the type, which may be\n+  * <code>null</code>.\n+  * <li>NULLABLE - Whether or not this type supports NULL values.  This will\n+  * be one of the constants defined in this interface \n+  * (<code>typeNoNulls</code>, <code>typeNullable</code>, or\n+  * <code>typeNullableUnknown</code>).\n+  * <li>CASE_SENSITIVE - Whether or not the value is case sensitive.\n+  * <li>SEARCHABLE - Whether or not \"LIKE\" expressions are supported in\n+  * WHERE clauses for this type.  This will be one of the constants defined\n+  * in this interface (<code>typePredNone</code>, <code>typePredChar</code>,\n+  * <code>typePredBasic</code>, or <code>typeSearchable</code>).\n+  * <li>UNSIGNED_ATTRIBUTE - Is the value of this type unsigned.\n+  * <li>FIXED_PREC_SCALE - Whether or not this type can be used for money.\n+  * <li>AUTO_INCREMENT - Whether or not this type supports auto-incrementing.\n+  * <li>LOCAL_TYPE_NAME - A localized name for this data type.\n+  * <li>MINIMUM_SCALE - The minimum scale supported by this type.\n+  * <li>MAXIMUM_SCALE - The maximum scale supported by this type.\n+  * <li>SQL_DATA_TYPE - Unused.\n+  * <li>SQL_DATETIME_SUB - Unused.\n+  * <li>NUM_PREC_RADIX - The radix of this data type.\n+  * </ol>\n+  * \n+  * @return A <code>ResultSet</code> with the list of available data types.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getTypeInfo() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns information about a tables indices and statistics.\n+  * It is returned as a <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>TABLE_CAT - The catalog of the table, which may be <code>null</code>.\n+  * <li>TABLE_SCHEM - The schema of the table, which may be <code>null</code>.\n+  * <li>TABLE_NAME - The name of the table.\n+  * <li>NON_UNIQUE - Are index values non-unique?\n+  * <li>INDEX_QUALIFIER The index catalog, which may be <code>null</code>\n+  * <li>INDEX_NAME - The name of the index.\n+  * <li>TYPE - The type of index, which will be one of the constants defined\n+  * in this interface (<code>tableIndexStatistic</code>,\n+  * <code>tableIndexClustered</code>, <code>tableIndexHashed</code>, or\n+  * <code>tableIndexOther</code>).\n+  * <li>ORDINAL_POSITION - The sequence number of this column in the index.\n+  * This will be 0 when the index type is <code>tableIndexStatistic</code>.\n+  * <li>COLUMN_NAME - The name of this column in the index.\n+  * <li>ASC_OR_DESC - \"A\" for an ascending sort sequence, \"D\" for a\n+  * descending sort sequence or <code>null</code> if a sort sequence is not\n+  * supported.\n+  * <li>CARDINALITY - The number of unique rows in the index, or the number\n+  * of rows in the table if the index type is <code>tableIndexStatistic</code>.\n+  * <li>PAGES - The number of pages used for the index, or the number of pages\n+  * in the table if the index type is <code>tableIndexStatistic</code>.\n+  * <li>FILTER_CONDITION - The filter condition for this index, which may be\n+  * <code>null</code>.\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param table The table name to return information for.\n+  * @param unique <code>true</code> to return only unique indexes, \n+  * <code>false</code> otherwise.\n+  * @param approx <code>true</code> if data values can be approximations,\n+  * <code>false</code> otherwise.\n+  *\n+  * @return A <code>ResultSet</code> with the requested index information\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getIndexInfo(String catalog, String schema, String table, boolean unique,\n+             boolean approx) throws SQLException; \n+\n+} // interface DatabaseMetaData\n+"}, {"sha": "65472e180d17f4a3c86fcc7ca86e3ffe8aeca129", "filename": "libjava/java/sql/Date.java", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDate.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,133 @@\n+/* Date.java -- Wrapper around java.util.Date\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.text.SimpleDateFormat;\n+\n+/**\n+  * This class is a wrapper around java.util.Date to allow the JDBC\n+  * driver to identify the value as a SQL Date.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Date extends java.util.Date implements java.io.Serializable\n+{\n+\n+/*\n+ * Class Variables\n+ */\n+\n+/**\n+  * Used for parsing and formatting this date.\n+  */\n+private static SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+/*************************************************************************/\n+\n+/*\n+ * Class Methods\n+ */\n+\n+/**\n+  * This method returns a new instance of this class by parsing a\n+  * date in JDBC format into a Java date.\n+  *\n+  * @param str The string to parse.\n+  *\n+  * @return The resulting <code>java.sql.Date</code> value. \n+  */\n+public static Date\n+valueOf(String str)\n+{\n+  try\n+    {\n+      java.util.Date d = (java.util.Date)sdf.parseObject(str);\n+      return(new Date(d.getTime()));\n+    }\n+  catch(Exception e)\n+    {\n+      return(null);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of this class with the\n+  * specified year, month, and day.\n+  *\n+  * @param year The year of this date minue 1900.\n+  * @param month The month of this date (0-11).\n+  * @param day The day of this date (1-31).\n+  *\n+  * @deprecated\n+  */\n+public \n+Date(int year, int month, int day)\n+{\n+  super(year, month, day);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of this class with the\n+  * specified time value representing the number of seconds since \n+  * Jan 1, 1970 at 12:00 midnight GMT.\n+  *\n+  * @param time The time value to intialize this date to.\n+  */\n+public\n+Date(long date)\n+{\n+  super(date);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns this date in JDBC format.\n+  *\n+  * @return This date as a string.\n+  */\n+public String\n+toString()\n+{\n+  return(sdf.format(this));\n+}\n+\n+} // class Date\n+"}, {"sha": "61e03e1a1d4177c1e80244b73a828248eaf60f03", "filename": "libjava/java/sql/Driver.java", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDriver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDriver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriver.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,137 @@\n+/* Driver.java -- A JDBC driver\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.util.Properties;\n+\n+/**\n+  * This interface specifies a mechanism for accessing a JDBC database\n+  * driver.  When the class implementing this method is loaded, it should\n+  * register an instance of itself with the <code>DriverManager</code> in\n+  * a static initializer.  \n+  * <p>\n+  * Because the <code>DriverManager</code> might attempt to use several\n+  * drivers to find one that can connect to the requested database, \n+  * this driver should not cause large numbers of classes and code to\n+  * be loaded.  If another driver is the one that ends up performing the\n+  * request, any loading done by this driver would be wasted.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Driver\n+{\n+\n+/**\n+  * This method returns the major version number of the driver.\n+  *\n+  * @return The major version number of the driver.\n+  */\n+public abstract int\n+getMajorVersion();\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the minor version number of the driver.\n+  *\n+  * @return The minor version number of the driver.\n+  */\n+public abstract int\n+getMinorVersion();\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the driver is JDBC compliant.  This\n+  * method should only return <code>true</code> if the driver has been\n+  * certified as JDBC compliant.\n+  *\n+  * @return <code>true</code> if the driver has been certified JDBC compliant,\n+  * <code>false</code> otherwise.\n+  */\n+public abstract boolean\n+jdbcCompliant();\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns an array of possible properties that could be\n+  * used to connect to the specified database.\n+  *\n+  * @param url The URL string of the database to connect to.\n+  * @param properties The list of properties the caller is planning to use\n+  * to connect to the database.\n+  *\n+  * @return A list of possible additional properties for a connection to this\n+  * database.  This list may be empty.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract DriverPropertyInfo[]\n+getPropertyInfo(String url, Properties properties) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the driver believes it can connect to\n+  * the specified database.  The driver should only test whether it \n+  * understands and accepts the URL. It should not necessarily attempt to \n+  * probe the database for a connection.\n+  *\n+  * @param The database URL string.\n+  *\n+  * @return <code>true</code> if the drivers can connect to the database, \n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+acceptsURL(String url) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method connects to the specified database using the connection\n+  * properties supplied.  If the driver does not understand the database\n+  * URL, it should return <code>null</code> instead of throwing an\n+  * exception since the <code>DriverManager</code> will probe a driver\n+  * in this manner.\n+  * \n+  * @param url The URL string for this connection.\n+  * @param properties The list of database connection properties.\n+  *\n+  * @return A <code>Connection</code> object for the newly established\n+  * connection, or <code>null</code> if the URL is not understood.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Connection\n+connect(String url, Properties properties) throws SQLException;\n+\n+} // interface Driver\n+"}, {"sha": "361278391b8896b23c33455d209b98d0005a76e7", "filename": "libjava/java/sql/DriverManager.java", "status": "added", "additions": 336, "deletions": 0, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDriverManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDriverManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriverManager.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,336 @@\n+/* DriverManager.java -- Manage JDBC drivers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.Enumeration;\n+import java.util.Properties;\n+import java.util.StringTokenizer;\n+import java.util.Vector;\n+\n+/**\n+  * This class manages the JDBC drivers in the system. It maintains a\n+  * registry of drivers and locates the appropriate driver to handle a\n+  * JDBC database URL.\n+  * <p>\n+  * On startup, <code>DriverManager</code> loads all the managers specified\n+  * by the system property <code>jdbc.drivers</code>.  The value of this\n+  * property should be a colon separated list of fully qualified driver\n+  * class names.  Additional drivers can be loaded at any time by\n+  * simply loading the driver class with <code>class.forName(String)</code>.\n+  * The driver should automatically register itself in a static \n+  * initializer.\n+  * <p>\n+  * The methods in this class are all <code>static</code>. This class\n+  * cannot be instantiated.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class DriverManager \n+{\n+\n+/*\n+ * Class Variables\n+ */\n+\n+/**\n+  * This is the log stream for JDBC drivers.\n+  */\n+private static PrintStream log_stream;\n+\n+/**\n+  * This is the log writer for JDBC drivers.\n+  */\n+private static PrintWriter log_writer;\n+\n+/**\n+  * This is the login timeout used by JDBC drivers.\n+  */\n+private static int login_timeout;\n+\n+/**\n+  * This is the list of JDBC drivers that are loaded.\n+  */\n+private static Vector drivers;\n+ // Hmm, seems like we might want to do a Hashtable and lookup by something,\n+ // but what would it be?\n+\n+// Load all drivers on startup\n+static\n+{\n+  drivers = new Vector();\n+\n+  String driver_string = System.getProperty(\"jdbc.drivers\");\n+  if (driver_string != null)\n+    {\n+      StringTokenizer st = new StringTokenizer(driver_string);\n+      while (st.hasMoreTokens())\n+        {\n+          String driver_classname = st.nextToken();\n+\n+          try\n+            {\n+              Class.forName(driver_classname); // The driver registers itself\n+            }\n+          catch (Exception e) { ; } // Ignore not founds\n+        }\n+    }\n+\n+}\n+  \n+/*************************************************************************/\n+\n+/*\n+ * Class Methods\n+ */\n+\n+/**\n+  * This method returns the login timeout in use by JDBC drivers systemwide.\n+  *\n+  * @return The login timeout.\n+  */\n+public static int\n+getLoginTimeout()\n+{\n+  return(login_timeout);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method set the login timeout used by JDBC drivers.  This is a\n+  * system-wide parameter that applies to all drivers.\n+  *\n+  * @param login_timeout The new login timeout value.\n+  */\n+public static void\n+setLoginTimeout(int login_timeout)\n+{\n+  DriverManager.login_timeout = login_timeout;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the log stream in use by JDBC.\n+  *\n+  * @return The log stream in use by JDBC.\n+  *\n+  * @deprecated Use <code>getLogWriter()</code> instead.\n+  */\n+public static PrintStream\n+getLogStream()\n+{\n+  return(log_stream);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the log stream in use by JDBC.\n+  *\n+  * @param log_stream The log stream in use by JDBC.\n+  *\n+  * @deprecated Use <code>setLogWriter</code> instead.\n+  */\n+public static void\n+setLogStream(PrintStream log_stream)\n+{\n+  DriverManager.log_stream = log_stream;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method prints the specified line to the log stream.\n+  *\n+  * @param str The string to write to the log stream.\n+  */\n+public static void\n+println(String str)\n+{\n+  if (log_stream != null) // Watch for user not using logging\n+    log_stream.println(str);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method registers a new driver with the manager.  This is normally\n+  * called by the driver itself in a static initializer.\n+  *\n+  * @param driver The new <code>Driver</code> to add.\n+  */\n+public static void\n+registerDriver(Driver driver)\n+{\n+  if (!drivers.contains(driver))\n+    drivers.addElement(driver);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method de-registers a driver from the manager.\n+  *\n+  * @param driver The <code>Driver</code> to unregister.\n+  */\n+public static void\n+deregisterDriver(Driver driver)\n+{\n+  if (drivers.contains(driver))\n+    drivers.removeElement(driver);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a list of all the currently loaded JDBC drivers which\n+  * the current caller has access to.\n+  *\n+  * @return An <code>Enumeration</code> of all currently loaded JDBC drivers.\n+  */\n+public static Enumeration\n+getDrivers()\n+{\n+  return(drivers.elements());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a driver that can connect to the specified\n+  * JDBC URL string.  This will be selected from among drivers loaded\n+  * at initialization time and those drivers manually loaded by the\n+  * same class loader as the caller.\n+  *\n+  * @param url The JDBC URL string to find a driver for.\n+  *\n+  * @return A <code>Driver</code> that can connect to the specified\n+  * URL, or <code>null</code> if a suitable driver cannot be found.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public static Driver\n+getDriver(String url) throws SQLException\n+{\n+  // FIXME: Limit driver search to the appropriate subset of loaded drivers.\n+\n+  Enumeration e = drivers.elements();\n+  while(e.hasMoreElements())\n+    {\n+      Driver d = (Driver)e.nextElement();\n+      if (d.acceptsURL(url))\n+        return(d);\n+    }\n+\n+  return(null);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method attempts to return a connection to the specified\n+  * JDBC URL string.\n+  *\n+  * @param url The JDBC URL string to connect to.\n+  *\n+  * @return A <code>Connection</code> to that URL.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public static Connection\n+getConnection(String url) throws SQLException\n+{\n+  return(getConnection(url, new Properties()));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method attempts to return a connection to the specified\n+  * JDBC URL string using the specified username and password.\n+  *\n+  * @param url The JDBC URL string to connect to.\n+  * @param user The username to connect with.\n+  * @param password The password to connect with.\n+  *\n+  * @return A <code>Connection</code> to that URL.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public static Connection\n+getConnection(String url, String user, String password) throws SQLException\n+{\n+  Properties p = new Properties();\n+\n+  p.setProperty(\"user\", user);\n+  p.setProperty(\"password\", password);\n+\n+  return(getConnection(url, p));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method attempts to return a connection to the specified\n+  * JDBC URL string using the specified connection properties.\n+  *\n+  * @param url The JDBC URL string to connect to.\n+  * @param properties The connection properties.\n+  *\n+  * @return A <code>Connection</code> to that URL.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public static Connection\n+getConnection(String url, Properties properties) throws SQLException\n+{\n+  Driver d = getDriver(url);\n+  if (d == null)\n+    throw new SQLException(\"Driver not found for URL: \" + url);\n+\n+  return(d.connect(url, properties));\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+// Keep bozos from trying to instantiate us.\n+private\n+DriverManager()\n+{\n+  ;\n+}\n+\n+} // class DriverManager \n+"}, {"sha": "83e4c4b5fd28e8c341fcbcb515845225a3ee6fcf", "filename": "libjava/java/sql/DriverPropertyInfo.java", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDriverPropertyInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FDriverPropertyInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriverPropertyInfo.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,91 @@\n+/* DriverPropertyInfo.java -- Property information about drivers.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This class holds a driver property that can be used for querying or\n+  * setting driver configuration parameters.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class DriverPropertyInfo\n+{\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * The name of the property.\n+  */\n+public String name;\n+\n+/**\n+  * This is the value of the property.\n+  */\n+public String value;\n+\n+/**\n+  * A description of the property, possibly <code>null</code>.\n+  */\n+public String description;\n+\n+/**\n+  * A flag indicating whether or not a value for this property is required\n+  * in order to connect to the database.\n+  */\n+public boolean required;\n+\n+/**\n+  * If values are restricted to certain choices, this is the list of valid\n+  * ones.  Otherwise it is <code>null</code>.\n+  */\n+public String[] choices;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of <code>DriverPropertyInfo</code>\n+  * with the specified name and value.  All other fields are defaulted.\n+  *\n+  * @param name The name of the property.\n+  * @param value The value to assign to the property.\n+  */\n+public\n+DriverPropertyInfo(String name, String value)\n+{\n+  this.name = name;\n+  this.value = value;\n+}\n+\n+} // DriverPropertyInfo\n+"}, {"sha": "870f5fc46a57ebe2b238741a77df83339119e122", "filename": "libjava/java/sql/PreparedStatement.java", "status": "added", "additions": 387, "deletions": 0, "changes": 387, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FPreparedStatement.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,387 @@\n+/* PreparedStatement.java -- Interface for pre-compiled statements.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+\n+/**\n+  * This interface provides a mechanism for executing pre-compiled\n+  * statements.  This provides greater efficiency when calling the same\n+  * statement multiple times.  Parameters are allowed in a statement,\n+  * providings for maximum reusability.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface PreparedStatement extends Statement\n+{\n+\n+/**\n+  * This method populates the specified parameter with a SQL NULL value\n+  * for the specified type.\n+  *\n+  * @param index The index of the parameter to set.\n+  * @param type The SQL type identifier of the parameter from <code>Types</code>\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setNull(int index, int type) throws SQLException;\n+  \n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>boolean</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setBoolean(int index, boolean value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>byte</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setByte(int index, byte value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>short</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setShort(int index, short value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>int</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setInt(int index, int value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>long</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setLong(int index, long value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>float</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setFloat(int index, float value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>double</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setDouble(int index, double value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>String</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setString(int index, String value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>byte</code> array value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setBytes(int index, byte[] value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>java.math.BigDecimal</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setBigDecimal(int index, java.math.BigDecimal value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>java.sql.Date</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setDate(int index, java.sql.Date value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>java.sql.Time</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setTime(int index, java.sql.Time value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>java.sql.Timestamp</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setTimestamp(int index, java.sql.Timestamp value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * ASCII <code>InputStream</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param length The number of bytes in the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setAsciiStream(int index, InputStream value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * Unicode UTF-8 <code>InputStream</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param length The number of bytes in the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setUnicodeStream(int index, InputStream value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * binary <code>InputStream</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param length The number of bytes in the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setBinaryStream(int index, InputStream value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>Object</code> value.  The default object type to SQL type mapping\n+  * will be used.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setObject(int index, Object value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>Object</code> value.  The specified SQL object type will be used.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param type The SQL type to use for the parameter, from <code>Types</code>\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see Types\n+  */\n+public abstract void\n+setObject(int index, Object value, int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>Object</code> value.  The specified SQL object type will be used.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param type The SQL type to use for the parameter, from <code>Types</code>\n+  * @param scale The scale of the value, for numeric values only.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see Types\n+  */\n+public abstract void\n+setObject(int index, Object value, int type, int scale) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method clears all of the input parameter that have been\n+  * set on this statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+clearParameters() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method executes a prepared SQL query.\n+  * Some prepared statements return multiple results; the execute method\n+  * handles these complex statements as well as the simpler form of\n+  * statements handled by executeQuery and executeUpdate.\n+  *\n+  * @return The result of the SQL statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+execute() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method executes a prepared SQL query and returns its ResultSet.\n+  *\n+  * @return The ResultSet of the SQL statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+executeQuery() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method executes an SQL INSERT, UPDATE or DELETE statement.  SQL\n+  * statements that return nothing such as SQL DDL statements can be executed.\n+  *\n+  * @return The result is either the row count for INSERT, UPDATE or DELETE\n+  * statements; or 0 for SQL statements that return nothing.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+executeUpdate() throws SQLException;\n+\n+} // interface PreparedStatement\n+"}, {"sha": "d9215ad551b15d7aebb31f9a81c2f2c4d198aaa3", "filename": "libjava/java/sql/ResultSet.java", "status": "added", "additions": 682, "deletions": 0, "changes": 682, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FResultSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FResultSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSet.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,682 @@\n+/* ResultSet.java -- A SQL statement result set.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+\n+/**\n+  * This interface provides access to the data set returned by a SQL\n+  * statement.  An instance of this interface is returned by the various\n+  * execution methods in the <code>Statement</code.\n+  * <p>\n+  * This class models a cursor, which can be stepped through one row at a\n+  * time.  Methods are provided for accessing columns by column name or by\n+  * index.\n+  * <p>\n+  * Note that a result set is invalidated if the statement that returned\n+  * it is closed.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface ResultSet\n+{\n+\n+/**\n+  * This method advances to the next row in the result set.  Any streams\n+  * open on the current row are closed automatically.\n+  *\n+  * @return <code>true</code> if the next row exists, <code>false</code>\n+  * otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean \n+next() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method closes the result set and frees any associated resources.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+close() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether the value of the last column that was fetched\n+  * was actually a SQL NULL value.\n+  *\n+  * @return <code>true</code> if the last column fetched was a NULL,\n+  * <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+wasNull() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>String</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>String</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getString(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>Object</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as an <code>Object</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getObject(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>boolean</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>boolean</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+getBoolean(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>byte</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>byte</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte\n+getByte(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>short</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>short</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract short\n+getShort(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>int</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>int</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getInt(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>long</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>long</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+getLong(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>float</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>float</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract float\n+getFloat(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>double</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>double</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract double\n+getDouble(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>BigDecimal</code>.\n+  *\n+  * @param index The index of the column to return.\n+  * @param scale The number of digits to the right of the decimal to return.\n+  *\n+  * @return The column value as a <code>BigDecimal</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract BigDecimal\n+getBigDecimal(int index, int scale) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * byte array.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a byte array\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte[]\n+getBytes(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>java.sql.Date</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>java.sql.Date</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Date\n+getDate(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>java.sql.Time</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>java.sql.Time</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Time\n+getTime(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>java.sql.Timestamp</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>java.sql.Timestamp</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Timestamp\n+getTimestamp(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as an ASCII \n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as an ASCII <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getAsciiStream(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Unicode UTF-8\n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a Unicode UTF-8 <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getUnicodeStream(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a raw byte\n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a raw byte <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getBinaryStream(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>String</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>String</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getString(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>Object</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as an <code>Object</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getObject(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>boolean</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>boolean</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+getBoolean(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>byte</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>byte</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte\n+getByte(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>short</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>short</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract short\n+getShort(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>int</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>int</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getInt(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>long</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>long</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+getLong(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>float</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>float</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract float\n+getFloat(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>double</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>double</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract double\n+getDouble(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>BigDecimal</code>.\n+  *\n+  * @param column The name of the column to return.\n+  * @param scale The number of digits to the right of the decimal to return.\n+  *\n+  * @return The column value as a <code>BigDecimal</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract BigDecimal\n+getBigDecimal(String column, int scale) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * byte array.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a byte array\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte[]\n+getBytes(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>java.sql.Date</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>java.sql.Date</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Date\n+getDate(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>java.sql.Time</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>java.sql.Time</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Time\n+getTime(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>java.sql.Timestamp</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>java.sql.Timestamp</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Timestamp\n+getTimestamp(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as an ASCII \n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as an ASCII <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getAsciiStream(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Unicode UTF-8\n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a Unicode UTF-8 <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getUnicodeStream(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a raw byte\n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a raw byte <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getBinaryStream(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the first SQL warning associated with this result\n+  * set.  Any additional warnings will be chained to this one.\n+  *\n+  * @return The first SQLWarning for this result set, or <code>null</code> if\n+  * there are no warnings.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract SQLWarning \n+getWarnings() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method clears all warnings associated with this result set.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+clearWarnings() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the database cursor used by this\n+  * result set.\n+  *\n+  * @return The name of the database cursor used by this result set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getCursorName() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns data about the columns returned as part of the\n+  * result set as a <code>ResultSetMetaData</code> instance.\n+  *\n+  * @return The <code>ResultSetMetaData</code> instance for this result set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSetMetaData\n+getMetaData() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the column index of the specified named column.\n+  *\n+  * @param column The name of the column.\n+  *\n+  * @return The index of the column.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+findColumn(String column) throws SQLException;\n+\n+} // interface ResultSet\n+"}, {"sha": "ca6a69b78b4504d91ad2d14de845ebc67b4b48e8", "filename": "libjava/java/sql/ResultSetMetaData.java", "status": "added", "additions": 362, "deletions": 0, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSetMetaData.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,362 @@\n+/* ResultSetMetaData.java -- Returns information about the ResultSet\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This interface provides a mechanism for obtaining information about\n+  * the columns that are present in a <code>ResultSet</code>.\n+  * <p>\n+  * Note that in this class column indexes start at 1, not 0.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface ResultSetMetaData\n+{\n+\n+/**\n+  * The column does not allow NULL's.\n+  */\n+public static final int columnNoNulls = 0;\n+\n+/**\n+  * The column allows NULL's.\n+  */\n+public static final int columnNullable = 1;\n+\n+/**\n+  * It is unknown whether or not the column allows NULL's.\n+  */\n+public static final int columnNullableUnknown = 2;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the number of columns in the result set.\n+  *\n+  * @return The number of columns in the result set.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getColumnCount() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method test whether or not the column is an auto-increment column.\n+  * Auto-increment columns are read-only.\n+  *\n+  * @param index The index of the column to test.\n+  *\n+  * @return <code>true</code> if the column is auto-increment, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isAutoIncrement(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not a column is case sensitive in its values.\n+  *\n+  * @param index The index of the column to test.\n+  *\n+  * @return <code>true</code> if the column value is case sensitive,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isCaseSensitive(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether not the specified column can be used in \n+  * a WHERE clause.\n+  *\n+  * @param index The index of the column to test.\n+  *\n+  * @return <code>true</code> if the column may be used in a WHERE clause,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isSearchable(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the column stores a monetary value.\n+  *\n+  * @param index The index of the column to test.\n+  *\n+  * @return <code>true</code> if the column contains a monetary value,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isCurrency(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a value indicating whether or not the specified\n+  * column may contain a NULL value.\n+  *\n+  * @param index The index of the column to test.\n+  *\n+  * @return A constant indicating whether or not the column can contain NULL,\n+  * which will be one of <code>columnNoNulls</code>,\n+  * <code>columnNullable</code>, or <code>columnNullableUnknown</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+isNullable(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the value of the specified column\n+  * is signed or unsigned.\n+  *\n+  * @param index The index of the column to test.\n+  *\n+  * @return <code>true</code> if the column value is signed, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isSigned(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum number of characters that can be used\n+  * to display a value in this column.\n+  *\n+  * @param index The index of the column to check.\n+  *\n+  * @return The maximum number of characters that can be used to display a\n+  * value for this column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getColumnDisplaySize(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a string that should be used as a caption for this\n+  * column for user display purposes.\n+  *\n+  * @param index The index of the column to check.\n+  *\n+  * @return A display string for the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getColumnLabel(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the specified column.\n+  *\n+  * @param index The index of the column to return the name of.\n+  *\n+  * @return The name of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getColumnName(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the schema that contains the specified\n+  * column.\n+  *\n+  * @param index The index of the column to check the schema name for.\n+  *\n+  * @return The name of the schema that contains the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getSchemaName(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the precision of the specified column, which is the\n+  * number of decimal digits it contains.\n+  *\n+  * @param index The index of the column to check the precision on.\n+  *\n+  * @return The precision of the specified column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getPrecision(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the scale of the specified column, which is the\n+  * number of digits to the right of the decimal point.\n+  *\n+  * @param index The index column to check the scale of.\n+  *\n+  * @return The scale of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getScale(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the table containing the specified\n+  * column.\n+  *\n+  * @param index The index of the column to check the table name for.\n+  *\n+  * @return The name of the table containing the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getTableName(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the catalog containing the specified\n+  * column.\n+  *\n+  * @param index The index of the column to check the catalog name for.\n+  *\n+  * @return The name of the catalog containing the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getCatalogName(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the SQL type of the specified column.  This will\n+  * be one of the constants from <code>Types</code>.\n+  *\n+  * @param index The index of the column to check the SQL type of.\n+  *\n+  * @return The SQL type for this column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see Types\n+  */\n+public abstract int\n+getColumnType(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the SQL type for this column.\n+  *\n+  * @param index The index of the column to check the SQL type name for.\n+  *\n+  * @return The name of the SQL type for this column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getColumnTypeName(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified column is read only.\n+  *\n+  * @param index The index of the column to check.\n+  *\n+  * @return <code>true</code> if the column is read only, <code>false</code>\n+  * otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isReadOnly(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the column may be writable.  This\n+  * does not guarantee that a write will be successful.\n+  *\n+  * @param index The index of the column to check for writability.\n+  *\n+  * @return <code>true</code> if the column may be writable,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isWritable(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the column is writable.  This\n+  * does guarantee that a write will be successful.\n+  *\n+  * @param index The index of the column to check for writability.\n+  *\n+  * @return <code>true</code> if the column is writable,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isDefinitelyWritable(int index) throws SQLException;\n+\n+} // interface ResultSetMetaData\n+"}, {"sha": "0fa64830f28aedcf0cfb34d32970a03a16585526", "filename": "libjava/java/sql/SQLException.java", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FSQLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FSQLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLException.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,199 @@\n+/* SQLException.java -- General SQL exception\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This exception is thrown when a database error occurs.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class SQLException extends Exception implements java.io.Serializable\n+{\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the next exception in the chain\n+  * @serialized\n+  */\n+private SQLException next;\n+\n+/**\n+  * This is the state of the SQL statement at the time of the error.\n+  * @serialized\n+  */\n+private String SQLState;\n+\n+/**\n+  * The vendor error code for this error\n+  * @serialized\n+  */\n+private int vendorCode;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of <code>SQLException</code>\n+  * that does not have a descriptive messages and SQL state, and which\n+  * has a vendor error code of 0.\n+  */\n+public \n+SQLException()\n+{\n+  this(null, null, 0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>SQLException</code>\n+  * with the specified descriptive error message.  The SQL state of this\n+  * instance will be <code>null</code> and the vendor error code will be 0.\n+  *\n+  * @param message A string describing the nature of the error.\n+  */\n+public \n+SQLException(String message)\n+{\n+  this(message, null, 0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>SQLException</code>\n+  * with the specified descriptive error message and SQL state string.\n+  * The vendor error code of this instance will be 0.\n+  *\n+  * @param message A string describing the nature of the error.\n+  * @param SQLState A string containing the SQL state of the error.\n+  */\n+public\n+SQLException(String message, String SQLState)\n+{\n+  this(message, SQLState, 0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a nwe instance of <code>SQLException</code>\n+  * with the specified descriptive error message, SQL state string, and\n+  * vendor code.\n+  *\n+  * @param message A string describing the nature of the error.\n+  * @param SQLState A string containing the SQL state of the error.\n+  * @param vendorCode The vendor error code associated with this error.\n+  */\n+public\n+SQLException(String message, String SQLState, int vendorCode)\n+{\n+  super(message);\n+\n+  this.SQLState = SQLState;\n+  this.vendorCode = vendorCode;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns the SQLState information associated with this\n+  * error.  The value returned is a <code>String</code> which is formatted\n+  * using the XOPEN SQL state conventions.\n+  *\n+  * @return The SQL state, which may be <code>null</code>.\n+  */\n+public String\n+getSQLState()\n+{\n+  return(SQLState);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the vendor specific error code associated with \n+  * this error.\n+  *\n+  * @return The vendor specific error code associated with this error.\n+  */\n+public int\n+getErrorCode()\n+{\n+  return(vendorCode);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the exception that is chained to this object.\n+  *\n+  * @return The exception chained to this object, which may be \n+  * <code>null</code>.\n+  */\n+public SQLException\n+getNextException()\n+{\n+  return(next);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method adds a new exception to the end of the chain of exceptions\n+  * that are chained to this object.\n+  *\n+  * @param e The exception to add to the end of the chain.\n+  */\n+public void\n+setNextException(SQLException e)\n+{\n+  if (e == null)\n+    return;\n+\n+  SQLException list_entry = this;\n+  while (list_entry.getNextException() != null)\n+    list_entry = list_entry.getNextException();\n+\n+  list_entry.next = e;\n+}\n+\n+} // class SQLException\n+"}, {"sha": "d13bad127ee178cd87848696fd453e18310a527c", "filename": "libjava/java/sql/SQLWarning.java", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FSQLWarning.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FSQLWarning.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLWarning.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,136 @@\n+/* SQLWarning.java -- Database access warnings.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This exception is thrown when a database warning occurs.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class SQLWarning extends SQLException implements java.io.Serializable\n+{\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of <code>SQLWxception</code>\n+  * that does not have a descriptive messages and SQL state, and which\n+  * has a vendor error code of 0.\n+  */\n+public \n+SQLWarning()\n+{\n+  this(null, null, 0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>SQLWarning</code>\n+  * with the specified descriptive error message.  The SQL state of this\n+  * instance will be <code>null</code> and the vendor error code will be 0.\n+  *\n+  * @param message A string describing the nature of the error.\n+  */\n+public \n+SQLWarning(String message)\n+{\n+  this(message, null, 0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>SQLWarning</code>\n+  * with the specified descriptive error message and SQL state string.\n+  * The vendor error code of this instance will be 0.\n+  *\n+  * @param message A string describing the nature of the error.\n+  * @param SQLState A string containing the SQL state of the error.\n+  */\n+public\n+SQLWarning(String message, String SQLState)\n+{\n+  this(message, SQLState, 0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a nwe instance of <code>SQLWarning</code>\n+  * with the specified descriptive error message, SQL state string, and\n+  * vendor code.\n+  *\n+  * @param message A string describing the nature of the error.\n+  * @param SQLState A string containing the SQL state of the error.\n+  * @param vendorCode The vendor error code associated with this error.\n+  */\n+public\n+SQLWarning(String message, String SQLState, int vendorCode)\n+{\n+  super(message, SQLState, vendorCode);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns the exception that is chained to this object.\n+  *\n+  * @return The exception chained to this object, which may be \n+  * <code>null</code>.\n+  */\n+public SQLWarning\n+getNextWarning()\n+{\n+  return((SQLWarning)super.getNextException());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method adds a new exception to the end of the chain of exceptions\n+  * that are chained to this object.\n+  *\n+  * @param e The exception to add to the end of the chain.\n+  */\n+public void\n+setNextWarning(SQLWarning e)\n+{\n+  super.setNextException(e);\n+}\n+\n+} // class SQLWarning\n+"}, {"sha": "1ceeb0f683727c821016444483d464ec850e883a", "filename": "libjava/java/sql/Statement.java", "status": "added", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FStatement.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,277 @@\n+/* Statement.java -- Interface for executing SQL statements.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This interface provides a mechanism for executing SQL statements.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Statement\n+{\n+\n+/**\n+  * This method executes the specified SQL SELECT statement and returns a\n+  * (possibly empty) <code>ResultSet</code> with the results of the query.\n+  *\n+  * @param sql The SQL statement to execute.\n+  *\n+  * @return The result set of the SQL statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+executeQuery(String sql) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method executes the specified SQL INSERT, UPDATE, or DELETE statement\n+  * and returns the number of rows affected, which may be 0.\n+  * \n+  * @param sql The SQL statement to execute.\n+  *\n+  * @return The number of rows affected by the SQL statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+executeUpdate(String sql) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method closes the statement and frees any associated resources.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+close() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum length of any column value in bytes.\n+  *\n+  * @return The maximum length of any column value in bytes.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxFieldSize() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the limit for the maximum length of any column in bytes.\n+  *\n+  * @param maxsize The new maximum length of any column in bytes.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setMaxFieldSize(int maxsize) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the maximum possible number of rows in a result set.\n+  *\n+  * @return The maximum possible number of rows in a result set.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getMaxRows() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the maximum number of rows that can be present in a\n+  * result set.\n+  *\n+  * @param maxrows The maximum possible number of rows in a result set.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setMaxRows(int maxrows) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the local escape processing mode on or off.  The\n+  * default value is on.\n+  *\n+  * @param escape <code>true</code> to enable local escape processing, \n+  * <code>false</code> to disable it.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setEscapeProcessing(boolean esacpe) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * The method returns the number of seconds a statement may be in process\n+  * before timing out.  A value of 0 means there is no timeout.\n+  *\n+  * @return The SQL statement timeout in seconds.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getQueryTimeout() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the number of seconds a statement may be in process\n+  * before timing out.  A value of 0 means there is no timeout.\n+  *\n+  * @param timeout The new SQL statement timeout value.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setQueryTimeout(int timeout) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method cancels an outstanding statement, if the database supports\n+  * that operation.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+cancel() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the first SQL warning attached to this statement.\n+  * Subsequent warnings will be chained to this one.\n+  *\n+  * @return The first SQL warning for this statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract SQLWarning\n+getWarnings() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method clears any SQL warnings that have been attached to this\n+  * statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+clearWarnings() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the cursor name that will be used by the result set.\n+  *\n+  * @param name The cursor name to use for this statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setCursorName(String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method executes an arbitrary SQL statement of any time.  The\n+  * methods <code>getResultSet</code>, <code>getMoreResults</code> and\n+  * <code>getUpdateCount</code> retrieve the results.\n+  *\n+  * @return <code>true</code> if a result set was returned, <code>false</code>\n+  * if an update count was returned.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+execute(String sql) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the result set of the SQL statement that was\n+  * executed.  This should be called only once per result set returned.\n+  *\n+  * @return The result set of the query, or <code>null</code> if there was\n+  * no result set (for example, if the statement was an UPDATE).\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see execute\n+  */\n+public abstract ResultSet\n+getResultSet() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the update count of the SQL statement that was\n+  * executed.  This should be called only once per executed SQL statement.\n+  *\n+  * @return The update count of the query, or -1 if there was no update\n+  * count (for example, if the statement was a SELECT).\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see execute\n+  */\n+public abstract int\n+getUpdateCount() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method advances the result set pointer to the next result set, \n+  * which can then be retrieved using <code>getResultSet</code>\n+  *\n+  * @return <code>true</code> if there is another result set, \n+  * <code>false</code> otherwise (for example, the next result is an\n+  * update count).\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see execute\n+  */\n+public abstract boolean\n+getMoreResults() throws SQLException;\n+\n+} // interface Statement\n+"}, {"sha": "e8086589832b2a165ea29913efe1d72e94ce9eb4", "filename": "libjava/java/sql/Time.java", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FTime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FTime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTime.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,137 @@\n+/* Time.java -- Wrapper around java.util.Date\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.text.SimpleDateFormat;\n+\n+/**\n+  * This class is a wrapper around java.util.Date to allow the JDBC\n+  * driver to identify the value as a SQL Time.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Time extends java.util.Date implements java.io.Serializable\n+{\n+\n+/*\n+ * Class Variables\n+ */\n+\n+/**\n+  * Used for parsing and formatting this date.\n+  */\n+private static SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss\");\n+\n+/*************************************************************************/\n+\n+/*\n+ * Class Methods\n+ */\n+\n+/**\n+  * This method returns a new instance of this class by parsing a\n+  * date in JDBC format into a Java date.\n+  *\n+  * @param str The string to parse.\n+  *\n+  * @return The resulting <code>java.sql.Time</code> value. \n+  */\n+public static Time\n+valueOf(String str)\n+{\n+  try\n+    {\n+      java.util.Date d = (java.util.Date)sdf.parseObject(str);\n+      return(new Time(d.getTime()));\n+    }\n+  catch(Exception e)\n+    {\n+      return(null);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of this class with the\n+  * specified year, month, and day.\n+  *\n+  * @param hour The hour for this Time (0-23)\n+  * @param minute The minute for this time (0-59)\n+  * @param second The second for this time (0-59)\n+  *\n+  * @deprecated\n+  */\n+public \n+Time(int hour, int minute, int second)\n+{\n+  super(System.currentTimeMillis());\n+\n+  setHours(hour);\n+  setMinutes(minute);\n+  setSeconds(second);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of this class with the\n+  * specified time value representing the number of seconds since \n+  * Jan 1, 1970 at 12:00 midnight GMT.\n+  *\n+  * @param time The time value to intialize this <code>Time</code> to.\n+  */\n+public\n+Time(long date)\n+{\n+  super(date);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns this date in JDBC format.\n+  *\n+  * @return This date as a string.\n+  */\n+public String\n+toString()\n+{\n+  return(sdf.format(this));\n+}\n+\n+} // class Time\n+"}, {"sha": "c12267ec9dc808f8af19690e46a783ad0eecc3e6", "filename": "libjava/java/sql/Timestamp.java", "status": "added", "additions": 285, "deletions": 0, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FTimestamp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FTimestamp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTimestamp.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,285 @@\n+/* Time.java -- Wrapper around java.util.Date\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.text.SimpleDateFormat;\n+\n+/**\n+  * This class is a wrapper around java.util.Date to allow the JDBC\n+  * driver to identify the value as a SQL Timestamp.  Note that this\n+  * class also adds an additional field for nano-seconds, and so \n+  * is not completely identical to <code>java.util.Date</code> as\n+  * the <code>java.sql.Date</code> and <code>java.sql.Time</code>\n+  * classes are.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Timestamp extends java.util.Date implements java.io.Serializable\n+{\n+\n+/*\n+ * Class Variables\n+ */\n+\n+/**\n+  * Used for parsing and formatting this date.\n+  */\n+  // Millisecond will have to be close enough for now.\n+private static SimpleDateFormat parse_sdf = \n+  new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSS\");\n+\n+private static SimpleDateFormat format_sdf =\n+  new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The nanosecond value for this object\n+  */\n+private int nanos;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Class Methods\n+ */\n+\n+/**\n+  * This method returns a new instance of this class by parsing a\n+  * date in JDBC format into a Java date.\n+  *\n+  * @param str The string to parse.\n+  *\n+  * @return The resulting <code>java.sql.Timestamp</code> value. \n+  */\n+public static Timestamp\n+valueOf(String str)\n+{\n+  try\n+    {\n+      Date d = (Date)parse_sdf.parseObject(str);\n+      return(new Timestamp(d.getTime()));\n+    }\n+  catch(Exception e)\n+    {\n+      return(null);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of this class with the\n+  * specified year, month, and day.\n+  *\n+  * @param year The year for this Timestamp (year - 1900)\n+  * @param month The month for this Timestamp (0-11)\n+  * @param day The day for this Timestamp (1-31)\n+  * @param hour The hour for this Timestamp (0-23)\n+  * @param minute The minute for this Timestamp (0-59)\n+  * @param second The second for this Timestamp (0-59)\n+  * @param nanos The nanosecond value for this Timestamp (0 to 999,999,9999)\n+  *\n+  * @deprecated\n+  */\n+public \n+Timestamp(int year, int month, int day, int hour, int minute, int second,\n+          int nanos)\n+{\n+  super(year, month, day, hour, minute, second);\n+\n+  this.nanos = nanos;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of this class with the\n+  * specified time value representing the number of seconds since \n+  * Jan 1, 1970 at 12:00 midnight GMT.\n+  *\n+  * @param time The time value to intialize this <code>Time</code> to.\n+  */\n+public\n+Timestamp(long date)\n+{\n+  super(date);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns this date in JDBC format.\n+  *\n+  * @return This date as a string.\n+  */\n+public String\n+toString()\n+{\n+  return(format_sdf.format(this) + \".\" + getNanos());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the nanosecond value for this object.\n+  *\n+  * @return The nanosecond value for this object.\n+  */\n+public int\n+getNanos()\n+{\n+  return(nanos);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the nanosecond value for this object.\n+  *\n+  * @param nanos The nanosecond value for this object.\n+  */\n+public void\n+setNanos(int nanos)\n+{\n+  this.nanos = nanos;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This methods tests whether this object is earlier than the specified\n+  * object.\n+  *\n+  * @param ts The other <code>Timestamp</code> to test against.\n+  *\n+  * @return <code>true</code> if this object is earlier than the other object,\n+  * <code>false</code> otherwise.\n+  */\n+public boolean\n+before(Timestamp ts)\n+{\n+  if (ts.getTime() > getTime())\n+    return(true);\n+\n+  if (ts.getNanos() > getNanos())\n+    return(true);\n+\n+  return(false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This methods tests whether this object is later than the specified\n+  * object.\n+  *\n+  * @param ts The other <code>Timestamp</code> to test against.\n+  *\n+  * @return <code>true</code> if this object is later than the other object,\n+  * <code>false</code> otherwise.\n+  */\n+public boolean\n+after(Timestamp ts)\n+{\n+  if (ts.getTime() < getTime())\n+    return(true);\n+\n+  if (ts.getNanos() < getNanos())\n+    return(true);\n+\n+  return(false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method these the specified <code>Object</code> for equality\n+  * against this object.  This will be true if an only if the specified\n+  * object is an instance of <code>Timestamp</code> and has the same\n+  * time value fields.\n+  *\n+  * @param obj The object to test against for equality.\n+  *\n+  * @return <code>true</code> if the specified object is equal to this\n+  * object, <code>false</code> otherwise.\n+  */\n+public boolean\n+equals(Object obj)\n+{\n+  if (obj == null)\n+    return(false);\n+\n+  if (!(obj instanceof Timestamp))\n+    return(false);\n+\n+  return(equals((Timestamp)obj));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests the specified timestamp for equality against this\n+  * object.  This will be true if and only if the specified object is\n+  * not <code>null</code> and contains all the same time value fields\n+  * as this object.\n+  *\n+  * @param ts The <code>Timestamp</code> to test against for equality.\n+  *\n+  * @return <code>true</code> if the specified object is equal to this\n+  * object, <code>false</code> otherwise.\n+  */\n+public boolean\n+equals(Timestamp ts)\n+{\n+  if (ts == null)\n+    return(false);\n+\n+  if (ts.getTime() != getTime())\n+    return(false);\n+\n+  if (ts.getNanos() != getNanos())\n+    return(false);\n+\n+  return(true);\n+}\n+\n+} // class Timestamp\n+"}, {"sha": "3cbbba929f6eb61cec5b0fd3d139ae1930cd0c56", "filename": "libjava/java/sql/Types.java", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FTypes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fjava%2Fsql%2FTypes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTypes.java?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -0,0 +1,64 @@\n+/* Types.java -- SQL type constants\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This class contains constants that are used to identify SQL data types.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Types \n+{\n+\n+// These should be self explanatory.  People need a SQL book, not\n+// Javadoc comments for these.\n+\n+public static final int BIT = -7;\n+public static final int TINYINT = -6;\n+public static final int SMALLINT = 5;\n+public static final int INTEGER = 4;\n+public static final int BIGINT = -5;\n+public static final int FLOAT = 6;\n+public static final int REAL = 7;\n+public static final int DOUBLE = 8;\n+public static final int NUMERIC = 2;\n+public static final int DECIMAL = 3;\n+public static final int CHAR = 1;\n+public static final int VARCHAR = 12;\n+public static final int LONGVARCHAR = -1;\n+public static final int DATE = 91;\n+public static final int TIME = 92;\n+public static final int TIMESTAMP = 93;\n+public static final int BINARY = -2;\n+public static final int VARBINARY = -3;\n+public static final int LONGVARBINARY = -4;\n+public static final int NULL = 0;\n+public static final int OTHER = 1111;\n+\n+} // class Types \n+"}, {"sha": "28905d16036b68749da9102aa0dbbff40c0c9afb", "filename": "libjava/mauve-libgcj", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fmauve-libgcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0123c54ca7a18cb075064502bdec4961e7eeb79/libjava%2Fmauve-libgcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fmauve-libgcj?ref=d0123c54ca7a18cb075064502bdec4961e7eeb79", "patch": "@@ -11,10 +11,10 @@ java.lang.Character.classify12\n java.lang.String.hash\n # We support 1.2 for this test.\n java.lang.reflect.Modifier.toString12\n-!java.math\n+java.math\n !java.rmi\n-!java.security\n-!java.sql\n+java.security\n+java.sql\n java.text.FieldPosition.Test\n java.text.ParsePosition.Test\n java.text.SimpleDateFormat.getAndSet2DigitYearStart"}]}