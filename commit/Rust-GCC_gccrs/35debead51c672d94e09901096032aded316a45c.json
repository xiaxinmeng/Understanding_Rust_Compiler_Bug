{"sha": "35debead51c672d94e09901096032aded316a45c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkZWJlYWQ1MWM2NzJkOTRlMDk5MDEwOTYwMzJhZGVkMzE2YTQ1Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-30T14:35:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-30T14:35:22Z"}, "message": "Makefile.in (dce.o): Add $(EXCEPT_H).\n\n\t* Makefile.in (dce.o): Add $(EXCEPT_H).\n\t* dce.c: Include except.h and delete redundant vector definitions.\n\t(deletable_insn_p): Return false for non-call insns that can throw\n\tif DF is running.\n\nFrom-SVN: r147002", "tree": {"sha": "b930499490b07e1c897cdfe8e6d50538aecc8f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b930499490b07e1c897cdfe8e6d50538aecc8f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35debead51c672d94e09901096032aded316a45c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35debead51c672d94e09901096032aded316a45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35debead51c672d94e09901096032aded316a45c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35debead51c672d94e09901096032aded316a45c/comments", "author": null, "committer": null, "parents": [{"sha": "df35c271df60646a09af5279506c76c676a83217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df35c271df60646a09af5279506c76c676a83217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df35c271df60646a09af5279506c76c676a83217"}], "stats": {"total": 182, "additions": 81, "deletions": 101}, "files": [{"sha": "b8dca1167afd93f798b72206ac1eb6d599904cbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -1,3 +1,10 @@\n+2009-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.in (dce.o): Add $(EXCEPT_H).\n+\t* dce.c: Include except.h and delete redundant vector definitions.\n+\t(deletable_insn_p): Return false for non-call insns that can throw\n+\tif DF is running.\n+\n 2009-04-30  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gcse.c (ae_gen): Remove."}, {"sha": "c578d21266f062f143c2d3f826e3b3db960bbb62", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -2681,7 +2681,7 @@ cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    $(EXCEPT_H) $(TARGET_H) $(PARAMS_H) rtlhooks-def.h $(TREE_PASS_H) \\\n    $(REAL_H) $(DF_H) $(DBGCNT_H)\n dce.o : dce.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TREE_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) $(DF_H) cselib.h \\\n+   $(TREE_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) $(EXCEPT_H) $(DF_H) cselib.h \\\n    $(DBGCNT_H) dce.h $(TIMEVAR_H) $(TREE_PASS_H) $(DBGCNT_H) $(TM_P_H)\n dse.o : dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(TM_P_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\"}, {"sha": "c11325e1197f0d4d318256dc602e751f44397cbe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -1,24 +1,3 @@\n-2009-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n-\n-\tRevert\n-\t2009-04-29  Vincent Celier  <celier@adacore.com>\n-\n-\t* sinput-l.adb (Load_File): When preprocessing, set temporarily the\n-\tSource_File_Index_Table entries for the source, to avoid crash when\n-\treporting an error.\n-\n-\t* gnatcmd.adb (Test_If_Relative_Path): Use\n-\tMakeutl.Test_If_Relative_Path.\n-\t\n-\t* makeutl.adb:(Test_If_Relative_Path): Process switches --RTS= only if\n-\tIncluding_RTS is True.\n-\n-\t* makeutl.ads (Test_If_Relative_Path): New Boolean parameter\n-\tIncluding_RTS defaulted to False.\n-\n-\t* sinput.ads, scans.ads, err_vars.ads: Initialize some variables with\n-\ta default value.\n-\n 2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Subprogram_Renaming): Improve error message on"}, {"sha": "c4c28dafc365fc549b6da6841dcda43f222356c4", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -32,24 +32,31 @@ with Uintp; use Uintp;\n \n package Err_Vars is\n \n+   --  All of these variables are set when needed, so they do not need to be\n+   --  initialized. However, there is code that saves and restores existing\n+   --  values, which may malfunction in -gnatVa mode if the variable has never\n+   --  been iniitalized, so we initialize some variables to avoid exceptions\n+   --  from invalid values in such cases.\n+\n    ------------------\n    -- Error Counts --\n    ------------------\n \n-   Serious_Errors_Detected : Nat;\n+   Serious_Errors_Detected : Nat := 0;\n    --  This is a count of errors that are serious enough to stop expansion,\n    --  and hence to prevent generation of an object file even if the\n    --  switch -gnatQ is set. Initialized to zero at the start of compilation.\n+   --  Initialized for -gnatVa use, see comment above.\n \n-   Total_Errors_Detected : Nat;\n+   Total_Errors_Detected : Nat := 0;\n    --  Number of errors detected so far. Includes count of serious errors and\n    --  non-serious errors, so this value is always greater than or equal to the\n    --  Serious_Errors_Detected value. Initialized to zero at the start of\n-   --  compilation.\n+   --  compilation. Initialized for -gnatVa use, see comment above.\n \n-   Warnings_Detected : Nat;\n+   Warnings_Detected : Nat := 0;\n    --  Number of warnings detected. Initialized to zero at the start of\n-   --  compilation.\n+   --  compilation. Initialized for -gnatVa use, see comment above.\n \n    ----------------------------------\n    -- Error Message Mode Variables --\n@@ -75,7 +82,7 @@ package Err_Vars is\n    --  generated on the instantiation (referring to the template) rather\n    --  than on the template itself.\n \n-   Raise_Exception_On_Error : Nat;\n+   Raise_Exception_On_Error : Nat := 0;\n    --  If this value is non-zero, then any attempt to generate an error\n    --  message raises the exception Error_Msg_Exception, and the error\n    --  message is not output. This is used for defending against junk"}, {"sha": "8310cd2b6970112d8fa102d050f6fcde878b4278", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 3, "deletions": 55, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -26,6 +26,7 @@\n with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n \n with Csets;\n+with Makeutl;\n with MLib.Tgt; use MLib.Tgt;\n with MLib.Utl;\n with MLib.Fil;\n@@ -1265,61 +1266,8 @@ procedure GNATCmd is\n       Parent : String)\n    is\n    begin\n-      if Switch /= null then\n-\n-         declare\n-            Sw : String (1 .. Switch'Length);\n-            Start : Positive := 1;\n-\n-         begin\n-            Sw := Switch.all;\n-\n-            if Sw (1) = '-' then\n-               if Sw'Length >= 3\n-                 and then (Sw (2) = 'A' or else\n-                           Sw (2) = 'I' or else\n-                           Sw (2) = 'L')\n-               then\n-                  Start := 3;\n-\n-                  if Sw = \"-I-\" then\n-                     return;\n-                  end if;\n-\n-               elsif Sw'Length >= 4\n-                 and then (Sw (2 .. 3) = \"aL\" or else\n-                           Sw (2 .. 3) = \"aO\" or else\n-                           Sw (2 .. 3) = \"aI\")\n-               then\n-                  Start := 4;\n-\n-               elsif Sw'Length >= 7\n-                 and then Sw (2 .. 6) = \"-RTS=\"\n-               then\n-                  Start := 7;\n-               else\n-                  return;\n-               end if;\n-            end if;\n-\n-            --  If the path is relative, test if it includes directory\n-            --  information. If it does, prepend Parent to the path.\n-\n-            if not Is_Absolute_Path (Sw (Start .. Sw'Last)) then\n-               for J in Start .. Sw'Last loop\n-                  if Sw (J) = Directory_Separator then\n-                     Switch :=\n-                        new String'\n-                              (Sw (1 .. Start - 1) &\n-                               Parent &\n-                               Directory_Separator &\n-                               Sw (Start .. Sw'Last));\n-                     return;\n-                  end if;\n-               end loop;\n-            end if;\n-         end;\n-      end if;\n+      Makeutl.Test_If_Relative_Path\n+        (Switch, Parent, Including_Non_Switch => False, Including_RTS => True);\n    end Test_If_Relative_Path;\n \n    -------------------"}, {"sha": "17c34ff51f70921f5105ae9f8b267cc778da9fb9", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -598,7 +598,8 @@ package body Makeutl is\n      (Switch               : in out String_Access;\n       Parent               : String;\n       Including_L_Switch   : Boolean := True;\n-      Including_Non_Switch : Boolean := True)\n+      Including_Non_Switch : Boolean := True;\n+      Including_RTS        : Boolean := False)\n    is\n    begin\n       if Switch /= null then\n@@ -628,13 +629,20 @@ package body Makeutl is\n                then\n                   Start := 4;\n \n+               elsif Including_RTS\n+                 and then Sw'Length >= 7\n+                 and then Sw (2 .. 6) = \"-RTS=\"\n+               then\n+                  Start := 7;\n+\n                else\n                   return;\n                end if;\n \n                --  Because relative path arguments to --RTS= may be relative\n                --  to the search directory prefix, those relative path\n-               --  arguments are not converted.\n+               --  arguments are converted only when they include directory\n+               --  information.\n \n                if not Is_Absolute_Path (Sw (Start .. Sw'Last)) then\n                   if Parent'Length = 0 then\n@@ -643,6 +651,19 @@ package body Makeutl is\n                         & Sw\n                         & \"\"\") are not allowed\");\n \n+                  elsif Including_RTS then\n+                     for J in Start .. Sw'Last loop\n+                        if Sw (J) = Directory_Separator then\n+                           Switch :=\n+                             new String'\n+                               (Sw (1 .. Start - 1) &\n+                                Parent &\n+                                Directory_Separator &\n+                                Sw (Start .. Sw'Last));\n+                           return;\n+                        end if;\n+                     end loop;\n+\n                   else\n                      Switch :=\n                        new String'"}, {"sha": "3c9b4d972420636858024d6ef5c3b1f58f5218b2", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -130,12 +130,14 @@ package Makeutl is\n      (Switch               : in out String_Access;\n       Parent               : String;\n       Including_L_Switch   : Boolean := True;\n-      Including_Non_Switch : Boolean := True);\n+      Including_Non_Switch : Boolean := True;\n+      Including_RTS        : Boolean := False);\n    --  Test if Switch is a relative search path switch.\n    --  If it is, fail if Parent is the empty string, otherwise prepend the path\n    --  with Parent. This subprogram is only called when using project files.\n    --  For gnatbind switches, Including_L_Switch is False, because the\n-   --  argument of the -L switch is not a path.\n+   --  argument of the -L switch is not a path. If Including_RTS is True,\n+   --  process also switches --RTS=.\n \n    function Path_Or_File_Name (Path : Path_Name_Type) return String;\n    --  Returns a file name if -df is used, otherwise return a path name"}, {"sha": "6f9bcb8c727f3e6da451503db45ec35f9b651e1b", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -345,36 +345,43 @@ package Scans is\n    --  Note: these variables can only be referenced during the parsing of a\n    --  file. Reference to any of them from Sem or the expander is wrong.\n \n-   Scan_Ptr : Source_Ptr;\n+   --  These variables are initialized as required by Scn.Initialize_Scanner,\n+   --  and should not be referenced before such a call. However, there are\n+   --  situations in which these variables are saved and restored, and this\n+   --  may happen before the first Initialize_Scanner call, resulting in the\n+   --  assignment of invalid values. To avoid this, and allow building with\n+   --  the -gnatVa switch, we initialize some variables to known valid values.\n+\n+   Scan_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Current scan pointer location. After a call to Scan, this points\n    --  just past the end of the token just scanned.\n \n-   Token : Token_Type;\n+   Token : Token_Type := No_Token; -- init for -gnatVa\n    --  Type of current token\n \n-   Token_Ptr : Source_Ptr;\n+   Token_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Pointer to first character of current token\n \n-   Current_Line_Start : Source_Ptr;\n-   --  Pointer to first character of line containing current token\n+   Current_Line_Start : Source_Ptr := No_Location; -- init for -gnatVa\n+   --  Pointer to first character of line containing current token.\n \n-   Start_Column : Column_Number;\n+   Start_Column : Column_Number := No_Column_Number; -- init for -gnatVa\n    --  Starting column number (zero origin) of the first non-blank character\n    --  on the line containing the current token. This is used for error\n    --  recovery circuits which depend on looking at the column line up.\n \n-   Type_Token_Location : Source_Ptr;\n+   Type_Token_Location : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Within a type declaration, gives the location of the TYPE keyword that\n    --  opened the type declaration. Used in checking the end column of a record\n    --  declaration, which can line up either with the TYPE keyword, or with the\n    --  start of the line containing the RECORD keyword.\n \n-   Checksum : Word;\n+   Checksum : Word := 0; -- init for -gnatVa\n    --  Used to accumulate a CRC representing the tokens in the source\n    --  file being compiled. This CRC includes only program tokens, and\n    --  excludes comments.\n \n-   First_Non_Blank_Location : Source_Ptr;\n+   First_Non_Blank_Location : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Location of first non-blank character on the line containing the\n    --  current token (i.e. the location of the character whose column number\n    --  is stored in Start_Column)."}, {"sha": "32f8bdedd6bfebc055afce196ff6815edede4ec5", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -453,6 +453,11 @@ package body Sinput.L is\n          --  Preprocess the source if it needs to be preprocessed\n \n          if Preprocessing_Needed then\n+            --  Set temporarily the Source_File_Index_Table entries for the\n+            --  source, to avoid crash when reporting an error.\n+\n+            Set_Source_File_Index_Table (X);\n+\n             if Opt.List_Preprocessing_Symbols then\n                Get_Name_String (N);\n "}, {"sha": "ca97716145e2ad3b5b004bf656924ab2e94b3d92", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -423,8 +423,10 @@ package Sinput is\n    -- Global Data --\n    -----------------\n \n-   Current_Source_File : Source_File_Index;\n-   --  Source_File table index of source file currently being scanned\n+   Current_Source_File : Source_File_Index := No_Source_File;\n+   --  Source_File table index of source file currently being scanned.\n+   --  Initialized so that some tools (such as gprbuild) can be built with\n+   --  -gnatVa and pragma Initialized_Scalars without problems.\n \n    Current_Source_Unit : Unit_Number_Type;\n    --  Unit number of source file currently being scanned. The special value"}, {"sha": "abdd433cb0e3b6d37dac754711e890e24fe45e22", "filename": "gcc/dce.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35debead51c672d94e09901096032aded316a45c/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35debead51c672d94e09901096032aded316a45c/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=35debead51c672d94e09901096032aded316a45c", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"flags.h\"\n+#include \"except.h\"\n #include \"df.h\"\n #include \"cselib.h\"\n #include \"dce.h\"\n@@ -35,9 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tm_p.h\"\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n \n /* -------------------------------------------------------------------------\n    Core mark/delete routines\n@@ -118,6 +116,10 @@ deletable_insn_p (rtx insn, bool fast, bitmap arg_stores)\n   if (!NONJUMP_INSN_P (insn))\n     return false;\n \n+  /* Similarly, we cannot delete other insns that can throw either.  */\n+  if (df_in_progress && flag_non_call_exceptions && can_throw_internal (insn))\n+    return false;\n+\n   body = PATTERN (insn);\n   switch (GET_CODE (body))\n     {"}]}