{"sha": "138b1d4f58af17986e856e665ffbd561c2c8740e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4YjFkNGY1OGFmMTc5ODZlODU2ZTY2NWZmYmQ1NjFjMmM4NzQwZQ==", "commit": {"author": {"name": "y00520163", "email": "yangyang305@huawei.com", "date": "2020-07-20T18:47:05Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-20T18:47:05Z"}, "message": "vect: Fix an ICE in vectorizable_simd_clone_call\n\nIn vectorizable_simd_clone_call, type compatibility is handled based on\nthe number of elements and the type compatibility of elements, which is\nnot enough. This patch add VIEW_CONVERT_EXPRs if the arguments types\nand return type of simd clone function are distinct with the vectype of\nstmt.\n\n2020-07-20  Yang Yang  <yangyang305@huawei.com>\n\ngcc/ChangeLog:\n\n\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Add\n\tVIEW_CONVERT_EXPRs if the arguments types and return type\n\tof simd clone function are distinct with the vectype of stmt.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/pr96195.c: New test.", "tree": {"sha": "0498640b64f28e685723a382d55b9c30ab573f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0498640b64f28e685723a382d55b9c30ab573f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138b1d4f58af17986e856e665ffbd561c2c8740e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138b1d4f58af17986e856e665ffbd561c2c8740e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138b1d4f58af17986e856e665ffbd561c2c8740e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138b1d4f58af17986e856e665ffbd561c2c8740e/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "d879efda5c899c0458984f639ffe1ecc872e4ab1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr96195.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138b1d4f58af17986e856e665ffbd561c2c8740e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr96195.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138b1d4f58af17986e856e665ffbd561c2c8740e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr96195.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr96195.c?ref=138b1d4f58af17986e856e665ffbd561c2c8740e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fopenmp-simd -ftree-vectorize -msve-vector-bits=128\" } */\n+\n+int by;\n+\n+#pragma omp declare simd\n+int\n+zp (int);\n+\n+void\n+qh (int oh)\n+{\n+#pragma omp simd\n+  for (by = 0; by < oh; ++by)\n+    by = zp (by);\n+}\n+"}, {"sha": "7870b973ba7e82d1d528e82d17beb12ba13b8aeb", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138b1d4f58af17986e856e665ffbd561c2c8740e/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138b1d4f58af17986e856e665ffbd561c2c8740e/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=138b1d4f58af17986e856e665ffbd561c2c8740e", "patch": "@@ -4137,7 +4137,20 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t\t\t\t\t  vec_oprnd0);\n \t\t\t}\n \t\t      if (k == 1)\n-\t\t\tvargs.safe_push (vec_oprnd0);\n+\t\t\tif (!useless_type_conversion_p (TREE_TYPE (vec_oprnd0),\n+\t\t\t\t\t\t       atype))\n+\t\t\t  {\n+\t\t\t    vec_oprnd0\n+\t\t\t      = build1 (VIEW_CONVERT_EXPR, atype, vec_oprnd0);\n+\t\t\t    gassign *new_stmt\n+\t\t\t      = gimple_build_assign (make_ssa_name (atype),\n+\t\t\t\t\t\t     vec_oprnd0);\n+\t\t\t    vect_finish_stmt_generation (vinfo, stmt_info,\n+\t\t\t\t\t\t\t new_stmt, gsi);\n+\t\t\t    vargs.safe_push (gimple_assign_lhs (new_stmt));\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  vargs.safe_push (vec_oprnd0);\n \t\t      else\n \t\t\t{\n \t\t\t  vec_oprnd0 = build_constructor (atype, ctor_elts);\n@@ -4233,8 +4246,7 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t  gcc_assert (ratype || simd_clone_subparts (rtype) == nunits);\n \t  if (ratype)\n \t    new_temp = create_tmp_var (ratype);\n-\t  else if (simd_clone_subparts (vectype)\n-\t\t   == simd_clone_subparts (rtype))\n+\t  else if (useless_type_conversion_p (vectype, rtype))\n \t    new_temp = make_ssa_name (vec_dest, new_call);\n \t  else\n \t    new_temp = make_ssa_name (rtype, new_call);\n@@ -4322,6 +4334,13 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t      vect_finish_stmt_generation (vinfo, stmt_info, new_stmt, gsi);\n \t      vect_clobber_variable (vinfo, stmt_info, gsi, new_temp);\n \t    }\n+\t  else if (!useless_type_conversion_p (vectype, rtype))\n+\t    {\n+\t      vec_oprnd0 = build1 (VIEW_CONVERT_EXPR, vectype, new_temp);\n+\t      new_stmt\n+\t\t= gimple_build_assign (make_ssa_name (vec_dest), vec_oprnd0);\n+\t      vect_finish_stmt_generation (vinfo, stmt_info, new_stmt, gsi);\n+\t    }\n \t}\n \n       if (j == 0)"}]}