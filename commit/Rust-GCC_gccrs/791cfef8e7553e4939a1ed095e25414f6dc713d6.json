{"sha": "791cfef8e7553e4939a1ed095e25414f6dc713d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkxY2ZlZjhlNzU1M2U0OTM5YTFlZDA5NWUyNTQxNGY2ZGM3MTNkNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-01-12T17:14:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-12T17:14:02Z"}, "message": "jit: API change to gcc_jit_context_new_global\n\ngcc/jit/ChangeLog:\n\t* docs/cp/topics/expressions.rst (Global variables): Add\n\tenum gcc_jit_global_kind param to gccjit::context::new_global.\n\t* docs/topics/expressions.rst (Global variables): Likewise.\n\tDocument the new enum.\n\t* docs/topics/results.rst (Compilation results): Document\n\tglobals-handling.\n\t* dummy-frontend.c (jit_langhook_write_globals): Call into the\n\tplayback context's write_global_decls_1 and write_global_decls_2\n\tbefore and after calling symtab->finalize_compilation_unit ().\n\t* jit-playback.c: Include \"debug.h\".\n\t(gcc::jit::playback::context::new_global): Add \"kind\" param and\n\tuse it to set TREE_PUBLIC, TREE_STATIC and DECL_EXTERNAL on the\n\tunderlying VAR_DECL.  Call varpool_node::get_create on the\n\tVAR_DECL, and add it to m_globals.\n\t(gcc::jit::playback::context::write_global_decls_1): New function.\n\t(gcc::jit::playback::context::write_global_decls_2): New function.\n\t* jit-playback.h (gcc::jit::playback::context::context): Call\n\tcreate on m_globals.\n\t(gcc::jit::playback::context::new_global): Add \"kind\" param.\n\t(gcc::jit::playback::context::write_global_decls_1): New function.\n\t(gcc::jit::playback::context::write_global_decls_2): New function.\n\t(gcc::jit::playback::context::m_globals): New field.\n\t* jit-recording.c (gcc::jit::recording::context::context):\n\tInitialize m_globals.\n\t(gcc::jit::recording::context::new_global): Add param \"kind\".\n\tAdd the new global to m_globals.\n\t(gcc::jit::recording::context::dump_to_file): Dump the globals.\n\t(gcc::jit::recording::global::replay_into): Add field m_kind.\n\t(gcc::jit::recording::global::write_to_dump): New override.\n\t* jit-recording.h (gcc::jit::recording::context::new_global): Add\n\tparam \"kind\".\n\t(gcc::jit::recording::context::m_globals): New field.\n\t(gcc::jit::recording::global::global): Add param kind.\n\t(gcc::jit::recording::global::write_to_dump): New override.\n\t(gcc::jit::recording::global::m_kind): New field.\n\t* jit-result.c (gcc::jit::result::get_global): New function.\n\t* jit-result.h (gcc::jit::result::get_global): New function.\n\t* libgccjit++.h (gccjit::context::new_global): Add \"kind\" param.\n\t* libgccjit.c (gcc_jit_context_new_global): Likewise.\n\t(gcc_jit_result_get_global): New API entrypoint.\n\t* libgccjit.h (gcc_jit_result_get_global): New API entrypoint.\n\t(enum gcc_jit_global_kind): New enum.\n\t(gcc_jit_context_new_global): API change: add \"kind\" param.\n\t* libgccjit.map (gcc_jit_result_get_global): New symbol.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/test-array-as-pointer.c (create_code): Update call\n\tto gcc_jit_context_new_global by setting \"kind\" to\n\tGCC_JIT_GLOBAL_IMPORTED.\n\t* jit.dg/test-error-array-as-pointer.c: Likewise.\n\t* jit.dg/test-expressions.c (make_test_of_get_address): Likewise.\n\t* jit.dg/test-fuzzer.c (make_random_global): Likewise, but\n\tsetting kind to GCC_JIT_GLOBAL_EXPORTED.\n\t* jit.dg/test-using-global.c (the_global): Rename to...\n\t(imported_global): ...this.\n\t(create_code): Update to test the three kinds of global.\n\t(verify_code): Likewise.\n\nFrom-SVN: r219480", "tree": {"sha": "062ae8773efd3200e81a237028025864147648c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/062ae8773efd3200e81a237028025864147648c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/791cfef8e7553e4939a1ed095e25414f6dc713d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791cfef8e7553e4939a1ed095e25414f6dc713d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791cfef8e7553e4939a1ed095e25414f6dc713d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791cfef8e7553e4939a1ed095e25414f6dc713d6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c0fcb81dad4c8f2f9c687a40627db0442a475f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0fcb81dad4c8f2f9c687a40627db0442a475f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0fcb81dad4c8f2f9c687a40627db0442a475f4"}], "stats": {"total": 1137, "additions": 828, "deletions": 309}, "files": [{"sha": "1b79198a7f45b5fe4657796c9d669cacaaadf136", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -1,3 +1,51 @@\n+2015-01-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/cp/topics/expressions.rst (Global variables): Add\n+\tenum gcc_jit_global_kind param to gccjit::context::new_global.\n+\t* docs/topics/expressions.rst (Global variables): Likewise.\n+\tDocument the new enum.\n+\t* docs/topics/results.rst (Compilation results): Document\n+\tglobals-handling.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* dummy-frontend.c (jit_langhook_write_globals): Call into the\n+\tplayback context's write_global_decls_1 and write_global_decls_2\n+\tbefore and after calling symtab->finalize_compilation_unit ().\n+\t* jit-playback.c: Include \"debug.h\".\n+\t(gcc::jit::playback::context::new_global): Add \"kind\" param and\n+\tuse it to set TREE_PUBLIC, TREE_STATIC and DECL_EXTERNAL on the\n+\tunderlying VAR_DECL.  Call varpool_node::get_create on the\n+\tVAR_DECL, and add it to m_globals.\n+\t(gcc::jit::playback::context::write_global_decls_1): New function.\n+\t(gcc::jit::playback::context::write_global_decls_2): New function.\n+\t* jit-playback.h (gcc::jit::playback::context::context): Call\n+\tcreate on m_globals.\n+\t(gcc::jit::playback::context::new_global): Add \"kind\" param.\n+\t(gcc::jit::playback::context::write_global_decls_1): New function.\n+\t(gcc::jit::playback::context::write_global_decls_2): New function.\n+\t(gcc::jit::playback::context::m_globals): New field.\n+\t* jit-recording.c (gcc::jit::recording::context::context):\n+\tInitialize m_globals.\n+\t(gcc::jit::recording::context::new_global): Add param \"kind\".\n+\tAdd the new global to m_globals.\n+\t(gcc::jit::recording::context::dump_to_file): Dump the globals.\n+\t(gcc::jit::recording::global::replay_into): Add field m_kind.\n+\t(gcc::jit::recording::global::write_to_dump): New override.\n+\t* jit-recording.h (gcc::jit::recording::context::new_global): Add\n+\tparam \"kind\".\n+\t(gcc::jit::recording::context::m_globals): New field.\n+\t(gcc::jit::recording::global::global): Add param kind.\n+\t(gcc::jit::recording::global::write_to_dump): New override.\n+\t(gcc::jit::recording::global::m_kind): New field.\n+\t* jit-result.c (gcc::jit::result::get_global): New function.\n+\t* jit-result.h (gcc::jit::result::get_global): New function.\n+\t* libgccjit++.h (gccjit::context::new_global): Add \"kind\" param.\n+\t* libgccjit.c (gcc_jit_context_new_global): Likewise.\n+\t(gcc_jit_result_get_global): New API entrypoint.\n+\t* libgccjit.h (gcc_jit_result_get_global): New API entrypoint.\n+\t(enum gcc_jit_global_kind): New enum.\n+\t(gcc_jit_context_new_global): API change: add \"kind\" param.\n+\t* libgccjit.map (gcc_jit_result_get_global): New symbol.\n+\n 2015-01-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dummy-frontend.c: Include \"fixed-value.h\", \"alias.h\", \"flags.h\","}, {"sha": "07c93085442fb573b544830654d0906f19585cb9", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 372, "deletions": 277, "changes": 649, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-libgccjit 5.0.0 (experimental 20150109), January 09, 2015\n+libgccjit 5.0.0 (experimental 20150112), January 12, 2015\n \n David Malcolm\n \n@@ -5977,18 +5977,55 @@ in C.\n \n @geindex gcc_jit_context_new_global (C function)\n @anchor{topics/expressions gcc_jit_context_new_global}@anchor{a4}\n-@deffn {C Function} gcc_jit_lvalue *           gcc_jit_context_new_global (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*type, const char@w{ }*name)\n+@deffn {C Function} gcc_jit_lvalue *           gcc_jit_context_new_global (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, enum gcc_jit_global_kind@w{ }kind, gcc_jit_type@w{ }*type, const char@w{ }*name)\n \n Add a new global variable of the given type and name to the context.\n+\n+The \"kind\" parameter determines the visibility of the \"global\" outside\n+of the @pxref{16,,gcc_jit_result}:\n+\n+@geindex gcc_jit_global_kind (C type)\n+@anchor{topics/expressions gcc_jit_global_kind}@anchor{a5}\n+@deffn {C Type} enum gcc_jit_global_kind\n+@end deffn\n+\n+@geindex GCC_JIT_GLOBAL_EXPORTED (C macro)\n+@anchor{topics/expressions GCC_JIT_GLOBAL_EXPORTED}@anchor{a6}\n+@deffn {C Macro} GCC_JIT_GLOBAL_EXPORTED\n+\n+Global is defined by the client code and is visible\n+by name outside of this JIT context via\n+@pxref{a7,,gcc_jit_result_get_global()} (and this value is required for\n+the global to be accessible via that entrypoint).\n+@end deffn\n+\n+@geindex GCC_JIT_GLOBAL_INTERNAL (C macro)\n+@anchor{topics/expressions GCC_JIT_GLOBAL_INTERNAL}@anchor{a8}\n+@deffn {C Macro} GCC_JIT_GLOBAL_INTERNAL\n+\n+Global is defined by the client code, but is invisible\n+outside of it.  Analogous to a \"static\" global within a .c file.\n+Specifically, the variable will only be visible within this\n+context and within child contexts.\n+@end deffn\n+\n+@geindex GCC_JIT_GLOBAL_IMPORTED (C macro)\n+@anchor{topics/expressions GCC_JIT_GLOBAL_IMPORTED}@anchor{a9}\n+@deffn {C Macro} GCC_JIT_GLOBAL_IMPORTED\n+\n+Global is not defined by the client code; we're merely\n+referring to it.  Analogous to using an \"extern\" global from a\n+header file.\n+@end deffn\n @end deffn\n \n @node Working with pointers structs and unions,,Lvalues,Expressions\n-@anchor{topics/expressions working-with-pointers-structs-and-unions}@anchor{a5}\n+@anchor{topics/expressions working-with-pointers-structs-and-unions}@anchor{aa}\n @subsection Working with pointers, structs and unions\n \n \n @geindex gcc_jit_rvalue_dereference (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_dereference}@anchor{a6}\n+@anchor{topics/expressions gcc_jit_rvalue_dereference}@anchor{ab}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_rvalue_dereference (gcc_jit_rvalue@w{ }*rvalue, gcc_jit_location@w{ }*loc)\n \n Given an rvalue of pointer type @code{T *}, dereferencing the pointer,\n@@ -6006,7 +6043,7 @@ in C.\n Field access is provided separately for both lvalues and rvalues.\n \n @geindex gcc_jit_lvalue_access_field (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_access_field}@anchor{a7}\n+@anchor{topics/expressions gcc_jit_lvalue_access_field}@anchor{ac}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_lvalue_access_field (gcc_jit_lvalue@w{ }*struct_, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an lvalue of struct or union type, access the given field,\n@@ -6022,7 +6059,7 @@ in C.\n @end deffn\n \n @geindex gcc_jit_rvalue_access_field (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_access_field}@anchor{a8}\n+@anchor{topics/expressions gcc_jit_rvalue_access_field}@anchor{ad}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_rvalue_access_field (gcc_jit_rvalue@w{ }*struct_, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an rvalue of struct or union type, access the given field\n@@ -6038,7 +6075,7 @@ in C.\n @end deffn\n \n @geindex gcc_jit_rvalue_dereference_field (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_dereference_field}@anchor{a9}\n+@anchor{topics/expressions gcc_jit_rvalue_dereference_field}@anchor{ae}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_rvalue_dereference_field (gcc_jit_rvalue@w{ }*ptr, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an rvalue of pointer type @code{T *} where T is of struct or union\n@@ -6089,7 +6126,7 @@ in C (or, indeed, to @code{PTR + INDEX}).\n @c <http://www.gnu.org/licenses/>.\n \n @node Creating and using functions,Source Locations,Expressions,Topic Reference\n-@anchor{topics/functions doc}@anchor{aa}@anchor{topics/functions creating-and-using-functions}@anchor{ab}\n+@anchor{topics/functions doc}@anchor{af}@anchor{topics/functions creating-and-using-functions}@anchor{b0}\n @section Creating and using functions\n \n \n@@ -6102,7 +6139,7 @@ in C (or, indeed, to @code{PTR + INDEX}).\n @end menu\n \n @node Params,Functions,,Creating and using functions\n-@anchor{topics/functions params}@anchor{ac}\n+@anchor{topics/functions params}@anchor{b1}\n @subsection Params\n \n \n@@ -6125,28 +6162,28 @@ Parameters are lvalues, and thus are also rvalues (and objects), so the\n following upcasts are available:\n \n @geindex gcc_jit_param_as_lvalue (C function)\n-@anchor{topics/functions gcc_jit_param_as_lvalue}@anchor{ad}\n+@anchor{topics/functions gcc_jit_param_as_lvalue}@anchor{b2}\n @deffn {C Function} gcc_jit_lvalue *            gcc_jit_param_as_lvalue (gcc_jit_param@w{ }*param)\n \n Upcasting from param to lvalue.\n @end deffn\n \n @geindex gcc_jit_param_as_rvalue (C function)\n-@anchor{topics/functions gcc_jit_param_as_rvalue}@anchor{ae}\n+@anchor{topics/functions gcc_jit_param_as_rvalue}@anchor{b3}\n @deffn {C Function} gcc_jit_rvalue *            gcc_jit_param_as_rvalue (gcc_jit_param@w{ }*param)\n \n Upcasting from param to rvalue.\n @end deffn\n \n @geindex gcc_jit_param_as_object (C function)\n-@anchor{topics/functions gcc_jit_param_as_object}@anchor{af}\n+@anchor{topics/functions gcc_jit_param_as_object}@anchor{b4}\n @deffn {C Function} gcc_jit_object *            gcc_jit_param_as_object (gcc_jit_param@w{ }*param)\n \n Upcasting from param to object.\n @end deffn\n \n @node Functions,Blocks,Params,Creating and using functions\n-@anchor{topics/functions functions}@anchor{b0}\n+@anchor{topics/functions functions}@anchor{b5}\n @subsection Functions\n \n \n@@ -6165,7 +6202,7 @@ creating ourselves, or one that we're referencing.\n Create a gcc_jit_function with the given name and parameters.\n \n @geindex gcc_jit_function_kind (C type)\n-@anchor{topics/functions gcc_jit_function_kind}@anchor{b1}\n+@anchor{topics/functions gcc_jit_function_kind}@anchor{b6}\n @deffn {C Type} enum gcc_jit_function_kind\n @end deffn\n \n@@ -6175,7 +6212,7 @@ values:\n @quotation\n \n @geindex GCC_JIT_FUNCTION_EXPORTED (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_EXPORTED}@anchor{b2}\n+@anchor{topics/functions GCC_JIT_FUNCTION_EXPORTED}@anchor{b7}\n @deffn {C Macro} GCC_JIT_FUNCTION_EXPORTED\n \n Function is defined by the client code and visible\n@@ -6187,15 +6224,15 @@ for this function from a @pxref{16,,gcc_jit_result} via\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_INTERNAL (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_INTERNAL}@anchor{b3}\n+@anchor{topics/functions GCC_JIT_FUNCTION_INTERNAL}@anchor{b8}\n @deffn {C Macro} GCC_JIT_FUNCTION_INTERNAL\n \n Function is defined by the client code, but is invisible\n outside of the JIT.  Analogous to a \"static\" function.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_IMPORTED (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_IMPORTED}@anchor{b4}\n+@anchor{topics/functions GCC_JIT_FUNCTION_IMPORTED}@anchor{b9}\n @deffn {C Macro} GCC_JIT_FUNCTION_IMPORTED\n \n Function is not defined by the client code; we're merely\n@@ -6204,7 +6241,7 @@ header file.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_ALWAYS_INLINE (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_ALWAYS_INLINE}@anchor{b5}\n+@anchor{topics/functions GCC_JIT_FUNCTION_ALWAYS_INLINE}@anchor{ba}\n @deffn {C Macro} GCC_JIT_FUNCTION_ALWAYS_INLINE\n \n Function is only ever inlined into other functions, and is\n@@ -6221,19 +6258,19 @@ same as GCC_JIT_FUNCTION_INTERNAL.\n @end deffn\n \n @geindex gcc_jit_context_get_builtin_function (C function)\n-@anchor{topics/functions gcc_jit_context_get_builtin_function}@anchor{b6}\n+@anchor{topics/functions gcc_jit_context_get_builtin_function}@anchor{bb}\n @deffn {C Function} gcc_jit_function *gcc_jit_context_get_builtin_function (gcc_jit_context@w{ }*ctxt, const char@w{ }*name)\n @end deffn\n \n @geindex gcc_jit_function_as_object (C function)\n-@anchor{topics/functions gcc_jit_function_as_object}@anchor{b7}\n+@anchor{topics/functions gcc_jit_function_as_object}@anchor{bc}\n @deffn {C Function} gcc_jit_object *           gcc_jit_function_as_object (gcc_jit_function@w{ }*func)\n \n Upcasting from function to object.\n @end deffn\n \n @geindex gcc_jit_function_get_param (C function)\n-@anchor{topics/functions gcc_jit_function_get_param}@anchor{b8}\n+@anchor{topics/functions gcc_jit_function_get_param}@anchor{bd}\n @deffn {C Function} gcc_jit_param *            gcc_jit_function_get_param (gcc_jit_function@w{ }*func, int@w{ }index)\n \n Get the param of the given index (0-based).\n@@ -6255,7 +6292,7 @@ name.\n @end deffn\n \n @node Blocks,Statements,Functions,Creating and using functions\n-@anchor{topics/functions blocks}@anchor{b9}\n+@anchor{topics/functions blocks}@anchor{be}\n @subsection Blocks\n \n \n@@ -6278,7 +6315,7 @@ one function.\n @end deffn\n \n @geindex gcc_jit_function_new_block (C function)\n-@anchor{topics/functions gcc_jit_function_new_block}@anchor{ba}\n+@anchor{topics/functions gcc_jit_function_new_block}@anchor{bf}\n @deffn {C Function} gcc_jit_block *            gcc_jit_function_new_block (gcc_jit_function@w{ }*func, const char@w{ }*name)\n \n Create a basic block of the given name.  The name may be NULL, but\n@@ -6288,21 +6325,21 @@ messages.\n @end deffn\n \n @geindex gcc_jit_block_as_object (C function)\n-@anchor{topics/functions gcc_jit_block_as_object}@anchor{bb}\n+@anchor{topics/functions gcc_jit_block_as_object}@anchor{c0}\n @deffn {C Function} gcc_jit_object *            gcc_jit_block_as_object (gcc_jit_block@w{ }*block)\n \n Upcast from block to object.\n @end deffn\n \n @geindex gcc_jit_block_get_function (C function)\n-@anchor{topics/functions gcc_jit_block_get_function}@anchor{bc}\n+@anchor{topics/functions gcc_jit_block_get_function}@anchor{c1}\n @deffn {C Function} gcc_jit_function *            gcc_jit_block_get_function (gcc_jit_block@w{ }*block)\n \n Which function is this block within?\n @end deffn\n \n @node Statements,,Blocks,Creating and using functions\n-@anchor{topics/functions statements}@anchor{bd}\n+@anchor{topics/functions statements}@anchor{c2}\n @subsection Statements\n \n \n@@ -6403,7 +6440,7 @@ block, boolval, on_true, and on_false must be non-NULL.\n @end deffn\n \n @geindex gcc_jit_block_end_with_jump (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_jump}@anchor{be}\n+@anchor{topics/functions gcc_jit_block_end_with_jump}@anchor{c3}\n @deffn {C Function} void           gcc_jit_block_end_with_jump (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_block@w{ }*target)\n \n Terminate a block by adding a jump to the given target block.\n@@ -6418,7 +6455,7 @@ goto target;\n @end deffn\n \n @geindex gcc_jit_block_end_with_return (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_return}@anchor{bf}\n+@anchor{topics/functions gcc_jit_block_end_with_return}@anchor{c4}\n @deffn {C Function} void           gcc_jit_block_end_with_return (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*rvalue)\n \n Terminate a block by adding evaluation of an rvalue, returning the value.\n@@ -6433,7 +6470,7 @@ return expression;\n @end deffn\n \n @geindex gcc_jit_block_end_with_void_return (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_void_return}@anchor{c0}\n+@anchor{topics/functions gcc_jit_block_end_with_void_return}@anchor{c5}\n @deffn {C Function} void           gcc_jit_block_end_with_void_return (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc)\n \n Terminate a block by adding a valueless return, for use within a function\n@@ -6466,7 +6503,7 @@ return;\n @c <http://www.gnu.org/licenses/>.\n \n @node Source Locations,Compilation results,Creating and using functions,Topic Reference\n-@anchor{topics/locations source-locations}@anchor{c1}@anchor{topics/locations doc}@anchor{c2}\n+@anchor{topics/locations source-locations}@anchor{c6}@anchor{topics/locations doc}@anchor{c7}\n @section Source Locations\n \n \n@@ -6512,7 +6549,7 @@ location.\n @end menu\n \n @node Faking it,,,Source Locations\n-@anchor{topics/locations faking-it}@anchor{c3}\n+@anchor{topics/locations faking-it}@anchor{c8}\n @subsection Faking it\n \n \n@@ -6550,7 +6587,7 @@ file, giving you @emph{something} you can step through in the debugger.\n @c <http://www.gnu.org/licenses/>.\n \n @node Compilation results,,Source Locations,Topic Reference\n-@anchor{topics/results compilation-results}@anchor{c4}@anchor{topics/results doc}@anchor{c5}\n+@anchor{topics/results compilation-results}@anchor{c9}@anchor{topics/results doc}@anchor{ca}\n @section Compilation results\n \n \n@@ -6559,8 +6596,8 @@ file, giving you @emph{something} you can step through in the debugger.\n @deffn {C Type} gcc_jit_result\n \n A @cite{gcc_jit_result} encapsulates the result of compiling a context,\n-and the lifetimes of any machine code functions that are\n-returned.\n+and the lifetimes of any machine code functions or globals that are\n+within it.\n @end deffn\n \n @geindex gcc_jit_context_compile (C function)\n@@ -6569,6 +6606,10 @@ returned.\n \n This calls into GCC and builds the code, returning a\n @cite{gcc_jit_result *}.\n+\n+If this is non-NULL, the caller becomes responsible for\n+calling @pxref{39,,gcc_jit_result_release()} on it once they're done\n+with it.\n @end deffn\n \n @geindex gcc_jit_result_get_code (C function)\n@@ -6581,7 +6622,7 @@ Functions are looked up by name.  For this to succeed, a function\n with a name matching @cite{funcname} must have been created on\n @cite{result}'s context (or a parent context) via a call to\n @pxref{11,,gcc_jit_context_new_function()} with @cite{kind}\n-@pxref{b2,,GCC_JIT_FUNCTION_EXPORTED}:\n+@pxref{b7,,GCC_JIT_FUNCTION_EXPORTED}:\n \n @example\n gcc_jit_context_new_function (ctxt,\n@@ -6606,7 +6647,57 @@ function pointer of the correct type before it can be called.\n \n Note that the resulting machine code becomes invalid after\n @pxref{39,,gcc_jit_result_release()} is called on the\n-@cite{gcc_jit_result *}; attempting to call it after that may lead\n+@pxref{16,,gcc_jit_result *}; attempting to call it after that may lead\n+to a segmentation fault.\n+@end deffn\n+\n+@geindex gcc_jit_result_get_global (C function)\n+@anchor{topics/results gcc_jit_result_get_global}@anchor{a7}\n+@deffn {C Function} void *           gcc_jit_result_get_global (gcc_jit_result@w{ }*result, const char@w{ }*name)\n+\n+Locate a given global within the built machine code.\n+\n+Globals are looked up by name.  For this to succeed, a global\n+with a name matching @cite{name} must have been created on\n+@cite{result}'s context (or a parent context) via a call to\n+@pxref{a4,,gcc_jit_context_new_global()} with @cite{kind}\n+@pxref{a6,,GCC_JIT_GLOBAL_EXPORTED}.\n+\n+If the global is found, the result will need to be cast to a\n+pointer of the correct type before it can be called.\n+\n+This is a @emph{pointer} to the global, so e.g. for an @code{int} this is\n+an @code{int *}.\n+\n+For example, given an @code{int foo;} created this way:\n+\n+@example\n+gcc_jit_lvalue *exported_global =\n+  gcc_jit_context_new_global (ctxt,\n+  any_location, /* or NULL */\n+  GCC_JIT_GLOBAL_EXPORTED,\n+  int_type,\n+  \"foo\");\n+@end example\n+\n+@noindent\n+\n+we can access it like this:\n+\n+@example\n+int *ptr_to_foo =\n+  (int *)gcc_jit_result_get_global (result, \"foo\");\n+@end example\n+\n+@noindent\n+\n+If such a global is not found (or @cite{result} or @cite{name} are\n+@code{NULL}), an error message will be emitted on stderr and\n+@code{NULL} will be returned.\n+\n+Note that the resulting address becomes invalid after\n+@pxref{39,,gcc_jit_result_release()} is called on the\n+@pxref{16,,gcc_jit_result *}; attempting to use it after that may lead\n to a segmentation fault.\n @end deffn\n \n@@ -6616,8 +6707,9 @@ to a segmentation fault.\n \n Once we're done with the code, this unloads the built .so file.\n This cleans up the result; after calling this, it's no longer\n-valid to use the result, or any code that was obtained by calling\n-@pxref{17,,gcc_jit_result_get_code()} on it.\n+valid to use the result, or any code or globals that were obtained\n+by calling @pxref{17,,gcc_jit_result_get_code()} or\n+@pxref{a7,,gcc_jit_result_get_global()} on it.\n @end deffn\n \n @c Copyright (C) 2014 Free Software Foundation, Inc.\n@@ -6638,7 +6730,7 @@ valid to use the result, or any code that was obtained by calling\n @c <http://www.gnu.org/licenses/>.\n \n @node C++ bindings for libgccjit,Internals,Topic Reference,Top\n-@anchor{cp/index c-bindings-for-libgccjit}@anchor{c6}@anchor{cp/index doc}@anchor{c7}\n+@anchor{cp/index c-bindings-for-libgccjit}@anchor{cb}@anchor{cp/index doc}@anchor{cc}\n @chapter C++ bindings for libgccjit\n \n \n@@ -6780,7 +6872,7 @@ Source Locations\n \n \n @node Tutorial<2>,Topic Reference<2>,,C++ bindings for libgccjit\n-@anchor{cp/intro/index doc}@anchor{c8}@anchor{cp/intro/index tutorial}@anchor{c9}\n+@anchor{cp/intro/index doc}@anchor{cd}@anchor{cp/intro/index tutorial}@anchor{ce}\n @section Tutorial\n \n \n@@ -6810,7 +6902,7 @@ Source Locations\n @end menu\n \n @node Tutorial part 1 \"Hello world\"<2>,Tutorial part 2 Creating a trivial machine code function<2>,,Tutorial<2>\n-@anchor{cp/intro/tutorial01 doc}@anchor{ca}@anchor{cp/intro/tutorial01 tutorial-part-1-hello-world}@anchor{cb}\n+@anchor{cp/intro/tutorial01 doc}@anchor{cf}@anchor{cp/intro/tutorial01 tutorial-part-1-hello-world}@anchor{d0}\n @subsection Tutorial part 1: \"Hello world\"\n \n \n@@ -6980,7 +7072,7 @@ hello world\n @c <http://www.gnu.org/licenses/>.\n \n @node Tutorial part 2 Creating a trivial machine code function<2>,Tutorial part 3 Loops and variables<2>,Tutorial part 1 \"Hello world\"<2>,Tutorial<2>\n-@anchor{cp/intro/tutorial02 doc}@anchor{cc}@anchor{cp/intro/tutorial02 tutorial-part-2-creating-a-trivial-machine-code-function}@anchor{cd}\n+@anchor{cp/intro/tutorial02 doc}@anchor{d1}@anchor{cp/intro/tutorial02 tutorial-part-2-creating-a-trivial-machine-code-function}@anchor{d2}\n @subsection Tutorial part 2: Creating a trivial machine code function\n \n \n@@ -7009,7 +7101,7 @@ All state associated with compilation is associated with a\n @code{gccjit::context}, which is a thin C++ wrapper around the C API's\n @pxref{8,,gcc_jit_context *}.\n \n-Create one using @pxref{ce,,gccjit;;context;;acquire()}:\n+Create one using @pxref{d3,,gccjit;;context;;acquire()}:\n \n @example\n gccjit::context ctxt;\n@@ -7022,7 +7114,7 @@ The JIT library has a system of types.  It is statically-typed: every\n expression is of a specific type, fixed at compile-time.  In our example,\n all of the expressions are of the C @cite{int} type, so let's obtain this from\n the context, as a @code{gccjit::type}, using\n-@pxref{cf,,gccjit;;context;;get_type()}:\n+@pxref{d4,,gccjit;;context;;get_type()}:\n \n @example\n gccjit::type int_type = ctxt.get_type (GCC_JIT_TYPE_INT);\n@@ -7035,7 +7127,7 @@ entity in the API is associated with a @code{gccjit::context}.\n \n Memory management is easy: all such \"contextual\" objects are automatically\n cleaned up for you when the context is released, using\n-@pxref{d0,,gccjit;;context;;release()}:\n+@pxref{d5,,gccjit;;context;;release()}:\n \n @example\n ctxt.release ();\n@@ -7068,7 +7160,7 @@ The C++ class hierarchy within the @code{gccjit} namespace looks like this:\n \n One thing you can do with a @code{gccjit::object} is\n to ask it for a human-readable description as a @code{std::string}, using\n-@pxref{d1,,gccjit;;object;;get_debug_string()}:\n+@pxref{d6,,gccjit;;object;;get_debug_string()}:\n \n @example\n printf (\"obj: %s\\n\", obj.get_debug_string ().c_str ());\n@@ -7088,7 +7180,7 @@ This is invaluable when debugging.\n \n Let's create the function.  To do so, we first need to construct\n its single parameter, specifying its type and giving it a name,\n-using @pxref{d2,,gccjit;;context;;new_param()}:\n+using @pxref{d7,,gccjit;;context;;new_param()}:\n \n @example\n gccjit::param param_i = ctxt.new_param (int_type, \"i\");\n@@ -7137,7 +7229,7 @@ gccjit::block block = func.new_block ();\n Our basic block is relatively simple: it immediately terminates by\n returning the value of an expression.\n \n-We can build the expression using @pxref{d3,,gccjit;;context;;new_binary_op()}:\n+We can build the expression using @pxref{d8,,gccjit;;context;;new_binary_op()}:\n \n @example\n gccjit::rvalue expr =\n@@ -7150,7 +7242,7 @@ gccjit::rvalue expr =\n \n A @code{gccjit::rvalue} is another example of a\n @code{gccjit::object} subclass.  As before, we can print it with\n-@pxref{d1,,gccjit;;object;;get_debug_string()}.\n+@pxref{d6,,gccjit;;object;;get_debug_string()}.\n \n @example\n printf (\"expr: %s\\n\", expr.get_debug_string ().c_str ());\n@@ -7187,7 +7279,7 @@ block.end_with_return (expr);\n @noindent\n \n OK, we've populated the context.  We can now compile it using\n-@pxref{d4,,gccjit;;context;;compile()}:\n+@pxref{d9,,gccjit;;context;;compile()}:\n \n @example\n gcc_jit_result *result;\n@@ -7237,12 +7329,12 @@ result: 25\n @end menu\n \n @node Options<3>,Full example<3>,,Tutorial part 2 Creating a trivial machine code function<2>\n-@anchor{cp/intro/tutorial02 options}@anchor{d5}\n+@anchor{cp/intro/tutorial02 options}@anchor{da}\n @subsubsection Options\n \n \n To get more information on what's going on, you can set debugging flags\n-on the context using @pxref{d6,,gccjit;;context;;set_bool_option()}.\n+on the context using @pxref{db,,gccjit;;context;;set_bool_option()}.\n \n @c (I'm deliberately not mentioning\n @c :c:macro:`GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE` here since I think\n@@ -7314,7 +7406,7 @@ square:\n \n By default, no optimizations are performed, the equivalent of GCC's\n @cite{-O0} option.  We can turn things up to e.g. @cite{-O3} by calling\n-@pxref{d7,,gccjit;;context;;set_int_option()} with\n+@pxref{dc,,gccjit;;context;;set_int_option()} with\n @pxref{1f,,GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}:\n \n @example\n@@ -7348,7 +7440,7 @@ square:\n Naturally this has only a small effect on such a trivial function.\n \n @node Full example<3>,,Options<3>,Tutorial part 2 Creating a trivial machine code function<2>\n-@anchor{cp/intro/tutorial02 full-example}@anchor{d8}\n+@anchor{cp/intro/tutorial02 full-example}@anchor{dd}\n @subsubsection Full example\n \n \n@@ -7491,7 +7583,7 @@ result: 25\n @c <http://www.gnu.org/licenses/>.\n \n @node Tutorial part 3 Loops and variables<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>,Tutorial part 2 Creating a trivial machine code function<2>,Tutorial<2>\n-@anchor{cp/intro/tutorial03 tutorial-part-3-loops-and-variables}@anchor{d9}@anchor{cp/intro/tutorial03 doc}@anchor{da}\n+@anchor{cp/intro/tutorial03 tutorial-part-3-loops-and-variables}@anchor{de}@anchor{cp/intro/tutorial03 doc}@anchor{df}\n @subsection Tutorial part 3: Loops and variables\n \n \n@@ -7615,7 +7707,7 @@ gccjit::function func =\n @end menu\n \n @node Expressions lvalues and rvalues<2>,Control flow<2>,,Tutorial part 3 Loops and variables<2>\n-@anchor{cp/intro/tutorial03 expressions-lvalues-and-rvalues}@anchor{db}\n+@anchor{cp/intro/tutorial03 expressions-lvalues-and-rvalues}@anchor{e0}\n @subsubsection Expressions: lvalues and rvalues\n \n \n@@ -7688,7 +7780,7 @@ body of a function.\n \n Our new example has a new kind of expression: we have two local\n variables.  We create them by calling\n-@pxref{dc,,gccjit;;function;;new_local()}, supplying a type and a name:\n+@pxref{e1,,gccjit;;function;;new_local()}, supplying a type and a name:\n \n @example\n /* Build locals:  */\n@@ -7714,7 +7806,7 @@ Instead, having added the local to the function, we have to separately add\n an assignment of @cite{0} to @cite{local_i} at the beginning of the function.\n \n @node Control flow<2>,Visualizing the control flow graph<2>,Expressions lvalues and rvalues<2>,Tutorial part 3 Loops and variables<2>\n-@anchor{cp/intro/tutorial03 control-flow}@anchor{dd}\n+@anchor{cp/intro/tutorial03 control-flow}@anchor{e2}\n @subsubsection Control flow\n \n \n@@ -7753,8 +7845,8 @@ We now populate each block with statements.\n \n The entry block @cite{b_initial} consists of initializations followed by a jump\n to the conditional.  We assign @cite{0} to @cite{i} and to @cite{sum}, using\n-@pxref{de,,gccjit;;block;;add_assignment()} to add\n-an assignment statement, and using @pxref{df,,gccjit;;context;;zero()} to get\n+@pxref{e3,,gccjit;;block;;add_assignment()} to add\n+an assignment statement, and using @pxref{e4,,gccjit;;context;;zero()} to get\n the constant value @cite{0} for the relevant type for the right-hand side of\n the assignment:\n \n@@ -7781,7 +7873,7 @@ C example. It contains a single statement: a conditional, which jumps to\n one of two destination blocks depending on a boolean\n @code{gccjit::rvalue}, in this case the comparison of @cite{i} and @cite{n}.\n \n-We could build the comparison using @pxref{e0,,gccjit;;context;;new_comparison()}:\n+We could build the comparison using @pxref{e5,,gccjit;;context;;new_comparison()}:\n \n @example\n gccjit::rvalue guard =\n@@ -7792,7 +7884,7 @@ gccjit::rvalue guard =\n @noindent\n \n and can then use this to add @cite{b_loop_cond}'s sole statement, via\n-@pxref{e1,,gccjit;;block;;end_with_conditional()}:\n+@pxref{e6,,gccjit;;block;;end_with_conditional()}:\n \n @example\n b_loop_cond.end_with_conditional (guard);\n@@ -7824,7 +7916,7 @@ Next, we populate the body of the loop.\n \n The C statement @cite{sum += i * i;} is an assignment operation, where an\n lvalue is modified \"in-place\".  We use\n-@pxref{e2,,gccjit;;block;;add_assignment_op()} to handle these operations:\n+@pxref{e7,,gccjit;;block;;add_assignment_op()} to handle these operations:\n \n @example\n /* sum += i * i */\n@@ -7852,7 +7944,7 @@ b_loop_body.add_assignment_op (i,\n @cartouche\n @quotation Note \n For numeric constants other than 0 or 1, we could use\n-@pxref{e3,,gccjit;;context;;new_rvalue()}, which has overloads\n+@pxref{e8,,gccjit;;context;;new_rvalue()}, which has overloads\n for both @code{int} and @code{double}.\n @end quotation\n @end cartouche\n@@ -7928,12 +8020,12 @@ result: 285\n @noindent\n \n @node Visualizing the control flow graph<2>,Full example<4>,Control flow<2>,Tutorial part 3 Loops and variables<2>\n-@anchor{cp/intro/tutorial03 visualizing-the-control-flow-graph}@anchor{e4}\n+@anchor{cp/intro/tutorial03 visualizing-the-control-flow-graph}@anchor{e9}\n @subsubsection Visualizing the control flow graph\n \n \n You can see the control flow graph of a function using\n-@pxref{e5,,gccjit;;function;;dump_to_dot()}:\n+@pxref{ea,,gccjit;;function;;dump_to_dot()}:\n \n @example\n func.dump_to_dot (\"/tmp/sum-of-squares.dot\");\n@@ -7967,7 +8059,7 @@ install it with @cite{yum install python-xdot}):\n @end quotation\n \n @node Full example<4>,,Visualizing the control flow graph<2>,Tutorial part 3 Loops and variables<2>\n-@anchor{cp/intro/tutorial03 full-example}@anchor{e6}\n+@anchor{cp/intro/tutorial03 full-example}@anchor{eb}\n @subsubsection Full example\n \n \n@@ -8150,7 +8242,7 @@ loop_test returned: 285\n @c <http://www.gnu.org/licenses/>.\n \n @node Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>,,Tutorial part 3 Loops and variables<2>,Tutorial<2>\n-@anchor{cp/intro/tutorial04 tutorial-part-4-adding-jit-compilation-to-a-toy-interpreter}@anchor{e7}@anchor{cp/intro/tutorial04 doc}@anchor{e8}\n+@anchor{cp/intro/tutorial04 tutorial-part-4-adding-jit-compilation-to-a-toy-interpreter}@anchor{ec}@anchor{cp/intro/tutorial04 doc}@anchor{ed}\n @subsection Tutorial part 4: Adding JIT-compilation to a toy interpreter\n \n \n@@ -8172,7 +8264,7 @@ to it.\n @end menu\n \n @node Our toy interpreter<2>,Compiling to machine code<2>,,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 our-toy-interpreter}@anchor{e9}\n+@anchor{cp/intro/tutorial04 our-toy-interpreter}@anchor{ee}\n @subsubsection Our toy interpreter\n \n \n@@ -8580,7 +8672,7 @@ toyvm_function::interpret (int arg, FILE *trace)\n @end quotation\n \n @node Compiling to machine code<2>,Setting things up<2>,Our toy interpreter<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 compiling-to-machine-code}@anchor{ea}\n+@anchor{cp/intro/tutorial04 compiling-to-machine-code}@anchor{ef}\n @subsubsection Compiling to machine code\n \n \n@@ -8660,7 +8752,7 @@ This means our compiler has the following state:\n @end quotation\n \n @node Setting things up<2>,Populating the function<2>,Compiling to machine code<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 setting-things-up}@anchor{eb}\n+@anchor{cp/intro/tutorial04 setting-things-up}@anchor{f0}\n @subsubsection Setting things up\n \n \n@@ -8828,7 +8920,7 @@ We create the locals within the function.\n @end quotation\n \n @node Populating the function<2>,Verifying the control flow graph<2>,Setting things up<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 populating-the-function}@anchor{ec}\n+@anchor{cp/intro/tutorial04 populating-the-function}@anchor{f1}\n @subsubsection Populating the function\n \n \n@@ -8956,7 +9048,7 @@ stack into @code{y} instead erroneously assigned it to @code{x}, leaving @code{y\n uninitialized.\n \n To track this kind of thing down, we can use\n-@pxref{ed,,gccjit;;block;;add_comment()} to add descriptive comments\n+@pxref{f2,,gccjit;;block;;add_comment()} to add descriptive comments\n to the internal representation.  This is invaluable when looking through\n the generated IR for, say @code{factorial}:\n \n@@ -9105,14 +9197,14 @@ to the next block.\n This is analogous to simply incrementing the program counter.\n \n @node Verifying the control flow graph<2>,Compiling the context<2>,Populating the function<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 verifying-the-control-flow-graph}@anchor{ee}\n+@anchor{cp/intro/tutorial04 verifying-the-control-flow-graph}@anchor{f3}\n @subsubsection Verifying the control flow graph\n \n \n Having finished looping over the blocks, the context is complete.\n \n As before, we can verify that the control flow and statements are sane by\n-using @pxref{e5,,gccjit;;function;;dump_to_dot()}:\n+using @pxref{ea,,gccjit;;function;;dump_to_dot()}:\n \n @example\n fn.dump_to_dot (\"/tmp/factorial.dot\");\n@@ -9136,7 +9228,7 @@ errors in our compiler.\n @end quotation\n \n @node Compiling the context<2>,Single-stepping through the generated code<2>,Verifying the control flow graph<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 compiling-the-context}@anchor{ef}\n+@anchor{cp/intro/tutorial04 compiling-the-context}@anchor{f4}\n @subsubsection Compiling the context\n \n \n@@ -9173,7 +9265,7 @@ We can now run the result:\n @end quotation\n \n @node Single-stepping through the generated code<2>,Examining the generated code<2>,Compiling the context<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 single-stepping-through-the-generated-code}@anchor{f0}\n+@anchor{cp/intro/tutorial04 single-stepping-through-the-generated-code}@anchor{f5}\n @subsubsection Single-stepping through the generated code\n \n \n@@ -9187,14 +9279,14 @@ It's possible to debug the generated code.  To do this we need to both:\n @item \n Set up source code locations for our statements, so that we can\n meaningfully step through the code.  We did this above by\n-calling @pxref{f1,,gccjit;;context;;new_location()} and using the\n+calling @pxref{f6,,gccjit;;context;;new_location()} and using the\n results.\n \n @item \n Enable the generation of debugging information, by setting\n @pxref{42,,GCC_JIT_BOOL_OPTION_DEBUGINFO} on the\n @code{gccjit::context} via\n-@pxref{d6,,gccjit;;context;;set_bool_option()}:\n+@pxref{db,,gccjit;;context;;set_bool_option()}:\n \n @example\n ctxt.set_bool_option (GCC_JIT_BOOL_OPTION_DEBUGINFO, 1);\n@@ -9266,14 +9358,14 @@ optimization level in a regular compiler.\n @end cartouche\n \n @node Examining the generated code<2>,Putting it all together<2>,Single-stepping through the generated code<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 examining-the-generated-code}@anchor{f2}\n+@anchor{cp/intro/tutorial04 examining-the-generated-code}@anchor{f7}\n @subsubsection Examining the generated code\n \n \n How good is the optimized code?\n \n We can turn up optimizations, by calling\n-@pxref{d7,,gccjit;;context;;set_int_option()} with\n+@pxref{dc,,gccjit;;context;;set_int_option()} with\n @pxref{1f,,GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}:\n \n @example\n@@ -9455,7 +9547,7 @@ Note that the stack pushing and popping have been eliminated, as has the\n recursive call (in favor of an iteration).\n \n @node Putting it all together<2>,Behind the curtain How does our code get optimized?<2>,Examining the generated code<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 putting-it-all-together}@anchor{f3}\n+@anchor{cp/intro/tutorial04 putting-it-all-together}@anchor{f8}\n @subsubsection Putting it all together\n \n \n@@ -9488,7 +9580,7 @@ compiler result: 55\n @noindent\n \n @node Behind the curtain How does our code get optimized?<2>,,Putting it all together<2>,Tutorial part 4 Adding JIT-compilation to a toy interpreter<2>\n-@anchor{cp/intro/tutorial04 behind-the-curtain-how-does-our-code-get-optimized}@anchor{f4}\n+@anchor{cp/intro/tutorial04 behind-the-curtain-how-does-our-code-get-optimized}@anchor{f9}\n @subsubsection Behind the curtain: How does our code get optimized?\n \n \n@@ -9689,7 +9781,7 @@ representation: @code{initial}, @code{instr4} and @code{instr9}.\n @end menu\n \n @node Optimizing away stack manipulation<2>,Elimination of tail recursion<2>,,Behind the curtain How does our code get optimized?<2>\n-@anchor{cp/intro/tutorial04 optimizing-away-stack-manipulation}@anchor{f5}\n+@anchor{cp/intro/tutorial04 optimizing-away-stack-manipulation}@anchor{fa}\n @subsubsection Optimizing away stack manipulation\n \n \n@@ -9969,7 +10061,7 @@ instr9:\n @noindent\n \n @node Elimination of tail recursion<2>,,Optimizing away stack manipulation<2>,Behind the curtain How does our code get optimized?<2>\n-@anchor{cp/intro/tutorial04 elimination-of-tail-recursion}@anchor{f6}\n+@anchor{cp/intro/tutorial04 elimination-of-tail-recursion}@anchor{fb}\n @subsubsection Elimination of tail recursion\n \n \n@@ -10056,7 +10148,7 @@ instr9:\n @c <http://www.gnu.org/licenses/>.\n \n @node Topic Reference<2>,,Tutorial<2>,C++ bindings for libgccjit\n-@anchor{cp/topics/index doc}@anchor{f7}@anchor{cp/topics/index topic-reference}@anchor{f8}\n+@anchor{cp/topics/index doc}@anchor{fc}@anchor{cp/topics/index topic-reference}@anchor{fd}\n @section Topic Reference\n \n \n@@ -10140,22 +10232,22 @@ Source Locations\n \n \n @node Compilation contexts<2>,Objects<2>,,Topic Reference<2>\n-@anchor{cp/topics/contexts compilation-contexts}@anchor{f9}@anchor{cp/topics/contexts doc}@anchor{fa}\n+@anchor{cp/topics/contexts compilation-contexts}@anchor{fe}@anchor{cp/topics/contexts doc}@anchor{ff}\n @subsection Compilation contexts\n \n \n @geindex gccjit;;context (C++ class)\n-@anchor{cp/topics/contexts gccjit context}@anchor{fb}\n+@anchor{cp/topics/contexts gccjit context}@anchor{100}\n @deffn {C++ Class} gccjit::context\n @end deffn\n \n-The top-level of the C++ API is the @pxref{fb,,gccjit;;context} type.\n+The top-level of the C++ API is the @pxref{100,,gccjit;;context} type.\n \n-A @pxref{fb,,gccjit;;context} instance encapsulates the state of a\n+A @pxref{100,,gccjit;;context} instance encapsulates the state of a\n compilation.\n \n You can set up options on it, and add types, functions and code.\n-Invoking @pxref{d4,,gccjit;;context;;compile()} on it gives you a\n+Invoking @pxref{d9,,gccjit;;context;;compile()} on it gives you a\n @pxref{16,,gcc_jit_result *}.\n \n It is a thin wrapper around the C API's @pxref{8,,gcc_jit_context *}.\n@@ -10170,7 +10262,7 @@ It is a thin wrapper around the C API's @pxref{8,,gcc_jit_context *}.\n @end menu\n \n @node Lifetime-management<2>,Thread-safety<2>,,Compilation contexts<2>\n-@anchor{cp/topics/contexts lifetime-management}@anchor{fc}\n+@anchor{cp/topics/contexts lifetime-management}@anchor{101}\n @subsubsection Lifetime-management\n \n \n@@ -10179,16 +10271,16 @@ have their lifetime bounded by the context they are created within, and\n cleanup of such objects is done for you when the context is released.\n \n @geindex gccjit;;context;;acquire (C++ function)\n-@anchor{cp/topics/contexts gccjit context acquire}@anchor{ce}\n+@anchor{cp/topics/contexts gccjit context acquire}@anchor{d3}\n @deffn {C++ Function} gccjit::context gccjit::context::acquire ()\n \n-This function acquires a new @pxref{fb,,gccjit;;context} instance,\n+This function acquires a new @pxref{100,,gccjit;;context} instance,\n which is independent of any others that may be present within this\n process.\n @end deffn\n \n @geindex gccjit;;context;;release (C++ function)\n-@anchor{cp/topics/contexts gccjit context release}@anchor{d0}\n+@anchor{cp/topics/contexts gccjit context release}@anchor{d5}\n @deffn {C++ Function} void gccjit::context::release ()\n \n This function releases all resources associated with the given context.\n@@ -10207,7 +10299,7 @@ ctxt.release ();\n @end deffn\n \n @geindex gccjit;;context;;new_child_context (C++ function)\n-@anchor{cp/topics/contexts gccjit context new_child_context}@anchor{fd}\n+@anchor{cp/topics/contexts gccjit context new_child_context}@anchor{102}\n @deffn {C++ Function} gccjit::context gccjit::context::new_child_context ()\n \n Given an existing JIT context, create a child context.\n@@ -10239,24 +10331,24 @@ there will likely be a performance hit for such nesting.\n @end deffn\n \n @node Thread-safety<2>,Error-handling<3>,Lifetime-management<2>,Compilation contexts<2>\n-@anchor{cp/topics/contexts thread-safety}@anchor{fe}\n+@anchor{cp/topics/contexts thread-safety}@anchor{103}\n @subsubsection Thread-safety\n \n \n-Instances of @pxref{fb,,gccjit;;context} created via\n-@pxref{ce,,gccjit;;context;;acquire()} are independent from each other:\n+Instances of @pxref{100,,gccjit;;context} created via\n+@pxref{d3,,gccjit;;context;;acquire()} are independent from each other:\n only one thread may use a given context at once, but multiple threads\n could each have their own contexts without needing locks.\n \n-Contexts created via @pxref{fd,,gccjit;;context;;new_child_context()} are\n+Contexts created via @pxref{102,,gccjit;;context;;new_child_context()} are\n related to their parent context.  They can be partitioned by their\n ultimate ancestor into independent \"family trees\".   Only one thread\n within a process may use a given \"family tree\" of such contexts at once,\n and if you're using multiple threads you should provide your own locking\n around entire such context partitions.\n \n @node Error-handling<3>,Debugging<2>,Thread-safety<2>,Compilation contexts<2>\n-@anchor{cp/topics/contexts error-handling}@anchor{ff}\n+@anchor{cp/topics/contexts error-handling}@anchor{104}\n @subsubsection Error-handling\n \n \n@@ -10269,10 +10361,10 @@ NULL.  You don't have to check everywhere for NULL results, since the\n API gracefully handles a NULL being passed in for any argument.\n \n Errors are printed on stderr and can be queried using\n-@pxref{100,,gccjit;;context;;get_first_error()}.\n+@pxref{105,,gccjit;;context;;get_first_error()}.\n \n @geindex gccjit;;context;;get_first_error (C++ function)\n-@anchor{cp/topics/contexts gccjit context get_first_error__gccjit contextP}@anchor{100}\n+@anchor{cp/topics/contexts gccjit context get_first_error__gccjit contextP}@anchor{105}\n @deffn {C++ Function} const char* gccjit::context::get_first_error (gccjit::context* ctxt)\n \n Returns the first error message that occurred on the context.\n@@ -10284,26 +10376,26 @@ If no errors occurred, this will be NULL.\n @end deffn\n \n @node Debugging<2>,Options<4>,Error-handling<3>,Compilation contexts<2>\n-@anchor{cp/topics/contexts debugging}@anchor{101}\n+@anchor{cp/topics/contexts debugging}@anchor{106}\n @subsubsection Debugging\n \n \n @geindex gccjit;;context;;dump_to_file (C++ function)\n-@anchor{cp/topics/contexts gccjit context dump_to_file__ssCR i}@anchor{102}\n+@anchor{cp/topics/contexts gccjit context dump_to_file__ssCR i}@anchor{107}\n @deffn {C++ Function} void gccjit::context::dump_to_file (const std::string& path, int update_locations)\n \n To help with debugging: dump a C-like representation to the given path,\n describing what's been set up on the context.\n \n-If \"update_locations\" is true, then also set up @pxref{103,,gccjit;;location}\n+If \"update_locations\" is true, then also set up @pxref{108,,gccjit;;location}\n information throughout the context, pointing at the dump file as if it\n were a source file.  This may be of use in conjunction with\n @code{GCCJIT::BOOL_OPTION_DEBUGINFO} to allow stepping through the\n code in a debugger.\n @end deffn\n \n @node Options<4>,,Debugging<2>,Compilation contexts<2>\n-@anchor{cp/topics/contexts options}@anchor{104}\n+@anchor{cp/topics/contexts options}@anchor{109}\n @subsubsection Options\n \n \n@@ -10315,12 +10407,12 @@ code in a debugger.\n @end menu\n \n @node String Options<2>,Boolean options<2>,,Options<4>\n-@anchor{cp/topics/contexts string-options}@anchor{105}\n+@anchor{cp/topics/contexts string-options}@anchor{10a}\n @subsubsection String Options\n \n \n @geindex gccjit;;context;;set_str_option (C++ function)\n-@anchor{cp/topics/contexts gccjit context set_str_option__enum cCP}@anchor{106}\n+@anchor{cp/topics/contexts gccjit context set_str_option__enum cCP}@anchor{10b}\n @deffn {C++ Function} void gccjit::context::set_str_option (enum gcc_jit_str_option, const char* value)\n \n Set a string option of the context.\n@@ -10331,12 +10423,12 @@ meaning.\n @end deffn\n \n @node Boolean options<2>,Integer options<2>,String Options<2>,Options<4>\n-@anchor{cp/topics/contexts boolean-options}@anchor{107}\n+@anchor{cp/topics/contexts boolean-options}@anchor{10c}\n @subsubsection Boolean options\n \n \n @geindex gccjit;;context;;set_bool_option (C++ function)\n-@anchor{cp/topics/contexts gccjit context set_bool_option__enum i}@anchor{d6}\n+@anchor{cp/topics/contexts gccjit context set_bool_option__enum i}@anchor{db}\n @deffn {C++ Function} void gccjit::context::set_bool_option (enum gcc_jit_bool_option, int value)\n \n Set a boolean option of the context.\n@@ -10347,12 +10439,12 @@ meaning.\n @end deffn\n \n @node Integer options<2>,,Boolean options<2>,Options<4>\n-@anchor{cp/topics/contexts integer-options}@anchor{108}\n+@anchor{cp/topics/contexts integer-options}@anchor{10d}\n @subsubsection Integer options\n \n \n @geindex gccjit;;context;;set_int_option (C++ function)\n-@anchor{cp/topics/contexts gccjit context set_int_option__enum i}@anchor{d7}\n+@anchor{cp/topics/contexts gccjit context set_int_option__enum i}@anchor{dc}\n @deffn {C++ Function} void gccjit::context::set_int_option (enum gcc_jit_int_option, int value)\n \n Set an integer option of the context.\n@@ -10380,18 +10472,18 @@ meaning.\n @c <http://www.gnu.org/licenses/>.\n \n @node Objects<2>,Types<2>,Compilation contexts<2>,Topic Reference<2>\n-@anchor{cp/topics/objects objects}@anchor{109}@anchor{cp/topics/objects doc}@anchor{10a}\n+@anchor{cp/topics/objects objects}@anchor{10e}@anchor{cp/topics/objects doc}@anchor{10f}\n @subsection Objects\n \n \n @geindex gccjit;;object (C++ class)\n-@anchor{cp/topics/objects gccjit object}@anchor{10b}\n+@anchor{cp/topics/objects gccjit object}@anchor{110}\n @deffn {C++ Class} gccjit::object\n @end deffn\n \n Almost every entity in the API (with the exception of\n-@pxref{fb,,gccjit;;context} and @pxref{16,,gcc_jit_result *}) is a\n-\"contextual\" object, a @pxref{10b,,gccjit;;object}.\n+@pxref{100,,gccjit;;context} and @pxref{16,,gcc_jit_result *}) is a\n+\"contextual\" object, a @pxref{110,,gccjit;;object}.\n \n A JIT object:\n \n@@ -10401,7 +10493,7 @@ A JIT object:\n @itemize *\n \n @item \n-is associated with a @pxref{fb,,gccjit;;context}.\n+is associated with a @pxref{100,,gccjit;;context}.\n \n @item \n is automatically cleaned up for you when its context is released so\n@@ -10427,17 +10519,17 @@ The C++ class hierarchy within the @code{gccjit} namespace looks like this:\n \n @noindent\n \n-The @pxref{10b,,gccjit;;object} base class has the following operations:\n+The @pxref{110,,gccjit;;object} base class has the following operations:\n \n @geindex gccjit;;object;;get_context (C++ function)\n-@anchor{cp/topics/objects gccjit object get_contextC}@anchor{10c}\n+@anchor{cp/topics/objects gccjit object get_contextC}@anchor{111}\n @deffn {C++ Function} gccjit::context gccjit::object::get_context () const\n \n Which context is the obj within?\n @end deffn\n \n @geindex gccjit;;object;;get_debug_string (C++ function)\n-@anchor{cp/topics/objects gccjit object get_debug_stringC}@anchor{d1}\n+@anchor{cp/topics/objects gccjit object get_debug_stringC}@anchor{d6}\n @deffn {C++ Function} std::string gccjit::object::get_debug_string () const\n \n Generate a human-readable description for the given object.\n@@ -10477,16 +10569,16 @@ obj: 4.0 * (float)i\n @c <http://www.gnu.org/licenses/>.\n \n @node Types<2>,Expressions<2>,Objects<2>,Topic Reference<2>\n-@anchor{cp/topics/types doc}@anchor{10d}@anchor{cp/topics/types types}@anchor{10e}\n+@anchor{cp/topics/types doc}@anchor{112}@anchor{cp/topics/types types}@anchor{113}\n @subsection Types\n \n \n @geindex gccjit;;type (C++ class)\n-@anchor{cp/topics/types gccjit type}@anchor{10f}\n+@anchor{cp/topics/types gccjit type}@anchor{114}\n @deffn {C++ Class} gccjit::type\n \n gccjit::type represents a type within the library.  It is a subclass\n-of @pxref{10b,,gccjit;;object}.\n+of @pxref{110,,gccjit;;object}.\n @end deffn\n \n Types can be created in several ways:\n@@ -10496,7 +10588,7 @@ Types can be created in several ways:\n \n @item \n fundamental types can be accessed using\n-@pxref{cf,,gccjit;;context;;get_type()}:\n+@pxref{d4,,gccjit;;context;;get_type()}:\n \n @example\n gccjit::type int_type = ctxt.get_type (GCC_JIT_TYPE_INT);\n@@ -10516,7 +10608,7 @@ See @pxref{b,,gcc_jit_context_get_type()} for the available types.\n \n @item \n derived types can be accessed by using functions such as\n-@pxref{110,,gccjit;;type;;get_pointer()} and @pxref{111,,gccjit;;type;;get_const()}:\n+@pxref{115,,gccjit;;type;;get_pointer()} and @pxref{116,,gccjit;;type;;get_const()}:\n \n @example\n gccjit::type const_int_star = int_type.get_const ().get_pointer ();\n@@ -10537,27 +10629,27 @@ by creating structures (see below).\n @end menu\n \n @node Standard types<2>,Pointers const and volatile<2>,,Types<2>\n-@anchor{cp/topics/types standard-types}@anchor{112}\n+@anchor{cp/topics/types standard-types}@anchor{117}\n @subsubsection Standard types\n \n \n @geindex gccjit;;context;;get_type (C++ function)\n-@anchor{cp/topics/types gccjit context get_type__enum}@anchor{cf}\n+@anchor{cp/topics/types gccjit context get_type__enum}@anchor{d4}\n @deffn {C++ Function} gccjit::type gccjit::context::get_type (enum gcc_jit_types)\n \n Access a specific type.  This is a thin wrapper around\n @pxref{b,,gcc_jit_context_get_type()}; the parameter has the same meaning.\n @end deffn\n \n @geindex gccjit;;context;;get_int_type (C++ function)\n-@anchor{cp/topics/types gccjit context get_int_type__s i}@anchor{113}\n+@anchor{cp/topics/types gccjit context get_int_type__s i}@anchor{118}\n @deffn {C++ Function} gccjit::type gccjit::context::get_int_type (size_t num_bytes, int is_signed)\n \n Access the integer type of the given size.\n @end deffn\n \n @geindex gccjit;;context;;get_int_type<T> (C++ function)\n-@anchor{cp/topics/types gccjit context get_int_type T}@anchor{114}\n+@anchor{cp/topics/types gccjit context get_int_type T}@anchor{119}\n @deffn {C++ Function} gccjit::type gccjit::context::get_int_type<T> ()\n \n Access the given integer type.  For example, you could map the\n@@ -10571,12 +10663,12 @@ gccjit::type t = ctxt.get_int_type <unsigned short> ();\n @end deffn\n \n @node Pointers const and volatile<2>,Structures and unions<2>,Standard types<2>,Types<2>\n-@anchor{cp/topics/types pointers-const-and-volatile}@anchor{115}\n+@anchor{cp/topics/types pointers-const-and-volatile}@anchor{11a}\n @subsubsection Pointers, @cite{const}, and @cite{volatile}\n \n \n @geindex gccjit;;type;;get_pointer (C++ function)\n-@anchor{cp/topics/types gccjit type get_pointer}@anchor{110}\n+@anchor{cp/topics/types gccjit type get_pointer}@anchor{115}\n @deffn {C++ Function} gccjit::type gccjit::type::get_pointer ()\n \n Given type \"T\", get type \"T*\".\n@@ -10585,53 +10677,53 @@ Given type \"T\", get type \"T*\".\n @c FIXME: get_const doesn't seem to exist\n \n @geindex gccjit;;type;;get_const (C++ function)\n-@anchor{cp/topics/types gccjit type get_const}@anchor{111}\n+@anchor{cp/topics/types gccjit type get_const}@anchor{116}\n @deffn {C++ Function} gccjit::type gccjit::type::get_const ()\n \n Given type \"T\", get type \"const T\".\n @end deffn\n \n @geindex gccjit;;type;;get_volatile (C++ function)\n-@anchor{cp/topics/types gccjit type get_volatile}@anchor{116}\n+@anchor{cp/topics/types gccjit type get_volatile}@anchor{11b}\n @deffn {C++ Function} gccjit::type gccjit::type::get_volatile ()\n \n Given type \"T\", get type \"volatile T\".\n @end deffn\n \n @geindex gccjit;;context;;new_array_type (C++ function)\n-@anchor{cp/topics/types gccjit context new_array_type__gccjit type i gccjit location}@anchor{117}\n+@anchor{cp/topics/types gccjit context new_array_type__gccjit type i gccjit location}@anchor{11c}\n @deffn {C++ Function} gccjit::type gccjit::context::new_array_type (gccjit::type element_type, int num_elements, gccjit::location loc)\n \n Given type \"T\", get type \"T[N]\" (for a constant N).\n Param \"loc\" is optional.\n @end deffn\n \n @node Structures and unions<2>,,Pointers const and volatile<2>,Types<2>\n-@anchor{cp/topics/types structures-and-unions}@anchor{118}\n+@anchor{cp/topics/types structures-and-unions}@anchor{11d}\n @subsubsection Structures and unions\n \n \n @geindex gccjit;;struct_ (C++ class)\n-@anchor{cp/topics/types gccjit struct_}@anchor{119}\n+@anchor{cp/topics/types gccjit struct_}@anchor{11e}\n @deffn {C++ Class} gccjit::struct_\n @end deffn\n \n A compound type analagous to a C @cite{struct}.\n \n-@pxref{119,,gccjit;;struct_} is a subclass of @pxref{10f,,gccjit;;type} (and thus\n-of @pxref{10b,,gccjit;;object} in turn).\n+@pxref{11e,,gccjit;;struct_} is a subclass of @pxref{114,,gccjit;;type} (and thus\n+of @pxref{110,,gccjit;;object} in turn).\n \n @geindex gccjit;;field (C++ class)\n-@anchor{cp/topics/types gccjit field}@anchor{11a}\n+@anchor{cp/topics/types gccjit field}@anchor{11f}\n @deffn {C++ Class} gccjit::field\n @end deffn\n \n-A field within a @pxref{119,,gccjit;;struct_}.\n+A field within a @pxref{11e,,gccjit;;struct_}.\n \n-@pxref{11a,,gccjit;;field} is a subclass of @pxref{10b,,gccjit;;object}.\n+@pxref{11f,,gccjit;;field} is a subclass of @pxref{110,,gccjit;;object}.\n \n-You can model C @cite{struct} types by creating @pxref{119,,gccjit;;struct_} and\n-@pxref{11a,,gccjit;;field} instances, in either order:\n+You can model C @cite{struct} types by creating @pxref{11e,,gccjit;;struct_} and\n+@pxref{11f,,gccjit;;field} instances, in either order:\n \n \n @itemize *\n@@ -10687,14 +10779,14 @@ node.set_fields (fields);\n @c FIXME: the above API doesn't seem to exist yet\n \n @geindex gccjit;;context;;new_field (C++ function)\n-@anchor{cp/topics/types gccjit context new_field__gccjit type cCP gccjit location}@anchor{11b}\n+@anchor{cp/topics/types gccjit context new_field__gccjit type cCP gccjit location}@anchor{120}\n @deffn {C++ Function} gccjit::field gccjit::context::new_field (gccjit::type type, const char* name, gccjit::location loc)\n \n Construct a new field, with the given type and name.\n @end deffn\n \n @geindex gccjit;;context;;new_struct_type (C++ function)\n-@anchor{cp/topics/types gccjit context new_struct_type__ssCR std vector field R gccjit location}@anchor{11c}\n+@anchor{cp/topics/types gccjit context new_struct_type__ssCR std vector field R gccjit location}@anchor{121}\n @deffn {C++ Function} gccjit::struct_ gccjit::context::new_struct_type (const std::string& name, std::vector<field>& fields, gccjit::location loc)\n \n @quotation\n@@ -10704,7 +10796,7 @@ Construct a new struct type, with the given name and fields.\n @end deffn\n \n @geindex gccjit;;context;;new_opaque_struct (C++ function)\n-@anchor{cp/topics/types gccjit context new_opaque_struct__ssCR gccjit location}@anchor{11d}\n+@anchor{cp/topics/types gccjit context new_opaque_struct__ssCR gccjit location}@anchor{122}\n @deffn {C++ Function} gccjit::struct_ gccjit::context::new_opaque_struct (const std::string& name, gccjit::location loc)\n \n Construct a new struct type, with the given name, but without\n@@ -10731,7 +10823,7 @@ size of the struct is not known), or later specified using\n @c <http://www.gnu.org/licenses/>.\n \n @node Expressions<2>,Creating and using functions<2>,Types<2>,Topic Reference<2>\n-@anchor{cp/topics/expressions expressions}@anchor{11e}@anchor{cp/topics/expressions doc}@anchor{11f}\n+@anchor{cp/topics/expressions expressions}@anchor{123}@anchor{cp/topics/expressions doc}@anchor{124}\n @subsection Expressions\n \n \n@@ -10757,17 +10849,17 @@ Lvalues\n \n \n @node Rvalues<2>,Lvalues<2>,,Expressions<2>\n-@anchor{cp/topics/expressions rvalues}@anchor{120}\n+@anchor{cp/topics/expressions rvalues}@anchor{125}\n @subsubsection Rvalues\n \n \n @geindex gccjit;;rvalue (C++ class)\n-@anchor{cp/topics/expressions gccjit rvalue}@anchor{121}\n+@anchor{cp/topics/expressions gccjit rvalue}@anchor{126}\n @deffn {C++ Class} gccjit::rvalue\n @end deffn\n \n-A @pxref{121,,gccjit;;rvalue} is an expression that can be computed.  It is a\n-subclass of @pxref{10b,,gccjit;;object}, and is a thin wrapper around\n+A @pxref{126,,gccjit;;rvalue} is an expression that can be computed.  It is a\n+subclass of @pxref{110,,gccjit;;object}, and is a thin wrapper around\n @pxref{13,,gcc_jit_rvalue *} from the C API.\n \n It can be simple, e.g.:\n@@ -10813,7 +10905,7 @@ Every rvalue has an associated type, and the API will check to ensure\n that types match up correctly (otherwise the context will emit an error).\n \n @geindex gccjit;;rvalue;;get_type (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue get_type}@anchor{122}\n+@anchor{cp/topics/expressions gccjit rvalue get_type}@anchor{127}\n @deffn {C++ Function} gccjit::type gccjit::rvalue::get_type ()\n \n Get the type of this rvalue.\n@@ -10830,28 +10922,28 @@ Get the type of this rvalue.\n @end menu\n \n @node Simple expressions<2>,Unary Operations<2>,,Rvalues<2>\n-@anchor{cp/topics/expressions simple-expressions}@anchor{123}\n+@anchor{cp/topics/expressions simple-expressions}@anchor{128}\n @subsubsection Simple expressions\n \n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type iC}@anchor{e3}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type iC}@anchor{e8}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (gccjit::type numeric_type, int value) const\n \n Given a numeric type (integer or floating point), build an rvalue for\n the given constant @code{int} value.\n @end deffn\n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type lC}@anchor{124}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type lC}@anchor{129}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (gccjit::type numeric_type, long value) const\n \n Given a numeric type (integer or floating point), build an rvalue for\n the given constant @code{long} value.\n @end deffn\n \n @geindex gccjit;;context;;zero (C++ function)\n-@anchor{cp/topics/expressions gccjit context zero__gccjit typeC}@anchor{df}\n+@anchor{cp/topics/expressions gccjit context zero__gccjit typeC}@anchor{e4}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::zero (gccjit::type numeric_type) const\n \n Given a numeric type (integer or floating point), get the rvalue for\n@@ -10865,7 +10957,7 @@ ctxt.new_rvalue (numeric_type, 0)\n @end deffn\n \n @geindex gccjit;;context;;one (C++ function)\n-@anchor{cp/topics/expressions gccjit context one__gccjit typeC}@anchor{125}\n+@anchor{cp/topics/expressions gccjit context one__gccjit typeC}@anchor{12a}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::one (gccjit::type numeric_type) const\n \n Given a numeric type (integer or floating point), get the rvalue for\n@@ -10879,35 +10971,35 @@ ctxt.new_rvalue (numeric_type, 1)\n @end deffn\n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type doubleC}@anchor{126}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type doubleC}@anchor{12b}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (gccjit::type numeric_type, double value) const\n \n Given a numeric type (integer or floating point), build an rvalue for\n the given constant @code{double} value.\n @end deffn\n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type voidPC}@anchor{127}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type voidPC}@anchor{12c}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (gccjit::type pointer_type, void* value) const\n \n Given a pointer type, build an rvalue for the given address.\n @end deffn\n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__ssCRC}@anchor{128}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__ssCRC}@anchor{12d}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (const std::string& value) const\n \n Generate an rvalue of type @code{GCC_JIT_TYPE_CONST_CHAR_PTR} for\n the given string.  This is akin to a string literal.\n @end deffn\n \n @node Unary Operations<2>,Binary Operations<2>,Simple expressions<2>,Rvalues<2>\n-@anchor{cp/topics/expressions unary-operations}@anchor{129}\n+@anchor{cp/topics/expressions unary-operations}@anchor{12e}\n @subsubsection Unary Operations\n \n \n @geindex gccjit;;context;;new_unary_op (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_unary_op__enum gccjit type gccjit rvalue gccjit location}@anchor{12a}\n+@anchor{cp/topics/expressions gccjit context new_unary_op__enum gccjit type gccjit rvalue gccjit location}@anchor{12f}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_unary_op (enum gcc_jit_unary_op, gccjit::type result_type, gccjit::rvalue rvalue, gccjit::location loc)\n \n Build a unary operation out of an input rvalue.\n@@ -10923,7 +11015,7 @@ There are shorter ways to spell the various specific kinds of unary\n operation:\n \n @geindex gccjit;;context;;new_minus (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit location}@anchor{12b}\n+@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit location}@anchor{130}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_minus (gccjit::type result_type, gccjit::rvalue a, gccjit::location loc)\n \n Negate an arithmetic value; for example:\n@@ -10944,7 +11036,7 @@ builds the equivalent of this C expression:\n @end deffn\n \n @geindex new_bitwise_negate (C++ function)\n-@anchor{cp/topics/expressions new_bitwise_negate__gccjit type gccjit rvalue gccjit location}@anchor{12c}\n+@anchor{cp/topics/expressions new_bitwise_negate__gccjit type gccjit rvalue gccjit location}@anchor{131}\n @deffn {C++ Function} gccjit::rvalue new_bitwise_negate (gccjit::type result_type, gccjit::rvalue a, gccjit::location loc)\n \n Bitwise negation of an integer value (one's complement); for example:\n@@ -10965,7 +11057,7 @@ builds the equivalent of this C expression:\n @end deffn\n \n @geindex new_logical_negate (C++ function)\n-@anchor{cp/topics/expressions new_logical_negate__gccjit type gccjit rvalue gccjit location}@anchor{12d}\n+@anchor{cp/topics/expressions new_logical_negate__gccjit type gccjit rvalue gccjit location}@anchor{132}\n @deffn {C++ Function} gccjit::rvalue new_logical_negate (gccjit::type result_type, gccjit::rvalue a, gccjit::location loc)\n \n Logical negation of an arithmetic or pointer value; for example:\n@@ -10988,7 +11080,7 @@ builds the equivalent of this C expression:\n The most concise way to spell them is with overloaded operators:\n \n @geindex operator- (C++ function)\n-@anchor{cp/topics/expressions sub-operator__gccjit rvalue}@anchor{12e}\n+@anchor{cp/topics/expressions sub-operator__gccjit rvalue}@anchor{133}\n @deffn {C++ Function} gccjit::rvalue operator- (gccjit::rvalue a)\n \n @example\n@@ -10999,7 +11091,7 @@ gccjit::rvalue negpi = -pi;\n @end deffn\n \n @geindex operator~ (C++ function)\n-@anchor{cp/topics/expressions inv-operator__gccjit rvalue}@anchor{12f}\n+@anchor{cp/topics/expressions inv-operator__gccjit rvalue}@anchor{134}\n @deffn {C++ Function} gccjit::rvalue operator~ (gccjit::rvalue a)\n \n @example\n@@ -11010,7 +11102,7 @@ gccjit::rvalue mask = ~a;\n @end deffn\n \n @geindex operator! (C++ function)\n-@anchor{cp/topics/expressions not-operator__gccjit rvalue}@anchor{130}\n+@anchor{cp/topics/expressions not-operator__gccjit rvalue}@anchor{135}\n @deffn {C++ Function} gccjit::rvalue operator! (gccjit::rvalue a)\n \n @example\n@@ -11021,12 +11113,12 @@ gccjit::rvalue guard = !cond;\n @end deffn\n \n @node Binary Operations<2>,Comparisons<2>,Unary Operations<2>,Rvalues<2>\n-@anchor{cp/topics/expressions binary-operations}@anchor{131}\n+@anchor{cp/topics/expressions binary-operations}@anchor{136}\n @subsubsection Binary Operations\n \n \n @geindex gccjit;;context;;new_binary_op (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_binary_op__enum gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{d3}\n+@anchor{cp/topics/expressions gccjit context new_binary_op__enum gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{d8}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_binary_op (enum gcc_jit_binary_op, gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n \n Build a binary operation out of two constituent rvalues.\n@@ -11042,59 +11134,59 @@ There are shorter ways to spell the various specific kinds of binary\n operation:\n \n @geindex gccjit;;context;;new_plus (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_plus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{132}\n+@anchor{cp/topics/expressions gccjit context new_plus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{137}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_plus (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_minus (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{133}\n+@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{138}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_minus (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_mult (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_mult__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{134}\n+@anchor{cp/topics/expressions gccjit context new_mult__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{139}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_mult (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_divide (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_divide__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{135}\n+@anchor{cp/topics/expressions gccjit context new_divide__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13a}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_divide (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_modulo (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_modulo__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{136}\n+@anchor{cp/topics/expressions gccjit context new_modulo__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13b}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_modulo (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_bitwise_and (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_bitwise_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{137}\n+@anchor{cp/topics/expressions gccjit context new_bitwise_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13c}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_bitwise_and (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_bitwise_xor (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_bitwise_xor__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{138}\n+@anchor{cp/topics/expressions gccjit context new_bitwise_xor__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13d}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_bitwise_xor (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_bitwise_or (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_bitwise_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{139}\n+@anchor{cp/topics/expressions gccjit context new_bitwise_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13e}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_bitwise_or (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_logical_and (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_logical_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13a}\n+@anchor{cp/topics/expressions gccjit context new_logical_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13f}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_logical_and (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_logical_or (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_logical_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{13b}\n+@anchor{cp/topics/expressions gccjit context new_logical_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{140}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_logical_or (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n The most concise way to spell them is with overloaded operators:\n \n @geindex operator+ (C++ function)\n-@anchor{cp/topics/expressions add-operator__gccjit rvalue gccjit rvalue}@anchor{13c}\n+@anchor{cp/topics/expressions add-operator__gccjit rvalue gccjit rvalue}@anchor{141}\n @deffn {C++ Function} gccjit::rvalue operator+ (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11105,7 +11197,7 @@ gccjit::rvalue sum = a + b;\n @end deffn\n \n @geindex operator- (C++ function)\n-@anchor{cp/topics/expressions sub-operator__gccjit rvalue gccjit rvalue}@anchor{13d}\n+@anchor{cp/topics/expressions sub-operator__gccjit rvalue gccjit rvalue}@anchor{142}\n @deffn {C++ Function} gccjit::rvalue operator- (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11116,7 +11208,7 @@ gccjit::rvalue diff = a - b;\n @end deffn\n \n @geindex operator* (C++ function)\n-@anchor{cp/topics/expressions mul-operator__gccjit rvalue gccjit rvalue}@anchor{13e}\n+@anchor{cp/topics/expressions mul-operator__gccjit rvalue gccjit rvalue}@anchor{143}\n @deffn {C++ Function} gccjit::rvalue operator* (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11127,7 +11219,7 @@ gccjit::rvalue prod = a * b;\n @end deffn\n \n @geindex operator/ (C++ function)\n-@anchor{cp/topics/expressions div-operator__gccjit rvalue gccjit rvalue}@anchor{13f}\n+@anchor{cp/topics/expressions div-operator__gccjit rvalue gccjit rvalue}@anchor{144}\n @deffn {C++ Function} gccjit::rvalue operator/ (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11138,7 +11230,7 @@ gccjit::rvalue result = a / b;\n @end deffn\n \n @geindex operator% (C++ function)\n-@anchor{cp/topics/expressions mod-operator__gccjit rvalue gccjit rvalue}@anchor{140}\n+@anchor{cp/topics/expressions mod-operator__gccjit rvalue gccjit rvalue}@anchor{145}\n @deffn {C++ Function} gccjit::rvalue operator% (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11149,7 +11241,7 @@ gccjit::rvalue mod = a % b;\n @end deffn\n \n @geindex operator& (C++ function)\n-@anchor{cp/topics/expressions and-operator__gccjit rvalue gccjit rvalue}@anchor{141}\n+@anchor{cp/topics/expressions and-operator__gccjit rvalue gccjit rvalue}@anchor{146}\n @deffn {C++ Function} gccjit::rvalue operator& (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11160,7 +11252,7 @@ gccjit::rvalue x = a & b;\n @end deffn\n \n @geindex operator^ (C++ function)\n-@anchor{cp/topics/expressions xor-operator__gccjit rvalue gccjit rvalue}@anchor{142}\n+@anchor{cp/topics/expressions xor-operator__gccjit rvalue gccjit rvalue}@anchor{147}\n @deffn {C++ Function} gccjit::rvalue operator^ (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11171,7 +11263,7 @@ gccjit::rvalue x = a ^ b;\n @end deffn\n \n @geindex operator| (C++ function)\n-@anchor{cp/topics/expressions or-operator__gccjit rvalue gccjit rvalue}@anchor{143}\n+@anchor{cp/topics/expressions or-operator__gccjit rvalue gccjit rvalue}@anchor{148}\n @deffn {C++ Function} gccjit::rvalue operator| (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11182,7 +11274,7 @@ gccjit::rvalue x = a | b;\n @end deffn\n \n @geindex operator&& (C++ function)\n-@anchor{cp/topics/expressions sand-operator__gccjit rvalue gccjit rvalue}@anchor{144}\n+@anchor{cp/topics/expressions sand-operator__gccjit rvalue gccjit rvalue}@anchor{149}\n @deffn {C++ Function} gccjit::rvalue operator&& (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11193,7 +11285,7 @@ gccjit::rvalue cond = a && b;\n @end deffn\n \n @geindex operator|| (C++ function)\n-@anchor{cp/topics/expressions sor-operator__gccjit rvalue gccjit rvalue}@anchor{145}\n+@anchor{cp/topics/expressions sor-operator__gccjit rvalue gccjit rvalue}@anchor{14a}\n @deffn {C++ Function} gccjit::rvalue operator|| (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11216,12 +11308,12 @@ gccjit::rvalue discriminant = (b * b) - (four * a * c);\n @end quotation\n \n @node Comparisons<2>,Function calls<2>,Binary Operations<2>,Rvalues<2>\n-@anchor{cp/topics/expressions comparisons}@anchor{146}\n+@anchor{cp/topics/expressions comparisons}@anchor{14b}\n @subsubsection Comparisons\n \n \n @geindex gccjit;;context;;new_comparison (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_comparison__enum gccjit rvalue gccjit rvalue gccjit location}@anchor{e0}\n+@anchor{cp/topics/expressions gccjit context new_comparison__enum gccjit rvalue gccjit rvalue gccjit location}@anchor{e5}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_comparison (enum gcc_jit_comparison, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n \n Build a boolean rvalue out of the comparison of two other rvalues.\n@@ -11237,39 +11329,39 @@ There are shorter ways to spell the various specific kinds of binary\n operation:\n \n @geindex gccjit;;context;;new_eq (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_eq__gccjit rvalue gccjit rvalue gccjit location}@anchor{147}\n+@anchor{cp/topics/expressions gccjit context new_eq__gccjit rvalue gccjit rvalue gccjit location}@anchor{14c}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_eq (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_ne (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_ne__gccjit rvalue gccjit rvalue gccjit location}@anchor{148}\n+@anchor{cp/topics/expressions gccjit context new_ne__gccjit rvalue gccjit rvalue gccjit location}@anchor{14d}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_ne (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_lt (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_lt__gccjit rvalue gccjit rvalue gccjit location}@anchor{149}\n+@anchor{cp/topics/expressions gccjit context new_lt__gccjit rvalue gccjit rvalue gccjit location}@anchor{14e}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_lt (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_le (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_le__gccjit rvalue gccjit rvalue gccjit location}@anchor{14a}\n+@anchor{cp/topics/expressions gccjit context new_le__gccjit rvalue gccjit rvalue gccjit location}@anchor{14f}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_le (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_gt (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_gt__gccjit rvalue gccjit rvalue gccjit location}@anchor{14b}\n+@anchor{cp/topics/expressions gccjit context new_gt__gccjit rvalue gccjit rvalue gccjit location}@anchor{150}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_gt (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_ge (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_ge__gccjit rvalue gccjit rvalue gccjit location}@anchor{14c}\n+@anchor{cp/topics/expressions gccjit context new_ge__gccjit rvalue gccjit rvalue gccjit location}@anchor{151}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_ge (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n The most concise way to spell them is with overloaded operators:\n \n @geindex operator== (C++ function)\n-@anchor{cp/topics/expressions eq-operator__gccjit rvalue gccjit rvalue}@anchor{14d}\n+@anchor{cp/topics/expressions eq-operator__gccjit rvalue gccjit rvalue}@anchor{152}\n @deffn {C++ Function} gccjit::rvalue operator== (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11280,7 +11372,7 @@ gccjit::rvalue cond = (a == ctxt.zero (t_int));\n @end deffn\n \n @geindex operator!= (C++ function)\n-@anchor{cp/topics/expressions neq-operator__gccjit rvalue gccjit rvalue}@anchor{14e}\n+@anchor{cp/topics/expressions neq-operator__gccjit rvalue gccjit rvalue}@anchor{153}\n @deffn {C++ Function} gccjit::rvalue operator!= (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11291,7 +11383,7 @@ gccjit::rvalue cond = (i != j);\n @end deffn\n \n @geindex operator< (C++ function)\n-@anchor{cp/topics/expressions lt-operator__gccjit rvalue gccjit rvalue}@anchor{14f}\n+@anchor{cp/topics/expressions lt-operator__gccjit rvalue gccjit rvalue}@anchor{154}\n @deffn {C++ Function} gccjit::rvalue operator< (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11302,7 +11394,7 @@ gccjit::rvalue cond = i < n;\n @end deffn\n \n @geindex operator<= (C++ function)\n-@anchor{cp/topics/expressions lte-operator__gccjit rvalue gccjit rvalue}@anchor{150}\n+@anchor{cp/topics/expressions lte-operator__gccjit rvalue gccjit rvalue}@anchor{155}\n @deffn {C++ Function} gccjit::rvalue operator<= (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11313,7 +11405,7 @@ gccjit::rvalue cond = i <= n;\n @end deffn\n \n @geindex operator> (C++ function)\n-@anchor{cp/topics/expressions gt-operator__gccjit rvalue gccjit rvalue}@anchor{151}\n+@anchor{cp/topics/expressions gt-operator__gccjit rvalue gccjit rvalue}@anchor{156}\n @deffn {C++ Function} gccjit::rvalue operator> (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11324,7 +11416,7 @@ gccjit::rvalue cond = (ch > limit);\n @end deffn\n \n @geindex operator>= (C++ function)\n-@anchor{cp/topics/expressions gte-operator__gccjit rvalue gccjit rvalue}@anchor{152}\n+@anchor{cp/topics/expressions gte-operator__gccjit rvalue gccjit rvalue}@anchor{157}\n @deffn {C++ Function} gccjit::rvalue operator>= (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11337,12 +11429,12 @@ gccjit::rvalue cond = (score >= ctxt.new_rvalue (t_int, 100));\n @c TODO: beyond this point\n \n @node Function calls<2>,Type-coercion<2>,Comparisons<2>,Rvalues<2>\n-@anchor{cp/topics/expressions function-calls}@anchor{153}\n+@anchor{cp/topics/expressions function-calls}@anchor{158}\n @subsubsection Function calls\n \n \n @geindex gcc_jit_context_new_call (C++ function)\n-@anchor{cp/topics/expressions gcc_jit_context_new_call__gcc_jit_contextP gcc_jit_locationP gcc_jit_functionP i gcc_jit_rvaluePP}@anchor{154}\n+@anchor{cp/topics/expressions gcc_jit_context_new_call__gcc_jit_contextP gcc_jit_locationP gcc_jit_functionP i gcc_jit_rvaluePP}@anchor{159}\n @deffn {C++ Function} gcc_jit_rvalue* gcc_jit_context_new_call (gcc_jit_context* ctxt, gcc_jit_location* loc, gcc_jit_function* func, int numargs, gcc_jit_rvalue** args)\n \n Given a function and the given table of argument rvalues, construct a\n@@ -11351,14 +11443,14 @@ call to the function, with the result as an rvalue.\n @cartouche\n @quotation Note \n @code{gccjit::context::new_call()} merely builds a\n-@pxref{121,,gccjit;;rvalue} i.e. an expression that can be evaluated,\n+@pxref{126,,gccjit;;rvalue} i.e. an expression that can be evaluated,\n perhaps as part of a more complicated expression.\n The call @emph{won't} happen unless you add a statement to a function\n that evaluates the expression.\n \n For example, if you want to call a function and discard the result\n (or to call a function with @code{void} return type), use\n-@pxref{155,,gccjit;;block;;add_eval()}:\n+@pxref{15a,,gccjit;;block;;add_eval()}:\n \n @example\n /* Add \"(void)printf (arg0, arg1);\".  */\n@@ -11371,12 +11463,12 @@ block.add_eval (ctxt.new_call (printf_func, arg0, arg1));\n @end deffn\n \n @node Type-coercion<2>,,Function calls<2>,Rvalues<2>\n-@anchor{cp/topics/expressions type-coercion}@anchor{156}\n+@anchor{cp/topics/expressions type-coercion}@anchor{15b}\n @subsubsection Type-coercion\n \n \n @geindex gccjit;;context;;new_cast (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_cast__gccjit rvalue gccjit type gccjit location}@anchor{157}\n+@anchor{cp/topics/expressions gccjit context new_cast__gccjit rvalue gccjit type gccjit location}@anchor{15c}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_cast (gccjit::rvalue rvalue, gccjit::type type, gccjit::location loc)\n \n Given an rvalue of T, construct another rvalue of another type.\n@@ -11401,24 +11493,24 @@ P*  <-> Q*, for pointer types P and Q\n @end deffn\n \n @node Lvalues<2>,Working with pointers structs and unions<2>,Rvalues<2>,Expressions<2>\n-@anchor{cp/topics/expressions lvalues}@anchor{158}\n+@anchor{cp/topics/expressions lvalues}@anchor{15d}\n @subsubsection Lvalues\n \n \n @geindex gccjit;;lvalue (C++ class)\n-@anchor{cp/topics/expressions gccjit lvalue}@anchor{159}\n+@anchor{cp/topics/expressions gccjit lvalue}@anchor{15e}\n @deffn {C++ Class} gccjit::lvalue\n @end deffn\n \n An lvalue is something that can of the @emph{left}-hand side of an assignment:\n a storage area (such as a variable).  It is a subclass of\n-@pxref{121,,gccjit;;rvalue}, where the rvalue is computed by reading from the\n+@pxref{126,,gccjit;;rvalue}, where the rvalue is computed by reading from the\n storage area.\n \n It iss a thin wrapper around @pxref{24,,gcc_jit_lvalue *} from the C API.\n \n @geindex gccjit;;lvalue;;get_address (C++ function)\n-@anchor{cp/topics/expressions gccjit lvalue get_address__gccjit location}@anchor{15a}\n+@anchor{cp/topics/expressions gccjit lvalue get_address__gccjit location}@anchor{15f}\n @deffn {C++ Function} gccjit::rvalue gccjit::lvalue::get_address (gccjit::location loc)\n \n Take the address of an lvalue; analogous to:\n@@ -11440,24 +11532,27 @@ Parameter \"loc\" is optional.\n @end menu\n \n @node Global variables<2>,,,Lvalues<2>\n-@anchor{cp/topics/expressions global-variables}@anchor{15b}\n+@anchor{cp/topics/expressions global-variables}@anchor{160}\n @subsubsection Global variables\n \n \n @geindex gccjit;;context;;new_global (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_global__gccjit type cCP gccjit location}@anchor{15c}\n-@deffn {C++ Function} gccjit::lvalue gccjit::context::new_global (gccjit::type type, const char* name, gccjit::location loc)\n+@anchor{cp/topics/expressions gccjit context new_global__enum gccjit type cCP gccjit location}@anchor{161}\n+@deffn {C++ Function} gccjit::lvalue gccjit::context::new_global (enum gcc_jit_global_kind, gccjit::type type, const char* name, gccjit::location loc)\n \n Add a new global variable of the given type and name to the context.\n+\n+This is a thin wrapper around @pxref{a4,,gcc_jit_context_new_global()} from\n+the C API; the \"kind\" parameter has the same meaning as there.\n @end deffn\n \n @node Working with pointers structs and unions<2>,,Lvalues<2>,Expressions<2>\n-@anchor{cp/topics/expressions working-with-pointers-structs-and-unions}@anchor{15d}\n+@anchor{cp/topics/expressions working-with-pointers-structs-and-unions}@anchor{162}\n @subsubsection Working with pointers, structs and unions\n \n \n @geindex gccjit;;rvalue;;dereference (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue dereference__gccjit location}@anchor{15e}\n+@anchor{cp/topics/expressions gccjit rvalue dereference__gccjit location}@anchor{163}\n @deffn {C++ Function} gccjit::lvalue gccjit::rvalue::dereference (gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *}, dereferencing the pointer,\n@@ -11490,7 +11585,7 @@ gccjit::lvalue content = *ptr;\n Field access is provided separately for both lvalues and rvalues:\n \n @geindex gccjit;;lvalue;;access_field (C++ function)\n-@anchor{cp/topics/expressions gccjit lvalue access_field__gccjit field gccjit location}@anchor{15f}\n+@anchor{cp/topics/expressions gccjit lvalue access_field__gccjit field gccjit location}@anchor{164}\n @deffn {C++ Function} gccjit::lvalue gccjit::lvalue::access_field (gccjit::field field, gccjit::location loc)\n \n Given an lvalue of struct or union type, access the given field,\n@@ -11506,7 +11601,7 @@ in C.\n @end deffn\n \n @geindex gccjit;;rvalue;;access_field (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue access_field__gccjit field gccjit location}@anchor{160}\n+@anchor{cp/topics/expressions gccjit rvalue access_field__gccjit field gccjit location}@anchor{165}\n @deffn {C++ Function} gccjit::rvalue gccjit::rvalue::access_field (gccjit::field field, gccjit::location loc)\n \n Given an rvalue of struct or union type, access the given field\n@@ -11522,7 +11617,7 @@ in C.\n @end deffn\n \n @geindex gccjit;;rvalue;;dereference_field (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue dereference_field__gccjit field gccjit location}@anchor{161}\n+@anchor{cp/topics/expressions gccjit rvalue dereference_field__gccjit field gccjit location}@anchor{166}\n @deffn {C++ Function} gccjit::lvalue gccjit::rvalue::dereference_field (gccjit::field field, gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *} where T is of struct or union\n@@ -11538,7 +11633,7 @@ in C, itself equivalent to @code{(*EXPR).FIELD}.\n @end deffn\n \n @geindex gccjit;;context;;new_array_access (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_array_access__gccjit rvalue gccjit rvalue gccjit location}@anchor{162}\n+@anchor{cp/topics/expressions gccjit context new_array_access__gccjit rvalue gccjit rvalue gccjit location}@anchor{167}\n @deffn {C++ Function} gccjit::lvalue gccjit::context::new_array_access (gccjit::rvalue ptr, gccjit::rvalue index, gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *}, get at the element @cite{T} at\n@@ -11557,7 +11652,7 @@ in C (or, indeed, to @code{PTR + INDEX}).\n Parameter \"loc\" is optional.\n @end deffn\n \n-For array accesses where you don't need to specify a @pxref{103,,gccjit;;location},\n+For array accesses where you don't need to specify a @pxref{108,,gccjit;;location},\n two overloaded operators are available:\n \n @quotation\n@@ -11597,7 +11692,7 @@ gccjit::lvalue element = array[0];\n @c <http://www.gnu.org/licenses/>.\n \n @node Creating and using functions<2>,Source Locations<2>,Expressions<2>,Topic Reference<2>\n-@anchor{cp/topics/functions doc}@anchor{163}@anchor{cp/topics/functions creating-and-using-functions}@anchor{164}\n+@anchor{cp/topics/functions doc}@anchor{168}@anchor{cp/topics/functions creating-and-using-functions}@anchor{169}\n @subsection Creating and using functions\n \n \n@@ -11610,36 +11705,36 @@ gccjit::lvalue element = array[0];\n @end menu\n \n @node Params<2>,Functions<2>,,Creating and using functions<2>\n-@anchor{cp/topics/functions params}@anchor{165}\n+@anchor{cp/topics/functions params}@anchor{16a}\n @subsubsection Params\n \n \n @geindex gccjit;;param (C++ class)\n-@anchor{cp/topics/functions gccjit param}@anchor{166}\n+@anchor{cp/topics/functions gccjit param}@anchor{16b}\n @deffn {C++ Class} gccjit::param\n \n A @cite{gccjit::param} represents a parameter to a function.\n @end deffn\n \n @geindex gccjit;;context;;new_param (C++ function)\n-@anchor{cp/topics/functions gccjit context new_param__gccjit type cCP gccjit location}@anchor{d2}\n+@anchor{cp/topics/functions gccjit context new_param__gccjit type cCP gccjit location}@anchor{d7}\n @deffn {C++ Function} gccjit::param gccjit::context::new_param (gccjit::type type, const char* name, gccjit::location loc)\n \n In preparation for creating a function, create a new parameter of the\n given type and name.\n @end deffn\n \n-@pxref{166,,gccjit;;param} is a subclass of @pxref{159,,gccjit;;lvalue} (and thus\n-of @pxref{121,,gccjit;;rvalue} and @pxref{10b,,gccjit;;object}).  It is a thin\n+@pxref{16b,,gccjit;;param} is a subclass of @pxref{15e,,gccjit;;lvalue} (and thus\n+of @pxref{126,,gccjit;;rvalue} and @pxref{110,,gccjit;;object}).  It is a thin\n wrapper around the C API's @pxref{25,,gcc_jit_param *}.\n \n @node Functions<2>,Blocks<2>,Params<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions functions}@anchor{167}\n+@anchor{cp/topics/functions functions}@anchor{16c}\n @subsubsection Functions\n \n \n @geindex gccjit;;function (C++ class)\n-@anchor{cp/topics/functions gccjit function}@anchor{168}\n+@anchor{cp/topics/functions gccjit function}@anchor{16d}\n @deffn {C++ Class} gccjit::function\n \n A @cite{gccjit::function} represents a function - either one that we're\n@@ -11657,49 +11752,49 @@ This is a wrapper around the C API's @pxref{11,,gcc_jit_context_new_function()}.\n @end deffn\n \n @geindex gccjit;;context;;get_builtin_function (C++ function)\n-@anchor{cp/topics/functions gccjit context get_builtin_function__cCP}@anchor{169}\n+@anchor{cp/topics/functions gccjit context get_builtin_function__cCP}@anchor{16e}\n @deffn {C++ Function} gccjit::function gccjit::context::get_builtin_function (const char* name)\n \n This is a wrapper around the C API's\n-@pxref{b6,,gcc_jit_context_get_builtin_function()}.\n+@pxref{bb,,gcc_jit_context_get_builtin_function()}.\n @end deffn\n \n @geindex gccjit;;function;;get_param (C++ function)\n-@anchor{cp/topics/functions gccjit function get_param__iC}@anchor{16a}\n+@anchor{cp/topics/functions gccjit function get_param__iC}@anchor{16f}\n @deffn {C++ Function} gccjit::param gccjit::function::get_param (int index) const\n \n Get the param of the given index (0-based).\n @end deffn\n \n @geindex gccjit;;function;;dump_to_dot (C++ function)\n-@anchor{cp/topics/functions gccjit function dump_to_dot__cCP}@anchor{e5}\n+@anchor{cp/topics/functions gccjit function dump_to_dot__cCP}@anchor{ea}\n @deffn {C++ Function} void gccjit::function::dump_to_dot (const char* path)\n \n Emit the function in graphviz format to the given path.\n @end deffn\n \n @geindex gccjit;;function;;new_local (C++ function)\n-@anchor{cp/topics/functions gccjit function new_local__gccjit type cCP gccjit location}@anchor{dc}\n+@anchor{cp/topics/functions gccjit function new_local__gccjit type cCP gccjit location}@anchor{e1}\n @deffn {C++ Function} gccjit::lvalue gccjit::function::new_local (gccjit::type type, const char* name, gccjit::location loc)\n \n Create a new local variable within the function, of the given type and\n name.\n @end deffn\n \n @node Blocks<2>,Statements<2>,Functions<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions blocks}@anchor{16b}\n+@anchor{cp/topics/functions blocks}@anchor{170}\n @subsubsection Blocks\n \n \n @geindex gccjit;;block (C++ class)\n-@anchor{cp/topics/functions gccjit block}@anchor{16c}\n+@anchor{cp/topics/functions gccjit block}@anchor{171}\n @deffn {C++ Class} gccjit::block\n \n A @cite{gccjit::block} represents a basic block within a function  i.e. a\n sequence of statements with a single entry point and a single exit\n point.\n \n-@pxref{16c,,gccjit;;block} is a subclass of @pxref{10b,,gccjit;;object}.\n+@pxref{171,,gccjit;;block} is a subclass of @pxref{110,,gccjit;;object}.\n \n The first basic block that you create within a function will\n be the entrypoint.\n@@ -11712,7 +11807,7 @@ one function.\n @end deffn\n \n @geindex gccjit;;function;;new_block (C++ function)\n-@anchor{cp/topics/functions gccjit function new_block__cCP}@anchor{16d}\n+@anchor{cp/topics/functions gccjit function new_block__cCP}@anchor{172}\n @deffn {C++ Function} gccjit::block gccjit::function::new_block (const char* name)\n \n Create a basic block of the given name.  The name may be NULL, but\n@@ -11722,12 +11817,12 @@ messages.\n @end deffn\n \n @node Statements<2>,,Blocks<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions statements}@anchor{16e}\n+@anchor{cp/topics/functions statements}@anchor{173}\n @subsubsection Statements\n \n \n @geindex gccjit;;block;;add_eval (C++ function)\n-@anchor{cp/topics/functions gccjit block add_eval__gccjit rvalue gccjit location}@anchor{155}\n+@anchor{cp/topics/functions gccjit block add_eval__gccjit rvalue gccjit location}@anchor{15a}\n @deffn {C++ Function} void gccjit::block::add_eval (gccjit::rvalue rvalue, gccjit::location loc)\n \n Add evaluation of an rvalue, discarding the result\n@@ -11743,7 +11838,7 @@ This is equivalent to this C code:\n @end deffn\n \n @geindex gccjit;;block;;add_assignment (C++ function)\n-@anchor{cp/topics/functions gccjit block add_assignment__gccjit lvalue gccjit rvalue gccjit location}@anchor{de}\n+@anchor{cp/topics/functions gccjit block add_assignment__gccjit lvalue gccjit rvalue gccjit location}@anchor{e3}\n @deffn {C++ Function} void gccjit::block::add_assignment (gccjit::lvalue lvalue, gccjit::rvalue rvalue, gccjit::location loc)\n \n Add evaluation of an rvalue, assigning the result to the given\n@@ -11759,7 +11854,7 @@ lvalue = rvalue;\n @end deffn\n \n @geindex gccjit;;block;;add_assignment_op (C++ function)\n-@anchor{cp/topics/functions gccjit block add_assignment_op__gccjit lvalue enum gccjit rvalue gccjit location}@anchor{e2}\n+@anchor{cp/topics/functions gccjit block add_assignment_op__gccjit lvalue enum gccjit rvalue gccjit location}@anchor{e7}\n @deffn {C++ Function} void gccjit::block::add_assignment_op (gccjit::lvalue lvalue, enum gcc_jit_binary_op, gccjit::rvalue rvalue, gccjit::location loc)\n \n Add evaluation of an rvalue, using the result to modify an\n@@ -11789,7 +11884,7 @@ loop_body.add_assignment_op (\n @end deffn\n \n @geindex gccjit;;block;;add_comment (C++ function)\n-@anchor{cp/topics/functions gccjit block add_comment__cCP gccjit location}@anchor{ed}\n+@anchor{cp/topics/functions gccjit block add_comment__cCP gccjit location}@anchor{f2}\n @deffn {C++ Function} void gccjit::block::add_comment (const char* text, gccjit::location loc)\n \n Add a no-op textual comment to the internal representation of the\n@@ -11803,7 +11898,7 @@ Parameter \"loc\" is optional.\n @end deffn\n \n @geindex gccjit;;block;;end_with_conditional (C++ function)\n-@anchor{cp/topics/functions gccjit block end_with_conditional__gccjit rvalue gccjit block gccjit block gccjit location}@anchor{e1}\n+@anchor{cp/topics/functions gccjit block end_with_conditional__gccjit rvalue gccjit block gccjit block gccjit location}@anchor{e6}\n @deffn {C++ Function} void gccjit::block::end_with_conditional (gccjit::rvalue boolval, gccjit::block on_true, gccjit::block on_false, gccjit::location loc)\n \n Terminate a block by adding evaluation of an rvalue, branching on the\n@@ -11824,7 +11919,7 @@ block, boolval, on_true, and on_false must be non-NULL.\n @end deffn\n \n @geindex gccjit;;block;;end_with_jump (C++ function)\n-@anchor{cp/topics/functions gccjit block end_with_jump__gccjit block gccjit location}@anchor{16f}\n+@anchor{cp/topics/functions gccjit block end_with_jump__gccjit block gccjit location}@anchor{174}\n @deffn {C++ Function} void gccjit::block::end_with_jump (gccjit::block target, gccjit::location loc)\n \n Terminate a block by adding a jump to the given target block.\n@@ -11839,7 +11934,7 @@ goto target;\n @end deffn\n \n @geindex gccjit;;block;;end_with_return (C++ function)\n-@anchor{cp/topics/functions gccjit block end_with_return__gccjit rvalue gccjit location}@anchor{170}\n+@anchor{cp/topics/functions gccjit block end_with_return__gccjit rvalue gccjit location}@anchor{175}\n @deffn {C++ Function} void gccjit::block::end_with_return (gccjit::rvalue rvalue, gccjit::location loc)\n \n Terminate a block.\n@@ -11890,12 +11985,12 @@ return;\n @c <http://www.gnu.org/licenses/>.\n \n @node Source Locations<2>,Compilation results<2>,Creating and using functions<2>,Topic Reference<2>\n-@anchor{cp/topics/locations source-locations}@anchor{171}@anchor{cp/topics/locations doc}@anchor{172}\n+@anchor{cp/topics/locations source-locations}@anchor{176}@anchor{cp/topics/locations doc}@anchor{177}\n @subsection Source Locations\n \n \n @geindex gccjit;;location (C++ class)\n-@anchor{cp/topics/locations gccjit location}@anchor{103}\n+@anchor{cp/topics/locations gccjit location}@anchor{108}\n @deffn {C++ Class} gccjit::location\n \n A @cite{gccjit::location} encapsulates a source code location, so that\n@@ -11906,10 +12001,10 @@ single-step through your language.\n @cite{gccjit::location} instances are optional: you can always omit them\n from any C++ API entrypoint accepting one.\n \n-You can construct them using @pxref{f1,,gccjit;;context;;new_location()}.\n+You can construct them using @pxref{f6,,gccjit;;context;;new_location()}.\n \n You need to enable @pxref{42,,GCC_JIT_BOOL_OPTION_DEBUGINFO} on the\n-@pxref{fb,,gccjit;;context} for these locations to actually be usable by\n+@pxref{100,,gccjit;;context} for these locations to actually be usable by\n the debugger:\n \n @example\n@@ -11920,7 +12015,7 @@ ctxt.set_bool_option (GCC_JIT_BOOL_OPTION_DEBUGINFO, 1);\n @end deffn\n \n @geindex gccjit;;context;;new_location (C++ function)\n-@anchor{cp/topics/locations gccjit context new_location__cCP i i}@anchor{f1}\n+@anchor{cp/topics/locations gccjit context new_location__cCP i i}@anchor{f6}\n @deffn {C++ Function} gccjit::location gccjit::context::new_location (const char* filename, int line, int column)\n \n Create a @cite{gccjit::location} instance representing the given source\n@@ -11933,13 +12028,13 @@ location.\n @end menu\n \n @node Faking it<2>,,,Source Locations<2>\n-@anchor{cp/topics/locations faking-it}@anchor{173}\n+@anchor{cp/topics/locations faking-it}@anchor{178}\n @subsubsection Faking it\n \n \n If you don't have source code for your internal representation, but need\n to debug, you can generate a C-like representation of the functions in\n-your context using @pxref{102,,gccjit;;context;;dump_to_file()}:\n+your context using @pxref{107,,gccjit;;context;;dump_to_file()}:\n \n @example\n ctxt.dump_to_file (\"/tmp/something.c\",\n@@ -11971,27 +12066,27 @@ file, giving you @emph{something} you can step through in the debugger.\n @c <http://www.gnu.org/licenses/>.\n \n @node Compilation results<2>,,Source Locations<2>,Topic Reference<2>\n-@anchor{cp/topics/results compilation-results}@anchor{174}@anchor{cp/topics/results doc}@anchor{175}\n+@anchor{cp/topics/results compilation-results}@anchor{179}@anchor{cp/topics/results doc}@anchor{17a}\n @subsection Compilation results\n \n \n @geindex gcc_jit_result (C++ type)\n-@anchor{cp/topics/results gcc_jit_result}@anchor{176}\n+@anchor{cp/topics/results gcc_jit_result}@anchor{17b}\n @deffn {C++ Type} gcc_jit_result\n \n A @cite{gcc_jit_result} encapsulates the result of compiling a context.\n @end deffn\n \n @geindex gccjit;;context;;compile (C++ function)\n-@anchor{cp/topics/results gccjit context compile}@anchor{d4}\n-@deffn {C++ Function} @pxref{176,,gcc_jit_result*} gccjit::context::compile ()\n+@anchor{cp/topics/results gccjit context compile}@anchor{d9}\n+@deffn {C++ Function} @pxref{17b,,gcc_jit_result*} gccjit::context::compile ()\n \n This calls into GCC and builds the code, returning a\n @cite{gcc_jit_result *}.\n @end deffn\n \n @geindex gcc_jit_result_get_code (C++ function)\n-@anchor{cp/topics/results gcc_jit_result_get_code__gcc_jit_resultP cCP}@anchor{177}\n+@anchor{cp/topics/results gcc_jit_result_get_code__gcc_jit_resultP cCP}@anchor{17c}\n @deffn {C++ Function} void* gcc_jit_result_get_code (gcc_jit_result* result, const char* funcname)\n \n Locate a given function within the built machine code.\n@@ -12000,7 +12095,7 @@ correct type before it can be called.\n @end deffn\n \n @geindex gcc_jit_result_release (C++ function)\n-@anchor{cp/topics/results gcc_jit_result_release__gcc_jit_resultP}@anchor{178}\n+@anchor{cp/topics/results gcc_jit_result_release__gcc_jit_resultP}@anchor{17d}\n @deffn {C++ Function} void gcc_jit_result_release (gcc_jit_result* result)\n \n Once we're done with the code, this unloads the built .so file.\n@@ -12026,7 +12121,7 @@ valid to use the result.\n @c <http://www.gnu.org/licenses/>.\n \n @node Internals,Indices and tables,C++ bindings for libgccjit,Top\n-@anchor{internals/index internals}@anchor{179}@anchor{internals/index doc}@anchor{17a}\n+@anchor{internals/index internals}@anchor{17e}@anchor{internals/index doc}@anchor{17f}\n @chapter Internals\n \n \n@@ -12039,7 +12134,7 @@ valid to use the result.\n @end menu\n \n @node Working on the JIT library,Running the test suite,,Internals\n-@anchor{internals/index working-on-the-jit-library}@anchor{17b}\n+@anchor{internals/index working-on-the-jit-library}@anchor{180}\n @section Working on the JIT library\n \n \n@@ -12076,7 +12171,7 @@ gcc/libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),\n Here's what those configuration options mean:\n \n @geindex command line option; --enable-host-shared\n-@anchor{internals/index cmdoption--enable-host-shared}@anchor{17c}\n+@anchor{internals/index cmdoption--enable-host-shared}@anchor{181}\n @deffn {Option} --enable-host-shared\n \n Configuring with this option means that the compiler is built as\n@@ -12085,7 +12180,7 @@ but it necessary for a shared library.\n @end deffn\n \n @geindex command line option; --enable-languages=jit@comma{}c++\n-@anchor{internals/index cmdoption--enable-languages}@anchor{17d}\n+@anchor{internals/index cmdoption--enable-languages}@anchor{182}\n @deffn {Option} --enable-languages=jit,c++\n \n This specifies which frontends to build.  The JIT library looks like\n@@ -12104,7 +12199,7 @@ c++: error trying to exec 'cc1plus': execvp: No such file or directory\n @end deffn\n \n @geindex command line option; --disable-bootstrap\n-@anchor{internals/index cmdoption--disable-bootstrap}@anchor{17e}\n+@anchor{internals/index cmdoption--disable-bootstrap}@anchor{183}\n @deffn {Option} --disable-bootstrap\n \n For hacking on the \"jit\" subdirectory, performing a full\n@@ -12114,7 +12209,7 @@ the compiler can still bootstrap itself.\n @end deffn\n \n @geindex command line option; --enable-checking=release\n-@anchor{internals/index cmdoption--enable-checking}@anchor{17f}\n+@anchor{internals/index cmdoption--enable-checking}@anchor{184}\n @deffn {Option} --enable-checking=release\n \n The compile can perform extensive self-checking as it runs, useful when\n@@ -12125,7 +12220,7 @@ disable this self-checking.\n @end deffn\n \n @node Running the test suite,Environment variables,Working on the JIT library,Internals\n-@anchor{internals/index running-the-test-suite}@anchor{180}\n+@anchor{internals/index running-the-test-suite}@anchor{185}\n @section Running the test suite\n \n \n@@ -12188,7 +12283,7 @@ and once a test has been compiled, you can debug it directly:\n @end menu\n \n @node Running under valgrind,,,Running the test suite\n-@anchor{internals/index running-under-valgrind}@anchor{181}\n+@anchor{internals/index running-under-valgrind}@anchor{186}\n @subsection Running under valgrind\n \n \n@@ -12236,15 +12331,15 @@ When running under valgrind, it's best to have configured gcc with\n various known false positives.\n \n @node Environment variables,Overview of code structure,Running the test suite,Internals\n-@anchor{internals/index environment-variables}@anchor{182}\n+@anchor{internals/index environment-variables}@anchor{187}\n @section Environment variables\n \n \n When running client code against a locally-built libgccjit, three\n environment variables need to be set up:\n \n @geindex environment variable; LD_LIBRARY_PATH\n-@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{183}\n+@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{188}\n @deffn {Environment Variable} LD_LIBRARY_PATH\n \n @quotation\n@@ -12266,7 +12361,7 @@ libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux),\n @end deffn\n \n @geindex environment variable; PATH\n-@anchor{internals/index envvar-PATH}@anchor{184}\n+@anchor{internals/index envvar-PATH}@anchor{189}\n @deffn {Environment Variable} PATH\n \n The library uses a driver executable for converting from .s assembler\n@@ -12285,7 +12380,7 @@ of development.\n @end deffn\n \n @geindex environment variable; LIBRARY_PATH\n-@anchor{internals/index envvar-LIBRARY_PATH}@anchor{185}\n+@anchor{internals/index envvar-LIBRARY_PATH}@anchor{18a}\n @deffn {Environment Variable} LIBRARY_PATH\n \n The driver executable invokes the linker, and the latter needs to locate\n@@ -12321,7 +12416,7 @@ hello world\n @noindent\n \n @node Overview of code structure,,Environment variables,Internals\n-@anchor{internals/index overview-of-code-structure}@anchor{186}\n+@anchor{internals/index overview-of-code-structure}@anchor{18b}\n @section Overview of code structure\n \n \n@@ -12740,7 +12835,7 @@ JIT: gcc::jit::logger::~logger()\n @noindent\n \n @node Indices and tables,Index,Internals,Top\n-@anchor{index indices-and-tables}@anchor{187}\n+@anchor{index indices-and-tables}@anchor{18c}\n @unnumbered Indices and tables\n \n "}, {"sha": "84ff741a9339180376aa51eb930c42cce4ee8325", "filename": "gcc/jit/docs/cp/topics/expressions.rst", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -504,12 +504,15 @@ Global variables\n ****************\n \n .. function:: gccjit::lvalue \\\n-              gccjit::context::new_global (gccjit::type type, \\\n+              gccjit::context::new_global (enum gcc_jit_global_kind,\\\n+                                           gccjit::type type, \\\n                                            const char *name, \\\n                                            gccjit::location loc)\n \n    Add a new global variable of the given type and name to the context.\n \n+   This is a thin wrapper around :c:func:`gcc_jit_context_new_global` from\n+   the C API; the \"kind\" parameter has the same meaning as there.\n \n Working with pointers, structs and unions\n -----------------------------------------"}, {"sha": "b56a1dba8e279dd49f9e02fbb989868e793a8987", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -460,11 +460,36 @@ Global variables\n .. function:: gcc_jit_lvalue *\\\n               gcc_jit_context_new_global (gcc_jit_context *ctxt,\\\n                                           gcc_jit_location *loc,\\\n+                                          enum gcc_jit_global_kind kind,\\\n                                           gcc_jit_type *type,\\\n                                           const char *name)\n \n    Add a new global variable of the given type and name to the context.\n \n+   The \"kind\" parameter determines the visibility of the \"global\" outside\n+   of the :c:type:`gcc_jit_result`:\n+\n+   .. type:: enum gcc_jit_global_kind\n+\n+   .. c:macro:: GCC_JIT_GLOBAL_EXPORTED\n+\n+      Global is defined by the client code and is visible\n+      by name outside of this JIT context via\n+      :c:func:`gcc_jit_result_get_global` (and this value is required for\n+      the global to be accessible via that entrypoint).\n+\n+   .. c:macro:: GCC_JIT_GLOBAL_INTERNAL\n+\n+      Global is defined by the client code, but is invisible\n+      outside of it.  Analogous to a \"static\" global within a .c file.\n+      Specifically, the variable will only be visible within this\n+      context and within child contexts.\n+\n+   .. c:macro:: GCC_JIT_GLOBAL_IMPORTED\n+\n+      Global is not defined by the client code; we're merely\n+      referring to it.  Analogous to using an \"extern\" global from a\n+      header file.\n \n Working with pointers, structs and unions\n -----------------------------------------"}, {"sha": "aa5ea8be28e910e7681bf40065f4d63d3c0bc850", "filename": "gcc/jit/docs/topics/results.rst", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2Ftopics%2Fresults.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdocs%2Ftopics%2Fresults.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fresults.rst?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -23,15 +23,18 @@ Compilation results\n .. type:: gcc_jit_result\n \n   A `gcc_jit_result` encapsulates the result of compiling a context,\n-  and the lifetimes of any machine code functions that are\n-  returned.\n+  and the lifetimes of any machine code functions or globals that are\n+  within it.\n \n .. function:: gcc_jit_result *\\\n               gcc_jit_context_compile (gcc_jit_context *ctxt)\n \n    This calls into GCC and builds the code, returning a\n    `gcc_jit_result *`.\n \n+   If this is non-NULL, the caller becomes responsible for\n+   calling :func:`gcc_jit_result_release` on it once they're done\n+   with it.\n \n .. function:: void *\\\n               gcc_jit_result_get_code (gcc_jit_result *result,\\\n@@ -66,14 +69,59 @@ Compilation results\n \n    Note that the resulting machine code becomes invalid after\n    :func:`gcc_jit_result_release` is called on the\n-   `gcc_jit_result *`; attempting to call it after that may lead\n+   :type:`gcc_jit_result *`; attempting to call it after that may lead\n    to a segmentation fault.\n \n+.. function:: void *\\\n+              gcc_jit_result_get_global (gcc_jit_result *result,\\\n+                                         const char *name)\n+\n+   Locate a given global within the built machine code.\n+\n+   Globals are looked up by name.  For this to succeed, a global\n+   with a name matching `name` must have been created on\n+   `result`'s context (or a parent context) via a call to\n+   :func:`gcc_jit_context_new_global` with `kind`\n+   :macro:`GCC_JIT_GLOBAL_EXPORTED`.\n+\n+   If the global is found, the result will need to be cast to a\n+   pointer of the correct type before it can be called.\n+\n+   This is a *pointer* to the global, so e.g. for an :c:type:`int` this is\n+   an :c:type:`int *`.\n+\n+   For example, given an ``int foo;`` created this way:\n+\n+   .. code-block:: c\n+\n+     gcc_jit_lvalue *exported_global =\n+       gcc_jit_context_new_global (ctxt,\n+       any_location, /* or NULL */\n+       GCC_JIT_GLOBAL_EXPORTED,\n+       int_type,\n+       \"foo\");\n+\n+   we can access it like this:\n+\n+   .. code-block:: c\n+\n+      int *ptr_to_foo =\n+        (int *)gcc_jit_result_get_global (result, \"foo\");\n+\n+   If such a global is not found (or `result` or `name` are\n+   ``NULL``), an error message will be emitted on stderr and\n+   ``NULL`` will be returned.\n+\n+   Note that the resulting address becomes invalid after\n+   :func:`gcc_jit_result_release` is called on the\n+   :type:`gcc_jit_result *`; attempting to use it after that may lead\n+   to a segmentation fault.\n \n .. function:: void\\\n               gcc_jit_result_release (gcc_jit_result *result)\n \n    Once we're done with the code, this unloads the built .so file.\n    This cleans up the result; after calling this, it's no longer\n-   valid to use the result, or any code that was obtained by calling\n-   :func:`gcc_jit_result_get_code` on it.\n+   valid to use the result, or any code or globals that were obtained\n+   by calling :func:`gcc_jit_result_get_code` or\n+   :func:`gcc_jit_result_get_global` on it."}, {"sha": "9f799d302677b0963673c0605b60f479b8636c3c", "filename": "gcc/jit/dummy-frontend.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdummy-frontend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fdummy-frontend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdummy-frontend.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -221,11 +221,16 @@ jit_langhook_getdecls (void)\n static void\n jit_langhook_write_globals (void)\n {\n-  gcc_assert (gcc::jit::active_playback_ctxt);\n-  JIT_LOG_SCOPE (gcc::jit::active_playback_ctxt->get_logger ());\n+  gcc::jit::playback::context *ctxt = gcc::jit::active_playback_ctxt;\n+  gcc_assert (ctxt);\n+  JIT_LOG_SCOPE (ctxt->get_logger ());\n+\n+  ctxt->write_global_decls_1 ();\n \n   /* This is the hook that runs the middle and backends: */\n   symtab->finalize_compilation_unit ();\n+\n+  ctxt->write_global_decls_2 ();\n }\n \n #undef LANG_HOOKS_NAME"}, {"sha": "0e45e0267e3880cf5c93b8b42d055a99194597c2", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"context.h\"\n #include \"fold-const.h\"\n+#include \"debug.h\"\n \n #include \"jit-common.h\"\n #include \"jit-logging.h\"\n@@ -109,6 +110,7 @@ playback::context::context (recording::context *ctxt)\n {\n   JIT_LOG_SCOPE (get_logger ());\n   m_functions.create (0);\n+  m_globals.create (0);\n   m_source_files.create (0);\n   m_cached_locations.create (0);\n }\n@@ -482,6 +484,7 @@ new_function (location *loc,\n playback::lvalue *\n playback::context::\n new_global (location *loc,\n+\t    enum gcc_jit_global_kind kind,\n \t    type *type,\n \t    const char *name)\n {\n@@ -490,13 +493,33 @@ new_global (location *loc,\n   tree inner = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n \t\t\t   get_identifier (name),\n \t\t\t   type->as_tree ());\n-  TREE_PUBLIC (inner) = 1;\n+  TREE_PUBLIC (inner) = (kind != GCC_JIT_GLOBAL_INTERNAL);\n   DECL_COMMON (inner) = 1;\n-  DECL_EXTERNAL (inner) = 1;\n+  switch (kind)\n+    {\n+    default:\n+      gcc_unreachable ();\n+\n+    case GCC_JIT_GLOBAL_EXPORTED:\n+      TREE_STATIC (inner) = 1;\n+      break;\n+\n+    case GCC_JIT_GLOBAL_INTERNAL:\n+      TREE_STATIC (inner) = 1;\n+      break;\n+\n+    case GCC_JIT_GLOBAL_IMPORTED:\n+      DECL_EXTERNAL (inner) = 1;\n+      break;\n+    }\n \n   if (loc)\n     set_tree_location (inner, loc);\n \n+  varpool_node::get_create (inner);\n+\n+  m_globals.safe_push (inner);\n+\n   return new lvalue (this, inner);\n }\n \n@@ -649,6 +672,45 @@ as_truth_value (tree expr, location *loc)\n   return expr;\n }\n \n+/* For use by jit_langhook_write_globals.\n+   Calls varpool_node::finalize_decl on each global.  */\n+\n+void\n+playback::context::\n+write_global_decls_1 ()\n+{\n+  /* Compare with e.g. the C frontend's c_write_global_declarations.  */\n+  JIT_LOG_SCOPE (get_logger ());\n+\n+  int i;\n+  tree decl;\n+  FOR_EACH_VEC_ELT (m_globals, i, decl)\n+    {\n+      gcc_assert (TREE_CODE (decl) == VAR_DECL);\n+      varpool_node::finalize_decl (decl);\n+    }\n+}\n+\n+/* For use by jit_langhook_write_globals.\n+   Calls debug_hooks->global_decl on each global.  */\n+\n+void\n+playback::context::\n+write_global_decls_2 ()\n+{\n+  /* Compare with e.g. the C frontend's c_write_global_declarations_2. */\n+  JIT_LOG_SCOPE (get_logger ());\n+\n+  int i;\n+  tree decl;\n+  FOR_EACH_VEC_ELT (m_globals, i, decl)\n+    {\n+      gcc_assert (TREE_CODE (decl) == VAR_DECL);\n+      debug_hooks->global_decl (decl);\n+    }\n+}\n+\n+\n /* Construct a playback::rvalue instance (wrapping a tree) for a\n    unary op.  */\n "}, {"sha": "8efd506ff895e7333dc911997e1f1dc3b4434457", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -90,6 +90,7 @@ class context : public log_user\n \n   lvalue *\n   new_global (location *loc,\n+\t      enum gcc_jit_global_kind kind,\n \t      type *type,\n \t      const char *name);\n \n@@ -206,6 +207,10 @@ class context : public log_user\n     return m_recording_ctxt->errors_occurred ();\n   }\n \n+  /* For use by jit_langhook_write_globals.  */\n+  void write_global_decls_1 ();\n+  void write_global_decls_2 ();\n+\n private:\n   void dump_generated_code ();\n \n@@ -259,6 +264,7 @@ class context : public log_user\n   tempdir *m_tempdir;\n \n   auto_vec<function *> m_functions;\n+  auto_vec<tree> m_globals;\n   tree m_char_array_type_node;\n   tree m_const_char_ptr;\n "}, {"sha": "20fd2d2f82b860f1ada6d4bffd114ae10fe5c177", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -177,6 +177,7 @@ recording::context::context (context *parent_ctxt)\n     m_owns_last_error_str (false),\n     m_mementos (),\n     m_compound_types (),\n+    m_globals (),\n     m_functions (),\n     m_FILE_type (NULL),\n     m_builtins_manager(NULL)\n@@ -636,12 +637,15 @@ recording::context::get_builtin_function (const char *name)\n \n recording::lvalue *\n recording::context::new_global (recording::location *loc,\n+\t\t\t\tenum gcc_jit_global_kind kind,\n \t\t\t\trecording::type *type,\n \t\t\t\tconst char *name)\n {\n-  recording::lvalue *result =\n-    new recording::global (this, loc, type, new_string (name));\n+  recording::global *result =\n+    new recording::global (this, loc, kind, type, new_string (name));\n   record (result);\n+  m_globals.safe_push (result);\n+\n   return result;\n }\n \n@@ -1016,6 +1020,15 @@ recording::context::dump_to_file (const char *path, bool update_locations)\n \td.write (\"\\n\");\n       }\n \n+  /* Globals.  */\n+  global *g;\n+  FOR_EACH_VEC_ELT (m_globals, i, g)\n+    {\n+      g->write_to_dump (d);\n+    }\n+  if (!m_globals.is_empty ())\n+    d.write (\"\\n\");\n+\n   function *fn;\n   FOR_EACH_VEC_ELT (m_functions, i, fn)\n     {\n@@ -2648,10 +2661,57 @@ void\n recording::global::replay_into (replayer *r)\n {\n   set_playback_obj (r->new_global (playback_location (r, m_loc),\n+\t\t\t\t   m_kind,\n \t\t\t\t   m_type->playback_type (),\n \t\t\t\t   playback_string (m_name)));\n }\n \n+/* Override the default implementation of\n+   recording::memento::write_to_dump for globals.\n+   This will be of the form:\n+\n+   GCC_JIT_GLOBAL_EXPORTED:\n+      \"TYPE NAME;\"\n+      e.g. \"int foo;\"\n+\n+   GCC_JIT_GLOBAL_INTERNAL:\n+      \"static TYPE NAME;\"\n+      e.g. \"static int foo;\"\n+\n+   GCC_JIT_GLOBAL_IMPORTED:\n+      \"extern TYPE NAME;\"\n+      e.g. \"extern int foo;\"\n+\n+   These are written to the top of the dump by\n+   recording::context::dump_to_file.  */\n+\n+void\n+recording::global::write_to_dump (dump &d)\n+{\n+  if (d.update_locations ())\n+    m_loc = d.make_location ();\n+\n+  switch (m_kind)\n+    {\n+    default:\n+      gcc_unreachable ();\n+\n+    case GCC_JIT_GLOBAL_EXPORTED:\n+      break;\n+\n+    case GCC_JIT_GLOBAL_INTERNAL:\n+      d.write (\"static \");\n+      break;\n+\n+    case GCC_JIT_GLOBAL_IMPORTED:\n+      d.write (\"extern \");\n+      break;\n+    }\n+  d.write (\"%s %s;\\n\",\n+\t   m_type->get_debug_string (),\n+\t   get_debug_string ());\n+}\n+\n /* The implementation of the various const-handling classes:\n    gcc::jit::recording::memento_of_new_rvalue_from_const <HOST_TYPE>.  */\n "}, {"sha": "43e99bae0fda88db011f3c83ba1dfdad806b9c44", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -132,6 +132,7 @@ class context : public log_user\n \n   lvalue *\n   new_global (location *loc,\n+\t      enum gcc_jit_global_kind kind,\n \t      type *type,\n \t      const char *name);\n \n@@ -272,6 +273,7 @@ class context : public log_user\n \n   /* Specific recordings, for use by dump_to_file.  */\n   auto_vec<compound_type *> m_compound_types;\n+  auto_vec<global *> m_globals;\n   auto_vec<function *> m_functions;\n \n   type *m_basic_types[NUM_GCC_JIT_TYPES];\n@@ -1051,18 +1053,23 @@ class global : public lvalue\n public:\n   global (context *ctxt,\n \t  location *loc,\n+\t  enum gcc_jit_global_kind kind,\n \t  type *type,\n \t  string *name)\n   : lvalue (ctxt, loc, type),\n+    m_kind (kind),\n     m_name (name)\n   {}\n \n   void replay_into (replayer *);\n \n+  void write_to_dump (dump &d);\n+\n private:\n   string * make_debug_string () { return m_name; }\n \n private:\n+  enum gcc_jit_global_kind m_kind;\n   string *m_name;\n };\n "}, {"sha": "30acdc663db7e6992fc195000074b0b353e7f52d", "filename": "gcc/jit/jit-result.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-result.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-result.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -86,6 +86,33 @@ get_code (const char *funcname)\n   return code;\n }\n \n+/* Attempt to locate the given global by name within the\n+   playback::result, using dlsym.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_result_get_global.  */\n+\n+void *\n+result::\n+get_global (const char *name)\n+{\n+  JIT_LOG_SCOPE (get_logger ());\n+\n+  void *global;\n+  const char *error;\n+\n+  /* Clear any existing error.  */\n+  dlerror ();\n+\n+  global = dlsym (m_dso_handle, name);\n+\n+  if ((error = dlerror()) != NULL)  {\n+    fprintf(stderr, \"%s\\n\", error);\n+  }\n+\n+  return global;\n+}\n+\n } // namespace gcc::jit\n \n } // namespace gcc"}, {"sha": "b2d179dec53be623da83d35cc929bb4eaee61509", "filename": "gcc/jit/jit-result.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-result.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Fjit-result.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.h?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -36,6 +36,9 @@ class result : public log_user\n   void *\n   get_code (const char *funcname);\n \n+  void *\n+  get_global (const char *name);\n+\n private:\n   void *m_dso_handle;\n   tempdir *m_tempdir;"}, {"sha": "79320f676f7c5e65420646d30392d9191c589a7b", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -155,7 +155,8 @@ namespace gccjit\n \n     function get_builtin_function (const std::string &name);\n \n-    lvalue new_global (type type_,\n+    lvalue new_global (enum gcc_jit_global_kind kind,\n+\t\t       type type_,\n \t\t       const std::string &name,\n \t\t       location loc = location ());\n \n@@ -707,12 +708,14 @@ context::get_builtin_function (const std::string &name)\n }\n \n inline lvalue\n-context::new_global (type type_,\n+context::new_global (enum gcc_jit_global_kind kind,\n+\t\t     type type_,\n \t\t     const std::string &name,\n \t\t     location loc)\n {\n   return lvalue (gcc_jit_context_new_global (m_inner_ctxt,\n \t\t\t\t\t     loc.get_inner_location (),\n+\t\t\t\t\t     kind,\n \t\t\t\t\t     type_.get_inner_type (),\n \t\t\t\t\t     name.c_str ()));\n }"}, {"sha": "d596d08cd3e060e3a8f8476c551741148bbf4474", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -987,16 +987,23 @@ gcc_jit_block_get_function (gcc_jit_block *block)\n gcc_jit_lvalue *\n gcc_jit_context_new_global (gcc_jit_context *ctxt,\n \t\t\t    gcc_jit_location *loc,\n+\t\t\t    enum gcc_jit_global_kind kind,\n \t\t\t    gcc_jit_type *type,\n \t\t\t    const char *name)\n {\n   RETURN_NULL_IF_FAIL (ctxt, NULL, loc, \"NULL context\");\n   JIT_LOG_FUNC (ctxt->get_logger ());\n   /* LOC can be NULL.  */\n+  RETURN_NULL_IF_FAIL_PRINTF1 (\n+    ((kind >= GCC_JIT_GLOBAL_EXPORTED)\n+     && (kind <= GCC_JIT_GLOBAL_IMPORTED)),\n+    ctxt, loc,\n+    \"unrecognized value for enum gcc_jit_global_kind: %i\",\n+    kind);\n   RETURN_NULL_IF_FAIL (type, ctxt, loc, \"NULL type\");\n   RETURN_NULL_IF_FAIL (name, ctxt, loc, \"NULL name\");\n \n-  return (gcc_jit_lvalue *)ctxt->new_global (loc, type, name);\n+  return (gcc_jit_lvalue *)ctxt->new_global (loc, kind, type, name);\n }\n \n /* Public entrypoint.  See description in libgccjit.h.\n@@ -2213,6 +2220,25 @@ gcc_jit_result_get_code (gcc_jit_result *result,\n   return code;\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::result::get_global method in jit-result.c.  */\n+\n+void *\n+gcc_jit_result_get_global (gcc_jit_result *result,\n+\t\t\t   const char *name)\n+{\n+  RETURN_NULL_IF_FAIL (result, NULL, NULL, \"NULL result\");\n+  JIT_LOG_FUNC (result->get_logger ());\n+  RETURN_NULL_IF_FAIL (name, NULL, NULL, \"NULL name\");\n+\n+  void *global = result->get_global (name);\n+  result->log (\"%s: returning (void *)%p\", __func__, global);\n+\n+  return global;\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, this is essentially a wrapper around the"}, {"sha": "41c76eacdecba70558e41915430f8b0f4ea7aeca", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -299,6 +299,13 @@ extern void *\n gcc_jit_result_get_code (gcc_jit_result *result,\n \t\t\t const char *funcname);\n \n+/* Locate a given global within the built machine code.\n+   It must have been created using GCC_JIT_GLOBAL_EXPORTED.\n+   This is a ptr to the global, so e.g. for an int this is an int *.  */\n+extern void *\n+gcc_jit_result_get_global (gcc_jit_result *result,\n+\t\t\t   const char *name);\n+\n /* Once we're done with the code, this unloads the built .so file.\n    This cleans up the result; after calling this, it's no longer\n    valid to use the result.  */\n@@ -606,10 +613,26 @@ gcc_jit_block_get_function (gcc_jit_block *block);\n /**********************************************************************\n  lvalues, rvalues and expressions.\n  **********************************************************************/\n+enum gcc_jit_global_kind\n+{\n+  /* Global is defined by the client code and visible\n+     by name outside of this JIT context via gcc_jit_result_get_global.  */\n+  GCC_JIT_GLOBAL_EXPORTED,\n+\n+  /* Global is defined by the client code, but is invisible\n+     outside of this JIT context.  Analogous to a \"static\" global.  */\n+  GCC_JIT_GLOBAL_INTERNAL,\n+\n+  /* Global is not defined by the client code; we're merely\n+     referring to it.  Analogous to using an \"extern\" global from a\n+     header file.  */\n+  GCC_JIT_GLOBAL_IMPORTED\n+};\n \n extern gcc_jit_lvalue *\n gcc_jit_context_new_global (gcc_jit_context *ctxt,\n \t\t\t    gcc_jit_location *loc,\n+\t\t\t    enum gcc_jit_global_kind kind,\n \t\t\t    gcc_jit_type *type,\n \t\t\t    const char *name);\n "}, {"sha": "3ab88fda4b5adcf9fd722a093adebd76b961e4ab", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -87,6 +87,7 @@\n     gcc_jit_param_as_object;\n     gcc_jit_param_as_rvalue;\n     gcc_jit_result_get_code;\n+    gcc_jit_result_get_global;\n     gcc_jit_result_release;\n     gcc_jit_rvalue_access_field;\n     gcc_jit_rvalue_as_object;"}, {"sha": "3c267d8c8c82bfa334bf296999367bd1b2c50b5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -1,3 +1,17 @@\n+2015-01-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/test-array-as-pointer.c (create_code): Update call\n+\tto gcc_jit_context_new_global by setting \"kind\" to\n+\tGCC_JIT_GLOBAL_IMPORTED.\n+\t* jit.dg/test-error-array-as-pointer.c: Likewise.\n+\t* jit.dg/test-expressions.c (make_test_of_get_address): Likewise.\n+\t* jit.dg/test-fuzzer.c (make_random_global): Likewise, but\n+\tsetting kind to GCC_JIT_GLOBAL_EXPORTED.\n+\t* jit.dg/test-using-global.c (the_global): Rename to...\n+\t(imported_global): ...this.\n+\t(create_code): Update to test the three kinds of global.\n+\t(verify_code): Likewise.\n+\n 2015-01-12  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR testsuite/64427"}, {"sha": "6b1f9adfcef8ae80edfe3543de9511bd8617f191", "filename": "gcc/testsuite/jit.dg/test-array-as-pointer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-array-as-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-array-as-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-array-as-pointer.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -62,7 +62,8 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n \t\t\t\t  0);\n \n   gcc_jit_lvalue *buffer =\n-    gcc_jit_context_new_global (ctxt, NULL, buf_type, \"test_buffer\");\n+    gcc_jit_context_new_global (ctxt, NULL, GCC_JIT_GLOBAL_IMPORTED,\n+\t\t\t\tbuf_type, \"test_buffer\");\n \n   gcc_jit_block *block = gcc_jit_function_new_block(test_fn, \"entry\");\n "}, {"sha": "d2c07b34e911841e695c44402a6419fb0b1e5ab3", "filename": "gcc/testsuite/jit.dg/test-error-array-as-pointer.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-as-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-as-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-as-pointer.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -62,7 +62,10 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n \t\t\t\t  0);\n \n   gcc_jit_lvalue *buffer =\n-    gcc_jit_context_new_global (ctxt, NULL, buf_type, \"test_buffer\");\n+    gcc_jit_context_new_global (ctxt, NULL,\n+\t\t\t\tGCC_JIT_GLOBAL_IMPORTED,\n+\t\t\t\tbuf_type,\n+\t\t\t\t\"test_buffer\");\n \n   gcc_jit_block *block = gcc_jit_function_new_block(test_fn, \"entry\");\n "}, {"sha": "548cfa2f195b61c11bb6eb8875cb693b09ee00a4", "filename": "gcc/testsuite/jit.dg/test-expressions.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-expressions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-expressions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-expressions.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -884,6 +884,7 @@ make_test_of_get_address (gcc_jit_context *ctxt)\n     gcc_jit_context_new_global (\n       ctxt,\n       NULL,\n+      GCC_JIT_GLOBAL_IMPORTED,\n       int_type,\n       \"test_global\");\n "}, {"sha": "6943d3ed232d6b1d9e7466e8e49deb8a31c9eb1e", "filename": "gcc/testsuite/jit.dg/test-fuzzer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -238,6 +238,7 @@ make_random_global (fuzzer *f)\n   sprintf (global_name, \"g%i\", f->num_globals);\n   return gcc_jit_context_new_global (f->ctxt,\n \t\t\t\t     get_random_location (f),\n+\t\t\t\t     GCC_JIT_GLOBAL_EXPORTED,\n \t\t\t\t     get_random_type (f),\n \t\t\t\t     global_name);\n }"}, {"sha": "8ac9780d2b130d95206b4dc6fdb9caec4563860e", "filename": "gcc/testsuite/jit.dg/test-using-global.c", "status": "modified", "additions": 72, "deletions": 15, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-using-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791cfef8e7553e4939a1ed095e25414f6dc713d6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-using-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-using-global.c?ref=791cfef8e7553e4939a1ed095e25414f6dc713d6", "patch": "@@ -9,7 +9,7 @@\n extern \"C\" {\n #endif\n \n-  extern int the_global;\n+  extern int imported_global;\n \n #ifdef __cplusplus\n }\n@@ -19,55 +19,112 @@ void\n create_code (gcc_jit_context *ctxt, void *user_data)\n {\n   /* Let's try to inject the equivalent of:\n-     extern int the_global;\n \n-     void\n+     int exported_global;\n+     extern int imported_global;\n+     static int internal_global;\n+\n+     int\n      test_using_global (void)\n      {\n-\tthe_global += 1;\n+\texported_global += 1;\n+\timported_global += 1;\n+\tinternal_global += 1;\n+\treturn internal_global;\n      }\n   */\n-  gcc_jit_type *void_type =\n-    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n   gcc_jit_type *int_type =\n     gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n \n+  gcc_jit_lvalue *exported_global =\n+    gcc_jit_context_new_global (ctxt,\n+\t\t\t\tNULL,\n+\t\t\t\tGCC_JIT_GLOBAL_EXPORTED,\n+\t\t\t\tint_type,\n+\t\t\t\t\"exported_global\");\n+  gcc_jit_lvalue *imported_global =\n+    gcc_jit_context_new_global (ctxt,\n+\t\t\t\tNULL,\n+\t\t\t\tGCC_JIT_GLOBAL_IMPORTED,\n+\t\t\t\tint_type,\n+\t\t\t\t\"imported_global\");\n+  gcc_jit_lvalue *internal_global =\n+    gcc_jit_context_new_global (ctxt,\n+\t\t\t\tNULL,\n+\t\t\t\tGCC_JIT_GLOBAL_INTERNAL,\n+\t\t\t\tint_type,\n+\t\t\t\t\"internal_global\");\n+\n   /* Build the test_fn.  */\n   gcc_jit_function *test_fn =\n     gcc_jit_context_new_function (ctxt, NULL,\n \t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n-\t\t\t\t  void_type,\n+\t\t\t\t  int_type,\n \t\t\t\t  \"test_using_global\",\n \t\t\t\t  0, NULL,\n \t\t\t\t  0);\n   gcc_jit_block *block = gcc_jit_function_new_block (test_fn, NULL);\n \n   gcc_jit_block_add_assignment_op (\n     block, NULL,\n-    gcc_jit_context_new_global (ctxt, NULL, int_type, \"the_global\"),\n+    exported_global,\n+    GCC_JIT_BINARY_OP_PLUS,\n+    gcc_jit_context_one (ctxt, int_type));\n+  gcc_jit_block_add_assignment_op (\n+    block, NULL,\n+    imported_global,\n+    GCC_JIT_BINARY_OP_PLUS,\n+    gcc_jit_context_one (ctxt, int_type));\n+  gcc_jit_block_add_assignment_op (\n+    block, NULL,\n+    internal_global,\n     GCC_JIT_BINARY_OP_PLUS,\n     gcc_jit_context_one (ctxt, int_type));\n-  gcc_jit_block_end_with_void_return (block, NULL);\n+  gcc_jit_block_end_with_return (block,\n+\t\t\t\t NULL,\n+\t\t\t\t gcc_jit_lvalue_as_rvalue (internal_global));\n }\n \n-int the_global;\n+int imported_global;\n \n void\n verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n {\n-  typedef void (*fn_type) (void);\n+  typedef int (*fn_type) (void);\n   CHECK_NON_NULL (result);\n \n   fn_type test_using_global =\n     (fn_type)gcc_jit_result_get_code (result, \"test_using_global\");\n   CHECK_NON_NULL (test_using_global);\n \n-  the_global = 42;\n+  /* The exported global should be visible.  */\n+  int *exported_global = (int *)gcc_jit_result_get_global (result, \"exported_global\");\n+  CHECK_NON_NULL (exported_global);\n+  /* ...and should be zero-initialized.  */\n+  CHECK_VALUE (*exported_global, 0);\n+\n+  /* Set some nonzero values.  */\n+  *exported_global = 11;\n+  imported_global = 42;\n+\n+  /* The internal global shouldn't be visible.  */\n+  int *internal_global = (int *)gcc_jit_result_get_global (result, \"internal_global\");\n+  CHECK_VALUE (internal_global, NULL);\n \n   /* Call the JIT-generated function.  */\n-  test_using_global ();\n+  int call_count = test_using_global ();\n+\n+  /* Verify that it correctly modified imported_global and exported_global.  */\n+  CHECK_VALUE (*exported_global, 12);\n+  CHECK_VALUE (imported_global, 43);\n+  CHECK_VALUE (call_count, 1);\n+\n+  /* Try calling it again.  */\n+  call_count = test_using_global ();\n \n-  /* Verify that it correctly modified the_global.  */\n-  CHECK_VALUE (the_global, 43);\n+  /* Verify the new values.  */\n+  CHECK_VALUE (*exported_global, 13);\n+  CHECK_VALUE (imported_global, 44);\n+  CHECK_VALUE (call_count, 2);\n }\n "}]}