{"sha": "e65530503a4bc35f009c8f6afdfd01d6ab13383f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1NTMwNTAzYTRiYzM1ZjAwOWM4ZjZhZmRmZDAxZDZhYjEzMzgzZg==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-06-22T07:32:15Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-06-22T07:32:15Z"}, "message": "Add -mflip-thumb for testing.\n\nPR target/52144n\n* config/arm/arm.c (add_attribute, arm_insert_attributes): New functions\n(TARGET_INSERT_ATTRIBUTES): Define.\n(thumb_flipper): New var.\n* config/arm/arm.opt (-mflip-thumb): New switch.\n\nPR target/52144\n* gcc.target/arm/flip-thumb.c: New test.\n\nFrom-SVN: r224721", "tree": {"sha": "d66f77f31f9b2697a0441ff1de7eec1d80e41c70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66f77f31f9b2697a0441ff1de7eec1d80e41c70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65530503a4bc35f009c8f6afdfd01d6ab13383f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65530503a4bc35f009c8f6afdfd01d6ab13383f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65530503a4bc35f009c8f6afdfd01d6ab13383f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65530503a4bc35f009c8f6afdfd01d6ab13383f/comments", "author": null, "committer": null, "parents": [{"sha": "1628e36bcf93a88d29885dd4e47e44ba80f909c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1628e36bcf93a88d29885dd4e47e44ba80f909c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1628e36bcf93a88d29885dd4e47e44ba80f909c6"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "b96806947ef98b4ea0904454cc42f40c7962d680", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e65530503a4bc35f009c8f6afdfd01d6ab13383f", "patch": "@@ -1,3 +1,10 @@\n+2015-06-22  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* config/arm/arm.c (add_attribute, arm_insert_attributes): New functions\n+\t(TARGET_INSERT_ATTRIBUTES): Define.\n+\t(thumb_flipper): New var.\n+\t* config/arm/arm.opt (-mflip-thumb): New switch.\n+\n 2015-06-22  Jan Hubicka  <hubicka@ucw.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "ced4231cd8c5e0cdf4ed4e3e5a37c10bad9e0be4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e65530503a4bc35f009c8f6afdfd01d6ab13383f", "patch": "@@ -84,6 +84,7 @@\n #include \"tm-constrs.h\"\n #include \"rtl-iter.h\"\n #include \"sched-int.h\"\n+#include \"tree.h\"\n \n /* Forward definitions of types.  */\n typedef struct minipool_node    Mnode;\n@@ -218,6 +219,7 @@ static void arm_encode_section_info (tree, rtx, int);\n \n static void arm_file_end (void);\n static void arm_file_start (void);\n+static void arm_insert_attributes (tree, tree *);\n \n static void arm_setup_incoming_varargs (cumulative_args_t, machine_mode,\n \t\t\t\t\ttree, int *, int);\n@@ -376,6 +378,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef  TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE arm_attribute_table\n \n+#undef  TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES arm_insert_attributes\n+\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START arm_file_start\n #undef TARGET_ASM_FILE_END\n@@ -2792,6 +2797,10 @@ arm_option_params_internal (struct gcc_options *opts)\n          ? 1 : current_tune->max_insns_skipped;\n }\n \n+/* True if -mflip-thumb should next add an attribute for the default\n+   mode, false if it should next add an attribute for the opposite mode.  */\n+static GTY(()) bool thumb_flipper;\n+\n /* Options after initial target override.  */\n static GTY(()) tree init_optimize;\n \n@@ -3369,6 +3378,9 @@ arm_option_override (void)\n      options.  */\n   target_option_default_node = target_option_current_node\n     = build_target_option_node (&global_options);\n+\n+  /* Init initial mode for testing.  */\n+  thumb_flipper = TARGET_THUMB;\n }\n \n static void\n@@ -29459,6 +29471,52 @@ arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n   return build_target_option_node (opts);\n }\n \n+static void \n+add_attribute  (const char * mode, tree *attributes)\n+{\n+  size_t len = strlen (mode);\n+  tree value = build_string (len, mode);\n+\n+  TREE_TYPE (value) = build_array_type (char_type_node,\n+\t\t\t\t\tbuild_index_type (size_int (len)));\n+\n+  *attributes = tree_cons (get_identifier (\"target\"),\n+\t\t\t   build_tree_list (NULL_TREE, value),\n+\t\t\t   *attributes);\n+}\n+\n+/* For testing. Insert thumb or arm modes alternatively on functions.  */\n+\n+static void\n+arm_insert_attributes (tree fndecl, tree * attributes)\n+{\n+  const char *mode;\n+\n+  if (! TARGET_FLIP_THUMB)\n+    return;\n+\n+  if (TREE_CODE (fndecl) != FUNCTION_DECL || DECL_EXTERNAL(fndecl)\n+      || DECL_BUILT_IN (fndecl) || DECL_ARTIFICIAL (fndecl))\n+   return;\n+\n+  /* Nested definitions must inherit mode.  */\n+  if (current_function_decl)\n+   {\n+     mode = TARGET_THUMB ? \"thumb\" : \"arm\";      \n+     add_attribute (mode, attributes);\n+     return;\n+   }\n+\n+  /* If there is already a setting don't change it.  */\n+  if (lookup_attribute (\"target\", *attributes) != NULL)\n+    return;\n+\n+  mode = thumb_flipper ? \"thumb\" : \"arm\";\n+  add_attribute (mode, attributes);\n+\n+  thumb_flipper = !thumb_flipper;\n+}\n+\n /* Hook to validate attribute((target(\"string\"))).  */\n \n static bool"}, {"sha": "c9095b9eeab1776239090d78caae07ef7b2c1d26", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=e65530503a4bc35f009c8f6afdfd01d6ab13383f", "patch": "@@ -122,6 +122,10 @@ Enum(float_abi_type) String(softfp) Value(ARM_FLOAT_ABI_SOFTFP)\n EnumValue\n Enum(float_abi_type) String(hard) Value(ARM_FLOAT_ABI_HARD)\n \n+mflip-thumb\n+Target Report Var(TARGET_FLIP_THUMB) Undocumented\n+Switch ARM/Thumb modes on alternating functions for compiler testing\n+\n mfp16-format=\n Target RejectNegative Joined Enum(arm_fp16_format_type) Var(arm_fp16_format) Init(ARM_FP16_FORMAT_NONE)\n Specify the __fp16 floating-point format"}, {"sha": "666acc1b2d4579e71eeeb5b8942ad4850c342a37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e65530503a4bc35f009c8f6afdfd01d6ab13383f", "patch": "@@ -1,3 +1,8 @@\n+2015-06-22  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/52144\n+\t* gcc.target/arm/flip-thumb.c: New test.\n+\n 2015-06-22  Jan Hubicka  <hubicka@ucw.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "05f6bb7b4231d063edf8999b0db1784a63115306", "filename": "gcc/testsuite/gcc.target/arm/flip-thumb.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fflip-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65530503a4bc35f009c8f6afdfd01d6ab13383f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fflip-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fflip-thumb.c?ref=e65530503a4bc35f009c8f6afdfd01d6ab13383f", "patch": "@@ -0,0 +1,24 @@\n+/* Check -mflip-thumb. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mflip-thumb -mno-restrict-it\" } */\n+/* { dg-final { scan-assembler \".arm\" } } */\n+/* { dg-final { scan-assembler-times \".thumb_func\" 1} } */\n+\n+int \n+foo(int a)\n+{\n+  return a ? 1 : 5;\n+}\n+\n+int \n+bar(int a)\n+{\n+  return a ? 1 : 5;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ite\" 1 { target { arm_thumb2_ok } } } } */\n+\n+\n+\n+\n+"}]}