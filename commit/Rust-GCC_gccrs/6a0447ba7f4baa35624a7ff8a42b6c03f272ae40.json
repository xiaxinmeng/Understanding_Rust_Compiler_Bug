{"sha": "6a0447ba7f4baa35624a7ff8a42b6c03f272ae40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwNDQ3YmE3ZjRiYWEzNTYyNGE3ZmY4YTQyYjZjMDNmMjcyYWU0MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-22T09:35:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-22T09:35:56Z"}, "message": "i386.md: Use {} around multi-line preparation statements.\n\n\t* config/i386/i386.md: Use {} around multi-line preparation statements.\n\nFrom-SVN: r158635", "tree": {"sha": "238c38daa67fb5d8425d7d1dfa833e038bbf916b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/238c38daa67fb5d8425d7d1dfa833e038bbf916b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40/comments", "author": null, "committer": null, "parents": [{"sha": "a1e3b3d9f0c61b729ad64db479f3dc4c641203ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e3b3d9f0c61b729ad64db479f3dc4c641203ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e3b3d9f0c61b729ad64db479f3dc4c641203ff"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "2684bec6faaa5b93ef68083596de9f7844cd9197", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a0447ba7f4baa35624a7ff8a42b6c03f272ae40", "patch": "@@ -1,3 +1,7 @@\n+2010-04-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md: Use {} around multi-line preparation statements.\n+\n 2010-04-22  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* c-tree.h (push_init_level, pop_init_level, set_init_index)\n@@ -129,14 +133,12 @@\n \t* dwarf2out.c (add_var_loc_to_decl): Add LABEL argument.  Drop\n \tlast chain entry if it starts with the still current label.\n \t(add_location_or_const_value_attribute): Check that\n-\tloc_list->first->next is NULL instead of comparing ->first with\n-\t->last.\n+\tloc_list->first->next is NULL instead of comparing ->first with ->last.\n \t(dwarf2out_var_location): Pass last_label resp. last_postcall_label\n \tto add_var_loc_to_decl.\n \n \t* dwarf2out.c (output_call_frame_info): For dw_cie_version\n-\t>= 4 add also address size and segment size fields into CIE\n-\theader.\n+\t>= 4 add also address size and segment size fields into CIE header.\n \n \t* unwind-dw2.c (extract_cie_info): Handle CIE version 4, as\n \tlong as address size is the same as sizeof (void *) and"}, {"sha": "8249efd31fd1aa88117bc4d834b3c59ce6a1cf7b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0447ba7f4baa35624a7ff8a42b6c03f272ae40/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6a0447ba7f4baa35624a7ff8a42b6c03f272ae40", "patch": "@@ -2380,11 +2380,13 @@\n    && !x86_64_immediate_operand (operands[1], DImode) && 1\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2) (match_dup 3))]\n-  \"split_di (&operands[1], 1, &operands[2], &operands[3]);\n-   operands[1] = gen_lowpart (DImode, operands[2]);\n-   operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (DImode, stack_pointer_rtx,\n-\t\t\t\t\t\t    GEN_INT (4)));\n-  \")\n+{\n+  split_di (&operands[1], 1, &operands[2], &operands[3]);\n+\n+  operands[1] = gen_lowpart (DImode, operands[2]);\n+  operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (DImode, stack_pointer_rtx,\n+\t\t\t\t\t\t   GEN_INT (4)));\n+})\n \n (define_split\n   [(set (match_operand:DI 0 \"push_operand\" \"\")\n@@ -2395,11 +2397,13 @@\n    && !x86_64_immediate_operand (operands[1], DImode)\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2) (match_dup 3))]\n-  \"split_di (&operands[1], 1, &operands[2], &operands[3]);\n-   operands[1] = gen_lowpart (DImode, operands[2]);\n-   operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (DImode, stack_pointer_rtx,\n-\t\t\t\t\t\t    GEN_INT (4)));\n-  \")\n+{\n+  split_di (&operands[1], 1, &operands[2], &operands[3]);\n+\n+  operands[1] = gen_lowpart (DImode, operands[2]);\n+  operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (DImode, stack_pointer_rtx,\n+\t\t\t\t\t\t   GEN_INT (4)));\n+})\n \n (define_insn \"*pushdi2_prologue_rex64\"\n   [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n@@ -11535,6 +11539,7 @@\n   [(const_int 0)]\n {\n   operands[7] = gen_rtx_FLOAT (GET_MODE (operands[1]), operands[2]);\n+\n   ix86_split_fp_branch (swap_condition (GET_CODE (operands[0])),\n \t\t\toperands[3], operands[7],\n \t\t\toperands[4], operands[5], operands[6], NULL_RTX);\n@@ -11558,6 +11563,7 @@\n {\n   operands[7] = ix86_force_to_memory (GET_MODE (operands[2]), operands[2]);\n   operands[7] = gen_rtx_FLOAT (GET_MODE (operands[1]), operands[7]);\n+\n   ix86_split_fp_branch (swap_condition (GET_CODE (operands[0])),\n \t\t\toperands[3], operands[7],\n \t\t\toperands[4], operands[5], operands[6], operands[2]);\n@@ -16660,8 +16666,10 @@\n \t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n \t\t      (match_dup 7)\n \t\t      (match_dup 8)))]\n-  \"split_di (&operands[2], 2, &operands[5], &operands[7]);\n-   split_di (&operands[0], 1, &operands[2], &operands[3]);\")\n+{\n+  split_di (&operands[2], 2, &operands[5], &operands[7]);\n+  split_di (&operands[0], 1, &operands[2], &operands[3]);\n+})\n \n (define_insn \"*movxfcc_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")"}]}