{"sha": "6dddab0845c9056db22ecb86c12564244fa0f911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkZGFiMDg0NWM5MDU2ZGIyMmVjYjg2YzEyNTY0MjQ0ZmEwZjkxMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-18T18:41:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-18T18:41:43Z"}, "message": "Fix indentation of experimental::shared_ptr code\n\n\t* include/experimental/bits/shared_ptr.h: Fix indentation.\n\nFrom-SVN: r241311", "tree": {"sha": "d4cee4f1568f77feb1c24a7d2d55a9ff98b46aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4cee4f1568f77feb1c24a7d2d55a9ff98b46aec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dddab0845c9056db22ecb86c12564244fa0f911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dddab0845c9056db22ecb86c12564244fa0f911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dddab0845c9056db22ecb86c12564244fa0f911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dddab0845c9056db22ecb86c12564244fa0f911/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9ff71f5bbaa6828c82025b5481bed75f6a56c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9ff71f5bbaa6828c82025b5481bed75f6a56c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9ff71f5bbaa6828c82025b5481bed75f6a56c5"}], "stats": {"total": 294, "additions": 148, "deletions": 146}, "files": [{"sha": "7bf2b346b5dc0349f51cae680850742630ae2ab5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dddab0845c9056db22ecb86c12564244fa0f911/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dddab0845c9056db22ecb86c12564244fa0f911/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6dddab0845c9056db22ecb86c12564244fa0f911", "patch": "@@ -1,5 +1,7 @@\n 2016-10-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/bits/shared_ptr.h: Fix indentation.\n+\n \t* include/experimental/bits/shared_ptr.h (shared_ptr(shared_ptr&&)):\n \tRemove const from parameter.\n \t(operator<(const shared_ptr<T>&, nullptr_t)): Use correct"}, {"sha": "e0ec00c1c6762253f24ee294bbe706d63e6b3300", "filename": "libstdc++-v3/include/experimental/bits/shared_ptr.h", "status": "modified", "additions": 146, "deletions": 146, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dddab0845c9056db22ecb86c12564244fa0f911/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dddab0845c9056db22ecb86c12564244fa0f911/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h?ref=6dddab0845c9056db22ecb86c12564244fa0f911", "patch": "@@ -768,170 +768,170 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   // C++14 \u00a720.8.2.2.7 //DOING\n-   template<typename _Tp1, typename _Tp2>\n-     bool operator==(const shared_ptr<_Tp1>& __a,\n-\t\t     const shared_ptr<_Tp2>& __b) noexcept\n-     { return __a.get() == __b.get(); }\n+  template<typename _Tp1, typename _Tp2>\n+    bool operator==(const shared_ptr<_Tp1>& __a,\n+\t\t    const shared_ptr<_Tp2>& __b) noexcept\n+    { return __a.get() == __b.get(); }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n-     { return !__a; }\n+  template<typename _Tp>\n+    inline bool\n+    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return !__a; }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n-     { return !__a; }\n+  template<typename _Tp>\n+    inline bool\n+    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return !__a; }\n \n-   template<typename _Tp1, typename _Tp2>\n-     inline bool\n-     operator!=(const shared_ptr<_Tp1>& __a,\n-\t\tconst shared_ptr<_Tp2>& __b) noexcept\n-     { return __a.get() != __b.get(); }\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator!=(const shared_ptr<_Tp1>& __a,\n+\t       const shared_ptr<_Tp2>& __b) noexcept\n+    { return __a.get() != __b.get(); }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n-     { return (bool)__a; }\n+  template<typename _Tp>\n+    inline bool\n+    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return (bool)__a; }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n-     { return (bool)__a; }\n+  template<typename _Tp>\n+    inline bool\n+    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return (bool)__a; }\n+\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator<(const shared_ptr<_Tp1>& __a,\n+\t      const shared_ptr<_Tp2>& __b) noexcept\n+    {\n+      using __elem_t1 = typename shared_ptr<_Tp1>::element_type;\n+      using __elem_t2 = typename shared_ptr<_Tp2>::element_type;\n+      using _CT = common_type_t<__elem_t1*, __elem_t2*>;\n+      return std::less<_CT>()(__a.get(), __b.get());\n+    }\n \n-   template<typename _Tp1, typename _Tp2>\n-     inline bool\n-     operator<(const shared_ptr<_Tp1>& __a,\n+  template<typename _Tp>\n+    inline bool\n+    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      return std::less<__elem_t*>()(__a.get(), nullptr);\n+    }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      return std::less<__elem_t*>()(nullptr, __a.get());\n+    }\n+\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator<=(const shared_ptr<_Tp1>& __a,\n \t       const shared_ptr<_Tp2>& __b) noexcept\n-     {\n-       using __elem_t1 = typename shared_ptr<_Tp1>::element_type;\n-       using __elem_t2 = typename shared_ptr<_Tp2>::element_type;\n-       using _CT = common_type_t<__elem_t1*, __elem_t2*>;\n-       return std::less<_CT>()(__a.get(), __b.get());\n-     }\n+    { return !(__b < __a); }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       return std::less<__elem_t*>()(__a.get(), nullptr);\n-     }\n+  template<typename _Tp>\n+    inline bool\n+    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return !(nullptr < __a); }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       return std::less<__elem_t*>()(nullptr, __a.get());\n-     }\n+  template<typename _Tp>\n+    inline bool\n+    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return !(__a < nullptr); }\n \n-   template<typename _Tp1, typename _Tp2>\n-     inline bool\n-     operator<=(const shared_ptr<_Tp1>& __a,\n-\t\tconst shared_ptr<_Tp2>& __b) noexcept\n-     { return !(__b < __a); }\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator>(const shared_ptr<_Tp1>& __a,\n+\t      const shared_ptr<_Tp2>& __b) noexcept\n+    { return (__b < __a); }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n-     { return !(nullptr < __a); }\n+  template<typename _Tp>\n+    inline bool\n+    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      return std::less<__elem_t*>()(nullptr, __a.get());\n+    }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n-     { return !(__a < nullptr); }\n+  template<typename _Tp>\n+    inline bool\n+    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      return std::less<__elem_t*>()(__a.get(), nullptr);\n+    }\n \n-   template<typename _Tp1, typename _Tp2>\n-     inline bool\n-     operator>(const shared_ptr<_Tp1>& __a,\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator>=(const shared_ptr<_Tp1>& __a,\n \t       const shared_ptr<_Tp2>& __b) noexcept\n-     { return (__b < __a); }\n+    { return !(__a < __b); }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       return std::less<__elem_t*>()(nullptr, __a.get());\n-     }\n+  template<typename _Tp>\n+    inline bool\n+    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return !(__a < nullptr); }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       return std::less<__elem_t*>()(__a.get(), nullptr);\n-     }\n+  template<typename _Tp>\n+    inline bool\n+    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return !(nullptr < __a); }\n \n-   template<typename _Tp1, typename _Tp2>\n-     inline bool\n-     operator>=(const shared_ptr<_Tp1>& __a,\n-\t\tconst shared_ptr<_Tp2>& __b) noexcept\n-     { return !(__a < __b); }\n+  // C++14 \u00a720.8.2.2.8\n+  template<typename _Tp>\n+    inline void\n+    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept\n+    { __a.swap(__b); }\n+\n+  // 8.2.1.3, shared_ptr casts\n+  template<typename _Tp, typename _Tp1>\n+    inline shared_ptr<_Tp>\n+    static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      return shared_ptr<_Tp>(__r, static_cast<__elem_t*>(__r.get()));\n+    }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n-     { return !(__a < nullptr); }\n+  template<typename _Tp, typename _Tp1>\n+    inline shared_ptr<_Tp>\n+    dynamic_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      if (_Tp* __p = dynamic_cast<__elem_t*>(__r.get()))\n+\treturn shared_ptr<_Tp>(__r, __p);\n+      return shared_ptr<_Tp>();\n+    }\n \n-   template<typename _Tp>\n-     inline bool\n-     operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n-     { return !(nullptr < __a); }\n+  template<typename _Tp, typename _Tp1>\n+    inline shared_ptr<_Tp>\n+    const_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      return shared_ptr<_Tp>(__r, const_cast<__elem_t*>(__r.get()));\n+    }\n \n-   // C++14 \u00a720.8.2.2.8\n-   template<typename _Tp>\n-     inline void\n-     swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept\n-     { __a.swap(__b); }\n-\n-   // 8.2.1.3, shared_ptr casts\n-   template<typename _Tp, typename _Tp1>\n-     inline shared_ptr<_Tp>\n-     static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       return shared_ptr<_Tp>(__r, static_cast<__elem_t*>(__r.get()));\n-     }\n-\n-   template<typename _Tp, typename _Tp1>\n-     inline shared_ptr<_Tp>\n-     dynamic_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       if (_Tp* __p = dynamic_cast<__elem_t*>(__r.get()))\n-\t return shared_ptr<_Tp>(__r, __p);\n-       return shared_ptr<_Tp>();\n-     }\n-\n-   template<typename _Tp, typename _Tp1>\n-     inline shared_ptr<_Tp>\n-     const_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       return shared_ptr<_Tp>(__r, const_cast<__elem_t*>(__r.get()));\n-     }\n-\n-   template<typename _Tp, typename _Tp1>\n-     inline shared_ptr<_Tp>\n-     reinterpret_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n-     {\n-       using __elem_t = typename shared_ptr<_Tp>::element_type;\n-       return shared_ptr<_Tp>(__r, reinterpret_cast<__elem_t*>(__r.get()));\n-     }\n-\n-   // C++14 \u00a720.8.2.3\n-   template<typename _Tp>\n-     class weak_ptr : public __weak_ptr<_Tp>\n-     {\n+  template<typename _Tp, typename _Tp1>\n+    inline shared_ptr<_Tp>\n+    reinterpret_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n+    {\n+      using __elem_t = typename shared_ptr<_Tp>::element_type;\n+      return shared_ptr<_Tp>(__r, reinterpret_cast<__elem_t*>(__r.get()));\n+    }\n+\n+  // C++14 \u00a720.8.2.3\n+  template<typename _Tp>\n+    class weak_ptr : public __weak_ptr<_Tp>\n+    {\n       template<typename _Tp1, typename _Res = void>\n \tusing _Compatible\n \t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value, _Res>;\n \n       using _Base_type = __weak_ptr<_Tp>;\n \n-   public:\n+     public:\n        constexpr weak_ptr() noexcept = default;\n \n        template<typename _Tp1, typename = _Compatible<_Tp1>>\n@@ -985,13 +985,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        { return shared_ptr<_Tp>(*this, std::nothrow); }\n \n        friend class enable_shared_from_this<_Tp>;\n-     };\n+    };\n \n-   // C++14 \u00a720.8.2.3.6\n-   template<typename _Tp>\n-     inline void\n-     swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept\n-     { __a.swap(__b); }\n+  // C++14 \u00a720.8.2.3.6\n+  template<typename _Tp>\n+    inline void\n+    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept\n+    { __a.swap(__b); }\n \n   /// C++14 \u00a720.8.2.2.10\n   template<typename _Del, typename _Tp, _Lock_policy _Lp>\n@@ -1009,8 +1009,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __os;\n     }\n \n-   // C++14 \u00a720.8.2.4\n-   template<typename _Tp = void> class owner_less;\n+  // C++14 \u00a720.8.2.4\n+  template<typename _Tp = void> class owner_less;\n \n    /// Partial specialization of owner_less for shared_ptr.\n   template<typename _Tp>"}]}