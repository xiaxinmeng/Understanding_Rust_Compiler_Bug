{"sha": "bd08db74e39248a4fe434ee03c5256ab5b63ee47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwOGRiNzRlMzkyNDhhNGZlNDM0ZWUwM2M1MjU2YWI1YjYzZWU0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-04-23T17:14:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-04-23T17:14:27Z"}, "message": "re PR target/21099 (ICE on mmx intrinsics)\n\n        PR target/21099\n        * config/i386/i386.c (ix86_split_to_parts): Use proper mode when\n        simplifying CONST_VECTOR.\n\nFrom-SVN: r98624", "tree": {"sha": "770cddb92eacfefb07d3a6c24437a30c14f1bce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/770cddb92eacfefb07d3a6c24437a30c14f1bce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd08db74e39248a4fe434ee03c5256ab5b63ee47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd08db74e39248a4fe434ee03c5256ab5b63ee47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd08db74e39248a4fe434ee03c5256ab5b63ee47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd08db74e39248a4fe434ee03c5256ab5b63ee47/comments", "author": null, "committer": null, "parents": [{"sha": "670026fb25e4989b73fcb3ff4bd7ba9364b8a649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670026fb25e4989b73fcb3ff4bd7ba9364b8a649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/670026fb25e4989b73fcb3ff4bd7ba9364b8a649"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "d5595bf1e4eac1fe40ed33c2501a9e365b2dffd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd08db74e39248a4fe434ee03c5256ab5b63ee47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd08db74e39248a4fe434ee03c5256ab5b63ee47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd08db74e39248a4fe434ee03c5256ab5b63ee47", "patch": "@@ -1,3 +1,9 @@\n+2005-04-23  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/21099\n+\t* config/i386/i386.c (ix86_split_to_parts): Use proper mode when\n+\tsimplifying CONST_VECTOR.\n+\n 2005-04-23  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-live.c (live_worklist): Take a stack allocated on\n@@ -644,7 +650,7 @@\n \tdecode_addr_const): Likewise.\n \n 2005-04-21 Alan Modra  <amodra@bigpond.net.au>\n-           Fariborz Jahanian <fjahanian@apple.com>\n+\t   Fariborz Jahanian <fjahanian@apple.com>\n \n \t* config/rs6000/rs6000.c (rs6000_arg_partial_bytes): Fix size of\n \tportion of argument passed in fpr.\n@@ -1122,7 +1128,7 @@\n \t* fold-const (fold_binary):  Fold ~X ^ ~ Y to X ^ Y.\n \n 2005-04-20  Michael Pogue  <michael.pogue@sun.com>\n-            Joseph S. Myers  <joseph@codesourcery.com>\n+\t    Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c.opt (Wint-to-pointer-cast, Wpointer-to-int-cast): New options.\n \t* c-typeck.c (build_c_cast): Check these options."}, {"sha": "b8ac322d56ec7737e8a5d1b6dd8852e2be5737dc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd08db74e39248a4fe434ee03c5256ab5b63ee47/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd08db74e39248a4fe434ee03c5256ab5b63ee47/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bd08db74e39248a4fe434ee03c5256ab5b63ee47", "patch": "@@ -10621,7 +10621,10 @@ ix86_split_to_parts (rtx operand, rtx *parts, enum machine_mode mode)\n   if (GET_CODE (operand) == CONST_VECTOR)\n     {\n       enum machine_mode imode = int_mode_for_mode (mode);\n-      operand = simplify_subreg (imode, operand, mode, 0);\n+      /* Caution: if we looked through a constant pool memory above,\n+\t the operand may actually have a different mode now.  That's\n+\t ok, since we want to pun this all the way back to an integer.  */\n+      operand = simplify_subreg (imode, operand, GET_MODE (operand), 0);\n       gcc_assert (operand != NULL);\n       mode = imode;\n     }"}, {"sha": "bfac6bc0dbf744ca743999811b3b2830f466b6bb", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd08db74e39248a4fe434ee03c5256ab5b63ee47/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd08db74e39248a4fe434ee03c5256ab5b63ee47/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=bd08db74e39248a4fe434ee03c5256ab5b63ee47", "patch": "@@ -1920,7 +1920,12 @@ tree_could_throw_p (tree t)\n bool\n tree_can_throw_internal (tree stmt)\n {\n-  int region_nr = lookup_stmt_eh_region (stmt);\n+  int region_nr;\n+\n+  if (TREE_CODE (stmt) == RESX_EXPR)\n+    region_nr = TREE_INT_CST_LOW (TREE_OPERAND (stmt, 0));\n+  else\n+    region_nr = lookup_stmt_eh_region (stmt);\n   if (region_nr < 0)\n     return false;\n   return can_throw_internal_1 (region_nr);\n@@ -1931,8 +1936,9 @@ tree_can_throw_external (tree stmt)\n {\n   int region_nr = lookup_stmt_eh_region (stmt);\n   if (region_nr < 0)\n-    return false;\n-  return can_throw_external_1 (region_nr);\n+    return tree_could_throw_p (stmt);\n+  else\n+    return can_throw_external_1 (region_nr);\n }\n \n bool"}]}