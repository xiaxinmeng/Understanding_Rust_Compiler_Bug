{"sha": "141dba98fdd28e263dbdf626ee97dd5cf70d3d86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQxZGJhOThmZGQyOGUyNjNkYmRmNjI2ZWU5N2RkNWNmNzBkM2Q4Ng==", "commit": {"author": {"name": "John Carr", "email": "jfc@mit.edu", "date": "1998-08-14T13:52:58Z"}, "committer": {"name": "John Carr", "email": "jfc@gcc.gnu.org", "date": "1998-08-14T13:52:58Z"}, "message": "genrecog.c (add_to_sequence): Fatal error if the modes of the operands of SET are incompatible.\n\n\t* genrecog.c (add_to_sequence): Fatal error if the modes of the operands\n\tof SET are incompatible.\n\t* alpha.md: Fix max and min patterns so modes of SET operands match.\n\nFrom-SVN: r21731", "tree": {"sha": "4288ececcad084d17e2667a706c700f7d2e2e1ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4288ececcad084d17e2667a706c700f7d2e2e1ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/141dba98fdd28e263dbdf626ee97dd5cf70d3d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141dba98fdd28e263dbdf626ee97dd5cf70d3d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/141dba98fdd28e263dbdf626ee97dd5cf70d3d86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141dba98fdd28e263dbdf626ee97dd5cf70d3d86/comments", "author": {"login": "VoxSciurorum", "id": 60116679, "node_id": "MDQ6VXNlcjYwMTE2Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/60116679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VoxSciurorum", "html_url": "https://github.com/VoxSciurorum", "followers_url": "https://api.github.com/users/VoxSciurorum/followers", "following_url": "https://api.github.com/users/VoxSciurorum/following{/other_user}", "gists_url": "https://api.github.com/users/VoxSciurorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/VoxSciurorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VoxSciurorum/subscriptions", "organizations_url": "https://api.github.com/users/VoxSciurorum/orgs", "repos_url": "https://api.github.com/users/VoxSciurorum/repos", "events_url": "https://api.github.com/users/VoxSciurorum/events{/privacy}", "received_events_url": "https://api.github.com/users/VoxSciurorum/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64c7a80a984541525bcb3b23213a8e9c9bcb4807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c7a80a984541525bcb3b23213a8e9c9bcb4807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c7a80a984541525bcb3b23213a8e9c9bcb4807"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "ade8ecfb70f455f16aac1ee49af87543122ba8b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141dba98fdd28e263dbdf626ee97dd5cf70d3d86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141dba98fdd28e263dbdf626ee97dd5cf70d3d86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=141dba98fdd28e263dbdf626ee97dd5cf70d3d86", "patch": "@@ -1,3 +1,10 @@\n+Fri Aug 14 16:50:10 1998  John Carr  <jfc@mit.edu>\n+\n+\t* genrecog.c (add_to_sequence): Fatal error if the modes of the operands\n+\tof SET are incompatible.\n+\n+\t* alpha.md: Fix max and min patterns so modes of SET operands match.\n+\n Fri Aug 14 12:22:55 1998  Ian Lance Taylor  <ian@cygnus.com>\n \n \t* configure.in: Avoid [[ by using test and changequote."}, {"sha": "5ce750e76f07109e0452c78ac413cfd737125369", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141dba98fdd28e263dbdf626ee97dd5cf70d3d86/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141dba98fdd28e263dbdf626ee97dd5cf70d3d86/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=141dba98fdd28e263dbdf626ee97dd5cf70d3d86", "patch": "@@ -2284,7 +2284,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(if_then_else:DI\n+\t(if_then_else:SI\n \t (match_operator 2 \"signed_comparison_operator\"\n \t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n \t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n@@ -2482,63 +2482,63 @@\n \n (define_insn \"sminqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(smin:SI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(smin:QI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:QI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"minsb8 %r1,%2,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_insn \"uminqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(umin:SI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(umin:QI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:QI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"minub8 %r1,%2,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_insn \"smaxqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(smax:SI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(smax:QI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:QI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"maxsb8 %r1,%2,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_insn \"umaxqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(umax:SI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(umax:QI (match_operand:QI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:QI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"maxub8 %r1,%2,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_insn \"sminhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(smin:SI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(smin:HI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:HI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"minsw4 %r1,%2,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_insn \"uminhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(umin:SI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(umin:HI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:HI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"minuw4 %r1,%2,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_insn \"smaxhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(smax:SI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(smax:HI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:HI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"maxsw4 %r1,%2,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_insn \"umaxhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(umax:SI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t(umax:HI (match_operand:HI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t (match_operand:HI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"TARGET_MAX\"\n   \"maxuw4 %r1,%2,%0\""}, {"sha": "4dd5ec7cdbb9149279e71dbf1b48d8022f5da949", "filename": "gcc/genrecog.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141dba98fdd28e263dbdf626ee97dd5cf70d3d86/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141dba98fdd28e263dbdf626ee97dd5cf70d3d86/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=141dba98fdd28e263dbdf626ee97dd5cf70d3d86", "patch": "@@ -456,6 +456,19 @@ add_to_sequence (pattern, last, position)\n       goto restart;\n \n     case SET:\n+      /* The operands of a SET must have the same mode unless one is VOIDmode.  */\n+      if (GET_MODE (SET_SRC (pattern)) != VOIDmode\n+\t  && GET_MODE (SET_DEST (pattern)) != VOIDmode\n+\t  && GET_MODE (SET_SRC (pattern)) != GET_MODE (SET_DEST (pattern))\n+\t  /* The mode of an ADDRESS_OPERAND is the mode of the memory reference,\n+\t     not the mode of the address.  */\n+\t  && ! (GET_CODE (SET_SRC (pattern)) == MATCH_OPERAND\n+\t\t&& ! strcmp (XSTR (SET_SRC (pattern), 1), \"address_operand\")))\n+\t{\n+\t  print_rtl (stderr, pattern);\n+\t  fputc ('\\n', stderr);\n+\t  fatal (\"mode mismatch in SET\");\n+\t}\n       newpos[depth] = '0';\n       new = add_to_sequence (SET_DEST (pattern), &new->success, newpos);\n       this->success.first->enforce_mode = 1;"}]}