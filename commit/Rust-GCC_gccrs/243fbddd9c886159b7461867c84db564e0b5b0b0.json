{"sha": "243fbddd9c886159b7461867c84db564e0b5b0b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzZmJkZGQ5Yzg4NjE1OWI3NDYxODY3Yzg0ZGI1NjRlMGI1YjBiMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-24T18:55:44Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-24T18:55:44Z"}, "message": "diagnostic.c: Don't include flags.h.\n\n\t* diagnostic.c: Don't include flags.h.\n\t(pedantic_warning_kind, permissive_error_kind): Take diagnostic\n\tcontext parameters.  Check flags in the context passed as a\n\tparameter.\n\t(diagnostic_build_prefix): Add context parameter.  Check\n\tshow_column flag in context.\n\t(diagnostic_action_after_output): Check fatal_errors flag in\n\tcontext.\n\t(diagnostic_report_current_module): Check show_column flag in\n\tcontext.\n\t(default_diagnostic_starter): Update call to\n\tdiagnostic_build_prefix.\n\t(diagnostic_report_diagnostic): Pass context to\n\tpedantic_warning_kind.\n\t(emit_diagnostic): Pass context to permissive_error_kind.\n\t(permerror): Pass context to permissive_error_kind.\n\t* diagnostic.h (struct diagnostic_context): Add show_column,\n\tpedantic_errors, permissive and fatal_errors fields.\n\t(diagnostic_build_prefix): Update prototype.\n\t* langhooks.c\n\t* toplev.c (process_options): Set flags in global_dc from\n\tflag_show_column, flag_pedantic_errors, flag_permissive,\n\tflag_fatal_errors.\n\t* tree-diagnostic.c (default_tree_diagnostic_starter): Update call\n\tto diagnostic_build_prefix.\n\t* Makefile.in (diagnostic.o): Update dependencies.\n\ncp:\n\t* error.c (cp_diagnostic_starter): Update call to\n\tdiagnostic_build_prefix.\n\t(cp_print_error_function,\n\tprint_instantiation_partial_context_line): Check show_column flag\n\tin context.\n\nFrom-SVN: r159793", "tree": {"sha": "d6028a1f52919db5575cd7449139f2ab89757163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6028a1f52919db5575cd7449139f2ab89757163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/243fbddd9c886159b7461867c84db564e0b5b0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243fbddd9c886159b7461867c84db564e0b5b0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243fbddd9c886159b7461867c84db564e0b5b0b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243fbddd9c886159b7461867c84db564e0b5b0b0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611d6f76fe8eae737566fb809f61b0c094ef92c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611d6f76fe8eae737566fb809f61b0c094ef92c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/611d6f76fe8eae737566fb809f61b0c094ef92c9"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "88061781c5d9b24df58bf2357c66926abe1f32da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -1,3 +1,32 @@\n+2010-05-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* diagnostic.c: Don't include flags.h.\n+\t(pedantic_warning_kind, permissive_error_kind): Take diagnostic\n+\tcontext parameters.  Check flags in the context passed as a\n+\tparameter.\n+\t(diagnostic_build_prefix): Add context parameter.  Check\n+\tshow_column flag in context.\n+\t(diagnostic_action_after_output): Check fatal_errors flag in\n+\tcontext.\n+\t(diagnostic_report_current_module): Check show_column flag in\n+\tcontext.\n+\t(default_diagnostic_starter): Update call to\n+\tdiagnostic_build_prefix.\n+\t(diagnostic_report_diagnostic): Pass context to\n+\tpedantic_warning_kind.\n+\t(emit_diagnostic): Pass context to permissive_error_kind.\n+\t(permerror): Pass context to permissive_error_kind.\n+\t* diagnostic.h (struct diagnostic_context): Add show_column,\n+\tpedantic_errors, permissive and fatal_errors fields.\n+\t(diagnostic_build_prefix): Update prototype.\n+\t* langhooks.c\n+\t* toplev.c (process_options): Set flags in global_dc from\n+\tflag_show_column, flag_pedantic_errors, flag_permissive,\n+\tflag_fatal_errors.\n+\t* tree-diagnostic.c (default_tree_diagnostic_starter): Update call\n+\tto diagnostic_build_prefix.\n+\t* Makefile.in (diagnostic.o): Update dependencies.\n+\n 2010-05-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/ia32intrin.h (__crc32q): Define only if"}, {"sha": "ef7a324b9cd3889ddfd5c3a5f0300232f85ad3bc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -2735,7 +2735,7 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TM_P_H) langhooks.h $(MD5_H) intl.h $(TARGET_H) \\\n    $(GIMPLE_H) realmpfr.h\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   version.h $(FLAGS_H) $(INPUT_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) \\\n+   version.h $(INPUT_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) \\\n    diagnostic.def opts.h $(PLUGIN_H)\n opts.o : opts.c opts.h options.h $(TOPLEV_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(EXPR_H) $(RTL_H) \\"}, {"sha": "74cb21357359afcfb480192d62a2e3a7011068f0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -1,3 +1,11 @@\n+2010-05-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* error.c (cp_diagnostic_starter): Update call to\n+\tdiagnostic_build_prefix.\n+\t(cp_print_error_function,\n+\tprint_instantiation_partial_context_line): Check show_column flag\n+\tin context.\n+\n 2010-05-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41510"}, {"sha": "592f360001af1e98d0fdf5a5f1764454cb961b20", "filename": "gcc/cp/error.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -2550,7 +2550,8 @@ cp_diagnostic_starter (diagnostic_context *context,\n   diagnostic_report_current_module (context);\n   cp_print_error_function (context, diagnostic);\n   maybe_print_instantiation_context (context);\n-  pp_base_set_prefix (context->printer, diagnostic_build_prefix (diagnostic));\n+  pp_base_set_prefix (context->printer, diagnostic_build_prefix (context,\n+\t\t\t\t\t\t\t\t diagnostic));\n }\n \n static void\n@@ -2644,7 +2645,7 @@ cp_print_error_function (diagnostic_context *context,\n \t\t  pp_base_newline (context->printer);\n \t\t  if (s.file != NULL)\n \t\t    {\n-\t\t      if (flag_show_column && s.column != 0)\n+\t\t      if (context->show_column && s.column != 0)\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   _(\"    inlined from %qs at %s:%d:%d\"),\n \t\t\t\t   cxx_printable_name_translate (fndecl, 2),\n@@ -2750,7 +2751,7 @@ print_instantiation_partial_context_line (diagnostic_context *context,\n       const char *str;\n       str = decl_as_string_translate (t->decl,\n \t\t\t\t      TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE);\n-      if (flag_show_column)\n+      if (context->show_column)\n \tpp_verbatim (context->printer,\n \t\t     recursive_p\n \t\t     ? _(\"%s:%d:%d:   recursively instantiated from %qs\\n\")\n@@ -2765,7 +2766,7 @@ print_instantiation_partial_context_line (diagnostic_context *context,\n     }\n   else\n     {\n-      if (flag_show_column)\n+      if (context->show_column)\n \tpp_verbatim (context->printer, \n \t\t     recursive_p\n \t\t     ? _(\"%s:%d:%d:   recursively instantiated from here\")\n@@ -2816,7 +2817,7 @@ print_instantiation_partial_context (diagnostic_context *context,\n \t{\n \t  expanded_location xloc;\n \t  xloc = expand_location (loc);\n-\t  if (flag_show_column)\n+\t  if (context->show_column)\n \t    pp_verbatim (context->printer,\n \t\t\t _(\"%s:%d:%d:   [ skipping %d instantiation contexts ]\\n\"),\n \t\t\t xloc.file, xloc.line, xloc.column, skip);"}, {"sha": "7757ace11b0c82194dbad5912a7ce11041f167b1", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -27,16 +27,16 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"version.h\"\n-#include \"flags.h\"\n #include \"input.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n #include \"opts.h\"\n #include \"plugin.h\"\n \n-#define pedantic_warning_kind() (flag_pedantic_errors ? DK_ERROR : DK_WARNING)\n-#define permissive_error_kind() (flag_permissive ? DK_WARNING : DK_ERROR)\n+#define pedantic_warning_kind(DC)\t\t\t\\\n+  ((DC)->pedantic_errors ? DK_ERROR : DK_WARNING)\n+#define permissive_error_kind(DC) ((DC)->permissive ? DK_WARNING : DK_ERROR)\n \n /* Prototypes.  */\n static char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n@@ -156,7 +156,8 @@ diagnostic_set_info (diagnostic_info *diagnostic, const char *gmsgid,\n /* Return a malloc'd string describing a location.  The caller is\n    responsible for freeing the memory.  */\n char *\n-diagnostic_build_prefix (diagnostic_info *diagnostic)\n+diagnostic_build_prefix (diagnostic_context *context,\n+\t\t\t diagnostic_info *diagnostic)\n {\n   static const char *const diagnostic_kind_text[] = {\n #define DEFINE_DIAGNOSTIC_KIND(K, T) (T),\n@@ -173,7 +174,7 @@ diagnostic_build_prefix (diagnostic_info *diagnostic)\n   return\n     (s.file == NULL\n      ? build_message_string (\"%s: %s\", progname, text)\n-     : flag_show_column\n+     : context->show_column\n      ? build_message_string (\"%s:%d:%d: %s\", s.file, s.line, s.column, text)\n      : build_message_string (\"%s:%d: %s\", s.file, s.line, text));\n }\n@@ -196,7 +197,7 @@ diagnostic_action_after_output (diagnostic_context *context,\n     case DK_SORRY:\n       if (context->abort_on_error)\n \treal_abort ();\n-      if (flag_fatal_errors)\n+      if (context->fatal_errors)\n \t{\n \t  fnotice (stderr, \"compilation terminated due to -Wfatal-errors.\\n\");\n \t  diagnostic_finish (context);\n@@ -246,7 +247,7 @@ diagnostic_report_current_module (diagnostic_context *context)\n       if (! MAIN_FILE_P (map))\n \t{\n \t  map = INCLUDED_FROM (line_table, map);\n-\t  if (flag_show_column)\n+\t  if (context->show_column)\n \t    pp_verbatim (context->printer,\n \t\t\t \"In file included from %s:%d:%d\",\n \t\t\t map->to_file,\n@@ -273,7 +274,8 @@ default_diagnostic_starter (diagnostic_context *context,\n \t\t\t    diagnostic_info *diagnostic)\n {\n   diagnostic_report_current_module (context);\n-  pp_set_prefix (context->printer, diagnostic_build_prefix (diagnostic));\n+  pp_set_prefix (context->printer, diagnostic_build_prefix (context,\n+\t\t\t\t\t\t\t    diagnostic));\n }\n \n void\n@@ -326,7 +328,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \n   if (diagnostic->kind == DK_PEDWARN)\n     {\n-      diagnostic->kind = pedantic_warning_kind ();\n+      diagnostic->kind = pedantic_warning_kind (context);\n       /* We do this to avoid giving the message for -pedantic-errors.  */\n       orig_diag_kind = diagnostic->kind;\n     }\n@@ -524,7 +526,7 @@ emit_diagnostic (diagnostic_t kind, location_t location, int opt,\n   if (kind == DK_PERMERROR)\n     {\n       diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n-\t\t\t   permissive_error_kind ());\n+\t\t\t   permissive_error_kind (global_dc));\n       diagnostic.option_index = OPT_fpermissive;\n     }\n   else {\n@@ -643,7 +645,7 @@ permerror (location_t location, const char *gmsgid, ...)\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n-                       permissive_error_kind ());\n+                       permissive_error_kind (global_dc));\n   diagnostic.option_index = OPT_fpermissive;\n   va_end (ap);\n   return report_diagnostic (&diagnostic);"}, {"sha": "1db91c2cd44b40812b310851b6c479e9ba8a13d9", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -87,6 +87,18 @@ struct diagnostic_context\n   /* True if we should raise a SIGABRT on errors.  */\n   bool abort_on_error;\n \n+  /* True if we should show the column number on diagnostics.  */\n+  bool show_column;\n+\n+  /* True if pedwarns are errors.  */\n+  bool pedantic_errors;\n+\n+  /* True if permerrors are warnings.  */\n+  bool permissive;\n+\n+  /* True if errors are fatal.  */\n+  bool fatal_errors;\n+\n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n      might say:\n@@ -211,7 +223,7 @@ extern void diagnostic_set_info_translated (diagnostic_info *, const char *,\n extern bool emit_diagnostic (diagnostic_t, location_t, int,\n \t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n #endif\n-extern char *diagnostic_build_prefix (diagnostic_info *);\n+extern char *diagnostic_build_prefix (diagnostic_context *, diagnostic_info *);\n void default_diagnostic_starter (diagnostic_context *, diagnostic_info *);\n void default_diagnostic_finalizer (diagnostic_context *, diagnostic_info *);\n "}, {"sha": "bdda6236c72b408595edc5b90bf498509a18c51d", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -426,7 +426,7 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t\t  pp_newline (context->printer);\n \t\t  if (s.file != NULL)\n \t\t    {\n-\t\t      if (flag_show_column)\n+\t\t      if (context->show_column)\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   _(\"    inlined from %qs at %s:%d:%d\"),\n \t\t\t\t   identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)),"}, {"sha": "9d3396bc72d21787880825006811331d9da394b3", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -1827,6 +1827,11 @@ process_options (void)\n   if (flag_compare_debug) \n     diagnostic_inhibit_notes (global_dc);\n \n+  global_dc->show_column = flag_show_column;\n+  global_dc->pedantic_errors = flag_pedantic_errors;\n+  global_dc->permissive = flag_permissive;\n+  global_dc->fatal_errors = flag_fatal_errors;\n+\n   if (flag_section_anchors && !target_supports_section_anchors_p ())\n     {\n       warning (OPT_fsection_anchors,"}, {"sha": "b456a2a5fbf67330d53debf4791349dbf7a5dd7c", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243fbddd9c886159b7461867c84db564e0b5b0b0/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=243fbddd9c886159b7461867c84db564e0b5b0b0", "patch": "@@ -44,5 +44,6 @@ default_tree_diagnostic_starter (diagnostic_context *context,\n \t\t\t\t diagnostic_info *diagnostic)\n {\n   diagnostic_report_current_function (context, diagnostic);\n-  pp_set_prefix (context->printer, diagnostic_build_prefix (diagnostic));\n+  pp_set_prefix (context->printer, diagnostic_build_prefix (context,\n+\t\t\t\t\t\t\t    diagnostic));\n }"}]}