{"sha": "f95d3d5de72a1c43e8d529bad3ef59afc3214705", "node_id": "C_kwDOANBUbNoAKGY5NWQzZDVkZTcyYTFjNDNlOGQ1MjliYWQzZWY1OWFmYzMyMTQ3MDU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-27T13:20:23Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-27T13:20:23Z"}, "message": "aarch64: Reinstate some uses of CONSTEXPR\n\nIn 9482a5e4eac8d696129ec2854b331e1bb5dbab42 I'd replaced uses\nof CONSTEXPR with direct uses of constexpr.  However, it turns\nout that we still have CONSTEXPR for a reason: GCC 4.8 doesn't\nimplement constexpr properly, and for example rejects things like:\n\n  extern const int x;\n  constexpr int x = 1;\n\nThis patch partially reverts the previous one.  To make things\nmore complicated, there are still some things that need to be\nconstexpr rather than CONSTEXPR, since they are used to initialise\nscalar constants.  The patch therefore doesn't change anything\nin aarch64-feature-deps.h.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h: Replace constexpr with\n\tCONSTEXPR.\n\t* config/aarch64/aarch64-sve-builtins-base.cc: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-functions.h: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-shapes.cc: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-sve2.cc: Likewise.\n\t* config/aarch64/aarch64-sve-builtins.cc: Likewise.\n\t* config/aarch64/aarch64.cc: Likewise.\n\t* config/aarch64/driver-aarch64.cc: Likewise", "tree": {"sha": "0b98a8f0708007796fd74a664ea94fb582f7e28b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b98a8f0708007796fd74a664ea94fb582f7e28b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f95d3d5de72a1c43e8d529bad3ef59afc3214705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f95d3d5de72a1c43e8d529bad3ef59afc3214705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f95d3d5de72a1c43e8d529bad3ef59afc3214705", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f95d3d5de72a1c43e8d529bad3ef59afc3214705/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1fb720818a85d5c893ce65d140add40debf2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1fb720818a85d5c893ce65d140add40debf2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1fb720818a85d5c893ce65d140add40debf2ff"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "238820581c5ee7617f8eed1df2cf5418b1127e19", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -254,7 +254,7 @@ typedef struct simd_vec_cost advsimd_vec_cost;\n /* SVE-specific extensions to the information provided by simd_vec_cost.  */\n struct sve_vec_cost : simd_vec_cost\n {\n-  constexpr sve_vec_cost (const simd_vec_cost &base,\n+  CONSTEXPR sve_vec_cost (const simd_vec_cost &base,\n \t\t\t  unsigned int clast_cost,\n \t\t\t  unsigned int fadda_f16_cost,\n \t\t\t  unsigned int fadda_f32_cost,\n@@ -354,7 +354,7 @@ using aarch64_scalar_vec_issue_info = aarch64_base_vec_issue_info;\n    Advanced SIMD and SVE.  */\n struct aarch64_simd_vec_issue_info : aarch64_base_vec_issue_info\n {\n-  constexpr aarch64_simd_vec_issue_info (aarch64_base_vec_issue_info base,\n+  CONSTEXPR aarch64_simd_vec_issue_info (aarch64_base_vec_issue_info base,\n \t\t\t\t\t unsigned int ld2_st2_general_ops,\n \t\t\t\t\t unsigned int ld3_st3_general_ops,\n \t\t\t\t\t unsigned int ld4_st4_general_ops)\n@@ -382,7 +382,7 @@ using aarch64_advsimd_vec_issue_info = aarch64_simd_vec_issue_info;\n    is a concept of \"predicate operations\".  */\n struct aarch64_sve_vec_issue_info : aarch64_simd_vec_issue_info\n {\n-  constexpr aarch64_sve_vec_issue_info\n+  CONSTEXPR aarch64_sve_vec_issue_info\n     (aarch64_simd_vec_issue_info base,\n      unsigned int pred_ops_per_cycle,\n      unsigned int while_pred_ops,"}, {"sha": "6347407555fef985263e92f2d57b38928f43e400", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -177,7 +177,7 @@ class svabd_impl : public function_base\n class svac_impl : public function_base\n {\n public:\n-  constexpr svac_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svac_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -209,7 +209,7 @@ class svadda_impl : public function_base\n class svadr_bhwd_impl : public function_base\n {\n public:\n-  constexpr svadr_bhwd_impl (unsigned int shift) : m_shift (shift) {}\n+  CONSTEXPR svadr_bhwd_impl (unsigned int shift) : m_shift (shift) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -259,7 +259,7 @@ class svbic_impl : public function_base\n class svbrk_binary_impl : public function_base\n {\n public:\n-  constexpr svbrk_binary_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svbrk_binary_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -275,7 +275,7 @@ class svbrk_binary_impl : public function_base\n class svbrk_unary_impl : public function_base\n {\n public:\n-  constexpr svbrk_unary_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svbrk_unary_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -309,7 +309,7 @@ class svcadd_impl : public function_base\n class svclast_impl : public quiet<function_base>\n {\n public:\n-  constexpr svclast_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svclast_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -381,7 +381,7 @@ class svcmla_lane_impl : public function_base\n class svcmp_impl : public function_base\n {\n public:\n-  constexpr svcmp_impl (tree_code code, int unspec_for_fp)\n+  CONSTEXPR svcmp_impl (tree_code code, int unspec_for_fp)\n     : m_code (code), m_unspec_for_fp (unspec_for_fp) {}\n \n   gimple *\n@@ -437,7 +437,7 @@ class svcmp_impl : public function_base\n class svcmp_wide_impl : public function_base\n {\n public:\n-  constexpr svcmp_wide_impl (tree_code code, int unspec_for_sint,\n+  CONSTEXPR svcmp_wide_impl (tree_code code, int unspec_for_sint,\n \t\t\t     int unspec_for_uint)\n     : m_code (code), m_unspec_for_sint (unspec_for_sint),\n       m_unspec_for_uint (unspec_for_uint) {}\n@@ -512,7 +512,7 @@ class svcnot_impl : public function_base\n class svcnt_bhwd_impl : public function_base\n {\n public:\n-  constexpr svcnt_bhwd_impl (machine_mode ref_mode) : m_ref_mode (ref_mode) {}\n+  CONSTEXPR svcnt_bhwd_impl (machine_mode ref_mode) : m_ref_mode (ref_mode) {}\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -949,7 +949,7 @@ class svdupq_lane_impl : public quiet<function_base>\n class svext_bhw_impl : public function_base\n {\n public:\n-  constexpr svext_bhw_impl (scalar_int_mode from_mode)\n+  CONSTEXPR svext_bhw_impl (scalar_int_mode from_mode)\n     : m_from_mode (from_mode) {}\n \n   rtx\n@@ -1053,7 +1053,7 @@ class svinsr_impl : public quiet<function_base>\n class svlast_impl : public quiet<function_base>\n {\n public:\n-  constexpr svlast_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svlast_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1399,7 +1399,7 @@ class svldnt1_impl : public full_width_access\n class svldxf1_impl : public full_width_access\n {\n public:\n-  constexpr svldxf1_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svldxf1_impl (int unspec) : m_unspec (unspec) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -1426,7 +1426,7 @@ class svldxf1_impl : public full_width_access\n class svldxf1_extend_impl : public extending_load\n {\n public:\n-  constexpr svldxf1_extend_impl (type_suffix_index memory_type, int unspec)\n+  CONSTEXPR svldxf1_extend_impl (type_suffix_index memory_type, int unspec)\n     : extending_load (memory_type), m_unspec (unspec) {}\n \n   unsigned int\n@@ -1616,7 +1616,7 @@ class svnor_impl : public function_base\n class svnot_impl : public rtx_code_function\n {\n public:\n-  constexpr svnot_impl () : rtx_code_function (NOT, NOT, -1) {}\n+  CONSTEXPR svnot_impl () : rtx_code_function (NOT, NOT, -1) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1664,7 +1664,7 @@ class svpfalse_impl : public function_base\n class svpfirst_svpnext_impl : public function_base\n {\n public:\n-  constexpr svpfirst_svpnext_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svpfirst_svpnext_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1682,7 +1682,7 @@ class svpfirst_svpnext_impl : public function_base\n class svprf_bhwd_impl : public function_base\n {\n public:\n-  constexpr svprf_bhwd_impl (machine_mode mode) : m_mode (mode) {}\n+  CONSTEXPR svprf_bhwd_impl (machine_mode mode) : m_mode (mode) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -1706,7 +1706,7 @@ class svprf_bhwd_impl : public function_base\n class svprf_bhwd_gather_impl : public function_base\n {\n public:\n-  constexpr svprf_bhwd_gather_impl (machine_mode mode) : m_mode (mode) {}\n+  CONSTEXPR svprf_bhwd_gather_impl (machine_mode mode) : m_mode (mode) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -1744,7 +1744,7 @@ class svprf_bhwd_gather_impl : public function_base\n class svptest_impl : public function_base\n {\n public:\n-  constexpr svptest_impl (rtx_code compare) : m_compare (compare) {}\n+  CONSTEXPR svptest_impl (rtx_code compare) : m_compare (compare) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1849,7 +1849,7 @@ class svptrue_pat_impl : public function_base\n class svqdec_svqinc_bhwd_impl : public function_base\n {\n public:\n-  constexpr svqdec_svqinc_bhwd_impl (rtx_code code_for_sint,\n+  CONSTEXPR svqdec_svqinc_bhwd_impl (rtx_code code_for_sint,\n \t\t\t\t     rtx_code code_for_uint,\n \t\t\t\t     scalar_int_mode elem_mode)\n     : m_code_for_sint (code_for_sint),\n@@ -1896,23 +1896,23 @@ class svqdec_svqinc_bhwd_impl : public function_base\n class svqdec_bhwd_impl : public svqdec_svqinc_bhwd_impl\n {\n public:\n-  constexpr svqdec_bhwd_impl (scalar_int_mode elem_mode)\n+  CONSTEXPR svqdec_bhwd_impl (scalar_int_mode elem_mode)\n     : svqdec_svqinc_bhwd_impl (SS_MINUS, US_MINUS, elem_mode) {}\n };\n \n /* Implements svqinc[bhwd]{,_pat}.  */\n class svqinc_bhwd_impl : public svqdec_svqinc_bhwd_impl\n {\n public:\n-  constexpr svqinc_bhwd_impl (scalar_int_mode elem_mode)\n+  CONSTEXPR svqinc_bhwd_impl (scalar_int_mode elem_mode)\n     : svqdec_svqinc_bhwd_impl (SS_PLUS, US_PLUS, elem_mode) {}\n };\n \n /* Implements svqdecp and svqincp.  */\n class svqdecp_svqincp_impl : public function_base\n {\n public:\n-  constexpr svqdecp_svqincp_impl (rtx_code code_for_sint,\n+  CONSTEXPR svqdecp_svqincp_impl (rtx_code code_for_sint,\n \t\t\t\t  rtx_code code_for_uint)\n     : m_code_for_sint (code_for_sint),\n       m_code_for_uint (code_for_uint)\n@@ -2275,7 +2275,7 @@ class svstnt1_impl : public full_width_access\n class svsub_impl : public rtx_code_function\n {\n public:\n-  constexpr svsub_impl ()\n+  CONSTEXPR svsub_impl ()\n     : rtx_code_function (MINUS, MINUS, UNSPEC_COND_FSUB) {}\n \n   rtx\n@@ -2304,7 +2304,7 @@ class svtbl_impl : public permute\n class svtrn_impl : public binary_permute\n {\n public:\n-  constexpr svtrn_impl (int base)\n+  CONSTEXPR svtrn_impl (int base)\n     : binary_permute (base ? UNSPEC_TRN2 : UNSPEC_TRN1), m_base (base) {}\n \n   gimple *\n@@ -2345,7 +2345,7 @@ class svundef_impl : public quiet<multi_vector_function>\n class svunpk_impl : public quiet<function_base>\n {\n public:\n-  constexpr svunpk_impl (bool high_p) : m_high_p (high_p) {}\n+  CONSTEXPR svunpk_impl (bool high_p) : m_high_p (high_p) {}\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -2387,7 +2387,7 @@ class svunpk_impl : public quiet<function_base>\n class svusdot_impl : public function_base\n {\n public:\n-  constexpr svusdot_impl (bool su) : m_su (su) {}\n+  CONSTEXPR svusdot_impl (bool su) : m_su (su) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -2415,7 +2415,7 @@ class svusdot_impl : public function_base\n class svuzp_impl : public binary_permute\n {\n public:\n-  constexpr svuzp_impl (unsigned int base)\n+  CONSTEXPR svuzp_impl (unsigned int base)\n     : binary_permute (base ? UNSPEC_UZP2 : UNSPEC_UZP1), m_base (base) {}\n \n   gimple *\n@@ -2438,7 +2438,7 @@ class svuzp_impl : public binary_permute\n class svwhilelx_impl : public while_comparison\n {\n public:\n-  constexpr svwhilelx_impl (int unspec_for_sint, int unspec_for_uint, bool eq_p)\n+  CONSTEXPR svwhilelx_impl (int unspec_for_sint, int unspec_for_uint, bool eq_p)\n     : while_comparison (unspec_for_sint, unspec_for_uint), m_eq_p (eq_p)\n   {}\n \n@@ -2525,7 +2525,7 @@ class svwrffr_impl : public function_base\n class svzip_impl : public binary_permute\n {\n public:\n-  constexpr svzip_impl (unsigned int base)\n+  CONSTEXPR svzip_impl (unsigned int base)\n     : binary_permute (base ? UNSPEC_ZIP2 : UNSPEC_ZIP1), m_base (base) {}\n \n   gimple *"}, {"sha": "472e26c17ff010832971427bd87a3dae0589dbdf", "filename": "gcc/config/aarch64/aarch64-sve-builtins-functions.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -44,7 +44,7 @@ class quiet : public T\n class multi_vector_function : public function_base\n {\n public:\n-  constexpr multi_vector_function (unsigned int vectors_per_tuple)\n+  CONSTEXPR multi_vector_function (unsigned int vectors_per_tuple)\n     : m_vectors_per_tuple (vectors_per_tuple) {}\n \n   unsigned int\n@@ -63,7 +63,7 @@ class multi_vector_function : public function_base\n class full_width_access : public multi_vector_function\n {\n public:\n-  constexpr full_width_access (unsigned int vectors_per_tuple = 1)\n+  CONSTEXPR full_width_access (unsigned int vectors_per_tuple = 1)\n     : multi_vector_function (vectors_per_tuple) {}\n \n   tree\n@@ -88,7 +88,7 @@ class full_width_access : public multi_vector_function\n class extending_load : public function_base\n {\n public:\n-  constexpr extending_load (type_suffix_index memory_type)\n+  CONSTEXPR extending_load (type_suffix_index memory_type)\n     : m_memory_type (memory_type) {}\n \n   unsigned int\n@@ -131,7 +131,7 @@ class extending_load : public function_base\n class truncating_store : public function_base\n {\n public:\n-  constexpr truncating_store (scalar_int_mode to_mode) : m_to_mode (to_mode) {}\n+  CONSTEXPR truncating_store (scalar_int_mode to_mode) : m_to_mode (to_mode) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -168,7 +168,7 @@ class truncating_store : public function_base\n class rtx_code_function_base : public function_base\n {\n public:\n-  constexpr rtx_code_function_base (rtx_code code_for_sint,\n+  CONSTEXPR rtx_code_function_base (rtx_code code_for_sint,\n \t\t\t\t    rtx_code code_for_uint,\n \t\t\t\t    int unspec_for_fp = -1)\n     : m_code_for_sint (code_for_sint), m_code_for_uint (code_for_uint),\n@@ -227,7 +227,7 @@ class rtx_code_function_rotated : public rtx_code_function_base\n class unspec_based_function_base : public function_base\n {\n public:\n-  constexpr unspec_based_function_base (int unspec_for_sint,\n+  CONSTEXPR unspec_based_function_base (int unspec_for_sint,\n \t\t\t\t\tint unspec_for_uint,\n \t\t\t\t\tint unspec_for_fp)\n     : m_unspec_for_sint (unspec_for_sint),\n@@ -434,7 +434,7 @@ class code_for_mode_function : public function_base\n class fixed_insn_function : public function_base\n {\n public:\n-  constexpr fixed_insn_function (insn_code code) : m_code (code) {}\n+  CONSTEXPR fixed_insn_function (insn_code code) : m_code (code) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -476,7 +476,7 @@ class permute : public quiet<function_base>\n class binary_permute : public permute\n {\n public:\n-  constexpr binary_permute (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR binary_permute (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -493,13 +493,13 @@ class binary_permute : public permute\n class reduction : public function_base\n {\n public:\n-  constexpr reduction (int unspec)\n+  CONSTEXPR reduction (int unspec)\n     : m_unspec_for_sint (unspec),\n       m_unspec_for_uint (unspec),\n       m_unspec_for_fp (unspec)\n   {}\n \n-  constexpr reduction (int unspec_for_sint, int unspec_for_uint,\n+  CONSTEXPR reduction (int unspec_for_sint, int unspec_for_uint,\n \t\t       int unspec_for_fp)\n     : m_unspec_for_sint (unspec_for_sint),\n       m_unspec_for_uint (unspec_for_uint),\n@@ -532,7 +532,7 @@ class reduction : public function_base\n class shift_wide : public function_base\n {\n public:\n-  constexpr shift_wide (rtx_code code, int wide_unspec)\n+  CONSTEXPR shift_wide (rtx_code code, int wide_unspec)\n     : m_code (code), m_wide_unspec (wide_unspec) {}\n \n   rtx\n@@ -567,7 +567,7 @@ class shift_wide : public function_base\n class unary_count : public quiet<function_base>\n {\n public:\n-  constexpr unary_count (rtx_code code) : m_code (code) {}\n+  CONSTEXPR unary_count (rtx_code code) : m_code (code) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -590,7 +590,7 @@ class unary_count : public quiet<function_base>\n class while_comparison : public function_base\n {\n public:\n-  constexpr while_comparison (int unspec_for_sint, int unspec_for_uint)\n+  CONSTEXPR while_comparison (int unspec_for_sint, int unspec_for_uint)\n     : m_unspec_for_sint (unspec_for_sint),\n       m_unspec_for_uint (unspec_for_uint)\n   {}\n@@ -619,7 +619,7 @@ class while_comparison : public function_base\n /* Declare the global function base NAME, creating it from an instance\n    of class CLASS with constructor arguments ARGS.  */\n #define FUNCTION(NAME, CLASS, ARGS) \\\n-  namespace { static constexpr const CLASS NAME##_obj ARGS; } \\\n+  namespace { static CONSTEXPR const CLASS NAME##_obj ARGS; } \\\n   namespace functions { const function_base *const NAME = &NAME##_obj; }\n \n #endif"}, {"sha": "8e26bd8a60fcef9782d91a7e8ca545f7d07c1afc", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -447,7 +447,7 @@ long_type_suffix (function_resolver &r, type_suffix_index type)\n /* Declare the function shape NAME, pointing it to an instance\n    of class <NAME>_def.  */\n #define SHAPE(NAME) \\\n-  static constexpr const NAME##_def NAME##_obj; \\\n+  static CONSTEXPR const NAME##_def NAME##_obj; \\\n   namespace shapes { const function_shape *const NAME = &NAME##_obj; }\n \n /* Base class for functions that are not overloaded.  */\n@@ -587,7 +587,7 @@ struct binary_imm_long_base : public overloaded_base<0>\n /* Base class for inc_dec and inc_dec_pat.  */\n struct inc_dec_base : public overloaded_base<0>\n {\n-  constexpr inc_dec_base (bool pat_p) : m_pat_p (pat_p) {}\n+  CONSTEXPR inc_dec_base (bool pat_p) : m_pat_p (pat_p) {}\n \n   /* Resolve based on the first argument only, which must be either a\n      scalar or a vector.  If it's a scalar, it must be a 32-bit or\n@@ -1924,7 +1924,7 @@ SHAPE (get)\n    whose size is tied to the [bhwd] suffix of \"svfoo\".  */\n struct inc_dec_def : public inc_dec_base\n {\n-  constexpr inc_dec_def () : inc_dec_base (false) {}\n+  CONSTEXPR inc_dec_def () : inc_dec_base (false) {}\n \n   void\n   build (function_builder &b, const function_group_info &group) const override\n@@ -1949,7 +1949,7 @@ SHAPE (inc_dec)\n    whose size is tied to the [bhwd] suffix of \"svfoo\".  */\n struct inc_dec_pat_def : public inc_dec_base\n {\n-  constexpr inc_dec_pat_def () : inc_dec_base (true) {}\n+  CONSTEXPR inc_dec_pat_def () : inc_dec_base (true) {}\n \n   void\n   build (function_builder &b, const function_group_info &group) const override"}, {"sha": "a7d7435afda06f6b874c3c80bff04a960ceb7bf0", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -158,7 +158,7 @@ class svldnt1_gather_extend_impl : public extending_load\n class svmatch_svnmatch_impl : public function_base\n {\n public:\n-  constexpr svmatch_svnmatch_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svmatch_svnmatch_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -233,7 +233,7 @@ class svqrdcmlah_lane_impl : public function_base\n class svqrshl_impl : public unspec_based_function\n {\n public:\n-  constexpr svqrshl_impl ()\n+  CONSTEXPR svqrshl_impl ()\n     : unspec_based_function (UNSPEC_SQRSHL, UNSPEC_UQRSHL, -1) {}\n \n   gimple *\n@@ -267,7 +267,7 @@ class svqrshl_impl : public unspec_based_function\n class svqshl_impl : public unspec_based_function\n {\n public:\n-  constexpr svqshl_impl ()\n+  CONSTEXPR svqshl_impl ()\n     : unspec_based_function (UNSPEC_SQSHL, UNSPEC_UQSHL, -1) {}\n \n   gimple *\n@@ -303,7 +303,7 @@ class svqshl_impl : public unspec_based_function\n class svrshl_impl : public unspec_based_function\n {\n public:\n-  constexpr svrshl_impl ()\n+  CONSTEXPR svrshl_impl ()\n     : unspec_based_function (UNSPEC_SRSHL, UNSPEC_URSHL, -1) {}\n \n   gimple *\n@@ -403,7 +403,7 @@ class svstnt1_scatter_truncate_impl : public truncating_store\n class svtbl2_impl : public quiet<multi_vector_function>\n {\n public:\n-  constexpr svtbl2_impl () : quiet<multi_vector_function> (2) {}\n+  CONSTEXPR svtbl2_impl () : quiet<multi_vector_function> (2) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -431,7 +431,7 @@ class svuqadd_impl : public function_base\n class svwhilerw_svwhilewr_impl : public full_width_access\n {\n public:\n-  constexpr svwhilerw_svwhilewr_impl (int unspec) : m_unspec (unspec) {}\n+  CONSTEXPR svwhilerw_svwhilewr_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override"}, {"sha": "e168c83344a0d487e3109718333c918b233473cd", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -99,7 +99,7 @@ struct registered_function_hasher : nofree_ptr_hash <registered_function>\n };\n \n /* Information about each single-predicate or single-vector type.  */\n-static constexpr const vector_type_info vector_types[] = {\n+static CONSTEXPR const vector_type_info vector_types[] = {\n #define DEF_SVE_TYPE(ACLE_NAME, NCHARS, ABI_NAME, SCALAR_TYPE) \\\n   { #ACLE_NAME, #ABI_NAME, \"u\" #NCHARS #ABI_NAME },\n #include \"aarch64-sve-builtins.def\"\n@@ -116,7 +116,7 @@ static const char *const pred_suffixes[NUM_PREDS + 1] = {\n };\n \n /* Static information about each mode_suffix_index.  */\n-constexpr const mode_suffix_info mode_suffixes[] = {\n+CONSTEXPR const mode_suffix_info mode_suffixes[] = {\n #define VECTOR_TYPE_none NUM_VECTOR_TYPES\n #define DEF_SVE_MODE(NAME, BASE, DISPLACEMENT, UNITS) \\\n   { \"_\" #NAME, VECTOR_TYPE_##BASE, VECTOR_TYPE_##DISPLACEMENT, UNITS_##UNITS },\n@@ -126,7 +126,7 @@ constexpr const mode_suffix_info mode_suffixes[] = {\n };\n \n /* Static information about each type_suffix_index.  */\n-constexpr const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n+CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n #define DEF_SVE_TYPE_SUFFIX(NAME, ACLE_TYPE, CLASS, BITS, MODE) \\\n   { \"_\" #NAME, \\\n     VECTOR_TYPE_##ACLE_TYPE, \\\n@@ -522,7 +522,7 @@ static const predication_index preds_z_or_none[] = {\n static const predication_index preds_z[] = { PRED_z, NUM_PREDS };\n \n /* A list of all SVE ACLE functions.  */\n-static constexpr const function_group_info function_groups[] = {\n+static CONSTEXPR const function_group_info function_groups[] = {\n #define DEF_SVE_FUNCTION(NAME, SHAPE, TYPES, PREDS) \\\n   { #NAME, &functions::NAME, &shapes::SHAPE, types_##TYPES, preds_##PREDS, \\\n     REQUIRED_EXTENSIONS | AARCH64_FL_SVE },"}, {"sha": "0458c65db817cb27d234d2bfb4df48f073700aa0", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -2679,7 +2679,7 @@ struct processor\n };\n \n /* Architectures implementing AArch64.  */\n-static constexpr processor all_architectures[] =\n+static CONSTEXPR const processor all_architectures[] =\n {\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, D, E) \\\n   {NAME, CORE, CORE, AARCH64_ARCH_##ARCH_IDENT, \\"}, {"sha": "a1d412cb7b40cec779691263d9f4319df9ac2710", "filename": "gcc/config/aarch64/driver-aarch64.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f95d3d5de72a1c43e8d529bad3ef59afc3214705/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc?ref=f95d3d5de72a1c43e8d529bad3ef59afc3214705", "patch": "@@ -64,7 +64,7 @@ struct aarch64_core_data\n #define AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   { CORE_NAME, #ARCH, IMP, PART, VARIANT, feature_deps::cpu_##CORE_IDENT },\n \n-static constexpr aarch64_core_data aarch64_cpu_data[] =\n+static CONSTEXPR const aarch64_core_data aarch64_cpu_data[] =\n {\n #include \"aarch64-cores.def\"\n   { NULL, NULL, INVALID_IMP, INVALID_CORE, ALL_VARIANTS, 0 }\n@@ -82,7 +82,7 @@ struct aarch64_arch_driver_info\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n   { #ARCH_IDENT + 1, NAME, feature_deps::ARCH_IDENT ().enable },\n \n-static constexpr aarch64_arch_driver_info aarch64_arches[] =\n+static CONSTEXPR const aarch64_arch_driver_info aarch64_arches[] =\n {\n #include \"aarch64-arches.def\"\n   {NULL, NULL, 0}"}]}