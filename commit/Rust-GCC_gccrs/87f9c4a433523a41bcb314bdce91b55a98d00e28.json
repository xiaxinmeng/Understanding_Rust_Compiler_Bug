{"sha": "87f9c4a433523a41bcb314bdce91b55a98d00e28", "node_id": "C_kwDOANBUbNoAKDg3ZjljNGE0MzM1MjNhNDFiY2IzMTRiZGNlOTFiNTVhOThkMDBlMjg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-20T00:17:52Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-20T00:17:52Z"}, "message": "Daily bump.", "tree": {"sha": "a9f71e1188486cf03a4120485c4fd50a40110fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f71e1188486cf03a4120485c4fd50a40110fdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87f9c4a433523a41bcb314bdce91b55a98d00e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f9c4a433523a41bcb314bdce91b55a98d00e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f9c4a433523a41bcb314bdce91b55a98d00e28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f9c4a433523a41bcb314bdce91b55a98d00e28/comments", "author": null, "committer": null, "parents": [{"sha": "5e1538c5f68abed81204a223db7bdbeef32e0711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1538c5f68abed81204a223db7bdbeef32e0711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1538c5f68abed81204a223db7bdbeef32e0711"}], "stats": {"total": 323, "additions": 322, "deletions": 1}, "files": [{"sha": "5e54dd42eeb8a2fc2d3555e5da1b68a27d616d4a", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,8 @@\n+2022-10-19  LIU Hao  <lh_mouse@126.com>\n+\n+\t* gthr.m4 (GCC_AC_THREAD_HEADER): Add new case for `mcf` thread\n+\tmodel\n+\n 2022-08-31  Martin Liska  <mliska@suse.cz>\n \n \t* mh-pa-hpux10: Removed."}, {"sha": "7a50293c7806680616ab37de7097a7a78cade733", "filename": "gcc/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,137 @@\n+2022-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (build_le): Document result.\n+\t(build_lt): Same.\n+\t(build_ge): Same.\n+\t(foperator_ge::op2_range): Check result of build_*.\n+\t(foperator_unordered_le::op1_range): Same.\n+\t(foperator_unordered_le::op2_range): Same.\n+\t(foperator_unordered_gt::op1_range): Same.\n+\t(foperator_unordered_gt::op2_range): Same.\n+\t(foperator_unordered_ge::op1_range): Same.\n+\t(foperator_unordered_ge::op2_range): Same.\n+\n+2022-10-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85043\n+\t* doc/invoke.texi: Update documentation of -Wuseless-cast.\n+\n+2022-10-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::range_from_dom): Use\n+\t  Value_Range not int_range_max.\n+\n+2022-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107312\n+\t* range.h (range_true_and_false): Special case 1-bit signed types.\n+\t* value-range.cc (range_tests_misc): New test.\n+\n+2022-10-19  LIU Hao  <lh_mouse@126.com>\n+\n+\t* config/i386/mingw-mcfgthread.h: New file\n+\t* config/i386/mingw32.h: Add builtin macro and default libraries\n+\tfor mcfgthread when thread model is `mcf`\n+\t* config.gcc: Include 'i386/mingw-mcfgthread.h' when thread model\n+\tis `mcf`\n+\t* configure.ac: Recognize `mcf` as a valid thread model\n+\t* config.in: Regenerate\n+\t* configure: Regenerate\n+\n+2022-10-19  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* gengtype.cc (output_escaped_param): Add missing const.\n+\t(get_string_option): Add missing check for option type.\n+\t(walk_type): Support new \"string_length\" GTY option.\n+\t(write_types_process_field): Likewise.\n+\t* ggc-common.cc (gt_pch_note_object): Add optional length argument.\n+\t* ggc.h (gt_pch_note_object): Adjust prototype for new argument.\n+\t(gt_pch_n_S2): Declare...\n+\t* stringpool.cc (gt_pch_n_S2): ...new function.\n+\t* doc/gty.texi: Document new GTY((string_length)) option.\n+\n+2022-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/extend.texi: Remove useless @tie{} directives.\n+\n+2022-10-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/107206\n+\t* tree-sra.cc (struct access): New field grp_result_of_prop_from_lhs.\n+\t(analyze_access_subtree): Do not create replacements for accesses with\n+\tthis flag when not toally scalarizing.\n+\t(propagate_subaccesses_from_lhs): Set the new flag.\n+\n+2022-10-19  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\tPR target/106355\n+\t* config/s390/s390.cc (s390_call_saved_register_used): For a\n+\tparameter with BLKmode fix determining number of consecutive\n+\tregisters.\n+\n+2022-10-19  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa-protos.h\n+\t(xtensa_split1_finished_p, xtensa_split_DI_reg_imm): New prototypes.\n+\t* config/xtensa/xtensa.cc\n+\t(xtensa_split1_finished_p, xtensa_split_DI_reg_imm, xtensa_lra_p):\n+\tNew functions.\n+\t(TARGET_LRA_P): Replace the dummy hook with xtensa_lra_p.\n+\t(xt_true_regnum): Rework.\n+\t* config/xtensa/xtensa.h (CALL_REALLY_USED_REGISTERS):\n+\tSwitch from CALL_USED_REGISTERS, and revise the comment.\n+\t* config/xtensa/constraints.md (Y):\n+\tUse !xtensa_split1_finished_p() instead of can_create_pseudo_p().\n+\t* config/xtensa/predicates.md (move_operand): Ditto.\n+\t* config/xtensa/xtensa.md: Add two new split patterns:\n+\t  - splits DImode immediate load into two SImode ones\n+\t  - puts out-of-constraint SImode constants into the constant pool\n+\t* config/xtensa/xtensa.opt (-mlra): New target-specific option\n+\tfor testing purpose.\n+\n+2022-10-19  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/s390.md: Move reload_completed and check operands for REG_P.\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/107262\n+\t* expr.cc (convert_mode_scalar): For BFmode -> SFmode conversions\n+\tof constants, use simplify_unary_operation if fromi has VOIDmode\n+\tinstead of recursive convert_mode_scalar.\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/106990\n+\t* match.pd ((~X - ~Y) -> Y - X, -x & 1 -> x & 1): Guard with\n+\t!TYPE_OVERFLOW_SANITIZED (type).\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386-builtins.cc (ix86_bf16_ptr_type_node): Remove.\n+\t(ix86_bf16_type_node): New variable.\n+\t(ix86_register_bf16_builtin_type): If bfloat16_type_node is NULL\n+\tfrom generic code, set only ix86_bf16_type_node to a new REAL_TYPE\n+\trather than bfloat16_type_node, otherwise set ix86_bf16_type_node\n+\tto bfloat16_type_node.  Register __bf16 on ix86_bf16_type_node\n+\trather than bfloat16_type_node.  Don't initialize unused\n+\tix86_bf16_ptr_type_node.\n+\t* config/i386/i386-builtin-types.def (BFLOAT16): Use\n+\tix86_bf16_type_node rather than bfloat16_type_node.\n+\n+2022-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106781\n+\t* cgraph.cc (cgraph_edge::redirect_call_stmt_to_callee): Copy\n+\tLHS removal from fixup_noreturn_call.\n+\n+2022-10-19  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/107271\n+\t* config/i386/i386-expand.cc (ix86_vec_perm_index_canon): New.\n+\t(expand_vec_perm_shufps_shufps): Call\n+\tix86_vec_perm_index_canon\n+\n 2022-10-18  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.h (ipa_agg_value): Remove type."}, {"sha": "8b08eddd863203a81a483e3ff46873d2a605d011", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1 +1 @@\n-20221019\n+20221020"}, {"sha": "375a87f7ff04aabb8e9d99b91c2fc7a7ea386fc6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,16 @@\n+2022-10-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105765\n+\t* varargs.cc (get_BT_VALIST_ARG): Rename to...\n+\t(get_va_copy_arg): ...this, and update logic for determining level\n+\tof indirection of va_copy's argument to use type of argument,\n+\trather than looking at va_list_type_node, to correctly handle\n+\t__builtin_ms_va_copy.\n+\t(get_stateful_BT_VALIST_ARG): Rename to...\n+\t(get_stateful_va_copy_arg): ...this.\n+\t(va_list_state_machine::on_va_copy): Update for renaming.\n+\t(region_model::impl_call_va_copy): Likewise.\n+\n 2022-10-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107210"}, {"sha": "bb85e7856766a83fd8f6cac6041faba50cd377dc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,19 @@\n+2022-10-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-format.h (enum format_lengths): Add FMT_LEN_w8, FMT_LEN_w16,\n+\tFMT_LEN_w32, FMT_LEN_w64, FMT_LEN_wf8, FMT_LEN_wf16, FMT_LEN_wf32\n+\tand FMT_LEN_wf64.\n+\t(NOARGUMENTS, NOLENGTHS): Update definitions.\n+\t(T_I8, T2X_I8, T_I16, T2X_I16, T_I32, T2X_I32, T_I64, T2X_I64)\n+\t(T_U8, T2X_U8, T_U16, T2X_U16, T_U32, T2X_U32, T_U64, T2X_U64)\n+\t(T_IF8, T2X_IF8, T_IF16, T2X_IF16, T_IF32, T2X_IF32, T_IF64)\n+\t(T2X_IF64, T_UF8, T2X_UF8, T_UF16, T2X_UF16, T_UF32, T2X_UF32)\n+\t(T_UF64, T2X_UF64): New macros.\n+\t* c-format.cc (printf_length_specs, scanf_length_specs): Add wN\n+\tand wfN length modifiers.\n+\t(print_char_table, scan_char_table): Add entries using wN and wfN\n+\tlength modifiers.\n+\n 2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/36113"}, {"sha": "b228929ac62495153abf5a079bfc04d7bae0757d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,9 @@\n+2022-10-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85043\n+\t* typeck.cc (maybe_warn_about_useless_cast): Don't warn when\n+\ta glvalue is cast to a non-reference type.\n+\n 2022-10-18  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/105045"}, {"sha": "5f9ec4c3ed899cf3e3f06dae615c3f7b2c04ca79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,81 @@\n+2022-10-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/format/format.h (int_least8_t, int_least16_t)\n+\t(int_least32_t, int_least64_t, uint_least8_t, uint_least16_t)\n+\t(uint_least32_t, uint_least64_t, int_fast8_t, int_fast16_t)\n+\t(int_fast32_t, int_fast64_t, uint_fast8_t, uint_fast16_t)\n+\t(uint_fast32_t, uint_fast64_t): New typedefs.\n+\t* gcc.dg/format/c11-printf-1.c, gcc.dg/format/c11-scanf-1.c,\n+\tgcc.dg/format/c2x-printf-1.c, gcc.dg/format/c2x-scanf-1.c,\n+\tgcc.dg/format/ext-9.c: Add tests using wN and wfN length\n+\tmodifiers.\n+\n+2022-10-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105765\n+\t* gcc.dg/analyzer/stdarg-1-ms_abi.c: New test, based on stdarg-1.c.\n+\t* gcc.dg/analyzer/stdarg-1-sysv_abi.c: Likewise.\n+\n+2022-10-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85043\n+\t* g++.dg/warn/Wuseless-cast.C: Remove dg-warning.\n+\t* g++.dg/warn/Wuseless-cast3.C: New test.\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/g++-dg.exp (g++-dg-runtest): When using defaulted\n+\tstd_list, if test has { dg-do * { target c++23 } } directive,\n+\tuse { 23 } with which the test will run instead of { 98 14 17 20 }\n+\twhich would make it UNSUPPORTED in all cases.\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/107311\n+\t* gcc.dg/c2x-enum-1.c (enum e5): Expect e5a type inside of\n+\tenum to be int rather than long if long isn't wider than int.\n+\n+2022-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107312\n+\t* gcc.target/i386/pr107312.c: New test.\n+\n+2022-10-19  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* g++.dg/pch/pch-string-nulls.C: New test.\n+\t* g++.dg/pch/pch-string-nulls.Hs: New test.\n+\n+2022-10-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/107206\n+\t* g++.dg/tree-ssa/pr107206.C: New test.\n+\n+2022-10-19  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.target/s390/pr106355.h: Common code for new tests.\n+\t* gcc.target/s390/pr106355-1.c: New test.\n+\t* gcc.target/s390/pr106355-2.c: New test.\n+\t* gcc.target/s390/pr106355-3.c: New test.\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/107262\n+\t* gcc.dg/pr107262.c: New test.\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/106990\n+\t* c-c++-common/ubsan/pr106990.c: New test.\n+\n+2022-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106781\n+\t* gcc.dg/pr106781.c: New testcase.\n+\n+2022-10-19  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr107271.c: New test.\n+\n 2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/107164"}, {"sha": "92ef782b1ff5de08b44400eb8c03e4f37a36f52e", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,7 @@\n+2022-10-19  LIU Hao  <lh_mouse@126.com>\n+\n+\t* configure.tgt: Add new case for `mcf` thread model\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "18d5bcceaf05e79ed32f0e7db7e66f59a073c1a3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,8 @@\n+2022-10-19  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* include/cpplib.h (struct cpp_string): Use new \"string_length\" GTY.\n+\t* include/symtab.h (struct ht_identifier): Likewise.\n+\n 2022-10-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* charset.cc (ucn_valid_in_identifier): Check xid_identifiers not"}, {"sha": "005505b261d77aeac04ae2dff2b24e0fcf02a3de", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,11 @@\n+2022-10-19  LIU Hao  <lh_mouse@126.com>\n+\n+\t* config.host: Add new cases for `mcf` thread model\n+\t* config/i386/gthr-mcf.h: New file\n+\t* config/i386/t-mingw-mcfgthread: New file\n+\t* config/i386/t-slibgcc-cygming: Add mcfgthread for libgcc DLL\n+\t* configure: Regenerate\n+\n 2022-10-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* Makefile.in: Quote variable."}, {"sha": "2d09c903daaef7453837a53d5cd7a9e914bc4ee3", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,7 @@\n+2022-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n 2022-10-18  Florian Weimer  <fweimer@redhat.com>\n \n \t* configure.ac (sanitizer_supported): Include <unistd.h> for"}, {"sha": "82b3d9fe0679a7e685230046ba3bc333bcaabffa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f9c4a433523a41bcb314bdce91b55a98d00e28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f9c4a433523a41bcb314bdce91b55a98d00e28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=87f9c4a433523a41bcb314bdce91b55a98d00e28", "patch": "@@ -1,3 +1,51 @@\n+2022-10-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (views::__detail::__is_repeat_view): Define\n+\tand later define a partial specialization.\n+\t(views::__detail::__take_of_repeat_view): Declare and later define.\n+\t(views::__detail::__drop_of_repeat_view): Likewise.\n+\t(views::_Take::operator()): Return a repeat_view if the argument\n+\tis a repeat_view as per P2474R2.\n+\t(views::_Drop::operator()): Likewise.\n+\t(repeat_view): Befriend __take/drop_of_repeat_view.\n+\t* testsuite/std/ranges/repeat/1.cc (test04): New test.\n+\n+2022-10-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/107313\n+\t* include/std/ranges (stride_view::_Iterator::operator-): Fix typo.\n+\t* testsuite/std/ranges/adaptors/stride/1.cc (test03): New test.\n+\n+2022-10-19  LIU Hao  <lh_mouse@126.com>\n+\n+\t* src/c++11/thread.cc (get_nprocs): Add new implementation\n+\tfor native Windows targets\n+\n+2022-10-19  LIU Hao  <lh_mouse@126.com>\n+\n+\t* libsupc++/atexit_thread.cc (__cxa_thread_atexit): Use\n+\timplementation from mcfgthread if available\n+\t* libsupc++/guard.cc (__cxa_guard_acquire, __cxa_guard_release,\n+\t__cxa_guard_abort): Use implementations from mcfgthread if\n+\tavailable\n+\t* configure: Regenerate\n+\n+2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\t* include/std/limits: Fix a typo, 202202L -> 202002L.\n+\t(numeric_limits::<_Float16>::radix, numeric_limits::<_Float32>::radix,\n+\tnumeric_limits::<_Float64>::radix, numeric_limits::<_Float128>::radix,\n+\tnumeric_limits::<__gnu_cxx::__bfloat16_t>::radix): Use __FLT_RADIX__\n+\tmacro instead of type specific macros.\n+\t* include/c_global/cmath (nextafter(_Float16, _Float16)): New\n+\toverload.\n+\t(nextafter(__gnu_cxx::__bfloat16_t, __gnu_cxx::__bfloat16_t)):\n+\tLikewise.\n+\t* testsuite/26_numerics/headers/cmath/functions_std_c++23.cc\n+\t(test_functions): Uncomment nextafter test.  Fix up sph_neumann call.\n+\t* testsuite/26_numerics/headers/cmath/nextafter_c++23.cc: New test.\n+\n 2022-10-18  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (stride_view): Define."}]}