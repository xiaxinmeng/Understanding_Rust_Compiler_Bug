{"sha": "6db60760b35d0d3902f099265e3f26283deecab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiNjA3NjBiMzVkMGQzOTAyZjA5OTI2NWUzZjI2MjgzZGVlY2FiMg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2017-07-29T01:38:19Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2017-07-29T01:38:19Z"}, "message": "use c++ instead of buildN_stat{,_loc}\n\ngcc/ChangeLog:\n\n2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* fold-const.c (fold_build1_stat_loc): Adjust.\n\t(fold_build2_stat_loc): Likewise.\n\t(fold_build3_stat_loc): Likewise.\n\t* tree.c (build0_stat): Remove _stat from name.\n\t(build1_stat): Likewise.\n\t(build2_stat): Likewise.\n\t(build3_stat): Likewise.\n\t(build4_stat): Likewise.\n\t(build5_stat): Likewise.\n\t* tree.h (build1_loc): Remove macro, and rename _stat function\n\tto this.\n\t(build2_loc): Likewise.\n\t(build3_loc): Likewise.\n\t(build4_loc): Likewise.\n\t(build5_loc): Likewise.\n\nFrom-SVN: r250698", "tree": {"sha": "64c7463cba570edcabf82e8ea6ef14c51fe11776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c7463cba570edcabf82e8ea6ef14c51fe11776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db60760b35d0d3902f099265e3f26283deecab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db60760b35d0d3902f099265e3f26283deecab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db60760b35d0d3902f099265e3f26283deecab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db60760b35d0d3902f099265e3f26283deecab2/comments", "author": null, "committer": null, "parents": [{"sha": "4bd2de4b4544d5fcc1d2dca8a54923cbbcf47e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd2de4b4544d5fcc1d2dca8a54923cbbcf47e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd2de4b4544d5fcc1d2dca8a54923cbbcf47e7d"}], "stats": {"total": 102, "additions": 53, "deletions": 49}, "files": [{"sha": "2219031028b78fcc0b9da6749bbc3f9ca940b452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6db60760b35d0d3902f099265e3f26283deecab2", "patch": "@@ -1,3 +1,21 @@\n+2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* fold-const.c (fold_build1_stat_loc): Adjust.\n+\t(fold_build2_stat_loc): Likewise.\n+\t(fold_build3_stat_loc): Likewise.\n+\t* tree.c (build0_stat): Remove _stat from name.\n+\t(build1_stat): Likewise.\n+\t(build2_stat): Likewise.\n+\t(build3_stat): Likewise.\n+\t(build4_stat): Likewise.\n+\t(build5_stat): Likewise.\n+\t* tree.h (build1_loc): Remove macro, and rename _stat function\n+\tto this.\n+\t(build2_loc): Likewise.\n+\t(build3_loc): Likewise.\n+\t(build4_loc): Likewise.\n+\t(build5_loc): Likewise.\n+\n 2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* tree.c (make_int_cst_stat): Remove _stat from name."}, {"sha": "5c1bd4360ddf0a5f7c2a37fbbe9fe53b7fa6f340", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6db60760b35d0d3902f099265e3f26283deecab2", "patch": "@@ -12212,7 +12212,7 @@ fold_build1_stat_loc (location_t loc,\n \n   tem = fold_unary_loc (loc, code, type, op0);\n   if (!tem)\n-    tem = build1_stat_loc (loc, code, type, op0 PASS_MEM_STAT);\n+    tem = build1_loc (loc, code, type, op0 PASS_MEM_STAT);\n \n #ifdef ENABLE_FOLD_CHECKING\n   md5_init_ctx (&ctx);\n@@ -12258,7 +12258,7 @@ fold_build2_stat_loc (location_t loc,\n \n   tem = fold_binary_loc (loc, code, type, op0, op1);\n   if (!tem)\n-    tem = build2_stat_loc (loc, code, type, op0, op1 PASS_MEM_STAT);\n+    tem = build2_loc (loc, code, type, op0, op1 PASS_MEM_STAT);\n \n #ifdef ENABLE_FOLD_CHECKING\n   md5_init_ctx (&ctx);\n@@ -12318,7 +12318,7 @@ fold_build3_stat_loc (location_t loc, enum tree_code code, tree type,\n   gcc_assert (TREE_CODE_CLASS (code) != tcc_vl_exp);\n   tem = fold_ternary_loc (loc, code, type, op0, op1, op2);\n   if (!tem)\n-    tem = build3_stat_loc (loc, code, type, op0, op1, op2 PASS_MEM_STAT);\n+    tem = build3_loc (loc, code, type, op0, op1, op2 PASS_MEM_STAT);\n \n #ifdef ENABLE_FOLD_CHECKING\n   md5_init_ctx (&ctx);"}, {"sha": "bb9339030efe8b991f6dbe99aa5b7925df20d2aa", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6db60760b35d0d3902f099265e3f26283deecab2", "patch": "@@ -4365,7 +4365,7 @@ do { tree _node = (NODE); \\\n    enough for all extant tree codes.  */\n \n tree\n-build0_stat (enum tree_code code, tree tt MEM_STAT_DECL)\n+build0 (enum tree_code code, tree tt MEM_STAT_DECL)\n {\n   tree t;\n \n@@ -4378,7 +4378,7 @@ build0_stat (enum tree_code code, tree tt MEM_STAT_DECL)\n }\n \n tree\n-build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n+build1 (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n {\n   int length = sizeof (struct tree_exp);\n   tree t;\n@@ -4454,7 +4454,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n   } while (0)\n \n tree\n-build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n+build2 (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects, div_by_zero;\n   tree t;\n@@ -4534,8 +4534,8 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n \n \n tree\n-build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n-\t     tree arg2 MEM_STAT_DECL)\n+build3 (enum tree_code code, tree tt, tree arg0, tree arg1,\n+\ttree arg2 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects;\n   tree t;\n@@ -4575,8 +4575,8 @@ build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n }\n \n tree\n-build4_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n-\t     tree arg2, tree arg3 MEM_STAT_DECL)\n+build4 (enum tree_code code, tree tt, tree arg0, tree arg1,\n+\ttree arg2, tree arg3 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects;\n   tree t;\n@@ -4602,8 +4602,8 @@ build4_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n }\n \n tree\n-build5_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n-\t     tree arg2, tree arg3, tree arg4 MEM_STAT_DECL)\n+build5 (enum tree_code code, tree tt, tree arg0, tree arg1,\n+\ttree arg2, tree arg3, tree arg4 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects;\n   tree t;"}, {"sha": "70803a0297330901d7b09992f9ac07389aad896d", "filename": "gcc/tree.h", "status": "modified", "additions": 23, "deletions": 37, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db60760b35d0d3902f099265e3f26283deecab2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6db60760b35d0d3902f099265e3f26283deecab2", "patch": "@@ -3929,81 +3929,67 @@ extern tree grow_tree_vec_stat (tree v, int MEM_STAT_DECL);\n extern tree build_nt (enum tree_code, ...);\n extern tree build_nt_call_vec (tree, vec<tree, va_gc> *);\n \n-extern tree build0_stat (enum tree_code, tree MEM_STAT_DECL);\n-#define build0(c,t) build0_stat (c,t MEM_STAT_INFO)\n-extern tree build1_stat (enum tree_code, tree, tree MEM_STAT_DECL);\n-#define build1(c,t1,t2) build1_stat (c,t1,t2 MEM_STAT_INFO)\n-extern tree build2_stat (enum tree_code, tree, tree, tree MEM_STAT_DECL);\n-#define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)\n-extern tree build3_stat (enum tree_code, tree, tree, tree, tree MEM_STAT_DECL);\n-#define build3(c,t1,t2,t3,t4) build3_stat (c,t1,t2,t3,t4 MEM_STAT_INFO)\n-extern tree build4_stat (enum tree_code, tree, tree, tree, tree,\n-\t\t\t tree MEM_STAT_DECL);\n-#define build4(c,t1,t2,t3,t4,t5) build4_stat (c,t1,t2,t3,t4,t5 MEM_STAT_INFO)\n-extern tree build5_stat (enum tree_code, tree, tree, tree, tree, tree,\n-\t\t\t tree MEM_STAT_DECL);\n-#define build5(c,t1,t2,t3,t4,t5,t6) build5_stat (c,t1,t2,t3,t4,t5,t6 MEM_STAT_INFO)\n+extern tree build0 (enum tree_code, tree CXX_MEM_STAT_INFO);\n+extern tree build1 (enum tree_code, tree, tree CXX_MEM_STAT_INFO);\n+extern tree build2 (enum tree_code, tree, tree, tree CXX_MEM_STAT_INFO);\n+extern tree build3 (enum tree_code, tree, tree, tree, tree CXX_MEM_STAT_INFO);\n+extern tree build4 (enum tree_code, tree, tree, tree, tree,\n+\t\t    tree CXX_MEM_STAT_INFO);\n+extern tree build5 (enum tree_code, tree, tree, tree, tree, tree,\n+\t\t    tree CXX_MEM_STAT_INFO);\n \n /* _loc versions of build[1-5].  */\n \n static inline tree\n-build1_stat_loc (location_t loc, enum tree_code code, tree type,\n-\t\t tree arg1 MEM_STAT_DECL)\n+build1_loc (location_t loc, enum tree_code code, tree type,\n+\t    tree arg1 CXX_MEM_STAT_INFO)\n {\n-  tree t = build1_stat (code, type, arg1 PASS_MEM_STAT);\n+  tree t = build1 (code, type, arg1 PASS_MEM_STAT);\n   if (CAN_HAVE_LOCATION_P (t))\n     SET_EXPR_LOCATION (t, loc);\n   return t;\n }\n-#define build1_loc(l,c,t1,t2) build1_stat_loc (l,c,t1,t2 MEM_STAT_INFO)\n \n static inline tree\n-build2_stat_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n-\t\t tree arg1 MEM_STAT_DECL)\n+build2_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n+\t    tree arg1 CXX_MEM_STAT_INFO)\n {\n-  tree t = build2_stat (code, type, arg0, arg1 PASS_MEM_STAT);\n+  tree t = build2 (code, type, arg0, arg1 PASS_MEM_STAT);\n   if (CAN_HAVE_LOCATION_P (t))\n     SET_EXPR_LOCATION (t, loc);\n   return t;\n }\n-#define build2_loc(l,c,t1,t2,t3) build2_stat_loc (l,c,t1,t2,t3 MEM_STAT_INFO)\n \n static inline tree\n-build3_stat_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n-\t\t tree arg1, tree arg2 MEM_STAT_DECL)\n+build3_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n+\t    tree arg1, tree arg2 CXX_MEM_STAT_INFO)\n {\n-  tree t = build3_stat (code, type, arg0, arg1, arg2 PASS_MEM_STAT);\n+  tree t = build3 (code, type, arg0, arg1, arg2 PASS_MEM_STAT);\n   if (CAN_HAVE_LOCATION_P (t))\n     SET_EXPR_LOCATION (t, loc);\n   return t;\n }\n-#define build3_loc(l,c,t1,t2,t3,t4) \\\n-  build3_stat_loc (l,c,t1,t2,t3,t4 MEM_STAT_INFO)\n \n static inline tree\n-build4_stat_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n-\t\t tree arg1, tree arg2, tree arg3 MEM_STAT_DECL)\n+build4_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n+\t    tree arg1, tree arg2, tree arg3 CXX_MEM_STAT_INFO)\n {\n-  tree t = build4_stat (code, type, arg0, arg1, arg2, arg3 PASS_MEM_STAT);\n+  tree t = build4 (code, type, arg0, arg1, arg2, arg3 PASS_MEM_STAT);\n   if (CAN_HAVE_LOCATION_P (t))\n     SET_EXPR_LOCATION (t, loc);\n   return t;\n }\n-#define build4_loc(l,c,t1,t2,t3,t4,t5) \\\n-  build4_stat_loc (l,c,t1,t2,t3,t4,t5 MEM_STAT_INFO)\n \n static inline tree\n-build5_stat_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n-\t\t tree arg1, tree arg2, tree arg3, tree arg4 MEM_STAT_DECL)\n+build5_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n+\t    tree arg1, tree arg2, tree arg3, tree arg4 CXX_MEM_STAT_INFO)\n {\n-  tree t = build5_stat (code, type, arg0, arg1, arg2, arg3,\n+  tree t = build5 (code, type, arg0, arg1, arg2, arg3,\n \t\t\targ4 PASS_MEM_STAT);\n   if (CAN_HAVE_LOCATION_P (t))\n     SET_EXPR_LOCATION (t, loc);\n   return t;\n }\n-#define build5_loc(l,c,t1,t2,t3,t4,t5,t6) \\\n-  build5_stat_loc (l,c,t1,t2,t3,t4,t5,t6 MEM_STAT_INFO)\n \n extern tree build_var_debug_value_stat (tree, tree MEM_STAT_DECL);\n #define build_var_debug_value(t1,t2) \\"}]}