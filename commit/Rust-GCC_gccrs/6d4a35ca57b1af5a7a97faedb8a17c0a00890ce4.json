{"sha": "6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0YTM1Y2E1N2IxYWY1YTdhOTdmYWVkYjhhMTdjMGEwMDg5MGNlNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-18T23:58:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-12-18T23:58:49Z"}, "message": "Add diagnostic_metadata and CWE support\n\nThis patch adds support for associating a diagnostic message with an\noptional diagnostic_metadata object, so that plugins can add extra data\nto their diagnostics (e.g. mapping a diagnostic to a taxonomy or coding\nstandard such as from CERT or MISRA).\n\nCurrently this only supports associating a CWE identifier with a\ndiagnostic (which is what I'm using for the warnings in the analyzer\npatch kit), but adding a diagnostic_metadata class allows for future\ngrowth in this area without an explosion of further \"warning_at\"\noverloads for all of the different kinds of custom data that a plugin\nmight want to add.\n\nThis version of the patch renames the overly-general\n-fdiagnostics-show-metadata to -fdiagnostics-show-cwe and adds test\ncoverage for it via a plugin.\n\nIt also adds a note to the documentation that no GCC diagnostics\ncurrently use this; it's a feature for plugins (and, at some point,\nI hope, the analyzer).\n\ngcc/ChangeLog:\n\t* common.opt (fdiagnostics-show-cwe): Add.\n\t* diagnostic-core.h (class diagnostic_metadata): New forward decl.\n\t(warning_at): Add overload taking a const diagnostic_metadata &.\n\t(emit_diagnostic_valist): Add overload taking a\n\tconst diagnostic_metadata *.\n\t* diagnostic-format-json.cc: Include \"diagnostic-metadata.h\".\n\t(json_from_metadata): New function.\n\t(json_end_diagnostic): Call it to add \"metadata\" child for\n\tdiagnostics with metadata.\n\t(diagnostic_output_format_init): Clear context->show_cwe.\n\t* diagnostic-metadata.h: New file.\n\t* diagnostic.c: Include \"diagnostic-metadata.h\".\n\t(diagnostic_impl): Add const diagnostic_metadata * param.\n\t(diagnostic_n_impl): Likewise.\n\t(diagnostic_initialize): Initialize context->show_cwe.\n\t(diagnostic_set_info_translated): Initialize diagnostic->metadata.\n\t(get_cwe_url): New function.\n\t(print_any_cwe): New function.\n\t(diagnostic_report_diagnostic): Call print_any_cwe if the\n\tdiagnostic has non-NULL metadata.\n\t(emit_diagnostic): Pass NULL as the metadata in the call to\n\tdiagnostic_impl.\n\t(emit_diagnostic_valist): Likewise.\n\t(emit_diagnostic_valist): New overload taking a\n\tconst diagnostic_metadata *.\n\t(inform): Pass NULL as the metadata in the call to\n\tdiagnostic_impl.\n\t(inform_n): Likewise for diagnostic_n_impl.\n\t(warning): Likewise.\n\t(warning_at): Likewise.  Add overload that takes a\n\tconst diagnostic_metadata &.\n\t(warning_n): Pass NULL as the metadata in the call to\n\tdiagnostic_n_impl.\n\t(pedwarn): Likewise for diagnostic_impl.\n\t(permerror): Likewise.\n\t(error): Likewise.\n\t(error_n): Likewise.\n\t(error_at): Likewise.\n\t(sorry): Likewise.\n\t(sorry_at): Likewise.\n\t(fatal_error): Likewise.\n\t(internal_error): Likewise.\n\t(internal_error_no_backtrace): Likewise.\n\t* diagnostic.h (diagnostic_info::metadata): New field.\n\t(diagnostic_context::show_cwe): New field.\n\t* doc/invoke.texi (-fno-diagnostics-show-cwe): New option.\n\t* opts.c (common_handle_option): Handle OPT_fdiagnostics_show_cwe.\n\t* toplev.c (general_init): Initialize global_dc->show_cwe.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-metadata.c: New test.\n\t* gcc.dg/plugin/diagnostic_plugin_test_metadata.c: New test plugin.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add them.\n\nFrom-SVN: r279556", "tree": {"sha": "16f8736949f2ebe5bba7113247da859b5ee624d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f8736949f2ebe5bba7113247da859b5ee624d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7a09efa24289b93d127ec41d5bec873d9fe000d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a09efa24289b93d127ec41d5bec873d9fe000d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a09efa24289b93d127ec41d5bec873d9fe000d"}], "stats": {"total": 453, "additions": 422, "deletions": 31}, "files": [{"sha": "5927823a83a23fbecdf512fa15cedbd307b4b6f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -1,3 +1,54 @@\n+2019-12-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* common.opt (fdiagnostics-show-cwe): Add.\n+\t* diagnostic-core.h (class diagnostic_metadata): New forward decl.\n+\t(warning_at): Add overload taking a const diagnostic_metadata &.\n+\t(emit_diagnostic_valist): Add overload taking a\n+\tconst diagnostic_metadata *.\n+\t* diagnostic-format-json.cc: Include \"diagnostic-metadata.h\".\n+\t(json_from_metadata): New function.\n+\t(json_end_diagnostic): Call it to add \"metadata\" child for\n+\tdiagnostics with metadata.\n+\t(diagnostic_output_format_init): Clear context->show_cwe.\n+\t* diagnostic-metadata.h: New file.\n+\t* diagnostic.c: Include \"diagnostic-metadata.h\".\n+\t(diagnostic_impl): Add const diagnostic_metadata * param.\n+\t(diagnostic_n_impl): Likewise.\n+\t(diagnostic_initialize): Initialize context->show_cwe.\n+\t(diagnostic_set_info_translated): Initialize diagnostic->metadata.\n+\t(get_cwe_url): New function.\n+\t(print_any_cwe): New function.\n+\t(diagnostic_report_diagnostic): Call print_any_cwe if the\n+\tdiagnostic has non-NULL metadata.\n+\t(emit_diagnostic): Pass NULL as the metadata in the call to\n+\tdiagnostic_impl.\n+\t(emit_diagnostic_valist): Likewise.\n+\t(emit_diagnostic_valist): New overload taking a\n+\tconst diagnostic_metadata *.\n+\t(inform): Pass NULL as the metadata in the call to\n+\tdiagnostic_impl.\n+\t(inform_n): Likewise for diagnostic_n_impl.\n+\t(warning): Likewise.\n+\t(warning_at): Likewise.  Add overload that takes a\n+\tconst diagnostic_metadata &.\n+\t(warning_n): Pass NULL as the metadata in the call to\n+\tdiagnostic_n_impl.\n+\t(pedwarn): Likewise for diagnostic_impl.\n+\t(permerror): Likewise.\n+\t(error): Likewise.\n+\t(error_n): Likewise.\n+\t(error_at): Likewise.\n+\t(sorry): Likewise.\n+\t(sorry_at): Likewise.\n+\t(fatal_error): Likewise.\n+\t(internal_error): Likewise.\n+\t(internal_error_no_backtrace): Likewise.\n+\t* diagnostic.h (diagnostic_info::metadata): New field.\n+\t(diagnostic_context::show_cwe): New field.\n+\t* doc/invoke.texi (-fno-diagnostics-show-cwe): New option.\n+\t* opts.c (common_handle_option): Handle OPT_fdiagnostics_show_cwe.\n+\t* toplev.c (general_init): Initialize global_dc->show_cwe.\n+\n 2019-12-19  Julian Brown  <julian@codesourcery.com>\n \t    Maciej W. Rozycki  <macro@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>"}, {"sha": "058da8af877f5f50af3765aff5813795adaa6244", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -1334,6 +1334,10 @@ fdiagnostics-show-option\n Common Var(flag_diagnostics_show_option) Init(1)\n Amend appropriate diagnostic messages with the command line option that controls them.\n \n+fdiagnostics-show-cwe\n+Common Var(flag_diagnostics_show_cwe) Init(1)\n+Print CWE identifiers for diagnostic messages, where available.\n+\n fdiagnostics-minimum-margin-width=\n Common Joined UInteger Var(diagnostics_minimum_margin_width) Init(6)\n Set minimum width of left margin of source code when showing source."}, {"sha": "2e7f12070fbd350419d3c8a7a7604fa5d1b881ff", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -45,6 +45,9 @@ class auto_diagnostic_group\n   ~auto_diagnostic_group ();\n };\n \n+/* Forward decl.  */\n+class diagnostic_metadata; /* See diagnostic-metadata.h.  */\n+\n extern const char *progname;\n \n extern const char *trim_filename (const char *);\n@@ -78,6 +81,9 @@ extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern bool warning_at (rich_location *, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n+extern bool warning_at (rich_location *, const diagnostic_metadata &, int,\n+\t\t\tconst char *, ...)\n+    ATTRIBUTE_GCC_DIAG(4,5);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void error_n (location_t, unsigned HOST_WIDE_INT, const char *,\n \t\t     const char *, ...)\n@@ -109,6 +115,10 @@ extern bool emit_diagnostic (diagnostic_t, rich_location *, int,\n \t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n extern bool emit_diagnostic_valist (diagnostic_t, location_t, int, const char *,\n \t\t\t\t    va_list *) ATTRIBUTE_GCC_DIAG (4,0);\n+extern bool emit_diagnostic_valist (diagnostic_t, rich_location *,\n+\t\t\t\t    const diagnostic_metadata *metadata,\n+\t\t\t\t    int, const char *, va_list *)\n+  ATTRIBUTE_GCC_DIAG (5,0);\n extern bool seen_error (void);\n \n #ifdef BUFSIZ"}, {"sha": "18f7a56a8db264530018cfdf2b0a66bd388e0928", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"diagnostic.h\"\n+#include \"diagnostic-metadata.h\"\n #include \"json.h\"\n #include \"selftest.h\"\n \n@@ -103,6 +104,20 @@ json_from_fixit_hint (const fixit_hint *hint)\n   return fixit_obj;\n }\n \n+/* Generate a JSON object for METADATA.  */\n+\n+static json::object *\n+json_from_metadata (const diagnostic_metadata *metadata)\n+{\n+  json::object *metadata_obj = new json::object ();\n+\n+  if (metadata->get_cwe ())\n+    metadata_obj->set (\"cwe\",\n+\t\t       new json::integer_number (metadata->get_cwe ()));\n+\n+  return metadata_obj;\n+}\n+\n /* No-op implementation of \"begin_diagnostic\" for JSON output.  */\n \n static void\n@@ -211,6 +226,12 @@ json_end_diagnostic (diagnostic_context *context, diagnostic_info *diagnostic,\n      TODO: functions\n      TODO: inlining information\n      TODO: macro expansion information.  */\n+\n+  if (diagnostic->metadata)\n+    {\n+      json::object *metadata_obj = json_from_metadata (diagnostic->metadata);\n+      diag_obj->set (\"metadata\", metadata_obj);\n+    }\n }\n \n /* No-op implementation of \"begin_group_cb\" for JSON output.  */\n@@ -268,6 +289,9 @@ diagnostic_output_format_init (diagnostic_context *context,\n \tcontext->end_group_cb =  json_end_group;\n \tcontext->final_cb =  json_final_cb;\n \n+\t/* The metadata is handled in JSON format, rather than as text.  */\n+\tcontext->show_cwe = false;\n+\n \t/* The option is handled in JSON format, rather than as text.  */\n \tcontext->show_option_requested = false;\n "}, {"sha": "a759d44fa44074a8bd9017037d22c27dbd22dc6a", "filename": "gcc/diagnostic-metadata.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic-metadata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic-metadata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-metadata.h?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -0,0 +1,42 @@\n+/* Additional metadata for a diagnostic.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_DIAGNOSTIC_METADATA_H\n+#define GCC_DIAGNOSTIC_METADATA_H\n+\n+/* A bundle of additional metadata that can be associated with a\n+   diagnostic.\n+\n+   Currently this only supports associating a CWE identifier with a\n+   diagnostic.  */\n+\n+class diagnostic_metadata\n+{\n+ public:\n+  diagnostic_metadata () : m_cwe (0) {}\n+\n+  void add_cwe (int cwe) { m_cwe = cwe; }\n+  int get_cwe () const { return m_cwe; }\n+\n+ private:\n+  int m_cwe;\n+};\n+\n+#endif /* ! GCC_DIAGNOSTIC_METADATA_H */"}, {"sha": "95cfb6e76ac3d9e7ec98a6f136e4b757e608279d", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 111, "deletions": 31, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"diagnostic-color.h\"\n #include \"diagnostic-url.h\"\n+#include \"diagnostic-metadata.h\"\n #include \"edit-context.h\"\n #include \"selftest.h\"\n #include \"selftest-diagnostic.h\"\n@@ -58,11 +59,13 @@ along with GCC; see the file COPYING3.  If not see\n #define permissive_error_option(DC) ((DC)->opt_permissive)\n \n /* Prototypes.  */\n-static bool diagnostic_impl (rich_location *, int, const char *,\n-\t\t\t     va_list *, diagnostic_t) ATTRIBUTE_GCC_DIAG(3,0);\n-static bool diagnostic_n_impl (rich_location *, int, unsigned HOST_WIDE_INT,\n+static bool diagnostic_impl (rich_location *, const diagnostic_metadata *,\n+\t\t\t     int, const char *,\n+\t\t\t     va_list *, diagnostic_t) ATTRIBUTE_GCC_DIAG(4,0);\n+static bool diagnostic_n_impl (rich_location *, const diagnostic_metadata *,\n+\t\t\t       int, unsigned HOST_WIDE_INT,\n \t\t\t       const char *, const char *, va_list *,\n-\t\t\t       diagnostic_t) ATTRIBUTE_GCC_DIAG(5,0);\n+\t\t\t       diagnostic_t) ATTRIBUTE_GCC_DIAG(6,0);\n \n static void error_recursion (diagnostic_context *) ATTRIBUTE_NORETURN;\n static void real_abort (void) ATTRIBUTE_NORETURN;\n@@ -183,6 +186,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   diagnostic_set_caret_max_width (context, pp_line_cutoff (context->printer));\n   for (i = 0; i < rich_location::STATICALLY_ALLOCATED_RANGES; i++)\n     context->caret_chars[i] = '^';\n+  context->show_cwe = false;\n   context->show_option_requested = false;\n   context->abort_on_error = false;\n   context->show_column = false;\n@@ -299,6 +303,7 @@ diagnostic_set_info_translated (diagnostic_info *diagnostic, const char *msg,\n   diagnostic->message.format_spec = msg;\n   diagnostic->message.m_richloc = richloc;\n   diagnostic->richloc = richloc;\n+  diagnostic->metadata = NULL;\n   diagnostic->kind = kind;\n   diagnostic->option_index = 0;\n }\n@@ -898,6 +903,47 @@ update_effective_level_from_pragmas (diagnostic_context *context,\n   return diag_class;\n }\n \n+/* Generate a URL string describing CWE.  The caller is responsible for\n+   freeing the string.  */\n+\n+static char *\n+get_cwe_url (int cwe)\n+{\n+  return xasprintf (\"https://cwe.mitre.org/data/definitions/%i.html\", cwe);\n+}\n+\n+/* If DIAGNOSTIC has a CWE identifier, print it.\n+\n+   For example, if the diagnostic metadata associates it with CWE-119,\n+   \" [CWE-119]\" will be printed, suitably colorized, and with a URL of a\n+   description of the security issue.  */\n+\n+static void\n+print_any_cwe (diagnostic_context *context,\n+\t\t    const diagnostic_info *diagnostic)\n+{\n+  if (diagnostic->metadata == NULL)\n+    return;\n+\n+  int cwe = diagnostic->metadata->get_cwe ();\n+  if (cwe)\n+    {\n+      pretty_printer *pp = context->printer;\n+      char *saved_prefix = pp_take_prefix (context->printer);\n+      pp_string (pp, \" [\");\n+      pp_string (pp, colorize_start (pp_show_color (pp),\n+\t\t\t\t     diagnostic_kind_color[diagnostic->kind]));\n+      char *cwe_url = get_cwe_url (cwe);\n+      pp_begin_url (pp, cwe_url);\n+      free (cwe_url);\n+      pp_printf (pp, \"CWE-%i\", cwe);\n+      pp_set_prefix (context->printer, saved_prefix);\n+      pp_end_url (pp);\n+      pp_string (pp, colorize_stop (pp_show_color (pp)));\n+      pp_character (pp, ']');\n+    }\n+}\n+\n /* Print any metadata about the option used to control DIAGNOSTIC to CONTEXT's\n    printer, e.g. \" [-Werror=uninitialized]\".\n    Subroutine of diagnostic_report_diagnostic.  */\n@@ -1058,6 +1104,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   pp_format (context->printer, &diagnostic->message);\n   (*diagnostic_starter (context)) (context, diagnostic);\n   pp_output_formatted_text (context->printer);\n+  if (context->show_cwe)\n+    print_any_cwe (context, diagnostic);\n   if (context->show_option_requested)\n     print_option_information (context, diagnostic, orig_diag_kind);\n   (*diagnostic_finalizer (context)) (context, diagnostic, orig_diag_kind);\n@@ -1183,8 +1231,8 @@ diagnostic_append_note (diagnostic_context *context,\n    permerror, error, error_at, error_at, sorry, fatal_error, internal_error,\n    and internal_error_no_backtrace, as documented and defined below.  */\n static bool\n-diagnostic_impl (rich_location *richloc, int opt,\n-\t\t const char *gmsgid,\n+diagnostic_impl (rich_location *richloc, const diagnostic_metadata *metadata,\n+\t\t int opt, const char *gmsgid,\n \t\t va_list *ap, diagnostic_t kind)\n {\n   diagnostic_info diagnostic;\n@@ -1200,13 +1248,15 @@ diagnostic_impl (rich_location *richloc, int opt,\n       if (kind == DK_WARNING || kind == DK_PEDWARN)\n \tdiagnostic.option_index = opt;\n     }\n+  diagnostic.metadata = metadata;\n   return diagnostic_report_diagnostic (global_dc, &diagnostic);\n }\n \n /* Implement inform_n, warning_n, and error_n, as documented and\n    defined below.  */\n static bool\n-diagnostic_n_impl (rich_location *richloc, int opt, unsigned HOST_WIDE_INT n,\n+diagnostic_n_impl (rich_location *richloc, const diagnostic_metadata *metadata,\n+\t\t   int opt, unsigned HOST_WIDE_INT n,\n \t\t   const char *singular_gmsgid,\n \t\t   const char *plural_gmsgid,\n \t\t   va_list *ap, diagnostic_t kind)\n@@ -1226,6 +1276,7 @@ diagnostic_n_impl (rich_location *richloc, int opt, unsigned HOST_WIDE_INT n,\n   diagnostic_set_info_translated (&diagnostic, text, ap, richloc, kind);\n   if (kind == DK_WARNING)\n     diagnostic.option_index = opt;\n+  diagnostic.metadata = metadata;\n   return diagnostic_report_diagnostic (global_dc, &diagnostic);\n }\n \n@@ -1239,7 +1290,7 @@ emit_diagnostic (diagnostic_t kind, location_t location, int opt,\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, location);\n-  bool ret = diagnostic_impl (&richloc, opt, gmsgid, &ap, kind);\n+  bool ret = diagnostic_impl (&richloc, NULL, opt, gmsgid, &ap, kind);\n   va_end (ap);\n   return ret;\n }\n@@ -1253,7 +1304,7 @@ emit_diagnostic (diagnostic_t kind, rich_location *richloc, int opt,\n   auto_diagnostic_group d;\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool ret = diagnostic_impl (richloc, opt, gmsgid, &ap, kind);\n+  bool ret = diagnostic_impl (richloc, NULL, opt, gmsgid, &ap, kind);\n   va_end (ap);\n   return ret;\n }\n@@ -1265,7 +1316,18 @@ emit_diagnostic_valist (diagnostic_t kind, location_t location, int opt,\n \t\t\tconst char *gmsgid, va_list *ap)\n {\n   rich_location richloc (line_table, location);\n-  return diagnostic_impl (&richloc, opt, gmsgid, ap, kind);\n+  return diagnostic_impl (&richloc, NULL, opt, gmsgid, ap, kind);\n+}\n+\n+/* Wrapper around diagnostic_impl taking a va_list parameter.  */\n+\n+bool\n+emit_diagnostic_valist (diagnostic_t kind, rich_location *richloc,\n+\t\t\tconst diagnostic_metadata *metadata,\n+\t\t\tint opt,\n+\t\t\tconst char *gmsgid, va_list *ap)\n+{\n+  return diagnostic_impl (richloc, metadata, opt, gmsgid, ap, kind);\n }\n \n /* An informative note at LOCATION.  Use this for additional details on an error\n@@ -1277,7 +1339,7 @@ inform (location_t location, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, location);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_NOTE);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_NOTE);\n   va_end (ap);\n }\n \n@@ -1290,7 +1352,7 @@ inform (rich_location *richloc, const char *gmsgid, ...)\n   auto_diagnostic_group d;\n   va_list ap;\n   va_start (ap, gmsgid);\n-  diagnostic_impl (richloc, -1, gmsgid, &ap, DK_NOTE);\n+  diagnostic_impl (richloc, NULL, -1, gmsgid, &ap, DK_NOTE);\n   va_end (ap);\n }\n \n@@ -1304,7 +1366,7 @@ inform_n (location_t location, unsigned HOST_WIDE_INT n,\n   va_start (ap, plural_gmsgid);\n   auto_diagnostic_group d;\n   rich_location richloc (line_table, location);\n-  diagnostic_n_impl (&richloc, -1, n, singular_gmsgid, plural_gmsgid,\n+  diagnostic_n_impl (&richloc, NULL, -1, n, singular_gmsgid, plural_gmsgid,\n \t\t     &ap, DK_NOTE);\n   va_end (ap);\n }\n@@ -1319,7 +1381,7 @@ warning (int opt, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, input_location);\n-  bool ret = diagnostic_impl (&richloc, opt, gmsgid, &ap, DK_WARNING);\n+  bool ret = diagnostic_impl (&richloc, NULL, opt, gmsgid, &ap, DK_WARNING);\n   va_end (ap);\n   return ret;\n }\n@@ -1335,7 +1397,7 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, location);\n-  bool ret = diagnostic_impl (&richloc, opt, gmsgid, &ap, DK_WARNING);\n+  bool ret = diagnostic_impl (&richloc, NULL, opt, gmsgid, &ap, DK_WARNING);\n   va_end (ap);\n   return ret;\n }\n@@ -1350,7 +1412,25 @@ warning_at (rich_location *richloc, int opt, const char *gmsgid, ...)\n   auto_diagnostic_group d;\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool ret = diagnostic_impl (richloc, opt, gmsgid, &ap, DK_WARNING);\n+  bool ret = diagnostic_impl (richloc, NULL, opt, gmsgid, &ap, DK_WARNING);\n+  va_end (ap);\n+  return ret;\n+}\n+\n+/* Same as \"warning at\" above, but using METADATA.  */\n+\n+bool\n+warning_at (rich_location *richloc, const diagnostic_metadata &metadata,\n+\t    int opt, const char *gmsgid, ...)\n+{\n+  gcc_assert (richloc);\n+\n+  auto_diagnostic_group d;\n+  va_list ap;\n+  va_start (ap, gmsgid);\n+  bool ret\n+    = diagnostic_impl (richloc, &metadata, opt, gmsgid, &ap,\n+\t\t       DK_WARNING);\n   va_end (ap);\n   return ret;\n }\n@@ -1366,7 +1446,7 @@ warning_n (rich_location *richloc, int opt, unsigned HOST_WIDE_INT n,\n   auto_diagnostic_group d;\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n-  bool ret = diagnostic_n_impl (richloc, opt, n,\n+  bool ret = diagnostic_n_impl (richloc, NULL, opt, n,\n \t\t\t\tsingular_gmsgid, plural_gmsgid,\n \t\t\t\t&ap, DK_WARNING);\n   va_end (ap);\n@@ -1385,7 +1465,7 @@ warning_n (location_t location, int opt, unsigned HOST_WIDE_INT n,\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n   rich_location richloc (line_table, location);\n-  bool ret = diagnostic_n_impl (&richloc, opt, n,\n+  bool ret = diagnostic_n_impl (&richloc, NULL, opt, n,\n \t\t\t\tsingular_gmsgid, plural_gmsgid,\n \t\t\t\t&ap, DK_WARNING);\n   va_end (ap);\n@@ -1412,7 +1492,7 @@ pedwarn (location_t location, int opt, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, location);\n-  bool ret = diagnostic_impl (&richloc, opt, gmsgid, &ap, DK_PEDWARN);\n+  bool ret = diagnostic_impl (&richloc, NULL, opt, gmsgid, &ap, DK_PEDWARN);\n   va_end (ap);\n   return ret;\n }\n@@ -1427,7 +1507,7 @@ pedwarn (rich_location *richloc, int opt, const char *gmsgid, ...)\n   auto_diagnostic_group d;\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool ret = diagnostic_impl (richloc, opt, gmsgid, &ap, DK_PEDWARN);\n+  bool ret = diagnostic_impl (richloc, NULL, opt, gmsgid, &ap, DK_PEDWARN);\n   va_end (ap);\n   return ret;\n }\n@@ -1446,7 +1526,7 @@ permerror (location_t location, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, location);\n-  bool ret = diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_PERMERROR);\n+  bool ret = diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_PERMERROR);\n   va_end (ap);\n   return ret;\n }\n@@ -1461,7 +1541,7 @@ permerror (rich_location *richloc, const char *gmsgid, ...)\n   auto_diagnostic_group d;\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool ret = diagnostic_impl (richloc, -1, gmsgid, &ap, DK_PERMERROR);\n+  bool ret = diagnostic_impl (richloc, NULL, -1, gmsgid, &ap, DK_PERMERROR);\n   va_end (ap);\n   return ret;\n }\n@@ -1475,7 +1555,7 @@ error (const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, input_location);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_ERROR);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_ERROR);\n   va_end (ap);\n }\n \n@@ -1489,7 +1569,7 @@ error_n (location_t location, unsigned HOST_WIDE_INT n,\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n   rich_location richloc (line_table, location);\n-  diagnostic_n_impl (&richloc, -1, n, singular_gmsgid, plural_gmsgid,\n+  diagnostic_n_impl (&richloc, NULL, -1, n, singular_gmsgid, plural_gmsgid,\n \t\t     &ap, DK_ERROR);\n   va_end (ap);\n }\n@@ -1502,7 +1582,7 @@ error_at (location_t loc, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, loc);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_ERROR);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_ERROR);\n   va_end (ap);\n }\n \n@@ -1516,7 +1596,7 @@ error_at (rich_location *richloc, const char *gmsgid, ...)\n   auto_diagnostic_group d;\n   va_list ap;\n   va_start (ap, gmsgid);\n-  diagnostic_impl (richloc, -1, gmsgid, &ap, DK_ERROR);\n+  diagnostic_impl (richloc, NULL, -1, gmsgid, &ap, DK_ERROR);\n   va_end (ap);\n }\n \n@@ -1530,7 +1610,7 @@ sorry (const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, input_location);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_SORRY);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_SORRY);\n   va_end (ap);\n }\n \n@@ -1542,7 +1622,7 @@ sorry_at (location_t loc, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, loc);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_SORRY);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_SORRY);\n   va_end (ap);\n }\n \n@@ -1564,7 +1644,7 @@ fatal_error (location_t loc, const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, loc);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_FATAL);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_FATAL);\n   va_end (ap);\n \n   gcc_unreachable ();\n@@ -1581,7 +1661,7 @@ internal_error (const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, input_location);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_ICE);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_ICE);\n   va_end (ap);\n \n   gcc_unreachable ();\n@@ -1597,7 +1677,7 @@ internal_error_no_backtrace (const char *gmsgid, ...)\n   va_list ap;\n   va_start (ap, gmsgid);\n   rich_location richloc (line_table, input_location);\n-  diagnostic_impl (&richloc, -1, gmsgid, &ap, DK_ICE_NOBT);\n+  diagnostic_impl (&richloc, NULL, -1, gmsgid, &ap, DK_ICE_NOBT);\n   va_end (ap);\n \n   gcc_unreachable ();"}, {"sha": "3a49c99e3af9e24262fd9d5094669c1a5b1b2ffd", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -46,6 +46,10 @@ struct diagnostic_info\n   /* The location at which the diagnostic is to be reported.  */\n   rich_location *richloc;\n \n+  /* An optional bundle of metadata associated with the diagnostic\n+     (or NULL).  */\n+  const diagnostic_metadata *metadata;\n+\n   /* Auxiliary data for client.  */\n   void *x_data;\n   /* The kind of diagnostic it is about.  */\n@@ -126,6 +130,10 @@ struct diagnostic_context\n   /* Character used for caret diagnostics.  */\n   char caret_chars[rich_location::STATICALLY_ALLOCATED_RANGES];\n \n+  /* True if we should print any CWE identifiers associated with\n+     diagnostics.  */\n+  bool show_cwe;\n+\n   /* True if we should print the command line option which controls\n      each diagnostic, if known.  */\n   bool show_option_requested;"}, {"sha": "8c3446e31bb2e597bd3ba01278f7a3d50f86e5ea", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -277,6 +277,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdiagnostics-format=@r{[}text@r{|}json@r{]}  @gol\n -fno-diagnostics-show-option  -fno-diagnostics-show-caret @gol\n -fno-diagnostics-show-labels  -fno-diagnostics-show-line-numbers @gol\n+-fno-diagnostics-show-cwe  @gol\n -fdiagnostics-minimum-margin-width=@var{width} @gol\n -fdiagnostics-parseable-fixits  -fdiagnostics-generate-patch @gol\n -fdiagnostics-show-template-tree  -fno-elide-type @gol\n@@ -4005,6 +4006,15 @@ as the types of expressions:\n This option suppresses the printing of these labels (in the example above,\n the vertical bars and the ``char *'' and ``long int'' text).\n \n+@item -fno-diagnostics-show-cwe\n+@opindex fno-diagnostics-show-cwe\n+@opindex fdiagnostics-show-cwe\n+Diagnostic messages can optionally have an associated\n+@url{https://cwe.mitre.org/index.html, CWE} identifier.\n+GCC itself does not do this for any of its diagnostics, but plugins may do so.\n+By default, if this information is present, it will be printed with\n+the diagnostic.  This option suppresses the printing of this metadata.\n+\n @item -fno-diagnostics-show-line-numbers\n @opindex fno-diagnostics-show-line-numbers\n @opindex fdiagnostics-show-line-numbers"}, {"sha": "d4a98c8d9423d325edf5c3d4c81c639cf99ab7d4", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -2407,6 +2407,10 @@ common_handle_option (struct gcc_options *opts,\n       dc->parseable_fixits_p = value;\n       break;\n \n+    case OPT_fdiagnostics_show_cwe:\n+      dc->show_cwe = value;\n+      break;\n+\n     case OPT_fdiagnostics_show_option:\n       dc->show_option_requested = value;\n       break;"}, {"sha": "18b4ba31348e0fc7c480cdb904778ae0ba520e8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -1,3 +1,9 @@\n+2019-12-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-metadata.c: New test.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_metadata.c: New test plugin.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add them.\n+\n 2019-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/92977"}, {"sha": "d2babd357539a50e97364fb95ed2fb7967f5cef9", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-metadata.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-metadata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-metadata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-metadata.c?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+extern char *gets (char *s);\n+\n+void test_cwe (void)\n+{\n+  char buf[1024];\n+  gets (buf); /* { dg-warning \"never use 'gets' \\\\\\[CWE-242\\\\\\]\" } */\n+}"}, {"sha": "5e58115afba1b8375b4d24360b08fe717a5da29f", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_metadata.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -0,0 +1,140 @@\n+/* This plugin exercises diagnostic_metadata.  */\n+\n+#include \"gcc-plugin.h\"\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"toplev.h\"\n+#include \"basic-block.h\"\n+#include \"hash-table.h\"\n+#include \"vec.h\"\n+#include \"ggc.h\"\n+#include \"basic-block.h\"\n+#include \"tree-ssa-alias.h\"\n+#include \"internal-fn.h\"\n+#include \"gimple-fold.h\"\n+#include \"tree-eh.h\"\n+#include \"gimple-expr.h\"\n+#include \"is-a.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"tree.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+#include \"plugin-version.h\"\n+#include \"diagnostic.h\"\n+#include \"context.h\"\n+#include \"gcc-rich-location.h\"\n+#include \"diagnostic-metadata.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+const pass_data pass_data_test_metadata =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"test_metadata\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_ssa, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_test_metadata : public gimple_opt_pass\n+{\n+public:\n+  pass_test_metadata(gcc::context *ctxt)\n+    : gimple_opt_pass(pass_data_test_metadata, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  bool gate (function *) { return true; }\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_test_metadata\n+\n+/* Determine if STMT is a call with NUM_ARGS arguments to a function\n+   named FUNCNAME.\n+   If so, return STMT as a gcall *.  Otherwise return NULL.  */\n+\n+static gcall *\n+check_for_named_call (gimple *stmt,\n+\t\t      const char *funcname, unsigned int num_args)\n+{\n+  gcc_assert (funcname);\n+\n+  gcall *call = dyn_cast <gcall *> (stmt);\n+  if (!call)\n+    return NULL;\n+\n+  tree fndecl = gimple_call_fndecl (call);\n+  if (!fndecl)\n+    return NULL;\n+\n+  if (strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)), funcname))\n+    return NULL;\n+\n+  if (gimple_call_num_args (call) != num_args)\n+    {\n+      error_at (stmt->location, \"expected number of args: %i (got %i)\",\n+\t\tnum_args, gimple_call_num_args (call));\n+      return NULL;\n+    }\n+\n+  return call;\n+}\n+\n+/* Exercise diagnostic_metadata.  */\n+\n+unsigned int\n+pass_test_metadata::execute (function *fun)\n+{\n+  gimple_stmt_iterator gsi;\n+  basic_block bb;\n+\n+  FOR_EACH_BB_FN (bb, fun)\n+    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+      {\n+\tgimple *stmt = gsi_stmt (gsi);\n+\n+\t/* Example of CWE: complain about uses of gets.  */\n+\tif (gcall *call = check_for_named_call (stmt, \"gets\", 1))\n+\t  {\n+\t    gcc_rich_location richloc (gimple_location (call));\n+\t    /* CWE-242: Use of Inherently Dangerous Function.  */\n+\t    diagnostic_metadata m;\n+\t    m.add_cwe (242);\n+\t    warning_at (&richloc, m, 0,\n+\t\t\t\"never use %qs\", \"gets\");\n+\t  }\n+      }\n+\n+  return 0;\n+}\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+\t     struct plugin_gcc_version *version)\n+{\n+  struct register_pass_info pass_info;\n+  const char *plugin_name = plugin_info->base_name;\n+  int argc = plugin_info->argc;\n+  struct plugin_argument *argv = plugin_info->argv;\n+\n+  if (!plugin_default_version_check (version, &gcc_version))\n+    return 1;\n+\n+  pass_info.pass = new pass_test_metadata (g);\n+  pass_info.reference_pass_name = \"ssa\";\n+  pass_info.ref_pass_instance_number = 1;\n+  pass_info.pos_op = PASS_POS_INSERT_AFTER;\n+  register_callback (plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL,\n+\t\t     &pass_info);\n+\n+  return 0;\n+}"}, {"sha": "439fbd7224f91c14daf8643b20d71d25c5950d76", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -94,6 +94,7 @@ set plugin_test_list [list \\\n \t  diagnostic-test-inlining-2.c \\\n \t  diagnostic-test-inlining-3.c \\\n \t  diagnostic-test-inlining-4.c } \\\n+    { diagnostic_plugin_test_metadata.c diagnostic-test-metadata.c } \\\n     { location_overflow_plugin.c \\\n \t  location-overflow-test-1.c \\\n \t  location-overflow-test-2.c \\"}, {"sha": "6f5b53aaac2816859a3053cc6a7f09f27703c4d2", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6d4a35ca57b1af5a7a97faedb8a17c0a00890ce4", "patch": "@@ -1179,6 +1179,8 @@ general_init (const char *argv0, bool init_signals)\n     = global_options_init.x_flag_diagnostics_show_labels;\n   global_dc->show_line_numbers_p\n     = global_options_init.x_flag_diagnostics_show_line_numbers;\n+  global_dc->show_cwe\n+    = global_options_init.x_flag_diagnostics_show_cwe;\n   global_dc->show_option_requested\n     = global_options_init.x_flag_diagnostics_show_option;\n   global_dc->min_margin_width"}]}