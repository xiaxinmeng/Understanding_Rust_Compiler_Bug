{"sha": "f071aaca7e9372ecaff4835bea8c39d58d29a0e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3MWFhY2E3ZTkzNzJlY2FmZjQ4MzViZWE4YzM5ZDU4ZDI5YTBlNQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2009-09-02T15:33:29Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2009-09-02T15:33:29Z"}, "message": "(Reflect changes from binutils):\n\n2009-09-02  Tristan Gingold  <gingold@adacore.com>\n\n\t* vmsbuild.com: Removed as unused and superceeded by makefile.vms.\n\t* makefile.vms: Ported to Itanium VMS.  Remove useless targets and\n\tdependencies.  Remove unused FORMAT variable.\n\t* configure.com: New file to create build.com DCL script for\n\tItanium VMS or Alpha VMS.\n\nFrom-SVN: r151333", "tree": {"sha": "76e6cf13e06bd314386238fdf27db76ff6b98e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e6cf13e06bd314386238fdf27db76ff6b98e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f071aaca7e9372ecaff4835bea8c39d58d29a0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f071aaca7e9372ecaff4835bea8c39d58d29a0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f071aaca7e9372ecaff4835bea8c39d58d29a0e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f071aaca7e9372ecaff4835bea8c39d58d29a0e5/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75cb00577b3050a6eb4356ef612a169da7b7ed25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cb00577b3050a6eb4356ef612a169da7b7ed25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cb00577b3050a6eb4356ef612a169da7b7ed25"}], "stats": {"total": 221, "additions": 49, "deletions": 172}, "files": [{"sha": "be981b8389ad0029075326ea86b66ffc3db9bfdb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f071aaca7e9372ecaff4835bea8c39d58d29a0e5/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f071aaca7e9372ecaff4835bea8c39d58d29a0e5/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f071aaca7e9372ecaff4835bea8c39d58d29a0e5", "patch": "@@ -1,3 +1,11 @@\n+2009-09-02  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* vmsbuild.com: Removed as unused and superceeded by makefile.vms.\n+\t* makefile.vms: Ported to Itanium VMS.  Remove useless targets and\n+\tdependencies.  Remove unused FORMAT variable.\n+\t* configure.com: New file to create build.com DCL script for\n+\tItanium VMS or Alpha VMS.\n+\n 2009-08-24  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure.ac (AC_PREREQ): Bump to 2.64."}, {"sha": "030182914f74de464969f3c60e99f444f7ed95c3", "filename": "libiberty/configure.com", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f071aaca7e9372ecaff4835bea8c39d58d29a0e5/libiberty%2Fconfigure.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f071aaca7e9372ecaff4835bea8c39d58d29a0e5/libiberty%2Fconfigure.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.com?ref=f071aaca7e9372ecaff4835bea8c39d58d29a0e5", "patch": "@@ -0,0 +1,38 @@\n+$!\n+$! This file configures the libiberty library for use with openVMS.\n+$!\n+$! We do not use the configure script, since we do not have /bin/sh\n+$! to execute it.\n+$!\n+$! Written by Tristan Gingold (gingold@adacore.com)\n+$!\n+$!\n+$!\n+$ copy config.h-vms config.h\n+$!\n+$ write sys$output \"Generate libiberty build.com\"\n+$!\n+$ create build.com\n+$DECK\n+$ FILES=\"getopt,obstack,xexit,xmalloc,hex,getopt1,cplus-dem,cp-demangle,\"+-\n+    \"cp-demint,asprintf,vasprintf,mkstemps,concat,getruntime,getpagesize,\"+-\n+    \"getpwd,xstrerror,xmemdup,xstrdup,xatexit,choose-temp,fnmatch,objalloc,\"+-\n+    \"safe-ctype,hashtab,lbasename,argv,lrealpath,make-temp-file,\"+-\n+    \"stpcpy,unlink-if-ordinary\"\n+$ OPT=\"/noopt/debug/warnings=disable=(missingreturn)\"\n+$ CFLAGS=OPT + \"/include=([],[-.include])/name=(as_is,shortened)\" +-\n+ \"/define=(HAVE_CONFIG_H=1)\" +-\n+ \"/prefix=(all,exc=(\"\"getopt\"\",\"\"optarg\"\",\"\"optopt\"\",\"\"optind\"\",\"\"opterr\"\"))\"\n+$ write sys$output \"CFLAGS=\",CFLAGS\n+$ NUM = 0\n+$ LOOP:\n+$   F = F$ELEMENT(NUM,\",\",FILES)\n+$   IF F.EQS.\",\" THEN GOTO END\n+$   write sys$output \"Compiling \", F, \".c\"\n+$   cc 'CFLAGS 'F.c\n+$   NUM = NUM + 1\n+$   GOTO LOOP\n+$ END:\n+$ purge\n+$ lib/create libiberty 'FILES\n+$EOD"}, {"sha": "d69d7d9efa2e1298bac3aea575ac99c3c889b0a1", "filename": "libiberty/makefile.vms", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f071aaca7e9372ecaff4835bea8c39d58d29a0e5/libiberty%2Fmakefile.vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f071aaca7e9372ecaff4835bea8c39d58d29a0e5/libiberty%2Fmakefile.vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmakefile.vms?ref=f071aaca7e9372ecaff4835bea8c39d58d29a0e5", "patch": "@@ -1,5 +1,5 @@\n #\n-# Makefile for libiberty under openVMS/Alpha\n+# Makefile for libiberty under openVMS\n #\n # For use with gnu-make for vms\n #\n@@ -13,7 +13,7 @@ OBJS=getopt.obj,obstack.obj,xexit.obj,xmalloc.obj,hex.obj,\\\n     concat.obj,getruntime.obj,getpagesize.obj,getpwd.obj,xstrerror.obj,\\\n     xmemdup.obj,xstrdup.obj,xatexit.obj,choose-temp.obj,fnmatch.obj,\\\n     objalloc.obj,safe-ctype.obj,hashtab.obj,lbasename.obj,argv.obj,\\\n-    lrealpath.obj,make-temp-file.obj,unlink-if-ordinary.obj\n+    lrealpath.obj,make-temp-file.obj,stpcpy.obj,unlink-if-ordinary.obj\n \n ifeq ($(CC),gcc)\n CFLAGS=/include=([],[-.include])\n@@ -25,15 +25,11 @@ CFLAGS=$(OPT)/include=([],[-.include])/name=(as_is,shortened)\\\n  /prefix=(all,except=(\"getopt\",\"optarg\",\"optopt\",\"optind\",\"opterr\"))\n endif\n \n-libiberty.olb: config.h $(OBJS)\n+libiberty.olb: $(OBJS)\n \tpurge\n \tlib/create libiberty *.obj\n \n-config.h: config.h-vms\n-\t$(CP) $< $@\n-\n clean:\n \t$$ purge\n-\t$(RM) config.h;\n \t$(RM) *.obj;\n \t$(RM) libiberty.olb;"}, {"sha": "497ea8974f2b9f013f2c0182d73f0cd0a9335454", "filename": "libiberty/vmsbuild.com", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cb00577b3050a6eb4356ef612a169da7b7ed25/libiberty%2Fvmsbuild.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cb00577b3050a6eb4356ef612a169da7b7ed25/libiberty%2Fvmsbuild.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvmsbuild.com?ref=75cb00577b3050a6eb4356ef612a169da7b7ed25", "patch": "@@ -1,165 +0,0 @@\n-$! libiberty/vmsbuild.com -- build liberty.olb for VMS host, VMS target\n-$!\n-$ CC\t= \"gcc /noVerbose/Debug/Incl=([],[-.include])\"\n-$ LIBR\t= \"library /Obj\"\n-$ LINK\t= \"link\"\n-$ DELETE= \"delete /noConfirm\"\n-$ SEARCH= \"search /Exact\"\n-$ ECHO\t= \"write sys$output\"\n-$ ABORT\t= \"exit %x002C\"\n-$!\n-$ LIB_NAME = \"liberty.olb\"\t!this is what we're going to construct\n-$ WORK_LIB = \"new-lib.olb\"\t!used to guard against an incomplete build\n-$\n-$! manually copied from Makefile.in\n-$ REQUIRED_OFILES = \"argv.o basename.o choose-temp.o concat.o cplus-dem.o \"-\n-\t+ \"fdmatch.o fnmatch.o getopt.o getopt1.o getruntime.o hex.o \"-\n-\t+ \"floatformat.o objalloc.o obstack.o spaces.o strerror.o strsignal.o \"-\n-\t+ \"xatexit.o xexit.o xmalloc.o xmemdup.o xstrdup.o xstrerror.o\"\n-$! anything not caught by link+search of dummy.* should be added here\n-$ EXTRA_OFILES = \"\"\n-$!\n-$! move to the directory which contains this command procedure\n-$ old_dir = f$environ(\"DEFAULT\")\n-$ new_dir = f$parse(\"_._;\",f$environ(\"PROCEDURE\")) - \"_._;\"\n-$ set default 'new_dir'\n-$\n-$ ECHO \"Starting libiberty build...\"\n-$ create config.h\n-/* libiberty config.h for VMS */\n-#define NEED_sys_siglist\n-#define NEED_strsignal\n-#define NEED_psignal\n-#define NEED_basename\n-$ LIBR 'WORK_LIB' /Create\n-$\n-$! first pass: compile \"required\" modules\n-$ ofiles = REQUIRED_OFILES + \" \" + EXTRA_OFILES\n-$ pass = 1\n-$ gosub do_ofiles\n-$\n-$! second pass: process dummy.c, using the first pass' results\n-$ ECHO \" now checking run-time library for missing functionality\"\n-$ if f$search(\"dummy.obj\").nes.\"\" then  DELETE dummy.obj;*\n-$ define/noLog sys$error _NL:\t!can't use /User_Mode here due to gcc\n-$ define/noLog sys$output _NL:\t! driver's use of multiple image activation\n-$ on error then continue\n-$ 'CC' dummy.c\n-$ deassign sys$error   !restore, more or less\n-$ deassign sys$output\n-$ if f$search(\"dummy.obj\").eqs.\"\" then  goto pass2_failure1\n-$! link dummy.obj, capturing full linker feedback in dummy.map\n-$ oldmsg = f$environ(\"MESSAGE\")\n-$ set message /Facility/Severity/Identification/Text\n-$ define/User sys$output _NL:\n-$ define/User sys$error _NL:\n-$ LINK/Map=dummy.map/noExe dummy.obj,'WORK_LIB'/Libr,-\n-\tgnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\n-$ set message 'oldmsg'\n-$ if f$search(\"dummy.map\").eqs.\"\" then  goto pass2_failure2\n-$ DELETE dummy.obj;*\n-$ SEARCH dummy.map \"%LINK-I-UDFSYM\" /Output=dummy.list\n-$ DELETE dummy.map;*\n-$ ECHO \" check completed\"\n-$! we now have a file with one entry per line of unresolvable symbols\n-$ ofiles = \"\"\n-$ if f$trnlnm(\"IFILE$\").nes.\"\" then  close/noLog ifile$\n-$\topen/Read ifile$ dummy.list\n-$iloop: read/End=idone ifile$ iline\n-$\tiline = f$edit(iline,\"COMPRESS,TRIM,LOWERCASE\")\n-$\tofiles = ofiles + \" \" + f$element(1,\" \",iline) + \".o\"\n-$\tgoto iloop\n-$idone: close ifile$\n-$ DELETE dummy.list;*\n-$ on error then ABORT\n-$\n-$! third pass: compile \"missing\" modules collected in pass 2\n-$ pass = 3\n-$ gosub do_ofiles\n-$\n-$! finish up\n-$ LIBR 'WORK_LIB' /Compress /Output='LIB_NAME'\t!new-lib.olb -> liberty.olb\n-$ DELETE 'WORK_LIB';*\n-$\n-$! all done\n-$ ECHO \"Completed libiberty build.\"\n-$ type sys$input:\n-\n-  You many wish to do\n-  $ COPY LIBERTY.OLB GNU_CC:[000000]\n-  so that this run-time library resides in the same location as gcc's\n-  support library.  When building gas, be sure to leave the original\n-  copy of liberty.olb here so that gas's build procedure can find it.\n-\n-$ set default 'old_dir'\n-$ exit\n-$\n-$!\n-$! compile each element of the space-delimited list 'ofiles'\n-$!\n-$do_ofiles:\n-$ ofiles = f$edit(ofiles,\"COMPRESS,TRIM\")\n-$ i = 0\n-$oloop:\n-$ f = f$element(i,\" \",ofiles)\n-$ if f.eqs.\" \" then  goto odone\n-$ f = f - \".o\"\t!strip dummy suffix\n-$ ECHO \"  ''f'\"\n-$ skip_f = 0\n-$ if pass.eq.3 .and. f$search(\"''f'.c\").eqs.\"\" then  gosub chk_deffunc\n-$ if .not.skip_f\n-$ then\n-$   'CC' 'f'.c\n-$   LIBR 'WORK_LIB' 'f'.obj /Insert\n-$   DELETE 'f'.obj;*\n-$ endif\n-$ i = i + 1\n-$ goto oloop\n-$odone:\n-$ return\n-$\n-$!\n-$! check functions.def for a DEFFUNC() entry corresponding to missing file 'f'.c\n-$!\n-$chk_deffunc:\n-$ define/User sys$output _NL:\n-$ define/User sys$error _NL:\n-$ SEARCH functions.def \"DEFFUNC\",\"''f'\" /Match=AND\n-$ if (($status.and.%x7FFFFFFF) .eq. 1)\n-$ then\n-$   skip_f = 1\n-$   open/Append config_h config.h\n-$   write config_h \"#define NEED_''f'\"\n-$   close config_h\n-$ endif\n-$ return\n-$\n-$!\n-$pass2_failure1:\n-$! if we reach here, dummy.c failed to compile and we're really stuck\n-$ type sys$input:\n-\n-  Cannot compile the library contents checker (dummy.c + functions.def),\n-  so cannot continue!\n-\n-$! attempt the compile again, without suppressing diagnostic messages this time\n-$ on error then ABORT +0*f$verify(v)\n-$ v = f$verify(1)\n-$ 'CC' dummy.c\n-$ ABORT +0*f$verify(v)\t!'f$verify(0)'\n-$!\n-$pass2_failure2:\n-$! should never reach here..\n-$ type sys$input:\n-\n-  Cannot link the library contents checker (dummy.obj), so cannot continue!\n-\n-$! attempt the link again, without suppressing diagnostic messages this time\n-$ on error then ABORT +0*f$verify(v)\n-$ v = f$verify(1)\n-$ LINK/Map=dummy.map/noExe dummy.obj,'WORK_LIB'/Libr,-\n-\tgnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\n-$ ABORT +0*f$verify(v)\t!'f$verify(0)'\n-$\n-$! not reached\n-$ exit"}]}