{"sha": "1c4c47db1846bb0f088817dda89a7c500438d662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0YzQ3ZGIxODQ2YmIwZjA4ODgxN2RkYTg5YTdjNTAwNDM4ZDY2Mg==", "commit": {"author": {"name": "Jeffrey Oldham", "email": "oldham@codesourcery.com", "date": "2001-05-01T18:51:06Z"}, "committer": {"name": "Jeffrey D. Oldham", "email": "oldham@gcc.gnu.org", "date": "2001-05-01T18:51:06Z"}, "message": "invoke.texi (Optimize Options): Add documentation for `--param max-delay-slot-insn-search' and `--param...\n\n2001-05-01  Jeffrey Oldham  <oldham@codesourcery.com>\n\n\t* invoke.texi (Optimize Options): Add documentation for `--param\n\tmax-delay-slot-insn-search' and `--param\n\tmax-delay-slot-live-search' and reorder --param section.\n\t* params.def: Modify initial comment.\n\t* params.h (param_info): Add `help' member.\n\t* toplev.c (lang_independent_params): Include `help' description.\n\t(display_help): Print --param parameters.\n\nFrom-SVN: r41734", "tree": {"sha": "cb88f1e6ef61a33e619f4dd738d64d320d45f6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb88f1e6ef61a33e619f4dd738d64d320d45f6e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c4c47db1846bb0f088817dda89a7c500438d662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4c47db1846bb0f088817dda89a7c500438d662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4c47db1846bb0f088817dda89a7c500438d662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4c47db1846bb0f088817dda89a7c500438d662/comments", "author": null, "committer": null, "parents": [{"sha": "e529c2c1c3de474630b49a9cd04fbcbebc07dc40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e529c2c1c3de474630b49a9cd04fbcbebc07dc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e529c2c1c3de474630b49a9cd04fbcbebc07dc40"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "bf2ef2ce4c2bc47ff46c8f0d470666c5ae42d532", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c4c47db1846bb0f088817dda89a7c500438d662", "patch": "@@ -1,3 +1,13 @@\n+2001-05-01  Jeffrey Oldham  <oldham@codesourcery.com>\n+\n+\t* invoke.texi (Optimize Options): Add documentation for `--param\n+\tmax-delay-slot-insn-search' and `--param\n+\tmax-delay-slot-live-search' and reorder --param section.\n+\t* params.def: Modify initial comment.\n+\t* params.h (param_info): Add `help' member.\n+\t* toplev.c (lang_independent_params): Include `help' description.\n+\t(display_help): Print --param parameters.\n+\n 2001-05-01  Zack Weinberg  <zackw@stanford.edu>\n \n \t* config.gcc: Don't default xmake_file to ${cpu_type}/x-${cpu_type}."}, {"sha": "b006ef954d7ef49f7e4c442cd1fba30a41fbd50a", "filename": "gcc/invoke.texi", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=1c4c47db1846bb0f088817dda89a7c500438d662", "patch": "@@ -3436,18 +3436,34 @@ In each case, the @var{value} is a integer.  The allowable choices for\n @var{name} are given in the following table:\n \n @table @gcctabopt\n-@item max-inline-insns\n-If an function contains more than this many instructions, it\n-will not be inlined.  This option is precisely equivalent to\n-@samp{-finline-limit}.\n+@item max-delay-slot-insn-search\n+The maximum number of instructions to consider when looking for an\n+instruction to fill a delay slot.  If more than this arbitrary number of\n+instructions is searched, the time savings from filling the delay slot\n+will be minimal so stop searching.  Increasing values mean more\n+aggressive optimization, making the compile time increase with probably\n+small improvement in executable run time.\n+\n+@item max-delay-slot-live-search\n+When trying to fill delay slots, the maximum number of instructions to\n+consider when searching for a block with valid live register\n+information.  Increasing this arbitrarily chosen value means more\n+aggressive optimization, increasing the compile time.  This parameter\n+should be removed when the delay slot code is rewritten to maintain the\n+control-flow graph.\n \n @item max-gcse-memory\n The approximate maximum amount of memory that will be allocated in\n order to perform the global common subexpression elimination\n optimization.  If more memory than specified is required, the\n optimization will not be done.\n-@end table\n \n+@item max-inline-insns\n+If an function contains more than this many instructions, it\n+will not be inlined.  This option is precisely equivalent to\n+@samp{-finline-limit}.\n+\n+@end table\n @end table\n \n @node Preprocessor Options"}, {"sha": "24b3aa26bb168eb8dd65301300bb5e929b9b2c5b", "filename": "gcc/params.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=1c4c47db1846bb0f088817dda89a7c500438d662", "patch": "@@ -31,7 +31,9 @@ Boston, MA 02111-1307, USA.\n \n      - A help string explaining how the parameter is used.\n \n-     - A default value for the parameter.  */\n+     - A default value for the parameter.\n+\n+   Be sure to add an entry to invoke.texi summarizing the parameter.  */\n \n /* The maximum number of instructions accepted for inlining a\n    function.  Increasing values mean more agressive inlining."}, {"sha": "7fa06ff16dd32c0eac399a1085c6670e2023e920", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=1c4c47db1846bb0f088817dda89a7c500438d662", "patch": "@@ -48,6 +48,8 @@ typedef struct param_info\n   const char *option;\n   /* The associated value.  */\n   int value;\n+  /* A short description of the option.  */\n+   const char *help;\n } param_info;\n \n /* An array containing the compiler parameters and their current"}, {"sha": "14a9fd0603153668802913b7ff055a5bbbaf60eb", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4c47db1846bb0f088817dda89a7c500438d662/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1c4c47db1846bb0f088817dda89a7c500438d662", "patch": "@@ -970,10 +970,10 @@ const char *user_label_prefix;\n \n static const param_info lang_independent_params[] = {\n #define DEFPARAM(ENUM, OPTION, HELP, DEFAULT) \\\n-  { OPTION, DEFAULT },\n+  { OPTION, DEFAULT, HELP },\n #include \"params.def\"\n #undef DEFPARAM\n-  { NULL, 0 }\n+  { NULL, 0, NULL }\n };\n \n /* A default for same.  */\n@@ -3843,7 +3843,17 @@ display_help ()\n \n   printf (_(\"  -O[number]              Set optimisation level to [number]\\n\"));\n   printf (_(\"  -Os                     Optimise for space rather than speed\\n\"));\n-  printf (_(\"  --param <name>=<value>  Set constant controlling optimization\\n\"));\n+  for (i = sizeof (compiler_params); i--;)\n+    {\n+      const char *description = compiler_params[i].help;\n+      const int length = 21-strlen(compiler_params[i].option);\n+\n+      if (description != NULL && * description != 0)\n+\tprintf (\"  --param %s=<value>%.*s%s\\n\",\n+\t\tcompiler_params[i].option,\n+\t\tlength > 0 ? length : 1, \"                     \",\n+\t\tdescription);\n+    }\n   printf (_(\"  -pedantic               Issue warnings needed by strict compliance to ISO C\\n\"));\n   printf (_(\"  -pedantic-errors        Like -pedantic except that errors are produced\\n\"));\n   printf (_(\"  -w                      Suppress warnings\\n\"));"}]}