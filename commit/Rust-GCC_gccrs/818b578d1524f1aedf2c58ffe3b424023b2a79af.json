{"sha": "818b578d1524f1aedf2c58ffe3b424023b2a79af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4YjU3OGQxNTI0ZjFhZWRmMmM1OGZmZTNiNDI0MDIzYjJhNzlhZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:31:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:31:59Z"}, "message": "[multiple changes]\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat1drv.adb: Set Allow_Integer_Address in relaxed semantics mode.\n\t* gnat_rm.texi: Document pragma Allow_Integer_Address.\n\t* gnat_ugn.texi: Document pragma Allow_Integer_Address, -gnates.\n\t* opt.ads: New flag Allow_Integer_Address.\n\t* par-prag.adb: Dummy entry for pragma Allow_Integer_Address.\n\t* sem_ch5.adb: Minor reformatting.\n\t* sem_prag.adb: Implement pragma Allow_Integer_Address.\n\t* sem_res.adb (Resolve): Allow integer address value if\n\tswitch set.\n\t* sem_util.adb: Minor reformatting.\n\t* snames.ads-tmpl: Add entry for pragma Allow_Integer_Address.\n\t* switch-c.adb: Recognize flag -gnates.\n\t* usage.adb: Document flag -gnates.\n\n2014-01-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-tadeca.adb: Fix minor typos in comment.\n\nFrom-SVN: r206825", "tree": {"sha": "2eca1267973fc5219cffbc8fa2bb68b823f62b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eca1267973fc5219cffbc8fa2bb68b823f62b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818b578d1524f1aedf2c58ffe3b424023b2a79af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818b578d1524f1aedf2c58ffe3b424023b2a79af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818b578d1524f1aedf2c58ffe3b424023b2a79af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818b578d1524f1aedf2c58ffe3b424023b2a79af/comments", "author": null, "committer": null, "parents": [{"sha": "c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0"}], "stats": {"total": 145, "additions": 139, "deletions": 6}, "files": [{"sha": "9cba1cd67e9fa9ca48367a259d3ca6a7cf0e5e1f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -1,3 +1,23 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat1drv.adb: Set Allow_Integer_Address in relaxed semantics mode.\n+\t* gnat_rm.texi: Document pragma Allow_Integer_Address.\n+\t* gnat_ugn.texi: Document pragma Allow_Integer_Address, -gnates.\n+\t* opt.ads: New flag Allow_Integer_Address.\n+\t* par-prag.adb: Dummy entry for pragma Allow_Integer_Address.\n+\t* sem_ch5.adb: Minor reformatting.\n+\t* sem_prag.adb: Implement pragma Allow_Integer_Address.\n+\t* sem_res.adb (Resolve): Allow integer address value if\n+\tswitch set.\n+\t* sem_util.adb: Minor reformatting.\n+\t* snames.ads-tmpl: Add entry for pragma Allow_Integer_Address.\n+\t* switch-c.adb: Recognize flag -gnates.\n+\t* usage.adb: Document flag -gnates.\n+\n+2014-01-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-tadeca.adb: Fix minor typos in comment.\n+\n 2014-01-20  Pascal Obry  <obry@adacore.com>\n \n \t* s-win32.ads (FreeLibrary): New import."}, {"sha": "bc1de747dc6eddc99b79cbd8965cfe21ec437d4e", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -293,6 +293,7 @@ procedure Gnat1drv is\n       --  semantics mode.\n \n       if Relaxed_RM_Semantics then\n+         Opt.Allow_Integer_Address := True;\n          Overriding_Renamings := True;\n          Treat_Categorization_Errors_As_Warnings := True;\n       end if;"}, {"sha": "1d2a567f24a393c81defc6e453fad6a6a27e78e4", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -104,6 +104,7 @@ Implementation Defined Pragmas\n * Pragma Ada_2005::\n * Pragma Ada_12::\n * Pragma Ada_2012::\n+* Pragma Allow_Integer_Address::\n * Pragma Annotate::\n * Pragma Assert::\n * Pragma Assert_And_Cut::\n@@ -276,6 +277,7 @@ Implementation Defined Aspects\n * Aspect Abstract_State::\n * Aspect Ada_2005::\n * Aspect Ada_2012::\n+* Pragma Allow_Integer_Address::\n * Aspect Compiler_Unit::\n * Aspect Contract_Cases::\n * Aspect Depends::\n@@ -927,6 +929,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Ada_2005::\n * Pragma Ada_12::\n * Pragma Ada_2012::\n+* Pragma Allow_Integer_Address::\n * Pragma Annotate::\n * Pragma Assert::\n * Pragma Assert_And_Cut::\n@@ -1218,6 +1221,42 @@ pragma Ada_2012;\n This configuration pragma is a synonym for pragma Ada_12 and has the\n same syntax and effect.\n \n+@node Pragma Allow_Integer_Address\n+@unnumberedsec Pragma Allow_Integer_Address\n+@findex Allow_Integer_Address\n+@noindent\n+Syntax:\n+@smallexample @c ada\n+pragma Allow_Integer_Address;\n+@end smallexample\n+\n+@noindent\n+In most versions of GNAT, @code{System.Address} is a private type, which means\n+that integer values are not allowed. If the configuration pragma\n+@code{Allow_Integer_Address} is given, then integer expressions may\n+be used anywhere a value of type @code{System.Address} is required.\n+The effect is to introduce an implicit unchecked conversion from the\n+integer value to type @code{System.Address}. The following example\n+compiles without errors:\n+\n+@smallexample @c ada\n+pragma Allow_Integer_Address;\n+with System; use System;\n+package AddrAsInt is\n+   X : Integer;\n+   Y : Integer;\n+   for X'Address use 16#1240#;\n+   for Y use at 16#3230#;\n+   m : Address := 16#4000#;\n+   n : constant Address := 4000;\n+   p : constant Address := Address (X + Y);\n+   type R is new integer;\n+   RR : R := 1000;\n+   Z : Integer;\n+   for Z'Address use RR;\n+end AddrAsInt;\n+@end smallexample\n+\n @node Pragma Annotate\n @unnumberedsec Pragma Annotate\n @findex Annotate"}, {"sha": "42b858877e39aa68e05a774bd65554d81ed09993", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -3821,9 +3821,16 @@ these errors become warnings (which can be ignored, or suppressed in the usual\n manner). This can be useful in some specialized circumstances such as the\n temporary use of special test software.\n \n+@ifclear vms\n+@item -gnates\n+@cindex @option{-gnates} (@command{gcc})\n+Activates @code{Allow_Integer_Address} mode as though the corresponding\n+configuration pragma was present.\n+@end ifclear\n+\n @item -gnateS\n @cindex @option{-gnateS} (@command{gcc})\n-Synonym of @option{-fdump-scos}, kept for backards compatibility.\n+Synonym of @option{-fdump-scos}, kept for backwards compatibility.\n \n @item -gnatet=@var{path}\n @cindex @option{-gnatet=file} (@command{gcc})\n@@ -11778,6 +11785,7 @@ recognized by GNAT:\n    Ada_2005\n    Ada_12\n    Ada_2012\n+   Allow_Integer_Address\n    Annotate\n    Assertion_Policy\n    Assume_No_Invalid_Values\n@@ -22818,6 +22826,8 @@ following:\n \n @item  @code{Ada_2012}\n \n+@item  @code{ALLOW_INTEGER_ADDRESS}\n+\n @item  @code{ANNOTATE}\n \n @item  @code{ASSERT}"}, {"sha": "1641d87dda5c9ee9f627d53faa814285513dd3cf", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -188,6 +188,13 @@ package Opt is\n    --  also repeated error messages for references to undefined identifiers\n    --  and certain other repeated error messages. Set by use of -gnatf.\n \n+   Allow_Integer_Address : Boolean := False;\n+   --  GNAT\n+   --  Allow use of integer expression in a context requiring System.Address.\n+   --  Set by the use of configuration pragma Allow_Integer_Address, or the\n+   --  compiler switch -gnates. Also set in relaxed semantics mode for use\n+   --  by CodePeer.\n+\n    All_Sources : Boolean := False;\n    --  GNATBIND\n    --  Set to True to require all source files to be present. This flag is"}, {"sha": "8e8674327173c89e129422daf658898f56a246d7", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -1114,6 +1114,7 @@ begin\n            Pragma_Assume_No_Invalid_Values       |\n            Pragma_AST_Entry                      |\n            Pragma_All_Calls_Remote               |\n+           Pragma_Allow_Integer_Address          |\n            Pragma_Annotate                       |\n            Pragma_Assert                         |\n            Pragma_Assert_And_Cut                 |"}, {"sha": "6faf4d04d6c991c658db5277318569bdcaf296b2", "filename": "gcc/ada/s-tadeca.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fs-tadeca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fs-tadeca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tadeca.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -55,7 +55,7 @@ begin\n    end if;\n \n    --  T is expressed as a duration elapsed since the UNIX epoch, whereas\n-   --  Time_Enque expects duraction elapsed since the epoch of the Ada real-\n+   --  Time_Enqueue expects duration elapsed since the epoch of the Ada real-\n    --  time clock: compensate if necessary.\n \n    --  Comparison \"SOSC.CLOCK_RT_Ada = SOSC.CLOCK_REALTIME\" is compile"}, {"sha": "788ff89b7824510a683cb4ad6ed16e6d68f71035", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -1695,8 +1695,8 @@ package body Sem_Ch5 is\n \n       Set_Ekind (Def_Id, E_Variable);\n \n-      --  Provide a link between the iterator variable and the container,\n-      --  for subequent use in cross-reference and modification information.\n+      --  Provide a link between the iterator variable and the container, for\n+      --  subsequent use in cross-reference and modification information.\n \n       if Of_Present (N) then\n          Set_Related_Expression (Def_Id, Iter_Name);"}, {"sha": "ef2c80973dac80bb920a7b889fc3da6b2bfdd6a9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -9825,6 +9825,17 @@ package body Sem_Prag is\n             end if;\n          end All_Calls_Remote;\n \n+         ---------------------------\n+         -- Allow_Integer_Address --\n+         ---------------------------\n+\n+         --  pragma Allow_Integer_Address;\n+\n+         when Pragma_Allow_Integer_Address =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (0);\n+            Opt.Allow_Integer_Address := True;\n+\n          --------------\n          -- Annotate --\n          --------------\n@@ -22874,6 +22885,7 @@ package body Sem_Prag is\n       Pragma_Ada_12                         => -1,\n       Pragma_Ada_2012                       => -1,\n       Pragma_All_Calls_Remote               => -1,\n+      Pragma_Allow_Integer_Address          => 0,\n       Pragma_Annotate                       => -1,\n       Pragma_Assert                         => -1,\n       Pragma_Assert_And_Cut                 => -1,"}, {"sha": "0dc75aa0f1cf349240a19047d7f60b591fbddf85", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -2615,7 +2615,21 @@ package body Sem_Res is\n             --  If an error message was issued already, Found got reset to\n             --  True, so if it is still False, issue standard Wrong_Type msg.\n \n-            if not Found then\n+            --  First check for special case of Address wanted, integer found\n+            --  with the configuration pragma Allow_Integer_Address active.\n+\n+            if Allow_Integer_Address\n+              and then Is_RTE (Typ, RE_Address)\n+              and then Is_Integer_Type (Etype (N))\n+            then\n+               Rewrite\n+                 (N, Unchecked_Convert_To (RTE (RE_Address),\n+                  Relocate_Node (N)));\n+               return;\n+\n+            --  OK, not the special case go ahead and issue message\n+\n+            elsif not Found then\n                if Is_Overloaded (N)\n                  and then Nkind (N) = N_Function_Call\n                then\n@@ -11622,6 +11636,19 @@ package body Sem_Res is\n             (\"add ALL to }!\", N, Target_Type);\n          return False;\n \n+      --  Deal with conversion of integer type to address if the pragma\n+      --  Allow_Integer_Address is in effect.\n+\n+      elsif Allow_Integer_Address\n+        and then Is_RTE (Etype (N), RE_Address)\n+        and then Is_Integer_Type (Etype (Operand))\n+      then\n+         Rewrite (N,\n+           Unchecked_Convert_To (RTE (RE_Address), Relocate_Node (N)));\n+         return True;\n+\n+      --  Here we have a real conversion error\n+\n       else\n          Conversion_Error_NE\n            (\"invalid conversion, not compatible with }\", N, Opnd_Type);"}, {"sha": "905eabb89c58c1e04a3763f8c3e76fd830e1fc99", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -13081,7 +13081,7 @@ package body Sem_Util is\n \n                   if Present (Related_Expression (Ent))\n                     and then Nkind (Parent (Related_Expression (Ent))) =\n-                      N_Iterator_Specification\n+                                                   N_Iterator_Specification\n                   then\n                      Exp := Original_Node (Related_Expression (Ent));\n                   end if;"}, {"sha": "576d89ee3aefb318cb38bd77aebdc832d465421d", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -361,6 +361,7 @@ package Snames is\n    Name_Ada_2005                       : constant Name_Id := N + $; -- GNAT\n    Name_Ada_12                         : constant Name_Id := N + $; -- GNAT\n    Name_Ada_2012                       : constant Name_Id := N + $; -- GNAT\n+   Name_Allow_Integer_Address          : constant Name_Id := N + $; -- GNAT\n    Name_Annotate                       : constant Name_Id := N + $; -- GNAT\n    Name_Assertion_Policy               : constant Name_Id := N + $; -- Ada 05\n    Name_Assume                         : constant Name_Id := N + $; -- GNAT\n@@ -1709,6 +1710,7 @@ package Snames is\n       Pragma_Ada_2005,\n       Pragma_Ada_12,\n       Pragma_Ada_2012,\n+      Pragma_Allow_Integer_Address,\n       Pragma_Annotate,\n       Pragma_Assertion_Policy,\n       Pragma_Assume,"}, {"sha": "369d0a6a265e31e8327d5376ca79ddaa06ee60a1", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -660,6 +660,15 @@ package body Switch.C is\n                   when 'P' =>\n                      Treat_Categorization_Errors_As_Warnings := True;\n \n+                  --  -gnates (allow integer expression for System.Address)\n+\n+                  --  Note: there is no VMS equivalent for this switch, since\n+                  --  in VMS, System.Address is an integer type in any case.\n+\n+                  when 's' =>\n+                     Allow_Integer_Address := True;\n+                     Ptr := Ptr + 1;\n+\n                   --  -gnateS (generate SCO information)\n \n                   --  Include Source Coverage Obligation information in ALI"}, {"sha": "f7be3136ffd3ec9817f00dd47a66a2d43d55e78d", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b578d1524f1aedf2c58ffe3b424023b2a79af/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=818b578d1524f1aedf2c58ffe3b424023b2a79af", "patch": "@@ -236,6 +236,11 @@ begin\n    Write_Switch_Char (\"eP\");\n    Write_Line (\"Pure/Prelaborate errors generate warnings rather than errors\");\n \n+   --  Line fofr -gnates switch\n+\n+   Write_Switch_Char (\"es\");\n+   Write_Line (\"Allow integer expression for System.Address value\");\n+\n    --  Line for -gnateS switch\n \n    Write_Switch_Char (\"eS\");"}]}