{"sha": "55db240d28d29aac90a2d2af3768283ba6288752", "node_id": "C_kwDOANBUbNoAKDU1ZGIyNDBkMjhkMjlhYWM5MGEyZDJhZjM3NjgyODNiYTYyODg3NTI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-16T09:41:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-16T09:41:18Z"}, "message": "reassoc: Fix up (ab) handling in eliminate_redundant_comparison [PR108783]\n\nThe following testcase ICEs because eliminate_redundant_comparison sees\nredundant comparisons in &&/|| where the comparison has (ab) SSA_NAME,\nmaybe_fold_{and,or}_comparisons optimizes them into a single comparison\nand build_and_add_sum emits a new comparison close to the definition\noperands, which in this case is before a returns_twice call (which is\ninvalid).  Generally reassoc just punts on (ab) SSA_NAMEs, declares them\nnon-reassociable etc., so the second half of this patch does that.\n\nThough we can do better in this case; the function has special code\nwhen maybe_fold_{and,or}_comparisons returns INTEGER_CST (false/true)\nor when what it returns is the same as curr->op (the first of the\ncomparisons we are considering) - in that case we just remove the\nsecond one and keep the first one.  The reason it doesn't match is that\ncurr->op is a SSA_NAME whose SSA_NAME_DEF_STMT is checked to be a\ncomparison, in this case _42 = a_1(ab) != 0 and the other comparison\nis also like that.  maybe_fold_{and,or}_comparisons looks through the\ndefinitions though and so returns a_1(ab) != 0 as tree.\nSo the first part of the patch checks whether that returned comparison\nisn't the same as the curr->op comparison and if yes, it just overrides\nt back to curr->op so that its SSA_NAME is reused.  In that case we can\nhandle even (ab) in {,new}op{1,2} because we don't create a new comparison\nof that, just keep using the existing one.  And t can't be (ab) because\notherwise it wouldn't be considered a reassociable operand.\n\nThe (ab) checks are needed say when we have a_1(ab) == 42 || a_1(ab) > 42\nkind of comparisons where maybe_fold_{and,or}_comparisons returns a new\ncomparison not existing in the IL yet.\n\n2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108783\n\t* tree-ssa-reassoc.cc (eliminate_redundant_comparison): If lcode\n\tis equal to TREE_CODE (t), op1 to newop1 and op2 to newop2, set\n\tt to curr->op.  Otherwise, punt if either newop1 or newop2 are\n\tSSA_NAME_OCCURS_IN_ABNORMAL_PHI SSA_NAMEs.\n\n\t* gcc.c-torture/compile/pr108783.c: New test.", "tree": {"sha": "8893b59d92a6d5b43ffe91a48f7616d196ada8a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8893b59d92a6d5b43ffe91a48f7616d196ada8a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55db240d28d29aac90a2d2af3768283ba6288752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55db240d28d29aac90a2d2af3768283ba6288752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55db240d28d29aac90a2d2af3768283ba6288752", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55db240d28d29aac90a2d2af3768283ba6288752/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441c466fd4d8b9afd99f585f7c4bfade911c4652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441c466fd4d8b9afd99f585f7c4bfade911c4652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441c466fd4d8b9afd99f585f7c4bfade911c4652"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "eae87db36d7fb27795086d0603bd0fa4d35b5c6d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr108783.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55db240d28d29aac90a2d2af3768283ba6288752/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108783.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55db240d28d29aac90a2d2af3768283ba6288752/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108783.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108783.c?ref=55db240d28d29aac90a2d2af3768283ba6288752", "patch": "@@ -0,0 +1,42 @@\n+/* PR tree-optimization/108783 */\n+\n+__attribute__((returns_twice)) int baz (int, int);\n+\n+int\n+bar (int x)\n+{\n+  return x;\n+}\n+\n+int\n+foo (int x, int y)\n+{\n+  int a;\n+\n+  a = bar (x);\n+  baz (x, y);\n+\n+  return y && a && a;\n+}\n+\n+int\n+qux (int x, int y)\n+{\n+  int a;\n+\n+  a = bar (x);\n+  baz (x, y);\n+\n+  return y && a != 42 && a >= 42;\n+}\n+\n+int\n+corge (int x, int y)\n+{\n+  int a;\n+\n+  a = bar (x);\n+  baz (x, y);\n+\n+  return y || a == 42 || a > 42;\n+}"}, {"sha": "f163612f14003b90537555ffdac7ec1f92747629", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55db240d28d29aac90a2d2af3768283ba6288752/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55db240d28d29aac90a2d2af3768283ba6288752/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=55db240d28d29aac90a2d2af3768283ba6288752", "patch": "@@ -2272,6 +2272,15 @@ eliminate_redundant_comparison (enum tree_code opcode,\n \t  STRIP_USELESS_TYPE_CONVERSION (newop2);\n \t  if (!is_gimple_val (newop1) || !is_gimple_val (newop2))\n \t    continue;\n+\t  if (lcode == TREE_CODE (t)\n+\t      && operand_equal_p (op1, newop1, 0)\n+\t      && operand_equal_p (op2, newop2, 0))\n+\t    t = curr->op;\n+\t  else if ((TREE_CODE (newop1) == SSA_NAME\n+\t\t    && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (newop1))\n+\t\t   || (TREE_CODE (newop2) == SSA_NAME\n+\t\t       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (newop2)))\n+\t    continue;\n \t}\n \n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}