{"sha": "05bf54c3c3cc7f13823ae787f21c36d3cee53265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDViZjU0YzNjM2NjN2YxMzgyM2FlNzg3ZjIxYzM2ZDNjZWU1MzI2NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-01-27T16:46:40Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-01-27T16:46:40Z"}, "message": "re PR c++/69379 (ICE in fold_convert_loc, at fold-const.c:2366)\n\n\tPR c++/69379\n\t* constexpr.c (cxx_eval_constant_expression): Handle PTRMEM_CSTs\n\twrapped in NOP_EXPRs.\n\n\t* g++.dg/pr69379.C: New test.\n\nFrom-SVN: r232882", "tree": {"sha": "8d32eb826765bdbd9a3d6e26ef93d3f91b6727ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d32eb826765bdbd9a3d6e26ef93d3f91b6727ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05bf54c3c3cc7f13823ae787f21c36d3cee53265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05bf54c3c3cc7f13823ae787f21c36d3cee53265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05bf54c3c3cc7f13823ae787f21c36d3cee53265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05bf54c3c3cc7f13823ae787f21c36d3cee53265/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60214d0d65c94912906108d2a1e6d04423528afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60214d0d65c94912906108d2a1e6d04423528afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60214d0d65c94912906108d2a1e6d04423528afc"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "c8653c46f143cffecff1d7670b29942681a6068b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05bf54c3c3cc7f13823ae787f21c36d3cee53265", "patch": "@@ -1,3 +1,9 @@\n+2016-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/69379\n+\t* constexpr.c (cxx_eval_constant_expression): Handle PTRMEM_CSTs\n+\twrapped in NOP_EXPRs.\n+\n 2016-01-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69317"}, {"sha": "57595a4002627ec31132f997430452eeb3b87328", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=05bf54c3c3cc7f13823ae787f21c36d3cee53265", "patch": "@@ -3659,6 +3659,20 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \tif (TREE_CODE (op) == PTRMEM_CST\n \t    && !TYPE_PTRMEM_P (type))\n \t  op = cplus_expand_constant (op);\n+\tif (TREE_CODE (op) == PTRMEM_CST && tcode == NOP_EXPR)\n+\t  {\n+\t    if (same_type_ignoring_top_level_qualifiers_p (type,\n+\t\t\t\t\t\t\t   TREE_TYPE (op)))\n+\t      STRIP_NOPS (t);\n+\t    else\n+\t      {\n+\t\tif (!ctx->quiet)\n+\t\t  error_at (EXPR_LOC_OR_LOC (t, input_location),\n+\t\t\t    \"a reinterpret_cast is not a constant-expression\");\n+\t\t*non_constant_p = true;\n+\t\treturn t;\n+\t      }\n+\t  }\n \tif (POINTER_TYPE_P (type)\n \t    && TREE_CODE (op) == INTEGER_CST\n \t    && !integer_zerop (op))"}, {"sha": "40aa9c339176a0ccefe1b85ad313a04d79340f77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05bf54c3c3cc7f13823ae787f21c36d3cee53265", "patch": "@@ -1,3 +1,8 @@\n+2016-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/69379\n+\t* g++.dg/pr69379.C: New test.\n+\n 2016-01-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69317"}, {"sha": "249ad00f2d6c6efdcb71d9f3002676d02de49ad6", "filename": "gcc/testsuite/g++.dg/pr69379.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr69379.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05bf54c3c3cc7f13823ae787f21c36d3cee53265/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr69379.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr69379.C?ref=05bf54c3c3cc7f13823ae787f21c36d3cee53265", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/69379\n+// { dg-do compile }\n+// { dg-options \"-Wformat\" }\n+\n+typedef int T;\n+class A {\n+public:\n+  template <class D> A(const char *, D);\n+  template <class Fn, class A1, class A2>\n+  void m_fn1(const char *, Fn, A1 const &, A2);\n+};\n+struct Dict {\n+  void m_fn2();\n+};\n+void fn1() {\n+  A a(\"\", \"\");\n+  typedef void *Get;\n+  typedef void (Dict::*d)(T);\n+  a.m_fn1(\"\", Get(), d(&Dict::m_fn2), \"\");\n+}"}]}