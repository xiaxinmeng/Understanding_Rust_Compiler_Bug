{"sha": "1331d16fd4b57c5927cec03b5a320bc59366a628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMzMWQxNmZkNGI1N2M1OTI3Y2VjMDNiNWEzMjBiYzU5MzY2YTYyOA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-04-14T02:55:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-04-14T02:55:31Z"}, "message": "builtin-types.def (BT_FN_STRING_CONST_STRING): New builtin type.\n\n\n\t* builtin-types.def (BT_FN_STRING_CONST_STRING): New builtin type.\n\t(BT_FN_PTR_SIZE_SIZE): Likewise.\n\t* builtins.def (BUILT_IN_MALLOC, BUILT_IN_CALLOC, BUILT_IN_STRDUP):\n\tNew built-in functions for malloc, calloc and strdup respectively.\n\t* calls.c (special_function_p): No need to handle malloc-like\n\tfunctions any longer.  ECF_MALLOC is set via built-in attributes.\n\n\t* c-decl.c (duplicate_decls): Preserve pure and malloc attributes.\n\t* cp/decl.c (duplicate_decls): Preserve pure and malloc attributes.\n\t* f/com.c (duplicate_decls): Preserve pure and malloc attributes.\n\n\t* doc/extend.texi: Document these new built-in functions.\n\n\t* gcc.dg/builtins-13.c: New test case.\n\t* gcc.dg/builtins-14.c: New test case.\n\nFrom-SVN: r65560", "tree": {"sha": "dd3d088e82001ccf169ac01fc9027aa8ec737b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd3d088e82001ccf169ac01fc9027aa8ec737b49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1331d16fd4b57c5927cec03b5a320bc59366a628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1331d16fd4b57c5927cec03b5a320bc59366a628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1331d16fd4b57c5927cec03b5a320bc59366a628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1331d16fd4b57c5927cec03b5a320bc59366a628/comments", "author": null, "committer": null, "parents": [{"sha": "e235df1f71573b7652df5ecec912f190055baf22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e235df1f71573b7652df5ecec912f190055baf22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e235df1f71573b7652df5ecec912f190055baf22"}], "stats": {"total": 170, "additions": 148, "deletions": 22}, "files": [{"sha": "6f2dae16d870f447b0465efef2e173574bc0e07c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -1,3 +1,16 @@\n+2003-04-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtin-types.def (BT_FN_STRING_CONST_STRING): New builtin type.\n+\t(BT_FN_PTR_SIZE_SIZE): Likewise.\n+\t* builtins.def (BUILT_IN_MALLOC, BUILT_IN_CALLOC, BUILT_IN_STRDUP):\n+\tNew built-in functions for malloc, calloc and strdup respectively.\n+\t* calls.c (special_function_p): No need to handle malloc-like\n+\tfunctions any longer.  ECF_MALLOC is set via built-in attributes.\n+\n+\t* c-decl.c (duplicate_decls): Preserve pure and malloc attributes.\n+\n+\t* doc/extend.texi: Document these new built-in functions.\n+\n 2003-04-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (expand_builtin_memcpy): Add `endp' argument, use it."}, {"sha": "a9db4a32be535ce75ab1f1055f85bd4b1f5b9c71", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -124,6 +124,7 @@ DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT_CONST_STRING, BT_FLOAT, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_CONST_STRING, BT_DOUBLE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONG_DOUBLE_CONST_STRING,\n \t\t     BT_LONG_DOUBLE, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_STRING_CONST_STRING, BT_STRING, BT_CONST_STRING)\n \n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_INT, BT_VOID, BT_PTR, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_STRING_STRING_CONST_STRING, \n@@ -158,6 +159,8 @@ DEF_FUNCTION_TYPE_2 (BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE,\n \t\t     BT_LONG_DOUBLE, BT_LONG_DOUBLE, BT_LONG_DOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_CONST_STRING, BT_VALIST_ARG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_PTR_SIZE_SIZE,\n+\t\t     BT_PTR, BT_SIZE, BT_SIZE)\n \n DEF_FUNCTION_TYPE_3 (BT_FN_STRING_STRING_CONST_STRING_SIZE,\n \t\t     BT_STRING, BT_STRING, BT_CONST_STRING, BT_SIZE)"}, {"sha": "f0d118b0dc3e57915877104387cfdc1c70d54ffe", "filename": "gcc/builtins.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -936,3 +936,19 @@ DEF_C99_BUILTIN(BUILT_IN__EXIT2,\n \t\tBT_FN_VOID_INT,\n \t\tATTR_NORETURN_NOTHROW_LIST)\n \n+/* Declare malloc, calloc and strdup.  */\n+DEF_LIB_BUILTIN(BUILT_IN_MALLOC,\n+\t\t\"__builtin_malloc\",\n+\t\tBT_FN_PTR_SIZE,\n+\t\tATTR_MALLOC_NOTHROW_LIST)\n+\n+DEF_LIB_BUILTIN(BUILT_IN_CALLOC,\n+\t\t\"__builtin_calloc\",\n+\t\tBT_FN_PTR_SIZE_SIZE,\n+\t\tATTR_MALLOC_NOTHROW_LIST)\n+\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_STRDUP,\n+\t\t    \"__builtin_strdup\",\n+\t\t    BT_FN_STRING_CONST_STRING,\n+\t\t    ATTR_MALLOC_NOTHROW_LIST)\n+"}, {"sha": "3fc1808fe67d8a18a610cfe767d1b4b761cd47f7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -1391,6 +1391,8 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  DECL_NO_LIMIT_STACK (newdecl) |= DECL_NO_LIMIT_STACK (olddecl);\n \t  DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (newdecl)\n \t    |= DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (olddecl);\n+\t  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n+\t  DECL_IS_PURE (newdecl) |= DECL_IS_PURE (olddecl);\n \t}\n     }\n   /* If cannot merge, then use the new type and qualifiers,"}, {"sha": "1dc5fc5cc75c0b335e9350c2b6618dbc1d91f628", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -665,9 +665,6 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n \n    Similarly set LONGJMP for if the function is in the longjmp family.\n \n-   Set MALLOC for any of the standard memory allocation functions which\n-   allocate from the heap.\n-\n    Set MAY_BE_ALLOCA for any memory allocation function that might allocate\n    space from the stack such as alloca.  */\n \n@@ -747,19 +744,6 @@ special_function_p (fndecl, flags)\n \t\t       || ((tname[5] == 'p' || tname[5] == 'e')\n \t\t\t   && tname[6] == '\\0'))))\n \tflags |= ECF_FORK_OR_EXEC;\n-\n-      /* Do not add any more malloc-like functions to this list,\n-         instead mark them as malloc functions using the malloc attribute.\n-         Note, realloc is not suitable for attribute malloc since\n-         it may return the same address across multiple calls.\n-         C++ operator new is not suitable because it is not required\n-         to return a unique pointer; indeed, the standard placement new\n-\t just returns its argument.  */\n-      else if (TYPE_MODE (TREE_TYPE (TREE_TYPE (fndecl))) == Pmode\n-\t       && (! strcmp (tname, \"malloc\")\n-\t\t   || ! strcmp (tname, \"calloc\")\n-\t\t   || ! strcmp (tname, \"strdup\")))\n-\tflags |= ECF_MALLOC;\n     }\n   return flags;\n }"}, {"sha": "c6cec1fd78065051d87a2d6ad864ca6ec615b8d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -1,3 +1,7 @@\n+2003-04-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* decl.c (duplicate_decls): Preserve pure and malloc attributes.\n+\n 2003-04-12  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10300"}, {"sha": "33881d94f5fa7c253df83e34680b2addb2a3813f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -3359,8 +3359,9 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t{\n \t  DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (newdecl)\n \t    |= DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (olddecl);\n-\t  DECL_NO_LIMIT_STACK (newdecl)\n-\t    |= DECL_NO_LIMIT_STACK (olddecl);\n+\t  DECL_NO_LIMIT_STACK (newdecl) |= DECL_NO_LIMIT_STACK (olddecl);\n+\t  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n+\t  DECL_IS_PURE (newdecl) |= DECL_IS_PURE (olddecl);\n \t  /* Keep the old RTL.  */\n \t  COPY_DECL_RTL (olddecl, newdecl);\n \t}"}, {"sha": "f5a2c110fbcf2153b6d1b1ac739898709459b9a3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -4554,6 +4554,7 @@ v4si f (v4si a, v4si b, v4si c)\n @findex atan2l\n @findex bcmp\n @findex bzero\n+@findex calloc\n @findex ceil\n @findex ceilf\n @findex ceill\n@@ -4596,6 +4597,7 @@ v4si f (v4si a, v4si b, v4si c)\n @findex log\n @findex logf\n @findex logl\n+@findex malloc\n @findex memcmp\n @findex memcpy\n @findex mempcpy\n@@ -4630,6 +4632,7 @@ v4si f (v4si a, v4si b, v4si c)\n @findex strcmp\n @findex strcpy\n @findex strcspn\n+@findex strdup\n @findex strlen\n @findex strncat\n @findex strncmp\n@@ -4670,7 +4673,8 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @option{-std=c99}), the functions @code{alloca}, @code{bcmp},\n @code{bzero}, @code{_exit}, @code{ffs}, @code{fprintf_unlocked},\n @code{fputs_unlocked}, @code{index}, @code{mempcpy}, @code{printf_unlocked},\n-@code{rindex}, and @code{stpcpy} may be handled as built-in functions.\n+@code{rindex}, @code{stpcpy} and @code{strdup} \n+may be handled as built-in functions.\n All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n mode.\n@@ -4695,10 +4699,10 @@ that are recognized in any mode since ISO C90 reserves these names for\n the purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n-The ISO C90 functions @code{abort}, @code{abs}, @code{atan2}, @code{ceil},\n-@code{cos}, @code{exit},\n+The ISO C90 functions @code{abort}, @code{abs}, @code{atan2},\n+@code{calloc}, @code{ceil}, @code{cos}, @code{exit},\n @code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n-@code{fprintf}, @code{fputs}, @code{labs}, @code{log},\n+@code{fprintf}, @code{fputs}, @code{labs}, @code{log}, @code{malloc},\n @code{memcmp}, @code{memcpy}, @code{memset}, @code{pow}, @code{printf},\n @code{putchar}, @code{puts}, @code{scanf}, @code{sin}, @code{snprintf},\n @code{sprintf}, @code{sqrt}, @code{sscanf},"}, {"sha": "47240a4c654f884690ada5cb3d79656e70681795", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -1,3 +1,7 @@\n+2003-04-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* com.c (duplicate_decls): Preserve pure and malloc attributes.\n+\n 2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* com.c (ffecom_build_complex_constant_, ffecom_expr_)"}, {"sha": "6c606444ac50b7d0d7225dfef145bd56fa7e3628", "filename": "gcc/f/com.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -13335,6 +13335,8 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t{\n \t  DECL_STATIC_CONSTRUCTOR(newdecl) |= DECL_STATIC_CONSTRUCTOR(olddecl);\n \t  DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);\n+\t  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n+\t  DECL_IS_PURE (newdecl) |= DECL_IS_PURE (olddecl);\n \t}\n     }\n   /* If cannot merge, then use the new type and qualifiers,"}, {"sha": "8bded5bed570cb47a043a225e917bc26b868655d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -1,3 +1,8 @@\n+2003-04-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-12.c: New test case.\n+\t* gcc.dg/builtins-13.c: New test case.\n+\n 2003-04-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.c-torture/execute/string-opt-18.c: New test."}, {"sha": "22ba8ce3d314d4a27a70baba86fc511386ad4cc9", "filename": "gcc/testsuite/gcc.dg/builtins-12.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-12.c?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that all the malloc-like __builtin_ allocation functions are\n+   recognized by the compiler.\n+\n+   Written by Roger Sayle, 12th April 2003.  */\n+\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"__builtin_\" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void *test1(size_t n)\n+{\n+  return __builtin_malloc(n);\n+}\n+\n+void *test2(size_t n, size_t s)\n+{\n+  return __builtin_calloc(n,s);\n+}\n+\n+char *test3(const char *ptr)\n+{\n+  return __builtin_strdup(ptr);\n+}\n+"}, {"sha": "befcd3447ad7dd7403cbc57aa8923d780c144a17", "filename": "gcc/testsuite/gcc.dg/builtins-13.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1331d16fd4b57c5927cec03b5a320bc59366a628/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-13.c?ref=1331d16fd4b57c5927cec03b5a320bc59366a628", "patch": "@@ -0,0 +1,61 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that the malloc-like __builtin_ allocation functions are\n+   correctly aliased by the compiler.\n+\n+   Written by Roger Sayle, 12th April 2003.  */\n+\n+/* { dg-do link } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void abort (void);\n+extern void *malloc (size_t);\n+extern void *calloc (size_t,size_t);\n+\n+extern void link_error (void);\n+\n+static int x;\n+\n+void test1(void)\n+{\n+  int *ptr1, *ptr2;\n+\n+  ptr1 = &x;\n+  ptr2 = (int*) malloc (sizeof (int));\n+\n+  *ptr1 = 12;\n+  *ptr2 = 8;\n+\n+  if (*ptr1 != 12)\n+    link_error();\n+}\n+\n+void test2(void)\n+{\n+  int *ptr1, *ptr2;\n+\n+  ptr1 = &x;\n+  ptr2 = (int*) calloc (1, sizeof (int));\n+\n+  *ptr1 = 12;\n+  *ptr2 = 8;\n+\n+  if (*ptr1 != 12)\n+    link_error ();\n+}\n+\n+int main()\n+{\n+  test1 ();\n+  test2 ();\n+  return 0;\n+}\n+\n+#ifndef __OPTIMIZE__\n+void link_error (void)\n+{\n+  abort ();\n+}\n+#endif\n+"}]}