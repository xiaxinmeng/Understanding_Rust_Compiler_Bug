{"sha": "5d110fe90afcd850ea21aee6429f22edd6b1b592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQxMTBmZTkwYWZjZDg1MGVhMjFhZWU2NDI5ZjIyZWRkNmIxYjU5Mg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-09-17T18:58:06Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-09-20T20:32:35Z"}, "message": "Make each def a new equivalency record.\n\nCreate a new equivalency set at each def point killing any equivalencies\ncoming into the block from back edges.  Do not add equivalences for PHI\narguments defined in this block.\n\n\t* value-relation.cc (equiv_oracle::register_initial_def): New.\n\t(equiv_oracle::register_relation): Call register_initial_def.\n\t(equiv_oracle::add_equiv_to_block): New.  Split register_relation.\n\t(relation_oracle::register_stmt): Check def block of PHI arguments.\n\t* value-relation.h (equiv_oracle): Add new prototypes.", "tree": {"sha": "56e8f65f9f501cdc7543bc7ba23f702e867501e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56e8f65f9f501cdc7543bc7ba23f702e867501e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d110fe90afcd850ea21aee6429f22edd6b1b592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d110fe90afcd850ea21aee6429f22edd6b1b592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d110fe90afcd850ea21aee6429f22edd6b1b592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d110fe90afcd850ea21aee6429f22edd6b1b592/comments", "author": null, "committer": null, "parents": [{"sha": "b333c3acb8d436b256ba8922c6426c93860bb616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b333c3acb8d436b256ba8922c6426c93860bb616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b333c3acb8d436b256ba8922c6426c93860bb616"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "ac5f3f9afc0b9280dab3ff44a0dfe90fe14fd632", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d110fe90afcd850ea21aee6429f22edd6b1b592/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d110fe90afcd850ea21aee6429f22edd6b1b592/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=5d110fe90afcd850ea21aee6429f22edd6b1b592", "patch": "@@ -407,6 +407,24 @@ equiv_oracle::register_equiv (basic_block bb, equiv_chain *equiv_1,\n   return b;\n }\n \n+// Create an equivalency set containing only SSA in its definition block.\n+// This is done the first time SSA is registered in an equivalency and blocks\n+// any DOM searches past the definition.\n+\n+void\n+equiv_oracle::register_initial_def (tree ssa)\n+{\n+  if (SSA_NAME_IS_DEFAULT_DEF (ssa))\n+    return;\n+  basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (ssa));\n+  gcc_checking_assert (bb && !find_equiv_dom (ssa, bb));\n+\n+  unsigned v = SSA_NAME_VERSION (ssa);\n+  bitmap_set_bit (m_equiv_set, v);\n+  bitmap equiv_set = BITMAP_ALLOC (&m_bitmaps);\n+  bitmap_set_bit (equiv_set, v);\n+  add_equiv_to_block (bb, equiv_set);\n+}\n \n // Register an equivalence between SSA1 and SSA2 in block BB.\n // The equivalence oracle maintains a vector of equivalencies indexed by basic\n@@ -425,6 +443,14 @@ equiv_oracle::register_relation (basic_block bb, relation_kind k, tree ssa1,\n \n   unsigned v1 = SSA_NAME_VERSION (ssa1);\n   unsigned v2 = SSA_NAME_VERSION (ssa2);\n+\n+  // If this is the first time an ssa_name has an equivalency registered\n+  // create a self-equivalency record in the def block.\n+  if (!bitmap_bit_p (m_equiv_set, v1))\n+    register_initial_def (ssa1);\n+  if (!bitmap_bit_p (m_equiv_set, v2))\n+    register_initial_def (ssa2);\n+\n   equiv_chain *equiv_1 = find_equiv_dom (ssa1, bb);\n   equiv_chain *equiv_2 = find_equiv_dom (ssa2, bb);\n \n@@ -456,6 +482,15 @@ equiv_oracle::register_relation (basic_block bb, relation_kind k, tree ssa1,\n   if (!equiv_set)\n     return;\n \n+  add_equiv_to_block (bb, equiv_set);\n+}\n+\n+// Add an equivalency record in block BB containing bitmap EQUIV_SET.\n+// Note the internal caller is responible for allocating EQUIV_SET properly.\n+\n+void\n+equiv_oracle::add_equiv_to_block (basic_block bb, bitmap equiv_set)\n+{\n   equiv_chain *ptr;\n \n   // Check if this is the first time a block has an equivalence added.\n@@ -786,6 +821,28 @@ relation_oracle::register_stmt (gimple *stmt, relation_kind k, tree op1,\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n     }\n \n+  // If an equivalence is being added between a PHI and one of its arguments\n+  // make sure that that argument is not defined in the same block.\n+  // This can happen along back edges and the equivalence will not be\n+  // applicable as it would require a use before def.\n+  if (k == EQ_EXPR && is_a<gphi *> (stmt))\n+    {\n+      tree phi_def = gimple_phi_result (stmt);\n+      gcc_checking_assert (phi_def == op1 || phi_def == op2);\n+      tree arg = op2;\n+      if (phi_def == op2)\n+\targ = op1;\n+      if (gimple_bb (stmt) == gimple_bb (SSA_NAME_DEF_STMT (arg)))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"  Not registered due to \");\n+\t      print_generic_expr (dump_file, arg, TDF_SLIM);\n+\t      fprintf (dump_file, \" being defined in the same block.\\n\");\n+\t    }\n+\t  return;\n+\t}\n+    }\n   register_relation (gimple_bb (stmt), k, op1, op2);\n }\n "}, {"sha": "53cefbfa7dcfadcc0f19eae2c7647865cd5de01b", "filename": "gcc/value-relation.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d110fe90afcd850ea21aee6429f22edd6b1b592/gcc%2Fvalue-relation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d110fe90afcd850ea21aee6429f22edd6b1b592/gcc%2Fvalue-relation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.h?ref=5d110fe90afcd850ea21aee6429f22edd6b1b592", "patch": "@@ -146,7 +146,8 @@ class equiv_oracle : public relation_oracle\n   bitmap register_equiv (basic_block bb, unsigned v, equiv_chain *equiv_1);\n   bitmap register_equiv (basic_block bb, equiv_chain *equiv_1,\n \t\t\t equiv_chain *equiv_2);\n-\n+  void register_initial_def (tree ssa);\n+  void add_equiv_to_block (basic_block bb, bitmap equiv);\n };\n \n // Summary block header for relations."}]}