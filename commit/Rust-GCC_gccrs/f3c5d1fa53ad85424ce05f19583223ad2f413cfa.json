{"sha": "f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjNWQxZmE1M2FkODU0MjRjZTA1ZjE5NTgzMjIzYWQyZjQxM2NmYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-08T10:49:37Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-08T10:49:37Z"}, "message": "aarch64: Support conditional unpacked UXT on SVE\n\nThis patch extends the conditional UXT patterns from SVE_FULL_I\nto SVE_I.  It doesn't matter in this case whether the type suffix\nis taken from the element size or the container size.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*cond_uxt<mode>_2): Extend from\n\tSVE_FULL_I to SVE_I.\n\t(*cond_uxt<mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_uxt_5.c: New test.\n\t* gcc.target/aarch64/sve/cond_uxt_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_7.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_8.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_8_run.c: Likewise.", "tree": {"sha": "7eef962963610af509cb2f2ca9253f828642c42f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eef962963610af509cb2f2ca9253f828642c42f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f"}], "stats": {"total": 253, "additions": 242, "deletions": 11}, "files": [{"sha": "b83f9912cb6729486074fce41833ffc77345b024", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -3135,12 +3135,12 @@\n ;; The canonical form of this operation is an AND of a constant rather\n ;; than (zero_extend (truncate ...)).\n (define_insn \"*cond_uxt<mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (and:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"aarch64_sve_uxt_immediate\"))\n+\t   (and:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_uxt_immediate\"))\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -3159,13 +3159,13 @@\n ;; as early-clobber helps to make the instruction more regular to the\n ;; register allocator.\n (define_insn \"*cond_uxt<mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (and:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"aarch64_sve_uxt_immediate\"))\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t   (and:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_uxt_immediate\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE && !rtx_equal_p (operands[2], operands[4])\"\n   \"@"}, {"sha": "18866286b7f9bebec06747788fc1268b7a2f86d0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_5.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, CONST, COUNT)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE1##_##TYPE2 (TYPE2 *restrict r,\t\t\\\n+\t\t\t\t    TYPE1 *restrict a,\t\t\\\n+\t\t\t\t    TYPE2 *restrict b)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : b[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (int32_t, uint16_t, 0xff, 3)\t\\\n+\t\t\t\t\t\\\n+  T (int64_t, uint16_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xffff, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2[],][^L]*\\tuxtb\\t\\1\\.h, p[0-7]/m, \\1\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2[],][^L]*\\tuxtb\\t\\1\\.h, p[0-7]/m, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2[],][^L]*\\tuxtb\\t\\1\\.s, p[0-7]/m, \\1\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2[],][^L]*\\tuxth\\t\\1\\.s, p[0-7]/m, \\1\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "675fd2be96bdc0f0c97d75978d2b96460bc17284", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_5_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5_run.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_5.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CONST, N)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? -20 - i : 20 + i);\t\t\t\\\n+\tb[i] = -5 - i;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] > 20 ? b[i] & CONST : b[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "e47276a3a352bd61d2c508167344a2e60e8bc84c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_6.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, CONST, COUNT)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE1##_##TYPE2 (TYPE2 *restrict r,\t\t\\\n+\t\t\t\t    TYPE1 *restrict a,\t\t\\\n+\t\t\t\t    TYPE2 *restrict b)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : a[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (int32_t, uint16_t, 0xff, 3)\t\\\n+\t\t\t\t\t\\\n+  T (int64_t, uint16_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xffff, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1[],][^L]*\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2[],][^L]*\\tuxtb\\t\\1\\.h, p[0-7]/m, \\2\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1[],][^L]*\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2[],][^L]*\\tuxtb\\t\\1\\.h, p[0-7]/m, \\2\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1[],][^L]*\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2[],][^L]*\\tuxtb\\t\\1\\.s, p[0-7]/m, \\2\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1[],][^L]*\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2[],][^L]*\\tuxth\\t\\1\\.s, p[0-7]/m, \\2\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "72208542b88a665c6bcc5ec4d94b0cc91ea27d23", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_6_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_6_run.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_6.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CONST, N)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? -20 - i : 20 + i);\t\t\t\\\n+\tb[i] = -5 - i;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] > 20 ? b[i] & CONST : a[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "f49915c4ac1430b0260589156d98b0793c78999f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_7.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, CONST, COUNT)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE1##_##TYPE2 (TYPE2 *restrict r,\t\t\\\n+\t\t\t\t    TYPE1 *restrict a,\t\t\\\n+\t\t\t\t    TYPE2 *restrict b)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : 127;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (int32_t, uint16_t, 0xff, 3)\t\\\n+\t\t\t\t\t\\\n+  T (int64_t, uint16_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xffff, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "4c6dc36583cdbf3085d92f090173ff404f768f23", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_7_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_7_run.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_7.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CONST, N)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? -20 - i : 20 + i);\t\t\t\\\n+\tb[i] = -5 - i;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] > 20 ? b[i] & CONST : 127))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "42eb4b2661b3f152763ac2c8382877e5116dedd4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_8.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, CONST, COUNT)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE1##_##TYPE2 (TYPE2 *restrict r,\t\t\\\n+\t\t\t\t    TYPE1 *restrict a,\t\t\\\n+\t\t\t\t    TYPE2 *restrict b)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : 0;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (int32_t, uint16_t, 0xff, 3)\t\\\n+\t\t\t\t\t\\\n+  T (int64_t, uint16_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xff, 5)\t\\\n+  T (int64_t, uint32_t, 0xffff, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz[^,]*, p[0-7]/z} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "cfe3ed6481804d6664094a1e9b7994ec6eae1abc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_8_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c5d1fa53ad85424ce05f19583223ad2f413cfa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_8_run.c?ref=f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_8.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CONST, N)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? -20 - i : 20 + i);\t\t\t\\\n+\tb[i] = -5 - i;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] > 20 ? b[i] & CONST : 0))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}