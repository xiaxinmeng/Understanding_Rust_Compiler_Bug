{"sha": "398f9f35d480081ddbd979e431560b2f93b333f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk4ZjlmMzVkNDgwMDgxZGRiZDk3OWU0MzE1NjBiMmY5M2IzMzNmMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-04-04T16:17:32Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-04-04T16:17:32Z"}, "message": "target-supports.exp (check_effective_target_arm_v8_neon_hw): New procedure.\n\n2013-04-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* lib/target-supports.exp (check_effective_target_arm_v8_neon_hw):\n\tNew procedure.\n\t(check_effective_target_arm_v8_neon_ok_nocache):\n\tLikewise.\n\t(check_effective_target_arm_v8_neon_ok): Change to use\n\tcheck_effective_target_arm_v8_neon_ok_nocache.\n\t(add_options_for_arm_v8_neon): Use et_arm_v8_neon_flags to set ARMv8\n\tNEON flags.\n\t(check_effective_target_vect_call_btruncf):\n\tEnable for arm and ARMv8 NEON.\n\t(check_effective_target_vect_call_ceilf): Likewise.\n\t(check_effective_target_vect_call_floorf): Likewise.\n\t(check_effective_target_vect_call_roundf): Likewise.\n\t(check_vect_support_and_set_flags): Handle ARMv8 NEON effective\n\ttarget.\n\nFrom-SVN: r197491", "tree": {"sha": "22975dc0309727e8cab0f733f5ccee646d127935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22975dc0309727e8cab0f733f5ccee646d127935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/398f9f35d480081ddbd979e431560b2f93b333f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398f9f35d480081ddbd979e431560b2f93b333f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/398f9f35d480081ddbd979e431560b2f93b333f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398f9f35d480081ddbd979e431560b2f93b333f3/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c"}], "stats": {"total": 111, "additions": 90, "deletions": 21}, "files": [{"sha": "56f1044f8055b75ec992c3474c7f01d176f0d072", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398f9f35d480081ddbd979e431560b2f93b333f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398f9f35d480081ddbd979e431560b2f93b333f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=398f9f35d480081ddbd979e431560b2f93b333f3", "patch": "@@ -1,3 +1,21 @@\n+2013-04-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_v8_neon_hw):\n+\tNew procedure.\n+\t(check_effective_target_arm_v8_neon_ok_nocache):\n+\tLikewise.\n+\t(check_effective_target_arm_v8_neon_ok): Change to use\n+\tcheck_effective_target_arm_v8_neon_ok_nocache.\n+\t(add_options_for_arm_v8_neon): Use et_arm_v8_neon_flags to set ARMv8\n+\tNEON flags.\n+\t(check_effective_target_vect_call_btruncf):\n+\tEnable for arm and ARMv8 NEON.\n+\t(check_effective_target_vect_call_ceilf): Likewise.\n+\t(check_effective_target_vect_call_floorf): Likewise.\n+\t(check_effective_target_vect_call_roundf): Likewise.\n+\t(check_vect_support_and_set_flags): Handle ARMv8 NEON effective\n+\ttarget.\n+\n 2013-04-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/48186"}, {"sha": "268fddb39661b7b9b1e04881f062d3406438240d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 72, "deletions": 21, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398f9f35d480081ddbd979e431560b2f93b333f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398f9f35d480081ddbd979e431560b2f93b333f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=398f9f35d480081ddbd979e431560b2f93b333f3", "patch": "@@ -2147,22 +2147,6 @@ proc check_effective_target_arm_v8_vfp_ok {} {\n     }\n }\n \n-# Return 1 if this is an ARM target supporting -mfpu=neon-fp-armv8\n-# -mfloat-abi=softfp\n-proc check_effective_target_arm_v8_neon_ok {} {\n-    if { [check_effective_target_arm32] } {\n-\treturn [check_no_compiler_messages arm_v8_neon_ok object {\n-\t  int foo (void)\n-\t  {\n-\t     __asm__ volatile (\"vrintn.f32 q0, q0\");\n-\t       return 0;\n-\t  }\n-\t} \"-mfpu=neon-fp-armv8 -mfloat-abi=softfp\"]\n-    } else {\n-\treturn 0\n-    }\n-}\n-\n # Return 1 if this is an ARM target supporting -mfpu=vfp\n # -mfloat-abi=hard.  Some multilibs may be incompatible with these\n # options.\n@@ -2226,7 +2210,8 @@ proc add_options_for_arm_v8_neon { flags } {\n     if { ! [check_effective_target_arm_v8_neon_ok] } {\n         return \"$flags\"\n     }\n-    return \"$flags -march=armv8-a -mfpu=neon-fp-armv8 -mfloat-abi=softfp\"\n+    global et_arm_v8_neon_flags\n+    return \"$flags $et_arm_v8_neon_flags\"\n }\n \n # Add the options needed for NEON.  We need either -mfloat-abi=softfp\n@@ -2270,6 +2255,38 @@ proc check_effective_target_arm_neon_ok { } {\n \t\tcheck_effective_target_arm_neon_ok_nocache]\n }\n \n+# Return 1 if this is an ARM target supporting -mfpu=neon-fp-armv8\n+# -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n+# incompatible with these options.  Also set et_arm_v8_neon_flags to the\n+# best options to add.\n+\n+proc check_effective_target_arm_v8_neon_ok_nocache { } {\n+    global et_arm_v8_neon_flags\n+    set et_arm_v8_neon_flags \"\"\n+    if { [check_effective_target_arm32] } {\n+\tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=neon-fp-armv8\" \"-mfpu=neon-fp-armv8 -mfloat-abi=softfp\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_v8_neon_ok object {\n+\t\t#include \"arm_neon.h\"\n+\t\tvoid\n+\t\tfoo ()\n+\t\t{\n+\t          __asm__ volatile (\"vrintn.f32 q0, q0\");\n+\t\t}\n+\t    } \"$flags\"] } {\n+\t\tset et_arm_v8_neon_flags $flags\n+\t\treturn 1\n+\t    }\n+\t}\n+    }\n+\n+    return 0\n+}\n+\n+proc check_effective_target_arm_v8_neon_ok { } {\n+    return [check_cached_effective_target arm_v8_neon_ok \\\n+\t\tcheck_effective_target_arm_v8_neon_ok_nocache]\n+}\n+\n # Return 1 if this is an ARM target supporting -mfpu=neon-vfpv4\n # -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n # incompatible with these options.  Also set et_arm_neonv2_flags to the\n@@ -2509,6 +2526,24 @@ proc check_effective_target_arm_neonv2_hw { } {\n     } [add_options_for_arm_neonv2 \"\"]]\n }\n \n+# Return 1 if the target supports executing ARMv8 NEON instructions, 0\n+# otherwise.\n+\n+proc check_effective_target_arm_v8_neon_hw { } {\n+    return [check_runtime arm_v8_neon_hw_available {\n+        #include \"arm_neon.h\"\n+\tint\n+\tmain (void)\n+\t{\n+\t  float32x2_t a;\n+\t  asm (\"vrinta.f32 %P0, %P1\"\n+\t       : \"=w\" (a)\n+\t       : \"0\" (a));\n+\t  return 0;\n+\t}\n+    } [add_options_for_arm_v8_neon \"\"]]\n+}\n+\n # Return 1 if this is a ARM target with NEON enabled.\n \n proc check_effective_target_arm_neon { } {\n@@ -4047,7 +4082,9 @@ proc check_effective_target_vect_call_btruncf { } {\n \tverbose \"check_effective_target_vect_call_btruncf: using cached result\" 2\n     } else {\n \tset et_vect_call_btruncf_saved 0\n-\tif { [istarget aarch64*-*-*] } {\n+\tif { [istarget aarch64*-*-*]\n+\t     || ([istarget arm*-*-*]\n+\t         && [check_effective_target_arm_v8_neon_ok]) } {\n \t  set et_vect_call_btruncf_saved 1\n \t}\n     }\n@@ -4083,7 +4120,9 @@ proc check_effective_target_vect_call_ceilf { } {\n \tverbose \"check_effective_target_vect_call_ceilf: using cached result\" 2\n     } else {\n \tset et_vect_call_ceilf_saved 0\n-\tif { [istarget aarch64*-*-*] } {\n+\tif { [istarget aarch64*-*-*]\n+\t     || ([istarget arm*-*-*]\n+\t         && [check_effective_target_arm_v8_neon_ok]) } {\n \t  set et_vect_call_ceilf_saved 1\n \t}\n     }\n@@ -4119,7 +4158,9 @@ proc check_effective_target_vect_call_floorf { } {\n \tverbose \"check_effective_target_vect_call_floorf: using cached result\" 2\n     } else {\n \tset et_vect_call_floorf_saved 0\n-\tif { [istarget aarch64*-*-*] } {\n+\tif { [istarget aarch64*-*-*]\n+\t     || ([istarget arm*-*-*]\n+\t         && [check_effective_target_arm_v8_neon_ok]) } {\n \t  set et_vect_call_floorf_saved 1\n \t}\n     }\n@@ -4227,7 +4268,9 @@ proc check_effective_target_vect_call_roundf { } {\n \tverbose \"check_effective_target_vect_call_roundf: using cached result\" 2\n     } else {\n \tset et_vect_call_roundf_saved 0\n-\tif { [istarget aarch64*-*-*] } {\n+\tif { [istarget aarch64*-*-*]\n+\t     || ([istarget arm*-*-*]\n+\t         && [check_effective_target_arm_v8_neon_ok]) } {\n \t  set et_vect_call_roundf_saved 1\n \t}\n     }\n@@ -5129,6 +5172,14 @@ proc check_vect_support_and_set_flags { } {\n         }\n     } elseif [istarget ia64-*-*] {\n         set dg-do-what-default run\n+    } elseif [is-effective-target arm_v8_neon_ok] {\n+        eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_v8_neon \"\"]\n+        lappend DEFAULT_VECTCFLAGS \"-ffast-math\"\n+        if [is-effective-target arm_v8_neon_hw] {\n+            set dg-do-what-default run\n+        } else {\n+            set dg-do-what-default compile\n+        }\n     } elseif [is-effective-target arm_neon_ok] {\n         eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]\n         # NEON does not support denormals, so is not used for vectorization by"}]}