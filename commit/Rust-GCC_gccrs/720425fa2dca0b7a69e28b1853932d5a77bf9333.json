{"sha": "720425fa2dca0b7a69e28b1853932d5a77bf9333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIwNDI1ZmEyZGNhMGI3YTY5ZTI4YjE4NTM5MzJkNWE3N2JmOTMzMw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-05-15T13:11:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-08T14:55:53Z"}, "message": "[Ada] Accept aspect Relaxed_Initialization on generic subprograms\n\ngcc/ada/\n\n\t* sem_attr.adb (Analyze_Attribute): Correct prefix of 'Result\n\tthis prefix is a generic function but the enclosing aspect or\n\tpragma is attached to its instance.\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Analyze\n\tgeneric subprogram formal parameters (including the implicit\n\tresult of a generic function) and only then analyse its aspects,\n\tbecause with Relaxed_Initialization the aspect expression might\n\trefer to those formal parameters.\n\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Accept\n\taspect on generic subprograms; install formal parameters of a\n\tgeneric subprogram but not formal parameters of the generic unit\n\titself (the previous code was inspired by aspects Post and\n\tDepends, where both kinds of formals are allowed).\n\t* sem_util.ads (Enter_Name): Fix name of a subprogram referenced\n\tin comment.", "tree": {"sha": "acd28f40999e21e93a6f512d2f5df368b1921046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acd28f40999e21e93a6f512d2f5df368b1921046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/720425fa2dca0b7a69e28b1853932d5a77bf9333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720425fa2dca0b7a69e28b1853932d5a77bf9333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/720425fa2dca0b7a69e28b1853932d5a77bf9333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720425fa2dca0b7a69e28b1853932d5a77bf9333/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b52c24dd1870aff68879bd68a67fdb14f7e5cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b52c24dd1870aff68879bd68a67fdb14f7e5cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b52c24dd1870aff68879bd68a67fdb14f7e5cba"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "fbaaa656a2d9c0916abd4cc5ba0315c7b56b34f8", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=720425fa2dca0b7a69e28b1853932d5a77bf9333", "patch": "@@ -5512,8 +5512,16 @@ package body Sem_Attr is\n             if Is_Entity_Name (P) then\n                Pref_Id := Entity (P);\n \n-               if Ekind_In (Pref_Id, E_Function, E_Generic_Function)\n-                 and then Ekind (Spec_Id) = Ekind (Pref_Id)\n+               --  Either both the prefix and the annotated spec must be\n+               --  generic functions, or they both must be non-generic\n+               --  functions, or the prefix must be generic and the spec\n+               --  must be non-generic (i.e. it must denote an instance).\n+\n+               if (Ekind_In (Pref_Id, E_Function, E_Generic_Function)\n+                   and then Ekind (Pref_Id) = Ekind (Spec_Id))\n+                    or else\n+                  (Ekind (Pref_Id) = E_Generic_Function\n+                   and then Ekind (Spec_Id) = E_Function)\n                then\n                   if Denote_Same_Function (Pref_Id, Spec_Id) then\n "}, {"sha": "4307111f09041e2ff874947be4bbe65140cb288e", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=720425fa2dca0b7a69e28b1853932d5a77bf9333", "patch": "@@ -3873,13 +3873,6 @@ package body Sem_Ch12 is\n          Set_Ekind (Id, E_Generic_Procedure);\n       end if;\n \n-      --  Analyze the aspects of the generic copy to ensure that all generated\n-      --  pragmas (if any) perform their semantic effects.\n-\n-      if Has_Aspects (N) then\n-         Analyze_Aspect_Specifications (N, Id);\n-      end if;\n-\n       --  Set SPARK_Mode from context\n \n       Set_SPARK_Pragma           (Id, SPARK_Mode_Pragma);\n@@ -3951,6 +3944,13 @@ package body Sem_Ch12 is\n          Set_Etype (Id, Standard_Void_Type);\n       end if;\n \n+      --  Analyze the aspects of the generic copy to ensure that all generated\n+      --  pragmas (if any) perform their semantic effects.\n+\n+      if Has_Aspects (N) then\n+         Analyze_Aspect_Specifications (N, Id);\n+      end if;\n+\n       --  For a library unit, we have reconstructed the entity for the unit,\n       --  and must reset it in the library tables. We also make sure that\n       --  Body_Required is set properly in the original compilation unit node."}, {"sha": "808c77af0e85424c71237f214eef229295da8a69", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=720425fa2dca0b7a69e28b1853932d5a77bf9333", "patch": "@@ -2276,7 +2276,9 @@ package body Sem_Ch13 is\n \n                --  Annotation of a subprogram; aspect expression is required\n \n-               elsif Is_Subprogram_Or_Entry (E) then\n+               elsif Is_Subprogram_Or_Entry (E)\n+                 or else Is_Generic_Subprogram (E)\n+               then\n                   if Present (Expr) then\n \n                      --  If we analyze subprogram body that acts as its own\n@@ -2291,11 +2293,13 @@ package body Sem_Ch13 is\n                         Restore_Scope := True;\n                         Push_Scope (E);\n \n-                        if Is_Generic_Subprogram (E) then\n-                           Install_Generic_Formals (E);\n-                        else\n-                           Install_Formals (E);\n-                        end if;\n+                        --  Only formals of the subprogram itself can appear\n+                        --  in Relaxed_Initialization aspect expression, not\n+                        --  formals of the enclosing generic unit. (This is\n+                        --  different that in Precondition or Depends aspects,\n+                        --  where both kinds of formals are allowed.)\n+\n+                        Install_Formals (E);\n                      end if;\n \n                      --  Aspect expression is either an aggregate with list of"}, {"sha": "79a6a21b28458cf1a96ea3b7b6cb031c66e1f357", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720425fa2dca0b7a69e28b1853932d5a77bf9333/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=720425fa2dca0b7a69e28b1853932d5a77bf9333", "patch": "@@ -741,7 +741,7 @@ package Sem_Util is\n    --  Insert new name in symbol table of current scope with check for\n    --  duplications (error message is issued if a conflict is found).\n    --  Note: Enter_Name is not used for overloadable entities, instead these\n-   --  are entered using Sem_Ch6.Enter_Overloadable_Entity.\n+   --  are entered using Sem_Ch6.Enter_Overloaded_Entity.\n \n    function Entity_Of (N : Node_Id) return Entity_Id;\n    --  Obtain the entity of arbitrary node N. If N is a renaming, return the"}]}