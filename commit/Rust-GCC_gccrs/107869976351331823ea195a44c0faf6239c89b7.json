{"sha": "107869976351331823ea195a44c0faf6239c89b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3ODY5OTc2MzUxMzMxODIzZWExOTVhNDRjMGZhZjYyMzljODliNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-28T22:04:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-28T22:04:43Z"}, "message": "(call expanders): Reload the PIC register from the fixed callee saved register.\n\n(call expanders): Reload the PIC register from the fixed callee saved\nregister.  Don't try to save the PIC register before the call.\n\nFrom-SVN: r10089", "tree": {"sha": "6a07eb482d691c4e63cf4ea7fdc97b37208c8188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a07eb482d691c4e63cf4ea7fdc97b37208c8188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/107869976351331823ea195a44c0faf6239c89b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107869976351331823ea195a44c0faf6239c89b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107869976351331823ea195a44c0faf6239c89b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107869976351331823ea195a44c0faf6239c89b7/comments", "author": null, "committer": null, "parents": [{"sha": "853e4dfd6b4c79cb0948cda20af3b84d59fc531b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853e4dfd6b4c79cb0948cda20af3b84d59fc531b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853e4dfd6b4c79cb0948cda20af3b84d59fc531b"}], "stats": {"total": 56, "additions": 16, "deletions": 40}, "files": [{"sha": "03ae98ee510b99e5e44445ad93c1cdd352e23670", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107869976351331823ea195a44c0faf6239c89b7/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107869976351331823ea195a44c0faf6239c89b7/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=107869976351331823ea195a44c0faf6239c89b7", "patch": "@@ -3497,24 +3497,6 @@\n   else\n     op = XEXP (operands[0], 0);\n \n-  if (flag_pic)\n-    {\n-      if (!hppa_save_pic_table_rtx)\n-\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n-\n-      /* We must save and restore the PIC register around every call\n-\t since we don't have flow information to determine if this save\n-\t is redundant with a previous save.  The old code assumed once\n-\t the register was saved it never needs to be saved again, but\n-\t the save could have been on a path which doesn't always\n-\t execute; a call site physically later in the program would\n-\t then attempt a restore from an uninitialized register!  */\n-      emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t  hppa_save_pic_table_rtx,\n-\t\t\t  pic_offset_table_rtx));\n-\n-    }\n-\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -3530,8 +3512,14 @@\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n \n-      emit_insn (gen_rtx (SET, VOIDmode, pic_offset_table_rtx,\n-\t\t\t  hppa_save_pic_table_rtx));\n+      /* After each call we must restore the PIC register, even if it\n+\t doesn't appear to be used.\n+\n+         This will set regs_ever_live for the callee saved register we\n+\t stored the PIC register in.  */\n+      emit_move_insn (pic_offset_table_rtx,\n+\t\t      gen_rtx (REG, SImode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+      emit_insn (gen_rtx (USE, VOIDmode, pic_offset_table_rtx));\n     }\n   DONE;\n }\")\n@@ -3599,24 +3587,6 @@\n   else\n     op = XEXP (operands[1], 0);\n \n-  if (flag_pic)\n-    {\n-      if (!hppa_save_pic_table_rtx)\n-\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n-\n-      /* We must save and restore the PIC register around every call\n-\t since we don't have flow information to determine if this save\n-\t is redundant with a previous save.  The old code assumed once\n-\t the register was saved it never needs to be saved again, but\n-\t the save could have been on a path which doesn't always\n-\t execute; a call site physically later in the program would\n-\t then attempt a restore from an uninitialized register!  */\n-      emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t  hppa_save_pic_table_rtx,\n-\t\t\t  pic_offset_table_rtx));\n-\n-    }\n-\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -3635,8 +3605,14 @@\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n \n-      emit_insn (gen_rtx (SET, VOIDmode, pic_offset_table_rtx,\n-\t\t\t  hppa_save_pic_table_rtx));\n+      /* After each call we must restore the PIC register, even if it\n+\t doesn't appear to be used.\n+\n+         This will set regs_ever_live for the callee saved register we\n+\t stored the PIC register in.  */\n+      emit_move_insn (pic_offset_table_rtx,\n+\t\t      gen_rtx (REG, SImode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+      emit_insn (gen_rtx (USE, VOIDmode, pic_offset_table_rtx));\n     }\n   DONE;\n }\")"}]}