{"sha": "3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2NWJmYWI0YWJkMjk4Yjc3ZWQzYTkxYjEzYWM2YmI1YzUzMDViZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:50:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:50:22Z"}, "message": "[multiple changes]\n\n2014-06-11  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.ads: Minor reformatting.\n\t* checks.adb (Determine_Range): Do not attempt to determine\n\tthe range of a deferred constant whose full view has not been\n\tseen yet.\n\t* sem_res.adb (Resolve): Remove undesirable guard against\n\tresolving expressions from expression functions.\n\n2014-06-11  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb (Debug_Flag_Dot_1): Set to enable fix for anonymous\n\taccess types.\n\t* layout.adb (Layout_Type): Make anonymous access types for\n\tsubprogram formal types and return types always thin. For now\n\tonly enabled if -gnatd.1 set.\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Stream_TSS_Definition): Apply legality\n\trule for stream attributes of interface types (RM 13.13.2 (38/3)):\n\tsubprogram must be a null procedure.\n\nFrom-SVN: r211464", "tree": {"sha": "310e3b9e3509ccd53bfff9c5037d80d9a745ba8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/310e3b9e3509ccd53bfff9c5037d80d9a745ba8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/comments", "author": null, "committer": null, "parents": [{"sha": "0d305ef00438e2a7d3f225d5ff177de43f8514a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d305ef00438e2a7d3f225d5ff177de43f8514a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d305ef00438e2a7d3f225d5ff177de43f8514a6"}], "stats": {"total": 170, "additions": 108, "deletions": 62}, "files": [{"sha": "6371700a29798e40ee54a817162688677b015a71", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "patch": "@@ -1,3 +1,26 @@\n+2014-06-11  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.ads: Minor reformatting.\n+\t* checks.adb (Determine_Range): Do not attempt to determine\n+\tthe range of a deferred constant whose full view has not been\n+\tseen yet.\n+\t* sem_res.adb (Resolve): Remove undesirable guard against\n+\tresolving expressions from expression functions.\n+\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb (Debug_Flag_Dot_1): Set to enable fix for anonymous\n+\taccess types.\n+\t* layout.adb (Layout_Type): Make anonymous access types for\n+\tsubprogram formal types and return types always thin. For now\n+\tonly enabled if -gnatd.1 set.\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Stream_TSS_Definition): Apply legality\n+\trule for stream attributes of interface types (RM 13.13.2 (38/3)):\n+\tsubprogram must be a null procedure.\n+\n 2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Input_Item): Allow formal"}, {"sha": "7ec85992b10cb04c3c3d6ec912d41d549122b9c1", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "patch": "@@ -4118,26 +4118,37 @@ package body Checks is\n    --  Start of processing for Determine_Range\n \n    begin\n+      --  Prevent junk warnings by initializing range variables\n+\n+      Lo  := No_Uint;\n+      Hi  := No_Uint;\n+      Lor := No_Uint;\n+      Hir := No_Uint;\n+\n       --  For temporary constants internally generated to remove side effects\n       --  we must use the corresponding expression to determine the range of\n-      --  the expression.\n+      --  the expression. But note that the expander can also generate\n+      --  constants in other cases, including deferred constants.\n \n       if Is_Entity_Name (N)\n         and then Nkind (Parent (Entity (N))) = N_Object_Declaration\n         and then Ekind (Entity (N)) = E_Constant\n         and then Is_Internal_Name (Chars (Entity (N)))\n       then\n-         Determine_Range\n-           (Expression (Parent (Entity (N))), OK, Lo, Hi, Assume_Valid);\n-         return;\n-      end if;\n+         if Present (Expression (Parent (Entity (N)))) then\n+            Determine_Range\n+              (Expression (Parent (Entity (N))), OK, Lo, Hi, Assume_Valid);\n \n-      --  Prevent junk warnings by initializing range variables\n+         elsif Present (Full_View (Entity (N))) then\n+            Determine_Range\n+              (Expression (Parent (Full_View (Entity (N)))),\n+               OK, Lo, Hi, Assume_Valid);\n \n-      Lo  := No_Uint;\n-      Hi  := No_Uint;\n-      Lor := No_Uint;\n-      Hir := No_Uint;\n+         else\n+            OK := False;\n+         end if;\n+         return;\n+      end if;\n \n       --  If type is not defined, we can't determine its range\n "}, {"sha": "67a3e2ba4176bd721380f1024f40ead9b0a75706", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "patch": "@@ -155,7 +155,7 @@ package body Debug is\n    --  d8   Force opposite endianness in packed stuff\n    --  d9   Allow lock free implementation\n \n-   --  d.1\n+   --  d.1  Activate thin-as-default for subprogram anonymous access types\n    --  d.2\n    --  d.3\n    --  d.4\n@@ -733,6 +733,15 @@ package body Debug is\n    --  d9   This allows lock free implementation for protected objects\n    --       (see Exp_Ch9).\n \n+   --  d.1  Right now, we have a problem with anonymous access types in the\n+   --       context of subprogram formal parameter types and return types. The\n+   --       problem occurs when in one place (e.g. the subprogram spec), the\n+   --       designated type is unknown (e.g. private) and we choose to use a\n+   --       thin pointer representation. Then in another place, we can see the\n+   --       full declaration of the type, and choose a fat pointer. The fix is\n+   --       to always use thin pointers, but this is causing some other issues,\n+   --       so for now, this fix is under control of this debug flag.\n+\n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------"}, {"sha": "188ea5dc1d81dc5bc6c8723afaecc9fdceb61bcb", "filename": "gcc/ada/freeze.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Ffreeze.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Ffreeze.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.ads?ref=3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -195,7 +195,7 @@ package Freeze is\n    --  Returns No_List if no freeze nodes needed.\n \n    procedure Freeze_All (From : Entity_Id; After : in out Node_Id);\n-   --  Before a non-instance body, or at the end of a declarative part\n+   --  Before a non-instance body, or at the end of a declarative part,\n    --  freeze all entities therein that are not yet frozen. Calls itself\n    --  recursively to catch types in inner packages that were not frozen\n    --  at the inner level because they were not yet completely defined."}, {"sha": "306d5db877df282189e187ee7314c8c27610f71c", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "patch": "@@ -1200,8 +1200,7 @@ package body Layout is\n \n                   Len := Convert_To (Standard_Unsigned, Len);\n \n-                  --  If range definitely flat or superflat,\n-                  --  result size is zero\n+                  --  If range definitely flat or superflat, result size is 0\n \n                   if OK and then LHi <= 0 then\n                      Set_Esize (E, Uint_0);\n@@ -2432,7 +2431,6 @@ package body Layout is\n       --  represents them the same way.\n \n       if Is_Access_Type (E) then\n-\n          Desig_Type :=  Underlying_Type (Designated_Type (E));\n \n          --  If we only have a limited view of the type, see whether the\n@@ -2464,15 +2462,34 @@ package body Layout is\n             Set_Size_Info (E, Base_Type (E));\n             Set_RM_Size   (E, RM_Size (Base_Type (E)));\n \n+         --  Anonymous access types in subprogram specifications are always\n+         --  thin. In the unconstrained case we always use thin pointers for\n+         --  anonymous access types, because otherwise we get into strange\n+         --  conformance problems between two types, one of which can see\n+         --  that something is unconstrained and one of which cannot. The\n+         --  object of an extended return is treated similarly.\n+\n+         elsif Ekind (E) = E_Anonymous_Access_Type\n+           and then (Nkind_In (Associated_Node_For_Itype (E),\n+                               N_Function_Specification,\n+                               N_Procedure_Specification)\n+                      or else Ekind (Scope (E))  = E_Return_Statement)\n+\n+           --  For now, debug flag -gnatd.1 must be set to enable this fix\n+\n+           and then Debug_Flag_Dot_1\n+         then\n+            Init_Size (E, System_Address_Size);\n+\n          --  For other access types, we use either address size, or, if a fat\n          --  pointer is used (pointer-to-unconstrained array case), twice the\n          --  address size to accommodate a fat pointer.\n \n          elsif Present (Desig_Type)\n-            and then Is_Array_Type (Desig_Type)\n-            and then not Is_Constrained (Desig_Type)\n-            and then not Has_Completion_In_Body (Desig_Type)\n-            and then not Debug_Flag_6\n+           and then Is_Array_Type (Desig_Type)\n+           and then not Is_Constrained (Desig_Type)\n+           and then not Has_Completion_In_Body (Desig_Type)\n+           and then not Debug_Flag_6\n          then\n             Init_Size (E, 2 * System_Address_Size);\n \n@@ -2493,12 +2510,11 @@ package body Layout is\n          --  fat pointer.\n \n          elsif Present (Desig_Type)\n-            and then Present (Parent (Desig_Type))\n-            and then Nkind (Parent (Desig_Type)) = N_Full_Type_Declaration\n-            and then\n-              Nkind (Type_Definition (Parent (Desig_Type)))\n-                 = N_Unconstrained_Array_Definition\n-            and then not Debug_Flag_6\n+           and then Present (Parent (Desig_Type))\n+           and then Nkind (Parent (Desig_Type)) = N_Full_Type_Declaration\n+           and then Nkind (Type_Definition (Parent (Desig_Type))) =\n+                                             N_Unconstrained_Array_Definition\n+           and then not Debug_Flag_6\n          then\n             Init_Size (E, 2 * System_Address_Size);\n \n@@ -2519,6 +2535,9 @@ package body Layout is\n                        or else Present (Enclosing_Subprogram (E)))))\n          then\n             Init_Size (E, 2 * System_Address_Size);\n+\n+         --  Normal case of thin pointer\n+\n          else\n             Init_Size (E, System_Address_Size);\n          end if;"}, {"sha": "94cfd7187af6f90edf376c06b54a766387b367f0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "patch": "@@ -3213,6 +3213,21 @@ package body Sem_Ch13 is\n             if Is_Abstract_Subprogram (Subp) then\n                Error_Msg_N (\"stream subprogram must not be abstract\", Expr);\n                return;\n+\n+            --  Disable the following for now, until Polyorb issue is fixed.\n+\n+            elsif Is_Interface (U_Ent)\n+              and then not Inside_A_Generic\n+              and then Ekind (Subp) = E_Procedure\n+              and then\n+                not Null_Present\n+                  (Specification\n+                     (Unit_Declaration_Node (Ultimate_Alias (Subp))))\n+              and then False\n+            then\n+               Error_Msg_N\n+                 (\"stream subprogram for interface type \"\n+                  & \"must be null procedure\", Expr);\n             end if;\n \n             Set_Entity (Expr, Subp);"}, {"sha": "90a362c779974d3d2e8c50801ea8dcce7b72e170", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "patch": "@@ -1790,10 +1790,6 @@ package body Sem_Res is\n       --  Try and fix up a literal so that it matches its expected type. New\n       --  literals are manufactured if necessary to avoid cascaded errors.\n \n-      function Proper_Current_Scope return Entity_Id;\n-      --  Return the current scope. Skip loop scopes created for the purpose of\n-      --  quantified expression analysis since those do not appear in the tree.\n-\n       procedure Report_Ambiguous_Argument;\n       --  Additional diagnostics when an ambiguous call has an ambiguous\n       --  argument (typically a controlling actual).\n@@ -1856,30 +1852,6 @@ package body Sem_Res is\n          end if;\n       end Patch_Up_Value;\n \n-      --------------------------\n-      -- Proper_Current_Scope --\n-      --------------------------\n-\n-      function Proper_Current_Scope return Entity_Id is\n-         S : Entity_Id := Current_Scope;\n-\n-      begin\n-         while Present (S) loop\n-\n-            --  Skip a loop scope created for quantified expression analysis\n-\n-            if Ekind (S) = E_Loop\n-              and then Nkind (Parent (S)) = N_Quantified_Expression\n-            then\n-               S := Scope (S);\n-            else\n-               exit;\n-            end if;\n-         end loop;\n-\n-         return S;\n-      end Proper_Current_Scope;\n-\n       -------------------------------\n       -- Report_Ambiguous_Argument --\n       -------------------------------\n@@ -2933,15 +2905,12 @@ package body Sem_Res is\n          --  default expression mode (the Freeze_Expression routine tests this\n          --  flag and only freezes static types if it is set).\n \n-         --  Ada 2012 (AI05-177): Expression functions do not freeze. Only\n-         --  their use (in an expanded call) freezes.\n+         --  Ada 2012 (AI05-177): The declaration of an expression function\n+         --  does not cause freezing, but we never reach here in that case.\n+         --  Here we are resolving the corresponding expanded body, so we do\n+         --  need to perform normal freezing.\n \n-         if Ekind (Proper_Current_Scope) /= E_Function\n-           or else Nkind (Original_Node (Unit_Declaration_Node\n-                     (Proper_Current_Scope))) /= N_Expression_Function\n-         then\n-            Freeze_Expression (N);\n-         end if;\n+         Freeze_Expression (N);\n \n          --  Now we can do the expansion\n "}]}