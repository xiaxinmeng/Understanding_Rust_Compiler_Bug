{"sha": "9072db9d5b549db5e2f14335ac0adc7735d43bc6", "node_id": "C_kwDOANBUbNoAKDkwNzJkYjlkNWI1NDlkYjVlMmYxNDMzNWFjMGFkYzc3MzVkNDNiYzY", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-08-11T23:21:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-10-17T21:21:47Z"}, "message": "x86: Check corrupted return address when unwinding stack\n\nIf shadow stack is enabled, when unwinding stack, we count how many stack\nframes we pop to reach the landing pad and adjust shadow stack by the same\namount.  When counting the stack frame, we compare the return address on\nnormal stack against the return address on shadow stack.  If they don't\nmatch, return _URC_FATAL_PHASE2_ERROR for the corrupted return address on\nnormal stack.  Don't check the return address for\n\n1. Non-catchable exception where exception_class == 0.  Process will be\nterminated.\n2. Zero return address which marks the outermost stack frame.\n3. Signal stack frame since kernel puts a restore token on shadow stack.\n\n\t* unwind-generic.h (_Unwind_Frames_Increment): Add the EXC\n\targument.\n\t* unwind.inc (_Unwind_RaiseException_Phase2): Pass EXC to\n\t_Unwind_Frames_Increment.\n\t(_Unwind_ForcedUnwind_Phase2): Likewise.\n\t* config/i386/shadow-stack-unwind.h (_Unwind_Frames_Increment):\n\tTake the EXC argument.  Return _URC_FATAL_PHASE2_ERROR if the\n\treturn address on normal stack doesn't match the return address\n\ton shadow stack.", "tree": {"sha": "0c48f84e70e2698f8109b43b7abb97639dc58928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c48f84e70e2698f8109b43b7abb97639dc58928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9072db9d5b549db5e2f14335ac0adc7735d43bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9072db9d5b549db5e2f14335ac0adc7735d43bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9072db9d5b549db5e2f14335ac0adc7735d43bc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9072db9d5b549db5e2f14335ac0adc7735d43bc6/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84807af0ca6dfdb81abb8e925ce32acbcab29868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84807af0ca6dfdb81abb8e925ce32acbcab29868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84807af0ca6dfdb81abb8e925ce32acbcab29868"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "89d44165000ec9a5022797aa8a708f192f9e8121", "filename": "libgcc/config/i386/shadow-stack-unwind.h", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9072db9d5b549db5e2f14335ac0adc7735d43bc6/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9072db9d5b549db5e2f14335ac0adc7735d43bc6/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h?ref=9072db9d5b549db5e2f14335ac0adc7735d43bc6", "patch": "@@ -54,10 +54,39 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    aligned.  If the original shadow stack is 8 byte aligned, we just\n    need to pop 2 slots, one restore token, from shadow stack.  Otherwise,\n    we need to pop 3 slots, one restore token + 4 byte padding, from\n-   shadow stack.  */\n-#ifndef __x86_64__\n+   shadow stack.\n+\n+   When popping a stack frame, we compare the return address on normal\n+   stack against the return address on shadow stack.  If they don't match,\n+   return _URC_FATAL_PHASE2_ERROR for the corrupted return address on\n+   normal stack.  Don't check the return address for\n+   1. Non-catchable exception where exception_class == 0.  Process will\n+      be terminated.\n+   2. Zero return address which marks the outermost stack frame.\n+   3. Signal stack frame since kernel puts a restore token on shadow\n+      stack.\n+ */\n #undef _Unwind_Frames_Increment\n-#define _Unwind_Frames_Increment(context, frames)\t\\\n+#ifdef __x86_64__\n+#define _Unwind_Frames_Increment(exc, context, frames)\t\\\n+    {\t\t\t\t\t\t\t\\\n+      frames++;\t\t\t\t\t\t\\\n+      if (exc->exception_class != 0\t\t\t\\\n+\t  && _Unwind_GetIP (context) != 0\t\t\\\n+\t  && !_Unwind_IsSignalFrame (context))\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  _Unwind_Word ssp = _get_ssp ();\t\t\\\n+\t  if (ssp != 0)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\\\n+\t      ssp += 8 * frames;\t\t\t\\\n+\t      _Unwind_Word ra = *(_Unwind_Word *) ssp;\t\\\n+\t      if (ra != _Unwind_GetIP (context))\t\\\n+\t\treturn _URC_FATAL_PHASE2_ERROR;\t\t\\\n+\t    }\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\n+#else\n+#define _Unwind_Frames_Increment(exc, context, frames)\t\\\n   if (_Unwind_IsSignalFrame (context))\t\t\t\\\n     do\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n@@ -83,5 +112,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n       }\t\t\t\t\t\t\t\\\n     while (0);\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\\\n-    frames++;\n+    {\t\t\t\t\t\t\t\\\n+      frames++;\t\t\t\t\t\t\\\n+      if (exc->exception_class != 0\t\t\t\\\n+\t  && _Unwind_GetIP (context) != 0)\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  _Unwind_Word ssp = _get_ssp ();\t\t\\\n+\t  if (ssp != 0)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\\\n+\t      ssp += 4 * frames;\t\t\t\\\n+\t      _Unwind_Word ra = *(_Unwind_Word *) ssp;\t\\\n+\t      if (ra != _Unwind_GetIP (context))\t\\\n+\t\treturn _URC_FATAL_PHASE2_ERROR;\t\t\\\n+\t    }\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\n #endif"}, {"sha": "bf721282d03849ba62198a1562f4709d4c008938", "filename": "libgcc/unwind-generic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9072db9d5b549db5e2f14335ac0adc7735d43bc6/libgcc%2Funwind-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9072db9d5b549db5e2f14335ac0adc7735d43bc6/libgcc%2Funwind-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-generic.h?ref=9072db9d5b549db5e2f14335ac0adc7735d43bc6", "patch": "@@ -292,6 +292,6 @@ EXCEPTION_DISPOSITION _GCC_specific_handler (PEXCEPTION_RECORD, void *,\n #define _Unwind_Frames_Extra(frames)\n \n /* Increment frame count.  */\n-#define _Unwind_Frames_Increment(context, frames) frames++\n+#define _Unwind_Frames_Increment(exc, context, frames) frames++\n \n #endif /* unwind.h */"}, {"sha": "a7111a7b3a8f7200c59b1a81ac6b7d11fc767a2d", "filename": "libgcc/unwind.inc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9072db9d5b549db5e2f14335ac0adc7735d43bc6/libgcc%2Funwind.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9072db9d5b549db5e2f14335ac0adc7735d43bc6/libgcc%2Funwind.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind.inc?ref=9072db9d5b549db5e2f14335ac0adc7735d43bc6", "patch": "@@ -73,7 +73,7 @@ _Unwind_RaiseException_Phase2(struct _Unwind_Exception *exc,\n       gcc_assert (!match_handler);\n \n       uw_update_context (context, &fs);\n-      _Unwind_Frames_Increment (context, frames);\n+      _Unwind_Frames_Increment (exc, context, frames);\n     }\n \n   *frames_p = frames;\n@@ -191,7 +191,7 @@ _Unwind_ForcedUnwind_Phase2 (struct _Unwind_Exception *exc,\n       /* Update cur_context to describe the same frame as fs, and discard\n \t the previous context if necessary.  */\n       uw_advance_context (context, &fs);\n-      _Unwind_Frames_Increment (context, frames);\n+      _Unwind_Frames_Increment (exc, context, frames);\n     }\n \n   *frames_p = frames;"}]}