{"sha": "325187841aa66f0d03403d41fe9e696d094588b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1MTg3ODQxYWE2NmYwZDAzNDAzZDQxZmU5ZTY5NmQwOTQ1ODhiOQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T11:53:14Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T11:53:14Z"}, "message": "testsuite/arm: Fix and rename arm_qbit_ok into arm_sat_ok effective-target\n\nThe acle/saturation.c test uses __[su]sat() and\n__saturation_occurred() intrinsics but __[su]sat() are defined in\nacle.h if __ARM_FEATURE_SAT true, while __saturation_occurred()\ndepends on __ARM_FEATURE_QBIT.\n\nQBIT is a v5te feature, while SAT is available since v6, so the test\nreally needs __ARM_FEATURE_SAT, to have both available.\n\nThis patch renames arm_qbit_ok into arm_sat_ok and checks\n__ARM_FEATURE_SAT. It updates acle/saturation.c accordingly.\n\nThis enables the test to pass on arm-eabi with default cpu/fpu/mode,\nwhere arm_qbit previously used -march=armv5te instead of armv6 now.\n\n2021-05-17  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* doc/sourcebuild.texi (arm_qbit_ok): Rename into...\n\t(arm_sat_ok): ...this.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/acle/saturation.c: Use arm_sat_ok effective\n\ttarget.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_qbit_ok_nocache): Rename into...\n\t(check_effective_target_arm_sat_ok_nocache): ... this. Check\n\t__ARM_FEATURE_SAT and use armv6.", "tree": {"sha": "8715d5f5812728eb686d4196717b20023f5c0406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8715d5f5812728eb686d4196717b20023f5c0406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/325187841aa66f0d03403d41fe9e696d094588b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325187841aa66f0d03403d41fe9e696d094588b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325187841aa66f0d03403d41fe9e696d094588b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325187841aa66f0d03403d41fe9e696d094588b9/comments", "author": null, "committer": null, "parents": [{"sha": "582776eb1b62c32f5234566a01ea92247b7d6bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582776eb1b62c32f5234566a01ea92247b7d6bcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582776eb1b62c32f5234566a01ea92247b7d6bcc"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "ceb6b995283eb6206e89cb23d3e5c30a6fdfade9", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325187841aa66f0d03403d41fe9e696d094588b9/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325187841aa66f0d03403d41fe9e696d094588b9/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=325187841aa66f0d03403d41fe9e696d094588b9", "patch": "@@ -2125,9 +2125,9 @@ ARM Target supports options suitable for accessing the SIMD32 intrinsics from\n @code{arm_acle.h}.\n Some multilibs may be incompatible with these options.\n \n-@item arm_qbit_ok\n-@anchor{arm_qbit_ok}\n-ARM Target supports options suitable for accessing the Q-bit manipulation\n+@item arm_sat_ok\n+@anchor{arm_sat_ok}\n+ARM Target supports options suitable for accessing the saturation\n intrinsics from @code{arm_acle.h}.\n Some multilibs may be incompatible with these options.\n "}, {"sha": "a9f99e562c08da5de8741648be63051931dde012", "filename": "gcc/testsuite/gcc.target/arm/acle/saturation.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325187841aa66f0d03403d41fe9e696d094588b9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsaturation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325187841aa66f0d03403d41fe9e696d094588b9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsaturation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsaturation.c?ref=325187841aa66f0d03403d41fe9e696d094588b9", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_qbit_ok } */\n-/* { dg-add-options arm_qbit } */\n+/* { dg-require-effective-target arm_sat_ok } */\n+/* { dg-add-options arm_sat } */\n \n #include <arm_acle.h>\n "}, {"sha": "8192da5ec9fe2a39d379c948e21589855e0c98ea", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325187841aa66f0d03403d41fe9e696d094588b9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325187841aa66f0d03403d41fe9e696d094588b9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=325187841aa66f0d03403d41fe9e696d094588b9", "patch": "@@ -4180,42 +4180,42 @@ proc add_options_for_arm_simd32 { flags } {\n     return \"$flags $et_arm_simd32_flags\"\n }\n \n-# Return 1 if this is an ARM target supporting the saturation intrinsics\n-# from arm_acle.h.  Some multilibs may be incompatible with these options.\n-# Also set et_arm_qbit_flags to the best options to add.\n-# arm_acle.h includes stdint.h which can cause trouble with incompatible\n-# -mfloat-abi= options.\n-\n-proc check_effective_target_arm_qbit_ok_nocache { } {\n-    global et_arm_qbit_flags\n-    set et_arm_qbit_flags \"\"\n-    foreach flags {\"\" \"-march=armv5te\" \"-march=armv5te -mfloat-abi=softfp\" \"-march=armv5te -mfloat-abi=hard\"} {\n-      if { [check_no_compiler_messages_nocache et_arm_qbit_flags object {\n+# Return 1 if this is an ARM target supporting the __ssat and __usat\n+# saturation intrinsics from arm_acle.h.  Some multilibs may be\n+# incompatible with these options.  Also set et_arm_sat_flags to the\n+# best options to add.  arm_acle.h includes stdint.h which can cause\n+# trouble with incompatible -mfloat-abi= options.\n+\n+proc check_effective_target_arm_sat_ok_nocache { } {\n+    global et_arm_sat_flags\n+    set et_arm_sat_flags \"\"\n+    foreach flags {\"\" \"-march=armv6\" \"-march=armv6 -mfloat-abi=softfp\" \"-march=armv6 -mfloat-abi=hard -mfpu=vfp\"} {\n+      if { [check_no_compiler_messages_nocache et_arm_sat_flags object {\n \t#include <arm_acle.h>\n \tint dummy;\n-\t#ifndef __ARM_FEATURE_QBIT\n-\t#error not QBIT\n+\t#ifndef __ARM_FEATURE_SAT\n+\t#error not SAT\n \t#endif\n       } \"$flags\"] } {\n-\tset et_arm_qbit_flags $flags\n+\tset et_arm_sat_flags $flags\n \treturn 1\n       }\n     }\n \n   return 0\n }\n \n-proc check_effective_target_arm_qbit_ok { } {\n-    return [check_cached_effective_target et_arm_qbit_flags \\\n-\t\tcheck_effective_target_arm_qbit_ok_nocache]\n+proc check_effective_target_arm_sat_ok { } {\n+    return [check_cached_effective_target et_arm_sat_flags \\\n+\t\tcheck_effective_target_arm_sat_ok_nocache]\n }\n \n-proc add_options_for_arm_qbit { flags } {\n-    if { ! [check_effective_target_arm_qbit_ok] } {\n+proc add_options_for_arm_sat { flags } {\n+    if { ! [check_effective_target_arm_sat_ok] } {\n \treturn \"$flags\"\n     }\n-    global et_arm_qbit_flags\n-    return \"$flags $et_arm_qbit_flags\"\n+    global et_arm_sat_flags\n+    return \"$flags $et_arm_sat_flags\"\n }\n \n # Return 1 if this is an ARM target supporting the DSP intrinsics from"}]}