{"sha": "7fa658c2ccdcb482c5060a5cff71b416ae876dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZhNjU4YzJjY2RjYjQ4MmM1MDYwYTVjZmY3MWI0MTZhZTg3NmRiZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-13T02:13:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-13T02:13:15Z"}, "message": "cgraph.c (cgraph_node::get_untransformed_body): Pass compressed flag to lto_get_section_data.\n\n\n\t* cgraph.c (cgraph_node::get_untransformed_body): Pass compressed\n\tflag to lto_get_section_data.\n\t* varpool.c (varpool_node::get_constructor): Likewise.\n\t* lto-section-in.c (lto_get_section_data): Add new flag decompress.\n\t(lto_free_section_data): Likewise.\n\t(lto_get_raw_section_data): New function.\n\t(lto_free_raw_section_data): New function.\n\t(copy_function_or_variable): Copy sections w/o decompressing.\n\t(lto_output_decl_state_refs): Picke compressed bit.\n\t* lto-streamer.h (lto_in_decl_state): New flag compressed.\n\t(lto_out_decl_state): Likewise.\n\t(lto_get_section_data, lto_free_section_data): Update prototypes\n\t(lto_get_raw_section_data, lto_free_raw_section_data): Declare.\n\t(lto_write_raw_data): Declare.\n\t(lto_begin_section): Remove FIXME.\n\t(lto_write_raw_data): New function.\n\t(lto_write_stream): Remove FIXME.\n\t(lto_new_out_decl_state): Set compressed flag.\n\nFrom-SVN: r231594", "tree": {"sha": "53aa432f12e511d7d5bf93c922661e1f9b2417ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53aa432f12e511d7d5bf93c922661e1f9b2417ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fa658c2ccdcb482c5060a5cff71b416ae876dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa658c2ccdcb482c5060a5cff71b416ae876dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa658c2ccdcb482c5060a5cff71b416ae876dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa658c2ccdcb482c5060a5cff71b416ae876dbf/comments", "author": null, "committer": null, "parents": [{"sha": "ca83487662329ae9130ffbf72fae7dbfe4fddb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca83487662329ae9130ffbf72fae7dbfe4fddb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca83487662329ae9130ffbf72fae7dbfe4fddb83"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "f547cc3b62c6a168cf8bc2167c3b655689f954b5", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa658c2ccdcb482c5060a5cff71b416ae876dbf/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa658c2ccdcb482c5060a5cff71b416ae876dbf/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=7fa658c2ccdcb482c5060a5cff71b416ae876dbf", "patch": "@@ -66,9 +66,6 @@ lto_begin_section (const char *name, bool compress)\n {\n   lang_hooks.lto.begin_section (name);\n \n-  /* FIXME lto: for now, suppress compression if the lang_hook that appends\n-     data is anything other than assembler output.  The effect here is that\n-     we get compression of IL only in non-ltrans object files.  */\n   gcc_assert (compression_stream == NULL);\n   if (compress)\n     compression_stream = lto_start_compression (lto_append_data, NULL);\n@@ -99,6 +96,14 @@ lto_write_data (const void *data, unsigned int size)\n     lang_hooks.lto.append_data ((const char *)data, size, NULL);\n }\n \n+/* Write SIZE bytes starting at DATA to the assembler.  */\n+\n+void\n+lto_write_raw_data (const void *data, unsigned int size)\n+{\n+  lang_hooks.lto.append_data ((const char *)data, size, NULL);\n+}\n+\n /* Write all of the chars in OBS to the assembler.  Recycle the blocks\n    in obs as this is being done.  */\n \n@@ -123,10 +128,6 @@ lto_write_stream (struct lto_output_stream *obs)\n       if (!next_block)\n \tnum_chars -= obs->left_in_block;\n \n-      /* FIXME lto: WPA mode uses an ELF function as a lang_hook to append\n-         output data.  This hook is not happy with the way that compression\n-         blocks up output differently to the way it's blocked here.  So for\n-         now, we don't compress WPA output.  */\n       if (compression_stream)\n \tlto_compress_block (compression_stream, base, num_chars);\n       else\n@@ -295,6 +296,9 @@ lto_new_out_decl_state (void)\n   for (i = 0; i < LTO_N_DECL_STREAMS; i++)\n     lto_init_tree_ref_encoder (&state->streams[i]);\n \n+  /* At WPA time we do not compress sections by default.  */\n+  state->compressed = !flag_wpa;\n+\n   return state;\n }\n "}, {"sha": "049313dd1bdc90071acacd8d9220ded2e3397797", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa658c2ccdcb482c5060a5cff71b416ae876dbf/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa658c2ccdcb482c5060a5cff71b416ae876dbf/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=7fa658c2ccdcb482c5060a5cff71b416ae876dbf", "patch": "@@ -2191,22 +2191,23 @@ copy_function_or_variable (struct symtab_node *node)\n   struct lto_in_decl_state *in_state;\n   struct lto_out_decl_state *out_state = lto_get_out_decl_state ();\n \n-  lto_begin_section (section_name, !flag_wpa);\n+  lto_begin_section (section_name, false);\n   free (section_name);\n \n   /* We may have renamed the declaration, e.g., a static function.  */\n   name = lto_get_decl_name_mapping (file_data, name);\n \n-  data = lto_get_section_data (file_data, LTO_section_function_body,\n-                               name, &len);\n+  data = lto_get_raw_section_data (file_data, LTO_section_function_body,\n+                                   name, &len);\n   gcc_assert (data);\n \n   /* Do a bit copy of the function body.  */\n-  lto_write_data (data, len);\n+  lto_write_raw_data (data, len);\n \n   /* Copy decls. */\n   in_state =\n     lto_get_function_in_decl_state (node->lto_file_data, function);\n+  out_state->compressed = in_state->compressed;\n   gcc_assert (in_state);\n \n   for (i = 0; i < LTO_N_DECL_STREAMS; i++)\n@@ -2224,8 +2225,8 @@ copy_function_or_variable (struct symtab_node *node)\n \tencoder->trees.safe_push ((*trees)[j]);\n     }\n \n-  lto_free_section_data (file_data, LTO_section_function_body, name,\n-\t\t\t data, len);\n+  lto_free_raw_section_data (file_data, LTO_section_function_body, name,\n+\t\t\t     data, len);\n   lto_end_section ();\n }\n \n@@ -2431,6 +2432,7 @@ lto_output_decl_state_refs (struct output_block *ob,\n   decl = (state->fn_decl) ? state->fn_decl : void_type_node;\n   streamer_tree_cache_lookup (ob->writer_cache, decl, &ref);\n   gcc_assert (ref != (unsigned)-1);\n+  ref = ref * 2 + (state->compressed ? 1 : 0);\n   lto_write_data (&ref, sizeof (uint32_t));\n \n   for (i = 0;  i < LTO_N_DECL_STREAMS; i++)"}]}