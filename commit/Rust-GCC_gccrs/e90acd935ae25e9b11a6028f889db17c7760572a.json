{"sha": "e90acd935ae25e9b11a6028f889db17c7760572a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYWNkOTM1YWUyNWU5YjExYTYwMjhmODg5ZGIxN2M3NzYwNTcyYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-07-29T11:00:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-07-29T11:00:58Z"}, "message": "flags.h (flag_really_no_inline): Remove.\n\n\n\n\t* flags.h (flag_really_no_inline): Remove.\n\t* cgraph.c (cgraph_function_possibly_inlined_p): Simplify.\n\t* toplev.c (flag_really_no_inline): Remove.\n\t* c-cppbuiltin.c (c_cpp_builtins): Use flag_no_inline.\n\t* ipa-inline.c (cgraph_decide_inlining): Do not check flag_no_inline.\n\t(cgraph_decide_inlining_incrementally): Likewise.\n\t(compute_inline_parameters): Likewise.\n\t* opts.c (decode_options): Simplify.\n\t* c-opts.c (c_common_post_options): Do not set flag_no_inline.\n\t* common.opt (finline): Initialize to 1.\n\t* tree-inline.c (inlinable_function_p): Check flag_no_inline.\n\n\t* lang.c (java_post_options): Remove handling of flag_no_inline.\n\n\t* misc.c (gnat_post_options): Do not set flag_no_inline.\n\n\t* options.c (gfc_post_options): Do not set flag_no_inline.\n\nFrom-SVN: r138238", "tree": {"sha": "715f5730772c8971b1400db96ba484d331fea296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/715f5730772c8971b1400db96ba484d331fea296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90acd935ae25e9b11a6028f889db17c7760572a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90acd935ae25e9b11a6028f889db17c7760572a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90acd935ae25e9b11a6028f889db17c7760572a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90acd935ae25e9b11a6028f889db17c7760572a/comments", "author": null, "committer": null, "parents": [{"sha": "bf08ebebc7fb2f16aa6095a10987196cb4267a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf08ebebc7fb2f16aa6095a10987196cb4267a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf08ebebc7fb2f16aa6095a10987196cb4267a78"}], "stats": {"total": 101, "additions": 40, "deletions": 61}, "files": [{"sha": "8f51561972eca64aa53aace1821c33aa091f0045", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1,4 +1,18 @@\n-2008-07-29  Jan HUbicka  <jh@suse.cz>\n+2008-07-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* flags.h (flag_really_no_inline): Remove.\n+\t* cgraph.c (cgraph_function_possibly_inlined_p): Simplify.\n+\t* toplev.c (flag_really_no_inline): Remove.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Use flag_no_inline.\n+\t* ipa-inline.c (cgraph_decide_inlining): Do not check flag_no_inline.\n+\t(cgraph_decide_inlining_incrementally): Likewise.\n+\t(compute_inline_parameters): Likewise.\n+\t* opts.c (decode_options): Simplify.\n+\t* c-opts.c (c_common_post_options): Do not set flag_no_inline.\n+\t* common.opt (finline): Initialize to 1.\n+\t* tree-inline.c (inlinable_function_p): Check flag_no_inline.\n+\n+2008-07-29  Jan Hubicka  <jh@suse.cz>\n \n \t* predict.c (always_optimize_for_size_p): New function.\n \t(optimize_bb_for_size_p, optimize_bb_for_speed_p,"}, {"sha": "611311c31e6ba72335a00dd219e85aef6366325b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1,3 +1,7 @@\n+2008-07-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* misc.c (gnat_post_options): Do not set flag_no_inline.\n+\n 2008-07-28  Richard Guenther  <rguenther@suse.de>\n \n \tMerge from gimple-tuples-branch."}, {"sha": "02397d7f44532dd7e4dcd7a5e4e15fa9e48a2009", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -340,9 +340,6 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   /* ??? The warning machinery is outsmarted by Ada.  */\n   warn_unused_parameter = 0;\n \n-  if (!flag_no_inline)\n-    flag_no_inline = 1;\n-\n   /* Force eliminate_unused_debug_types to 0 unless an explicit positive\n      -f has been passed.  This forces the default to 0 for Ada, which might\n      differ from the common default.  */"}, {"sha": "2d951fe450c05bc110d04c95332985120102d3da", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -636,7 +636,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \n   if (fast_math_flags_set_p ())\n     cpp_define (pfile, \"__FAST_MATH__\");\n-  if (flag_really_no_inline)\n+  if (flag_no_inline)\n     cpp_define (pfile, \"__NO_INLINE__\");\n   if (flag_signaling_nans)\n     cpp_define (pfile, \"__SUPPORT_SNAN__\");"}, {"sha": "8b31b8879e7cb129cf2f8bff26ff814bc13f108d", "filename": "gcc/c-opts.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1018,10 +1018,6 @@ c_common_post_options (const char **pfilename)\n   C_COMMON_OVERRIDE_OPTIONS;\n #endif\n \n-  /* Use tree inlining.  */\n-  if (!flag_no_inline)\n-    flag_no_inline = 1;\n-\n   /* By default we use C99 inline semantics in GNU99 or C99 mode.  C99\n      inline semantics are not supported in GNU89 or C89 mode.  */\n   if (flag_gnu89_inline == -1)\n@@ -1075,13 +1071,6 @@ c_common_post_options (const char **pfilename)\n   if (warn_overlength_strings == -1 || c_dialect_cxx ())\n     warn_overlength_strings = 0;\n \n-  /* Adjust various flags for C++ based on command-line settings.  */\n-  if (c_dialect_cxx ())\n-    {\n-      if (!flag_no_inline)\n-\tflag_no_inline = 1;\n-    } \n-\n   /* In C, -Wconversion enables -Wsign-conversion (unless disabled\n      through -Wno-sign-conversion). While in C++,\n      -Wsign-conversion needs to be requested explicitly.  */"}, {"sha": "b5564b679d41de4611bff6b1c8597f8ce686e3ba", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1149,7 +1149,7 @@ bool\n cgraph_function_possibly_inlined_p (tree decl)\n {\n   if (!cgraph_global_info_ready)\n-    return !DECL_UNINLINABLE (decl) && !flag_really_no_inline;\n+    return !DECL_UNINLINABLE (decl);\n   return DECL_POSSIBLY_INLINED (decl);\n }\n "}, {"sha": "08f95c228e679432de508f6189435ad4238a181b", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -581,7 +581,7 @@ Perform indirect inlining\n ; only when actually used.  Used in conjunction with -g.  Also\n ; does the right thing with #pragma interface.\n finline\n-Common Report Var(flag_no_inline,0) Init(2)\n+Common Report Var(flag_no_inline,0) Init(0)\n Pay attention to the \\\"inline\\\" keyword\n \n finline-small-functions"}, {"sha": "e797d95c885c0b2544ecb93a1d49854f7a6cc52c", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -169,11 +169,6 @@ extern int flag_pcc_struct_return;\n \n extern int flag_complex_method;\n \n-/* Nonzero means that we don't want inlining by virtue of -fno-inline,\n-   not just because the tree inliner turned us off.  */\n-\n-extern int flag_really_no_inline;\n-\n /* Nonzero if we are only using compiler to check syntax errors.  */\n \n extern int rtl_dump_and_exit;"}, {"sha": "872678d6e3a6f75658e208e4ee29c0d18558093d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1,3 +1,7 @@\n+2008-07-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* options.c (gfc_post_options): Do not set flag_no_inline.\n+\n 2008-07-29  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/36403"}, {"sha": "7b7916d46036de48643a0a2f20025813c9c5978f", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -294,10 +294,6 @@ gfc_post_options (const char **pfilename)\n \tgfc_warning_now (\"'-fd-lines-as-code' has no effect in free form\");\n     }\n \n-  /* Use tree inlining.  */\n-  if (!flag_no_inline)\n-    flag_no_inline = 1;\n-\n   /* If -pedantic, warn about the use of GNU extensions.  */\n   if (pedantic && (gfc_option.allow_std & GFC_STD_GNU) != 0)\n     gfc_option.warn_std |= GFC_STD_GNU;"}, {"sha": "ec3a2719ac2f5adc316e5690a8ac9aff2ad4795c", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1159,16 +1159,14 @@ cgraph_decide_inlining (void)\n \t\t overall_insns - old_insns);\n     }\n \n-  if (!flag_really_no_inline)\n-    cgraph_decide_inlining_of_small_functions ();\n+  cgraph_decide_inlining_of_small_functions ();\n \n   /* After this point, any edge discovery performed by indirect inlining is no\n      good so let's give up. */\n   if (flag_indirect_inlining)\n     free_all_ipa_structures_after_iinln ();\n \n-  if (!flag_really_no_inline\n-      && flag_inline_functions_called_once)\n+  if (flag_inline_functions_called_once)\n     {\n       if (dump_file)\n \tfprintf (dump_file, \"\\nDeciding on functions called once:\\n\");\n@@ -1407,9 +1405,7 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n     }\n \n   /* Now do the automatic inlining.  */\n-  if (!flag_really_no_inline\n-      && mode != INLINE_ALL\n-      && mode != INLINE_ALWAYS_INLINE)\n+  if (mode != INLINE_ALL && mode != INLINE_ALWAYS_INLINE)\n     for (e = node->callees; e; e = e->next_callee)\n       {\n \tif (!e->callee->local.inlinable\n@@ -1596,8 +1592,6 @@ compute_inline_parameters (struct cgraph_node *node)\n   if (node->local.inlinable && !node->local.disregard_inline_limits)\n     node->local.disregard_inline_limits\n       = DECL_DISREGARD_INLINE_LIMITS (current_function_decl);\n-  if (flag_really_no_inline && !node->local.disregard_inline_limits)\n-    node->local.inlinable = 0;\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */\n   node->global.insns = inline_summary (node)->self_insns;\n   return 0;"}, {"sha": "022cff0d0c5bb7af6ac61e60814a0aec272e93bc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1,3 +1,7 @@\n+2008-07-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lang.c (java_post_options): Remove handling of flag_no_inline.\n+\n 2008-07-28  Richard Guenther  <rguenther@suse.de>\n \n \tMerge from gimple-tuples-branch."}, {"sha": "27383762add0377776671e4a8fa641684f5a07dc", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -532,10 +532,6 @@ java_post_options (const char **pfilename)\n {\n   const char *filename = *pfilename;\n \n-  /* Use tree inlining.  */\n-  if (!flag_no_inline)\n-    flag_no_inline = 1;\n-\n   /* An absolute requirement: if we're not using indirect dispatch, we\n      must always verify everything.  */\n   if (! flag_indirect_dispatch)"}, {"sha": "13a7de1709fa7b4228973da453493797b66cf839", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1072,24 +1072,14 @@ decode_options (unsigned int argc, const char **argv)\n \tflag_pic = flag_pie;\n       if (flag_pic && !flag_pie)\n \tflag_shlib = 1;\n-\n-      if (flag_no_inline == 2)\n-\tflag_no_inline = 0;\n-      else\n-\tflag_really_no_inline = flag_no_inline;\n     }\n \n-  /* Set flag_no_inline before the post_options () hook.  The C front\n-     ends use it to determine tree inlining defaults.  FIXME: such\n-     code should be lang-independent when all front ends use tree\n-     inlining, in which case it, and this condition, should be moved\n-     to the top of process_options() instead.  */\n   if (optimize == 0)\n     {\n       /* Inlining does not work if not optimizing,\n \t so force it not to be done.  */\n-      flag_no_inline = 1;\n       warn_inline = 0;\n+      flag_no_inline = 1;\n \n       /* The c_decode_option function and decode_option hook set\n \t this to `2' if -Wall is used, so we can avoid giving out\n@@ -1099,9 +1089,6 @@ decode_options (unsigned int argc, const char **argv)\n \t\t \"-Wuninitialized is not supported without -O\");\n     }\n \n-  if (flag_really_no_inline == 2)\n-    flag_really_no_inline = flag_no_inline;\n-\n   /* The optimization to partition hot and cold basic blocks into separate\n      sections of the .o and executable files does not work (currently)\n      with exception handling.  This is because there is no support for"}, {"sha": "cba3ac04df1ba8c5d8ca07cd578366537ec1c20f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -1,3 +1,7 @@\n+2008-07-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/20040206-1.c: Expect frontend warning now.\n+\n 2008-07-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 34985"}, {"sha": "c9c776f0bd01345e306d14eb44cd4d2ba346293f", "filename": "gcc/testsuite/gcc.dg/20040206-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftestsuite%2Fgcc.dg%2F20040206-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftestsuite%2Fgcc.dg%2F20040206-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040206-1.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -7,5 +7,5 @@\n     The warning about \"no return statement in function\n     returning non-void\" is PR 13000. */\n \n-static int foo (int a __attribute__((unused)) ) { } /* { dg-warning \"control reaches end of non-void\" } */\n+static int foo (int a __attribute__((unused)) ) { } /* { dg-warning \"no return statement\" } */\n int main (void) { return foo (0); }"}, {"sha": "d717ebace2a8807bcc77d92ab520ac2721876da3", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -245,11 +245,6 @@ int flag_pcc_struct_return = DEFAULT_PCC_STRUCT_RETURN;\n \n int flag_complex_method = 1;\n \n-/* Nonzero means that we don't want inlining by virtue of -fno-inline,\n-   not just because the tree inliner turned us off.  */\n-\n-int flag_really_no_inline = 2;\n-\n /* Nonzero means we should be saving declaration info into a .X file.  */\n \n int flag_gen_aux_info = 0;"}, {"sha": "a10586128e8a97417277ef6c9eb85bc3f4142642", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90acd935ae25e9b11a6028f889db17c7760572a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e90acd935ae25e9b11a6028f889db17c7760572a", "patch": "@@ -2554,7 +2554,7 @@ inlinable_function_p (tree fn)\n \n   always_inline = lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn));\n \n-  if (flag_really_no_inline\n+  if (flag_no_inline\n       && always_inline == NULL)\n     {\n       if (do_warning)"}]}