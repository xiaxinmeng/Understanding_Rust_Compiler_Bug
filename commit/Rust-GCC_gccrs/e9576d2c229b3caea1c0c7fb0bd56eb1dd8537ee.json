{"sha": "e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1NzZkMmMyMjliM2NhZWExYzBjN2ZiMGJkNTZlYjFkZDg1MzdlZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.ai.mit.edu", "date": "1997-08-19T15:51:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-19T15:51:10Z"}, "message": "expr.h, real.h: Finish prototyping.\n\n        * expr.h, real.h: Finish prototyping.\nSome of hj's prototyping stuff after minor formatting fixes.\n\nFrom-SVN: r14846", "tree": {"sha": "7cf181aafb185bb77524ed8abb6d24ee1b17c180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf181aafb185bb77524ed8abb6d24ee1b17c180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee/comments", "author": null, "committer": null, "parents": [{"sha": "e933cbe00706dc7e5f991cab06966b4ebf2d361f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e933cbe00706dc7e5f991cab06966b4ebf2d361f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e933cbe00706dc7e5f991cab06966b4ebf2d361f"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "1b1beacc56ff00d41782550c876d279da38010d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee", "patch": "@@ -3,6 +3,10 @@ Tue Aug 19 09:34:57 1997  Jeffrey A Law  (law@cygnus.com)\n \t* Makefile.in (EXPECT, RUNTEST, RUNTESTFLAGS): Define.\n \t(site.exp, check, check-g++, check-gcc): New targets.\n \n+Tue Aug 19 07:18:34 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n+\n+\t* expr.h, real.h: Finish prototyping.\n+\n Mon Aug 18 17:39:02 1997  Mike Meissner  <meissner@cygnus.com>\n \n \t* configure.in ({powerpc,rs6000}*-*-*, --with-cpu): Remove single"}, {"sha": "fa7b7edd81c6e29e7e3f2ac38ad1098fbe8e440f", "filename": "gcc/expr.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee", "patch": "@@ -315,7 +315,7 @@ typedef struct optab\n #define GEN_FCN(CODE) (*insn_gen_function[(int) (CODE)])\n #endif\n \n-extern rtx (*const insn_gen_function[]) ();\n+extern rtx (*const insn_gen_function[]) PROTO ((rtx, ...));\n \n extern optab add_optab;\n extern optab sub_optab;\n@@ -507,7 +507,7 @@ extern rtx chkr_set_right_libfunc;\n extern rtx chkr_copy_bitmap_libfunc;\n extern rtx chkr_check_exec_libfunc;\n \f\n-typedef rtx (*rtxfun) ();\n+typedef rtx (*rtxfun) PROTO ((rtx));\n \n /* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n    gives the gen_function to make a branch to test that condition.  */\n@@ -595,6 +595,7 @@ rtx emit_conditional_move PROTO((rtx, enum rtx_code, rtx, rtx,\n \n /* Return non-zero if the conditional move is supported.  */\n int can_conditionally_move_p PROTO((enum machine_mode mode));\n+\n #endif\n \n /* Create but don't emit one rtl instruction to add one rtx into another.\n@@ -931,7 +932,9 @@ extern rtx assemble_static_space PROTO((int));\n /* Hook called by expand_expr for language-specific tree codes.\n    It is up to the language front end to install a hook\n    if it has any such codes that expand_expr needs to know about.  */\n-extern rtx (*lang_expand_expr) ();\n+extern rtx (*lang_expand_expr) PROTO ((union tree_node *, rtx,\n+\t\t\t\t       enum machine_mode,\n+\t\t\t\t       enum expand_modifier modifier));\n \n #ifdef TREE_CODE\n /* Build bytecode call descriptor for function SUBR. */\n@@ -942,3 +945,10 @@ extern rtx bc_build_calldesc PROTO((tree));\n    plus the minimal alignment shifted left 8 bits.  */\n extern tree bc_runtime_type_code PROTO((tree));\n #endif\n+\n+extern void init_all_optabs\t\t\tPROTO ((void));\n+extern void init_mov_optab\t\t\tPROTO ((void));\n+extern void bc_adjust_stack\t\t\tPROTO ((int));\n+extern void bc_load_localaddr\t\t\tPROTO ((rtx));\n+extern void do_jump_by_parts_greater_rtx\tPROTO ((enum machine_mode, int,\n+\t\t\t\t\t\t\trtx, rtx, rtx, rtx));"}, {"sha": "835c702f7d313393ea2da37af61128db543a4fec", "filename": "gcc/real.h", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=e9576d2c229b3caea1c0c7fb0bd56eb1dd8537ee", "patch": "@@ -166,7 +166,8 @@ extern REAL_VALUE_TYPE ereal_from_double PROTO((HOST_WIDE_INT *));\n /* These return REAL_VALUE_TYPE: */\n #define REAL_VALUE_RNDZINT(x) (etrunci (x))\n #define REAL_VALUE_UNSIGNED_RNDZINT(x) (etruncui (x))\n-extern REAL_VALUE_TYPE real_value_truncate ();\n+extern REAL_VALUE_TYPE real_value_truncate\tPROTO ((enum machine_mode,\n+\t\t\t\t\t\t\tREAL_VALUE_TYPE));\n #define REAL_VALUE_TRUNCATE(mode, x)  real_value_truncate (mode, x)\n \n /* These return HOST_WIDE_INT: */\n@@ -360,7 +361,8 @@ extern double (atof) ();\n    size and where `float' is SFmode.  */\n \n /* Don't use REAL_VALUE_TRUNCATE directly--always call real_value_truncate.  */\n-extern REAL_VALUE_TYPE real_value_truncate ();\n+extern REAL_VALUE_TYPE real_value_truncate\tPROTO ((enum machine_mode,\n+\t\t\t\t\t\t\tREAL_VALUE_TYPE));\n \n #ifndef REAL_VALUE_TRUNCATE\n #define REAL_VALUE_TRUNCATE(mode, x) \\\n@@ -421,11 +423,12 @@ union real_extract\n    or cc0_rtx if it is not on the chain.  */\n #define CONST_DOUBLE_MEM(r) XEXP (r, 0)\n \n+/* Given a CONST_DOUBLE in FROM, store into TO the value it represents.  */\n /* Function to return a real value (not a tree node)\n    from a given integer constant.  */\n-REAL_VALUE_TYPE real_value_from_int_cst ();\n-\n-/* Given a CONST_DOUBLE in FROM, store into TO the value it represents.  */\n+union tree_node;\n+REAL_VALUE_TYPE real_value_from_int_cst\tPROTO ((union tree_node *,\n+\t\t\t\t\t\tunion tree_node *));\n \n #define REAL_VALUE_FROM_CONST_DOUBLE(to, from)\t\t\\\n do { union real_extract u;\t\t\t\t\\\n@@ -449,4 +452,13 @@ extern struct rtx_def *immed_real_const_1\tPROTO((REAL_VALUE_TYPE,\n /* Replace R by 1/R in the given machine mode, if the result is exact.  */\n extern int exact_real_inverse PROTO((enum machine_mode, REAL_VALUE_TYPE *));\n \n+extern int target_isnan\t\t\tPROTO ((REAL_VALUE_TYPE));\n+extern int target_isinf\t\t\tPROTO ((REAL_VALUE_TYPE));\n+extern int target_negative\t\tPROTO ((REAL_VALUE_TYPE));\n+extern void debug_real\t\t\tPROTO ((REAL_VALUE_TYPE));\n+\n+/* In varasm.c */\n+extern void assemble_real\t\tPROTO ((REAL_VALUE_TYPE,\n+\t\t\t\t\t\tenum machine_mode));\n+\n #endif /* Not REAL_H_INCLUDED */"}]}