{"sha": "df049e595fcfd94fda08283ae57bbeaa36947854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwNDllNTk1ZmNmZDk0ZmRhMDgyODNhZTU3YmJlYWEzNjk0Nzg1NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-09-09T03:13:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-09-09T03:13:45Z"}, "message": "builtins-1.c: Test existing _Complex functions.\n\n\t* gcc.dg/builtins-1.c: Test existing _Complex functions.\n\t* gcc.dg/torture/builtin-attr-1.c: Likewise.\n\nFrom-SVN: r71225", "tree": {"sha": "c34ed4f00c2820900bf0afb1a25c5573219db965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c34ed4f00c2820900bf0afb1a25c5573219db965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df049e595fcfd94fda08283ae57bbeaa36947854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df049e595fcfd94fda08283ae57bbeaa36947854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df049e595fcfd94fda08283ae57bbeaa36947854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df049e595fcfd94fda08283ae57bbeaa36947854/comments", "author": null, "committer": null, "parents": [{"sha": "263594d2e451ec829995dde3c6de3b1b3b6eb293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263594d2e451ec829995dde3c6de3b1b3b6eb293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263594d2e451ec829995dde3c6de3b1b3b6eb293"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "b50ad3df3ee89aa4fe32bd9a85585304d4c20ca4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df049e595fcfd94fda08283ae57bbeaa36947854/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df049e595fcfd94fda08283ae57bbeaa36947854/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df049e595fcfd94fda08283ae57bbeaa36947854", "patch": "@@ -1,3 +1,8 @@\n+2003-09-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-1.c: Test existing _Complex functions.\n+\t* gcc.dg/torture/builtin-attr-1.c: Likewise.\n+\n 2003-09-08  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11786"}, {"sha": "adb27c26c8f9ccb000740e232f28c21c0ac1c51d", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df049e595fcfd94fda08283ae57bbeaa36947854/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df049e595fcfd94fda08283ae57bbeaa36947854/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=df049e595fcfd94fda08283ae57bbeaa36947854", "patch": "@@ -84,6 +84,25 @@ double test_##FN(double x, double *y, double *z) { __builtin_##FN(x, y, z); retu\n float test_##FN##f(float x, float *y, float *z) { __builtin_##FN##f(x, y, z); return *y * *z; } \\\n long double test_##FN##l(long double x, long double *y, long double *z) { __builtin_##FN##l(x, y, z); return *y * *z; } \n \n+/* Test Complex functions taking one Complex argument.  */\n+#define CPTEST1(FN) \\\n+_Complex double test_##FN(_Complex double x) { return __builtin_##FN(x); } \\\n+_Complex float test_##FN##f(_Complex float x) { return __builtin_##FN##f(x); } \\\n+_Complex long double test_##FN##l(_Complex long double x) { return __builtin_##FN##l(x); } \n+\n+/* Test Complex functions taking one Complex argument and returning an FP type.  */\n+#define CPTEST1RETFP(FN) \\\n+double test_##FN(_Complex double x) { return __builtin_##FN(x); } \\\n+float test_##FN##f(_Complex float x) { return __builtin_##FN##f(x); } \\\n+long double test_##FN##l(_Complex long double x) { return __builtin_##FN##l(x); } \n+\n+/* Test Complex functions taking two Complex arguments.  */\n+#define CPTEST2(FN) \\\n+_Complex double test_##FN(_Complex double x, _Complex double y) { return __builtin_##FN(x,y); } \\\n+_Complex float test_##FN##f(_Complex float x, _Complex float y) { return __builtin_##FN##f(x,y); } \\\n+_Complex long double test_##FN##l(_Complex long double x, _Complex long double y) { return __builtin_##FN##l(x,y); } \n+\n+\n /* Keep this list sorted alphabetically by function name.  */\n FPTEST1     (acos)\n FPTEST1     (acosh)\n@@ -158,3 +177,9 @@ FPTEST1     (trunc)\n FPTEST1     (y0)\n FPTEST1     (y1)\n FPTEST2ARG1 (yn, int)\n+\n+/* Keep this list sorted alphabetically by function name.  */\n+CPTEST1RETFP (cabs)\n+CPTEST1RETFP (cimag)\n+CPTEST1      (conj)\n+CPTEST1RETFP (creal)"}, {"sha": "451081da1abe3bee674b8e3b7fb75e677026df13", "filename": "gcc/testsuite/gcc.dg/torture/builtin-attr-1.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df049e595fcfd94fda08283ae57bbeaa36947854/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df049e595fcfd94fda08283ae57bbeaa36947854/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c?ref=df049e595fcfd94fda08283ae57bbeaa36947854", "patch": "@@ -124,6 +124,32 @@ void test_builtin_##FN##f(float f1, float f2, float f3) \\\n void test_builtin_##FN##l(long double ld1, long double ld2, long double ld3) \\\n { if (__builtin_##FN##l(ld1,ld2,ld3) != __builtin_##FN##l(ld1,ld2,ld3)) link_failure_builtin_##FN##l(); }\n \n+/* Test the __builtin_ functions taking one complex argument (with the\n+   \"f\" and \"l\" variants).  */\n+#define BUILTIN_CPTEST1(FN) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(_Complex double d) \\\n+{ if (__builtin_##FN(d) != __builtin_##FN(d)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(_Complex float f) \\\n+{ if (__builtin_##FN##f(f) != __builtin_##FN##f(f)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(_Complex long double ld) \\\n+{ if (__builtin_##FN##l(ld) != __builtin_##FN##l(ld)) link_failure_builtin_##FN##l(); }\n+\n+/* Test the __builtin_ functions taking two complex arguments (with\n+   the \"f\" and \"l\" variants).  */\n+#define BUILTIN_CPTEST2(FN) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(_Complex double d1, _Complex double d2) \\\n+{ if (__builtin_##FN(d1,d2) != __builtin_##FN(d1,d2)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(_Complex float f1, _Complex float f2) \\\n+{ if (__builtin_##FN##f(f1,f2) != __builtin_##FN##f(f1,f2)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(_Complex long double ld1, _Complex long double ld2) \\\n+{ if (__builtin_##FN##l(ld1,ld2) != __builtin_##FN##l(ld1,ld2)) link_failure_builtin_##FN##l(); }\n+\n /* These macros additionally test the non-__builtin_ functions.  */\n \n /* Test the functions taking one FP argument (with the \"f\" and \"l\"\n@@ -198,6 +224,34 @@ void test_##FN##f(float f1, float f2, float f3) \\\n void test_##FN##l(long double ld1, long double ld2, long double ld3) \\\n { if (FN##l(ld1,ld2,ld3) != FN##l(ld1,ld2,ld3)) link_failure_##FN##l(); }\n \n+/* Test the functions taking one complex argument (with the \"f\" and\n+   \"l\" variants).  */\n+#define CPTEST1(FN) \\\n+BUILTIN_CPTEST1(FN) \\\n+extern void link_failure_##FN(void); \\\n+extern void link_failure_##FN##f(void); \\\n+extern void link_failure_##FN##l(void); \\\n+void test_##FN(_Complex double d) \\\n+{ if (FN(d) != FN(d)) link_failure_##FN(); } \\\n+void test_##FN##f(_Complex float f) \\\n+{ if (FN##f(f) != FN##f(f)) link_failure_##FN##f(); } \\\n+void test_##FN##l(_Complex long double ld) \\\n+{ if (FN##l(ld) != FN##l(ld)) link_failure_##FN##l(); }\n+\n+/* Test the functions taking two complex arguments (with the \"f\" and\n+   \"l\" variants).  */\n+#define CPTEST2(FN) \\\n+BUILTIN_CPTEST2(FN) \\\n+extern void link_failure_##FN(void); \\\n+extern void link_failure_##FN##f(void); \\\n+extern void link_failure_##FN##l(void); \\\n+void test_##FN(_Complex double d1, _Complex double d2) \\\n+{ if (FN(d1,d2) != FN(d1,d2)) link_failure_##FN(); } \\\n+void test_##FN##f(_Complex float f1, _Complex float f2) \\\n+{ if (FN##f(f1,f2) != FN##f(f1,f2)) link_failure_##FN##f(); } \\\n+void test_##FN##l(_Complex long double ld1, _Complex long double ld2) \\\n+{ if (FN##l(ld1,ld2) != FN##l(ld1,ld2)) link_failure_##FN##l(); }\n+\n \n /* Test the math builtins.  */\n FPTEST1            (acos)\n@@ -270,6 +324,12 @@ FPTEST1            (y0)\n FPTEST1            (y1)\n FPTEST2ARG1        (yn, int)\n \n+/* Test the complex math builtins.  */\n+/*CPTEST1 (cabs) See http://gcc.gnu.org/ml/gcc-patches/2003-09/msg00040.html */\n+CPTEST1 (cimag)\n+CPTEST1 (conj)\n+CPTEST1 (creal)\n+\n /* Various other const builtins.  */\n TEST1         (abs, int)\n BUILTIN_TEST1 (clz, int)"}]}