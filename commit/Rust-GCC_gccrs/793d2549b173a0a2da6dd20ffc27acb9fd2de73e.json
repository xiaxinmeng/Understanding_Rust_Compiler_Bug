{"sha": "793d2549b173a0a2da6dd20ffc27acb9fd2de73e", "node_id": "C_kwDOANBUbNoAKDc5M2QyNTQ5YjE3M2EwYTJkYTZkZDIwZmZjMjdhY2I5ZmQyZGU3M2U", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-19T10:40:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-19T11:34:47Z"}, "message": "Refactor load/store costing\n\nThis passes down the already available alignment scheme and\nmisalignment to the load/store costing routines, removing\nredundant queries.\n\n2021-10-19  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vect_get_store_cost): Adjust signature.\n\t(vect_get_load_cost): Likewise.\n\t* tree-vect-data-refs.c (vect_get_data_access_cost): Get\n\talignment support scheme and misalignment as arguments\n\tand pass them down.\n\t(vect_get_peeling_costs_all_drs): Compute that info here\n\tand note that we shouldn't need to.\n\t* tree-vect-stmts.c (vect_model_store_cost): Get\n\talignment support scheme and misalignment as arguments.\n\t(vect_get_store_cost): Likewise.\n\t(vect_model_load_cost): Likewise.\n\t(vect_get_load_cost): Likewise.\n\t(vectorizable_store): Pass down alignment support scheme\n\tand misalignment to costing.\n\t(vectorizable_load): Likewise.", "tree": {"sha": "a3429be473786b7d96337556df61701ec542e039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3429be473786b7d96337556df61701ec542e039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793d2549b173a0a2da6dd20ffc27acb9fd2de73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793d2549b173a0a2da6dd20ffc27acb9fd2de73e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793d2549b173a0a2da6dd20ffc27acb9fd2de73e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793d2549b173a0a2da6dd20ffc27acb9fd2de73e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9890b12c72c02828c691f22198c3e0afd8678991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9890b12c72c02828c691f22198c3e0afd8678991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9890b12c72c02828c691f22198c3e0afd8678991"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "0db6aec7312ee307383549d7db267fbcdbf548a1", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d2549b173a0a2da6dd20ffc27acb9fd2de73e/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d2549b173a0a2da6dd20ffc27acb9fd2de73e/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=793d2549b173a0a2da6dd20ffc27acb9fd2de73e", "patch": "@@ -1396,7 +1396,9 @@ vector_alignment_reachable_p (dr_vec_info *dr_info)\n \n static void\n vect_get_data_access_cost (vec_info *vinfo, dr_vec_info *dr_info,\n-                           unsigned int *inside_cost,\n+\t\t\t   dr_alignment_support alignment_support_scheme,\n+\t\t\t   int misalignment,\n+\t\t\t   unsigned int *inside_cost,\n                            unsigned int *outside_cost,\n \t\t\t   stmt_vector_for_cost *body_cost_vec,\n \t\t\t   stmt_vector_for_cost *prologue_cost_vec)\n@@ -1411,10 +1413,12 @@ vect_get_data_access_cost (vec_info *vinfo, dr_vec_info *dr_info,\n     ncopies = vect_get_num_copies (loop_vinfo, STMT_VINFO_VECTYPE (stmt_info));\n \n   if (DR_IS_READ (dr_info->dr))\n-    vect_get_load_cost (vinfo, stmt_info, ncopies, true, inside_cost,\n+    vect_get_load_cost (vinfo, stmt_info, ncopies, alignment_support_scheme,\n+\t\t\tmisalignment, true, inside_cost,\n \t\t\toutside_cost, prologue_cost_vec, body_cost_vec, false);\n   else\n-    vect_get_store_cost (vinfo,stmt_info, ncopies, inside_cost, body_cost_vec);\n+    vect_get_store_cost (vinfo,stmt_info, ncopies, alignment_support_scheme,\n+\t\t\t misalignment, inside_cost, body_cost_vec);\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n@@ -1545,7 +1549,15 @@ vect_get_peeling_costs_all_drs (loop_vec_info loop_vinfo,\n \t\t\t     vect_dr_misalign_for_aligned_access (dr0_info));\n       else\n \tvect_update_misalignment_for_peel (dr_info, dr0_info, npeel);\n-      vect_get_data_access_cost (loop_vinfo, dr_info, inside_cost, outside_cost,\n+      /* ???  We should be able to avoid both the adjustment before and the\n+\t call to vect_supportable_dr_alignment below.  */\n+      tree vectype = STMT_VINFO_VECTYPE (dr_info->stmt);\n+      int misalignment = dr_misalignment (dr_info, vectype);\n+      dr_alignment_support alignment_support_scheme\n+\t= vect_supportable_dr_alignment (loop_vinfo, dr_info, vectype);\n+      vect_get_data_access_cost (loop_vinfo, dr_info,\n+\t\t\t\t alignment_support_scheme, misalignment,\n+\t\t\t\t inside_cost, outside_cost,\n \t\t\t\t body_cost_vec, prologue_cost_vec);\n       SET_DR_MISALIGNMENT (dr_info, save_misalignment);\n     }"}, {"sha": "afc3ef17834d4a46c0ce716a4e6a769154bd2f87", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d2549b173a0a2da6dd20ffc27acb9fd2de73e/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d2549b173a0a2da6dd20ffc27acb9fd2de73e/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=793d2549b173a0a2da6dd20ffc27acb9fd2de73e", "patch": "@@ -909,6 +909,8 @@ cfun_returns (tree decl)\n static void\n vect_model_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n \t\t       vect_memory_access_type memory_access_type,\n+\t\t       dr_alignment_support alignment_support_scheme,\n+\t\t       int misalignment,\n \t\t       vec_load_store_type vls_type, slp_tree slp_node,\n \t\t       stmt_vector_for_cost *cost_vec)\n {\n@@ -969,7 +971,8 @@ vect_model_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n \t\t\t\t       scalar_store, stmt_info, 0, vect_body);\n     }\n   else\n-    vect_get_store_cost (vinfo, stmt_info, ncopies, &inside_cost, cost_vec);\n+    vect_get_store_cost (vinfo, stmt_info, ncopies, alignment_support_scheme,\n+\t\t\t misalignment, &inside_cost, cost_vec);\n \n   if (memory_access_type == VMAT_ELEMENTWISE\n       || memory_access_type == VMAT_STRIDED_SLP)\n@@ -1021,15 +1024,12 @@ vect_model_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n \n /* Calculate cost of DR's memory access.  */\n void\n-vect_get_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n+vect_get_store_cost (vec_info *, stmt_vec_info stmt_info, int ncopies,\n+\t\t     dr_alignment_support alignment_support_scheme,\n+\t\t     int misalignment,\n \t\t     unsigned int *inside_cost,\n \t\t     stmt_vector_for_cost *body_cost_vec)\n {\n-  dr_vec_info *dr_info = STMT_VINFO_DR_INFO (stmt_info);\n-  tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  dr_alignment_support alignment_support_scheme\n-    = vect_supportable_dr_alignment (vinfo, dr_info, vectype);\n-\n   switch (alignment_support_scheme)\n     {\n     case dr_aligned:\n@@ -1049,8 +1049,7 @@ vect_get_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n         /* Here, we assign an additional cost for the unaligned store.  */\n \t*inside_cost += record_stmt_cost (body_cost_vec, ncopies,\n \t\t\t\t\t  unaligned_store, stmt_info,\n-\t\t\t\t\t  dr_misalignment (dr_info, vectype),\n-\t\t\t\t\t  vect_body);\n+\t\t\t\t\t  misalignment, vect_body);\n         if (dump_enabled_p ())\n           dump_printf_loc (MSG_NOTE, vect_location,\n                            \"vect_model_store_cost: unaligned supported by \"\n@@ -1085,6 +1084,8 @@ static void\n vect_model_load_cost (vec_info *vinfo,\n \t\t      stmt_vec_info stmt_info, unsigned ncopies, poly_uint64 vf,\n \t\t      vect_memory_access_type memory_access_type,\n+\t\t      dr_alignment_support alignment_support_scheme,\n+\t\t      int misalignment,\n \t\t      gather_scatter_info *gs_info,\n \t\t      slp_tree slp_node,\n \t\t      stmt_vector_for_cost *cost_vec)\n@@ -1144,7 +1145,8 @@ vect_model_load_cost (vec_info *vinfo,\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"vect_model_load_cost: %d unused vectors.\\n\",\n \t\t\t     gaps);\n-\t  vect_get_load_cost (vinfo, stmt_info, ncopies * gaps, false,\n+\t  vect_get_load_cost (vinfo, stmt_info, ncopies * gaps,\n+\t\t\t      alignment_support_scheme, misalignment, false,\n \t\t\t      &inside_cost, &prologue_cost,\n \t\t\t      cost_vec, cost_vec, true);\n \t}\n@@ -1190,7 +1192,8 @@ vect_model_load_cost (vec_info *vinfo,\n \t\t\t\t       scalar_load, stmt_info, 0, vect_body);\n     }\n   else\n-    vect_get_load_cost (vinfo, stmt_info, ncopies, first_stmt_p,\n+    vect_get_load_cost (vinfo, stmt_info, ncopies,\n+\t\t\talignment_support_scheme, misalignment, first_stmt_p,\n \t\t\t&inside_cost, &prologue_cost, \n \t\t\tcost_vec, cost_vec, true);\n   if (memory_access_type == VMAT_ELEMENTWISE\n@@ -1209,18 +1212,15 @@ vect_model_load_cost (vec_info *vinfo,\n \n /* Calculate cost of DR's memory access.  */\n void\n-vect_get_load_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n+vect_get_load_cost (vec_info *, stmt_vec_info stmt_info, int ncopies,\n+\t\t    dr_alignment_support alignment_support_scheme,\n+\t\t    int misalignment,\n \t\t    bool add_realign_cost, unsigned int *inside_cost,\n \t\t    unsigned int *prologue_cost,\n \t\t    stmt_vector_for_cost *prologue_cost_vec,\n \t\t    stmt_vector_for_cost *body_cost_vec,\n \t\t    bool record_prologue_costs)\n {\n-  dr_vec_info *dr_info = STMT_VINFO_DR_INFO (stmt_info);\n-  tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  dr_alignment_support alignment_support_scheme\n-    = vect_supportable_dr_alignment (vinfo, dr_info, vectype);\n-\n   switch (alignment_support_scheme)\n     {\n     case dr_aligned:\n@@ -1239,8 +1239,7 @@ vect_get_load_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n         /* Here, we assign an additional cost for the unaligned load.  */\n \t*inside_cost += record_stmt_cost (body_cost_vec, ncopies,\n \t\t\t\t\t  unaligned_load, stmt_info,\n-\t\t\t\t\t  dr_misalignment (dr_info, vectype),\n-\t\t\t\t\t  vect_body);\n+\t\t\t\t\t  misalignment, vect_body);\n \n         if (dump_enabled_p ())\n           dump_printf_loc (MSG_NOTE, vect_location,\n@@ -7443,7 +7442,8 @@ vectorizable_store (vec_info *vinfo,\n \n       STMT_VINFO_TYPE (stmt_info) = store_vec_info_type;\n       vect_model_store_cost (vinfo, stmt_info, ncopies,\n-\t\t\t     memory_access_type, vls_type, slp_node, cost_vec);\n+\t\t\t     memory_access_type, alignment_support_scheme,\n+\t\t\t     misalignment, vls_type, slp_node, cost_vec);\n       return true;\n     }\n   gcc_assert (memory_access_type == STMT_VINFO_MEMORY_ACCESS_TYPE (stmt_info));\n@@ -8779,6 +8779,7 @@ vectorizable_load (vec_info *vinfo,\n \n       STMT_VINFO_TYPE (stmt_info) = load_vec_info_type;\n       vect_model_load_cost (vinfo, stmt_info, ncopies, vf, memory_access_type,\n+\t\t\t    alignment_support_scheme, misalignment,\n \t\t\t    &gs_info, slp_node, cost_vec);\n       return true;\n     }"}, {"sha": "746e39207d04e4af05110379483258c156090f0b", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d2549b173a0a2da6dd20ffc27acb9fd2de73e/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d2549b173a0a2da6dd20ffc27acb9fd2de73e/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=793d2549b173a0a2da6dd20ffc27acb9fd2de73e", "patch": "@@ -1957,11 +1957,13 @@ extern bool vect_nop_conversion_p (stmt_vec_info);\n extern opt_result vect_analyze_stmt (vec_info *, stmt_vec_info, bool *,\n \t\t\t\t     slp_tree,\n \t\t\t\t     slp_instance, stmt_vector_for_cost *);\n-extern void vect_get_load_cost (vec_info *, stmt_vec_info, int, bool,\n+extern void vect_get_load_cost (vec_info *, stmt_vec_info, int,\n+\t\t\t\tdr_alignment_support, int, bool,\n \t\t\t\tunsigned int *, unsigned int *,\n \t\t\t\tstmt_vector_for_cost *,\n \t\t\t\tstmt_vector_for_cost *, bool);\n extern void vect_get_store_cost (vec_info *, stmt_vec_info, int,\n+\t\t\t\t dr_alignment_support, int,\n \t\t\t\t unsigned int *, stmt_vector_for_cost *);\n extern bool vect_supportable_shift (vec_info *, enum tree_code, tree);\n extern tree vect_gen_perm_mask_any (tree, const vec_perm_indices &);"}]}