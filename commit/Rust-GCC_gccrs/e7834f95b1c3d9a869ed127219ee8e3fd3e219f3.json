{"sha": "e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4MzRmOTViMWMzZDlhODY5ZWQxMjcyMTllZThlM2ZkM2UyMTlmMw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2012-05-15T09:31:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T09:31:25Z"}, "message": "exp_ch9.adb, [...]: Minor reformatting.\n\n2012-05-15  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch9.adb, sem_ch9.adb, sem_ch13.adb: Minor reformatting.\n\nFrom-SVN: r187506", "tree": {"sha": "0a9799184a7e726cb57be0ced06a0257a380fc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9799184a7e726cb57be0ced06a0257a380fc77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/comments", "author": null, "committer": null, "parents": [{"sha": "88e7531bebc927b249c2055caddcb93c43359820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e7531bebc927b249c2055caddcb93c43359820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e7531bebc927b249c2055caddcb93c43359820"}], "stats": {"total": 126, "additions": 60, "deletions": 66}, "files": [{"sha": "7091154a823edd49444e8a54ffff810444a8eb73", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "patch": "@@ -1,3 +1,7 @@\n+2012-05-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch9.adb, sem_ch9.adb, sem_ch13.adb: Minor reformatting.\n+\n 2012-05-15  Robert Dewar  <dewar@adacore.com>\n \n \t* g-comlin.adb, g-comlin.ads: Minor reformatting."}, {"sha": "b1c946da443298e27b2f4f5332a4a49462976824", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 44, "deletions": 50, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "patch": "@@ -3253,13 +3253,18 @@ package body Exp_Ch9 is\n          begin\n             --  Get the type size\n \n+            --  Surely this should be Known_Static_Esize if you are about\n+            --  to assume you can do UI_To_Int on it! ???\n+\n             if Known_Esize (Comp_Type) then\n                Typ_Size := UI_To_Int (Esize (Comp_Type));\n \n             --  If the Esize (Object_Size) is unknown at compile-time, look at\n             --  the RM_Size (Value_Size) since it may have been set by an\n             --  explicit representation clause.\n \n+            --  And how do we know this is statically known???\n+\n             else\n                Typ_Size := UI_To_Int (RM_Size (Comp_Type));\n             end if;\n@@ -3359,6 +3364,7 @@ package body Exp_Ch9 is\n               (Stmts, Compare, Unsigned, Comp, Saved_Comp, Current_Comp);\n \n             --  Generate:\n+\n             --    exit when System.Atomic_Primitives.Atomic_Compare_Exchange\n             --                (Comp'Address,\n             --                 Interfaces.Unsigned (Saved_Comp),\n@@ -3397,16 +3403,15 @@ package body Exp_Ch9 is\n \n             if Present (Label_Id) then\n                Label := Make_Label (Loc, Label_Id);\n-\n                Append_To (Decls,\n                  Make_Implicit_Label_Declaration (Loc,\n                    Defining_Identifier => Entity (Label_Id),\n                    Label_Construct     => Label));\n-\n                Append_To (Stmts, Label);\n             end if;\n \n             --  Generate:\n+\n             --    loop\n             --       declare\n             --          <Decls>\n@@ -3446,8 +3451,7 @@ package body Exp_Ch9 is\n             Build_Protected_Sub_Specification (N, Prot_Typ, Unprotected_Mode),\n           Declarations               => Decls,\n           Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements => Stmts));\n+            Make_Handled_Sequence_Of_Statements (Loc, Statements => Stmts));\n    end Build_Lock_Free_Unprotected_Subprogram_Body;\n \n    -------------------------\n@@ -8195,8 +8199,8 @@ package body Exp_Ch9 is\n    --  the state of the protected object.\n \n    procedure Expand_N_Protected_Body (N : Node_Id) is\n-      Loc          : constant Source_Ptr := Sloc (N);\n-      Pid          : constant Entity_Id  := Corresponding_Spec (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n+      Pid : constant Entity_Id  := Corresponding_Spec (N);\n \n       Lock_Free_Active : constant Boolean := Uses_Lock_Free (Pid);\n       --  This flag indicates whether the lock free implementation is active\n@@ -8258,7 +8262,6 @@ package body Exp_Ch9 is\n          while Present (Formal) loop\n             Append_To (Actuals,\n               Make_Identifier (Loc, Chars (Defining_Identifier (Formal))));\n-\n             Next (Formal);\n          end loop;\n \n@@ -8269,6 +8272,7 @@ package body Exp_Ch9 is\n                   Name =>\n                     New_Reference_To (Corresponding_Spec (Prot_Bod), Loc),\n                   Parameter_Associations => Actuals));\n+\n          else\n             pragma Assert (Nkind (Spec) = N_Function_Specification);\n \n@@ -8540,13 +8544,13 @@ package body Exp_Ch9 is\n    --  the specs refer to this type.\n \n    procedure Expand_N_Protected_Type_Declaration (N : Node_Id) is\n-      Loc              : constant Source_Ptr := Sloc (N);\n-      Prot_Typ         : constant Entity_Id  := Defining_Identifier (N);\n+      Loc      : constant Source_Ptr := Sloc (N);\n+      Prot_Typ : constant Entity_Id  := Defining_Identifier (N);\n \n       Lock_Free_Active : constant Boolean := Uses_Lock_Free (Prot_Typ);\n       --  This flag indicates whether the lock free implementation is active\n \n-      Pdef             : constant Node_Id := Protected_Definition (N);\n+      Pdef : constant Node_Id := Protected_Definition (N);\n       --  This contains two lists; one for visible and one for private decls\n \n       Rec_Decl     : Node_Id;\n@@ -8621,7 +8625,7 @@ package body Exp_Ch9 is\n \n             return True;\n \n-         --  Any other types will be checked by the back-end\n+         --  Any other type will be checked by the back-end\n \n          else\n             return True;\n@@ -8637,21 +8641,20 @@ package body Exp_Ch9 is\n          --  All semantic checks already done in Sem_Prag\n \n          Prot_Proc    : constant Entity_Id :=\n-                       Defining_Unit_Name\n-                         (Specification (Current_Node));\n+                          Defining_Unit_Name (Specification (Current_Node));\n \n          Proc_Address : constant Node_Id :=\n                           Make_Attribute_Reference (Loc,\n-                          Prefix => New_Reference_To (Prot_Proc, Loc),\n-                          Attribute_Name => Name_Address);\n+                            Prefix         =>\n+                              New_Reference_To (Prot_Proc, Loc),\n+                            Attribute_Name => Name_Address);\n \n          RTS_Call     : constant Entity_Id :=\n                           Make_Procedure_Call_Statement (Loc,\n-                            Name =>\n-                              New_Reference_To (\n-                                RTE (RE_Register_Interrupt_Handler), Loc),\n-                            Parameter_Associations =>\n-                              New_List (Proc_Address));\n+                            Name                   =>\n+                              New_Reference_To\n+                                (RTE (RE_Register_Interrupt_Handler), Loc),\n+                            Parameter_Associations => New_List (Proc_Address));\n       begin\n          Append_Freeze_Action (Prot_Proc, RTS_Call);\n       end Register_Handler;\n@@ -8857,16 +8860,15 @@ package body Exp_Ch9 is\n                      Protection_Subtype :=\n                        New_Reference_To (RTE (RE_Protection), Loc);\n                   end if;\n+\n                else\n                   Protection_Subtype :=\n-                    Make_Subtype_Indication\n-                      (Sloc => Loc,\n+                    Make_Subtype_Indication (Loc,\n                        Subtype_Mark =>\n                          New_Reference_To\n                            (RTE (RE_Static_Interrupt_Protection), Loc),\n                        Constraint =>\n-                         Make_Index_Or_Discriminant_Constraint (\n-                           Sloc => Loc,\n+                         Make_Index_Or_Discriminant_Constraint (Loc,\n                            Constraints => New_List (\n                              Entry_Count_Expr,\n                              Make_Integer_Literal (Loc, Num_Attach_Handler))));\n@@ -8876,31 +8878,29 @@ package body Exp_Ch9 is\n               and then not Restriction_Active (No_Dynamic_Attachment)\n             then\n                Protection_Subtype :=\n-                  Make_Subtype_Indication (\n-                    Sloc => Loc,\n-                    Subtype_Mark => New_Reference_To\n-                      (RTE (RE_Dynamic_Interrupt_Protection), Loc),\n-                    Constraint =>\n-                      Make_Index_Or_Discriminant_Constraint (\n-                        Sloc => Loc,\n+                  Make_Subtype_Indication (Loc,\n+                    Subtype_Mark =>\n+                      New_Reference_To\n+                        (RTE (RE_Dynamic_Interrupt_Protection), Loc),\n+                    Constraint   =>\n+                      Make_Index_Or_Discriminant_Constraint (Loc,\n                         Constraints => New_List (Entry_Count_Expr)));\n \n             --  Type has explicit entries or generated primitive entry wrappers\n \n             elsif Has_Entries (Prot_Typ)\n               or else (Ada_Version >= Ada_2005\n-                         and then Present (Interface_List (N)))\n+                        and then Present (Interface_List (N)))\n             then\n                case Corresponding_Runtime_Package (Prot_Typ) is\n                   when System_Tasking_Protected_Objects_Entries =>\n                      Protection_Subtype :=\n                         Make_Subtype_Indication (Loc,\n                           Subtype_Mark =>\n-                            New_Reference_To (RTE (RE_Protection_Entries),\n-                              Loc),\n-                          Constraint =>\n-                            Make_Index_Or_Discriminant_Constraint (\n-                              Sloc => Loc,\n+                            New_Reference_To\n+                              (RTE (RE_Protection_Entries), Loc),\n+                          Constraint   =>\n+                            Make_Index_Or_Discriminant_Constraint (Loc,\n                               Constraints => New_List (Entry_Count_Expr)));\n \n                   when System_Tasking_Protected_Objects_Single_Entry =>\n@@ -8918,7 +8918,7 @@ package body Exp_Ch9 is\n \n             Object_Comp :=\n               Make_Component_Declaration (Loc,\n-                Defining_Identifier =>\n+                Defining_Identifier  =>\n                   Make_Defining_Identifier (Loc, Name_uObject),\n                 Component_Definition =>\n                   Make_Component_Definition (Loc,\n@@ -8969,9 +8969,7 @@ package body Exp_Ch9 is\n       --  internal operations.\n \n       E_Count := 0;\n-\n       Comp := First (Visible_Declarations (Pdef));\n-\n       while Present (Comp) loop\n          if Nkind (Comp) = N_Subprogram_Declaration then\n             Sub :=\n@@ -9080,17 +9078,15 @@ package body Exp_Ch9 is\n             --  Collect pointers to the protected subprogram and the barrier\n             --  of the current entry, for insertion into Entry_Bodies_Array.\n \n-            Append (\n+            Append_To (Expressions (Entries_Aggr),\n               Make_Aggregate (Loc,\n                 Expressions => New_List (\n                   Make_Attribute_Reference (Loc,\n-                    Prefix => New_Reference_To (Bdef, Loc),\n+                    Prefix         => New_Reference_To (Bdef, Loc),\n                     Attribute_Name => Name_Unrestricted_Access),\n                   Make_Attribute_Reference (Loc,\n-                    Prefix => New_Reference_To (Edef, Loc),\n-                    Attribute_Name => Name_Unrestricted_Access))),\n-              Expressions (Entries_Aggr));\n-\n+                    Prefix         => New_Reference_To (Edef, Loc),\n+                    Attribute_Name => Name_Unrestricted_Access))));\n          end if;\n \n          Next (Comp);\n@@ -12935,9 +12931,7 @@ package body Exp_Ch9 is\n       --  any protected entry (family) of subprogram. Note for the lock-free\n       --  implementation, the Protection object is not needed anymore.\n \n-      if Is_Protected\n-        and then not Uses_Lock_Free (Conc_Typ)\n-      then\n+      if Is_Protected and then not Uses_Lock_Free (Conc_Typ) then\n          declare\n             Prot_Ent : constant Entity_Id := Make_Temporary (Loc, 'R');\n             Prot_Typ : RE_Id;\n@@ -12964,7 +12958,7 @@ package body Exp_Ch9 is\n             elsif Has_Entries (Conc_Typ)\n               or else\n                 (Ada_Version >= Ada_2005\n-                   and then Present (Interface_List (Parent (Conc_Typ))))\n+                  and then Present (Interface_List (Parent (Conc_Typ))))\n             then\n                case Corresponding_Runtime_Package (Conc_Typ) is\n                   when System_Tasking_Protected_Objects_Entries =>"}, {"sha": "6b46b2d2688d2dbb2112781bfd60fca510813da7", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "patch": "@@ -944,16 +944,14 @@ package body Sem_Ch13 is\n                      --  Set the Uses_Lock_Free flag to True if there is no\n                      --  expression or if the expression is True.\n \n-                     if No (Expr)\n-                       or else Is_True (Static_Boolean (Expr))\n-                     then\n+                     if No (Expr) or else Is_True (Static_Boolean (Expr)) then\n                         Set_Uses_Lock_Free (E);\n                      end if;\n \n                      goto Continue;\n                   end if;\n \n-                  --  For all of these aspects we just create a matching pragma\n+                  --  For all other aspects we just create a matching pragma\n                   --  and insert it, if the expression is missing or set to\n                   --  True. If the expression is False, we can ignore the\n                   --  aspect with the exception that in the case of a derived"}, {"sha": "7ce20b5f85c322e27a185664f7aafaef864d8c2a", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7834f95b1c3d9a869ed127219ee8e3fd3e219f3/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=e7834f95b1c3d9a869ed127219ee8e3fd3e219f3", "patch": "@@ -70,9 +70,8 @@ package body Sem_Ch9 is\n    function Allows_Lock_Free_Implementation\n      (N        : Node_Id;\n       Complain : Boolean := False) return Boolean;\n-   --  This dispatch routine return True if N satisfies the following list of\n-   --  lock-free restrictions for protected type declaration and protected\n-   --  body:\n+   --  This routine returns True iff N satisfies the following list of lock-\n+   --  free restrictions for protected type declaration and protected body:\n    --\n    --    1) Protected type declaration\n    --         May not contain entries\n@@ -87,8 +86,7 @@ package body Sem_Ch9 is\n    --            May not contain loop statements or procedure calls\n    --            Function calls and attribute references must be static\n    --\n-   --  If Complain is set to True, an error message is issued when return\n-   --  False.\n+   --  If Complain is True, an error message is issued when False is returned\n \n    procedure Check_Max_Entries (D : Node_Id; R : All_Parameter_Restrictions);\n    --  Given either a protected definition or a task definition in D, check\n@@ -134,9 +132,7 @@ package body Sem_Ch9 is\n       --  flag. When Complain is True, an aspect Lock_Free forces the lock-free\n       --  implementation. In that case, the debug flag is not needed.\n \n-      if not Complain\n-        and then not Debug_Flag_9\n-      then\n+      if not Complain and then not Debug_Flag_9 then\n          return False;\n       end if;\n \n@@ -235,7 +231,7 @@ package body Sem_Ch9 is\n       --  Protected body case\n \n       else\n-         declare\n+         Protected_Body_Case : declare\n             Decls         : constant List_Id   := Declarations (N);\n             Pid           : constant Entity_Id := Corresponding_Spec (N);\n             Prot_Typ_Decl : constant Node_Id   := Parent (Pid);\n@@ -392,6 +388,8 @@ package body Sem_Ch9 is\n                end if;\n             end Satisfies_Lock_Free_Requirements;\n \n+         --  Start of processing for Protected_Body_Case\n+\n          begin\n             Decl := First (Decls);\n \n@@ -409,7 +407,7 @@ package body Sem_Ch9 is\n \n                Next (Decl);\n             end loop;\n-         end;\n+         end Protected_Body_Case;\n       end if;\n \n       return True;\n@@ -1709,8 +1707,8 @@ package body Sem_Ch9 is\n       End_Scope;\n \n       --  When a Lock_Free aspect forces the lock-free implementation, check N\n-      --  meets all the lock-free restrictions. Otherwise,\n-      --  Allows_Lock_Free_Implementation issue an error message.\n+      --  meets all the lock-free restrictions. Otherwise, an error message is\n+      --  issued by Allows_Lock_Free_Implementation.\n \n       if Uses_Lock_Free (Defining_Identifier (N)) then\n          if not Allows_Lock_Free_Implementation (N, Complain => True) then"}]}