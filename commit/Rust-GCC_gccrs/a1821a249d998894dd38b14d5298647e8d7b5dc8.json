{"sha": "a1821a249d998894dd38b14d5298647e8d7b5dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE4MjFhMjQ5ZDk5ODg5NGRkMzhiMTRkNTI5ODY0N2U4ZDdiNWRjOA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T14:35:01Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T14:54:33Z"}, "message": "rs6000: Add vector count under mask\n\nAdd support for new vclzdm and vctzdm vector instructions that\ncount leading and trailing zeros under control of a mask.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_clzm): New macro.\n\t(vec_ctzm): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_VCLZDM): New constant.\n\t(UNSPEC_VCTZDM): Likewise.\n\t(vclzdm): New insn.\n\t(vctzdm): Likewise.\n\t* config/rs6000/rs6000-builtin.def (BU_FUTURE_V_0): New macro.\n\t(BU_FUTURE_V_1): Likewise.\n\t(BU_FUTURE_V_2): Likewise.\n\t(BU_FUTURE_V_3): Likewise.\n\t(__builtin_altivec_vclzdm): New builtin definition.\n\t(__builtin_altivec_vctzdm): Likewise.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Cause\n\t_ARCH_PWR_FUTURE macro to be defined if OPTION_MASK_FUTURE flag is\n\tset.\n\t* config/rs6000/rs6000-call.c (builtin_function_type): Set return\n\tvalue and parameter types to be unsigned for VCLZDM and VCTZDM.\n\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Add\n\tsupport for TARGET_FUTURE flag.\n\t* config/rs6000/rs6000.h (RS6000_BTM_FUTURE): New macro constant.\n\t* doc/extend.texi (PowerPC Altivec Built-in Functions Available\n\tfor a Future Architecture): New subsubsection.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-clzm-0.c: New test.\n\t* gcc.target/powerpc/vec-clzm-1.c: New test.\n\t* gcc.target/powerpc/vec-ctzm-0.c: New test.\n\t* gcc.target/powerpc/vec-ctzm-1.c: New test.", "tree": {"sha": "b6844aca9b9c6ec6dff0c370ffbfae78d0ee717f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6844aca9b9c6ec6dff0c370ffbfae78d0ee717f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1821a249d998894dd38b14d5298647e8d7b5dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1821a249d998894dd38b14d5298647e8d7b5dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1821a249d998894dd38b14d5298647e8d7b5dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1821a249d998894dd38b14d5298647e8d7b5dc8/comments", "author": null, "committer": null, "parents": [{"sha": "b6ff3ddecfa93d53867afaaa078f85fc848abbbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ff3ddecfa93d53867afaaa078f85fc848abbbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ff3ddecfa93d53867afaaa078f85fc848abbbd"}], "stats": {"total": 352, "additions": 351, "deletions": 1}, "files": [{"sha": "b5f64d5c03b4c487ae5112db5cdef6b53fc1c705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -1,3 +1,29 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_clzm): New macro.\n+\t(vec_ctzm): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_VCLZDM): New constant.\n+\t(UNSPEC_VCTZDM): Likewise.\n+\t(vclzdm): New insn.\n+\t(vctzdm): Likewise.\n+\t* config/rs6000/rs6000-builtin.def (BU_FUTURE_V_0): New macro.\n+\t(BU_FUTURE_V_1): Likewise.\n+\t(BU_FUTURE_V_2): Likewise.\n+\t(BU_FUTURE_V_3): Likewise.\n+\t(__builtin_altivec_vclzdm): New builtin definition.\n+\t(__builtin_altivec_vctzdm): Likewise.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Cause\n+\t_ARCH_PWR_FUTURE macro to be defined if OPTION_MASK_FUTURE flag is\n+\tset.\n+\t* config/rs6000/rs6000-call.c (builtin_function_type): Set return\n+\tvalue and parameter types to be unsigned for VCLZDM and VCTZDM.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Add\n+\tsupport for TARGET_FUTURE flag.\n+\t* config/rs6000/rs6000.h (RS6000_BTM_FUTURE): New macro constant.\n+\t* doc/extend.texi (PowerPC Altivec Built-in Functions Available\n+\tfor a Future Architecture): New subsubsection.\n+\n 2020-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/94988"}, {"sha": "e1e75ad0f1eef42f8ac4a0694b65296f7075780c", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -686,4 +686,11 @@ __altivec_scalar_pred(vec_any_nle,\n    to #define vec_step to __builtin_vec_step.  */\n #define vec_step(x) __builtin_vec_step (* (__typeof__ (x) *) 0)\n \n+#ifdef _ARCH_PWR_FUTURE\n+/* May modify these macro definitions if future capabilities overload\n+   with support for different vector argument and result types.  */\n+#define vec_clzm(a, b)\t__builtin_altivec_vclzdm (a, b)\n+#define vec_ctzm(a, b)\t__builtin_altivec_vctzdm (a, b)\n+#endif\n+\n #endif /* _ALTIVEC_H */"}, {"sha": "5ef4889ba55a883261a6368758907c7a9e6a870c", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -160,6 +160,8 @@\n    UNSPEC_BCD_OVERFLOW\n    UNSPEC_VRLMI\n    UNSPEC_VRLNM\n+   UNSPEC_VCLZDM\n+   UNSPEC_VCTZDM\n ])\n \n (define_c_enum \"unspecv\"\n@@ -4096,6 +4098,25 @@\n   \"bcd<bcd_add_sub>. %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"vclzdm\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCLZDM))]\n+   \"TARGET_FUTURE\"\n+   \"vclzdm %0,%1,%2\"\n+   [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"vctzdm\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCTZDM))]\n+   \"TARGET_FUTURE\"\n+   \"vctzdm %0,%1,%2\"\n+   [(set_attr \"type\" \"vecsimple\")])\n+\n+\n (define_expand \"bcd<bcd_add_sub>_<code>\"\n   [(parallel [(set (reg:CCFP CR6_REGNO)\n \t\t   (compare:CCFP"}, {"sha": "9293e7cf4fb2dad4b2fd9292cdc7786402c8759b", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -933,6 +933,42 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* For vector builtins for instructions which may be added at some point in\n+   the future that are encoded as altivec instructions, use\n+   __builtin_altivec_ as the builtin name.  */\n+\n+#define BU_FUTURE_V_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_0 (FUTUREV_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_V_1(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_1 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_V_2(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_2 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_V_3(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_3 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #endif\n \n \f\n@@ -2479,6 +2515,10 @@ BU_P9_OVERLOAD_2 (CMPRB,\t\"byte_in_range\")\n BU_P9_OVERLOAD_2 (CMPRB2,\t\"byte_in_either_range\")\n BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n \f\n+/* Future architecture vector built-ins.  */\n+BU_FUTURE_V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n+BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n+\f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox_v2di)\n BU_CRYPTO_1 (VSBOX_BE,\t\t\"vsbox_be\",\t  CONST, crypto_vsbox_v16qi)"}, {"sha": "ee2db96f2bdcc71ffb924bd127a42ca911bb2b9e", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -448,6 +448,8 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR8\");\n   if ((flags & OPTION_MASK_MODULO) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR9\");\n+  if ((flags & OPTION_MASK_FUTURE) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR_FUTURE\");\n   if ((flags & OPTION_MASK_SOFT_FLOAT) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_SOFT_FLOAT\");\n   if ((flags & OPTION_MASK_RECIP_PRECISION) != 0)"}, {"sha": "2a4ce5bd340e2c30562749d82325221c330861c8", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -12926,6 +12926,8 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P8V_BUILTIN_ORC_V4SI_UNS:\n     case P8V_BUILTIN_ORC_V2DI_UNS:\n     case P8V_BUILTIN_ORC_V1TI_UNS:\n+    case FUTURE_BUILTIN_VCLZDM:\n+    case FUTURE_BUILTIN_VCTZDM:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "273a7215bc5ea7b602fde21847f5272937d6fa89", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -3336,7 +3336,8 @@ rs6000_builtin_mask_calculate (void)\n \t      && TARGET_HARD_FLOAT\n \t      && !TARGET_IEEEQUAD)\t    ? RS6000_BTM_LDBL128   : 0)\n \t  | ((TARGET_FLOAT128_TYPE)\t    ? RS6000_BTM_FLOAT128  : 0)\n-\t  | ((TARGET_FLOAT128_HW)\t    ? RS6000_BTM_FLOAT128_HW : 0));\n+\t  | ((TARGET_FLOAT128_HW)\t    ? RS6000_BTM_FLOAT128_HW : 0)\n+\t  | ((TARGET_FUTURE)                ? RS6000_BTM_FUTURE    : 0));\n }\n \n /* Implement TARGET_MD_ASM_ADJUST.  All asm statements are considered"}, {"sha": "5603af994fa0b49a703a181d3ca3bf82c65f0454", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -2304,6 +2304,8 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_POWERPC64\tMASK_POWERPC64\t/* 64-bit registers.  */\n #define RS6000_BTM_FLOAT128\tMASK_FLOAT128_KEYWORD /* IEEE 128-bit float.  */\n #define RS6000_BTM_FLOAT128_HW\tMASK_FLOAT128_HW /* IEEE 128-bit float h/w.  */\n+#define RS6000_BTM_FUTURE\tMASK_FUTURE\n+\n \n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n \t\t\t\t | RS6000_BTM_VSX\t\t\t\\"}, {"sha": "aa8ab3a8dc5bb06ba2f3bc9d9a68cd50c150f5e8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -17645,6 +17645,7 @@ briefly described below.\n * PowerPC AltiVec Built-in Functions Available on ISA 2.06::\n * PowerPC AltiVec Built-in Functions Available on ISA 2.07::\n * PowerPC AltiVec Built-in Functions Available on ISA 3.0::\n+* PowerPC AltiVec Built-in Functions Available for a Future Architecture::\n @end menu\n \n @node PowerPC AltiVec Built-in Functions on ISA 2.05\n@@ -20687,6 +20688,32 @@ void vec_xst (vector char, int, char *);\n void vec_xst (vector unsigned char, int, vector unsigned char *);\n void vec_xst (vector unsigned char, int, unsigned char *);\n @end smallexample\n+\n+@node PowerPC AltiVec Built-in Functions Available for a Future Architecture\n+@subsubsection PowerPC AltiVec Built-in Functions Available for a Future Architecture\n+\n+The following additional built-in functions are also available for the\n+PowerPC family of processors, starting with a hypothetical CPU\n+which may or may not be available in the future\n+(@option{-mcpu=future}) or later:\n+\n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_clzm (vector unsigned long long int, vector unsigned long long int)\n+@end smallexample\n+Perform a vector count leading zeros under bit mask operation, as if\n+implemented by the Future @code{vclzdm} instruction.\n+@findex vec_clzm\n+\n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_ctzm (vector unsigned long long int, vector unsigned long long int)\n+@end smallexample\n+Perform a vector count trailing zeros under bit mask operation, as if\n+implemented by the Future @code{vctzdm} instruction.\n+@findex vec_ctzm\n+\n+\n @node PowerPC Hardware Transactional Memory Built-in Functions\n @subsection PowerPC Hardware Transactional Memory Built-in Functions\n GCC provides two interfaces for accessing the Hardware Transactional"}, {"sha": "db274eed95afe6773262dd74672a154826a12906", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -23,6 +23,13 @@\n \n \t* gcc.target/aarch64/csinv-neg.c: New test.\n \n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-clzm-0.c: New test.\n+\t* gcc.target/powerpc/vec-clzm-1.c: New test.\n+\t* gcc.target/powerpc/vec-ctzm-0.c: New test.\n+\t* gcc.target/powerpc/vec-ctzm-1.c: New test.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/dg-future-0.c: New."}, {"sha": "099c5dc99bf0f200a377219d5bcb560c988a7e16", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clzm-0.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clzm-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clzm-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clzm-0.c?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_clzm (vector unsigned long long int source,\n+\t     vector unsigned long long int mask)\n+{\n+  return vec_clzm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See cntlzdm-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0, 0 };\n+  vector unsigned long long int result_ab = { 1, 1 };\n+  vector unsigned long long int result_ba = { 2, 0 };\n+  vector unsigned long long int result_bb = { 0, 1 };\n+\n+  if (!vec_all_eq (do_vec_clzm (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_clzm (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_clzm (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_clzm (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvclzdm\\M} } } */"}, {"sha": "43b86114487745a341b80fb3f76ae58e8e7d7a18", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clzm-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clzm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clzm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clzm-1.c?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_clzm (vector unsigned long long int source,\n+\t     vector unsigned long long int mask)\n+{\n+  return vec_clzm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See cntlzdm-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0, 0 };\n+  vector unsigned long long int result_ab = { 1, 1 };\n+  vector unsigned long long int result_ba = { 2, 0 };\n+  vector unsigned long long int result_bb = { 0, 1 };\n+\n+  if (!vec_all_eq (do_vec_clzm (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_clzm (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_clzm (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_clzm (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "315edf4d4cd56d07f2d28004e709378dd862d873", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ctzm-0.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ctzm-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ctzm-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ctzm-0.c?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_ctzm (vector unsigned long long int source,\n+\t     vector unsigned long long int mask)\n+{\n+  return vec_ctzm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See cnttzdm-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 4, 4 };\n+  vector unsigned long long int result_ab = { 2, 0 };\n+  vector unsigned long long int result_ba = { 0, 0 };\n+  vector unsigned long long int result_bb = { 1, 2 };\n+\n+  if (!vec_all_eq (do_vec_ctzm (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_ctzm (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_ctzm (source_b, mask_a),result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_ctzm (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvctzdm\\M} } } */"}, {"sha": "3dc4a03ab0957bf0027430e97ae4ac345e88affb", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ctzm-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ctzm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1821a249d998894dd38b14d5298647e8d7b5dc8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ctzm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ctzm-1.c?ref=a1821a249d998894dd38b14d5298647e8d7b5dc8", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_ctzm (vector unsigned long long int source,\n+\t     vector unsigned long long int mask)\n+{\n+  return vec_ctzm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See cnttzdm-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 4, 4 };\n+  vector unsigned long long int result_ab = { 2, 0 };\n+  vector unsigned long long int result_ba = { 0, 0 };\n+  vector unsigned long long int result_bb = { 1, 2 };\n+\n+  if (!vec_all_eq (do_vec_ctzm (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_ctzm (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_ctzm (source_b, mask_a),result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_ctzm (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}"}]}