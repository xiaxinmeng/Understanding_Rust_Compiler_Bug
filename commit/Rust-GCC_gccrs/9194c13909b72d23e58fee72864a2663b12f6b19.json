{"sha": "9194c13909b72d23e58fee72864a2663b12f6b19", "node_id": "C_kwDOANBUbNoAKDkxOTRjMTM5MDliNzJkMjNlNThmZWU3Mjg2NGEyNjYzYjEyZjZiMTk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-22T14:00:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-22T14:18:00Z"}, "message": "libstdc++: Implement constexpr std::bitset for C++23 (P2417R2)\n\nAlso add _GLIBCXX_HOSTED checks to simplify making <bitset>\nfreestanding in the near future.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/bitset (bitset): Add constexpr for C++23. Guard\n\tmembers using std::string with _GLIBCXX_HOSTED.\n\t* include/std/version (__cpp_lib_constexpr_bitset): Define.\n\t* testsuite/20_util/bitset/access/constexpr.cc: New test.\n\t* testsuite/20_util/bitset/cons/constexpr_c++23.cc: New test.\n\t* testsuite/20_util/bitset/count/constexpr.cc: New test.\n\t* testsuite/20_util/bitset/ext/constexpr.cc: New test.\n\t* testsuite/20_util/bitset/operations/constexpr_c++23.cc: New test.\n\t* testsuite/20_util/bitset/version.cc: New test.", "tree": {"sha": "f3fa861e2babee8e6b22a21eb441e14cfd64ac5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3fa861e2babee8e6b22a21eb441e14cfd64ac5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9194c13909b72d23e58fee72864a2663b12f6b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9194c13909b72d23e58fee72864a2663b12f6b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9194c13909b72d23e58fee72864a2663b12f6b19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9194c13909b72d23e58fee72864a2663b12f6b19/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b4b51445f7f3d11420439a92faaf5553f3128e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4b51445f7f3d11420439a92faaf5553f3128e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b4b51445f7f3d11420439a92faaf5553f3128e3"}], "stats": {"total": 519, "additions": 440, "deletions": 79}, "files": [{"sha": "0c84f15fda0e6908018aa1054686ca70a20d0712", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 165, "deletions": 79, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -44,14 +44,15 @@\n \n #pragma GCC system_header\n \n-#include <string>\n #include <bits/functexcept.h>   // For invalid_argument, out_of_range,\n                                 // overflow_error\n-#include <iosfwd>\n-#include <bits/cxxabi_forced.h>\n-\n-#if __cplusplus >= 201103L\n-# include <bits/functional_hash.h>\n+#if _GLIBCXX_HOSTED\n+# include <string>\n+# include <iosfwd>\n+# include <bits/cxxabi_forced.h>\n+# if __cplusplus >= 201103L\n+#  include <bits/functional_hash.h>\n+# endif\n #endif\n \n #define _GLIBCXX_BITSET_BITS_PER_WORD  (__CHAR_BIT__ * __SIZEOF_LONG__)\n@@ -65,6 +66,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n+#if __cplusplus > 202002L && _GLIBCXX_HOSTED\n+# define __cpp_lib_constexpr_bitset 202202L\n+#endif\n+\n   /**\n    *  Base class, general case.  It is a class invariant that _Nw will be\n    *  nonnegative.\n@@ -111,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT\n       { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n \n-      _WordT&\n+      _GLIBCXX14_CONSTEXPR _WordT&\n       _M_getword(size_t __pos) _GLIBCXX_NOEXCEPT\n       { return _M_w[_S_whichword(__pos)]; }\n \n@@ -120,65 +125,74 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_w[_S_whichword(__pos)]; }\n \n #if __cplusplus >= 201103L\n-      const _WordT*\n+      constexpr const _WordT*\n       _M_getdata() const noexcept\n       { return _M_w; }\n #endif\n \n-      _WordT&\n+      _GLIBCXX23_CONSTEXPR _WordT&\n       _M_hiword() _GLIBCXX_NOEXCEPT\n       { return _M_w[_Nw - 1]; }\n \n       _GLIBCXX_CONSTEXPR _WordT\n       _M_hiword() const _GLIBCXX_NOEXCEPT\n       { return _M_w[_Nw - 1]; }\n \n-      void\n+      _GLIBCXX23_CONSTEXPR void\n       _M_do_and(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] &= __x._M_w[__i];\n       }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_or(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] |= __x._M_w[__i];\n       }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_xor(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] ^= __x._M_w[__i];\n       }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_left_shift(size_t __shift) _GLIBCXX_NOEXCEPT;\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT;\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_flip() _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] = ~_M_w[__i];\n       }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_set() _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] = ~static_cast<_WordT>(0);\n       }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_reset() _GLIBCXX_NOEXCEPT\n-      { __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT)); }\n+      {\n+\tif (__builtin_is_constant_evaluated())\n+\t  {\n+\t    for (_WordT& __w : _M_w)\n+\t      __w = 0;\n+\t    return;\n+\t  }\n \n-      bool\n+\t__builtin_memset(_M_w, 0, _Nw * sizeof(_WordT));\n+      }\n+\n+      _GLIBCXX14_CONSTEXPR bool\n       _M_is_equal(const _Base_bitset<_Nw>& __x) const _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; ++__i)\n@@ -188,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       template<size_t _Nb>\n-        bool\n+        _GLIBCXX14_CONSTEXPR bool\n         _M_are_all() const _GLIBCXX_NOEXCEPT\n         {\n \t  for (size_t __i = 0; __i < _Nw - 1; __i++)\n@@ -199,7 +213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t     - _Nb));\n \t}\n \n-      bool\n+      _GLIBCXX14_CONSTEXPR bool\n       _M_is_any() const _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n@@ -208,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn false;\n       }\n \n-      size_t\n+      _GLIBCXX14_CONSTEXPR size_t\n       _M_do_count() const _GLIBCXX_NOEXCEPT\n       {\n \tsize_t __result = 0;\n@@ -217,26 +231,26 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __result;\n       }\n \n-      unsigned long\n+      _GLIBCXX14_CONSTEXPR unsigned long\n       _M_do_to_ulong() const;\n \n #if __cplusplus >= 201103L\n-      unsigned long long\n+      _GLIBCXX14_CONSTEXPR unsigned long long\n       _M_do_to_ullong() const;\n #endif\n \n       // find first \"on\" bit\n-      size_t\n+      _GLIBCXX14_CONSTEXPR size_t\n       _M_do_find_first(size_t) const _GLIBCXX_NOEXCEPT;\n \n       // find the next \"on\" bit that follows \"prev\"\n-      size_t\n+      _GLIBCXX14_CONSTEXPR size_t\n       _M_do_find_next(size_t, size_t) const _GLIBCXX_NOEXCEPT;\n     };\n \n   // Definitions of non-inline functions from _Base_bitset.\n   template<size_t _Nw>\n-    void\n+    _GLIBCXX14_CONSTEXPR void\n     _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n     {\n       if (__builtin_expect(__shift != 0, 1))\n@@ -262,7 +276,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n   template<size_t _Nw>\n-    void\n+    _GLIBCXX14_CONSTEXPR void\n     _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n     {\n       if (__builtin_expect(__shift != 0, 1))\n@@ -289,7 +303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n   template<size_t _Nw>\n-    unsigned long\n+    _GLIBCXX14_CONSTEXPR unsigned long\n     _Base_bitset<_Nw>::_M_do_to_ulong() const\n     {\n       for (size_t __i = 1; __i < _Nw; ++__i)\n@@ -300,7 +314,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #if __cplusplus >= 201103L\n   template<size_t _Nw>\n-    unsigned long long\n+    _GLIBCXX14_CONSTEXPR unsigned long long\n     _Base_bitset<_Nw>::_M_do_to_ullong() const\n     {\n       const bool __dw = sizeof(unsigned long long) > sizeof(unsigned long);\n@@ -316,7 +330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n   template<size_t _Nw>\n-    size_t\n+    _GLIBCXX14_CONSTEXPR size_t\n     _Base_bitset<_Nw>::\n     _M_do_find_first(size_t __not_found) const _GLIBCXX_NOEXCEPT\n     {\n@@ -332,7 +346,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n   template<size_t _Nw>\n-    size_t\n+    _GLIBCXX14_CONSTEXPR size_t\n     _Base_bitset<_Nw>::\n     _M_do_find_next(size_t __prev, size_t __not_found) const _GLIBCXX_NOEXCEPT\n     {\n@@ -406,7 +420,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT\n       { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n \n-      _WordT&\n+      _GLIBCXX14_CONSTEXPR _WordT&\n       _M_getword(size_t) _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n@@ -415,80 +429,80 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_w; }\n \n #if __cplusplus >= 201103L\n-      const _WordT*\n+      constexpr const _WordT*\n       _M_getdata() const noexcept\n       { return &_M_w; }\n #endif\n \n-      _WordT&\n+      _GLIBCXX14_CONSTEXPR _WordT&\n       _M_hiword() _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n       _GLIBCXX_CONSTEXPR _WordT\n       _M_hiword() const _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_and(const _Base_bitset<1>& __x) _GLIBCXX_NOEXCEPT\n       { _M_w &= __x._M_w; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_or(const _Base_bitset<1>& __x) _GLIBCXX_NOEXCEPT\n       { _M_w |= __x._M_w; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_xor(const _Base_bitset<1>& __x) _GLIBCXX_NOEXCEPT\n       { _M_w ^= __x._M_w; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_left_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n       { _M_w <<= __shift; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n       { _M_w >>= __shift; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_flip() _GLIBCXX_NOEXCEPT\n       { _M_w = ~_M_w; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_set() _GLIBCXX_NOEXCEPT\n       { _M_w = ~static_cast<_WordT>(0); }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_reset() _GLIBCXX_NOEXCEPT\n       { _M_w = 0; }\n \n-      bool\n+      _GLIBCXX14_CONSTEXPR bool\n       _M_is_equal(const _Base_bitset<1>& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_w == __x._M_w; }\n \n       template<size_t _Nb>\n-        bool\n+        _GLIBCXX14_CONSTEXPR bool\n         _M_are_all() const _GLIBCXX_NOEXCEPT\n         { return _M_w == (~static_cast<_WordT>(0)\n \t\t\t  >> (_GLIBCXX_BITSET_BITS_PER_WORD - _Nb)); }\n \n-      bool\n+      _GLIBCXX14_CONSTEXPR bool\n       _M_is_any() const _GLIBCXX_NOEXCEPT\n       { return _M_w != 0; }\n \n-      size_t\n+      _GLIBCXX14_CONSTEXPR size_t\n       _M_do_count() const _GLIBCXX_NOEXCEPT\n       { return __builtin_popcountl(_M_w); }\n \n-      unsigned long\n+      _GLIBCXX14_CONSTEXPR unsigned long\n       _M_do_to_ulong() const _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n #if __cplusplus >= 201103L\n-      unsigned long long\n+      constexpr unsigned long long\n       _M_do_to_ullong() const noexcept\n       { return _M_w; }\n #endif\n \n-      size_t\n+      _GLIBCXX14_CONSTEXPR size_t\n       _M_do_find_first(size_t __not_found) const _GLIBCXX_NOEXCEPT\n       {\n         if (_M_w != 0)\n@@ -498,7 +512,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       // find the next \"on\" bit that follows \"prev\"\n-      size_t\n+      _GLIBCXX14_CONSTEXPR size_t\n       _M_do_find_next(size_t __prev, size_t __not_found) const\n \t_GLIBCXX_NOEXCEPT\n       {\n@@ -552,17 +566,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // This would normally give access to the data.  The bounds-checking\n       // in the bitset class will prevent the user from getting this far,\n-      // but (1) it must still return an lvalue to compile, and (2) the\n-      // user might call _Unchecked_set directly, in which case this /needs/\n-      // to fail.  Let's not penalize zero-length users unless they actually\n+      // but this must fail if the user calls _Unchecked_set directly.\n+      // Let's not penalize zero-length users unless they actually\n       // make an unchecked call; all the memory ugliness is therefore\n       // localized to this single should-never-get-this-far function.\n+      __attribute__((__noreturn__))\n       _WordT&\n       _M_getword(size_t) _GLIBCXX_NOEXCEPT\n-      {\n-\t__throw_out_of_range(__N(\"_Base_bitset::_M_getword\"));\n-\treturn *new _WordT;\n-      }\n+      { __throw_out_of_range(__N(\"_Base_bitset::_M_getword\")); }\n \n       _GLIBCXX_CONSTEXPR _WordT\n       _M_getword(size_t) const _GLIBCXX_NOEXCEPT\n@@ -572,75 +583,75 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_hiword() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_and(const _Base_bitset<0>&) _GLIBCXX_NOEXCEPT\n       { }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_or(const _Base_bitset<0>&) _GLIBCXX_NOEXCEPT\n       { }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_xor(const _Base_bitset<0>&) _GLIBCXX_NOEXCEPT\n       { }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_left_shift(size_t) _GLIBCXX_NOEXCEPT\n       { }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_right_shift(size_t) _GLIBCXX_NOEXCEPT\n       { }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_flip() _GLIBCXX_NOEXCEPT\n       { }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_set() _GLIBCXX_NOEXCEPT\n       { }\n \n-      void\n+      _GLIBCXX14_CONSTEXPR void\n       _M_do_reset() _GLIBCXX_NOEXCEPT\n       { }\n \n       // Are all empty bitsets equal to each other?  Are they equal to\n       // themselves?  How to compare a thing which has no state?  What is\n       // the sound of one zero-length bitset clapping?\n-      bool\n+      _GLIBCXX_CONSTEXPR bool\n       _M_is_equal(const _Base_bitset<0>&) const _GLIBCXX_NOEXCEPT\n       { return true; }\n \n       template<size_t _Nb>\n-        bool\n+        _GLIBCXX_CONSTEXPR bool\n         _M_are_all() const _GLIBCXX_NOEXCEPT\n         { return true; }\n \n-      bool\n+      _GLIBCXX_CONSTEXPR bool\n       _M_is_any() const _GLIBCXX_NOEXCEPT\n       { return false; }\n \n-      size_t\n+      _GLIBCXX_CONSTEXPR size_t\n       _M_do_count() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n-      unsigned long\n+      _GLIBCXX_CONSTEXPR unsigned long\n       _M_do_to_ulong() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n #if __cplusplus >= 201103L\n-      unsigned long long\n+      constexpr unsigned long long\n       _M_do_to_ullong() const noexcept\n       { return 0; }\n #endif\n \n       // Normally \"not found\" is the size, but that could also be\n       // misinterpreted as an index in this corner case.  Oh well.\n-      size_t\n+      _GLIBCXX_CONSTEXPR size_t\n       _M_do_find_first(size_t) const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n-      size_t\n+      _GLIBCXX_CONSTEXPR size_t\n       _M_do_find_next(size_t, size_t) const _GLIBCXX_NOEXCEPT\n       { return 0; }\n     };\n@@ -652,7 +663,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       typedef unsigned long _WordT;\n \n-      static void\n+      static _GLIBCXX14_CONSTEXPR void\n       _S_do_sanitize(_WordT& __val) _GLIBCXX_NOEXCEPT\n       { __val &= ~((~static_cast<_WordT>(0)) << _Extrabits); }\n     };\n@@ -662,7 +673,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       typedef unsigned long _WordT;\n \n-      static void\n+      static _GLIBCXX14_CONSTEXPR void\n       _S_do_sanitize(_WordT) _GLIBCXX_NOEXCEPT { }\n     };\n \n@@ -755,7 +766,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Base_bitset<_GLIBCXX_BITSET_WORDS(_Nb)> _Base;\n       typedef unsigned long _WordT;\n \n+#if _GLIBCXX_HOSTED\n       template<class _CharT, class _Traits, class _Alloc>\n+      _GLIBCXX23_CONSTEXPR\n       void\n       _M_check_initial_position(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n \t\t\t\tsize_t __position) const\n@@ -766,7 +779,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t       \"(which is %zu)\"),\n \t\t\t\t   __position, __s.size());\n       }\n+#endif // HOSTED\n \n+      _GLIBCXX23_CONSTEXPR\n       void _M_check(size_t __position, const char *__s) const\n       {\n \tif (__position >= _Nb)\n@@ -775,6 +790,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t   __s, __position, _Nb);\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       void\n       _M_do_sanitize() _GLIBCXX_NOEXCEPT\n       {\n@@ -810,6 +826,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treference();\n \n       public:\n+\t_GLIBCXX23_CONSTEXPR\n \treference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT\n \t{\n \t  _M_wp = &__b._M_getword(__pos);\n@@ -820,10 +837,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treference(const reference&) = default;\n #endif\n \n+#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc\n+\tconstexpr\n+#endif\n \t~reference() _GLIBCXX_NOEXCEPT\n \t{ }\n \n \t// For b[i] = __x;\n+\t_GLIBCXX23_CONSTEXPR\n \treference&\n \toperator=(bool __x) _GLIBCXX_NOEXCEPT\n \t{\n@@ -835,6 +856,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n \n \t// For b[i] = b[__j];\n+\t_GLIBCXX23_CONSTEXPR\n \treference&\n \toperator=(const reference& __j) _GLIBCXX_NOEXCEPT\n \t{\n@@ -846,15 +868,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n \n \t// Flips the bit\n+\t_GLIBCXX23_CONSTEXPR\n \tbool\n \toperator~() const _GLIBCXX_NOEXCEPT\n \t{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) == 0; }\n \n \t// For __x = b[i];\n+\t_GLIBCXX23_CONSTEXPR\n \toperator bool() const _GLIBCXX_NOEXCEPT\n \t{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }\n \n \t// For b[i].flip();\n+\t_GLIBCXX23_CONSTEXPR\n \treference&\n \tflip() _GLIBCXX_NOEXCEPT\n \t{\n@@ -879,6 +904,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { _M_do_sanitize(); }\n #endif\n \n+#if _GLIBCXX_HOSTED\n       /**\n        *  Use a subset of a string.\n        *  @param  __s  A string of @a 0 and @a 1 characters.\n@@ -889,6 +915,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *                                 which is neither @a 0 nor @a 1.\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \texplicit\n \tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n \t       size_t __position = 0)\n@@ -911,6 +938,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *                                 which is neither @a 0 nor @a 1.\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n \t       size_t __position, size_t __n)\n \t: _Base()\n@@ -922,6 +950,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 396. what are characters zero and one.\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n \t       size_t __position, size_t __n,\n \t       _CharT __zero, _CharT __one = _CharT('1'))\n@@ -942,6 +971,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *                                which is neither @a __zero nor @a __one.\n        */\n       template<typename _CharT>\n+\t[[__gnu__::__nonnull__]]\n+\t_GLIBCXX23_CONSTEXPR\n         explicit\n         bitset(const _CharT* __str,\n \t       typename std::basic_string<_CharT>::size_type __n\n@@ -958,7 +989,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t\t\t     __n, __zero,\n \t\t\t\t\t\t\t     __one);\n \t}\n-#endif\n+#endif // C++11\n+#endif // HOSTED\n \n       // 23.3.5.2 bitset operations:\n       ///@{\n@@ -968,20 +1000,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  These should be self-explanatory.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator&=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_and(__rhs);\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator|=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_or(__rhs);\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n@@ -997,6 +1032,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  These should be self-explanatory.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator<<=(size_t __position) _GLIBCXX_NOEXCEPT\n       {\n@@ -1010,6 +1046,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator>>=(size_t __position) _GLIBCXX_NOEXCEPT\n       {\n@@ -1030,13 +1067,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  extensions from the SGI version.  They do no range checking.\n        *  @ingroup SGIextensions\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       _Unchecked_set(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_getword(__pos) |= _Base::_S_maskbit(__pos);\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       _Unchecked_set(size_t __pos, int __val) _GLIBCXX_NOEXCEPT\n       {\n@@ -1047,13 +1086,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       _Unchecked_reset(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       _Unchecked_flip(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n@@ -1071,6 +1112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief Sets every bit to true.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       set() _GLIBCXX_NOEXCEPT\n       {\n@@ -1085,6 +1127,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __val  Either true or false, defaults to true.\n        *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       set(size_t __position, bool __val = true)\n       {\n@@ -1095,6 +1138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief Sets every bit to false.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       reset() _GLIBCXX_NOEXCEPT\n       {\n@@ -1109,6 +1153,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Same as writing @c set(pos,false).\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       reset(size_t __position)\n       {\n@@ -1119,6 +1164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief Toggles every bit to its opposite value.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       flip() _GLIBCXX_NOEXCEPT\n       {\n@@ -1132,6 +1178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __position  The index of the bit.\n        *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       flip(size_t __position)\n       {\n@@ -1140,6 +1187,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       /// See the no-argument flip().\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>\n       operator~() const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this).flip(); }\n@@ -1159,6 +1207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  The DR has since been changed:  range-checking is a precondition\n        *  (users' responsibility), and these functions must not throw.  -pme\n        */\n+      _GLIBCXX23_CONSTEXPR\n       reference\n       operator[](size_t __position)\n       { return reference(*this, __position); }\n@@ -1174,16 +1223,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @throw  std::overflow_error  If there are too many bits to be\n        *                               represented in an @c unsigned @c long.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       unsigned long\n       to_ulong() const\n       { return this->_M_do_to_ulong(); }\n \n #if __cplusplus >= 201103L\n+      _GLIBCXX23_CONSTEXPR\n       unsigned long long\n       to_ullong() const\n       { return this->_M_do_to_ullong(); }\n #endif\n \n+#if _GLIBCXX_HOSTED\n       /**\n        *  @brief Returns a character interpretation of the %bitset.\n        *  @return  The string equivalent of the bits.\n@@ -1193,6 +1245,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  an example).\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, _Traits, _Alloc>\n \tto_string() const\n \t{\n@@ -1204,6 +1257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 396. what are characters zero and one.\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, _Traits, _Alloc>\n \tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n \t{\n@@ -1215,19 +1269,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 434. bitset::to_string() hard to use.\n       template<class _CharT, class _Traits>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, _Traits, std::allocator<_CharT> >\n \tto_string() const\n \t{ return to_string<_CharT, _Traits, std::allocator<_CharT> >(); }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 853. to_string needs updating with zero and one.\n       template<class _CharT, class _Traits>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, _Traits, std::allocator<_CharT> >\n \tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n \t{ return to_string<_CharT, _Traits,\n \t                   std::allocator<_CharT> >(__zero, __one); }\n \n       template<class _CharT>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, std::char_traits<_CharT>,\n \t                  std::allocator<_CharT> >\n \tto_string() const\n@@ -1237,6 +1294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n \n       template<class _CharT>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, std::char_traits<_CharT>,\n \t                  std::allocator<_CharT> >\n \tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n@@ -1245,13 +1303,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t                   std::allocator<_CharT> >(__zero, __one);\n \t}\n \n+      _GLIBCXX23_CONSTEXPR\n       std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n       to_string() const\n       {\n \treturn to_string<char, std::char_traits<char>,\n \t                 std::allocator<char> >();\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n       to_string(char __zero, char __one = '1') const\n       {\n@@ -1261,11 +1321,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // Helper functions for string operations.\n       template<class _CharT, class _Traits>\n+\t_GLIBCXX23_CONSTEXPR\n         void\n         _M_copy_from_ptr(const _CharT*, size_t, size_t, size_t,\n \t\t\t _CharT, _CharT);\n \n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tvoid\n \t_M_copy_from_string(const std::basic_string<_CharT,\n \t\t\t    _Traits, _Alloc>& __s, size_t __pos, size_t __n,\n@@ -1274,23 +1336,28 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t    __zero, __one); }\n \n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tvoid\n         _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>&,\n \t\t\t  _CharT, _CharT) const;\n \n       // NB: Backward compat.\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tvoid\n \t_M_copy_from_string(const std::basic_string<_CharT,\n \t\t\t    _Traits, _Alloc>& __s, size_t __pos, size_t __n)\n \t{ _M_copy_from_string(__s, __pos, __n, _CharT('0'), _CharT('1')); }\n \n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tvoid\n         _M_copy_to_string(std::basic_string<_CharT, _Traits,_Alloc>& __s) const\n \t{ _M_copy_to_string(__s, _CharT('0'), _CharT('1')); }\n+#endif // HOSTED\n \n       /// Returns the number of bits which are set.\n+      _GLIBCXX23_CONSTEXPR\n       size_t\n       count() const _GLIBCXX_NOEXCEPT\n       { return this->_M_do_count(); }\n@@ -1302,11 +1369,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       ///@{\n       /// These comparisons for equality/inequality are, well, @e bitwise.\n+      _GLIBCXX23_CONSTEXPR\n       bool\n       operator==(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return this->_M_is_equal(__rhs); }\n \n #if __cpp_impl_three_way_comparison < 201907L\n+      _GLIBCXX23_CONSTEXPR\n       bool\n       operator!=(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_equal(__rhs); }\n@@ -1319,6 +1388,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @return  The value at @a pos.\n        *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bool\n       test(size_t __position) const\n       {\n@@ -1332,6 +1402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief Tests whether all the bits are on.\n        *  @return  True if all the bits are set.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bool\n       all() const _GLIBCXX_NOEXCEPT\n       { return this->template _M_are_all<_Nb>(); }\n@@ -1340,6 +1411,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief Tests whether any of the bits are on.\n        *  @return  True if at least one bit is set.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bool\n       any() const _GLIBCXX_NOEXCEPT\n       { return this->_M_is_any(); }\n@@ -1348,16 +1420,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief Tests whether any of the bits are on.\n        *  @return  True if none of the bits are set.\n        */\n+      _GLIBCXX23_CONSTEXPR\n       bool\n       none() const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_any(); }\n \n       ///@{\n       /// Self-explanatory.\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>\n       operator<<(size_t __position) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this) <<= __position; }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>\n       operator>>(size_t __position) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this) >>= __position; }\n@@ -1369,6 +1444,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @ingroup SGIextensions\n        *  @sa  _Find_next\n        */\n+      _GLIBCXX23_CONSTEXPR\n       size_t\n       _Find_first() const _GLIBCXX_NOEXCEPT\n       { return this->_M_do_find_first(_Nb); }\n@@ -1380,14 +1456,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @ingroup SGIextensions\n        *  @sa  _Find_first\n        */\n+      _GLIBCXX23_CONSTEXPR\n       size_t\n       _Find_next(size_t __prev) const _GLIBCXX_NOEXCEPT\n       { return this->_M_do_find_next(__prev, _Nb); }\n     };\n \n+#if _GLIBCXX_HOSTED\n   // Definitions of non-inline member functions.\n   template<size_t _Nb>\n     template<class _CharT, class _Traits>\n+      _GLIBCXX23_CONSTEXPR\n       void\n       bitset<_Nb>::\n       _M_copy_from_ptr(const _CharT* __s, size_t __len,\n@@ -1409,6 +1488,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<size_t _Nb>\n     template<class _CharT, class _Traits, class _Alloc>\n+      _GLIBCXX23_CONSTEXPR\n       void\n       bitset<_Nb>::\n       _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,\n@@ -1419,6 +1499,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  if (_Unchecked_test(__i - 1))\n \t    _Traits::assign(__s[_Nb - __i], __one);\n       }\n+#endif // HOSTED\n \n   // 23.3.5.3 bitset operations:\n   ///@{\n@@ -1431,6 +1512,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  These should be self-explanatory.\n   */\n   template<size_t _Nb>\n+    _GLIBCXX23_CONSTEXPR\n     inline bitset<_Nb>\n     operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     {\n@@ -1440,6 +1522,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n   template<size_t _Nb>\n+    _GLIBCXX23_CONSTEXPR\n     inline bitset<_Nb>\n     operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     {\n@@ -1449,6 +1532,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n   template <size_t _Nb>\n+    _GLIBCXX23_CONSTEXPR\n     inline bitset<_Nb>\n     operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     {\n@@ -1458,6 +1542,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n   ///@}\n \n+#if _GLIBCXX_HOSTED\n   ///@{\n   /**\n    *  @brief Global I/O operators for bitsets.\n@@ -1549,6 +1634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __os << __tmp;\n     }\n   ///@}\n+#endif // HOSTED\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n } // namespace std\n@@ -1557,7 +1643,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n #undef _GLIBCXX_BITSET_BITS_PER_WORD\n #undef _GLIBCXX_BITSET_BITS_PER_ULL\n \n-#if __cplusplus >= 201103L\n+#if __cplusplus >= 201103L && _GLIBCXX_HOSTED\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1591,7 +1677,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // C++11\n \n-#ifdef _GLIBCXX_DEBUG\n+#ifdef _GLIBCXX_DEBUG && _GLIBCXX_HOSTED\n # include <debug/bitset>\n #endif\n "}, {"sha": "3fd5182d51d9dda740fe03c11732b650af08f556", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -309,6 +309,7 @@\n #if _GLIBCXX_HOSTED\n #define __cpp_lib_adaptor_iterator_pair_constructor 202106L\n #if __cpp_constexpr_dynamic_alloc\n+# define __cpp_lib_constexpr_bitset 202202L\n # undef __cpp_lib_constexpr_memory\n # define __cpp_lib_constexpr_memory 202202L\n #endif"}, {"sha": "7c39fcadc6cee4bac5184738938b9f4fa594f347", "filename": "libstdc++-v3/testsuite/20_util/bitset/access/constexpr.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Faccess%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Faccess%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Faccess%2Fconstexpr.cc?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <bitset>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_indexing()\n+{\n+  std::bitset<100> b(\"10010110\");\n+  VERIFY( b[0] == 0 );\n+  VERIFY( b[1] == 1 );\n+  const auto& cb = b;\n+  VERIFY( cb[0] == 0 );\n+  VERIFY( cb[1] == 1 );\n+  b[1].flip();\n+  VERIFY( cb[1] == 0 );\n+  VERIFY( b[1] == 0 );\n+  VERIFY( ~b[1] == 1 );\n+  b[3] = true;\n+  bool b3 = b[3];\n+  VERIFY( b3 );\n+  b[4] = b[3];\n+  return true;\n+}\n+\n+static_assert( test_indexing() );\n+\n+constexpr bool\n+test_to_string()\n+{\n+  std::string str = \"01101001\";\n+  return std::bitset<8>(str).to_string() == str;\n+}\n+\n+static_assert( test_to_string() );\n+\n+constexpr bool\n+test_to_ulong()\n+{\n+  unsigned long val = 0xcabba123;\n+  return std::bitset<100>(val).to_ulong() == val;\n+}\n+\n+static_assert( test_to_ulong() );\n+\n+constexpr bool\n+test_to_ullong()\n+{\n+  unsigned long long val = 0x0123abcd0123abcd;\n+  return std::bitset<100>(val).to_ullong() == val;\n+}\n+\n+static_assert( test_to_ullong() );"}, {"sha": "92bfebe8f6622c6c363eac7f9e1b3d5617f33242", "filename": "libstdc++-v3/testsuite/20_util/bitset/cons/constexpr_c++23.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcons%2Fconstexpr_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcons%2Fconstexpr_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcons%2Fconstexpr_c%2B%2B23.cc?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <bitset>\n+\n+#ifndef __cpp_lib_constexpr_bitset\n+# error \"Feature-test macro for constexpr bitset missing in <bitset>\"\n+#elif __cpp_lib_constexpr_bitset != 202202L\n+# error \"Feature-test macro for constexpr bitset has wrong value in <bitset>\"\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+constexpr bool test_ntbs()\n+{\n+  VERIFY( std::bitset<0>(\"000\").all() );\n+  VERIFY( std::bitset<0>(\"000\", 2).all() );\n+  VERIFY( std::bitset<1>(\"100\", 2).all() );\n+  VERIFY( std::bitset<1>(\"z00\", 2, 'z').none() );\n+  VERIFY( std::bitset<2>(\"ab0\", 3, 'a', 'b').count() == 1 );\n+\n+  return true;\n+}\n+\n+static_assert( test_ntbs() );\n+\n+constexpr bool test_string()\n+{\n+  using S = std::string;\n+  VERIFY( std::bitset<0>(S(\"000\")).all() );\n+  VERIFY( std::bitset<1>(S(\"010\"), 1, 2).all() );\n+  VERIFY( std::bitset<2>(S(\"0110\"), 1, 2).all() );\n+  VERIFY( std::bitset<2>(S(\"1z110\"), 1, 3, 'z').count() == 1 );\n+  VERIFY( std::bitset<3>(S(\"0abab0\"), 2, 3, 'a', 'b').count() == 2 );\n+\n+  return true;\n+}\n+\n+static_assert( test_string() );\n+\n+constexpr bool test_wstring()\n+{\n+  using S = std::wstring;\n+  VERIFY( std::bitset<0>(S(L\"000\")).all() );\n+  VERIFY( std::bitset<1>(S(L\"010\"), 1, 2).all() );\n+  VERIFY( std::bitset<2>(S(L\"0110\"), 1, 2).all() );\n+  VERIFY( std::bitset<2>(S(L\"1z110\"), 1, 3, L'z').count() == 1 );\n+  VERIFY( std::bitset<3>(S(L\"0abab0\"), 2, 3, L'a', L'b').count() == 2 );\n+\n+  return true;\n+}\n+\n+static_assert( test_wstring() );"}, {"sha": "98f8e2259e1c313504f4c2b3cf725e57214c1976", "filename": "libstdc++-v3/testsuite/20_util/bitset/count/constexpr.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcount%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcount%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcount%2Fconstexpr.cc?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -0,0 +1,93 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_counting()\n+{\n+  auto check = []<std::size_t N>(const std::bitset<N>& bs) {\n+    VERIFY( bs.size() == N );\n+    unsigned count = 0;\n+    for (unsigned n = 0; n < N; ++n)\n+      if (bs.test(n))\n+\t++count;\n+    VERIFY( count == bs.count() );\n+    VERIFY( bs.all() == (bs.count() == bs.size()) );\n+    VERIFY( bs.any() == (bs.count() != 0) );\n+    VERIFY( bs.none() == (bs.count() == 0) );\n+    return true;\n+  };\n+\n+  std::bitset<0> z0;\n+  VERIFY( z0.count() == 0 );\n+  VERIFY( check(z0) );\n+  z0.set();\n+  VERIFY( z0.count() == 0 );\n+  VERIFY( check(z0) );\n+\n+  std::bitset<7> z7;\n+  VERIFY( z7.count() == 0 );\n+  VERIFY( check(z7) );\n+  z7.set();\n+  VERIFY( z7.count() == 7 );\n+  VERIFY( check(z7) );\n+  z7.flip(1);\n+  VERIFY( z7.count() == 6 );\n+  VERIFY( check(z7) );\n+\n+  std::bitset<31> z31;\n+  VERIFY( z31.count() == 0 );\n+  VERIFY( check(z31) );\n+  z31.set();\n+  VERIFY( z31.count() == 31 );\n+  VERIFY( check(z31) );\n+  z31.flip(1);\n+  VERIFY( z31.count() == 30 );\n+  VERIFY( check(z31) );\n+\n+  std::bitset<32> z32;\n+  VERIFY( z32.count() == 0 );\n+  VERIFY( check(z32) );\n+  z32.set();\n+  VERIFY( z32.count() == 32 );\n+  VERIFY( check(z32) );\n+  z32.flip(1);\n+  VERIFY( z32.count() == 31 );\n+  VERIFY( check(z32) );\n+\n+  std::bitset<63> z63;\n+  VERIFY( z63.count() == 0 );\n+  VERIFY( check(z63) );\n+  z63.set();\n+  VERIFY( z63.count() == 63 );\n+  VERIFY( check(z63) );\n+  z63.flip(1);\n+  VERIFY( z63.count() == 62 );\n+  VERIFY( check(z63) );\n+\n+  std::bitset<64> z64;\n+  VERIFY( z64.count() == 0 );\n+  VERIFY( check(z64) );\n+  z64.set();\n+  VERIFY( z64.count() == 64 );\n+  VERIFY( check(z64) );\n+  z64.flip(1);\n+  VERIFY( z64.count() == 63 );\n+  VERIFY( check(z64) );\n+\n+  std::bitset<1000> z1k;\n+  VERIFY( z1k.count() == 0 );\n+  VERIFY( check(z1k) );\n+  z1k.set();\n+  VERIFY( z1k.count() == 1000 );\n+  VERIFY( check(z1k) );\n+  z1k.flip(1);\n+  VERIFY( z1k.count() == 999 );\n+  VERIFY( check(z1k) );\n+\n+  return true;\n+}\n+\n+static_assert( test_counting() );"}, {"sha": "f82e7aa409a17ac5c4e026bceecacad306fc905a", "filename": "libstdc++-v3/testsuite/20_util/bitset/ext/constexpr.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fext%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fext%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fext%2Fconstexpr.cc?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_find()\n+{\n+  VERIFY( std::bitset<0>()._Find_first() == 0 );\n+  VERIFY( std::bitset<1>()._Find_first() == 1 );\n+  VERIFY( std::bitset<55>(\"001000\")._Find_first() == 3 );\n+  VERIFY( std::bitset<66>(\"101000\")._Find_next(3) == 5 );\n+  return true;\n+}\n+\n+static_assert( test_find() );\n+\n+constexpr bool\n+test_unchecked()\n+{\n+  VERIFY( std::bitset<1>()._Unchecked_set(0).count() == 1 );\n+  VERIFY( std::bitset<44>()._Unchecked_set(3).count() == 1 );\n+  VERIFY( std::bitset<55>()._Unchecked_set(3, 0).count() == 0 );\n+  VERIFY( std::bitset<66>()._Unchecked_set(3, 1).count() == 1 );\n+  VERIFY( std::bitset<77>(\"111\")._Unchecked_reset(1).count() == 2 );\n+  VERIFY( std::bitset<88>(\"101\")._Unchecked_flip(1).count() == 3 );\n+  VERIFY( std::bitset<99>(\"010\")._Unchecked_test(1) );\n+  return true;\n+}\n+\n+static_assert( test_unchecked() );"}, {"sha": "c594dd696a46081eed688edd48bf4c44f69e340a", "filename": "libstdc++-v3/testsuite/20_util/bitset/operations/constexpr_c++23.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Foperations%2Fconstexpr_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Foperations%2Fconstexpr_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Foperations%2Fconstexpr_c%2B%2B23.cc?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test()\n+{\n+  std::bitset<16> b0;\n+  std::bitset<16> b1 = ~b0;\n+  VERIFY( b1.all() );\n+  b0 &= b1;\n+  VERIFY( b0.none() );\n+  b0 |= b1;\n+  VERIFY( b0.all() );\n+  b0 ^= b1;\n+  VERIFY( b0.none() );\n+  b0 = b1 << 8;\n+  VERIFY( !b0.all() && !b0.none() );\n+  VERIFY( ((b1 << 8) | (b1 >> 8)).all() );\n+  b1 <<= 8;\n+  b1 >>= 8;\n+  b1 >>= 8;\n+  VERIFY( b1.none() );\n+  VERIFY( (~b1).all() );\n+  VERIFY( b1.flip().all() );\n+  return true;\n+}\n+\n+static_assert( test() );"}, {"sha": "7197b1ed95670cae1990298d661fb0190394dfcb", "filename": "libstdc++-v3/testsuite/20_util/bitset/version.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9194c13909b72d23e58fee72864a2663b12f6b19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fversion.cc?ref=9194c13909b72d23e58fee72864a2663b12f6b19", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do preprocess { target c++23 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_constexpr_bitset\n+# error \"Feature-test macro for constexpr bitset missing in <version>\"\n+#elif __cpp_lib_constexpr_bitset != 202202L\n+# error \"Feature-test macro for constexpr bitset has wrong value in <version>\"\n+#endif"}]}