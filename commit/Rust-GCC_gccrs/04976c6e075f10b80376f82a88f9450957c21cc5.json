{"sha": "04976c6e075f10b80376f82a88f9450957c21cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5NzZjNmUwNzVmMTBiODAzNzZmODJhODhmOTQ1MDk1N2MyMWNjNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-14T10:42:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-14T10:42:00Z"}, "message": "re PR tree-optimization/71522 (Wrong optimization of memcpy through a var of type long double)\n\n2016-06-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71522\n\t* tree-ssa.c (non_rewritable_lvalue_p): Do not rewrite non-float\n\tcopying into float copying.\n\n\t* gcc.dg/torture/pr71522.c: New testcase.\n\nFrom-SVN: r237429", "tree": {"sha": "9a8b22c626395afad2dee14c11e900b10fdf76ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a8b22c626395afad2dee14c11e900b10fdf76ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04976c6e075f10b80376f82a88f9450957c21cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04976c6e075f10b80376f82a88f9450957c21cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04976c6e075f10b80376f82a88f9450957c21cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04976c6e075f10b80376f82a88f9450957c21cc5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86c24ba6779658d52cef593badc7bc4902ce6702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c24ba6779658d52cef593badc7bc4902ce6702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c24ba6779658d52cef593badc7bc4902ce6702"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "990444312d0fb0f789d62df6e95788726586f853", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04976c6e075f10b80376f82a88f9450957c21cc5", "patch": "@@ -1,3 +1,9 @@\n+2016-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71522\n+\t* tree-ssa.c (non_rewritable_lvalue_p): Do not rewrite non-float\n+\tcopying into float copying.\n+\n 2016-06-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71520"}, {"sha": "dfe4fb766b1b2c77f3b9d9e58c03941438dbefa2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04976c6e075f10b80376f82a88f9450957c21cc5", "patch": "@@ -1,3 +1,8 @@\n+2016-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71522\n+\t* gcc.dg/torture/pr71522.c: New testcase.\n+\n 2016-06-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71520"}, {"sha": "953c4c71100f72d7c302bc845eda69e37f93e715", "filename": "gcc/testsuite/gcc.dg/torture/pr71522.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71522.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71522.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71522.c?ref=04976c6e075f10b80376f82a88f9450957c21cc5", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+\n+#if __SIZEOF_LONG_DOUBLE__ == 16\n+#define STR \"AAAAAAAAAAAAAAA\"\n+#elif __SIZEOF_LONG_DOUBLE__ == 12\n+#define STR \"AAAAAAAAAAA\"\n+#elif __SIZEOF_LONG_DOUBLE__ == 8\n+#define STR \"AAAAAAA\"\n+#elif __SIZEOF_LONG_DOUBLE__ == 4\n+#define STR \"AAA\"\n+#else\n+#define STR \"A\"\n+#endif\n+\n+int main()\n+{\n+  long double d;\n+  char s[sizeof d];\n+\n+  __builtin_memcpy(&d, STR, sizeof d);\n+  __builtin_memcpy(&s, &d, sizeof s);\n+\n+  if (__builtin_strncmp (s, STR, sizeof s) != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "247fa0717dd242f3e55e3cd305633612978ac99b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04976c6e075f10b80376f82a88f9450957c21cc5/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=04976c6e075f10b80376f82a88f9450957c21cc5", "patch": "@@ -1300,6 +1300,10 @@ non_rewritable_lvalue_p (tree lhs)\n \t      || (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n \t\t  && (TYPE_PRECISION (TREE_TYPE (decl))\n \t\t      >= TYPE_PRECISION (TREE_TYPE (lhs)))))\n+\t  /* Make sure we are not re-writing non-float copying into float\n+\t     copying as that can incur normalization.  */\n+\t  && (! FLOAT_TYPE_P (TREE_TYPE (decl))\n+\t      || types_compatible_p (TREE_TYPE (lhs), TREE_TYPE (decl)))\n \t  && (TREE_THIS_VOLATILE (decl) == TREE_THIS_VOLATILE (lhs)))\n \treturn false;\n "}]}