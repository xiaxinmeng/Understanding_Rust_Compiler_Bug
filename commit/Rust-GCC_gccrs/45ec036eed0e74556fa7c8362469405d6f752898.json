{"sha": "45ec036eed0e74556fa7c8362469405d6f752898", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVlYzAzNmVlZDBlNzQ1NTZmYTdjODM2MjQ2OTQwNWQ2Zjc1Mjg5OA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-03-13T19:21:38Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-03-13T19:21:38Z"}, "message": "lex.c (java_read_char): UNGET invalid non-initial utf8 character.\n\nh\n\t* lex.c (java_read_char):  UNGET invalid non-initial utf8 character.\n\t* lex.h (UNGETC):  Change misleading macro.\n\nFrom-SVN: r25753", "tree": {"sha": "ae957d164b86f4fe6639f911c2afd8096aa25bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae957d164b86f4fe6639f911c2afd8096aa25bf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45ec036eed0e74556fa7c8362469405d6f752898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ec036eed0e74556fa7c8362469405d6f752898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ec036eed0e74556fa7c8362469405d6f752898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ec036eed0e74556fa7c8362469405d6f752898/comments", "author": null, "committer": null, "parents": [{"sha": "b452ec852d0c8200297e6fce7205f3090aa8a01c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b452ec852d0c8200297e6fce7205f3090aa8a01c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b452ec852d0c8200297e6fce7205f3090aa8a01c"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "54708adb08e45f5d0ac1a18cc21397d5e5bc2c95", "filename": "gcc/java/lex.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ec036eed0e74556fa7c8362469405d6f752898/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ec036eed0e74556fa7c8362469405d6f752898/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=45ec036eed0e74556fa7c8362469405d6f752898", "patch": "@@ -227,6 +227,7 @@ java_read_char ()\n           c1 = GETC ();\n \t  if ((c1 & 0xc0) == 0x80)\n \t    return (unicode_t)(((c &0x1f) << 6) + (c1 & 0x3f));\n+\t  c = c1;\n \t}\n       else if ((c & 0xf0) == 0xe0)\n         {\n@@ -237,8 +238,18 @@ java_read_char ()\n \t      if ((c2 & 0xc0) == 0x80)\n \t        return (unicode_t)(((c & 0xf) << 12) + \n \t\t\t\t   (( c1 & 0x3f) << 6) + (c2 & 0x3f));\n+\t      else\n+\t\tc = c2;\n \t    }\n+\t  else\n+\t    c = c1;\n \t}\n+      /* We looked for a UTF8 multi-byte sequence (since we saw an initial\n+\t byte with the high bit set), but found invalid bytes instead.\n+\t If the most recent byte was Ascii (and not EOF), we should\n+\t unget it, in case it was a comment terminator or other delimitor. */\n+      if ((c & 0x80) == 0)\n+\tUNGETC (c);\n       return BAD_UTF8_VALUE;\n     }\n }\n@@ -308,7 +319,7 @@ java_read_unicode (term_context, unicode_escape_p)\n \t  return (term_context ? unicode :\n \t\t  (java_lineterminator (c) ? '\\n' : unicode));\n \t}\n-      UNGETC (c);\n+      ctxp->unget_utf8_value = c;\n     }\n   return (unicode_t)'\\\\';\n }"}, {"sha": "d40196e2c53c1451539e92029e64e69d03c07fa7", "filename": "gcc/java/lex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ec036eed0e74556fa7c8362469405d6f752898/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ec036eed0e74556fa7c8362469405d6f752898/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=45ec036eed0e74556fa7c8362469405d6f752898", "patch": "@@ -99,8 +99,8 @@ typedef struct _java_lc {\n \n #define JAVA_LINE_MAX 80\n \n-/* Macro to read and unread chars */\n-#define UNGETC(c) ctxp->unget_utf8_value = (c);\n+/* Macro to read and unread bytes */\n+#define UNGETC(c) ungetc(c, finput)\n #define GETC()    getc(finput)\n \n /* Build a location compound integer */"}]}