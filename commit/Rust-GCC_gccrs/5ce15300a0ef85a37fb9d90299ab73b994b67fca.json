{"sha": "5ce15300a0ef85a37fb9d90299ab73b994b67fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlMTUzMDBhMGVmODVhMzdmYjlkOTAyOTlhYjczYjk5NGI2N2ZjYQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-07-13T10:54:12Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-07-13T10:54:12Z"}, "message": "arm.h (TARGET_HAVE_CBZ): Define.\n\n2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm.h (TARGET_HAVE_CBZ): Define.\n    (TARGET_IDIV): Set for all Thumb targets provided they have hardware\n    divide feature.\n    * config/arm/arm.md (divsi3): New unpredicable alternative for ARMv8-M\n    Baseline.  Make initial alternative TARGET_32BIT only.\n    (udivsi3): Likewise.\n    * config/arm/thumb1.md (thumb1_cbz): New define_insn.\n    * doc/sourcebuild.texi (arm_thumb1_cbz_ok): Document new effective\n    target.\n\n    gcc/testsuite/\n    * lib/target-supports.exp (check_effective_target_arm_thumb1_cbz_ok):\n    Add new arm_thumb1_cbz_ok effective target.\n    * gcc.target/arm/cbz.c: New test.\n\nFrom-SVN: r238289", "tree": {"sha": "1c9d0168e35308756e8720cc2d65f538f49903a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9d0168e35308756e8720cc2d65f538f49903a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce15300a0ef85a37fb9d90299ab73b994b67fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce15300a0ef85a37fb9d90299ab73b994b67fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce15300a0ef85a37fb9d90299ab73b994b67fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce15300a0ef85a37fb9d90299ab73b994b67fca/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b9509a34d0f7e25202530a4453afc5eb5d06f6b"}], "stats": {"total": 167, "additions": 156, "deletions": 11}, "files": [{"sha": "f05d2b1924612bf01d43ecdb7a328db3e303a834", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -1,3 +1,15 @@\n+2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_HAVE_CBZ): Define.\n+\t(TARGET_IDIV): Set for all Thumb targets provided they have hardware\n+\tdivide feature.\n+\t* config/arm/arm.md (divsi3): New unpredicable alternative for ARMv8-M\n+\tBaseline.  Make initial alternative TARGET_32BIT only.\n+\t(udivsi3): Likewise.\n+\t* config/arm/thumb1.md (thumb1_cbz): New define_insn.\n+\t* doc/sourcebuild.texi (arm_thumb1_cbz_ok): Document new effective\n+\ttarget.\n+\n 2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/arm.h (TARGET_HAVE_MOVT): Include ARMv8-M as having MOVT."}, {"sha": "317885cf7197b6755c4d9b5717afe61662626786", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -266,9 +266,12 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* Nonzero if this chip provides the MOVW and MOVT instructions.  */\n #define TARGET_HAVE_MOVT\t(arm_arch_thumb2 || arm_arch8)\n \n+/* Nonzero if this chip provides the CBZ and CBNZ instructions.  */\n+#define TARGET_HAVE_CBZ\t\t(arm_arch_thumb2 || arm_arch8)\n+\n /* Nonzero if integer division instructions supported.  */\n #define TARGET_IDIV\t((TARGET_ARM && arm_arch_arm_hwdiv)\t\\\n-\t\t\t || (TARGET_THUMB2 && arm_arch_thumb_hwdiv))\n+\t\t\t || (TARGET_THUMB && arm_arch_thumb_hwdiv))\n \n /* Nonzero if disallow volatile memory access in IT block.  */\n #define TARGET_NO_VOLATILE_CE\t\t(arm_arch_no_volatile_ce)"}, {"sha": "820471556efbac6b35d46a03fb763cbd30bea30f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -4330,23 +4330,29 @@\n \n ;; Division instructions\n (define_insn \"divsi3\"\n-  [(set (match_operand:SI\t  0 \"s_register_operand\" \"=r\")\n-\t(div:SI (match_operand:SI 1 \"s_register_operand\"  \"r\")\n-\t\t(match_operand:SI 2 \"s_register_operand\"  \"r\")))]\n+  [(set (match_operand:SI\t  0 \"s_register_operand\" \"=r,r\")\n+\t(div:SI (match_operand:SI 1 \"s_register_operand\"  \"r,r\")\n+\t\t(match_operand:SI 2 \"s_register_operand\"  \"r,r\")))]\n   \"TARGET_IDIV\"\n-  \"sdiv%?\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   sdiv%?\\t%0, %1, %2\n+   sdiv\\t%0, %1, %2\"\n+  [(set_attr \"arch\" \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"type\" \"sdiv\")]\n )\n \n (define_insn \"udivsi3\"\n-  [(set (match_operand:SI\t   0 \"s_register_operand\" \"=r\")\n-\t(udiv:SI (match_operand:SI 1 \"s_register_operand\"  \"r\")\n-\t\t (match_operand:SI 2 \"s_register_operand\"  \"r\")))]\n+  [(set (match_operand:SI\t   0 \"s_register_operand\" \"=r,r\")\n+\t(udiv:SI (match_operand:SI 1 \"s_register_operand\"  \"r,r\")\n+\t\t (match_operand:SI 2 \"s_register_operand\"  \"r,r\")))]\n   \"TARGET_IDIV\"\n-  \"udiv%?\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   udiv%?\\t%0, %1, %2\n+   udiv\\t%0, %1, %2\"\n+  [(set_attr \"arch\" \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"type\" \"udiv\")]\n )"}, {"sha": "cd98de7dcb40de483a9f93c0674bd216f4b0c56a", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -974,6 +974,91 @@\n   DONE;\n })\n \n+;; A pattern for the CB(N)Z instruction added in ARMv8-M Baseline profile,\n+;; adapted from cbranchsi4_insn.  Modifying cbranchsi4_insn instead leads to\n+;; code generation difference for ARMv6-M because the minimum length of the\n+;; instruction becomes 2 even for ARMv6-M due to a limitation in genattrtab's\n+;; handling of PC in the length condition.\n+(define_insn \"thumb1_cbz\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 0 \"equality_operator\"\n+\t       [(match_operand:SI 1 \"s_register_operand\" \"l\")\n+\t\t(const_int 0)])\n+\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t      (pc)))]\n+  \"TARGET_THUMB1 && TARGET_HAVE_CBZ\"\n+{\n+  if (get_attr_length (insn) == 2)\n+    {\n+      if (GET_CODE (operands[0]) == EQ)\n+\treturn \"cbz\\t%1, %l2\";\n+      else\n+\treturn \"cbnz\\t%1, %l2\";\n+    }\n+  else\n+    {\n+      rtx t = cfun->machine->thumb1_cc_insn;\n+      if (t != NULL_RTX)\n+\t{\n+\t  if (!rtx_equal_p (cfun->machine->thumb1_cc_op0, operands[1])\n+\t      || !rtx_equal_p (cfun->machine->thumb1_cc_op1, operands[2]))\n+\t    t = NULL_RTX;\n+\t  if (cfun->machine->thumb1_cc_mode == CC_NOOVmode)\n+\t    {\n+\t      if (!noov_comparison_operator (operands[0], VOIDmode))\n+\t\tt = NULL_RTX;\n+\t    }\n+\t  else if (cfun->machine->thumb1_cc_mode != CCmode)\n+\t    t = NULL_RTX;\n+\t}\n+      if (t == NULL_RTX)\n+\t{\n+\t  output_asm_insn (\"cmp\\t%1, #0\", operands);\n+\t  cfun->machine->thumb1_cc_insn = insn;\n+\t  cfun->machine->thumb1_cc_op0 = operands[1];\n+\t  cfun->machine->thumb1_cc_op1 = operands[2];\n+\t  cfun->machine->thumb1_cc_mode = CCmode;\n+\t}\n+      else\n+\t/* Ensure we emit the right type of condition code on the jump.  */\n+\tXEXP (operands[0], 0) = gen_rtx_REG (cfun->machine->thumb1_cc_mode,\n+\t\t\t\t\t     CC_REGNUM);\n+\n+      switch (get_attr_length (insn))\n+\t{\n+\tcase 4:  return \"b%d0\\t%l2\";\n+\tcase 6:  return \"b%D0\\t.LCB%=;b\\t%l2\\t%@long jump\\n.LCB%=:\";\n+\tcase 8:  return \"b%D0\\t.LCB%=;bl\\t%l2\\t%@far jump\\n.LCB%=:\";\n+\tdefault: gcc_unreachable ();\n+\t}\n+    }\n+}\n+  [(set (attr \"far_jump\")\n+\t(if_then_else\n+\t    (eq_attr \"length\" \"8\")\n+\t    (const_string \"yes\")\n+\t    (const_string \"no\")))\n+   (set (attr \"length\")\n+\t(if_then_else\n+\t    (and (ge (minus (match_dup 2) (pc)) (const_int 2))\n+\t\t (le (minus (match_dup 2) (pc)) (const_int 128)))\n+\t    (const_int 2)\n+\t    (if_then_else\n+\t\t(and (ge (minus (match_dup 2) (pc)) (const_int -250))\n+\t\t     (le (minus (match_dup 2) (pc)) (const_int 256)))\n+\t\t(const_int 4)\n+\t\t(if_then_else\n+\t\t    (and (ge (minus (match_dup 2) (pc)) (const_int -2040))\n+\t\t\t (le (minus (match_dup 2) (pc)) (const_int 2048)))\n+\t\t    (const_int 6)\n+\t\t    (const_int 8)))))\n+   (set (attr \"type\")\n+\t(if_then_else\n+\t    (eq_attr \"length\" \"2\")\n+\t    (const_string \"branch\")\n+\t    (const_string \"multiple\")))]\n+)\n+\n (define_insn \"cbranchsi4_insn\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"arm_comparison_operator\""}, {"sha": "24b65da8c58030622e12b1175a8034a5e37ac5bf", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -1618,6 +1618,10 @@ ARM target prefers @code{LDRD} and @code{STRD} instructions over\n ARM target generates Thumb-1 code for @code{-mthumb} with @code{MOVW}\n and @code{MOVT} instructions available.\n \n+@item arm_thumb1_cbz_ok\n+ARM target generates Thumb-1 code for @code{-mthumb} with\n+@code{CBZ} and @code{CBNZ} instructions available.\n+\n @end table\n \n @subsubsection AArch64-specific attributes"}, {"sha": "239d55e7458c9d01653b54441c27e81810b92b62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -1,3 +1,9 @@\n+2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_thumb1_cbz_ok):\n+\tAdd new arm_thumb1_cbz_ok effective target.\n+\t* gcc.target/arm/cbz.c: New test.\n+\n 2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* lib/target-supports.exp (check_effective_target_arm_thumb1_movt_ok):"}, {"sha": "5d3de6387777743883a3baf66b878a8a0c3f1783", "filename": "gcc/testsuite/gcc.target/arm/cbz.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcbz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcbz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcbz.c?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile {target { arm_thumb2 || arm_thumb1_cbz_ok } } } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (int a, int *b)\n+{\n+  if (a)\n+    *b = 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cbz\\\\tr\\\\d\" 1 } } */"}, {"sha": "b9909ada734c08a46af886b5190be9ea92fd98e5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce15300a0ef85a37fb9d90299ab73b994b67fca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5ce15300a0ef85a37fb9d90299ab73b994b67fca", "patch": "@@ -3502,6 +3502,23 @@ proc check_effective_target_arm_thumb1_movt_ok {} {\n     }\n }\n \n+# Return 1 if this is an ARM target where -mthumb causes Thumb-1 to be\n+# used and CBZ and CBNZ instructions are available.\n+\n+proc check_effective_target_arm_thumb1_cbz_ok {} {\n+    if [check_effective_target_arm_thumb1_ok] {\n+\treturn [check_no_compiler_messages arm_movt object {\n+\t    int\n+\t    foo (void)\n+\t    {\n+\t      asm (\"cbz r0, 2f\\n2:\");\n+\t    }\n+\t} \"-mthumb\"]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if this compilation turns on string_ops_prefer_neon on.\n \n proc check_effective_target_arm_tune_string_ops_prefer_neon { } {"}]}