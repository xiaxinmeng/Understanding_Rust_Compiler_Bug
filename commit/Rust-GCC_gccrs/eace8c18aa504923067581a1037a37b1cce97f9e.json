{"sha": "eace8c18aa504923067581a1037a37b1cce97f9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFjZThjMThhYTUwNDkyMzA2NzU4MWExMDM3YTM3YjFjY2U5N2Y5ZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-02-15T20:09:31Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-02-15T20:09:31Z"}, "message": "tree-vn.c (get_value_handle): Make sure that given an is_gimple_min_invariant expression, we always return it.\n\n2005-02-15  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-vn.c (get_value_handle): Make sure that given an\n\tis_gimple_min_invariant expression, we always return it.\n\nFrom-SVN: r95072", "tree": {"sha": "bbcd7131bf7cbe8373d576e835080a501deb4951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbcd7131bf7cbe8373d576e835080a501deb4951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eace8c18aa504923067581a1037a37b1cce97f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eace8c18aa504923067581a1037a37b1cce97f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eace8c18aa504923067581a1037a37b1cce97f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eace8c18aa504923067581a1037a37b1cce97f9e/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "e90c0306a3791ec5b377b19cfc4a161af24df314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eace8c18aa504923067581a1037a37b1cce97f9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eace8c18aa504923067581a1037a37b1cce97f9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eace8c18aa504923067581a1037a37b1cce97f9e", "patch": "@@ -1,3 +1,8 @@\n+2005-02-15  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-vn.c (get_value_handle): Make sure that given an\n+\tis_gimple_min_invariant expression, we always return it.\n+\n 2005-02-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* passes.c (rest_of_handle_gcse): Fix a comment."}, {"sha": "22affffb0634f3dea15d67fe85a22cc32e94697e", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eace8c18aa504923067581a1037a37b1cce97f9e/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eace8c18aa504923067581a1037a37b1cce97f9e/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=eace8c18aa504923067581a1037a37b1cce97f9e", "patch": "@@ -267,11 +267,16 @@ vn_lookup_or_add (tree expr, vuse_optype vuses)\n \n /* Get the value handle of EXPR.  This is the only correct way to get\n    the value handle for a \"thing\".  If EXPR does not have a value\n-   handle associated, it returns NULL_TREE.  */\n+   handle associated, it returns NULL_TREE.  \n+   NB: If EXPR is min_invariant, this function is *required* to return EXPR.  */\n \n tree\n get_value_handle (tree expr)\n {\n+\n+  if (is_gimple_min_invariant (expr))\n+    return expr;\n+\n   if (TREE_CODE (expr) == SSA_NAME)\n     return SSA_NAME_VALUE (expr);\n   else if (EXPR_P (expr) || DECL_P (expr))\n@@ -280,10 +285,7 @@ get_value_handle (tree expr)\n       return ((ann) ? ann->common.value_handle : NULL_TREE);\n     }\n   else\n-    {\n-      gcc_assert (is_gimple_min_invariant (expr));\n-      return expr;\n-    }\n+    gcc_unreachable ();\n }\n \n "}]}