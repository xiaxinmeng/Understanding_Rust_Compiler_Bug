{"sha": "43fa63024dfdcab90ae12f62e36497c2979f8665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmYTYzMDI0ZGZkY2FiOTBhZTEyZjYyZTM2NDk3YzI5NzlmODY2NQ==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "1999-09-23T20:34:19Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "1999-09-23T20:34:19Z"}, "message": "Fix PA problem in order of initializations.\n\n\t* emit-rtl.c (init_emit_once): Initialize modes first.\n\n        Also add missing ChangeLog entry.\n\nFrom-SVN: r29635", "tree": {"sha": "014c26702671b1c9341a56dcf7f013ec6c69d252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/014c26702671b1c9341a56dcf7f013ec6c69d252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43fa63024dfdcab90ae12f62e36497c2979f8665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa63024dfdcab90ae12f62e36497c2979f8665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fa63024dfdcab90ae12f62e36497c2979f8665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa63024dfdcab90ae12f62e36497c2979f8665/comments", "author": null, "committer": null, "parents": [{"sha": "e6ad5e90440d3ea6ef4af3e5eef826a47de18444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ad5e90440d3ea6ef4af3e5eef826a47de18444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ad5e90440d3ea6ef4af3e5eef826a47de18444"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "032c57b96af16853dcbf84858650f16ac6f3a837", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa63024dfdcab90ae12f62e36497c2979f8665/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa63024dfdcab90ae12f62e36497c2979f8665/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43fa63024dfdcab90ae12f62e36497c2979f8665", "patch": "@@ -1,3 +1,26 @@\n+Thu Sep 23 12:54:49 1999  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* emit-rtl.c (init_emit_once): Initialize modes first.\n+\n+Sun Sep 19 01:23:23 1999  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* config/i386/i386.c (pic_label_name): Change to char pointer.\n+\t(global_offset_table): New variable.\n+\t(load_pic_register): Fill global_offset_table if it hasn't\n+\talready been done.  Allocate pic_label_name dynamically.\n+\t* ggc.h (empty_string): New variable.\n+\t* ggc-simple.c (empty_string): Likewise.\n+\t(init_ggc): Allocate empty_string and add as root.\n+\t* stmt.c (digit_strings): New variable.\n+\t(init_stmt): Add last_block_end_note as root.  Allocate and\n+\tinitialize digit_strings. \n+\t(expand_asm_operands): Use empty_string instead of string\n+\tconstant.  Use digit_strings instead of string constants.\n+\t* profile.c (init_arc_profiler): Allocate string with\n+\tggc_alloc_string instead of xmalloc.\n+\t(output_func_start_profiler): Likewise.\n+\t* c-typeck.c (digest_init): Check if init is error_mark_node.\n+\n Wed Sep 22 12:04:58 1999  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cpplib.c (handle_directive): Don't complain about `# NUMBER' if"}, {"sha": "3d59220378cda60d36883002fc818431f02e56d9", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa63024dfdcab90ae12f62e36497c2979f8665/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa63024dfdcab90ae12f62e36497c2979f8665/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=43fa63024dfdcab90ae12f62e36497c2979f8665", "patch": "@@ -3495,6 +3495,38 @@ init_emit_once (line_numbers)\n \n   no_line_numbers = ! line_numbers;\n \n+  /* Compute the word and byte modes.  */\n+\n+  byte_mode = VOIDmode;\n+  word_mode = VOIDmode;\n+  double_mode = VOIDmode;\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    {\n+      if (GET_MODE_BITSIZE (mode) == BITS_PER_UNIT\n+\t  && byte_mode == VOIDmode)\n+\tbyte_mode = mode;\n+\n+      if (GET_MODE_BITSIZE (mode) == BITS_PER_WORD\n+\t  && word_mode == VOIDmode)\n+\tword_mode = mode;\n+    }\n+\n+#ifndef DOUBLE_TYPE_SIZE\n+#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n+#endif\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT); mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    {\n+      if (GET_MODE_BITSIZE (mode) == DOUBLE_TYPE_SIZE\n+\t  && double_mode == VOIDmode)\n+\tdouble_mode = mode;\n+    }\n+\n+  ptr_mode = mode_for_size (POINTER_SIZE, GET_MODE_CLASS (Pmode), 0);\n+\n   /* Assign register numbers to the globally defined register rtx.\n      This must be done at runtime because the register number field\n      is in a union and some compilers can't initialize unions.  */\n@@ -3530,38 +3562,6 @@ init_emit_once (line_numbers)\n   INIT_EXPANDERS;\n #endif\n \n-  /* Compute the word and byte modes.  */\n-\n-  byte_mode = VOIDmode;\n-  word_mode = VOIDmode;\n-  double_mode = VOIDmode;\n-\n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n-       mode = GET_MODE_WIDER_MODE (mode))\n-    {\n-      if (GET_MODE_BITSIZE (mode) == BITS_PER_UNIT\n-\t  && byte_mode == VOIDmode)\n-\tbyte_mode = mode;\n-\n-      if (GET_MODE_BITSIZE (mode) == BITS_PER_WORD\n-\t  && word_mode == VOIDmode)\n-\tword_mode = mode;\n-    }\n-\n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT); mode != VOIDmode;\n-       mode = GET_MODE_WIDER_MODE (mode))\n-    {\n-      if (GET_MODE_BITSIZE (mode) == DOUBLE_TYPE_SIZE\n-\t  && double_mode == VOIDmode)\n-\tdouble_mode = mode;\n-    }\n-\n-  ptr_mode = mode_for_size (POINTER_SIZE, GET_MODE_CLASS (Pmode), 0);\n-\n   /* Create the unique rtx's for certain rtx codes and operand values.  */\n \n   /* Don't use gen_rtx here since gen_rtx in this case"}]}