{"sha": "3cb27b85a7b977958d53e1a29596ba211d21dde2", "node_id": "C_kwDOANBUbNoAKDNjYjI3Yjg1YTdiOTc3OTU4ZDUzZTFhMjk1OTZiYTIxMWQyMWRkZTI", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2022-03-12T00:47:09Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2022-03-12T00:47:09Z"}, "message": "Fix DImode to TImode sign extend issue\n\nPR target/104868 had had an issue where my code that updated the DImode to\nTImode sign extension for power10 failed.  In looking at the failure\nmessage, the reason is when extendditi2 tries to split the insn, it\ngenerates an insn that does not satisfy its constraints:\n\n\t(set (reg:V2DI 65 1)\n\t     (vec_duplicate:V2DI (reg:DI 0)))\n\nThe reason is vsx_splat_v2di does not allow GPR register 0 when the will\nbe generating a mtvsrdd instruction.  In the definition of the mtvsrdd\ninstruction, if the RA register is 0, it means clear the upper 64 bits of\nthe vector instead of moving register GPR 0 to those bits.\n\nWhen I wrote the extendditi2 pattern, I forgot that mtvsrdd had that\nbehavior so I used a 'r' constraint instead of 'b'.  In the rare case\nwhere the value is in GPR register 0, this split will fail.\n\nThis patch uses the right constraint for extendditi2.\n\n2022-03-11   Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\tPR target/104868\n\t* config/rs6000/vsx.md (extendditi2): Use a 'b' constraint when\n\tmoving from a GPR register to an Altivec register.", "tree": {"sha": "33a42bf06126fe44d1b53c3b5b40db0f340872d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a42bf06126fe44d1b53c3b5b40db0f340872d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cb27b85a7b977958d53e1a29596ba211d21dde2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb27b85a7b977958d53e1a29596ba211d21dde2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb27b85a7b977958d53e1a29596ba211d21dde2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb27b85a7b977958d53e1a29596ba211d21dde2/comments", "author": null, "committer": null, "parents": [{"sha": "b00f9761b9b9bfa2be6dfd41b3f56a8ae9dba6d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00f9761b9b9bfa2be6dfd41b3f56a8ae9dba6d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00f9761b9b9bfa2be6dfd41b3f56a8ae9dba6d0"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "15bd86dfdfb69333efdb6e6c2d683623fa587c35", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb27b85a7b977958d53e1a29596ba211d21dde2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb27b85a7b977958d53e1a29596ba211d21dde2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=3cb27b85a7b977958d53e1a29596ba211d21dde2", "patch": "@@ -5033,7 +5033,7 @@\n ;; generate the vextsd2q instruction.\n (define_insn_and_split \"extendditi2\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=r,r,v,v,v\")\n-\t(sign_extend:TI (match_operand:DI 1 \"input_operand\" \"r,m,r,wa,Z\")))\n+\t(sign_extend:TI (match_operand:DI 1 \"input_operand\" \"r,m,b,wa,Z\")))\n    (clobber (reg:DI CA_REGNO))]\n   \"TARGET_POWERPC64 && TARGET_POWER10\"\n   \"#\""}]}