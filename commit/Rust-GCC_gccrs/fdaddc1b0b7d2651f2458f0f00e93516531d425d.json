{"sha": "fdaddc1b0b7d2651f2458f0f00e93516531d425d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhZGRjMWIwYjdkMjY1MWYyNDU4ZjBmMDBlOTM1MTY1MzFkNDI1ZA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-11T15:34:11Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-11T15:34:11Z"}, "message": "[AArch64] Replace temporary inline assembler for vset_lane\n\n\t* config/aarch64/arm_neon.h (aarch64_vset_lane_any): New (*2).\n\t(vset_lane_f32, vset_lane_f64, vset_lane_p8, vset_lane_p16,\n\tvset_lane_s8, vset_lane_s16, vset_lane_s32, vset_lane_s64,\n\tvset_lane_u8, vset_lane_u16, vset_lane_u32, vset_lane_u64,\n\tvsetq_lane_f32, vsetq_lane_f64, vsetq_lane_p8, vsetq_lane_p16,\n\tvsetq_lane_s8, vsetq_lane_s16, vsetq_lane_s32, vsetq_lane_s64,\n\tvsetq_lane_u8, vsetq_lane_u16, vsetq_lane_u32, vsetq_lane_u64):\n\tReplace inline assembler with __aarch64_vset_lane_any.\n\nFrom-SVN: r215179", "tree": {"sha": "9d0fcfe5fa3614752114c91fd6854a9d6ee44417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d0fcfe5fa3614752114c91fd6854a9d6ee44417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdaddc1b0b7d2651f2458f0f00e93516531d425d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdaddc1b0b7d2651f2458f0f00e93516531d425d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdaddc1b0b7d2651f2458f0f00e93516531d425d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdaddc1b0b7d2651f2458f0f00e93516531d425d/comments", "author": null, "committer": null, "parents": [{"sha": "8acf549a4490b892891a9e9ed7c96c93f707519f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acf549a4490b892891a9e9ed7c96c93f707519f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acf549a4490b892891a9e9ed7c96c93f707519f"}], "stats": {"total": 491, "additions": 179, "deletions": 312}, "files": [{"sha": "17e7647c99b2ca1cf9bb551f4fb143570a405a07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdaddc1b0b7d2651f2458f0f00e93516531d425d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdaddc1b0b7d2651f2458f0f00e93516531d425d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdaddc1b0b7d2651f2458f0f00e93516531d425d", "patch": "@@ -1,3 +1,14 @@\n+2014-09-11  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (aarch64_vset_lane_any): New (*2).\n+\t(vset_lane_f32, vset_lane_f64, vset_lane_p8, vset_lane_p16,\n+\tvset_lane_s8, vset_lane_s16, vset_lane_s32, vset_lane_s64,\n+\tvset_lane_u8, vset_lane_u16, vset_lane_u32, vset_lane_u64,\n+\tvsetq_lane_f32, vsetq_lane_f64, vsetq_lane_p8, vsetq_lane_p16,\n+\tvsetq_lane_s8, vsetq_lane_s16, vsetq_lane_s32, vsetq_lane_s64,\n+\tvsetq_lane_u8, vsetq_lane_u16, vsetq_lane_u32, vsetq_lane_u64):\n+\tReplace inline assembler with __aarch64_vset_lane_any.\n+\n 2014-09-11  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/arm_neon.h (vmull_high_lane_s16): Fix argument"}, {"sha": "93808346bb7d5507ac01d79e1534ed9094e91b3b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 168, "deletions": 312, "changes": 480, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdaddc1b0b7d2651f2458f0f00e93516531d425d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdaddc1b0b7d2651f2458f0f00e93516531d425d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=fdaddc1b0b7d2651f2458f0f00e93516531d425d", "patch": "@@ -628,6 +628,174 @@ typedef struct poly16x8x4_t\n #define __aarch64_vdupq_laneq_u64(__a, __b) \\\n    __aarch64_vdup_lane_any (u64, q, q, __a, __b)\n \n+/* vset_lane internal macro.  */\n+\n+#ifdef __AARCH64EB__\n+/* For big-endian, GCC's vector indices are the opposite way around\n+   to the architectural lane indices used by Neon intrinsics.  */\n+#define __aarch64_vset_lane_any(__vec, __index, __val, __lanes) \\\n+  __extension__\t\t\t\t\t\t\t\\\n+  ({\t\t\t\t\t\t\t\t\\\n+    __builtin_aarch64_im_lane_boundsi (__index, __lanes);\t\\\n+    __vec[__lanes - 1 - __index] = __val;\t\t\t\\\n+    __vec;\t\t\t\t\t\t\t\\\n+  })\n+#else\n+#define __aarch64_vset_lane_any(__vec, __index, __val, __lanes) \\\n+  __extension__\t\t\t\t\t\t\t\\\n+  ({\t\t\t\t\t\t\t\t\\\n+    __builtin_aarch64_im_lane_boundsi (__index, __lanes);\t\\\n+    __vec[__index] = __val;\t\t\t\t\t\\\n+    __vec;\t\t\t\t\t\t\t\\\n+  })\n+#endif\n+\n+/* vset_lane  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vset_lane_f32 (float32_t __elem, float32x2_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 2);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vset_lane_f64 (float64_t __elem, float64x1_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 1);\n+}\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vset_lane_p8 (poly8_t __elem, poly8x8_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 8);\n+}\n+\n+__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n+vset_lane_p16 (poly16_t __elem, poly16x4_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 4);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vset_lane_s8 (int8_t __elem, int8x8_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 8);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vset_lane_s16 (int16_t __elem, int16x4_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 4);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vset_lane_s32 (int32_t __elem, int32x2_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 2);\n+}\n+\n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vset_lane_s64 (int64_t __elem, int64x1_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 1);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vset_lane_u8 (uint8_t __elem, uint8x8_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 8);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vset_lane_u16 (uint16_t __elem, uint16x4_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 4);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vset_lane_u32 (uint32_t __elem, uint32x2_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 2);\n+}\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vset_lane_u64 (uint64_t __elem, uint64x1_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 1);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vsetq_lane_f32 (float32_t __elem, float32x4_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 4);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vsetq_lane_f64 (float64_t __elem, float64x2_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 2);\n+}\n+\n+__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n+vsetq_lane_p8 (poly8_t __elem, poly8x16_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 16);\n+}\n+\n+__extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n+vsetq_lane_p16 (poly16_t __elem, poly16x8_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 8);\n+}\n+\n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vsetq_lane_s8 (int8_t __elem, int8x16_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 16);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vsetq_lane_s16 (int16_t __elem, int16x8_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 8);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vsetq_lane_s32 (int32_t __elem, int32x4_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 4);\n+}\n+\n+__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n+vsetq_lane_s64 (int64_t __elem, int64x2_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 2);\n+}\n+\n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vsetq_lane_u8 (uint8_t __elem, uint8x16_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 16);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vsetq_lane_u16 (uint16_t __elem, uint16x8_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 8);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vsetq_lane_u32 (uint32_t __elem, uint32x4_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 4);\n+}\n+\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vsetq_lane_u64 (uint64_t __elem, uint64x2_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__vec, __index, __elem, 2);\n+}\n+\n /* vadd  */\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vadd_s8 (int8x8_t __a, int8x8_t __b)\n@@ -10807,318 +10975,6 @@ vrsubhn_u64 (uint64x2_t a, uint64x2_t b)\n   return result;\n }\n \n-#define vset_lane_f32(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x2_t b_ = (b);                                            \\\n-       float32_t a_ = (a);                                              \\\n-       float32x2_t result;                                              \\\n-       __asm__ (\"ins %0.s[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_f64(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float64x1_t b_ = (b);                                            \\\n-       float64_t a_ = (a);                                              \\\n-       float64x1_t result;                                              \\\n-       __asm__ (\"ins %0.d[%3], %x1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_p8(a, b, c)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly8x8_t b_ = (b);                                              \\\n-       poly8_t a_ = (a);                                                \\\n-       poly8x8_t result;                                                \\\n-       __asm__ (\"ins %0.b[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_p16(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly16x4_t b_ = (b);                                             \\\n-       poly16_t a_ = (a);                                               \\\n-       poly16x4_t result;                                               \\\n-       __asm__ (\"ins %0.h[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_s8(a, b, c)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int8x8_t b_ = (b);                                               \\\n-       int8_t a_ = (a);                                                 \\\n-       int8x8_t result;                                                 \\\n-       __asm__ (\"ins %0.b[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_s16(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x4_t b_ = (b);                                              \\\n-       int16_t a_ = (a);                                                \\\n-       int16x4_t result;                                                \\\n-       __asm__ (\"ins %0.h[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_s32(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x2_t b_ = (b);                                              \\\n-       int32_t a_ = (a);                                                \\\n-       int32x2_t result;                                                \\\n-       __asm__ (\"ins %0.s[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_s64(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x1_t b_ = (b);                                              \\\n-       int64_t a_ = (a);                                                \\\n-       int64x1_t result;                                                \\\n-       __asm__ (\"ins %0.d[%3], %x1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_u8(a, b, c)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint8x8_t b_ = (b);                                              \\\n-       uint8_t a_ = (a);                                                \\\n-       uint8x8_t result;                                                \\\n-       __asm__ (\"ins %0.b[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_u16(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x4_t b_ = (b);                                             \\\n-       uint16_t a_ = (a);                                               \\\n-       uint16x4_t result;                                               \\\n-       __asm__ (\"ins %0.h[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_u32(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x2_t b_ = (b);                                             \\\n-       uint32_t a_ = (a);                                               \\\n-       uint32x2_t result;                                               \\\n-       __asm__ (\"ins %0.s[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vset_lane_u64(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64x1_t b_ = (b);                                             \\\n-       uint64_t a_ = (a);                                               \\\n-       uint64x1_t result;                                               \\\n-       __asm__ (\"ins %0.d[%3], %x1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_f32(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x4_t b_ = (b);                                            \\\n-       float32_t a_ = (a);                                              \\\n-       float32x4_t result;                                              \\\n-       __asm__ (\"ins %0.s[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_f64(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float64x2_t b_ = (b);                                            \\\n-       float64_t a_ = (a);                                              \\\n-       float64x2_t result;                                              \\\n-       __asm__ (\"ins %0.d[%3], %x1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_p8(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly8x16_t b_ = (b);                                             \\\n-       poly8_t a_ = (a);                                                \\\n-       poly8x16_t result;                                               \\\n-       __asm__ (\"ins %0.b[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_p16(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly16x8_t b_ = (b);                                             \\\n-       poly16_t a_ = (a);                                               \\\n-       poly16x8_t result;                                               \\\n-       __asm__ (\"ins %0.h[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_s8(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int8x16_t b_ = (b);                                              \\\n-       int8_t a_ = (a);                                                 \\\n-       int8x16_t result;                                                \\\n-       __asm__ (\"ins %0.b[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_s16(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       int16_t a_ = (a);                                                \\\n-       int16x8_t result;                                                \\\n-       __asm__ (\"ins %0.h[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_s32(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       int32_t a_ = (a);                                                \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"ins %0.s[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_s64(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t b_ = (b);                                              \\\n-       int64_t a_ = (a);                                                \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"ins %0.d[%3], %x1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_u8(a, b, c)                                          \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint8x16_t b_ = (b);                                             \\\n-       uint8_t a_ = (a);                                                \\\n-       uint8x16_t result;                                               \\\n-       __asm__ (\"ins %0.b[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_u16(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t b_ = (b);                                             \\\n-       uint16_t a_ = (a);                                               \\\n-       uint16x8_t result;                                               \\\n-       __asm__ (\"ins %0.h[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_u32(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t b_ = (b);                                             \\\n-       uint32_t a_ = (a);                                               \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"ins %0.s[%3], %w1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsetq_lane_u64(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64x2_t b_ = (b);                                             \\\n-       uint64_t a_ = (a);                                               \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"ins %0.d[%3], %x1\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n #define vshrn_high_n_s16(a, b, c)                                       \\\n   __extension__                                                         \\\n     ({                                                                  \\"}]}