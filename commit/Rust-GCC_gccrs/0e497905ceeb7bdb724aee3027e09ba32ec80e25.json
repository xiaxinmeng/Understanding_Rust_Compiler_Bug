{"sha": "0e497905ceeb7bdb724aee3027e09ba32ec80e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0OTc5MDVjZWViN2JkYjcyNGFlZTMwMjdlMDliYTMyZWM4MGUyNQ==", "commit": {"author": {"name": "Ozkan Sezer", "email": "sezeroz@gmail.com", "date": "2009-09-04T14:33:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-09-04T14:33:16Z"}, "message": "re PR target/39065 (libiberty hashtab.c:hash_pointer() needs intptr_t)\n\n2009-09-04  Ozkan Sezer  <sezeroz@gmail.com>\n\n\tPR target/39065\n\t* configure.ac: Replace AC_CHECK_TYPE() for intptr_t and uintptr_t\n\twith AC_TYPE_INTPTR_T and AC_TYPE_UINTPTR_T.\n\t* config.in: Regenerated.\n\t* configure: Regenerated.\n\nFrom-SVN: r151423", "tree": {"sha": "2c388d6661dfc9985b529fd452d81632a23bad4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c388d6661dfc9985b529fd452d81632a23bad4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e497905ceeb7bdb724aee3027e09ba32ec80e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e497905ceeb7bdb724aee3027e09ba32ec80e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e497905ceeb7bdb724aee3027e09ba32ec80e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e497905ceeb7bdb724aee3027e09ba32ec80e25/comments", "author": {"login": "sezero", "id": 4222725, "node_id": "MDQ6VXNlcjQyMjI3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4222725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sezero", "html_url": "https://github.com/sezero", "followers_url": "https://api.github.com/users/sezero/followers", "following_url": "https://api.github.com/users/sezero/following{/other_user}", "gists_url": "https://api.github.com/users/sezero/gists{/gist_id}", "starred_url": "https://api.github.com/users/sezero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sezero/subscriptions", "organizations_url": "https://api.github.com/users/sezero/orgs", "repos_url": "https://api.github.com/users/sezero/repos", "events_url": "https://api.github.com/users/sezero/events{/privacy}", "received_events_url": "https://api.github.com/users/sezero/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22fc64b4d9a300216a82f2160ffbac6fec872f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fc64b4d9a300216a82f2160ffbac6fec872f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fc64b4d9a300216a82f2160ffbac6fec872f16"}], "stats": {"total": 118, "additions": 90, "deletions": 28}, "files": [{"sha": "b3dc41708b4a54459c5bea48547658fa0ce88c27", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0e497905ceeb7bdb724aee3027e09ba32ec80e25", "patch": "@@ -1,3 +1,11 @@\n+2009-09-04  Ozkan Sezer  <sezeroz@gmail.com>\n+\n+\tPR target/39065\n+\t* configure.ac: Replace AC_CHECK_TYPE() for intptr_t and uintptr_t\n+\twith AC_TYPE_INTPTR_T and AC_TYPE_UINTPTR_T.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2009-09-03  Ozkan Sezer  <sezeroz@gmail.com>\n \n \tPR target/39065"}, {"sha": "193164830cf82822c98c7033b335a386ef194d46", "filename": "libiberty/config.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=0e497905ceeb7bdb724aee3027e09ba32ec80e25", "patch": "@@ -121,6 +121,9 @@\n /* Define to 1 if you have the `insque' function. */\n #undef HAVE_INSQUE\n \n+/* Define to 1 if the system has the type `intptr_t'. */\n+#undef HAVE_INTPTR_T\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n@@ -457,13 +460,15 @@\n #undef inline\n #endif\n \n-/* Define to `long' if <sys/types.h> does not define. */\n+/* Define to the type of a signed integer type wide enough to hold a pointer,\n+   if such a type exists, and if the system does not define it. */\n #undef intptr_t\n \n /* Define to `int' if <sys/types.h> does not define. */\n #undef pid_t\n \n-/* Define to `unsigned long' if <sys/types.h> does not define. */\n+/* Define to the type of an unsigned integer type wide enough to hold a\n+   pointer, if such a type exists, and if the system does not define it. */\n #undef uintptr_t\n \n /* Define as `fork' if `vfork' does not work. */"}, {"sha": "423e59b9b30a690c54a672ebc42de94400a48177", "filename": "libiberty/configure", "status": "modified", "additions": 72, "deletions": 23, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=0e497905ceeb7bdb724aee3027e09ba32ec80e25", "patch": "@@ -5046,29 +5046,6 @@ _ACEOF\n \n \n \n-ac_fn_c_check_type \"$LINENO\" \"intptr_t\" \"ac_cv_type_intptr_t\" \"$ac_includes_default\"\n-if test \"x$ac_cv_type_intptr_t\" = x\"\"yes; then :\n-\n-else\n-\n-cat >>confdefs.h <<_ACEOF\n-#define intptr_t long\n-_ACEOF\n-\n-fi\n-\n-ac_fn_c_check_type \"$LINENO\" \"uintptr_t\" \"ac_cv_type_uintptr_t\" \"$ac_includes_default\"\n-if test \"x$ac_cv_type_uintptr_t\" = x\"\"yes; then :\n-\n-else\n-\n-cat >>confdefs.h <<_ACEOF\n-#define uintptr_t unsigned long\n-_ACEOF\n-\n-fi\n-\n-\n # Look for a 64-bit type.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for a 64-bit type\" >&5\n $as_echo_n \"checking for a 64-bit type... \" >&6; }\n@@ -5148,6 +5125,78 @@ _ACEOF\n \n fi\n \n+\n+  ac_fn_c_check_type \"$LINENO\" \"intptr_t\" \"ac_cv_type_intptr_t\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_intptr_t\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_INTPTR_T 1\" >>confdefs.h\n+\n+else\n+  for ac_type in 'int' 'long int' 'long long int'; do\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(sizeof (void *) <= sizeof ($ac_type))];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define intptr_t $ac_type\n+_ACEOF\n+\n+\t  ac_type=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+       test -z \"$ac_type\" && break\n+     done\n+fi\n+\n+\n+\n+  ac_fn_c_check_type \"$LINENO\" \"uintptr_t\" \"ac_cv_type_uintptr_t\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_uintptr_t\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_UINTPTR_T 1\" >>confdefs.h\n+\n+else\n+  for ac_type in 'unsigned int' 'unsigned long int' \\\n+\t'unsigned long long int'; do\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(sizeof (void *) <= sizeof ($ac_type))];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define uintptr_t $ac_type\n+_ACEOF\n+\n+\t  ac_type=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+       test -z \"$ac_type\" && break\n+     done\n+fi\n+\n+\n+\n # Given the above check, we always have uintptr_t or a fallback\n # definition.  So define HAVE_UINTPTR_T in case any imported code\n # relies on it."}, {"sha": "00dd68dcef2c35c6858281f40ea7c80c2cabccf7", "filename": "libiberty/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e497905ceeb7bdb724aee3027e09ba32ec80e25/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=0e497905ceeb7bdb724aee3027e09ba32ec80e25", "patch": "@@ -254,9 +254,6 @@ libiberty_AC_DECLARE_ERRNO\n # Determine the size of an int for struct fibnode.\n AC_CHECK_SIZEOF([int])\n \n-AC_CHECK_TYPE(intptr_t, long)\n-AC_CHECK_TYPE(uintptr_t, unsigned long)\n-\n # Look for a 64-bit type.\n AC_MSG_CHECKING([for a 64-bit type])\n AC_CACHE_VAL(liberty_cv_uint64,\n@@ -290,6 +287,9 @@ if test \"$liberty_cv_uint64\" != none; then\n                      [Define to an unsigned 64-bit type available in the compiler.])\n fi\n \n+AC_TYPE_INTPTR_T\n+AC_TYPE_UINTPTR_T\n+\n # Given the above check, we always have uintptr_t or a fallback\n # definition.  So define HAVE_UINTPTR_T in case any imported code\n # relies on it."}]}