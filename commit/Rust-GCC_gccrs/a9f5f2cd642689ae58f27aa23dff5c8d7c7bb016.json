{"sha": "a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016", "node_id": "C_kwDOANBUbNoAKGE5ZjVmMmNkNjQyNjg5YWU1OGYyN2FhMjNkZmY1YzhkN2M3YmIwMTY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-17T06:27:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:41Z"}, "message": "[Ada] Move registering code for predefined primitives to Exp_Disp\n\nThis avoids making Expand_Interface_Thunk visible from the outside.\n\nNo functional changes.\n\ngcc/ada/\n\n\t* exp_ch6.adb (Freeze_Subprogram.Register_Predefined_DT_Entry): Move\n\tprocedure to...\n\t* exp_disp.ads (Expand_Interface_Thunk): Move declaration to...\n\t(Register_Predefined_Primitive): Declare.\n\t* exp_disp.adb (Expand_Interface_Thunk): ...here.\n\t(Register_Predefined_Primitive): ...here and change into a function\n\treturning List_Id.", "tree": {"sha": "0c6e8612c2de53c447c5ed4f2f6a6d05a7cc5780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6e8612c2de53c447c5ed4f2f6a6d05a7cc5780"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a06e886ac86fd14e02eca0cf70360f1c2d9374f"}], "stats": {"total": 235, "additions": 118, "deletions": 117}, "files": [{"sha": "3fcf51a18bbaaa4b21df784803331cb8dbf03e75", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 5, "deletions": 103, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016", "patch": "@@ -7828,109 +7828,9 @@ package body Exp_Ch6 is\n    -----------------------\n \n    procedure Freeze_Subprogram (N : Node_Id) is\n-      Loc : constant Source_Ptr := Sloc (N);\n-\n-      procedure Register_Predefined_DT_Entry (Prim : Entity_Id);\n-      --  (Ada 2005): Register a predefined primitive in all the secondary\n-      --  dispatch tables of its primitive type.\n-\n-      ----------------------------------\n-      -- Register_Predefined_DT_Entry --\n-      ----------------------------------\n-\n-      procedure Register_Predefined_DT_Entry (Prim : Entity_Id) is\n-         Iface_DT_Ptr : Elmt_Id;\n-         L            : List_Id;\n-         Tagged_Typ   : Entity_Id;\n-         Thunk_Id     : Entity_Id;\n-         Thunk_Code   : Node_Id;\n-\n-      begin\n-         Tagged_Typ := Find_Dispatching_Type (Prim);\n-\n-         if No (Access_Disp_Table (Tagged_Typ))\n-           or else not Has_Interfaces (Tagged_Typ)\n-           or else not RTE_Available (RE_Interface_Tag)\n-           or else Restriction_Active (No_Dispatching_Calls)\n-         then\n-            return;\n-         end if;\n-\n-         --  Skip the first two access-to-dispatch-table pointers since they\n-         --  leads to the primary dispatch table (predefined DT and user\n-         --  defined DT). We are only concerned with the secondary dispatch\n-         --  table pointers. Note that the access-to- dispatch-table pointer\n-         --  corresponds to the first implemented interface retrieved below.\n-\n-         Iface_DT_Ptr :=\n-           Next_Elmt (Next_Elmt (First_Elmt (Access_Disp_Table (Tagged_Typ))));\n-\n-         while Present (Iface_DT_Ptr)\n-           and then Ekind (Node (Iface_DT_Ptr)) = E_Constant\n-         loop\n-            pragma Assert (Has_Thunks (Node (Iface_DT_Ptr)));\n-            Expand_Interface_Thunk (Prim, Thunk_Id, Thunk_Code,\n-              Iface => Related_Type (Node (Iface_DT_Ptr)));\n-\n-            if Present (Thunk_Code) then\n-               L := New_List (\n-                 Thunk_Code,\n-\n-                 Build_Set_Predefined_Prim_Op_Address (Loc,\n-                   Tag_Node     =>\n-                     New_Occurrence_Of (Node (Next_Elmt (Iface_DT_Ptr)), Loc),\n-                   Position     => DT_Position (Prim),\n-                   Address_Node =>\n-                     Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n-                       Make_Attribute_Reference (Loc,\n-                         Prefix         => New_Occurrence_Of (Thunk_Id, Loc),\n-                         Attribute_Name => Name_Unrestricted_Access))),\n-\n-                 Build_Set_Predefined_Prim_Op_Address (Loc,\n-                   Tag_Node     =>\n-                     New_Occurrence_Of\n-                      (Node (Next_Elmt (Next_Elmt (Next_Elmt (Iface_DT_Ptr)))),\n-                       Loc),\n-                   Position     => DT_Position (Prim),\n-                   Address_Node =>\n-                     Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n-                       Make_Attribute_Reference (Loc,\n-                         Prefix         => New_Occurrence_Of (Prim, Loc),\n-                         Attribute_Name => Name_Unrestricted_Access))));\n-\n-               if No (Actions (N)) then\n-                  Set_Actions (N, L);\n-\n-               else\n-                  Append_List (L, Actions (N));\n-               end if;\n-            end if;\n-\n-            --  Skip the tag of the predefined primitives dispatch table\n-\n-            Next_Elmt (Iface_DT_Ptr);\n-            pragma Assert (Has_Thunks (Node (Iface_DT_Ptr)));\n-\n-            --  Skip tag of the no-thunks dispatch table\n-\n-            Next_Elmt (Iface_DT_Ptr);\n-            pragma Assert (not Has_Thunks (Node (Iface_DT_Ptr)));\n-\n-            --  Skip tag of predefined primitives no-thunks dispatch table\n-\n-            Next_Elmt (Iface_DT_Ptr);\n-            pragma Assert (not Has_Thunks (Node (Iface_DT_Ptr)));\n-\n-            Next_Elmt (Iface_DT_Ptr);\n-         end loop;\n-      end Register_Predefined_DT_Entry;\n-\n-      --  Local variables\n-\n+      Loc  : constant Source_Ptr := Sloc (N);\n       Subp : constant Entity_Id  := Entity (N);\n \n-   --  Start of processing for Freeze_Subprogram\n-\n    begin\n       --  We suppress the initialization of the dispatch table entry when\n       --  not Tagged_Type_Expansion because the dispatching mechanism is\n@@ -7985,10 +7885,12 @@ package body Exp_Ch6 is\n                  or else Present (Interface_Alias (Subp))\n                then\n                   if Is_Predefined_Dispatching_Operation (Subp) then\n-                     Register_Predefined_DT_Entry (Subp);\n+                     L := Register_Predefined_Primitive (Loc, Subp);\n+                  else\n+                     L := New_List;\n                   end if;\n \n-                  L := Register_Primitive (Loc, Prim => Subp);\n+                  Append_List_To (L, Register_Primitive (Loc, Subp));\n \n                   if Is_Empty_List (L) then\n                      null;"}, {"sha": "7f6bb819030b263fc4825473bbadb616ebcea586", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016", "patch": "@@ -80,6 +80,20 @@ package body Exp_Disp is\n    --  Ada 2005 (AI-251): Returns the fixed position in the dispatch table\n    --  of the default primitive operations.\n \n+   procedure Expand_Interface_Thunk\n+     (Prim       : Entity_Id;\n+      Thunk_Id   : out Entity_Id;\n+      Thunk_Code : out Node_Id;\n+      Iface      : Entity_Id);\n+   --  Ada 2005 (AI-251): When a tagged type implements abstract interfaces we\n+   --  generate additional subprograms (thunks) associated with each primitive\n+   --  Prim to have a layout compatible with the C++ ABI. The thunk displaces\n+   --  the pointers to the actuals that depend on the controlling type before\n+   --  transferring control to the target subprogram. If there is no need to\n+   --  generate the thunk, then Thunk_Id is set to Empty. Otherwise Thunk_Id\n+   --  is set to the defining identifier of the thunk and Thunk_Code to the\n+   --  code generated for the thunk respectively.\n+\n    function Has_DT (Typ : Entity_Id) return Boolean;\n    pragma Inline (Has_DT);\n    --  Returns true if we generate a dispatch table for tagged type Typ\n@@ -7131,6 +7145,96 @@ package body Exp_Disp is\n       end if;\n    end Prim_Op_Kind;\n \n+   -----------------------------------\n+   -- Register_Predefined_Primitive --\n+   -----------------------------------\n+\n+   function Register_Predefined_Primitive\n+     (Loc     : Source_Ptr;\n+      Prim    : Entity_Id) return List_Id\n+   is\n+      L          : constant List_Id   := New_List;\n+      Tagged_Typ : constant Entity_Id := Find_Dispatching_Type (Prim);\n+\n+      Iface_DT_Ptr  : Elmt_Id;\n+      Thunk_Id      : Entity_Id;\n+      Thunk_Code    : Node_Id;\n+\n+   begin\n+      if No (Access_Disp_Table (Tagged_Typ))\n+        or else not Has_Interfaces (Tagged_Typ)\n+        or else not RTE_Available (RE_Interface_Tag)\n+        or else Restriction_Active (No_Dispatching_Calls)\n+      then\n+         return L;\n+      end if;\n+\n+      --  Skip the first two access-to-dispatch-table pointers since they\n+      --  leads to the primary dispatch table (predefined DT and user\n+      --  defined DT). We are only concerned with the secondary dispatch\n+      --  table pointers. Note that the access-to- dispatch-table pointer\n+      --  corresponds to the first implemented interface retrieved below.\n+\n+      Iface_DT_Ptr :=\n+        Next_Elmt (Next_Elmt (First_Elmt (Access_Disp_Table (Tagged_Typ))));\n+\n+      while Present (Iface_DT_Ptr)\n+        and then Ekind (Node (Iface_DT_Ptr)) = E_Constant\n+      loop\n+         pragma Assert (Has_Thunks (Node (Iface_DT_Ptr)));\n+\n+         Expand_Interface_Thunk\n+           (Prim, Thunk_Id, Thunk_Code, Related_Type (Node (Iface_DT_Ptr)));\n+\n+         if Present (Thunk_Id) then\n+            Append_To (L, Thunk_Code);\n+\n+            Append_To (L,\n+              Build_Set_Predefined_Prim_Op_Address (Loc,\n+                Tag_Node     =>\n+                  New_Occurrence_Of (Node (Next_Elmt (Iface_DT_Ptr)), Loc),\n+                Position     => DT_Position (Prim),\n+                Address_Node =>\n+                  Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n+                    Make_Attribute_Reference (Loc,\n+                      Prefix         => New_Occurrence_Of (Thunk_Id, Loc),\n+                      Attribute_Name => Name_Unrestricted_Access))));\n+\n+            Append_To (L,\n+              Build_Set_Predefined_Prim_Op_Address (Loc,\n+                Tag_Node     =>\n+                  New_Occurrence_Of\n+                   (Node (Next_Elmt (Next_Elmt (Next_Elmt (Iface_DT_Ptr)))),\n+                    Loc),\n+                Position     => DT_Position (Prim),\n+                Address_Node =>\n+                  Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n+                    Make_Attribute_Reference (Loc,\n+                      Prefix         => New_Occurrence_Of (Prim, Loc),\n+                      Attribute_Name => Name_Unrestricted_Access))));\n+         end if;\n+\n+         --  Skip the tag of the predefined primitives dispatch table\n+\n+         Next_Elmt (Iface_DT_Ptr);\n+         pragma Assert (Has_Thunks (Node (Iface_DT_Ptr)));\n+\n+         --  Skip tag of the no-thunks dispatch table\n+\n+         Next_Elmt (Iface_DT_Ptr);\n+         pragma Assert (not Has_Thunks (Node (Iface_DT_Ptr)));\n+\n+         --  Skip tag of predefined primitives no-thunks dispatch table\n+\n+         Next_Elmt (Iface_DT_Ptr);\n+         pragma Assert (not Has_Thunks (Node (Iface_DT_Ptr)));\n+\n+         Next_Elmt (Iface_DT_Ptr);\n+      end loop;\n+\n+      return L;\n+   end Register_Predefined_Primitive;\n+\n    ------------------------\n    -- Register_Primitive --\n    ------------------------"}, {"sha": "a02e44980cca75271b49ce8b956be09b39607e4f", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=a9f5f2cd642689ae58f27aa23dff5c8d7c7bb016", "patch": "@@ -233,20 +233,6 @@ package Exp_Disp is\n    --  to the object to give access to the interface tag associated with the\n    --  dispatch table of the target type.\n \n-   procedure Expand_Interface_Thunk\n-     (Prim       : Entity_Id;\n-      Thunk_Id   : out Entity_Id;\n-      Thunk_Code : out Node_Id;\n-      Iface      : Entity_Id);\n-   --  Ada 2005 (AI-251): When a tagged type implements abstract interfaces we\n-   --  generate additional subprograms (thunks) associated with each primitive\n-   --  Prim to have a layout compatible with the C++ ABI. The thunk displaces\n-   --  the pointers to the actuals that depend on the controlling type before\n-   --  transferring control to the target subprogram. If there is no need to\n-   --  generate the thunk then Thunk_Id and Thunk_Code are set to Empty.\n-   --  Otherwise they are set to the defining identifier and the subprogram\n-   --  body of the generated thunk.\n-\n    function Has_CPP_Constructors (Typ : Entity_Id) return Boolean;\n    --  Returns true if the type has CPP constructors\n \n@@ -337,6 +323,15 @@ package Exp_Disp is\n    --  tagged types this routine imports the forward declaration of the tag\n    --  entity, that will be declared and exported by Make_DT.\n \n+   function Register_Predefined_Primitive\n+     (Loc     : Source_Ptr;\n+      Prim    : Entity_Id) return List_Id;\n+   --  Ada 2005: Register a predefined primitive in all the secondary dispatch\n+   --  tables of its primitive type.\n+   --\n+   --  The caller is responsible for inserting the generated code in the\n+   --  proper place.\n+\n    function Register_Primitive\n      (Loc     : Source_Ptr;\n       Prim    : Entity_Id) return List_Id;"}]}