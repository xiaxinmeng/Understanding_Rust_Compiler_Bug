{"sha": "b49407f81a769c53bc2dccb20c2f3a7b1b255290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5NDA3ZjgxYTc2OWM1M2JjMmRjY2IyMGMyZjNhN2IxYjI1NTI5MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-28T18:29:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-28T18:29:32Z"}, "message": "ipa-prop.c (ipa_set_jf_known_type): Record always the main variant of the type.\n\n\n\t* ipa-prop.c (ipa_set_jf_known_type): Record always the main variant\n\tof the type.\n\t(ipa_set_ancestor_jf) Likewise.\n\t(check_stmt_for_type_change): Check that we work on main variant.\n\t(detect_type_change): Look into main variant.\n\t(compute_known_type_jump_func): Check that main variant has BINFO.\n\nFrom-SVN: r212108", "tree": {"sha": "65bca9d9066431bf79ff6235031e6588852b5bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65bca9d9066431bf79ff6235031e6588852b5bfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b49407f81a769c53bc2dccb20c2f3a7b1b255290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49407f81a769c53bc2dccb20c2f3a7b1b255290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49407f81a769c53bc2dccb20c2f3a7b1b255290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49407f81a769c53bc2dccb20c2f3a7b1b255290/comments", "author": null, "committer": null, "parents": [{"sha": "c7e1befad2b375b2245dca11329df92b600ef3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e1befad2b375b2245dca11329df92b600ef3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e1befad2b375b2245dca11329df92b600ef3ed"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "75b2816cb4672ab586438a1434098737cf627cec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49407f81a769c53bc2dccb20c2f3a7b1b255290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49407f81a769c53bc2dccb20c2f3a7b1b255290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b49407f81a769c53bc2dccb20c2f3a7b1b255290", "patch": "@@ -1,3 +1,12 @@\n+2014-06-28  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-prop.c (ipa_set_jf_known_type): Record always the main variant\n+\tof the type.\n+\t(ipa_set_ancestor_jf) Likewise.\n+\t(check_stmt_for_type_change): Check that we work on main variant.\n+\t(detect_type_change): Look into main variant.\n+\t(compute_known_type_jump_func): Check that main variant has BINFO.\n+\n 2014-06-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-devirt.c (set_type_binfo): New function."}, {"sha": "dab8291dd566532f2f26761c43c9fadb15f7e334", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49407f81a769c53bc2dccb20c2f3a7b1b255290/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49407f81a769c53bc2dccb20c2f3a7b1b255290/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=b49407f81a769c53bc2dccb20c2f3a7b1b255290", "patch": "@@ -438,6 +438,11 @@ static void\n ipa_set_jf_known_type (struct ipa_jump_func *jfunc, HOST_WIDE_INT offset,\n \t\t       tree base_type, tree component_type)\n {\n+  /* Recording and propagating main variants increases change that types\n+     will match.  */\n+  base_type = TYPE_MAIN_VARIANT (base_type);\n+  component_type = TYPE_MAIN_VARIANT (component_type);\n+\n   gcc_assert (TREE_CODE (component_type) == RECORD_TYPE\n \t      && TYPE_BINFO (component_type));\n   if (!flag_devirtualize)\n@@ -529,6 +534,8 @@ ipa_set_ancestor_jf (struct ipa_jump_func *jfunc, HOST_WIDE_INT offset,\n {\n   if (!flag_devirtualize)\n     type_preserved = false;\n+  if (type)\n+    type = TYPE_MAIN_VARIANT (type);\n   gcc_assert (!type_preserved\n \t      || (TREE_CODE (type) == RECORD_TYPE\n \t\t  && TYPE_BINFO (type)\n@@ -712,7 +719,9 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n   if (stmt_may_be_vtbl_ptr_store (stmt))\n     {\n       tree type;\n+\n       type = extr_type_from_vtbl_ptr_store (stmt, tci);\n+      gcc_assert (!type || TYPE_MAIN_VARIANT (type) == type);\n       if (tci->type_maybe_changed\n \t  && type != tci->known_current_type)\n \ttci->multiple_types_encountered = true;\n@@ -749,10 +758,12 @@ detect_type_change (tree arg, tree base, tree comp_type, gimple call,\n       /* Be sure expected_type is polymorphic.  */\n       || !comp_type\n       || TREE_CODE (comp_type) != RECORD_TYPE\n-      || !TYPE_BINFO (comp_type)\n-      || !BINFO_VTABLE (TYPE_BINFO (comp_type)))\n+      || !TYPE_BINFO (TYPE_MAIN_VARIANT (comp_type))\n+      || !BINFO_VTABLE (TYPE_BINFO (TYPE_MAIN_VARIANT (comp_type))))\n     return true;\n \n+  comp_type = TYPE_MAIN_VARIANT (comp_type);\n+\n   /* C++ methods are not allowed to change THIS pointer unless they\n      are constructors or destructors.  */\n   if (TREE_CODE\t(base) == MEM_REF\n@@ -1408,8 +1419,8 @@ compute_known_type_jump_func (tree op, struct ipa_jump_func *jfunc,\n       /* Be sure expected_type is polymorphic.  */\n       || !expected_type\n       || TREE_CODE (expected_type) != RECORD_TYPE\n-      || !TYPE_BINFO (expected_type)\n-      || !BINFO_VTABLE (TYPE_BINFO (expected_type)))\n+      || !TYPE_BINFO (TYPE_MAIN_VARIANT (expected_type))\n+      || !BINFO_VTABLE (TYPE_BINFO (TYPE_MAIN_VARIANT (expected_type))))\n     return;\n \n   op = TREE_OPERAND (op, 0);"}]}