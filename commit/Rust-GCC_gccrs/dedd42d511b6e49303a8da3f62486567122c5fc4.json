{"sha": "dedd42d511b6e49303a8da3f62486567122c5fc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVkZDQyZDUxMWI2ZTQ5MzAzYThkYTNmNjI0ODY1NjcxMjJjNWZjNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-02-21T09:38:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-02-21T09:38:07Z"}, "message": "tree.def (PAREN_EXPR): New tree code.\n\n2008-02-21  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.def (PAREN_EXPR): New tree code.\n\t* fold-const.c (fold_unary): Remove PAREN_EXPR around constants\n\tand PAREN_EXPR.\n\t* tree-pretty-print.c (dump_generic_node): Handle PAREN_EXPR.\n\t* expr.c (expand_expr_real_1): Likewise.\n\t* tree-inline.c (estimate_num_insns_1): Likewise.\n\t* tree-complex.c (expand_complex_move): Likewise.\n\t* tree-vectorizer.c (vect_is_simple_use): Treat PAREN_EXPR (x)\n\tas plain x.\n\n\t* trans-expr.c (gfc_conv_expr_op): Expand INTRINSIC_PARENTHESES\n\tas unary PAREN_EXPR for real and complex typed expressions.\n\t(gfc_conv_unary_op): Fold the built tree.\n\n\t* gfortran.dg/reassoc_1.f90: New testcase.\n\t* gfortran.dg/reassoc_2.f90: Likewise.\n\t* gfortran.dg/reassoc_3.f90: Likewise.\n\nFrom-SVN: r132515", "tree": {"sha": "9acaddca083fdd255ba2f0c1f7b3920dd211da9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9acaddca083fdd255ba2f0c1f7b3920dd211da9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dedd42d511b6e49303a8da3f62486567122c5fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dedd42d511b6e49303a8da3f62486567122c5fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dedd42d511b6e49303a8da3f62486567122c5fc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dedd42d511b6e49303a8da3f62486567122c5fc4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "163b0163e6197a4209b7087d580bf5b8ed51700d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163b0163e6197a4209b7087d580bf5b8ed51700d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/163b0163e6197a4209b7087d580bf5b8ed51700d"}], "stats": {"total": 114, "additions": 108, "deletions": 6}, "files": [{"sha": "29576a6b679a3a350cec7fdbafac06a15e3a2635", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -1,3 +1,15 @@\n+2008-02-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.def (PAREN_EXPR): New tree code.\n+\t* fold-const.c (fold_unary): Remove PAREN_EXPR around constants\n+\tand PAREN_EXPR.\n+\t* tree-pretty-print.c (dump_generic_node): Handle PAREN_EXPR.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\t* tree-inline.c (estimate_num_insns_1): Likewise.\n+\t* tree-complex.c (expand_complex_move): Likewise.\n+\t* tree-vectorizer.c (vect_is_simple_use): Treat PAREN_EXPR (x)\n+\tas plain x.\n+\n 2008-02-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/35225"}, {"sha": "36741918fb3ee8b47d95530cda7f404fc26f048a", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -8049,6 +8049,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       }\n       return expand_call (exp, target, ignore);\n \n+    case PAREN_EXPR:\n     case NON_LVALUE_EXPR:\n     case NOP_EXPR:\n     case CONVERT_EXPR:"}, {"sha": "1ecd2255e4aa78ed97cdfe5ad71b43b1d5bf4309", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -8027,6 +8027,14 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \n   switch (code)\n     {\n+    case PAREN_EXPR:\n+      /* Re-association barriers around constants and other re-association\n+\t barriers can be removed.  */\n+      if (CONSTANT_CLASS_P (op0)\n+\t  || TREE_CODE (op0) == PAREN_EXPR)\n+\treturn fold_convert (type, op0);\n+      return NULL_TREE;\n+\n     case NOP_EXPR:\n     case FLOAT_EXPR:\n     case CONVERT_EXPR:"}, {"sha": "43e89dad2f0ac709825e03b1da3d44fc6dffd637", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -1,3 +1,9 @@\n+2008-02-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans-expr.c (gfc_conv_expr_op): Expand INTRINSIC_PARENTHESES\n+\tas unary PAREN_EXPR for real and complex typed expressions.\n+\t(gfc_conv_unary_op): Fold the built tree.\n+\n 2008-02-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34997"}, {"sha": "8d0392fd34756240881531f154d8040ecd6c3d90", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -607,10 +607,10 @@ gfc_conv_unary_op (enum tree_code code, gfc_se * se, gfc_expr * expr)\n      We must convert it to a compare to 0 (e.g. EQ_EXPR (op1, 0)).\n      All other unary operators have an equivalent GIMPLE unary operator.  */\n   if (code == TRUTH_NOT_EXPR)\n-    se->expr = build2 (EQ_EXPR, type, operand.expr,\n-\t\t       build_int_cst (type, 0));\n+    se->expr = fold_build2 (EQ_EXPR, type, operand.expr,\n+\t\t\t    build_int_cst (type, 0));\n   else\n-    se->expr = build1 (code, type, operand.expr);\n+    se->expr = fold_build1 (code, type, operand.expr);\n \n }\n \n@@ -1071,8 +1071,17 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n   lop = 0;\n   switch (expr->value.op.operator)\n     {\n-    case INTRINSIC_UPLUS:\n     case INTRINSIC_PARENTHESES:\n+      if (expr->ts.type == BT_REAL\n+\t  || expr->ts.type == BT_COMPLEX)\n+\t{\n+\t  gfc_conv_unary_op (PAREN_EXPR, se, expr);\n+\t  gcc_assert (FLOAT_TYPE_P (TREE_TYPE (se->expr)));\n+\t  return;\n+\t}\n+\n+      /* Fallthrough.  */\n+    case INTRINSIC_UPLUS:\n       gfc_conv_expr (se, expr->value.op.op1);\n       return;\n "}, {"sha": "780efe8dfb1925f57b6abf6c264a754a20939d4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -1,3 +1,9 @@\n+2008-02-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gfortran.dg/reassoc_1.f90: New testcase.\n+\t* gfortran.dg/reassoc_2.f90: Likewise.\n+\t* gfortran.dg/reassoc_3.f90: Likewise.\n+\n 2008-02-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/34974"}, {"sha": "eb7d44346d9360bcf9dd7a65ff57ccbf1b41958b", "filename": "gcc/testsuite/gfortran.dg/reassoc_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_1.f90?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -ffast-math -fdump-tree-optimized\" }\n+\n+function test(b)\n+  real a\n+  a = (b + 5.) - 5.\n+  test = a\n+end\n+\n+! { dg-final { scan-tree-dump \"\\\\\\+ 5.*\\\\\\)\\\\\\) - 5\" \"optimized\" } }"}, {"sha": "3e323eb013453511c171d05cbdb299435421e472", "filename": "gcc/testsuite/gfortran.dg/reassoc_2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_2.f90?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -ffast-math -fdump-tree-optimized\" }\n+\n+! Make sure that FRE does not replace c with b in d = c - 5\n+\n+function test(a)\n+  real a, b, c, d\n+  b = a + 5.\n+  c = (a + 5.)\n+  d = c - 5.\n+  call foo(b)\n+  test = d\n+end\n+\n+! { dg-final { scan-tree-dump \"- 5\" \"optimized\" } }"}, {"sha": "c0cec0b02a2c6cfb037b25627528700b98b2d8d4", "filename": "gcc/testsuite/gfortran.dg/reassoc_3.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_3.f90?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-O -ffast-math -fdump-tree-original -fdump-tree-optimized\" }\n+\n+! Verify we associate properly during folding\n+! Verify we propagate constants in the presence of PAREN_EXPR\n+\n+function test(a)\n+  real b, c, d\n+  c = a\n+  d = 5\n+  b = (c + 5 - c)\n+  b = (c + d - c)\n+  test = a + b - 5\n+end\n+\n+! { dg-final { scan-tree-dump \"b = 5\" \"original\" } }\n+! { dg-final { scan-tree-dump \"return .a\" \"optimized\" } }"}, {"sha": "10fa0aeb71d1ada799f5447e43b7939c8c92d53a", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -762,7 +762,8 @@ expand_complex_move (block_stmt_iterator *bsi, tree stmt, tree type,\n \t  i = build1 (IMAGPART_EXPR, inner_type, lhs);\n \t  update_complex_components_on_edge (e, lhs, r, i);\n \t}\n-      else if (TREE_CODE (rhs) == CALL_EXPR || TREE_SIDE_EFFECTS (rhs))\n+      else if (TREE_CODE (rhs) == CALL_EXPR || TREE_SIDE_EFFECTS (rhs)\n+\t       || TREE_CODE (rhs) == PAREN_EXPR)\n \t{\n \t  r = build1 (REALPART_EXPR, inner_type, lhs);\n \t  i = build1 (IMAGPART_EXPR, inner_type, lhs);"}, {"sha": "9fb87926cf5310ac99858ae133c20e4b00e4c331", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -2222,6 +2222,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case COMPOUND_EXPR:\n     case BIND_EXPR:\n     case WITH_CLEANUP_EXPR:\n+    case PAREN_EXPR:\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n     case VIEW_CONVERT_EXPR:"}, {"sha": "3b60b258ae4c0aed347ccdeb6a7c54e416492d75", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -1446,6 +1446,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_character (buffer, ')');\n       break;\n \n+    case PAREN_EXPR:\n+      pp_string (buffer, \"((\");\n+      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_string (buffer, \"))\");\n+      break;\n+\n     case NON_LVALUE_EXPR:\n       pp_string (buffer, \"NON_LVALUE_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);"}, {"sha": "92c46a0b9ec5e99c4da96799e2e2d6ab54e6fc6d", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -2002,7 +2002,13 @@ vect_is_simple_use (tree operand, loop_vec_info loop_vinfo, tree *def_stmt,\n       *dt = vect_invariant_def;\n       return true;\n    }\n-    \n+\n+  if (TREE_CODE (operand) == PAREN_EXPR)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        fprintf (vect_dump, \"non-associatable copy.\");\n+      operand = TREE_OPERAND (operand, 0);\n+    }\n   if (TREE_CODE (operand) != SSA_NAME)\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))"}, {"sha": "f485e4b25c9be6dfd46ff08cb33da07edb811889", "filename": "gcc/tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dedd42d511b6e49303a8da3f62486567122c5fc4/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=dedd42d511b6e49303a8da3f62486567122c5fc4", "patch": "@@ -733,6 +733,10 @@ DEFTREECODE (LTGT_EXPR, \"ltgt_expr\", tcc_comparison, 2)\n \n DEFTREECODE (RANGE_EXPR, \"range_expr\", tcc_binary, 2)\n \n+/* Represents a re-association barrier for floating point expressions\n+   like explicit parenthesis in fortran.  */\n+DEFTREECODE (PAREN_EXPR, \"paren_expr\", tcc_unary, 1)\n+\n /* Represents a conversion of type of a value.\n    All conversions, including implicit ones, must be\n    represented by CONVERT_EXPR or NOP_EXPR nodes.  */"}]}