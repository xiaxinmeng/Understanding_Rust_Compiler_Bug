{"sha": "bfec0b4d577156b4c43723b3c3c0608f153984e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlYzBiNGQ1NzcxNTZiNGM0MzcyM2IzYzNjMDYwOGYxNTM5ODRlOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-03-28T20:16:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-28T20:16:21Z"}, "message": "re PR bootstrap/70422 (Bootstrap comparison failure)\n\n\tPR c++/70422\n\n\tPR c++/64266\n\tPR c++/70353\n\t* decl.c, pt.c, constexpr.c: Revert last patch.\n\nFrom-SVN: r234511", "tree": {"sha": "dd9ca6bbd36b2bef97da36d5bd4709338f3c8169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd9ca6bbd36b2bef97da36d5bd4709338f3c8169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfec0b4d577156b4c43723b3c3c0608f153984e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfec0b4d577156b4c43723b3c3c0608f153984e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfec0b4d577156b4c43723b3c3c0608f153984e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfec0b4d577156b4c43723b3c3c0608f153984e9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6"}], "stats": {"total": 184, "additions": 108, "deletions": 76}, "files": [{"sha": "2028f7e6d631e0ab208d03fbbba1f6edea909431", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bfec0b4d577156b4c43723b3c3c0608f153984e9", "patch": "@@ -1,3 +1,10 @@\n+2016-03-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70422\n+\tPR c++/64266\n+\tPR c++/70353\n+\t* decl.c, pt.c, constexpr.c: Revert last patch.\n+\n 2016-03-25  Jason Merrill  <jason@redhat.com>\n \t    Martin Li\u0161ka  <mliska@suse.cz>\n "}, {"sha": "8ea71113d9991ec10e41187749dcf5c2561ee350", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=bfec0b4d577156b4c43723b3c3c0608f153984e9", "patch": "@@ -3363,10 +3363,6 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       return (*ctx->values->get (t));\n \n     case VAR_DECL:\n-      if (DECL_HAS_VALUE_EXPR_P (t))\n-\treturn cxx_eval_constant_expression (ctx, DECL_VALUE_EXPR (t), lval,\n-\t\t\t\t\t     non_constant_p, overflow_p);\n-      /* Fall through.  */\n     case CONST_DECL:\n       /* We used to not check lval for CONST_DECL, but darwin.c uses\n \t CONST_DECL for aggregate constants.  */"}, {"sha": "cd5db3f06dc306758bec05471abbe41f4c240c5f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bfec0b4d577156b4c43723b3c3c0608f153984e9", "patch": "@@ -4185,15 +4185,13 @@ cp_fname_init (const char* name, tree *type_p)\n   type = cp_build_qualified_type (char_type_node, TYPE_QUAL_CONST);\n   type = build_cplus_array_type (type, domain);\n \n-  *type_p = type_decays_to (type);\n+  *type_p = type;\n \n   if (init)\n     TREE_TYPE (init) = type;\n   else\n     init = error_mark_node;\n \n-  init = decay_conversion (init, tf_warning_or_error);\n-\n   return init;\n }\n \n@@ -4219,20 +4217,12 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n   /* As we're using pushdecl_with_scope, we must set the context.  */\n   DECL_CONTEXT (decl) = current_function_decl;\n \n+  TREE_STATIC (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n-  DECL_DECLARED_CONSTEXPR_P (decl) = 1;\n \n   TREE_USED (decl) = 1;\n \n-  if (init)\n-    {\n-      SET_DECL_VALUE_EXPR (decl, init);\n-      DECL_HAS_VALUE_EXPR_P (decl) = 1;\n-      /* For decl_constant_var_p.  */\n-      DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n-    }\n-\n   if (current_function_decl)\n     {\n       cp_binding_level *b = current_binding_level;\n@@ -4241,12 +4231,13 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n       while (b->level_chain->kind != sk_function_parms)\n \tb = b->level_chain;\n       pushdecl_with_scope (decl, b, /*is_friend=*/false);\n-      add_decl_expr (decl);\n+      cp_finish_decl (decl, init, /*init_const_expr_p=*/false, NULL_TREE,\n+\t\t      LOOKUP_ONLYCONVERTING);\n     }\n   else\n     {\n       DECL_THIS_STATIC (decl) = true;\n-      pushdecl_top_level_and_finish (decl, NULL_TREE);\n+      pushdecl_top_level_and_finish (decl, init);\n     }\n \n   return decl;"}, {"sha": "a6398c04f85e0cdf9e187be6554276402d222c2e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bfec0b4d577156b4c43723b3c3c0608f153984e9", "patch": "@@ -15194,25 +15194,21 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t    DECL_CONTEXT (decl) = current_function_decl;\n \t\t    cp_check_omp_declare_reduction (decl);\n \t\t  }\n-\t\telse if (VAR_P (decl)\n-\t\t\t && DECL_PRETTY_FUNCTION_P (decl))\n-\t\t  {\n-\t\t    /* For __PRETTY_FUNCTION__ we have to adjust the\n-\t\t       initializer.  */\n-\t\t    const char *const name\n-\t\t      = cxx_printable_name (current_function_decl, 2);\n-\t\t    init = cp_fname_init (name, &TREE_TYPE (decl));\n-\t\t    SET_DECL_VALUE_EXPR (decl, init);\n-\t\t    DECL_HAS_VALUE_EXPR_P (decl) = 1;\n-\t\t    DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n-\t\t    maybe_push_decl (decl);\n-\t\t  }\n \t\telse\n \t\t  {\n \t\t    int const_init = false;\n \t\t    maybe_push_decl (decl);\n-\n-\t\t    init = tsubst_init (init, decl, args, complain, in_decl);\n+\t\t    if (VAR_P (decl)\n+\t\t\t&& DECL_PRETTY_FUNCTION_P (decl))\n+\t\t      {\n+\t\t\t/* For __PRETTY_FUNCTION__ we have to adjust the\n+\t\t\t   initializer.  */\n+\t\t\tconst char *const name\n+\t\t\t  = cxx_printable_name (current_function_decl, 2);\n+\t\t\tinit = cp_fname_init (name, &TREE_TYPE (decl));\n+\t\t      }\n+\t\t    else\n+\t\t      init = tsubst_init (init, decl, args, complain, in_decl);\n \n \t\t    if (VAR_P (decl))\n \t\t      const_init = (DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P"}, {"sha": "226ae199daaef3cbd990e4f421ce91b3bc603dd3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-__func__2.C", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C?ref=322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6", "patch": "@@ -1,10 +0,0 @@\n-// PR c++/70353\n-// { dg-do compile { target c++11 } }\n-\n-constexpr const char* ce ()\n-{\n-   return __func__;\n-}\n-\n-#define SA(X) static_assert((X),#X)\n-SA(ce()[0] == 'c');"}, {"sha": "cd4c014061e530d0ea26e124e411f4ec70c37b6e", "filename": "gcc/testsuite/g++.dg/ext/fnname5.C", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffnname5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffnname5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffnname5.C?ref=322b8466d2afccbb0a30cd5c1e1ead1575f0bbc6", "patch": "@@ -1,33 +0,0 @@\n-// PR c++/64266\n-/* { dg-do compile } */\n-\n-extern \"C\" int printf (const char *, ...);\n-\n-struct A\n-{\n-  void foo(int i)\n-  {\n-    printf (\"__FUNCTION__ = %s\\n\", __FUNCTION__);\n-    printf (\"__PRETTY_FUNCTION__ = %s\\n\", __PRETTY_FUNCTION__);\n-  }\n-\n-  void foo()\n-  {\n-     printf (\"__FUNCTION__ = %s\\n\", __FUNCTION__);\n-  }\n-};\n-\n-int\n-main ()\n-{\n-  A a;\n-  a.foo (0);\n-  a.foo ();\n-  return 0;\n-}\n-\n-/* { dg-final { scan-assembler-not \"_ZZN1A3fooEvE12__FUNCTION__\" } } */\n-/* { dg-final { scan-assembler-not \"_ZZN1A3fooEiE12__FUNCTION__\" } } */\n-/* { dg-final { scan-assembler-not \"_ZZN1A3fooEiE19__PRETTY_FUNCTION__\" } } */\n-/* { dg-final { scan-assembler \".(string|ascii) \\\"void A::foo\\\\(int\\\\)(.0)?\\\"\" } } */\n-/* { dg-final { scan-assembler \".(string|ascii) \\\"foo(.0)?\\\"\" } } */"}, {"sha": "9017d567132425f26f5c060e4ddb89d9388055ea", "filename": "gcc/testsuite/g++.old-deja/g++.ext/pretty4.C", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfec0b4d577156b4c43723b3c3c0608f153984e9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty4.C?ref=bfec0b4d577156b4c43723b3c3c0608f153984e9", "patch": "@@ -0,0 +1,85 @@\n+// { dg-do run  }\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 3 Mar 2000 <nathan@codesourcery.com>\n+\n+// __PRETTY_FUNCTION__, __FUNCTION__ and __function__ should have the\n+// type char const [X], where X is the right value for that particular function\n+\n+static void const *strings[4];\n+static void const *tpls[4];\n+static unsigned pos = 0;\n+static int fail;\n+static void const *ptr = 0;\n+\n+void unover (char const (*)[5]) {}\n+void foo (char const (*)[5]) {}\n+void foo (void *) {fail = 1;}\n+void foo (void const *) {fail = 1;}\n+void baz (char const (&)[5]) {}\n+\n+template<unsigned I> void PV (char const (&objRef)[I])\n+{\n+  strings[pos] = objRef;\n+  tpls[pos] = __PRETTY_FUNCTION__;\n+  pos++;\n+}\n+\n+void fn ()\n+{\n+  PV (__FUNCTION__);\n+  PV (__func__);\n+  PV (__PRETTY_FUNCTION__);\n+  PV (\"wibble\");\n+}\n+\n+void baz ()\n+{\n+  ptr = __FUNCTION__;\n+  // there should be no string const merging\n+  if (ptr == \"baz\")\n+    fail = 1;\n+  // but all uses should be the same.\n+  if (ptr != __FUNCTION__)\n+    fail = 1;\n+}\n+int baz (int)\n+{\n+  return ptr == __FUNCTION__;\n+}\n+\n+int main ()\n+{\n+  // make sure we actually emit the VAR_DECL when needed, and things have the\n+  // expected type.\n+  foo (&__FUNCTION__);\n+  baz (__FUNCTION__);\n+  unover (&__FUNCTION__);\n+  if (fail)\n+    return 1;\n+  \n+  // __FUNCTION__ should be unique across functions with the same base name\n+  // (it's a local static, _not_ a string).\n+  baz ();\n+  if (fail)\n+    return 1;\n+  if (baz (1))\n+    return 1;\n+  fn ();\n+  \n+  // Check the names of fn. They should all be distinct strings (though two\n+  // will have the same value).\n+  if (strings[0] == strings[1])\n+    return 1;\n+  if (strings[0] == strings[2])\n+    return 1;\n+  if (strings[1] == strings[2])\n+    return 1;\n+\n+  // check the names of the template functions so invoked\n+  if (tpls[0] != tpls[1])\n+    return 1;\n+  if (tpls[0] == tpls[2])\n+    return 1;\n+  \n+  return 0;\n+}"}]}