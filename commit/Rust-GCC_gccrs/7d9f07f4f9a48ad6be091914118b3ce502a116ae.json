{"sha": "7d9f07f4f9a48ad6be091914118b3ce502a116ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5ZjA3ZjRmOWE0OGFkNmJlMDkxOTE0MTE4YjNjZTUwMmExMTZhZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-09-26T03:26:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-09-26T03:26:04Z"}, "message": "h8300.h (FIRST_PSEUDO_REGISTER): Bump up by one.\n\n        * h8300/h8300.h (FIRST_PSEUDO_REGISTER): Bump up by one.\n        (ARG_POINTER_REGNUM): Likewise.\n        (FIXED_REGISTERS): Add entry for MAC register.\n        (CALL_USED_REGISTERS< REG_ALLOC_ORDER): Likewise.\n        (HARD_REGNO_NREGS): Handle MAC register.\n        (HARD_REGNO_MODE_OK< REGNO_OK_FOR_BASE_P): LIkewise.\n        (REGISTER_NAMES): Likewise.\n        (enum reg_class): New MAC_REGS register class.\n        (REG_CLASS_CONTENTS, REGNO_REG_CLASS): Corresponding changes.\n        (REG_CLASS_FROM_LETTER): LIkewise.\n        (REGISTER_MOVE_COST): Make copies to/from the MAC register\n        expenseive.\n        (CONDITIONAL_REGISTER_USAGE): Define.\n        * h8300/h8300.md (movsi_h8300hs): Renamed from movsi_h8300h.\n        Handle moves to/from the MAC register.\n        (mac): Two new patterns to use the mac instruction.\n\n        * h8300/h8300.c (notice_update_cc): Fix CC_SET case.\n        (restore_compare_p): Remove unused function.\n        * h8300/h8300.md: Handle \"set\" vs \"set_zn_c0\" correctly.\n        (bCC patterns): No longer need to call restore_compare_p.\n\n\n        * h8300/h8300.c (get_shift_alg): Fix HImode ASHIFTRT by\n        13 or 14 bits.\n\nFrom-SVN: r12848", "tree": {"sha": "8e6dd3f5b8faa5ddfdc509bf2664fd19739b1618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e6dd3f5b8faa5ddfdc509bf2664fd19739b1618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9f07f4f9a48ad6be091914118b3ce502a116ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9f07f4f9a48ad6be091914118b3ce502a116ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9f07f4f9a48ad6be091914118b3ce502a116ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9f07f4f9a48ad6be091914118b3ce502a116ae/comments", "author": null, "committer": null, "parents": [{"sha": "725de644d609069bb6c4d90f1b843ba0f6bcecce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725de644d609069bb6c4d90f1b843ba0f6bcecce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725de644d609069bb6c4d90f1b843ba0f6bcecce"}], "stats": {"total": 222, "additions": 111, "deletions": 111}, "files": [{"sha": "440b219a847b52bf8216cd17df83156052642aac", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f07f4f9a48ad6be091914118b3ce502a116ae/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f07f4f9a48ad6be091914118b3ce502a116ae/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7d9f07f4f9a48ad6be091914118b3ce502a116ae", "patch": "@@ -1574,11 +1574,10 @@ notice_update_cc (body, insn)\n       break;\n \n     case CC_SET:\n-      /* Insn sets the Z,N flags of CC to recog_operand[0].\n-\t V is always set to 0.  C may or may not be set to 0 but that's ok\n+      /* Insn sets the Z,N,V flags of CC to recog_operand[0].\n+\t C may or may not be set to 0 but that's ok\n \t because alter_cond will change tests to use EQ/NE.  */\n       CC_STATUS_INIT;\n-      cc_status.flags |= CC_OVERFLOW_0 | CC_NO_CARRY;\n       cc_status.value1 = recog_operand[0];\n       break;\n \n@@ -1604,44 +1603,6 @@ notice_update_cc (body, insn)\n     }\n }\n \n-/* Return 1 if a previous compare needs to be re-issued.  This will happen\n-   if the compare was deleted because the previous insn set it, but the\n-   branch needs CC flags not set.\n-\n-   OP is the comparison being performed.  */\n-\n-int\n-restore_compare_p (op)\n-     rtx op;\n-{\n-  switch (GET_CODE (op))\n-    {\n-    case EQ:\n-    case NE:\n-      break;\n-    case LT:\n-    case LE:\n-    case GT:\n-    case GE:\n-      if (cc_status.flags & CC_OVERFLOW_UNUSABLE)\n-\treturn 1;\n-      break;\n-    case LTU:\n-    case LEU:\n-    case GTU:\n-    case GEU:\n-      /* If the carry flag isn't usable, the test should have been changed\n-\t by alter_cond.  */\n-      if (cc_status.flags & CC_NO_CARRY)\n-\tabort ();\n-      break;\n-    default:\n-      abort ();\n-    }\n-\n-  return 0;\n-}\n-\n /* Recognize valid operators for bit instructions */\n \n int\n@@ -2329,7 +2290,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t      *cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n-\t  else\n+\t  else if (shift_type != SHIFT_ASHIFTRT)\n \t    {\n \t      *assembler_p = rotate_one[cpu][shift_type][shift_mode];\n \t      if (TARGET_H8300S)"}, {"sha": "0ca52784ec9589a11c17839692486e146f86ede9", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f07f4f9a48ad6be091914118b3ce502a116ae/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f07f4f9a48ad6be091914118b3ce502a116ae/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=7d9f07f4f9a48ad6be091914118b3ce502a116ae", "patch": "@@ -229,18 +229,18 @@ do {\t\t\t\t\\\n    All registers that the compiler knows about must be given numbers,\n    even those that are not normally considered general registers.  \n \n-   Reg 8 does not correspond to any hardware register, but instead\n+   Reg 9 does not correspond to any hardware register, but instead\n    appears in the RTL as an argument pointer prior to reload, and is\n    eliminated during reloading in favor of either the stack or frame\n    pointer.  */\n \n-#define FIRST_PSEUDO_REGISTER 9\n+#define FIRST_PSEUDO_REGISTER 10\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */\n \n #define FIXED_REGISTERS \\\n-  { 0, 0, 0, 0, 0, 0, 0, 1, 1}\n+  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -253,19 +253,28 @@ do {\t\t\t\t\\\n    h8 destroys r0,r1,r2,r3.  */\n \n #define CALL_USED_REGISTERS \\\n-  { 1, 1, 1, 1, 0, 0, 0, 1, 1 }\n+  { 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 }\n \n #define REG_ALLOC_ORDER \\\n-  { 2, 3, 0, 1, 4, 5, 6, 7, 8}\n+  { 2, 3, 0, 1, 4, 5, 6, 8, 7, 9}\n+\n+#define CONDITIONAL_REGISTER_USAGE\t\\\n+{\t\t\t\t\t\\\n+  if (!TARGET_H8300S)\t\t\t\\\n+    fixed_regs[8] = call_used_regs[8] = 1;\\\n+}\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n \n    This is ordinarily the length in words of a value of mode MODE\n-   but can be less for certain modes in special long registers.  */\n+   but can be less for certain modes in special long registers. \n+\n+   We pretend the MAC register is 32bits -- we don't have any data\n+   types on the H8 series to handle more than 32bits.  */\n \n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n-  ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode\n    MODE.\n@@ -276,7 +285,7 @@ do {\t\t\t\t\\\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n  (TARGET_H8300 ? (((REGNO)&1)==0) || (MODE==HImode) || (MODE==QImode) \\\n-  : 1)\n+   : REGNO == 8 ? MODE == SImode : 1)\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2.\n@@ -304,7 +313,7 @@ do {\t\t\t\t\\\n #define FRAME_POINTER_REQUIRED 0\n \n /* Base register for access to arguments of the function.  */\n-#define ARG_POINTER_REGNUM 8\n+#define ARG_POINTER_REGNUM 9\n \n /* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM 3\n@@ -330,15 +339,15 @@ do {\t\t\t\t\\\n    class that represents their union.  */\n    \n enum reg_class {\n-  NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES\n+  NO_REGS, GENERAL_REGS, MAC_REGS, ALL_REGS, LIM_REG_CLASSES\n };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n /* Give names of register classes as strings for dump file.   */\n \n #define REG_CLASS_NAMES \\\n-{ \"NO_REGS\", \"GENERAL_REGS\", \"ALL_REGS\", \"LIM_REGS\" }\n+{ \"NO_REGS\", \"GENERAL_REGS\", \"MAC_REGS\", \"ALL_REGS\", \"LIM_REGS\" }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n@@ -347,26 +356,27 @@ enum reg_class {\n #define REG_CLASS_CONTENTS  \t\t\t\\\n {      0,\t\t/* No regs      */\t\\\n    0x0ff,\t\t/* GENERAL_REGS */    \t\\\n-   0x1ff,\t\t/* ALL_REGS \t*/\t\\\n+   0x100,\t\t/* MAC_REGS */    \t\\\n+   0x3ff,\t\t/* ALL_REGS \t*/\t\\\n }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n-   or could index an array.\n-\n-   ??? What about the ARG_POINTER_REGISTER? */\n+   or could index an array.  */\n \n-#define REGNO_REG_CLASS(REGNO)  GENERAL_REGS\n+#define REGNO_REG_CLASS(REGNO) (REGNO != 8 ? GENERAL_REGS : MAC_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n \n #define INDEX_REG_CLASS NO_REGS\n #define BASE_REG_CLASS  GENERAL_REGS\n \n-/* Get reg_class from a letter such as appears in the machine description.  */\n+/* Get reg_class from a letter such as appears in the machine description. \n+\n+   'a' is the MAC register.  */\n \n-#define REG_CLASS_FROM_LETTER(C) (NO_REGS)\n+#define REG_CLASS_FROM_LETTER(C) ((C) == 'a' ? MAC_REGS : NO_REGS)\n \n /* The letters I, J, K, L, M, N, O, P in a register constraint string\n    can be used to stand for particular ranges of immediate operands.\n@@ -422,7 +432,8 @@ enum reg_class {\n    so define REGISTER_MOVE_COST to be > 2 so that reload never\n    shortcuts.  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2) 3\n+#define REGISTER_MOVE_COST(CLASS1, CLASS2)  \\\n+  (CLASS1 == MAC_REGS || CLASS2 == MAC_REGS ? 6 : 3)\n \f\n /* Stack layout; function entry, exit and calling.  */\n \n@@ -731,7 +742,7 @@ struct rtx_def *function_arg();\n #define REGNO_OK_FOR_INDEX_P(regno) 0\n \n #define REGNO_OK_FOR_BASE_P(regno) \\\n-  ((regno) < FIRST_PSEUDO_REGISTER || reg_renumber[regno] >= 0)\n+  (((regno) < FIRST_PSEUDO_REGISTER && regno != 8) || reg_renumber[regno] >= 0)\n \f\n /* Maximum number of registers that can appear in a valid memory address.  */\n \n@@ -1140,7 +1151,7 @@ readonly_data() \t\t\t\t\t\t\\\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n #define REGISTER_NAMES \\\n-{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"ap\"}\n+{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"mac\", \"ap\"}\n \n #define ADDITIONAL_REGISTER_NAMES { { \"r7\", 7 } }\n "}, {"sha": "a583828003305547e14647c580671eda71d83eff", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 76, "deletions": 48, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f07f4f9a48ad6be091914118b3ce502a116ae/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f07f4f9a48ad6be091914118b3ce502a116ae/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=7d9f07f4f9a48ad6be091914118b3ce502a116ae", "patch": "@@ -86,7 +86,7 @@\n ;; none_0hit - insn does not affect cc but it does modify operand 0\n ;;\tThis attribute is used to keep track of when operand 0 changes.\n ;; \tSee the description of NOTICE_UPDATE_CC for more info.\n-;; set - insn sets flags z,n.  v,c are set to 0.\n+;; set - insn sets flags z,n,v.  c are set to 0.\n ;;\t(c may not really be set to 0 but that's ok, we don't need it anyway).\n ;; set_zn_c0 - insn sets z,n to usable values.  v is unknown.  c may or may not\n ;;\tbe known (if it isn't that's ok, we don't need it anyway).\n@@ -113,7 +113,7 @@\n     return \\\"push.l\t%S1\\\";\n }\"\n   [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n@@ -131,7 +131,7 @@\n      [(const_int 2) (const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n+   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"\")\n@@ -159,7 +159,7 @@\n   [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set\")])\n+   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0\")])\n    \n ;; movhi\n \n@@ -177,7 +177,7 @@\n     return \\\"push.l\t%S1\\\";\n }\"\n   [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n@@ -195,7 +195,7 @@\n      [(const_int 2) (const_int 2) (const_int 2) (const_int 4)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n+   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"\")\n@@ -223,7 +223,7 @@\n   [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2) (const_int 4)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set\")])\n+   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0\")])\n \n ;; movsi\n \n@@ -395,16 +395,22 @@\n   [(set_attr \"length\" \"4,4,8,8,4,4\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"movsi_h8300h\"\n-  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,m,<,r\")\n-\t(match_operand:SI 1 \"general_operand_src\" \"I,r,im,r,r,>\"))]\n-  \"(TARGET_H8300H || TARGET_H8300S)\n+(define_insn \"movsi_h8300hs\"\n+  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,m,<,r,*a,*a,r\")\n+\t(match_operand:SI 1 \"general_operand_src\" \"I,r,im,r,r,>,I,r,*a\"))]\n+  \"(TARGET_H8300S || TARGET_H8300H)\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"*\n {\n   if (which_alternative == 0)\n     return \\\"sub.l\t%S0,%S0\\\";\n+  if (which_alternative == 6)\n+    return \\\"clrmac\\\";\n+  if (which_alternative == 7)\n+    return \\\"clrmac\\;ldmac %1,macl\\\";\n+  if (which_alternative == 8)\n+    return \\\"stmac macl,%0\\\";\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n       int val = INTVAL (operands[1]);\n@@ -433,8 +439,8 @@\n     }\n    return \\\"mov.l\t%S1,%S0\\\";\n }\"\n-  [(set_attr \"length\" \"2,2,10,10,4,4\")\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n+  [(set_attr \"length\" \"2,2,10,10,4,4,2,6,4\")\n+   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,none_0hit,none_0hit,set_zn_c0\")])\n \n (define_insn \"movsf_h8300h\"\n   [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,<,r\")\n@@ -450,7 +456,7 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n   [(set_attr \"length\" \"2,2,10,10,4,4\")\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n+   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; TEST INSTRUCTIONS\n@@ -515,21 +521,21 @@\n   \"\"\n   \"mov.b\t%X0,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"tsthi\"\n   [(set (cc0) (match_operand:HI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"mov.w\t%T0,%T0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"tstsi\"\n   [(set (cc0) (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"mov.l\t%S0,%S0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"cmpqi\"\n   [(set (cc0)\n@@ -591,7 +597,7 @@\n   \"\"\n   \"add.b\t%X2,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set\")])\n \n (define_expand \"addhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -625,7 +631,7 @@\n    add.w\t%T2,%T0\n    mov.w        %T1,%T0\\;add.w  %T2,%T0\"\n   [(set_attr \"length\" \"4,2,6\")\n-   (set_attr \"cc\" \"clobber,set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"clobber,set,set\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -636,7 +642,7 @@\n    add.w\t%T2,%T0\n    add.w\t%T2,%T0\"\n   [(set_attr \"length\" \"4,2\")\n-   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set,set\")])\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -681,7 +687,7 @@\n    add.l\t%S2,%S0\n    add.l\t%S2,%S0\"\n   [(set_attr \"length\" \"6,2\")\n-   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set,set\")])\n \n ;; ----------------------------------------------------------------------\n ;; SUBTRACT INSTRUCTIONS\n@@ -696,7 +702,7 @@\n    sub.b\t%X2,%X0\n    add.b\t%G2,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set\")])\n \n (define_expand \"subhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -734,7 +740,7 @@\n    sub.w\t%T2,%T0\n    add.b\t%E2,%s0\\;addx\t%F2,%t0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,clobber\")])\n+   (set_attr \"cc\" \"set,clobber\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,&r\")\n@@ -745,7 +751,7 @@\n    sub.w\t%T2,%T0\n    sub.w\t%T2,%T0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set,set\")])\n \n (define_expand \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -792,7 +798,7 @@\n    sub.l\t%S2,%S0\n    sub.l\t%S2,%S0\"\n   [(set_attr \"length\" \"2,6\")\n-   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set,set\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; MULTIPLY INSTRUCTIONS\n@@ -836,6 +842,38 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n+;; This is a \"bridge\" instruction.  Combine can't cram enough insns\n+;; together to crate a MAC instruction directly, but it can create\n+;; this instruction, which then allows combine to create the real\n+;; MAC insn.\n+;;\n+;; Unfortunately, if combine doesn't create a MAC instruction, this\n+;; insn must generate reasonably correct code.  Egad.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(mult:SI\n+\t  (sign_extend:SI\n+\t    (mem:HI (post_inc:SI (match_operand:SI 1 \"register_operand\" \"r\"))))\n+\t  (sign_extend:SI\n+\t    (mem:HI (post_inc:SI (match_operand:SI 2 \"register_operand\" \"r\"))))))]\n+  \"TARGET_H8300S\"\n+  \"clrmac\\;mac\t%2,%1\"\n+  [(set_attr \"length\" \"6\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(plus (mult:SI\n+\t  (sign_extend:SI (mem:HI\n+\t    (post_inc:SI (match_operand:SI 1 \"register_operand\" \"r\"))))\n+\t  (sign_extend:SI (mem:HI\n+\t    (post_inc:SI (match_operand:SI 2 \"register_operand\" \"r\")))))\n+\t      (match_operand:SI 3 \"register_operand\" \"0\")))]\n+  \"TARGET_H8300S\"\n+  \"mac\t%2,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+\n ;; ----------------------------------------------------------------------\n ;; DIVIDE INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n@@ -947,7 +985,7 @@\n    and\t%X2,%X0\n    bclr\t%W2,%R0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,none_0hit\")])\n+   (set_attr \"cc\" \"set_zn_c0,none_0hit\")])\n \n (define_expand \"andqi3\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"\")\n@@ -1051,7 +1089,7 @@\n    or\t%X2,%X0\n    bset\t%V2,%R0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,none_0hit\")])\n+   (set_attr \"cc\" \"set_zn_c0,none_0hit\")])\n \n (define_expand \"iorqi3\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")\n@@ -1137,7 +1175,7 @@\n    xor\t%X2,%X0\n    bnot\t%V2,%R0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,none_0hit\")])\n+   (set_attr \"cc\" \"set_zn_c0,none_0hit\")])\n \n (define_expand \"xorqi3\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")\n@@ -1292,7 +1330,7 @@\n   \"\"\n   \"not\t%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"one_cmplhi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1436,11 +1474,6 @@\n   \"\"\n   \"*\n {\n-  /* If we erroneously deleted a compare insn (which can happen if we need\n-     CC bits set that aren't), emit the compare.  */\n-  if (restore_compare_p (operands[1]))\n-    return 0;\n-\n   if (get_attr_length (insn) == 2) \n     return \\\"b%j1\t%l0\\\";\n   else if (get_attr_length (insn) == 4) \n@@ -1460,11 +1493,6 @@\n   \"\"\n   \"*\n {\n-  /* If we erroneously deleted a compare insn (which can happen if we need\n-     CC bits set that aren't), emit the compare.  */\n-  if (restore_compare_p (operands[1]))\n-    return 0;\n-\n   if (get_attr_length (insn) == 2) \n     return \\\"b%k1\t%l0\\\";\n   else if (get_attr_length (insn) == 4) \n@@ -1661,7 +1689,7 @@\n   extu.l\t%S0\n   mov.w\t%T1,%T0\\;extu.l\t%S0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,set\")])\n+   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \n (define_expand \"extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -1687,7 +1715,7 @@\n   exts.w\t%T0\n   mov.b\t%R1,%s0\\;exts.w\t%T0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,set\")])\n+   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \n ;; The compiler can synthesize a 300H variant of this which is\n ;; just as efficient as one that we'd create\n@@ -1744,7 +1772,7 @@\n   exts.l\t%S0\n   mov.w\t%T1,%T0\\;exts.l\t%S0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,set\")])\n+   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; SHIFTS\n@@ -2214,7 +2242,7 @@\n   \"(INTVAL(operands[2]) == INTVAL(operands[4])+1) && REGNO(operands[0]) +1 == REGNO(operands[3])\"\n   \"mov.w\t@(%u4,%T1),%T0\"\n   [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_peephole\n   [(set (mem:QI (plus:HI (match_operand:HI 1 \"register_operand\" \"r\")\n@@ -2226,7 +2254,7 @@\n   \"(INTVAL(operands[2]) == INTVAL(operands[4])+1) && REGNO(operands[0]) +1 == REGNO(operands[3])\"\n   \"mov.w\t%T0,@(%u4,%T1)\"\n   [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n ;; Notice a move which could be post incremented.\n \n@@ -2237,7 +2265,7 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.b\t@%T1+,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_peephole \n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -2246,7 +2274,7 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.w\t@%T1+,%T0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n ;; Notice a move which could be predecremented.\n \n@@ -2258,7 +2286,7 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.b\t%X0,@-%T1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_peephole \n   [(set (match_operand:HI 1 \"register_operand\" \"\")\n@@ -2268,5 +2296,5 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.w\t%T0,@-%T1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn_c0\")])\n "}]}