{"sha": "fb7b736cbbeebcd61997a83b6715c4fed29375cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI3YjczNmNiYmVlYmNkNjE5OTdhODNiNjcxNWM0ZmVkMjkzNzVjZg==", "commit": {"author": {"name": "Robert Suchanek", "email": "robert.suchanek@imgtec.com", "date": "2016-12-06T13:45:34Z"}, "committer": {"name": "Robert Suchanek", "email": "rts@gcc.gnu.org", "date": "2016-12-06T13:45:34Z"}, "message": "[MIPS][MSA] Fix builtins with literal integer arguments.\n\ngcc/\n\t* config/mips/mips.c (mips_expand_builtin_insn): Check input\n\tranges of literal integer arguments.\n\ngcc/testsuite/\n\n\t* gcc.target/mips/msa-builtins-err.c: New test.\n\nFrom-SVN: r243301", "tree": {"sha": "0e48b9dceea1e1b61b3413bbba14ee2906dc7a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e48b9dceea1e1b61b3413bbba14ee2906dc7a68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb7b736cbbeebcd61997a83b6715c4fed29375cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7b736cbbeebcd61997a83b6715c4fed29375cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7b736cbbeebcd61997a83b6715c4fed29375cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7b736cbbeebcd61997a83b6715c4fed29375cf/comments", "author": null, "committer": null, "parents": [{"sha": "1011502b46e880679458a65ef87e3307076cfa57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1011502b46e880679458a65ef87e3307076cfa57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1011502b46e880679458a65ef87e3307076cfa57"}], "stats": {"total": 333, "additions": 311, "deletions": 22}, "files": [{"sha": "8d405cfd6f99f8e7061b3dbf36ed09ca2264c6c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb7b736cbbeebcd61997a83b6715c4fed29375cf", "patch": "@@ -1,3 +1,8 @@\n+2016-12-06  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\t* config/mips/mips.c (mips_expand_builtin_insn): Check input\n+\tranges of literal integer arguments.\n+\n 2016-12-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/78548"}, {"sha": "c7eb2a8e7bdc3e95616c2153c772190fb0c187bd", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 61, "deletions": 22, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fb7b736cbbeebcd61997a83b6715c4fed29375cf", "patch": "@@ -16570,6 +16570,7 @@ mips_expand_builtin_insn (enum insn_code icode, unsigned int nops,\n \t\t\t  struct expand_operand *ops, bool has_target_p)\n {\n   machine_mode imode;\n+  int rangelo = 0, rangehi = 0, error_opno = 0;\n \n   switch (icode)\n     {\n@@ -16600,12 +16601,19 @@ mips_expand_builtin_insn (enum insn_code icode, unsigned int nops,\n       gcc_assert (has_target_p && nops == 3);\n       /* We only generate a vector of constants iff the second argument\n \t is an immediate.  We also validate the range of the immediate.  */\n-      if (!CONST_INT_P (ops[2].value)\n-\t  || !IN_RANGE (INTVAL (ops[2].value), 0,  31))\n-\tbreak;\n-      ops[2].mode = ops[0].mode;\n-      ops[2].value = mips_gen_const_int_vector (ops[2].mode,\n-\t\t\t\t\t\tINTVAL (ops[2].value));\n+      if (CONST_INT_P (ops[2].value))\n+\t{\n+\t  rangelo = 0;\n+\t  rangehi = 31;\n+\t  if (IN_RANGE (INTVAL (ops[2].value), rangelo, rangehi))\n+\t    {\n+\t      ops[2].mode = ops[0].mode;\n+\t      ops[2].value = mips_gen_const_int_vector (ops[2].mode,\n+\t\t\t\t\t\t\tINTVAL (ops[2].value));\n+\t    }\n+\t  else\n+\t    error_opno = 2;\n+\t}\n       break;\n \n     case CODE_FOR_msa_ceqi_b:\n@@ -16631,12 +16639,19 @@ mips_expand_builtin_insn (enum insn_code icode, unsigned int nops,\n       gcc_assert (has_target_p && nops == 3);\n       /* We only generate a vector of constants iff the second argument\n \t is an immediate.  We also validate the range of the immediate.  */\n-      if (!CONST_INT_P (ops[2].value)\n-\t  || !IN_RANGE (INTVAL (ops[2].value), -16,  15))\n-\tbreak;\n-      ops[2].mode = ops[0].mode;\n-      ops[2].value = mips_gen_const_int_vector (ops[2].mode,\n-\t\t\t\t\t\tINTVAL (ops[2].value));\n+      if (CONST_INT_P (ops[2].value))\n+\t{\n+\t  rangelo = -16;\n+\t  rangehi = 15;\n+\t  if (IN_RANGE (INTVAL (ops[2].value), rangelo, rangehi))\n+\t    {\n+\t      ops[2].mode = ops[0].mode;\n+\t      ops[2].value = mips_gen_const_int_vector (ops[2].mode,\n+\t\t\t\t\t\t\tINTVAL (ops[2].value));\n+\t    }\n+\t  else\n+\t    error_opno = 2;\n+\t}\n       break;\n \n     case CODE_FOR_msa_andi_b:\n@@ -16716,13 +16731,19 @@ mips_expand_builtin_insn (enum insn_code icode, unsigned int nops,\n     case CODE_FOR_msa_srli_w:\n     case CODE_FOR_msa_srli_d:\n       gcc_assert (has_target_p && nops == 3);\n-      if (!CONST_INT_P (ops[2].value)\n-\t  || !IN_RANGE (INTVAL (ops[2].value), 0,\n-\t\t\tGET_MODE_UNIT_PRECISION (ops[0].mode) - 1))\n-\tbreak;\n-      ops[2].mode = ops[0].mode;\n-      ops[2].value = mips_gen_const_int_vector (ops[2].mode,\n-\t\t\t\t\t\tINTVAL (ops[2].value));\n+      if (CONST_INT_P (ops[2].value))\n+\t{\n+\t  rangelo = 0;\n+\t  rangehi = GET_MODE_UNIT_BITSIZE (ops[0].mode) - 1;\n+\t  if (IN_RANGE (INTVAL (ops[2].value), rangelo, rangehi))\n+\t    {\n+\t      ops[2].mode = ops[0].mode;\n+\t      ops[2].value = mips_gen_const_int_vector (ops[2].mode,\n+\t\t\t\t\t\t\tINTVAL (ops[2].value));\n+\t    }\n+\t  else\n+\t    error_opno = 2;\n+\t}\n       break;\n \n     case CODE_FOR_msa_insert_b:\n@@ -16738,7 +16759,13 @@ mips_expand_builtin_insn (enum insn_code icode, unsigned int nops,\n       imode = GET_MODE_INNER (ops[0].mode);\n       ops[1].value = lowpart_subreg (imode, ops[1].value, ops[1].mode);\n       ops[1].mode = imode;\n-      ops[3].value = GEN_INT (1 << INTVAL (ops[3].value));\n+      rangelo = 0;\n+      rangehi = GET_MODE_NUNITS (ops[0].mode) - 1;\n+      if (CONST_INT_P (ops[3].value)\n+\t  && IN_RANGE (INTVAL (ops[3].value), rangelo, rangehi))\n+\tops[3].value = GEN_INT (1 << INTVAL (ops[3].value));\n+      else\n+\terror_opno = 2;\n       break;\n \n     case CODE_FOR_msa_insve_b:\n@@ -16750,7 +16777,13 @@ mips_expand_builtin_insn (enum insn_code icode, unsigned int nops,\n       gcc_assert (has_target_p && nops == 4);\n       std::swap (ops[1], ops[2]);\n       std::swap (ops[1], ops[3]);\n-      ops[3].value = GEN_INT (1 << INTVAL (ops[3].value));\n+      rangelo = 0;\n+      rangehi = GET_MODE_NUNITS (ops[0].mode) - 1;\n+      if (CONST_INT_P (ops[3].value)\n+\t  && IN_RANGE (INTVAL (ops[3].value), rangelo, rangehi))\n+\tops[3].value = GEN_INT (1 << INTVAL (ops[3].value));\n+      else\n+\terror_opno = 2;\n       break;\n \n     case CODE_FOR_msa_shf_b:\n@@ -16774,7 +16807,13 @@ mips_expand_builtin_insn (enum insn_code icode, unsigned int nops,\n       break;\n   }\n \n-  if (!maybe_expand_insn (icode, nops, ops))\n+  if (error_opno != 0)\n+    {\n+      error (\"argument %d to the built-in must be a constant\"\n+\t     \" in range %d to %d\", error_opno, rangelo, rangehi);\n+      return has_target_p ? gen_reg_rtx (ops[0].mode) : const0_rtx;\n+    }\n+  else if (!maybe_expand_insn (icode, nops, ops))\n     {\n       error (\"invalid argument to built-in function\");\n       return has_target_p ? gen_reg_rtx (ops[0].mode) : const0_rtx;"}, {"sha": "c7664e8b8f080dbbaecaa056915677474940c9fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb7b736cbbeebcd61997a83b6715c4fed29375cf", "patch": "@@ -1,3 +1,7 @@\n+2016-12-06  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\t* gcc.target/mips/msa-builtins-err.c: New test.\n+\n 2016-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71537"}, {"sha": "041b7f5b5e2ba8e62aeb1eeb9d00d28cfde3b17f", "filename": "gcc/testsuite/gcc.target/mips/msa-builtins-err.c", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-builtins-err.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7b736cbbeebcd61997a83b6715c4fed29375cf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-builtins-err.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-builtins-err.c?ref=fb7b736cbbeebcd61997a83b6715c4fed29375cf", "patch": "@@ -0,0 +1,241 @@\n+/* Test builtins for MIPS MSA ASE instructions */\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp64 -mhard-float -mmsa\" } */\n+\n+#include <msa.h>\n+\n+v16i8 v16i8_x;\n+v16u8 v16u8_x;\n+v8i16 v8i16_x;\n+v8u16 v8u16_x;\n+v4i32 v4i32_x;\n+v4u32 v4u32_x;\n+v2i64 v2i64_x;\n+v2u64 v2u64_x;\n+\n+volatile v16i8 v16i8_r;\n+volatile v16u8 v16u8_r;\n+volatile v8i16 v8i16_r;\n+volatile v8u16 v8u16_r;\n+volatile v4i32 v4i32_r;\n+volatile v4u32 v4u32_r;\n+volatile v2i64 v2i64_r;\n+volatile v2u64 v2u64_r;\n+\n+/* MSA builtins with literal range of 0 to 31.  */\n+\n+void\n+msa_add ()\n+{\n+ v16i8_r = __builtin_msa_addvi_b (v16i8_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v16i8_r = __builtin_msa_addvi_b (v16i8_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_addvi_h (v8i16_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_addvi_h (v8i16_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_addvi_w (v4i32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_addvi_w (v4i32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_addvi_d (v2i64_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_addvi_d (v2i64_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+}\n+\n+void\n+msa_sub ()\n+{\n+ v16i8_r = __builtin_msa_subvi_b (v16i8_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v16i8_r = __builtin_msa_subvi_b (v16i8_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_subvi_h (v8i16_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_subvi_h (v8i16_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_subvi_w (v4i32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_subvi_w (v4i32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_subvi_d (v2i64_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_subvi_d (v2i64_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+}\n+\n+void\n+msa_mini_u ()\n+{\n+ v16u8_r = __builtin_msa_mini_u_b (v16u8_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v16u8_r = __builtin_msa_mini_u_b (v16u8_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8u16_r = __builtin_msa_mini_u_h (v8u16_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8u16_r = __builtin_msa_mini_u_h (v8u16_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4u32_r = __builtin_msa_mini_u_w (v4u32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4u32_r = __builtin_msa_mini_u_w (v4u32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2u64_r = __builtin_msa_mini_u_d (v2u64_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2u64_r = __builtin_msa_mini_u_d (v2u64_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+}\n+\n+void\n+msa_maxi_u ()\n+{\n+ v16u8_r = __builtin_msa_maxi_u_b (v16u8_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v16u8_r = __builtin_msa_maxi_u_b (v16u8_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8u16_r = __builtin_msa_maxi_u_h (v8u16_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8u16_r = __builtin_msa_maxi_u_h (v8u16_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4u32_r = __builtin_msa_maxi_u_w (v4u32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4u32_r = __builtin_msa_maxi_u_w (v4u32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2u64_r = __builtin_msa_maxi_u_d (v2u64_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2u64_r = __builtin_msa_maxi_u_d (v2u64_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+}\n+\n+void\n+msa_clti_u ()\n+{\n+ v16i8_r = __builtin_msa_clti_u_b (v16u8_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v16i8_r = __builtin_msa_clti_u_b (v16u8_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_clti_u_h (v8u16_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_clti_u_h (v8u16_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_clti_u_w (v4u32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_clti_u_w (v4u32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_clti_u_d (v2u64_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_clti_u_d (v2u64_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+}\n+\n+void\n+msa_clei_u ()\n+{\n+ v16i8_r = __builtin_msa_clei_u_b (v16u8_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v16i8_r = __builtin_msa_clei_u_b (v16u8_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_clei_u_h (v8u16_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v8i16_r = __builtin_msa_clei_u_h (v8u16_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_clei_u_w (v4u32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_clei_u_w (v4u32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_clei_u_d (v2u64_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_clei_u_d (v2u64_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+}\n+\n+/* MSA builtins with literal range of -16 to 15.  */\n+\n+void\n+msa_mini_s ()\n+{\n+ v16i8_r = __builtin_msa_mini_s_b (v16i8_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v16i8_r = __builtin_msa_mini_s_b (v16i8_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_mini_s_h (v8i16_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_mini_s_h (v8i16_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_mini_s_w (v4i32_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_mini_s_w (v4i32_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_mini_s_d (v2i64_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_mini_s_d (v2i64_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+}\n+\n+void\n+msa_maxi_s ()\n+{\n+ v16i8_r = __builtin_msa_maxi_s_b (v16i8_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v16i8_r = __builtin_msa_maxi_s_b (v16i8_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_maxi_s_h (v8i16_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_maxi_s_h (v8i16_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_maxi_s_w (v4i32_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_maxi_s_w (v4i32_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_maxi_s_d (v2i64_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_maxi_s_d (v2i64_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+}\n+\n+void\n+msa_ceqi ()\n+{\n+ v16i8_r = __builtin_msa_ceqi_b (v16i8_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v16i8_r = __builtin_msa_ceqi_b (v16i8_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_ceqi_h (v8i16_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_ceqi_h (v8i16_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_ceqi_w (v4i32_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_ceqi_w (v4i32_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_ceqi_d (v2i64_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_ceqi_d (v2i64_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+}\n+\n+void\n+msa_clti_s ()\n+{\n+ v16i8_r = __builtin_msa_clti_s_b (v16i8_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v16i8_r = __builtin_msa_clti_s_b (v16i8_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_clti_s_h (v8i16_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_clti_s_h (v8i16_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_clti_s_w (v4i32_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_clti_s_w (v4i32_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_clti_s_d (v2i64_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_clti_s_d (v2i64_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+}\n+\n+void\n+msa_clei_s ()\n+{\n+ v16i8_r = __builtin_msa_clei_s_b (v16i8_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v16i8_r = __builtin_msa_clei_s_b (v16i8_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_clei_s_h (v8i16_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v8i16_r = __builtin_msa_clei_s_h (v8i16_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_clei_s_w (v4i32_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v4i32_r = __builtin_msa_clei_s_w (v4i32_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_clei_s_d (v2i64_x, -17); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+ v2i64_r = __builtin_msa_clei_s_d (v2i64_x, 16); /* { dg-error \"must be a constant in range -16 to 15\" } */\n+}\n+\n+/* MSA builtins with literal range of 0 to 7/15/31/63 for\n+   byte/halfwords/words/doublewords elements, respectively.  */\n+\n+void\n+msa_slli ()\n+{\n+ v16i8_r = __builtin_msa_slli_b (v16i8_x, -1); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v16i8_r = __builtin_msa_slli_b (v16i8_x, 8); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v8i16_r = __builtin_msa_slli_h (v8i16_x, -1); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v8i16_r = __builtin_msa_slli_h (v8i16_x, 16); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v4i32_r = __builtin_msa_slli_w (v4i32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_slli_w (v4i32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_slli_d (v2i64_x, -1); /* { dg-error \"must be a constant in range 0 to 63\" } */\n+ v2i64_r = __builtin_msa_slli_d (v2i64_x, 64); /* { dg-error \"must be a constant in range 0 to 63\" } */\n+}\n+\n+void\n+msa_srai ()\n+{\n+ v16i8_r = __builtin_msa_srai_b (v16i8_x, -1); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v16i8_r = __builtin_msa_srai_b (v16i8_x, 8); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v8i16_r = __builtin_msa_srai_h (v8i16_x, -1); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v8i16_r = __builtin_msa_srai_h (v8i16_x, 16); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v4i32_r = __builtin_msa_srai_w (v4i32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_srai_w (v4i32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_srai_d (v2i64_x, -1); /* { dg-error \"must be a constant in range 0 to 63\" } */\n+ v2i64_r = __builtin_msa_srai_d (v2i64_x, 64); /* { dg-error \"must be a constant in range 0 to 63\" } */\n+}\n+\n+void\n+msa_srli ()\n+{\n+ v16i8_r = __builtin_msa_srli_b (v16i8_x, -1); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v16i8_r = __builtin_msa_srli_b (v16i8_x, 8); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v8i16_r = __builtin_msa_srli_h (v8i16_x, -1); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v8i16_r = __builtin_msa_srli_h (v8i16_x, 16); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v4i32_r = __builtin_msa_srli_w (v4i32_x, -1); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v4i32_r = __builtin_msa_srli_w (v4i32_x, 32); /* { dg-error \"must be a constant in range 0 to 31\" } */\n+ v2i64_r = __builtin_msa_srli_d (v2i64_x, -1); /* { dg-error \"must be a constant in range 0 to 63\" } */\n+ v2i64_r = __builtin_msa_srli_d (v2i64_x, 64); /* { dg-error \"must be a constant in range 0 to 63\" } */\n+}\n+\n+/* MSA builtins with literal range of 0 to 15/7/3/1 for\n+   byte/halfwords/words/doublewords elements, respectively.  */\n+\n+void\n+msa_insert (int a)\n+{\n+ v16i8_r = __builtin_msa_insert_b (v16i8_x, -1, a); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v16i8_r = __builtin_msa_insert_b (v16i8_x, 16, a); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v8i16_r = __builtin_msa_insert_h (v8i16_x, -1, a); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v8i16_r = __builtin_msa_insert_h (v8i16_x, 8, a); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v4i32_r = __builtin_msa_insert_w (v4i32_x, -1, a); /* { dg-error \"must be a constant in range 0 to 3\" } */\n+ v4i32_r = __builtin_msa_insert_w (v4i32_x, 4, a); /* { dg-error \"must be a constant in range 0 to 3\" } */\n+ v2i64_r = __builtin_msa_insert_d (v2i64_x, -1, a); /* { dg-error \"must be a constant in range 0 to 1\" } */\n+ v2i64_r = __builtin_msa_insert_d (v2i64_x, 2, a); /* { dg-error \"must be a constant in range 0 to 1\" } */\n+}\n+\n+void\n+msa_insve ()\n+{\n+ v16i8_r = __builtin_msa_insve_b (v16i8_x, -1, v16i8_x); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v16i8_r = __builtin_msa_insve_b (v16i8_x, 16, v16i8_x); /* { dg-error \"must be a constant in range 0 to 15\" } */\n+ v8i16_r = __builtin_msa_insve_h (v8i16_x, -1, v8i16_x); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v8i16_r = __builtin_msa_insve_h (v8i16_x, 8, v8i16_x); /* { dg-error \"must be a constant in range 0 to 7\" } */\n+ v4i32_r = __builtin_msa_insve_w (v4i32_x, -1, v4i32_x); /* { dg-error \"must be a constant in range 0 to 3\" } */\n+ v4i32_r = __builtin_msa_insve_w (v4i32_x, 4, v4i32_x); /* { dg-error \"must be a constant in range 0 to 3\" } */\n+ v2i64_r = __builtin_msa_insve_d (v2i64_x, -1, v2i64_x); /* { dg-error \"must be a constant in range 0 to 1\" } */\n+ v2i64_r = __builtin_msa_insve_d (v2i64_x, 2, v2i64_x); /* { dg-error \"must be a constant in range 0 to 1\" } */\n+}"}]}