{"sha": "852776b330f7e30b20ce8b3784caa72eb5271b55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyNzc2YjMzMGY3ZTMwYjIwY2U4YjM3ODRjYWE3MmViNTI3MWI1NQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-06-05T23:36:26Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-06-05T23:36:26Z"}, "message": "re PR libstdc++/6641 (-D__USE_MALLOC doesn't link)\n\nPR target/6641\n* Split Snd constraint into Sid and Ssd.  Disparage Sid/z alternative\n  of *mov<mode> insn to avoid spill failure.\n\nFrom-SVN: r224177", "tree": {"sha": "189c202a531cba79d215c3a980fbab224b4cc327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/189c202a531cba79d215c3a980fbab224b4cc327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852776b330f7e30b20ce8b3784caa72eb5271b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852776b330f7e30b20ce8b3784caa72eb5271b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852776b330f7e30b20ce8b3784caa72eb5271b55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852776b330f7e30b20ce8b3784caa72eb5271b55/comments", "author": null, "committer": null, "parents": [{"sha": "d012125dd7ae84f5c87120e6a66c1b0610199f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d012125dd7ae84f5c87120e6a66c1b0610199f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d012125dd7ae84f5c87120e6a66c1b0610199f09"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "c388eb5db7c7cee422885b17462526d715a687f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852776b330f7e30b20ce8b3784caa72eb5271b55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852776b330f7e30b20ce8b3784caa72eb5271b55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=852776b330f7e30b20ce8b3784caa72eb5271b55", "patch": "@@ -1,3 +1,10 @@\n+2015-06-05  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/66410\n+\t* config/sh/constraints.md (Sid, Ssd): New memory constraints.\n+\t* config/sh/sh.md (*mov<mode>): Use Sid and Ssd alternatives\n+\tinstead of Snd.  Disparage Sid/z alternative with '^'.\n+\n 2015-06-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* dwarf2out.c: Remove deferred_locations*."}, {"sha": "4d1eb2db719101688120ba548733505611a26cf3", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852776b330f7e30b20ce8b3784caa72eb5271b55/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852776b330f7e30b20ce8b3784caa72eb5271b55/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=852776b330f7e30b20ce8b3784caa72eb5271b55", "patch": "@@ -309,6 +309,19 @@\n   (and (match_code \"mem\")\n        (match_test \"! satisfies_constraint_Sdd (op)\")))\n \n+(define_memory_constraint \"Sid\"\n+  \"A memory reference that uses index addressing.\"\n+  (and (match_code \"mem\")\n+       (match_code \"plus\" \"0\")\n+       (match_code \"reg\" \"00\")\n+       (match_code \"reg\" \"01\")))\n+\n+(define_memory_constraint \"Ssd\"\n+  \"A memory reference that excludes index and displacement addressing.\"\n+  (and (match_code \"mem\")\n+       (match_test \"! satisfies_constraint_Sid (op)\")\n+       (match_test \"! satisfies_constraint_Sdd (op)\")))\n+\n (define_memory_constraint \"Sbv\"\n   \"A memory reference, as used in SH2A bclr.b, bset.b, etc.\"\n   (and (match_test \"MEM_P (op) && GET_MODE (op) == QImode\")"}, {"sha": "33241a8b690ffbbf084a329a3effa34cfcb6ccbb", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852776b330f7e30b20ce8b3784caa72eb5271b55/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852776b330f7e30b20ce8b3784caa72eb5271b55/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=852776b330f7e30b20ce8b3784caa72eb5271b55", "patch": "@@ -7430,18 +7430,18 @@ label:\n ;; Q/r has to come first, otherwise PC relative loads might wrongly get\n ;; placed into delay slots.  Since there is no QImode PC relative load, the\n ;; Q constraint and general_movsrc_operand will reject it for QImode.\n-;; The Snd alternatives should come before Sdd in order to avoid a preference\n-;; of using r0 als the register operand for addressing modes other than\n-;; displacement addressing.\n+;; The Sid/Ssd alternatives should come before Sdd in order to avoid\n+;; a preference of using r0 als the register operand for addressing modes\n+;; other than displacement addressing.\n ;; The Sdd alternatives allow only r0 as register operand, even though on\n ;; SH2A any register could be allowed by switching to a 32 bit insn.\n ;; Generally sticking to the r0 is preferrable, since it generates smaller\n ;; code.  Obvious r0 reloads can then be eliminated with a peephole on SH2A.\n (define_insn \"*mov<mode>\"\n   [(set (match_operand:QIHI 0 \"general_movdst_operand\"\n-\t\t\t      \"=r,r,r,Snd,r,  Sdd,z,  r,l\")\n+\t\t\t      \"=r,r,r,Sid,^zr,Ssd,r,  Sdd,z,  r,l\")\n \t(match_operand:QIHI 1 \"general_movsrc_operand\"\n-\t\t\t       \"Q,r,i,r,  Snd,z,  Sdd,l,r\"))]\n+\t\t\t       \"Q,r,i,^zr,Sid,r,  Ssd,z,  Sdd,l,r\"))]\n   \"TARGET_SH1\n    && (arith_reg_operand (operands[0], <MODE>mode)\n        || arith_reg_operand (operands[1], <MODE>mode))\"\n@@ -7453,9 +7453,11 @@ label:\n \tmov.<bw>\t%1,%0\n \tmov.<bw>\t%1,%0\n \tmov.<bw>\t%1,%0\n+\tmov.<bw>\t%1,%0\n+\tmov.<bw>\t%1,%0\n \tsts\t%1,%0\n \tlds\t%1,%0\"\n-  [(set_attr \"type\" \"pcload,move,movi8,store,load,store,load,prget,prset\")\n+  [(set_attr \"type\" \"pcload,move,movi8,store,load,store,load,store,load,prget,prset\")\n    (set (attr \"length\")\n \t(cond [(and (match_operand 0 \"displacement_mem_operand\")\n \t\t    (not (match_operand 0 \"short_displacement_mem_operand\")))"}]}