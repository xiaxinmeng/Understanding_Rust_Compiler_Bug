{"sha": "fed4de37b870faad50374a63aa1cf68a97963da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkNGRlMzdiODcwZmFhZDUwMzc0YTYzYWExY2Y2OGE5Nzk2M2RhNg==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-10-28T10:33:04Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-10-28T10:33:04Z"}, "message": "Enable -fsanitize-recover for KASan.\n\n2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n\ngcc/\n\t* asan.c (report_error_func): Add noabort path.\n\t(check_func): Ditto.  Formatting.\n\t(asan_expand_check_ifn): Handle noabort path.\n\t* common.opt (flag_sanitize_recover): Add SANITIZE_KERNEL_ADDRESS\n\tto default value.\n\t* doc/invoke.texi (-fsanitize-recover=): Mention KASan.\n\t* opts.c (finish_options): Reword comment.\n\t* sanitizer.def: Add noabort ASan builtins.\n\ngcc/testsuite/\n\t* c-c++-common/asan/kasan-recover-1.c: New test.\n\t* c-c++-common/asan/kasan-recover-2.c: New test.\n\t* c-c++-common/asan/instrument-with-calls-1.c: Get rid of -save-temps.\n\t* c-c++-common/asan/instrument-with-calls-2.c: Likewise.\n\t* c-c++-common/asan/instrument-with-calls-3.c: Likewise.\n\t* c-c++-common/asan/kasan-recover-1.c: Likewise.\n\t* c-c++-common/asan/kasan-recover-2.c: Likewise.\n\t* c-c++-common/asan/no-asan-globals.c: Likewise.\n\t* c-c++-common/asan/no-instrument-reads.c: Likewise.\n\t* c-c++-common/asan/no-instrument-writes.c: Likewise.\n\t* c-c++-common/asan/no-use-after-return.c: Likewise.\n\nFrom-SVN: r216778", "tree": {"sha": "d89db50eee01910485a109af95f83b25923b4462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d89db50eee01910485a109af95f83b25923b4462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed4de37b870faad50374a63aa1cf68a97963da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed4de37b870faad50374a63aa1cf68a97963da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed4de37b870faad50374a63aa1cf68a97963da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed4de37b870faad50374a63aa1cf68a97963da6/comments", "author": null, "committer": null, "parents": [{"sha": "fd960af2df5a437302039f248a542354ee4cddcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd960af2df5a437302039f248a542354ee4cddcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd960af2df5a437302039f248a542354ee4cddcf"}], "stats": {"total": 239, "additions": 187, "deletions": 52}, "files": [{"sha": "1517a80bac15c9699bff2b6f22f83e33855a8564", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,3 +1,14 @@\n+2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* asan.c (report_error_func): Add noabort path.\n+\t(check_func): Ditto.  Formatting.\n+\t(asan_expand_check_ifn): Handle noabort path.\n+\t* common.opt (flag_sanitize_recover): Add SANITIZE_KERNEL_ADDRESS\n+\tto default value.\n+\t* doc/invoke.texi (-fsanitize-recover=): Mention KASan.\n+\t* opts.c (finish_options): Reword comment.\n+\t* sanitizer.def: Add noabort ASan builtins.\n+\n 2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n \n \t* asan.c (set_asan_shadow_offset): New function."}, {"sha": "8612655c09d96bd5a0e27b82c70ebafc37907bbf", "filename": "gcc/asan.c", "status": "modified", "additions": 56, "deletions": 25, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1392,44 +1392,72 @@ asan_protect_global (tree decl)\n    IS_STORE is either 1 (for a store) or 0 (for a load).  */\n \n static tree\n-report_error_func (bool is_store, HOST_WIDE_INT size_in_bytes, int *nargs)\n-{\n-  static enum built_in_function report[2][6]\n-    = { { BUILT_IN_ASAN_REPORT_LOAD1, BUILT_IN_ASAN_REPORT_LOAD2,\n-\t  BUILT_IN_ASAN_REPORT_LOAD4, BUILT_IN_ASAN_REPORT_LOAD8,\n-\t  BUILT_IN_ASAN_REPORT_LOAD16, BUILT_IN_ASAN_REPORT_LOAD_N },\n-\t{ BUILT_IN_ASAN_REPORT_STORE1, BUILT_IN_ASAN_REPORT_STORE2,\n-\t  BUILT_IN_ASAN_REPORT_STORE4, BUILT_IN_ASAN_REPORT_STORE8,\n-\t  BUILT_IN_ASAN_REPORT_STORE16, BUILT_IN_ASAN_REPORT_STORE_N } };\n+report_error_func (bool is_store, bool recover_p, HOST_WIDE_INT size_in_bytes,\n+\t\t   int *nargs)\n+{\n+  static enum built_in_function report[2][2][6]\n+    = { { { BUILT_IN_ASAN_REPORT_LOAD1, BUILT_IN_ASAN_REPORT_LOAD2,\n+\t    BUILT_IN_ASAN_REPORT_LOAD4, BUILT_IN_ASAN_REPORT_LOAD8,\n+\t    BUILT_IN_ASAN_REPORT_LOAD16, BUILT_IN_ASAN_REPORT_LOAD_N },\n+\t  { BUILT_IN_ASAN_REPORT_STORE1, BUILT_IN_ASAN_REPORT_STORE2,\n+\t    BUILT_IN_ASAN_REPORT_STORE4, BUILT_IN_ASAN_REPORT_STORE8,\n+\t    BUILT_IN_ASAN_REPORT_STORE16, BUILT_IN_ASAN_REPORT_STORE_N } },\n+\t{ { BUILT_IN_ASAN_REPORT_LOAD1_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_LOAD2_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_LOAD4_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_LOAD8_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_LOAD16_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT },\n+\t  { BUILT_IN_ASAN_REPORT_STORE1_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_STORE2_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_STORE4_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_STORE8_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_STORE16_NOABORT,\n+\t    BUILT_IN_ASAN_REPORT_STORE_N_NOABORT } } };\n   if (size_in_bytes == -1)\n     {\n       *nargs = 2;\n-      return builtin_decl_implicit (report[is_store][5]);\n+      return builtin_decl_implicit (report[recover_p][is_store][5]);\n     }\n   *nargs = 1;\n-  return builtin_decl_implicit (report[is_store][exact_log2 (size_in_bytes)]);\n+  int size_log2 = exact_log2 (size_in_bytes);\n+  return builtin_decl_implicit (report[recover_p][is_store][size_log2]);\n }\n \n /* Construct a function tree for __asan_{load,store}{1,2,4,8,16,_n}.\n    IS_STORE is either 1 (for a store) or 0 (for a load).  */\n \n static tree\n-check_func (bool is_store, int size_in_bytes, int *nargs)\n-{\n-  static enum built_in_function check[2][6]\n-    = { { BUILT_IN_ASAN_LOAD1, BUILT_IN_ASAN_LOAD2,\n-      BUILT_IN_ASAN_LOAD4, BUILT_IN_ASAN_LOAD8,\n-      BUILT_IN_ASAN_LOAD16, BUILT_IN_ASAN_LOADN },\n-\t{ BUILT_IN_ASAN_STORE1, BUILT_IN_ASAN_STORE2,\n-      BUILT_IN_ASAN_STORE4, BUILT_IN_ASAN_STORE8,\n-      BUILT_IN_ASAN_STORE16, BUILT_IN_ASAN_STOREN } };\n+check_func (bool is_store, bool recover_p, HOST_WIDE_INT size_in_bytes,\n+\t    int *nargs)\n+{\n+  static enum built_in_function check[2][2][6]\n+    = { { { BUILT_IN_ASAN_LOAD1, BUILT_IN_ASAN_LOAD2,\n+\t    BUILT_IN_ASAN_LOAD4, BUILT_IN_ASAN_LOAD8,\n+\t    BUILT_IN_ASAN_LOAD16, BUILT_IN_ASAN_LOADN },\n+\t  { BUILT_IN_ASAN_STORE1, BUILT_IN_ASAN_STORE2,\n+\t    BUILT_IN_ASAN_STORE4, BUILT_IN_ASAN_STORE8,\n+\t    BUILT_IN_ASAN_STORE16, BUILT_IN_ASAN_STOREN } },\n+\t{ { BUILT_IN_ASAN_LOAD1_NOABORT,\n+\t    BUILT_IN_ASAN_LOAD2_NOABORT,\n+\t    BUILT_IN_ASAN_LOAD4_NOABORT,\n+\t    BUILT_IN_ASAN_LOAD8_NOABORT,\n+\t    BUILT_IN_ASAN_LOAD16_NOABORT,\n+\t    BUILT_IN_ASAN_LOADN_NOABORT },\n+\t  { BUILT_IN_ASAN_STORE1_NOABORT,\n+\t    BUILT_IN_ASAN_STORE2_NOABORT,\n+\t    BUILT_IN_ASAN_STORE4_NOABORT,\n+\t    BUILT_IN_ASAN_STORE8_NOABORT,\n+\t    BUILT_IN_ASAN_STORE16_NOABORT,\n+\t    BUILT_IN_ASAN_STOREN_NOABORT } } };\n   if (size_in_bytes == -1)\n     {\n       *nargs = 2;\n-      return builtin_decl_implicit (check[is_store][5]);\n+      return builtin_decl_implicit (check[recover_p][is_store][5]);\n     }\n   *nargs = 1;\n-  return builtin_decl_implicit (check[is_store][exact_log2 (size_in_bytes)]);\n+  int size_log2 = exact_log2 (size_in_bytes);\n+  return builtin_decl_implicit (check[recover_p][is_store][size_log2]);\n }\n \n /* Split the current basic block and create a condition statement\n@@ -2550,6 +2578,9 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n   gimple g = gsi_stmt (*iter);\n   location_t loc = gimple_location (g);\n \n+  bool recover_p\n+    = (flag_sanitize & flag_sanitize_recover & SANITIZE_KERNEL_ADDRESS) != 0;\n+\n   HOST_WIDE_INT flags = tree_to_shwi (gimple_call_arg (g, 0));\n   gcc_assert (flags < ASAN_CHECK_LAST);\n   bool is_scalar_access = (flags & ASAN_CHECK_SCALAR_ACCESS) != 0;\n@@ -2578,7 +2609,7 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n       tree base_addr = gimple_assign_lhs (g);\n \n       int nargs;\n-      tree fun = check_func (is_store, size_in_bytes, &nargs);\n+      tree fun = check_func (is_store, recover_p, size_in_bytes, &nargs);\n       if (nargs == 1)\n \tg = gimple_build_call (fun, 1, base_addr);\n       else\n@@ -2639,7 +2670,7 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n   basic_block then_bb, else_bb;\n   gsi = create_cond_insert_point (&gsi, /*before_p*/false,\n \t\t\t\t  /*then_more_likely_p=*/false,\n-\t\t\t\t  /*create_then_fallthru_edge=*/false,\n+\t\t\t\t  /*create_then_fallthru_edge*/recover_p,\n \t\t\t\t  &then_bb,\n \t\t\t\t  &else_bb);\n \n@@ -2748,7 +2779,7 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n   /* Generate call to the run-time library (e.g. __asan_report_load8).  */\n   gsi = gsi_start_bb (then_bb);\n   int nargs;\n-  tree fun = report_error_func (is_store, size_in_bytes, &nargs);\n+  tree fun = report_error_func (is_store, recover_p, size_in_bytes, &nargs);\n   g = gimple_build_call (fun, nargs, base_addr, len);\n   gimple_set_location (g, loc);\n   gsi_insert_after (&gsi, g, GSI_NEW_STMT);"}, {"sha": "b4006367f8832883ce5a3419c5b8144e15aaa064", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -213,7 +213,7 @@ unsigned int flag_sanitize\n \n ; What sanitizers should recover from errors\n Variable\n-unsigned int flag_sanitize_recover = SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT\n+unsigned int flag_sanitize_recover = SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT | SANITIZE_KERNEL_ADDRESS\n \n ; Flag whether a prefix has been added to dump_base_name\n Variable"}, {"sha": "792f25bba45b5308024c750eb83542b0c7da53fb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -5662,13 +5662,13 @@ and program will exit after that with non-zero exit code.\n \n Currently this feature only works for @option{-fsanitize=undefined} (and its suboptions\n except for @option{-fsanitize=unreachable} and @option{-fsanitize=return}),\n-@option{-fsanitize=float-cast-overflow} and @option{-fsanitize=float-divide-by-zero}.\n-For these sanitizers error recovery is turned on by default.\n+@option{-fsanitize=float-cast-overflow}, @option{-fsanitize=float-divide-by-zero} and\n+@option{-fsanitize=kernel-address}.  For these sanitizers error recovery is turned on by default.\n \n Syntax without explicit @var{opts} parameter is deprecated.  It is equivalent to\n-@option{-fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero}.\n+@option{-fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,kernel-address}.\n Similarly @option{-fno-sanitize-recover} is equivalent to\n-@option{-fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero}.\n+@option{-fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,kernel-address}.\n \n @item -fsanitize-undefined-trap-on-error\n @opindex fsanitize-undefined-trap-on-error"}, {"sha": "752cc84473d3893547a04bf2ea0bc6b215eb6465", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -877,14 +877,16 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n   if (opts->x_dwarf_split_debug_info)\n     opts->x_debug_generate_pub_sections = 2;\n \n-  /* Userspace and kernel ASan conflict with each other and with TSan.  */\n+  /* Userspace and kernel ASan conflict with each other.  */\n \n   if ((opts->x_flag_sanitize & SANITIZE_USER_ADDRESS)\n       && (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n     error_at (loc,\n \t      \"-fsanitize=address is incompatible with \"\n \t      \"-fsanitize=kernel-address\");\n \n+  /* And with TSan.  */\n+\n   if ((opts->x_flag_sanitize & SANITIZE_ADDRESS)\n       && (opts->x_flag_sanitize & SANITIZE_THREAD))\n     error_at (loc,"}, {"sha": "cddc5ea4935e065e0c718bf91946cb99eee3a372", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -57,6 +57,44 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE16, \"__asan_report_store16\",\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE_N, \"__asan_report_store_n\",\n \t\t      BT_FN_VOID_PTR_PTRMODE,\n \t\t      ATTR_TMPURE_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD1_NOABORT,\n+\t\t      \"__asan_report_load1_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD2_NOABORT,\n+\t\t      \"__asan_report_load2_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD4_NOABORT,\n+\t\t      \"__asan_report_load4_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD8_NOABORT,\n+\t\t      \"__asan_report_load8_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD16_NOABORT,\n+\t\t      \"__asan_report_load16_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT,\n+\t\t      \"__asan_report_load_n_noabort\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE,\n+\t\t      ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE1_NOABORT,\n+\t\t      \"__asan_report_store1_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE2_NOABORT,\n+\t\t      \"__asan_report_store2_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE4_NOABORT,\n+\t\t      \"__asan_report_store4_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE8_NOABORT,\n+\t\t      \"__asan_report_store8_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE16_NOABORT,\n+\t\t      \"__asan_report_store16_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE_N_NOABORT,\n+\t\t      \"__asan_report_store_n_noabort\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE,\n+\t\t      ATTR_TMPURE_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOAD1, \"__asan_load1\",\n \t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOAD2, \"__asan_load2\",\n@@ -81,6 +119,30 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STORE16, \"__asan_store16\",\n \t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STOREN, \"__asan_storeN\",\n \t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOAD1_NOABORT, \"__asan_load1_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOAD2_NOABORT, \"__asan_load2_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOAD4_NOABORT, \"__asan_load4_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOAD8_NOABORT, \"__asan_load8_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOAD16_NOABORT, \"__asan_load16_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_LOADN_NOABORT, \"__asan_loadN_noabort\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STORE1_NOABORT, \"__asan_store1_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STORE2_NOABORT, \"__asan_store2_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STORE4_NOABORT, \"__asan_store4_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STORE8_NOABORT, \"__asan_store8_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STORE16_NOABORT, \"__asan_store16_noabort\",\n+\t\t      BT_FN_VOID_PTR, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_STOREN_NOABORT, \"__asan_storeN_noabort\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_TMPURE_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REGISTER_GLOBALS,\n \t\t      \"__asan_register_globals\",\n \t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)"}, {"sha": "e0759c3bd04b415c8e71736fa9caf6e1f2e75c37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,3 +1,17 @@\n+2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* c-c++-common/asan/kasan-recover-1.c: New test.\n+\t* c-c++-common/asan/kasan-recover-2.c: New test.\n+\t* c-c++-common/asan/instrument-with-calls-1.c: Get rid of -save-temps.\n+\t* c-c++-common/asan/instrument-with-calls-2.c: Likewise.\n+\t* c-c++-common/asan/instrument-with-calls-3.c: Likewise.\n+\t* c-c++-common/asan/kasan-recover-1.c: Likewise.\n+\t* c-c++-common/asan/kasan-recover-2.c: Likewise.\n+\t* c-c++-common/asan/no-asan-globals.c: Likewise.\n+\t* c-c++-common/asan/no-instrument-reads.c: Likewise.\n+\t* c-c++-common/asan/no-instrument-writes.c: Likewise.\n+\t* c-c++-common/asan/no-use-after-return.c: Likewise.\n+\n 2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n \n \t* c-c++-common/asan/shadow-offset-1.c: New test."}, {"sha": "a08b98a47db596f4ef59636aa4cdde282b29d46b", "filename": "gcc/testsuite/c-c++-common/asan/instrument-with-calls-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-1.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,10 +1,9 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"--param asan-instrumentation-with-call-threshold=0 -save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"--param asan-instrumentation-with-call-threshold=0\" } */\n \n void f(char *a, int *b) {\n   *b = *a;\n }\n \n /* { dg-final { scan-assembler \"__asan_load1\" } } */\n /* { dg-final { scan-assembler \"__asan_store4\" } } */\n-/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "217410c32bef246bdbc8a42bfb72dffff9e1feb8", "filename": "gcc/testsuite/c-c++-common/asan/instrument-with-calls-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-2.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"--param asan-instrumentation-with-call-threshold=1 -save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"--param asan-instrumentation-with-call-threshold=1\" } */\n \n int x;\n \n@@ -13,4 +13,3 @@ void f(int *a, int *b) {\n /* { dg-final { scan-assembler-not \"__asan_report_store4\" } } */\n /* { dg-final { scan-assembler \"__asan_load4\" } } */\n /* { dg-final { scan-assembler-not \"__asan_report_load4\" } } */\n-/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6dbd54951db4dbb408bc5f3d6b1b2886bce90672", "filename": "gcc/testsuite/c-c++-common/asan/instrument-with-calls-3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-3.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"--param asan-instrumentation-with-call-threshold=0 -save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"--param asan-instrumentation-with-call-threshold=0\" } */\n \n struct A {\n   char x[7];\n@@ -11,5 +11,4 @@ void f(struct A *x, struct A *y) {\n \n /* { dg-final { scan-assembler \"__asan_loadN\" } } */\n /* { dg-final { scan-assembler \"__asan_storeN\" } } */\n-/* { dg-final { cleanup-saved-temps } } */\n "}, {"sha": "b7d3dda9f7de3a5fad54e2cdad92c47a1c197387", "filename": "gcc/testsuite/c-c++-common/asan/kasan-recover-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-1.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address --param asan-instrumentation-with-call-threshold=100\" } */\n+\n+void\n+foo (int *p)\n+{\n+  *p = 0;\n+}\n+\n+/* { dg-final { scan-assembler \"__asan_report_store4_noabort\" } } */\n+"}, {"sha": "03f29c1ff62cb61742107597c48680c490457cc2", "filename": "gcc/testsuite/c-c++-common/asan/kasan-recover-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-2.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address\" } */\n+\n+void\n+foo (int *p)\n+{\n+  *p = 0;\n+}\n+\n+/* { dg-final { scan-assembler \"__asan_store4_noabort\" } } */\n+"}, {"sha": "9bed29e5b67394f4a0cdd6a9c8a7a7330355b478", "filename": "gcc/testsuite/c-c++-common/asan/no-asan-globals.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-asan-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-asan-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-asan-globals.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"-save-temps --param asan-globals=0\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"--param asan-globals=0\" } */\n \n volatile int ten = 10;\n \n@@ -10,4 +10,3 @@ int main() {\n }\n \n /* { dg-final { scan-assembler-not \"__asan_register_globals\" } } */\n-/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "00e96df054b88a3192335bd016cf3a38309b9741", "filename": "gcc/testsuite/c-c++-common/asan/no-instrument-reads.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-reads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-reads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-reads.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"--param asan-instrument-reads=0 -save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"--param asan-instrument-reads=0\" } */\n \n volatile int ten = 10;\n \n@@ -10,4 +10,3 @@ int main() {\n }\n \n /* { dg-final { scan-assembler-not \"__asan_load\" } } */\n-/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "45370a2e56cb3d07c7e9ba71551170c6a930a39e", "filename": "gcc/testsuite/c-c++-common/asan/no-instrument-writes.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-writes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-writes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-writes.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"--param asan-instrument-writes=0 -save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"--param asan-instrument-writes=0\" } */\n \n volatile int ten = 10;\n \n@@ -10,4 +10,3 @@ int main() {\n }\n \n /* { dg-final { scan-assembler-not \"__asan_store\" } } */\n-/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "afbc112db380e30e5bb19295e6dacdaa803ae30d", "filename": "gcc/testsuite/c-c++-common/asan/no-use-after-return.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-use-after-return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed4de37b870faad50374a63aa1cf68a97963da6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-use-after-return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-use-after-return.c?ref=fed4de37b870faad50374a63aa1cf68a97963da6", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"--param asan-use-after-return=0 -save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"--param asan-use-after-return=0\" } */\n \n extern void f(char *);\n \n@@ -10,4 +10,3 @@ int main() {\n }\n \n /* { dg-final { scan-assembler-not \"__asan_option_detect_stack_use_after_return\" } } */\n-/* { dg-final { cleanup-saved-temps } } */"}]}