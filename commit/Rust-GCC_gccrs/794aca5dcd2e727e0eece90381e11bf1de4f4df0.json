{"sha": "794aca5dcd2e727e0eece90381e11bf1de4f4df0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0YWNhNWRjZDJlNzI3ZTBlZWNlOTAzODFlMTFiZjFkZTRmNGRmMA==", "commit": {"author": {"name": "Wolfgang Bangerth", "email": "bangerth@ticam.utexas.edu", "date": "2003-02-09T13:04:01Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2003-02-09T13:04:01Z"}, "message": "install.texi: Squeeze and streamline section on testing and regression checking.\n\n\t* doc/install.texi: Squeeze and streamline section on\n\ttesting and regression checking.\n\nFrom-SVN: r62601", "tree": {"sha": "1b22d0c0c2b7ca40b294ad295868f889a0416611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b22d0c0c2b7ca40b294ad295868f889a0416611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/794aca5dcd2e727e0eece90381e11bf1de4f4df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794aca5dcd2e727e0eece90381e11bf1de4f4df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794aca5dcd2e727e0eece90381e11bf1de4f4df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794aca5dcd2e727e0eece90381e11bf1de4f4df0/comments", "author": null, "committer": null, "parents": [{"sha": "d9deed68d467546014f23e54e630cf596c42ff5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9deed68d467546014f23e54e630cf596c42ff5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9deed68d467546014f23e54e630cf596c42ff5d"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "0085476bdcce2d52bccdbb7ee754e2bb7d12f6d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794aca5dcd2e727e0eece90381e11bf1de4f4df0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794aca5dcd2e727e0eece90381e11bf1de4f4df0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=794aca5dcd2e727e0eece90381e11bf1de4f4df0", "patch": "@@ -1,3 +1,8 @@\n+2003-02-09  Wolfgang Bangerth  <bangerth@ticam.utexas.edu>\n+\n+\t* doc/install.texi: Squeeze and streamline section on\n+\ttesting and regression checking.\n+\n Sun Feb  9 13:33:34 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (ahi?v*3): Set third operand type to TImode."}, {"sha": "c18516e9229a941471dfce91fd2381d7e3a0b520", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794aca5dcd2e727e0eece90381e11bf1de4f4df0/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794aca5dcd2e727e0eece90381e11bf1de4f4df0/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=794aca5dcd2e727e0eece90381e11bf1de4f4df0", "patch": "@@ -1250,45 +1250,41 @@ Finally, you can run the testsuite (which may take a long time):\n      cd @var{objdir}; make -k check\n @end example\n \n-The testing process will try to test as many components in the GCC\n-distribution as possible, including the C, C++, Objective-C and Fortran\n-compilers as well as the C++ and Java runtime libraries.\n-\n-While running the testsuite, DejaGnu might emit messages resembling\n+This will test various components of GCC, such as compiler\n+front ends and runtime libraries.  While running the testsuite, DejaGnu\n+might emit some harmless messages resembling\n @samp{WARNING: Couldn't find the global config file.} or \n-@samp{WARNING: Couldn't find tool init file}.\n-These messages are harmless and do not affect the validity of the tests.\n+@samp{WARNING: Couldn't find tool init file} that can be ignored.\n \n @section How can I run the test suite on selected tests?\n \n-As a first possibility to cut down the number of tests that are run it is\n-possible to use @samp{make check-gcc} or @samp{make check-g++}\n-in the @file{gcc} subdirectory of the object directory.  To further cut down the\n-tests the following is possible:\n+In order to run sets of tests selectively, there are targets\n+@samp{make check-gcc} and @samp{make check-g++}\n+in the @file{gcc} subdirectory of the object directory.  You can also\n+just run @samp{make check} in a subdirectory of the object directory.\n+\n+\n+A more selective way to just run all @command{gcc} execute tests in the\n+testsuite is to use\n \n @example\n     make check-gcc RUNTESTFLAGS=\"execute.exp @var{other-options}\"\n @end example\n \n-This will run all @command{gcc} execute tests in the testsuite.\n+Likewise, in order to run only the @command{g++} ``old-deja'' tests in\n+the testsuite with filenames matching @samp{9805*}, you would use\n \n @example\n     make check-g++ RUNTESTFLAGS=\"old-deja.exp=9805* @var{other-options}\"\n @end example\n \n-This will run the @command{g++} ``old-deja'' tests in the testsuite where the filename\n-matches @samp{9805*}.\n-\n The @file{*.exp} files are located in the testsuite directories of the GCC\n source, the most important ones being @file{compile.exp},\n @file{execute.exp}, @file{dg.exp} and @file{old-deja.exp}.\n To get a list of the possible @file{*.exp} files, pipe the\n output of @samp{make check} into a file and look at the\n @samp{Running @dots{}  .exp} lines.\n \n-To run only the tests for a library, run @samp{make check} from the\n-the library's testsuite in a subdirectory of the object directory:\n-@file{libstdc++-v3/testsuite} or @file{libcgj/testsuite}.\n \n @section Additional testing for Java Class Libraries\n \n@@ -1306,11 +1302,11 @@ the libjava testsuite at @file{libjava/testsuite/libjava.jacks/jacks}.\n \n @section How to interpret test results\n \n-After the testsuite has run you'll find various @file{*.sum} and @file{*.log}\n+The result of running the testsuite are various @file{*.sum} and @file{*.log}\n files in the testsuite subdirectories.  The @file{*.log} files contain a\n detailed log of the compiler invocations and the corresponding\n-results, the @file{*.sum} files summarize the results.  These summaries list\n-all the tests that have been run with a corresponding status code:\n+results, the @file{*.sum} files summarize the results.  These summaries \n+contain status codes for all tests: \n \n @itemize @bullet\n @item"}]}