{"sha": "2ccc05a5141506fde0e20dec702c717fd67bf6ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjYzA1YTUxNDE1MDZmZGUwZTIwZGVjNzAyYzcxN2ZkNjdiZjZlZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-14T12:54:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-14T12:54:30Z"}, "message": "c++: Fix deduction with reference NTTP [PR83476]\n\nIn the testcase ref11.C below, during deduction for the call f(a),\nuses_deducible_template_parms returns false for the dependent\nspecialization A<V> because the generic template argument V here is\nwrapped in an implicit INDIRECT_REF (formed from template_parm_to_arg).\nSince uses_deducible_template_parms returns false, unify_one_argument\nexits early without ever attempting to deduce 'n' for 'V'.  This patch\nfixes this by making deducible_expression look through such implicit\nINDIRECT_REFs.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/83476\n\tPR c++/99885\n\t* pt.c (deducible_expression): Look through implicit\n\tINDIRECT_REFs as well.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/83476\n\tPR c++/99885\n\t* g++.dg/cpp1z/class-deduction85.C: New test.\n\t* g++.dg/template/ref11.C: New test.", "tree": {"sha": "735c1fd797ead9d0ed3f1580391bb1aa5ffb1d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/735c1fd797ead9d0ed3f1580391bb1aa5ffb1d4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ccc05a5141506fde0e20dec702c717fd67bf6ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ccc05a5141506fde0e20dec702c717fd67bf6ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ccc05a5141506fde0e20dec702c717fd67bf6ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ccc05a5141506fde0e20dec702c717fd67bf6ee/comments", "author": null, "committer": null, "parents": [{"sha": "a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e4abac26b815fe0b0d421930bfdfd2901adfe3"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "f488a5a8c12010cc4e12a1f1f3cc20b1cdadcc55", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccc05a5141506fde0e20dec702c717fd67bf6ee/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccc05a5141506fde0e20dec702c717fd67bf6ee/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2ccc05a5141506fde0e20dec702c717fd67bf6ee", "patch": "@@ -21902,8 +21902,10 @@ static bool uses_deducible_template_parms (tree type);\n static bool\n deducible_expression (tree expr)\n {\n-  /* Strip implicit conversions.  */\n-  while (CONVERT_EXPR_P (expr) || TREE_CODE (expr) == VIEW_CONVERT_EXPR)\n+  /* Strip implicit conversions and implicit INDIRECT_REFs.  */\n+  while (CONVERT_EXPR_P (expr)\n+\t || TREE_CODE (expr) == VIEW_CONVERT_EXPR\n+\t || REFERENCE_REF_P (expr))\n     expr = TREE_OPERAND (expr, 0);\n   return (TREE_CODE (expr) == TEMPLATE_PARM_INDEX);\n }"}, {"sha": "0b22f8eb982175ad7e09961045a38dc072789566", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction85.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccc05a5141506fde0e20dec702c717fd67bf6ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction85.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccc05a5141506fde0e20dec702c717fd67bf6ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction85.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction85.C?ref=2ccc05a5141506fde0e20dec702c717fd67bf6ee", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/99885\n+// { dg-do compile { target c++17 } }\n+\n+template <auto const& A>\n+struct Foo {};\n+\n+template <auto const& A>\n+struct Bar {\n+    constexpr auto foo() const -> Foo<A> {\n+        return {};\n+    }\n+};\n+\n+constexpr int a = 1;\n+constexpr Bar<a> bar;\n+Foo foo = bar.foo(); // <-- CTAD failure"}, {"sha": "c43c67edf70058112d20f82fe74aafc292a741fd", "filename": "gcc/testsuite/g++.dg/template/ref11.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccc05a5141506fde0e20dec702c717fd67bf6ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fref11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccc05a5141506fde0e20dec702c717fd67bf6ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fref11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fref11.C?ref=2ccc05a5141506fde0e20dec702c717fd67bf6ee", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/83476\n+\n+int n;\n+template <int& V> struct A {};\n+template <int& V> void f(A<V>);\n+int main() {\n+  A<n> a;\n+  f(a);\n+}"}]}