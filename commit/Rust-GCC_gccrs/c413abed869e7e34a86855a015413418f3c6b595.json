{"sha": "c413abed869e7e34a86855a015413418f3c6b595", "node_id": "C_kwDOANBUbNoAKGM0MTNhYmVkODY5ZTdlMzRhODY4NTVhMDE1NDEzNDE4ZjNjNmI1OTU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-13T07:52:01Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-17T09:49:05Z"}, "message": "RISC-V: Handle undef for vector mask patterns\n\nAdd new instruction pattern for setting vector mask to undefine value,\nalso merge undef and non-undef ternary operation pattern like MAC operations to\nsingle pattern.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-v.cc (legitimize_move): Allow undef value\n\tas legitimate value.\n\t* config/riscv/riscv-vector-builtins.cc\n\t(function_expander::use_ternop_insn): Fix bugs of ternary intrinsic.\n\t(function_expander::use_widen_ternop_insn): Ditto.\n\t* config/riscv/vector.md (@vundefined<mode>): New pattern.\n\t(pred_mul_<optab><mode>_undef_merge): Remove.\n\t(*pred_mul_<optab><mode>_undef_merge_scalar): Ditto.\n\t(*pred_mul_<optab><mode>_undef_merge_extended_scalar): Ditto.\n\t(pred_neg_mul_<optab><mode>_undef_merge): Ditto.\n\t(*pred_neg_mul_<optab><mode>_undef_merge_scalar): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-4.c: Adapt the test.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-6.c: Ditto.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-127.c: Ditto.\n\t* g++.target/riscv/rvv/base/bug-1.C: New test.\n\t* gcc.target/riscv/rvv/base/bug-2.c: New test.\n\nSigned-off-by: Ju-Zhe Zhong <juzhe.zhong@rivai.ai>\nCo-authored-by: kito-cheng <kito.cheng@sifive.com>", "tree": {"sha": "6c044aa31e11c3c95ddcccf5f1c59b1615a56c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c044aa31e11c3c95ddcccf5f1c59b1615a56c84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c413abed869e7e34a86855a015413418f3c6b595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c413abed869e7e34a86855a015413418f3c6b595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c413abed869e7e34a86855a015413418f3c6b595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c413abed869e7e34a86855a015413418f3c6b595/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02880e7803b19c357718abd2f0d567b4a761f318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02880e7803b19c357718abd2f0d567b4a761f318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02880e7803b19c357718abd2f0d567b4a761f318"}], "stats": {"total": 1041, "additions": 482, "deletions": 559}, "files": [{"sha": "9b83ef6ea5e7429f2f7c790f72409ebf4e143ebf", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -283,6 +283,10 @@ legitimize_move (rtx dest, rtx src, machine_mode mask_mode)\n \temit_move_insn (tmp, src);\n       src = tmp;\n     }\n+\n+  if (satisfies_constraint_vu (src))\n+    return false;\n+\n   emit_vlmax_op (code_for_pred_mov (mode), dest, src, mask_mode);\n   return true;\n }"}, {"sha": "0df3cd15119d7380c2e948b91ffb9e2aa4f55669", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -3129,7 +3129,6 @@ function_expander::use_ternop_insn (bool vd_accum_p, insn_code icode)\n   rtx vd = expand_normal (CALL_EXPR_ARG (exp, arg_offset++));\n   rtx vs1 = expand_normal (CALL_EXPR_ARG (exp, arg_offset++));\n   rtx vs2 = expand_normal (CALL_EXPR_ARG (exp, arg_offset++));\n-  rtx merge = use_real_merge_p (pred) ? vd : RVV_VUNDEF (mode);\n \n   if (VECTOR_MODE_P (GET_MODE (vs1)))\n     {\n@@ -3139,7 +3138,7 @@ function_expander::use_ternop_insn (bool vd_accum_p, insn_code icode)\n       add_input_operand (mode, vs2);\n       if (vd_accum_p)\n \tadd_input_operand (mode, vd);\n-      add_input_operand (mode, merge);\n+      add_input_operand (mode, vd);\n     }\n   else\n     {\n@@ -3154,7 +3153,7 @@ function_expander::use_ternop_insn (bool vd_accum_p, insn_code icode)\n \t  add_input_operand (mode, vd);\n \t  add_input_operand (mode, vs2);\n \t}\n-      add_input_operand (mode, merge);\n+      add_input_operand (mode, vd);\n     }\n \n   for (int argno = arg_offset; argno < call_expr_nargs (exp); argno++)\n@@ -3171,8 +3170,6 @@ function_expander::use_ternop_insn (bool vd_accum_p, insn_code icode)\n rtx\n function_expander::use_widen_ternop_insn (insn_code icode)\n {\n-  machine_mode mode = TYPE_MODE (builtin_types[type.index].vector);\n-\n   /* Record the offset to get the argument.  */\n   int arg_offset = 0;\n \n@@ -3181,16 +3178,8 @@ function_expander::use_widen_ternop_insn (insn_code icode)\n   else\n     add_all_one_mask_operand (mask_mode ());\n \n-  rtx merge = RVV_VUNDEF (mode);\n-  if (use_real_merge_p (pred))\n-    merge = expand_normal (CALL_EXPR_ARG (exp, arg_offset));\n-\n   for (int argno = arg_offset; argno < call_expr_nargs (exp); argno++)\n-    {\n-      if (argno == call_expr_nargs (exp) - 1)\n-\tadd_input_operand (mode, merge);\n-      add_input_operand (argno);\n-    }\n+    add_input_operand (argno);\n \n   add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n   add_input_operand (Pmode, get_mask_policy_for_pred (pred));"}, {"sha": "37a539b48526c889bd45bd2bed6c084e793a5494", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 347, "deletions": 542, "changes": 889, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -215,13 +215,13 @@\n \t\t\t\tvfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,vfclass,\\\n \t\t\t\tvired,viwred,vfredu,vfredo,vfwredu,vfwredo,vimovxv,vfmovfv,\\\n \t\t\t\tvslideup,vslidedown,vislide1up,vislide1down,vfslide1up,vfslide1down,\\\n-\t\t\t\tvgather,vldff\")\n+\t\t\t\tvgather,vldff,viwmuladd,vfwmuladd\")\n \t       (const_int 2)\n \n \t       (eq_attr \"type\" \"vimerge,vfmerge,vcompress\")\n \t       (const_int 1)\n \n-\t       (eq_attr \"type\" \"vimuladd,viwmuladd,vfmuladd,vfwmuladd\")\n+\t       (eq_attr \"type\" \"vimuladd,vfmuladd\")\n \t       (const_int 5)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -245,10 +245,10 @@\n \t\t\t  vsshift,vnclip,vfalu,vfmul,vfminmax,vfdiv,vfwalu,vfwmul,\\\n \t\t\t  vfsgnj,vfmerge,vired,viwred,vfredu,vfredo,vfwredu,vfwredo,\\\n \t\t\t  vslideup,vslidedown,vislide1up,vislide1down,vfslide1up,vfslide1down,\\\n-\t\t\t  vgather\")\n+\t\t\t  vgather,viwmuladd,vfwmuladd\")\n \t   (const_int 5)\n \n-\t (eq_attr \"type\" \"vicmp,vimuladd,viwmuladd,vfcmp,vfmuladd,vfwmuladd\")\n+\t (eq_attr \"type\" \"vicmp,vimuladd,vfcmp,vfmuladd\")\n \t   (const_int 6)\n \n \t (eq_attr \"type\" \"vmpop,vmffs,vmidx\")\n@@ -275,10 +275,10 @@\n \t\t\t  vsshift,vnclip,vfalu,vfmul,vfminmax,vfdiv,\\\n \t\t\t  vfwalu,vfwmul,vfsgnj,vfmerge,vired,viwred,vfredu,\\\n \t\t\t  vfredo,vfwredu,vfwredo,vslideup,vslidedown,vislide1up,\\\n-\t\t\t  vislide1down,vfslide1up,vfslide1down,vgather\")\n+\t\t\t  vislide1down,vfslide1up,vfslide1down,vgather,viwmuladd,vfwmuladd\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n \n-\t (eq_attr \"type\" \"vimuladd,viwmuladd,vfmuladd,vfwmuladd\")\n+\t (eq_attr \"type\" \"vimuladd,vfmuladd\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[7])\")\n \n \t (eq_attr \"type\" \"vmidx\")\n@@ -303,10 +303,11 @@\n \t\t\t  viwalu,viwmul,vnshift,vaalu,vsmul,vsshift,\\\n \t\t\t  vnclip,vicmp,vfalu,vfmul,vfminmax,vfdiv,\\\n \t\t\t  vfwalu,vfwmul,vfsgnj,vfcmp,vslideup,vslidedown,\\\n-\t\t\t  vislide1up,vislide1down,vfslide1up,vfslide1down,vgather\")\n+\t\t\t  vislide1up,vislide1down,vfslide1up,vfslide1down,vgather,\\\n+\t\t\t  viwmuladd,vfwmuladd\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")\n \n-\t (eq_attr \"type\" \"vimuladd,viwmuladd,vfmuladd,vfwmuladd\")\n+\t (eq_attr \"type\" \"vimuladd,vfmuladd\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[8])\")\n \n \t (eq_attr \"type\" \"vmsfs,vmidx\")\n@@ -335,12 +336,12 @@\n \t\t\t  viwalu,viwmul,vnshift,vimuladd,vaalu,vsmul,vsshift,\\\n \t\t\t  vnclip,vicmp,vfalu,vfmul,vfminmax,vfdiv,vfwalu,vfwmul,\\\n \t\t\t  vfsgnj,vfcmp,vfmuladd,vslideup,vslidedown,vislide1up,\\\n-\t\t\t  vislide1down,vfslide1up,vfslide1down,vgather\")\n+\t\t\t  vislide1down,vfslide1up,vfslide1down,vgather,viwmuladd,vfwmuladd\")\n \t   (symbol_ref \"INTVAL (operands[8])\")\n \t (eq_attr \"type\" \"vstux,vstox\")\n \t   (symbol_ref \"INTVAL (operands[5])\")\n \n-\t (eq_attr \"type\" \"vimuladd,viwmuladd,vfwmuladd\")\n+\t (eq_attr \"type\" \"vimuladd\")\n \t   (symbol_ref \"INTVAL (operands[9])\")\n \n \t (eq_attr \"type\" \"vmsfs,vmidx,vcompress\")\n@@ -360,6 +361,12 @@\n   \"TARGET_VECTOR\"\n   \"\")\n \n+(define_insn \"@vundefined<mode>\"\n+  [(set (match_operand:VB 0 \"register_operand\" \"=vr\")\n+\t(unspec:VB [(reg:SI X0_REGNUM)] UNSPEC_VUNDEF))]\n+  \"TARGET_VECTOR\"\n+  \"\")\n+\n (define_expand \"@vreinterpret<mode>\"\n   [(set (match_operand:V 0 \"register_operand\")\n \t(match_operand 1 \"vector_any_register_operand\"))]\n@@ -1008,20 +1015,19 @@\n    (set_attr \"vl_op_idx\" \"3\")])\n \n (define_insn \"@pred_merge<mode>\"\n-  [(set (match_operand:V 0 \"register_operand\"          \"=vd,vd,vd,vd\")\n+  [(set (match_operand:V 0 \"register_operand\"        \"=vd,vd,vd,vd\")\n     (if_then_else:V\n-      (match_operand:<VM> 4 \"register_operand\"         \" vm,vm,vm,vm\")\n-      (if_then_else:V\n-        (unspec:<VM>\n-          [(match_dup 4)\n-           (match_operand 5 \"vector_length_operand\"    \" rK,rK,rK,rK\")\n-           (match_operand 6 \"const_int_operand\"        \"  i, i, i, i\")\n-           (match_operand 7 \"const_int_operand\"        \"  i, i, i, i\")\n-           (reg:SI VL_REGNUM)\n-           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-        (match_operand:V 3 \"vector_arith_operand\"      \" vr,vr,vi,vi\")\n-        (match_operand:V 2 \"register_operand\"          \" vr,vr,vr,vr\"))\n-      (match_operand:V 1 \"vector_merge_operand\"        \" vu, 0,vu, 0\")))]\n+      (unspec:<VM>\n+        [(match_operand 5 \"vector_length_operand\"    \" rK,rK,rK,rK\")\n+         (match_operand 6 \"const_int_operand\"        \"  i, i, i, i\")\n+         (match_operand 7 \"const_int_operand\"        \"  i, i, i, i\")\n+         (reg:SI VL_REGNUM)\n+         (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (vec_merge:V\n+        (match_operand:V 3 \"vector_arith_operand\"    \" vr,vr,vi,vi\")\n+        (match_operand:V 2 \"register_operand\"        \" vr,vr,vr,vr\")\n+\t(match_operand:<VM> 4 \"register_operand\"     \" vm,vm,vm,vm\"))\n+      (match_operand:V 1 \"vector_merge_operand\"      \" vu, 0,vu, 0\")))]\n   \"TARGET_VECTOR\"\n   \"vmerge.v%o3m\\t%0,%2,%v3,%4\"\n   [(set_attr \"type\" \"vimerge\")\n@@ -1030,18 +1036,17 @@\n (define_insn \"@pred_merge<mode>_scalar\"\n   [(set (match_operand:VI_QHS 0 \"register_operand\"   \"=vd,vd\")\n     (if_then_else:VI_QHS\n-      (match_operand:<VM> 4 \"register_operand\"       \" vm,vm\")\n-      (if_then_else:VI_QHS\n-        (unspec:<VM>\n-          [(match_dup 4)\n-           (match_operand 5 \"vector_length_operand\"  \" rK,rK\")\n-           (match_operand 6 \"const_int_operand\"      \"  i, i\")\n-           (match_operand 7 \"const_int_operand\"      \"  i, i\")\n-           (reg:SI VL_REGNUM)\n-           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (unspec:<VM>\n+        [(match_operand 5 \"vector_length_operand\"    \" rK,rK\")\n+         (match_operand 6 \"const_int_operand\"        \"  i, i\")\n+         (match_operand 7 \"const_int_operand\"        \"  i, i\")\n+         (reg:SI VL_REGNUM)\n+         (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (vec_merge:VI_QHS\n \t(vec_duplicate:VI_QHS\n           (match_operand:<VEL> 3 \"register_operand\"  \"  r, r\"))\n-        (match_operand:VI_QHS 2 \"register_operand\"   \" vr,vr\"))\n+        (match_operand:VI_QHS 2 \"register_operand\"   \" vr,vr\")\n+\t(match_operand:<VM> 4 \"register_operand\"     \" vm,vm\"))\n       (match_operand:VI_QHS 1 \"vector_merge_operand\" \" vu, 0\")))]\n   \"TARGET_VECTOR\"\n   \"vmerge.vxm\\t%0,%2,%3,%4\"\n@@ -1051,18 +1056,17 @@\n (define_expand \"@pred_merge<mode>_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\")\n     (if_then_else:VI_D\n-      (match_operand:<VM> 4 \"register_operand\")\n-      (if_then_else:VI_D\n-        (unspec:<VM>\n-          [(match_dup 4)\n-           (match_operand 5 \"vector_length_operand\")\n-           (match_operand 6 \"const_int_operand\")\n-           (match_operand 7 \"const_int_operand\")\n-           (reg:SI VL_REGNUM)\n-           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (unspec:<VM>\n+        [(match_operand 5 \"vector_length_operand\")\n+         (match_operand 6 \"const_int_operand\")\n+         (match_operand 7 \"const_int_operand\")\n+         (reg:SI VL_REGNUM)\n+         (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (vec_merge:VI_D\n \t(vec_duplicate:VI_D\n           (match_operand:<VEL> 3 \"reg_or_int_operand\"))\n-        (match_operand:VI_D 2 \"register_operand\"))\n+        (match_operand:VI_D 2 \"register_operand\")\n+\t(match_operand:<VM> 4 \"register_operand\"))\n       (match_operand:VI_D 1 \"vector_merge_operand\")))]\n   \"TARGET_VECTOR\"\n {\n@@ -1084,18 +1088,17 @@\n (define_insn \"*pred_merge<mode>_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\"     \"=vd,vd\")\n     (if_then_else:VI_D\n-      (match_operand:<VM> 4 \"register_operand\"       \" vm,vm\")\n-      (if_then_else:VI_D\n-        (unspec:<VM>\n-          [(match_dup 4)\n-           (match_operand 5 \"vector_length_operand\"  \" rK,rK\")\n-           (match_operand 6 \"const_int_operand\"      \"  i, i\")\n-           (match_operand 7 \"const_int_operand\"      \"  i, i\")\n-           (reg:SI VL_REGNUM)\n-           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (unspec:<VM>\n+        [(match_operand 5 \"vector_length_operand\"    \" rK,rK\")\n+         (match_operand 6 \"const_int_operand\"        \"  i, i\")\n+         (match_operand 7 \"const_int_operand\"        \"  i, i\")\n+         (reg:SI VL_REGNUM)\n+         (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (vec_merge:VI_D\n \t(vec_duplicate:VI_D\n           (match_operand:<VEL> 3 \"register_operand\"  \"  r, r\"))\n-        (match_operand:VI_D 2 \"register_operand\"     \" vr,vr\"))\n+        (match_operand:VI_D 2 \"register_operand\"     \" vr,vr\")\n+\t(match_operand:<VM> 4 \"register_operand\"     \" vm,vm\"))\n       (match_operand:VI_D 1 \"vector_merge_operand\"   \" vu, 0\")))]\n   \"TARGET_VECTOR\"\n   \"vmerge.vxm\\t%0,%2,%3,%4\"\n@@ -1105,19 +1108,18 @@\n (define_insn \"*pred_merge<mode>_extended_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd,vd\")\n     (if_then_else:VI_D\n-      (match_operand:<VM> 4 \"register_operand\"           \" vm,vm\")\n-      (if_then_else:VI_D\n-        (unspec:<VM>\n-          [(match_dup 4)\n-           (match_operand 5 \"vector_length_operand\"      \" rK,rK\")\n-           (match_operand 6 \"const_int_operand\"          \"  i, i\")\n-           (match_operand 7 \"const_int_operand\"          \"  i, i\")\n-           (reg:SI VL_REGNUM)\n-           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (unspec:<VM>\n+        [(match_operand 5 \"vector_length_operand\"        \" rK,rK\")\n+         (match_operand 6 \"const_int_operand\"            \"  i, i\")\n+         (match_operand 7 \"const_int_operand\"            \"  i, i\")\n+         (reg:SI VL_REGNUM)\n+         (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (vec_merge:VI_D\n \t(vec_duplicate:VI_D\n \t  (sign_extend:<VEL>\n             (match_operand:<VSUBEL> 3 \"register_operand\" \"  r, r\")))\n-        (match_operand:VI_D 2 \"register_operand\"         \" vr,vr\"))\n+        (match_operand:VI_D 2 \"register_operand\"         \" vr,vr\")\n+\t(match_operand:<VM> 4 \"register_operand\"         \" vm,vm\"))\n       (match_operand:VI_D 1 \"vector_merge_operand\"       \" vu, 0\")))]\n   \"TARGET_VECTOR\"\n   \"vmerge.vxm\\t%0,%2,%3,%4\"\n@@ -3561,39 +3563,39 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_cmp<mode>\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr,   vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK,   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i,    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_ltge_operator\"\n-\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr\")\n-\t      (match_operand:VI 5 \"vector_arith_operand\"      \"   vr,   vi\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu,  0vu\")))]\n+\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr,   vr,   vr\")\n+\t      (match_operand:VI 5 \"vector_arith_operand\"      \"   vr,   vr,   vi,   vi\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0,   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.v%o5\\t%0,%4,%v5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_cmp<mode>_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"              \"=&vr,   &vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"              \"=&vr,   &vr,  &vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK,   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i,    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_ltge_operator\"\n-\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr\")\n-\t      (match_operand:VI 5 \"vector_arith_operand\"      \"   vr,   vi\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu,  0vu\")))]\n+\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr,   vr,   vr\")\n+\t      (match_operand:VI 5 \"vector_arith_operand\"      \"   vr,   vr,   vi,   vi\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0,   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.v%o5\\t%0,%4,%v5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n@@ -3618,39 +3620,39 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_ltge<mode>\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr,   vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK,   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i,    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"ltge_operator\"\n-\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr\")\n-\t      (match_operand:VI 5 \"vector_neg_arith_operand\"  \"   vr,   vj\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu,  0vu\")))]\n+\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr,   vr,   vr\")\n+\t      (match_operand:VI 5 \"vector_neg_arith_operand\"  \"   vr,   vr,   vj,   vj\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0,   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.v%o5\\t%0,%4,%v5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_ltge<mode>_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"              \"=&vr,   &vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"              \"=&vr,   &vr,  &vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK,   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i,    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"ltge_operator\"\n-\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr\")\n-\t      (match_operand:VI 5 \"vector_neg_arith_operand\"  \"   vr,   vj\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu,  0vu\")))]\n+\t     [(match_operand:VI 4 \"register_operand\"          \"   vr,   vr,   vr,   vr\")\n+\t      (match_operand:VI 5 \"vector_neg_arith_operand\"  \"   vr,   vr,   vj,   vj\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0,   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.v%o5\\t%0,%4,%v5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n@@ -3676,41 +3678,41 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_cmp<mode>_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_eqge_operator\"\n-\t     [(match_operand:VI_QHS 4 \"register_operand\"      \"   vr\")\n+\t     [(match_operand:VI_QHS 4 \"register_operand\"      \"   vr,   vr\")\n \t      (vec_duplicate:VI_QHS\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_cmp<mode>_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_eqge_operator\"\n-\t     [(match_operand:VI_QHS 4 \"register_operand\"      \"   vr\")\n+\t     [(match_operand:VI_QHS 4 \"register_operand\"      \"   vr,   vr\")\n \t      (vec_duplicate:VI_QHS\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n@@ -3736,41 +3738,41 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_eqne<mode>_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VI_QHS\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))\n-\t      (match_operand:VI_QHS 4 \"register_operand\"      \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))\n+\t      (match_operand:VI_QHS 4 \"register_operand\"      \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_eqne<mode>_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VI_QHS\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))\n-\t      (match_operand:VI_QHS 4 \"register_operand\"      \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))\n+\t      (match_operand:VI_QHS 4 \"register_operand\"      \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n@@ -3853,169 +3855,169 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_cmp<mode>_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_eqge_operator\"\n-\t     [(match_operand:VI_D 4 \"register_operand\"        \"    vr\")\n+\t     [(match_operand:VI_D 4 \"register_operand\"        \"   vr,   vr\")\n \t      (vec_duplicate:VI_D\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_cmp<mode>_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_eqge_operator\"\n-\t     [(match_operand:VI_D 4 \"register_operand\"        \"   vr\")\n+\t     [(match_operand:VI_D 4 \"register_operand\"        \"   vr,   vr\")\n \t      (vec_duplicate:VI_D\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_eqne<mode>_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VI_D\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))\n-\t      (match_operand:VI_D 4 \"register_operand\"        \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))\n+\t      (match_operand:VI_D 4 \"register_operand\"        \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_eqne<mode>_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VI_D\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r\"))\n-\t      (match_operand:VI_D 4 \"register_operand\"        \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    r,    r\"))\n+\t      (match_operand:VI_D 4 \"register_operand\"        \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_cmp<mode>_extended_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                 \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                 \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"          \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"              \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"              \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"          \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"              \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"              \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_eqge_operator\"\n-\t     [(match_operand:VI_D 4 \"register_operand\"         \"   vr\")\n+\t     [(match_operand:VI_D 4 \"register_operand\"         \"   vr,   vr\")\n \t      (vec_duplicate:VI_D\n \t        (sign_extend:<VEL>\n-\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r\")))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"  0vu\")))]\n+\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r,    r\")))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*pred_cmp<mode>_extended_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"          \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"              \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"              \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"          \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"              \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"              \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"comparison_except_eqge_operator\"\n-\t     [(match_operand:VI_D 4 \"register_operand\"         \"   vr\")\n+\t     [(match_operand:VI_D 4 \"register_operand\"         \"   vr,   vr\")\n \t      (vec_duplicate:VI_D\n \t        (sign_extend:<VEL>\n-\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r\")))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"  0vu\")))]\n+\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r,    r\")))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_eqne<mode>_extended_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                 \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                 \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"          \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"              \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"              \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"          \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"              \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"              \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VI_D\n \t        (sign_extend:<VEL>\n-\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r\")))\n-\t      (match_operand:VI_D 4 \"register_operand\"         \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"  0vu\")))]\n+\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r,    r\")))\n+\t      (match_operand:VI_D 4 \"register_operand\"         \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*pred_eqne<mode>_extended_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"          \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"              \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"              \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"          \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"              \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"              \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VI_D\n \t        (sign_extend:<VEL>\n-\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r\")))\n-\t      (match_operand:VI_D 4 \"register_operand\"         \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"  0vu\")))]\n+\t          (match_operand:<VSUBEL> 5 \"register_operand\" \"    r,    r\")))\n+\t      (match_operand:VI_D 4 \"register_operand\"         \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"         \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vms%B3.vx\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vicmp\")\n@@ -4162,7 +4164,7 @@\n \t      (match_operand:VI 2 \"register_operand\")\n \t      (match_operand:VI 3 \"register_operand\"))\n \t    (match_operand:VI 4 \"register_operand\"))\n-\t  (match_operand:VI 5 \"vector_merge_operand\")))]\n+\t  (match_operand:VI 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {\n   /* Swap the multiplication operands if the fallback value is the\n@@ -4171,33 +4173,6 @@\n     std::swap (operands[2], operands[3]);\n })\n \n-(define_insn \"pred_mul_<optab><mode>_undef_merge\"\n-  [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr, vd, vr, ?&vr\")\n-\t(if_then_else:VI\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1, vm,Wc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"    \" rK, rK, rK, rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n-\t    (mult:VI\n-\t      (match_operand:VI 2 \"register_operand\"     \" %0,  0, vr, vr,   vr\")\n-\t      (match_operand:VI 3 \"register_operand\"     \" vr, vr, vr, vr,   vr\"))\n-\t    (match_operand:VI 4 \"register_operand\"       \" vr, vr,  0,  0,   vr\"))\n-\t  (match_operand:VI 5 \"vector_undef_operand\"     \" vu, vu, vu, vu,   vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   v<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   v<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   v<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   v<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vv\\t%0,%2,%3%p1\"\n-  [(set_attr \"type\" \"vimuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*pred_<madd_nmsub><mode>\"\n   [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VI\n@@ -4326,40 +4301,12 @@\n \t        (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n \t      (match_operand:VI_QHS 3 \"register_operand\"))\n \t    (match_operand:VI_QHS 4 \"register_operand\"))\n-\t  (match_operand:VI_QHS 5 \"vector_merge_operand\")))]\n+\t  (match_operand:VI_QHS 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {\n   operands[2] = force_reg (<VEL>mode, operands[2]);\n })\n \n-(define_insn \"*pred_mul_<optab><mode>_undef_merge_scalar\"\n-  [(set (match_operand:VI 0 \"register_operand\"             \"=vd, vr, vd, vr, ?&vr\")\n-\t(if_then_else:VI\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \" vm,Wc1, vm,Wc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"      \" rK, rK, rK, rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n-\t    (mult:VI\n-\t      (vec_duplicate:VI\n-\t        (match_operand:<VEL> 2 \"register_operand\" \"   r,  r,  r,  r,    r\"))\n-\t      (match_operand:VI 3 \"register_operand\"       \"  0,  0, vr, vr,   vr\"))\n-\t    (match_operand:VI 4 \"register_operand\"         \" vr, vr,  0,  0,   vr\"))\n-\t  (match_operand:VI 5 \"vector_undef_operand\"       \" vu, vu, vu, vu,   vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vx\\t%0,%2,%3%p1\"\n-  [(set_attr \"type\" \"vimuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*pred_<madd_nmsub><mode>_scalar\"\n   [(set (match_operand:VI 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n \t(if_then_else:VI\n@@ -4486,7 +4433,7 @@\n \t        (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n \t      (match_operand:VI_D 3 \"register_operand\"))\n \t    (match_operand:VI_D 4 \"register_operand\"))\n-\t  (match_operand:VI_D 5 \"vector_merge_operand\")))]\n+\t  (match_operand:VI_D 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {\n   if (riscv_vector::sew64_scalar_helper (\n@@ -4504,35 +4451,6 @@\n     DONE;\n })\n \n-(define_insn \"*pred_mul_<optab><mode>_undef_merge_extended_scalar\"\n-  [(set (match_operand:VI_D 0 \"register_operand\"               \"=vd, vr, vd, vr, ?&vr\")\n-\t(if_then_else:VI_D\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \" vm,Wc1, vm,Wc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"          \" rK, rK, rK, rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"              \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"              \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"              \"  i,  i,  i,  i,    i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI_D\n-\t    (mult:VI_D\n-\t      (vec_duplicate:VI_D\n-\t        (sign_extend:<VEL>\n-\t          (match_operand:<VSUBEL> 2 \"register_operand\" \"  r,  r,  r,  r,    r\")))\n-\t      (match_operand:VI_D 3 \"register_operand\"         \"  0,  0, vr, vr,   vr\"))\n-\t    (match_operand:VI_D 4 \"register_operand\"           \" vr, vr,  0,  0,   vr\"))\n-\t  (match_operand:VI_D 5 \"vector_undef_operand\"         \" vu, vu, vu, vu,   vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vx\\t%0,%2,%3%p1\"\n-  [(set_attr \"type\" \"vimuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*pred_<madd_nmsub><mode>_extended_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\"               \"=vd, vr, ?&vr\")\n \t(if_then_else:VI_D\n@@ -4653,123 +4571,123 @@\n ;; -------------------------------------------------------------------------------\n \n (define_insn \"@pred_widen_mul_plus<su><mode>\"\n-  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr\")\n \t(if_then_else:VWEXTI\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                    \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus:VWEXTI\n \t    (mult:VWEXTI\n \t      (any_extend:VWEXTI\n-\t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr,   vr\"))\n+\t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n \t      (any_extend:VWEXTI\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\")))\n-\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0,    0\"))\n-\t  (match_operand:VWEXTI 5 \"vector_merge_operand\"             \"   vu,    0\")))]\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0\"))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vwmacc<u>.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"viwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n (define_insn \"@pred_widen_mul_plus<su><mode>_scalar\"\n-  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr\")\n \t(if_then_else:VWEXTI\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                    \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus:VWEXTI\n \t    (mult:VWEXTI\n \t      (any_extend:VWEXTI\n \t        (vec_duplicate:<V_DOUBLE_TRUNC>\n-\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r,    r\")))\n+\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r\")))\n \t      (any_extend:VWEXTI\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\")))\n-\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0,    0\"))\n-\t  (match_operand:VWEXTI 5 \"vector_merge_operand\"             \"   vu,    0\")))]\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0\"))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vwmacc<u>.vx\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"viwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n (define_insn \"@pred_widen_mul_plussu<mode>\"\n-  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr\")\n \t(if_then_else:VWEXTI\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                    \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus:VWEXTI\n \t    (mult:VWEXTI\n \t      (sign_extend:VWEXTI\n-\t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr,   vr\"))\n+\t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n \t      (zero_extend:VWEXTI\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\")))\n-\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0,    0\"))\n-\t  (match_operand:VWEXTI 5 \"vector_merge_operand\"             \"   vu,    0\")))]\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0\"))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vwmaccsu.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"viwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n (define_insn \"@pred_widen_mul_plussu<mode>_scalar\"\n-  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr\")\n \t(if_then_else:VWEXTI\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                    \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus:VWEXTI\n \t    (mult:VWEXTI\n \t      (sign_extend:VWEXTI\n \t        (vec_duplicate:<V_DOUBLE_TRUNC>\n-\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r,    r\")))\n+\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r\")))\n \t      (zero_extend:VWEXTI\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\")))\n-\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0,    0\"))\n-\t  (match_operand:VWEXTI 5 \"vector_merge_operand\"             \"   vu,    0\")))]\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0\"))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vwmaccsu.vx\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"viwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n (define_insn \"@pred_widen_mul_plusus<mode>_scalar\"\n-  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                    \"=&vr\")\n \t(if_then_else:VWEXTI\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                    \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus:VWEXTI\n \t    (mult:VWEXTI\n \t      (zero_extend:VWEXTI\n \t        (vec_duplicate:<V_DOUBLE_TRUNC>\n-\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r,    r\")))\n+\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    r\")))\n \t      (sign_extend:VWEXTI\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\")))\n-\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0,    0\"))\n-\t  (match_operand:VWEXTI 5 \"vector_merge_operand\"             \"   vu,    0\")))]\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t    (match_operand:VWEXTI 2 \"register_operand\"               \"    0\"))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vwmaccus.vx\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"viwmuladd\")\n@@ -5119,7 +5037,7 @@\n \t      (match_operand:VF 2 \"register_operand\")\n \t      (match_operand:VF 3 \"register_operand\"))\n \t    (match_operand:VF 4 \"register_operand\"))\n-\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+\t  (match_operand:VF 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {\n   /* Swap the multiplication operands if the fallback value is the\n@@ -5128,33 +5046,6 @@\n     std::swap (operands[2], operands[3]);\n })\n \n-(define_insn \"pred_mul_<optab><mode>_undef_merge\"\n-  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, vd, vr, ?&vr\")\n-\t(if_then_else:VF\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1, vm,Wc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"    \" rK, rK, rK, rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VF\n-\t    (mult:VF\n-\t      (match_operand:VF 2 \"register_operand\"     \" %0,  0, vr, vr,   vr\")\n-\t      (match_operand:VF 3 \"register_operand\"     \" vr, vr, vr, vr,   vr\"))\n-\t    (match_operand:VF 4 \"register_operand\"       \" vr, vr,  0,  0,   vr\"))\n-\t  (match_operand:VF 5 \"vector_undef_operand\"     \" vu, vu, vu, vu,   vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vv\\t%0,%2,%3%p1\"\n-  [(set_attr \"type\" \"vfmuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*pred_<madd_nmsub><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n@@ -5267,38 +5158,10 @@\n \t        (match_operand:<VEL> 2 \"register_operand\"))\n \t      (match_operand:VF 3 \"register_operand\"))\n \t    (match_operand:VF 4 \"register_operand\"))\n-\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+\t  (match_operand:VF 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {})\n \n-(define_insn \"*pred_mul_<optab><mode>_undef_merge_scalar\"\n-  [(set (match_operand:VF 0 \"register_operand\"             \"=vd, vr, vd, vr, ?&vr\")\n-\t(if_then_else:VF\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \" vm,Wc1, vm,Wc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"      \" rK, rK, rK, rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VF\n-\t    (mult:VF\n-\t      (vec_duplicate:VF\n-\t        (match_operand:<VEL> 2 \"register_operand\" \"   f,  f,  f,  f,    f\"))\n-\t      (match_operand:VF 3 \"register_operand\"       \"  0,  0, vr, vr,   vr\"))\n-\t    (match_operand:VF 4 \"register_operand\"         \" vr, vr,  0,  0,   vr\"))\n-\t  (match_operand:VF 5 \"vector_undef_operand\"       \" vu, vu, vu, vu,   vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n-   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n-   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n-   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vf\\t%0,%2,%3%p1\"\n-  [(set_attr \"type\" \"vfmuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*pred_<madd_nmsub><mode>_scalar\"\n   [(set (match_operand:VF 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n@@ -5413,7 +5276,7 @@\n \t      (mult:VF\n \t        (match_operand:VF 2 \"register_operand\")\n \t        (match_operand:VF 3 \"register_operand\"))))\n-\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+\t  (match_operand:VF 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {\n   /* Swap the multiplication operands if the fallback value is the\n@@ -5422,34 +5285,6 @@\n     std::swap (operands[2], operands[3]);\n })\n \n-(define_insn \"pred_neg_mul_<optab><mode>_undef_merge\"\n-  [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, vd, vr, ?&vr\")\n-\t(if_then_else:VF\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1, vm,Wc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"    \" rK, rK, rK, rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"        \"  i,  i,  i,  i,    i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\"     \" vr, vr,  0,  0,   vr\")\n-\t      (mult:VF\n-\t        (match_operand:VF 2 \"register_operand\"   \" %0,  0, vr, vr,   vr\")\n-\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr, vr, vr,   vr\"))))\n-\t  (match_operand:VF 5 \"vector_undef_operand\"     \" vu, vu, vu, vu,   vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n-   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n-   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n-   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vv\\t%0,%2,%3%p1\"\n-  [(set_attr \"type\" \"vfmuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*pred_<nmadd_msub><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n@@ -5566,39 +5401,10 @@\n \t        (vec_duplicate:VF\n \t          (match_operand:<VEL> 2 \"register_operand\"))\n \t        (match_operand:VF 3 \"register_operand\"))))\n-\t  (match_operand:VF 5 \"vector_merge_operand\")))]\n+\t  (match_operand:VF 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {})\n \n-(define_insn \"*pred_neg_mul_<optab><mode>_undef_merge_scalar\"\n-  [(set (match_operand:VF 0 \"register_operand\"             \"=vd, vr, vd, vr, ?&vr\")\n-\t(if_then_else:VF\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \" vm,Wc1, vm,Wc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"      \" rK, rK, rK, rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"          \"  i,  i,  i,  i,    i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\"         \" vr, vr,  0,  0,   vr\")\n-\t      (mult:VF\n-\t        (vec_duplicate:VF\n-\t          (match_operand:<VEL> 2 \"register_operand\"  \"  f,  f,  f,  f,    f\"))\n-\t        (match_operand:VF 3 \"register_operand\"       \"  0,  0, vr, vr,   vr\"))))\n-\t  (match_operand:VF 5 \"vector_undef_operand\"       \" vu, vu, vu, vu,   vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n-   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n-   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n-   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vf\\t%0,%2,%3%p1\"\n-  [(set_attr \"type\" \"vfmuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*pred_<nmadd_msub><mode>_scalar\"\n   [(set (match_operand:VF 0 \"register_operand\"              \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n@@ -5876,100 +5682,100 @@\n ;; -------------------------------------------------------------------------------\n \n (define_insn \"@pred_widen_mul_<optab><mode>\"\n-  [(set (match_operand:VWEXTF 0 \"register_operand\"                    \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                    \"=&vr\")\n \t(if_then_else:VWEXTF\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                    \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus_minus:VWEXTF\n-\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0,    0\")\n+\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n \t    (mult:VWEXTF\n \t      (float_extend:VWEXTF\n-\t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr,   vr\"))\n+\t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n \t      (float_extend:VWEXTF\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\"))))\n-\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"             \"   vu,    0\")))]\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vfw<macc_nmsac>.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n (define_insn \"@pred_widen_mul_<optab><mode>_scalar\"\n-  [(set (match_operand:VWEXTF 0 \"register_operand\"                    \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                    \"=&vr\")\n \t(if_then_else:VWEXTF\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                    \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                    \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"             \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                    \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                    \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus_minus:VWEXTF\n-\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0,    0\")\n+\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n \t    (mult:VWEXTF\n \t      (float_extend:VWEXTF\n \t        (vec_duplicate:<V_DOUBLE_TRUNC>\n-\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    f,    f\")))\n+\t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    f\")))\n \t      (float_extend:VWEXTF\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\"))))\n-\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"             \"   vu,    0\")))]\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vfw<macc_nmsac>.vf\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n (define_insn \"@pred_widen_neg_mul_<optab><mode>\"\n-  [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr\")\n \t(if_then_else:VWEXTF\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                  \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                      \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                      \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                      \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                  \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (neg:VWEXTF\n \t    (plus_minus:VWEXTF\n-\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0,    0\")\n+\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n \t      (mult:VWEXTF\n \t        (float_extend:VWEXTF\n-\t          (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr,   vr\"))\n+\t          (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n \t        (float_extend:VWEXTF\n-\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\")))))\n-\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"               \"   vu,    0\")))]\n+\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vfw<nmacc_msac>.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n (define_insn \"@pred_widen_neg_mul_<optab><mode>_scalar\"\n-  [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr,  &vr\")\n+  [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr\")\n \t(if_then_else:VWEXTF\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"                  \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"                      \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"                      \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"                      \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                  \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (neg:VWEXTF\n \t    (plus_minus:VWEXTF\n-\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0,    0\")\n+\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n \t      (mult:VWEXTF\n \t        (float_extend:VWEXTF\n \t          (vec_duplicate:<V_DOUBLE_TRUNC>\n-\t            (match_operand:<VSUBEL> 3 \"register_operand\"       \"    f,    f\")))\n+\t            (match_operand:<VSUBEL> 3 \"register_operand\"       \"    f\")))\n \t        (float_extend:VWEXTF\n-\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr,   vr\")))))\n-\t  (match_operand:VWEXTF 5 \"vector_merge_operand\"               \"   vu,    0\")))]\n+\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))))\n+\t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"vfw<nmacc_msac>.vf\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n@@ -6001,39 +5807,39 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_cmp<mode>\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"signed_order_operator\"\n-\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n-\t      (match_operand:VF 5 \"register_operand\"          \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr,   vr\")\n+\t      (match_operand:VF 5 \"register_operand\"          \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vmf%B3.vv\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vfcmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_cmp<mode>_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"signed_order_operator\"\n-\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n-\t      (match_operand:VF 5 \"register_operand\"          \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr,   vr\")\n+\t      (match_operand:VF 5 \"register_operand\"          \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vmf%B3.vv\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vfcmp\")\n@@ -6059,41 +5865,41 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_cmp<mode>_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"signed_order_operator\"\n-\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr,   vr\")\n \t      (vec_duplicate:VF\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f\"))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f,    f\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vmf%B3.vf\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vfcmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_cmp<mode>_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"signed_order_operator\"\n-\t     [(match_operand:VF 4 \"register_operand\"          \"   vr\")\n+\t     [(match_operand:VF 4 \"register_operand\"          \"   vr,   vr\")\n \t      (vec_duplicate:VF\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f\"))])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f,    f\"))])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vmf%B3.vf\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vfcmp\")\n@@ -6119,41 +5925,41 @@\n \n ;; We don't use early-clobber for LMUL <= 1 to get better codegen.\n (define_insn \"*pred_eqne<mode>_scalar\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"                \"=vr,   vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VF\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f\"))\n-\t      (match_operand:VF 4 \"register_operand\"          \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f,    f\"))\n+\t      (match_operand:VF 4 \"register_operand\"          \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_le (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vmf%B3.vf\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vfcmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; We use early-clobber for source LMUL > dest LMUL.\n (define_insn \"*pred_eqne<mode>_scalar_narrow\"\n-  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr\")\n+  [(set (match_operand:<VM> 0 \"register_operand\"               \"=&vr,  &vr\")\n \t(if_then_else:<VM>\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"         \"   rK\")\n-\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n-\t     (match_operand 8 \"const_int_operand\"             \"    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"         \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operator:<VM> 3 \"equality_operator\"\n \t     [(vec_duplicate:VF\n-\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f\"))\n-\t      (match_operand:VF 4 \"register_operand\"          \"   vr\")])\n-\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"  0vu\")))]\n+\t        (match_operand:<VEL> 5 \"register_operand\"     \"    f,    f\"))\n+\t      (match_operand:VF 4 \"register_operand\"          \"   vr,   vr\")])\n+\t  (match_operand:<VM> 2 \"vector_merge_operand\"        \"   vu,    0\")))]\n   \"TARGET_VECTOR && known_gt (GET_MODE_SIZE (<MODE>mode), BYTES_PER_RISCV_VECTOR)\"\n   \"vmf%B3.vf\\t%0,%4,%5%p1\"\n   [(set_attr \"type\" \"vfcmp\")\n@@ -6169,18 +5975,17 @@\n (define_insn \"@pred_merge<mode>_scalar\"\n   [(set (match_operand:VF 0 \"register_operand\"      \"=vd,vd\")\n     (if_then_else:VF\n-      (match_operand:<VM> 4 \"register_operand\"      \" vm,vm\")\n-      (if_then_else:VF\n-        (unspec:<VM>\n-          [(match_dup 4)\n-           (match_operand 5 \"vector_length_operand\" \" rK,rK\")\n-           (match_operand 6 \"const_int_operand\"     \"  i, i\")\n-           (match_operand 7 \"const_int_operand\"     \"  i, i\")\n-           (reg:SI VL_REGNUM)\n-           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (unspec:<VM>\n+        [(match_operand 5 \"vector_length_operand\"   \" rK,rK\")\n+         (match_operand 6 \"const_int_operand\"       \"  i, i\")\n+         (match_operand 7 \"const_int_operand\"       \"  i, i\")\n+         (reg:SI VL_REGNUM)\n+         (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+      (vec_merge:VF\n         (vec_duplicate:VF\n           (match_operand:<VEL> 3 \"register_operand\" \"  f, f\"))\n-        (match_operand:VF 2 \"register_operand\"      \" vr,vr\"))\n+        (match_operand:VF 2 \"register_operand\"      \" vr,vr\")\n+\t(match_operand:<VM> 4 \"register_operand\"    \" vm,vm\"))\n       (match_operand:VF 1 \"vector_merge_operand\"    \" vu, 0\")))]\n   \"TARGET_VECTOR\"\n   \"vfmerge.vfm\\t%0,%2,%3,%4\""}, {"sha": "c1070f9eb16ad60b520b8617ebfc1e3190d02e44", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/bug-1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-1.C?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+template < class T > \n+bool __attribute__(()) check(T *, T *, size_t ); \n+int main() { \n+ size_t var_44 = 132u; \n+ float var_43[41]; \n+ int16_t var_32[41]; \n+ int16_t var_31[41]; \n+ float var_30[41]; \n+ float var_29[41]; \n+ float var_28[41]; \n+ float var_27[41]; \n+ float var_26[41]; \n+ float var_25[41]; \n+ float var_23 = (2732844647u); \n+ int16_t var_22 = 23867; \n+ vint16m4_t var_14 = __riscv_vle16_v_i16m4(var_32, 41); \n+ vint16m4_t var_15 = __riscv_vle16_v_i16m4(var_31, 41); \n+ vfloat32m8_t var_16 = __riscv_vle32_v_f32m8(var_30, 33); \n+ vfloat32m8_t var_17 = __riscv_vle32_v_f32m8(var_29, 33); \n+ vfloat32m8_t var_18 = __riscv_vle32_v_f32m8(var_28, 33); \n+ vfloat32m8_t var_19 = __riscv_vle32_v_f32m8(var_27, 41); \n+ vfloat32m8_t var_20 = __riscv_vle32_v_f32m8(var_26, 41); \n+ vint16m4_t var_8 = __riscv_vmin_vv_i16m4(var_14, var_15, 41); \n+ vfloat32m8_t var_7 = __riscv_vfmsac_vv_f32m8(var_16, var_17, var_18, 33); \n+ vbool4_t var_6 = __riscv_vmsle_vx_i16m4_b4(var_8, var_22, 41); \n+ float var_5 = __riscv_vfmv_f_s_f32m8_f32(var_7); \n+ vfloat32m8_t var_4 = __riscv_vfnmsac_vf_f32m8_m(var_6, var_19, var_23, var_20, 41); \n+ vfloat32m8_t var_0 = __riscv_vmerge_vvm_f32m8(var_4, var_4, var_6,41); \n+ vfloat32m8_t var_1 = __riscv_vfmsub_vf_f32m8(var_0, var_5, var_4, 33); \n+ __riscv_vse32_v_f32m8(var_25, var_1, 33); \n+ if (!check(var_25, var_43, var_44)) \n+   ; \n+ return 0; \n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "1b0afed037ab735737974c7d91e62c04081cea7a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -24,4 +24,3 @@ void f2 (void * in, void *out, int32_t x)\n     __riscv_vsm_v_b32 (out, m4, 4);\n }\n \n-/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "384e2301a69bb683654a71bce1802f4eb6d87382", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -24,4 +24,4 @@ void f2 (void * in, void *out, int32_t x)\n     __riscv_vsm_v_b32 (out, m4, 4);\n }\n \n-/* { dg-final { scan-assembler-times {vmv} 2 } } */\n+"}, {"sha": "a353a7ab2d53a5f4a4fc26b6aad321bfe907ba3a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-127.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -24,4 +24,4 @@ void f2 (void * in, void *out, int32_t x)\n     __riscv_vsm_v_b32 (out, m4, 4);\n }\n \n-/* { dg-final { scan-assembler-times {vmv} 2 } } */\n+"}, {"sha": "b779516cd2f58d104e93a8eabf6a087136092541", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/bug-2.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c413abed869e7e34a86855a015413418f3c6b595/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-2.c?ref=c413abed869e7e34a86855a015413418f3c6b595", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+int f0() { \n+ float var_84[8]; \n+ float var_83[8]; \n+ float var_82[8]; \n+ uint32_t var_81[8]; \n+ float var_77[8]; \n+ uint32_t var_76[8]; \n+ uint32_t var_75[8]; \n+ uint32_t var_74[8]; \n+ uint32_t var_73[8]; \n+ uint64_t var_72[8]; \n+ double var_71[8]; \n+ double var_70[8]; \n+ double var_69[8]; \n+ double var_68[8]; \n+ double var_67[8]; \n+ double var_66[8]; \n+ int8_t var_65[8]; \n+ int8_t var_64[8]; \n+ float var_63[8]; \n+ double var_62[8]; \n+ uint8_t var_61[8]; \n+ uint8_t var_60[8]; \n+ double var_59[8]; \n+ double var_58[8]; \n+ double var_57[8]; \n+ double var_56[8]; \n+ float var_55[8]; \n+ float var_54[8]; \n+ size_t var_53 ; \n+ size_t var_52 ; \n+ size_t var_51 ; \n+ float var_50 = (3048723213u); \n+ uint32_t var_49 ; \n+ uint64_t var_48 ; \n+ vfloat32m4_t var_11 = __riscv_vle32_v_f32m4(var_84, 8); \n+ vfloat32m4_t var_12 = __riscv_vle32_v_f32m4(var_83, 8); \n+ vfloat32m4_t var_13 = __riscv_vle32_v_f32m4(var_82, 8); \n+ vuint32m4_t var_14 = __riscv_vle32_v_u32m4(var_81, 8); \n+ vfloat32m4_t var_19 = __riscv_vle32_v_f32m4(var_77, 8); \n+ vuint32m4_t var_20 = __riscv_vle32_v_u32m4(var_76, 8); \n+ vuint32m4_t var_21 = __riscv_vle32_v_u32m4(var_75, 8); \n+ vuint32m4_t var_23 = __riscv_vle32_v_u32m4(var_74, 18); \n+ vuint64m8_t var_25 = __riscv_vle64_v_u64m8(var_72, 18); \n+ vfloat64m8_t var_27 = __riscv_vle64_v_f64m8(var_71, 4); \n+ vfloat64m8_t var_28 = __riscv_vle64_v_f64m8(var_70, 4); \n+ vfloat64m8_t var_30 = __riscv_vle64_v_f64m8(var_68, 4); \n+ vfloat64m8_t var_31 = __riscv_vle64_v_f64m8(var_67, 4); \n+ vfloat64m8_t var_33 = __riscv_vle64_v_f64m8(var_66, 4); \n+ vint8m1_t var_34 = __riscv_vle8_v_i8m1(var_65, 4); \n+ vint8m1_t var_35 = __riscv_vle8_v_i8m1(var_64, 4); \n+ vfloat32m4_t var_37 = __riscv_vle32_v_f32m4(var_63, 8); \n+ vuint8m1_t var_39 = __riscv_vle8_v_u8m1(var_61, 8); \n+ vuint8m1_t var_40 = __riscv_vle8_v_u8m1(var_60, 8); \n+ vfloat64m8_t var_41 = __riscv_vle64_v_f64m8(var_59, 18); \n+ vfloat64m8_t var_42 = __riscv_vle64_v_f64m8(var_58, 18); \n+ vfloat64m8_t var_43 = __riscv_vle64_v_f64m8(var_57, 18); \n+ vfloat64m8_t var_45 = __riscv_vle64_v_f64m8(var_56, 18); \n+ vfloat32m4_t var_46 = __riscv_vle32_v_f32m4(var_55, 18); \n+ vfloat32m4_t var_47 = __riscv_vle32_v_f32m4(var_54, 18); \n+ vbool8_t var_10 = __riscv_vmsltu_vx_u32m4_b8(var_14, var_49, 8); \n+ vbool8_t var_18 = __riscv_vmsltu_vv_u32m4_b8(var_20, var_21, 8); \n+ vbool8_t var_22 = __riscv_vmsgeu_vx_u64m8_b8(var_25, var_48, 18); \n+ vbool8_t var_26 = __riscv_vmfne_vv_f64m8_b8(var_30, var_31, 4); \n+ vbool8_t var_32 = __riscv_vmsge_vv_i8m1_b8(var_34, var_35, 4); \n+ vbool8_t var_36 = __riscv_vmseq_vv_u8m1_b8(var_39, var_40, 8); \n+ vfloat64m8_t var_2 = __riscv_vslideup_vx_f64m8(var_41, var_42, var_52, 18); \n+ vbool8_t var_44 = __riscv_vmfne_vv_f32m4_b8(var_46, var_47, 18); \n+ vfloat32m4_t var_9 = __riscv_vfsgnj_vv_f32m4_mu(var_10, var_11, var_12, var_13, 8); \n+ vfloat64m8_t var_0 = __riscv_vfmin_vv_f64m8_mu(var_44, var_2, var_2, var_45, 18); \n+ vfloat32m4_t var_7 = __riscv_vfmax_vf_f32m4_mu(var_18, var_9, var_19, var_50, 8); \n+ vfloat64m8_t var_1 = __riscv_vslidedown_vx_f64m8_tu(var_0, var_43, var_53, 18); \n+ vfloat64m8_t var_4 = __riscv_vrgather_vx_f64m8_mu(var_32, var_0, var_33, var_51, 4); \n+ vfloat64m8_t var_3 = __riscv_vfwnmsac_vv_f64m8_mu(var_36, var_1, var_7, var_37, 4); \n+ vuint32m4_t var_6 = __riscv_vfncvt_xu_f_w_u32m4_mu(var_22, var_23, var_1, 4); \n+ vfloat64m8_t var_5 = __riscv_vfsgnjx_vv_f64m8_mu(var_26, var_4, var_27, var_28, 4); \n+ __riscv_vse64_v_f64m8(var_62, var_3, 4); \n+ __riscv_vse32_v_u32m4(var_73, var_6, 4); \n+ __riscv_vse64_v_f64m8(var_69, var_5, 4); \n+ return 0; \n+}"}]}