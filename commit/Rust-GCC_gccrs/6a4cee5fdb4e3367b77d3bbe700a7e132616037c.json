{"sha": "6a4cee5fdb4e3367b77d3bbe700a7e132616037c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0Y2VlNWZkYjRlMzM2N2I3N2QzYmJlNzAwYTdlMTMyNjE2MDM3Yw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-03-04T16:34:29Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-03-04T16:34:29Z"}, "message": "Add attribute((longcall)) support\n\nFrom-SVN: r11416", "tree": {"sha": "b2cea70495238983f6ab5e53aee0d4c5f53d77d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2cea70495238983f6ab5e53aee0d4c5f53d77d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4cee5fdb4e3367b77d3bbe700a7e132616037c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4cee5fdb4e3367b77d3bbe700a7e132616037c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4cee5fdb4e3367b77d3bbe700a7e132616037c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4cee5fdb4e3367b77d3bbe700a7e132616037c/comments", "author": null, "committer": null, "parents": [{"sha": "de3a68a106506d13e4429f868c3af140a022c6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3a68a106506d13e4429f868c3af140a022c6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3a68a106506d13e4429f868c3af140a022c6a3"}], "stats": {"total": 209, "additions": 131, "deletions": 78}, "files": [{"sha": "401faa62b3cecc6caa79e29ecace6c261f47b4b9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4cee5fdb4e3367b77d3bbe700a7e132616037c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4cee5fdb4e3367b77d3bbe700a7e132616037c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6a4cee5fdb4e3367b77d3bbe700a7e132616037c", "patch": "@@ -939,6 +939,10 @@ init_cumulative_args (cum, fntype, libname, incoming)\n       && lookup_attribute (\"dllimport\", TYPE_ATTRIBUTES (fntype)))\n     cum->call_cookie = CALL_NT_DLLIMPORT;\n \n+  /* Also check for longcall's */\n+  else if (fntype && lookup_attribute (\"longcall\", TYPE_ATTRIBUTES (fntype)))\n+    cum->call_cookie = CALL_LONG;\n+\n   if (TARGET_DEBUG_ARG)\n     {\n       fprintf (stderr, \"\\ninit_cumulative_args:\");\n@@ -952,9 +956,12 @@ init_cumulative_args (cum, fntype, libname, incoming)\n       if (abi == ABI_V4 && incoming)\n \tfprintf (stderr, \" varargs = %d, \", cum->varargs_offset);\n \n-      if (cum->call_cookie == CALL_NT_DLLIMPORT)\n+      if (cum->call_cookie & CALL_NT_DLLIMPORT)\n \tfprintf (stderr, \" dllimport,\");\n \n+      if (cum->call_cookie & CALL_LONG)\n+\tfprintf (stderr, \" longcall,\");\n+\n       fprintf (stderr, \" proto = %d, nargs = %d\\n\",\n \t       cum->prototype, cum->nargs_prototype);\n     }\n@@ -1089,12 +1096,10 @@ function_arg (cum, mode, type, named)\n \t  && cum->nargs_prototype < 0\n \t  && type && (cum->prototype || TARGET_NO_PROTOTYPE))\n \t{\n-\t  if (cum->call_cookie != CALL_NORMAL)\n-\t    abort ();\n-\n-\t  return GEN_INT ((cum->fregno == FP_ARG_MIN_REG)\n-\t\t\t  ? CALL_V4_SET_FP_ARGS\n-\t\t\t  : CALL_V4_CLEAR_FP_ARGS);\n+\t  return GEN_INT (cum->call_cookie\n+\t\t\t  | ((cum->fregno == FP_ARG_MIN_REG)\n+\t\t\t     ? CALL_V4_SET_FP_ARGS\n+\t\t\t     : CALL_V4_CLEAR_FP_ARGS));\n \t}\n \n       return GEN_INT (cum->call_cookie);\n@@ -4248,6 +4253,11 @@ rs6000_valid_type_attribute_p (type, attributes, identifier, args)\n       && TREE_CODE (type) != TYPE_DECL)\n     return 0;\n \n+  /* Longcall attribute says that the function is not within 2**26 bytes\n+     of the current function, and to do an indirect call.  */\n+  if (is_attribute_p (\"longcall\", identifier))\n+    return (args == NULL_TREE);\n+\n   if (DEFAULT_ABI == ABI_NT)\n     {\n       /* Stdcall attribute says callee is responsible for popping arguments\n@@ -4324,6 +4334,34 @@ rs6000_dll_import_ref (call_ref)\n   return reg2;\n }\n \n+/* Return a reference suitable for calling a function with the longcall attribute.  */\n+struct rtx_def *\n+rs6000_longcall_ref (call_ref)\n+     rtx call_ref;\n+{\n+  char *call_name;\n+  int len;\n+  char *p;\n+  rtx reg1, reg2;\n+  tree node;\n+\n+  if (GET_CODE (call_ref) != SYMBOL_REF)\n+    return call_ref;\n+\n+  /* System V adds '.' to the internal name, so skip them.  */\n+  call_name = XSTR (call_ref, 0);\n+  if (*call_name == '.')\n+    {\n+      while (*call_name == '.')\n+\tcall_name++;\n+\n+      node = get_identifier (call_name);\n+      call_ref = gen_rtx (SYMBOL_REF, VOIDmode, IDENTIFIER_POINTER (node));\n+    }\n+\n+  return force_reg (Pmode, call_ref);\n+}\n+\n \f\n /* A C statement or statements to switch to the appropriate section\n    for output of RTX in mode MODE.  You can assume that RTX is some"}, {"sha": "d2e34a6848d1c331a00382be8ea40ccee354cbb3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4cee5fdb4e3367b77d3bbe700a7e132616037c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4cee5fdb4e3367b77d3bbe700a7e132616037c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=6a4cee5fdb4e3367b77d3bbe700a7e132616037c", "patch": "@@ -1246,13 +1246,11 @@ extern int rs6000_sysv_varargs_p;\n #define FP_ARG_RETURN FP_ARG_MIN_REG\n \n /* Flags for the call/call_value rtl operations set up by function_arg */\n-enum rs6000_call_cookie\n-{\n-  CALL_V4_SET_FP_ARGS\t= -1,\t\t/* V4, FP args passed */\n-  CALL_NORMAL\t\t= 0,\t\t/* no special processing */\n-  CALL_V4_CLEAR_FP_ARGS\t= 1,\t\t/* V4, no FP args passed */\n-  CALL_NT_DLLIMPORT\t= 2\t\t/* NT, this is a DLL import call */\n-};\n+#define CALL_NORMAL\t\t0x00000000\t/* no special processing */\n+#define CALL_NT_DLLIMPORT\t0x00000001\t/* NT, this is a DLL import call */\n+#define CALL_V4_CLEAR_FP_ARGS\t0x00000002\t/* V.4, no FP args passed */\n+#define CALL_V4_SET_FP_ARGS\t0x00000004\t/* V.4, FP args were passed */\n+#define CALL_LONG\t\t0x00000008\t/* always call indirect */\n \n /* Define cutoff for using external functions to save floating point */\n #define FP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) == 62 || (FIRST_REG) == 63)\n@@ -1287,13 +1285,13 @@ enum rs6000_call_cookie\n \n typedef struct rs6000_args\n {\n-  int words;\t\t\t\t/* # words uses for passing GP registers */\n-  int fregno;\t\t\t\t/* next available FP register */\n-  int nargs_prototype;\t\t\t/* # args left in the current prototype */\n-  int orig_nargs;\t\t\t/* Original value of nargs_prototype */\n-  int varargs_offset;\t\t\t/* offset of the varargs save area */\n-  int prototype;\t\t\t/* Whether a prototype was defined */\n-  enum rs6000_call_cookie call_cookie;\t/* Do special things for this call */\n+  int words;\t\t\t/* # words uses for passing GP registers */\n+  int fregno;\t\t\t/* next available FP register */\n+  int nargs_prototype;\t\t/* # args left in the current prototype */\n+  int orig_nargs;\t\t/* Original value of nargs_prototype */\n+  int varargs_offset;\t\t/* offset of the varargs save area */\n+  int prototype;\t\t/* Whether a prototype was defined */\n+  int call_cookie;\t\t/* Do special things for this call */\n } CUMULATIVE_ARGS;\n \n /* Define intermediate macro to compute the size (in registers) of an argument\n@@ -2879,3 +2877,4 @@ extern int rs6000_valid_decl_attribute_p ();\n extern int rs6000_valid_type_attribute_p ();\n extern void rs6000_set_default_type_attributes ();\n extern struct rtx_def *rs6000_dll_import_ref ();\n+extern struct rtx_def *rs6000_longcall_ref ();"}, {"sha": "24b6cb095695834f326122fdaebed80677d324bd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 73, "deletions": 57, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4cee5fdb4e3367b77d3bbe700a7e132616037c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4cee5fdb4e3367b77d3bbe700a7e132616037c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6a4cee5fdb4e3367b77d3bbe700a7e132616037c", "patch": "@@ -6541,27 +6541,29 @@\n (define_insn \"call_indirect_aix\"\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n-   (use (match_operand 2 \"const_int_operand\" \"O\"))\n+   (use (match_operand 2 \"const_int_operand\" \"n\"))\n    (use (match_operand 3 \"offsettable_addr_operand\" \"p\"))\n    (use (match_operand 4 \"register_operand\" \"r\"))\n    (clobber (match_operand 5 \"register_operand\" \"=r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n-  \"DEFAULT_ABI == ABI_AIX\"\n-  \"{st|stw} %4,%a3\\;{l|lwz} %6,0(%0)\\;{l|lwz} %4,4(%0);\\;mt%7 %6\\;{l|lwz} %5,8(%0)\\;{brl|blrl}\\;{l|lwz} %4,%a3\"\n+  \"DEFAULT_ABI == ABI_AIX\n+   && (INTVAL (operands[2]) == CALL_NORMAL || (INTVAL (operands[2]) & CALL_LONG) != 0)\"\n+  \"{st|stw} %4,%a3\\;{l|lwz} %6,0(%0)\\;{l|lwz} %4,4(%0)\\;mt%7 %6\\;{l|lwz} %5,8(%0)\\;{brl|blrl}\\;{l|lwz} %4,%a3\"\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"call_value_indirect_aix\"\n   [(set (match_operand 0 \"register_operand\" \"fg\")\n \t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n-   (use (match_operand 3 \"const_int_operand\" \"O\"))\n+   (use (match_operand 3 \"const_int_operand\" \"n\"))\n    (use (match_operand 4 \"offsettable_addr_operand\" \"p\"))\n    (use (match_operand 5 \"register_operand\" \"r\"))\n    (clobber (match_operand 6 \"register_operand\" \"=r\"))\n    (clobber (match_scratch:SI 7 \"=&r\"))\n    (clobber (match_scratch:SI 8 \"=l\"))]\n-  \"DEFAULT_ABI == ABI_AIX\"\n+  \"DEFAULT_ABI == ABI_AIX\n+   && (INTVAL (operands[3]) == CALL_NORMAL || (INTVAL (operands[3]) & CALL_LONG) != 0)\"\n   \"{st|stw} %5,%a4\\;{l|lwz} %7,0(%1)\\;{l|lwz} %5,4(%1);\\;mt%8 %7\\;{l|lwz} %6,8(%1)\\;{brl|blrl}\\;{l|lwz} %5,%a4\"\n   [(set_attr \"length\" \"28\")])\n \n@@ -6582,25 +6584,27 @@\n (define_insn \"call_indirect_nt\"\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n-   (use (match_operand 2 \"const_int_operand\" \"O\"))\n+   (use (match_operand 2 \"const_int_operand\" \"n\"))\n    (use (match_operand 3 \"offsettable_addr_operand\" \"p\"))\n    (use (match_operand 4 \"register_operand\" \"r\"))\n    (clobber (match_scratch:SI 5 \"=&r\"))\n    (clobber (match_scratch:SI 6 \"=l\"))]\n-  \"DEFAULT_ABI == ABI_NT\"\n+  \"DEFAULT_ABI == ABI_NT\n+   && (INTVAL (operands[2]) == CALL_NORMAL || (INTVAL (operands[2]) & CALL_LONG) != 0)\"\n   \"{st|stw} %4,%a3\\;{l|lwz} %5,0(%0)\\;{l|lwz} %4,4(%0)\\;mt%6 %5\\;{brl|blrl}\\;{l|lwz} %4,%a3\"\n   [(set_attr \"length\" \"24\")])\n \n (define_insn \"call_value_indirect_nt\"\n   [(set (match_operand 0 \"register_operand\" \"fg\")\n \t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n-   (use (match_operand 3 \"const_int_operand\" \"O\"))\n+   (use (match_operand 3 \"const_int_operand\" \"n\"))\n    (use (match_operand 4 \"offsettable_addr_operand\" \"p\"))\n    (use (match_operand 5 \"register_operand\" \"r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n-  \"DEFAULT_ABI == ABI_NT\"\n+  \"DEFAULT_ABI == ABI_NT\n+   && (INTVAL (operands[3]) == CALL_NORMAL || (INTVAL (operands[3]) & CALL_LONG) != 0)\"\n   \"{st|stw} %5,%a4\\;{l|lwz} %6,0(%1)\\;{l|lwz} %5,4(%1)\\;mt%7 %6\\;{brl|blrl}\\;{l|lwz} %5,%a4\"\n   [(set_attr \"length\" \"24\")])\n \n@@ -6617,11 +6621,11 @@\n   \"DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_AIX_NODESC\"\n   \"*\n {\n-  if (INTVAL (operands[2]) > 0)\n-    return \\\"creqv 6,6,6\\;{brl|blrl}\\\";\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n \n-  else if (INTVAL (operands[2]) < 0)\n-    return \\\"crxor 6,6,6\\;{brl|blrl}\\\";\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return \\\"{brl|blrl}\\\";\n }\"\n@@ -6636,11 +6640,11 @@\n   \"DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_AIX_NODESC\"\n   \"*\n {\n-  if (INTVAL (operands[3]) > 0)\n-    return \\\"creqv 6,6,6\\;{brl|blrl}\\\";\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n \n-  else if (INTVAL (operands[3]) < 0)\n-    return \\\"crxor 6,6,6\\;{brl|blrl}\\\";\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return \\\"{brl|blrl}\\\";\n }\"\n@@ -6662,14 +6666,18 @@\n \n   /* Convert NT DLL imports into an indirect call.  */\n   if (GET_CODE (operands[0]) == SYMBOL_REF\n-      && INTVAL (operands[2]) == (int)CALL_NT_DLLIMPORT)\n+      && (INTVAL (operands[2]) & CALL_NT_DLLIMPORT) != 0)\n     {\n       operands[0] = rs6000_dll_import_ref (operands[0]);\n       operands[2] = GEN_INT ((int)CALL_NORMAL);\n     }\n \n-  if (GET_CODE (operands[0]) != SYMBOL_REF)\n+  if (GET_CODE (operands[0]) != SYMBOL_REF\n+      || (INTVAL (operands[2]) & CALL_LONG) != 0)\n     {\n+      if (INTVAL (operands[2]) & CALL_LONG)\n+\toperands[0] = rs6000_longcall_ref (operands[0]);\n+\n       if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_AIX_NODESC)\n \temit_call_insn (gen_call_indirect_sysv (force_reg (Pmode, operands[0]),\n \t\t\t\t\t\toperands[1], operands[2]));\n@@ -6717,14 +6725,18 @@\n \n   /* Convert NT DLL imports into an indirect call.  */\n   if (GET_CODE (operands[1]) == SYMBOL_REF\n-      && INTVAL (operands[3]) == (int)CALL_NT_DLLIMPORT)\n+      && (INTVAL (operands[3]) & CALL_NT_DLLIMPORT) != 0)\n     {\n       operands[1] = rs6000_dll_import_ref (operands[1]);\n       operands[3] = GEN_INT ((int)CALL_NORMAL);\n     }\n \n-  if (GET_CODE (operands[1]) != SYMBOL_REF)\n+  if (GET_CODE (operands[1]) != SYMBOL_REF\n+      || (INTVAL (operands[3]) & CALL_LONG) != 0)\n     {\n+      if (INTVAL (operands[2]) & CALL_LONG)\n+\toperands[1] = rs6000_longcall_ref (operands[1]);\n+\n       if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_AIX_NODESC)\n \temit_call_insn (gen_call_value_indirect_sysv (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3]));\n@@ -6769,14 +6781,14 @@\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 3 \"=l,l\"))]\n-  \"\"\n+  \"INTVAL (operands[2]) != CALL_LONG\"\n   \"*\n {\n-  switch ((enum rs6000_call_cookie)INTVAL (operands[2]))\n-    {\n-    case CALL_V4_SET_FP_ARGS:   output_asm_insn (\\\"crxor 6,6,6\\\", operands); break;\n-    case CALL_V4_CLEAR_FP_ARGS: output_asm_insn (\\\"creqv 6,6,6\\\", operands); break;\n-    }\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return \\\"bl %z0\\\";\n }\"\n@@ -6794,18 +6806,19 @@\n \t (match_operand 1 \"\" \"fg,fg\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 3 \"=l,l\"))]\n-  \"DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT\"\n+  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT)\n+   && INTVAL (operands[2]) != CALL_LONG\"\n   \"*\n {\n   /* Indirect calls should go through call_indirect */\n   if (GET_CODE (operands[0]) == REG)\n     abort ();\n \n-  switch ((enum rs6000_call_cookie)INTVAL (operands[2]))\n-    {\n-    case CALL_V4_SET_FP_ARGS:   output_asm_insn (\\\"crxor 6,6,6\\\", operands); break;\n-    case CALL_V4_CLEAR_FP_ARGS: output_asm_insn (\\\"creqv 6,6,6\\\", operands); break;\n-    }\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return (TARGET_WINDOWS_NT) ? \\\"bl %z0\\;.znop %z0\\\" : \\\"bl %z0\\;%.\\\";\n }\"\n@@ -6816,18 +6829,19 @@\n \t (match_operand 1 \"\" \"fg,fg\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 3 \"=l,l\"))]\n-  \"DEFAULT_ABI == ABI_AIX_NODESC || DEFAULT_ABI == ABI_V4\"\n+  \"(DEFAULT_ABI == ABI_AIX_NODESC || DEFAULT_ABI == ABI_V4)\n+   && INTVAL (operands[2]) != CALL_LONG\"\n   \"*\n {\n   /* Indirect calls should go through call_indirect */\n   if (GET_CODE (operands[0]) == REG)\n     abort ();\n \n-  switch ((enum rs6000_call_cookie)INTVAL (operands[2]))\n-    {\n-    case CALL_V4_SET_FP_ARGS:   output_asm_insn (\\\"crxor 6,6,6\\\", operands); break;\n-    case CALL_V4_CLEAR_FP_ARGS: output_asm_insn (\\\"creqv 6,6,6\\\", operands); break;\n-    }\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return \\\"bl %z0\\\";\n }\"\n@@ -6839,14 +6853,14 @@\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 4 \"=l,l\"))]\n-  \"\"\n+  \"INTVAL (operands[3]) != CALL_LONG\"\n   \"*\n {\n-  switch ((enum rs6000_call_cookie)INTVAL (operands[3]))\n-    {\n-    case CALL_V4_SET_FP_ARGS:   output_asm_insn (\\\"crxor 6,6,6\\\", operands); break;\n-    case CALL_V4_CLEAR_FP_ARGS: output_asm_insn (\\\"creqv 6,6,6\\\", operands); break;\n-    }\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return \\\"bl %z1\\\";\n }\"\n@@ -6858,18 +6872,19 @@\n \t      (match_operand 2 \"\" \"fg,fg\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 4 \"=l,l\"))]\n-  \"DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT\"\n+  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT)\n+   && INTVAL (operands[3]) != CALL_LONG\"\n   \"*\n {\n   /* This should be handled by call_value_indirect */\n   if (GET_CODE (operands[1]) == REG)\n     abort ();\n \n-  switch ((enum rs6000_call_cookie)INTVAL (operands[3]))\n-    {\n-    case CALL_V4_SET_FP_ARGS:   output_asm_insn (\\\"crxor 6,6,6\\\", operands); break;\n-    case CALL_V4_CLEAR_FP_ARGS: output_asm_insn (\\\"creqv 6,6,6\\\", operands); break;\n-    }\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return (TARGET_WINDOWS_NT) ? \\\"bl %z1\\;.znop %z1\\\" : \\\"bl %z1\\;%.\\\";\n }\"\n@@ -6881,18 +6896,19 @@\n \t      (match_operand 2 \"\" \"fg,fg\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 4 \"=l,l\"))]\n-  \"DEFAULT_ABI == ABI_AIX_NODESC || DEFAULT_ABI == ABI_V4\"\n+  \"(DEFAULT_ABI == ABI_AIX_NODESC || DEFAULT_ABI == ABI_V4)\n+   && INTVAL (operands[3]) != CALL_LONG\"\n   \"*\n {\n   /* This should be handled by call_value_indirect */\n   if (GET_CODE (operands[1]) == REG)\n     abort ();\n \n-  switch ((enum rs6000_call_cookie)INTVAL (operands[3]))\n-    {\n-    case CALL_V4_SET_FP_ARGS:   output_asm_insn (\\\"crxor 6,6,6\\\", operands); break;\n-    case CALL_V4_CLEAR_FP_ARGS: output_asm_insn (\\\"creqv 6,6,6\\\", operands); break;\n-    }\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   return \\\"bl %z1\\\";\n }\""}]}