{"sha": "5ca2400270e985f9b33d93007f4d831299b9bda7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhMjQwMDI3MGU5ODVmOWIzM2Q5MzAwN2Y0ZDgzMTI5OWI5YmRhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T15:33:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T15:33:29Z"}, "message": "match.pd: Improve (A / (1 << B)) -> (A >> B) optimization [PR96930]\n\nThe following patch improves the A / (1 << B) -> A >> B simplification,\nas seen in the testcase, if there is unnecessary widening for the division,\nwe just optimize it into a shift on the widened type, but if the lshift\nis widened too, there is no reason to do that, we can just shift it in the\noriginal type and convert after.  The tree_nonzero_bits & wi::mask check\nalready ensures it is fine even for signed values.\n\nI've split the vr-values optimization into a separate patch as it causes\na small regression on two testcases, but this patch fixes what has been\nreported in the PR alone.\n\n2021-01-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96930\n\t* match.pd ((A / (1 << B)) -> (A >> B)): If A is extended\n\tfrom narrower value which has the same type as 1 << B, perform\n\tthe right shift on the narrower value followed by extension.\n\n\t* g++.dg/tree-ssa/pr96930.C: New test.", "tree": {"sha": "67bc4f33c544740c803dbb06db63ad2b7e6480ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67bc4f33c544740c803dbb06db63ad2b7e6480ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ca2400270e985f9b33d93007f4d831299b9bda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca2400270e985f9b33d93007f4d831299b9bda7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca2400270e985f9b33d93007f4d831299b9bda7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca2400270e985f9b33d93007f4d831299b9bda7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7553ad60bebc419d510564b8b9f9e5e03725ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7553ad60bebc419d510564b8b9f9e5e03725ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7553ad60bebc419d510564b8b9f9e5e03725ff5"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "c286a540c4ea9b0099e164009bf1c0a353a1f6ec", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca2400270e985f9b33d93007f4d831299b9bda7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca2400270e985f9b33d93007f4d831299b9bda7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5ca2400270e985f9b33d93007f4d831299b9bda7", "patch": "@@ -321,7 +321,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (unsigned long long) (1 << 31) is -2147483648ULL, not 2147483648ULL,\n    so it is valid only if A >> 31 is zero.  */\n (simplify\n- (trunc_div @0 (convert? (lshift integer_onep@1 @2)))\n+ (trunc_div (convert?@0 @3) (convert2? (lshift integer_onep@1 @2)))\n  (if ((TYPE_UNSIGNED (type) || tree_expr_nonnegative_p (@0))\n       && (!VECTOR_TYPE_P (type)\n \t  || target_supports_op_p (type, RSHIFT_EXPR, optab_vector)\n@@ -336,7 +336,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t\t  & wi::mask (element_precision (TREE_TYPE (@1)) - 1,\n \t\t\t\t      true,\n \t\t\t\t      element_precision (type))) == 0)))))\n-  (rshift @0 @2)))\n+   (if (!VECTOR_TYPE_P (type)\n+\t&& useless_type_conversion_p (TREE_TYPE (@3), TREE_TYPE (@1))\n+\t&& element_precision (TREE_TYPE (@3)) < element_precision (type))\n+    (convert (rshift @3 @2))\n+    (rshift @0 @2))))\n \n /* Preserve explicit divisions by 0: the C++ front-end wants to detect\n    undefined behavior in constexpr evaluation, and assuming that the division"}, {"sha": "3d4d09807f26903a427748d26f2660e3f8e1b7bf", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr96930.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca2400270e985f9b33d93007f4d831299b9bda7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr96930.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca2400270e985f9b33d93007f4d831299b9bda7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr96930.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr96930.C?ref=5ca2400270e985f9b33d93007f4d831299b9bda7", "patch": "@@ -0,0 +1,10 @@\n+// PR tree-optimization/96930\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump \" = a_\\[0-9]\\\\\\(D\\\\\\) >> b_\\[0-9]\\\\\\(D\\\\\\);\" \"optimized\" } }\n+\n+unsigned\n+foo (unsigned a, unsigned b)\n+{\n+  return a / (unsigned long long) (1U << b);\n+}"}]}