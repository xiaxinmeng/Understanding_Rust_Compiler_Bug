{"sha": "6b79c03c558a3f8b7862b1433e6481fb5f91c877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI3OWMwM2M1NThhM2Y4Yjc4NjJiMTQzM2U2NDgxZmI1ZjkxYzg3Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-20T18:20:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-20T18:20:46Z"}, "message": "i386.c (ix86_expand_push): New.\n\n        * config/i386/i386.c (ix86_expand_push): New.\n        * config/i386/mmx.md (push<MMXMODE>1): New.\n        * config/i386/sse.md (push<SSEMODE>1): New.\n        * config/i386/i386-protos.h: Update.\n\nFrom-SVN: r93970", "tree": {"sha": "68bb7e676a2dfb7449869c055a2d5eb342275f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68bb7e676a2dfb7449869c055a2d5eb342275f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b79c03c558a3f8b7862b1433e6481fb5f91c877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b79c03c558a3f8b7862b1433e6481fb5f91c877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b79c03c558a3f8b7862b1433e6481fb5f91c877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b79c03c558a3f8b7862b1433e6481fb5f91c877/comments", "author": null, "committer": null, "parents": [{"sha": "35f46d96df776dce96043dbbe9241a55516bfaab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f46d96df776dce96043dbbe9241a55516bfaab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f46d96df776dce96043dbbe9241a55516bfaab"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "7f2af19f9ad1cb1a95c3cc700cc45ad4af27f990", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b79c03c558a3f8b7862b1433e6481fb5f91c877", "patch": "@@ -1,3 +1,10 @@\n+2005-01-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_push): New.\n+\t* config/i386/mmx.md (push<MMXMODE>1): New.\n+\t* config/i386/sse.md (push<SSEMODE>1): New.\n+\t* config/i386/i386-protos.h: Update.\n+\n 2005-01-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* params.def, params.h, predict.c, tree-ssa-loop-im.c: Update"}, {"sha": "8be5408dd0e1da31e52c0dde08b23efed78affeb", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6b79c03c558a3f8b7862b1433e6481fb5f91c877", "patch": "@@ -126,6 +126,7 @@ extern void ix86_expand_clear (rtx);\n extern void ix86_expand_move (enum machine_mode, rtx[]);\n extern void ix86_expand_vector_move (enum machine_mode, rtx[]);\n extern void ix86_expand_vector_move_misalign (enum machine_mode, rtx[]);\n+extern void ix86_expand_push (enum machine_mode, rtx);\n extern rtx ix86_fixup_binary_operands (enum rtx_code,\n \t\t\t\t       enum machine_mode, rtx[]);\n extern void ix86_fixup_binary_operands_no_copy (enum rtx_code,"}, {"sha": "2c1e9fd4c3d726b796177da221e83310aff0412d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6b79c03c558a3f8b7862b1433e6481fb5f91c877", "patch": "@@ -7754,6 +7754,24 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n     gcc_unreachable ();\n }\n \n+/* Expand a push in MODE.  This is some mode for which we do not support\n+   proper push instructions, at least from the registers that we expect\n+   the value to live in.  */\n+\n+void\n+ix86_expand_push (enum machine_mode mode, rtx x)\n+{\n+  rtx tmp;\n+\n+  tmp = expand_simple_binop (Pmode, PLUS, stack_pointer_rtx,\n+\t\t\t     GEN_INT (-GET_MODE_SIZE (mode)),\n+\t\t\t     stack_pointer_rtx, 1, OPTAB_DIRECT);\n+  if (tmp != stack_pointer_rtx)\n+    emit_move_insn (stack_pointer_rtx, tmp);\n+\n+  tmp = gen_rtx_MEM (mode, stack_pointer_rtx);\n+  emit_move_insn (tmp, x);\n+}\n \n /* Fix up OPERANDS to satisfy ix86_binary_operator_ok.  Return the\n    destination to use for the operation.  If different from the true"}, {"sha": "d46fb36fd29afbd371f4e1bfe2e285a6813b1875", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=6b79c03c558a3f8b7862b1433e6481fb5f91c877", "patch": "@@ -175,6 +175,14 @@\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n+(define_expand \"push<mode>1\"\n+  [(match_operand:MMXMODE 0 \"register_operand\" \"\")]\n+  \"TARGET_SSE\"\n+{\n+  ix86_expand_push (<MODE>mode, operands[0]);\n+  DONE;\n+})\n+\n (define_expand \"movmisalign<mode>\"\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:MMXMODE 1 \"nonimmediate_operand\" \"\"))]"}, {"sha": "d15664b43942aea1d7265d0e85b800a0a1fc1bed", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6b79c03c558a3f8b7862b1433e6481fb5f91c877", "patch": "@@ -194,6 +194,14 @@\n   operands[2] = CONST0_RTX (DFmode);\n })\n \n+(define_expand \"push<mode>1\"\n+  [(match_operand:SSEMODE 0 \"register_operand\" \"\")]\n+  \"TARGET_SSE\"\n+{\n+  ix86_expand_push (<MODE>mode, operands[0]);\n+  DONE;\n+})\n+\n (define_expand \"movmisalign<mode>\"\n   [(set (match_operand:SSEMODE 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:SSEMODE 1 \"nonimmediate_operand\" \"\"))]"}, {"sha": "fe8d7f918f20609f828543d8fd67e8de97db7b08", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-25.x", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-25.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b79c03c558a3f8b7862b1433e6481fb5f91c877/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-25.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-25.x?ref=6b79c03c558a3f8b7862b1433e6481fb5f91c877", "patch": "@@ -0,0 +1,12 @@\n+# With -Os we default to -mpreferred-stack-boundary=2, which is not\n+# enough for proper operation with V4SImode when the architecture\n+# default enables SSE.  Arguably setting -mpreferred-stack-boundary=2\n+# under this condition is incorrect.  Finding the correct set of \n+# options such that we don't exchange a FAIL for an XPASS is hard;\n+# simply force the stack boundary we need and forget about it for now.\n+\n+if { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n+\tset additional_flags \"-mpreferred-stack-boundary=4\"\n+}\n+\n+return 0"}]}