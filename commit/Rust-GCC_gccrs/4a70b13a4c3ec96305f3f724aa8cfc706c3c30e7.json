{"sha": "4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3MGIxM2E0YzNlYzk2MzA1ZjNmNzI0YWE4Y2ZjNzA2YzNjMzBlNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-09T03:01:56Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-09T03:01:56Z"}, "message": "gen-num-limits.cc (signal_adapter): New template function.\n\n* src/gen-num-limits.cc (signal_adapter): New template function.\n(signal_handler): Use it, instead of signal.\n(traps<T>): Likewise.  Install SIGTRAP handler too.  Don't\nrequire both tests to trap to set trap_flag.\n\nFrom-SVN: r38814", "tree": {"sha": "c1cd61ab3d3805bef1cde53636ed7f79d0fca6ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1cd61ab3d3805bef1cde53636ed7f79d0fca6ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7/comments", "author": null, "committer": null, "parents": [{"sha": "9c8fad3381fa5637089c3892376ac0219c0e886d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8fad3381fa5637089c3892376ac0219c0e886d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8fad3381fa5637089c3892376ac0219c0e886d"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "6610d3d40f5893c4780920c2a1b3270e1127b255", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "patch": "@@ -1,3 +1,10 @@\n+2001-01-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* src/gen-num-limits.cc (signal_adapter): New template function.\n+\t(signal_handler): Use it, instead of signal.\n+\t(traps<T>): Likewise.  Install SIGTRAP handler too.  Don't\n+\trequire both tests to trap to set trap_flag.\n+\n 2001-01-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/fpos.h (fpos:::fpos(streamoff __pos)): Explicitly"}, {"sha": "8106c9032757f2c7bd6f0c2980ea4a256f4f9411", "filename": "libstdc++-v3/src/gen-num-limits.cc", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc?ref=4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -92,11 +92,23 @@ const int integer_base_rep = 2;\n \n jmp_buf env;\n \n+/* The prototype of signal() may vary.  Accomodate variations such as\n+   void(*)(int) and void(*)(...).  */\n+template <typename signal_handler_type, typename signal_number_type>\n+inline void (*signal_adapter (signal_handler_type\n+\t\t\t      (*signal_func)(signal_number_type,\n+\t\t\t\t\t     signal_handler_type),\n+\t\t       signal_number_type arg,\n+\t\t       void (*handler)(int)))(int)\n+{\n+  return (void (*)(int))(*signal_func)(arg, (signal_handler_type)handler);\n+}\n+\n void signal_handler(int sig) \n { \n #ifdef __CYGWIN__\n   static sigset_t x;\n-  signal (sig, signal_handler);\n+  signal_adapter (signal, sig, signal_handler);\n   sigemptyset (&x);\n   sigprocmask(SIG_SETMASK, &x, NULL);\n #endif /* __CYGWIN__ */\n@@ -137,18 +149,21 @@ template<typename T> struct underflow {};\n // traps\n template<typename T> void traps()\n {\n-    signal(SIGFPE, signal_handler);\n+    signal_adapter (signal, SIGFPE, signal_handler);\n+    signal_adapter (signal, SIGTRAP, signal_handler);\n     bool trap_flag = trapping(division_by_zero<T>());\n-    signal(SIGFPE, signal_handler);\n-    trap_flag = trap_flag && trapping(overflow<T>());\n+    signal_adapter (signal, SIGFPE, signal_handler);\n+    signal_adapter (signal, SIGTRAP, signal_handler);\n+    trap_flag = trap_flag || trapping(overflow<T>());\n     const char* p = bool_alpha[trap_flag];\n     printf(\"%s%s = %s;\\n\", tab2, \"static const bool traps\", p);    \n }\n \n #define SPECIALIZE_TRAPPING(T)                                          \\\n template<> void traps< T >()                                            \\\n {                                                                       \\\n-    signal(SIGFPE, signal_handler);                                     \\\n+    signal_adapter (signal, SIGFPE, signal_handler);                    \\\n+    signal_adapter (signal, SIGTRAP, signal_handler);                    \\\n     const char* p = bool_alpha[trapping(division_by_zero<T>())];        \\\n     printf(\"%s%s = %s;\\n\", tab2, \"static const bool traps\", p);         \\\n }"}]}