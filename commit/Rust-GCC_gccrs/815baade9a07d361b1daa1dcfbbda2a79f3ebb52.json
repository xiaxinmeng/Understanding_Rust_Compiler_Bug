{"sha": "815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1YmFhZGU5YTA3ZDM2MWIxZGFhMWRjZmJiZGEyYTc5ZjNlYmI1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-29T15:27:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-29T15:27:01Z"}, "message": "c++: Diagnose constexpr delete [] new int; and delete new int[N]; [PR95808]\n\nThis patch diagnoses delete [] new int; and delete new int[1]; in constexpr\ncontexts by remembering\nIDENTIFIER_OVL_OP_FLAGS (DECL_NAME (fun)) & OVL_OP_FLAG_VEC\nfrom the operator new and checking it at operator delete time.\n\n2020-10-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/95808\n\t* cp-tree.h (enum cp_tree_index): Add CPTI_HEAP_VEC_UNINIT_IDENTIFIER\n\tand CPTI_HEAP_VEC_IDENTIFIER.\n\t(heap_vec_uninit_identifier, heap_vec_identifier): Define.\n\t* decl.c (initialize_predefined_identifiers): Initialize those\n\tidentifiers.\n\t* constexpr.c (cxx_eval_call_expression): Reject array allocations\n\tdeallocated with non-array deallocation or non-array allocations\n\tdeallocated with array deallocation.\n\t(non_const_var_error): Handle heap_vec_uninit_identifier and\n\theap_vec_identifier too.\n\t(cxx_eval_constant_expression): Handle also heap_vec_uninit_identifier\n\tand in that case during initialization replace it with\n\theap_vec_identifier.\n\t(find_heap_var_refs): Handle heap_vec_uninit_identifier and\n\theap_vec_identifier too.\n\n\t* g++.dg/cpp2a/constexpr-new15.C: New test.", "tree": {"sha": "d009f7c200116f53e11dd3b94f040f55efe1b358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d009f7c200116f53e11dd3b94f040f55efe1b358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40749db75caff2fed7b7053e0d1868feaa21bcb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40749db75caff2fed7b7053e0d1868feaa21bcb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40749db75caff2fed7b7053e0d1868feaa21bcb4"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "37c836a8a7b08ea017a5693244a9378b2cd2ff17", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "patch": "@@ -2288,7 +2288,11 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t    {\n \t      tree type = build_array_type_nelts (char_type_node,\n \t\t\t\t\t\t  tree_to_uhwi (arg0));\n-\t      tree var = build_decl (loc, VAR_DECL, heap_uninit_identifier,\n+\t      tree var = build_decl (loc, VAR_DECL,\n+\t\t\t\t     (IDENTIFIER_OVL_OP_FLAGS (DECL_NAME (fun))\n+\t\t\t\t      & OVL_OP_FLAG_VEC)\n+\t\t\t\t     ? heap_vec_uninit_identifier\n+\t\t\t\t     : heap_uninit_identifier,\n \t\t\t\t     type);\n \t      DECL_ARTIFICIAL (var) = 1;\n \t      TREE_STATIC (var) = 1;\n@@ -2306,6 +2310,42 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t  if (DECL_NAME (var) == heap_uninit_identifier\n \t\t      || DECL_NAME (var) == heap_identifier)\n \t\t    {\n+\t\t      if (IDENTIFIER_OVL_OP_FLAGS (DECL_NAME (fun))\n+\t\t\t  & OVL_OP_FLAG_VEC)\n+\t\t\t{\n+\t\t\t  if (!ctx->quiet)\n+\t\t\t    {\n+\t\t\t      error_at (loc, \"array deallocation of object \"\n+\t\t\t\t\t     \"allocated with non-array \"\n+\t\t\t\t\t     \"allocation\");\n+\t\t\t      inform (DECL_SOURCE_LOCATION (var),\n+\t\t\t\t      \"allocation performed here\");\n+\t\t\t    }\n+\t\t\t  *non_constant_p = true;\n+\t\t\t  return t;\n+\t\t\t}\n+\t\t      DECL_NAME (var) = heap_deleted_identifier;\n+\t\t      ctx->global->values.remove (var);\n+\t\t      ctx->global->heap_dealloc_count++;\n+\t\t      return void_node;\n+\t\t    }\n+\t\t  else if (DECL_NAME (var) == heap_vec_uninit_identifier\n+\t\t\t   || DECL_NAME (var) == heap_vec_identifier)\n+\t\t    {\n+\t\t      if ((IDENTIFIER_OVL_OP_FLAGS (DECL_NAME (fun))\n+\t\t\t   & OVL_OP_FLAG_VEC) == 0)\n+\t\t\t{\n+\t\t\t  if (!ctx->quiet)\n+\t\t\t    {\n+\t\t\t      error_at (loc, \"non-array deallocation of \"\n+\t\t\t\t\t     \"object allocated with array \"\n+\t\t\t\t\t     \"allocation\");\n+\t\t\t      inform (DECL_SOURCE_LOCATION (var),\n+\t\t\t\t      \"allocation performed here\");\n+\t\t\t    }\n+\t\t\t  *non_constant_p = true;\n+\t\t\t  return t;\n+\t\t\t}\n \t\t      DECL_NAME (var) = heap_deleted_identifier;\n \t\t      ctx->global->values.remove (var);\n \t\t      ctx->global->heap_dealloc_count++;\n@@ -4605,7 +4645,9 @@ non_const_var_error (location_t loc, tree r)\n   auto_diagnostic_group d;\n   tree type = TREE_TYPE (r);\n   if (DECL_NAME (r) == heap_uninit_identifier\n-      || DECL_NAME (r) == heap_identifier)\n+      || DECL_NAME (r) == heap_identifier\n+      || DECL_NAME (r) == heap_vec_uninit_identifier\n+      || DECL_NAME (r) == heap_vec_identifier)\n     {\n       error_at (loc, \"the content of uninitialized storage is not usable \"\n \t\t\"in a constant expression\");\n@@ -6365,8 +6407,10 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t    && TREE_TYPE (op) == ptr_type_node\n \t    && TREE_CODE (TREE_OPERAND (op, 0)) == ADDR_EXPR\n \t    && VAR_P (TREE_OPERAND (TREE_OPERAND (op, 0), 0))\n-\t    && DECL_NAME (TREE_OPERAND (TREE_OPERAND (op, 0),\n-\t\t\t\t\t0)) == heap_uninit_identifier)\n+\t    && (DECL_NAME (TREE_OPERAND (TREE_OPERAND (op, 0),\n+\t\t\t\t\t 0)) == heap_uninit_identifier\n+\t\t|| DECL_NAME (TREE_OPERAND (TREE_OPERAND (op, 0),\n+\t\t\t\t\t    0)) == heap_vec_uninit_identifier))\n \t  {\n \t    tree var = TREE_OPERAND (TREE_OPERAND (op, 0), 0);\n \t    tree var_size = TYPE_SIZE_UNIT (TREE_TYPE (var));\n@@ -6380,7 +6424,9 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\telt_type = TREE_TYPE (TREE_TYPE (fld2));\n \t\tcookie_size = TYPE_SIZE_UNIT (TREE_TYPE (fld1));\n \t      }\n-\t    DECL_NAME (var) = heap_identifier;\n+\t    DECL_NAME (var)\n+\t      = (DECL_NAME (var) == heap_uninit_identifier\n+\t\t ? heap_identifier : heap_vec_identifier);\n \t    TREE_TYPE (var)\n \t      = build_new_constexpr_heap_type (elt_type, cookie_size,\n \t\t\t\t\t       var_size);\n@@ -6651,6 +6697,8 @@ find_heap_var_refs (tree *tp, int *walk_subtrees, void */*data*/)\n   if (VAR_P (*tp)\n       && (DECL_NAME (*tp) == heap_uninit_identifier\n \t  || DECL_NAME (*tp) == heap_identifier\n+\t  || DECL_NAME (*tp) == heap_vec_uninit_identifier\n+\t  || DECL_NAME (*tp) == heap_vec_identifier\n \t  || DECL_NAME (*tp) == heap_deleted_identifier))\n     return *tp;\n "}, {"sha": "20774f826200048ff0df323740771a2ed6396d35", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "patch": "@@ -178,6 +178,8 @@ enum cp_tree_index\n     CPTI_HEAP_UNINIT_IDENTIFIER,\n     CPTI_HEAP_IDENTIFIER,\n     CPTI_HEAP_DELETED_IDENTIFIER,\n+    CPTI_HEAP_VEC_UNINIT_IDENTIFIER,\n+    CPTI_HEAP_VEC_IDENTIFIER,\n \n     CPTI_LANG_NAME_C,\n     CPTI_LANG_NAME_CPLUSPLUS,\n@@ -322,6 +324,8 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define heap_uninit_identifier\t\tcp_global_trees[CPTI_HEAP_UNINIT_IDENTIFIER]\n #define heap_identifier\t\t\tcp_global_trees[CPTI_HEAP_IDENTIFIER]\n #define heap_deleted_identifier\t\tcp_global_trees[CPTI_HEAP_DELETED_IDENTIFIER]\n+#define heap_vec_uninit_identifier\tcp_global_trees[CPTI_HEAP_VEC_UNINIT_IDENTIFIER]\n+#define heap_vec_identifier\t\tcp_global_trees[CPTI_HEAP_VEC_IDENTIFIER]\n #define lang_name_c\t\t\tcp_global_trees[CPTI_LANG_NAME_C]\n #define lang_name_cplusplus\t\tcp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]\n "}, {"sha": "39f56b81275af30f30d6023b6b37742a2fcbecac", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "patch": "@@ -4245,6 +4245,8 @@ initialize_predefined_identifiers (void)\n     {\"heap uninit\", &heap_uninit_identifier, cik_normal},\n     {\"heap \", &heap_identifier, cik_normal},\n     {\"heap deleted\", &heap_deleted_identifier, cik_normal},\n+    {\"heap [] uninit\", &heap_vec_uninit_identifier, cik_normal},\n+    {\"heap []\", &heap_vec_identifier, cik_normal},\n     {NULL, NULL, cik_normal}\n   };\n "}, {"sha": "e97e7aa6a6aa931d4c0c4e19f12b59631cab312a", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new15.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815baade9a07d361b1daa1dcfbbda2a79f3ebb52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new15.C?ref=815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/95808\n+// { dg-do compile { target c++20 } }\n+\n+constexpr\n+bool foo ()\n+{\n+  int *p = new int;\t// { dg-message \"allocation performed here\" }\n+  delete[] p;\t\t// { dg-error \"array deallocation of object allocated with non-array allocation\" }\n+  return false;\n+}\n+\n+constexpr\n+bool bar ()\n+{\n+  int *p = new int[1];\t// { dg-message \"allocation performed here\" }\n+  delete p;\t\t// { dg-error \"non-array deallocation of object allocated with array allocation\" }\n+  return false;\n+}\n+\n+constexpr auto x = foo ();\n+constexpr auto y = bar ();"}]}