{"sha": "d22eecf8754cc22c7a19bfab9834f6d918c7838d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyZWVjZjg3NTRjYzIyYzdhMTliZmFiOTgzNGY2ZDkxOGM3ODM4ZA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-09-18T15:07:03Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-10-07T10:22:43Z"}, "message": "Output filepath strings in .debug_line_str for DWARF5\n\nDWARF5 has a new string table specially for file paths. .debug_line\nfile and dir tables reference strings in .debug_line_str.  If a\n.debug_line_str section is emitted then also place CU DIE file\nnames and comp dirs there.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.c (add_filepath_AT_string): New function.\n\t(asm_outputs_debug_line_str): Likewise.\n\t(add_filename_attribute): Likewise.\n\t(add_comp_dir_attribute): Call add_filepath_AT_string.\n\t(gen_compile_unit_die): Call add_filename_attribute for name.\n\t(init_sections_and_labels): Init debug_line_str_section when\n\tasm_outputs_debug_line_str return true.\n\t(dwarf2out_early_finish): Remove DW_AT_name and DW_AT_comp_dir\n\thack and call add_filename_attribute for the remap_debug_filename.", "tree": {"sha": "550d74f20bf21343b41ea79e745f62a9e60c6c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/550d74f20bf21343b41ea79e745f62a9e60c6c41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d22eecf8754cc22c7a19bfab9834f6d918c7838d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22eecf8754cc22c7a19bfab9834f6d918c7838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22eecf8754cc22c7a19bfab9834f6d918c7838d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22eecf8754cc22c7a19bfab9834f6d918c7838d/comments", "author": null, "committer": null, "parents": [{"sha": "6923255e35a3d54f2083ad0f67edebb3f1b86506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6923255e35a3d54f2083ad0f67edebb3f1b86506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6923255e35a3d54f2083ad0f67edebb3f1b86506"}], "stats": {"total": 100, "additions": 68, "deletions": 32}, "files": [{"sha": "30367443ad627f77816173f008cc3e8cdf0bb47e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 68, "deletions": 32, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22eecf8754cc22c7a19bfab9834f6d918c7838d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22eecf8754cc22c7a19bfab9834f6d918c7838d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d22eecf8754cc22c7a19bfab9834f6d918c7838d", "patch": "@@ -3347,6 +3347,8 @@ output_asm_line_debug_info (void)\n \t      || !debug_variable_location_views));\n }\n \n+static bool asm_outputs_debug_line_str (void);\n+\n /* Minimum line offset in a special line info. opcode.\n    This value was chosen to give a reasonable range of values.  */\n #define DWARF_LINE_BASE  -10\n@@ -4731,6 +4733,35 @@ reset_indirect_string (indirect_string_node **h, void *)\n   return 1;\n }\n \n+/* Add a string representing a file or filepath attribute value to a DIE.  */\n+\n+static inline void\n+add_filepath_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind,\n+\t\t\tconst char *str)\n+{\n+  if (! asm_outputs_debug_line_str ())\n+    add_AT_string (die, attr_kind, str);\n+  else\n+    {\n+      dw_attr_node attr;\n+      struct indirect_string_node *node;\n+\n+      if (!debug_line_str_hash)\n+\tdebug_line_str_hash\n+\t  = hash_table<indirect_string_hasher>::create_ggc (10);\n+\n+      node = find_AT_string_in_table (str, debug_line_str_hash);\n+      set_indirect_string (node);\n+      node->form = DW_FORM_line_strp;\n+\n+      attr.dw_attr = attr_kind;\n+      attr.dw_attr_val.val_class = dw_val_class_str;\n+      attr.dw_attr_val.val_entry = NULL;\n+      attr.dw_attr_val.v.val_str = node;\n+      add_dwarf_attr (die, &attr);\n+    }\n+}\n+\n /* Find out whether a string should be output inline in DIE\n    or out-of-line in .debug_str section.  */\n \n@@ -11839,6 +11870,29 @@ output_ranges (void)\n       for -gsplit-dwarf we should use DW_FORM_strx instead.  */\t\\\n    && !dwarf_split_debug_info)\n \n+\n+/* Returns TRUE if we are outputting DWARF5 and the assembler supports\n+   DWARF5 .debug_line tables using .debug_line_str or we generate\n+   it ourselves, except for split-dwarf which doesn't have a\n+   .debug_line_str.  */\n+static bool\n+asm_outputs_debug_line_str (void)\n+{\n+  if (dwarf_version >= 5\n+      && ! output_asm_line_debug_info ()\n+      && DWARF5_USE_DEBUG_LINE_STR)\n+    return true;\n+  else\n+    {\n+#if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_4_FLAG)\n+      return !dwarf_split_debug_info && dwarf_version >= 5;\n+#else\n+      return false;\n+#endif\n+    }\n+}\n+\n+\n /* Assign .debug_rnglists indexes.  */\n \n static void\n@@ -20514,6 +20568,15 @@ add_name_attribute (dw_die_ref die, const char *name_string)\n     }\n }\n \n+/* Generate a DW_AT_name attribute given some string value representing a\n+   file or filepath to be included as value of the attribute.  */\n+static void\n+add_filename_attribute (dw_die_ref die, const char *name_string)\n+{\n+  if (name_string != NULL && *name_string != 0)\n+    add_filepath_AT_string (die, DW_AT_name, name_string);\n+}\n+\n /* Generate a DW_AT_description attribute given some string value to be included\n    as the value of the attribute.  */\n \n@@ -20640,7 +20703,7 @@ add_comp_dir_attribute (dw_die_ref die)\n {\n   const char * wd = comp_dir_string ();\n   if (wd != NULL)\n-    add_AT_string (die, DW_AT_comp_dir, wd);\n+    add_filepath_AT_string (die, DW_AT_comp_dir, wd);\n }\n \n /* Given a tree node VALUE describing a scalar attribute ATTR (i.e. a bound, a\n@@ -24482,7 +24545,7 @@ gen_compile_unit_die (const char *filename)\n \n   if (filename)\n     {\n-      add_name_attribute (die, filename);\n+      add_filename_attribute (die, filename);\n       /* Don't add cwd for <built-in>.  */\n       if (filename[0] != '<')\n \tadd_comp_dir_attribute (die);\n@@ -28733,7 +28796,8 @@ init_sections_and_labels (bool early_lto_debug)\n \t\t\t\t\t    SECTION_DEBUG, NULL);\n       debug_str_section = get_section (DEBUG_STR_SECTION,\n \t\t\t\t       DEBUG_STR_SECTION_FLAGS, NULL);\n-      if (!dwarf_split_debug_info && !output_asm_line_debug_info ())\n+      if ((!dwarf_split_debug_info && !output_asm_line_debug_info ())\n+\t  || asm_outputs_debug_line_str ())\n \tdebug_line_str_section = get_section (DEBUG_LINE_STR_SECTION,\n \t\t\t\t\t      DEBUG_STR_SECTION_FLAGS, NULL);\n \n@@ -32020,37 +32084,9 @@ dwarf2out_early_finish (const char *filename)\n \n   /* Add the name for the main input file now.  We delayed this from\n      dwarf2out_init to avoid complications with PCH.  */\n-  add_name_attribute (comp_unit_die (), remap_debug_filename (filename));\n+  add_filename_attribute (comp_unit_die (), remap_debug_filename (filename));\n   add_comp_dir_attribute (comp_unit_die ());\n \n-  /* When emitting DWARF5 .debug_line_str, move DW_AT_name and\n-     DW_AT_comp_dir into .debug_line_str section.  */\n-  if (!output_asm_line_debug_info ()\n-      && dwarf_version >= 5\n-      && DWARF5_USE_DEBUG_LINE_STR)\n-    {\n-      for (int i = 0; i < 2; i++)\n-\t{\n-\t  dw_attr_node *a = get_AT (comp_unit_die (),\n-\t\t\t\t    i ? DW_AT_comp_dir : DW_AT_name);\n-\t  if (a == NULL\n-\t      || AT_class (a) != dw_val_class_str\n-\t      || strlen (AT_string (a)) + 1 <= DWARF_OFFSET_SIZE)\n-\t    continue;\n-\n-\t  if (! debug_line_str_hash)\n-\t    debug_line_str_hash\n-\t      = hash_table<indirect_string_hasher>::create_ggc (10);\n-\n-\t  struct indirect_string_node *node\n-\t    = find_AT_string_in_table (AT_string (a), debug_line_str_hash);\n-\t  set_indirect_string (node);\n-\t  node->form = DW_FORM_line_strp;\n-\t  a->dw_attr_val.v.val_str->refcount--;\n-\t  a->dw_attr_val.v.val_str = node;\n-\t}\n-    }\n-\n   /* With LTO early dwarf was really finished at compile-time, so make\n      sure to adjust the phase after annotating the LTRANS CU DIE.  */\n   if (in_lto_p)"}]}