{"sha": "4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5NTAyOGM4MjNhODNjOTJjNDNkNWZiZGRlMjViZThjN2VkMmU2Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-03-13T01:49:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-13T01:49:14Z"}, "message": "error.c (cp_printers): Add 'F' escape character.\n\n\t* error.c (cp_printers): Add 'F' escape character.\n\t(dump_type_real): Remove TREE_LIST (fnargs) printing.\n\tFunctionality moved to dump_parameters.\n\t(dump_type_suffix): Use dump_parameters and dump_exception_spec.\n\t(dump_function_decl): Extend meaning of V parameter. Use\n\tdump_parameters and dump_exception_spec.\n\t(dump_parameters): New static function.\n\t(dump_exception_spec): New static function.\n\t(fndecl_as_string): Change argument semantics. Use\n\tdump_function_decl directly.\n\t* sig.c (build_signature_table_constructor): Use cp_error.\n\nFrom-SVN: r25741", "tree": {"sha": "ce74a2adbcdd150cae073c92fb4d63e23385ef61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce74a2adbcdd150cae073c92fb4d63e23385ef61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4995028c823a83c92c43d5fbdde25be8c7ed2e6b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0db982bee5681b334b0b2cc460920c542dbbc964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db982bee5681b334b0b2cc460920c542dbbc964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db982bee5681b334b0b2cc460920c542dbbc964"}], "stats": {"total": 163, "additions": 113, "deletions": 50}, "files": [{"sha": "2f84019bea051b51f33bc18b6f36a6104a94cb76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4995028c823a83c92c43d5fbdde25be8c7ed2e6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4995028c823a83c92c43d5fbdde25be8c7ed2e6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "patch": "@@ -1,3 +1,18 @@\n+1999-03-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* error.c (cp_printers): Add 'F' escape character.\n+\t(dump_type_real): Remove TREE_LIST (fnargs) printing.\n+\tFunctionality moved to dump_parameters.\n+\t(dump_type_suffix): Use dump_parameters and dump_exception_spec.\n+\t(dump_function_decl): Extend meaning of V parameter. Use\n+\tdump_parameters and dump_exception_spec.\n+\t(dump_parameters): New static function.\n+\t(dump_exception_spec): New static function.\n+\t(fndecl_as_string): Change argument semantics. Use\n+\tdump_function_decl directly.\n+\t\n+\t* sig.c (build_signature_table_constructor): Use cp_error.\n+\t\n 1999-03-13  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* semantics.c (finish_switch_cond): Handle error cases gracefully."}, {"sha": "7ca6409240758af6f2c8be8540c3cc07031aef37", "filename": "gcc/cp/error.c", "status": "modified", "additions": 96, "deletions": 47, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4995028c823a83c92c43d5fbdde25be8c7ed2e6b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4995028c823a83c92c43d5fbdde25be8c7ed2e6b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "patch": "@@ -1,6 +1,6 @@\n /* Call-backs for C++ error reporting.\n    This code is non-reentrant.\n-   Copyright (C) 1993, 94-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 94-97, 1998, 1999 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -32,6 +32,7 @@ typedef char* cp_printer ();\n #define C code_as_string\n #define D decl_as_string\n #define E expr_as_string\n+#define F fndecl_as_string\n #define L language_as_string\n #define O op_as_string\n #define P parm_as_string\n@@ -47,14 +48,15 @@ cp_printer * cp_printers[256] =\n   o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, /* 0x10 */\n   o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, /* 0x20 */\n   o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, /* 0x30 */\n-  o, A, o, C, D, E, o, o, o, o, o, o, L, o, o, O, /* 0x40 */\n+  o, A, o, C, D, E, F, o, o, o, o, o, L, o, o, O, /* 0x40 */\n   P, Q, o, o, T, o, V, o, o, o, o, o, o, o, o, o, /* 0x50 */\n   o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, /* 0x60 */\n   o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, /* 0x70 */\n };\n #undef C\n #undef D\n #undef E\n+#undef F\n #undef L\n #undef O\n #undef P\n@@ -104,6 +106,8 @@ static void dump_expr_list PROTO((tree));\n static void dump_global_iord PROTO((tree));\n static void dump_qualifiers PROTO((tree, enum pad));\n static void dump_char PROTO((int));\n+static void dump_parameters PROTO((tree, int, int));\n+static void dump_exception_spec PROTO((tree, int));\n static char *aggr_variety PROTO((tree));\n static tree ident_fndecl PROTO((tree));\n \n@@ -201,29 +205,6 @@ dump_type_real (t, v, canonical_name)\n       OB_PUTS (\"{unknown type}\");\n       break;\n \n-    case TREE_LIST:\n-      /* i.e. function taking no arguments */\n-      if (t != void_list_node)\n-\t{\n-\t  dump_type_real (TREE_VALUE (t), v, canonical_name);\n-\t  /* Can this happen other than for default arguments? */\n-\t  if (TREE_PURPOSE (t) && v)\n-\t    {\n-\t      OB_PUTS (\" = \");\n-\t      dump_expr (TREE_PURPOSE (t), 0);\n-\t    }\n-\t  if (TREE_CHAIN (t))\n-\t    {\n-\t      if (TREE_CHAIN (t) != void_list_node)\n-\t\t{\n-\t\t  OB_PUTC2 (',', ' ');\n-\t\t  dump_type_real (TREE_CHAIN (t), v, canonical_name);\n-\t\t}\n-\t    }\n-\t  else OB_PUTS (\" ...\");\n-\t}\n-      break;\n-\n     case IDENTIFIER_NODE:\n       OB_PUTID (t);\n       break;\n@@ -569,20 +550,20 @@ dump_type_suffix (t, v, canonical_name)\n     case METHOD_TYPE:\n       {\n \ttree arg;\n-\tOB_PUTC2 (')', '(');\n+\tOB_PUTC (')');\n \targ = TYPE_ARG_TYPES (t);\n \tif (TREE_CODE (t) == METHOD_TYPE)\n \t  arg = TREE_CHAIN (arg);\n \n-\tif (arg)\n-\t  dump_type (arg, v);\n-\telse\n-\t  OB_PUTS (\"...\");\n-\tOB_PUTC (')');\n+\t/* Function pointers don't have default args.  Not in standard C++,\n+\t   anyway; they may in g++, but we'll just pretend otherwise.  */\n+\tdump_parameters (arg, 0, canonical_name);\n+\n \tif (TREE_CODE (t) == METHOD_TYPE)\n \t  dump_qualifiers\n \t    (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (t))), before);\n \tdump_type_suffix (TREE_TYPE (t), v, canonical_name);\n+\tdump_exception_spec (TYPE_RAISES_EXCEPTIONS (t), canonical_name);\n \tbreak;\n       }\n \n@@ -957,10 +938,15 @@ dump_decl (t, v)\n     }\n }\n \n-/* Pretty printing for announce_function.  T is the declaration of the\n-   function we are interested in seeing.  If V is zero, we print the\n-   argument types.  If V is positive, we also print the return types.\n-   If V is negative, we do not even print the argument types.  */\n+/* Pretty print a function decl. There are several ways we want to print a\n+   function declaration. We use V to tell us what.\n+     V    - 01 23\n+   args   - ++ ++\n+   retval - -+ ++\n+   default- -+ -+\n+   throw  - -- ++\n+   As cp_error can only apply the '#' flag once to give 0 and 1 for V, there\n+   is %D which doesn't print the throw specs, and %F which does. */\n \n static void\n dump_function_decl (t, v)\n@@ -1027,15 +1013,8 @@ dump_function_decl (t, v)\n   if (v < 0)\n     return;\n \n-  OB_PUTC ('(');\n-\n-  if (parmtypes)\n-    dump_type (parmtypes, v);\n-  else\n-    OB_PUTS (\"...\");\n-\n-  OB_PUTC (')');\n-\n+  dump_parameters (parmtypes, v & 1, 0);\n+  \n   if (v && ! DECL_CONV_FN_P (t))\n     dump_type_suffix (TREE_TYPE (fntype), 1, 0);\n \n@@ -1049,6 +1028,68 @@ dump_function_decl (t, v)\n \tdump_qualifiers\n \t  (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fntype))), before);\n     }\n+  \n+  if (v >= 2)\n+    dump_exception_spec (TYPE_RAISES_EXCEPTIONS (fntype), 0);\n+}\n+\n+/* Print a parameter list. V indicates if we show default values or not. If\n+   these are for a member function, the member object ptr\n+   (and any other hidden args) should have already been removed. */\n+\n+static void\n+dump_parameters (parmtypes, v, canonical_name)\n+     tree parmtypes;\n+     int v;\n+     int canonical_name;\n+{\n+  int first;\n+  OB_PUTC ('(');\n+\n+  for (first = 1; parmtypes != void_list_node;\n+       parmtypes = TREE_CHAIN (parmtypes))\n+    {\n+      if (!first)\n+        OB_PUTC2 (',', ' ');\n+      first = 0;\n+      if (!parmtypes)\n+        {\n+          OB_PUTS (\"...\");\n+          break;\n+        }\n+      dump_type_real (TREE_VALUE (parmtypes), 0, canonical_name);\n+      \n+      if (TREE_PURPOSE (parmtypes) && v)\n+        {\n+          OB_PUTS (\" = \");\n+          dump_expr (TREE_PURPOSE (parmtypes), 0);\n+        }\n+    }\n+\n+  OB_PUTC (')');\n+}\n+\n+/* Print an exception specification. T is the exception specification. */\n+\n+static void\n+dump_exception_spec (t, canonical_name)\n+     tree t;\n+     int canonical_name;\n+{\n+  if (t)\n+    {\n+      OB_PUTS (\" throw (\");\n+      if (TREE_VALUE (t) != NULL_TREE)\n+        while (1)\n+          {\n+            dump_type_real (TREE_VALUE (t), 0, canonical_name);\n+            t = TREE_CHAIN (t);\n+            if (!t)\n+              break;\n+            OB_PUTC2 (',', ' ');\n+          }\n+      OB_PUTC (')');\n+    }\n }\n \n /* Handle the function name for a FUNCTION_DECL node, grokking operators\n@@ -1758,12 +1799,20 @@ dump_unary_op (opstring, t, nop)\n   if (!nop) OB_PUTC (')');\n }\n \n+/* Print a function decl with exception specification included. */\n+\n char *\n-fndecl_as_string (fndecl, print_ret_type_p)\n+fndecl_as_string (fndecl, print_default_args_p)\n      tree fndecl;\n-     int print_ret_type_p;\n+     int print_default_args_p;\n {\n-  return decl_as_string (fndecl, print_ret_type_p);\n+  OB_INIT ();\n+\n+  dump_function_decl (fndecl, 2 + print_default_args_p);\n+  \n+  OB_FINISH ();\n+\n+  return (char *)obstack_base (&scratch_obstack);\n }\n \n /* Same, but handle a _TYPE."}, {"sha": "93dde36fa9e0f9fc22a647c39a6ade0e702998d3", "filename": "gcc/cp/sig.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4995028c823a83c92c43d5fbdde25be8c7ed2e6b/gcc%2Fcp%2Fsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4995028c823a83c92c43d5fbdde25be8c7ed2e6b/gcc%2Fcp%2Fsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsig.c?ref=4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "patch": "@@ -550,9 +550,8 @@ build_signature_table_constructor (sig_ty, rhs)\n \t  if (rhs_methods == NULL_TREE\n \t      || !accessible_p (basetypes, rhs_method))\n \t    {\n-\t      error (\"class `%s' does not contain a method conforming to `%s'\",\n-\t\t     TYPE_NAME_STRING (rhstype),\n-\t\t     fndecl_as_string (sig_method, 1));\n+\t      cp_error (\"`%T' does not contain a method conforming to `%#D'\",\n+\t\t     rhstype, sig_method);\n \t      undo_casts (sig_ty);\n \t      return error_mark_node;\n \t    }"}]}