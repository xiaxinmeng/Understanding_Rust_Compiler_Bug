{"sha": "4c94382a132a4b2b9d020806549a006fa6764d1b", "node_id": "C_kwDOANBUbNoAKDRjOTQzODJhMTMyYTRiMmI5ZDAyMDgwNjU0OWEwMDZmYTY3NjRkMWI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-01T12:11:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-11T09:21:53Z"}, "message": "target/105459 - allow delayed target option node fixup\n\nThe following avoids the need to massage the target optimization\nnode at WPA time when we fixup the optimization node, copying\nFP related flags from callee to caller.  The target is already\nset up to fixup, but that only works when not switching between\nfunctions.  After fixing that the fixup is then done at LTRANS\ntime when materializing the function.\n\n2022-07-01  Richard Biener  <rguenthert@suse.de>\n\n\tPR target/105459\n\t* config/i386/i386-options.cc (ix86_set_current_function):\n\tRebuild the target optimization node whenever necessary,\n\tnot only when the optimization node didn't change.\n\n\t* gcc.dg/lto/pr105459_0.c: New testcase.", "tree": {"sha": "91e929cb849288fce757606d35778afc42232b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91e929cb849288fce757606d35778afc42232b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c94382a132a4b2b9d020806549a006fa6764d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c94382a132a4b2b9d020806549a006fa6764d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c94382a132a4b2b9d020806549a006fa6764d1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c94382a132a4b2b9d020806549a006fa6764d1b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f18ac6b7ab7744fcf8937ea4bc0c40f3efc629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f18ac6b7ab7744fcf8937ea4bc0c40f3efc629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f18ac6b7ab7744fcf8937ea4bc0c40f3efc629"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "acb2291e70f85937367526069348ed9f2de9f227", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c94382a132a4b2b9d020806549a006fa6764d1b/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c94382a132a4b2b9d020806549a006fa6764d1b/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=4c94382a132a4b2b9d020806549a006fa6764d1b", "patch": "@@ -3232,28 +3232,22 @@ ix86_set_current_function (tree fndecl)\n   if (new_tree == NULL_TREE)\n     new_tree = target_option_default_node;\n \n-  if (old_tree != new_tree)\n+  bool fp_flag_change\n+    = (flag_unsafe_math_optimizations\n+       != TREE_TARGET_OPTION (new_tree)->x_ix86_unsafe_math_optimizations\n+       || (flag_excess_precision\n+\t   != TREE_TARGET_OPTION (new_tree)->x_ix86_excess_precision));\n+  if (old_tree != new_tree || fp_flag_change)\n     {\n       cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\tTREE_TARGET_OPTION (new_tree));\n-      if (TREE_TARGET_GLOBALS (new_tree))\n-\trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-      else if (new_tree == target_option_default_node)\n-\trestore_target_globals (&default_target_globals);\n-      else\n-\tTREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n-    }\n-  else if (flag_unsafe_math_optimizations\n-\t   != TREE_TARGET_OPTION (new_tree)->x_ix86_unsafe_math_optimizations\n-\t   || (flag_excess_precision\n-\t       != TREE_TARGET_OPTION (new_tree)->x_ix86_excess_precision))\n-    {\n-      cl_target_option_restore (&global_options, &global_options_set,\n-\t\t\t\tTREE_TARGET_OPTION (new_tree));\n-      ix86_excess_precision = flag_excess_precision;\n-      ix86_unsafe_math_optimizations = flag_unsafe_math_optimizations;\n-      DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = new_tree\n-\t= build_target_option_node (&global_options, &global_options_set);\n+      if (fp_flag_change)\n+\t{\n+\t  ix86_excess_precision = flag_excess_precision;\n+\t  ix86_unsafe_math_optimizations = flag_unsafe_math_optimizations;\n+\t  DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = new_tree\n+\t    = build_target_option_node (&global_options, &global_options_set);\n+\t}\n       if (TREE_TARGET_GLOBALS (new_tree))\n \trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n       else if (new_tree == target_option_default_node)"}, {"sha": "c799e6ef23d1286ac732d0aae92382eec25e2af8", "filename": "gcc/testsuite/gcc.dg/lto/pr105459_0.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c94382a132a4b2b9d020806549a006fa6764d1b/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr105459_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c94382a132a4b2b9d020806549a006fa6764d1b/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr105459_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr105459_0.c?ref=4c94382a132a4b2b9d020806549a006fa6764d1b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-lto-do link } */\n+/* { dg-lto-options { { -flto -O1 } } } */\n+\n+double m;\n+int n;\n+\n+__attribute__ ((optimize (\"-funsafe-math-optimizations\")))\n+void\n+bar (int x)\n+{\n+  n = x;\n+  m = n;\n+}\n+\n+__attribute__ ((flatten))\n+void\n+foo (int x)\n+{\n+  bar (x);\n+}\n+\n+void\n+quux (void)\n+{\n+  ++n;\n+}\n+\n+int\n+main (void)\n+{\n+  foo (0);\n+  quux ();\n+\n+  return 0;\n+}"}]}