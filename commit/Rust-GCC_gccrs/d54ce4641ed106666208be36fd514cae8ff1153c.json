{"sha": "d54ce4641ed106666208be36fd514cae8ff1153c", "node_id": "C_kwDOANBUbNoAKGQ1NGNlNDY0MWVkMTA2NjY2MjA4YmUzNmZkNTE0Y2FlOGZmMTE1M2M", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-08T18:55:15Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-08T22:37:22Z"}, "message": "c++: Wrong error with alias template in class tmpl [PR104108]\n\nIn r10-6329 I tried to optimize the number of calls to v_d_e_p in\nconvert_nontype_argument by remembering whether the expression was\nvalue-dependent in a bool flag.  I did that wrongly assuming that its\nvalue-dependence will not be changed by build_converted_constant_expr.\nThis testcase shows that it can: b_c_c_e gets a VAR_DECL for m_parameter,\nwhich is not value-dependent, but we're converting it to \"const int &\"\nso it returns\n\n  (const int &)(const int *) &m_parameter\n\nwhich suddenly becomes value-dependent because of the added ADDR_EXPR:\nhas_value_dependent_address is now true because m_parameter's context S<T>\nis dependent.  With this bug in place, we went to the second branch here:\n\n      if (TYPE_REF_OBJ_P (TREE_TYPE (expr)) && val_dep_p)\n        /* OK, dependent reference.  We don't want to ask whether a DECL is\n           itself value-dependent, since what we want here is its address.  */;\n      else\n        {\n          expr = build_address (expr);\n\n          if (invalid_tparm_referent_p (type, expr, complain))\n            return NULL_TREE;\n        }\n\nwherein build_address created a bad tree and then i_t_r_p complained.\n\n\tPR c++/104108\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (convert_nontype_argument): Recompute\n\tvalue_dependent_expression_p after build_converted_constant_expr.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/alias-decl-74.C: New test.", "tree": {"sha": "4e3142be3229f7bcdea6f56125fc7435cf6ac293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e3142be3229f7bcdea6f56125fc7435cf6ac293"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d54ce4641ed106666208be36fd514cae8ff1153c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54ce4641ed106666208be36fd514cae8ff1153c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54ce4641ed106666208be36fd514cae8ff1153c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54ce4641ed106666208be36fd514cae8ff1153c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2858e2afcb0a6553a222e724d8426451364ee755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2858e2afcb0a6553a222e724d8426451364ee755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2858e2afcb0a6553a222e724d8426451364ee755"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "d47483dd4f207bc2d75e90dc33ef78a196b85c52", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54ce4641ed106666208be36fd514cae8ff1153c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54ce4641ed106666208be36fd514cae8ff1153c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=d54ce4641ed106666208be36fd514cae8ff1153c", "patch": "@@ -7316,7 +7316,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n   if (non_dep)\n     expr = instantiate_non_dependent_expr_internal (expr, complain);\n \n-  const bool val_dep_p = value_dependent_expression_p (expr);\n+  bool val_dep_p = value_dependent_expression_p (expr);\n   if (val_dep_p)\n     expr = canonicalize_expr_argument (expr, complain);\n   else\n@@ -7357,6 +7357,8 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t  expr = maybe_constant_value (expr, NULL_TREE,\n \t\t\t\t       /*manifestly_const_eval=*/true);\n \t  expr = convert_from_reference (expr);\n+\t  /* EXPR may have become value-dependent.  */\n+\t  val_dep_p = value_dependent_expression_p (expr);\n \t}\n       else if (TYPE_PTR_OR_PTRMEM_P (type))\n \t{"}, {"sha": "8382d8563827a4eb73155bb452362d9a28a03fdc", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-74.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54ce4641ed106666208be36fd514cae8ff1153c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54ce4641ed106666208be36fd514cae8ff1153c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-74.C?ref=d54ce4641ed106666208be36fd514cae8ff1153c", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/104108\n+// { dg-do compile { target c++11 } }\n+\n+template<template<const int&> class T>\n+struct S {\n+  static int m_parameter;\n+  template<template<const int&> class TT>\n+  using U = TT<m_parameter>;\n+};"}]}