{"sha": "59482679ecd68027cd7c74b899603969c00c7295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0ODI2NzllY2Q2ODAyN2NkN2M3NGI4OTk2MDM5NjljMDBjNzI5NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T21:15:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T21:15:12Z"}, "message": "(andsi3...\n\n(andsi3, andhi3, andqi3): If one of the source operands\nis a constant, complement that operand instead of a register or memory operand.\n\nFrom-SVN: r1450", "tree": {"sha": "34170a43bad5b50d3c0e60f7e3e0c9e59c39dd54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34170a43bad5b50d3c0e60f7e3e0c9e59c39dd54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59482679ecd68027cd7c74b899603969c00c7295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59482679ecd68027cd7c74b899603969c00c7295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59482679ecd68027cd7c74b899603969c00c7295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59482679ecd68027cd7c74b899603969c00c7295/comments", "author": null, "committer": null, "parents": [{"sha": "960a2eb1d1941a46912d8fab832f7ff07c142256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960a2eb1d1941a46912d8fab832f7ff07c142256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960a2eb1d1941a46912d8fab832f7ff07c142256"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "9144ee559aca6b52679f003c6211016481b1f719", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59482679ecd68027cd7c74b899603969c00c7295/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59482679ecd68027cd7c74b899603969c00c7295/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=59482679ecd68027cd7c74b899603969c00c7295", "patch": "@@ -925,10 +925,20 @@\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[1]) == CONST_INT)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[1]));\n+  rtx op1 = operands[1];\n+\n+  /* If there is a constant argument, complement that one.  */\n+  if (GET_CODE (operands[2]) == CONST_INT && GET_CODE (op1) != CONST_INT)\n+    {\n+      operands[1] = operands[2];\n+      operands[2] = op1;\n+      op1 = operands[1];\n+    }\n+\n+  if (GET_CODE (op1) == CONST_INT)\n+    operands[1] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (op1));\n   else\n-    operands[1] = expand_unop (SImode, one_cmpl_optab, operands[1], 0, 1);\n+    operands[1] = expand_unop (SImode, one_cmpl_optab, op1, 0, 1);\n }\")\n \n (define_expand \"andhi3\"\n@@ -938,12 +948,19 @@\n   \"\"\n   \"\n {\n-  rtx op = operands[1];\n-  if (GET_CODE (op) == CONST_INT)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t   ((1 << 16) - 1) & ~INTVAL (op));\n+  rtx op1 = operands[1];\n+\n+  if (GET_CODE (operands[2]) == CONST_INT && GET_CODE (op1) != CONST_INT)\n+    {\n+      operands[1] = operands[2];\n+      operands[2] = op1;\n+      op1 = operands[1];\n+    }\n+\n+  if (GET_CODE (op1) == CONST_INT)\n+    operands[1] = gen_rtx (CONST_INT, VOIDmode, 65535 & ~INTVAL (op1));\n   else\n-    operands[1] = expand_unop (HImode, one_cmpl_optab, op, 0, 1);\n+    operands[1] = expand_unop (HImode, one_cmpl_optab, op1, 0, 1);\n }\")\n \n (define_expand \"andqi3\"\n@@ -953,12 +970,19 @@\n   \"\"\n   \"\n {\n-  rtx op = operands[1];\n-  if (GET_CODE (op) == CONST_INT)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t   ((1 << 8) - 1) & ~INTVAL (op));\n+  rtx op1 = operands[1];\n+\n+  if (GET_CODE (operands[2]) == CONST_INT && GET_CODE (op1) != CONST_INT)\n+    {\n+     operands[1] = operands[2];\n+     operands[2] = op1;\n+     op1 = operands[1];\n+   }\n+\n+  if (GET_CODE (op1) == CONST_INT)\n+    operands[1] = gen_rtx (CONST_INT, VOIDmode, 255 & ~INTVAL (op1));\n   else\n-    operands[1] = expand_unop (QImode, one_cmpl_optab, op, 0, 1);\n+    operands[1] = expand_unop (QImode, one_cmpl_optab, op1, 0, 1);\n }\")\n \n (define_insn \"\""}]}