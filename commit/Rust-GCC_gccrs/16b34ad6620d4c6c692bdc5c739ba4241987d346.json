{"sha": "16b34ad6620d4c6c692bdc5c739ba4241987d346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiMzRhZDY2MjBkNGM2YzY5MmJkYzVjNzM5YmE0MjQxOTg3ZDM0Ng==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-10-31T06:17:55Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-10-31T06:17:55Z"}, "message": "c-common.h (objc_lookup_ivar): Add second parameter to prototype.\n\n[gcc/ChangeLog]\n2004-10-30  Ziemowit Laski  <zlaski@apple.com>\n\n        * c-common.h (objc_lookup_ivar): Add second parameter to\n        prototype.\n        * c-typeck.c (build_external_ref): After looking up symbol,\n        pass it to objc_lookup_ivar() to decide whether it or the\n        ivar should be used, rather than deciding the issue locally.\n        * stub-objc.c (objc_lookup_ivar): Add an OTHER parameter,\n        which is simply returned in the non-ObjC case.\n\n[gcc/objc/ChangeLog]\n2004-10-30  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc-act.c (objc_lookup_ivar): The new OTHER parameter\n        contains the result of the ID lookup by the C or C++\n        front-end; in class methods, use OTHER if it exists;\n        in instance methods, use OTHER only if it is locally\n        declared.\n\n[gcc/testsuite/ChangeLog]\n2004-10-30  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc.dg/local-decl-1.m: New test.\n\nFrom-SVN: r89912", "tree": {"sha": "fd41069a69da16dfa7e8da375572cb0cbfc16ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd41069a69da16dfa7e8da375572cb0cbfc16ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16b34ad6620d4c6c692bdc5c739ba4241987d346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b34ad6620d4c6c692bdc5c739ba4241987d346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b34ad6620d4c6c692bdc5c739ba4241987d346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b34ad6620d4c6c692bdc5c739ba4241987d346/comments", "author": null, "committer": null, "parents": [{"sha": "7fe63418838e0fade217715817d1349e206d5117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe63418838e0fade217715817d1349e206d5117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe63418838e0fade217715817d1349e206d5117"}], "stats": {"total": 138, "additions": 108, "deletions": 30}, "files": [{"sha": "8fd5efb79f49fb2e391d27773d7bc2a44164e2d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -1,3 +1,13 @@\n+2004-10-30  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* c-common.h (objc_lookup_ivar): Add second parameter to\n+\tprototype.\n+\t* c-typeck.c (build_external_ref): After looking up symbol,\n+\tpass it to objc_lookup_ivar() to decide whether it or the\n+\tivar should be used, rather than deciding the issue locally.\n+\t* stub-objc.c (objc_lookup_ivar): Add an OTHER parameter,\n+\twhich is simply returned in the non-ObjC case.\n+\n 2004-10-30  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* sdbout.c (sdbout_symbol): Do not output type .def statements"}, {"sha": "1406177514e28ecde57459764ceabcc255eaefa4", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -905,7 +905,7 @@ extern void objc_check_decl (tree);\n extern int objc_is_reserved_word (tree);\n extern int objc_comptypes (tree, tree, int);\n extern tree objc_message_selector (void);\n-extern tree objc_lookup_ivar (tree);\n+extern tree objc_lookup_ivar (tree, tree);\n extern void objc_clear_super_receiver (void);\n extern int objc_is_public (tree, tree);\n extern tree objc_is_id (tree);"}, {"sha": "728e768a7f63ee23218a60b055353c6d830af7e5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -1724,24 +1724,13 @@ build_external_ref (tree id, int fun)\n {\n   tree ref;\n   tree decl = lookup_name (id);\n-  tree objc_ivar = objc_lookup_ivar (id);\n+\n+  /* In Objective-C, an instance variable (ivar) may be preferred to\n+     whatever lookup_name() found.  */\n+  decl = objc_lookup_ivar (decl, id);\n \n   if (decl && decl != error_mark_node)\n-    {\n-      /* Properly declared variable or function reference.  */\n-      if (!objc_ivar)\n-\tref = decl;\n-      else if (decl != objc_ivar && !DECL_FILE_SCOPE_P (decl))\n-\t{\n-\t  warning (\"local declaration of %qs hides instance variable\",\n-\t\t   IDENTIFIER_POINTER (id));\n-\t  ref = decl;\n-\t}\n-      else\n-\tref = objc_ivar;\n-    }\n-  else if (objc_ivar)\n-    ref = objc_ivar;\n+    ref = decl;\n   else if (fun)\n     /* Implicit function declaration.  */\n     ref = implicitly_declare (id);"}, {"sha": "700cb04fea3ef4f28da98d70737d45b24089ea21", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -1,3 +1,11 @@\n+2004-10-30  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc-act.c (objc_lookup_ivar): The new OTHER parameter\n+\tcontains the result of the ID lookup by the C or C++\n+\tfront-end; in class methods, use OTHER if it exists;\n+\tin instance methods, use OTHER only if it is locally\n+\tdeclared.\n+\n 2004-10-26  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc-act.c (finish_class): Do not synthesize bogus"}, {"sha": "3474ded418fb00c679a4e5237acc8c61f6320c1b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -8435,25 +8435,49 @@ generate_objc_image_info (void)\n   finish_var_decl (decl, initlist);\n }\n \n-/* Look up ID as an instance variable.  */\n+/* Look up ID as an instance variable.  OTHER contains the result of\n+   the C or C++ lookup, which we may want to use instead.  */\n \n tree\n-objc_lookup_ivar (tree id)\n+objc_lookup_ivar (tree other, tree id)\n {\n-  tree decl;\n+  tree ivar;\n+\n+  /* If we are not inside of an ObjC method, ivar lookup makes no sense.  */\n+  if (!objc_method_context)\n+    return other;\n \n-  if (objc_method_context && !strcmp (IDENTIFIER_POINTER (id), \"super\"))\n+  if (!strcmp (IDENTIFIER_POINTER (id), \"super\"))\n     /* We have a message to super.  */\n     return get_super_receiver ();\n-  else if (objc_method_context && (decl = is_ivar (objc_ivar_chain, id)))\n+\n+  /* In a class method, look up an instance variable only as a last\n+     resort.  */\n+  if (TREE_CODE (objc_method_context) == CLASS_METHOD_DECL\n+      && other && other != error_mark_node)\n+    return other;\n+\n+  /* Look up the ivar, but do not use it if it is not accessible.  */\n+  ivar = is_ivar (objc_ivar_chain, id);\n+\n+  if (!ivar || is_private (ivar))\n+    return other;\n+\n+  /* In an instance method, a local variable (or parameter) may hide the\n+     instance variable.  */\n+  if (TREE_CODE (objc_method_context) == INSTANCE_METHOD_DECL\n+      && other && other != error_mark_node && !DECL_FILE_SCOPE_P (other))\n     {\n-      if (is_private (decl))\n-\treturn 0;\n-      else\n-        return build_ivar_reference (id);\n+      warning (\"local declaration of %qs hides instance variable\",\n+\t       IDENTIFIER_POINTER (id));\n+\n+      return other;\n     }\n-  else\n-    return 0;\n+\n+  /* At this point, we are either in an instance method with no obscuring\n+     local definitions, or in a class method with no alternate definitions\n+     at all.  */\n+  return build_ivar_reference (id);\n }\n \n #include \"gt-objc-objc-act.h\""}, {"sha": "f01fd9b424928279105e8a260b8fd04f7f01aed8", "filename": "gcc/stub-objc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstub-objc.c?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -46,9 +46,10 @@ objc_is_object_ptr (tree ARG_UNUSED (arg))\n }\n \n tree\n-objc_lookup_ivar (tree ARG_UNUSED (arg))\n+objc_lookup_ivar (tree other, tree ARG_UNUSED (arg))\n {\n-  return 0;\n+  /* Just use whatever C/C++ found.  */\n+  return other;\n }\n \n void"}, {"sha": "d4ecff0e4bf24a2c8a5e364c8a3e94adf162aa61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -1,3 +1,7 @@\n+2004-10-30  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc.dg/local-decl-1.m: New test.\n+\n 2004-10-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* gcc.dg/20040910-1.c: Adjust regex."}, {"sha": "41c4206b41dd536d44385bd571b658196f6e0fee", "filename": "gcc/testsuite/objc.dg/local-decl-2.m", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b34ad6620d4c6c692bdc5c739ba4241987d346/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m?ref=16b34ad6620d4c6c692bdc5c739ba4241987d346", "patch": "@@ -0,0 +1,42 @@\n+/* Test for ivar access inside of class methods.  It should be allowed (with a warning), but only\n+   if no other declarations with the same name are seen.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@interface Sprite: Object {\n+  int sprite, spree;\n+}\n++ (void)setFoo:(int)foo;\n++ (void)setSprite:(int)sprite;\n+- (void)setFoo:(int)foo;\n+- (void)setSprite:(int)sprite;\n+@end\n+\n+int spree = 23;\n+\n+@implementation Sprite\n++ (void)setFoo:(int)foo {\n+  sprite = foo;  /* { dg-warning \"instance variable .sprite. accessed in class method\" } */\n+  spree = foo;\n+}\n++ (void)setSprite:(int)sprite {\n+  int spree;\n+  sprite = 15;\n+  spree = 17;\n+  ((Sprite *)self)->sprite = 16;   /* NB: This is how one _should_ access */\n+  ((Sprite *)self)->spree = 18;    /* ivars from within class methods!    */\n+}\n+- (void)setFoo:(int)foo {\n+  sprite = foo;\n+  spree = foo;\n+}\n+- (void)setSprite:(int)sprite {\n+  int spree;\n+  sprite = 15;  /* { dg-warning \"local declaration of .sprite. hides instance variable\" } */\n+  self->sprite = 16;\n+  spree = 17;  /* { dg-warning \"local declaration of .spree. hides instance variable\" } */\n+  self->spree = 18;\n+}   \n+@end"}]}