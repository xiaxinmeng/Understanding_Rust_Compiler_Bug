{"sha": "c04278f74fd6b49f7a770ae51fd1dd0412989af7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0Mjc4Zjc0ZmQ2YjQ5ZjdhNzcwYWU1MWZkMWRkMDQxMjk4OWFmNw==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-03-02T06:55:33Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-03-02T06:55:33Z"}, "message": "Changes merged from Kawa's gnu.math.\n\n\t* java/math/BigInteger.java\n\t* gnu/gcj/math/MPN.java (rshift0): New method handles zero shift count.\n\t(rshift(int[],int[],int,int):  Removed - not needed.\n\t(gcd):  Use rshift0 rather than rshift.\n\t* java/math/BigInteger.java (setShiftRight):  Likewise.\n\t(divide):  Simplify by using rshift0.\n\t(divide):  Zero-extend results if high-order bit set.\n\nFrom-SVN: r40177", "tree": {"sha": "30e3d7caf1e4140d48d269c9d3049f16681a89ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e3d7caf1e4140d48d269c9d3049f16681a89ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04278f74fd6b49f7a770ae51fd1dd0412989af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04278f74fd6b49f7a770ae51fd1dd0412989af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04278f74fd6b49f7a770ae51fd1dd0412989af7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04278f74fd6b49f7a770ae51fd1dd0412989af7/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6edb99e92ed0d198857f104e81d98c57ad5d768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6edb99e92ed0d198857f104e81d98c57ad5d768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6edb99e92ed0d198857f104e81d98c57ad5d768"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "d0b8e6a43be800e0b44b30ba4a1b4ab02d53972d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04278f74fd6b49f7a770ae51fd1dd0412989af7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04278f74fd6b49f7a770ae51fd1dd0412989af7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c04278f74fd6b49f7a770ae51fd1dd0412989af7", "patch": "@@ -1,3 +1,14 @@\n+2001-03-01  Per Bothner  <per@bothner.com>\n+\n+\tChanges merged from Kawa's gnu.math.\n+\t* java/math/BigInteger.java \n+\t* gnu/gcj/math/MPN.java (rshift0): New method handles zero shift count.\n+\t(rshift(int[],int[],int,int):  Removed - not needed.\n+\t(gcd):  Use rshift0 rather than rshift.\n+\t* java/math/BigInteger.java (setShiftRight):  Likewise.\n+\t(divide):  Simplify by using rshift0.\n+\t(divide):  Zero-extend results if high-order bit set.\n+\n 2001-02-27  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* libgcj.spec.in: Insert %(libgcc) before %(liborig) to fix static"}, {"sha": "879b17332365d0022f28eec0c393601f5480784c", "filename": "libjava/gnu/gcj/math/MPN.java", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04278f74fd6b49f7a770ae51fd1dd0412989af7/libjava%2Fgnu%2Fgcj%2Fmath%2FMPN.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04278f74fd6b49f7a770ae51fd1dd0412989af7/libjava%2Fgnu%2Fgcj%2Fmath%2FMPN.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fmath%2FMPN.java?ref=c04278f74fd6b49f7a770ae51fd1dd0412989af7", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -481,7 +481,7 @@ public static int cmp (int[] x, int xlen, int[] y, int ylen)\n     return xlen > ylen ? 1 : xlen < ylen ? -1 : cmp (x, y, xlen);\n   }\n \n-  /* Shift x[x_start:x_start+len-1]count bits to the \"right\"\n+  /* Shift x[x_start:x_start+len-1] count bits to the \"right\"\n    * (i.e. divide by 2**count).\n    * Store the len least significant words of the result at dest.\n    * The bits shifted out to the right are returned.\n@@ -506,6 +506,23 @@ public static int rshift (int[] dest, int[] x, int x_start,\n     return retval;\n   }\n \n+  /* Shift x[x_start:x_start+len-1] count bits to the \"right\"\n+   * (i.e. divide by 2**count).\n+   * Store the len least significant words of the result at dest.\n+   * OK if dest==x.\n+   * Assumes: 0 <= count < 32\n+   * Same as rshift, but handles count==0 (and has no return value).\n+   */\n+  public static void rshift0 (int[] dest, int[] x, int x_start,\n+\t\t\t      int len, int count)\n+  {\n+    if (count > 0)\n+      rshift(dest, x, x_start, len, count);\n+    else\n+      for (int i = 0;  i < len;  i++)\n+\tdest[i] = x[i + x_start];\n+  }\n+\n   /** Return the long-truncated value of right shifting.\n   * @param x a two's-complement \"bignum\"\n   * @param len the number of significant words in x\n@@ -530,20 +547,6 @@ public static long rshift_long (int[] x, int len, int count)\n     return ((long)w1 << 32) | ((long)w0 & 0xffffffffL);\n   }\n \n-  /* Shift x[0:len-1]count bits to the \"right\" (i.e. divide by 2**count).\n-   * Store the len least significant words of the result at dest.\n-   * OK if dest==x.\n-   * OK if count > 32 (but must be >= 0).\n-   */\n-  public static void rshift (int[] dest, int[] x, int len, int count)\n-  {\n-    int word_count = count >> 5;\n-    count &= 31;\n-    rshift (dest, x, word_count, len, count);\n-    while (word_count < len)\n-      dest[word_count++] = 0;\n-  }\n-\n   /* Shift x[0:len-1] left by count bits, and store the len least\n    * significant words of the result in dest[d_offset:d_offset+len-1].\n    * Return the bits shifted out from the most significant digit.\n@@ -624,8 +627,8 @@ public static int gcd (int[] x, int[] y, int len)\n \n     // Temporarily devide both x and y by 2**sh.\n     len -= initShiftWords;\n-    MPN.rshift (x, x, initShiftWords, len, initShiftBits);\n-    MPN.rshift (y, y, initShiftWords, len, initShiftBits);\n+    MPN.rshift0 (x, x, initShiftWords, len, initShiftBits);\n+    MPN.rshift0 (y, y, initShiftWords, len, initShiftBits);\n \n     int[] odd_arg; /* One of x or y which is odd. */\n     int[] other_arg; /* The other one can be even or odd. */\n@@ -704,15 +707,15 @@ public static int intLength (int i)\n   }\n \n   /** Calcaulte the Common Lisp \"integer-length\" function.\n-   * Assumes input is canonicalized:  len==IntNum.wordsNeeded(words,len) */\n+   * Assumes input is canonicalized:  len==BigInteger.wordsNeeded(words,len) */\n   public static int intLength (int[] words, int len)\n   {\n     len--;\n     return intLength (words[len]) + 32 * len;\n   }\n \n   /* DEBUGGING:\n-  public static void dprint (IntNum x)\n+  public static void dprint (BigInteger x)\n   {\n     if (x.words == null)\n       System.err.print(Long.toString((long) x.ival & 0xffffffffL, 16));"}, {"sha": "1d848d13e8fac163da99bcd20e02aa426bed2222", "filename": "libjava/java/math/BigInteger.java", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04278f74fd6b49f7a770ae51fd1dd0412989af7/libjava%2Fjava%2Fmath%2FBigInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04278f74fd6b49f7a770ae51fd1dd0412989af7/libjava%2Fjava%2Fmath%2FBigInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigInteger.java?ref=c04278f74fd6b49f7a770ae51fd1dd0412989af7", "patch": "@@ -794,13 +794,7 @@ else if (ylen == 1)\n \t  xwords[xlen++] = 0;\n \tMPN.divide(xwords, xlen, ywords, ylen);\n \trlen = ylen;\n-\tif (remainder != null || rounding_mode != TRUNCATE)\n-\t  {\n-\t    if (nshift == 0)\n-\t      System.arraycopy(xwords, 0, ywords, 0, rlen);\n-\t    else\n-\t      MPN.rshift(ywords, xwords, 0, rlen, nshift);\n-\t  }\n+\tMPN.rshift0 (ywords, xwords, 0, rlen, nshift);\n \n \tqlen = xlen + 1 - ylen;\n \tif (quotient != null)\n@@ -810,6 +804,12 @@ else if (ylen == 1)\n \t  }\n       }\n \n+    if (ywords[rlen-1] < 0)\n+      {\n+        ywords[rlen] = 0;\n+        rlen++;\n+      }\n+\n     // Now the quotient is in xwords, and the remainder is in ywords.\n \n     boolean add_one = false;\n@@ -1399,15 +1399,10 @@ else if (count == 0)\n \t  {\n \t    if (words == null || words.length < d_len)\n \t      realloc(d_len);\n-\t    if (count == 0)\n-\t      System.arraycopy(x.words, word_count, words, 0, d_len);\n-            else\n-\t      {\n-\t\tMPN.rshift(words, x.words, word_count, d_len, count);\n-        \tif (neg)\n-        \t  words[d_len-1] |= -1 << (32 - count);\n-              }\n+\t    MPN.rshift0 (words, x.words, word_count, d_len, count);\n \t    ival = d_len;\n+\t    if (neg)\n+\t      words[d_len-1] |= -1 << (32 - count);\n \t  }\n       }\n   }"}]}