{"sha": "c11d86b47facb2f787a7cfde0755454c73b8b90e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExZDg2YjQ3ZmFjYjJmNzg3YTdjZmRlMDc1NTQ1NGM3M2I4YjkwZQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-01-19T10:26:52Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-01-19T10:26:52Z"}, "message": "ipa-chkp.c (chkp_produce_thunks): Add early param to split thunks production into two passes.\n\ngcc/\n\n\t* ipa-chkp.c (chkp_produce_thunks): Add early param\n\tto split thunks production into two passes.  Keep\n\t'always_inline' function bodies after the first pass.\n\t(pass_data_ipa_chkp_early_produce_thunks): New.\n\t(pass_ipa_chkp_early_produce_thunks): New.\n\t(pass_ipa_chkp_produce_thunks::execute): Adjust to new\n\tchkp_produce_thunks signature.\n\t(make_pass_ipa_chkp_early_produce_thunks): New.\n\t* passes.def (pass_ipa_chkp_early_produce_thunks): New.\n\t(pass_ipa_chkp_produce_thunks): Move after local optimizations.\n\t* tree-pass.h (make_pass_ipa_chkp_early_produce_thunks): New.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/chkp-always_inline.c: New.\n\nFrom-SVN: r219834", "tree": {"sha": "68902d8ce02f2954964f324ed9e2a885df3ff7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68902d8ce02f2954964f324ed9e2a885df3ff7fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c11d86b47facb2f787a7cfde0755454c73b8b90e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11d86b47facb2f787a7cfde0755454c73b8b90e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11d86b47facb2f787a7cfde0755454c73b8b90e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11d86b47facb2f787a7cfde0755454c73b8b90e/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9deaf59d1b60b7738f848ecd99171d16e99438ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9deaf59d1b60b7738f848ecd99171d16e99438ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9deaf59d1b60b7738f848ecd99171d16e99438ae"}], "stats": {"total": 100, "additions": 91, "deletions": 9}, "files": [{"sha": "cc796ac4bcedb0ba67718604e676ea05002ccaea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c11d86b47facb2f787a7cfde0755454c73b8b90e", "patch": "@@ -1,3 +1,17 @@\n+2015-01-19  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* ipa-chkp.c (chkp_produce_thunks): Add early param\n+\tto split thunks production into two passes.  Keep\n+\t'always_inline' function bodies after the first pass.\n+\t(pass_data_ipa_chkp_early_produce_thunks): New.\n+\t(pass_ipa_chkp_early_produce_thunks): New.\n+\t(pass_ipa_chkp_produce_thunks::execute): Adjust to new\n+\tchkp_produce_thunks signature.\n+\t(make_pass_ipa_chkp_early_produce_thunks): New.\n+\t* passes.def (pass_ipa_chkp_early_produce_thunks): New.\n+\t(pass_ipa_chkp_produce_thunks): Move after local optimizations.\n+\t* tree-pass.h (make_pass_ipa_chkp_early_produce_thunks): New.\n+\n 2015-01-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_node::dump): Dump profile flags."}, {"sha": "67cb7d51478aec7a3993a99b459552274ffc100c", "filename": "gcc/ipa-chkp.c", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Fipa-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Fipa-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.c?ref=c11d86b47facb2f787a7cfde0755454c73b8b90e", "patch": "@@ -643,7 +643,7 @@ chkp_versioning (void)\n    function.  */\n \n static unsigned int\n-chkp_produce_thunks (void)\n+chkp_produce_thunks (bool early)\n {\n   struct cgraph_node *node;\n \n@@ -652,7 +652,9 @@ chkp_produce_thunks (void)\n       if (!node->instrumentation_clone\n \t  && node->instrumented_version\n \t  && gimple_has_body_p (node->decl)\n-\t  && gimple_has_body_p (node->instrumented_version->decl))\n+\t  && gimple_has_body_p (node->instrumented_version->decl)\n+\t  && (!lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (node->decl))\n+\t      || !early))\n \t{\n \t  node->release_body ();\n \t  node->remove_callees ();\n@@ -670,12 +672,15 @@ chkp_produce_thunks (void)\n   /* Mark instrumentation clones created for aliases and thunks\n      as insttrumented so they could be removed as unreachable\n      now.  */\n-  FOR_EACH_DEFINED_FUNCTION (node)\n+  if (!early)\n     {\n-      if (node->instrumentation_clone\n-\t  && (node->alias || node->thunk.thunk_p)\n-\t  && !chkp_function_instrumented_p (node->decl))\n-\tchkp_function_mark_instrumented (node->decl);\n+      FOR_EACH_DEFINED_FUNCTION (node)\n+      {\n+\tif (node->instrumentation_clone\n+\t    && (node->alias || node->thunk.thunk_p)\n+\t    && !chkp_function_instrumented_p (node->decl))\n+\t  chkp_function_mark_instrumented (node->decl);\n+      }\n     }\n \n   return TODO_remove_functions;\n@@ -694,6 +699,19 @@ const pass_data pass_data_ipa_chkp_versioning =\n   0 /* todo_flags_finish */\n };\n \n+const pass_data pass_data_ipa_chkp_early_produce_thunks =\n+{\n+  SIMPLE_IPA_PASS, /* type */\n+  \"chkp_ecleanup\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  0, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0 /* todo_flags_finish */\n+};\n+\n const pass_data pass_data_ipa_chkp_produce_thunks =\n {\n   SIMPLE_IPA_PASS, /* type */\n@@ -732,6 +750,31 @@ class pass_ipa_chkp_versioning : public simple_ipa_opt_pass\n \n }; // class pass_ipa_chkp_versioning\n \n+class pass_ipa_chkp_early_produce_thunks : public simple_ipa_opt_pass\n+{\n+public:\n+  pass_ipa_chkp_early_produce_thunks (gcc::context *ctxt)\n+    : simple_ipa_opt_pass (pass_data_ipa_chkp_early_produce_thunks, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual opt_pass * clone ()\n+    {\n+      return new pass_ipa_chkp_early_produce_thunks (m_ctxt);\n+    }\n+\n+  virtual bool gate (function *)\n+    {\n+      return flag_check_pointer_bounds;\n+    }\n+\n+  virtual unsigned int execute (function *)\n+    {\n+      return chkp_produce_thunks (true);\n+    }\n+\n+}; // class pass_chkp_produce_thunks\n+\n class pass_ipa_chkp_produce_thunks : public simple_ipa_opt_pass\n {\n public:\n@@ -752,7 +795,7 @@ class pass_ipa_chkp_produce_thunks : public simple_ipa_opt_pass\n \n   virtual unsigned int execute (function *)\n     {\n-      return chkp_produce_thunks ();\n+      return chkp_produce_thunks (false);\n     }\n \n }; // class pass_chkp_produce_thunks\n@@ -763,6 +806,12 @@ make_pass_ipa_chkp_versioning (gcc::context *ctxt)\n   return new pass_ipa_chkp_versioning (ctxt);\n }\n \n+simple_ipa_opt_pass *\n+make_pass_ipa_chkp_early_produce_thunks (gcc::context *ctxt)\n+{\n+  return new pass_ipa_chkp_early_produce_thunks (ctxt);\n+}\n+\n simple_ipa_opt_pass *\n make_pass_ipa_chkp_produce_thunks (gcc::context *ctxt)\n {"}, {"sha": "2bc5dcd781fe77591883527ddd0e9705a521c9a0", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=c11d86b47facb2f787a7cfde0755454c73b8b90e", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_ipa_free_lang_data);\n   NEXT_PASS (pass_ipa_function_and_variable_visibility);\n   NEXT_PASS (pass_ipa_chkp_versioning);\n+  NEXT_PASS (pass_ipa_chkp_early_produce_thunks);\n   NEXT_PASS (pass_build_ssa_passes);\n   PUSH_INSERT_PASSES_WITHIN (pass_build_ssa_passes)\n       NEXT_PASS (pass_fixup_cfg);\n@@ -65,7 +66,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_chkp);\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n   POP_INSERT_PASSES ()\n-  NEXT_PASS (pass_ipa_chkp_produce_thunks);\n \n   NEXT_PASS (pass_local_optimization_passes);\n   PUSH_INSERT_PASSES_WITHIN (pass_local_optimization_passes)\n@@ -103,6 +103,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n       NEXT_PASS (pass_inline_parameters);\n   POP_INSERT_PASSES ()\n+  NEXT_PASS (pass_ipa_chkp_produce_thunks);\n   NEXT_PASS (pass_ipa_auto_profile);\n   NEXT_PASS (pass_ipa_free_inline_summary);\n   NEXT_PASS (pass_ipa_tree_profile);"}, {"sha": "a063907dfdb94813b97d000a7521353cc7e94403", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c11d86b47facb2f787a7cfde0755454c73b8b90e", "patch": "@@ -1,3 +1,7 @@\n+2015-01-19  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.target/i386/chkp-always_inline.c: New.\n+\n 2015-01-15  Andrew Pinski  <apinski@cavium.com>\n \t    Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n "}, {"sha": "16d23582ddeeb75c72262379e66fb9e46abcf7c6", "filename": "gcc/testsuite/gcc.target/i386/chkp-always_inline.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-always_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-always_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-always_inline.c?ref=c11d86b47facb2f787a7cfde0755454c73b8b90e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -Wno-attributes\" } */\n+\n+__attribute__((always_inline)) int f1 (int *p)\n+{\n+  return *p;\n+}\n+\n+__attribute__((bnd_legacy)) int f2 (int *p)\n+{\n+  return f1 (p);\n+}"}, {"sha": "b59ae7a39d672973f178c0363f4485ed2f616afd", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11d86b47facb2f787a7cfde0755454c73b8b90e/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=c11d86b47facb2f787a7cfde0755454c73b8b90e", "patch": "@@ -334,6 +334,7 @@ extern void register_pass (opt_pass* pass, pass_positioning_ops pos,\n \t\t\t   const char* ref_pass_name, int ref_pass_inst_number);\n \n extern simple_ipa_opt_pass *make_pass_ipa_chkp_versioning (gcc::context *ctxt);\n+extern simple_ipa_opt_pass *make_pass_ipa_chkp_early_produce_thunks (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_chkp_produce_thunks (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_chkp (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_chkp_opt (gcc::context *ctxt);"}]}