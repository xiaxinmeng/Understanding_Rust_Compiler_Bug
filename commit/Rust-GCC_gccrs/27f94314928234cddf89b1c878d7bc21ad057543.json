{"sha": "27f94314928234cddf89b1c878d7bc21ad057543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmOTQzMTQ5MjgyMzRjZGRmODliMWM4NzhkN2JjMjFhZDA1NzU0Mw==", "commit": {"author": {"name": "Tim Josling", "email": "tej@melbpc.org.au", "date": "2003-03-01T02:05:37Z"}, "committer": {"name": "Tim Josling", "email": "timjosling@gcc.gnu.org", "date": "2003-03-01T02:05:37Z"}, "message": "Treelang fixes.\n\nFrom-SVN: r63604", "tree": {"sha": "d806b85639775ea8dd84ae5584a36d46f1cf3a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d806b85639775ea8dd84ae5584a36d46f1cf3a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f94314928234cddf89b1c878d7bc21ad057543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f94314928234cddf89b1c878d7bc21ad057543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f94314928234cddf89b1c878d7bc21ad057543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f94314928234cddf89b1c878d7bc21ad057543/comments", "author": null, "committer": null, "parents": [{"sha": "b063b379b84d400591b00f53fbfec18903fd49e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b063b379b84d400591b00f53fbfec18903fd49e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b063b379b84d400591b00f53fbfec18903fd49e8"}], "stats": {"total": 139, "additions": 120, "deletions": 19}, "files": [{"sha": "ca767d024fcc02bd0426fb9d7885c3b1faab6e69", "filename": "gcc/testsuite/treelang/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2FChangeLog?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -1,3 +1,8 @@\n+2003-02-25  Tim Josling  <tej@melbpc.org.au>\n+\n+\t* treetests.exp (run3): set options to force aggressive GC, to\n+\tensure GC is all set up correct,\n+\n 2002-05-07  Tim Josling  <tej@melbpc.org.au>\n \n \t* Makefile.in: Fix copyright"}, {"sha": "42ceb242d468c16e5a40d23966861dcd5f9baa50", "filename": "gcc/testsuite/treelang/treetests.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftestsuite%2Ftreelang%2Ftreetests.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftestsuite%2Ftreelang%2Ftreetests.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Ftreetests.exp?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -301,7 +301,7 @@ if {${check_rc} == 1} {\n #\n #set X \"x\"\n set X \"\"\n-    run3 \"${sourcedir}\" \"${testdir}\" \" -g -O3 \" 01 01 0 3 0 1 0\n+run3 \"${sourcedir}\" \"${testdir}\" \" -g -O3 --param ggc-min-heapsize=0 --param ggc-min-expand=0 \" 01 01 0 3 0 1 0\n set X \"\"\n }\n "}, {"sha": "40a9b32388a56ec12ae0e9a4d50fb45e46e2ac2f", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -1,3 +1,40 @@\n+2003-02-24  Tim Josling  <tej@melbpc.org.au>\n+\n+\t* parse.y (my_yylex): New - ensure lexer time is charged to\n+\tTV_LEX.\n+\t(yylex): redefine as invocation of my_yylex which then calls\n+\tflex-generated yylex.\n+\t(timevar.h): include.\n+\t\n+2003-02-23  Tim Josling  <tej@melbpc.org.au>\n+\n+        Fix garbage collection, add more error checking, force GC always.\n+\t\n+\t* Make-lang.in (treelang/tree1.o): Depend on treelang/treetree.h\n+\t(treelang/treetree.o): Depend on  treelang/parse.h\n+\n+\t* lex.l: include \"treetree.h\"\n+\n+\t* lex.l (update_yylval): Allocate string using get_string so GC\n+\tworks.\n+\n+\t* parse.y (function_prototype): Set category correctly so GC works.\n+\t(function): Set category in search so checking works.\n+\t(function_invocation): Ditto.\n+\t(variable_ref): Ditto.\n+\n+\t* tree1.c (lookup_tree_name): Call sanity_check for passed\n+\tproduction and associated token and for symbol table entries.\n+\n+\t* tree1.c (sanity_check): New, basic check that struct is valid.\n+\n+\t* treelang.h: Prototype for sanity_check.\n+\n+2003-01-27  Tim Josling  <tej@melbpc.org.au>\n+\n+\t* treetree.c (treelang_init_decl_processing): Change memory\n+\tallocation to use GC.\n+\n 2003-02-04  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* treelang.texi: Update to GFDL 1.2."}, {"sha": "71c7851bf7bb48db279808dfa494b1fc0eb37d23", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -94,12 +94,13 @@ tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/lex.o treelang/par\n \n treelang/tree1.o: treelang/tree1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   flags.h toplev.h $(GGC_H) $(TREE_H) diagnostic.h treelang/treelang.h \\\n+  treelang/treetree.h \\\n   treelang/treetree.h gt-treelang-tree1.h gtype-treelang.h\n \n treelang/treetree.o: treelang/treetree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(TREE_H) flags.h output.h $(C_TREE_H) $(RTL_H) $(GGC_H) toplev.h \\\n   varray.h $(LANGHOOKS_DEF_H) langhooks.h treelang/treelang.h \\\n-  treelang/treetree.h\n+  treelang/treetree.h treelang/parse.h\n \n treelang/parse.o: treelang/parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) diagnostic.h treelang/treelang.h treelang/treetree.h"}, {"sha": "869138c410b42f33968f4b6e486132a3e8bb5b22", "filename": "gcc/treelang/lex.l", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Flex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Flex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flex.l?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -4,7 +4,7 @@\n \n    ---------------------------------------------------------------------\n \n-   Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002\n+   Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    \n    This program is free software; you can redistribute it and/or modify it \n@@ -44,6 +44,7 @@\n /* Token defs.  */\n #include \"treelang.h\"\n #include \"parse.h\"\n+#include \"treetree.h\"\n \n extern int option_lexer_trace;\n \n@@ -257,8 +258,7 @@ update_yylval (int a)\n   tok->tp.tok.length = yyleng;\n   /* Have to copy yytext as it is just a ptr into the buffer at the\n      moment.  */\n-  tok->tp.tok.chars = my_malloc (yyleng + 1);\n-  memcpy (tok->tp.tok.chars, yytext, yyleng);\n+  tok->tp.tok.chars = (unsigned char*) get_string (yytext, yyleng);\n }\n \n /* Trace the value LEXRET and the position and token details being"}, {"sha": "d1954e2c516ebda4f8a99a5f19264e7f179c0dd2", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -5,7 +5,7 @@\n \n      ---------------------------------------------------------------------\n \n-     Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+     Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n      This program is free software; you can redistribute it and/or modify it\n      under the terms of the GNU General Public License as published by the\n@@ -47,6 +47,7 @@\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"diagnostic.h\"\n+#include \"timevar.h\"\n \n #include \"treelang.h\"\n #include \"treetree.h\"\n@@ -55,13 +56,26 @@\n #define YYPRINT(file, type, value) print_token (file, type, value) \n #define YYERROR_VERBOSE YES\n \n+/* My yylex routine used to intercept calls to flex generated code, to\n+     record lex time.  */\n+int yylex (void);\n+static inline int my_yylex(void);\n+/* Call lex, but ensure time is charged to TV_LEX.  */ \n+static inline int my_yylex ()\n+{\n+  int res;\n+  timevar_push (TV_LEX);\n+  res = yylex ();\n+  timevar_pop (TV_LEX);\n+  return res;\n+}\n+#define yylex my_yylex\n \n extern int option_parser_trace;\n \n /* Local prototypes.  */\n \n static void yyerror (const char *error_message);\n-int yylex (void);\n int yyparse (void);\n void print_token (FILE * file, unsigned int type ATTRIBUTE_UNUSED, YYSTYPE value);\n static struct prod_token_parm_item *reverse_prod_list (struct prod_token_parm_item *old_first);\n@@ -287,6 +301,7 @@ storage typename NAME LEFT_PARENTHESIS parameters RIGHT_PARENTHESIS SEMICOLON {\n       if (!this_parm_var->tp.pro.main_token)\n         abort ();\n       this_parms->tp.par.variable_name = this_parm_var->tp.pro.main_token->tp.tok.chars;\n+      this_parms->category = parameter_category;\n       this_parms->type = NUMERIC_TYPE (( (struct prod_token_parm_item*)EXPRESSION_TYPE (this_parm_var)));\n       if (last_parms)\n         {\n@@ -318,6 +333,7 @@ NAME LEFT_BRACE {\n   struct prod_token_parm_item *this_parm;\n   tok = $1;\n   SYMBOL_TABLE_NAME ((&search_prod)) = tok;\n+  search_prod.category = token_category;\n   current_function = proto = lookup_tree_name (&search_prod);\n   if (!proto)\n     {\n@@ -690,6 +706,7 @@ NAME LEFT_PARENTHESIS expressions_with_commas RIGHT_PARENTHESIS {\n   SYMBOL_TABLE_NAME (prod) = tok;\n   PARAMETERS (prod) = reverse_prod_list ($3);\n   SYMBOL_TABLE_NAME ((&search_prod)) = tok;\n+  search_prod.category = token_category;\n   proto = lookup_tree_name (&search_prod);\n   if (!proto)\n     {\n@@ -768,6 +785,7 @@ NAME {\n \n   tok = $1;\n   SYMBOL_TABLE_NAME ((&search_prod)) = tok;\n+  search_prod.category = token_category;\n   symbol_table_entry = lookup_tree_name (&search_prod);\n   if (!symbol_table_entry)\n     {"}, {"sha": "20913bafd78b077d905faf6fdb76982074c59526", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -3,7 +3,7 @@\n     TREELANG Compiler almost main (tree1)\n     Called by GCC's toplev.c\n \n-    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n     This program is free software; you can redistribute it and/or modify it\n     under the terms of the GNU General Public License as published by the\n@@ -187,6 +187,8 @@ treelang_init (const char* filename)\n   input_filename = \"\";\n   lineno = 0;\n \n+  /* Init decls etc.  */\n+\n   treelang_init_decl_processing ();\n \n   /* This error will not happen from GCC as it will always create a\n@@ -229,7 +231,8 @@ treelang_parse_file (int debug_flag ATTRIBUTE_UNUSED)\n   yyparse ();\n }\n \n-/* Allocate SIZE bytes and clear them.  */\n+/* Allocate SIZE bytes and clear them.  Not to be used for strings\n+   which must go in stringpool.  */\n \n void *\n my_malloc (size_t size)\n@@ -255,10 +258,17 @@ lookup_tree_name (struct prod_token_parm_item *prod)\n   struct prod_token_parm_item *this;\n   struct prod_token_parm_item *this_tok;\n   struct prod_token_parm_item *tok;\n+\n+  sanity_check (prod);\n+  \n   tok = SYMBOL_TABLE_NAME (prod);\n+  sanity_check (tok);\n+  \n   for (this = symbol_table; this; this = this->tp.pro.next)\n     {\n+      sanity_check (this);\n       this_tok = this->tp.pro.main_token;\n+      sanity_check (this_tok);\n       if (tok->tp.tok.length != this_tok->tp.tok.length) \n         continue;\n       if (memcmp (tok->tp.tok.chars, this_tok->tp.tok.chars, this_tok->tp.tok.length))\n@@ -281,6 +291,7 @@ insert_tree_name (struct prod_token_parm_item *prod)\n {\n   struct prod_token_parm_item *tok;\n   tok = SYMBOL_TABLE_NAME (prod);\n+  sanity_check (prod);\n   if (lookup_tree_name (prod))\n     {\n       fprintf (stderr, \"%s:%i:%i duplicate name %s\\n\", in_fname, tok->tp.tok.lineno, \n@@ -307,6 +318,22 @@ make_production (int type, struct prod_token_parm_item *main_tok)\n   return prod;\n } \n \n+/* Abort if ITEM is not a valid structure, based on 'category'.  */\n+\n+void\n+sanity_check (struct prod_token_parm_item *item)\n+{\n+  switch (item->category)\n+    {\n+    case   token_category:\n+    case production_category:\n+    case parameter_category:\n+      break;\n+      \n+    default:\n+      abort ();\n+    }\n+}  \n \n /* New garbage collection regime see gty.texi.  */\n #include \"gt-treelang-tree1.h\""}, {"sha": "6258c0e88ec2624da4ac5023a1529d24e06e1ee7", "filename": "gcc/treelang/treelang.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftreelang.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftreelang.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.h?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -2,7 +2,7 @@\n \n     TREELANG Compiler common definitions (treelang.h)\n \n-    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n     This program is free software; you can redistribute it and/or modify it\n     under the terms of the GNU General Public License as published by the\n@@ -150,3 +150,4 @@ void mark_production_used (struct prod_token_parm_item *pp);\n void mark_token_used (struct prod_token_parm_item *tt);\n void treelang_debug (void);\n \n+void sanity_check (struct prod_token_parm_item *item);"}, {"sha": "4bf1276b4cd34ffb24c06c7e9e8290e38d1b7db1", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -6,8 +6,8 @@\n     If you want a working example of how to write a front end to GCC,\n     you are in the right place.\n \n-    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-    2001, 2002 Free Software Foundation, Inc.\n+    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+    1999, 2000, 2001, 2002, 2003, Free Software Foundation, Inc.\n \n     This code is based on toy.c written by Richard Kenner. \n     \n@@ -73,6 +73,7 @@\n \n #include \"treelang.h\"\n #include \"treetree.h\"\n+#include \"parse.h\"\n \n extern int option_main;\n extern char **file_names;\n@@ -233,6 +234,8 @@ tree_code_create_function_prototype (unsigned char* chars,\n   id = get_identifier ((const char*)chars);\n   for (parm = parms; parm; parm = parm->tp.par.next)\n     {\n+      if (parm->category != parameter_category)\n+        abort ();\n       type_node = get_type_for_numeric_type (parm->type);\n       type_list = tree_cons (NULL_TREE, type_node, type_list);\n     }\n@@ -1243,10 +1246,7 @@ treelang_init_decl_processing ()\n   unsigned int i;\n   tree id;\n \n-  /* It is not necessary to register ridpointers as a GC root, because\n-     all the trees it points to are permanently interned in the\n-     get_identifier hash anyway.  */\n-  ridpointers = (tree *) xcalloc ((int) RID_MAX, sizeof (tree));\n+  ridpointers = (tree *) ggc_calloc ((int) RID_MAX, sizeof (tree));\n   \n   for (i = 0; i < N_reswords; i++)\n     {\n@@ -1284,3 +1284,15 @@ dt (tree t)\n {\n   debug_tree (t);\n }\n+\n+/* Get a stringpool entry for a string S of length L.  This is needed\n+   because the GTY routines don't mark strings, forcing you to put\n+   them into stringpool, which is never freed.  */\n+\n+const char*\n+get_string (const char *s, size_t l)\n+{\n+  tree t;\n+  t = get_identifier_with_length (s, l);\n+  return IDENTIFIER_POINTER(t);\n+}"}, {"sha": "111cf128183cd4217fc02b41c9ed11b8b44ebb4d", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f94314928234cddf89b1c878d7bc21ad057543/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=27f94314928234cddf89b1c878d7bc21ad057543", "patch": "@@ -3,7 +3,7 @@\n     TREELANG Compiler definitions for interfacing to treetree.c\n     (compiler back end interface).\n \n-    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n     This program is free software; you can redistribute it and/or modify it\n     under the terms of the GNU General Public License as published by the\n@@ -63,11 +63,11 @@ void tree_code_if_end (unsigned char* filename, int lineno);\n tree tree_code_get_type (int type_num);\n void treelang_init_decl_processing (void);\n void treelang_finish (void);\n-const char * treelang_init (const char* filename);\n+const char *treelang_init (const char* filename);\n int treelang_decode_option (int, char **);\n void treelang_parse_file (int debug_flag);\n void push_var_level (void);\n void pop_var_level (void);\n-\n+const char* get_string (const char *s, size_t l);\n \n "}]}