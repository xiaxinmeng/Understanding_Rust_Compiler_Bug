{"sha": "61098249b51d7c483274d72796401720079e55a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwOTgyNDliNTFkN2M0ODMyNzRkNzI3OTY0MDE3MjAwNzllNTVhOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-01T19:07:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-01T19:07:05Z"}, "message": "Makefile.in (STAGESTUFF): Wildcard all debugging dumps at once.\n\n\t* Makefile.in (STAGESTUFF): Wildcard all debugging dumps at once.\n\t(mostlyclean): Likewise.\n\n\t* toplev.c (rtl_dump, jump_opt_dump, etc): Remove.\n\t(struct dump_file_info, enum dump_file_index, dump_file): New.\n\t(open_dump_file): Take a dump_file_index not a suffix, and a decl\n\tnot a string.  Clean out file if we havn't yet done so.  Do nothing\n\tif the dump isn't enabled.\n\t(close_dump_file): Do nothing if the dump isn't open.  Dump\n\tgraph data if requested.\n\t(dump_rtl, clean_dump_file): Remove.\n\t(compile_file): Don't clean the dump files.  Only finalize .bp dump\n\tif flag_test_coverage or flag_branch_probabilities.  Only finalize\n\t.combine dump if optimizing.  Iterate over dump_file to finalize the\n\tgraph dumps.\n\t(rest_of_compilation): Update for open_dump_file/close_dump_file.\n\tConvert all uses of dump_rtl.\n\t(decode_d_option): Iterate over dump_file to implement 'a' and to\n\tlocate pass-specific dumps.\n\nFrom-SVN: r32857", "tree": {"sha": "36509aba2e0785a9aa4d0501329cc77be8192812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36509aba2e0785a9aa4d0501329cc77be8192812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61098249b51d7c483274d72796401720079e55a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61098249b51d7c483274d72796401720079e55a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61098249b51d7c483274d72796401720079e55a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61098249b51d7c483274d72796401720079e55a9/comments", "author": null, "committer": null, "parents": [{"sha": "9d26ffb25c60a66b3195c57af4e3a4b6558037f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d26ffb25c60a66b3195c57af4e3a4b6558037f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d26ffb25c60a66b3195c57af4e3a4b6558037f5"}], "stats": {"total": 905, "additions": 284, "deletions": 621}, "files": [{"sha": "2c195f4ebff3a05938f494d6d41acb6724e30481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61098249b51d7c483274d72796401720079e55a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61098249b51d7c483274d72796401720079e55a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61098249b51d7c483274d72796401720079e55a9", "patch": "@@ -1,3 +1,25 @@\n+2000-04-01  Richard Henderson  <rth@cygnus.com>\n+\n+\t* Makefile.in (STAGESTUFF): Wildcard all debugging dumps at once.\n+\t(mostlyclean): Likewise.\n+\n+\t* toplev.c (rtl_dump, jump_opt_dump, etc): Remove.\n+\t(struct dump_file_info, enum dump_file_index, dump_file): New.\n+\t(open_dump_file): Take a dump_file_index not a suffix, and a decl\n+\tnot a string.  Clean out file if we havn't yet done so.  Do nothing\n+\tif the dump isn't enabled.\n+\t(close_dump_file): Do nothing if the dump isn't open.  Dump \n+\tgraph data if requested.\n+\t(dump_rtl, clean_dump_file): Remove.\n+\t(compile_file): Don't clean the dump files.  Only finalize .bp dump\n+\tif flag_test_coverage or flag_branch_probabilities.  Only finalize\n+\t.combine dump if optimizing.  Iterate over dump_file to finalize the\n+\tgraph dumps.\n+\t(rest_of_compilation): Update for open_dump_file/close_dump_file.\n+\tConvert all uses of dump_rtl.\n+\t(decode_d_option): Iterate over dump_file to implement 'a' and to\n+\tlocate pass-specific dumps.\n+\n 2000-04-01  Neil Booth <NeilB@earthling.net>\n \n         * cppexp.c: Redefine priority constants."}, {"sha": "67d1b4d4423e40ec02355bfca922db6ae3cb3b31", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61098249b51d7c483274d72796401720079e55a9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61098249b51d7c483274d72796401720079e55a9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=61098249b51d7c483274d72796401720079e55a9", "patch": "@@ -707,11 +707,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  $(CCCP)$(exeext) cc1obj$(exeext) enquire$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n  specs collect2$(exeext) $(USE_COLLECT2) underscore.c \\\n- gcov$(exeext) *.bp \\\n- *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop \\\n- *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack *.gcse *.flow2 *.peephole2 \\\n- *.ssa *.ussa \\\n- *.[si] libcpp.a \\\n+ gcov$(exeext) *.[0-9][0-9].* *.[si] libcpp.a \\\n  $(LANG_STAGESTUFF)\n \n # Members of libgcc1.a.\n@@ -2381,13 +2377,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f s-* tmp-* stamp-* stmp-*\n \t-rm -f */stamp-* */tmp-*\n # Delete debugging dump files.\n-\t-rm -f *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop\n-\t-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack *.addressof\n-\t-rm -f *.regmove *.mach *.bp *.gcse *.flow2 *.peephole2 *.ssa *.ussa\n-\t-rm -f */*.greg */*.lreg */*.combine */*.flow */*.cse */*.jump */*.rtl\n-\t-rm -f */*.tree */*.loop */*.dbr */*.jump2 */*.sched */*.cse2\n-\t-rm -f */*.sched2 */*.stack */*.regmove */*.gcse */*.flow2\n-\t-rm -f */*.peephole2 */*.ssa */*.ussa\n+\t-rm -f *.[0-9][0-9].* */*.[0-9][0-9].*\n # Delete some files made during installation.\n \t-rm -f specs float.h-* enquire SYSCALLS.c.X SYSCALLS.c\n \t-rm -f collect collect2 mips-tfile mips-tdump alloca.s\n@@ -2401,7 +2391,6 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns\n # Delete core dumps.\n \t-rm -f core */core\n-\t-rm -f *.bp */*.bp\n \n # Delete all files made by compilation\n # that don't exist in the distribution."}, {"sha": "6d84c915c4e62a88425cf594b2d9668591e34851", "filename": "gcc/toplev.c", "status": "modified", "additions": 260, "deletions": 608, "changes": 868, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61098249b51d7c483274d72796401720079e55a9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61098249b51d7c483274d72796401720079e55a9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=61098249b51d7c483274d72796401720079e55a9", "patch": "@@ -162,18 +162,14 @@ static void pipe_closed PARAMS ((int)) ATTRIBUTE_NORETURN;\n /* This might or might not be used in ASM_IDENTIFY_LANGUAGE. */\n static void output_lang_identify PARAMS ((FILE *)) ATTRIBUTE_UNUSED;\n #endif\n-static void open_dump_file PARAMS ((const char *, const char *));\n-static void close_dump_file PARAMS ((void (*) (FILE *, rtx), rtx));\n-static void dump_rtl PARAMS ((const char *, tree, void (*) (FILE *, rtx), rtx));\n-static void clean_dump_file PARAMS ((const char *));\n static void compile_file PARAMS ((char *));\n static void display_help PARAMS ((void));\n static void mark_file_stack PARAMS ((void *));\n \n static void decode_d_option PARAMS ((const char *));\n-static int  decode_f_option PARAMS ((const char *));\n-static int  decode_W_option PARAMS ((const char *));\n-static int  decode_g_option PARAMS ((const char *));\n+static int decode_f_option PARAMS ((const char *));\n+static int decode_W_option PARAMS ((const char *));\n+static int decode_g_option PARAMS ((const char *));\n static unsigned int independent_decode_option PARAMS ((int, char **,\n \t\t\t\t\t\t       unsigned int));\n \n@@ -230,42 +226,99 @@ const char *dump_base_name;\n \n extern int target_flags;\n \n-/* Flags saying which kinds of debugging dump have been requested.  */\n-\n-int rtl_dump = 0;\n-int rtl_dump_and_exit = 0;\n-int jump_opt_dump = 0;\n-int addressof_dump = 0;\n-int cse_dump = 0;\n-int gcse_dump = 0;\n-int loop_dump = 0;\n-int cse2_dump = 0;\n-int branch_prob_dump = 0;\n-int flow_dump = 0;\n-int combine_dump = 0;\n-int regmove_dump = 0;\n-int sched_dump = 0;\n-int local_reg_dump = 0;\n-int global_reg_dump = 0;\n-int flow2_dump = 0;\n-int peephole2_dump = 0;\n-int sched2_dump = 0;\n-int jump2_opt_dump = 0;\n-#ifdef DELAY_SLOTS\n-int dbr_sched_dump = 0;\n-#endif\n-int reorder_blocks_dump = 0;\n-int flag_print_asm_name = 0;\n-#ifdef STACK_REGS\n-int stack_reg_dump = 0;\n-#endif\n-#ifdef MACHINE_DEPENDENT_REORG\n-int mach_dep_reorg_dump = 0;\n-#endif\n-int ssa_dump = 0;\n-static int flag_print_mem = 0;\n-static int version_flag = 0;\n-static char * filename = 0;\n+/* Describes a dump file.  */\n+\n+struct dump_file_info\n+{\n+  /* The unique extension to apply, e.g. \".jump\".  */\n+  const char * const extension;\n+\n+  /* The -d<c> character that enables this dump file.  */\n+  char const debug_switch;\n+\n+  /* True if there is a corresponding graph dump file.  */\n+  char const graph_dump_p;\n+\n+  /* True if the user selected this dump.  */\n+  char enabled;\n+\n+  /* True if the files have been initialized (ie truncated).  */\n+  char initialized;\n+};\n+\n+/* Enumerate the extant dump files.  */\n+\n+enum dump_file_index\n+{\n+  DFI_rtl,\n+  DFI_jump,\n+  DFI_cse,\n+  DFI_addressof,\n+  DFI_ssa,\n+  DFI_ussa,\n+  DFI_gcse,\n+  DFI_loop,\n+  DFI_cse2,\n+  DFI_bp,\n+  DFI_flow,\n+  DFI_combine,\n+  DFI_regmove,\n+  DFI_sched,\n+  DFI_lreg,\n+  DFI_greg,\n+  DFI_flow2,\n+  DFI_peephole2,\n+  DFI_sched2,\n+  DFI_bbro,\n+  DFI_jump2,\n+  DFI_mach,\n+  DFI_dbr,\n+  DFI_stack,\n+  DFI_MAX\n+};\n+\n+/* Describes all the dump files.  Should be kept in order of the\n+   pass and in sync with dump_file_index above.  */\n+\n+struct dump_file_info dump_file[DFI_MAX] = \n+{\n+  { \"rtl\",\t'r', 0, 0, 0 },\n+  { \"jump\",\t'j', 0, 0, 0 },\n+  { \"cse\",\t's', 0, 0, 0 },\n+  { \"addressof\", 'F', 0, 0, 0 },\n+  { \"ssa\",\t'e', 1, 0, 0 },\n+  { \"ussa\",\t'e', 1, 0, 0 },\t/* Yes, duplicate enable switch.  */\n+  { \"gcse\",\t'G', 1, 0, 0 },\n+  { \"loop\",\t'L', 1, 0, 0 },\n+  { \"cse2\",\t't', 1, 0, 0 },\n+  { \"bp\",\t'b', 1, 0, 0 },\n+  { \"flow\",\t'f', 1, 0, 0 },\n+  { \"combine\",\t'c', 1, 0, 0 },\n+  { \"regmove\",\t'N', 1, 0, 0 },\n+  { \"sched\",\t'S', 1, 0, 0 },\n+  { \"lreg\",\t'l', 1, 0, 0 },\n+  { \"greg\",\t'g', 1, 0, 0 },\n+  { \"flow2\",\t'w', 1, 0, 0 },\n+  { \"peephole2\", 'z', 1, 0, 0 },\n+  { \"sched2\",\t'R', 1, 0, 0 },\n+  { \"bbro\",\t'B', 1, 0, 0 },\n+  { \"jump2\",\t'J', 1, 0, 0 },\n+  { \"mach\",\t'M', 1, 0, 0 },\n+  { \"dbr\",\t'd', 0, 0, 0 },\n+  { \"stack\",\t'k', 1, 0, 0 },\n+};\n+\n+static int open_dump_file PARAMS ((enum dump_file_index, tree));\n+static void close_dump_file PARAMS ((enum dump_file_index,\n+\t\t\t\t     void (*) (FILE *, rtx), rtx));\n+\n+/* Other flags saying which kinds of debugging dump have been requested.  */\n+\n+int rtl_dump_and_exit;\n+int flag_print_asm_name;\n+static int flag_print_mem;\n+static int version_flag;\n+static char * filename;\n enum graph_dump_types graph_dump_format;\n \n /* Name for output file of assembly code, specified with -o.  */\n@@ -1736,87 +1789,96 @@ output_lang_identify (asm_out_file)\n }\n #endif\n \n-/* Routine to open a dump file.  */\n-static void\n-open_dump_file (suffix, function_name)\n-     const char *suffix;\n-     const char *function_name;\n+/* Routine to open a dump file.  Return true if the dump file is enabled.  */\n+\n+static int\n+open_dump_file (index, decl)\n+     enum dump_file_index index;\n+     tree decl;\n {\n-  char *dumpname;\n+  char *dump_name;\n+  const char *open_arg;\n+  char seq[16];\n+\n+  if (! dump_file[index].enabled)\n+    return 0;\n \n   TIMEVAR\n     (dump_time,\n-     {\n-       dumpname = concat (dump_base_name, suffix, NULL);\n-\n-       if (rtl_dump_file != NULL)\n-\t fclose (rtl_dump_file);\n+      {\n+\tif (rtl_dump_file != NULL)\n+\t  fclose (rtl_dump_file);\n   \n-       rtl_dump_file = fopen (dumpname, \"a\");\n-       \n-       if (rtl_dump_file == NULL)\n-\t pfatal_with_name (dumpname);\n+\tsprintf (seq, \".%02d.\", index);\n+\n+\tif (! dump_file[index].initialized)\n+\t  {\n+\t    /* If we've not initialized the files, do so now.  */\n+\t    if (graph_dump_format != no_graph\n+\t\t&& dump_file[index].graph_dump_p)\n+\t      {\n+\t\tdump_name = concat (seq, dump_file[index].extension, NULL);\n+\t\tclean_graph_dump_file (dump_base_name, dump_name);\n+\t\tfree (dump_name);\n+\t      }\n+\t    dump_file[index].initialized = 1;\n+\t    open_arg = \"w\";\n+\t  }\n+\telse\n+\t  open_arg = \"a\";\n+\n+\tdump_name = concat (dump_base_name, seq,\n+\t\t\t    dump_file[index].extension, NULL);\n+\n+\trtl_dump_file = fopen (dump_name, open_arg);\n+\tif (rtl_dump_file == NULL)\n+\t  pfatal_with_name (dump_name);\n        \n-       free (dumpname);\n+\tfree (dump_name);\n \n-       if (function_name)\n-\t fprintf (rtl_dump_file, \"\\n;; Function %s\\n\\n\", function_name);\n-     });\n+\tif (decl)\n+\t  fprintf (rtl_dump_file, \"\\n;; Function %s\\n\\n\",\n+\t\t   decl_printable_name (decl, 2));\n+      });\n   \n-  return;\n+  return 1;\n }\n \n /* Routine to close a dump file.  */\n+\n static void\n-close_dump_file (func, insns)\n+close_dump_file (index, func, insns)\n+     enum dump_file_index index;\n      void (*func) PARAMS ((FILE *, rtx));\n      rtx    insns;\n {\n+  if (! rtl_dump_file)\n+    return;\n+\n   TIMEVAR\n     (dump_time,\n-     {\n-       if (func)\n+      {\n+\tif (insns\n+\t    && graph_dump_format != no_graph\n+\t    && dump_file[index].graph_dump_p)\n+\t  {\n+\t    char seq[16];\n+\t    char *suffix;\n+\n+\t    sprintf (seq, \".%02d.\", index);\n+\t    suffix = concat (seq, dump_file[index].extension, NULL);\n+\t    print_rtl_graph_with_bb (dump_base_name, suffix, insns);\n+\t    free (suffix);\n+\t  }\n+\n+       if (func && insns)\n \t func (rtl_dump_file, insns);\n        \n        fflush (rtl_dump_file);\n        fclose (rtl_dump_file);\n        \n        rtl_dump_file = NULL;\n      });\n-\n-  return;\n-}\n-\n-/* Routine to dump rtl into a file.  */\n-static void\n-dump_rtl (suffix, decl, func, insns)\n-     const char *suffix;\n-     tree   decl;\n-     void (*func) PARAMS ((FILE *, rtx));\n-     rtx    insns;\n-{\n-  open_dump_file (suffix, decl_printable_name (decl, 2));\n-  close_dump_file (func, insns);\n-}\n-\n-/* Routine to empty a dump file.  */\n-static void\n-clean_dump_file (suffix)\n-  const char *suffix;\n-{\n-  char * const dumpname = concat (dump_base_name, suffix, NULL);\n-\n-  rtl_dump_file = fopen (dumpname, \"w\");\n-\n-  if (rtl_dump_file == NULL)\n-    pfatal_with_name (dumpname);       \n-\n-  free (dumpname);\n-\n-  fclose (rtl_dump_file);\n-  rtl_dump_file = NULL;\n-  \n-  return;\n }\n \n /* Do any final processing required for the declarations in VEC, of\n@@ -2148,153 +2210,6 @@ compile_file (name)\n \tpfatal_with_name (aux_info_file_name);\n     }\n \n-  /* Clear the dump files.  */\n-  if (rtl_dump)\n-    clean_dump_file (\".00.rtl\");\n-  if (jump_opt_dump)\n-    {\n-      clean_dump_file (\".01.jump\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".01.jump\");\n-    }\n-  if (cse_dump)\n-    {\n-      clean_dump_file (\".02.cse\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".02.cse\");\n-    }\n-  if (addressof_dump)\n-    {\n-      clean_dump_file (\".03.addressof\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".03.addressof\");\n-    }\n-  if (ssa_dump)\n-    {\n-      clean_dump_file (\".033.ssa\");\n-      clean_dump_file (\".037.ussa\");\n-    }\n-  if (gcse_dump)\n-    {\n-      clean_dump_file (\".04.gcse\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".04.gcse\");\n-    }\n-  if (loop_dump)\n-    {\n-      clean_dump_file (\".05.loop\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".05.loop\");\n-    }\n-  if (cse2_dump)\n-    {\n-      clean_dump_file (\".06.cse2\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".06.cse2\");\n-    }\n-  if (branch_prob_dump)\n-    {\n-      clean_dump_file (\".07.bp\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".07.bp\");\n-    }\n-  if (flow_dump)\n-    {\n-      clean_dump_file (\".08.flow\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".08.flow\");\n-    }\n-  if (combine_dump)\n-    {\n-      clean_dump_file (\".09.combine\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".09.combine\");\n-    }\n-  if (regmove_dump)\n-    {\n-      clean_dump_file (\".10.regmove\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".10.regmove\");\n-    }\n-#ifdef INSN_SCHEDULING\n-  if (sched_dump)\n-    {\n-      clean_dump_file (\".11.sched\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".11.sched\");\n-    }\n-#endif\n-  if (local_reg_dump)\n-    {\n-      clean_dump_file (\".12.lreg\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".12.lreg\");\n-    }\n-  if (global_reg_dump)\n-    {\n-      clean_dump_file (\".13.greg\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".13.greg\");\n-    }\n-  if (flow2_dump)\n-    {\n-      clean_dump_file (\".14.flow2\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".14.flow2\");\n-    }\n-#ifdef HAVE_peephole2\n-  if (peephole2_dump)\n-    {\n-      clean_dump_file (\".15.peephole2\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".15.peephole2\");\n-    }\n-#endif\n-#ifdef INSN_SCHEDULING\n-  if (sched2_dump)\n-    {\n-      clean_dump_file (\".16.sched2\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".16.sched2\");\n-    }\n-#endif\n-  if (reorder_blocks_dump)\n-    {\n-      clean_dump_file (\".bbro\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".bbro\");\n-    }\n-  if (jump2_opt_dump)\n-    {\n-      clean_dump_file (\".17.jump2\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".17.jump2\");\n-    }\n-#ifdef MACHINE_DEPENDENT_REORG\n-  if (mach_dep_reorg_dump)\n-    {\n-      clean_dump_file (\".18.mach\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".18.mach\");\n-    }\n-#endif\n-#ifdef DELAY_SLOTS\n-  if (dbr_sched_dump)\n-    {\n-      clean_dump_file (\".19.dbr\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".19.dbr\");\n-    }\n-#endif\n-#ifdef STACK_REGS\n-  if (stack_reg_dump)\n-    {\n-      clean_dump_file (\".20.stack\");\n-      if (graph_dump_format != no_graph)\n-\tclean_graph_dump_file (dump_base_name, \".20.stack\");\n-    }\n-#endif\n-\n   /* Open assembler code output file.  */\n \n   if (flag_syntax_only)\n@@ -2559,19 +2474,19 @@ compile_file (name)\n \n   end_final (dump_base_name);\n    \n-  if (branch_prob_dump)\n-    open_dump_file (\".07.bp\", NULL);\n+  if (flag_test_coverage || flag_branch_probabilities)\n+    {\n+      open_dump_file (DFI_bp, NULL);\n    \n-  TIMEVAR (dump_time, end_branch_prob (rtl_dump_file));\n+      TIMEVAR (dump_time, end_branch_prob (rtl_dump_file));\n    \n-  if (branch_prob_dump)\n-    close_dump_file (NULL, NULL_RTX);\n+      close_dump_file (DFI_bp, NULL, NULL_RTX);\n+    }\n    \n #ifdef ASM_FILE_END\n   ASM_FILE_END (asm_out_file);\n #endif\n \n-\n   /* Language-specific end of compilation actions.  */\n  finish_syntax:\n   lang_finish ();\n@@ -2585,11 +2500,10 @@ compile_file (name)\n \tunlink (aux_info_file_name);\n     }\n \n-  if (combine_dump)\n+  if (optimize > 0 && open_dump_file (DFI_combine, NULL))\n     {\n-      open_dump_file (\".09.combine\", NULL);\n       TIMEVAR (dump_time, dump_combine_total_stats (rtl_dump_file));\n-      close_dump_file (NULL, NULL_RTX);\n+      close_dump_file (DFI_combine, NULL, NULL_RTX);\n     }\n \n   /* Close non-debugging input and output files.  Take special care to note\n@@ -2605,60 +2519,19 @@ compile_file (name)\n   /* Do whatever is necessary to finish printing the graphs.  */\n   if (graph_dump_format != no_graph)\n     {\n-      if (jump_opt_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".01.jump\");\n-      if (cse_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".02.cse\");\n-      if (addressof_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".03.addressof\");\n-      if (gcse_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".04.gcse\");\n-      if (loop_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".05.loop\");\n-      if (cse2_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".06.cse2\");\n-      if (branch_prob_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".07.bp\");\n-      if (flow_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".08.flow\");\n-      if (combine_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".09.combine\");\n-      if (regmove_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".10.regmove\");\n-#ifdef INSN_SCHEDULING\n-      if (sched_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".11.sched\");\n-#endif\n-      if (local_reg_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".12.lreg\");\n-      if (global_reg_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".13.greg\");\n-      if (flow2_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".14.flow2\");\n-#ifdef HAVE_peephole2\n-      if (flow2_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".15.peephole2\");\n-#endif\n-#ifdef INSN_SCHEDULING\n-      if (sched2_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".16.sched2\");\n-#endif\n-      if (reorder_blocks_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".bbro\");\n-      if (jump2_opt_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".17.jump2\");\n-#ifdef MACHINE_DEPENDENT_REORG\n-      if (mach_dep_reorg_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".18.mach\");\n-#endif\n-#ifdef DELAY_SLOTS\n-      if (dbr_sched_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".19.dbr\");\n-#endif\n-#ifdef STACK_REGS\n-      if (stack_reg_dump)\n-\tfinish_graph_dump_file (dump_base_name, \".20.stack\");\n-#endif\n+      int i;\n+\n+      for (i = 0; i < DFI_MAX; ++i)\n+\tif (dump_file[i].initialized && dump_file[i].graph_dump_p)\n+\t  {\n+\t    char seq[16];\n+\t    char *suffix;\n+\n+\t    sprintf (seq, \".%02d.\", i);\n+\t    suffix = concat (seq, dump_file[i].extension, NULL);\n+\t    finish_graph_dump_file (dump_base_name, suffix);\n+\t    free (suffix);\n+\t  }\n     }\n \n   /* Free up memory for the benefit of leak detectors.  */\n@@ -2936,14 +2809,11 @@ rest_of_compilation (decl)\n \n       /* Dump the rtl code if we are dumping rtl.  */\n \n-      if (rtl_dump)\n+      if (open_dump_file (DFI_rtl, decl))\n \t{\n-\t  open_dump_file (\".00.rtl\", decl_printable_name (decl, 2));\n-\t  \n \t  if (DECL_SAVED_INSNS (decl))\n \t    fprintf (rtl_dump_file, \";; (integrable)\\n\\n\");\n-\t  \n-\t  close_dump_file (print_rtl, insns);\n+\t  close_dump_file (DFI_rtl, print_rtl, insns);\n \t}\n \n       /* If function is inline, and we don't yet know whether to\n@@ -3069,8 +2939,7 @@ rest_of_compilation (decl)\n   /* Find all the EH handlers.  */\n   find_exception_handler_labels ();\n \n-  if (jump_opt_dump)\n-    open_dump_file (\".01.jump\", decl_printable_name (decl, 2));\n+  open_dump_file (DFI_jump, decl);\n \n   /* Always do one jump optimization pass to ensure that JUMP_LABEL fields\n      are initialized and to compute whether control can drop off the end\n@@ -3086,9 +2955,7 @@ rest_of_compilation (decl)\n      memory.  */\n   renumber_insns (rtl_dump_file);\n \n-  /* Dump rtl code after jump, if we are doing that.  */\n-  if (jump_opt_dump)\n-    close_dump_file (print_rtl, insns);\n+  close_dump_file (DFI_jump, print_rtl, insns);\n \n   /* Now is when we stop if -fsyntax-only and -Wreturn-type.  */\n   if (rtl_dump_and_exit || flag_syntax_only || DECL_DEFER_OUTPUT (decl))\n@@ -3108,8 +2975,7 @@ rest_of_compilation (decl)\n \n   if (optimize > 0)\n     {\n-      if (cse_dump)\n-\topen_dump_file (\".02.cse\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_cse, decl);\n \n       TIMEVAR (cse_time, reg_scan (insns, max_reg_num (), 1));\n \n@@ -3139,43 +3005,30 @@ rest_of_compilation (decl)\n          removed a bunch more instructions.  */\n       renumber_insns (rtl_dump_file);\n \n-      /* Dump rtl code after cse, if we are doing that.  */\n-      if (cse_dump)\n-\t{\n-\t  close_dump_file (print_rtl, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".02.cse\", insns);\n-\t}\n+      close_dump_file (DFI_cse, print_rtl, insns);\n     }\n \n+  open_dump_file (DFI_addressof, decl);\n+\n   purge_addressof (insns);\n   reg_scan (insns, max_reg_num (), 1);\n \n-  if (addressof_dump)\n-    {\n-      dump_rtl (\".03.addressof\", decl, print_rtl, insns);\n-      if (graph_dump_format != no_graph)\n-\tprint_rtl_graph_with_bb (dump_base_name, \".03.addressof\", insns);\n-    }\n+  close_dump_file (DFI_addressof, print_rtl, insns);\n \n   if (ggc_p)\n     ggc_collect ();\n \n   if (flag_ssa)\n     {\n-      if (ssa_dump)\n-\topen_dump_file (\".033.ssa\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_ssa, decl);\n       convert_to_ssa ();\n-      if (ssa_dump)\n-\tclose_dump_file (print_rtl_with_bb, insns);\n+      close_dump_file (DFI_ssa, print_rtl_with_bb, insns);\n \n-      if (ssa_dump)\n-\topen_dump_file (\".037.ussa\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_ussa, decl);\n       convert_from_ssa ();\n       /* New registers have been created.  Rescan their usage.  */\n       reg_scan (insns, max_reg_num (), 1);\n-      if (ssa_dump)\n-\tclose_dump_file (print_rtl_with_bb, insns);\n+      close_dump_file (DFI_ussa, print_rtl_with_bb, insns);\n \n       /* Life analysis used in SSA adds log_links but these shouldn't\n \t be there until the flow stage, so clear them away.  */\n@@ -3189,8 +3042,7 @@ rest_of_compilation (decl)\n \n   if (optimize > 0 && flag_gcse)\n     {\n-      if (gcse_dump)\n-\topen_dump_file (\".04.gcse\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_gcse, decl);\n \n       TIMEVAR (gcse_time, tem = gcse_main (insns, rtl_dump_file));\n \n@@ -3203,12 +3055,7 @@ rest_of_compilation (decl)\n \t\t\t\t\t     !JUMP_AFTER_REGSCAN));\n         }\n \n-      if (gcse_dump)\n-\t{\n-\t  close_dump_file (print_rtl, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".04.gcse\", insns);\n-\t}\n+      close_dump_file (DFI_gcse, print_rtl, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n@@ -3217,9 +3064,8 @@ rest_of_compilation (decl)\n \n   if (optimize > 0)\n     {\n-      if (loop_dump)\n-\topen_dump_file (\".05.loop\", decl_printable_name (decl, 2));\n-\t\n+      open_dump_file (DFI_loop, decl);\n+\n       TIMEVAR\n \t(loop_time,\n \t {\n@@ -3243,14 +3089,7 @@ rest_of_compilation (decl)\n \t   loop_optimize (insns, rtl_dump_file, flag_unroll_loops, 1);\n \t });\n \n-      /* Dump rtl code after loop opt, if we are doing that.  */\n-\n-      if (loop_dump)\n-\t{\n-\t  close_dump_file (print_rtl, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".05.loop\", insns);\n-\t}\n+      close_dump_file (DFI_loop, print_rtl, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n@@ -3263,8 +3102,7 @@ rest_of_compilation (decl)\n \n   if (optimize > 0)\n     {\n-      if (cse2_dump)\n-\topen_dump_file (\".06.cse2\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_cse2, decl);\n \n       if (flag_rerun_cse_after_loop)\n \t{\n@@ -3295,35 +3133,23 @@ rest_of_compilation (decl)\n \t  TIMEVAR (jump_time, thread_jumps (insns, max_reg_num (), 0));\n \t}\n \n-      /* Dump rtl code after cse, if we are doing that.  */\n-      if (cse2_dump)\n-\t{\n-\t  close_dump_file (print_rtl, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".06.cse2\", insns);\n-\t}\n+      close_dump_file (DFI_cse2, print_rtl, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n     }\n \n   if (profile_arc_flag || flag_test_coverage || flag_branch_probabilities)\n     {\n-      if (branch_prob_dump)\n-\topen_dump_file (\".07.bp\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_bp, decl);\n \n       TIMEVAR\n \t(branch_prob_time,\n \t {\n \t   branch_prob (insns, rtl_dump_file);\n \t });\n \n-      if (branch_prob_dump)\n-\t{\n-\t  close_dump_file (print_rtl, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".07.bp\", insns);\n-\t}\n+      close_dump_file (DFI_bp, print_rtl, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n@@ -3334,8 +3160,7 @@ rest_of_compilation (decl)\n   /* Print function header into flow dump now\n      because doing the flow analysis makes some of the dump.  */\n \n-  if (flow_dump)\n-    open_dump_file (\".08.flow\", decl_printable_name (decl, 2));\n+  open_dump_file (DFI_flow, decl);\n   \n   /* Do control and data flow analysis; wrote some of the results to\n      the dump file.  */\n@@ -3358,14 +3183,7 @@ rest_of_compilation (decl)\n \tsetjmp_args_warning ();\n     }\n \n-  /* Dump rtl after flow analysis.  */\n-\n-  if (flow_dump)\n-    {\n-      close_dump_file (print_rtl_with_bb, insns);\n-      if (graph_dump_format != no_graph)\n-\tprint_rtl_graph_with_bb (dump_base_name, \".08.flow\", insns);\n-    }\n+  close_dump_file (DFI_flow, print_rtl_with_bb, insns);\n \n   if (ggc_p)\n     ggc_collect ();\n@@ -3380,6 +3198,8 @@ rest_of_compilation (decl)\n     {\n       int rebuild_jump_labels_after_combine = 0;\n \n+      open_dump_file (DFI_combine, decl);\n+\n       TIMEVAR (combine_time, \n \t       {\n \t\t rebuild_jump_labels_after_combine\n@@ -3394,14 +3214,7 @@ rest_of_compilation (decl)\n \t  TIMEVAR (jump_time, rebuild_jump_labels (insns));\n \t}\n \n-      /* Dump rtl code after insn combination.  */\n-\n-      if (combine_dump)\n-\t{\n-\t  dump_rtl (\".09.combine\", decl, print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".09.combine\", insns);\n-\t}\n+      close_dump_file (DFI_combine, print_rtl_with_bb, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n@@ -3411,18 +3224,12 @@ rest_of_compilation (decl)\n      necessary for two-address machines.  */\n   if (optimize > 0 && (flag_regmove || flag_expensive_optimizations))\n     {\n-      if (regmove_dump)\n-\topen_dump_file (\".10.regmove\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_regmove, decl);\n \n       TIMEVAR (regmove_time, regmove_optimize (insns, max_reg_num (),\n \t\t\t\t\t       rtl_dump_file));\n \n-      if (regmove_dump)\n-\t{\n-\t  close_dump_file (print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".10.regmove\", insns);\n-\t}\n+      close_dump_file (DFI_regmove, print_rtl_with_bb, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n@@ -3439,22 +3246,14 @@ rest_of_compilation (decl)\n      because doing the sched analysis makes some of the dump.  */\n   if (optimize > 0 && flag_schedule_insns)\n     {\n-      if (sched_dump)\n-\topen_dump_file (\".11.sched\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_sched, decl);\n \n       /* Do control and data sched analysis,\n \t and write some of the results to dump file.  */\n \n       TIMEVAR (sched_time, schedule_insns (rtl_dump_file));\n \n-      /* Dump rtl after instruction scheduling.  */\n-\n-      if (sched_dump)\n-\t{\n-\t  close_dump_file (print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".11.sched\", insns);\n-\t}\n+      close_dump_file (DFI_sched, print_rtl_with_bb, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n@@ -3466,8 +3265,7 @@ rest_of_compilation (decl)\n      epilogue thus changing register elimination offsets.  */\n   current_function_is_leaf = leaf_function_p ();\n \n-  if (local_reg_dump)\n-    open_dump_file (\".12.lreg\", decl_printable_name (decl, 2));\n+  open_dump_file (DFI_lreg, decl);\n \n   /* Allocate pseudo-regs that are used only within 1 basic block. \n \n@@ -3484,23 +3282,18 @@ rest_of_compilation (decl)\n \t     rebuild_label_notes_after_reload = local_alloc ();\n \t   });\n \n-  /* Dump rtl code after allocating regs within basic blocks.  */\n-\n-  if (local_reg_dump)\n+  if (dump_file[DFI_lreg].enabled)\n     {\n       TIMEVAR (dump_time, dump_flow_info (rtl_dump_file));\n       TIMEVAR (dump_time, dump_local_alloc (rtl_dump_file));\n \n-      close_dump_file (print_rtl_with_bb, insns);\n-      if (graph_dump_format != no_graph)\n-\tprint_rtl_graph_with_bb (dump_base_name, \".12.lreg\", insns);\n+      close_dump_file (DFI_lreg, print_rtl_with_bb, insns);\n     }\n \n   if (ggc_p)\n     ggc_collect ();\n \n-  if (global_reg_dump)\n-    open_dump_file (\".13.greg\", decl_printable_name (decl, 2));\n+  open_dump_file (DFI_greg, decl);\n \n   /* If optimizing, allocate remaining pseudo-regs.  Do the reload\n      pass fixing up any insns that are invalid.  */\n@@ -3541,17 +3334,14 @@ rest_of_compilation (decl)\n   if (rebuild_label_notes_after_reload)\n     TIMEVAR (jump_time, rebuild_jump_labels (insns));\n \n-  if (global_reg_dump)\n+  if (dump_file[DFI_greg].enabled)\n     {\n       TIMEVAR (dump_time, dump_global_regs (rtl_dump_file));\n-      close_dump_file (print_rtl_with_bb, insns);\n-      if (graph_dump_format != no_graph)\n-\tprint_rtl_graph_with_bb (dump_base_name, \".13.greg\", insns);\n+      close_dump_file (DFI_greg, print_rtl_with_bb, insns);\n     }\n \n   /* Re-create the death notes which were deleted during reload.  */\n-  if (flow2_dump)\n-    open_dump_file (\".14.flow2\", decl_printable_name (decl, 2));\n+  open_dump_file (DFI_flow2, decl);\n   \n   TIMEVAR (flow2_time,\n \t   {\n@@ -3587,49 +3377,30 @@ rest_of_compilation (decl)\n \n   flow2_completed = 1;\n \n-  if (flow2_dump)\n-    {\n-      close_dump_file (print_rtl_with_bb, insns);\n-      if (graph_dump_format != no_graph)\n-\tprint_rtl_graph_with_bb (dump_base_name, \".14.flow2\", insns);\n-    }\n+  close_dump_file (DFI_flow2, print_rtl_with_bb, insns);\n \n #ifdef HAVE_peephole2\n   if (optimize > 0 && flag_peephole2)\n     {\n-      if (peephole2_dump)\n-\topen_dump_file (\".15.peephole2\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_peephole2, decl);\n \n       TIMEVAR (peephole2_time, peephole2_optimize (rtl_dump_file));\n \n-      if (peephole2_dump)\n-\t{\n-\t  close_dump_file (print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".15.peephole2\", insns);\n-\t}\n+      close_dump_file (DFI_peephole2, print_rtl_with_bb, insns);\n     }\n #endif\n \n #ifdef INSN_SCHEDULING\n   if (optimize > 0 && flag_schedule_insns_after_reload)\n     {\n-      if (sched2_dump)\n-\topen_dump_file (\".16.sched2\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_sched2, decl);\n \n       /* Do control and data sched analysis again,\n \t and write some more of the results to dump file.  */\n \n       TIMEVAR (sched2_time, schedule_insns (rtl_dump_file));\n \n-      /* Dump rtl after post-reorder instruction scheduling.  */\n-\n-      if (sched2_dump)\n-\t{\n-\t  close_dump_file (print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".16.sched2\", insns);\n-\t}\n+      close_dump_file (DFI_sched2, print_rtl_with_bb, insns);\n \n       if (ggc_p)\n \tggc_collect ();\n@@ -3643,54 +3414,37 @@ rest_of_compilation (decl)\n \n   if (optimize > 0 && flag_reorder_blocks)\n     {\n-      if (reorder_blocks_dump)\n-\topen_dump_file (\".bbro\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_bbro, decl);\n \n       TIMEVAR (reorder_blocks_time, reorder_basic_blocks ());\n \n-      if (reorder_blocks_dump)\n-\t{\n-\t  close_dump_file (print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".bbro\", insns);\n-\t}\n+      close_dump_file (DFI_bbro, print_rtl_with_bb, insns);\n     }    \n \n   /* One more attempt to remove jumps to .+1 left by dead-store elimination. \n      Also do cross-jumping this time and delete no-op move insns.  */\n \n   if (optimize > 0)\n     {\n+      open_dump_file (DFI_jump2, decl);\n+\n       TIMEVAR (jump_time, jump_optimize (insns, JUMP_CROSS_JUMP,\n \t\t\t\t\t JUMP_NOOP_MOVES,\n \t\t\t\t\t !JUMP_AFTER_REGSCAN));\n \n-      /* Dump rtl code after jump, if we are doing that.  */\n-\n-      if (jump2_opt_dump)\n-\t{\n-\t  dump_rtl (\".17.jump2\", decl, print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".17.jump2\", insns);\n-\t}\n+      close_dump_file (DFI_jump2, print_rtl_with_bb, insns);\n     }\n \n   /* If a machine dependent reorganization is needed, call it.  */\n #ifdef MACHINE_DEPENDENT_REORG\n-  if (mach_dep_reorg_dump)\n-    open_dump_file (\".18.mach\", decl_printable_name (decl, 2));\n+  open_dump_file (DFI_mach, decl);\n \n-   MACHINE_DEPENDENT_REORG (insns);\n+  MACHINE_DEPENDENT_REORG (insns);\n \n-   if (mach_dep_reorg_dump)\n-     {\n-       close_dump_file (print_rtl_with_bb, insns);\n-       if (graph_dump_format != no_graph)\n-\t print_rtl_graph_with_bb (dump_base_name, \".18.mach\", insns);\n-     }\n+  close_dump_file (DFI_mach, print_rtl_with_bb, insns);\n \n-   if (ggc_p)\n-     ggc_collect ();\n+  if (ggc_p)\n+    ggc_collect ();\n #endif\n \n   /* If a scheduling pass for delayed branches is to be done,\n@@ -3699,25 +3453,19 @@ rest_of_compilation (decl)\n #ifdef DELAY_SLOTS\n   if (optimize > 0 && flag_delayed_branch)\n     {\n-      if (dbr_sched_dump)\n-\topen_dump_file (\".19.dbr\", decl_printable_name (decl, 2));\n+      open_dump_file (DFI_dbr, decl);\n \n       TIMEVAR\n \t(dbr_sched_time,\n \t {\n            dbr_schedule (insns, rtl_dump_file);\n \t });\n \n-      if (dbr_sched_dump)\n-\t{\n-\t  close_dump_file (print_rtl_with_bb, insns);\n-\t  if (graph_dump_format != no_graph)\n-\t    print_rtl_graph_with_bb (dump_base_name, \".19.dbr\", insns);\n-\t}\n-    }\n+      close_dump_file (DFI_dbr, print_rtl_with_bb, insns);\n \n-   if (ggc_p)\n-     ggc_collect ();\n+      if (ggc_p)\n+\tggc_collect ();\n+    }\n #endif\n \n   /* Shorten branches. \n@@ -3730,17 +3478,11 @@ rest_of_compilation (decl)\n \t   });\n \n #ifdef STACK_REGS\n-  if (stack_reg_dump)\n-    open_dump_file (\".20.stack\", decl_printable_name (decl, 2));\n+  open_dump_file (DFI_stack, decl);\n \n   TIMEVAR (stack_reg_time, reg_to_stack (insns, rtl_dump_file));\n \n-  if (stack_reg_dump)\n-    {\n-      close_dump_file (print_rtl_with_bb, insns);\n-      if (graph_dump_format != no_graph)\n-\tprint_rtl_graph_with_bb (dump_base_name, \".20.stack\", insns);\n-    }\n+  close_dump_file (DFI_stack, print_rtl_with_bb, insns);\n \n   if (ggc_p)\n     ggc_collect ();\n@@ -4057,138 +3799,48 @@ static void\n decode_d_option (arg)\n      const char * arg;\n {\n-  while (* arg)\n-    switch (* arg ++)\n+  int i, c, matched;\n+\n+  while (*arg)\n+    switch (c = *arg++)\n       {\n       case 'a':\n-\tbranch_prob_dump = 1;\n-\tcombine_dump = 1;\n-#ifdef DELAY_SLOTS\n-\tdbr_sched_dump = 1;\n-#endif\n-\treorder_blocks_dump = 1;\n-\tflow_dump = 1;\n-\tflow2_dump = 1;\n-\tglobal_reg_dump = 1;\n-\tjump_opt_dump = 1;\n-\taddressof_dump = 1;\n-\tjump2_opt_dump = 1;\n-\tlocal_reg_dump = 1;\n-\tloop_dump = 1;\n-\tregmove_dump = 1;\n-\trtl_dump = 1;\n-\tcse_dump = 1;\n-\tcse2_dump = 1;\n-\tgcse_dump = 1;\n-\tsched_dump = 1;\n-\tsched2_dump = 1;\n-#ifdef STACK_REGS\n-\tstack_reg_dump = 1;\n-#endif\n-#ifdef MACHINE_DEPENDENT_REORG\n-\tmach_dep_reorg_dump = 1;\n-#endif\n-\tpeephole2_dump = 1;\n-\tssa_dump = 1;\n+\tfor (i = 0; i < DFI_MAX; ++i)\n+\t  dump_file[i].enabled = 1;\n \tbreak;\n       case 'A':\n \tflag_debug_asm = 1;\n \tbreak;\n-      case 'b':\n-\tbranch_prob_dump = 1;\n-\tbreak;\n-      case 'B':\n-\treorder_blocks_dump = 1;\n-\tbreak;\n-      case 'c':\n-\tcombine_dump = 1;\n-\tbreak;\n-#ifdef DELAY_SLOTS\n-      case 'd':\n-\tdbr_sched_dump = 1;\n-\tbreak;\n-#endif\n-      case 'e':\n-\tssa_dump = 1;\n-\tbreak;\n-      case 'f':\n-\tflow_dump = 1;\n-\tbreak;\n-      case 'F':\n-\taddressof_dump = 1;\n-\tbreak;\n-      case 'g':\n-\tglobal_reg_dump = 1;\n-\tbreak;\n-      case 'G':\n-\tgcse_dump = 1;\n-\tbreak;\n-      case 'j':\n-\tjump_opt_dump = 1;\n-\tbreak;\n-      case 'J':\n-\tjump2_opt_dump = 1;\n-\tbreak;\n-#ifdef STACK_REGS\t\t    \n-      case 'k':\n-\tstack_reg_dump = 1;\n-\tbreak;\n-#endif\n-      case 'l':\n-\tlocal_reg_dump = 1;\n-\tbreak;\n-      case 'L':\n-\tloop_dump = 1;\n-\tbreak;\n       case 'm':\n \tflag_print_mem = 1;\n \tbreak;\n-#ifdef MACHINE_DEPENDENT_REORG\n-      case 'M':\n-\tmach_dep_reorg_dump = 1;\n-\tbreak;\n-#endif\n       case 'p':\n \tflag_print_asm_name = 1;\n \tbreak;\n-      case 'r':\n-\trtl_dump = 1;\n-\tbreak;\n-      case 'R':\n-\tsched2_dump = 1;\n-\tbreak;\n-      case 's':\n-\tcse_dump = 1;\n-\tbreak;\n-      case 'S':\n-\tsched_dump = 1;\n-\tbreak;\n-      case 't':\n-\tcse2_dump = 1;\n-\tbreak;\n-      case 'N':\n-\tregmove_dump = 1;\n-\tbreak;\n       case 'v':\n \tgraph_dump_format = vcg;\n \tbreak;\n-      case 'w':\n-\tflow2_dump = 1;\n-\tbreak;\n       case 'x':\n \trtl_dump_and_exit = 1;\n \tbreak;\n       case 'y':\n \tset_yydebug (1);\n \tbreak;\n-      case 'z':\n-\tpeephole2_dump = 1;\n-\tbreak;\n       case 'D':\t/* These are handled by the preprocessor.  */\n       case 'I':\n \tbreak;\n+\n       default:\n-\twarning (\"unrecognized gcc debugging option: %c\", arg[-1]);\n+\tmatched = 0;\n+\tfor (i = 0; i < DFI_MAX; ++i)\n+\t  if (c == dump_file[i].debug_switch)\n+\t    {\n+\t      dump_file[i].enabled = 1;\n+\t      matched = 1;\n+\t    }\n+\n+\tif (! matched)\n+\t  warning (\"unrecognized gcc debugging option: %c\", c);\n \tbreak;\n       }\n }"}]}