{"sha": "9991d84d2a84355fd3fc9afc89a963f45991bfa9", "node_id": "C_kwDOANBUbNoAKDk5OTFkODRkMmE4NDM1NWZkM2ZjOWFmYzg5YTk2M2Y0NTk5MWJmYTk", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-18T08:06:20Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-18T08:09:26Z"}, "message": "PR tree-optimization/105835: Two narrowing patterns for match.pd.\n\nThis patch resolves PR tree-optimization/105835, which is a code quality\n(dead code elimination) regression at -O1 triggered/exposed by a recent\nchange to canonicalize X&-Y as X*Y.  The new (shorter) form exposes some\nmissed optimization opportunities that can be handled by adding some\nextra simplifications to match.pd.\n\nOne transformation is to simplify \"(short)(x ? 65535 : 0)\" into the\nequivalent \"x ? -1 : 0\", or more accurately x ? (short)-1 : (short)0\",\nas INTEGER_CSTs record their type, and integer conversions can be\npushed inside COND_EXPRs reducing the number of gimple statements.\n\nThe other transformation is that (short)(X * 65535), where X is [0,1],\ninto the equivalent (short)X * -1, (or again (short)-1 where tree's\nINTEGER_CSTs encode their type).  This is valid because multiplications\nwhere one operand is [0,1] are guaranteed not to overflow, and hence\ninteger conversions can also be pushed inside these multiplications.\n\nThese narrowing conversion optimizations can be identified by range\nanalyses, such as EVRP, but these are only performed at -O2 and above,\nwhich is why this regression is only visible with -O1.\n\n2022-06-18  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/105835\n\t* match.pd (convert (mult zero_one_valued_p@1 INTEGER_CST@2)):\n\tNarrow integer multiplication by a zero_one_valued_p operand.\n\t(convert (cond @1 INTEGER_CST@2 INTEGER_CST@3)): Push integer\n\tconversions inside COND_EXPR where both data operands are\n\tinteger constants.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/105835\n\t* gcc.dg/pr105835.c: New test case.", "tree": {"sha": "83023ba9332057b4f6ce9d48a6cf451762ef5947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83023ba9332057b4f6ce9d48a6cf451762ef5947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9991d84d2a84355fd3fc9afc89a963f45991bfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9991d84d2a84355fd3fc9afc89a963f45991bfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9991d84d2a84355fd3fc9afc89a963f45991bfa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9991d84d2a84355fd3fc9afc89a963f45991bfa9/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "479b6f449ee999501ad6eff0b7db8d0cd5b2d28d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479b6f449ee999501ad6eff0b7db8d0cd5b2d28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479b6f449ee999501ad6eff0b7db8d0cd5b2d28d"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "a63b649841bebeba2a95278841c704d0c6c648d7", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9991d84d2a84355fd3fc9afc89a963f45991bfa9/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9991d84d2a84355fd3fc9afc89a963f45991bfa9/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=9991d84d2a84355fd3fc9afc89a963f45991bfa9", "patch": "@@ -1881,6 +1881,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && !TYPE_UNSIGNED (TREE_TYPE (@0)))\n   (mult (convert @0) @1)))\n \n+/* Narrow integer multiplication by a zero_one_valued_p operand.\n+   Multiplication by [0,1] is guaranteed not to overflow.  */\n+(simplify\n+ (convert (mult@0 zero_one_valued_p@1 INTEGER_CST@2))\n+ (if (INTEGRAL_TYPE_P (type)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0)))\n+  (mult (convert @1) (convert @2))))\n+\n /* Convert ~ (-A) to A - 1.  */\n (simplify\n  (bit_not (convert? (negate @0)))\n@@ -4356,6 +4365,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n )\n #endif\n \n+(simplify\n+ (convert (cond@0 @1 INTEGER_CST@2 INTEGER_CST@3))\n+ (if (INTEGRAL_TYPE_P (type)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (@0)))\n+  (cond @1 (convert @2) (convert @3))))\n+\n /* Simplification moved from fold_cond_expr_with_comparison.  It may also\n    be extended.  */\n /* This pattern implements two kinds simplification:"}, {"sha": "354c81c672073478f0cf60a1aa018d0c410cc2db", "filename": "gcc/testsuite/gcc.dg/pr105835.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9991d84d2a84355fd3fc9afc89a963f45991bfa9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105835.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9991d84d2a84355fd3fc9afc89a963f45991bfa9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105835.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105835.c?ref=9991d84d2a84355fd3fc9afc89a963f45991bfa9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+void foo();\n+\n+static int b;\n+\n+static short a(short c, unsigned short d) { return c - d; }\n+\n+int main() {\n+    int e = -(0 < b);\n+    if (a(1, e))\n+        b = 0;\n+    else\n+        foo();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"goto\" \"optimized\" } } */"}]}