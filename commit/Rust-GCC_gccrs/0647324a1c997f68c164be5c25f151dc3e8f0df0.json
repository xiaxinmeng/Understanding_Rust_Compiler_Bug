{"sha": "0647324a1c997f68c164be5c25f151dc3e8f0df0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY0NzMyNGExYzk5N2Y2OGMxNjRiZTVjMjVmMTUxZGMzZThmMGRmMA==", "commit": {"author": {"name": "Andreas Simbuerger", "email": "simbuerg@fim.uni-passau.de", "date": "2010-08-11T20:26:38Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:26:38Z"}, "message": "Move cloog-related functions from graphite-ppl.{c,h} to new graphite-cloog-util.{c,h}.\n\n2010-07-05  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n\n\t* Makefile.in\n\t(OBJS-common): Added graphite-cloog-util.o.\n\t(graphite-clast-to-gimple.o): Added graphite-cloog-util.h.\n\t(graphite-cloog-util.o): New.\n\t(graphite-ppl.o): Added graphite-cloog-util.h.\n\t* graphite-clast-to-gimple.c:\n\tAdded graphite-cloog-util.h to include statements.\n\t* graphite-cloog-util.c: New.\n\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved from graphite-ppl.c.\n\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n\t(insert_constraint_into_matrix): Same.\n\t(ppl_Constrain_System_number_of_constraints): Same.\n\t(new_Cloog_Matrix_from_ppl_Constraint_System): Same.\n\t(oppose_constraint): Same.\n\t(cloog_matrix_to_ppl_constraint): Same.\n\t(new_Constraint_System_from_Cloog_Matrix): Same.\n\t* graphite-cloog-util.h: New.\n\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved from graphite-ppl.h.\n\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n\t(insert_constraint_into_matrix): Same.\n\t* graphite-ppl.c:\n\tAdded graphite-cloog-util.h to include statements.\n\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved to graphite-cloog-util.c.\n\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n\t(insert_constraint_into_matrix): Same.\n\t(ppl_Constrain_System_number_of_constraints): Same.\n\t(new_Cloog_Matrix_from_ppl_Constraint_System): Same.\n\t(oppose_constraint): Same.\n\t(cloog_matrix_to_ppl_constraint): Same.\n\t(new_Constraint_System_from_Cloog_Matrix): Same.\n\t* graphite-ppl.h:\n\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved to\n\tgraphite-cloog-util.h.\n\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n\t(insert_constraint_into_matrix): Same.\n\nFrom-SVN: r163134", "tree": {"sha": "ffea38436b09717076e3df262a8cd790d53088d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffea38436b09717076e3df262a8cd790d53088d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0647324a1c997f68c164be5c25f151dc3e8f0df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0647324a1c997f68c164be5c25f151dc3e8f0df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0647324a1c997f68c164be5c25f151dc3e8f0df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0647324a1c997f68c164be5c25f151dc3e8f0df0/comments", "author": {"login": "simbuerg", "id": 598281, "node_id": "MDQ6VXNlcjU5ODI4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/598281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simbuerg", "html_url": "https://github.com/simbuerg", "followers_url": "https://api.github.com/users/simbuerg/followers", "following_url": "https://api.github.com/users/simbuerg/following{/other_user}", "gists_url": "https://api.github.com/users/simbuerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/simbuerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simbuerg/subscriptions", "organizations_url": "https://api.github.com/users/simbuerg/orgs", "repos_url": "https://api.github.com/users/simbuerg/repos", "events_url": "https://api.github.com/users/simbuerg/events{/privacy}", "received_events_url": "https://api.github.com/users/simbuerg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "589ac63c0e4385caf707ed9a496cf541bc9bd6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589ac63c0e4385caf707ed9a496cf541bc9bd6ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/589ac63c0e4385caf707ed9a496cf541bc9bd6ab"}], "stats": {"total": 653, "additions": 403, "deletions": 250}, "files": [{"sha": "87632a66f5eeca641e89651fec7df539dab5ea40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -1,3 +1,48 @@\n+2010-08-02  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* Makefile.in (OBJS-common): Added graphite-cloog-util.o.\n+\t(graphite-clast-to-gimple.o): Added graphite-cloog-util.h.\n+\t(graphite-cloog-util.o): New.\n+\t(graphite-ppl.o): Added graphite-cloog-util.h.\n+\t* graphite-clast-to-gimple.c:\n+\tAdded graphite-cloog-util.h to include statements.\n+\t* graphite-cloog-util.c: New.\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved from graphite-ppl.c.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\t(ppl_Constrain_System_number_of_constraints): Same.\n+\t(new_Cloog_Matrix_from_ppl_Constraint_System): Same.\n+\t(oppose_constraint): Same.\n+\t(cloog_matrix_to_ppl_constraint): Same.\n+\t(new_Constraint_System_from_Cloog_Matrix): Same.\n+\t* graphite-cloog-util.h: New.\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved from graphite-ppl.h.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\t* graphite-ppl.c:\n+\tAdded graphite-cloog-util.h to include statements.\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved to graphite-cloog-util.c.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\t(ppl_Constrain_System_number_of_constraints): Same.\n+\t(new_Cloog_Matrix_from_ppl_Constraint_System): Same.\n+\t(oppose_constraint): Same.\n+\t(cloog_matrix_to_ppl_constraint): Same.\n+\t(new_Constraint_System_from_Cloog_Matrix): Same.\n+\t* graphite-ppl.h:\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved to\n+\tgraphite-cloog-util.h.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\n 2010-08-02  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-clast-to-gimple.c"}, {"sha": "b1c1e8e836d0eeefcbfa97002e551c1c16578b85", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -1,3 +1,49 @@\n+2010-07-05  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* Makefile.in\n+\t(OBJS-common): Added graphite-cloog-util.o.\n+\t(graphite-clast-to-gimple.o): Added graphite-cloog-util.h.\n+\t(graphite-cloog-util.o): New.\n+\t(graphite-ppl.o): Added graphite-cloog-util.h.\n+\t* graphite-clast-to-gimple.c:\n+\tAdded graphite-cloog-util.h to include statements.\n+\t* graphite-cloog-util.c: New.\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved from graphite-ppl.c.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(ppl_Constrain_System_number_of_constraints): Same.\n+\t(new_Cloog_Matrix_from_ppl_Constraint_System): Same.\n+\t(oppose_constraint): Same.\n+\t(cloog_matrix_to_ppl_constraint): Same.\n+\t(new_Constraint_System_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Same. Declared static.\n+\t* graphite-cloog-util.h: New.\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved from graphite-ppl.h.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\t* graphite-ppl.c:\n+\tAdded graphite-cloog-util.h to include statements.\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved to graphite-cloog-util.c.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\t(ppl_Constrain_System_number_of_constraints): Same.\n+\t(new_Cloog_Matrix_from_ppl_Constraint_System): Same.\n+\t(oppose_constraint): Same.\n+\t(cloog_matrix_to_ppl_constraint): Same.\n+\t(new_Constraint_System_from_Cloog_Matrix): Same.\n+\t* graphite-ppl.h:\n+\t(new_Cloog_Matrix_from_ppl_Polyhedron): Moved to\n+\tgraphite-cloog-util.h.\n+\t(new_Cloog_Domain_from_ppl_Polyhedron): Same.\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(new_C_Polyhedron_from_Cloog_Matrix): Same.\n+\t(insert_constraint_into_matrix): Removed.\n+\n 2010-07-04  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-clast-to-gimple.c"}, {"sha": "49b06340a434f412f2379f2d4cf5f4f76f4b00e9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -1239,6 +1239,7 @@ OBJS-common = \\\n \tgraphite.o \\\n \tgraphite-blocking.o \\\n \tgraphite-clast-to-gimple.o \\\n+\tgraphite-cloog-util.o \\\n \tgraphite-dependences.o \\\n \tgraphite-interchange.o \\\n \tgraphite-poly.o \\\n@@ -2679,9 +2680,11 @@ graphite-clast-to-gimple.o: graphite-clast-to-gimple.c $(CONFIG_H) \\\n    $(GGC_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) $(GIMPLE_H) \\\n    $(TREE_DATA_REF_H) tree-pass.h domwalk.h graphite.h \\\n-   pointer-set.h value-prof.h graphite-ppl.h sese.h \\\n+   pointer-set.h value-prof.h graphite-cloog-util.h graphite-ppl.h sese.h \\\n    graphite-scop-detection.h graphite-clast-to-gimple.h graphite-poly.h \\\n    graphite-dependences.h\n+graphite-cloog-util.o: graphite-cloog-util.c $(CONFIG_H) $(SYSTEM_H) \\\n+   coretypes.h $(TMP_H) $(GGC_H)\n graphite-dependences.o: graphite-dependences.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h \\\n    $(TM_H) $(GGC_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n@@ -2701,7 +2704,7 @@ graphite-poly.o: graphite-poly.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    pointer-set.h value-prof.h graphite-ppl.h sese.h output.h graphite-poly.h \\\n    tree-pretty-print.h gimple-pretty-print.h\n graphite-ppl.o: graphite-ppl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(GGC_H) graphite-ppl.h\n+   $(GGC_H) graphite-ppl.h graphite-cloog-util.h\n graphite-scop-detection.o: graphite-scop-detection.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(GGC_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) $(GIMPLE_H) \\"}, {"sha": "f1d74758eb2d15145de444dbc42f7f3e6334720d", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifdef HAVE_cloog\n #include \"cloog/cloog.h\"\n #include \"ppl_c.h\"\n+#include \"graphite-cloog-util.h\"\n #include \"graphite-ppl.h\"\n #include \"graphite.h\"\n #include \"graphite-poly.h\""}, {"sha": "21a7872324c8bbebeb2f253422bd5332cb847380", "filename": "gcc/graphite-cloog-util.c", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-cloog-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-cloog-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-util.c?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -0,0 +1,275 @@\n+/* Gimple Represented as Polyhedra.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Contributed by Sebastian Pop <sebastian.pop@inria.fr>\n+   and Tobias Grosser <grosser@fim.uni-passau.de>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"ggc.h\"\n+\n+#ifdef HAVE_cloog\n+\n+#include \"ppl_c.h\"\n+#include \"cloog/cloog.h\"\n+#include \"graphite-cloog-util.h\"\n+\n+/* Counts the number of constraints in PCS.  */\n+\n+static int\n+ppl_Constrain_System_number_of_constraints (ppl_const_Constraint_System_t pcs)\n+{\n+  ppl_Constraint_System_const_iterator_t cit, end;\n+  int num = 0;\n+\n+  ppl_new_Constraint_System_const_iterator (&cit);\n+  ppl_new_Constraint_System_const_iterator (&end);\n+\n+  for (ppl_Constraint_System_begin (pcs, cit),\n+       ppl_Constraint_System_end (pcs, end);\n+       !ppl_Constraint_System_const_iterator_equal_test (cit, end);\n+       ppl_Constraint_System_const_iterator_increment (cit))\n+    num++;\n+\n+  ppl_delete_Constraint_System_const_iterator (cit);\n+  ppl_delete_Constraint_System_const_iterator (end);\n+  return num;\n+}\n+\n+static void\n+oppose_constraint (CloogMatrix *m, int row)\n+{\n+  int k;\n+\n+  /* Do not oppose the first column: it is the eq/ineq one.  */\n+  for (k = 1; k < m->NbColumns; k++)\n+    mpz_neg (m->p[row][k], m->p[row][k]);\n+}\n+\n+/* Inserts constraint CSTR at row ROW of matrix M.  */\n+\n+static void\n+insert_constraint_into_matrix (CloogMatrix *m, int row,\n+\t\t\t       ppl_const_Constraint_t cstr)\n+{\n+  ppl_Coefficient_t c;\n+  ppl_dimension_type i, dim, nb_cols = m->NbColumns;\n+\n+  ppl_Constraint_space_dimension (cstr, &dim);\n+  ppl_new_Coefficient (&c);\n+\n+  for (i = 0; i < dim; i++)\n+    {\n+      ppl_Constraint_coefficient (cstr, i, c);\n+      ppl_Coefficient_to_mpz_t (c, m->p[row][i + 1]);\n+    }\n+\n+  for (i = dim; i < nb_cols - 1; i++)\n+    mpz_set_si (m->p[row][i + 1], 0);\n+\n+  ppl_Constraint_inhomogeneous_term  (cstr, c);\n+  ppl_Coefficient_to_mpz_t (c, m->p[row][nb_cols - 1]);\n+  mpz_set_si (m->p[row][0], 1);\n+\n+  switch (ppl_Constraint_type (cstr))\n+    {\n+    case PPL_CONSTRAINT_TYPE_LESS_THAN:\n+      oppose_constraint (m, row);\n+    case PPL_CONSTRAINT_TYPE_GREATER_THAN:\n+      mpz_sub_ui (m->p[row][nb_cols - 1],\n+\t\t     m->p[row][nb_cols - 1], 1);\n+      break;\n+\n+    case PPL_CONSTRAINT_TYPE_LESS_OR_EQUAL:\n+      oppose_constraint (m, row);\n+    case PPL_CONSTRAINT_TYPE_GREATER_OR_EQUAL:\n+      break;\n+\n+    case PPL_CONSTRAINT_TYPE_EQUAL:\n+      mpz_set_si (m->p[row][0], 0);\n+      break;\n+\n+    default:\n+      /* Not yet implemented.  */\n+      gcc_unreachable();\n+    }\n+\n+  ppl_delete_Coefficient (c);\n+}\n+\n+/* Creates a CloogMatrix from constraint system PCS.  */\n+\n+static CloogMatrix *\n+new_Cloog_Matrix_from_ppl_Constraint_System (ppl_const_Constraint_System_t pcs)\n+{\n+  CloogMatrix *matrix;\n+  ppl_Constraint_System_const_iterator_t cit, end;\n+  ppl_dimension_type dim;\n+  int rows;\n+  int row = 0;\n+\n+  rows = ppl_Constrain_System_number_of_constraints (pcs);\n+  ppl_Constraint_System_space_dimension (pcs, &dim);\n+  matrix = cloog_matrix_alloc (rows, dim + 2);\n+  ppl_new_Constraint_System_const_iterator (&cit);\n+  ppl_new_Constraint_System_const_iterator (&end);\n+\n+  for (ppl_Constraint_System_begin (pcs, cit),\n+       ppl_Constraint_System_end (pcs, end);\n+       !ppl_Constraint_System_const_iterator_equal_test (cit, end);\n+       ppl_Constraint_System_const_iterator_increment (cit))\n+    {\n+      ppl_const_Constraint_t c;\n+      ppl_Constraint_System_const_iterator_dereference (cit, &c);\n+      insert_constraint_into_matrix (matrix, row, c);\n+      row++;\n+    }\n+\n+  ppl_delete_Constraint_System_const_iterator (cit);\n+  ppl_delete_Constraint_System_const_iterator (end);\n+\n+  return matrix;\n+}\n+\n+/* Creates a CloogMatrix from polyhedron PH.  */\n+\n+CloogMatrix *\n+new_Cloog_Matrix_from_ppl_Polyhedron (ppl_const_Polyhedron_t ph)\n+{\n+  ppl_const_Constraint_System_t pcs;\n+  CloogMatrix *res;\n+\n+  ppl_Polyhedron_get_constraints (ph, &pcs);\n+  res = new_Cloog_Matrix_from_ppl_Constraint_System (pcs);\n+\n+  return res;\n+}\n+\n+/* Translates row ROW of the CloogMatrix MATRIX to a PPL Constraint.  */\n+\n+static ppl_Constraint_t\n+cloog_matrix_to_ppl_constraint (CloogMatrix *matrix, int row)\n+{\n+  int j;\n+  ppl_Constraint_t cstr;\n+  ppl_Coefficient_t coef;\n+  ppl_Linear_Expression_t expr;\n+  ppl_dimension_type dim = matrix->NbColumns - 2;\n+\n+  ppl_new_Coefficient (&coef);\n+  ppl_new_Linear_Expression_with_dimension (&expr, dim);\n+\n+  for (j = 1; j < matrix->NbColumns - 1; j++)\n+    {\n+      ppl_assign_Coefficient_from_mpz_t (coef, matrix->p[row][j]);\n+      ppl_Linear_Expression_add_to_coefficient (expr, j - 1, coef);\n+    }\n+\n+  ppl_assign_Coefficient_from_mpz_t (coef,\n+\t\t\t\t     matrix->p[row][matrix->NbColumns - 1]);\n+  ppl_Linear_Expression_add_to_inhomogeneous (expr, coef);\n+  ppl_delete_Coefficient (coef);\n+\n+  if (mpz_sgn (matrix->p[row][0]))\n+    ppl_new_Constraint (&cstr, expr, PPL_CONSTRAINT_TYPE_EQUAL);\n+  else\n+    ppl_new_Constraint (&cstr, expr, PPL_CONSTRAINT_TYPE_GREATER_OR_EQUAL);\n+\n+  ppl_delete_Linear_Expression (expr);\n+  return cstr;\n+}\n+\n+/* Creates a PPL constraint system from MATRIX.  */\n+\n+static void\n+new_Constraint_System_from_Cloog_Matrix (ppl_Constraint_System_t *pcs,\n+\t\t\t\t\t CloogMatrix *matrix)\n+{\n+  int i;\n+\n+  ppl_new_Constraint_System (pcs);\n+\n+  for (i = 0; i < matrix->NbRows; i++)\n+    {\n+      ppl_Constraint_t c = cloog_matrix_to_ppl_constraint (matrix, i);\n+      ppl_Constraint_System_insert_Constraint (*pcs, c);\n+      ppl_delete_Constraint (c);\n+    }\n+}\n+\n+/* Creates a PPL Polyhedron from MATRIX.  */\n+\n+void\n+new_C_Polyhedron_from_Cloog_Matrix (ppl_Polyhedron_t *ph,\n+\t\t\t\t      CloogMatrix *matrix)\n+{\n+  ppl_Constraint_System_t cs;\n+  new_Constraint_System_from_Cloog_Matrix (&cs, matrix);\n+  ppl_new_C_Polyhedron_recycle_Constraint_System (ph, cs);\n+}\n+\n+/* Creates a CloogDomain from polyhedron PH.  */\n+\n+CloogDomain *\n+new_Cloog_Domain_from_ppl_Polyhedron (ppl_const_Polyhedron_t ph)\n+{\n+  CloogMatrix *mat = new_Cloog_Matrix_from_ppl_Polyhedron (ph);\n+  CloogDomain *res = cloog_domain_matrix2domain (mat);\n+  cloog_matrix_free (mat);\n+  return res;\n+}\n+\n+/* Creates a CloogDomain from a pointset powerset PS.  */\n+\n+CloogDomain *\n+new_Cloog_Domain_from_ppl_Pointset_Powerset (\n+  ppl_Pointset_Powerset_C_Polyhedron_t ps)\n+{\n+  CloogDomain *res = NULL;\n+  ppl_Pointset_Powerset_C_Polyhedron_iterator_t it, end;\n+\n+  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&it);\n+  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&end);\n+\n+  for (ppl_Pointset_Powerset_C_Polyhedron_iterator_begin (ps, it),\n+       ppl_Pointset_Powerset_C_Polyhedron_iterator_end (ps, end);\n+       !ppl_Pointset_Powerset_C_Polyhedron_iterator_equal_test (it, end);\n+       ppl_Pointset_Powerset_C_Polyhedron_iterator_increment (it))\n+    {\n+      ppl_const_Polyhedron_t ph;\n+      CloogDomain *tmp;\n+\n+      ppl_Pointset_Powerset_C_Polyhedron_iterator_dereference (it, &ph);\n+      tmp = new_Cloog_Domain_from_ppl_Polyhedron (ph);\n+\n+      if (res == NULL)\n+\tres = tmp;\n+      else\n+\tres = cloog_domain_union (res, tmp);\n+    }\n+\n+  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (it);\n+  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (end);\n+\n+  gcc_assert (res != NULL);\n+\n+  return res;\n+}\n+#endif"}, {"sha": "17a3be4ef22fbccc4d7f0ee8499cd309409154d8", "filename": "gcc/graphite-cloog-util.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-cloog-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-cloog-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-util.h?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -0,0 +1,30 @@\n+/* Gimple Represented as Polyhedra.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Contributed by Sebastian Pop <sebastian.pop@inria.fr>\n+   and Tobias Grosser <grosser@fim.uni-passau.de>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+#ifndef GRAPHITE_CLOOG_UTIL_H\n+#define GRAPHITE_CLOOG_UTIL_H\n+\n+CloogMatrix *new_Cloog_Matrix_from_ppl_Polyhedron (ppl_const_Polyhedron_t);\n+CloogDomain *new_Cloog_Domain_from_ppl_Polyhedron (ppl_const_Polyhedron_t);\n+CloogDomain * new_Cloog_Domain_from_ppl_Pointset_Powerset (\n+  ppl_Pointset_Powerset_C_Polyhedron_t);\n+void new_C_Polyhedron_from_Cloog_Matrix (ppl_Polyhedron_t *, CloogMatrix *);\n+\n+#endif /* GRAPHITE_CLOOG_UTIL_H */"}, {"sha": "9dd98bba9d83da360a9188368f126dd95cf3af37", "filename": "gcc/graphite-ppl.c", "status": "modified", "additions": 1, "deletions": 242, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-ppl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-ppl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.c?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -29,250 +29,9 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"ppl_c.h\"\n #include \"cloog/cloog.h\"\n+#include \"graphite-cloog-util.h\"\n #include \"graphite-ppl.h\"\n \n-/* Translates row ROW of the CloogMatrix MATRIX to a PPL Constraint.  */\n-\n-static ppl_Constraint_t\n-cloog_matrix_to_ppl_constraint (CloogMatrix *matrix, int row)\n-{\n-  int j;\n-  ppl_Constraint_t cstr;\n-  ppl_Coefficient_t coef;\n-  ppl_Linear_Expression_t expr;\n-  ppl_dimension_type dim = matrix->NbColumns - 2;\n-\n-  ppl_new_Coefficient (&coef);\n-  ppl_new_Linear_Expression_with_dimension (&expr, dim);\n-\n-  for (j = 1; j < matrix->NbColumns - 1; j++)\n-    {\n-      ppl_assign_Coefficient_from_mpz_t (coef, matrix->p[row][j]);\n-      ppl_Linear_Expression_add_to_coefficient (expr, j - 1, coef);\n-    }\n-\n-  ppl_assign_Coefficient_from_mpz_t (coef,\n-\t\t\t\t     matrix->p[row][matrix->NbColumns - 1]);\n-  ppl_Linear_Expression_add_to_inhomogeneous (expr, coef);\n-  ppl_delete_Coefficient (coef);\n-\n-  if (mpz_sgn (matrix->p[row][0]))\n-    ppl_new_Constraint (&cstr, expr, PPL_CONSTRAINT_TYPE_EQUAL);\n-  else\n-    ppl_new_Constraint (&cstr, expr, PPL_CONSTRAINT_TYPE_GREATER_OR_EQUAL);\n-\n-  ppl_delete_Linear_Expression (expr);\n-  return cstr;\n-}\n-\n-/* Creates a PPL constraint system from MATRIX.  */\n-\n-static void\n-new_Constraint_System_from_Cloog_Matrix (ppl_Constraint_System_t *pcs,\n-\t\t\t\t\t CloogMatrix *matrix)\n-{\n-  int i;\n-\n-  ppl_new_Constraint_System (pcs);\n-\n-  for (i = 0; i < matrix->NbRows; i++)\n-    {\n-      ppl_Constraint_t c = cloog_matrix_to_ppl_constraint (matrix, i);\n-      ppl_Constraint_System_insert_Constraint (*pcs, c);\n-      ppl_delete_Constraint (c);\n-    }\n-}\n-\n-/* Creates a PPL Polyhedron from MATRIX.  */\n-\n-void\n-new_C_Polyhedron_from_Cloog_Matrix (ppl_Polyhedron_t *ph,\n-\t\t\t\t      CloogMatrix *matrix)\n-{\n-  ppl_Constraint_System_t cs;\n-  new_Constraint_System_from_Cloog_Matrix (&cs, matrix);\n-  ppl_new_C_Polyhedron_recycle_Constraint_System (ph, cs);\n-}\n-\n-/* Counts the number of constraints in PCS.  */\n-\n-static int\n-ppl_Constrain_System_number_of_constraints (ppl_const_Constraint_System_t pcs)\n-{\n-  ppl_Constraint_System_const_iterator_t cit, end;\n-  int num = 0;\n-\n-  ppl_new_Constraint_System_const_iterator (&cit);\n-  ppl_new_Constraint_System_const_iterator (&end);\n-\n-  for (ppl_Constraint_System_begin (pcs, cit),\n-        ppl_Constraint_System_end (pcs, end);\n-       !ppl_Constraint_System_const_iterator_equal_test (cit, end);\n-       ppl_Constraint_System_const_iterator_increment (cit))\n-    num++;\n-\n-  ppl_delete_Constraint_System_const_iterator (cit);\n-  ppl_delete_Constraint_System_const_iterator (end);\n-  return num;\n-}\n-\n-static void\n-oppose_constraint (CloogMatrix *m, int row)\n-{\n-  int k;\n-\n-  /* Do not oppose the first column: it is the eq/ineq one.  */\n-  for (k = 1; k < m->NbColumns; k++)\n-    mpz_neg (m->p[row][k], m->p[row][k]);\n-}\n-\n-/* Inserts constraint CSTR at row ROW of matrix M.  */\n-\n-void\n-insert_constraint_into_matrix (CloogMatrix *m, int row,\n-\t\t\t       ppl_const_Constraint_t cstr)\n-{\n-  ppl_Coefficient_t c;\n-  ppl_dimension_type i, dim, nb_cols = m->NbColumns;\n-\n-  ppl_Constraint_space_dimension (cstr, &dim);\n-  ppl_new_Coefficient (&c);\n-\n-  for (i = 0; i < dim; i++)\n-    {\n-      ppl_Constraint_coefficient (cstr, i, c);\n-      ppl_Coefficient_to_mpz_t (c, m->p[row][i + 1]);\n-    }\n-\n-  for (i = dim; i < nb_cols - 1; i++)\n-    mpz_set_si (m->p[row][i + 1], 0);\n-\n-  ppl_Constraint_inhomogeneous_term  (cstr, c);\n-  ppl_Coefficient_to_mpz_t (c, m->p[row][nb_cols - 1]);\n-  mpz_set_si (m->p[row][0], 1);\n-\n-  switch (ppl_Constraint_type (cstr))\n-    {\n-    case PPL_CONSTRAINT_TYPE_LESS_THAN:\n-      oppose_constraint (m, row);\n-    case PPL_CONSTRAINT_TYPE_GREATER_THAN:\n-      mpz_sub_ui (m->p[row][nb_cols - 1],\n-\t\t     m->p[row][nb_cols - 1], 1);\n-      break;\n-\n-    case PPL_CONSTRAINT_TYPE_LESS_OR_EQUAL:\n-      oppose_constraint (m, row);\n-    case PPL_CONSTRAINT_TYPE_GREATER_OR_EQUAL:\n-      break;\n-\n-    case PPL_CONSTRAINT_TYPE_EQUAL:\n-      mpz_set_si (m->p[row][0], 0);\n-      break;\n-\n-    default:\n-      /* Not yet implemented.  */\n-      gcc_unreachable();\n-    }\n-\n-  ppl_delete_Coefficient (c);\n-}\n-\n-/* Creates a CloogMatrix from constraint system PCS.  */\n-\n-static CloogMatrix *\n-new_Cloog_Matrix_from_ppl_Constraint_System (ppl_const_Constraint_System_t pcs)\n-{\n-  CloogMatrix *matrix;\n-  ppl_Constraint_System_const_iterator_t cit, end;\n-  ppl_dimension_type dim;\n-  int rows;\n-  int row = 0;\n-\n-  rows = ppl_Constrain_System_number_of_constraints (pcs);\n-  ppl_Constraint_System_space_dimension (pcs, &dim);\n-  matrix = cloog_matrix_alloc (rows, dim + 2);\n-  ppl_new_Constraint_System_const_iterator (&cit);\n-  ppl_new_Constraint_System_const_iterator (&end);\n-\n-  for (ppl_Constraint_System_begin (pcs, cit),\n-        ppl_Constraint_System_end (pcs, end);\n-       !ppl_Constraint_System_const_iterator_equal_test (cit, end);\n-       ppl_Constraint_System_const_iterator_increment (cit))\n-    {\n-      ppl_const_Constraint_t c;\n-      ppl_Constraint_System_const_iterator_dereference (cit, &c);\n-      insert_constraint_into_matrix (matrix, row, c);\n-      row++;\n-    }\n-\n-  ppl_delete_Constraint_System_const_iterator (cit);\n-  ppl_delete_Constraint_System_const_iterator (end);\n-\n-  return matrix;\n-}\n-\n-/* Creates a CloogMatrix from polyhedron PH.  */\n-\n-CloogMatrix *\n-new_Cloog_Matrix_from_ppl_Polyhedron (ppl_const_Polyhedron_t ph)\n-{\n-  ppl_const_Constraint_System_t pcs;\n-  CloogMatrix *res;\n-\n-  ppl_Polyhedron_get_constraints (ph, &pcs);\n-  res = new_Cloog_Matrix_from_ppl_Constraint_System (pcs);\n-\n-  return res;\n-}\n-\n-/* Creates a CloogDomain from polyhedron PH.  */\n-\n-CloogDomain *\n-new_Cloog_Domain_from_ppl_Polyhedron (ppl_const_Polyhedron_t ph)\n-{\n-  CloogMatrix *mat = new_Cloog_Matrix_from_ppl_Polyhedron (ph);\n-  CloogDomain *res = cloog_domain_matrix2domain (mat);\n-  cloog_matrix_free (mat);\n-  return res;\n-}\n-\n-/* Creates a CloogDomain from a pointset powerset PS.  */\n-\n-CloogDomain *\n-new_Cloog_Domain_from_ppl_Pointset_Powerset (\n-  ppl_Pointset_Powerset_C_Polyhedron_t ps)\n-{\n-  CloogDomain *res = NULL;\n-  ppl_Pointset_Powerset_C_Polyhedron_iterator_t it, end;\n-\n-  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&it);\n-  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&end);\n-\n-  for (ppl_Pointset_Powerset_C_Polyhedron_iterator_begin (ps, it),\n-       ppl_Pointset_Powerset_C_Polyhedron_iterator_end (ps, end);\n-       !ppl_Pointset_Powerset_C_Polyhedron_iterator_equal_test (it, end);\n-       ppl_Pointset_Powerset_C_Polyhedron_iterator_increment (it))\n-    {\n-      ppl_const_Polyhedron_t ph;\n-      CloogDomain *tmp;\n-\n-      ppl_Pointset_Powerset_C_Polyhedron_iterator_dereference (it, &ph);\n-      tmp = new_Cloog_Domain_from_ppl_Polyhedron (ph);\n-\n-      if (res == NULL)\n-\tres = tmp;\n-      else\n-\tres = cloog_domain_union (res, tmp);\n-    }\n-\n-  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (it);\n-  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (end);\n-\n-  gcc_assert (res != NULL);\n-\n-  return res;\n-}\n-\n /* Set the inhomogeneous term of E to X.  */\n \n void"}, {"sha": "ec5d3c5682fc9e24e91d429e9ea87bb357dce98a", "filename": "gcc/graphite-ppl.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-ppl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0647324a1c997f68c164be5c25f151dc3e8f0df0/gcc%2Fgraphite-ppl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.h?ref=0647324a1c997f68c164be5c25f151dc3e8f0df0", "patch": "@@ -24,12 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"double-int.h\"\n #include \"tree.h\"\n \n-CloogMatrix *new_Cloog_Matrix_from_ppl_Polyhedron (ppl_const_Polyhedron_t);\n-CloogDomain *new_Cloog_Domain_from_ppl_Polyhedron (ppl_const_Polyhedron_t);\n-CloogDomain * new_Cloog_Domain_from_ppl_Pointset_Powerset (\n-  ppl_Pointset_Powerset_C_Polyhedron_t);\n-void new_C_Polyhedron_from_Cloog_Matrix (ppl_Polyhedron_t *, CloogMatrix *);\n-void insert_constraint_into_matrix (CloogMatrix *, int, ppl_const_Constraint_t);\n ppl_Polyhedron_t ppl_strip_loop (ppl_Polyhedron_t, ppl_dimension_type, int);\n int ppl_lexico_compare_linear_expressions (ppl_Linear_Expression_t,\n \t\t\t\t\t   ppl_Linear_Expression_t);"}]}