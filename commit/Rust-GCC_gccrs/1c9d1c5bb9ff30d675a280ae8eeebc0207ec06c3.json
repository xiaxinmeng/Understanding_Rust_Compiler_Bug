{"sha": "1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5ZDFjNWJiOWZmMzBkNjc1YTI4MGFlOGVlZWJjMDIwN2VjMDZjMw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-27T12:41:52Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-27T12:41:52Z"}, "message": "JWindow.java, [...]: New versions from classpath.\n\n2003-06-27  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/JWindow.java,\n\tjavax/swing/event/AncestorEvent.java,\n\tjavax/swing/event/HyperlinkEvent.java,\n\tjavax/swing/event/InternalFrameEvent.java,\n\tjavax/swing/event/ListDataEvent.java,\n\tjavax/swing/event/TableModelEvent.java,\n\tjavax/swing/plaf/PopupMenuUI.java,\n\tjavax/swing/plaf/SplitPaneUI.java,\n\tjavax/swing/plaf/TabbedPaneUI.java,\n\tjavax/swing/plaf/TextUI.java,\n\tjavax/swing/plaf/TreeUI.java,\n\tjavax/swing/plaf/basic/BasicTextUI.java,\n\tjavax/swing/plaf/basic/BasicTreeUI.java:\n\tNew versions from classpath.\n\t* javax/swing/Popup.java,\n\tjavax/swing/PopupFactory.jav:\n\tNew source files from classpath.\n\t* javax/swing/plaf/doc-files/TreeUI-1.png:\n\tNew binary files from classpath.\n\nFrom-SVN: r68568", "tree": {"sha": "9c9150539c2b41f8cf847c48aa7c5d93cf1466a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c9150539c2b41f8cf847c48aa7c5d93cf1466a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/comments", "author": null, "committer": null, "parents": [{"sha": "37706dd19d717cbb6cffd2f5da307838dea26309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37706dd19d717cbb6cffd2f5da307838dea26309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37706dd19d717cbb6cffd2f5da307838dea26309"}], "stats": {"total": 1410, "additions": 1233, "deletions": 177}, "files": [{"sha": "1392095acca8c545163b5374ddafdfe5412d0faa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,3 +1,25 @@\n+2003-06-27  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/JWindow.java,\n+\tjavax/swing/event/AncestorEvent.java,\n+\tjavax/swing/event/HyperlinkEvent.java,\n+\tjavax/swing/event/InternalFrameEvent.java,\n+\tjavax/swing/event/ListDataEvent.java,\n+\tjavax/swing/event/TableModelEvent.java,\n+\tjavax/swing/plaf/PopupMenuUI.java,\n+\tjavax/swing/plaf/SplitPaneUI.java,\n+\tjavax/swing/plaf/TabbedPaneUI.java,\n+\tjavax/swing/plaf/TextUI.java,\n+\tjavax/swing/plaf/TreeUI.java,\n+\tjavax/swing/plaf/basic/BasicTextUI.java,\n+\tjavax/swing/plaf/basic/BasicTreeUI.java:\n+\tNew versions from classpath.\n+\t* javax/swing/Popup.java,\n+\tjavax/swing/PopupFactory.jav:\n+\tNew source files from classpath.\n+\t* javax/swing/plaf/doc-files/TreeUI-1.png:\n+\tNew binary files from classpath.\n+\n 2003-06-25  Michael Koch  <konqueror@gmx.de>\n \n \t* Makefile.am"}, {"sha": "5edf5b254129dee9805b53060d2a738547b39b7e", "filename": "libjava/javax/swing/JWindow.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2FJWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2FJWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJWindow.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* JWindow.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -78,6 +78,11 @@ public class JWindow extends Window implements Accessible\n      *\n      *************/\n \n+    public JWindow()\n+    {\n+      this(null);\n+    }\n+\n     // huuu ?\n     public JWindow(Frame f)\n     {"}, {"sha": "b1cb4460a4959a2ed285aa58a90a47781ba8dd82", "filename": "libjava/javax/swing/Popup.java", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2FPopup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2FPopup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FPopup.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -0,0 +1,189 @@\n+/* Popup.java --\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing;\n+\n+import java.awt.Component;\n+\n+\n+/**\n+ * Manages a popup window that displays a Component on top of\n+ * everything else.\n+ *\n+ * <p>To obtain an instance of <code>Popup</code>, use the\n+ * {@link javax.swing.PopupFactory}.\n+ *\n+ * @since 1.4\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public class Popup\n+{\n+  /**\n+   * Constructs a new <code>Popup</code> given its owner,\n+   * contents and the screen position where the popup\n+   * will appear.\n+   *\n+   * @param owner the Component to which <code>x</code> and\n+   *        <code>y</code> are relative, or <code>null</code> for\n+   *        placing the popup relative to the origin of the screen.\n+   *\n+   * @param contents the contents that will be displayed inside\n+   *        the <code>Popup</code>.\n+   *\n+   * @param x the horizontal position where the Popup will appear.\n+   *\n+   * @param y the vertical position where the Popup will appear.\n+   *\n+   * @throws IllegalArgumentException if <code>contents</code>\n+   *         is <code>null</code>.\n+   */\n+  protected Popup(Component owner, Component contents,\n+                  int x, int y)\n+  {\n+    if (contents == null)\n+      throw new IllegalArgumentException();\n+\n+    // The real stuff happens in the implementation of subclasses,\n+    // for instance JWindowPopup.\n+  }\n+  \n+  \n+  /**\n+   * Constructs a new <code>Popup</code>.\n+   */\n+  protected Popup()\n+  {\n+  }\n+\n+\n+  /**\n+   * Displays the <code>Popup</code> on the screen.  Nothing happens\n+   * if it is currently shown.\n+   */\n+  public void show()\n+  {\n+    // Implemented by subclasses, for instance JWindowPopup.\n+  }\n+\n+\n+  /**\n+   * Removes the <code>Popup</code> from the screen.  Nothing happens\n+   * if it is currently hidden.\n+   */\n+  public void hide()\n+  {\n+    // Implemented by subclasses, for instance JWindowPopup.\n+  }\n+\n+\n+  /**\n+   * A <code>Popup</code> that uses a <code>JWindow</code> for\n+   * displaying its contents.\n+   *\n+   * @see PopupFactory#getPopup\n+   *\n+   * @author Sascha Brawer (brawer@dandelis.ch)\n+   */\n+  static class JWindowPopup\n+    extends Popup\n+  {\n+    /**\n+     * The <code>JWindow</code> used for displaying the contents\n+     * of the popup.\n+     */\n+    JWindow window;\n+\n+\n+    /**\n+     * Constructs a new <code>JWindowPopup</code> given its owner,\n+     * contents and the screen position where the popup\n+     * will appear.\n+     *\n+     * @param owner the Component to which <code>x</code> and\n+     *        <code>y</code> are relative, or <code>null</code> for\n+     *        placing the popup relative to the origin of the screen.\n+     *\n+     * @param contents the contents that will be displayed inside\n+     *        the <code>Popup</code>.\n+     *\n+     * @param x the horizontal position where the Popup will appear.\n+     *\n+     * @param y the vertical position where the Popup will appear.\n+     *\n+     * @throws IllegalArgumentException if <code>contents</code>\n+     *         is <code>null</code>.\n+     */\n+    public JWindowPopup(Component owner, Component contents,\n+                        int x, int y)\n+    {\n+      /* Checks whether contents is null. */\n+      super(owner, contents, x, y);\n+\n+      window = new JWindow();\n+      window.getRootPane().add(contents);\n+      window.setLocation(x, y);\n+      window.pack();\n+    }\n+\n+\n+    /**\n+     * Displays the popup&#x2019;s <code>JWindow</code> on the screen.\n+     * Nothing happens if it is already visible.\n+     */\n+    public void show()\n+    {\n+      window.show();\n+    }\n+    \n+    \n+    /**\n+     * Removes the popup&#x2019;s <code>JWindow</code> from the\n+     * screen.  Nothing happens if it is currently not visible.\n+     */\n+    public void hide()\n+    {\n+      /* Calling dispose() instead of hide() will conserve native\n+       * system resources, for example memory in an X11 server.\n+       * They will automatically be re-allocated by a call to\n+       * show().\n+       */\n+      window.dispose();\n+    }\n+  }\n+}"}, {"sha": "571de22d0ed20fec6579de379dfcdd835907bc96", "filename": "libjava/javax/swing/PopupFactory.java", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2FPopupFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2FPopupFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FPopupFactory.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -0,0 +1,139 @@\n+/* PopupFactory.java --\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing;\n+\n+import java.awt.Component;\n+\n+\n+/**\n+ * A factory for <code>Popup</code> objects. These are used to\n+ * managed little windows that float over everything else,\n+ * typically containing a popup menu.\n+ *\n+ * @since 1.4\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public class PopupFactory\n+{\n+  /**\n+   * The shared factory object.\n+   *\n+   * @see #getSharedFactory\n+   * @see #setSharedFactory\n+   */\n+  private static PopupFactory sharedFactory;\n+\n+\n+  /**\n+   * Constructs a new <code>PopupFactory</code>. Usually, a single\n+   * <code>PopupFactory</code> is shared among multiple consumers\n+   * of <code>Popup</code>. Use {@link #getSharedInstance} to retrieve\n+   * the current factory.\n+   */\n+  public PopupFactory()\n+  {\n+  }\n+\n+\n+  /**\n+   * Sets the shared factory.\n+   *\n+   * @param factory the PopupFactory that future invocations of\n+   *        {@link #getSharedInstance} will return.\n+   *\n+   * @throws IllegalArgumentException if <code>factory</code>\n+   *         is <code>null</code>.\n+   */\n+  public static void setSharedInstance(PopupFactory factory)\n+  {\n+    if (factory == null)\n+      throw new IllegalArgumentException();\n+\n+    /* Swing is not designed to be thread-safe, so there is no\n+     * need to synchronize the access to the global variable.\n+     */\n+    sharedFactory = factory;\n+  }\n+\n+\n+  /**\n+   * Retrieves the shared factory, creating a new factory if\n+   * necessary.\n+   *\n+   * @return a <code>PopupFactory</code> that can be used\n+   *         to create <code>Popup</code> objects.\n+   */\n+  public static PopupFactory getSharedInstance()\n+  {\n+    /* Swing is not designed to be thread-safe, so there is no\n+     * need to synchronize the access to the global variable.\n+     */\n+    if (sharedFactory == null)\n+      sharedFactory = new PopupFactory();\n+\n+    return sharedFactory;\n+  }\n+\n+\n+  /**\n+   * Creates a new <code>Popup</code> given its owner,\n+   * contents and the screen position where the popup\n+   * will appear.\n+   *\n+   * @param owner the Component to which <code>x</code> and\n+   *        <code>y</code> are relative, or <code>null</code> for\n+   *        placing the popup relative to the origin of the screen.\n+   *\n+   * @param contents the contents that will be displayed inside\n+   *        the <code>Popup</code>.\n+   *\n+   * @param x the horizontal position where the Popup will appear.\n+   *\n+   * @param y the vertical position where the Popup will appear.\n+   *\n+   * @throws IllegalArgumentException if <code>contents</code>\n+   *         is <code>null</code>.\n+   */\n+  public Popup getPopup(Component owner, Component contents,\n+                        int x, int y)\n+  {\n+    return new Popup.JWindowPopup(owner, contents, x, y);\n+  }\n+}"}, {"sha": "c6173932bb98b2c5208960445eeebd07c6f4cd36", "filename": "libjava/javax/swing/event/AncestorEvent.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FAncestorEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FAncestorEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FAncestorEvent.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -48,11 +48,11 @@\n  */\n public class AncestorEvent extends AWTEvent\n {\n-  private static final long serialVersionUID = 4799843792513591457L;\n+  private static final long serialVersionUID = -8079801679695605002L;\n   \n-  public static int ANCESTOR_ADDED = 0;\n-  public static int ANCESTOR_MOVED = 1;\n-  public static int ANCESTOR_REMOVED = 2;\n+  public static final int ANCESTOR_ADDED = 0;\n+  public static final int ANCESTOR_MOVED = 1;\n+  public static final int ANCESTOR_REMOVED = 2;\n \n   private JComponent sourceComponent;\n   private Container ancestor;"}, {"sha": "c979fbf62dab1d2ab2ffc4c05159378187b6778f", "filename": "libjava/javax/swing/event/HyperlinkEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FHyperlinkEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FHyperlinkEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FHyperlinkEvent.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -75,7 +75,7 @@ public String toString()\n     }\n   }\n \n-  private static final long serialVersionUID = -8168964465779154277L;\n+  private static final long serialVersionUID = -2054640811732867012L;\n   \n   private EventType type;\n   private URL url;"}, {"sha": "15d12f2efcf675892ec08343a5348750fb46ce71", "filename": "libjava/javax/swing/event/InternalFrameEvent.java", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FInternalFrameEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FInternalFrameEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FInternalFrameEvent.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -46,52 +46,52 @@\n  */\n public class InternalFrameEvent extends AWTEvent\n {\n-  private static final long serialVersionUID = 9195444901064686684L;\n+  private static final long serialVersionUID = -5204823611874873183L;\n \n   /**\n    * Internal frame activated event\n    */\n-  public static int INTERNAL_FRAME_ACTIVATED = 25554;\n+  public static final int INTERNAL_FRAME_ACTIVATED = 25554;\n \n   /**\n    * Internal frame closed event\n    */\n-  public static int INTERNAL_FRAME_CLOSED = 25551;\n+  public static final int INTERNAL_FRAME_CLOSED = 25551;\n \n   /**\n    * Internal frame closing event\n    */\n-  public static int INTERNAL_FRAME_CLOSING = 25550;\n+  public static final int INTERNAL_FRAME_CLOSING = 25550;\n \n   /**\n    * Internal frame deactivated event\n    */\n-  public static int INTERNAL_FRAME_DEACTIVATED = 25555;\n+  public static final int INTERNAL_FRAME_DEACTIVATED = 25555;\n \n   /**\n    * Internal frame deiconifed event\n    */\n-  public static int INTERNAL_FRAME_DEICONIFIED = 25553;\n+  public static final int INTERNAL_FRAME_DEICONIFIED = 25553;\n \n   /**\n    * Internal frame frame first event\n    */\n-  public static int INTERNAL_FRAME_FIRST = 25549;\n+  public static final int INTERNAL_FRAME_FIRST = 25549;\n \n   /**\n    * Internal frame iconified event\n    */\n-  public static int INTERNAL_FRAME_ICONIFIED = 2552;\n+  public static final int INTERNAL_FRAME_ICONIFIED = 2552;\n \n   /**\n    * Internal frame last event\n    */\n-  public static int INTERNAL_FRAME_LAST = 25555;\n+  public static final int INTERNAL_FRAME_LAST = 25555;\n \n   /**\n    * Internal frame opened event\n    */\n-  public static int INTERNAL_FRAME_OPENED = 25550;\n+  public static final int INTERNAL_FRAME_OPENED = 25550;\n \n   /**\n    * Creates a <code>JInternalFrameEvent</code> object."}, {"sha": "c86e86abe9268c88dc72c58acf7b7336e0c157c3", "filename": "libjava/javax/swing/event/ListDataEvent.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FListDataEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FListDataEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FListDataEvent.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -46,11 +46,11 @@\n  */\n public class ListDataEvent extends EventObject\n {\n-  private static final long serialVersionUID = -7131487416250401903L;\n+  private static final long serialVersionUID = 2510353260071004774L;\n   \n-  public static int CONTENTS_CHANGED = 0;\n-  public static int INTERVAL_ADDED = 1;\n-  public static int INTERVAL_REMOVED = 2;\n+  public static final int CONTENTS_CHANGED = 0;\n+  public static final int INTERVAL_ADDED = 1;\n+  public static final int INTERVAL_REMOVED = 2;\n \n   private int type = 0;\n   private int index0 = 0;"}, {"sha": "6bd96971950732a0a69996da51abc73008a89a69", "filename": "libjava/javax/swing/event/TableModelEvent.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FTableModelEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fevent%2FTableModelEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FTableModelEvent.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -46,13 +46,13 @@\n  */\n public class TableModelEvent extends EventObject\n {\n-  private static final long serialVersionUID = -7037680193569691706L;\n+  private static final long serialVersionUID = -7849342674552212824L;\n   \n-  public static int ALL_COLUMNS = -1;\n-  public static int DELETE = -1;\n-  public static int HEADER_ROW = -1;\n-  public static int INSERT = 1;\n-  public static int UPDATE = 0;\n+  public static final int ALL_COLUMNS = -1;\n+  public static final int DELETE = -1;\n+  public static final int HEADER_ROW = -1;\n+  public static final int INSERT = 1;\n+  public static final int UPDATE = 0;\n \n   protected int column = 0;\n   protected int firstRow = 0;"}, {"sha": "1871b9b79853589f6ed0b74eb71eb63bdd5a7103", "filename": "libjava/javax/swing/plaf/PopupMenuUI.java", "status": "modified", "additions": 75, "deletions": 35, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FPopupMenuUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FPopupMenuUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FPopupMenuUI.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* PopupMenuUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,40 +37,80 @@\n \n package javax.swing.plaf;\n \n-// Imports\n-import java.awt.event.*;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JPopupMenu;\n+import javax.swing.Popup;\n+import javax.swing.PopupFactory;\n+\n \n /**\n- * PopupMenuUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JPopupMenu</code>.\n+ *\n+ * @see javax.swing.JPopupMenu\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class PopupMenuUI extends ComponentUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor PopupMenuUI\n-\t */\n-\tpublic PopupMenuUI() {\n-\t\t// TODO\n-\t} // PopupMenuUI()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * isPopupTrigger\n-\t * @param event TODO\n-\t * @returns boolean\n-\t */\n-\tpublic boolean isPopupTrigger(MouseEvent event) {\n-\t\treturn false; // TODO\n-\t} // isPopupTrigger()\n-\n-\n-} // PopupMenuUI\n+public abstract class PopupMenuUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>PopupMenuUI</code>.\n+   */\n+  public PopupMenuUI()\n+  {\n+  }\n+\n+\n+  /**\n+   * Tests whether or not a mouse event triggers a popup menu.\n+   *\n+   * <p>The default implementation calls\n+   * <code>event.isPopupTrigger()</code>, which checks for the gesture\n+   * that is common for the platform on which the application runs. If\n+   * a look and feel wants to employ non-standard conventions for\n+   * triggering a popup menu, it can override this method.\n+   *\n+   * @param event the event to check.\n+   *\n+   * @return <code>true</code> if the event triggers a popup menu;\n+   *         <code>false</code> otherwise.\n+   *\n+   * @since 1.3\n+   */\n+  public boolean isPopupTrigger(MouseEvent event)\n+  {\n+    return event.isPopupTrigger();\n+  }\n+\n+\n+  /**\n+   * Creates a <code>Popup</code> for displaying the popup menu.  The\n+   * default implementation uses the {@link javax.swing.PopupFactory}\n+   * for retrieving a suitable <code>Popup</code>, but subclasses\n+   * might want to override this method if a LookAndFeel needs special\n+   * Popups.\n+   *\n+   * @param popup the <code>JPopupMenu</code> for whose display\n+   *        a <code>Popup</code> is needed.\n+   *\n+   * @param x the horizontal position where the popup will be\n+   *        displayed.\n+   *\n+   * @param y the vertical position where the popup will be\n+   *        displayed.\n+   *\n+   * @return a <code>Popup</code> for showing and hiding\n+   *         the menu.\n+   *\n+   * @since 1.4\n+   */\n+  public Popup getPopup(JPopupMenu popup, int x, int y)\n+  {\n+    return PopupFactory.getSharedInstance().getPopup(\n+      /* origin/owner of the popup */ popup.getInvoker(),\n+      /* contents */                  popup,\n+      x, y);\n+  }\n+}"}, {"sha": "020a54a626f65106eda9951a9c65bd5de2f476a7", "filename": "libjava/javax/swing/plaf/SplitPaneUI.java", "status": "modified", "additions": 92, "deletions": 70, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FSplitPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FSplitPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FSplitPaneUI.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* SplitPaneUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,75 +37,97 @@\n \n package javax.swing.plaf;\n \n-// Imports\n-import java.awt.*;\n-import javax.swing.*;\n+\n+import java.awt.Graphics;\n+import javax.swing.JSplitPane;\n+\n \n /**\n- * SplitPaneUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JSplitPane</code>.\n+ *\n+ * @see javax.swing.JSplitPane\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class SplitPaneUI extends ComponentUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor SplitPaneUI\n-\t */\n-\tpublic SplitPaneUI() {\n-\t\t// TODO\n-\t} // SplitPaneUI()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * resetToPreferredSizes\n-\t * @param splitpane TODO\n-\t */\n-\tpublic abstract void resetToPreferredSizes(JSplitPane splitpane);\n-\n-\t/**\n-\t * setDividerLocation\n-\t * @param splitpane TODO\n-\t * @param location TODO\n-\t */\n-\tpublic abstract void setDividerLocation(JSplitPane splitpane,\n-\t\tint location);\n-\n-\t/**\n-\t * getDividerLocation\n-\t * @param splitpane TODO\n-\t * @returns int\n-\t */\n-\tpublic abstract int getDividerLocation(JSplitPane splitpane);\n-\n-\t/**\n-\t * getMinimumDividerLocation\n-\t * @param splitpane TODO\n-\t * @returns int\n-\t */\n-\tpublic abstract int getMinimumDividerLocation(JSplitPane splitpane);\n-\n-\t/**\n-\t * getMaximumDividerLocation\n-\t * @param splitpane TODO\n-\t * @returns int\n-\t */\n-\tpublic abstract int getMaximumDividerLocation(JSplitPane splitpane);\n-\n-\t/**\n-\t * finishedPaintingChildren\n-\t * @param splitpane TODO\n-\t * @param graphics TODO\n-\t */\n-\tpublic abstract void finishedPaintingChildren(JSplitPane splitpane,\n-\t\tGraphics graphics);\n-\n-\n-} // SplitPaneUI\n+public abstract class SplitPaneUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>SplitPaneUI</code>.\n+   */\n+  public SplitPaneUI()\n+  {\n+  }\n+\n+\n+  /**\n+   * Moves the divider to the location which best respects\n+   * the preferred sizes of the children.\n+   *\n+   * @param pane the <code>JSplitPane</code> for thich this\n+   *        delegate provides the look and feel.\n+   */\n+  public abstract void resetToPreferredSizes(JSplitPane pane);\n+\n+\n+  /**\n+   * Moves the divider to the specified location.\n+   *\n+   * @param pane the <code>JSplitPane</code> for thich this\n+   *        delegate provides the look and feel.\n+   *\n+   * @param location the new location of the divider.\n+   */\n+  public abstract void setDividerLocation(JSplitPane pane,\n+                                          int location);\n+\n+\n+  /**\n+   * Determines the current location of the divider.\n+   *\n+   * @param pane the <code>JSplitPane</code> for thich this\n+   *        delegate provides the look and feel.\n+   *\n+   * @return the current location of the divider.\n+   */\n+  public abstract int getDividerLocation(JSplitPane pane);\n+  \n+  \n+  /**\n+   * Determines the minimum location of the divider.\n+   *\n+   * @param pane the <code>JSplitPane</code> for thich this\n+   *        delegate provides the look and feel.\n+   *\n+   * @return the leftmost (or topmost) possible location\n+   *         of the divider.\n+   */\n+  public abstract int getMinimumDividerLocation(JSplitPane pane);\n+\n+\n+  /**\n+   * Determines the maximum location of the divider.\n+   *\n+   * @param pane the <code>JSplitPane</code> for thich this\n+   *        delegate provides the look and feel.\n+   *\n+   * @return the bottommost (or rightmost) possible location\n+   *         of the divider.\n+   */\n+  public abstract int getMaximumDividerLocation(JSplitPane pane);\n+\n+\n+  /**\n+   * Called by the <code>JSplitPane</code> after it has finished\n+   * painting its children.\n+   *\n+   * @param pane the <code>JSplitPane</code> for thich this\n+   *        delegate provides the look and feel.\n+   *\n+   * @param g the Graphics used for painting.\n+   */\n+  public abstract void finishedPaintingChildren(JSplitPane pane,\n+                                                Graphics g);\n+}"}, {"sha": "20c36c30c21e6668e283b0685a60a5fcaf67f29a", "filename": "libjava/javax/swing/plaf/TabbedPaneUI.java", "status": "modified", "additions": 68, "deletions": 18, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FTabbedPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FTabbedPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FTabbedPaneUI.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* TabbedPaneUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,24 +38,74 @@\n \n package javax.swing.plaf;\n \n-import java.awt.*;\n-import javax.swing.*;\n+import java.awt.Rectangle;\n+import javax.swing.JTabbedPane;\n \n-public class TabbedPaneUI extends ComponentUI\n+\n+/**\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JTabbedPane</code>.\n+ *\n+ * @see javax.swing.JTabbedPane\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public abstract class TabbedPaneUI\n+  extends ComponentUI\n {\n-    public Rectangle getTabBounds(JTabbedPane pane, int index)\n-    {\n-\treturn null;\n-    }\n-\n-    public int getTabRunCount(JTabbedPane pane)\n-    {\n-\treturn 0;\n-    }\n-\n-    public int tabForCoordinate(JTabbedPane pane, int x, int y)\n-    {\n-\treturn 0;\n-    }\n+  /**\n+   * Constructs a new <code>TabbedPaneUI</code>.\n+   */\n+  public TabbedPaneUI()\n+  {\n+  }\n+  \n+  \n+  /**\n+   * Determines which tab lies at a given position.\n+   *\n+   * @param pane the <code>JTabbedPane</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param x the horizontal position, where zero is the left\n+   *        edge of <code>pane</code>.\n+   *\n+   * @param y the vertical position, where zero is the top\n+   *        edge of <code>pane</code>.\n+   *\n+   * @return the zero-based index of the tab, or -1 if no\n+   *         tab is at the specified position.\n+   */\n+  public abstract int tabForCoordinate(JTabbedPane pane,\n+                                       int x, int y);\n+  \n+\n+  /**\n+   * Calculates the bounding box of a tab.\n+   *\n+   * @param pane the <code>JTabbedPane</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param index the index of the tab, which must be an integer\n+   *        in the range <code>[0 .. pane.getTabCount() - 1]</code>.\n+   *\n+   * @return the bounding box of the <code>index</code>-th tab,\n+   *         in the coordinate system of <code>pane</code>.\n+   */\n+  public abstract Rectangle getTabBounds(JTabbedPane pane, int index);\n+\n+\n+  /**\n+   * Determines how many runs are used to display tabs.\n+   *\n+   * @param pane the <code>JTabbedPane</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @return the number of tab runs.\n+   *\n+   * @see javax.swing.JTabbedPane#getTabRunCount()\n+   */\n+  public abstract int getTabRunCount(JTabbedPane pane);\n }\n                        "}, {"sha": "14f89d6006e29aa51e64874cf6ff690d2645d4b2", "filename": "libjava/javax/swing/plaf/TextUI.java", "status": "modified", "additions": 241, "deletions": 21, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FTextUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FTextUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FTextUI.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* TextUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,27 +38,247 @@\n \n package javax.swing.plaf;\n \n-import javax.swing.text.*;\n-import java.awt.*;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.EditorKit;\n+import javax.swing.text.JTextComponent;\n+import javax.swing.text.Position;\n+import javax.swing.text.View;\n \n-public abstract class TextUI extends ComponentUI\n+\n+/**\n+ * An abstract base class for delegates that provide the user\n+ * interface for text editors.\n+ *\n+ * @see javax.swing.text.JTextComponent\n+ *\n+ * @author Ronald Veldema (rveldema@cs.vu.nl)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public abstract class TextUI\n+  extends ComponentUI\n {\n-    public TextUI()\n-    {\n-    }\n- \n-    public abstract  void damageRange(JTextComponent t, int p0, int p1);\n-    public abstract  void damageRange(JTextComponent t, int p0, int p1, Position.Bias firstBias, Position.Bias secondBias);\n-    public abstract  EditorKit getEditorKit(JTextComponent t);\n-    public abstract  int getNextVisualPositionFrom(JTextComponent t, \n-\t\t\t\t\t    int pos,\n-\t\t\t\t\t    Position.Bias b, \n-\t\t\t\t\t    int direction,\n-\t\t\t\t\t    Position.Bias[] biasRet);\n-    public abstract  View getRootView(JTextComponent t);\n-    public abstract  Rectangle modelToView(JTextComponent t, int pos);\n-    public abstract  Rectangle modelToView(JTextComponent t, int pos, Position.Bias bias);\n-    public abstract  int viewToModel(JTextComponent t, Point pt);\n-    public abstract  int viewToModel(JTextComponent t, Point pt, Position.Bias[] biasReturn);\n+  /**\n+   * Constructs a new <code>TextUI</code>.\n+   */  \n+  public TextUI()\n+  {\n+  }\n+\n+\n+  /**\n+   * Calculates the geometric extent of the character at the\n+   * given offset.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param pos the zero-based index of the character into the\n+   *        document model.\n+   *\n+   * @return the bounding box of the character at index\n+   *         <code>pos</code>, in view coordinates.\n+   *\n+   * @throws BadLocationException if <code>pos</code> does not\n+   *         designate a valid position in the document model.\n+   *\n+   * @see javax.swing.text.View#modelToView(int,\n+   *      javax.swing.text.Position.Bias, int,\n+   *      javax.swing.text.position.Bias, java.awt.Shape)\n+   */\n+  public abstract Rectangle modelToView(JTextComponent tc, int pos)\n+    throws BadLocationException;\n+\n+\n+  /**\n+   * Calculates the geometric extent of the character at the\n+   * given offset.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param pos the zero-based index of the character into the\n+   *        document model.\n+   *\n+   * @param bias whether to take the character before or after the\n+   *        caret position indicated by <code>pos</code>.  The value\n+   *        must be either {@link\n+   *        javax.swing.text.Position.Bias#Backward} or {@link\n+   *        javax.swing.text.Position.Bias#Forward}.\n+   *\n+   * @return the bounding box of the character at index\n+   *         <code>pos</code>, in view coordinates.\n+   *\n+   * @throws BadLocationException if <code>pos</code> does not\n+   *         designate a valid position in the document model.\n+   *\n+   * @see javax.swing.text.View#modelToView(int,\n+   *      javax.swing.text.Position.Bias, int,\n+   *      javax.swing.text.position.Bias, java.awt.Shape)\n+   */\n+  public abstract Rectangle modelToView(JTextComponent tc, int pos,\n+                                        Position.Bias bias)\n+    throws BadLocationException;\n+\n+\n+  /**\n+   * Finds the caret position which is closest to the specified visual\n+   * location.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param loc the position in view coordinates.\n+   *\n+   * @return the caret position which is closest to <code>loc</code>.\n+   *\n+   * @see #viewToModel(JTextComponent, Point, Position.Bias[])\n+   */\n+  public abstract int viewToModel(JTextComponent t, Point pt);\n+\n+\n+  /**\n+   * Finds the caret position which is closest to the specified visual\n+   * location.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param loc the position in view coordinates.\n+   *\n+   * @param outBias an array whose size must be at least one.\n+   *        After the call, <code>outBias[0]</code> will indicate\n+   *        whether <code>loc</code> is in the glyph before\n+   *        (<code>Position.Bias.Backward</code>) or after\n+   *        (<code>Position.Bias.Forward</code>) the returned\n+   *        caret position.\n+   *\n+   * @return the caret position which is closest to <code>loc</code>.\n+   */\n+  public abstract int viewToModel(JTextComponent tc, Point loc,\n+                                  Position.Bias[] outBias);\n  \n+\n+\n+  /**\n+   * Calculates the caret position that is visually next to the given\n+   * position. This is useful to determine where to move the caret\n+   * after the user has pressed an arrow key.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param pos the current caret position, a zero-based index\n+   *        into the document model.\n+   *\n+   * @param bias whether to take the character before or after the\n+   *        caret position indicated by <code>pos</code>.  The value\n+   *        must be either {@link\n+   *        javax.swing.text.Position.Bias#Backward} or {@link\n+   *        javax.swing.text.Position.Bias#Forward}.\n+   *\n+   * @param direction the visual direction. Pass\n+   *        {@link javax.swing.SwingConstants#WEST} for the left\n+   *        arrow key, {@link javax.swing.SwingConstants#EAST}\n+   *        for the right arrow key, {@link\n+   *        javax.swing.SwingConstants#NORTH} for the up arrow\n+   *        key, or {@link javax.swing.SwingConstants#SOUTH}\n+   *        for the down arrow key.\n+   *\n+   * @throws BadLocationException if <code>pos</code> does not\n+   *         designate a valid position in the document model.\n+   *\n+   * @throws IllegalArgumentException if <code>direction</code>\n+   *         is not one of <code>Position.Bias.Forward</code>\n+   *         or <code>Position.Biad.Backward</code>.\n+   */\n+  public abstract int getNextVisualPositionFrom(JTextComponent tc,\n+                                                int pos,\n+                                                Position.Bias bias,\n+                                                int direction,\n+                                                Position.Bias[] outBias)\n+    throws BadLocationException;\n+\n+\n+  /**\n+   * Repaints a range of characters.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param start the first character in the range that needs\n+   *        painting, indicated as an index into the document model.\n+   *\n+   * @param end the last character in the range that needs\n+   *        painting, indicated as an index into the document model.\n+   *        <code>end</code> must be greater than or equal to\n+   *        <code>start</code>.\n+   */\n+  public abstract void damageRange(JTextComponent tc, int start, int end);\n+\n+\n+  /**\n+   * Repaints a range of characters, also specifying the bias for the\n+   * start and end of the range.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param start the first character in the range that needs\n+   *        painting, indicated as an index into the document model.\n+   *\n+   * @param end the last character in the range that needs\n+   *        painting, indicated as an index into the document model.\n+   *        <code>end</code> must be greater than or equal to\n+   *        <code>start</code>.\n+   */\n+  public abstract void damageRange(JTextComponent tc,\n+                                   int start, int end,\n+                                   Position.Bias startBias,\n+                                   Position.Bias endBias);\n+\n+  \n+  /**\n+   * Retrieves the <code>EditorKit</code> managing policies and\n+   * persistent state.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @return the <code>EditorKit</code> used by <code>tc</code>.\n+   */\n+  public abstract EditorKit getEditorKit(JTextComponent tc);\n+  \n+  \n+  /**\n+   * Retrieves the root of the view tree that visually presents\n+   * the text.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @return the root <code>View</code> used by <code>tc</code>.\n+   */\n+  public abstract View getRootView(JTextComponent tc);\n+\n+\n+  /**\n+   * Returns a String for presenting a tool tip at the specified\n+   * location.\n+   *\n+   * @param tc the <code>JTextComponent</code> for which this\n+   *        delegate object provides the user interface.\n+   *\n+   * @param loc the location for which the tool tip is requested.\n+   *\n+   * @return the text for the tool tip, or <code>null</code> to\n+   *         display no tool tip.\n+   *\n+   * @since 1.4\n+   */\n+  public String getToolTipText(JTextComponent tc, Point loc)\n+  {\n+    return null;\n+  }\n }"}, {"sha": "59dca9d877f67324f455171132d035332ff71431", "filename": "libjava/javax/swing/plaf/TreeUI.java", "status": "modified", "additions": 169, "deletions": 2, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FTreeUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2FTreeUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FTreeUI.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* TreeUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,7 +38,174 @@\n \n package javax.swing.plaf;\n \n+import java.awt.Rectangle;\n+import javax.swing.JTree;\n+import javax.swing.tree.TreePath;\n \n-public class TreeUI extends ComponentUI\n+\n+/**\n+ * An abstract base class for delegates that provide the user\n+ * interface for <code>JTree</code>.\n+ *\n+ * @see javax.swing.JTree\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public abstract class TreeUI\n+  extends ComponentUI\n {\n+  /**\n+   * Constructs a new <code>TreeUI</code>.\n+   */\n+  public TreeUI()\n+  {\n+  }\n+\n+\n+  /**\n+   * Determines the geometric extent of the label that is\n+   * drawn for a path.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param path the path whose label extent is requested.\n+   *\n+   * @return a rectangle enclosing the label, or <code>null</code>\n+   *         if <code>path</code> contains invalid nodes.\n+   */\n+  public abstract Rectangle getPathBounds(JTree tree, TreePath path);\n+\n+\n+  /**\n+   * Creates a <code>TreePath</code> for the specified row.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param row the index of the row, which should be a number\n+   *        in the range <code>[0, getRowCount(tree) - 1]</code>.\n+   *\n+   * @return a <code>TreePath</code> for the specified row, or\n+   *         <code>null</code> if <code>row</code> is outside\n+   *         the valid range.\n+   */\n+  public abstract TreePath getPathForRow(JTree tree, int row);\n+\n+\n+  /**\n+   * Determines in which row a <code>TreePath</code> is currently\n+   * being displayed.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param path the path for which the caller wants to know\n+   *        in which row it is being displayed.\n+   *\n+   * @return a number in the range <code>[0, getRowCount(tree)\n+   *         - 1]</code> if the path is currently on display;\n+   *         <code>-1</code> if the path is not shown to the\n+   *        user.\n+   */\n+  public abstract int getRowForPath(JTree tree, TreePath path);\n+\n+\n+  /**\n+   * Counts how many rows are currently displayed.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @return the number of visible rows.\n+   */\n+  public abstract int getRowCount(JTree tree);\n+\n+\n+  /**\n+   * Finds the path that is closest to the specified position.\n+   *\n+   * <p><img src=\"TreeUI-1.png\" width=\"300\" height=\"250\"\n+   * alt=\"[A screen shot of a JTree] />\n+   *\n+   * <p>As shown by the above illustration, the bounds of the\n+   * closest path do not necessarily need to contain the passed\n+   * location.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param x the horizontal location, relative to the origin\n+   *        of <code>tree</code>.\n+   *\n+   * @param y the vertical location, relative to the origin\n+   *        of <code>tree</code>.\n+   *\n+   * @return the closest path, or <code>null</code> if the\n+   *         tree is currenlty not displaying any paths at all.\n+   */\n+  public abstract TreePath getClosestPathForLocation(JTree tree,\n+                                                     int x, int y);\n+\n+\n+  /**\n+   * Determines whether the user is currently editing a tree cell.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @see #getEditingPath\n+   */\n+  public abstract boolean isEditing(JTree tree);\n+\n+\n+  /**\n+   * Stops editing a tree cell, committing the entered value into the\n+   * tree&#x2019;s model. If no editing session is active, or if the\n+   * active editor does not agree to stopping, nothing happens.  In\n+   * some look and feels, this action happens when the user has\n+   * pressed the enter key.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @return <code>false</code> if the editing still goes on because\n+   *         the cell editor has objected to stopping the session;\n+   *         <code>true</code> if editing has been stopped.\n+   */\n+  public abstract boolean stopEditing(JTree tree);\n+\n+\n+  /**\n+   * Cancels editing a tree cell, discarding any entered value.\n+   * If no editing session is active, nothing happens. The cell\n+   * editor is not given an opportunity to veto the canceling.\n+   * In some look and feels, this action happens when the user has\n+   * pressed the escape key.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   */\n+  public abstract void cancelEditing(JTree tree);\n+\n+\n+  /**\n+   * Starts a session to edit a tree cell. If the cell editor\n+   * rejects editing the cell, it will just be selected.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param path the cell to edit.\n+   */\n+  public abstract void startEditingAtPath(JTree tree, TreePath path);\n+\n+\n+  /**\n+   * Retrieves the tree cell that is currently being edited.\n+   *\n+   * @return the currently edited path, or <code>null</code>\n+   *         if no editing session is currently active.\n+   */\n+  public abstract TreePath getEditingPath(JTree tree);\n }"}, {"sha": "0930610a3a9b78e25a13d74465c4be73ff0e9731", "filename": "libjava/javax/swing/plaf/basic/BasicTextUI.java", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTextUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTextUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTextUI.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* BasicTextUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -46,10 +46,16 @@\n public class BasicTextUI extends TextUI\n {\n     int gap = 3;\n-    View view = new RootView();\n+    View view = null; // was: new RootView();\n     Color textColor, disabledTextColor, normalBackgroundColor;\n     EditorKit kit = new DefaultEditorKit();\n     \n+    /* *****************************************************************\n+     * This View is way too incomplete to be of any use. To avoid errors\n+     * when compiling with the Sun JDK, it has been commented out.\n+     *                            -- Sascha Brawer (brawer@dandelis.ch)\n+     *\n+     * (begin of commented out section)\n     class RootView extends View\n     {\n \tRootView()\n@@ -68,6 +74,8 @@ public void paint(Graphics g, Shape s)\n \t\t}\n         }\n     }\n+    * (end of commented out section)\n+    *************************************************************** */\n \n     public BasicTextUI()\n     {\n@@ -128,6 +136,7 @@ public int getNextVisualPositionFrom(JTextComponent t,\n \t\t\t\t  Position.Bias b, \n \t\t\t\t  int direction,\n \t\t\t\t  Position.Bias[] biasRet)\n+        throws BadLocationException\n     {\n \treturn 0;\n     }\n@@ -138,11 +147,13 @@ public View getRootView(JTextComponent t)\n     }\n     \n     public Rectangle modelToView(JTextComponent t, int pos)\n+      throws BadLocationException\n     {\n \treturn modelToView(t, pos, null);\n     }\n     \n     public Rectangle modelToView(JTextComponent t, int pos, Position.Bias bias)\n+      throws BadLocationException\n     {\n \treturn null;\n     }"}, {"sha": "d9af1010ba79a5a7cb73edb1b52eed13a2cfbff5", "filename": "libjava/javax/swing/plaf/basic/BasicTreeUI.java", "status": "modified", "additions": 194, "deletions": 3, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTreeUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTreeUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTreeUI.java?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3", "patch": "@@ -1,5 +1,5 @@\n /* BasicTreeUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,8 +38,199 @@\n \n package javax.swing.plaf.basic;\n \n-import javax.swing.plaf.*;\n+import java.awt.Rectangle;\n+import javax.swing.JTree;\n+import javax.swing.plaf.TreeUI;\n+import javax.swing.tree.TreePath;\n \n-public class BasicTreeUI extends TreeUI\n+\n+/**\n+ * A delegate providing the user interface for <code>JTree</code>\n+ * according to the Basic look and feel. The current implementation\n+ * of GNU Classpath does really work; it is just a stub that allows\n+ * compiling the code.\n+ *\n+ * @see javax.swing.JTree\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public class BasicTreeUI\n+  extends TreeUI\n {\n+  /**\n+   * Determines the geometric extent of the label that is\n+   * drawn for a path.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param path the path whose label extent is requested.\n+   *\n+   * @return a rectangle enclosing the label, or <code>null</code>\n+   *         if <code>path</code> contains invalid nodes.\n+   */\n+  public Rectangle getPathBounds(JTree tree, TreePath path)\n+  {\n+    return null;   // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Creates a <code>TreePath</code> for the specified row.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param row the index of the row, which should be a number\n+   *        in the range <code>[0, getRowCount(tree) - 1]</code>.\n+   *\n+   * @return a <code>TreePath</code> for the specified row, or\n+   *         <code>null</code> if <code>row</code> is outside\n+   *         the valid range.\n+   */\n+  public TreePath getPathForRow(JTree tree, int row)\n+  {\n+    return null;  // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Determines in which row a <code>TreePath</code> is currently\n+   * being displayed.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param path the path for which the caller wants to know\n+   *        in which row it is being displayed.\n+   *\n+   * @return a number in the range <code>[0, getRowCount(tree)\n+   *         - 1]</code> if the path is currently on display;\n+   *         <code>-1</code> if the path is not shown to the\n+   *        user.\n+   */\n+  public int getRowForPath(JTree tree, TreePath path)\n+  {\n+    return -1;  // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Counts how many rows are currently displayed.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @return the number of visible rows.\n+   */\n+  public int getRowCount(JTree tree)\n+  {\n+    return 0;  // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Finds the path that is closest to the specified position.\n+   *\n+   * <p><img src=\"../TreeUI-1.png\" width=\"300\" height=\"250\"\n+   * alt=\"[A screen shot of a JTree] />\n+   *\n+   * <p>As shown by the above illustration, the bounds of the\n+   * closest path do not necessarily need to contain the passed\n+   * location.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param x the horizontal location, relative to the origin\n+   *        of <code>tree</code>.\n+   *\n+   * @param y the vertical location, relative to the origin\n+   *        of <code>tree</code>.\n+   *\n+   * @return the closest path, or <code>null</code> if the\n+   *         tree is currenlty not displaying any paths at all.\n+   */\n+  public TreePath getClosestPathForLocation(JTree tree,\n+                                            int x, int y)\n+  {\n+    return null;  // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Determines whether the user is currently editing a tree cell.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @see #getEditingPath\n+   */\n+  public boolean isEditing(JTree tree)\n+  {\n+    return false;  // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Stops editing a tree cell, committing the entered value into the\n+   * tree&#x2019;s model. If no editing session is active, or if the\n+   * active editor does not agree to stopping, nothing happens.  In\n+   * some look and feels, this action happens when the user has\n+   * pressed the enter key.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @return <code>false</code> if the editing still goes on because\n+   *         the cell editor has objected to stopping the session;\n+   *         <code>true</code> if editing has been stopped.\n+   */\n+  public boolean stopEditing(JTree tree)\n+  {\n+    return true;  // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Cancels editing a tree cell, discarding any entered value.\n+   * If no editing session is active, nothing happens. The cell\n+   * editor is not given an opportunity to veto the canceling.\n+   * In some look and feels, this action happens when the user has\n+   * pressed the escape key.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   */\n+  public void cancelEditing(JTree tree)\n+  {\n+    // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Starts a session to edit a tree cell. If the cell editor\n+   * rejects editing the cell, it will just be selected.\n+   *\n+   * @param tree the <code>JTree</code> for which this delegate\n+   *        object provides the user interface.\n+   *\n+   * @param path the cell to edit.\n+   */\n+  public void startEditingAtPath(JTree tree, TreePath path)\n+  {\n+    // FIXME: not implemented\n+  }\n+\n+\n+  /**\n+   * Retrieves the tree cell that is currently being edited.\n+   *\n+   * @return the currently edited path, or <code>null</code>\n+   *         if no editing session is currently active.\n+   */\n+  public TreePath getEditingPath(JTree tree)\n+  {\n+    return null;  // FIXME: not implemented\n+  }\n }"}, {"sha": "0f01ab03c239641662789e70ebf4a7aac9c664c7", "filename": "libjava/javax/swing/plaf/doc-files/TreeUI-1.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FTreeUI-1.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FTreeUI-1.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FTreeUI-1.png?ref=1c9d1c5bb9ff30d675a280ae8eeebc0207ec06c3"}]}