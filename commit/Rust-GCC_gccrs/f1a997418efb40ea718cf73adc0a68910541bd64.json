{"sha": "f1a997418efb40ea718cf73adc0a68910541bd64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhOTk3NDE4ZWZiNDBlYTcxOGNmNzNhZGMwYTY4OTEwNTQxYmQ2NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-25T20:25:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-25T20:25:39Z"}, "message": "Define front-end/back-end interface functions and structures.\n\nFrom-SVN: r14311", "tree": {"sha": "317f9dd83f20e30c10ed498e5699190235c0d60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/317f9dd83f20e30c10ed498e5699190235c0d60f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a997418efb40ea718cf73adc0a68910541bd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a997418efb40ea718cf73adc0a68910541bd64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a997418efb40ea718cf73adc0a68910541bd64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a997418efb40ea718cf73adc0a68910541bd64/comments", "author": null, "committer": null, "parents": [{"sha": "2024f9e4dc4746fc1f87a82ccd998d0c24f75d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2024f9e4dc4746fc1f87a82ccd998d0c24f75d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2024f9e4dc4746fc1f87a82ccd998d0c24f75d8c"}], "stats": {"total": 83, "additions": 61, "deletions": 22}, "files": [{"sha": "f904733695a8dcae589611a625803f84d86f9e66", "filename": "gcc/objc/thr.h", "status": "modified", "additions": 61, "deletions": 22, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a997418efb40ea718cf73adc0a68910541bd64/gcc%2Fobjc%2Fthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a997418efb40ea718cf73adc0a68910541bd64/gcc%2Fobjc%2Fthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr.h?ref=f1a997418efb40ea718cf73adc0a68910541bd64", "patch": "@@ -49,38 +49,53 @@ extern int __objc_thread_exit_status;      /* Global exit status.   */\n  *  Thread safe implementation types and functions.  \n  */\n \n+/* Thread priorities */\n #define OBJC_THREAD_INTERACTIVE_PRIORITY        2\n #define OBJC_THREAD_BACKGROUND_PRIORITY         1\n #define OBJC_THREAD_LOW_PRIORITY                0\n \n+/* A thread */\n typedef void * objc_thread_t;\n+\n+/* This structure represents a single mutual exclusion lock. */\n+struct objc_mutex\n+{\n+  volatile objc_thread_t owner;     /* Id of thread that owns. */\n+  volatile int depth;               /* # of acquires. */\n+  void * backend;                   /* Specific to backend */\n+};\n typedef struct objc_mutex *objc_mutex_t;\n+\n+/* This structure represents a single condition mutex */\n+struct objc_condition\n+{\n+  void * backend;                   /* Specific to backend */\n+};\n typedef struct objc_condition *objc_condition_t;\n \n+/* Frontend mutex functions */\n objc_mutex_t objc_mutex_allocate(void);\n-int     objc_mutex_deallocate(objc_mutex_t mutex);\n-int     objc_mutex_lock(objc_mutex_t mutex);\n-int     objc_mutex_unlock(objc_mutex_t mutex);\n-int     objc_mutex_trylock(objc_mutex_t mutex);\n+int objc_mutex_deallocate(objc_mutex_t mutex);\n+int objc_mutex_lock(objc_mutex_t mutex);\n+int objc_mutex_unlock(objc_mutex_t mutex);\n+int objc_mutex_trylock(objc_mutex_t mutex);\n \n+/* Frontend condition mutex functions */\n objc_condition_t objc_condition_allocate(void);\n-int     objc_condition_deallocate(objc_condition_t condition);\n-int     objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex);\n-int     objc_condition_signal(objc_condition_t condition);\n-int     objc_condition_broadcast(objc_condition_t condition);\n-\n-objc_thread_t objc_thread_create(void (*func)(void *arg), void *arg);\n-void    objc_thread_yield(void);\n-int     objc_thread_exit(void);\n-int     objc_thread_set_priority(int priority);\n-int     objc_thread_get_priority(void);\n-void *  objc_thread_get_data(void);\n-int     objc_thread_set_data(void *value);\n-objc_thread_t objc_thread_id(void);\n+int objc_condition_deallocate(objc_condition_t condition);\n+int objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex);\n+int objc_condition_signal(objc_condition_t condition);\n+int objc_condition_broadcast(objc_condition_t condition);\n \n+/* Frontend thread functions */\n objc_thread_t objc_thread_detach(SEL selector, id object, id argument);\n-int     objc_mutex_lock_x(objc_mutex_t mutex, const char *f, int l);\n-int     objc_mutex_unlock_x(objc_mutex_t mutex, const char *f, int l);\n+void objc_thread_yield(void);\n+int objc_thread_exit(void);\n+int objc_thread_set_priority(int priority);\n+int objc_thread_get_priority(void);\n+void * objc_thread_get_data(void);\n+int objc_thread_set_data(void *value);\n+objc_thread_t objc_thread_id(void);\n \n /*\n   Use this to set the hook function that will be called when the \n@@ -97,8 +112,32 @@ int     objc_mutex_unlock_x(objc_mutex_t mutex, const char *f, int l);\n typedef void (*objc_thread_callback)();\n objc_thread_callback objc_set_thread_callback(objc_thread_callback func);\n \n-/* For debugging of locks, uncomment these two macros: */\n-/* #define objc_mutex_lock(x)      objc_mutex_lock_x(x, __FILE__, __LINE__) */\n-/* #define objc_mutex_unlock(x)    objc_mutex_unlock_x(x, __FILE__, __LINE__)*/\n+/* Backend initialization functions */\n+int __objc_init_thread_system(void);\n+int __objc_fini_thread_system(void);\n+\n+/* Backend mutex functions */\n+int __objc_mutex_allocate(objc_mutex_t mutex);\n+int __objc_mutex_deallocate(objc_mutex_t mutex);\n+int __objc_mutex_lock(objc_mutex_t mutex);\n+int __objc_mutex_trylock(objc_mutex_t mutex);\n+int __objc_mutex_unlock(objc_mutex_t mutex);\n+\n+/* Backend condition mutex functions */\n+int __objc_condition_allocate(objc_condition_t condition);\n+int __objc_condition_deallocate(objc_condition_t condition);\n+int __objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex);\n+int __objc_condition_broadcast(objc_condition_t condition);\n+int __objc_condition_signal(objc_condition_t condition);\n+\n+/* Backend thread functions */\n+objc_thread_t __objc_thread_detach(void (*func)(void *arg), void *arg);\n+int __objc_thread_set_priority(int priority);\n+int __objc_thread_get_priority(void);\n+void __objc_thread_yield(void);\n+int __objc_thread_exit(void);\n+objc_thread_t __objc_thread_id(void);\n+int __objc_thread_set_data(void *value);\n+void * __objc_thread_get_data(void);\n \n #endif /* not __thread_INCLUDE_GNU */"}]}