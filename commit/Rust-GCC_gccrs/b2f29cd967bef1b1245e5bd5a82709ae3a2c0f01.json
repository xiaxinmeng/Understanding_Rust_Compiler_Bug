{"sha": "b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJmMjljZDk2N2JlZjFiMTI0NWU1YmQ1YTgyNzA5YWUzYTJjMGYwMQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-01-10T20:49:29Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-01-10T20:49:29Z"}, "message": "cfns.gperf: ANSIfy function declarations.\n\n\t* cfns.gperf: ANSIfy function declarations.\n\t* cfns.h: Regenerate.\n\t* cp-tree.h: ANSIfy function declarations.\n\nFrom-SVN: r61167", "tree": {"sha": "25bc24f958f60f8f2ae669f55b450f3e76b629ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25bc24f958f60f8f2ae669f55b450f3e76b629ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/comments", "author": null, "committer": null, "parents": [{"sha": "2050a1bbac14451de357a7d78ffdc6621f49ab30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2050a1bbac14451de357a7d78ffdc6621f49ab30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2050a1bbac14451de357a7d78ffdc6621f49ab30"}], "stats": {"total": 1282, "additions": 650, "deletions": 632}, "files": [{"sha": "382e26a8ae152e0a3609a2f6093a8df4931dd41f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "patch": "@@ -1,3 +1,9 @@\n+2003-01-10  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* cfns.gperf: ANSIfy function declarations.\n+\t* cfns.h: Regenerate.\n+\t* cp-tree.h: ANSIfy function declarations.\n+\n 2003-01-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (reparse_absdcl_as_expr): Remove.\n@@ -36,6 +42,11 @@\n \n 2003-01-09  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n+        * cfns.gperf: ANSIfy function declarations.\n+        * cfns.h: Regenerate.\n+        * cp-tree.h: ANSIfy function declarations.\n+        * parser.c: ANSIfy function declarations & definitions.\n+\n \t* decl.c (bad_specifiers): Fix parameter order error I introduced.\n \n 2003-01-09  Geoffrey Keating  <geoffk@apple.com>"}, {"sha": "850b66a1959a520ed3aabe5585c82dcc8a999437", "filename": "gcc/cp/cfns.gperf", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2Fcfns.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2Fcfns.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.gperf?ref=b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "patch": "@@ -2,11 +2,11 @@\n #ifdef __GNUC__\n __inline\n #endif\n-static unsigned int hash PARAMS ((const char *, unsigned int));\n+static unsigned int hash (const char *, unsigned int);\n #ifdef __GNUC__\n __inline\n #endif\n-const char * libc_name_p PARAMS ((const char *, unsigned int));\n+const char * libc_name_p (const char *, unsigned int);\n %}\n # The standard C library functions, for feeding to gperf; the result is used\n # by nothrow_libfn_p."}, {"sha": "e4200947eb38c2179595fa51069c8c8ba68a852e", "filename": "gcc/cp/cfns.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2Fcfns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2Fcfns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.h?ref=b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "patch": "@@ -1,17 +1,21 @@\n-/* C code produced by gperf version 2.7 */\n-/* Command-line: gperf -o -C -E -k 1-6,$ -j1 -D -N libc_name_p ../../../egcs-CVS20000404/gcc/cp/cfns.gperf  */\n+/* C code produced by gperf version 2.7.2 */\n+/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p ../../gcc/gcc/cp/cfns.gperf  */\n #ifdef __GNUC__\n __inline\n #endif\n-static unsigned int hash PARAMS ((const char *, unsigned int));\n+static unsigned int hash (const char *, unsigned int);\n #ifdef __GNUC__\n __inline\n #endif\n-const char * libc_name_p PARAMS ((const char *, unsigned int));\n+const char * libc_name_p (const char *, unsigned int);\n /* maximum key range = 1020, duplicates = 1 */\n \n #ifdef __GNUC__\n __inline\n+#else\n+#ifdef __cplusplus\n+inline\n+#endif\n #endif\n static unsigned int\n hash (str, len)"}, {"sha": "a9d4f2b228de1d1576380f1725d173b7d9f8dfad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 629, "deletions": 626, "changes": 1255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2f29cd967bef1b1245e5bd5a82709ae3a2c0f01", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for C++ parsing and type checking.\n-   Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2003,\n-   2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -3553,7 +3553,7 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n \n /* in lex.c  */\n \n-extern void init_reswords PARAMS ((void));\n+extern void init_reswords (void);\n \n /* Indexed by TREE_CODE, these tables give C-looking names to\n    operators represented by TREE_CODES.  For example,\n@@ -3581,11 +3581,11 @@ extern GTY(()) operator_name_info_t assignment_operator_name_info\n \n /* in call.c */\n extern bool check_dtor_name (tree, tree);\n-extern int get_arglist_len_in_bytes\t\tPARAMS ((tree));\n+extern int get_arglist_len_in_bytes\t\t(tree);\n \n-extern tree build_vfield_ref\t\t\tPARAMS ((tree, tree));\n+extern tree build_vfield_ref\t\t\t(tree, tree);\n extern tree build_scoped_method_call (tree, tree, tree, tree);\n-extern tree build_conditional_expr\t\tPARAMS ((tree, tree, tree));\n+extern tree build_conditional_expr\t\t(tree, tree, tree);\n extern tree build_addr_func (tree);\n extern tree build_call (tree, tree);\n extern tree build_method_call (tree, tree, tree, tree, int);\n@@ -3609,61 +3609,61 @@ extern tree build_x_va_arg (tree, tree);\n extern tree cxx_type_promotes_to (tree);\n extern tree type_passed_as (tree);\n extern tree convert_for_arg_passing (tree, tree);\n-extern tree cp_convert_parm_for_inlining        PARAMS ((tree, tree, tree));\n+extern tree cp_convert_parm_for_inlining        (tree, tree, tree);\n extern bool is_properly_derived_from (tree, tree);\n extern tree initialize_reference (tree, tree);\n extern tree strip_top_quals (tree);\n extern tree perform_implicit_conversion (tree, tree);\n extern tree in_charge_arg_for_name (tree);\n \n /* in class.c */\n-extern tree build_base_path\t\t\tPARAMS ((enum tree_code, tree, tree, int));\n-extern tree convert_to_base                     PARAMS ((tree, tree, bool));\n-extern tree build_vtbl_ref\t\t\tPARAMS ((tree, tree));\n-extern tree build_vfn_ref\t\t\tPARAMS ((tree, tree));\n-extern tree get_vtable_decl                     PARAMS ((tree, int));\n+extern tree build_base_path\t\t\t(enum tree_code, tree, tree, int);\n+extern tree convert_to_base                     (tree, tree, bool);\n+extern tree build_vtbl_ref\t\t\t(tree, tree);\n+extern tree build_vfn_ref\t\t\t(tree, tree);\n+extern tree get_vtable_decl                     (tree, int);\n extern void resort_sorted_fields \n-  PARAMS ((void *, void *, gt_pointer_operator, void *));\n+  (void *, void *, gt_pointer_operator, void *);\n extern void resort_type_method_vec\n-  PARAMS ((void *, void *, gt_pointer_operator, void *));\n-extern void add_method\t\t\t\tPARAMS ((tree, tree, int));\n-extern int currently_open_class\t\t\tPARAMS ((tree));\n-extern tree currently_open_derived_class\tPARAMS ((tree));\n-extern void duplicate_tag_error\t\t\tPARAMS ((tree));\n-extern tree finish_struct\t\t\tPARAMS ((tree, tree));\n-extern void finish_struct_1\t\t\tPARAMS ((tree));\n-extern int resolves_to_fixed_type_p\t\tPARAMS ((tree, int *));\n-extern void init_class_processing\t\tPARAMS ((void));\n-extern int is_empty_class\t\t\tPARAMS ((tree));\n-extern void pushclass\t\t\t\tPARAMS ((tree, int));\n-extern void popclass\t\t\t\tPARAMS ((void));\n-extern void push_nested_class\t\t\tPARAMS ((tree, int));\n-extern void pop_nested_class\t\t\tPARAMS ((void));\n-extern int current_lang_depth\t\t\tPARAMS ((void));\n-extern void push_lang_context\t\t\tPARAMS ((tree));\n-extern void pop_lang_context\t\t\tPARAMS ((void));\n-extern tree instantiate_type\t\t\tPARAMS ((tree, tree, tsubst_flags_t));\n-extern void print_class_statistics              PARAMS ((void));\n-extern void cxx_print_statistics\t\tPARAMS ((void));\n+  (void *, void *, gt_pointer_operator, void *);\n+extern void add_method\t\t\t\t(tree, tree, int);\n+extern int currently_open_class\t\t\t(tree);\n+extern tree currently_open_derived_class\t(tree);\n+extern void duplicate_tag_error\t\t\t(tree);\n+extern tree finish_struct\t\t\t(tree, tree);\n+extern void finish_struct_1\t\t\t(tree);\n+extern int resolves_to_fixed_type_p\t\t(tree, int *);\n+extern void init_class_processing\t\t(void);\n+extern int is_empty_class\t\t\t(tree);\n+extern void pushclass\t\t\t\t(tree, int);\n+extern void popclass\t\t\t\t(void);\n+extern void push_nested_class\t\t\t(tree, int);\n+extern void pop_nested_class\t\t\t(void);\n+extern int current_lang_depth\t\t\t(void);\n+extern void push_lang_context\t\t\t(tree);\n+extern void pop_lang_context\t\t\t(void);\n+extern tree instantiate_type\t\t\t(tree, tree, tsubst_flags_t);\n+extern void print_class_statistics              (void);\n+extern void cxx_print_statistics\t\t(void);\n extern void cxx_print_xnode (FILE *, tree, int);\n extern void cxx_print_decl (FILE *, tree, int);\n extern void cxx_print_type (FILE *, tree, int);\n extern void cxx_print_identifier (FILE *, tree, int);\n-extern void cxx_print_error_function\tPARAMS ((struct diagnostic_context *,\n-\t\t\t\t\t\t const char *));\n-extern void build_self_reference\t\tPARAMS ((void));\n-extern int same_signature_p\t\t\tPARAMS ((tree, tree));\n-extern void warn_hidden\t\t\t\tPARAMS ((tree));\n-extern void maybe_add_class_template_decl_list\tPARAMS ((tree, tree, int));\n-extern tree get_enclosing_class\t\t\tPARAMS ((tree));\n-int is_base_of_enclosing_class\t\t\tPARAMS ((tree, tree));\n-extern void unreverse_member_declarations       PARAMS ((tree));\n-extern void invalidate_class_lookup_cache       PARAMS ((void));\n-extern void maybe_note_name_used_in_class       PARAMS ((tree, tree));\n-extern void note_name_declared_in_class         PARAMS ((tree, tree));\n-extern tree get_vtbl_decl_for_binfo             PARAMS ((tree));\n-extern tree get_vtt_name                        PARAMS ((tree));\n-extern tree get_primary_binfo                   PARAMS ((tree));\n+extern void cxx_print_error_function\t(struct diagnostic_context *,\n+\t\t\t\t\t\t const char *);\n+extern void build_self_reference\t\t(void);\n+extern int same_signature_p\t\t\t(tree, tree);\n+extern void warn_hidden\t\t\t\t(tree);\n+extern void maybe_add_class_template_decl_list\t(tree, tree, int);\n+extern tree get_enclosing_class\t\t\t(tree);\n+int is_base_of_enclosing_class\t\t\t(tree, tree);\n+extern void unreverse_member_declarations       (tree);\n+extern void invalidate_class_lookup_cache       (void);\n+extern void maybe_note_name_used_in_class       (tree, tree);\n+extern void note_name_declared_in_class         (tree, tree);\n+extern tree get_vtbl_decl_for_binfo             (tree);\n+extern tree get_vtt_name                        (tree);\n+extern tree get_primary_binfo                   (tree);\n \n /* in cvt.c */\n extern tree convert_to_reference (tree, tree, int, int, tree);\n@@ -3677,161 +3677,161 @@ extern tree build_type_conversion (tree, tree, int);\n extern tree build_expr_type_conversion (int, tree, bool);\n extern tree type_promotes_to (tree);\n extern tree perform_qualification_conversions (tree, tree);\n-extern void clone_function_decl                 PARAMS ((tree, int));\n-extern void adjust_clone_args\t\t\tPARAMS ((tree));\n+extern void clone_function_decl                 (tree, int);\n+extern void adjust_clone_args\t\t\t(tree);\n \n /* decl.c */\n-extern int global_bindings_p\t\t\tPARAMS ((void));\n-extern int kept_level_p\t\t\t\tPARAMS ((void));\n-extern tree getdecls\t\t\t\tPARAMS ((void));\n-extern void pushlevel\t\t\t\tPARAMS ((int));\n-extern tree poplevel\t\t\t\tPARAMS ((int,int, int));\n-extern void insert_block\t\t\tPARAMS ((tree));\n-extern void set_block\t\t\t\tPARAMS ((tree));\n-extern tree pushdecl\t\t\t\tPARAMS ((tree));\n-extern void cxx_init_decl_processing\t\tPARAMS ((void));\n+extern int global_bindings_p\t\t\t(void);\n+extern int kept_level_p\t\t\t\t(void);\n+extern tree getdecls\t\t\t\t(void);\n+extern void pushlevel\t\t\t\t(int);\n+extern tree poplevel\t\t\t\t(int,int, int);\n+extern void insert_block\t\t\t(tree);\n+extern void set_block\t\t\t\t(tree);\n+extern tree pushdecl\t\t\t\t(tree);\n+extern void cxx_init_decl_processing\t\t(void);\n enum cp_tree_node_structure_enum cp_tree_node_structure \n-  PARAMS ((union lang_tree_node *));\n-extern void cxx_insert_default_attributes\tPARAMS ((tree));\n-extern bool cxx_mark_addressable\t\tPARAMS ((tree));\n-extern void cxx_push_function_context\t\tPARAMS ((struct function *));\n-extern void cxx_pop_function_context\t\tPARAMS ((struct function *));\n-extern void cxx_mark_function_context\t\tPARAMS ((struct function *));\n-extern int toplevel_bindings_p\t\t\tPARAMS ((void));\n-extern int namespace_bindings_p\t\t\tPARAMS ((void));\n-extern void keep_next_level\t\t\tPARAMS ((int));\n-extern int template_parm_scope_p\t\tPARAMS ((void));\n-extern void set_class_shadows\t\t\tPARAMS ((tree));\n-extern void maybe_push_cleanup_level\t\tPARAMS ((tree));\n-extern void begin_scope                         PARAMS ((scope_kind));\n-extern void finish_scope                        PARAMS ((void));\n-extern void resume_level\t\t\tPARAMS ((struct cp_binding_level *));\n-extern void delete_block\t\t\tPARAMS ((tree));\n-extern void add_block_current_level\t\tPARAMS ((tree));\n-extern void pushlevel_class\t\t\tPARAMS ((void));\n-extern void poplevel_class                      PARAMS ((void));\n-extern void print_binding_stack\t\t\tPARAMS ((void));\n-extern void print_binding_level\t\t\tPARAMS ((struct cp_binding_level *));\n-extern void push_namespace\t\t\tPARAMS ((tree));\n-extern void pop_namespace\t\t\tPARAMS ((void));\n-extern void push_nested_namespace\t\tPARAMS ((tree));\n-extern void pop_nested_namespace\t\tPARAMS ((tree));\n-extern void maybe_push_to_top_level\t\tPARAMS ((int));\n-extern void push_to_top_level\t\t\tPARAMS ((void));\n-extern void pop_from_top_level\t\t\tPARAMS ((void));\n-extern void push_switch\t\t\t\tPARAMS ((tree));\n-extern void pop_switch\t\t\t\tPARAMS ((void));\n-extern tree identifier_type_value\t\tPARAMS ((tree));\n-extern void set_identifier_type_value\t\tPARAMS ((tree, tree));\n-extern void pop_everything\t\t\tPARAMS ((void));\n-extern void pushtag\t\t\t\tPARAMS ((tree, tree, int));\n-extern tree make_anon_name\t\t\tPARAMS ((void));\n-extern void clear_anon_tags\t\t\tPARAMS ((void));\n-extern int decls_match\t\t\t\tPARAMS ((tree, tree));\n-extern int duplicate_decls\t\t\tPARAMS ((tree, tree));\n-extern tree pushdecl_top_level\t\t\tPARAMS ((tree));\n-extern void pushdecl_class_level\t\tPARAMS ((tree));\n-extern tree pushdecl_namespace_level            PARAMS ((tree));\n-extern tree push_using_decl                     PARAMS ((tree, tree));\n-extern tree push_using_directive                PARAMS ((tree));\n-extern void push_class_level_binding\t\tPARAMS ((tree, tree));\n-extern tree implicitly_declare\t\t\tPARAMS ((tree));\n-extern tree declare_local_label                 PARAMS ((tree));\n-extern tree define_label\t\t\tPARAMS ((const char *, int, tree));\n-extern void check_goto\t\t\t\tPARAMS ((tree));\n-extern void define_case_label\t\t\tPARAMS ((void));\n-extern tree binding_for_name                    PARAMS ((tree, tree));\n-extern tree namespace_binding                   PARAMS ((tree, tree));\n-extern void set_namespace_binding               PARAMS ((tree, tree, tree));\n-extern tree lookup_namespace_name\t\tPARAMS ((tree, tree));\n-extern tree build_typename_type                 PARAMS ((tree, tree, tree, tree));\n-extern tree make_typename_type\t\t\tPARAMS ((tree, tree, tsubst_flags_t));\n-extern tree make_unbound_class_template\t\tPARAMS ((tree, tree, tsubst_flags_t));\n-extern tree lookup_name_nonclass\t\tPARAMS ((tree));\n-extern tree lookup_function_nonclass            PARAMS ((tree, tree));\n+  (union lang_tree_node *);\n+extern void cxx_insert_default_attributes\t(tree);\n+extern bool cxx_mark_addressable\t\t(tree);\n+extern void cxx_push_function_context\t\t(struct function *);\n+extern void cxx_pop_function_context\t\t(struct function *);\n+extern void cxx_mark_function_context\t\t(struct function *);\n+extern int toplevel_bindings_p\t\t\t(void);\n+extern int namespace_bindings_p\t\t\t(void);\n+extern void keep_next_level\t\t\t(int);\n+extern int template_parm_scope_p\t\t(void);\n+extern void set_class_shadows\t\t\t(tree);\n+extern void maybe_push_cleanup_level\t\t(tree);\n+extern void begin_scope                         (scope_kind);\n+extern void finish_scope                        (void);\n+extern void resume_level\t\t\t(struct cp_binding_level *);\n+extern void delete_block\t\t\t(tree);\n+extern void add_block_current_level\t\t(tree);\n+extern void pushlevel_class\t\t\t(void);\n+extern void poplevel_class                      (void);\n+extern void print_binding_stack\t\t\t(void);\n+extern void print_binding_level\t\t\t(struct cp_binding_level *);\n+extern void push_namespace\t\t\t(tree);\n+extern void pop_namespace\t\t\t(void);\n+extern void push_nested_namespace\t\t(tree);\n+extern void pop_nested_namespace\t\t(tree);\n+extern void maybe_push_to_top_level\t\t(int);\n+extern void push_to_top_level\t\t\t(void);\n+extern void pop_from_top_level\t\t\t(void);\n+extern void push_switch\t\t\t\t(tree);\n+extern void pop_switch\t\t\t\t(void);\n+extern tree identifier_type_value\t\t(tree);\n+extern void set_identifier_type_value\t\t(tree, tree);\n+extern void pop_everything\t\t\t(void);\n+extern void pushtag\t\t\t\t(tree, tree, int);\n+extern tree make_anon_name\t\t\t(void);\n+extern void clear_anon_tags\t\t\t(void);\n+extern int decls_match\t\t\t\t(tree, tree);\n+extern int duplicate_decls\t\t\t(tree, tree);\n+extern tree pushdecl_top_level\t\t\t(tree);\n+extern void pushdecl_class_level\t\t(tree);\n+extern tree pushdecl_namespace_level            (tree);\n+extern tree push_using_decl                     (tree, tree);\n+extern tree push_using_directive                (tree);\n+extern void push_class_level_binding\t\t(tree, tree);\n+extern tree implicitly_declare\t\t\t(tree);\n+extern tree declare_local_label                 (tree);\n+extern tree define_label\t\t\t(const char *, int, tree);\n+extern void check_goto\t\t\t\t(tree);\n+extern void define_case_label\t\t\t(void);\n+extern tree binding_for_name                    (tree, tree);\n+extern tree namespace_binding                   (tree, tree);\n+extern void set_namespace_binding               (tree, tree, tree);\n+extern tree lookup_namespace_name\t\t(tree, tree);\n+extern tree build_typename_type                 (tree, tree, tree, tree);\n+extern tree make_typename_type\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree make_unbound_class_template\t\t(tree, tree, tsubst_flags_t);\n+extern tree lookup_name_nonclass\t\t(tree);\n+extern tree lookup_function_nonclass            (tree, tree);\n extern tree lookup_qualified_name               (tree, tree, bool, int);\n-extern tree lookup_name\t\t\t\tPARAMS ((tree, int));\n-extern tree lookup_name_current_level\t\tPARAMS ((tree));\n-extern tree lookup_type_current_level\t\tPARAMS ((tree));\n+extern tree lookup_name\t\t\t\t(tree, int);\n+extern tree lookup_name_current_level\t\t(tree);\n+extern tree lookup_type_current_level\t\t(tree);\n extern tree lookup_name_real                    (tree, int, int, int, int);\n-extern tree namespace_ancestor\t\t\tPARAMS ((tree, tree));\n-extern tree unqualified_namespace_lookup\tPARAMS ((tree, int, tree *));\n+extern tree namespace_ancestor\t\t\t(tree, tree);\n+extern tree unqualified_namespace_lookup\t(tree, int, tree *);\n extern tree check_for_out_of_scope_variable     (tree);\n extern bool lookup_using_namespace (tree, tree, tree, tree, int, tree *);\n extern bool qualified_lookup_using_namespace (tree, tree, tree, int);\n-extern tree build_library_fn\t\t\tPARAMS ((tree, tree));\n-extern tree build_library_fn_ptr\t\tPARAMS ((const char *, tree));\n-extern tree build_cp_library_fn_ptr\t\tPARAMS ((const char *, tree));\n-extern tree push_library_fn\t\t\tPARAMS ((tree, tree));\n-extern tree push_void_library_fn\t\tPARAMS ((tree, tree));\n-extern tree push_throw_library_fn\t\tPARAMS ((tree, tree));\n-extern int init_type_desc\t\t\tPARAMS ((void));\n-extern tree check_tag_decl\t\t\tPARAMS ((tree));\n-extern tree shadow_tag\t\t\t\tPARAMS ((tree));\n-extern tree groktypename\t\t\tPARAMS ((tree));\n-extern tree start_decl\t\t\t\tPARAMS ((tree, tree, int, tree, tree));\n-extern void start_decl_1\t\t\tPARAMS ((tree));\n-extern void cp_finish_decl\t\t\tPARAMS ((tree, tree, tree, int));\n-extern void finish_decl\t\t\t\tPARAMS ((tree, tree, tree));\n-extern void maybe_inject_for_scope_var          PARAMS ((tree));\n-extern tree start_handler_parms                 PARAMS ((tree, tree));\n-extern int complete_array_type\t\t\tPARAMS ((tree, tree, int));\n-extern tree build_ptrmemfunc_type\t\tPARAMS ((tree));\n+extern tree build_library_fn\t\t\t(tree, tree);\n+extern tree build_library_fn_ptr\t\t(const char *, tree);\n+extern tree build_cp_library_fn_ptr\t\t(const char *, tree);\n+extern tree push_library_fn\t\t\t(tree, tree);\n+extern tree push_void_library_fn\t\t(tree, tree);\n+extern tree push_throw_library_fn\t\t(tree, tree);\n+extern int init_type_desc\t\t\t(void);\n+extern tree check_tag_decl\t\t\t(tree);\n+extern tree shadow_tag\t\t\t\t(tree);\n+extern tree groktypename\t\t\t(tree);\n+extern tree start_decl\t\t\t\t(tree, tree, int, tree, tree);\n+extern void start_decl_1\t\t\t(tree);\n+extern void cp_finish_decl\t\t\t(tree, tree, tree, int);\n+extern void finish_decl\t\t\t\t(tree, tree, tree);\n+extern void maybe_inject_for_scope_var          (tree);\n+extern tree start_handler_parms                 (tree, tree);\n+extern int complete_array_type\t\t\t(tree, tree, int);\n+extern tree build_ptrmemfunc_type\t\t(tree);\n extern tree build_ptrmem_type                   (tree, tree);\n /* the grokdeclarator prototype is in decl.h */\n-extern int parmlist_is_exprlist\t\t\tPARAMS ((tree));\n-extern int copy_fn_p\t\t\t\tPARAMS ((tree));\n-extern tree get_scope_of_declarator             PARAMS ((tree));\n-extern void grok_special_member_properties\tPARAMS ((tree));\n-extern int grok_ctor_properties\t\t\tPARAMS ((tree, tree));\n-extern void grok_op_properties\t\t\tPARAMS ((tree, int));\n+extern int parmlist_is_exprlist\t\t\t(tree);\n+extern int copy_fn_p\t\t\t\t(tree);\n+extern tree get_scope_of_declarator             (tree);\n+extern void grok_special_member_properties\t(tree);\n+extern int grok_ctor_properties\t\t\t(tree, tree);\n+extern void grok_op_properties\t\t\t(tree, int);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tree, bool);\n-extern tree xref_tag_from_type\t\t\tPARAMS ((tree, tree, int));\n-extern void xref_basetypes\t\t\tPARAMS ((tree, tree));\n-extern tree start_enum\t\t\t\tPARAMS ((tree));\n-extern void finish_enum\t\t\t\tPARAMS ((tree));\n-extern void build_enumerator\t\t\tPARAMS ((tree, tree, tree));\n-extern int start_function\t\t\tPARAMS ((tree, tree, tree, int));\n-extern tree begin_function_body\t\t\tPARAMS ((void));\n-extern void finish_function_body\t\tPARAMS ((tree));\n-extern tree finish_function\t\t\tPARAMS ((int));\n-extern tree start_method\t\t\tPARAMS ((tree, tree, tree));\n-extern tree finish_method\t\t\tPARAMS ((tree));\n-extern void maybe_register_incomplete_var       PARAMS ((tree));\n-extern void complete_vars\t\t\tPARAMS ((tree));\n-extern void finish_stmt\t\t\t\tPARAMS ((void));\n-extern void print_other_binding_stack\t\tPARAMS ((struct cp_binding_level *));\n-extern void revert_static_member_fn             PARAMS ((tree));\n-extern void fixup_anonymous_aggr                PARAMS ((tree));\n-extern int check_static_variable_definition     PARAMS ((tree, tree));\n-extern tree compute_array_index_type\t\tPARAMS ((tree, tree));\n-extern void push_local_binding                  PARAMS ((tree, tree, int));\n-extern int push_class_binding                   PARAMS ((tree, tree));\n-extern tree check_default_argument              PARAMS ((tree, tree));\n-extern tree push_overloaded_decl\t\tPARAMS ((tree, int));\n-extern void clear_identifier_class_values       PARAMS ((void));\n-extern void storetags                           PARAMS ((tree));\n-extern int vtable_decl_p                        PARAMS ((tree, void *));\n-extern int vtype_decl_p                         PARAMS ((tree, void *));\n-extern int sigtable_decl_p                      PARAMS ((tree, void *));\n+extern tree xref_tag_from_type\t\t\t(tree, tree, int);\n+extern void xref_basetypes\t\t\t(tree, tree);\n+extern tree start_enum\t\t\t\t(tree);\n+extern void finish_enum\t\t\t\t(tree);\n+extern void build_enumerator\t\t\t(tree, tree, tree);\n+extern int start_function\t\t\t(tree, tree, tree, int);\n+extern tree begin_function_body\t\t\t(void);\n+extern void finish_function_body\t\t(tree);\n+extern tree finish_function\t\t\t(int);\n+extern tree start_method\t\t\t(tree, tree, tree);\n+extern tree finish_method\t\t\t(tree);\n+extern void maybe_register_incomplete_var       (tree);\n+extern void complete_vars\t\t\t(tree);\n+extern void finish_stmt\t\t\t\t(void);\n+extern void print_other_binding_stack\t\t(struct cp_binding_level *);\n+extern void revert_static_member_fn             (tree);\n+extern void fixup_anonymous_aggr                (tree);\n+extern int check_static_variable_definition     (tree, tree);\n+extern tree compute_array_index_type\t\t(tree, tree);\n+extern void push_local_binding                  (tree, tree, int);\n+extern int push_class_binding                   (tree, tree);\n+extern tree check_default_argument              (tree, tree);\n+extern tree push_overloaded_decl\t\t(tree, int);\n+extern void clear_identifier_class_values       (void);\n+extern void storetags                           (tree);\n+extern int vtable_decl_p                        (tree, void *);\n+extern int vtype_decl_p                         (tree, void *);\n+extern int sigtable_decl_p                      (tree, void *);\n typedef bool (*walk_globals_pred) (tree, void *);\n typedef bool (*walk_globals_fn) (tree *, void *);\n extern bool walk_globals (walk_globals_pred, walk_globals_fn, void *);\n extern bool walk_vtables (walk_globals_pred, walk_globals_fn, void *);\n-typedef int (*walk_namespaces_fn)               PARAMS ((tree, void *));\n-extern int walk_namespaces                      PARAMS ((walk_namespaces_fn,\n-\t\t\t\t\t\t       void *));\n-extern int wrapup_globals_for_namespace         PARAMS ((tree, void *));\n-extern tree cp_namespace_decls                  PARAMS ((tree));\n-extern tree create_implicit_typedef             PARAMS ((tree, tree));\n-extern tree maybe_push_decl                     PARAMS ((tree));\n-extern tree build_target_expr_with_type         PARAMS ((tree, tree));\n-extern int local_variable_p                     PARAMS ((tree));\n-extern int nonstatic_local_decl_p               PARAMS ((tree));\n-extern tree declare_global_var                  PARAMS ((tree, tree));\n-extern void register_dtor_fn                    PARAMS ((tree));\n-extern tmpl_spec_kind current_tmpl_spec_kind    PARAMS ((int));\n-extern tree cp_fname_init\t\t\tPARAMS ((const char *));\n+typedef int (*walk_namespaces_fn)               (tree, void *);\n+extern int walk_namespaces                      (walk_namespaces_fn,\n+\t\t\t\t\t\t       void *);\n+extern int wrapup_globals_for_namespace         (tree, void *);\n+extern tree cp_namespace_decls                  (tree);\n+extern tree create_implicit_typedef             (tree, tree);\n+extern tree maybe_push_decl                     (tree);\n+extern tree build_target_expr_with_type         (tree, tree);\n+extern int local_variable_p                     (tree);\n+extern int nonstatic_local_decl_p               (tree);\n+extern tree declare_global_var                  (tree, tree);\n+extern void register_dtor_fn                    (tree);\n+extern tmpl_spec_kind current_tmpl_spec_kind    (int);\n+extern tree cp_fname_init\t\t\t(const char *);\n extern bool have_extern_spec;\n \n /* in decl2.c */\n@@ -3848,10 +3848,10 @@ extern tree check_classfn (tree, tree);\n extern void check_member_template (tree);\n extern tree grokfield (tree, tree, tree, tree, tree);\n extern tree grokbitfield (tree, tree, tree);\n-extern tree groktypefield\t\t\tPARAMS ((tree, tree));\n+extern tree groktypefield\t\t\t(tree, tree);\n extern tree grokoptypename (tree, tree, tree);\n extern void cplus_decl_attributes (tree *, tree, int);\n-extern tree constructor_name_full\t\tPARAMS ((tree));\n+extern tree constructor_name_full\t\t(tree);\n extern tree constructor_name (tree);\n extern bool constructor_name_p                  (tree, tree);\n extern void defer_fn (tree);\n@@ -3863,17 +3863,20 @@ extern void comdat_linkage (tree);\n extern void import_export_vtable (tree, tree, int);\n extern void import_export_decl (tree);\n extern void import_export_tinfo\t(tree, tree, bool);\n+extern tree build_cleanup\t\t\t(tree);\n+extern void finish_file\t\t\t\t(void);\n+extern tree build_expr_from_tree\t\t(tree);\n extern tree build_cleanup\t\t\tPARAMS ((tree));\n extern void finish_file\t\t\t\tPARAMS ((void));\n extern tree build_expr_from_tree\t\tPARAMS ((tree));\n extern tree build_offset_ref_call_from_tree     (tree, tree);\n extern tree build_call_from_tree                (tree, tree, bool);\n extern void set_decl_namespace (tree, tree, bool);\n-extern tree current_decl_namespace              PARAMS ((void));\n-extern void push_decl_namespace                 PARAMS ((tree));\n-extern void pop_decl_namespace                  PARAMS ((void));\n-extern void push_scope\t\t\t\tPARAMS ((tree));\n-extern void pop_scope\t\t\t\tPARAMS ((tree));\n+extern tree current_decl_namespace              (void);\n+extern void push_decl_namespace                 (tree);\n+extern void pop_decl_namespace                  (void);\n+extern void push_scope\t\t\t\t(tree);\n+extern void pop_scope\t\t\t\t(tree);\n extern void do_namespace_alias (tree, tree);\n extern void do_toplevel_using_decl (tree);\n extern void do_local_using_decl (tree);\n@@ -3890,9 +3893,9 @@ extern tree get_guard (tree);\n extern tree get_guard_cond (tree);\n extern tree set_guard (tree);\n \n-extern void cp_error_at\t\tPARAMS ((const char *msgid, ...));\n-extern void cp_warning_at\tPARAMS ((const char *msgid, ...));\n-extern void cp_pedwarn_at\tPARAMS ((const char *msgid, ...));\n+extern void cp_error_at\t\t(const char *msgid, ...);\n+extern void cp_warning_at\t(const char *msgid, ...);\n+extern void cp_pedwarn_at\t(const char *msgid, ...);\n \n /* XXX Not i18n clean.  */\n #define cp_deprecated(STR)\t\t\t\t\t\t\t\\\n@@ -3903,100 +3906,100 @@ extern void cp_pedwarn_at\tPARAMS ((const char *msgid, ...));\n   } while (0)\n \n /* in error.c */\n-extern void init_error\t\t\t\tPARAMS ((void));\n-extern const char *type_as_string\t\tPARAMS ((tree, int));\n-extern const char *decl_as_string\t\tPARAMS ((tree, int));\n-extern const char *expr_as_string\t\tPARAMS ((tree, int));\n-extern const char *context_as_string            PARAMS ((tree, int));\n-extern const char *lang_decl_name\t\tPARAMS ((tree, int));\n-extern const char *cp_file_of\t\t\tPARAMS ((tree));\n-extern int cp_line_of\t\t\t\tPARAMS ((tree));\n-extern const char *language_to_string           PARAMS ((enum languages, int));\n-extern void print_instantiation_context         PARAMS ((void));\n+extern void init_error\t\t\t\t(void);\n+extern const char *type_as_string\t\t(tree, int);\n+extern const char *decl_as_string\t\t(tree, int);\n+extern const char *expr_as_string\t\t(tree, int);\n+extern const char *context_as_string            (tree, int);\n+extern const char *lang_decl_name\t\t(tree, int);\n+extern const char *cp_file_of\t\t\t(tree);\n+extern int cp_line_of\t\t\t\t(tree);\n+extern const char *language_to_string           (enum languages, int);\n+extern void print_instantiation_context         (void);\n \n /* in except.c */\n-extern void init_exception_processing\t\tPARAMS ((void));\n-extern tree expand_start_catch_block\t\tPARAMS ((tree));\n-extern void expand_end_catch_block\t\tPARAMS ((void));\n-extern void expand_builtin_throw\t\tPARAMS ((void));\n-extern void expand_eh_spec_block\t        PARAMS ((tree));\n-extern void expand_exception_blocks\t\tPARAMS ((void));\n-extern tree build_exc_ptr\t\t\tPARAMS ((void));\n-extern tree build_throw\t\t\t\tPARAMS ((tree));\n-extern void mark_all_runtime_matches            PARAMS ((void));\n-extern int nothrow_libfn_p\t\t\tPARAMS ((tree));\n-extern void check_handlers\t\t\tPARAMS ((tree));\n-extern void choose_personality_routine\t\tPARAMS ((enum languages));\n+extern void init_exception_processing\t\t(void);\n+extern tree expand_start_catch_block\t\t(tree);\n+extern void expand_end_catch_block\t\t(void);\n+extern void expand_builtin_throw\t\t(void);\n+extern void expand_eh_spec_block\t        (tree);\n+extern void expand_exception_blocks\t\t(void);\n+extern tree build_exc_ptr\t\t\t(void);\n+extern tree build_throw\t\t\t\t(tree);\n+extern void mark_all_runtime_matches            (void);\n+extern int nothrow_libfn_p\t\t\t(tree);\n+extern void check_handlers\t\t\t(tree);\n+extern void choose_personality_routine\t\t(enum languages);\n \n /* in expr.c */\n-extern rtx cxx_expand_expr\t\t\tPARAMS ((tree, rtx,\n+extern rtx cxx_expand_expr\t\t\t(tree, rtx,\n \t\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t\t int));\n-extern tree cplus_expand_constant               PARAMS ((tree));\n+\t\t\t\t\t\t\t int);\n+extern tree cplus_expand_constant               (tree);\n \n /* friend.c */\n-extern int is_friend\t\t\t\tPARAMS ((tree, tree));\n-extern void make_friend_class\t\t\tPARAMS ((tree, tree));\n-extern void add_friend                          PARAMS ((tree, tree));\n-extern tree do_friend\t\t\t\tPARAMS ((tree, tree, tree, tree, tree, enum overload_flags, tree, int));\n+extern int is_friend\t\t\t\t(tree, tree);\n+extern void make_friend_class\t\t\t(tree, tree);\n+extern void add_friend                          (tree, tree);\n+extern tree do_friend\t\t\t\t(tree, tree, tree, tree, tree, enum overload_flags, tree, int);\n \n /* in init.c */\n extern tree expand_member_init\t\t\t(tree, tree);\n extern void emit_mem_initializers\t\t(tree);\n-extern tree build_aggr_init\t\t\tPARAMS ((tree, tree, int));\n-extern tree build_init\t\t\t\tPARAMS ((tree, tree, int));\n-extern int is_aggr_type\t\t\t\tPARAMS ((tree, int));\n-extern tree get_aggr_from_typedef\t\tPARAMS ((tree, int));\n-extern tree get_type_value\t\t\tPARAMS ((tree));\n+extern tree build_aggr_init\t\t\t(tree, tree, int);\n+extern tree build_init\t\t\t\t(tree, tree, int);\n+extern int is_aggr_type\t\t\t\t(tree, int);\n+extern tree get_aggr_from_typedef\t\t(tree, int);\n+extern tree get_type_value\t\t\t(tree);\n extern tree build_zero_init       \t\t(tree, bool);\n-extern tree build_member_call\t\t\tPARAMS ((tree, tree, tree));\n-extern tree build_offset_ref\t\t\tPARAMS ((tree, tree));\n-extern tree resolve_offset_ref\t\t\tPARAMS ((tree));\n-extern tree build_new\t\t\t\tPARAMS ((tree, tree, tree, int));\n-extern tree build_vec_init\t\t\tPARAMS ((tree, tree, int));\n-extern tree build_x_delete\t\t\tPARAMS ((tree, int, tree));\n-extern tree build_delete\t\t\tPARAMS ((tree, tree, special_function_kind, int, int));\n-extern void push_base_cleanups\t\t\tPARAMS ((void));\n-extern tree build_vbase_delete\t\t\tPARAMS ((tree, tree));\n-extern tree build_vec_delete\t\t\tPARAMS ((tree, tree, special_function_kind, int));\n-extern tree create_temporary_var                PARAMS ((tree));\n-extern void begin_init_stmts                    PARAMS ((tree *, tree *));\n-extern tree finish_init_stmts                   PARAMS ((tree, tree));\n-extern void initialize_vtbl_ptrs                PARAMS ((tree));\n-extern tree build_java_class_ref                PARAMS ((tree));\n+extern tree build_member_call\t\t\t(tree, tree, tree);\n+extern tree build_offset_ref\t\t\t(tree, tree);\n+extern tree resolve_offset_ref\t\t\t(tree);\n+extern tree build_new\t\t\t\t(tree, tree, tree, int);\n+extern tree build_vec_init\t\t\t(tree, tree, int);\n+extern tree build_x_delete\t\t\t(tree, int, tree);\n+extern tree build_delete\t\t\t(tree, tree, special_function_kind, int, int);\n+extern void push_base_cleanups\t\t\t(void);\n+extern tree build_vbase_delete\t\t\t(tree, tree);\n+extern tree build_vec_delete\t\t\t(tree, tree, special_function_kind, int);\n+extern tree create_temporary_var                (tree);\n+extern void begin_init_stmts                    (tree *, tree *);\n+extern tree finish_init_stmts                   (tree, tree);\n+extern void initialize_vtbl_ptrs                (tree);\n+extern tree build_java_class_ref                (tree);\n \n /* in input.c */\n \n /* in lex.c */\n-extern void cxx_dup_lang_specific_decl\t\tPARAMS ((tree));\n-extern tree make_pointer_declarator\t\tPARAMS ((tree, tree));\n-extern tree make_reference_declarator\t\tPARAMS ((tree, tree));\n-extern tree make_call_declarator\t\tPARAMS ((tree, tree, tree, tree));\n-extern void set_quals_and_spec\t\t\tPARAMS ((tree, tree, tree));\n-extern void print_parse_statistics\t\tPARAMS ((void));\n-extern void do_pending_inlines\t\t\tPARAMS ((void));\n-extern void yyungetc\t\t\t\tPARAMS ((int, int));\n-extern void snarf_method\t\t\tPARAMS ((tree));\n-\n-extern void note_got_semicolon\t\t\tPARAMS ((tree));\n-extern void note_list_got_semicolon\t\tPARAMS ((tree));\n-extern void see_typename\t\t\tPARAMS ((void));\n-extern void unqualified_name_lookup_error       PARAMS ((tree));\n-extern tree do_identifier\t\t\tPARAMS ((tree, tree));\n-extern tree do_scoped_id\t\t\tPARAMS ((tree, tree));\n-extern tree identifier_typedecl_value\t\tPARAMS ((tree));\n-extern tree build_lang_decl\t\t\tPARAMS ((enum tree_code, tree, tree));\n-extern void retrofit_lang_decl\t\t\tPARAMS ((tree));\n-extern tree copy_decl                           PARAMS ((tree));\n-extern tree copy_type                           PARAMS ((tree));\n-extern tree cxx_make_type\t\t\tPARAMS ((enum tree_code));\n-extern tree make_aggr_type\t\t\tPARAMS ((enum tree_code));\n-extern void yyerror\t\t\t\tPARAMS ((const char *));\n-extern void yyhook\t\t\t\tPARAMS ((int));\n-extern int cp_type_qual_from_rid                PARAMS ((tree));\n-extern const char *cxx_init\t\t\tPARAMS ((const char *));\n-extern void cxx_finish PARAMS ((void));\n-extern void cxx_init_options PARAMS ((void));\n+extern void cxx_dup_lang_specific_decl\t\t(tree);\n+extern tree make_pointer_declarator\t\t(tree, tree);\n+extern tree make_reference_declarator\t\t(tree, tree);\n+extern tree make_call_declarator\t\t(tree, tree, tree, tree);\n+extern void set_quals_and_spec\t\t\t(tree, tree, tree);\n+extern void print_parse_statistics\t\t(void);\n+extern void do_pending_inlines\t\t\t(void);\n+extern void yyungetc\t\t\t\t(int, int);\n+extern void snarf_method\t\t\t(tree);\n+\n+extern void note_got_semicolon\t\t\t(tree);\n+extern void note_list_got_semicolon\t\t(tree);\n+extern void see_typename\t\t\t(void);\n+extern void unqualified_name_lookup_error       (tree);\n+extern tree do_identifier\t\t\t(tree, tree);\n+extern tree do_scoped_id\t\t\t(tree, tree);\n+extern tree identifier_typedecl_value\t\t(tree);\n+extern tree build_lang_decl\t\t\t(enum tree_code, tree, tree);\n+extern void retrofit_lang_decl\t\t\t(tree);\n+extern tree copy_decl                           (tree);\n+extern tree copy_type                           (tree);\n+extern tree cxx_make_type\t\t\t(enum tree_code);\n+extern tree make_aggr_type\t\t\t(enum tree_code);\n+extern void yyerror\t\t\t\t(const char *);\n+extern void yyhook\t\t\t\t(int);\n+extern int cp_type_qual_from_rid                (tree);\n+extern const char *cxx_init\t\t\t(const char *);\n+extern void cxx_finish (void);\n+extern void cxx_init_options (void);\n \n /* in method.c */\n extern void init_method\t(void);\n@@ -4016,61 +4019,61 @@ extern bool calls_setjmp_p (tree);\n extern bool maybe_clone_body (tree);\n \n /* in pt.c */\n-extern void check_template_shadow\t\tPARAMS ((tree));\n-extern tree get_innermost_template_args         PARAMS ((tree, int));\n-extern tree tsubst\t\t\t\tPARAMS ((tree, tree, tsubst_flags_t, tree));\n-extern tree tsubst_expr\t\t\t\tPARAMS ((tree, tree, tsubst_flags_t, tree));\n-extern tree tsubst_copy\t\t\t\tPARAMS ((tree, tree, tsubst_flags_t, tree));\n-extern void maybe_begin_member_template_processing PARAMS ((tree));\n-extern void maybe_end_member_template_processing PARAMS ((void));\n-extern tree finish_member_template_decl         PARAMS ((tree));\n-extern void begin_template_parm_list\t\tPARAMS ((void));\n-extern void begin_specialization                PARAMS ((void));\n-extern void reset_specialization                PARAMS ((void));\n-extern void end_specialization                  PARAMS ((void));\n-extern void begin_explicit_instantiation        PARAMS ((void));\n-extern void end_explicit_instantiation          PARAMS ((void));\n-extern tree check_explicit_specialization       PARAMS ((tree, tree, int, int));\n-extern tree process_template_parm\t\tPARAMS ((tree, tree));\n-extern tree end_template_parm_list\t\tPARAMS ((tree));\n-extern void end_template_decl\t\t\tPARAMS ((void));\n-extern tree current_template_args\t\tPARAMS ((void));\n-extern tree push_template_decl\t\t\tPARAMS ((tree));\n-extern tree push_template_decl_real             PARAMS ((tree, int));\n-extern void redeclare_class_template            PARAMS ((tree, tree));\n-extern tree lookup_template_class\t\tPARAMS ((tree, tree, tree, tree, int, tsubst_flags_t));\n-extern tree lookup_template_function            PARAMS ((tree, tree));\n-extern int uses_template_parms\t\t\tPARAMS ((tree));\n-extern tree instantiate_class_template\t\tPARAMS ((tree));\n-extern tree instantiate_template\t\tPARAMS ((tree, tree));\n-extern int fn_type_unification                  PARAMS ((tree, tree, tree, tree, tree, unification_kind_t, int));\n-extern tree tinst_for_decl\t\t\tPARAMS ((void));\n-extern void mark_decl_instantiated\t\tPARAMS ((tree, int));\n-extern int more_specialized\t\t\tPARAMS ((tree, tree, int, int));\n-extern void mark_class_instantiated\t\tPARAMS ((tree, int));\n+extern void check_template_shadow\t\t(tree);\n+extern tree get_innermost_template_args         (tree, int);\n+extern tree tsubst\t\t\t\t(tree, tree, tsubst_flags_t, tree);\n+extern tree tsubst_expr\t\t\t\t(tree, tree, tsubst_flags_t, tree);\n+extern tree tsubst_copy\t\t\t\t(tree, tree, tsubst_flags_t, tree);\n+extern void maybe_begin_member_template_processing (tree);\n+extern void maybe_end_member_template_processing (void);\n+extern tree finish_member_template_decl         (tree);\n+extern void begin_template_parm_list\t\t(void);\n+extern void begin_specialization                (void);\n+extern void reset_specialization                (void);\n+extern void end_specialization                  (void);\n+extern void begin_explicit_instantiation        (void);\n+extern void end_explicit_instantiation          (void);\n+extern tree check_explicit_specialization       (tree, tree, int, int);\n+extern tree process_template_parm\t\t(tree, tree);\n+extern tree end_template_parm_list\t\t(tree);\n+extern void end_template_decl\t\t\t(void);\n+extern tree current_template_args\t\t(void);\n+extern tree push_template_decl\t\t\t(tree);\n+extern tree push_template_decl_real             (tree, int);\n+extern void redeclare_class_template            (tree, tree);\n+extern tree lookup_template_class\t\t(tree, tree, tree, tree, int, tsubst_flags_t);\n+extern tree lookup_template_function            (tree, tree);\n+extern int uses_template_parms\t\t\t(tree);\n+extern tree instantiate_class_template\t\t(tree);\n+extern tree instantiate_template\t\t(tree, tree);\n+extern int fn_type_unification                  (tree, tree, tree, tree, tree, unification_kind_t, int);\n+extern tree tinst_for_decl\t\t\t(void);\n+extern void mark_decl_instantiated\t\t(tree, int);\n+extern int more_specialized\t\t\t(tree, tree, int, int);\n+extern void mark_class_instantiated\t\t(tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);\n-extern void do_type_instantiation\t\tPARAMS ((tree, tree, tsubst_flags_t));\n-extern tree instantiate_decl\t\t\tPARAMS ((tree, int));\n-extern tree get_bindings\t\t\tPARAMS ((tree, tree, tree));\n-extern int push_tinst_level\t\t\tPARAMS ((tree));\n-extern void pop_tinst_level\t\t\tPARAMS ((void));\n-extern int more_specialized_class\t\tPARAMS ((tree, tree));\n-extern int is_member_template                   PARAMS ((tree));\n-extern int comp_template_parms                  PARAMS ((tree, tree));\n-extern int template_class_depth                 PARAMS ((tree));\n-extern int is_specialization_of                 PARAMS ((tree, tree));\n-extern int comp_template_args                   PARAMS ((tree, tree));\n-extern void maybe_process_partial_specialization PARAMS ((tree));\n-extern void maybe_check_template_type           PARAMS ((tree));\n-extern tree most_specialized_instantiation      PARAMS ((tree));\n-extern void print_candidates                    PARAMS ((tree));\n-extern int instantiate_pending_templates        PARAMS ((void));\n-extern tree tsubst_default_argument             PARAMS ((tree, tree, tree));\n-extern tree most_general_template\t\tPARAMS ((tree));\n-extern tree get_mostly_instantiated_function_type PARAMS ((tree));\n-extern int problematic_instantiation_changed    PARAMS ((void));\n-extern void record_last_problematic_instantiation PARAMS ((void));\n-extern tree current_instantiation               PARAMS ((void));\n+extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n+extern tree instantiate_decl\t\t\t(tree, int);\n+extern tree get_bindings\t\t\t(tree, tree, tree);\n+extern int push_tinst_level\t\t\t(tree);\n+extern void pop_tinst_level\t\t\t(void);\n+extern int more_specialized_class\t\t(tree, tree);\n+extern int is_member_template                   (tree);\n+extern int comp_template_parms                  (tree, tree);\n+extern int template_class_depth                 (tree);\n+extern int is_specialization_of                 (tree, tree);\n+extern int comp_template_args                   (tree, tree);\n+extern void maybe_process_partial_specialization (tree);\n+extern void maybe_check_template_type           (tree);\n+extern tree most_specialized_instantiation      (tree);\n+extern void print_candidates                    (tree);\n+extern int instantiate_pending_templates        (void);\n+extern tree tsubst_default_argument             (tree, tree, tree);\n+extern tree most_general_template\t\t(tree);\n+extern tree get_mostly_instantiated_function_type (tree);\n+extern int problematic_instantiation_changed    (void);\n+extern void record_last_problematic_instantiation (void);\n+extern tree current_instantiation               (void);\n extern tree maybe_get_template_decl_from_type_decl (tree);\n extern int processing_template_parmlist;\n \n@@ -4091,346 +4094,346 @@ extern bool unemitted_tinfo_decl_p (tree, void *);\n extern bool emit_tinfo_decl (tree *, void *);\n \n /* in search.c */\n-extern tree lookup_base PARAMS ((tree, tree, base_access, base_kind *));\n-extern int types_overlap_p\t\t\tPARAMS ((tree, tree));\n-extern tree get_vbase\t\t\t\tPARAMS ((tree, tree));\n-extern tree get_dynamic_cast_base_type          PARAMS ((tree, tree));\n-extern void type_access_control\t\t\tPARAMS ((tree, tree));\n-extern int accessible_p                         PARAMS ((tree, tree));\n-extern tree lookup_field\t\t\tPARAMS ((tree, tree, int, int));\n-extern int lookup_fnfields_1                    PARAMS ((tree, tree));\n-extern tree lookup_fnfields\t\t\tPARAMS ((tree, tree, int));\n-extern tree lookup_member\t\t\tPARAMS ((tree, tree, int, int));\n-extern int look_for_overrides\t\t\tPARAMS ((tree, tree));\n-extern void get_pure_virtuals\t\t        PARAMS ((tree));\n-extern void get_vbase_types\t\t\tPARAMS ((tree));\n-extern void maybe_suppress_debug_info\t\tPARAMS ((tree));\n-extern void note_debug_info_needed\t\tPARAMS ((tree));\n-extern void push_class_decls\t\t\tPARAMS ((tree));\n-extern void pop_class_decls\t\t\tPARAMS ((void));\n-extern void unuse_fields\t\t\tPARAMS ((tree));\n-extern void print_search_statistics\t\tPARAMS ((void));\n-extern void init_search_processing\t\tPARAMS ((void));\n-extern void reinit_search_statistics\t\tPARAMS ((void));\n-extern tree current_scope\t\t\tPARAMS ((void));\n-extern int at_function_scope_p                  PARAMS ((void));\n+extern tree lookup_base (tree, tree, base_access, base_kind *);\n+extern int types_overlap_p\t\t\t(tree, tree);\n+extern tree get_vbase\t\t\t\t(tree, tree);\n+extern tree get_dynamic_cast_base_type          (tree, tree);\n+extern void type_access_control\t\t\t(tree, tree);\n+extern int accessible_p                         (tree, tree);\n+extern tree lookup_field\t\t\t(tree, tree, int, int);\n+extern int lookup_fnfields_1                    (tree, tree);\n+extern tree lookup_fnfields\t\t\t(tree, tree, int);\n+extern tree lookup_member\t\t\t(tree, tree, int, int);\n+extern int look_for_overrides\t\t\t(tree, tree);\n+extern void get_pure_virtuals\t\t        (tree);\n+extern void get_vbase_types\t\t\t(tree);\n+extern void maybe_suppress_debug_info\t\t(tree);\n+extern void note_debug_info_needed\t\t(tree);\n+extern void push_class_decls\t\t\t(tree);\n+extern void pop_class_decls\t\t\t(void);\n+extern void unuse_fields\t\t\t(tree);\n+extern void print_search_statistics\t\t(void);\n+extern void init_search_processing\t\t(void);\n+extern void reinit_search_statistics\t\t(void);\n+extern tree current_scope\t\t\t(void);\n+extern int at_function_scope_p                  (void);\n extern bool at_class_scope_p                    (void);\n-extern tree context_for_name_lookup\t\tPARAMS ((tree));\n-extern tree lookup_conversions\t\t\tPARAMS ((tree));\n-extern tree binfo_for_vtable\t\t\tPARAMS ((tree));\n-extern tree binfo_from_vbase\t\t\tPARAMS ((tree));\n-extern tree look_for_overrides_here\t\tPARAMS ((tree, tree));\n-extern int check_final_overrider\t\tPARAMS ((tree, tree));\n-extern tree dfs_walk                            PARAMS ((tree,\n+extern tree context_for_name_lookup\t\t(tree);\n+extern tree lookup_conversions\t\t\t(tree);\n+extern tree binfo_for_vtable\t\t\t(tree);\n+extern tree binfo_from_vbase\t\t\t(tree);\n+extern tree look_for_overrides_here\t\t(tree, tree);\n+extern int check_final_overrider\t\t(tree, tree);\n+extern tree dfs_walk                            (tree,\n \t\t\t\t\t\t       tree (*) (tree, void *),\n \t\t\t\t\t\t       tree (*) (tree, void *),\n-\t\t\t\t\t\t       void *));\n-extern tree dfs_walk_real                      PARAMS ((tree,\n+\t\t\t\t\t\t       void *);\n+extern tree dfs_walk_real                      (tree,\n \t\t\t\t\t\t       tree (*) (tree, void *),\n \t\t\t\t\t\t       tree (*) (tree, void *),\n \t\t\t\t\t\t       tree (*) (tree, void *),\n-\t\t\t\t\t\t       void *));\n-extern tree dfs_unmark                          PARAMS ((tree, void *));\n-extern tree markedp                             PARAMS ((tree, void *));\n-extern tree unmarkedp                           PARAMS ((tree, void *));\n-extern tree dfs_unmarked_real_bases_queue_p     PARAMS ((tree, void *));\n-extern tree dfs_marked_real_bases_queue_p       PARAMS ((tree, void *));\n-extern tree dfs_skip_vbases                     PARAMS ((tree, void *));\n-extern tree marked_vtable_pathp                 PARAMS ((tree, void *));\n-extern tree unmarked_vtable_pathp               PARAMS ((tree, void *));\n-extern tree find_vbase_instance                 PARAMS ((tree, tree));\n-extern tree binfo_for_vbase                     PARAMS ((tree, tree));\n-extern tree binfo_via_virtual                   PARAMS ((tree, tree));\n+\t\t\t\t\t\t       void *);\n+extern tree dfs_unmark                          (tree, void *);\n+extern tree markedp                             (tree, void *);\n+extern tree unmarkedp                           (tree, void *);\n+extern tree dfs_unmarked_real_bases_queue_p     (tree, void *);\n+extern tree dfs_marked_real_bases_queue_p       (tree, void *);\n+extern tree dfs_skip_vbases                     (tree, void *);\n+extern tree marked_vtable_pathp                 (tree, void *);\n+extern tree unmarked_vtable_pathp               (tree, void *);\n+extern tree find_vbase_instance                 (tree, tree);\n+extern tree binfo_for_vbase                     (tree, tree);\n+extern tree binfo_via_virtual                   (tree, tree);\n extern tree build_baselink                      (tree, tree, tree, tree);\n extern tree adjust_result_of_qualified_name_lookup\n                                                 (tree, tree, tree);\n /* in semantics.c */\n-extern void init_cp_semantics                   PARAMS ((void));\n-extern tree finish_expr_stmt                    PARAMS ((tree));\n-extern tree begin_if_stmt                       PARAMS ((void));\n-extern void finish_if_stmt_cond                 PARAMS ((tree, tree));\n-extern tree finish_then_clause                  PARAMS ((tree));\n-extern void begin_else_clause                   PARAMS ((void));\n-extern void finish_else_clause                  PARAMS ((tree));\n-extern void finish_if_stmt                      PARAMS ((void));\n-extern tree begin_while_stmt                    PARAMS ((void));\n-extern void finish_while_stmt_cond              PARAMS ((tree, tree));\n-extern void finish_while_stmt                   PARAMS ((tree));\n-extern tree begin_do_stmt                       PARAMS ((void));\n-extern void finish_do_body                      PARAMS ((tree));\n-extern void finish_do_stmt                      PARAMS ((tree, tree));\n-extern tree finish_return_stmt                  PARAMS ((tree));\n-extern tree begin_for_stmt                      PARAMS ((void));\n-extern void finish_for_init_stmt                PARAMS ((tree));\n-extern void finish_for_cond                     PARAMS ((tree, tree));\n-extern void finish_for_expr                     PARAMS ((tree, tree));\n-extern void finish_for_stmt                     PARAMS ((tree));\n-extern tree finish_break_stmt                   PARAMS ((void));\n-extern tree finish_continue_stmt                PARAMS ((void));\n-extern tree begin_switch_stmt                   PARAMS ((void));\n-extern void finish_switch_cond                  PARAMS ((tree, tree));\n-extern void finish_switch_stmt                  PARAMS ((tree));\n-extern tree finish_case_label                   PARAMS ((tree, tree));\n-extern tree finish_goto_stmt                    PARAMS ((tree));\n-extern tree begin_try_block                     PARAMS ((void));\n-extern void finish_try_block                    PARAMS ((tree));\n-extern tree begin_eh_spec_block\t\t\tPARAMS ((void));\n-extern void finish_eh_spec_block\t\tPARAMS ((tree, tree));\n-extern void finish_handler_sequence             PARAMS ((tree));\n-extern tree begin_function_try_block            PARAMS ((void));\n-extern void finish_function_try_block           PARAMS ((tree));\n-extern void finish_function_handler_sequence    PARAMS ((tree));\n-extern void finish_cleanup_try_block            PARAMS ((tree));\n-extern tree begin_handler                       PARAMS ((void));\n-extern void finish_handler_parms                PARAMS ((tree, tree));\n-extern void begin_catch_block                   PARAMS ((tree));\n-extern void finish_handler                      PARAMS ((tree));\n-extern void finish_cleanup                      PARAMS ((tree, tree));\n-extern tree begin_compound_stmt                 PARAMS ((int));\n-extern tree finish_compound_stmt                PARAMS ((int, tree));\n-extern tree finish_asm_stmt                     PARAMS ((tree, tree, tree, tree, tree));\n-extern tree finish_label_stmt                   PARAMS ((tree));\n-extern void finish_label_decl                   PARAMS ((tree));\n-extern void finish_subobject                    PARAMS ((tree));\n-extern tree finish_parenthesized_expr           PARAMS ((tree));\n-extern tree finish_non_static_data_member       PARAMS ((tree, tree));\n-extern tree begin_stmt_expr                     PARAMS ((void));\n-extern tree finish_stmt_expr                    PARAMS ((tree));\n+extern void init_cp_semantics                   (void);\n+extern tree finish_expr_stmt                    (tree);\n+extern tree begin_if_stmt                       (void);\n+extern void finish_if_stmt_cond                 (tree, tree);\n+extern tree finish_then_clause                  (tree);\n+extern void begin_else_clause                   (void);\n+extern void finish_else_clause                  (tree);\n+extern void finish_if_stmt                      (void);\n+extern tree begin_while_stmt                    (void);\n+extern void finish_while_stmt_cond              (tree, tree);\n+extern void finish_while_stmt                   (tree);\n+extern tree begin_do_stmt                       (void);\n+extern void finish_do_body                      (tree);\n+extern void finish_do_stmt                      (tree, tree);\n+extern tree finish_return_stmt                  (tree);\n+extern tree begin_for_stmt                      (void);\n+extern void finish_for_init_stmt                (tree);\n+extern void finish_for_cond                     (tree, tree);\n+extern void finish_for_expr                     (tree, tree);\n+extern void finish_for_stmt                     (tree);\n+extern tree finish_break_stmt                   (void);\n+extern tree finish_continue_stmt                (void);\n+extern tree begin_switch_stmt                   (void);\n+extern void finish_switch_cond                  (tree, tree);\n+extern void finish_switch_stmt                  (tree);\n+extern tree finish_case_label                   (tree, tree);\n+extern tree finish_goto_stmt                    (tree);\n+extern tree begin_try_block                     (void);\n+extern void finish_try_block                    (tree);\n+extern tree begin_eh_spec_block\t\t\t(void);\n+extern void finish_eh_spec_block\t\t(tree, tree);\n+extern void finish_handler_sequence             (tree);\n+extern tree begin_function_try_block            (void);\n+extern void finish_function_try_block           (tree);\n+extern void finish_function_handler_sequence    (tree);\n+extern void finish_cleanup_try_block            (tree);\n+extern tree begin_handler                       (void);\n+extern void finish_handler_parms                (tree, tree);\n+extern void begin_catch_block                   (tree);\n+extern void finish_handler                      (tree);\n+extern void finish_cleanup                      (tree, tree);\n+extern tree begin_compound_stmt                 (int);\n+extern tree finish_compound_stmt                (int, tree);\n+extern tree finish_asm_stmt                     (tree, tree, tree, tree, tree);\n+extern tree finish_label_stmt                   (tree);\n+extern void finish_label_decl                   (tree);\n+extern void finish_subobject                    (tree);\n+extern tree finish_parenthesized_expr           (tree);\n+extern tree finish_non_static_data_member       (tree, tree);\n+extern tree begin_stmt_expr                     (void);\n+extern tree finish_stmt_expr                    (tree);\n extern tree finish_call_expr                    (tree, tree, bool);\n-extern tree finish_increment_expr               PARAMS ((tree, enum tree_code));\n-extern tree finish_this_expr                    PARAMS ((void));\n-extern tree finish_object_call_expr             PARAMS ((tree, tree, tree));\n-extern tree finish_qualified_object_call_expr   PARAMS ((tree, tree, tree));\n+extern tree finish_increment_expr               (tree, enum tree_code);\n+extern tree finish_this_expr                    (void);\n+extern tree finish_object_call_expr             (tree, tree, tree);\n+extern tree finish_qualified_object_call_expr   (tree, tree, tree);\n extern tree finish_pseudo_destructor_expr       (tree, tree, tree);\n-extern tree finish_unary_op_expr                PARAMS ((enum tree_code, tree));\n+extern tree finish_unary_op_expr                (enum tree_code, tree);\n extern tree finish_compound_literal             (tree, tree);\n extern tree finish_fname                        (tree);\n-extern void save_type_access_control\t\tPARAMS ((tree));\n-extern void reset_type_access_control           PARAMS ((void));\n-extern void decl_type_access_control\t\tPARAMS ((tree));\n+extern void save_type_access_control\t\t(tree);\n+extern void reset_type_access_control           (void);\n+extern void decl_type_access_control\t\t(tree);\n extern int begin_function_definition            (tree, tree, tree);\n-extern tree begin_constructor_declarator        PARAMS ((tree, tree));\n-extern tree finish_declarator                   PARAMS ((tree, tree, tree, tree, int));\n-extern void finish_translation_unit             PARAMS ((void));\n-extern tree finish_template_type_parm           PARAMS ((tree, tree));\n-extern tree finish_template_template_parm       PARAMS ((tree, tree));\n-extern tree finish_parmlist                     PARAMS ((tree, int));\n-extern tree begin_class_definition              PARAMS ((tree));\n-extern tree finish_class_definition             PARAMS ((tree, tree, int, int));\n-extern void finish_default_args                 PARAMS ((void));\n-extern tree finish_member_class_template        PARAMS ((tree));\n-extern void finish_template_decl                PARAMS ((tree));\n-extern tree finish_template_type                PARAMS ((tree, tree, int));\n-extern void enter_scope_of                      PARAMS ((tree));\n-extern tree finish_base_specifier               PARAMS ((tree, tree));\n-extern void finish_member_declaration           PARAMS ((tree));\n-extern void check_multiple_declarators          PARAMS ((void));\n-extern tree finish_typeof\t\t\tPARAMS ((tree));\n-extern tree finish_sizeof\t\t\tPARAMS ((tree));\n-extern tree finish_alignof\t\t\tPARAMS ((tree));\n-extern void finish_decl_cleanup                 PARAMS ((tree, tree));\n-extern void finish_eh_cleanup                   PARAMS ((tree));\n-extern void expand_body                         PARAMS ((tree));\n-extern tree nullify_returns_r\t\t      PARAMS ((tree *, int *, void *));\n+extern tree begin_constructor_declarator        (tree, tree);\n+extern tree finish_declarator                   (tree, tree, tree, tree, int);\n+extern void finish_translation_unit             (void);\n+extern tree finish_template_type_parm           (tree, tree);\n+extern tree finish_template_template_parm       (tree, tree);\n+extern tree finish_parmlist                     (tree, int);\n+extern tree begin_class_definition              (tree);\n+extern tree finish_class_definition             (tree, tree, int, int);\n+extern void finish_default_args                 (void);\n+extern tree finish_member_class_template        (tree);\n+extern void finish_template_decl                (tree);\n+extern tree finish_template_type                (tree, tree, int);\n+extern void enter_scope_of                      (tree);\n+extern tree finish_base_specifier               (tree, tree);\n+extern void finish_member_declaration           (tree);\n+extern void check_multiple_declarators          (void);\n+extern tree finish_typeof\t\t\t(tree);\n+extern tree finish_sizeof\t\t\t(tree);\n+extern tree finish_alignof\t\t\t(tree);\n+extern void finish_decl_cleanup                 (tree, tree);\n+extern void finish_eh_cleanup                   (tree);\n+extern void expand_body                         (tree);\n+extern tree nullify_returns_r\t\t      (tree *, int *, void *);\n extern void do_pushlevel                        (scope_kind);\n-extern tree do_poplevel                         PARAMS ((void));\n+extern tree do_poplevel                         (void);\n extern void begin_mem_initializers              (void);\n-extern void finish_mem_initializers             PARAMS ((tree));\n-extern void setup_vtbl_ptr\t\t\tPARAMS ((tree, tree));\n-extern void clear_out_block                     PARAMS ((void));\n-extern tree begin_global_stmt_expr              PARAMS ((void));\n-extern tree finish_global_stmt_expr             PARAMS ((tree));\n+extern void finish_mem_initializers             (tree);\n+extern void setup_vtbl_ptr\t\t\t(tree, tree);\n+extern void clear_out_block                     (void);\n+extern tree begin_global_stmt_expr              (void);\n+extern tree finish_global_stmt_expr             (tree);\n extern tree check_template_template_default_arg (tree);\n \n /* in tree.c */\n-extern void lang_check_failed\t\t\tPARAMS ((const char *, int,\n-\t\t\t\t\t\t\t const char *));\n-extern tree stabilize_expr\t\t\tPARAMS ((tree, tree *));\n-extern tree cxx_unsave_expr_now\t\t\tPARAMS ((tree));\n-extern tree cxx_maybe_build_cleanup\t\tPARAMS ((tree));\n-extern void init_tree\t\t\t        PARAMS ((void));\n-extern int pod_type_p\t\t\t\tPARAMS ((tree));\n-extern int zero_init_p\t\t\t\tPARAMS ((tree));\n-extern tree canonical_type_variant              PARAMS ((tree));\n-extern void unshare_base_binfos\t\t\tPARAMS ((tree));\n-extern int member_p\t\t\t\tPARAMS ((tree));\n-extern cp_lvalue_kind real_lvalue_p\t\tPARAMS ((tree));\n-extern int non_cast_lvalue_p\t\t\tPARAMS ((tree));\n-extern int non_cast_lvalue_or_else\t\tPARAMS ((tree, const char *));\n-extern tree build_min\t\t\t\tPARAMS ((enum tree_code, tree,\n-\t\t\t\t\t\t\t ...));\n-extern tree build_min_nt\t\t\tPARAMS ((enum tree_code, ...));\n-extern tree build_cplus_new\t\t\tPARAMS ((tree, tree));\n-extern tree get_target_expr\t\t\tPARAMS ((tree));\n-extern tree break_out_calls\t\t\tPARAMS ((tree));\n-extern tree build_cplus_method_type\t\tPARAMS ((tree, tree, tree));\n-extern tree build_cplus_staticfn_type\t\tPARAMS ((tree, tree, tree));\n-extern tree build_cplus_array_type\t\tPARAMS ((tree, tree));\n-extern tree hash_tree_cons\t\t\tPARAMS ((tree, tree, tree));\n-extern tree hash_tree_chain\t\t\tPARAMS ((tree, tree));\n-extern tree hash_chainon\t\t\tPARAMS ((tree, tree));\n-extern tree make_binfo\t\t\t\tPARAMS ((tree, tree, tree, tree));\n-extern tree reverse_path\t\t\tPARAMS ((tree));\n-extern int count_functions\t\t\tPARAMS ((tree));\n-extern int is_overloaded_fn\t\t\tPARAMS ((tree));\n-extern tree get_first_fn\t\t\tPARAMS ((tree));\n-extern int bound_pmf_p\t\t\t\tPARAMS ((tree));\n-extern tree ovl_cons                            PARAMS ((tree, tree));\n-extern tree build_overload                      PARAMS ((tree, tree));\n-extern tree function_arg_chain\t\t\tPARAMS ((tree));\n-extern int promotes_to_aggr_type\t\tPARAMS ((tree, enum tree_code));\n-extern int is_aggr_type_2\t\t\tPARAMS ((tree, tree));\n-extern const char *cxx_printable_name\t\tPARAMS ((tree, int));\n-extern tree build_exception_variant\t\tPARAMS ((tree, tree));\n-extern tree bind_template_template_parm\t\tPARAMS ((tree, tree));\n-extern tree array_type_nelts_total\t\tPARAMS ((tree));\n-extern tree array_type_nelts_top\t\tPARAMS ((tree));\n-extern tree break_out_target_exprs\t\tPARAMS ((tree));\n-extern tree get_type_decl\t\t\tPARAMS ((tree));\n-extern tree vec_binfo_member\t\t\tPARAMS ((tree, tree));\n-extern tree decl_namespace_context\t\tPARAMS ((tree));\n-extern tree lvalue_type\t\t\t\tPARAMS ((tree));\n-extern tree error_type\t\t\t\tPARAMS ((tree));\n-extern tree build_zc_wrapper\t\t\tPARAMS ((struct z_candidate *));\n-extern tree build_srcloc_here\t\t\tPARAMS ((void));\n-extern int varargs_function_p\t\t\tPARAMS ((tree));\n-extern int really_overloaded_fn\t\t\tPARAMS ((tree));\n-extern int cp_tree_equal\t\t\tPARAMS ((tree, tree));\n-extern tree no_linkage_check\t\t\tPARAMS ((tree));\n-extern void debug_binfo\t\t\t\tPARAMS ((tree));\n-extern tree build_dummy_object\t\t\tPARAMS ((tree));\n-extern tree maybe_dummy_object\t\t\tPARAMS ((tree, tree *));\n-extern int is_dummy_object\t\t\tPARAMS ((tree));\n+extern void lang_check_failed\t\t\t(const char *, int,\n+\t\t\t\t\t\t\t const char *);\n+extern tree stabilize_expr\t\t\t(tree, tree *);\n+extern tree cxx_unsave_expr_now\t\t\t(tree);\n+extern tree cxx_maybe_build_cleanup\t\t(tree);\n+extern void init_tree\t\t\t        (void);\n+extern int pod_type_p\t\t\t\t(tree);\n+extern int zero_init_p\t\t\t\t(tree);\n+extern tree canonical_type_variant              (tree);\n+extern void unshare_base_binfos\t\t\t(tree);\n+extern int member_p\t\t\t\t(tree);\n+extern cp_lvalue_kind real_lvalue_p\t\t(tree);\n+extern int non_cast_lvalue_p\t\t\t(tree);\n+extern int non_cast_lvalue_or_else\t\t(tree, const char *);\n+extern tree build_min\t\t\t\t(enum tree_code, tree,\n+\t\t\t\t\t\t\t ...);\n+extern tree build_min_nt\t\t\t(enum tree_code, ...);\n+extern tree build_cplus_new\t\t\t(tree, tree);\n+extern tree get_target_expr\t\t\t(tree);\n+extern tree break_out_calls\t\t\t(tree);\n+extern tree build_cplus_method_type\t\t(tree, tree, tree);\n+extern tree build_cplus_staticfn_type\t\t(tree, tree, tree);\n+extern tree build_cplus_array_type\t\t(tree, tree);\n+extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n+extern tree hash_tree_chain\t\t\t(tree, tree);\n+extern tree hash_chainon\t\t\t(tree, tree);\n+extern tree make_binfo\t\t\t\t(tree, tree, tree, tree);\n+extern tree reverse_path\t\t\t(tree);\n+extern int count_functions\t\t\t(tree);\n+extern int is_overloaded_fn\t\t\t(tree);\n+extern tree get_first_fn\t\t\t(tree);\n+extern int bound_pmf_p\t\t\t\t(tree);\n+extern tree ovl_cons                            (tree, tree);\n+extern tree build_overload                      (tree, tree);\n+extern tree function_arg_chain\t\t\t(tree);\n+extern int promotes_to_aggr_type\t\t(tree, enum tree_code);\n+extern int is_aggr_type_2\t\t\t(tree, tree);\n+extern const char *cxx_printable_name\t\t(tree, int);\n+extern tree build_exception_variant\t\t(tree, tree);\n+extern tree bind_template_template_parm\t\t(tree, tree);\n+extern tree array_type_nelts_total\t\t(tree);\n+extern tree array_type_nelts_top\t\t(tree);\n+extern tree break_out_target_exprs\t\t(tree);\n+extern tree get_type_decl\t\t\t(tree);\n+extern tree vec_binfo_member\t\t\t(tree, tree);\n+extern tree decl_namespace_context\t\t(tree);\n+extern tree lvalue_type\t\t\t\t(tree);\n+extern tree error_type\t\t\t\t(tree);\n+extern tree build_zc_wrapper\t\t\t(struct z_candidate *);\n+extern tree build_srcloc_here\t\t\t(void);\n+extern int varargs_function_p\t\t\t(tree);\n+extern int really_overloaded_fn\t\t\t(tree);\n+extern int cp_tree_equal\t\t\t(tree, tree);\n+extern tree no_linkage_check\t\t\t(tree);\n+extern void debug_binfo\t\t\t\t(tree);\n+extern tree build_dummy_object\t\t\t(tree);\n+extern tree maybe_dummy_object\t\t\t(tree, tree *);\n+extern int is_dummy_object\t\t\t(tree);\n extern const struct attribute_spec cxx_attribute_table[];\n-extern tree make_ptrmem_cst                     PARAMS ((tree, tree));\n-extern tree cp_build_qualified_type_real        PARAMS ((tree, int, tsubst_flags_t));\n+extern tree make_ptrmem_cst                     (tree, tree);\n+extern tree cp_build_qualified_type_real        (tree, int, tsubst_flags_t);\n #define cp_build_qualified_type(TYPE, QUALS) \\\n   cp_build_qualified_type_real ((TYPE), (QUALS), tf_error | tf_warning)\n-extern tree build_shared_int_cst                PARAMS ((int));\n-extern special_function_kind special_function_p PARAMS ((tree));\n+extern tree build_shared_int_cst                (int);\n+extern special_function_kind special_function_p (tree);\n extern bool name_p                              (tree);\n-extern int count_trees                          PARAMS ((tree));\n-extern int char_type_p                          PARAMS ((tree));\n-extern void verify_stmt_tree                    PARAMS ((tree));\n-extern tree find_tree                           PARAMS ((tree, tree));\n-extern linkage_kind decl_linkage                PARAMS ((tree));\n-extern tree cp_walk_subtrees PARAMS ((tree*, int*, walk_tree_fn,\n-\t\t\t\t      void*, void*));\n-extern int cp_cannot_inline_tree_fn PARAMS ((tree*));\n-extern tree cp_add_pending_fn_decls PARAMS ((void*,tree));\n-extern int cp_is_overload_p PARAMS ((tree));\n-extern int cp_auto_var_in_fn_p PARAMS ((tree,tree));\n-extern tree cp_copy_res_decl_for_inlining PARAMS ((tree, tree, tree, void*,\n-\t\t\t\t\t\t   int*, tree));\n-extern int cp_start_inlining\t\t\tPARAMS ((tree));\n-extern void cp_end_inlining\t\t\tPARAMS ((tree));\n+extern int count_trees                          (tree);\n+extern int char_type_p                          (tree);\n+extern void verify_stmt_tree                    (tree);\n+extern tree find_tree                           (tree, tree);\n+extern linkage_kind decl_linkage                (tree);\n+extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n+\t\t\t\t      void*, void*);\n+extern int cp_cannot_inline_tree_fn (tree*);\n+extern tree cp_add_pending_fn_decls (void*,tree);\n+extern int cp_is_overload_p (tree);\n+extern int cp_auto_var_in_fn_p (tree,tree);\n+extern tree cp_copy_res_decl_for_inlining (tree, tree, tree, void*,\n+\t\t\t\t\t\t   int*, tree);\n+extern int cp_start_inlining\t\t\t(tree);\n+extern void cp_end_inlining\t\t\t(tree);\n \n /* in typeck.c */\n-extern int string_conv_p\t\t\tPARAMS ((tree, tree, int));\n-extern tree cp_truthvalue_conversion\t\tPARAMS ((tree));\n-extern tree condition_conversion\t\tPARAMS ((tree));\n-extern tree target_type\t\t\t\tPARAMS ((tree));\n-extern tree require_complete_type\t\tPARAMS ((tree));\n-extern tree complete_type\t\t\tPARAMS ((tree));\n-extern tree complete_type_or_diagnostic         PARAMS ((tree, tree, int));\n+extern int string_conv_p\t\t\t(tree, tree, int);\n+extern tree cp_truthvalue_conversion\t\t(tree);\n+extern tree condition_conversion\t\t(tree);\n+extern tree target_type\t\t\t\t(tree);\n+extern tree require_complete_type\t\t(tree);\n+extern tree complete_type\t\t\t(tree);\n+extern tree complete_type_or_diagnostic         (tree, tree, int);\n #define complete_type_or_else(T,V) (complete_type_or_diagnostic ((T), (V), 0))\n-extern int type_unknown_p\t\t\tPARAMS ((tree));\n-extern tree commonparms\t\t\t\tPARAMS ((tree, tree));\n-extern tree original_type\t\t\tPARAMS ((tree));\n-extern int comp_except_specs\t\t\tPARAMS ((tree, tree, int));\n-extern int comptypes\t\t\t\tPARAMS ((tree, tree, int));\n-extern int comp_target_types\t\t\tPARAMS ((tree, tree, int));\n-extern int compparms\t\t\t\tPARAMS ((tree, tree));\n-extern int comp_cv_qualification                PARAMS ((tree, tree));\n-extern int comp_cv_qual_signature               PARAMS ((tree, tree));\n-extern tree expr_sizeof\t\t\t\tPARAMS ((tree));\n-extern tree cxx_sizeof_or_alignof_type    PARAMS ((tree, enum tree_code, int));\n+extern int type_unknown_p\t\t\t(tree);\n+extern tree commonparms\t\t\t\t(tree, tree);\n+extern tree original_type\t\t\t(tree);\n+extern int comp_except_specs\t\t\t(tree, tree, int);\n+extern int comptypes\t\t\t\t(tree, tree, int);\n+extern int comp_target_types\t\t\t(tree, tree, int);\n+extern int compparms\t\t\t\t(tree, tree);\n+extern int comp_cv_qualification                (tree, tree);\n+extern int comp_cv_qual_signature               (tree, tree);\n+extern tree expr_sizeof\t\t\t\t(tree);\n+extern tree cxx_sizeof_or_alignof_type    (tree, enum tree_code, int);\n #define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n-extern tree inline_conversion\t\t\tPARAMS ((tree));\n-extern tree decay_conversion\t\t\tPARAMS ((tree));\n+extern tree inline_conversion\t\t\t(tree);\n+extern tree decay_conversion\t\t\t(tree);\n extern tree build_class_member_access_expr      (tree, tree, tree, bool);\n extern tree finish_class_member_access_expr     (tree, tree);\n-extern tree build_x_indirect_ref\t\tPARAMS ((tree, const char *));\n-extern tree build_indirect_ref\t\t\tPARAMS ((tree, const char *));\n-extern tree build_array_ref\t\t\tPARAMS ((tree, tree));\n-extern tree get_member_function_from_ptrfunc\tPARAMS ((tree *, tree));\n-extern tree build_function_call_real\t\tPARAMS ((tree, tree, int, int));\n-extern tree build_function_call_maybe\t\tPARAMS ((tree, tree));\n-extern tree convert_arguments\t\t\tPARAMS ((tree, tree, tree, int));\n-extern tree build_x_binary_op\t\t\tPARAMS ((enum tree_code, tree, tree));\n-extern tree build_x_unary_op\t\t\tPARAMS ((enum tree_code, tree));\n-extern tree unary_complex_lvalue\t\tPARAMS ((enum tree_code, tree));\n-extern tree build_x_conditional_expr\t\tPARAMS ((tree, tree, tree));\n-extern tree build_x_compound_expr\t\tPARAMS ((tree));\n-extern tree build_compound_expr\t\t\tPARAMS ((tree));\n-extern tree build_static_cast\t\t\tPARAMS ((tree, tree));\n-extern tree build_reinterpret_cast\t\tPARAMS ((tree, tree));\n-extern tree build_const_cast\t\t\tPARAMS ((tree, tree));\n-extern tree build_c_cast\t\t\tPARAMS ((tree, tree));\n-extern tree build_x_modify_expr\t\t\tPARAMS ((tree, enum tree_code, tree));\n-extern tree build_modify_expr\t\t\tPARAMS ((tree, enum tree_code, tree));\n-extern tree dubious_conversion_warnings         PARAMS ((tree, tree, const char *, tree, int));\n-extern tree convert_for_initialization\t\tPARAMS ((tree, tree, tree, int, const char *, tree, int));\n-extern int comp_ptr_ttypes\t\t\tPARAMS ((tree, tree));\n-extern int ptr_reasonably_similar\t\tPARAMS ((tree, tree));\n-extern tree build_ptrmemfunc\t\t\tPARAMS ((tree, tree, int));\n-extern int cp_type_quals                        PARAMS ((tree));\n-extern int cp_has_mutable_p                     PARAMS ((tree));\n-extern int at_least_as_qualified_p              PARAMS ((tree, tree));\n-extern int more_qualified_p                     PARAMS ((tree, tree));\n-extern tree build_ptrmemfunc1                   PARAMS ((tree, tree, tree));\n-extern void expand_ptrmemfunc_cst               PARAMS ((tree, tree *, tree *));\n-extern tree pfn_from_ptrmemfunc                 PARAMS ((tree));\n-extern tree type_after_usual_arithmetic_conversions PARAMS ((tree, tree));\n-extern tree composite_pointer_type              PARAMS ((tree, tree, tree, tree,\n-\t\t\t\t\t\t       const char*));\n-extern tree merge_types\t\t\t\tPARAMS ((tree, tree));\n-extern tree check_return_expr                   PARAMS ((tree));\n+extern tree build_x_indirect_ref\t\t(tree, const char *);\n+extern tree build_indirect_ref\t\t\t(tree, const char *);\n+extern tree build_array_ref\t\t\t(tree, tree);\n+extern tree get_member_function_from_ptrfunc\t(tree *, tree);\n+extern tree build_function_call_real\t\t(tree, tree, int, int);\n+extern tree build_function_call_maybe\t\t(tree, tree);\n+extern tree convert_arguments\t\t\t(tree, tree, tree, int);\n+extern tree build_x_binary_op\t\t\t(enum tree_code, tree, tree);\n+extern tree build_x_unary_op\t\t\t(enum tree_code, tree);\n+extern tree unary_complex_lvalue\t\t(enum tree_code, tree);\n+extern tree build_x_conditional_expr\t\t(tree, tree, tree);\n+extern tree build_x_compound_expr\t\t(tree);\n+extern tree build_compound_expr\t\t\t(tree);\n+extern tree build_static_cast\t\t\t(tree, tree);\n+extern tree build_reinterpret_cast\t\t(tree, tree);\n+extern tree build_const_cast\t\t\t(tree, tree);\n+extern tree build_c_cast\t\t\t(tree, tree);\n+extern tree build_x_modify_expr\t\t\t(tree, enum tree_code, tree);\n+extern tree build_modify_expr\t\t\t(tree, enum tree_code, tree);\n+extern tree dubious_conversion_warnings         (tree, tree, const char *, tree, int);\n+extern tree convert_for_initialization\t\t(tree, tree, tree, int, const char *, tree, int);\n+extern int comp_ptr_ttypes\t\t\t(tree, tree);\n+extern int ptr_reasonably_similar\t\t(tree, tree);\n+extern tree build_ptrmemfunc\t\t\t(tree, tree, int);\n+extern int cp_type_quals                        (tree);\n+extern int cp_has_mutable_p                     (tree);\n+extern int at_least_as_qualified_p              (tree, tree);\n+extern int more_qualified_p                     (tree, tree);\n+extern tree build_ptrmemfunc1                   (tree, tree, tree);\n+extern void expand_ptrmemfunc_cst               (tree, tree *, tree *);\n+extern tree pfn_from_ptrmemfunc                 (tree);\n+extern tree type_after_usual_arithmetic_conversions (tree, tree);\n+extern tree composite_pointer_type              (tree, tree, tree, tree,\n+\t\t\t\t\t\t       const char*);\n+extern tree merge_types\t\t\t\t(tree, tree);\n+extern tree check_return_expr                   (tree);\n #define cp_build_binary_op(code, arg1, arg2) \\\n   build_binary_op(code, arg1, arg2, 1)\n #define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, true)\n #define cxx_alignof(T) cxx_sizeof_or_alignof_type (T, ALIGNOF_EXPR, true)\n extern tree build_ptrmemfunc_access_expr       (tree, tree);\n \n /* in typeck2.c */\n-extern void require_complete_eh_spec_types\tPARAMS ((tree, tree));\n-extern void cxx_incomplete_type_diagnostic\tPARAMS ((tree, tree, int));\n+extern void require_complete_eh_spec_types\t(tree, tree);\n+extern void cxx_incomplete_type_diagnostic\t(tree, tree, int);\n #undef cxx_incomplete_type_error\n-extern void cxx_incomplete_type_error\t\tPARAMS ((tree, tree));\n+extern void cxx_incomplete_type_error\t\t(tree, tree);\n #define cxx_incomplete_type_error(V,T) \\\n   (cxx_incomplete_type_diagnostic ((V), (T), 0))\n-extern tree error_not_base_type\t\t\tPARAMS ((tree, tree));\n-extern tree binfo_or_else\t\t\tPARAMS ((tree, tree));\n-extern void readonly_error\t\t\tPARAMS ((tree, const char *, int));\n-extern int abstract_virtuals_error\t\tPARAMS ((tree, tree));\n-\n-extern tree store_init_value\t\t\tPARAMS ((tree, tree));\n-extern tree digest_init\t\t\t\tPARAMS ((tree, tree, tree *));\n-extern tree build_scoped_ref\t\t\tPARAMS ((tree, tree, tree *));\n-extern tree build_x_arrow\t\t\tPARAMS ((tree));\n-extern tree build_m_component_ref\t\tPARAMS ((tree, tree));\n-extern tree build_functional_cast\t\tPARAMS ((tree, tree));\n-extern void check_for_new_type\t\t\tPARAMS ((const char *, flagged_type_tree));\n-extern tree add_exception_specifier             PARAMS ((tree, tree, int));\n-extern tree merge_exception_specifiers          PARAMS ((tree, tree));\n+extern tree error_not_base_type\t\t\t(tree, tree);\n+extern tree binfo_or_else\t\t\t(tree, tree);\n+extern void readonly_error\t\t\t(tree, const char *, int);\n+extern int abstract_virtuals_error\t\t(tree, tree);\n+\n+extern tree store_init_value\t\t\t(tree, tree);\n+extern tree digest_init\t\t\t\t(tree, tree, tree *);\n+extern tree build_scoped_ref\t\t\t(tree, tree, tree *);\n+extern tree build_x_arrow\t\t\t(tree);\n+extern tree build_m_component_ref\t\t(tree, tree);\n+extern tree build_functional_cast\t\t(tree, tree);\n+extern void check_for_new_type\t\t\t(const char *, flagged_type_tree);\n+extern tree add_exception_specifier             (tree, tree, int);\n+extern tree merge_exception_specifiers          (tree, tree);\n \n /* in mangle.c */\n-extern void init_mangle                         PARAMS ((void));\n-extern void mangle_decl                         PARAMS ((tree));\n-extern const char *mangle_type_string           PARAMS ((tree));\n-extern tree mangle_type                         PARAMS ((tree));\n-extern tree mangle_typeinfo_for_type            PARAMS ((tree));\n-extern tree mangle_typeinfo_string_for_type     PARAMS ((tree));\n-extern tree mangle_vtbl_for_type                PARAMS ((tree));\n-extern tree mangle_vtt_for_type                 PARAMS ((tree));\n-extern tree mangle_ctor_vtbl_for_type           PARAMS ((tree, tree));\n-extern tree mangle_thunk                        PARAMS ((tree, int, tree, tree));\n-extern tree mangle_conv_op_name_for_type        PARAMS ((tree));\n-extern tree mangle_guard_variable               PARAMS ((tree));\n-extern tree mangle_ref_init_variable            PARAMS ((tree));\n+extern void init_mangle                         (void);\n+extern void mangle_decl                         (tree);\n+extern const char *mangle_type_string           (tree);\n+extern tree mangle_type                         (tree);\n+extern tree mangle_typeinfo_for_type            (tree);\n+extern tree mangle_typeinfo_string_for_type     (tree);\n+extern tree mangle_vtbl_for_type                (tree);\n+extern tree mangle_vtt_for_type                 (tree);\n+extern tree mangle_ctor_vtbl_for_type           (tree, tree);\n+extern tree mangle_thunk                        (tree, int, tree, tree);\n+extern tree mangle_conv_op_name_for_type        (tree);\n+extern tree mangle_guard_variable               (tree);\n+extern tree mangle_ref_init_variable            (tree);\n \n /* in dump.c */\n-extern int cp_dump_tree                         PARAMS ((void *, tree));\n+extern int cp_dump_tree                         (void *, tree);\n \n /* -- end of C++ */\n "}]}