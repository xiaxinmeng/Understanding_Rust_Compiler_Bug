{"sha": "f87990a2a8fc9e20d30462a0a4c9047582af0cd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3OTkwYTJhOGZjOWUyMGQzMDQ2MmEwYTRjOTA0NzU4MmFmMGNkOQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2021-05-03T09:36:14Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2021-05-03T21:13:59Z"}, "message": "[openmp, simt] Disable SIMT for user-defined reduction\n\nThe test-case included in this patch contains this target region:\n...\n  for (int i0 = 0 ; i0 < N0 ; i0++ )\n    counter_N0.i += 1;\n...\n\nWhen running with nvptx accelerator, the counter variable is expected to\nbe N0 after the region, but instead is N0 / 32.  The problem is that rather\nthan getting the result for all warp lanes, we get it for just one lane.\n\nThis is caused by the implementation of SIMT being incomplete.  It handles\nregular reductions, but appearantly not user-defined reductions.\n\nFor now, handle this by disabling SIMT in this case, specifically by setting\nsctx->max_vf to 1.\n\nTested libgomp on x86_64-linux with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2021-05-03  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/100321\n\t* omp-low.c (lower_rec_input_clauses): Disable SIMT for user-defined\n\treduction.\n\nlibgomp/ChangeLog:\n\n2021-05-03  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/100321\n\t* testsuite/libgomp.c/target-44.c: New test.", "tree": {"sha": "4775d4d8ac3746f76f1bd94beeee8f9d412ba3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4775d4d8ac3746f76f1bd94beeee8f9d412ba3c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f87990a2a8fc9e20d30462a0a4c9047582af0cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87990a2a8fc9e20d30462a0a4c9047582af0cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87990a2a8fc9e20d30462a0a4c9047582af0cd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87990a2a8fc9e20d30462a0a4c9047582af0cd9/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e6bb44ff9487832335369974630a5c7073fa7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e6bb44ff9487832335369974630a5c7073fa7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e6bb44ff9487832335369974630a5c7073fa7b"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "1f14c4b1d6946cf486cdb979e3ed036cc3296178", "filename": "gcc/omp-low.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87990a2a8fc9e20d30462a0a4c9047582af0cd9/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87990a2a8fc9e20d30462a0a4c9047582af0cd9/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=f87990a2a8fc9e20d30462a0a4c9047582af0cd9", "patch": "@@ -4385,6 +4385,19 @@ lower_rec_simd_input_clauses (tree new_var, omp_context *ctx,\n \t\tsctx->max_vf = lower_bound (sctx->max_vf, safe_len);\n \t    }\n \t}\n+      if (sctx->is_simt && !known_eq (sctx->max_vf, 1U))\n+\t{\n+\t  for (tree c = gimple_omp_for_clauses (ctx->stmt); c;\n+\t       c = OMP_CLAUSE_CHAIN (c))\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n+\t\t&& OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n+\t      {\n+\t\t/* UDR reductions are not supported yet for SIMT, disable\n+\t\t   SIMT.  */\n+\t\tsctx->max_vf = 1;\n+\t\tbreak;\n+\t      }\n+\t}\n       if (maybe_gt (sctx->max_vf, 1U))\n \t{\n \t  sctx->idx = create_tmp_var (unsigned_type_node);"}, {"sha": "13e0c757845702372f8f1ac9eafd09f02936139d", "filename": "libgomp/testsuite/libgomp.c/target-44.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87990a2a8fc9e20d30462a0a4c9047582af0cd9/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87990a2a8fc9e20d30462a0a4c9047582af0cd9/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-44.c?ref=f87990a2a8fc9e20d30462a0a4c9047582af0cd9", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-additional-options \"-foffload=-latomic\" { target { offload_target_nvptx } } } */\n+\n+#include <stdlib.h>\n+\n+struct s\n+{\n+  int i;\n+};\n+\n+#pragma omp declare reduction(+: struct s: omp_out.i += omp_in.i)\n+\n+int\n+main (void)\n+{\n+  const int N0 = 32768;\n+\n+  struct s counter_N0 = { 0 };\n+#pragma omp target\n+#pragma omp for simd reduction(+: counter_N0)\n+  for (int i0 = 0 ; i0 < N0 ; i0++ )\n+    counter_N0.i += 1;\n+\n+  if (counter_N0.i != N0)\n+    abort ();\n+\n+  return 0;\n+}"}]}