{"sha": "db91c7cf3d97a169d4e1c463d87a9f2007c40761", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5MWM3Y2YzZDk3YTE2OWQ0ZTFjNDYzZDg3YTlmMjAwN2M0MDc2MQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-20T07:55:00Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-20T07:55:00Z"}, "message": "Come up with hook libc_has_fast_function (PR middle-end/90263).\n\n2019-05-20  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/90263\n\t* builtins.c (expand_builtin_memory_copy_args): When having a\n\ttarget with fast mempcpy implementation do now use memcpy.\n\t* config/i386/i386.c (ix86_libc_has_fast_function): New.\n\t(TARGET_LIBC_HAS_FAST_FUNCTION): Likewise.\n\t* doc/tm.texi: Likewise.\n\t* doc/tm.texi.in: Likewise.\n\t* target.def:\n\t* expr.c (emit_block_move_hints): Add 2 new arguments.\n\t* expr.h (emit_block_move_hints): Bail out when libcall\n\tto memcpy would be used.\n2019-05-20  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/90263\n\t* gcc.c-torture/compile/pr90263.c: New test.\n\t* lib/target-supports.exp: Add check_effective_target_glibc.\n\nFrom-SVN: r271400", "tree": {"sha": "11aa3bde6da1520b48d1a2a0cbf8e580e67e0c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11aa3bde6da1520b48d1a2a0cbf8e580e67e0c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db91c7cf3d97a169d4e1c463d87a9f2007c40761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db91c7cf3d97a169d4e1c463d87a9f2007c40761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db91c7cf3d97a169d4e1c463d87a9f2007c40761", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db91c7cf3d97a169d4e1c463d87a9f2007c40761/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03105885b1502a971955908255c722df5be0dafd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03105885b1502a971955908255c722df5be0dafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03105885b1502a971955908255c722df5be0dafd"}], "stats": {"total": 104, "additions": 100, "deletions": 4}, "files": [{"sha": "68564af3dcac0f16903d29c603934e023788fff9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -1,3 +1,17 @@\n+2019-05-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/90263\n+\t* builtins.c (expand_builtin_memory_copy_args): When having a\n+\ttarget with fast mempcpy implementation do now use memcpy.\n+\t* config/i386/i386.c (ix86_libc_has_fast_function): New.\n+\t(TARGET_LIBC_HAS_FAST_FUNCTION): Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/tm.texi.in: Likewise.\n+\t* target.def:\n+\t* expr.c (emit_block_move_hints): Add 2 new arguments.\n+\t* expr.h (emit_block_move_hints): Bail out when libcall\n+\tto memcpy would be used.\n+\n 2019-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* profile-count.c: Add vertical spacing in order"}, {"sha": "3f32754c4d35fc34af7c53156d2a356f69a94a8f", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -3839,6 +3839,8 @@ expand_builtin_memory_copy_args (tree dest, tree src, tree len,\n   unsigned HOST_WIDE_INT max_size;\n   unsigned HOST_WIDE_INT probable_max_size;\n \n+  bool is_move_done;\n+\n   /* If DEST is not a pointer type, call the normal function.  */\n   if (dest_align == 0)\n     return NULL_RTX;\n@@ -3888,11 +3890,22 @@ expand_builtin_memory_copy_args (tree dest, tree src, tree len,\n   if (CALL_EXPR_TAILCALL (exp)\n       && (retmode == RETURN_BEGIN || target == const0_rtx))\n     method = BLOCK_OP_TAILCALL;\n-  if (retmode == RETURN_END && target != const0_rtx)\n+  bool use_mempcpy_call = (targetm.libc_has_fast_function (BUILT_IN_MEMPCPY)\n+\t\t\t   && retmode == RETURN_END\n+\t\t\t   && target != const0_rtx);\n+  if (use_mempcpy_call)\n     method = BLOCK_OP_NO_LIBCALL_RET;\n   dest_addr = emit_block_move_hints (dest_mem, src_mem, len_rtx, method,\n \t\t\t\t     expected_align, expected_size,\n-\t\t\t\t     min_size, max_size, probable_max_size);\n+\t\t\t\t     min_size, max_size, probable_max_size,\n+\t\t\t\t     use_mempcpy_call, &is_move_done);\n+\n+  /* Bail out when a mempcpy call would be expanded as libcall and when\n+     we have a target that provides a fast implementation\n+     of mempcpy routine.  */\n+  if (!is_move_done)\n+    return NULL_RTX;\n+\n   if (dest_addr == pc_rtx)\n     return NULL_RTX;\n "}, {"sha": "384c63385fd9b118d7b46ea2b7e05b6e6517c3c5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -23063,6 +23063,21 @@ ix86_run_selftests (void)\n #define TARGET_GET_MULTILIB_ABI_NAME \\\n   ix86_get_multilib_abi_name\n \n+static bool ix86_libc_has_fast_function (int fcode)\n+{\n+#ifdef OPTION_GLIBC\n+  if (OPTION_GLIBC)\n+    return (built_in_function)fcode == BUILT_IN_MEMPCPY;\n+  else\n+    return false;\n+#else\n+  return false;\n+#endif\n+}\n+\n+#undef TARGET_LIBC_HAS_FAST_FUNCTION\n+#define TARGET_LIBC_HAS_FAST_FUNCTION ix86_libc_has_fast_function\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::ix86_run_selftests"}, {"sha": "0941039536bcf3eca52b8e911121b179d1e67c11", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -5594,6 +5594,11 @@ This hook determines whether a function from a class of functions\n @var{fn_class} is present at the runtime.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_LIBC_HAS_FAST_FUNCTION (int @var{fcode})\n+This hook determines whether a function from a class of functions\n+@var{fn_class} has a fast implementation.\n+@end deftypefn\n+\n @defmac NEXT_OBJC_RUNTIME\n Set this macro to 1 to use the \"NeXT\" Objective-C message sending conventions\n by default.  This calling convention involves passing the object, the selector"}, {"sha": "17560fce6b7a2cb0148e4dbac565eca588d5302e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -3991,6 +3991,8 @@ macro, a reasonable default is used.\n \n @hook TARGET_LIBC_HAS_FUNCTION\n \n+@hook TARGET_LIBC_HAS_FAST_FUNCTION\n+\n @defmac NEXT_OBJC_RUNTIME\n Set this macro to 1 to use the \"NeXT\" Objective-C message sending conventions\n by default.  This calling convention involves passing the object, the selector"}, {"sha": "c78bc74c0d9f9005f284741863652852a295125b", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -1561,12 +1561,16 @@ emit_block_move_hints (rtx x, rtx y, rtx size, enum block_op_methods method,\n \t\t       unsigned int expected_align, HOST_WIDE_INT expected_size,\n \t\t       unsigned HOST_WIDE_INT min_size,\n \t\t       unsigned HOST_WIDE_INT max_size,\n-\t\t       unsigned HOST_WIDE_INT probable_max_size)\n+\t\t       unsigned HOST_WIDE_INT probable_max_size,\n+\t\t       bool bail_out_libcall, bool *is_move_done)\n {\n   int may_use_call;\n   rtx retval = 0;\n   unsigned int align;\n \n+  if (is_move_done)\n+    *is_move_done = true;\n+\n   gcc_assert (size);\n   if (CONST_INT_P (size) && INTVAL (size) == 0)\n     return 0;\n@@ -1628,6 +1632,13 @@ emit_block_move_hints (rtx x, rtx y, rtx size, enum block_op_methods method,\n \t   && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (x))\n \t   && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (y)))\n     {\n+      if (bail_out_libcall)\n+\t{\n+\t  if (is_move_done)\n+\t    *is_move_done = false;\n+\t  return retval;\n+\t}\n+\n       if (may_use_call < 0)\n \treturn pc_rtx;\n "}, {"sha": "6eb70bf12f17ebe1dd8eb36fe5cc0145c9ecc6d6", "filename": "gcc/expr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -114,7 +114,9 @@ extern rtx emit_block_move_hints (rtx, rtx, rtx, enum block_op_methods,\n \t\t\t          unsigned int, HOST_WIDE_INT,\n \t\t\t\t  unsigned HOST_WIDE_INT,\n \t\t\t\t  unsigned HOST_WIDE_INT,\n-\t\t\t\t  unsigned HOST_WIDE_INT);\n+\t\t\t\t  unsigned HOST_WIDE_INT,\n+\t\t\t\t  bool bail_out_libcall = false,\n+\t\t\t\t  bool *is_move_done = NULL);\n extern rtx emit_block_cmp_hints (rtx, rtx, rtx, tree, rtx, bool,\n \t\t\t\t by_pieces_constfn, void *);\n extern bool emit_storent_insn (rtx to, rtx from);"}, {"sha": "23e260cb53584e798847161d3191b87d0b9528ad", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -2547,6 +2547,13 @@ DEFHOOK\n  bool, (enum function_class fn_class),\n  default_libc_has_function)\n \n+DEFHOOK\n+(libc_has_fast_function,\n+ \"This hook determines whether a function from a class of functions\\n\\\n+@var{fn_class} has a fast implementation.\",\n+ bool, (int fcode),\n+ default_libc_has_fast_function)\n+\n /* True if new jumps cannot be created, to replace existing ones or\n    not, at the current point in the compilation.  */\n DEFHOOK"}, {"sha": "7b3bf731f35e1dd5b0d1823e0679f7c43eacda6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -1,3 +1,9 @@\n+2019-05-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/90263\n+\t* gcc.c-torture/compile/pr90263.c: New test.\n+\t* lib/target-supports.exp: Add check_effective_target_glibc.\n+\n 2019-05-20  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/90518"}, {"sha": "df3ab0fc1cd85983a279a25d293941bbeb995a30", "filename": "gcc/testsuite/gcc.c-torture/compile/pr90263.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr90263.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr90263.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr90263.c?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -0,0 +1,10 @@\n+/* PR middle-end/90263 */\n+/* { dg-require-effective-target glibc } */\n+\n+int *f (int *p, int *q, long n)\n+{\n+  return __builtin_mempcpy (p, q, n);\n+}\n+\n+/* { dg-final { scan-assembler \"mempcpy\" { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler \"memcpy\" { target { ! { i?86-*-* x86_64-*-* } } } } } */"}, {"sha": "3bd6e8157154b9663e85bf83bea2941deadb8f65", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db91c7cf3d97a169d4e1c463d87a9f2007c40761/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=db91c7cf3d97a169d4e1c463d87a9f2007c40761", "patch": "@@ -9313,6 +9313,17 @@ proc check_effective_target_arm_v8_3a_complex_neon_hw { } {\n     } [add_options_for_arm_v8_3a_complex_neon \"\"]]\n }\n \n+# Returns 1 if the target is using glibc, 0 otherwise.\n+\n+proc check_effective_target_glibc { } {\n+    return [check_no_compiler_messages glibc_object assembly {\n+  #include <stdlib.h>\n+\t#if !defined(__GLIBC__)\n+\t#error undefined\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if the target plus current options supports a vector\n # complex addition with rotate of half and single float modes, 0 otherwise.\n #"}]}