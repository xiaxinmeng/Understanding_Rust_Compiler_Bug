{"sha": "ec92be4a4e037d88c2a340f6aed9c619a152de8b", "node_id": "C_kwDOANBUbNoAKGVjOTJiZTRhNGUwMzdkODhjMmEzNDBmNmFlZDljNjE5YTE1MmRlOGI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-24T00:16:56Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-24T00:16:56Z"}, "message": "Daily bump.", "tree": {"sha": "245a46e97baa184f94271142c7153aec688ced4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245a46e97baa184f94271142c7153aec688ced4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec92be4a4e037d88c2a340f6aed9c619a152de8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec92be4a4e037d88c2a340f6aed9c619a152de8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec92be4a4e037d88c2a340f6aed9c619a152de8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec92be4a4e037d88c2a340f6aed9c619a152de8b/comments", "author": null, "committer": null, "parents": [{"sha": "c4792bd1de0621932a47fb86aca09fafafdb2972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4792bd1de0621932a47fb86aca09fafafdb2972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4792bd1de0621932a47fb86aca09fafafdb2972"}], "stats": {"total": 443, "additions": 442, "deletions": 1}, "files": [{"sha": "5c7ba69232db9e656d02658003abee6b5950ef0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec92be4a4e037d88c2a340f6aed9c619a152de8b", "patch": "@@ -1,3 +1,262 @@\n+2023-03-23  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (*mod<mode>3, umod<mode>3): Add\n+\tnon-earlyclobber alternative.\n+\n+2023-03-23  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c/84900\n+\t* fold-const.cc (maybe_lvalue_p): Treat COMPOUND_LITERAL_EXPR\n+\tas a lvalue.\n+\n+2023-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107569\n+\t* tree-ssa-sccvn.cc (eliminate_dom_walker::eliminate_stmt):\n+\tDo not push SSA names with zero uses as available leader.\n+\t(process_bb): Likewise.\n+\n+2023-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109262\n+\t* tree-ssa-forwprop.cc (pass_forwprop::execute): When\n+\tcombining a piecewise complex load avoid touching loads\n+\tthat throw internally.  Use fun, not cfun throughout.\n+\n+2023-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* value-range.cc (irange::irange_union, irange::intersect): Fix\n+\tcomment spelling bugs.\n+\t* gimple-range-trace.cc (range_tracer::do_header): Likewise.\n+\t* gimple-range-trace.h: Likewise.\n+\t* gimple-range-edge.cc: Likewise.\n+\t(gimple_outgoing_range_stmt_p,\n+\tgimple_outgoing_range::switch_edge_range,\n+\tgimple_outgoing_range::edge_range_p): Likewise.\n+\t* gimple-range.cc (gimple_ranger::prefill_stmt_dependencies,\n+\tgimple_ranger::fold_stmt, gimple_ranger::register_transitive_infer,\n+\tassume_query::assume_query, assume_query::calculate_phi): Likewise.\n+\t* gimple-range-edge.h: Likewise.\n+\t* value-range.h (Value_Range::set, Value_Range::lower_bound,\n+\tValue_Range::upper_bound, frange::set_undefined): Likewise.\n+\t* gimple-range-gori.h (range_def_chain::depend, gori_map::m_outgoing,\n+\tgori_compute): Likewise.\n+\t* gimple-range-fold.h (fold_using_range): Likewise.\n+\t* gimple-range-path.cc (path_range_query::compute_ranges_in_phis):\n+\tLikewise.\n+\t* gimple-range-gori.cc (range_def_chain::in_chain_p,\n+\trange_def_chain::dump, gori_map::calculate_gori,\n+\tgori_compute::compute_operand_range_switch,\n+\tgori_compute::logical_combine, gori_compute::refine_using_relation,\n+\tgori_compute::compute_operand1_range, gori_compute::may_recompute_p):\n+\tLikewise.\n+\t* gimple-range.h: Likewise.\n+\t(enable_ranger): Likewise.\n+\t* range-op.h (empty_range_varying): Likewise.\n+\t* value-query.h (value_query): Likewise.\n+\t* gimple-range-cache.cc (block_range_cache::set_bb_range,\n+\tblock_range_cache::dump, ssa_global_cache::clear_global_range,\n+\ttemporal_cache::temporal_value, temporal_cache::current_p,\n+\tranger_cache::range_of_def, ranger_cache::propagate_updated_value,\n+\tranger_cache::range_from_dom, ranger_cache::register_inferred_value):\n+\tLikewise.\n+\t* gimple-range-fold.cc (fur_edge::get_phi_operand,\n+\tfur_stmt::get_operand, gimple_range_adjustment,\n+\tfold_using_range::range_of_phi,\n+\tfold_using_range::relation_fold_and_or): Likewise.\n+\t* value-range-storage.h (irange_storage_slot::MAX_INTS): Likewise.\n+\t* value-query.cc (range_query::value_of_expr,\n+\trange_query::value_on_edge, range_query::query_relation): Likewise.\n+\t* tree-vrp.cc (remove_unreachable::remove_and_update_globals,\n+\tintersect_range_with_nonzero_bits): Likewise.\n+\t* gimple-range-infer.cc (gimple_infer_range::check_assume_func,\n+\texit_range): Likewise.\n+\t* value-relation.h: Likewise.\n+\t(equiv_oracle, relation_trio::relation_trio, value_relation,\n+\tvalue_relation::value_relation, pe_min): Likewise.\n+\t* range-op-float.cc (range_operator_float::rv_fold,\n+\tfrange_arithmetic, foperator_unordered_equal::op1_range,\n+\tfoperator_div::rv_fold): Likewise.\n+\t* gimple-range-op.cc (cfn_clz::fold_range): Likewise.\n+\t* value-relation.cc (equiv_oracle::query_relation,\n+\tequiv_oracle::register_equiv, equiv_oracle::add_equiv_to_block,\n+\tvalue_relation::apply_transitive, relation_chain_head::find_relation,\n+\tdom_oracle::query_relation, dom_oracle::find_relation_block,\n+\tdom_oracle::find_relation_dom, path_oracle::register_equiv): Likewise.\n+\t* range-op.cc (range_operator::wi_fold_in_parts_equiv,\n+\tcreate_possibly_reversed_range, adjust_op1_for_overflow,\n+\toperator_mult::wi_fold, operator_exact_divide::op1_range,\n+\toperator_cast::lhs_op1_relation, operator_cast::fold_pair,\n+\toperator_cast::fold_range, operator_abs::wi_fold, range_op_cast_tests,\n+\trange_op_lshift_tests): Likewise.\n+\n+2023-03-23  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.cc (gcn_class_max_nregs): Handle vectors in SGPRs.\n+\t(move_callee_saved_registers): Detect the bug condition early.\n+\n+2023-03-23  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-protos.h (gcn_stepped_zero_int_parallel_p): New.\n+\t* config/gcn/gcn-valu.md (V_1REG_ALT): New.\n+\t(V_2REG_ALT): New.\n+\t(vec_extract<V_1REG:mode><V_1REG_ALT:mode>_nop): New.\n+\t(vec_extract<V_2REG:mode><V_2REG_ALT:mode>_nop): New.\n+\t(vec_extract<V_ALL:mode><V_ALL_ALT:mode>): Use new patterns.\n+\t* config/gcn/gcn.cc (gcn_stepped_zero_int_parallel_p): New.\n+\t* config/gcn/predicates.md (ascending_zero_int_parallel): New.\n+\n+2023-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109176\n+\t* tree-vect-generic.cc (expand_vector_condition): If a has\n+\tvector boolean type and is a comparison, also check if both\n+\tthe comparison and VEC_COND_EXPR could be successfully expanded\n+\tindividually.\n+\n+2023-03-23  Pan Li  <pan2.li@intel.com>\n+\t    Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/108654\n+\tPR target/108185\n+\t* config/riscv/riscv-modes.def (ADJUST_BYTESIZE): Adjust size\n+\tfor vector mask modes.\n+\t* config/riscv/riscv.cc (riscv_v_adjust_bytesize): New.\n+\t* config/riscv/riscv.h (riscv_v_adjust_bytesize): New.\n+\n+2023-03-23  Songhe Zhu  <zhusonghe@eswincomputing.com>\n+\n+\t* config/riscv/multilib-generator: Adjusting the loop of 'alt' in 'alts'.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/109244\n+\t* config/riscv/riscv-protos.h (emit_vlmax_vsetvl): Define as global.\n+\t(emit_vlmax_op): Ditto.\n+\t* config/riscv/riscv-v.cc (get_sew): New function.\n+\t(emit_vlmax_vsetvl): Adapt function.\n+\t(emit_pred_op): Ditto.\n+\t(emit_vlmax_op): Ditto.\n+\t(emit_nonvlmax_op): Ditto.\n+\t(legitimize_move): Fix LRA ICE.\n+\t(gen_no_side_effects_vsetvl_rtx): Adapt function.\n+\t* config/riscv/vector.md (@mov<V_FRACT:mode><P:mode>_lra): New pattern.\n+\t(@mov<VB:mode><P:mode>_lra): Ditto.\n+\t(*mov<V_FRACT:mode><P:mode>_lra): Ditto.\n+\t(*mov<VB:mode><P:mode>_lra): Ditto.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/109228\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class vlenb): Add\n+\t__riscv_vlenb support.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vlenb): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct vlenb_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc: Ditto.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    kito-cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv-vsetvl.cc (reg_available_p): Fix bugs.\n+\t(pass_vsetvl::compute_local_backward_infos): Fix bugs.\n+\t(pass_vsetvl::need_vsetvl): Fix bugs.\n+\t(pass_vsetvl::backward_demand_fusion): Fix bugs.\n+\t(pass_vsetvl::demand_fusion): Fix bugs.\n+\t(eliminate_insn): Fix bugs.\n+\t(insert_vsetvl): Ditto.\n+\t(pass_vsetvl::emit_local_forward_vsetvls): Ditto.\n+\t* config/riscv/riscv-vsetvl.h (enum vsetvl_type): Ditto.\n+\t* config/riscv/vector.md: Ditto.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    kito-cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc: Fix ternary bug.\n+\t* config/riscv/vector-iterators.md (nmsac): Ditto.\n+\t(nmsub): Ditto.\n+\t(msac): Ditto.\n+\t(msub): Ditto.\n+\t(nmadd): Ditto.\n+\t(nmacc): Ditto.\n+\t* config/riscv/vector.md (@pred_mul_<optab><mode>): Ditto.\n+\t(@pred_mul_plus<mode>): Ditto.\n+\t(*pred_madd<mode>): Ditto.\n+\t(*pred_macc<mode>): Ditto.\n+\t(*pred_mul_plus<mode>): Ditto.\n+\t(@pred_mul_plus<mode>_scalar): Ditto.\n+\t(*pred_madd<mode>_scalar): Ditto.\n+\t(*pred_macc<mode>_scalar): Ditto.\n+\t(*pred_mul_plus<mode>_scalar): Ditto.\n+\t(*pred_madd<mode>_extended_scalar): Ditto.\n+\t(*pred_macc<mode>_extended_scalar): Ditto.\n+\t(*pred_mul_plus<mode>_extended_scalar): Ditto.\n+\t(@pred_minus_mul<mode>): Ditto.\n+\t(*pred_<madd_nmsub><mode>): Ditto.\n+\t(*pred_nmsub<mode>): Ditto.\n+\t(*pred_<macc_nmsac><mode>): Ditto.\n+\t(*pred_nmsac<mode>): Ditto.\n+\t(*pred_mul_<optab><mode>): Ditto.\n+\t(*pred_minus_mul<mode>): Ditto.\n+\t(@pred_mul_<optab><mode>_scalar): Ditto.\n+\t(@pred_minus_mul<mode>_scalar): Ditto.\n+\t(*pred_<madd_nmsub><mode>_scalar): Ditto.\n+\t(*pred_nmsub<mode>_scalar): Ditto.\n+\t(*pred_<macc_nmsac><mode>_scalar): Ditto.\n+\t(*pred_nmsac<mode>_scalar): Ditto.\n+\t(*pred_mul_<optab><mode>_scalar): Ditto.\n+\t(*pred_minus_mul<mode>_scalar): Ditto.\n+\t(*pred_<madd_nmsub><mode>_extended_scalar): Ditto.\n+\t(*pred_nmsub<mode>_extended_scalar): Ditto.\n+\t(*pred_<macc_nmsac><mode>_extended_scalar): Ditto.\n+\t(*pred_nmsac<mode>_extended_scalar): Ditto.\n+\t(*pred_mul_<optab><mode>_extended_scalar): Ditto.\n+\t(*pred_minus_mul<mode>_extended_scalar): Ditto.\n+\t(*pred_<madd_msub><mode>): Ditto.\n+\t(*pred_<macc_msac><mode>): Ditto.\n+\t(*pred_<madd_msub><mode>_scalar): Ditto.\n+\t(*pred_<macc_msac><mode>_scalar): Ditto.\n+\t(@pred_neg_mul_<optab><mode>): Ditto.\n+\t(@pred_mul_neg_<optab><mode>): Ditto.\n+\t(*pred_<nmadd_msub><mode>): Ditto.\n+\t(*pred_<nmsub_nmadd><mode>): Ditto.\n+\t(*pred_<nmacc_msac><mode>): Ditto.\n+\t(*pred_<nmsac_nmacc><mode>): Ditto.\n+\t(*pred_neg_mul_<optab><mode>): Ditto.\n+\t(*pred_mul_neg_<optab><mode>): Ditto.\n+\t(@pred_neg_mul_<optab><mode>_scalar): Ditto.\n+\t(@pred_mul_neg_<optab><mode>_scalar): Ditto.\n+\t(*pred_<nmadd_msub><mode>_scalar): Ditto.\n+\t(*pred_<nmsub_nmadd><mode>_scalar): Ditto.\n+\t(*pred_<nmacc_msac><mode>_scalar): Ditto.\n+\t(*pred_<nmsac_nmacc><mode>_scalar): Ditto.\n+\t(*pred_neg_mul_<optab><mode>_scalar): Ditto.\n+\t(*pred_mul_neg_<optab><mode>_scalar): Ditto.\n+\t(@pred_widen_neg_mul_<optab><mode>): Ditto.\n+\t(@pred_widen_mul_neg_<optab><mode>): Ditto.\n+\t(@pred_widen_neg_mul_<optab><mode>_scalar): Ditto.\n+\t(@pred_widen_mul_neg_<optab><mode>_scalar): Ditto.\n+\n+2023-03-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* builtins.cc (builtin_memset_read_str): Replace\n+\ttargetm.gen_memset_scratch_rtx with gen_reg_rtx.\n+\t(builtin_memset_gen_str): Ditto.\n+\t* config/i386/i386-expand.cc\n+\t(ix86_convert_const_wide_int_to_broadcast): Replace\n+\tix86_gen_scratch_sse_rtx with gen_reg_rtx.\n+\t(ix86_expand_vector_move): Ditto.\n+\t* config/i386/i386-protos.h (ix86_gen_scratch_sse_rtx):\n+\tRemoved.\n+\t* config/i386/i386.cc (ix86_gen_scratch_sse_rtx): Removed.\n+\t(TARGET_GEN_MEMSET_SCRATCH_RTX): Removed.\n+\t* doc/tm.texi: Remove TARGET_GEN_MEMSET_SCRATCH_RTX.\n+\t* doc/tm.texi.in: Ditto.\n+\t* target.def: Ditto.\n+\n 2023-03-22  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \t* lra.cc (lra): Do not repeat inheritance and live range splitting"}, {"sha": "c2cc3bfa412f22fd6a6396b4e019006f44ba94ce", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ec92be4a4e037d88c2a340f6aed9c619a152de8b", "patch": "@@ -1 +1 @@\n-20230323\n+20230324"}, {"sha": "32715f370d9cdee3f8c6449f5e816b031d38aef8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec92be4a4e037d88c2a340f6aed9c619a152de8b", "patch": "@@ -1,3 +1,22 @@\n+2023-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105996\n+\t* typeck.cc (build_ptrmemfunc): Drop 0-offset optimization\n+\tand location wrappers.\n+\n+2023-03-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107532\n+\t* call.cc (class_has_reference_member_p): New.\n+\t(class_has_reference_member_p_r): New.\n+\t(reference_like_class_p): Don't look for a specific constructor.\n+\tUse a DFS walk with class_has_reference_member_p_r.\n+\n+2023-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109241\n+\t* pt.cc (find_parameter_packs_r): Handle null TREE_BINFO.\n+\n 2023-03-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/108390"}, {"sha": "609dab8a24804251f5dfa7a1c43fb10fd6e08c2f", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=ec92be4a4e037d88c2a340f6aed9c619a152de8b", "patch": "@@ -1,3 +1,34 @@\n+2023-03-23  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109264\n+\t* gm2-compiler/M2Quads.mod (BuildConstFunctionCall): Comment\n+\tout ErrorString in debugging block.\n+\t(BuildConstructorStart): Replace Assert with a call to\n+\tMetaErrorT3.  Import MetaErrorT3.\n+\t* gm2-compiler/PCSymBuild.mod (buildConstFunction): Rename\n+\tlocal variables.\n+\t(WalkFunctionParam): Remove test for IsEnumeration when\n+\tresolving MIN or MAX parameters.\n+\t* gm2-compiler/PHBuild.bnf (BlockAssert): New procedure.\n+\t(ErrorArrayat): New procedure.\n+\t(Expect): Renamed parameter t to tok.\n+\t(PushQualident): New rule.\n+\t(ConstSetOrQualidentOrFunction): Force AutoOn.\n+\t(TypeDeclaration): Add debugging assert.\n+\t(SimpleType): Add debugging assert.\n+\t(DefaultRecordAttributes): New rule (and bugfix).\n+\t(FieldPragmaExpression): New rule (and bugfix).\n+\t(PragmaConstExpression): New rule (and bugfix).\n+\t(SetOrDesignatorOrFunction): Add debugging assert.\n+\t(Block): Add debugging assert.\n+\t* gm2-gcc/m2expr.cc (m2expr_ConstantExpressionWarning): int\n+\tto bool.\n+\t* gm2-gcc/m2expr.h (m2expr_TreeOverflow): int to bool.\n+\t(m2expr_GetBooleanTrue): Remove.\n+\t(m2expr_GetBooleanFalse): Remove.\n+\t* gm2-gcc/m2options.h (M2Options_SetStatistics): Replace\n+\tint with bool.\n+\n 2023-03-22  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \tPR modula2/109248"}, {"sha": "1af2de951017b1b4a8447bed3f685f06a18166c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec92be4a4e037d88c2a340f6aed9c619a152de8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec92be4a4e037d88c2a340f6aed9c619a152de8b", "patch": "@@ -1,3 +1,135 @@\n+2023-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105996\n+\t* g++.dg/cpp0x/constexpr-pmf3.C: New test.\n+\n+2023-03-23  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-100.c: XFAIL for ! natural_alignment_32.\n+\n+2023-03-23  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/tree-ssa/pr100359.c: Compile-only for ! natural_alignment_32.\n+\n+2023-03-23  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mod-no_copy.c: New.\n+\t* gcc.target/powerpc/mod-peephole.c: New.\n+\n+2023-03-23  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c/84900\n+\t* gcc.dg/compound-literal-cast-lvalue-1.c: New test.\n+\n+2023-03-23  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109264\n+\t* gm2/iso/extended-opaque/pass/iso-extended-opaque-pass.exp:\n+\tNew test.\n+\t* gm2/iso/extended-opaque/pass/stressset.def: New test.\n+\t* gm2/iso/extended-opaque/pass/stressset.mod: New test.\n+\t* gm2/iso/extended-opaque/pass/testset.mod: New test.\n+\t* gm2/projects/iso/small/run/pass/iso-extended-opaque-run-pass.exp:\n+\tNew test.\n+\t* gm2/projects/iso/small/run/pass/stressset.def: New test.\n+\t* gm2/projects/iso/small/run/pass/stressset.mod: New test.\n+\t* gm2/projects/iso/small/run/pass/test1.mod: New test.\n+\t* gm2/projects/iso/small/run/pass/testlib.def: New test.\n+\t* gm2/projects/iso/small/run/pass/testlib.mod: New test.\n+\t* gm2/projects/iso/small/run/pass/testset.mod: New test.\n+\n+2023-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107569\n+\t* g++.dg/opt/pr107569.C: New testcase.\n+\n+2023-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109262\n+\t* g++.dg/torture/pr109262.C: New testcase.\n+\n+2023-03-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/div_zero.adb: Skip for aarch64*-*-* targets.\n+\n+2023-03-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107532\n+\t* g++.dg/warn/Wdangling-reference11.C: New test.\n+\t* g++.dg/warn/Wdangling-reference12.C: New test.\n+\n+2023-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109176\n+\t* gcc.target/aarch64/sve/pr109176.c: New test.\n+\n+2023-03-23  Pan Li  <pan2.li@intel.com>\n+\t    Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/108654\n+\tPR target/108185\n+\t* gcc.target/riscv/rvv/base/pr108185-1.c: Update.\n+\t* gcc.target/riscv/rvv/base/pr108185-2.c: Ditto.\n+\t* gcc.target/riscv/rvv/base/pr108185-3.c: Ditto.\n+\n+2023-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109241\n+\t* g++.dg/cpp1y/lambda-generic-local-class2.C: New test.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/109244\n+\t* g++.target/riscv/rvv/base/pr109244.C: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vv_constraint-4.c: Adapt testcase.\n+\t* gcc.target/riscv/rvv/base/binop_vv_constraint-6.c: Ditto.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-127.c: Ditto.\n+\t* gcc.target/riscv/rvv/base/spill-1.c: Ditto.\n+\t* gcc.target/riscv/rvv/base/spill-2.c: Ditto.\n+\t* gcc.target/riscv/rvv/base/spill-3.c: Ditto.\n+\t* gcc.target/riscv/rvv/base/spill-5.c: Ditto.\n+\t* gcc.target/riscv/rvv/base/spill-7.c: Ditto.\n+\t* g++.target/riscv/rvv/base/bug-18.C: New test.\n+\t* gcc.target/riscv/rvv/base/merge_constraint-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/merge_constraint-4.c: New test.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/109228\n+\t* gcc.target/riscv/rvv/base/vlenb-1.c: New test.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    kito-cheng  <kito.cheng@sifive.com>\n+\n+\t* g++.target/riscv/rvv/base/bug-10.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-11.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-12.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-13.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-14.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-15.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-16.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-17.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-2.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-3.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-4.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-5.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-6.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-7.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-8.C: New test.\n+\t* g++.target/riscv/rvv/base/bug-9.C: New test.\n+\n+2023-03-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    kito-cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/rvv/base/bug-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/bug-4.c: New test.\n+\t* gcc.target/riscv/rvv/base/bug-5.c: New test.\n+\n+2023-03-23  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_riscv_vector):\n+\tNew.\n+\n 2023-03-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR testsuite/105959"}]}