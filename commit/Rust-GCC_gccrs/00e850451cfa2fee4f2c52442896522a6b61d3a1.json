{"sha": "00e850451cfa2fee4f2c52442896522a6b61d3a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlODUwNDUxY2ZhMmZlZTRmMmM1MjQ0Mjg5NjUyMmE2YjYxZDNhMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-02-10T13:05:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-02-10T13:05:48Z"}, "message": "tree-dfa.c (get_ref_base_and_extent): When computing maxsize deal with structures that end in implicitly variable...\n\n2006-02-10  Richard Guenther  <rguenther@suse.de>\n\n        * tree-dfa.c (get_ref_base_and_extent): When computing maxsize\n        deal with structures that end in implicitly variable sized arrays.\n\nFrom-SVN: r110834", "tree": {"sha": "c692ef13eeb559b4dc3cd81f57f1ced31dc093a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c692ef13eeb559b4dc3cd81f57f1ced31dc093a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00e850451cfa2fee4f2c52442896522a6b61d3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e850451cfa2fee4f2c52442896522a6b61d3a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e850451cfa2fee4f2c52442896522a6b61d3a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e850451cfa2fee4f2c52442896522a6b61d3a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1d398fa050388b082c92dd5ded8f12c93f25154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d398fa050388b082c92dd5ded8f12c93f25154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d398fa050388b082c92dd5ded8f12c93f25154"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "59f26709d6fcd905634225f27f24ac8e0ad667d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e850451cfa2fee4f2c52442896522a6b61d3a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e850451cfa2fee4f2c52442896522a6b61d3a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00e850451cfa2fee4f2c52442896522a6b61d3a1", "patch": "@@ -1,3 +1,8 @@\n+2006-02-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (get_ref_base_and_extent): When computing maxsize\n+\tdeal with structures that end in implicitly variable sized arrays.\n+\n 2006-02-09  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR rtl-optimization/24762"}, {"sha": "8339a942831a41e67dd97bf72155ca3b9841e085", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e850451cfa2fee4f2c52442896522a6b61d3a1/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e850451cfa2fee4f2c52442896522a6b61d3a1/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=00e850451cfa2fee4f2c52442896522a6b61d3a1", "patch": "@@ -913,6 +913,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n   HOST_WIDE_INT maxsize = -1;\n   tree size_tree = NULL_TREE;\n   tree bit_offset = bitsize_zero_node;\n+  bool seen_variable_array_ref = false;\n \n   gcc_assert (!SSA_VAR_P (exp));\n \n@@ -1004,6 +1005,11 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t\t\t    fold_convert (bitsizetype, index),\n \t\t\t\t    bitsize_unit_node);\n \t\tbit_offset = size_binop (PLUS_EXPR, bit_offset, index);\n+\n+\t\t/* An array ref with a constant index up in the structure\n+\t\t   hierarchy will constrain the size of any variable array ref\n+\t\t   lower in the access hierarchy.  */\n+\t\tseen_variable_array_ref = false;\n \t      }\n \t    else\n \t      {\n@@ -1019,6 +1025,10 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t  }\n \t\telse\n \t\t  maxsize = -1;\n+\n+\t\t/* Remember that we have seen an array ref with a variable\n+\t\t   index.  */\n+\t\tseen_variable_array_ref = true;\n \t      }\n \t  }\n \t  break;\n@@ -1043,6 +1053,21 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n     }\n  done:\n \n+  /* We need to deal with variable arrays ending structures such as\n+       struct { int length; int a[1]; } x;           x.a[d]\n+       struct { struct { int a; int b; } a[1]; } x;  x.a[d].a\n+       struct { struct { int a[1]; } a[1]; } x;      x.a[0][d], x.a[d][0]\n+     where we do not know maxsize for variable index accesses to\n+     the array.  The simplest way to conservatively deal with this\n+     is to punt in the case that offset + maxsize reaches the\n+     base type boundary.  */\n+  if (seen_variable_array_ref\n+      && maxsize != -1\n+      && host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n+      && TREE_INT_CST_LOW (bit_offset) + maxsize\n+\t == TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))))\n+    maxsize = -1;\n+\n   /* ???  Due to negative offsets in ARRAY_REF we can end up with\n      negative bit_offset here.  We might want to store a zero offset\n      in this case.  */"}]}