{"sha": "953a9d63d4c39dea0b156b044c85f584a54bb85a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzYTlkNjNkNGMzOWRlYTBiMTU2YjA0NGM4NWY1ODRhNTRiYjg1YQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-26T14:24:28Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-27T07:25:51Z"}, "message": "call_summary: move hooks to base.\n\ngcc/ChangeLog:\n\n\t* symbol-summary.h (call_summary_base): Pass symtab hooks to\n\tbase and register (or unregister) hooks directly.", "tree": {"sha": "da48b667b40f3b2a86d675b2ded4593b1e65d49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da48b667b40f3b2a86d675b2ded4593b1e65d49d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/953a9d63d4c39dea0b156b044c85f584a54bb85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953a9d63d4c39dea0b156b044c85f584a54bb85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953a9d63d4c39dea0b156b044c85f584a54bb85a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953a9d63d4c39dea0b156b044c85f584a54bb85a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251c9aea8f621afafe0632a034b4405e0d652660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251c9aea8f621afafe0632a034b4405e0d652660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251c9aea8f621afafe0632a034b4405e0d652660"}], "stats": {"total": 98, "additions": 48, "deletions": 50}, "files": [{"sha": "3944f11c78a7858c06d612ddf23049c014da8384", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 48, "deletions": 50, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953a9d63d4c39dea0b156b044c85f584a54bb85a/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953a9d63d4c39dea0b156b044c85f584a54bb85a/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=953a9d63d4c39dea0b156b044c85f584a54bb85a", "patch": "@@ -566,12 +566,17 @@ class call_summary_base\n {\n public:\n   /* Default construction takes SYMTAB as an argument.  */\n-  call_summary_base (symbol_table *symtab CXX_MEM_STAT_INFO):\n-  m_symtab (symtab),\n+  call_summary_base (symbol_table *symtab, cgraph_edge_hook symtab_removal,\n+\t\t     cgraph_2edge_hook symtab_duplication CXX_MEM_STAT_INFO):\n+  m_symtab (symtab), m_symtab_removal (symtab_removal),\n+  m_symtab_duplication (symtab_duplication), m_symtab_duplication_hook (NULL),\n   m_initialize_when_cloning (false),\n-  m_duplication_enabled (true),\n   m_allocator (\"call summary\" PASS_MEM_STAT)\n-  {}\n+  {\n+    m_symtab_removal_hook\n+      = m_symtab->add_edge_removal_hook (m_symtab_removal, this);\n+    enable_duplication_hook ();\n+  }\n \n   /* Basic implementation of removal operation.  */\n   virtual void remove (cgraph_edge *, T *) {}\n@@ -585,13 +590,20 @@ class call_summary_base\n   /* Enable duplication hook invocation.  */\n   void enable_duplication_hook ()\n   {\n-    m_duplication_enabled = true;\n+    if (m_symtab_duplication_hook == NULL)\n+      m_symtab_duplication_hook\n+\t= m_symtab->add_edge_duplication_hook (m_symtab_duplication,\n+\t\t\t\t\t       this);\n   }\n \n   /* Enable duplication hook invocation.  */\n   void disable_duplication_hook ()\n   {\n-    m_duplication_enabled = false;\n+    if (m_symtab_duplication_hook != NULL)\n+      {\n+\tm_symtab->remove_edge_duplication_hook (m_symtab_duplication_hook);\n+\tm_symtab_duplication_hook = NULL;\n+      }\n   }\n \n protected:\n@@ -619,14 +631,17 @@ class call_summary_base\n   /* Symbol table the summary is registered to.  */\n   symbol_table *m_symtab;\n \n+  /* Removal function defined by a summary.  */\n+  cgraph_edge_hook m_symtab_removal;\n+  /* Duplication function defined by a summary.  */\n+  cgraph_2edge_hook m_symtab_duplication;\n+\n   /* Internal summary removal hook pointer.  */\n   cgraph_edge_hook_list *m_symtab_removal_hook;\n   /* Internal summary duplication hook pointer.  */\n   cgraph_2edge_hook_list *m_symtab_duplication_hook;\n   /* Initialize summary for an edge that is cloned.  */\n   bool m_initialize_when_cloning;\n-  /* Indicates if duplication hook is enabled.  */\n-  bool m_duplication_enabled;\n \n private:\n   /* Return true when the summary uses GGC memory for allocation.  */\n@@ -641,7 +656,7 @@ void\n call_summary_base<T>::unregister_hooks ()\n {\n   m_symtab->remove_edge_removal_hook (m_symtab_removal_hook);\n-  m_symtab->remove_edge_duplication_hook (m_symtab_duplication_hook);\n+  disable_duplication_hook ();\n }\n \n /* An impossible class templated by non-pointers so, which makes sure that only\n@@ -663,16 +678,9 @@ class GTY((user)) call_summary <T *>: public call_summary_base<T>\n   /* Default construction takes SYMTAB as an argument.  */\n   call_summary (symbol_table *symtab, bool ggc = false\n \t\tCXX_MEM_STAT_INFO)\n-  : call_summary_base<T> (symtab PASS_MEM_STAT), m_ggc (ggc),\n-    m_map (13, ggc, true, GATHER_STATISTICS PASS_MEM_STAT)\n-  {\n-    this->m_symtab_removal_hook\n-      = this->m_symtab->add_edge_removal_hook (call_summary::symtab_removal,\n-\t\t\t\t\t       this);\n-    this->m_symtab_duplication_hook\n-      = this->m_symtab->add_edge_duplication_hook (call_summary::symtab_duplication,\n-\t\t\t\t\t\t   this);\n-  }\n+  : call_summary_base<T> (symtab, call_summary::symtab_removal,\n+\t\t\t  call_summary::symtab_duplication PASS_MEM_STAT),\n+    m_ggc (ggc), m_map (13, ggc, true, GATHER_STATISTICS PASS_MEM_STAT) {}\n \n   /* Destructor.  */\n   virtual ~call_summary ();\n@@ -777,19 +785,16 @@ call_summary<T *>::symtab_duplication (cgraph_edge *edge1,\n \t\t\t\t       cgraph_edge *edge2, void *data)\n {\n   call_summary *summary = (call_summary <T *> *) (data);\n-  if (summary->m_duplication_enabled)\n-    {\n-      T *edge1_summary = NULL;\n+  T *edge1_summary = NULL;\n \n-      if (summary->m_initialize_when_cloning)\n-\tedge1_summary = summary->get_create (edge1);\n-      else\n-\tedge1_summary = summary->get (edge1);\n+  if (summary->m_initialize_when_cloning)\n+    edge1_summary = summary->get_create (edge1);\n+  else\n+    edge1_summary = summary->get (edge1);\n \n-      if (edge1_summary)\n-\tsummary->duplicate (edge1, edge2, edge1_summary,\n-\t\t\t    summary->get_create (edge2));\n-    }\n+  if (edge1_summary)\n+    summary->duplicate (edge1, edge2, edge1_summary,\n+\t\t\tsummary->get_create (edge2));\n }\n \n template <typename T>\n@@ -833,15 +838,11 @@ class GTY((user)) fast_call_summary <T *, V>: public call_summary_base<T>\n public:\n   /* Default construction takes SYMTAB as an argument.  */\n   fast_call_summary (symbol_table *symtab CXX_MEM_STAT_INFO)\n-  : call_summary_base<T> (symtab PASS_MEM_STAT), m_vector (NULL)\n+  : call_summary_base<T> (symtab, fast_call_summary::symtab_removal,\n+\t\t\t  fast_call_summary::symtab_duplication PASS_MEM_STAT),\n+    m_vector (NULL)\n   {\n     vec_alloc (m_vector, 13 PASS_MEM_STAT);\n-    this->m_symtab_removal_hook\n-      = this->m_symtab->add_edge_removal_hook (fast_call_summary::symtab_removal,\n-\t\t\t\t\t       this);\n-    this->m_symtab_duplication_hook\n-      = this->m_symtab->add_edge_duplication_hook (fast_call_summary::symtab_duplication,\n-\t\t\t\t\t\t   this);\n   }\n \n   /* Destructor.  */\n@@ -946,20 +947,17 @@ fast_call_summary<T *, V>::symtab_duplication (cgraph_edge *edge1,\n \t\t\t\t\t\t cgraph_edge *edge2, void *data)\n {\n   fast_call_summary *summary = (fast_call_summary <T *, V> *) (data);\n-  if (summary->m_duplication_enabled)\n+  T *edge1_summary = NULL;\n+\n+  if (summary->m_initialize_when_cloning)\n+    edge1_summary = summary->get_create (edge1);\n+  else\n+    edge1_summary = summary->get (edge1);\n+\n+  if (edge1_summary)\n     {\n-      T *edge1_summary = NULL;\n-\n-      if (summary->m_initialize_when_cloning)\n-\tedge1_summary = summary->get_create (edge1);\n-      else\n-\tedge1_summary = summary->get (edge1);\n-\n-      if (edge1_summary)\n-\t{\n-\t  T *duplicate = summary->get_create (edge2);\n-\t  summary->duplicate (edge1, edge2, edge1_summary, duplicate);\n-\t}\n+      T *duplicate = summary->get_create (edge2);\n+      summary->duplicate (edge1, edge2, edge1_summary, duplicate);\n     }\n }\n "}]}