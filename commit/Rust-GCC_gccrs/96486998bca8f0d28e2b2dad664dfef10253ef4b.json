{"sha": "96486998bca8f0d28e2b2dad664dfef10253ef4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0ODY5OThiY2E4ZjBkMjhlMmIyZGFkNjY0ZGZlZjEwMjUzZWY0Yg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-04-12T14:21:39Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-04-12T14:21:39Z"}, "message": "re PR fortran/56261 ([OOP] seg fault call procedure pointer on polymorphic array)\n\n2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/56261\n\t* gfortran.h (gfc_explicit_interface_required): New prototype.\n\t* expr.c (gfc_check_pointer_assign): Check if an explicit interface is\n\trequired in a proc-ptr assignment.\n\t* interface.c (check_result_characteristics): Extra check.\n\t* resolve.c (gfc_explicit_interface_required): New function.\n\t(resolve_global_procedure): Use new function\n\t'gfc_explicit_interface_required'. Do a full interface check.\n\n\n2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/56261\n\t* gfortran.dg/auto_char_len_4.f90: Add -pedantic. Changed error.\n\t* gfortran.dg/assumed_rank_4.f90: Modified error wording.\n\t* gfortran.dg/block_11.f90: Fix invalid test case.\n\t* gfortran.dg/function_types_3.f90: Add new error message.\n\t* gfortran.dg/global_references_1.f90: Ditto.\n\t* gfortran.dg/import2.f90: Remove unneeded parts.\n\t* gfortran.dg/import6.f90: Fix invalid test case.\n\t* gfortran.dg/proc_decl_2.f90: Ditto.\n\t* gfortran.dg/proc_decl_9.f90: Ditto.\n\t* gfortran.dg/proc_decl_18.f90: Ditto.\n\t* gfortran.dg/proc_ptr_40.f90: New.\n\t* gfortran.dg/whole_file_7.f90: Modified error wording.\n\t* gfortran.dg/whole_file_16.f90: Ditto.\n\t* gfortran.dg/whole_file_17.f90: Add -pedantic.\n\t* gfortran.dg/whole_file_18.f90: Modified error wording.\n\t* gfortran.dg/whole_file_20.f03: Ditto.\n\t* gfortran.fortran-torture/execute/intrinsic_associated.f90: Fix\n\tinvalid test case.\n\nFrom-SVN: r197922", "tree": {"sha": "ecbd9ece5aa64024cdfe55e5e8194d24f92be96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecbd9ece5aa64024cdfe55e5e8194d24f92be96f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96486998bca8f0d28e2b2dad664dfef10253ef4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96486998bca8f0d28e2b2dad664dfef10253ef4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96486998bca8f0d28e2b2dad664dfef10253ef4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96486998bca8f0d28e2b2dad664dfef10253ef4b/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b83758ed976b4dc502dfd9dd0133602b718c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b83758ed976b4dc502dfd9dd0133602b718c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b83758ed976b4dc502dfd9dd0133602b718c4b"}], "stats": {"total": 446, "additions": 241, "deletions": 205}, "files": [{"sha": "e290e49fcd702bfc107b3422811f4176057a8308", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -1,3 +1,14 @@\n+2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56261\n+\t* gfortran.h (gfc_explicit_interface_required): New prototype.\n+\t* expr.c (gfc_check_pointer_assign): Check if an explicit interface is\n+\trequired in a proc-ptr assignment.\n+\t* interface.c (check_result_characteristics): Extra check.\n+\t* resolve.c (gfc_explicit_interface_required): New function.\n+\t(resolve_global_procedure): Use new function\n+\t'gfc_explicit_interface_required'. Do a full interface check.\n+\n 2013-04-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56845"}, {"sha": "829b0870a3be0ffca0d776e4d2b681f4db93d013", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -3556,6 +3556,22 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       if (s1 == s2 || !s1 || !s2)\n \treturn true;\n \n+      /* F08:7.2.2.4 (4)  */\n+      if (s1->attr.if_source == IFSRC_UNKNOWN\n+\t  && gfc_explicit_interface_required (s2, err, sizeof(err)))\n+\t{\n+\t  gfc_error (\"Explicit interface required for '%s' at %L: %s\",\n+\t\t     s1->name, &lvalue->where, err);\n+\t  return false;\n+\t}\n+      if (s2->attr.if_source == IFSRC_UNKNOWN\n+\t  && gfc_explicit_interface_required (s1, err, sizeof(err)))\n+\t{\n+\t  gfc_error (\"Explicit interface required for '%s' at %L: %s\",\n+\t\t     s2->name, &rvalue->where, err);\n+\t  return false;\n+\t}\n+\n       if (!gfc_compare_interfaces (s1, s2, name, 0, 1,\n \t\t\t\t   err, sizeof(err), NULL, NULL))\n \t{"}, {"sha": "a69cea2b3490a5031cd23e208359a7752dd2b829", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -2843,6 +2843,7 @@ match gfc_iso_c_sub_interface(gfc_code *, gfc_symbol *);\n gfc_expr *gfc_expr_to_initialize (gfc_expr *);\n bool gfc_type_is_extensible (gfc_symbol *);\n bool gfc_resolve_intrinsic (gfc_symbol *, locus *);\n+bool gfc_explicit_interface_required (gfc_symbol *, char *, int);\n \n \n /* array.c */"}, {"sha": "741416469f47f68a5cfa289431cbb5a6a089cd67", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -1239,7 +1239,7 @@ check_result_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \t  return false;\n \t}\n \n-      if (r1->ts.u.cl->length)\n+      if (r1->ts.u.cl->length && r2->ts.u.cl->length)\n \t{\n \t  int compval = gfc_dep_compare_expr (r1->ts.u.cl->length,\n \t\t\t\t\t      r2->ts.u.cl->length);"}, {"sha": "30cfcd090588228f40503889f86ab341f030bb48", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 143, "deletions": 149, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -2118,13 +2118,134 @@ not_entry_self_reference  (gfc_symbol *sym, gfc_namespace *gsym_ns)\n   return true;\n }\n \n+\n+/* Check for the requirement of an explicit interface. F08:12.4.2.2.  */\n+\n+bool\n+gfc_explicit_interface_required (gfc_symbol *sym, char *errmsg, int err_len)\n+{\n+  gfc_formal_arglist *arg = gfc_sym_get_dummy_args (sym);\n+\n+  for ( ; arg; arg = arg->next)\n+    {\n+      if (!arg->sym)\n+\tcontinue;\n+\n+      if (arg->sym->attr.allocatable)  /* (2a)  */\n+\t{\n+\t  strncpy (errmsg, _(\"allocatable argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->attr.asynchronous)\n+\t{\n+\t  strncpy (errmsg, _(\"asynchronous argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->attr.optional)\n+\t{\n+\t  strncpy (errmsg, _(\"optional argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->attr.pointer)\n+\t{\n+\t  strncpy (errmsg, _(\"pointer argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->attr.target)\n+\t{\n+\t  strncpy (errmsg, _(\"target argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->attr.value)\n+\t{\n+\t  strncpy (errmsg, _(\"value argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->attr.volatile_)\n+\t{\n+\t  strncpy (errmsg, _(\"volatile argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->as && arg->sym->as->type == AS_ASSUMED_SHAPE)  /* (2b)  */\n+\t{\n+\t  strncpy (errmsg, _(\"assumed-shape argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->as && arg->sym->as->type == AS_ASSUMED_RANK)  /* TS 29113, 6.2.  */\n+\t{\n+\t  strncpy (errmsg, _(\"assumed-rank argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->attr.codimension)  /* (2c)  */\n+\t{\n+\t  strncpy (errmsg, _(\"coarray argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (false)  /* (2d) TODO: parametrized derived type  */\n+\t{\n+\t  strncpy (errmsg, _(\"parametrized derived type argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->ts.type == BT_CLASS)  /* (2e)  */\n+\t{\n+\t  strncpy (errmsg, _(\"polymorphic argument\"), err_len);\n+\t  return true;\n+\t}\n+      else if (arg->sym->ts.type == BT_ASSUMED)\n+\t{\n+\t  /* As assumed-type is unlimited polymorphic (cf. above).\n+\t     See also TS 29113, Note 6.1.  */\n+\t  strncpy (errmsg, _(\"assumed-type argument\"), err_len);\n+\t  return true;\n+\t}\n+    }\n+\n+  if (sym->attr.function)\n+    {\n+      gfc_symbol *res = sym->result ? sym->result : sym;\n+\n+      if (res->attr.dimension)  /* (3a)  */\n+\t{\n+\t  strncpy (errmsg, _(\"array result\"), err_len);\n+\t  return true;\n+\t}\n+      else if (res->attr.pointer || res->attr.allocatable)  /* (3b)  */\n+\t{\n+\t  strncpy (errmsg, _(\"pointer or allocatable result\"), err_len);\n+\t  return true;\n+\t}\n+      else if (res->ts.type == BT_CHARACTER && res->ts.u.cl\n+\t       && res->ts.u.cl->length\n+\t       && res->ts.u.cl->length->expr_type != EXPR_CONSTANT)  /* (3c)  */\n+\t{\n+\t  strncpy (errmsg, _(\"result with non-constant character length\"), err_len);\n+\t  return true;\n+\t}\n+    }\n+\n+  if (sym->attr.elemental)  /* (4)  */\n+    {\n+      strncpy (errmsg, _(\"elemental procedure\"), err_len);\n+      return true;\n+    }\n+  else if (sym->attr.is_bind_c)  /* (5)  */\n+    {\n+      strncpy (errmsg, _(\"bind(c) procedure\"), err_len);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+\n static void\n resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t\t\t  gfc_actual_arglist **actual, int sub)\n {\n   gfc_gsymbol * gsym;\n   gfc_namespace *ns;\n   enum gfc_symbol_type type;\n+  char reason[200];\n \n   type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n \n@@ -2195,160 +2316,32 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t      }\n \t}\n \n-      /* Differences in constant character lengths.  */\n-      if (sym->attr.function && sym->ts.type == BT_CHARACTER)\n+      if (sym->attr.function && !gfc_compare_types (&sym->ts, &def_sym->ts))\n \t{\n-\t  long int l1 = 0, l2 = 0;\n-\t  gfc_charlen *cl1 = sym->ts.u.cl;\n-\t  gfc_charlen *cl2 = def_sym->ts.u.cl;\n-\n-\t  if (cl1 != NULL\n-\t      && cl1->length != NULL\n-\t      && cl1->length->expr_type == EXPR_CONSTANT)\n-\t    l1 = mpz_get_si (cl1->length->value.integer);\n-\n-  \t  if (cl2 != NULL\n-\t      && cl2->length != NULL\n-\t      && cl2->length->expr_type == EXPR_CONSTANT)\n-\t    l2 = mpz_get_si (cl2->length->value.integer);\n-\n-\t  if (l1 && l2 && l1 != l2)\n-\t    gfc_error (\"Character length mismatch in return type of \"\n-\t\t       \"function '%s' at %L (%ld/%ld)\", sym->name,\n-\t\t       &sym->declared_at, l1, l2);\n+\t  gfc_error (\"Return type mismatch of function '%s' at %L (%s/%s)\",\n+\t\t     sym->name, &sym->declared_at, gfc_typename (&sym->ts),\n+\t\t     gfc_typename (&def_sym->ts));\n+\t  goto done;\n \t}\n \n-     /* Type mismatch of function return type and expected type.  */\n-     if (sym->attr.function\n-\t && !gfc_compare_types (&sym->ts, &def_sym->ts))\n-\tgfc_error (\"Return type mismatch of function '%s' at %L (%s/%s)\",\n-\t\t   sym->name, &sym->declared_at, gfc_typename (&sym->ts),\n-\t\t   gfc_typename (&def_sym->ts));\n-\n-      if (def_sym->formal && sym->attr.if_source != IFSRC_IFBODY)\n+      if (sym->attr.if_source == IFSRC_UNKNOWN\n+\t  && gfc_explicit_interface_required (def_sym, reason, sizeof(reason)))\n \t{\n-\t  gfc_formal_arglist *arg = def_sym->formal;\n-\t  for ( ; arg; arg = arg->next)\n-\t    if (!arg->sym)\n-\t      continue;\n-\t    /* F2003, 12.3.1.1 (2a); F2008, 12.4.2.2 (2a)  */\n-\t    else if (arg->sym->attr.allocatable\n-\t\t     || arg->sym->attr.asynchronous\n-\t\t     || arg->sym->attr.optional\n-\t\t     || arg->sym->attr.pointer\n-\t\t     || arg->sym->attr.target\n-\t\t     || arg->sym->attr.value\n-\t\t     || arg->sym->attr.volatile_)\n-\t      {\n-\t\tgfc_error (\"Dummy argument '%s' of procedure '%s' at %L \"\n-\t\t\t   \"has an attribute that requires an explicit \"\n-\t\t\t   \"interface for this procedure\", arg->sym->name,\n-\t\t\t   sym->name, &sym->declared_at);\n-\t\tbreak;\n-\t      }\n-\t    /* F2003, 12.3.1.1 (2b); F2008, 12.4.2.2 (2b)  */\n-\t    else if (arg->sym && arg->sym->as\n-\t\t     && arg->sym->as->type == AS_ASSUMED_SHAPE)\n-\t      {\n-\t\tgfc_error (\"Procedure '%s' at %L with assumed-shape dummy \"\n-\t\t\t   \"argument '%s' must have an explicit interface\",\n-\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n-\t\tbreak;\n-\t      }\n-\t    /* TS 29113, 6.2.  */\n-\t    else if (arg->sym && arg->sym->as\n-\t\t     && arg->sym->as->type == AS_ASSUMED_RANK)\n-\t      {\n-\t\tgfc_error (\"Procedure '%s' at %L with assumed-rank dummy \"\n-\t\t\t   \"argument '%s' must have an explicit interface\",\n-\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n-\t\tbreak;\n-\t      }\n-\t    /* F2008, 12.4.2.2 (2c)  */\n-\t    else if (arg->sym->attr.codimension)\n-\t      {\n-\t\tgfc_error (\"Procedure '%s' at %L with coarray dummy argument \"\n-\t\t\t   \"'%s' must have an explicit interface\",\n-\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n-\t\tbreak;\n-\t      }\n-\t    /* F2003, 12.3.1.1 (2c); F2008, 12.4.2.2 (2d)   */\n-\t    else if (false) /* TODO: is a parametrized derived type  */\n-\t      {\n-\t\tgfc_error (\"Procedure '%s' at %L with parametrized derived \"\n-\t\t\t   \"type argument '%s' must have an explicit \"\n-\t\t\t   \"interface\", sym->name, &sym->declared_at,\n-\t\t\t   arg->sym->name);\n-\t\tbreak;\n-\t      }\n-\t    /* F2003, 12.3.1.1 (2d); F2008, 12.4.2.2 (2e)   */\n-\t    else if (arg->sym->ts.type == BT_CLASS)\n-\t      {\n-\t\tgfc_error (\"Procedure '%s' at %L with polymorphic dummy \"\n-\t\t\t   \"argument '%s' must have an explicit interface\",\n-\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n-\t\tbreak;\n-\t      }\n-\t    /* As assumed-type is unlimited polymorphic (cf. above).\n-\t       See also  TS 29113, Note 6.1.  */\n-\t    else if (arg->sym->ts.type == BT_ASSUMED)\n-\t      {\n-\t\tgfc_error (\"Procedure '%s' at %L with assumed-type dummy \"\n-\t\t\t   \"argument '%s' must have an explicit interface\",\n-\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n-\t\tbreak;\n-\t      }\n-\t}\n-\n-      if (def_sym->attr.function)\n-\t{\n-\t  /* F2003, 12.3.1.1 (3a); F2008, 12.4.2.2 (3a) */\n-\t  if (def_sym->as && def_sym->as->rank\n-\t      && (!sym->as || sym->as->rank != def_sym->as->rank))\n-\t    gfc_error (\"The reference to function '%s' at %L either needs an \"\n-\t\t       \"explicit INTERFACE or the rank is incorrect\", sym->name,\n-\t\t       where);\n-\n-\t  /* F2003, 12.3.1.1 (3b); F2008, 12.4.2.2 (3b) */\n-\t  if ((def_sym->result->attr.pointer\n-\t       || def_sym->result->attr.allocatable)\n-\t       && (sym->attr.if_source != IFSRC_IFBODY\n-\t\t   || def_sym->result->attr.pointer\n-\t\t\t!= sym->result->attr.pointer\n-\t\t   || def_sym->result->attr.allocatable\n-\t\t\t!= sym->result->attr.allocatable))\n-\t    gfc_error (\"Function '%s' at %L with a POINTER or ALLOCATABLE \"\n-\t\t       \"result must have an explicit interface\", sym->name,\n-\t\t       where);\n-\n-\t  /* F2003, 12.3.1.1 (3c); F2008, 12.4.2.2 (3c)  */\n-\t  if (sym->ts.type == BT_CHARACTER && sym->attr.if_source != IFSRC_IFBODY\n-\t      && def_sym->ts.type == BT_CHARACTER && def_sym->ts.u.cl->length != NULL)\n-\t    {\n-\t      gfc_charlen *cl = sym->ts.u.cl;\n-\n-\t      if (!sym->attr.entry_master && sym->attr.if_source == IFSRC_UNKNOWN\n-\t\t  && cl && cl->length && cl->length->expr_type != EXPR_CONSTANT)\n-\t\t{\n-\t\t  gfc_error (\"Nonconstant character-length function '%s' at %L \"\n-\t\t\t     \"must have an explicit interface\", sym->name,\n-\t\t\t     &sym->declared_at);\n-\t\t}\n-\t    }\n+\t  gfc_error (\"Explicit interface required for '%s' at %L: %s\",\n+\t\t     sym->name, &sym->declared_at, reason);\n+\t  goto done;\n \t}\n \n-      /* F2003, 12.3.1.1 (4); F2008, 12.4.2.2 (4) */\n-      if (def_sym->attr.elemental && !sym->attr.elemental)\n-\t{\n-\t  gfc_error (\"ELEMENTAL procedure '%s' at %L must have an explicit \"\n-\t\t     \"interface\", sym->name, &sym->declared_at);\n-\t}\n+      if (!pedantic && (gfc_option.allow_std & GFC_STD_GNU))\n+\t/* Turn erros into warnings with -std=gnu and -std=legacy.  */\n+\tgfc_errors_to_warnings (1);\n \n-      /* F2003, 12.3.1.1 (5); F2008, 12.4.2.2 (5) */\n-      if (def_sym->attr.is_bind_c && !sym->attr.is_bind_c)\n-\t{\n-\t  gfc_error (\"Procedure '%s' at %L with BIND(C) attribute must have \"\n-\t\t     \"an explicit interface\", sym->name, &sym->declared_at);\n+      if (!gfc_compare_interfaces (sym, def_sym, sym->name, 0, 1,\n+\t\t\t\t   reason, sizeof(reason), NULL, NULL))\n+\t{\t\n+\t  gfc_error (\"Interface mismatch in global procedure '%s' at %L: %s \",\n+\t\t    sym->name, &sym->declared_at, reason);\n+\t  goto done;\n \t}\n \n       if (!pedantic\n@@ -2358,9 +2351,10 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \n       if (sym->attr.if_source != IFSRC_IFBODY)\n \tgfc_procedure_use (def_sym, actual, where);\n-\n-      gfc_errors_to_warnings (0);\n     }\n+    \n+done:\n+  gfc_errors_to_warnings (0);\n \n   if (gsym->type == GSYM_UNKNOWN)\n     {"}, {"sha": "29a624e080b2e3f1552ba41829f45658008cd2b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -1,3 +1,25 @@\n+2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56261\n+\t* gfortran.dg/auto_char_len_4.f90: Add -pedantic. Changed error.\n+\t* gfortran.dg/assumed_rank_4.f90: Modified error wording.\n+\t* gfortran.dg/block_11.f90: Fix invalid test case.\n+\t* gfortran.dg/function_types_3.f90: Add new error message.\n+\t* gfortran.dg/global_references_1.f90: Ditto.\n+\t* gfortran.dg/import2.f90: Remove unneeded parts.\n+\t* gfortran.dg/import6.f90: Fix invalid test case.\n+\t* gfortran.dg/proc_decl_2.f90: Ditto.\n+\t* gfortran.dg/proc_decl_9.f90: Ditto.\n+\t* gfortran.dg/proc_decl_18.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_40.f90: New.\n+\t* gfortran.dg/whole_file_7.f90: Modified error wording.\n+\t* gfortran.dg/whole_file_16.f90: Ditto.\n+\t* gfortran.dg/whole_file_17.f90: Add -pedantic.\n+\t* gfortran.dg/whole_file_18.f90: Modified error wording.\n+\t* gfortran.dg/whole_file_20.f03: Ditto.\n+\t* gfortran.fortran-torture/execute/intrinsic_associated.f90: Fix\n+\tinvalid test case.\n+\n 2013-04-12  Richard Biener  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "756ab2245c5d3d04efa98d1ddd766b6e180a9df6", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_4.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_4.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -20,8 +20,8 @@ end subroutine valid2\n \n subroutine foo99(x)\n   integer  x(99)\n-  call valid1(x) ! { dg-error \"Procedure 'valid1' at .1. with assumed-rank dummy argument 'x' must have an explicit interface\" }\n-  call valid2(x(1)) ! { dg-error \"Procedure 'valid2' at .1. with assumed-type dummy argument 'x' must have an explicit interface\" }\n+  call valid1(x) ! { dg-error \"Explicit interface required\" }\n+  call valid2(x(1)) ! { dg-error \"Explicit interface required\" }\n end subroutine foo99\n \n subroutine foo(x)"}, {"sha": "72ee8450dc75af0aee7219c3e7e16d0bca454afc", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_4.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n+! { dg-options \"-pedantic -fwhole-file\" }\n !\n ! Tests the fix for PR25087, in which the following invalid code\n ! was not detected.\n@@ -14,8 +14,8 @@ FUNCTION a()\n END FUNCTION a\n \n SUBROUTINE s(n)\n-  CHARACTER(LEN=n), EXTERNAL :: a ! { dg-error \"must have an explicit interface\" }\n-  CHARACTER(LEN=n), EXTERNAL :: d ! { dg-error \"must have an explicit interface\" }\n+  CHARACTER(LEN=n), EXTERNAL :: a  ! { dg-error \"Character length mismatch\" }\n+  CHARACTER(LEN=n), EXTERNAL :: d  ! { dg-error \"Character length mismatch\" }\n   interface\n     function b (m)                ! This is OK\n       CHARACTER(LEN=m) :: b"}, {"sha": "6fe244d91e8b36281686f2de5d58b06a54cb32cf", "filename": "gcc/testsuite/gfortran.dg/block_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_11.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -50,7 +50,7 @@ module m3\n   implicit none\n contains\n   subroutine my_test()\n-    procedure(), pointer :: ptr\n+    procedure(sub), pointer :: ptr\n     ! Before the fix, one had the link error\n     ! \"undefined reference to `sub.1909'\"\n     block"}, {"sha": "e83472514417fe52cc6d46a6e87a8a9a83e9a7dc", "filename": "gcc/testsuite/gfortran.dg/function_types_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_types_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_types_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_types_3.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -5,7 +5,7 @@\n ! PR 50401: SIGSEGV in resolve_transfer\n \n   interface \n-    function f()      ! { dg-error \"must be a dummy argument\" }\n+    function f()      ! { dg-error \"must be a dummy argument|Interface mismatch in global procedure\" }\n       dimension f(*)\n     end function\n   end interface"}, {"sha": "cfff8b32c0bd414f40b3842eff5001fb0f5b1636", "filename": "gcc/testsuite/gfortran.dg/global_references_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -23,7 +23,7 @@ function g(x)       ! Global entity\n ! Function 'f' cannot be referenced as a subroutine. The previous\n ! definition is in 'line 12'.\n \n-  call f(g) ! { dg-error \"is already being used as a FUNCTION\" }\n+  call f(g) ! { dg-error \"is already being used as a FUNCTION|Interface mismatch in global procedure\" }\n end function g\n ! Error only appears once but testsuite associates with both lines.\n function h(x)       ! { dg-error \"is already being used as a FUNCTION\" }\n@@ -59,7 +59,7 @@ END SUBROUTINE TT\n ! Function 'h' cannot be referenced as a subroutine. The previous\n ! definition is in 'line 29'.\n \n-  call h (x) ! { dg-error \"is already being used as a FUNCTION\" }\n+  call h (x) ! { dg-error \"is already being used as a FUNCTION|Interface mismatch in global procedure\" }\n \n ! PR23308===========================================================\n ! Lahey - 2521-S: \"SOURCE.F90\", line 68: Intrinsic procedure name or"}, {"sha": "76c87d617dd8d8f0caac3a75ae563f4c62ed6801", "filename": "gcc/testsuite/gfortran.dg/import2.f90", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -4,30 +4,6 @@\n ! Test whether import does not work with -std=f95\n ! PR fortran/29601\n \n-subroutine test(x)\n-  type myType3\n-    sequence\n-    integer :: i\n-  end type myType3\n-  type(myType3) :: x\n-  if(x%i /= 7) call abort()\n-  x%i = 1\n-end subroutine test\n-\n-\n-subroutine bar(x,y)\n-  type myType\n-    sequence\n-    integer :: i\n-  end type myType\n-  type(myType) :: x\n-  integer(8) :: y\n-  if(y /= 8) call abort()\n-  if(x%i /= 2) call abort()\n-  x%i = 5\n-  y   = 42\n-end subroutine bar\n-\n module testmod\n   implicit none\n   integer, parameter :: kind = 8\n@@ -66,14 +42,4 @@ subroutine test(x)\n     end subroutine test\n   end interface\n \n-  type(myType) :: y\n-  type(myType3) :: z\n-  integer(dp) :: i8\n-  y%i = 2\n-  i8 = 8\n-  call bar(y,i8) ! { dg-error \"Type mismatch in argument\" }\n-  if(y%i /= 5 .or. i8/= 42) call abort()\n-  z%i = 7\n-  call test(z) ! { dg-error \"Type mismatch in argument\" }\n-  if(z%i /= 1) call abort()\n end program foo"}, {"sha": "d57a6368b746794943a8685d9adf4749483684a0", "filename": "gcc/testsuite/gfortran.dg/import6.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport6.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -7,6 +7,7 @@\n !\r\n subroutine func1(param)\r\n   type :: my_type\r\n+    sequence\r\n     integer :: data\r\n   end type my_type\r\n   type(my_type) :: param\r\n@@ -15,13 +16,15 @@ end subroutine func1\n \r\n subroutine func2(param)\r\n   type :: my_type\r\n+    sequence\r\n     integer :: data\r\n   end type my_type\r\n   type(my_type) :: param\r\n   param%data = 21\r\n end subroutine func2\r\n \r\n   type :: my_type\r\n+    sequence\r\n     integer :: data\r\n   end type my_type\r\n \r"}, {"sha": "c4216135106b90fe1fbf50d4cc76c01ff5e8914c", "filename": "gcc/testsuite/gfortran.dg/proc_decl_18.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_18.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -23,7 +23,7 @@ program prog\n \n abstract interface\n   function abs_fun(x,sz)\n-    integer :: x(:)\n+    integer,intent(in) :: x(:)\n     interface\n       pure integer function sz(b)\n         integer,intent(in) :: b(:)"}, {"sha": "97e06148e274e5ebdb80d4bb318bb629bc552ab2", "filename": "gcc/testsuite/gfortran.dg/proc_decl_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_2.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -124,20 +124,20 @@ integer function p2(x)\n end function\n \n subroutine p3(x)\n-  real,intent(inout):: x\n+  real :: x\n   x=x+1.0\n end subroutine\n \n subroutine p4(x)\n-  real,intent(inout):: x\n+  real :: x\n   x=x-1.5\n end subroutine\n \n subroutine p5()\n end subroutine\n \n subroutine p6(x)\n-  real,intent(inout):: x\n+  real :: x\n   x=x*2.\n end subroutine\n "}, {"sha": "58ae321899e7f80a2f25227518df289c69767d4a", "filename": "gcc/testsuite/gfortran.dg/proc_decl_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_9.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -2,7 +2,7 @@\n ! PR33162 INTRINSIC functions as ACTUAL argument\n ! Test case adapted from PR by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n real function t(x)\n-  real ::x\n+  real, intent(in) ::x\n   t = x\n end function\n "}, {"sha": "dae91df1c3c85352c387e42a80b020b1bb776fb3", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_40.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_40.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_40.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_40.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! PR 56261: [OOP] seg fault call procedure pointer on polymorphic array\n+!\n+! Contributed by Andrew Benson <abensonca@gmail.com>\n+\n+  implicit none\n+  type :: nc\n+  end type\n+  external :: qq\n+  procedure(  ), pointer :: f1\n+  procedure(ff), pointer :: f2\n+  \n+  f1 => ff  ! { dg-error \"Explicit interface required\" }\n+  f2 => qq  ! { dg-error \"Explicit interface required\" }\n+\n+contains\n+\n+  subroutine ff (self)\n+    class(nc) :: self\n+  end subroutine\n+\n+end"}, {"sha": "6c910f47a2cda165b157662c90e8cb38b8de23d0", "filename": "gcc/testsuite/gfortran.dg/whole_file_16.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -5,7 +5,7 @@\n !\n program main\n   real, dimension(2) :: a\n-  call foo(a)                ! { dg-error \"must have an explicit interface\" }\n+  call foo(a)                ! { dg-error \"Explicit interface required\" }\n end program main\n \n subroutine foo(a)"}, {"sha": "a2a9d15151194208ac235d47e78f28a26e1a156a", "filename": "gcc/testsuite/gfortran.dg/whole_file_17.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n+! { dg-options \"-pedantic -fwhole-file\" }\n !\n ! PR fortran/30668\n !"}, {"sha": "c483c7da100c120688dc42fda54be2bdcbc5092d", "filename": "gcc/testsuite/gfortran.dg/whole_file_18.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -5,7 +5,7 @@\n !\n       PROGRAM MAIN\n       REAL A\n-      CALL SUB(A)             ! { dg-error \"requires an explicit interface\" }\n+      CALL SUB(A)             ! { dg-error \"Explicit interface required\" }\n       END PROGRAM\n \n       SUBROUTINE SUB(A,I)"}, {"sha": "b3f77e4610535876fcf0d00955839bd7de18d61f", "filename": "gcc/testsuite/gfortran.dg/whole_file_20.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -17,8 +17,8 @@ PROGRAM main\n \n   INTEGER :: coarr[*]\n \n-  CALL coarray(coarr)         ! { dg-error \" must have an explicit interface\" }\n-  CALL polymorph(tt)          ! { dg-error \" must have an explicit interface\" }\n+  CALL coarray(coarr)         ! { dg-error \"Explicit interface required\" }\n+  CALL polymorph(tt)          ! { dg-error \"Explicit interface required\" }\n END PROGRAM\n \n SUBROUTINE coarray(a)"}, {"sha": "3225304397c54775718c241e550c300275fa02b2", "filename": "gcc/testsuite/gfortran.dg/whole_file_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_7.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -29,6 +29,6 @@ end function test\n \n program arr     ! The error was not picked up causing an ICE\n   real, dimension(2) :: res\n-  res = test(2) ! { dg-error \"needs an explicit INTERFACE\" }\n+  res = test(2) ! { dg-error \"Explicit interface required\" }\n   print *, res\n end program"}, {"sha": "22ea6f0a62a80f01127d3ad0d2f10e8eb30ea054", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_associated.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_associated.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96486998bca8f0d28e2b2dad664dfef10253ef4b/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_associated.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_associated.f90?ref=96486998bca8f0d28e2b2dad664dfef10253ef4b", "patch": "@@ -121,7 +121,7 @@ subroutine associated_2 ()\n    interface\n       subroutine sub1 (a, ap)\n          integer, pointer :: ap(:, :)\n-         integer, target  :: a(10, 1)\n+         integer, target  :: a(10, 10)\n       end\n    endinterface\n "}]}