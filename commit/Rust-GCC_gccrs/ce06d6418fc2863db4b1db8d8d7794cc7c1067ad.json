{"sha": "ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UwNmQ2NDE4ZmMyODYzZGI0YjFkYjhkOGQ3Nzk0Y2M3YzEwNjdhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T10:31:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T10:31:58Z"}, "message": "[multiple changes]\n\n2017-01-20  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch10.adb (Check_No_Elab_Code_All): Do not issue an error\n\ton implicitly with'ed units in GNATprove mode.\n\t* sinfo.ads (Implicit_With): Document use of flag for implicitly\n\twith'ed units in GNATprove mode.\n\n2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_cat.adb (Validate_Static_Object_Name): In a preelaborated\n\tunit Do not report an error on a non-static entity that appears\n\tin the context of a spec expression, such as an aspect expression.\n\n2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb: Flag298 now denotes Is_Underlying_Full_View.\n\t(Is_Underlying_Full_View): New routine.\n\t(Set_Is_Underlying_Full_View): New routine.\n\t(Write_Entity_Flags): Add an entry for Is_Underlying_Full_View.\n\t* einfo.ads Add new attribute Is_Underlying_Full_View.\n\t(Is_Underlying_Full_View): New routine along with pragma Inline.\n\t(Set_Is_Underlying_Full_View): New routine along with pragma Inline.\n\t* exp_util.adb (Build_DIC_Procedure_Body): Do not consider\n\tclass-wide types and underlying full views. The first subtype\n\tis used as the working type for all Itypes, not just array base types.\n\t(Build_DIC_Procedure_Declaration): Do not consider\n\tclass-wide types and underlying full views. The first subtype\n\tis used as the working type for all Itypes, not just array\n\tbase types.\n\t* freeze.adb (Freeze_Entity): Inherit the freeze node of a full\n\tview or an underlying full view without clobbering the attributes\n\tof a previous freeze node.\n\t(Inherit_Freeze_Node): New routine.\n\t* sem_ch3.adb (Build_Derived_Private_Type): Mark an underlying\n\tfull view as such.\n\t(Build_Underlying_Full_View): Mark an underlying full view as such.\n\t* sem_ch7.adb (Install_Private_Declarations): Mark an underlying\n\tfull view as such.\n\nFrom-SVN: r244696", "tree": {"sha": "58aa47cb3ea0c8127bb0ef149edc2909c0aa92f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58aa47cb3ea0c8127bb0ef149edc2909c0aa92f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/comments", "author": null, "committer": null, "parents": [{"sha": "17d302ec0331fe0d24351682da9b709b8d936504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d302ec0331fe0d24351682da9b709b8d936504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d302ec0331fe0d24351682da9b709b8d936504"}], "stats": {"total": 219, "additions": 188, "deletions": 31}, "files": [{"sha": "428648aa8627122dc799e3e0cac8e784bd8bb69f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -1,3 +1,42 @@\n+2017-01-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch10.adb (Check_No_Elab_Code_All): Do not issue an error\n+\ton implicitly with'ed units in GNATprove mode.\n+\t* sinfo.ads (Implicit_With): Document use of flag for implicitly\n+\twith'ed units in GNATprove mode.\n+\n+2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_cat.adb (Validate_Static_Object_Name): In a preelaborated\n+\tunit Do not report an error on a non-static entity that appears\n+\tin the context of a spec expression, such as an aspect expression.\n+\n+2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb: Flag298 now denotes Is_Underlying_Full_View.\n+\t(Is_Underlying_Full_View): New routine.\n+\t(Set_Is_Underlying_Full_View): New routine.\n+\t(Write_Entity_Flags): Add an entry for Is_Underlying_Full_View.\n+\t* einfo.ads Add new attribute Is_Underlying_Full_View.\n+\t(Is_Underlying_Full_View): New routine along with pragma Inline.\n+\t(Set_Is_Underlying_Full_View): New routine along with pragma Inline.\n+\t* exp_util.adb (Build_DIC_Procedure_Body): Do not consider\n+\tclass-wide types and underlying full views. The first subtype\n+\tis used as the working type for all Itypes, not just array base types.\n+\t(Build_DIC_Procedure_Declaration): Do not consider\n+\tclass-wide types and underlying full views. The first subtype\n+\tis used as the working type for all Itypes, not just array\n+\tbase types.\n+\t* freeze.adb (Freeze_Entity): Inherit the freeze node of a full\n+\tview or an underlying full view without clobbering the attributes\n+\tof a previous freeze node.\n+\t(Inherit_Freeze_Node): New routine.\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Mark an underlying\n+\tfull view as such.\n+\t(Build_Underlying_Full_View): Mark an underlying full view as such.\n+\t* sem_ch7.adb (Install_Private_Declarations): Mark an underlying\n+\tfull view as such.\n+\n 2017-01-20  Yannick Moy  <moy@adacore.com>\n \n \t* sinfo.ads: Document lack of Do_Division_Check flag"}, {"sha": "e97d1478bb254fc07ba27c4d194a61c0c8148c64", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -614,8 +614,8 @@ package body Einfo is\n    --    Is_Ignored_Transient            Flag295\n    --    Has_Partial_Visible_Refinement  Flag296\n    --    Is_Entry_Wrapper                Flag297\n+   --    Is_Underlying_Full_View         Flag298\n \n-   --    (unused)                        Flag298\n    --    (unused)                        Flag299\n    --    (unused)                        Flag300\n \n@@ -2612,6 +2612,11 @@ package body Einfo is\n       return Flag117 (Implementation_Base_Type (Id));\n    end Is_Unchecked_Union;\n \n+   function Is_Underlying_Full_View (Id : E) return B is\n+   begin\n+      return Flag298 (Id);\n+   end Is_Underlying_Full_View;\n+\n    function Is_Underlying_Record_View (Id : E) return B is\n    begin\n       return Flag246 (Id);\n@@ -5709,6 +5714,12 @@ package body Einfo is\n       Set_Flag117 (Id, V);\n    end Set_Is_Unchecked_Union;\n \n+   procedure Set_Is_Underlying_Full_View (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      Set_Flag298 (Id, V);\n+   end Set_Is_Underlying_Full_View;\n+\n    procedure Set_Is_Underlying_Record_View (Id : E; V : B := True) is\n    begin\n       pragma Assert (Ekind (Id) = E_Record_Type);\n@@ -9457,6 +9468,7 @@ package body Einfo is\n       W (\"Is_Trivial_Subprogram\",           Flag235 (Id));\n       W (\"Is_True_Constant\",                Flag163 (Id));\n       W (\"Is_Unchecked_Union\",              Flag117 (Id));\n+      W (\"Is_Underlying_Full_View\",         Flag298 (Id));\n       W (\"Is_Underlying_Record_View\",       Flag246 (Id));\n       W (\"Is_Unimplemented\",                Flag284 (Id));\n       W (\"Is_Unsigned_Type\",                Flag144 (Id));"}, {"sha": "5a762abcaeed4fffc14452baeed2b2b35a55d3df", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -3236,6 +3236,11 @@ package Einfo is\n --       Defined in all entities. Set only in record types to which the\n --       pragma Unchecked_Union has been validly applied.\n \n+--    Is_Underlying_Full_View (Flag298)\n+--       Defined in all entities. Set for types which represent the true full\n+--       view of a private type completed by another private type. For further\n+--       details, see attribute Underlying_Full_View.\n+\n --    Is_Underlying_Record_View (Flag246) [base type only]\n --       Defined in all entities. Set only in record types that represent the\n --       underlying record view. This view is built for derivations of types\n@@ -7183,6 +7188,7 @@ package Einfo is\n    function Is_Trivial_Subprogram               (Id : E) return B;\n    function Is_True_Constant                    (Id : E) return B;\n    function Is_Unchecked_Union                  (Id : E) return B;\n+   function Is_Underlying_Full_View             (Id : E) return B;\n    function Is_Underlying_Record_View           (Id : E) return B;\n    function Is_Unimplemented                    (Id : E) return B;\n    function Is_Unsigned_Type                    (Id : E) return B;\n@@ -7868,6 +7874,7 @@ package Einfo is\n    procedure Set_Is_Trivial_Subprogram           (Id : E; V : B := True);\n    procedure Set_Is_True_Constant                (Id : E; V : B := True);\n    procedure Set_Is_Unchecked_Union              (Id : E; V : B := True);\n+   procedure Set_Is_Underlying_Full_View         (Id : E; V : B := True);\n    procedure Set_Is_Underlying_Record_View       (Id : E; V : B := True);\n    procedure Set_Is_Unimplemented                (Id : E; V : B := True);\n    procedure Set_Is_Unsigned_Type                (Id : E; V : B := True);\n@@ -8705,6 +8712,7 @@ package Einfo is\n    pragma Inline (Is_True_Constant);\n    pragma Inline (Is_Type);\n    pragma Inline (Is_Unchecked_Union);\n+   pragma Inline (Is_Underlying_Full_View);\n    pragma Inline (Is_Underlying_Record_View);\n    pragma Inline (Is_Unimplemented);\n    pragma Inline (Is_Unsigned_Type);\n@@ -9180,6 +9188,7 @@ package Einfo is\n    pragma Inline (Set_Is_Trivial_Subprogram);\n    pragma Inline (Set_Is_True_Constant);\n    pragma Inline (Set_Is_Unchecked_Union);\n+   pragma Inline (Set_Is_Underlying_Full_View);\n    pragma Inline (Set_Is_Underlying_Record_View);\n    pragma Inline (Set_Is_Unimplemented);\n    pragma Inline (Set_Is_Unsigned_Type);"}, {"sha": "1cbffd1a96c46f1a8169a3db52d2369235069ae3", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -1736,13 +1736,24 @@ package body Exp_Util is\n    --  Start of processing for Build_DIC_Procedure_Body\n \n    begin\n-      Work_Typ := Typ;\n+      Work_Typ := Base_Type (Typ);\n \n-      --  The input type denotes the implementation base type of a constrained\n-      --  array type. Work with the first subtype as the DIC pragma is on its\n-      --  rep item chain.\n+      --  Do not process class-wide types as these are Itypes, but lack a first\n+      --  subtype (see below).\n \n-      if Ekind (Work_Typ) = E_Array_Type and then Is_Itype (Work_Typ) then\n+      if Is_Class_Wide_Type (Work_Typ) then\n+         return;\n+\n+      --  Do not process the underlying full view of a private type. There is\n+      --  no way to get back to the partial view, plus the body will be built\n+      --  by the full view or the base type.\n+\n+      elsif Is_Underlying_Full_View (Work_Typ) then\n+         return;\n+\n+      --  Use the first subtype when dealing with various base types\n+\n+      elsif Is_Itype (Work_Typ) then\n          Work_Typ := First_Subtype (Work_Typ);\n \n       --  The input denotes the corresponding record type of a protected or a\n@@ -1964,13 +1975,24 @@ package body Exp_Util is\n       --  The working type\n \n    begin\n-      Work_Typ := Typ;\n+      Work_Typ := Base_Type (Typ);\n+\n+      --  Do not process class-wide types as these are Itypes, but lack a first\n+      --  subtype (see below).\n+\n+      if Is_Class_Wide_Type (Work_Typ) then\n+         return;\n+\n+      --  Do not process the underlying full view of a private type. There is\n+      --  no way to get back to the partial view, plus the body will be built\n+      --  by the full view or the base type.\n+\n+      elsif Is_Underlying_Full_View (Work_Typ) then\n+         return;\n \n-      --  The input type denotes the implementation base type of a constrained\n-      --  array type. Work with the first subtype as the DIC pragma is on its\n-      --  rep item chain.\n+      --  Use the first subtype when dealing with various base types\n \n-      if Ekind (Work_Typ) = E_Array_Type and then Is_Itype (Work_Typ) then\n+      elsif Is_Itype (Work_Typ) then\n          Work_Typ := First_Subtype (Work_Typ);\n \n       --  The input denotes the corresponding record type of a protected or a"}, {"sha": "2a5c416ba3f8c80edba4ff56aae559354983c5f1", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -2087,6 +2087,12 @@ package body Freeze is\n       --  Determine whether an arbitrary entity is subject to Boolean aspect\n       --  Import and its value is specified as True.\n \n+      procedure Inherit_Freeze_Node\n+        (Fnod : Node_Id;\n+         Typ  : Entity_Id);\n+      --  Set type Typ's freeze node to refer to Fnode. This routine ensures\n+      --  that any attributes attached to Typ's original node are preserved.\n+\n       procedure Wrap_Imported_Subprogram (E : Entity_Id);\n       --  If E is an entity for an imported subprogram with pre/post-conditions\n       --  then this procedure will create a wrapper to ensure that proper run-\n@@ -4726,6 +4732,60 @@ package body Freeze is\n          return False;\n       end Has_Boolean_Aspect_Import;\n \n+      -------------------------\n+      -- Inherit_Freeze_Node --\n+      -------------------------\n+\n+      procedure Inherit_Freeze_Node\n+        (Fnod : Node_Id;\n+         Typ  : Entity_Id)\n+      is\n+         Typ_Fnod : constant Node_Id := Freeze_Node (Typ);\n+\n+      begin\n+         Set_Freeze_Node (Typ, Fnod);\n+         Set_Entity (Fnod, Typ);\n+\n+         --  The input type had an existing node. Propagate relevant attributes\n+         --  from the old freeze node to the inherited freeze node.\n+\n+         --  ??? if both freeze nodes have attributes, would they differ?\n+\n+         if Present (Typ_Fnod) then\n+\n+            --  Attribute Access_Types_To_Process\n+\n+            if Present (Access_Types_To_Process (Typ_Fnod))\n+              and then No (Access_Types_To_Process (Fnod))\n+            then\n+               Set_Access_Types_To_Process (Fnod,\n+                 Access_Types_To_Process (Typ_Fnod));\n+            end if;\n+\n+            --  Attribute Actions\n+\n+            if Present (Actions (Typ_Fnod)) and then No (Actions (Fnod)) then\n+               Set_Actions (Fnod, Actions (Typ_Fnod));\n+            end if;\n+\n+            --  Attribute First_Subtype_Link\n+\n+            if Present (First_Subtype_Link (Typ_Fnod))\n+              and then No (First_Subtype_Link (Fnod))\n+            then\n+               Set_First_Subtype_Link (Fnod, First_Subtype_Link (Typ_Fnod));\n+            end if;\n+\n+            --  Attribute TSS_Elist\n+\n+            if Present (TSS_Elist (Typ_Fnod))\n+              and then No (TSS_Elist (Fnod))\n+            then\n+               Set_TSS_Elist (Fnod, TSS_Elist (Typ_Fnod));\n+            end if;\n+         end if;\n+      end Inherit_Freeze_Node;\n+\n       ------------------------------\n       -- Wrap_Imported_Subprogram --\n       ------------------------------\n@@ -5776,9 +5836,9 @@ package body Freeze is\n                         F_Node := Freeze_Node (Full);\n \n                         if Present (F_Node) then\n-                           Set_Freeze_Node (Full_View (E), F_Node);\n-                           Set_Entity (F_Node, Full_View (E));\n-\n+                           Inherit_Freeze_Node\n+                             (Fnod => F_Node,\n+                              Typ  => Full_View (E));\n                         else\n                            Set_Has_Delayed_Freeze (Full_View (E), False);\n                            Set_Freeze_Node (Full_View (E), Empty);\n@@ -5789,9 +5849,9 @@ package body Freeze is\n                         F_Node := Freeze_Node (Full_View (E));\n \n                         if Present (F_Node) then\n-                           Set_Freeze_Node (E, F_Node);\n-                           Set_Entity (F_Node, E);\n-\n+                           Inherit_Freeze_Node\n+                             (Fnod => F_Node,\n+                              Typ  => E);\n                         else\n                            --  {Incomplete,Private}_Subtypes with Full_Views\n                            --  constrained by discriminants.\n@@ -5847,9 +5907,9 @@ package body Freeze is\n                   F_Node := Freeze_Node (Underlying_Full_View (E));\n \n                   if Present (F_Node) then\n-                     Set_Freeze_Node (E, F_Node);\n-                     Set_Entity (F_Node, E);\n-\n+                     Inherit_Freeze_Node\n+                       (Fnod => F_Node,\n+                        Typ  => E);\n                   else\n                      Set_Has_Delayed_Freeze (E, False);\n                      Set_Freeze_Node (E, Empty);"}, {"sha": "ba684e1268c8ea959a6321f073046170399663a2", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -2171,11 +2171,14 @@ package body Sem_Cat is\n       --  Error if the name is a primary in an expression. The parent must not\n       --  be an operator, or a selected component or an indexed component that\n       --  is itself a primary. Entities that are actuals do not need to be\n-      --  checked, because the call itself will be diagnosed.\n+      --  checked, because the call itself will be diagnosed. Entities in a\n+      --  generic unit or within a preanalyzed expression are not checked:\n+      --  only their use in executable code matters.\n \n       if Is_Primary (N)\n         and then (not Inside_A_Generic\n                    or else Present (Enclosing_Generic_Body (N)))\n+        and then not In_Spec_Expression\n       then\n          if Ekind (Entity (N)) = E_Variable\n            or else Ekind (Entity (N)) in Formal_Object_Kind"}, {"sha": "53001058eee0df2a4c10fd4ededcc4b1af6f7c67", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -6116,6 +6116,14 @@ package body Sem_Ch10 is\n                if Nkind (CI) = N_With_Clause\n                  and then not\n                    No_Elab_Code_All (Get_Source_Unit (Library_Unit (CI)))\n+\n+                 --  In GNATprove mode, some runtime units are implicitly\n+                 --  loaded to make their entities available for analysis. In\n+                 --  this case, ignore violations of No_Elaboration_Code_All\n+                 --  for this special analysis mode.\n+\n+                 and then not\n+                   (GNATprove_Mode and then Implicit_With (CI))\n                then\n                   Error_Msg_Sloc := Sloc (No_Elab_Code_All_Pragma);\n                   Error_Msg_N"}, {"sha": "68b732398f3d92e0049ccdc144cd65910181f567", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -7444,6 +7444,7 @@ package body Sem_Ch3 is\n                   Set_Full_View (Derived_Type, Full_Der);\n                else\n                   Set_Underlying_Full_View (Derived_Type, Full_Der);\n+                  Set_Is_Underlying_Full_View (Full_Der);\n                end if;\n \n                if not Is_Base_Type (Derived_Type) then\n@@ -7501,6 +7502,7 @@ package body Sem_Ch3 is\n             Set_Full_View (Derived_Type, Full_Der);\n          else\n             Set_Underlying_Full_View (Derived_Type, Full_Der);\n+            Set_Is_Underlying_Full_View (Full_Der);\n          end if;\n \n          --  In any case, the primitive operations are inherited from the\n@@ -7607,6 +7609,7 @@ package body Sem_Ch3 is\n             else\n                Build_Full_Derivation;\n                Set_Underlying_Full_View (Derived_Type, Full_Der);\n+               Set_Is_Underlying_Full_View (Full_Der);\n             end if;\n \n             --  The full view will be used to swap entities on entry/exit to\n@@ -10018,6 +10021,7 @@ package body Sem_Ch3 is\n \n       Analyze (Indic);\n       Set_Underlying_Full_View (Typ, Full_View (Subt));\n+      Set_Is_Underlying_Full_View (Full_View (Subt));\n    end Build_Underlying_Full_View;\n \n    -------------------------------"}, {"sha": "709f5938fbd774fc1cb1e9dd90de2492c094be70", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -2178,6 +2178,7 @@ package body Sem_Ch7 is\n                then\n                   Set_Full_View (Id, Underlying_Full_View (Full));\n                   Set_Underlying_Full_View (Id, Full);\n+                  Set_Is_Underlying_Full_View (Full);\n \n                   Set_Underlying_Full_View (Full, Empty);\n                   Set_Is_Frozen (Full_View (Id));"}, {"sha": "e63229a41f8ae5b490665409a9d9240dd90fe106", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce06d6418fc2863db4b1db8d8d7794cc7c1067ad/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ce06d6418fc2863db4b1db8d8d7794cc7c1067ad", "patch": "@@ -1563,10 +1563,10 @@ package Sinfo is\n \n    --  Implicit_With (Flag16-Sem)\n    --    This flag is set in the N_With_Clause node that is implicitly\n-   --    generated for runtime units that are loaded by the expander, and also\n-   --    for package System, if it is loaded implicitly by a use of the\n-   --    'Address or 'Tag attribute. ???There are other implicit with clauses\n-   --    as well.\n+   --    generated for runtime units that are loaded by the expander or in\n+   --    GNATprove mode, and also for package System, if it is loaded\n+   --    implicitly by a use of the 'Address or 'Tag attribute.\n+   --    ??? There are other implicit with clauses as well.\n \n    --  Implicit_With_From_Instantiation (Flag12-Sem)\n    --     Set in N_With_Clause nodes from generic instantiations.\n@@ -1690,7 +1690,7 @@ package Sinfo is\n    --    actuals to support a build-in-place style of call have been added to\n    --    the call.\n \n-   --  Is_Finalization_Wrapper (Flag9-Sem);\n+   --  Is_Finalization_Wrapper (Flag9-Sem)\n    --    This flag is present in N_Block_Statement nodes. It is set when the\n    --    block acts as a wrapper of a handled construct which has controlled\n    --    objects. The wrapper prevents interference between exception handlers\n@@ -2477,8 +2477,8 @@ package Sinfo is\n       --  Original_Entity (Node2-Sem) If not Empty, holds Named_Number that\n       --  has been constant-folded into its literal value.\n       --  Intval (Uint3) contains integer value of literal\n-      --  plus fields for expression\n       --  Print_In_Hex (Flag13-Sem)\n+      --  plus fields for expression\n \n       --  N_Real_Literal\n       --  Sloc points to literal\n@@ -3367,7 +3367,7 @@ package Sinfo is\n       --  N_Discriminant_Association\n       --  Sloc points to first token of discriminant association\n       --  Selector_Names (List1) (always non-empty, since if no selector\n-      --   names are present, this node is not used, see comment above)\n+      --    names are present, this node is not used, see comment above)\n       --  Expression (Node3)\n \n       ---------------------------------\n@@ -3905,7 +3905,6 @@ package Sinfo is\n       --  Must_Be_Byte_Aligned (Flag14-Sem)\n       --  Non_Aliased_Prefix (Flag18-Sem)\n       --  Redundant_Use (Flag13-Sem)\n-\n       --  plus fields for expression\n \n       --  Note: in Modify_Tree_For_C mode, Max and Min attributes are expanded\n@@ -4431,8 +4430,8 @@ package Sinfo is\n       --  plus fields for expression\n \n       --  N_Op_Expon\n-      --  Is_Power_Of_2_For_Shift (Flag13-Sem)\n       --  Sloc points to **\n+      --  Is_Power_Of_2_For_Shift (Flag13-Sem)\n       --  plus fields for binary operator\n       --  plus fields for expression\n \n@@ -4654,8 +4653,8 @@ package Sinfo is\n       --  Sloc points to apostrophe\n       --  Subtype_Mark (Node4)\n       --  Expression (Node3) expression or aggregate\n-      --  plus fields for expression\n       --  Is_Qualified_Universal_Literal (Flag4-Sem)\n+      --  plus fields for expression\n \n       --------------------\n       -- 4.8  Allocator --"}]}