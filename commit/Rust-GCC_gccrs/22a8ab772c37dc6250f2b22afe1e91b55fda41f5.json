{"sha": "22a8ab772c37dc6250f2b22afe1e91b55fda41f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhOGFiNzcyYzM3ZGM2MjUwZjJiMjJhZmUxZTkxYjU1ZmRhNDFmNQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-09-18T18:33:30Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-09-18T18:33:30Z"}, "message": "[ARM] Cleanup 64-bit multiplies\n\nCleanup 64-bit multiplies.  Combine the expanders using iterators.\nMerge the signed/unsigned multiplies as well as the pre-Armv6 and Armv6\nvariants.  Split DImode operands early into parallel sets inside the\nMULL/MLAL instructions - this improves register allocation and avoids\nsubreg issues due to other DImode operations splitting early.\n\n    gcc/\n\t* config/arm/arm.md (maddsidi4): Remove expander.\n\t(mulsidi3adddi): Remove pattern.\n\t(mulsidi3adddi_v6): Likewise.\n\t(mulsidi3_nov6): Likewise.\n\t(mulsidi3_v6): Likewise.\n\t(umulsidi3): Remove expander.\n\t(umulsidi3_nov6): Remove pattern.\n\t(umulsidi3_v6): Likewise.\n\t(umulsidi3adddi): Likewise.\n\t(umulsidi3adddi_v6): Likewise.\n\t(<Us>mulsidi3): Add combined expander.\n\t(<Us>maddsidi4): Likewise.\n\t(<US>mull): Add combined umull and smull pattern.\n\t(<US>mlal): Likewise.\n\t* config/arm/iterators.md (Us): Add new iterator.\n\nFrom-SVN: r275901", "tree": {"sha": "c04409ce3b927ff6abffcd3e7af20269c209f6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c04409ce3b927ff6abffcd3e7af20269c209f6b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22a8ab772c37dc6250f2b22afe1e91b55fda41f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a8ab772c37dc6250f2b22afe1e91b55fda41f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a8ab772c37dc6250f2b22afe1e91b55fda41f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a8ab772c37dc6250f2b22afe1e91b55fda41f5/comments", "author": null, "committer": null, "parents": [{"sha": "0800e23ecf42b8323c226041f3982cd7856061c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0800e23ecf42b8323c226041f3982cd7856061c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0800e23ecf42b8323c226041f3982cd7856061c9"}], "stats": {"total": 193, "additions": 74, "deletions": 119}, "files": [{"sha": "6be55cd8adb17bd79744f2cee68ad9b6df8f68c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a8ab772c37dc6250f2b22afe1e91b55fda41f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a8ab772c37dc6250f2b22afe1e91b55fda41f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22a8ab772c37dc6250f2b22afe1e91b55fda41f5", "patch": "@@ -1,3 +1,21 @@\n+2019-09-18  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/arm.md (maddsidi4): Remove expander.\n+\t(mulsidi3adddi): Remove pattern.\n+\t(mulsidi3adddi_v6): Likewise.\n+\t(mulsidi3_nov6): Likewise.\n+\t(mulsidi3_v6): Likewise.\n+\t(umulsidi3): Remove expander.\n+\t(umulsidi3_nov6): Remove pattern.\n+\t(umulsidi3_v6): Likewise.\n+\t(umulsidi3adddi): Likewise.\n+\t(umulsidi3adddi_v6): Likewise.\n+\t(<Us>mulsidi3): Add combined expander.\n+\t(<Us>maddsidi4): Likewise.\n+\t(<US>mull): Add combined umull and smull pattern.\n+\t(<US>mlal): Likewise.\n+\t* config/arm/iterators.md (Us): Add new iterator.\n+\n 2019-09-18  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_is_simple_reduction): Remove operand"}, {"sha": "0054ed45de830a2512932d2178ad8b7f4e820c51", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 55, "deletions": 119, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a8ab772c37dc6250f2b22afe1e91b55fda41f5/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a8ab772c37dc6250f2b22afe1e91b55fda41f5/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=22a8ab772c37dc6250f2b22afe1e91b55fda41f5", "patch": "@@ -1755,144 +1755,80 @@\n    (set_attr \"type\" \"mlas\")]\n )\n \n-(define_expand \"maddsidi4\"\n-  [(set (match_operand:DI 0 \"s_register_operand\")\n-\t(plus:DI\n-\t (mult:DI\n-\t  (sign_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n-\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n-\t (match_operand:DI 3 \"s_register_operand\")))]\n-  \"TARGET_32BIT\"\n-  \"\")\n-\n-(define_insn \"*mulsidi3adddi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n-\t(plus:DI\n-\t (mult:DI\n-\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"%r\"))\n-\t  (sign_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n-\t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && !arm_arch6\"\n-  \"smlal%?\\\\t%Q0, %R0, %3, %2\"\n-  [(set_attr \"type\" \"smlal\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*mulsidi3adddi_v6\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-\t(plus:DI\n-\t (mult:DI\n-\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n-\t  (sign_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n-\t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"smlal%?\\\\t%Q0, %R0, %3, %2\"\n-  [(set_attr \"type\" \"smlal\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n ;; 32x32->64 widening multiply.\n-;; As with mulsi3, the only difference between the v3-5 and v6+\n-;; versions of these patterns is the requirement that the output not\n-;; overlap the inputs, but that still means we have to have a named\n-;; expander and two different starred insns.\n+;; The only difference between the v3-5 and v6+ versions is the requirement\n+;; that the output does not overlap with either input.\n \n-(define_expand \"mulsidi3\"\n+(define_expand \"<Us>mulsidi3\"\n   [(set (match_operand:DI 0 \"s_register_operand\")\n \t(mult:DI\n-\t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n-\t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\"))))]\n+\t (SE:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t (SE:DI (match_operand:SI 2 \"s_register_operand\"))))]\n   \"TARGET_32BIT\"\n-  \"\"\n-)\n-\n-(define_insn \"*mulsidi3_nov6\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n-\t(mult:DI\n-\t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n-\t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && !arm_arch6\"\n-  \"smull%?\\\\t%Q0, %R0, %1, %2\"\n-  [(set_attr \"type\" \"smull\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*mulsidi3_v6\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-\t(mult:DI\n-\t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n-\t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"smull%?\\\\t%Q0, %R0, %1, %2\"\n-  [(set_attr \"type\" \"smull\")\n-   (set_attr \"predicable\" \"yes\")]\n+  {\n+      emit_insn (gen_<US>mull (gen_lowpart (SImode, operands[0]),\n+\t\t\t       gen_highpart (SImode, operands[0]),\n+\t\t\t       operands[1], operands[2]));\n+      DONE;\n+  }\n )\n \n-(define_expand \"umulsidi3\"\n-  [(set (match_operand:DI 0 \"s_register_operand\")\n-\t(mult:DI\n-\t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n-\t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\"))))]\n+(define_insn \"<US>mull\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r\")\n+\t(mult:SI\n+\t (match_operand:SI 2 \"s_register_operand\" \"%r,r\")\n+\t (match_operand:SI 3 \"s_register_operand\" \"r,r\")))\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=r,&r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (SE:DI (match_dup 2)) (SE:DI (match_dup 3)))\n+\t  (const_int 32))))]\n   \"TARGET_32BIT\"\n-  \"\"\n-)\n-\n-(define_insn \"*umulsidi3_nov6\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n-\t(mult:DI\n-\t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n-\t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && !arm_arch6\"\n-  \"umull%?\\\\t%Q0, %R0, %1, %2\"\n-  [(set_attr \"type\" \"umull\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*umulsidi3_v6\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-\t(mult:DI\n-\t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n-\t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"umull%?\\\\t%Q0, %R0, %1, %2\"\n+  \"<US>mull%?\\\\t%0, %1, %2, %3\"\n   [(set_attr \"type\" \"umull\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"v6,nov6\")]\n )\n \n-(define_expand \"umaddsidi4\"\n+(define_expand \"<Us>maddsidi4\"\n   [(set (match_operand:DI 0 \"s_register_operand\")\n \t(plus:DI\n \t (mult:DI\n-\t  (zero_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n-\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n+\t  (SE:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t  (SE:DI (match_operand:SI 2 \"s_register_operand\")))\n \t (match_operand:DI 3 \"s_register_operand\")))]\n   \"TARGET_32BIT\"\n-  \"\")\n-\n-(define_insn \"*umulsidi3adddi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n-\t(plus:DI\n-\t (mult:DI\n-\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"%r\"))\n-\t  (zero_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n-\t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && !arm_arch6\"\n-  \"umlal%?\\\\t%Q0, %R0, %3, %2\"\n-  [(set_attr \"type\" \"umlal\")\n-   (set_attr \"predicable\" \"yes\")]\n+  {\n+      emit_insn (gen_<US>mlal (gen_lowpart (SImode, operands[0]),\n+\t\t\t       gen_lowpart (SImode, operands[3]),\n+\t\t\t       gen_highpart (SImode, operands[0]),\n+\t\t\t       gen_highpart (SImode, operands[3]),\n+\t\t\t       operands[1], operands[2]));\n+      DONE;\n+  }\n )\n \n-(define_insn \"*umulsidi3adddi_v6\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-\t(plus:DI\n-\t (mult:DI\n-\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n-\t  (zero_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n-\t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"umlal%?\\\\t%Q0, %R0, %3, %2\"\n+(define_insn \"<US>mlal\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r\")\n+\t(plus:SI\n+\t (mult:SI\n+\t  (SE:DI (match_operand:SI 4 \"s_register_operand\" \"%r,r\"))\n+\t  (SE:DI (match_operand:SI 5 \"s_register_operand\" \"r,r\")))\n+\t (match_operand:SI 1 \"s_register_operand\" \"0,0\")))\n+   (set (match_operand:SI 2 \"s_register_operand\" \"=r,&r\")\n+\t(plus:SI\n+\t (truncate:SI\n+\t  (lshiftrt:DI\n+\t   (plus:DI\n+\t    (mult:DI (SE:DI (match_dup 4)) (SE:DI (match_dup 5)))\n+\t    (zero_extend:DI (match_dup 1)))\n+\t   (const_int 32)))\n+\t (match_operand:SI 3 \"s_register_operand\" \"2,2\")))]\n+  \"TARGET_32BIT\"\n+  \"<US>mlal%?\\\\t%0, %2, %4, %5\"\n   [(set_attr \"type\" \"umlal\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"v6,nov6\")]\n )\n \n (define_expand \"<US>mulsi3_highpart\""}, {"sha": "c29897a3b70d342b025c72b8c032bb3bb831040f", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a8ab772c37dc6250f2b22afe1e91b55fda41f5/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a8ab772c37dc6250f2b22afe1e91b55fda41f5/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=22a8ab772c37dc6250f2b22afe1e91b55fda41f5", "patch": "@@ -796,6 +796,7 @@\n \n ;; Assembler mnemonics for signedness of widening operations.\n (define_code_attr US [(sign_extend \"s\") (zero_extend \"u\")])\n+(define_code_attr Us [(sign_extend \"\") (zero_extend \"u\")])\n \n ;; Signedness suffix for float->fixed conversions.  Empty for signed\n ;; conversion."}]}