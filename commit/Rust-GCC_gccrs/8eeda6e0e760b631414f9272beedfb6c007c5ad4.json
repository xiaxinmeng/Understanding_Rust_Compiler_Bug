{"sha": "8eeda6e0e760b631414f9272beedfb6c007c5ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlZGE2ZTBlNzYwYjYzMTQxNGY5MjcyYmVlZGZiNmMwMDdjNWFkNA==", "commit": {"author": {"name": "Adam Megacz", "email": "adam@xwt.org", "date": "2002-03-08T01:03:56Z"}, "committer": {"name": "Adam Megacz", "email": "megacz@gcc.gnu.org", "date": "2002-03-08T01:03:56Z"}, "message": "win32.cc (_Jv_platform_gettimeofday): Now takes no args, returns jlong.\n\n2002-03-07  Adam Megacz  <adam@xwt.org>\n\n        * win32.cc (_Jv_platform_gettimeofday): Now takes no args,\n        returns jlong. Added implementation\n        * posix.cc (_Jv_platform_gettimeofday): Now takes no args,\n        returns jlong.\n        * win32.h (_Jv_platform_gettimeofday): Now takes no args,\n        returns jlong.\n        * posix.h (_Jv_platform_gettimeofday): Now takes no args,\n        returns jlong.\n        * java/lang/natSystem.cc (currentTimeMillis): Now uses updated\n        _Jv_platform_gettimeofday signature.\n\nFrom-SVN: r50416", "tree": {"sha": "5a6ecf62aa2257aff8b6a4fbbe492852b116c5d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a6ecf62aa2257aff8b6a4fbbe492852b116c5d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eeda6e0e760b631414f9272beedfb6c007c5ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eeda6e0e760b631414f9272beedfb6c007c5ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eeda6e0e760b631414f9272beedfb6c007c5ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eeda6e0e760b631414f9272beedfb6c007c5ad4/comments", "author": null, "committer": null, "parents": [{"sha": "3df3221216dd59d5d81a9791b9f90f3a43d4744d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df3221216dd59d5d81a9791b9f90f3a43d4744d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df3221216dd59d5d81a9791b9f90f3a43d4744d"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "7c125415ca9d85f0450f277e224fa52c94481a6f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8eeda6e0e760b631414f9272beedfb6c007c5ad4", "patch": "@@ -1,3 +1,16 @@\n+2002-03-07  Adam Megacz  <adam@xwt.org>\n+\n+        * win32.cc (_Jv_platform_gettimeofday): Now takes no args,\n+        returns jlong. Added implementation\n+        * posix.cc (_Jv_platform_gettimeofday): Now takes no args,\n+        returns jlong.\n+        * win32.h (_Jv_platform_gettimeofday): Now takes no args,\n+        returns jlong.\n+        * posix.h (_Jv_platform_gettimeofday): Now takes no args,\n+        returns jlong.\n+        * java/lang/natSystem.cc (currentTimeMillis): Now uses updated\n+        _Jv_platform_gettimeofday signature.\n+\t\n 2002-03-07  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java/net/natPlainSocketImpl.cc (_Jv_recv): Removed."}, {"sha": "f96507405de6eccfc472f3a620f1996dc9213386", "filename": "libjava/include/posix.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=8eeda6e0e760b631414f9272beedfb6c007c5ad4", "patch": "@@ -28,6 +28,13 @@ details.  */\n #include <unistd.h>\n #endif\n \n+#include <gcj/cni.h>\n+\n extern int _Jv_select (int n, fd_set *, fd_set *, fd_set *, struct timeval *);\n-extern void _Jv_platform_gettimeofday (struct timeval *);\n+extern jlong _Jv_platform_gettimeofday ();\n extern void _Jv_platform_initialize (void);\n+\n+\n+\n+\n+"}, {"sha": "c2ecbff1ff2cb678f3ece46ce153c489af6eb9bd", "filename": "libjava/include/win32.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=8eeda6e0e760b631414f9272beedfb6c007c5ad4", "patch": "@@ -16,8 +16,9 @@ details.  */\n \n #undef __INSIDE_CYGWIN__\n #include <winsock.h>\n+#include <gcj/cni.h>\n \n extern void _Jv_platform_initialize (void);\n-extern void _Jv_platform_gettimeofday (struct timeval *);\n+extern jlong _Jv_platform_gettimeofday ();\n \n #endif /* __JV_WIN32_H__ */"}, {"sha": "e8c0572a68d62f3713f5d826a3c2d9a2e487ca8f", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=8eeda6e0e760b631414f9272beedfb6c007c5ad4", "patch": "@@ -158,9 +158,7 @@ java::lang::System::arraycopy (jobject src, jint src_offset,\n jlong\n java::lang::System::currentTimeMillis (void)\n {\n-  struct timeval tv;\n-  _Jv_platform_gettimeofday (&tv);\n-  return (jlong) tv.tv_sec * 1000 + tv.tv_usec / 1000;\n+  return _Jv_platform_gettimeofday ();\n }\n \n jint"}, {"sha": "56241d241d15e045150eb0841a6554a1ec89c023", "filename": "libjava/posix.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=8eeda6e0e760b631414f9272beedfb6c007c5ad4", "patch": "@@ -24,27 +24,25 @@ extern \"C\" unsigned long long _clock (void);\n #endif\n \n // gettimeofday implementation.\n-void\n-_Jv_platform_gettimeofday (struct timeval *tv)\n+jlong\n+_Jv_platform_gettimeofday ()\n {\n #if defined (HAVE_GETTIMEOFDAY)\n-  gettimeofday (tv, NULL);\n+  timeval tv;\n+  gettimeofday (&tv, NULL);\n+  return tv.tv_sec * 1000 + tv.tv_usec / 1000;\n #elif defined (HAVE_TIME)\n-  tv->tv_sec = time (NULL);\n-  tv->tv_usec = 0;\n+  return time (NULL) * 1000;\n #elif defined (HAVE_FTIME)\n   struct timeb t;\n   ftime (&t);\n-  tv->tv_sec = t.time;\n-  tv->tv_usec = t.millitm * 1000;\n+  return t.time * 1000 + t.millitm;\n #elif defined (ECOS)\n   // FIXME.\n-  tv->tv_sec = _clock () / 1000;\n-  tv->tv_usec = 0;\n+  return _clock();\n #else\n   // In the absence of any function, time remains forever fixed.\n-  tv->tv_sec = 23;\n-  tv->tv_usec = 0;\n+  return 23000;\n #endif\n }\n "}, {"sha": "a019cb7580685a5c54d58a4e72d00fe327fc0a8f", "filename": "libjava/win32.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda6e0e760b631414f9272beedfb6c007c5ad4/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=8eeda6e0e760b631414f9272beedfb6c007c5ad4", "patch": "@@ -10,6 +10,7 @@ details.  */\n \n #include <config.h>\n #include <jvm.h>\n+#include <sys/timeb.h>\n \n #include \"platform.h\"\n #include <java/lang/ArithmeticException.h>\n@@ -39,10 +40,11 @@ _Jv_platform_initialize (void)\n }\n \n // gettimeofday implementation.\n-void\n-_Jv_platform_gettimeofday (struct timeval *tv)\n+jlong\n+_Jv_platform_gettimeofday ()\n {\n-  // FIXME\n-  return;\n+  struct timeb t;\n+  ftime (&t);\n+  return t.time * 1000 + t.millitm;\n }\n "}]}