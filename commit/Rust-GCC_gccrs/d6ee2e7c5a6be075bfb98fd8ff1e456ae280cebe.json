{"sha": "d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlZTJlN2M1YTZiZTA3NWJmYjk4ZmQ4ZmYxZTQ1NmFlMjgwY2ViZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-15T00:13:29Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-15T00:13:29Z"}, "message": "Document compatibility of aliases and their targets, correct weakref example.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (attribute alias): Mention type requirement.\n\t(attribute weak): Same.\n\t(attribute weakref): Correct invalid example.", "tree": {"sha": "ceab0011980223751322b2c29b1d5ab960ef2761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceab0011980223751322b2c29b1d5ab960ef2761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d757b0950831ee9e223b3159e9d44461b6dbdd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d757b0950831ee9e223b3159e9d44461b6dbdd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d757b0950831ee9e223b3159e9d44461b6dbdd2"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "712a938f2c22e1edf1b70e2c69485316e8d176e7", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "patch": "@@ -1,3 +1,9 @@\n+2020-02-14  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi (attribute alias): Mention type requirement.\n+\t(attribute weak): Same.\n+\t(attribute weakref): Correct invalid example.\n+\n 2020-02-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* doc/md.texi (PowerPC and IBM RS6000): Improve documentation."}, {"sha": "b7f462a76b087170dc8ebd0b9d5f329219d63686", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "patch": "@@ -2557,18 +2557,21 @@ __attribute__ ((access (write_only, 1, 2), access (read_write, 3))) int fgets (c\n \n @item alias (\"@var{target}\")\n @cindex @code{alias} function attribute\n-The @code{alias} attribute causes the declaration to be emitted as an\n-alias for another symbol, which must be specified.  For instance,\n+The @code{alias} attribute causes the declaration to be emitted as an alias\n+for another symbol, which must have been previously declared with the same\n+type, and for variables, also the same size and alignment.  Declaring an alias\n+with a different type than the target is undefined and may be diagnosed.  As\n+an example, the following declarations:\n \n @smallexample\n void __f () @{ /* @r{Do something.} */; @}\n void f () __attribute__ ((weak, alias (\"__f\")));\n @end smallexample\n \n @noindent\n-defines @samp{f} to be a weak alias for @samp{__f}.  In C++, the\n-mangled name for the target must be used.  It is an error if @samp{__f}\n-is not defined in the same translation unit.\n+define @samp{f} to be a weak alias for @samp{__f}.  In C++, the mangled name\n+for the target must be used.  It is an error if @samp{__f} is not defined in\n+the same translation unit.\n \n This attribute requires assembler and object file support,\n and may not be available on all targets.\n@@ -3919,31 +3922,43 @@ results in warning on line 5.\n \n @item weak\n @cindex @code{weak} function attribute\n-The @code{weak} attribute causes the declaration to be emitted as a weak\n-symbol rather than a global.  This is primarily useful in defining\n-library functions that can be overridden in user code, though it can\n-also be used with non-function declarations.  Weak symbols are supported\n-for ELF targets, and also for a.out targets when using the GNU assembler\n-and linker.\n+The @code{weak} attribute causes a declaration of an external symbol\n+to be emitted as a weak symbol rather than a global.  This is primarily\n+useful in defining library functions that can be overridden in user code,\n+though it can also be used with non-function declarations.  The overriding\n+symbol must have the same type as the weak symbol.  In addition, if it\n+designates a variable it must also have the same size and alignment as\n+the weak symbol.  Weak symbols are supported for ELF targets, and also\n+for a.out targets when using the GNU assembler and linker.\n \n @item weakref\n @itemx weakref (\"@var{target}\")\n @cindex @code{weakref} function attribute\n The @code{weakref} attribute marks a declaration as a weak reference.\n Without arguments, it should be accompanied by an @code{alias} attribute\n-naming the target symbol.  Optionally, the @var{target} may be given as\n-an argument to @code{weakref} itself.  In either case, @code{weakref}\n-implicitly marks the declaration as @code{weak}.  Without a\n-@var{target}, given as an argument to @code{weakref} or to @code{alias},\n-@code{weakref} is equivalent to @code{weak}.\n+naming the target symbol.  Alternatively, @var{target} may be given as\n+an argument to @code{weakref} itself, naming the target definition of\n+the alias.  The @var{target} must have the same type as the declaration.\n+In addition, if it designates a variable it must also have the same size\n+and alignment as the declaration.  In either form of the declaration\n+@code{weakref} implicitly marks the declared symbol as @code{weak}.  Without\n+a @var{target} given as an argument to @code{weakref} or to @code{alias},\n+@code{weakref} is equivalent to @code{weak} (in that case the declaration\n+may be @code{extern}).\n \n @smallexample\n-static int x() __attribute__ ((weakref (\"y\")));\n+/* Given the declaration: */\n+extern int y (void);\n+\n+/* the following... */\n+static int x (void) __attribute__ ((weakref (\"y\")));\n+\n /* is equivalent to... */\n-static int x() __attribute__ ((weak, weakref, alias (\"y\")));\n-/* and to... */\n-static int x() __attribute__ ((weakref));\n-static int x() __attribute__ ((alias (\"y\")));\n+static int x (void) __attribute__ ((weakref, alias (\"y\")));\n+\n+/* or, alternatively, to... */\n+static int x (void) __attribute__ ((weakref));\n+static int x (void) __attribute__ ((alias (\"y\")));\n @end smallexample\n \n A weak reference is an alias that does not by itself require a\n@@ -3956,10 +3971,10 @@ symbol, not necessarily in the same translation unit.\n The effect is equivalent to moving all references to the alias to a\n separate translation unit, renaming the alias to the aliased symbol,\n declaring it as weak, compiling the two separate translation units and\n-performing a link with relocatable output (ie: @code{ld -r}) on them.\n+performing a link with relocatable output (i.e.@: @code{ld -r}) on them.\n \n-At present, a declaration to which @code{weakref} is attached can\n-only be @code{static}.\n+A declaration to which @code{weakref} is attached and that is associated\n+with a named @code{target} must be @code{static}.\n \n @end table\n "}]}