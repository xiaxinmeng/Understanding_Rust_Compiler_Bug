{"sha": "9f8fafe847daf2c1bc1721d6d97203686567549d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4ZmFmZTg0N2RhZjJjMWJjMTcyMWQ2ZDk3MjAzNjg2NTY3NTQ5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-06-19T15:28:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-06-19T15:28:42Z"}, "message": "re PR sanitizer/81125 (-fsanitize=undefined ICE)\n\n\tPR sanitizer/81125\n\t* ubsan.h (enum ubsan_encode_value_phase): New.\n\t(ubsan_encode_value): Change second argument to\n\tenum ubsan_encode_value_phase with default value of\n\tUBSAN_ENCODE_VALUE_GENERIC.\n\t* ubsan.c (ubsan_encode_value): Change second argument to\n\tenum ubsan_encode_value_phase PHASE from bool IN_EXPAND_P,\n\tadjust uses, for UBSAN_ENCODE_VALUE_GENERIC use just\n\tcreate_tmp_var_raw instead of create_tmp_var and use a\n\tTARGET_EXPR.\n\t(ubsan_expand_bounds_ifn, ubsan_build_overflow_builtin,\n\tinstrument_bool_enum_load, ubsan_instrument_float_cast): Adjust\n\tubsan_encode_value callers.\n\n\t* g++.dg/ubsan/pr81125.C: New test.\n\nFrom-SVN: r249376", "tree": {"sha": "e6c468ee35c19ea0a9cb1656e84f32b1a10c0fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6c468ee35c19ea0a9cb1656e84f32b1a10c0fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f8fafe847daf2c1bc1721d6d97203686567549d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8fafe847daf2c1bc1721d6d97203686567549d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8fafe847daf2c1bc1721d6d97203686567549d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8fafe847daf2c1bc1721d6d97203686567549d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4301ae2263d214d1c4b8e5d3d210e0aafff19e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4301ae2263d214d1c4b8e5d3d210e0aafff19e47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4301ae2263d214d1c4b8e5d3d210e0aafff19e47"}], "stats": {"total": 79, "additions": 63, "deletions": 16}, "files": [{"sha": "396f112816b2c8ff855c141f50ea49884d3f78dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f8fafe847daf2c1bc1721d6d97203686567549d", "patch": "@@ -1,5 +1,19 @@\n 2017-06-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/81125\n+\t* ubsan.h (enum ubsan_encode_value_phase): New.\n+\t(ubsan_encode_value): Change second argument to\n+\tenum ubsan_encode_value_phase with default value of\n+\tUBSAN_ENCODE_VALUE_GENERIC.\n+\t* ubsan.c (ubsan_encode_value): Change second argument to\n+\tenum ubsan_encode_value_phase PHASE from bool IN_EXPAND_P,\n+\tadjust uses, for UBSAN_ENCODE_VALUE_GENERIC use just\n+\tcreate_tmp_var_raw instead of create_tmp_var and use a\n+\tTARGET_EXPR.\n+\t(ubsan_expand_bounds_ifn, ubsan_build_overflow_builtin,\n+\tinstrument_bool_enum_load, ubsan_instrument_float_cast): Adjust\n+\tubsan_encode_value callers.\n+\n \tPR sanitizer/81111\n \t* ubsan.c (ubsan_encode_value): If current_function_decl is NULL,\n \tuse create_tmp_var_raw instead of create_tmp_var, mark it addressable"}, {"sha": "ecec6087d2661ca44320c4a2723fbb6c8bed28fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f8fafe847daf2c1bc1721d6d97203686567549d", "patch": "@@ -1,5 +1,8 @@\n 2017-06-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/81125\n+\t* g++.dg/ubsan/pr81125.C: New test.\n+\n \tPR sanitizer/81111\n \t* g++.dg/ubsan/pr81111.C: New test.\n "}, {"sha": "c91ddc7db0e14a2ae3c49d0f975686f1353d857f", "filename": "gcc/testsuite/g++.dg/ubsan/pr81125.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81125.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81125.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81125.C?ref=9f8fafe847daf2c1bc1721d6d97203686567549d", "patch": "@@ -0,0 +1,20 @@\n+// PR sanitizer/81125\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=undefined\" }\n+\n+#ifdef __SIZEOF_INT128__\n+typedef __int128 T;\n+#else\n+typedef long long int T;\n+#endif\n+\n+struct A\n+{\n+  A (long);\n+  T a;\n+};\n+\n+A::A (long c)\n+{\n+  long b = a % c;\n+}"}, {"sha": "44effdd22166d0b35fa95a71dd40a0eb89990bf3", "filename": "gcc/ubsan.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=9f8fafe847daf2c1bc1721d6d97203686567549d", "patch": "@@ -114,10 +114,10 @@ decl_for_type_insert (tree type, tree decl)\n /* Helper routine, which encodes a value in the pointer_sized_int_node.\n    Arguments with precision <= POINTER_SIZE are passed directly,\n    the rest is passed by reference.  T is a value we are to encode.\n-   IN_EXPAND_P is true if this function is called during expansion.  */\n+   PHASE determines when this function is called.  */\n \n tree\n-ubsan_encode_value (tree t, bool in_expand_p)\n+ubsan_encode_value (tree t, enum ubsan_encode_value_phase phase)\n {\n   tree type = TREE_TYPE (t);\n   const unsigned int bitsize = GET_MODE_BITSIZE (TYPE_MODE (type));\n@@ -144,7 +144,7 @@ ubsan_encode_value (tree t, bool in_expand_p)\n \t  /* The reason for this is that we don't want to pessimize\n \t     code by making vars unnecessarily addressable.  */\n \t  tree var;\n-\t  if (current_function_decl)\n+\t  if (phase != UBSAN_ENCODE_VALUE_GENERIC)\n \t    {\n \t      var = create_tmp_var (type);\n \t      mark_addressable (var);\n@@ -154,7 +154,7 @@ ubsan_encode_value (tree t, bool in_expand_p)\n \t      var = create_tmp_var_raw (type);\n \t      TREE_ADDRESSABLE (var) = 1;\n \t    }\n-\t  if (in_expand_p)\n+\t  if (phase == UBSAN_ENCODE_VALUE_RTL)\n \t    {\n \t      rtx mem\n \t\t= assign_stack_temp_for_type (TYPE_MODE (type),\n@@ -164,7 +164,7 @@ ubsan_encode_value (tree t, bool in_expand_p)\n \t      expand_assignment (var, t, false);\n \t      return build_fold_addr_expr (var);\n \t    }\n-\t  if (current_function_decl)\n+\t  if (phase != UBSAN_ENCODE_VALUE_GENERIC)\n \t    {\n \t      tree tem = build2 (MODIFY_EXPR, void_type_node, var, t);\n \t      t = build_fold_addr_expr (var);\n@@ -725,9 +725,9 @@ ubsan_expand_bounds_ifn (gimple_stmt_iterator *gsi)\n \t  ? BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS\n \t  : BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT;\n       tree fn = builtin_decl_explicit (bcode);\n-      tree val\n-\t= force_gimple_operand_gsi (gsi, ubsan_encode_value (orig_index), true,\n-\t\t\t\t    NULL_TREE, true, GSI_SAME_STMT);\n+      tree val = ubsan_encode_value (orig_index, UBSAN_ENCODE_VALUE_GIMPLE);\n+      val = force_gimple_operand_gsi (gsi, val, true, NULL_TREE, true,\n+\t\t\t\t      GSI_SAME_STMT);\n       g = gimple_build_call (fn, 2, data, val);\n     }\n   gimple_set_location (g, loc);\n@@ -1283,9 +1283,11 @@ ubsan_build_overflow_builtin (tree_code code, location_t loc, tree lhstype,\n   tree fn = builtin_decl_explicit (fn_code);\n   return build_call_expr_loc (loc, fn, 2 + (code != NEGATE_EXPR),\n \t\t\t      build_fold_addr_expr_loc (loc, data),\n-\t\t\t      ubsan_encode_value (op0, true),\n-\t\t\t      op1 ? ubsan_encode_value (op1, true)\n-\t\t\t\t  : NULL_TREE);\n+\t\t\t      ubsan_encode_value (op0, UBSAN_ENCODE_VALUE_RTL),\n+\t\t\t      op1\n+\t\t\t      ? ubsan_encode_value (op1,\n+\t\t\t\t\t\t    UBSAN_ENCODE_VALUE_RTL)\n+\t\t\t      : NULL_TREE);\n }\n \n /* Perform the signed integer instrumentation.  GSI is the iterator\n@@ -1476,9 +1478,9 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n \t  : BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT;\n       tree fn = builtin_decl_explicit (bcode);\n \n-      tree val = force_gimple_operand_gsi (&gsi2, ubsan_encode_value (urhs),\n-\t\t\t\t\t   true, NULL_TREE, true,\n-\t\t\t\t\t   GSI_SAME_STMT);\n+      tree val = ubsan_encode_value (urhs, UBSAN_ENCODE_VALUE_GIMPLE);\n+      val = force_gimple_operand_gsi (&gsi2, val, true, NULL_TREE, true,\n+\t\t\t\t      GSI_SAME_STMT);\n       g = gimple_build_call (fn, 2, data, val);\n     }\n   gimple_set_location (g, loc);\n@@ -1642,7 +1644,7 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n       fn = builtin_decl_explicit (bcode);\n       fn = build_call_expr_loc (loc, fn, 2,\n \t\t\t\tbuild_fold_addr_expr_loc (loc, data),\n-\t\t\t\tubsan_encode_value (expr, false));\n+\t\t\t\tubsan_encode_value (expr));\n     }\n \n   return fold_build3 (COND_EXPR, void_type_node, t, fn, integer_zero_node);"}, {"sha": "6593423e93a08a02b55550ff97de625c4f541db2", "filename": "gcc/ubsan.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8fafe847daf2c1bc1721d6d97203686567549d/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=9f8fafe847daf2c1bc1721d6d97203686567549d", "patch": "@@ -42,14 +42,22 @@ enum ubsan_print_style {\n   UBSAN_PRINT_ARRAY\n };\n \n+/* This controls ubsan_encode_value behavior.  */\n+enum ubsan_encode_value_phase {\n+  UBSAN_ENCODE_VALUE_GENERIC,\n+  UBSAN_ENCODE_VALUE_GIMPLE,\n+  UBSAN_ENCODE_VALUE_RTL\n+};\n+\n extern bool ubsan_expand_bounds_ifn (gimple_stmt_iterator *);\n extern bool ubsan_expand_null_ifn (gimple_stmt_iterator *);\n extern bool ubsan_expand_objsize_ifn (gimple_stmt_iterator *);\n extern bool ubsan_expand_vptr_ifn (gimple_stmt_iterator *);\n extern bool ubsan_instrument_unreachable (gimple_stmt_iterator *);\n extern tree ubsan_create_data (const char *, int, const location_t *, ...);\n extern tree ubsan_type_descriptor (tree, enum ubsan_print_style = UBSAN_PRINT_NORMAL);\n-extern tree ubsan_encode_value (tree, bool = false);\n+extern tree ubsan_encode_value (tree, enum ubsan_encode_value_phase\n+\t\t\t\t      = UBSAN_ENCODE_VALUE_GENERIC);\n extern bool is_ubsan_builtin_p (tree);\n extern tree ubsan_build_overflow_builtin (tree_code, location_t, tree, tree,\n \t\t\t\t\t  tree, tree *);"}]}