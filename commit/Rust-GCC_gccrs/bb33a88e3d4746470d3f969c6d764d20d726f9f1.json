{"sha": "bb33a88e3d4746470d3f969c6d764d20d726f9f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIzM2E4OGUzZDQ3NDY0NzBkM2Y5NjljNmQ3NjRkMjBkNzI2ZjlmMQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@st.com", "date": "2019-09-10T07:56:43Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2019-09-10T07:56:43Z"}, "message": "[ARM/FDPIC v6 12/24] [ARM] FDPIC: Restore r9 after we call __aeabi_read_tp\n\nWe call __aeabi_read_tp() to get the thread pointer. Since this is a\nfunction call, we have to restore the FDPIC register afterwards.\n\n2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\n\tgcc/\n\t* config/arm/arm.c (arm_load_tp): Add FDPIC support.\n\t* config/arm/arm.md (FDPIC_REGNUM): New constant.\n\t(load_tp_soft_fdpic): New pattern.\n\t(load_tp_soft): Disable in FDPIC mode.\n\n\nCo-Authored-By: Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\nFrom-SVN: r275574", "tree": {"sha": "47a9200cf7cbd1df26092ec6909cc05b0c2796a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47a9200cf7cbd1df26092ec6909cc05b0c2796a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb33a88e3d4746470d3f969c6d764d20d726f9f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb33a88e3d4746470d3f969c6d764d20d726f9f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb33a88e3d4746470d3f969c6d764d20d726f9f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb33a88e3d4746470d3f969c6d764d20d726f9f1/comments", "author": null, "committer": null, "parents": [{"sha": "ae1152e5a01301c9dfec42fc5c117a9b782e353e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae1152e5a01301c9dfec42fc5c117a9b782e353e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae1152e5a01301c9dfec42fc5c117a9b782e353e"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "afe73b59f5d471ec22b4bc2126c7d9d76367c7ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb33a88e3d4746470d3f969c6d764d20d726f9f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb33a88e3d4746470d3f969c6d764d20d726f9f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb33a88e3d4746470d3f969c6d764d20d726f9f1", "patch": "@@ -1,7 +1,14 @@\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n-\tgcc/\n+\t* config/arm/arm.c (arm_load_tp): Add FDPIC support.\n+\t* config/arm/arm.md (FDPIC_REGNUM): New constant.\n+\t(load_tp_soft_fdpic): New pattern.\n+\t(load_tp_soft): Disable in FDPIC mode.\n+\n+2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n+\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\n \t* config/arm/arm.c (tls_reloc): Add TLS_GD32_FDPIC,\n \tTLS_LDM32_FDPIC and TLS_IE32_FDPIC.\n \t(arm_call_tls_get_addr): Add FDPIC support.\n@@ -11,7 +18,6 @@\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n-\tgcc/\n \t* config/arm/arm.c (arm_asm_trampoline_template): Add FDPIC\n \tsupport.\n \t(arm_trampoline_init): Likewise."}, {"sha": "c452771f473aeb8b074f4f9a05f4c040e15db614", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb33a88e3d4746470d3f969c6d764d20d726f9f1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb33a88e3d4746470d3f969c6d764d20d726f9f1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bb33a88e3d4746470d3f969c6d764d20d726f9f1", "patch": "@@ -8685,7 +8685,18 @@ arm_load_tp (rtx target)\n \n       rtx tmp;\n \n-      emit_insn (gen_load_tp_soft ());\n+      if (TARGET_FDPIC)\n+\t{\n+\t  rtx fdpic_reg = gen_rtx_REG (Pmode, FDPIC_REGNUM);\n+\t  rtx initial_fdpic_reg = get_hard_reg_initial_val (Pmode, FDPIC_REGNUM);\n+\n+\t  emit_insn (gen_load_tp_soft_fdpic ());\n+\n+\t  /* Restore r9.  */\n+\t  emit_insn (gen_restore_pic_register_after_call(fdpic_reg, initial_fdpic_reg));\n+\t}\n+      else\n+\temit_insn (gen_load_tp_soft ());\n \n       tmp = gen_rtx_REG (SImode, R0_REGNUM);\n       emit_move_insn (target, tmp);"}, {"sha": "918271d7ad5e263001a342d63f3ab07c076e3a47", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb33a88e3d4746470d3f969c6d764d20d726f9f1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb33a88e3d4746470d3f969c6d764d20d726f9f1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=bb33a88e3d4746470d3f969c6d764d20d726f9f1", "patch": "@@ -31,6 +31,7 @@\n   [(R0_REGNUM         0)\t; First CORE register\n    (R1_REGNUM\t      1)\t; Second CORE register\n    (R4_REGNUM\t      4)\t; Fifth CORE register\n+   (FDPIC_REGNUM      9)\t; FDPIC register\n    (IP_REGNUM\t     12)\t; Scratch register\n    (SP_REGNUM\t     13)\t; Stack pointer\n    (LR_REGNUM        14)\t; Return address register\n@@ -11164,13 +11165,26 @@\n    (set_attr \"type\" \"mrs\")]\n )\n \n+;; Doesn't clobber R1-R3.  Must use r0 for the first operand.\n+(define_insn \"load_tp_soft_fdpic\"\n+  [(set (reg:SI 0) (unspec:SI [(const_int 0)] UNSPEC_TLS))\n+   (clobber (reg:SI FDPIC_REGNUM))\n+   (clobber (reg:SI LR_REGNUM))\n+   (clobber (reg:SI IP_REGNUM))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_SOFT_TP && TARGET_FDPIC\"\n+  \"bl\\\\t__aeabi_read_tp\\\\t@ load_tp_soft\"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"type\" \"branch\")]\n+)\n+\n ;; Doesn't clobber R1-R3.  Must use r0 for the first operand.\n (define_insn \"load_tp_soft\"\n   [(set (reg:SI 0) (unspec:SI [(const_int 0)] UNSPEC_TLS))\n    (clobber (reg:SI LR_REGNUM))\n    (clobber (reg:SI IP_REGNUM))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_SOFT_TP\"\n+  \"TARGET_SOFT_TP && !TARGET_FDPIC\"\n   \"bl\\\\t__aeabi_read_tp\\\\t@ load_tp_soft\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"type\" \"branch\")]"}]}