{"sha": "38a21d46b069364ec843a60a6b9fe1c527825944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhhMjFkNDZiMDY5MzY0ZWM4NDNhNjBhNmI5ZmUxYzUyNzgyNTk0NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-29T07:56:58Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-29T07:56:58Z"}, "message": "natByteBufferImpl.cc, [...]: New files that implement native functionalities.\n\n2002-11-29  Michael Koch <konqueror@gmx.de>\n\n\t* gnu/java/nio/natByteBufferImpl.cc,\n\tgnu/java/nio/natCharBufferImpl.cc,\n\tgnu/java/nio/natDoubleBufferImpl.cc,\n\tgnu/java/nio/natFloatBufferImpl.cc,\n\tgnu/java/nio/natIntBufferImpl.cc,\n\tgnu/java/nio/natLongBufferImpl.cc,\n\tgnu/java/nio/natSelectorImpl.cc,\n\tgnu/java/nio/natServerSocketChannelImpl.cc,\n\tgnu/java/nio/natShortBufferImpl.cc,\n\tgnu/java/nio/natSocketChannelImpl.cc:\n\tNew files that implement native functionalities.\n\nFrom-SVN: r59625", "tree": {"sha": "eef474c51f1d8941961771ec5290dbedfa69e847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eef474c51f1d8941961771ec5290dbedfa69e847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38a21d46b069364ec843a60a6b9fe1c527825944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a21d46b069364ec843a60a6b9fe1c527825944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a21d46b069364ec843a60a6b9fe1c527825944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a21d46b069364ec843a60a6b9fe1c527825944/comments", "author": null, "committer": null, "parents": [{"sha": "ac7edc01e80616a8befedf7610d13ce28fb4fe24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7edc01e80616a8befedf7610d13ce28fb4fe24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7edc01e80616a8befedf7610d13ce28fb4fe24"}], "stats": {"total": 1222, "additions": 1222, "deletions": 0}, "files": [{"sha": "9d80071ee62ba91a820a7e6c10e374db07ecdfaa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -1,3 +1,17 @@\n+2002-11-29  Michael Koch <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/natByteBufferImpl.cc,\n+\tgnu/java/nio/natCharBufferImpl.cc,\n+\tgnu/java/nio/natDoubleBufferImpl.cc,\n+\tgnu/java/nio/natFloatBufferImpl.cc,\n+\tgnu/java/nio/natIntBufferImpl.cc,\n+\tgnu/java/nio/natLongBufferImpl.cc,\n+\tgnu/java/nio/natSelectorImpl.cc,\n+\tgnu/java/nio/natServerSocketChannelImpl.cc,\n+\tgnu/java/nio/natShortBufferImpl.cc,\n+\tgnu/java/nio/natSocketChannelImpl.cc:\n+\tNew files that implement native functionalities.\n+\n 2002-11-29  Michael Koch <konqueror@gmx.de>\n \n \t* gnu/java/nio/ByteBufferImpl.java"}, {"sha": "b98b694e87b69459a6065f671ac6d7f27ede2015", "filename": "libjava/gnu/java/nio/natByteBufferImpl.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatByteBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatByteBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatByteBufferImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,125 @@\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/java/nio/ByteBufferImpl.h>\n+\n+JArray<jbyte>*\n+gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jbyte>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jbyte>*\n+gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jshort>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jbyte>*\n+gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jint>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jbyte>*\n+gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jlong>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jbyte>*\n+gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jchar>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jbyte>*\n+gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jfloat>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jbyte>*\n+gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jdouble>*)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::java::nio::ByteBufferImpl::nio_put_Byte(gnu::java::nio::ByteBufferImpl*, jint, jint, jbyte)\n+{\n+}\n+\n+void\n+gnu::java::nio::ByteBufferImpl::nio_put_Char(gnu::java::nio::ByteBufferImpl*, jint, jint, jchar)\n+{\n+}\n+\n+void\n+gnu::java::nio::ByteBufferImpl::nio_put_Short(gnu::java::nio::ByteBufferImpl*, jint, jint, jshort)\n+{\n+}\n+\n+void\n+gnu::java::nio::ByteBufferImpl::nio_put_Int(gnu::java::nio::ByteBufferImpl*, jint, jint, jint)\n+{\n+}\n+\n+void\n+gnu::java::nio::ByteBufferImpl::nio_put_Long(gnu::java::nio::ByteBufferImpl*, jint, jint, jlong)\n+{\n+}\n+\n+void\n+gnu::java::nio::ByteBufferImpl::nio_put_Float(gnu::java::nio::ByteBufferImpl*, jint, jint, jfloat)\n+{\n+}\n+\n+void\n+gnu::java::nio::ByteBufferImpl::nio_put_Double(gnu::java::nio::ByteBufferImpl*, jint, jint, jdouble)\n+{\n+}\n+\n+jbyte\n+gnu::java::nio::ByteBufferImpl::nio_get_Byte(gnu::java::nio::ByteBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jchar\n+gnu::java::nio::ByteBufferImpl::nio_get_Char(gnu::java::nio::ByteBufferImpl*, jint, jint)\n+{\n+  return ' ';\n+}\n+\n+jshort\n+gnu::java::nio::ByteBufferImpl::nio_get_Short(gnu::java::nio::ByteBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::java::nio::ByteBufferImpl::nio_get_Int(gnu::java::nio::ByteBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jlong\n+gnu::java::nio::ByteBufferImpl::nio_get_Long(gnu::java::nio::ByteBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jfloat\n+gnu::java::nio::ByteBufferImpl::nio_get_Float(gnu::java::nio::ByteBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}\n+\n+jdouble\n+gnu::java::nio::ByteBufferImpl::nio_get_Double(gnu::java::nio::ByteBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}"}, {"sha": "2d01a679bfa56888ea7d49a7ec7654f08963ad81", "filename": "libjava/gnu/java/nio/natCharBufferImpl.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatCharBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatCharBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatCharBufferImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,125 @@\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/java/nio/CharBufferImpl.h>\n+\n+JArray<jchar>*\n+gnu::java::nio::CharBufferImpl::nio_cast(JArray<jbyte>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jchar>*\n+gnu::java::nio::CharBufferImpl::nio_cast(JArray<jshort>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jchar>*\n+gnu::java::nio::CharBufferImpl::nio_cast(JArray<jint>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jchar>*\n+gnu::java::nio::CharBufferImpl::nio_cast(JArray<jlong>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jchar>*\n+gnu::java::nio::CharBufferImpl::nio_cast(JArray<jchar>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jchar>*\n+gnu::java::nio::CharBufferImpl::nio_cast(JArray<jfloat>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jchar>*\n+gnu::java::nio::CharBufferImpl::nio_cast(JArray<jdouble>*)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::java::nio::CharBufferImpl::nio_put_Byte(gnu::java::nio::CharBufferImpl*, jint, jint, jbyte)\n+{\n+}\n+\n+void\n+gnu::java::nio::CharBufferImpl::nio_put_Char(gnu::java::nio::CharBufferImpl*, jint, jint, jchar)\n+{\n+}\n+\n+void\n+gnu::java::nio::CharBufferImpl::nio_put_Short(gnu::java::nio::CharBufferImpl*, jint, jint, jshort)\n+{\n+}\n+\n+void\n+gnu::java::nio::CharBufferImpl::nio_put_Int(gnu::java::nio::CharBufferImpl*, jint, jint, jint)\n+{\n+}\n+\n+void\n+gnu::java::nio::CharBufferImpl::nio_put_Long(gnu::java::nio::CharBufferImpl*, jint, jint, jlong)\n+{\n+}\n+\n+void\n+gnu::java::nio::CharBufferImpl::nio_put_Float(gnu::java::nio::CharBufferImpl*, jint, jint, jfloat)\n+{\n+}\n+\n+void\n+gnu::java::nio::CharBufferImpl::nio_put_Double(gnu::java::nio::CharBufferImpl*, jint, jint, jdouble)\n+{\n+}\n+\n+jbyte\n+gnu::java::nio::CharBufferImpl::nio_get_Byte(gnu::java::nio::CharBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jchar\n+gnu::java::nio::CharBufferImpl::nio_get_Char(gnu::java::nio::CharBufferImpl*, jint, jint)\n+{\n+  return ' ';\n+}\n+\n+jshort\n+gnu::java::nio::CharBufferImpl::nio_get_Short(gnu::java::nio::CharBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::java::nio::CharBufferImpl::nio_get_Int(gnu::java::nio::CharBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jlong\n+gnu::java::nio::CharBufferImpl::nio_get_Long(gnu::java::nio::CharBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jfloat\n+gnu::java::nio::CharBufferImpl::nio_get_Float(gnu::java::nio::CharBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}\n+\n+jdouble\n+gnu::java::nio::CharBufferImpl::nio_get_Double(gnu::java::nio::CharBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}"}, {"sha": "53bf73db5a6eba2a59d19aee369efb2e0d7275b2", "filename": "libjava/gnu/java/nio/natDoubleBufferImpl.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatDoubleBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatDoubleBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatDoubleBufferImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,125 @@\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/java/nio/DoubleBufferImpl.h>\n+\n+JArray<jdouble>*\n+gnu::java::nio::DoubleBufferImpl::nio_cast(JArray<jbyte>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jdouble>*\n+gnu::java::nio::DoubleBufferImpl::nio_cast(JArray<jshort>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jdouble>*\n+gnu::java::nio::DoubleBufferImpl::nio_cast(JArray<jint>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jdouble>*\n+gnu::java::nio::DoubleBufferImpl::nio_cast(JArray<jlong>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jdouble>*\n+gnu::java::nio::DoubleBufferImpl::nio_cast(JArray<jchar>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jdouble>*\n+gnu::java::nio::DoubleBufferImpl::nio_cast(JArray<jfloat>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jdouble>*\n+gnu::java::nio::DoubleBufferImpl::nio_cast(JArray<jdouble>*)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::java::nio::DoubleBufferImpl::nio_put_Byte(gnu::java::nio::DoubleBufferImpl*, jint, jint, jbyte)\n+{\n+}\n+\n+void\n+gnu::java::nio::DoubleBufferImpl::nio_put_Char(gnu::java::nio::DoubleBufferImpl*, jint, jint, jchar)\n+{\n+}\n+\n+void\n+gnu::java::nio::DoubleBufferImpl::nio_put_Short(gnu::java::nio::DoubleBufferImpl*, jint, jint, jshort)\n+{\n+}\n+\n+void\n+gnu::java::nio::DoubleBufferImpl::nio_put_Int(gnu::java::nio::DoubleBufferImpl*, jint, jint, jint)\n+{\n+}\n+\n+void\n+gnu::java::nio::DoubleBufferImpl::nio_put_Long(gnu::java::nio::DoubleBufferImpl*, jint, jint, jlong)\n+{\n+}\n+\n+void\n+gnu::java::nio::DoubleBufferImpl::nio_put_Float(gnu::java::nio::DoubleBufferImpl*, jint, jint, jfloat)\n+{\n+}\n+\n+void\n+gnu::java::nio::DoubleBufferImpl::nio_put_Double(gnu::java::nio::DoubleBufferImpl*, jint, jint, jdouble)\n+{\n+}\n+\n+jbyte\n+gnu::java::nio::DoubleBufferImpl::nio_get_Byte(gnu::java::nio::DoubleBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jchar\n+gnu::java::nio::DoubleBufferImpl::nio_get_Char(gnu::java::nio::DoubleBufferImpl*, jint, jint)\n+{\n+  return ' ';\n+}\n+\n+jshort\n+gnu::java::nio::DoubleBufferImpl::nio_get_Short(gnu::java::nio::DoubleBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::java::nio::DoubleBufferImpl::nio_get_Int(gnu::java::nio::DoubleBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jlong\n+gnu::java::nio::DoubleBufferImpl::nio_get_Long(gnu::java::nio::DoubleBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jfloat\n+gnu::java::nio::DoubleBufferImpl::nio_get_Float(gnu::java::nio::DoubleBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}\n+\n+jdouble\n+gnu::java::nio::DoubleBufferImpl::nio_get_Double(gnu::java::nio::DoubleBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}"}, {"sha": "2462be539f9c2a570d7bd40582329d9da3c55450", "filename": "libjava/gnu/java/nio/natFloatBufferImpl.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatFloatBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatFloatBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFloatBufferImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,125 @@\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/java/nio/FloatBufferImpl.h>\n+\n+JArray<jfloat>*\n+gnu::java::nio::FloatBufferImpl::nio_cast(JArray<jbyte>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jfloat>*\n+gnu::java::nio::FloatBufferImpl::nio_cast(JArray<jshort>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jfloat>*\n+gnu::java::nio::FloatBufferImpl::nio_cast(JArray<jint>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jfloat>*\n+gnu::java::nio::FloatBufferImpl::nio_cast(JArray<jlong>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jfloat>*\n+gnu::java::nio::FloatBufferImpl::nio_cast(JArray<jchar>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jfloat>*\n+gnu::java::nio::FloatBufferImpl::nio_cast(JArray<jfloat>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jfloat>*\n+gnu::java::nio::FloatBufferImpl::nio_cast(JArray<jdouble>*)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::java::nio::FloatBufferImpl::nio_put_Byte(gnu::java::nio::FloatBufferImpl*, jint, jint, jbyte)\n+{\n+}\n+\n+void\n+gnu::java::nio::FloatBufferImpl::nio_put_Char(gnu::java::nio::FloatBufferImpl*, jint, jint, jchar)\n+{\n+}\n+\n+void\n+gnu::java::nio::FloatBufferImpl::nio_put_Short(gnu::java::nio::FloatBufferImpl*, jint, jint, jshort)\n+{\n+}\n+\n+void\n+gnu::java::nio::FloatBufferImpl::nio_put_Int(gnu::java::nio::FloatBufferImpl*, jint, jint, jint)\n+{\n+}\n+\n+void\n+gnu::java::nio::FloatBufferImpl::nio_put_Long(gnu::java::nio::FloatBufferImpl*, jint, jint, jlong)\n+{\n+}\n+\n+void\n+gnu::java::nio::FloatBufferImpl::nio_put_Float(gnu::java::nio::FloatBufferImpl*, jint, jint, jfloat)\n+{\n+}\n+\n+void\n+gnu::java::nio::FloatBufferImpl::nio_put_Double(gnu::java::nio::FloatBufferImpl*, jint, jint, jdouble)\n+{\n+}\n+\n+jbyte\n+gnu::java::nio::FloatBufferImpl::nio_get_Byte(gnu::java::nio::FloatBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jchar\n+gnu::java::nio::FloatBufferImpl::nio_get_Char(gnu::java::nio::FloatBufferImpl*, jint, jint)\n+{\n+  return ' ';\n+}\n+\n+jshort\n+gnu::java::nio::FloatBufferImpl::nio_get_Short(gnu::java::nio::FloatBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::java::nio::FloatBufferImpl::nio_get_Int(gnu::java::nio::FloatBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jlong\n+gnu::java::nio::FloatBufferImpl::nio_get_Long(gnu::java::nio::FloatBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jfloat\n+gnu::java::nio::FloatBufferImpl::nio_get_Float(gnu::java::nio::FloatBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}\n+\n+jdouble\n+gnu::java::nio::FloatBufferImpl::nio_get_Double(gnu::java::nio::FloatBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}"}, {"sha": "6a14653917e2ce8aa444a98a6638ca20a853b026", "filename": "libjava/gnu/java/nio/natIntBufferImpl.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatIntBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatIntBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatIntBufferImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,125 @@\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/java/nio/IntBufferImpl.h>\n+\n+JArray<jint>*\n+gnu::java::nio::IntBufferImpl::nio_cast(JArray<jbyte>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jint>*\n+gnu::java::nio::IntBufferImpl::nio_cast(JArray<jshort>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jint>*\n+gnu::java::nio::IntBufferImpl::nio_cast(JArray<jint>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jint>*\n+gnu::java::nio::IntBufferImpl::nio_cast(JArray<jlong>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jint>*\n+gnu::java::nio::IntBufferImpl::nio_cast(JArray<jchar>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jint>*\n+gnu::java::nio::IntBufferImpl::nio_cast(JArray<jfloat>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jint>*\n+gnu::java::nio::IntBufferImpl::nio_cast(JArray<jdouble>*)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::java::nio::IntBufferImpl::nio_put_Byte(gnu::java::nio::IntBufferImpl*, jint, jint, jbyte)\n+{\n+}\n+\n+void\n+gnu::java::nio::IntBufferImpl::nio_put_Char(gnu::java::nio::IntBufferImpl*, jint, jint, jchar)\n+{\n+}\n+\n+void\n+gnu::java::nio::IntBufferImpl::nio_put_Short(gnu::java::nio::IntBufferImpl*, jint, jint, jshort)\n+{\n+}\n+\n+void\n+gnu::java::nio::IntBufferImpl::nio_put_Int(gnu::java::nio::IntBufferImpl*, jint, jint, jint)\n+{\n+}\n+\n+void\n+gnu::java::nio::IntBufferImpl::nio_put_Long(gnu::java::nio::IntBufferImpl*, jint, jint, jlong)\n+{\n+}\n+\n+void\n+gnu::java::nio::IntBufferImpl::nio_put_Float(gnu::java::nio::IntBufferImpl*, jint, jint, jfloat)\n+{\n+}\n+\n+void\n+gnu::java::nio::IntBufferImpl::nio_put_Double(gnu::java::nio::IntBufferImpl*, jint, jint, jdouble)\n+{\n+}\n+\n+jbyte\n+gnu::java::nio::IntBufferImpl::nio_get_Byte(gnu::java::nio::IntBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jchar\n+gnu::java::nio::IntBufferImpl::nio_get_Char(gnu::java::nio::IntBufferImpl*, jint, jint)\n+{\n+  return ' ';\n+}\n+\n+jshort\n+gnu::java::nio::IntBufferImpl::nio_get_Short(gnu::java::nio::IntBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::java::nio::IntBufferImpl::nio_get_Int(gnu::java::nio::IntBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jlong\n+gnu::java::nio::IntBufferImpl::nio_get_Long(gnu::java::nio::IntBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jfloat\n+gnu::java::nio::IntBufferImpl::nio_get_Float(gnu::java::nio::IntBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}\n+\n+jdouble\n+gnu::java::nio::IntBufferImpl::nio_get_Double(gnu::java::nio::IntBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}"}, {"sha": "ea21f475c612ed620e53727ae1981eadc906566d", "filename": "libjava/gnu/java/nio/natLongBufferImpl.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatLongBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatLongBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatLongBufferImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,125 @@\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/java/nio/LongBufferImpl.h>\n+\n+JArray<jlong>*\n+gnu::java::nio::LongBufferImpl::nio_cast(JArray<jbyte>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jlong>*\n+gnu::java::nio::LongBufferImpl::nio_cast(JArray<jshort>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jlong>*\n+gnu::java::nio::LongBufferImpl::nio_cast(JArray<jint>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jlong>*\n+gnu::java::nio::LongBufferImpl::nio_cast(JArray<jlong>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jlong>*\n+gnu::java::nio::LongBufferImpl::nio_cast(JArray<jchar>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jlong>*\n+gnu::java::nio::LongBufferImpl::nio_cast(JArray<jfloat>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jlong>*\n+gnu::java::nio::LongBufferImpl::nio_cast(JArray<jdouble>*)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::java::nio::LongBufferImpl::nio_put_Byte(gnu::java::nio::LongBufferImpl*, jint, jint, jbyte)\n+{\n+}\n+\n+void\n+gnu::java::nio::LongBufferImpl::nio_put_Char(gnu::java::nio::LongBufferImpl*, jint, jint, jchar)\n+{\n+}\n+\n+void\n+gnu::java::nio::LongBufferImpl::nio_put_Short(gnu::java::nio::LongBufferImpl*, jint, jint, jshort)\n+{\n+}\n+\n+void\n+gnu::java::nio::LongBufferImpl::nio_put_Int(gnu::java::nio::LongBufferImpl*, jint, jint, jint)\n+{\n+}\n+\n+void\n+gnu::java::nio::LongBufferImpl::nio_put_Long(gnu::java::nio::LongBufferImpl*, jint, jint, jlong)\n+{\n+}\n+\n+void\n+gnu::java::nio::LongBufferImpl::nio_put_Float(gnu::java::nio::LongBufferImpl*, jint, jint, jfloat)\n+{\n+}\n+\n+void\n+gnu::java::nio::LongBufferImpl::nio_put_Double(gnu::java::nio::LongBufferImpl*, jint, jint, jdouble)\n+{\n+}\n+\n+jbyte\n+gnu::java::nio::LongBufferImpl::nio_get_Byte(gnu::java::nio::LongBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jchar\n+gnu::java::nio::LongBufferImpl::nio_get_Char(gnu::java::nio::LongBufferImpl*, jint, jint)\n+{\n+  return ' ';\n+}\n+\n+jshort\n+gnu::java::nio::LongBufferImpl::nio_get_Short(gnu::java::nio::LongBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::java::nio::LongBufferImpl::nio_get_Int(gnu::java::nio::LongBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jlong\n+gnu::java::nio::LongBufferImpl::nio_get_Long(gnu::java::nio::LongBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jfloat\n+gnu::java::nio::LongBufferImpl::nio_get_Float(gnu::java::nio::LongBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}\n+\n+jdouble\n+gnu::java::nio::LongBufferImpl::nio_get_Double(gnu::java::nio::LongBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}"}, {"sha": "d7185828d592c3a6c842825cb7805364e446c9b1", "filename": "libjava/gnu/java/nio/natSelectorImpl.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,126 @@\n+// natSelectorImpl.cc\n+\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <platform.h>\n+\n+#include <errno.h>\n+#include <string.h>\n+\n+#if HAVE_BSTRING_H\n+// Needed for bzero, implicitly used by FD_ZERO on IRIX 5.2 \n+#include <bstring.h>\n+#endif\n+\n+//#include <gcj/cni.h>\n+#include <gnu/java/nio/SelectorImpl.h>\n+#include <java/io/IOException.h>\n+\n+void\n+helper_put_filedescriptors (jintArray java_fd_array, fd_set& fds, int& max_fd)\n+{\n+  int counter;\n+  jint* java_fds;\n+\n+  java_fds = elements (java_fd_array);\n+\n+  for (counter = 0; counter < JvGetArrayLength (java_fd_array); counter++)\n+    {\n+      FD_SET (java_fds [counter], &fds);\n+\n+      if (java_fds [counter] > max_fd)\n+        {\n+          max_fd = java_fds [counter];\n+        }\n+    }\n+}\n+\n+void\n+helper_get_filedescriptors (jintArray& java_fd_array, fd_set fds)\n+{\n+  int counter;\n+  int counter_fds;\n+  jint* java_fds;\n+  jintArray new_array_fds;\n+  jint* new_data_fds;\n+\n+  counter_fds = 0;\n+  java_fds = elements (java_fd_array);\n+\n+  for (counter = 0; counter < JvGetArrayLength (java_fd_array); counter++)\n+    {\n+      if (FD_ISSET (java_fds[counter], &fds))\n+        {\n+          counter_fds++;\n+        }\n+    }\n+\n+  new_array_fds = JvNewIntArray (counter_fds);\n+  new_data_fds = elements (new_array_fds);\n+\n+  for (counter = 0; counter < JvGetArrayLength (java_fd_array); counter++)\n+    {\n+      if (FD_ISSET (java_fds[counter], &fds))\n+        {\n+          new_data_fds[counter] = java_fds[counter];\n+        }      \n+    }\n+\n+  java_fd_array = new_array_fds;\n+}\n+\n+jint\n+gnu::java::nio::SelectorImpl::java_do_select (jintArray read, jintArray write,\n+                                              jintArray except, jlong timeout)\n+{\n+  jint result;\n+  int max_fd = 0;\n+  fd_set read_fds;\n+  fd_set write_fds;\n+  fd_set except_fds;\n+  struct timeval real_time_data;\n+  struct timeval *time_data = NULL;\n+\n+  real_time_data.tv_sec = 0;\n+  real_time_data.tv_usec = timeout;\n+\n+  // If not legal timeout value is given, use NULL.\n+  // This means an infinite timeout.\n+  if (timeout >= 0)\n+    {\n+      time_data = &real_time_data;\n+    }\n+\n+  // Reset all fd_set structures\n+  FD_ZERO (&read_fds);\n+  FD_ZERO (&write_fds);\n+  FD_ZERO (&except_fds);\n+\n+  // Fill the fd_set data structures for the _Jv_select() call.\n+  helper_put_filedescriptors (read, read_fds, max_fd);\n+  helper_put_filedescriptors (write, write_fds, max_fd);\n+  helper_put_filedescriptors (except, except_fds, max_fd);\n+\n+  // Actually do the select\n+  result = _Jv_select (max_fd + 1, &read_fds, &write_fds, &except_fds, time_data);\n+\n+  if (result < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  // Set the file descriptors according to the values returned from select().\n+  helper_get_filedescriptors (read, read_fds);\n+  helper_get_filedescriptors (write, write_fds);\n+  helper_get_filedescriptors (except, except_fds);\n+\n+  return result;\n+}"}, {"sha": "1f7d7fc689057f20d628900aac88ef7667f27a90", "filename": "libjava/gnu/java/nio/natServerSocketChannelImpl.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatServerSocketChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatServerSocketChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatServerSocketChannelImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,77 @@\n+// natSelectorImpl.cc\n+\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <platform.h>\n+\n+#include <errno.h>\n+#include <netinet/in.h>\n+\n+#include <gcj/cni.h>\n+#include <gnu/java/nio/ServerSocketChannelImpl.h>\n+#include <gnu/java/nio/SocketChannelImpl.h>\n+#include <java/io/IOException.h>\n+#include <java/net/InetSocketAddress.h>\n+#include <java/net/SocketException.h>\n+\n+union SockAddr\n+{\n+  struct sockaddr_in address;\n+#ifdef HAVE_INET6\n+  struct sockaddr_in6 address6;\n+#endif\n+};\n+\n+jint\n+gnu::java::nio::ServerSocketChannelImpl::SocketAccept (\n+                                           ServerSocketChannelImpl* socket,\n+                                           SocketChannelImpl* s)\n+{\n+  union SockAddr u;\n+  struct sockaddr *ptr = (struct sockaddr *) &u.address;\n+  socklen_t addrlen = sizeof(struct sockaddr);\n+/*\n+  jbyteArray haddress = socket->sa->getAddress ()->addr;\n+  jbyte *bytes = elements (haddress);\n+  int len = haddress->length;\n+\n+  if (len == 4)\n+    {\n+      u.address.sin_family = AF_INET;\n+      memcpy (&u.address.sin_addr, bytes, len);\n+      len = sizeof (struct sockaddr_in);\n+      u.address.sin_port = htons ( socket->sa->getPort ());\n+    }\n+#ifdef HAVE_INET6\n+  else if (len == 16)\n+    {\n+      u.address6.sin6_family = AF_INET6;\n+      memcpy (&u.address6.sin6_addr, bytes, len);\n+      len = sizeof (struct sockaddr_in6);\n+      u.address6.sin6_port = htons (socket->sa->getPort ());\n+    }\n+#endif\n+  else\n+    throw new ::java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n+*/\n+\n+  int sock = _Jv_accept (socket->fd, ptr, &addrlen);\n+\n+  // FIXME: write address/port in ptr into java variables\n+\n+  if (sock < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  s->fd = sock;\n+  return sock;\n+}"}, {"sha": "bfcfe28a6e220411d26d94c629880f3a8f996e01", "filename": "libjava/gnu/java/nio/natShortBufferImpl.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatShortBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatShortBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatShortBufferImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,125 @@\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/java/nio/ShortBufferImpl.h>\n+\n+JArray<jshort>*\n+gnu::java::nio::ShortBufferImpl::nio_cast(JArray<jbyte>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jshort>*\n+gnu::java::nio::ShortBufferImpl::nio_cast(JArray<jshort>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jshort>*\n+gnu::java::nio::ShortBufferImpl::nio_cast(JArray<jint>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jshort>*\n+gnu::java::nio::ShortBufferImpl::nio_cast(JArray<jlong>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jshort>*\n+gnu::java::nio::ShortBufferImpl::nio_cast(JArray<jchar>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jshort>*\n+gnu::java::nio::ShortBufferImpl::nio_cast(JArray<jfloat>*)\n+{\n+  return NULL;\n+}\n+\n+JArray<jshort>*\n+gnu::java::nio::ShortBufferImpl::nio_cast(JArray<jdouble>*)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::java::nio::ShortBufferImpl::nio_put_Byte(gnu::java::nio::ShortBufferImpl*, jint, jint, jbyte)\n+{\n+}\n+\n+void\n+gnu::java::nio::ShortBufferImpl::nio_put_Char(gnu::java::nio::ShortBufferImpl*, jint, jint, jchar)\n+{\n+}\n+\n+void\n+gnu::java::nio::ShortBufferImpl::nio_put_Short(gnu::java::nio::ShortBufferImpl*, jint, jint, jshort)\n+{\n+}\n+\n+void\n+gnu::java::nio::ShortBufferImpl::nio_put_Int(gnu::java::nio::ShortBufferImpl*, jint, jint, jint)\n+{\n+}\n+\n+void\n+gnu::java::nio::ShortBufferImpl::nio_put_Long(gnu::java::nio::ShortBufferImpl*, jint, jint, jlong)\n+{\n+}\n+\n+void\n+gnu::java::nio::ShortBufferImpl::nio_put_Float(gnu::java::nio::ShortBufferImpl*, jint, jint, jfloat)\n+{\n+}\n+\n+void\n+gnu::java::nio::ShortBufferImpl::nio_put_Double(gnu::java::nio::ShortBufferImpl*, jint, jint, jdouble)\n+{\n+}\n+\n+jbyte\n+gnu::java::nio::ShortBufferImpl::nio_get_Byte(gnu::java::nio::ShortBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jchar\n+gnu::java::nio::ShortBufferImpl::nio_get_Char(gnu::java::nio::ShortBufferImpl*, jint, jint)\n+{\n+  return ' ';\n+}\n+\n+jshort\n+gnu::java::nio::ShortBufferImpl::nio_get_Short(gnu::java::nio::ShortBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::java::nio::ShortBufferImpl::nio_get_Int(gnu::java::nio::ShortBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jlong\n+gnu::java::nio::ShortBufferImpl::nio_get_Long(gnu::java::nio::ShortBufferImpl*, jint, jint)\n+{\n+  return 0;\n+}\n+\n+jfloat\n+gnu::java::nio::ShortBufferImpl::nio_get_Float(gnu::java::nio::ShortBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}\n+\n+jdouble\n+gnu::java::nio::ShortBufferImpl::nio_get_Double(gnu::java::nio::ShortBufferImpl*, jint, jint)\n+{\n+  return 0.0;\n+}"}, {"sha": "4e6c6da37829d6a8252e4fe08bbee20eff446ccb", "filename": "libjava/gnu/java/nio/natSocketChannelImpl.cc", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatSocketChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a21d46b069364ec843a60a6b9fe1c527825944/libjava%2Fgnu%2Fjava%2Fnio%2FnatSocketChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatSocketChannelImpl.cc?ref=38a21d46b069364ec843a60a6b9fe1c527825944", "patch": "@@ -0,0 +1,130 @@\n+// natSelectorImpl.cc\n+\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <platform.h>\n+\n+#include <errno.h>\n+\n+#include <gcj/cni.h>\n+#include <gnu/java/nio/SocketChannelImpl.h>\n+#include <java/io/IOException.h>\n+#include <java/net/InetAddress.h>\n+#include <java/net/SocketException.h>\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketCreate ()\n+{\n+  int sock = _Jv_socket (AF_INET, SOCK_STREAM, 0);\n+\n+  if (sock < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  return sock;\n+}\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketConnect (jint fd,\n+                                                  ::java::net::InetAddress *addr,\n+                                                  jint port)\n+{\n+  int result = _Jv_connect_address (fd, addr, port, addr, port);\n+\n+  if (result < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  return result;\n+}\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketBind (jint fd,\n+                                               ::java::net::InetAddress *addr,\n+                                               jint port)\n+{\n+  int result = _Jv_bind_address (fd, addr, port);\n+\n+  if (result < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  return result;\n+}\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketListen (jint fd, jint backlog)\n+{\n+  int result = _Jv_listen (fd, backlog);\n+\n+  if (result < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  return result;\n+}\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketAvailable (jint /*fd*/)\n+{\n+  throw new ::java::net::SocketException (JvNewStringLatin1 (\"SocketAvailable: not implemented\"));\n+}\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketClose (jint fd)\n+{\n+  int result = _Jv_close (fd);\n+\n+  if (result < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  return result;\n+}\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketRead (jint fd, jbyteArray data,\n+                                               jint offset, jint length)\n+{\n+  int result = ::recv (fd, data, offset, length);\n+\n+  if (result < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  return result;\n+}\n+\n+jint\n+gnu::java::nio::SocketChannelImpl::SocketWrite (jint fd, jbyteArray data,\n+                                                jint offset, jint length)\n+{\n+  int result = ::send (fd, data, offset, length);\n+\n+  if (result < 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n+    }\n+\n+  return result;\n+}"}]}