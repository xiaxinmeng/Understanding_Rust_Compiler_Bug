{"sha": "e9b54d6447926ed75338187b33949009cf4afbbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTliNTRkNjQ0NzkyNmVkNzUzMzgxODdiMzM5NDkwMDljZjRhZmJiYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T11:27:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T11:27:52Z"}, "message": "Resync\n\nFrom-SVN: r130891", "tree": {"sha": "d8a2c260756d6e6019049005d646531314d44460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8a2c260756d6e6019049005d646531314d44460"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9b54d6447926ed75338187b33949009cf4afbbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b54d6447926ed75338187b33949009cf4afbbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b54d6447926ed75338187b33949009cf4afbbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b54d6447926ed75338187b33949009cf4afbbb/comments", "author": null, "committer": null, "parents": [{"sha": "5bb06e1856e99aed6db9e0aef34e4bd02721443c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb06e1856e99aed6db9e0aef34e4bd02721443c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb06e1856e99aed6db9e0aef34e4bd02721443c"}], "stats": {"total": 1136, "additions": 1136, "deletions": 0}, "files": [{"sha": "8a8c08e08b85dcb186a620fbb3e2f7eaa1f585a1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1136, "deletions": 0, "changes": 1136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b54d6447926ed75338187b33949009cf4afbbb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b54d6447926ed75338187b33949009cf4afbbb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e9b54d6447926ed75338187b33949009cf4afbbb", "patch": "@@ -1,3 +1,1139 @@\n+2007-12-13  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_pthread_setaffinity_np): New routine. A dummy\n+\t version is provided for older GNU/Linux distribution not\n+\t supporting thread affinity sets.\n+\t\n+\t* s-osinte-linux.ads (SC_NPROCESSORS_ONLN): New constant for sysconf\n+\tcall.\n+\t(bit_field): New packed boolean type used by cpu_set_t.\n+\t(cpu_set_t): New type corresponding to the C type with\n+\tthe same name. Note that on the Ada side we use a bit\n+\tfield array for the affinity mask. There is not need\n+\tfor the C macro for setting individual bit.\n+\t(pthread_setaffinity_np): New imported routine.\n+\t\n+\t* s-taprop-linux.adb (Enter_Task): Check that the CPU affinity mask is\n+\tno null.\n+\t(Create_Task): Set the processor affinity mask if information\n+\tis present.\n+\t\n+\t* s-tasinf-linux.ads, s-tasinf-linux.adb: New files.\n+\t\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-osinte-lynxos-3.ads, s-osinte-hpux.ads, s-osinte-solaris-posix.ads, \n+\ts-osinte-freebsd.ads, s-osinte-lynxos.ads, s-osinte-tru64.ads, \n+\ts-osinte-mingw.ads, s-osinte-aix.ads, s-osinte-hpux-dce.ads, \n+\ts-osinte-irix.ads, s-osinte-solaris.ads, s-intman-vms.adb,\n+\ts-osinte-vms.ads, s-osinte-vxworks6.ads, s-osinte-vxworks.ads,\n+\ts-auxdec.ads, s-auxdec-vms_64.ads, s-osinte-darwin.ads, \n+\ts-taprop-vms.adb, s-interr-sigaction.adb, s-osinte-linux-hppa.ads, \n+\ti-vxwork-x86.ads, s-tpopde-vms.ads: Add missing pragma Convention C\n+\tfor subprogram pointers.\n+\n+\t* g-ctrl_c.adb: New file.\n+\n+\t* g-ctrl_c.ads (Install_Handler): New body.\n+\n+\t* freeze.adb (Freeze_Subprogram): Use new flag Has_Pragma_Inline_Always\n+\tinstead of obsolete function Is_Always_Inlined.\n+\t(Freeze_Entity): check for tagged type in imported C subprogram\n+\t(Freeze_Entity): check for 8-bit boolean in imported C subprogram\n+\t(Freeze_Entity): check for convention Ada subprogram pointer in\n+\timported C subprogram.\n+\t(Freeze_Fixed_Point_Type): In the case of a base type where the low\n+\tbound would be chopped off and go from negative to zero, force\n+\tLoval_Excl_EP to be the same as Loval_Incl_EP (the included lower\n+\tbound) so that the size computation for the base type will take\n+\tnegative values into account.\n+\n+2007-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\t    Tristan Gingold  <gingold@adacore.com>\n+\n+\t* system-linux-ia64.ads, system-freebsd-x86.ads, system-lynxos-ppc.ads, \n+\tsystem-lynxos-x86.ads, system-linux-x86_64.ads, system-tru64.ads, \n+\tsystem-aix.ads, system-vxworks-sparcv9.ads, system-solaris-x86.ads, \n+\tsystem-irix-o32.ads, system-irix-n32.ads, system-hpux.ads, \n+\tsystem-vxworks-m68k.ads, system-linux-x86.ads, system-vxworks-mips.ads, \n+\tsystem-solaris-sparc.ads, system-solaris-sparcv9.ads, system-vms.ads, \n+\tsystem-mingw.ads, system-vms-zcx.ads, system-vxworks-ppc.ads, \n+\tsystem-vxworks-arm.ads, system-darwin-x86.ads, system.ads,\n+\tsystem-vms_64.ads, system-darwin-ppc.ads, system-vxworks-x86.ads, \n+\tsystem-linux-ppc.ads, system-linux-hppa.ads, system-hpux-ia64.ads,\n+\tsystem-vms-ia64.ads (Stack_Check_Limits): New target parameter.\n+\t(Always_Compatible_Rep): New flag to control trampolines globally.\n+\t(Dynamic_Trampolines_Used): New flag for implementing the\n+\tNo_Implicit_Dynamic_Code restriction more correctly (not yet used,\n+\tand not yet set correctly for some targets).\n+\n+\t* s-taprop-vxworks.adb: Use stack limit method of stack checking.\n+\tSimply indirectly call s-stchop when a task is created.\n+\n+\t* ali.ads: \n+\tNew flag added: Stack_Check_Switch_Set which is set when '-fstack-check'\n+\tappears as an argument (entries A) in an ALI file.\n+\n+\t* fe.h (Stack_Check_Limits): Declare new target parameter.\n+\t(Check_Implicit_Dynamic_Code_Allowed): New procedure.\n+\n+\t* init.c: Declare __gnat_set_stack_limit_hook for VxWorks kernel RTS.\n+\tThis variable is declared in C to be sure not subject to elaboration\n+\tcode.\n+\t(__gnat_map_signal, VxWorks): In kernel mode, map SIGILL to\n+\tStorage_Error.\n+\n+\t* targparm.ads, targparm.adb (Stack_Check_Limits): New parameter.\n+\t(Always_Compatible_Rep, Dynamic_Trampolines_Used): New parameters.\n+\n+\t* s-stchop.ads: Add comments.\n+\n+\t* s-stchop-vxworks.adb: Package almost fully rewritten to use stack\n+\tlimit method of stack checking.\n+\n+\t* s-stchop-limit.ads: New file.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch5.adb, s-taskin.adb, a-ciorma.adb, a-coorma.adb, a-cohama.adb, \n+\ta-cihama.adb, g-awk.adb, \n+\ts-inmaop-posix.adb: Update handling of assigned value/unreferenced\n+\twarnings\n+\n+\t* exp_smem.adb: Update handling of assigned value/unreferenced warnings\n+\n+\t* sem.adb: Update handling of assigned value/unreferenced warnings\n+\n+\t* a-exexpr-gcc.adb: Add a pragma warnings off for boolean return\n+\n+\t* lib-xref.ads: Improve documentation for k xref type\n+\n+\t* lib-xref.adb: \n+\tUpdate handling of assigned value/unreferenced warnings\n+\t(Generate_Reference): Warning for reference to entity for which a\n+\tpragma Unreferenced has been given should be unconditional.\n+\tIf the entity is a discriminal, mark the original\n+\tdiscriminant as referenced.\n+\n+\t* sem_warn.ads, sem_warn.adb\n+\t(Check_One_Unit): Test Renamed_In_Spec to control giving warning for\n+\tno entities referenced in package\n+\t(Check_One_Unit): Don't give message about no entities referenced in\n+\ta package if a pragma Unreferenced has appeared.\n+\tHandle new warning flag -gnatw.a/-gnatw.A\n+\tUpdate handling of assigned value/unreferenced warnings\n+\n+\t* atree.h: Add flags up to Flag247\n+\t(Flag231): New macro.\n+\n+2007-12-13  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* adaint.h: (__gnat_plist_init): Not defined for RTX.\n+\n+\t* initialize.c (__gnat_initialize): Do not call __gnat_plist_init for\n+\tRTX systems.\n+\n+\t* Makefile.in: Add new files s-tasinf-linux.ads and s-tasinf-linux.adb.\n+\t(LIBGNAT_TARGET_PAIRS, MISCLIB, THREADSLIB,\n+\tEXTRA_GNATRTL_NONTASKING_OBJS, EXTRA_GNATRTL_TASKING_OBJS,\n+\tGNATLIB_SHARED for RTX run time): Use the versions required by RTX.\n+\n+\t* mingw32.h: \n+\tDo not define GNAT_UNICODE_SUPPORT for RTX since it is not supported.\n+\n+\t* sysdep.c (winflush_function for RTX): Procedure that does nothing\n+\tsince we only have problems with Windows 95/98, which are not\n+\tsupported by RTX.\n+\t(__gnat_ttyname): Return the empty string on Nucleus, just as\n+\tdone on vxworks.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-textio.adb, a-textio.ads: \n+\tExtensive changes to private part for wide character encoding\n+\n+\t* a-witeio.adb, a-witeio.ads, a-ztexio.ads, a-ztexio.adb\n+\t(Look_Ahead): Fix mishandling of encoded sequences\n+\tMove declaration of Wch_Con to private part (should not be visible)\n+\n+\t* ali.adb (Scan_ALI): Set default encoding method to brackets instead of\n+\tUTF-8. Probably this is never used, but if it is, brackets is\n+\tclearly correct.\n+\n+\t* bindgen.adb (Get_WC_Encoding): New procedure to properly handle\n+\tsetting wide character encoding for no main program case and when\n+\tencoding is specified using -W?\n+\tInitialize stack limit of environment task if stack limit method of\n+\tstack checking is enabled.\n+\t(Gen_Adainit_Ada): Use Get_WC_Encoding to output encoding method\n+\t(Gen_Adainit_C): Use Get_WC_Encoding to output encoding method\n+\t(Get_Main_Unit_Name): New function.\n+\t(Gen_Adainit_Ada): Add call to main program for .NET when needed.\n+\t(Gen_Output_File): Set Bind_Main_Program to True for .NET\n+\n+\t* bindusg.adb: Add line for -Wx switch\n+\n+\t* s-wchcon.adb, s-wchcon.ads: (Is_Start_Of_Encoding): New function\n+\tAdd comments\n+\tAdd new useful constant WC_Longest_Sequences\n+\n+\t* switch-b.adb: Clean up handling of -Wx switch\n+\tFor -gnatWx, set Wide_Character_Encoding_Method_Specified\n+\n+\t* switch-c.adb: -gnatg activates warning on assertion errors\n+\tFor -gnatWx, set Wide_Character_Encoding_Method_Specified\n+\n+\t* s-wchcon.adb: (Is_Start_Of_Encoding): New function\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-ngcoty.adb: New pragma Fast_Math\n+\n+\t* opt.adb: New pragma Fast_Math\n+\n+\t* par-prag.adb: \n+\tAdd Implemented_By_Entry to the list of pragmas which do not require any\n+\tspecial processing.\n+\t(Favor_Top_Level): New pragma.\n+\tNew pragma Fast_Math\n+\n+\t* exp_attr.adb: Move Wide_[Wide_]Image routines to Exp_Imgv\n+\t(Expand_N_Attribute_Reference, Displace_Allocator_Pointer,\n+\tExpand_Allocator_Expression): Take into account VM_Target\n+\t(Expand_Attribute, case 'Identity):  Handle properly the case where\n+\tthe prefix is a task interface.\n+\tNew pragma Fast_Math\n+\n+\t* par.adb (Next_Token_Is): New function\n+\t(P_Pragma): Add Skipping parameter\n+\t(U_Left_Paren): New procedure\n+\t(U_Right_Paren): New procedure\n+\tNew pragma Fast_Math\n+\n+\t* par-ch10.adb (P_Subunit): Unconditional msg for missing ) after\n+\tsubunit\n+\tNew pragma Fast_Math\n+\n+\t* sem_prag.adb: Add significance value to table Sig_Flag for pragma\n+\tImplemented_By_Entry.\n+\t(Analyze_Pragma): Add case for Ada 2005 pragma Implemented_By_Entry.\n+\t(Set_Inline_Flags): Do not try to link pragma Inline onto chain of rep\n+\titems, since it can apply to more than one overloadable entity. Set\n+\tnew flag Has_Pragma_Inline_Always for Inline_Always case.\n+\t(Analyze_Pragma, case Complex_Representation): Improve error message.\n+\t(Analyze_Pragma, case Assert): When assertions are disabled build the\n+\trewritten code with Sloc of expression rather than pragma, so new\n+\twarning about failing is not deleted.\n+\t(Analyze_Pragma): Allow pragma Preelaborable_Initialization to apply to\n+\tprotected types and update error message to reflect that. Test whether\n+\tthe protected type is allowed for the pragma (an error is issued if the\n+\ttype has any entries, or components that do not have preelaborable\n+\tinitialization).\n+\tNew pragma Fast_Math\n+\t(Analyze_Pragma, case No_Return): Handle generic instance\n+\n+\t* snames.h, snames.ads, snames.adb: \n+\tAdd new predefined name for interface primitive _Disp_Requeue.\n+\tNew pragma Fast_Math\n+\n+\t* a-tags.ads, a-tags.adb: New calling sequence for\n+\tString_To_Wide_[Wide_]String\n+\t(Secondary_Tag): New subprogram.\n+\n+\t* exp_imgv.ads, exp_imgv.adb: Move Wide_[Wide_]Image routines here\n+\tfrom Exp_Attr\n+\tNew calling sequence for String_To_Wide_[Wide_]String\n+\t(Expand_Image_Attribute): Major rewrite. New calling sequence avoids\n+\tthe use of the secondary stack for image routines.\n+\n+\t* a-except-2005.adb, s-wchstw.ads, s-wchstw.adb, s-wwdenu.adb: New\n+\tcalling sequence for String_To_Wide_[Wide_]String\n+\n+\t* par-ch3.adb (P_Declarative_Items): Recognize use of Overriding in\n+\tAda 95 mode\n+\t(P_Unknown_Discriminant_Part_Opt): Handle missing parens gracefully\n+\tRemove Atree.Delete_Tree/Delete_Node and Nlist.Delete_List\n+\n+\t* par-ch6.adb (P_Subprogram): Recognize use of Overriding in Ada 95 mode\n+\t(P_Formal_Part): Use Skipping parameter in P_Pragma call\n+\tto improve error recovery\n+\n+\t* par-util.adb (Next_Token_Is): New function\n+\t(Signal_Bad_Attribute): Use new Namet.Is_Bad_Spelling_Of function\n+\n+\t* par-ch2.adb (Skip_Pragma_Semicolon): Do not resynchronize to\n+\tsemicolon if missing\n+\t(P_Pragma): Implement new Skipping parameter\n+\tRemove Atree.Delete_Tree/Delete_Node and Nlist.Delete_List\n+\tFix location of flag for unrecognized pragma message\n+\n+\t* par-tchk.adb (U_Left_Paren): New procedure\n+\t(U_Right_Paren): New procedure\n+\n+2007-12-13  Geert Bosch  <bosch@adacore.com>\n+\n+\t* a-tifiio.adb: \n+\t(Put_Int64): Use Put_Digit to advance Pos. This fixes a case where\n+\tthe second or later Scaled_Divide would omit leading zeroes,\n+\tresulting in too few digits produced and a Layout_Error as result.\n+\t(Put): Initialize Pos.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\tatree.ads, atree.adb (Flag231..Flag247): New functions\n+\t(Set_Flag231..Set_Flag247): New procedures\n+\t(Basic_Set_Convention): Rename Set_Convention to be\n+\tBasic_Set_Convention\n+\t(Nkind_In): New functions\n+\tRemove Atree.Delete_Tree/Delete_Node and Nlist.Delete_List\n+\n+\t* exp_ch6.adb (Expand_Call): Use new flag Has_Pragma_Inline_Always\n+\tinstead\n+\t of obsolete function Is_Always_Inlined\n+\t(Register_Predefined_DT_Entry): Initialize slots of the second\n+\tsecondary dispatch table.\n+\tRemove Atree.Delete_Tree/Delete_Node and Nlist.Delete_List\n+\t(Expand_N_Function_Call): Remove special provision for stack checking.\n+\n+\t* exp_util.ads, exp_util.adb (Is_Predefined_Dispatching_Operation):\n+\tInclude _Disp_Requeue in the list of predefined operations.\n+\t(Find_Interface_ADT): Modified to fulfill the new specification.\n+\tRemove Atree.Delete_Tree/Delete_Node and Nlist.Delete_List\n+\n+\t* par-ch4.adb, nlists.ads, nlists.adb: \n+\tRemove Atree.Delete_Tree/Delete_Node and Nlist.Delete_List\n+\n+\t* sinfo.ads, sinfo.adb: (Nkind_In): New functions\n+\tFix location of flag for unrecognized pragma message\n+\n+\t* sem_ch7.adb: Use Nkind_In\n+\n+2007-12-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* opt.ads: \n+\tIndicate what flags are used by the Project Manager, gprbuild and\n+\tgprclean.\n+\t(Opt.Follow_Links_For_Dirs): New flag\n+\t(Warn_On_Assertion_Failure): New flag\n+\t(Wide_Character_Encoding_Method_Specified): New flag\n+\t(Suppress_All_Inlining): New switch set by -fno-inline\n+\t(Real_VMS_Target): New flag\n+\tNew pragma Fast_Math\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* back_end.adb: Recognize -fno-inline\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb: Fix optimization problem with short-circuited form\n+\n+2007-12-13  Bob Duff  <duff@adacore.com>\n+\n+\t* clean.adb (Usage): Add line for -aP\n+\t(Check_Version_And_Help): Change Check_Version_And_Help to be generic,\n+\twith a parameter \"procedure Usage\", instead of passing a pointer to a\n+\tprocedure. This is to eliminate trampolines (since the Usage procedure\n+\tis often nested in a main procedure, and it would be inconvenient to\n+\tunnest it).\n+\n+\t* g-comlin.adb (For_Each_Simple_Switch): Change For_Each_Simple_Switch\n+\tto be generic, with a parameter \"procedure Callback (...)\", instead of\n+\tpassing a pointer to a procedure. This is to eliminate trampolines\n+\t(since the Callback procedure is usually nested).\n+\n+\t* gnatfind.adb, switch.adb, switch.ads, gnatlink.adb, gnatls.adb, \n+\tgnatname.adb, gnatxref.adb, gnatchop.adb, gprep.adb, gnatbind.adb\n+\t(Check_Version_And_Help): Change Check_Version_And_Help to be generic.\n+\n+\t* g-pehage.adb (Compute_Edges_And_Vertices, Build_Identical_Key_Sets):\n+\tUse the generic Heap_Sort_G instead of Heap_Sort_A.\n+\n+2007-12-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: Flag 232 is now Implemented_By_Entry.\n+\t(Implemented_By_Entry, Set_Implemented_By_Entry): New routines.\n+\t(Write_Entry_Flags): Add an entry for Implemented_By_Entry.\n+\t(Renamed_In_Spec): New flag\n+\t(Has_Pragma_Inline_Always): New flag\n+\tAdd missing doc for pragma Obsolescent_Warning\n+\tAdd missing doc for 17 additional unused flags (230-247)\n+\t(Is_Derived_Type): Remove condition \"not Is_Generic_Type\".\n+\tAlphabetize with clauses.\n+\tSeparate Is_Thunk and Has_Thunks flags\n+\t(Write_Entity_Flags): Add forgotten entry for Has_Thunks\n+\t(Related_Interface): Renamed to Related_Type.\n+\t(Has_Thunks/Set_Has_Thunks): Subprograms of new attribute.\n+\t(Set_Is_Flag): Restrict the assertion.\n+\n+2007-12-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* errout.adb (Output_Source_Line): Do not keep a trailing space after\n+\tthe source line number if the source line is empty.\n+\n+2007-12-13  Geert Bosch  <bosch@adacore.com>\n+\n+\t* eval_fat.adb (Decompose_Int): Handle argument of zero.\n+\t(Compose): Remove special casing of zero.\n+\t(Exponent): Likewise.\n+\t(Fraction): Likewise.\n+\t(Machine): Likewise.\n+\t(Decompose): Update comment.\n+\n+2007-12-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): If there is an aggregate for a\n+\tlimited ancestor part, initialize controllers of enclosing record\n+\tbefore expanding ancestor aggregate.\n+\t(Gen_Assign): If a component of the aggregate is box-initialized, add\n+\tcode to call Initialize if the component is controlled, and explicit\n+\tassignment of null if the component is an access type.\n+\n+\tHandle properly aggregates for limited types that appear in object\n+\tdeclarations when the aggregate contains controlled values such as\n+\tprotected types.\n+\tWhen expanding limited aggregates into individual components, do not\n+\tcall Adjust on controlled components that are limited.\n+\n+2007-12-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* expander.adb: Take into account N_Subprogram_Renaming_Declaration\n+\n+2007-12-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Predefined_Primitive_Bodies): Generate the body of\n+\tpredefined primitive _Disp_Requeue.\n+\t(Make_Predefined_Primitive_Specs): Create the spec for predefined\n+\tprimitive _Disp_Requeue.\n+\t(Make_Predefined_Primitive_Specs/Predefined_Primitive_Bodies): Set the\n+\ttype of formal Renamed_Eq to Entity_Id (instead of Node_Id).\n+\t(Make_Predefined_Primitive_Specs): Spec of \"=\" needed if the parent is\n+\tan interface type. In case of limited interfaces we now declare all the\n+\tpredefined primitives associated with synchronized interfaces as\n+\tabstract.\n+\t(Predef_Spec_Or_Body): For interface types generate abstract subprogram\n+\tdeclarations.\n+\t(Predefined_Primitive_Bodies): Add body of \"=\" if the parent of the\n+\ttagged type is an interface type and there is no user-defined equality\n+\tfunction.\n+\tAdd also bodies of predefined primitives associated with synchronized\n+\tinterfaces.\n+\t(Freeze_Record_Type): Do not build bodies of predefined primitives of\n+\tinterface types because they are now defined abstract.\n+\tAdd missing documentation.\n+\t(Expand_Record_Controller): Update occurrence of Related_Interface\n+\tto Related_Type.\n+\t(Build_Offset_To_Top_Functions): Do nothing in case of VM.\n+\t(Expand_N_Object_Declaration): Take into account VM_Target when handling\n+\tclass wide interface object declaration.\n+\t(Expand_Previous_Access_Type): Do not create a duplicate master entity\n+\tif the access type already has one.\n+\t(Expand_N_Object_Declaration): Defend against attempt to validity check\n+\tgeneric types. Noticed for -gnatVcf specified with previous errors.\n+\n+2007-12-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Attribute_Reference, Displace_Allocator_Pointer,\n+\tExpand_Allocator_Expression): Take into account VM_Target\n+\n+\t* exp_ch5.adb (Expand_N_Extended_Return_Statement): Do not use\n+\tsecondary stack when VM_Target /= No_VM\n+\n+2007-12-13  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_N_Package_Body): Replace occurrence of attribute\n+\tIs_Complation_Unit by Is_Library_Level_Entity in the code\n+\tthat decides if the static dispatch tables need to be built.\n+\t(Wrap_Transient_Declaration): Do not generate a finalization call if\n+\tthis is a renaming declaration and the renamed object is a component\n+\tof a controlled type.\n+\n+2007-12-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch8.ads, exp_ch8.adb (Expand_N_Subprogram_Renaming_Declaration):\n+\tIn the case where the renamed subprogram is a dereference, call\n+\tForce_Evaluation on the prefix.\n+\n+2007-12-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Asynchronous_Select,\n+\tExpand_N_Conditional_Entry_Call, Expand_N_Timed_Entry_Call): Code and\n+\tcomment reformatting.\n+\t(Set_Privals): Inherit aliased flag from formal. From code reading.\n+\t(Build_Simple_Entry_Call): Out parameters of an access type are passed\n+\tby copy and initialized from the actual. This includes entry parameters.\n+\t(Expand_N_Requeue_Statement): Reimplement in order to handle both Ada 95\n+\tand Ada 2005 models of requeue.\n+\t(Null_Statements): Still connsider do-end block null if it contains\n+\tUnreferenced and Warnings pragmas.\n+\t(Expand_N_Accept_Statement): Do not optimize away null do end if\n+\tdispatching policy is other than defaulted.\n+\t(Expand_N_Timed_Entry_Call): When the triggering statement is a\n+\tdispatching call, manually analyze the delay statement.\n+\t(Find_Parameter_Type): Move subprogram to Sem_Util.\n+\n+2007-12-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.ads, exp_disp.adb (Default_Prim_Op_Position): Primitive\n+\t_Disp_Requeue occupies dispatch table slot number 15. Move\n+\t_Disp_Timed_Select to slot 16.\n+\t(Make_Disp_Requeue_Body, Make_Disp_Requeue_Spec): New routines which\n+\tgenerate the spec and body of _Disp_Reqeueue.\n+\t(Make_DT): Build and initialize the second dispatch table.\n+\tHandle initialization of RC_Offset when the parent\n+\tis a private type with variable size components.\n+\t(Make_Secondary_DT): Complete documentation. Add support to\n+\tinitialize the second dispatch table.\n+\t(Make_Tags): Generate the tag of the second dispatch table.\n+\t(Register_Primitive): Add support to register primitives in the\n+\tsecond dispatch table.\n+\n+2007-12-13  Pascal Obry  <obry@adacore.com>\n+\n+\t* expect.c (__gnat_kill) [WIN32]: Implement the SIGINT signal on\n+\tWindows. This signal is used by gnatmake to kill child processes for\n+\texample.\n+\n+2007-12-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Add missing\n+\tsupport for generic dispatching constructor calls in which we need to\n+\tlocate the tag of a secondary dispatch table associated with an\n+\tinterface type to properly dispatch the call.\n+\t(Expand_N_Attribute_Reference [case Address],\n+\tExpand_Dispatching_Constructor_Call, Expand_Unc_Deallocation): Fix\n+\thandling of VM targets.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Assert): Recognize new warning flag for\n+\tassert fail\n+\n+\t* ug_words: Add entries for -gnatw.a -gnatw.A\n+\n+\t* sem_res.adb (Set_String_Literal_Subtype): If the context of the\n+\tliteral is a subtype with non-static constraints, use the base type of\n+\tthe context as the base of the string subtype, to prevent type\n+\tmismatches in gigi.\n+\t(Resolve_Actuals): If the actual is an entity name, generate a\n+\treference before the actual is resolved and expanded, to prevent\n+\tspurious warnings on formals of enclosing protected operations.\n+\t(Analyze_Overloaded_Selected_Component): If type of prefix if\n+\tclass-wide, use visible components of base type.\n+\t(Resolve_Selected_Component): Ditto.\n+\t(Resolve_Short_Circuit): Detect case of pragma Assert argument\n+\tevaluating to False, and issue warning message.\n+\n+\t* usage.adb: Add lines for -gnatw.a and -gnatw.A\n+\n+2007-12-13  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-calend.ads (No_Time): New constant, to represent an uninitialized\n+\ttime value\n+\n+\t* g-catiio.ads, g-catiio.adb (Value): Added support for more date\n+\tformats.\n+\t(Month_Name_To_Number): New subprogram\n+\n+\t* g-dirope.adb (Get_Current_Dir): On windows, normalize the drive\n+\tletter to upper-case.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Properly set new flag Opt.Real_VMS_Target\n+\n+\t* layout.adb (Resolve_Attribute, case 'Access): If designated type of\n+\tcontext is a limited view, use non-limited view when available. If the\n+\tnon-limited view is an unconstrained array, this enforces consistency\n+\trequirements in 3.10.2 (27).\n+\t(Layout_Type): For an access type whose designated type is a limited\n+\tview, examine its declaration to determine if it is an unconstrained\n+\tarray, and size the access type accordingly.\n+\t(Layout_Type): Do not force 32-bits for convention c subprogram\n+\tpointers in -gnatdm mode, only if real vms target.\n+\n+\t* sem_attr.adb (Analyze_Access_Attribute): Use new flag\n+\tHas_Pragma_Inline_Always instead of obsolete function Is_Always_Inlined\n+\t(Analyze_Access_Attribute,Attribute_Address): Remove checks for\n+\tviolations of the No_Implicit_Dynamic_Code restriction.\n+\t(Resolve_Attribute, case 'Access): If designated type of context is a\n+\tlimited view, use non-limited view when available. If the non-limited\n+\tview is an unconstrained array, this enforces consistency requirements\n+\tin 3.10.2 (27).\n+\t(Layout_Type): For an access type whose designated type is a limited\n+\tview, examine its declaration to determine if it is an unconstrained\n+\tarray, and size the access type accordingly.\n+\n+2007-12-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (GNATCmd): Do not issue -d= switch to gnatmetric when\n+\tobject directory of main project does not exist.\n+\tOn VMS, correctly set then environment variable for the source\n+\tdirectories.\n+\n+2007-12-13  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* g-regist.ads, g-regist.adb (Set_Value): new parameter Expand; when\n+\tset to True this procedure will create the value of type REG_EXPAND_SZ.\n+\tIt was only possible to create REG_SZ values before.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-spchge.ads, g-spchge.adb, g-u3spch.adb, g-u3spch.ads,\n+\tg-wispch.adb, g-wispch.ads, g-zspche.adb, g-zspche.ads,\n+\tnamet-sp.adb, namet-sp.ads: New files.\n+\n+\t* g-speche.adb: Use generic routine in g-spchge\n+\n+\t* s-wchcnv.ads, s-wchcnv.adb: \n+\tMinor code cleanup (make formal type consistent with spec)\n+\n+\t* namet.adb: Update comments.\n+\n+\t* par-endh.adb (Evaluate_End_Entry): Use new\n+\tNamet.Sp.Is_Bad_Spelling_Of function\n+\n+\t* par-load.adb (Load): Use new Namet.Sp.Is_Bad_Spelling_Of function\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): If a component of an\n+\tancestor is an access type initialized with a box, set its type\n+\texplicitly, for use in subsequent expansion.\n+\t(Check_Misspelled_Component): Use new Namet.Sp.Is_Bad_Spelling_Of\n+\tfunction\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-spipat.adb (Break): Fix accessibility error (vsn taking not null\n+\taccess Vstring)\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* inline.adb (Back_End_Cannot_Inline): Use new flag\n+\tHas_Pragma_Inline_Always instead of obsolete function Is_Always_Inlined\n+\n+\t* sem_ch6.ads, sem_ch6.adb (Analyze_Subprogram_Body): Use new flag\n+\tHas_Pragma_Inline_Always instead.\n+\tof obsolete function Is_Always_Inlined\n+\t(Build_Body_To_Inline): Same change\n+\t(Cannot_Inline): Same change\n+\tDo not give warning on exception raise in No_Return function\n+\n+\t* sem_ch13.adb (Analyze_Record_Representation_Clause): If an inherited\n+\tcomponent has two inconsistent component clauses in the same record\n+\trepresentation clause, favor the message that complains about\n+\tduplication rather than inconsistency.\n+\tUpdate comments.\n+\t(Record_Representation_Clause): Do not warn on missing component\n+\tclauses for inherited components of a type extension.\n+\t(Rep_Item_Too_Late): Do not attempt to link pragma into rep chain for\n+\tan overloadable item if it is a pragma that can apply to multiple\n+\toverloadable entities (e.g. Inline) because a pragma cannot be on\n+\tmore than one chain at a time.\n+\t(Validate_Unchecked_Conversion): Add code to warn on unchecked\n+\tconversion where one of the operands is Ada.Calendar.Time.\n+\t(Analyze_Attribute_Definition_Clause): Fix typo in error message.\n+\tFor now, ignore Component_Size clause on VM targets, as done for\n+\tpragma Pack.\n+\n+2007-12-13  Emmanuel Briot  <briot@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* prj.ads, prj.adb (Is_A_Language): Now takes a Name_Id instead of a\n+\tstring\n+\t(Must_Check_Configuration, Default_Language_Is_Ada): new flags in\n+\tprj.ads\n+\t(Hash): Move instantiation of System.HTable.Hash from spec to body\n+\t(prj-nmsc.adb): Optimize calls to Name_Find when on case sensitive\n+\tsystems, since we do not need to recompute the Name_Id for the canonical\n+\tfile name.\n+\t(Body_Suffix_Id_Of, Spec_Suffix_Id_Of): new version that takes a name_id\n+\tas a parameter. This parameter is in fact always \"ada\" in all calls, and\n+\twe were doing 160560 extra calls to Name_Find to convert it to Name_Ada\n+\twhile loading a project with 40000 files\n+\n+\t* prj-attr.adb: Fix name of attribute Dependency_Driver\n+\tChange the kind of indexing for attribute Root\n+\n+\t* prj-dect.adb (Parse_Declarative_Items): Allow redeclarations of\n+\tvariables already declared, in case constructions.\n+\n+\t* prj-env.adb (Initialize): Reset Current_Source_Path_File and\n+\tCurrent_Object_Path_File to No_Path.\n+\n+\t* prj-ext.adb (Initialize_Project_Path): In multi language mode, use\n+\tADA_PROJECT_PATH if value of GPR_PROJECT_PATH is empty.\n+\n+\t* prj-makr.adb: new parameter Current_Dir\n+\n+\t* prj-nmsc.ads, prj-nmsc.adb (Find_Explicit_Sources): Do not look for\n+\tAda sources when language is not Ada.\n+\tChange Opt.Follow_Links to Opt.Follow_Links_For_Files.\n+\t(Find_Excluded_Sources, Find_Explicit_Sources): new subprograms\n+\t(Must_Check_Configuration, Default_Language_Is_Ada): new flags.\n+\t(Locate_Directory): Always resolve links when computing Canonical_Path\n+\t(Look_For_Sources): Make sure that Name_Buffer contains the file name\n+\tin Source_Files before checking for the presence of a directory\n+\tseparator.\n+\tOptimize calls to Name_Find when on case sensitive systems.\n+\t(Body_Suffix_Id_Of, Spec_Suffix_Id_Of): new version that takes a name_id\n+\tas a parameter.\n+\t(Prj.Nmsc.Check): new parameter Current_Dir\n+\t(Check_Ada_Naming_Schemes): Restrictions on suffixes are relaxed. They\n+\tcannot be empty and the spec suffix cannot be the same as the body or\n+\tseparate suffix.\n+\t(Get_Unit): When a file name can be of several unit kinds (spec, body or\n+\tsubunit), always consider the longest suffix.\n+\t(Check_Configuration): Do not issue an error if there is no compiler\n+\tfor a language. Just issue a warning and ignore the sources for the\n+\tlanguage.\n+\t(Check_Library_Attributes): Only check Library_Dir if Library_Name is\n+\tnot empty.\n+\t(Check_Naming_Schemes.Maked_Unit): Only output message if high verbosity\n+\t(Unit_Exceptions): New hash table\n+\t(Check_Naming_Schemes): Check if a file that could be a unit because of\n+\tthe naming scheme is not in fact a source because there is an exception\n+\tfor the unit.\n+\t(Look_For_Sources): Put the unit exceptions in hash table\n+\tUnit_Exceptions\n+\t(Get_Unit_Exceptions): Give initial value No_Source to local variable\n+\tOther_Part to avoid exception when code is compiled with validity\n+\tchecking.\n+\t(Get_Sources_From_File): Check that there is no directory information\n+\tin the file names.\n+\t(Look_For_Sources): Check that there is no directory information in the\n+\tlist of file names in Source_Files.\n+\t(Look_For_Sources): In multi-language mode, do not allow exception file\n+\tnames that are excluded.\n+\t(Excluded_Sources_Htable): New hash table\n+\t(Search_Directories.Check_File): New procedure to simplify\n+\tSearch_Directories.\n+\t(Search_Directories): Do not consider excluded sources\n+\t(Look_For_Sources): Populate Excluded_Sources_Htable before calling\n+\tSearch_Directories.\n+\t(Get_Exceptions): Set component Lang_Kind of Source_Data\n+\t(Get_Unit_Exceptions): Ditto\n+\t(Search_Directories): Ditto\n+\n+\t* prj-pars.adb: new parameter Current_Dir\n+\n+\t* prj-part.ads, prj-part.adb: \n+\tChange Opt.Follow_Links to Opt.Follow_Links_For_Files.\n+\t(Opt.Follow_Links_For_Dirs): New flag\n+\t(Project_Path_Name_Of): Cache information returned by this routine as\n+\tLocate_Regular_File is a costly routine. The code to output a log\n+\tinformation and the effective call to Locate_Regular_File is now\n+\tfactorized into a routine (code clean-up).\n+\t(Parse, Parse_Single_Project): new parameter Current_Dir\n+\tWhen main project file cannot be found, indicate in the error\n+\tmessage the project path that was used to do the search.\n+\n+\t* prj-proc.ads, prj-proc.adb (Opt.Follow_Links_For_Dirs): New flag\n+\t(Prj.Proc.Process*): new parameter Current_Dir\n+\n+\t* switch-m.adb: Change Opt.Follow_Links to Opt.Follow_Links_For_Files\n+\n+2007-12-13  Bob Duff  <duff@adacore.com>\n+\n+\t* restrict.ads, restrict.adb (Check_Implicit_Dynamic_Code_Allowed): New\n+\tprocedure to be called from the back end to check the\n+\tNo_Implicit_Dynamic_Code restriction.\n+\n+2007-12-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* rtsfind.adb (Check_CRT): Take into account RTE_Available_Call\n+\tFixes another case where RTE_Available_Call was ignored instead of being\n+\ttaken into account.\n+\t(Load_Fail): Ditto.\n+\n+\t* rtsfind.ads: Add new entries.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-byorma.adb, g-byorma.ads, g-decstr.adb, g-decstr.ads,\n+\tg-deutst.ads, g-encstr.adb, g-encstr.ads, g-enutst.ads: New files.\n+\n+\t* scn.adb: Implement BOM recognition\n+\n+2007-12-13  Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Check_Private_Child_Unit): A non-private library level\n+\tsubprogram body that acts as its own spec may not have a non-private\n+\tWITH clause on a private sibling.\n+\t(Build_Unit_Name): If the parent unit in the name in a with_clause on a\n+\tchild unit is a renaming, create an implicit with_clause on that\n+\tparent, and not on the unit it renames, to prevent visibility errors\n+\tin the current unit.\n+\n+2007-12-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Formal_Subprogram): In the subprogram\n+\trenaming declaration, use the Slocs of the formal parameters from the\n+\tdeclaration of the formal subprogram when creating the formal parameter\n+\tentities in the renaming declaration.\n+\t(Analyze_Formal_Type_Declaration): Change the placement of the error\n+\tmessage concerning illegal known discriminants. It is now posted on the\n+\ttype rather than on the first discriminant. This change ensures early\n+\terror report.\n+\t(Freeze_Subprogram_Body): If the generic subprogram is nested within\n+\tthe package body that contains the instance, do not generate an\n+\tout-of-place freeze node for the enclosing package.\n+\t(Collect_Previous_Instantiations): Ignore internal instantiations\n+\tgenerated for formal packages.\n+\t(Validate_Derived_Type_Instance): Add a check that when a formal\n+\tderived type is Known_To_Have_Preelab_Init then the actual type must\n+\thave preelaborable initialization, and issue an error when this\n+\tcondition is violated.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-imenne.adb, s-imenne.ads: New files.\n+\n+\t* s-imgboo.adb, s-imgboo.ads, s-imgcha.adb, s-imgcha.ads, s-imgdec.adb, \n+\ts-imgdec.ads, s-imgenu.ads, s-imgint.adb, s-imgint.ads, s-imglld.adb, \n+\ts-imglld.ads, s-imglli.adb, s-imglli.ads, s-imgllu.adb, s-imgllu.ads, \n+\ts-imgrea.adb, s-imgrea.ads, s-imguns.adb, s-imguns.ads, s-imgwch.adb, \n+\ts-imgwch.ads: New calling sequence for Image routines to avoid sec\n+\tstack usage.\n+\n+2007-12-13  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Check_Abstract_Overriding): Avoid\n+\tgeneration of spurious error if parent is an interface type; caused\n+\tbecause predefined primitive bodies will be generated later by\n+\tFreeze_Record_Type.\n+\t(Process_Subtype): The subtype inherits the Known_To_Have_Preelab_Init\n+\tflag.\n+\t(Derive_Subprograms): Handle derivations of predefined primitives\n+\tafter all the user-defined primitives to ensure that they are\n+\tfound in proper order in instantiations.\n+\t(Add_Interface_Tag_Components, Inherit_Components): Update occurrences\n+\tof Related_Interface to Related_Type.\n+\t(Record_Type_Declaration): Minor reordering of calls to decorate the\n+\tTag component because the entity must have set its Ekind attribute\n+\tbefore setting its Is_Tag attribute.\n+\t(Analyze_Subtype_Declaration): In the case of subtypes with\n+\tPrivate_Kind, inherit Known_To_Have_Preelab_Init from the parent.\n+\n+2007-12-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): Include the requeue\n+\tstatement to the list of contexts where a selected component with a\n+\tconcurrent tagged type prefix should yield a primitive operation.\n+\t(Find_Primitive_Operation): Handle case of class-wide types.\n+\t(Analyze_Overloaded_Selected_Component): If type of prefix is\n+\tclass-wide, use visible components of base type.\n+\t(Resolve_Selected_Component): Ditto.\n+\t(Try_Primitive_Operation, Collect_Generic_Type_Ops): If the type is a\n+\tformal of a generic subprogram. find candidate interpretations by\n+\tscanning the list of generic formal declarations.:\n+\t(Process_Implicit_Dereference_Prefix): If the prefix has an incomplete\n+\ttype from a limited_with_clause, and the full view is available, use it\n+\tfor subsequent semantic checks.\n+\t(Check_Misspelled_Selector): Use Namet.Sp.Is_Bad_Spelling_Of function\n+\t(Find_Primitive_Operation): New function.\n+\t(Analyze_Overloaded_Selected_Component): insert explicit dereference\n+\tonly once if several interpretations of the prefix yield an access type.\n+\t(Try_Object_Operation): Code and comment cleanup.\n+\t(Analyze_Selected_Component): Reorder local variables. Minot comment and\n+\tcode reformatting. When the type of the prefix is tagged concurrent, a\n+\tcorrect interpretation might be available in the primitive and\n+\tclass-wide operations of the type.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Special error message for\n+\trenaming entry as subprogram using rename-as-body if subprogram spec\n+\tfrozen.\n+\t(Use_One_Type): The clause is legal on an access type whose designated\n+\ttype has a limited view.\n+\t(Find_Direct_Name): Use Namet.Sp.Is_Bad_Spelling_Of function\n+\t(Find_Expanded_Name): Use Namet.Sp.Is_Bad_Spelling_Of function\n+\t(Analyze_Renamed_Primitive_Operation): new procedure to determine the\n+\toperation denoted by a selected component.\n+\t(Analyze_Renamed_Entry): Resolve the prefix of the entry name, because\n+\tit can be an expression, possibly overloaded, that returns a task or\n+\tan access to one.\n+\n+2007-12-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch9.adb (Analyze_Requeue): Add a local flag to capture whether a\n+\trequeue statement is dispatching. Do not emit an error when the name is\n+\tnot an entry and the context is a dispatching select. Add code to\n+\tperform subtype conformance between the formals of the current entry\n+\tand those of the target interface primitive.\n+\t(Analyze_Asynchronous_Select, Analyze_Conditional_Entry_Call, Analyze_\n+\tTimed_Entry_Call): Analyze the triggering statement as the first step of\n+\tthe processing. If this is a dispatching select, postpone the analysis\n+\tof all select statements until the Expander transforms the select. This\n+\tapproach avoids generating duplicate identifiers after the Expander has\n+\treplicated some of the select statements. In case the Expander is\n+\tdisabled, perform regular analysis.\n+\t(Check_Triggering_Statement): New routine.\n+\t(Analyze_Requeue): Exclude any interpretations that are not entries when\n+\tchecking overloaded names in a requeue. Also test type conformance for\n+\tmatching interpretations rather than requiring subtype conformance at\n+\tthat point to conform with the RM's resolution rule for requeues.\n+\n+2007-12-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Call): If an actual in a call to an\n+\tinherited operation is a defaulted tag-indeterminate call, and there is\n+\ta statically tagged actual, use the static tag as a controlling actual\n+\tfor the defaulted actual.\n+\n+2007-12-13  Geert Bosch  <bosch@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Real_Literal): N_Constant_Declaration is a static\n+\tcontext, so do not call Check_Non_Static_Context.\n+\n+2007-12-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_type.adb (Function_Interp_Has_Abstract_Op): Add guard to check\n+\twhether formal E is an entity which may have parameters.\n+\n+2007-12-13  Bob Duff  <duff@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Concurrent_Interface): New routine.\n+\t(Set_Convention): New procedure to set the Convention flag, and in\n+\taddition make sure the Favor_Top_Level flag is kept in sync (all\n+\tforeign-language conventions require Favor_Top_Level = True).\n+\t(Collect_Abstract_Interfaces): Update occurrences of Related_Interface\n+\tto Related_Type.\n+\t(Collect_Interfaces_Info): Minor update to handle the two secondary\n+\tdispatch tables. Update occurrence of Related_Interface to Related_Type.\n+\t(Generate_Parent_Ref): Add parameter to specify entity to check\n+\t(Is_Preelaborable_Expression): Allow the name of a discriminant to\n+\tinitialize a component of a type with preelaborable initialization.\n+\tThis includes the case of a discriminal used in such a context.\n+\t(Is_Dependent_Component_Of_Mutable_Object): Take into account the\n+\tlatest Ada 2005 rules about renaming and 'Access of\n+\tdiscriminant-dependent components.\n+\t(Check_Nested_Access): Add handling when there are no enclosing\n+\tsubprograms (e.g. case of a package body).\n+\t(Find_Parameter_Type): Factor routine from several other compiler files.\n+\tRemove routine from Find_Overridden_Synchronized_Primitive.\n+\n+2007-12-13  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sinput.adb (Get_Source_File_Index): Add assertion to guard against\n+\tan invalid access to an uninitialized slot in the\n+\tSource_File_Index_Table.\n+\n+2007-12-13  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sinput-l.adb (Load_File): Disable style checks when preprocessing.\n+\n+2007-12-13  Bob Duff  <duff@adacore.com>\n+\n+\t* s-soflin.ads: Apply new pragma Favor_Top_Level to all\n+\taccess-to-subprogram types in this package.\n+\n+2007-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* s-stausa.ads (Stack_Analyzer): Remove First_Is_Topmost, redundant\n+\twith Stack_Grows_Down in System.Parameters. Rename Array_Address into\n+\tStack_Overlay_Address and document that we are using an internal\n+\tabstraction.\n+\t(Byte_Size, Unsigned_32_Size): Remove, now useless.\n+\t(Pattern_Type, Bytes_Per_Pattern): New subtype and constant, to be used\n+\tconsistently throughout the various implementation pieces.\n+\n+\t* s-stausa.adb (Stack_Slots): New type, abstraction for the stack\n+\toverlay we are using to fill the stack area with patterns.\n+\t(Top_Slot_Index_In, Bottom_Slot_Index_In): Operations on Stack_Slots.\n+\t(Push_Index_Step_For, Pop_Index_Step_For): Likewise.\n+\t(Fill_Stack, Compute_Result): Use the Stack_Slots abstraction.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-stoele.adb (\"mod\"): mod negative value raises Constraint_Error\n+\n+2007-12-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-tassta.adb: \n+\t(Create_Task): Take into account tasks created by foreign threads.\n+\tCode clean up: use constants instead of hard coded values.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* styleg.adb (Check_Comment): More liberal rules for comment placement\n+\n+2007-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tb-alvms.c (struct tb_entry_t, __gnat_backtrace): Revert back to use\n+\tof Procedure Value instead of Frame Pointer as the invocation\n+\tidentifier associated with the instruction pointer in each traceback\n+\tentry.\n+\n+\t* g-trasym-vms-alpha.adb (Traceback_Entry, PV_For, FP_For,\n+\tTB_Entry_For): Revert back to use of Procedure Value instead of Frame\n+\tPointer as the invocation identifier passed to tbk$symbolize.\n+\n+\t* s-traent-vms.ads, s-traent-vms.adb\n+\t(Traceback_Entry, PV_For, FP_For, TB_Entry_For): Revert back to use of\n+\tProcedure Value instead of Frame Pointer as the invocation identifier\n+\tpassed to tbk$symbolize.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* tbuild.ads, tbuild.adb: \n+\tFix location of flag for unrecognized pragma message\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* treepr.ads, treepr.adb: (pl): implement use of positive value\n+\tshorthands\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* xeinfo.adb: Remove warnings\n+\t* xnmake.adb: Remove warnings\n+\t* xsinfo.adb: Remove warnings\n+\t* xtreeprs.adb: Remove warnings\n+\t* xsnames.adb: Remove warnings\n+\n+\t* a-ngcoar.adb: Fix typo.\n+\t* s-interr.adb: Minor reformatting\n+\t* env.c: Minor reformatting.\n+\t* g-bytswa.adb: Minor reformatting.\n+\t* g-rannum.ads: Minor documentation improvements\n+\t* s-tasinf-mingw.adb: Minor header fix\n+\t* a-clrefi.adb: Minor reformatting\n+\t* g-sttsne.ads: Minor documentation improvement\n+\t* g-sttsne-locking.ads: Minor documentation improvement\n+\t* g-soliop-solaris.ads: Minor documentation improvement\n+\t* g-soliop-mingw.ads: Minor documentation improvement\n+\t* g-soliop.ads: Minor documentation improvement\n+\t* exp_aggr.ads: Minor reformatting\n+\t* debug.adb: Add documentation for the gprbuild debug flags\n+\t* exp_ch2.adb: Use Nkind_In to simplify code throughout\n+\t* exp_pakd.adb: Minor reformatting\n+\n+\t* g-altive.ads, g-alleve.adb: Remove assertions.\n+\tAdd comment about minor differences between targets regarding\n+\tfloating-point operations.\n+\n+\t* g-thread.adb: Remove pragma unreferenced.\n+\t* lib.ads: Minor reformatting\n+\t* par-ch9.adb: Minor reformatting of error messages\n+\t* sem_case.adb: Minor reformatting\n+\t* s-fileio.adb: Minor reformattinng\n+\t* s-vmexta.ads: Minor typo\n+\t* vxaddr2line.adb: \n+\tTake into account 'Success' value as per new GNAT warning.\n+\n+2007-12-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* a-direct.adb (Create_Path): Always take '/' as a directory separator,\n+\teven on Windows\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\t    Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Dcoument new rules for style check comment alignment\n+\tDocument that suffixes may be terminations of each others\n+\tAdd doc for -gnatw.a and -gnatw.A\n+\tDocument gnatbind -Wx switch\n+\tDocument BOM recognition\n+\tDocument pragma Implemented_By_Entry.\n+\tDocument new units.\n+\n+\t* gnat_rm.texi: (Favor_Top_Level): Document new pragma.\n+\tAdd doc for pragma Unreferenced suppressing no entities referenced msg\n+\tAdd documentation of GNAT.Directory_Operations.Iteration\n+\tAdd documentation of GNAT.Random_Numbers\n+\tAdd documentation for pragma Shared.\n+\tCorrect documentation for Bit_Order\n+\tAdd documentation for the Pool_Address attribute.\n+\tFix and improve documentation of pragma machine_attribute.\n+\tNew pragma Fast_Math\n+\tDocument BOM recognition\n+\n+\t* vms_data.ads: Add entries for -gnatw.a -gnatw.A\n+\tAdd /Wide_Character_Encoding for binder\n+\tAdd qualifier for the new gnatpp option --no-separate-loop-then\n+\n+2007-12-13  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cohase.ads, a-cihama.ads, a-cihase.ads, a-cohama.ads: Document\n+\twhich generic formal operations are called for each operation.\n+\n+2007-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tb-gcc.c (uw_data_t, trace_callback): Only define if not GCC-SJLJ eh.\n+\t(__gnat_backtrace): Early return 0 if using GCC-SJLJ eh.\n+\n+2007-12-13  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* s-os_lib.ads, s-os_lib.adb (Normalize_Pathname): Do not compute\n+\tReference_Dir unless we actually need it.\n+\n+2007-12-13  Vasiliy Fofanov  <fofanov@adacore.com>\n+\t    Tristan Gingold  <gingold@adacore.com>\n+\n+\t* g-socthi-vms.ads (Fd_Set_Access): make it 32-bit.\n+\n+\t* s-osprim-vms.adb,\n+\ta-calend-vms.adb: Remove pragma warning off and add pragma\n+\tunreferenced.\n+\n+2007-12-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* impunit.adb: Add entries for missing units\n+\n+\t* Makefile.rtl: Add new run-time units.\n+\n+\t* Make-lang.in:  Update dependencies.\n+\n+2007-12-13  Bob Duff  <duff@adacore.com>\n+\n+\t* itypes.ads, itypes.adb (Create_Itype): For access-to-subprogram\n+\ttypes, set Can_Use_Internal_Rep appropriately, based on\n+\tAlways_Compatible_Rep_On_Target.\n+\n+2007-12-13  Gary Dismukes  <dismukes@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* make.adb (Scan_Make_Arg): Add test for -aamp_target switch, passing\n+\tit to the front end and setting the aamp_target environment variable\n+\tto the switch's argument to ensure that gnaampbind and gnaamplink will\n+\ttake the specified library into account.\n+\t(Make): Only set Check_Object_Consistency to False for JVM, not for CIL\n+\ttarget, since the CIL compiler supports an \"object\" file (.il files).\n+\n+2007-12-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* symbols-processing-vms-ia64.adb (Process.Skip_Half): New procedure\n+\t(Process.H): Remove variable. Replace Read_Half (H) with Skip_Half.\n+\n+2007-12-13  Geert Bosch  <bosch@adacore.com>\n+\n+\t* s-parame-vxworks.adb: \n+\tUpdate comments to reflect usage of this package by Nucleus.\n+\n+2007-12-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* i-vxwork.ads: Kill new warning on Convention C, since changing the\n+\tspec would break code.\n+\n+\t* i-forbla-unimplemented.ads, vx_stack_info.c: New files.\n+\n+\t* system-vxworks-alpha.ads: Removed.\n+\n 2007-12-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ada-tree.h (TYPE_RETURNS_BY_TARGET_PTR_P): Move around."}]}