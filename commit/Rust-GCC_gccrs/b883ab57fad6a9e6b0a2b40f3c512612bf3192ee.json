{"sha": "b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4M2FiNTdmYWQ2YTllNmIwYTJiNDBmM2M1MTI2MTJiZjMxOTJlZQ==", "commit": {"author": {"name": "Hui-May Chang", "email": "hm.chang@apple.com", "date": "2007-04-24T19:17:22Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2007-04-24T19:17:22Z"}, "message": "reload1.c (merge_assigned_reloads): Do not merge a RELOAD_OTHER instruction with a RELOAD_FOR_OPERAND_ADDRESS...\n\n2007-04-24  Hui-May Chang <hm.chang@apple.com>\n\n\t* reload1.c (merge_assigned_reloads) : Do not merge a RELOAD_OTHER\n\tinstruction with a RELOAD_FOR_OPERAND_ADDRESS instruction.\n\n\t* gcc.target/i386/reload-1.c. New.\n\nFrom-SVN: r124115", "tree": {"sha": "edc788c944585b9435559cc119e7c3684c111ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edc788c944585b9435559cc119e7c3684c111ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/comments", "author": null, "committer": null, "parents": [{"sha": "84b31797f3e369cf595a66be35669e3a1216fe72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b31797f3e369cf595a66be35669e3a1216fe72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b31797f3e369cf595a66be35669e3a1216fe72"}], "stats": {"total": 145, "additions": 136, "deletions": 9}, "files": [{"sha": "451472e8da8fe8ba985a701c275a9e691222a996", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "patch": "@@ -1,3 +1,8 @@\n+2007-04-24  Hui-May Chang <hm.chang@apple.com>\n+\n+\t* reload1.c (merge_assigned_reloads) : Do not merge a RELOAD_OTHER\n+\tinstruction with a RELOAD_FOR_OPERAND_ADDRESS instruction.\n+\n 2007-04-24  Richard Guenther  <rguenther@suse.de>\n \t    Olga Golovanevsky  <olga@il.ibm.com>\n "}, {"sha": "9ee046ae1ecb794733a25deadffa11fd9a013577", "filename": "gcc/reload1.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "patch": "@@ -6323,22 +6323,31 @@ merge_assigned_reloads (rtx insn)\n \t\ttransfer_replacements (i, j);\n \t      }\n \n-\t  /* If this is now RELOAD_OTHER, look for any reloads that load\n-\t     parts of this operand and set them to RELOAD_FOR_OTHER_ADDRESS\n-\t     if they were for inputs, RELOAD_OTHER for outputs.  Note that\n-\t     this test is equivalent to looking for reloads for this operand\n-\t     number.  */\n-\t  /* We must take special care with RELOAD_FOR_OUTPUT_ADDRESS; it may\n-\t     share registers with a RELOAD_FOR_INPUT, so we can not change it\n-\t     to RELOAD_FOR_OTHER_ADDRESS.  We should never need to, since we\n-\t     do not modify RELOAD_FOR_OUTPUT.  */\n+\t  /* If this is now RELOAD_OTHER, look for any reloads that\n+\t     load parts of this operand and set them to\n+\t     RELOAD_FOR_OTHER_ADDRESS if they were for inputs,\n+\t     RELOAD_OTHER for outputs.  Note that this test is\n+\t     equivalent to looking for reloads for this operand\n+\t     number.\n+\n+\t     We must take special care with RELOAD_FOR_OUTPUT_ADDRESS;\n+\t     it may share registers with a RELOAD_FOR_INPUT, so we can\n+\t     not change it to RELOAD_FOR_OTHER_ADDRESS.  We should\n+\t     never need to, since we do not modify RELOAD_FOR_OUTPUT.\n+\n+\t     It is possible that the RELOAD_FOR_OPERAND_ADDRESS\n+\t     instruction is assigned the same register as the earlier\n+\t     RELOAD_FOR_OTHER_ADDRESS instruction.  Merging these two\n+\t     instructions will cause the RELOAD_FOR_OTHER_ADDRESS\n+\t     instruction to be deleted later on.  */\n \n \t  if (rld[i].when_needed == RELOAD_OTHER)\n \t    for (j = 0; j < n_reloads; j++)\n \t      if (rld[j].in != 0\n \t\t  && rld[j].when_needed != RELOAD_OTHER\n \t\t  && rld[j].when_needed != RELOAD_FOR_OTHER_ADDRESS\n \t\t  && rld[j].when_needed != RELOAD_FOR_OUTPUT_ADDRESS\n+\t\t  && rld[j].when_needed != RELOAD_FOR_OPERAND_ADDRESS\n \t\t  && (! conflicting_input\n \t\t      || rld[j].when_needed == RELOAD_FOR_INPUT_ADDRESS\n \t\t      || rld[j].when_needed == RELOAD_FOR_INPADDR_ADDRESS)"}, {"sha": "59c10fe0cc5d34227cb6ca1ac79002bb33892142", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "patch": "@@ -1,3 +1,7 @@\n+2007-04-24  Hui-May Chang <hm.chang@apple.com>\n+\n+\t* gcc.target/i386/reload-1.c. New.\n+\n 2007-04-24  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \t    Olga Golovanevsky  <olga@il.ibm.com>\n "}, {"sha": "7fcb5b421af3a10ba3993215c98c08bb2605dbb5", "filename": "gcc/testsuite/gcc.target/i386/reload-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freload-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b883ab57fad6a9e6b0a2b40f3c512612bf3192ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freload-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freload-1.c?ref=b883ab57fad6a9e6b0a2b40f3c512612bf3192ee", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O3 -msse2 -fdump-rtl-csa\" } */\n+/* { dg-skip-if \"\" { i?86-*-* } { \"-m64\" } { \"\" } } */\n+/* { dg-final { scan-file-not reload-1.c.167r.csa \"deleted 1 dead insns\" } }*/\n+#include <emmintrin.h>\n+typedef __SIZE_TYPE__ size_t;\n+typedef float vFloat __attribute__ ((__vector_size__ (16)));\n+typedef double vDouble __attribute__ ((__vector_size__ (16)));\n+typedef struct buf\n+{\n+  void *data;\n+  unsigned long h;\n+  unsigned long  w;\n+  size_t bytes;\n+} buf;\n+\n+typedef struct job\n+{\n+  struct Job *next;\n+  void * info;\n+  long (*func)(struct Job *job);\n+  long error;\n+} job;\n+\n+typedef struct fj\n+{\n+    job hd;\n+    buf src;\n+    buf dest;\n+    float g;\n+    unsigned int flags;\n+} fj;\n+\n+static const double r[256], t[256];\n+\n+long bar (const buf *src, const buf *dest, float g, unsigned int flags)\n+{\n+  float *d0 = (float*) src->data;\n+  float *d1 = (float*) dest->data;\n+  uintptr_t w = dest->w;\n+  uintptr_t idx;\n+  vFloat p0;\n+  static const vFloat m0;\n+  static const vDouble p[3], m, b;\n+  float *sr = d0;\n+  float *dr = d1;\n+  for( idx = 0; idx + 8 <= w; idx += 8 )\n+  {\n+    vFloat f0 = _mm_loadu_ps (sr);\n+    vFloat f1 = _mm_loadu_ps (sr + 4);\n+    sr += 8;\n+    vFloat fa0 = _mm_andnot_ps (m0, f0);\n+    vFloat fa1 = _mm_andnot_ps (m0, f1);\n+    vDouble v0 = _mm_cvtps_pd (fa0);\n+    vDouble v1 = _mm_cvtps_pd (_mm_movehl_ps (fa0, fa0));\n+    vDouble v2 = _mm_cvtps_pd (fa1);\n+    vDouble v3 = _mm_cvtps_pd (_mm_movehl_ps (fa1, fa1));\n+    vDouble  vi0, vi1, vi2, vi3;\n+    __m128i b0, b1, b2, b3;\n+    b0 = _mm_packs_epi32 (_mm_packs_epi32 (b0, b1), _mm_packs_epi32 (b2, b3));\n+    b1 = _mm_srli_epi64 (b0, 32);\n+    unsigned int i0 = _mm_cvtsi128_si32 (b0); \n+    unsigned int i2 = _mm_cvtsi128_si32 (b1);\n+    v0 -= _mm_loadh_pd (_mm_load_sd (r + (i0 & 0xff)), r + (i0 >> 16));\n+    v1 -= _mm_loadh_pd (_mm_load_sd (r + (i2 & 0xff)), r + (i2 >> 16));\n+    b0 = _mm_unpackhi_epi64 (b0, b0);\n+    b1 = _mm_unpackhi_epi64 (b1, b1);\n+    unsigned int i4 = _mm_cvtsi128_si32 (b0);\n+    unsigned int i6 = _mm_cvtsi128_si32 (b1);\n+    v2 -= _mm_loadh_pd (_mm_load_sd (r + (i4 & 0xff)), r + (i4 >> 16));\n+    v3 -= _mm_loadh_pd (_mm_load_sd (r + (i6 & 0xff)), r + (i6 >> 16));\n+    v0 = p[0] + (p[1] + p[2] * v0) * v0;\n+    v1 = p[0] + (p[1] + p[2] * v1) * v1;\n+    v2 = p[0] + (p[1] + p[2] * v2) * v2;\n+    v3 = p[0] + (p[1] + p[2] * v3) * v3;\n+    vi0 = (vDouble) _mm_slli_epi64 ((__m128i)((vi0 + b) + m), 52);\n+    vi1 = (vDouble) _mm_slli_epi64 ((__m128i)((vi1 + b) + m), 52);\n+    vi2 = (vDouble) _mm_slli_epi64 ((__m128i)((vi2 + b) + m), 52);\n+    vi3 = (vDouble) _mm_slli_epi64 ((__m128i)((vi3 + b) + m), 52);\n+    vi0 *= _mm_loadh_pd (_mm_load_sd (t + (i0 & 0xff)), t + (i0 >> 16));\n+    vi1 *= _mm_loadh_pd (_mm_load_sd (t + (i2 & 0xff)), t + (i2 >> 16));\n+    vi2 *= _mm_loadh_pd (_mm_load_sd (t + (i4 & 0xff)), t + (i4 >> 16));\n+    vi3 *= _mm_loadh_pd (_mm_load_sd (t + (i6 & 0xff)), t + (i6 >> 16));\n+    v0 *= vi0;\n+    v1 *= vi1;\n+    v2 *= vi2;\n+    v3 *= vi3;\n+    vFloat r0 = _mm_movelh_ps (_mm_cvtpd_ps( v0 ), _mm_cvtpd_ps (v1));\n+    vFloat r1 = _mm_movelh_ps (_mm_cvtpd_ps( v2 ), _mm_cvtpd_ps (v3));\n+    vFloat z0 = _mm_cmpeq_ps (f0, _mm_setzero_ps());\n+    vFloat z1 = _mm_cmpeq_ps (f1, _mm_setzero_ps());\n+    r0 = _mm_andnot_ps (z0, r0);\n+    r1 = _mm_andnot_ps (z1, r1);\n+    z0 = _mm_and_ps (z0, p0);\n+    z1 = _mm_and_ps (z1, p0);\n+    r0 = _mm_or_ps (r0, z0);\n+    r1 = _mm_or_ps (r1, z1);\n+    _mm_storeu_ps (dr, r0);\n+    _mm_storeu_ps (dr + 4, r1);\n+    dr += 8;\n+  }\n+  return 0;\n+}\n+\n+long foo (job *j )\n+{\n+  fj *jd = (fj*) j;\n+  return bar (&jd->src, &jd->dest, jd->g, jd->flags);\n+}"}]}