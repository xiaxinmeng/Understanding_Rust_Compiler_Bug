{"sha": "79d8453e1c6f6e7e304d6f44da0dd018c459a121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlkODQ1M2UxYzZmNmU3ZTMwNGQ2ZjQ0ZGEwZGQwMThjNDU5YTEyMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-03T22:08:59Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-03T22:08:59Z"}, "message": "Initial revision\n\nFrom-SVN: r275", "tree": {"sha": "c0174d2448cdf484818a4a76f2fd2731aa3b4dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0174d2448cdf484818a4a76f2fd2731aa3b4dc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79d8453e1c6f6e7e304d6f44da0dd018c459a121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d8453e1c6f6e7e304d6f44da0dd018c459a121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d8453e1c6f6e7e304d6f44da0dd018c459a121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d8453e1c6f6e7e304d6f44da0dd018c459a121/comments", "author": null, "committer": null, "parents": [{"sha": "62cf637a773d68c24552ffc91a977b5adb55c2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62cf637a773d68c24552ffc91a977b5adb55c2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62cf637a773d68c24552ffc91a977b5adb55c2cb"}], "stats": {"total": 1512, "additions": 1512, "deletions": 0}, "files": [{"sha": "1d7a495b8ec9c2be2b9104f5c0f1f39b1048c9f6", "filename": "gcc/Makefile.in", "status": "added", "additions": 1512, "deletions": 0, "changes": 1512, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8453e1c6f6e7e304d6f44da0dd018c459a121/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8453e1c6f6e7e304d6f44da0dd018c459a121/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=79d8453e1c6f6e7e304d6f44da0dd018c459a121", "patch": "@@ -0,0 +1,1512 @@\n+# Makefile for GNU C compiler.\n+#   Copyright (C) 1987, 1988, 1990, 1991 Free Software Foundation, Inc.\n+\n+#This file is part of GNU CC.\n+\n+#GNU CC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GNU CC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GNU CC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+\n+# The targets for external use include:\n+# all, doc, proto, install, install-cross, install-cross-rest,\n+# uninstall, TAGS, mostlyclean, clean, cleanconfig, realclean,\n+# stage1, stage2, stage3, stage4.\n+\n+.NOEXPORT: # This tells GNU Make version 3\n+\t   # not to put all the variables in the environment.\n+\n+# Variables that exist for you to override.\n+# See below for how to change them for certain systems.\n+\n+# Selection of languages to be made.\n+LANGUAGES = c c++ objective-c proto\n+\n+ALLOCA =\n+ALLOCA_FLAGS = -S -Demacs\n+ALLOCA_FINISH = as -o alloca.o alloca.s\n+\n+# Various ways of specifying flags for compilations:  \n+# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.\n+# BOOT_CFLAGS is the value of CFLAGS to pass\n+# to the stage2 and stage3 compilations\n+# XCFLAGS is used for most compilations but not when using the GCC just built.\n+XCFLAGS =\n+CFLAGS = -g\n+BOOT_CFLAGS = -O $(CFLAGS)\n+# These exists to be overridden by the x-* and t-* files, respectively.\n+X_CFLAGS =\n+T_CFLAGS =\n+\n+X_CPPFLAGS =\n+T_CPPFLAGS =\n+\n+CC = cc\n+BISON = bison\n+BISONFLAGS =\n+AR = ar\n+OLDAR_FLAGS = qc\n+AR_FLAGS = rc\n+SHELL = /bin/sh\n+# on sysV, define this as cp.\n+INSTALL = install -c\n+# These permit overriding just for certain files.\n+INSTALL_PROGRAM = $(INSTALL)\n+INSTALL_DATA = $(INSTALL)\n+SYMLINK = ln -s\n+\n+# Define this as & to perform parallel make on a Sequent.\n+# Note that this has some bugs, and it seems currently necessary \n+# to compile all the gen* files first by hand to avoid erroneous results.\n+P =\n+\n+# How to invoke ranlib.\n+RANLIB = ranlib\n+# Test to use to see whether ranlib exists on the system.\n+RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]\n+\n+# Compiler to use for compiling libgcc1.a.\n+# OLDCC should not be the GNU C compiler,\n+# since that would compile typical libgcc1.a functions such as mulsi3\n+# into infinite recursions.\n+OLDCC = cc\n+\n+# CFLAGS for use with OLDCC, for compiling libgcc1.a.\n+# NOTE: -O does not work on some Unix systems!\n+CCLIBFLAGS = -O\n+\n+# Version of ar to use when compiling libgcc1.a. \n+OLDAR = ar\n+\n+# The GCC to use for compiling libgcc2.a.  Usually the one we just built.\n+# Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).\n+GCC_FOR_TARGET = ./gcc\n+\n+# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n+# It omits XCFLAGS, and specifies -B./.\n+GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -B./\n+\n+# Special flags for compiling enquire.\n+# We disable optimization to make floating point more reliable.\n+ENQUIRE_CFLAGS = -DNO_SC -DNO_MEM -DNO_STDDEF -O0\n+ENQUIRE_LDFLAGS = $(LDFLAGS)\n+\n+# Tools to use when building a cross-compiler.\n+# These are used because `configure' appends `cross-make'\n+# to the makefile when making a cross-compiler.\n+\n+TARGET_TOOLPREFIX = $(tooldir)/bin/\n+AR_FOR_TARGET = $(TARGET_TOOLPREFIX)ar\n+AR_FOR_TARGET_FLAGS = rc\n+RANLIB_FOR_TARGET = $(TARGET_TOOLPREFIX)ranlib\n+RANLIB_TEST_FOR_TARGET = [ -f $(TARGET_TOOLPREFIX)ranlib ]\n+CROSS_TOOLS =\n+\n+target= ... `configure' substitutes actual target name here.\n+xmake_file= ... `configure' substitutes actual x- file name here.\n+tmake_file= ... `configure' substitutes actual t- file name here.\n+version=`awk '{printf \"%s\", substr ($$4, 2, length ($$4) - 3); }' $(srcdir)/version.c`\n+\n+# Directory where sources are, from where we are.\n+srcdir = .\n+# Common prefix for installation directories.\n+# NOTE: This directory must exist when you start installation.\n+prefix = /usr/local\n+# Directory in which to put the executable for the command `gcc'\n+bindir = $(prefix)/bin\n+# Directory in which to put the directories used by the compiler.\n+libdir = $(prefix)/lib\n+# Directory in which the compiler finds executables, libraries, etc.\n+libsubdir = $(libdir)/gcc/$(target)/$(version)\n+# Extension (if any) to put in installed man-page filename.\n+manext = .1\n+# Directory in which to put man pages.\n+mandir = $(prefix)/man/man1\n+# Directory in which to find other cross-compilation tools and headers.\n+# Used in install-cross.\n+tooldir = $(prefix)/$(target)\n+\n+# Additional system libraries to link with.\n+CLIB=\n+\n+# Change this to a null string if obstacks are installed in the\n+# system library.\n+OBSTACK=obstack.o\n+\n+# Specify the rule for actually making libgcc1.a.\n+LIBGCC1 = libgcc1.a\n+\n+# Specify the rule for actually making libgcc2.a.\n+LIBGCC2 = libgcc2.a\n+\n+# Options to use when compiling libgcc2.a.\n+# -g1 causes output of debug info only for file-scope entities.\n+# we use this here because that should be enough, and also\n+# so that -g1 will be tested.\n+LIBGCC2_CFLAGS = -O2 $(GCC_CFLAGS) -g1\n+\n+# List of extra executables that should be compiled for this target machine\n+# that are used for compiling from source code to object code.\n+# The rules for compiling them should be in the t-* file for the machine.\n+EXTRA_PASSES =\n+\n+# List of extra executables that should be compiled for this target machine\n+# that are used for linking.\n+# The rules for compiling them should be in the t-* file for the machine.\n+EXTRA_PARTS =\n+\n+# List of extra C and assembler files to add to libgcc1.a.\n+# Assembler files should have names ending in `.asm'.\n+LIB1FUNCS_EXTRA = \n+\n+# List of extra C and assembler files to add to libgcc2.a.\n+# Assembler files should have names ending in `.asm'.\n+LIB2FUNCS_EXTRA = \n+\n+# Program to convert libraries.\n+LIBCONVERT = \n+\n+# Control whether header files are installed.\n+# We will change this to install-fixincludes eventually.\n+# It would be useful for people to try this now.\n+INSTALL_HEADERS=install-headers\n+\n+# Select which version of fixincludes to use (I.E. regular versus SVR4)\n+FIXINCLUDES=fixincludes\n+\n+# List of things which should already be built whenever we try to use gcc\n+# to compile anything (without linking).\n+GCC_PASSES=gcc cc1 cpp $(EXTRA_PASSES)\n+\n+# List of things which should already be built whenever we try to use gcc\n+# to link anything.\n+GCC_PARTS=$(GCC_PASSES) libgcc.a $(EXTRA_PARTS)\n+\n+# Change this to empty to prevent installing limits.h.\n+# Actually, this currently has no effect, \n+# and if that causes no problems, it can be deleted.\n+# Otherwise, it must be replaced so as to control \n+# the actions of install-limits-h.\n+LIMITS_H = limits.h\n+\n+# Directory to link to, when using the target `maketest'.\n+DIR = ../gcc\n+\n+# Flags to use when cross-building GCC.\n+# Prefix to apply to names of object files when using them\n+# to run on the machine we are compiling on.\n+HOST_PREFIX=\n+# Prefix to apply to names of object files when compiling them\n+# to run on the machine we are compiling on.\n+# The default for this variable is chosen to keep these rules \n+# out of the way of the other rules for compiling the same source files.\n+HOST_PREFIX_1=loser-\n+HOST_CC=$(CC)\n+HOST_CFLAGS=$(ALL_CFLAGS)\n+HOST_LDFLAGS=$(LDFLAGS)\n+HOST_CPPFLAGS=$(ALL_CPPFLAGS)\n+\n+# Choose the real default target.\n+ALL=all.internal\n+\n+# Choose the real install target.\n+INSTALL_TARGET=install-native\n+\n+# End of variables for you to override.\n+\n+# Definition of `all' is here so that new rules inserted by sed\n+# do not specify the default target.\n+# The real definition is under `all.internal' (for native compilers)\n+# or `all.cross' (for cross compilers).\n+all: $(ALL)\n+\n+# sed inserts variable overrides after the following line.\n+####\n+\f\n+# Now figure out from those variables how to compile and link.\n+\n+INTERNAL_CFLAGS = $(CROSS)\n+\n+# This is the variable actually used when we compile.\n+ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS)\n+\n+# Likewise.\n+ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)\n+\n+# Even if ALLOCA is set, don't use it if compiling with GCC.\n+USE_ALLOCA= `if [ x\"${CC}\" = x\"${OLDCC}\" ] ; then echo ${ALLOCA}; else true; fi`\n+USE_HOST_ALLOCA= `if [ x\"${CC}\" = x\"${OLDCC}\" -a x\"${ALLOCA}\" != x ] ; then echo ${HOST_PREFIX}${ALLOCA}; else true; fi`\n+USE_HOST_MALLOC= `if [ x\"${MALLOC}\" != x ] ; then echo ${HOST_PREFIX}${MALLOC}; else true; fi`\n+USE_HOST_OBSTACK= `if [ x\"${OBSTACK}\" != x ] ; then echo ${HOST_PREFIX}${OBSTACK}; else true; fi`\n+\n+# Dependency on obstack, alloca, malloc or whatever library facilities\n+# are not installed in the system libraries.\n+# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.\n+LIBDEPS= $(OBSTACK) $(ALLOCA) $(MALLOC)\n+\n+# Likewise, for use in the tools that must run on this machine\n+# even if we are cross-building GCC.\n+# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.\n+HOST_LIBDEPS= $(HOST_PREFIX)$(OBSTACK) $(HOST_PREFIX)$(ALLOCA) $(HOST_PREFIX)$(MALLOC)\n+\n+# How to link with both our special library facilities\n+# and the system's installed libraries.\n+LIBS = $(OBSTACK) $(USE_ALLOCA) $(MALLOC) $(CLIB)\n+\n+# Likewise, for use in the tools that must run on this machine\n+# even if we are cross-building GCC.\n+HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC) $(CLIB)\n+\n+HOST_RTL = $(HOST_PREFIX)rtl.o\n+HOST_RTLANAL = $(HOST_PREFIX)rtlanal.o\n+\n+# Specify the directories to be searched for header files.\n+# Both . and srcdir are used, in that order,\n+# so that tm.h and config.h will be found in the compilation\n+# subdirectory rather than in the source directory.\n+INCLUDES = -I. -I$(srcdir) -I$(srcdir)/config\n+SUBDIR_INCLUDES = -I.. -I../$(srcdir) -I../$(srcdir)/config\n+\n+# Always use -I$(srcdir)/config when compiling.\n+.c.o:\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+# This tells GNU make version 3 not to export all the variables\n+# defined in this file into the environment.\n+.NOEXPORT:\n+\f\n+# Lists of files for various purposes.\n+\n+# A list of all the language-specific executables.\n+COMPILERS = cc1 cc1plus cc1obj\n+\n+# Language-specific object files for C.\n+C_OBJS = c-parse.o c-lang.o \\\n+   c-lex.o c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o\n+\n+# Language-specific object files for Objectionable C.\n+OBJC_OBJS = objc-parse.o objc-actions.o \\\n+   c-lex.o c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o\n+\n+# Language-specific object files for C++.\n+CPLUS_OBJS = cp-parse.o cp-decl.o cp-decl2.o \\\n+   cp-typeck.o cp-type2.o cp-tree.o cp-ptree.o \\\n+   cp-cvt.o cp-search.o cp-lex.o cp-gc.o cp-call.o \\\n+   cp-class.o cp-init.o cp-method.o cp-except.o \\\n+   cp-expr.o cp-pt.o cp-edsel.o cp-xref.o \\\n+   $(CPLUS_INPUT) cp-spew.o c-common.o\n+\n+# Language-independent object files.\n+OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \\\n+ function.o stmt.o expr.o calls.o expmed.o explow.o optabs.o varasm.o \\\n+ rtl.o print-rtl.o rtlanal.o dbxout.o sdbout.o dwarfout.o emit-rtl.o \\\n+ integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \\\n+ regclass.o local-alloc.o global-alloc.o reload.o reload1.o caller-save.o \\\n+ insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o \\\n+ insn-recog.o insn-extract.o insn-output.o insn-emit.o \\\n+ insn-attrtab.o aux-output.o\n+\n+# GEN files are listed separately, so they can be built before doing parallel\n+#  makes for cc1 or cc1plus.  Otherwise sequent parallel make attempts to load\n+#  them before rtl.o is compiled.\n+GEN= genemit genoutput genrecog genextract genflags gencodes genconfig genpeep\n+\n+# Files to be copied away after each stage in building.\n+STAGESTUFF = *.o insn-flags.h insn-config.h insn-codes.h \\\n+ insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n+ insn-attr.h insn-attrtab.c \\\n+ stamp-flags stamp-config stamp-codes \\\n+ stamp-output stamp-recog stamp-emit stamp-extract stamp-peep \\\n+ stamp-attr stamp-attrtab \\\n+ genemit genoutput genrecog genextract genflags gencodes genconfig genpeep \\\n+ genattrtab genattr \\\n+ $(GCC_PASSES) $(EXTRA_PARTS) gcc-cross cccp cc1plus cc1obj enquire \\\n+ protoize unprotoize specs collect2\n+\n+# Members of libgcc1.a.\n+LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n+   _lshrsi3 _lshlsi3 _ashrsi3 _ashlsi3 \\\n+   _divdf3 _muldf3 _negdf2 _adddf3 _subdf3 \\\n+   _fixdfsi _fixsfsi _floatsidf _floatsisf _truncdfsf2 _extendsfdf2 \\\n+   _addsf3 _negsf2 _subsf3 _mulsf3 _divsf3 \\\n+   _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \\\n+   _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2\n+\n+# Library members defined in libgcc2.c.\n+LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \\\n+     _lshrdi3 _lshldi3 _ashldi3 _ashrdi3  \\\n+    _udivmoddi4 _cmpdi2 _ucmpdi2 _floatdidf _floatdisf \\\n+    _fixunsdfsi _fixunssfsi _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi \\\n+    _varargs _eprintf _builtin_new _builtin_New _builtin_del \\\n+    _bb _shtab _clear_cache _trampoline __main _exit\n+\n+# Header files that are made available under the same name\n+# to programs compiled with gcc.\n+USER_H = assert.h va-hp800.h va-i860.h va-mips.h va-pyr.h va-sparc.h \\\n+    va-spur.h va-m88k.h proto.h\n+\n+# All the header files that are installed for users from GCC itself.\n+INSTALLED_H = float.h stddef.h stdarg.h varargs.h $(USER_H) limits.h\n+\n+# The files that \"belong\" in CONFIG_H are deliberately omitted\n+# because having them there would not be useful in actual practice.\n+# All they would do is cause complete recompilation every time\n+# one of the machine description files is edited.\n+# That may or may not be what one wants to do.\n+# If it is, rm *.o is an easy way to do it.\n+# CONFIG_H = config.h tm.h\n+CONFIG_H =\n+RTL_H = rtl.h rtl.def machmode.h machmode.def\n+TREE_H = tree.h real.h tree.def machmode.h machmode.def\n+CPLUS_TREE_H = $(TREE_H) cp-tree.h cp-tree.def\n+\f\n+# Avoid a lot of time thinking about remaking Makefile.in and *.def.\n+.SUFFIXES: .in .def\n+\n+Makefile: $(srcdir)/Makefile.in $(srcdir)/configure \\\n+   $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file)\n+\tsh config.status\n+\n+all.internal: start.encap rest.encap\n+# This is what to compile if making a cross-compiler.\n+all.cross: native gcc-cross\n+# This is what must be made before installing GCC and converting libraries.\n+start.encap: native gcc $(LIBGCC1_TARGET)\n+# Use this to make a GCC that will be used only to recompile GCC.\n+for-bootstrap: start.encap libgcc.a\n+# These can't be made, with COFF encapsulation, until after GCC can run.\n+rest.encap: libgcc.a float.h\n+# This is what is made with the host's compiler\n+# whether making a cross compiler or not.\n+native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PARTS)\n+\n+# Define the names for selecting languages in LANGUAGES.\n+C c: cc1\n+C++ c++: cc1plus\n+OBJC objc: cc1obj\n+OBJECTIVE-C objective-c: cc1obj\n+PROTO: proto\n+\n+config.status:\n+\t@echo You must configure gcc.  Look at the INSTALL file for details.\n+\t@false\n+\n+compilations: ${OBJS}\n+\n+gcc: gcc.o version.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o gccnew gcc.o version.o $(LIBS)\n+# Go via `gccnew' to avoid `file busy' if $(CC) is `gcc'.\n+\tmv -f gccnew gcc\n+# Dump a specs file to make -B./ read these specs over installed ones\n+\t./gcc -dumpspecs > specs\n+\n+# We do want to create an executable named `gcc', so we can use it to\n+# compile libgcc2.a.\n+# Also create gcc-cross, so that install-common will install properly.\n+gcc-cross: gcc\n+\tcp gcc gcc-cross\n+\n+cc1:$(P) $(C_OBJS) $(OBJS) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1 $(C_OBJS) $(OBJS) $(LIBS)\n+\n+cc1plus:$(P) $(CPLUS_OBJS) $(OBJS) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1plus $(CPLUS_OBJS) $(OBJS) $(LIBS)\n+\n+cc1obj:$(P) $(OBJC_OBJS) $(OBJS) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1obj $(OBJC_OBJS) $(OBJS) $(LIBS)\n+\n+float.h: enquire\n+\t-./enquire -f > tmp-float.h\n+\tmv tmp-float.h float.h\n+\n+# Used to compile enquire with standard cc, but have forgotten why.\n+# Let's try with GCC.\n+enquire: enquire.o $(GCC_PARTS)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@\n+enquire.o: $(srcdir)/enquire.c $(GCC_PASSES)\n+\t-cp $(srcdir)/enquire.c . > /dev/null 2>&1\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) -I. \\\n+\t    -c enquire.c\n+\f\n+# Build libgcc.a.\n+# This is done in two parts because some functions, in libgcc1.c,\n+# must be compiled with something other than gcc,\n+# while the rest, in libgcc2.c, must be compiled with gcc.\n+# That means we can't do libgcc2.c until after gcc, cc1, etc.\n+\n+# Use this as value of LIBGCC1 to cause conversion to GNU library format.\n+# LIBCONVERT should put its output in libgcc1.conv.\n+libgcc1.conv: libgcc1.a\n+\t$(LIBCONVERT) libgcc1.a libgcc1.conv\n+\n+# Use this as value of LIBGCC1 to inhibit use of libgcc1.c entirely.\n+# Make an empty file instead.\n+libgcc1.null: $(CROSS_TOOLS) $(GCC_PASSES)\n+\techo \"__foo () {}\" > dummy.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) -c dummy.c\n+\t$(OLDAR) $(OLDAR_FLAGS) libgcc1.null dummy.o\n+\trm -f dummy.o dummy.c\n+\n+# Compile the library of arithmetic subroutines with the native compiler.\n+# Don't compile it with gcc!\n+# (That would cause most arithmetic functions to call themselves.)\n+libgcc1.a: libgcc1.c $(CONFIG_H) $(LIB1FUNCS_EXTRA) config.status\n+\t-rm -f tmplibgcc1.a\n+# Actually build it in tmplibgcc1.a, then rename at end,\n+# so that libgcc1.a itself remains nonexistent if compilation is aborted.\n+# -e causes any failing command to make this rule fail.\n+# -e doesn't work in certain shells, so we test $$? as well.\n+\tset -e; \\\n+\tfor name in $(LIB1FUNCS); \\\n+\tdo \\\n+\t  echo $${name}; \\\n+\t  rm -f $${name}.o; \\\n+\t  $(OLDCC) $(CCLIBFLAGS) $(INCLUDES) -c -DL$${name} $(srcdir)/libgcc1.c; \\\n+\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t  mv libgcc1.o $${name}.o; \\\n+\t  $(OLDAR) $(OLDAR_FLAGS) tmplibgcc1.a $${name}.o; \\\n+\t  rm -f $${name}.o; \\\n+\tdone\n+# Some shells crash when a loop has no items.\n+# So make sure there is always at least one--`..'.\n+# Then ignore it.\n+# We don't use -e here because there are if statements\n+# that should not make the command give up when the if condition is false.\n+# Instead, we test for failure after each command where it matters.\n+\tfor file in .. $(LIB1FUNCS_EXTRA); \\\n+\tdo \\\n+\t  if [ x$${file} != x.. ]; then \\\n+\t    name=`echo $${file} | sed -e 's/[.]c$$//' -e 's/[.]asm$$//'`; \\\n+\t    echo $${name}; \\\n+\t    if [ $${name}.asm = $${file} ]; then \\\n+\t      cp $${file} $${name}.s; file=$${name}.s; \\\n+\t      if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t    else true; fi; \\\n+\t    $(OLDCC) $(CCLIBFLAGS) $(INCLUDES) -c $${file}; \\\n+\t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t    $(OLDAR) $(OLDAR_FLAGS) tmplibgcc1.a $${name}.o; \\\n+\t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t    rm -f $${name}.[so]; \\\n+\t  else true; \\\n+\t  fi; \\\n+\tdone\n+\tmv tmplibgcc1.a libgcc1.a\n+\n+# Compiling libgcc2.a requires making sure that cc1, etc. have been compiled.\n+# But recompiling cc1 should not force recompilation of libgcc2.a.\n+# If you want to force recompilation, delete libgcc2.a.\n+# Depend on install-cross-tools to make sure we set up properly \n+# to run the assembler before we try compiling anything.\n+# install-cross-tools does nothing if not cross compiling.\n+libgcc2.ready: $(GCC_PASSES) $(CROSS_TOOLS)\n+\t-if [ -f libgcc2.ready ] ; then \\\n+\t\ttrue; \\\n+\telse \\\n+\t\ttouch libgcc2.ready; \\\n+\tfi\n+\n+libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(LIB2FUNCS_EXTRA) \\\n+   longlong.h gbl-ctors.h config.status\n+# Actually build it in tmplibgcc2.a, then rename at end,\n+# so that libgcc2.a itself remains nonexistent if compilation is aborted.\n+\t-rm -f tmplibgcc2.a\n+# -e causes any failing command to make this rule fail.\n+# -e doesn't work in certain shells, so we test $$? as well.\n+\tset -e; \\\n+\tfor name in $(LIB2FUNCS); \\\n+\tdo \\\n+\t  echo $${name}; \\\n+\t  $(GCC_FOR_TARGET) -fstrength-reduce -O $(INCLUDES) \\\n+\t      $(LIBGCC2_CFLAGS) -c -DL$${name} \\\n+\t      $(srcdir)/libgcc2.c -o $${name}.o; \\\n+\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t  $(AR) $(AR_FLAGS) tmplibgcc2.a $${name}.o; \\\n+\t  rm -f $${name}.o; \\\n+\tdone\n+# Some shells crash when a loop has no items.\n+# So make sure there is always at least one--`..'.\n+# Then ignore it.\n+# We don't use -e here because there are if statements\n+# that should not make the command give up when the if condition is false.\n+# Instead, we test for failure after each command where it matters.\n+\tfor file in .. $(LIB2FUNCS_EXTRA); \\\n+\tdo \\\n+\t  if [ x$${file} != x.. ]; then \\\n+\t    name=`echo $${file} | sed -e 's/[.]c$$//' -e 's/[.]asm$$//'`; \\\n+\t    echo $${name}; \\\n+\t    if [ $${name}.asm = $${file} ]; then \\\n+\t      cp $${file} $${name}.s; file=$${name}.s; \\\n+\t      if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t    else true; fi; \\\n+\t    $(GCC_FOR_TARGET) -fstrength-reduce -O $(INCLUDES) \\\n+\t\t$(LIBGCC2_CFLAGS) -c $${file}; \\\n+\t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t    $(AR) $(AR_FLAGS) tmplibgcc2.a $${name}.o; \\\n+\t    rm -f $${name}.[so]; \\\n+\t  else true; \\\n+\t  fi; \\\n+\tdone\n+\tmv tmplibgcc2.a libgcc2.a\n+# These lines were deleted from above the mv command\n+# because ranlibing libgcc.a itself should suffice.\n+#\t-if [ x${HPUX_GAS} = x ] ; then \\\n+#\t  if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc2.a; else true; fi \\\n+#\telse true; fi\n+\n+# Combine the various libraries into a single library, libgcc.a.\n+libgcc.a: $(LIBGCC1) $(LIBGCC2)\n+\t-rm -rf tmplibgcc.a libgcc.a tmpcopy\n+\tmkdir tmpcopy\n+\t(cd tmpcopy; $(AR) x ../$(LIBGCC1))\n+\t(cd tmpcopy; $(AR) x ../$(LIBGCC2))\n+\t(cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *.o)\n+\trm -rf tmpcopy\n+\t-if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi\n+# Actually build it in tmplibgcc.a, then rename at end,\n+# so that libgcc.a itself remains nonexistent if compilation is aborted.\n+\tmv tmplibgcc.a libgcc.a\n+\n+\n+# Compile two additional files that are linked with every program\n+# linked using GCC on system V, for the sake of C++ constructors.\n+crtbegin.o:\tcrtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -DCRT_BEGIN \\\n+\t  -finhibit-size-directive -g0 -c $(srcdir)/crtstuff.c\n+\tmv crtstuff.o crtbegin.o\n+\n+crtend.o:\tcrtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -DCRT_END \\\n+\t  -finhibit-size-directive -g0 -c $(srcdir)/crtstuff.c\n+\tmv crtstuff.o crtend.o\n+\f\n+# Compiling object files from source files.\n+\n+# Note that dependencies on obstack.h are not written\n+# because that file is not part of GCC.\n+# Dependencies on gvarargs.h are not written\n+# because all that file does, when not compiling with GCC,\n+# is include the system varargs.h.\n+\n+# C language specific files.\n+\n+c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h input.h flags.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c\n+$(srcdir)/c-parse.c $(srcdir)/c-parse.h: $(srcdir)/c-parse.y\n+\tcd $(srcdir); $(BISON) $(BISONFLAGS) -d c-parse.y -o c-parse.c\n+\n+c-decl.o : c-decl.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h\n+c-typeck.o : c-typeck.c $(CONFIG_H) $(TREE_H) c-tree.h flags.h\n+c-lang.o : c-lang.c $(CONFIG_H) $(TREE_H)\n+c-lex.o : c-lex.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h c-parse.h \\\n+    input.h flags.h\n+c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h\n+c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H) flags.h\n+\n+# C++ language specific files.\n+\n+cp-parse.o : $(srcdir)/cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+  `echo $(srcdir)/cp-parse.c | sed 's,^\\./,,'`\n+\n+$(srcdir)/cp-parse.c $(srcdir)/cp-parse.h : $(srcdir)/cp-parse.y\n+\t@echo expect 29 shift/reduce conflicts and 14 reduce/reduce conflicts\n+\tcd $(srcdir); $(BISON) $(BISONFLAGS) -d -o cp-parse.c cp-parse.y\n+\n+cp-spew.o : cp-spew.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n+   $(srcdir)/cp-parse.h flags.h\n+cp-lex.o : cp-lex.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n+   $(srcdir)/cp-parse.h $(srcdir)/cp-input.c flags.h\n+cp-decl.o : cp-decl.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n+  cp-lex.h cp-decl.h stack.h\n+cp-decl2.o : cp-decl2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n+  cp-lex.h cp-decl.h\n+cp-type2.o : cp-type2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-typeck.o : cp-typeck.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-class.o : cp-class.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h \\\n+    cp-class.h flags.h\n+cp-call.o : cp-call.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h cp-class.h \\\n+    flags.h\n+cp-init.o : cp-init.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-method.o : cp-method.c $(CONFIG_H) $(CPLUS_TREE_H)\n+cp-cvt.o : cp-cvt.c $(CONFIG_H) $(CPLUS_TREE_H)\n+cp-search.o : cp-search.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n+cp-tree.o : cp-tree.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-ptree.o : cp-ptree.c $(CONFIG_H) $(CPLUS_TREE_H)\n+cp-gc.o : cp-gc.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-except.o : cp-except.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-expr.o : cp-expr.c $(CONFIG_H) $(CPLUS_TREE_H) $(RTL_H) flags.h \\\n+  expr.h insn-codes.h\n+cp-edsel.o : cp-edsel.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n+cp-xref.o : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H)\n+cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h\n+\n+collect2 : collect2.o version.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o collect2 collect2.o version.o $(LIBS)\n+\n+collect2.o : collect2.c $(CONFIG_H) gstab.h\n+\n+# Objectionable C language specific files.\n+\n+objc-parse.o : $(srcdir)/objc-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \\\n+   c-tree.h input.h flags.h objc-actions.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/objc-parse.c\n+$(srcdir)/objc-parse.c : $(srcdir)/objc-parse.y\n+\tcd $(srcdir); $(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c\n+\n+objc-actions.o : objc-actions.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h \\\n+   flags.h objc-actions.h\n+\n+# A file used by all variants of C.\n+\n+c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h\n+\n+# Language-independent files.\n+\n+gcc.o: gcc.c $(CONFIG_H) gvarargs.h obstack.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+  -DSTANDARD_STARTFILE_PREFIX=\\\"$(libdir)/\\\" \\\n+  -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc/\\\" \\\n+  -DDEFAULT_TARGET_MACHINE=\\\"$(target)\\\" \\\n+  -c `echo $(srcdir)/gcc.c | sed 's,^\\./,,'`\n+\n+dumpvers: dumpvers.c\n+\n+version.o: version.c\n+obstack.o: obstack.c\n+\n+tree.o : tree.c $(CONFIG_H) $(TREE_H) gvarargs.h flags.h function.h\n+print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)\n+stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) function.h\n+fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h \n+toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h input.h insn-attr.h\n+\n+rtl.o : rtl.c $(CONFIG_H) $(RTL_H)\n+\n+print-rtl.o : print-rtl.c $(CONFIG_H) $(RTL_H)\n+rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)\n+\n+varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h \\\n+   insn-codes.h expr.h hard-reg-set.h regs.h\n+function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n+   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n+   recog.h output.h\n+stmt.o : stmt.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n+   insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h loop.h recog.h\n+expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) gvarargs.h flags.h function.h  \\\n+   insn-flags.h insn-codes.h expr.h insn-config.h recog.h output.h typeclass.h\n+calls.o : calls.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h expr.h insn-codes.h \\\n+   insn-flags.h\n+expmed.o : expmed.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \\\n+   insn-flags.h insn-config.h insn-codes.h expr.h recog.h real.h\n+explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h \\\n+   insn-config.h expr.h recog.h insn-flags.h insn-codes.h\n+optabs.o : optabs.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \\\n+   insn-flags.h insn-config.h insn-codes.h expr.h recog.h\n+dbxout.o : dbxout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h \\\n+   insn-config.h reload.h gstab.h\n+sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) gsyms.h flags.h \\\n+   insn-config.h reload.h\n+dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf.h flags.h \\\n+   insn-config.h reload.h output.h\n+emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) flags.h gvarargs.h function.h  \\\n+   regs.h insn-config.h insn-codes.h real.h expr.h\n+\n+integrate.o : integrate.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h integrate.h \\\n+   insn-flags.h insn-config.h insn-codes.h expr.h real.h function.h\n+\n+jump.o : jump.c $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h \\\n+   insn-config.h insn-flags.h insn-codes.h expr.h real.h\n+stupid.o : stupid.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h\n+\n+cse.o : cse.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h real.h \\\n+   insn-config.h recog.h\n+loop.o : loop.c $(CONFIG_H) $(RTL_H) flags.h loop.h insn-config.h \\\n+   insn-flags.h insn-codes.h regs.h hard-reg-set.h recog.h expr.h real.h\n+unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h insn-codes.h \\\n+   integrate.h regs.h flags.h expr.h loop.h\n+flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h \\\n+   basic-block.h regs.h hard-reg-set.h output.h\n+combine.o : combine.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h  \\\n+   insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h \\\n+   basic-block.h recog.h real.h\n+regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h \\\n+   basic-block.h regs.h insn-config.h recog.h \n+local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h basic-block.h \\\n+   regs.h hard-reg-set.h insn-config.h recog.h output.h\n+global-alloc.o : global-alloc.c $(CONFIG_H) $(RTL_H) flags.h  \\\n+   basic-block.h regs.h hard-reg-set.h insn-config.h output.h\n+\n+reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h \\\n+   reload.h recog.h hard-reg-set.h insn-config.h insn-codes.h regs.h real.h\n+reload1.o : reload1.c $(CONFIG_H) $(RTL_H) flags.h expr.h \\\n+   reload.h regs.h hard-reg-set.h insn-config.h insn-flags.h insn-codes.h \\\n+   basic-block.h recog.h output.h\n+caller-save.o : caller-save.c $(CONFIG_H) $(RTL_H) flags.h \\\n+   regs.h hard-reg-set.h insn-config.h basic-block.h recog.h reload.h expr.h\n+reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h \\\n+   basic-block.h regs.h insn-config.h insn-attr.h insn-flags.h recog.h \\\n+   flags.h output.h\n+sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \\\n+   flags.h insn-config.h insn-attr.h\n+final.o : final.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h regs.h \\\n+   recog.h conditions.h insn-config.h insn-attr.h real.h output.h \\\n+   hard-reg-set.h insn-codes.h gstab.h\n+recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n+   regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n+   insn-flags.h insn-codes.h real.h\n+reg-stack.o : reg-stack.c $(CONFIG_H) $(RTL_H) $(TREE_H) \\\n+   regs.h hard-reg-set.h flags.h insn-config.h\n+   \n+aux-output.o : aux-output.c $(CONFIG_H) \\\n+   $(RTL_H) regs.h hard-reg-set.h real.h insn-config.h conditions.h \\\n+   insn-flags.h output.h insn-attr.h insn-codes.h\n+\n+# Normally this target is not used; but it is used if you\n+# define ALLOCA=alloca.o.  In that case, you must get a suitable alloca.c\n+# from the GNU Emacs distribution.\n+# Note some machines won't allow $(CC) without -S on this source file.\n+alloca.o:\talloca.c\n+# sed is used to strip the comments from the assembler output.\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(ALLOCA_FLAGS) \\\n+\t  `echo $(srcdir)/alloca.c | sed 's,^\\./,,'`\n+\t$(ALLOCA_FINISH)\n+\f\n+# Generate header and source files from the machine description, \n+# and compile them.\n+\n+.PRECIOUS: insn-config.h insn-flags.h insn-codes.h \\\n+  insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c \\\n+  insn-attr.h insn-attrtab.c\n+\n+# The following pair of rules has this effect:\n+# genconfig is run only if the md has changed since genconfig was last run;\n+# but the file insn-config.h is touched only when its contents actually change.\n+\n+# Each of the other insn-* files is handled by a similar pair of rules.\n+\n+# Each of the insn-*.[ch] rules has a semicolon at the end,\n+# for otherwise the system Make on SunOS 4.1 never tries\n+# to recompile insn-*.o.\n+\n+insn-config.h: stamp-config ;\n+stamp-config : md genconfig $(srcdir)/move-if-change\n+\t./genconfig md > tmp-config.h\n+\t$(srcdir)/move-if-change tmp-config.h insn-config.h\n+\ttouch stamp-config\n+\n+insn-flags.h: stamp-flags ;\n+stamp-flags : md genflags $(srcdir)/move-if-change\n+\t./genflags md > tmp-flags.h\n+\t$(srcdir)/move-if-change tmp-flags.h insn-flags.h\n+\ttouch stamp-flags\n+\n+insn-codes.h: stamp-codes ;\n+stamp-codes : md gencodes $(srcdir)/move-if-change\n+\t./gencodes md > tmp-codes.h\n+\t$(srcdir)/move-if-change tmp-codes.h insn-codes.h\n+\ttouch stamp-codes\n+\n+insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) expr.h real.h output.h \\\n+  insn-config.h insn-flags.h insn-codes.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c\n+\n+insn-emit.c: stamp-emit ;\n+stamp-emit : md genemit $(srcdir)/move-if-change\n+\t./genemit md > tmp-emit.c\n+\t$(srcdir)/move-if-change tmp-emit.c insn-emit.c\n+\ttouch stamp-emit\n+\n+insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h recog.h \\\n+  real.h output.h flags.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-recog.c\n+\n+insn-recog.c: stamp-recog ;\n+stamp-recog : md genrecog $(srcdir)/move-if-change\n+\t./genrecog md > tmp-recog.c\n+\t$(srcdir)/move-if-change tmp-recog.c insn-recog.c\n+\ttouch stamp-recog\n+\n+insn-extract.o : insn-extract.c $(CONFIG_H) $(RTL_H)\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-extract.c\n+\n+insn-extract.c: stamp-extract ;\n+stamp-extract : md genextract $(srcdir)/move-if-change\n+\t./genextract md > tmp-extract.c\n+\t$(srcdir)/move-if-change tmp-extract.c insn-extract.c\n+\ttouch stamp-extract\n+\n+insn-peep.o : insn-peep.c $(CONFIG_H) $(RTL_H) regs.h output.h real.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-peep.c\n+\n+insn-peep.c: stamp-peep ;\n+stamp-peep : md genpeep $(srcdir)/move-if-change\n+\t./genpeep md > tmp-peep.c\n+\t$(srcdir)/move-if-change tmp-peep.c insn-peep.c\n+\ttouch stamp-peep\n+\n+insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) regs.h real.h output.h \\\n+     insn-attr.h insn-config.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-attrtab.c\n+\n+insn-attr.h: stamp-attr ;\n+stamp-attr : md genattr $(srcdir)/move-if-change\n+\t./genattr md > tmp-attr.h\n+\t$(srcdir)/move-if-change tmp-attr.h insn-attr.h\n+\ttouch stamp-attr\n+\n+insn-attrtab.c: stamp-attrtab ;\n+stamp-attrtab : md genattrtab $(srcdir)/move-if-change\n+\t./genattrtab md > tmp-attrtab.c\n+\t$(srcdir)/move-if-change tmp-attrtab.c insn-attrtab.c\n+\ttouch stamp-attrtab\n+\n+insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) regs.h real.h conditions.h \\\n+    hard-reg-set.h insn-config.h insn-flags.h insn-attr.h output.h recog.h \\\n+    insn-codes.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c\n+\n+insn-output.c: stamp-output ;\n+stamp-output : md genoutput $(srcdir)/move-if-change\n+\t./genoutput md > tmp-output.c\n+\t$(srcdir)/move-if-change tmp-output.c insn-output.c\n+\ttouch stamp-output\n+\f\n+# Compile the programs that generate insn-* from the machine description.\n+# They are compiled with $(HOST_CC), and associated libraries,\n+# since they need to run on this machine\n+# even if GCC is being compiled to run on some other machine.\n+\n+# $(CONFIG_H) is omitted from the deps of the gen*.o\n+# because these programs don't really depend on anything \n+# about the target machine.  They do depend on config.h itself,\n+# since that describes the host machine.\n+\n+genconfig : genconfig.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genconfig \\\n+\t  genconfig.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genconfig.o : genconfig.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconfig.c\n+\n+genflags : genflags.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genflags \\\n+\t genflags.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genflags.o : genflags.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genflags.c\n+\n+gencodes : gencodes.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o gencodes \\\n+\t gencodes.o $(HOST_RTL) $(HOST_LIBS)\n+\n+gencodes.o : gencodes.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c\n+\n+genemit : genemit.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genemit \\\n+\t genemit.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genemit.o : genemit.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genemit.c\n+\n+genrecog : genrecog.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genrecog \\\n+\t genrecog.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genrecog.o : genrecog.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c\n+\n+genextract : genextract.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genextract \\\n+\t genextract.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genextract.o : genextract.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genextract.c\n+\n+genpeep : genpeep.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genpeep \\\n+\t genpeep.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genpeep.o : genpeep.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpeep.c\n+\n+genattr : genattr.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genattr \\\n+\t genattr.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genattr.o : genattr.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattr.c\n+\n+genattrtab : genattrtab.o $(HOST_RTL) $(HOST_RTLANAL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genattrtab \\\n+\t genattrtab.o $(HOST_RTL) $(HOST_RTLANAL) $(HOST_LIBS)\n+\n+genattrtab.o : genattrtab.c $(RTL_H) config.h insn-config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c\n+\n+genoutput : genoutput.o $(HOST_RTL) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genoutput \\\n+\t genoutput.o $(HOST_RTL) $(HOST_LIBS)\n+\n+genoutput.o : genoutput.c $(RTL_H) config.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genoutput.c\n+\f\n+# Compile the libraries to be used by gen*.\n+# If we are not cross-building, gen* use the same .o's that cc1 will use,\n+# and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict\n+# with the rules for rtl.o, alloca.o, etc.\n+$(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(CONFIG_H) $(RTL_H)\n+\trm -f $(HOST_PREFIX)rtl.c\n+\tcp $(srcdir)/rtl.c $(HOST_PREFIX)rtl.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c\n+\n+$(HOST_PREFIX_1)rtlanal.o: $(srcdir)/rtlanal.c $(CONFIG_H) $(RTL_H)\n+\trm -f $(HOST_PREFIX)rtlanal.c\n+\tcp $(srcdir)/rtlanal.c $(HOST_PREFIX)rtlanal.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtlanal.c\n+\n+$(HOST_PREFIX_1)alloca.o: alloca.c\n+\trm -f $(HOST_PREFIX)alloca.c\n+\tcp $(srcdir)/alloca.c $(HOST_PREFIX)alloca.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)alloca.c\n+\n+$(HOST_PREFIX_1)obstack.o: obstack.c\n+\trm -f $(HOST_PREFIX)obstack.c\n+\tcp $(srcdir)/obstack.c $(HOST_PREFIX)obstack.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)obstack.c\n+\n+$(HOST_PREFIX_1)malloc.o: malloc.c\n+\trm -f $(HOST_PREFIX)malloc.c\n+\tcp $(srcdir)/malloc.c $(HOST_PREFIX)malloc.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)malloc.c\n+\n+# This satisfies the dependency that we get if you cross-compile a compiler\n+# that does not need to compile alloca, malloc or whatever.\n+$(HOST_PREFIX_1): \n+\ttouch $(HOST_PREFIX_1)\n+\f\n+# Remake cpp and protoize.\n+\n+# Making the preprocessor\n+cpp: cccp\n+\t-rm -f cpp\n+\tln cccp cpp\n+cccp: cccp.o cexp.o version.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cccp cccp.o cexp.o version.o $(LIBS)\n+cexp.o: $(srcdir)/cexp.c $(CONFIG_H)\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/cexp.c\n+$(srcdir)/cexp.c: $(srcdir)/cexp.y\n+\tcd $(srcdir); $(BISON) -o cexp.c cexp.y\n+cccp.o: cccp.c $(CONFIG_H) pcp.h version.c\n+# The reason we use $(libdir)/g++-include rather than using libsubdir\n+# is for compatibility with the current version of libg++.\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+          -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n+          -DGPLUSPLUS_INCLUDE_DIR=\\\"$(libdir)/g++-include\\\" \\\n+\t  -DLOCAL_INCLUDE_DIR=\\\"$(prefix)/include\\\" \\\n+          -DCROSS_INCLUDE_DIR=\\\"$(libsubdir)/sys-include\\\" \\\n+\t  -c `echo $(srcdir)/cccp.c | sed 's,^\\./,,'`\n+\n+proto: config.status protoize unprotoize SYSCALLS.c.X protoize.1 unprotoize.1\n+\n+protoize: protoize.o getopt.o getopt1.o version.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) \\\n+\t  protoize.o getopt.o getopt1.o version.o $(LIBS) -o $@\n+protoize.o:\t$(srcdir)/protoize.c getopt.h $(CONFIG_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+          -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n+          -DGPLUSPLUS_INCLUDE_DIR=\\\"$(libsubdir)/g++-include\\\" \\\n+          -DCROSS_INCLUDE_DIR=\\\"$(libsubdir)/sys-include\\\" \\\n+\t  -DLOCAL_INCLUDE_DIR=\\\"$(prefix)/include\\\" \\\n+\t  -DSTD_PROTO_DIR=\\\"$(libsubdir)\\\" \\\n+\t  $(srcdir)/protoize.c\n+\n+unprotoize: unprotoize.o getopt.o getopt1.o version.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) \\\n+\t  unprotoize.o getopt.o getopt1.o version.o $(LIBS) -o $@\n+unprotoize.o:\t$(srcdir)/protoize.c getopt.h $(CONFIG_H)\n+\tcp $(srcdir)/protoize.c unprotoize.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+          -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n+          -DGPLUSPLUS_INCLUDE_DIR=\\\"$(libsubdir)/g++-include\\\" \\\n+          -DCROSS_INCLUDE_DIR=\\\"$(libsubdir)/sys-include\\\" \\\n+\t  -DLOCAL_INCLUDE_DIR=\\\"$(prefix)/include\\\" \\\n+\t  -DSTD_PROTO_DIR=\\\"$(libsubdir)\\\" \\\n+\t  -DUNPROTOIZE unprotoize.c\n+\trm -f unprotoize.c\n+\n+getopt.o: $(srcdir)/getopt.c getopt.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt.c\n+getopt1.o: $(srcdir)/getopt1.c getopt.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt1.c\n+\n+protoize.1:\t$(srcdir)/proto-man ./cpp\n+\t./cpp -traditional $(srcdir)/proto-man \\\n+\t\t| grep -v '^#' \\\n+\t\t\t| awk 'NF > 0 {print}' > tmp-protoize.1\n+\tmv tmp-protoize.1 protoize.1\n+\n+unprotoize.1:\t$(srcdir)/proto-man ./cpp\n+\t./cpp -traditional -DUNPRO $(srcdir)/proto-man \\\n+\t\t| grep -v '^#' \\\n+\t\t\t| awk 'NF > 0 {print}' > tmp-unprotoize.1\n+\tmv tmp-unprotoize.1 unprotoize.1\n+\n+# This info describes the target machine, so compile with GCC just built.\n+SYSCALLS.c.X:\tSYSCALLS.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t  -fgen-aux-info -S -o /dev/null $(srcdir)/SYSCALLS.c\n+\n+test-protoize:\n+\t-rm -f tmp-protoize.*\n+\tcp protoize.c tmp-protoize.c\n+\tchmod u+w tmp-protoize.c\n+\t./unprotoize -N -c \"-B./ -Wall -Wwrite-strings $(CFLAGS)\" tmp-protoize.c\n+\t./protoize -N -B ./ -c \"-B./ -Wall -Wwrite-strings $(CFLAGS)\" tmp-protoize.c\n+\t@echo Expect exactly one one line difference for visit_each_hash_node.\n+\t-diff protoize.c tmp-protoize.c\n+\t-rm -f tmp-protoize.*\n+\f\n+# Remake the info files.\n+\n+doc: $(srcdir)/cpp.info $(srcdir)/gplus.info $(srcdir)/gcc.info\n+\n+$(srcdir)/cpp.info: $(srcdir)/cpp.texi\n+\tmakeinfo `echo $(srcdir)/cpp.texi | sed 's,^\\./,,'`\n+\n+$(srcdir)/gplus.info: $(srcdir)/gplus.texi\n+\tmakeinfo `echo $(srcdir)/gplus.texi | sed 's,^\\./,,'`\n+\n+$(srcdir)/gcc.info: $(srcdir)/gcc.texi\n+\tmakeinfo `echo $(srcdir)/gcc.texi | sed 's,^\\./,,'`\n+\f\n+# Deletion of files made during compilation.\n+# There are four levels of this:\n+#   `mostlyclean', `clean', `cleanconfig' and `realclean'.\n+# `mostlyclean' is useful while working on a particular type of machine.\n+# It does not delete libgcc.a or its parts, so it won't have to be recompiled.\n+# `clean' deletes what you want to delete ordinarily to save space.\n+# This is most, but not all, of the files made by compilation.\n+# `cleanconfig' also deletes the files made by config.\n+# `realclean' also deletes everything that could be regenerated automatically.\n+\n+mostlyclean:\n+\t-rm -f $(STAGESTUFF)\n+# Delete the temporary source copies for cross compilation.\n+\t-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c\n+\t-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c\n+\t-rm -f $(HOST_PREFIX_1)obstack.c \n+# Delete the temp files made in the course of building libgcc.a.\n+\t-rm -f tmplibgcc.a* tmpcopy\n+\tfor name in $(LIB1FUNCS); do rm -f $${name}.c; done\n+# Delete other temporary files.\n+\t-rm -f tmp-float.h tmp-*protoize.1 tmp-gcc.xtar.Z tmp-limits.h\n+# Delete the stamp files.\n+\t-rm -f stamp-* tmp-*\n+\t-rm -f *.s *.s[0-9] *.co\n+\t-rm -f *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop\n+\t-rm -f *.dbr *.jump2 *.sched *.cse2 *.cpp *.sched2 *.stack\n+\t-rm -f gccnew specs core float.h enquire SYSCALLS.c.X\n+\t-rm -f collect collect2\n+\n+# delete all files made by compilation.\n+clean: mostlyclean\n+\t-rm -f libgcc.a libgcc1.a libgcc2.a libgcc2.ready\n+\t-rm -fr stage1 stage2 stage3 stage4\n+\n+# Like clean but also delete the links and files made to configure gcc.\n+cleanconfig: clean\n+\t-rm -f tm.h aux-output.c config.h md config.status tconfig.h\n+\t-rm -f Makefile aux-output2.c\n+\n+# Get rid of every file that's generated from some other file.\n+# Most of these files ARE PRESENT in the GCC distribution.\n+realclean: cleanconfig\n+\t-rm -f cpp.aux cpp.cps cpp.fns cpp.info cpp.kys cpp.pgs cpp.tps cpp.vrs\n+\t-rm -f cp-parse.c cp-parse.h cp-parse.output\n+\t-rm -f objc-parse.c objc-parse.output\n+\t-rm -f protoize.1 unprotoize.1\n+\t-rm -f c-parse.c c-parse.h c-parse.output\n+\t-rm -f cexp.c cexp.output TAGS \n+\t-rm -f cpp.info* cpp.?? cpp.??s cpp.log cpp.toc cpp.*aux\n+\t-rm -f gcc.info* gcc.?? gcc.??s gcc.log gcc.toc gcc.*aux\n+\t-rm -f gplus.info* gplus.?? gplus.??s gplus.log gplus.toc gplus.*aux\n+\t-rm -f *.dvi\n+\f\n+# Entry points `install' and `uninstall'.\n+# Also temporarily `install-fixincludes' could replace `install-headers'.\n+\n+install: $(INSTALL_TARGET)\n+\n+# Copy the files of native compiler into directories where they will be run.\n+install-native: install-common install-libgcc $(INSTALL_HEADERS) \\\n+   install-man install-proto\n+\n+# Copy the files of cross compiler into directories where they will be run.\n+install-cross: install-common install-common-headers \\\n+   install-man install-cross-tools install-libgcc\n+\n+# Install the tools, libraries and header files for the target machine\n+# where cross-compilation will look for them.\n+# Use tooldir to find them.\n+install-cross-tools: install-dir\n+# The first if makes this a no-op except for a cross compiler.\n+# The /. after the dirname causes test to follow symlinks.\n+# Before making a link or an indirection script, \n+# we verify the desired file does not already exist.\n+# If a symlink does exist, then making a symlink would certainly fail, \n+# leading us to overwrite the real file through the symlink.\n+\t-if [ -f gcc-cross ] ; \\\n+\tthen \\\n+\t  if [ -d $(tooldir)/. ] ; \\\n+\t  then \\\n+\t    for file in as ld ar ranlib; do \\\n+\t      if [ -f $(libsubdir)/$$file ] ; \\\n+\t      then true; \\\n+\t      else  \\\n+\t\t$(SYMLINK) $(tooldir)/bin/$$file $(libsubdir)/$$file \\\n+\t\t|| (echo \"#!/bin/sh\"; echo $(tooldir)/bin/$$file \"$$@\") > $(libsubdir)/$$file; \\\n+\t      fi; \\\n+\t    done; \\\n+\t    for file in $(tooldir)/lib/*; do \\\n+\t      if [ -f $$file ] ; \\\n+\t      then \\\n+\t\tif [ -f $(libsubdir)/`basename $$file` ] ; \\\n+\t\tthen true; \\\n+\t\telse  \\\n+\t\t  $(SYMLINK) $$file $(libsubdir)/`basename $$file` \\\n+\t\t  || $(INSTALL_DATA) $$file $(libsubdir)/`basename $$file`; \\\n+\t\tfi; \\\n+\t      else true; \\\n+\t      fi; \\\n+\t    done; \\\n+\t    if [ -d $(tooldir)/include/. ] ; then \\\n+\t      $(SYMLINK) $(tooldir)/include $(libsubdir)/sys-include \\\n+\t      || (if [ -d $(libsubdir)/sys-include ] ; then true ; else mkdir $(libsubdir)/sys-include ; fi; \\\n+\t\t  cd $(tooldir)/include; tar cf - . | (cd $(libsubdir)/sys-include; tar xpf -)); \\\n+\t    else true; fi; \\\n+\t  else true; \\\n+\t  fi; \\\n+\telse true; \\\n+\tfi;\n+\n+# Run this on the target machine\n+# to finish installation of cross compiler.\n+install-cross-rest: install-float-h-cross\n+\n+# Install float.h for cross compiler.\n+# Run this on the target machine!\n+install-float-h-cross:\n+\tif [ -f enquire ] ; then true; else false; done\n+\t-./enquire -f > float.h\n+\t-rm -f $(libsubdir)/include/float.h\n+\t$(INSTALL_DATA) float.h $(libsubdir)/include/float.h\n+\tchmod a-x $(libsubdir)/include/float.h\n+\n+# Create the installation directory.\n+install-dir:\n+\tif [ -d $(libdir) ] ; then true ; else mkdir $(libdir) ; fi\n+\tif [ -d $(libdir)/gcc ] ; then true ; else mkdir $(libdir)/gcc ; fi\n+\tif [ -d $(libdir)/gcc/$(target) ] ; then true ; else mkdir $(libdir)/gcc/$(target) ; fi\n+\tif [ -d $(libdir)/gcc/$(target)/$(version) ] ; then true ; else mkdir $(libdir)/gcc/$(target)/$(version) ; fi\n+\tif [ -d $(bindir) ] ; then true ; else mkdir $(bindir) ; fi\n+# We don't use mkdir -p to create the parents of mandir,\n+# because some systems don't support it.\n+# Instead, we use this technique to create the immediate parent of mandir.\n+\tparent=`echo $(mandir)|sed -e 's@/[^/]*$$@@'`; \\\n+\tif [ -d $$parent ] ; then true ; else mkdir $$parent ; fi\n+\t-if [ -d $(mandir) ] ; then true ; else mkdir $(mandir) ; fi\n+\n+# Install the compiler executables built during cross compilation.\n+install-common: native install-dir\n+\tfor file in $(COMPILERS); do \\\n+\t  if [ -f $$file ] ; then \\\n+\t    rm -f $(libsubdir)/$$file; \\\n+\t    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \\\n+\t  else true; \\\n+\t  fi; \\\n+\tdone\n+\tfor file in $(EXTRA_PASSES) $(EXTRA_PARTS) ..; do \\\n+\t  if [ x\"$$file\" != x.. ]; then \\\n+\t    rm -f $(libsubdir)/$$file; \\\n+\t    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \\\n+\t  else true; fi; \\\n+\tdone\n+\t-rm -f $(libsubdir)/specs\n+\t$(INSTALL_DATA) specs $(libsubdir)/specs\n+# Install the driver program as gcc-$(target)\n+# and also as either gcc (if native) or $(tooldir)/bin/gcc.\n+\t-if [ -f gcc-cross ] ; then \\\n+\t  if [ -d $(tooldir)/bin/. ] ; then \\\n+\t    rm -f $(tooldir)/bin/gcc; \\\n+\t    $(INSTALL_PROGRAM) gcc-cross $(tooldir)/bin/gcc; \\\n+\t    $(INSTALL_PROGRAM) gcc-cross $(bindir)/gcc-$(target); \\\n+\t  else true; fi; \\\n+\telse \\\n+\t  rm -f $(bindir)/gcc; \\\n+\t  $(INSTALL_PROGRAM) gcc $(bindir)/gcc; \\\n+\t  rm -f $(bindir)/gcc-$(target)-1; \\\n+\t  ln $(bindir)/gcc $(bindir)/gcc-$(target)-1; \\\n+\t  mv $(bindir)/gcc-$(target)-1 $(bindir)/gcc-$(target); \\\n+\tfi\n+\t$(INSTALL_PROGRAM) $(srcdir)/c++ $(bindir)/c++\n+\t$(INSTALL_PROGRAM) $(srcdir)/g++ $(bindir)/g++\n+\t-rm -f $(libsubdir)/cpp\n+\t$(INSTALL_PROGRAM) cpp $(libsubdir)/cpp\n+\n+# Install protoize.\n+install-proto: proto install-dir\n+\t-rm -f $(bindir)/protoize\n+\t$(INSTALL_PROGRAM) protoize $(bindir)/protoize\n+\t-rm -f $(bindir)/unprotoize\n+\t$(INSTALL_PROGRAM) unprotoize $(bindir)/unprotoize\n+\t-rm -f $(libsubdir)/SYSCALLS.c.X\n+\t$(INSTALL_DATA) SYSCALLS.c.X $(libsubdir)/SYSCALLS.c.X\n+\tchmod a-x $(libsubdir)/SYSCALLS.c.X\n+\n+# Install the man pages.\n+install-man: install-dir $(srcdir)/gcc.1 protoize.1 unprotoize.1\n+\t-rm -f $(mandir)/gcc$(manext)\n+\t$(INSTALL_DATA) $(srcdir)/gcc.1 $(mandir)/gcc$(manext)\n+\tchmod a-x $(mandir)/gcc$(manext)\n+\t-rm -f $(mandir)/protoize$(manext)\n+\t$(INSTALL_DATA) protoize.1 $(mandir)/protoize$(manext)\n+\tchmod a-x $(mandir)/protoize$(manext)\n+\t-rm -f $(mandir)/unprotoize$(manext)\n+\t$(INSTALL_DATA) unprotoize.1 $(mandir)/unprotoize$(manext)\n+\tchmod a-x $(mandir)/unprotoize$(manext)\n+\n+# Install the library.\n+install-libgcc: libgcc.a\n+\t-if [ -f libgcc.a ] ; then \\\n+\t  rm -f $(libsubdir)/libgcc.a; \\\n+\t  $(INSTALL_DATA) libgcc.a $(libsubdir)/libgcc.a; \\\n+\t  if $(RANLIB_TEST) ; then \\\n+\t    (cd $(libsubdir); $(RANLIB) libgcc.a); else true; fi; \\\n+\t  chmod a-x $(libsubdir)/libgcc.a; \\\n+\telse true; fi\n+\n+# Install all the header files for native compiler.\n+install-headers: install-common-headers install-float-h install-limits-h\n+\n+# Install float.h for native compiler.\n+install-float-h: float.h\n+\t-rm -f $(libsubdir)/include/float.h\n+\t$(INSTALL_DATA) float.h $(libsubdir)/include/float.h\n+\tchmod a-x $(libsubdir)/include/float.h\n+\n+# Install limits.h, optionally inheriting from the standard system version.\n+install-limits-h: limits.h limitx.h\n+\t-rm -f $(libsubdir)/include/limits.h tmp-limits.h\n+\tif [ -f /usr/include/limits.h ] ; then \\\n+\t  cat $(srcdir)/limitx.h $(srcdir)/limits.h > tmp-limits.h; \\\n+\telse \\\n+\t  cat $(srcdir)/limits.h > tmp-limits.h; \\\n+\tfi\n+\t$(INSTALL_DATA) tmp-limits.h $(libsubdir)/include/limits.h\n+\tchmod a-x $(libsubdir)/include/limits.h\n+\trm tmp-limits.h\n+\n+# Install the fixed headers that are the same for all machines.\n+install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h\n+\tif [ -d $(libsubdir)/include ] ; then true ; else mkdir $(libsubdir)/include ; fi\n+\t-chmod ugo+rx $(libsubdir)/include\n+# Must compute $(libsubdir) before the cd; the awk script won't work after.\n+\tshelllibsubdir=$(libsubdir); \\\n+\tcd $(srcdir); \\\n+\tfor file in $(USER_H); do \\\n+\t   rm -f $$shelllibsubdir/include/`basename $$file`; \\\n+\t   $(INSTALL_DATA) `basename $$file` $$shelllibsubdir/include/`basename $$file`; \\\n+\t   chmod a-x $$shelllibsubdir/include/`basename $$file`; \\\n+\tdone\n+\t-rm -f $(libsubdir)/include/varargs.h\n+\t$(INSTALL_DATA) $(srcdir)/gvarargs.h $(libsubdir)/include/varargs.h\n+\tchmod a-x $(libsubdir)/include/varargs.h\n+\t-rm -f $(libsubdir)/include/stdarg.h\n+\t$(INSTALL_DATA) $(srcdir)/gstdarg.h $(libsubdir)/include/stdarg.h\n+\tchmod a-x $(libsubdir)/include/stdarg.h\n+\t-rm -f $(libsubdir)/include/stddef.h\n+\t$(INSTALL_DATA) $(srcdir)/gstddef.h $(libsubdir)/include/stddef.h\n+\tchmod a-x $(libsubdir)/include/stddef.h\n+\n+# $(libsubdir)/include:\n+#\tif [ -d $(libsubdir)/include ] ; then true ; else mkdir $(libsubdir)/include ; fi\n+#\t-chmod ugo+rx $(libsubdir)/include\n+\n+# This appears not to work.  It isn't clear how to fix it.\n+# $(libsubdir)/include/README: $(libsubdir)/include $(srcdir)/fixincludes\n+#\tLIB=$(libsubdir)/include $(srcdir)/fixincludes\n+#\t$(INSTALL_DATA) $(srcdir)/fixincludes-README $@\n+#\tchmod a-x $@\n+\n+# Run fixincludes in the proper directory.\n+install-fixincludes: install-headers\n+\trm -rf $(libsubdir)/tmp\n+\tmkdir $(libsubdir)/tmp\n+# Move aside the headers that come from GCC; delete all else.\n+\tcd $(libsubdir)/include; mv $(INSTALLED_H) ../tmp; rm -rf *\n+# Install fixed copies of system files.\n+\t$(srcdir)/$(FIXINCLUDES) $(libsubdir)/include\n+# Bring back gcc's header files.\n+\tcd $(libsubdir)/include; mv ../tmp/* .; rmdir ../tmp\n+# Install the README\n+\t$(INSTALL_DATA) $(srcdir)/README-fixinc $(libsubdir)/include/README\n+\tchmod a-x $(libsubdir)/include/README\n+\n+# Cancel installation by deleting the installed files.\n+uninstall:\n+\t-rm -rf $(libsubdir)\n+\t-rm -rf $(bindir)/gcc\n+\t-rm -rf $(mandir)/protoize$(manext)\n+\t-rm -rf $(mandir)/unprotoize$(manext)\n+\t-rm -rf $(bindir)/protoize\n+\t-rm -rf $(bindir)/unprotoize\n+\t-rm -rf $(mandir)/gcc$(manext)\n+\t-rm -rf $(mandir)/protoize$(manext)\n+\t-rm -rf $(mandir)/unprotoize$(manext)\n+\f\n+# These exist for maintenance purposes.\n+\n+# Update the tags table.\n+TAGS: force\n+\tcd $(srcdir);\t\t\t\t\t\t\t\\\n+\tmkdir temp;\t\t\t\t\t\t\t\\\n+\tmv -f c-parse.c c-parse.h cp-parse.c cp-parse.h objc-parse.c cexp.c temp;\t\\\n+\tetags *.y *.h *.c;\t\t\t\t\t\t\\\n+\tmv temp/* .;\t\t\t\t\t\t\t\\\n+\trmdir temp\n+\n+# Create the distribution tar file.\n+#dist: gcc-$(version).tar.Z\n+dist: gcc.xtar.Z\n+\n+gcc.xtar.Z:\n+\tcompress < gcc.xtar > tmp-gcc.xtar.Z\n+\tmv tmp-gcc.xtar.Z gcc.xtar.Z\n+\n+#gcc-$(version).tar.Z: gcc-$(version).tar\n+#\tcompress < gcc-$(version).tar > gcc-$(version).tar.Z\n+\n+#gcc-$(version).tar:\n+gcc.xtar:\n+\t-rm -rf gcc-$(version)\n+# Put all the files in a temporary subdirectory\n+# which has the name that we want to have in the tar file.\n+\tmkdir gcc-$(version)\n+\tfor file in *; do \\\n+\t  ln $file gcc-$(version) || cp $file gcc-$(version); \\\n+\tdone\n+# Get rid of everything we don't want in the distribution.\n+\tcd gcc-$(version); make -f Makefile.in distclean\n+# Make the distribution.\n+\ttar chf gcc.xtar gcc-$(version)\n+# Get rid of the temporary directory.\n+\trm -rf gcc-$(version)\n+\n+# do make -f ../gcc/Makefile maketest DIR=../gcc\n+# in the intended test directory to make it a suitable test directory.\n+# THIS IS OBSOLETE; use the -srcdir operand in configure instead. \n+maketest:\n+\tln -s $(DIR)/*.[chy] .\n+\tln -s $(DIR)/configure .\n+\tln -s $(DIR)/*.def .\n+\t-rm -f =*\n+\tln -s $(DIR)/.gdbinit .\n+\tln -s $(DIR)/$(FIXINCLUDES) .\n+\t-ln -s $(DIR)/bison.simple .\n+\tln -s $(DIR)/config .\n+\tln -s $(DIR)/move-if-change .\n+# The then and else were swapped to avoid a problem on Ultrix.\n+\tif [ ! -f Makefile ] ; then ln -s $(DIR)/Makefile .; else false; fi\n+\t-rm tm.h aux-output.c config.h md\n+\tmake clean\n+# You must then run config to set up for compilation.\n+\n+bootstrap: all force\n+\t$(MAKE) stage1\n+\t$(MAKE) CC=\"stage1/gcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\" ALLOCA=\n+\t$(MAKE) stage2\n+\t$(MAKE) CC=\"stage2/gcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\" ALLOCA=\n+\n+bootstrap2: force\n+\t$(MAKE) CC=\"stage1/gcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\" ALLOCA=\n+\t$(MAKE) stage2\n+\t$(MAKE) CC=\"stage2/gcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\" ALLOCA=\n+\n+bootstrap3: force\n+\t$(MAKE) CC=\"stage2/gcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\" ALLOCA=\n+\n+# Copy the object files from a particular stage into a subdirectory.\n+stage1: force\n+\tif [ -d stage1 ] ; then true ; else mkdir stage1 ; fi\n+\t-mv $(STAGESTUFF) stage1\n+\t-rm -f stage1/libgcc.a\n+\t-cp libgcc.a stage1\n+\t-if $(RANLIB_TEST) ; then $(RANLIB) stage1/libgcc.a; else true; fi\n+\n+stage2: force\n+\tif [ -d stage2 ] ; then true ; else mkdir stage2 ; fi\n+\t-mv $(STAGESTUFF) stage2\n+\t-rm -f stage2/libgcc.a\n+\t-cp libgcc.a stage2\n+\t-if $(RANLIB_TEST) ; then $(RANLIB) stage2/libgcc.a; else true; fi\n+\n+stage3: force\n+\tif [ -d stage3 ] ; then true ; else mkdir stage3 ; fi\n+\t-mv $(STAGESTUFF) stage3\n+\t-rm -f stage3/libgcc.a\n+\t-cp libgcc.a stage3\n+\t-if $(RANLIB_TEST) ; then $(RANLIB) stage3/libgcc.a; else true; fi\n+\n+stage4: force\n+\tif [ -d stage4 ] ; then true ; else mkdir stage4 ; fi\n+\t-mv $(STAGESTUFF) stage4\n+\t-rm -f stage4/libgcc.a\n+\t-cp libgcc.a stage4\n+\t-if $(RANLIB_TEST) ; then $(RANLIB) stage4/libgcc.a; else true; fi\n+\n+# Copy just the executable files from a particular stage into a subdirectory,\n+# and delete the object files.  Use this if you're just verifying a version\n+# that is pretty sure to work, and you are short of disk space.\n+risky-stage1: force\n+\tif [ -d stage1 ] ; then true ; else mkdir stage1 ; fi\n+\t-mv cc1 cpp cccp gcc stage1\n+\t-rm -f stage1/libgcc.a\n+\t-cp libgcc.a stage1 && $(RANLIB) stage1/libgcc.a\n+\t-make clean\n+\n+risky-stage2: force\n+\tif [ -d stage2 ] ; then true ; else mkdir stage2 ; fi\n+\t-mv cc1 cpp cccp gcc stage2\n+\t-rm -f stage2/libgcc.a\n+\t-cp libgcc.a stage2 && $(RANLIB) stage2/libgcc.a\n+\t-make clean\n+\n+risky-stage3: force\n+\tif [ -d stage3 ] ; then true ; else mkdir stage3 ; fi\n+\t-mv cc1 cpp cccp gcc stage3\n+\t-rm -f stage3/libgcc.a\n+\t-cp libgcc.a stage3 && $(RANLIB) stage3/libgcc.a\n+\t-make clean\n+\n+risky-stage4: force\n+\tif [ -d stage4 ] ; then true ; else mkdir stage4 ; fi\n+\t-mv cc1 cpp cccp gcc stage4\n+\t-rm -f stage4/libgcc.a\n+\t-cp libgcc.a stage4 && $(RANLIB) stage4/libgcc.a\n+\t-make clean\n+\n+#In GNU Make, ignore whether `stage*' exists.\n+.PHONY: stage1 stage2 stage3 stage4 clean realclean TAGS bootstrap\n+.PHONY: risky-stage1 risky-stage2 risky-stage3 risky-stage4\n+\n+force:"}]}