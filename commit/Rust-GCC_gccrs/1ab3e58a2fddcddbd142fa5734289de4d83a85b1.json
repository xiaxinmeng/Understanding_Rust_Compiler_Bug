{"sha": "1ab3e58a2fddcddbd142fa5734289de4d83a85b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiM2U1OGEyZmRkY2RkYmQxNDJmYTU3MzQyODlkZTRkODNhODViMQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-04-12T11:31:25Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-04-12T11:31:25Z"}, "message": "function.c (fixup_var_refs_1): For paradoxical (subreg VAR), replace VAR, don't try the subreg.\n\n\t* function.c (fixup_var_refs_1) <SET, handling VAR in SET_SRC>:\n\tFor paradoxical (subreg VAR), replace VAR, don't try the subreg.\n\nFrom-SVN: r52217", "tree": {"sha": "94fd28ef6a94bc51e738df04396dbe699907efb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fd28ef6a94bc51e738df04396dbe699907efb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab3e58a2fddcddbd142fa5734289de4d83a85b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab3e58a2fddcddbd142fa5734289de4d83a85b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab3e58a2fddcddbd142fa5734289de4d83a85b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab3e58a2fddcddbd142fa5734289de4d83a85b1/comments", "author": null, "committer": null, "parents": [{"sha": "4b72e8edacabbf47b7ec8035bbe87d4aaf5dca9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b72e8edacabbf47b7ec8035bbe87d4aaf5dca9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b72e8edacabbf47b7ec8035bbe87d4aaf5dca9a"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "f77367902b6c7dc8b77d2d5f6a06179bc0fbadfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab3e58a2fddcddbd142fa5734289de4d83a85b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab3e58a2fddcddbd142fa5734289de4d83a85b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ab3e58a2fddcddbd142fa5734289de4d83a85b1", "patch": "@@ -1,3 +1,8 @@\n+2002-04-12  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* function.c (fixup_var_refs_1) <SET, handling VAR in SET_SRC>:\n+\tFor paradoxical (subreg VAR), replace VAR, don't try the subreg.\n+\n Fri Apr 12 10:51:38 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.c (broken_move): Constant 0. / 1. load is OK if there is"}, {"sha": "86a87ab60683574c10daf8136d907418561b4d3f", "filename": "gcc/function.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab3e58a2fddcddbd142fa5734289de4d83a85b1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab3e58a2fddcddbd142fa5734289de4d83a85b1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1ab3e58a2fddcddbd142fa5734289de4d83a85b1", "patch": "@@ -2370,15 +2370,29 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements, no_share)\n \t  {\n \t    rtx pat, last;\n \n-\t    replacement = find_fixup_replacement (replacements, SET_SRC (x));\n-\t    if (replacement->new)\n-\t      SET_SRC (x) = replacement->new;\n-\t    else if (GET_CODE (SET_SRC (x)) == SUBREG)\n-\t      SET_SRC (x) = replacement->new\n-\t\t= fixup_memory_subreg (SET_SRC (x), insn, 0);\n+\t    if (GET_CODE (SET_SRC (x)) == SUBREG\n+\t\t&& (GET_MODE_SIZE (GET_MODE (SET_SRC (x)))\n+\t\t    > GET_MODE_SIZE (GET_MODE (var))))\n+\t      {\n+\t\t/* This (subreg VAR) is now a paradoxical subreg.  We need\n+\t\t   to replace VAR instead of the subreg.  */\n+\t\treplacement = find_fixup_replacement (replacements, var);\n+\t\tif (replacement->new == NULL_RTX)\n+\t\t  replacement->new = gen_reg_rtx (GET_MODE (var));\n+\t\tSUBREG_REG (SET_SRC (x)) = replacement->new;\n+\t      }\n \t    else\n-\t      SET_SRC (x) = replacement->new\n-\t\t= fixup_stack_1 (SET_SRC (x), insn);\n+\t      {\n+\t\treplacement = find_fixup_replacement (replacements, SET_SRC (x));\n+\t\tif (replacement->new)\n+\t\t  SET_SRC (x) = replacement->new;\n+\t\telse if (GET_CODE (SET_SRC (x)) == SUBREG)\n+\t\t  SET_SRC (x) = replacement->new\n+\t\t    = fixup_memory_subreg (SET_SRC (x), insn, 0);\n+\t\telse\n+\t\t  SET_SRC (x) = replacement->new\n+\t\t    = fixup_stack_1 (SET_SRC (x), insn);\n+\t      }\n \n \t    if (recog_memoized (insn) >= 0)\n \t      return;"}]}