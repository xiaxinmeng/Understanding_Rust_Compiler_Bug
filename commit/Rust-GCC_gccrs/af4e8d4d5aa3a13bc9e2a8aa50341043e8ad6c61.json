{"sha": "af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0ZThkNGQ1YWEzYTEzYmM5ZTJhOGFhNTAzNDEwNDNlOGFkNmM2MQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-11-24T17:09:44Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-11-24T17:09:44Z"}, "message": "libstdc++: Improve _GLIBCXX_DEBUG __valid_range check\n\nAdds iterator singular check within the valid range check.\n\n\t* include/debug/functions.h: Remove <bits/move.h> include.\n\t(__check_singular_aux, __check_singular): Move...\n\t* include/debug/helper_functions.h:\n\t(__check_singular_aux, __check_singular): ...here.\n\t(__valid_range_aux): Adapt to use latter.\n\tAdd <bits/move.h> include.\n\t* testsuite/25_algorithms/copy/debug/2_neg.cc: New.\n\nFrom-SVN: r278658", "tree": {"sha": "d2ed480c1b521252fc2ec2c54b252c09b966866f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ed480c1b521252fc2ec2c54b252c09b966866f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/comments", "author": null, "committer": null, "parents": [{"sha": "74b9f8dfe18b51280ecb9b68e0de7d4f7e36e973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b9f8dfe18b51280ecb9b68e0de7d4f7e36e973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b9f8dfe18b51280ecb9b68e0de7d4f7e36e973"}], "stats": {"total": 116, "additions": 86, "deletions": 30}, "files": [{"sha": "a479a1219ff878f879d580a0cc4f5f9157fc0d13", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "patch": "@@ -1,3 +1,12 @@\n+2019-11-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/functions.h: Remove <bits/move.h> include.\n+\t(__check_singular_aux, __check_singular): Move...\n+\t* include/debug/helper_functions.h:\n+\t(__check_singular_aux, __check_singular): ...here.\n+\t(__valid_range_aux): Adapt to use latter.\n+\t* testsuite/25_algorithms/copy/debug/2_neg.cc: New.\n+\n 2019-11-20  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* doc/html/api.html: Use https for gcc.gnu.org.\n@@ -515,7 +524,7 @@\n \t* doc/xml/manual/codecvt.xml: Switch pubs.opengroup.org to https.\n \t* doc/xml/manual/locale.xml (LC_ALL): Ditto.\n \t* doc/xml/manual/messages.xml: Ditto.\n-\t\n+\n 2019-10-26  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/abi/post/hppa-linux-gnu/baseline_symbols.txt: Update.\n@@ -544,7 +553,7 @@\n \tpubs.opengroup.org to https.\n \n 2019-10-25  Gerald Pfeifer  <gerald@pfeifer.com>\n-\t\n+\n \t* doc/xml/gnu/gpl-3.0.xml: Switch www.gnu.org to https.\n \n 2019-09-09  Edward Smith-Rowland  <3dw4rd@verizon.net>\n@@ -2613,7 +2622,7 @@\n \tPSTL backend if no TBB present.\n \t* testsuite/utils/pstl/test_utils.h: Remove check for\n \t_PSTL_USE_PAR_POLICIES\n-\t\n+\n 2019-06-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/24_iterators/container_access.cc: Move dg-options before\n@@ -4409,7 +4418,7 @@\n \tDocument PSTL linker flags\n \n \t* doc/xml/manual/using.xml: Add PSTL linker flags to table 3.1.\n-\t\n+\n 2019-04-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/variant (__detail::__variant::_Traits): Make\n@@ -4491,7 +4500,7 @@\n \n \t* include/bits/c++config: Remove explicit PSTL configuration\n \tmacros and use definitions from <pstl/pstl_config.h>.\n-\t\n+\n 2019-04-20  Thomas Rodgers <trodgers@redhat.com>\n \n \tCleanup algorithm implementations\n@@ -4501,9 +4510,9 @@\n \t(equal): Qualify call to std::equal().\n \t(partial_sort): Forward execution policy.\n \t(inplace_merge): Forward execution policy.\n-\t\n+\n 2019-04-19  Thomas Rodgers <trodgers@redhat.com>\n-\t\n+\n \tImprove implementation of parallel equal()\n \t* include/pstl/algorithm_impl.h\n \t(__internal::__brick_equal): use \"4 iterator\" version of\n@@ -4518,7 +4527,7 @@\n \t* include/pstl/glue_algorithm_impl.h\n \t(std::equal): dispatch to \"4 iterator\" version of\n \t__internal::__pattern_equal().\n-\t\n+\n 2019-04-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90105\n@@ -4559,7 +4568,7 @@\n \t* testsuite/20_util/optional/observers/4.cc: Likewise.\n \n 2019-04-12  Thomas Rodgers  <trodgers@redhat.com>\n-\t\n+\n \t* include/pstl/algorithm_impl.h: Uglify identfiers.\n \t* include/pstl/numeric_impl.h:  Uglify identfiers.\n \t* include/pstl/parallel_backend_tbb.h: Uglify identfiers.\n@@ -4840,7 +4849,7 @@\n \tavoid -Wconversion warnings.\n \n 2019-03-21  Thomas Rodgers  <trodgers@redhat.com>\n-\t\n+\n \t* include/Makefile.am (std_header): Add ${std_srcdir}/execution.\n \t(pstl_srcdir, pstl_builddir, pstl_headers): New variables.\n \t(allstamped): Add stamp-pstl."}, {"sha": "12df745b573ed43e8fad803d7ed91f74ed30a433", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "patch": "@@ -29,7 +29,6 @@\n #ifndef _GLIBCXX_DEBUG_FUNCTIONS_H\n #define _GLIBCXX_DEBUG_FUNCTIONS_H 1\n \n-#include <bits/move.h>\t\t// for __addressof\n #include <bits/stl_function.h>\t// for less\n \n #if __cplusplus >= 201103L\n@@ -49,23 +48,6 @@ namespace __gnu_debug\n   template<typename _Sequence>\n     struct _Is_contiguous_sequence : std::__false_type { };\n \n-  // An arbitrary iterator pointer is not singular.\n-  inline bool\n-  __check_singular_aux(const void*) { return false; }\n-\n-  // We may have an iterator that derives from _Safe_iterator_base but isn't\n-  // a _Safe_iterator.\n-  template<typename _Iterator>\n-    inline bool\n-    __check_singular(const _Iterator& __x)\n-    { return __check_singular_aux(std::__addressof(__x)); }\n-\n-  /** Non-NULL pointers are nonsingular. */\n-  template<typename _Tp>\n-    inline bool\n-    __check_singular(const _Tp* __ptr)\n-    { return __ptr == 0; }\n-\n   /* Checks that [first, last) is a valid range, and then returns\n    * __first. This routine is useful when we can't use a separate\n    * assertion statement because, e.g., we are in a constructor."}, {"sha": "ac93ee0472081c876f7132b557c26fa904841f17", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "patch": "@@ -29,6 +29,7 @@\n #ifndef _GLIBCXX_DEBUG_HELPER_FUNCTIONS_H\n #define _GLIBCXX_DEBUG_HELPER_FUNCTIONS_H 1\n \n+#include <bits/move.h>\t\t\t\t// for __addressof\n #include <bits/stl_iterator_base_types.h>\t// for iterator_traits,\n \t\t\t\t\t\t// categories and _Iter_base\n #include <bits/cpp_type_traits.h>\t\t// for __is_integer\n@@ -112,6 +113,23 @@ namespace __gnu_debug\n     __get_distance(_Iterator __lhs, _Iterator __rhs)\n     { return __get_distance(__lhs, __rhs, std::__iterator_category(__lhs)); }\n \n+  // An arbitrary iterator pointer is not singular.\n+  inline bool\n+  __check_singular_aux(const void*) { return false; }\n+\n+  // We may have an iterator that derives from _Safe_iterator_base but isn't\n+  // a _Safe_iterator.\n+  template<typename _Iterator>\n+    inline bool\n+    __check_singular(_Iterator const& __x)\n+    { return __check_singular_aux(std::__addressof(__x)); }\n+\n+  /** Non-NULL pointers are nonsingular. */\n+  template<typename _Tp>\n+    inline bool\n+    __check_singular(_Tp* const& __ptr)\n+    { return __ptr == 0; }\n+\n   /** We say that integral types for a valid range, and defer to other\n    *  routines to realize what to do with integral types instead of\n    *  iterators.\n@@ -138,14 +156,21 @@ namespace __gnu_debug\n     inline bool\n     __valid_range_aux(_InputIterator __first, _InputIterator __last,\n \t\t      std::input_iterator_tag)\n-    { return true; }\n+    {\n+      return __first == __last\n+\t|| (!__check_singular(__first) && !__check_singular(__last));\n+    }\n \n   template<typename _InputIterator>\n     _GLIBCXX_CONSTEXPR\n     inline bool\n     __valid_range_aux(_InputIterator __first, _InputIterator __last,\n \t\t      std::random_access_iterator_tag)\n-    { return __first <= __last; }\n+    {\n+      return\n+\t__valid_range_aux(__first, __last, std::input_iterator_tag{})\n+\t&& __first <= __last;\n+    }\n \n   /** We have iterators, so figure out what kind of iterators they are\n    *  to see if we can check the range ahead of time.\n@@ -167,6 +192,9 @@ namespace __gnu_debug\n \t\t      typename _Distance_traits<_InputIterator>::__type& __dist,\n \t\t      std::__false_type)\n     {\n+      if (!__valid_range_aux(__first, __last, std::input_iterator_tag{}))\n+\treturn false;\n+\n       __dist = __get_distance(__first, __last);\n       switch (__dist.second)\n \t{"}, {"sha": "8bbf873de966a0a380623dc795040c1229bd50ea", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/debug/2_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2F2_neg.cc?ref=af4e8d4d5aa3a13bc9e2a8aa50341043e8ad6c61", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.1 [lib.alg.copy] Copy.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+\n+void\n+test01()\n+{\n+  int arr[] = { 0, 1, 2, 3, 4 };\n+  std::copy((int*)0, arr + 5, arr);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}