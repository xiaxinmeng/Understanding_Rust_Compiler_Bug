{"sha": "2d8d0db8f8424a4db82f5c3d071d6395c2625a5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4ZDBkYjhmODQyNGE0ZGI4MmY1YzNkMDcxZDYzOTVjMjYyNWE1Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T23:36:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T23:36:32Z"}, "message": "(expand_inline_function): Allow extra arguments and force their\nevaluation for side-effects.\n\nFrom-SVN: r6661", "tree": {"sha": "fcd573fa42b19892e8ec4c6a83d609e5c4ac291c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcd573fa42b19892e8ec4c6a83d609e5c4ac291c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8d0db8f8424a4db82f5c3d071d6395c2625a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8d0db8f8424a4db82f5c3d071d6395c2625a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8d0db8f8424a4db82f5c3d071d6395c2625a5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8d0db8f8424a4db82f5c3d071d6395c2625a5b/comments", "author": null, "committer": null, "parents": [{"sha": "d391688a17b00a0a7ec88b986fd84749266a39c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d391688a17b00a0a7ec88b986fd84749266a39c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d391688a17b00a0a7ec88b986fd84749266a39c7"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "c6ba0e1157aa7e69a2526f9aa5ddc18cc472255c", "filename": "gcc/integrate.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d0db8f8424a4db82f5c3d071d6395c2625a5b/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d0db8f8424a4db82f5c3d071d6395c2625a5b/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=2d8d0db8f8424a4db82f5c3d071d6395c2625a5b", "patch": "@@ -1,5 +1,5 @@\n /* Procedure integration for GNU CC.\n-   Copyright (C) 1988, 1991, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1991, 1993, 1994 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1172,29 +1172,39 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n \n   nargs = list_length (DECL_ARGUMENTS (fndecl));\n \n-  /* We expect PARMS to have the right length; don't crash if not.  */\n-  if (list_length (parms) != nargs)\n-    return (rtx) (HOST_WIDE_INT) -1;\n-  /* Also check that the parms type match.  Since the appropriate\n-     conversions or default promotions have already been applied,\n-     the machine modes should match exactly.  */\n+  /* Check that the parms type match and that sufficient arguments were\n+     passed.  Since the appropriate conversions or default promotions have\n+     already been applied, the machine modes should match exactly.  */\n+\n   for (formal = DECL_ARGUMENTS (fndecl),\n        actual = parms;\n        formal;\n        formal = TREE_CHAIN (formal),\n        actual = TREE_CHAIN (actual))\n     {\n-      tree arg = TREE_VALUE (actual);\n-      enum machine_mode mode = TYPE_MODE (DECL_ARG_TYPE (formal));\n-      if (mode != TYPE_MODE (TREE_TYPE (arg)))\n+      tree arg;\n+      enum machine_mode mode;\n+\n+      if (actual == 0)\n \treturn (rtx) (HOST_WIDE_INT) -1;\n-      /* If they are block mode, the types should match exactly.\n-         They don't match exactly if TREE_TYPE (FORMAL) == ERROR_MARK_NODE,\n-\t which could happen if the parameter has incomplete type.  */\n-      if (mode == BLKmode && TREE_TYPE (arg) != TREE_TYPE (formal))\n+\n+      arg = TREE_VALUE (actual);\n+      mode= TYPE_MODE (DECL_ARG_TYPE (formal));\n+\n+      if (mode != TYPE_MODE (TREE_TYPE (arg))\n+\t  /* If they are block mode, the types should match exactly.\n+\t     They don't match exactly if TREE_TYPE (FORMAL) == ERROR_MARK_NODE,\n+\t     which could happen if the parameter has incomplete type.  */\n+\t  || (mode == BLKmode && TREE_TYPE (arg) != TREE_TYPE (formal)))\n \treturn (rtx) (HOST_WIDE_INT) -1;\n     }\n \n+  /* Extra arguments are valid, but will be ignored below, so we must\n+     evaluate them here for side-effects.  */\n+  for (; actual; actual = TREE_CHAIN (actual))\n+    expand_expr (TREE_VALUE (actual), const0_rtx,\n+\t\t TYPE_MODE (TREE_TYPE (TREE_VALUE (actual))), 0);\n+\n   /* Make a binding contour to keep inline cleanups called at\n      outer function-scope level from looking like they are shadowing\n      parameter declarations.  */"}]}