{"sha": "78067f1634e8a4b2e5705aabd68b771a660b08ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwNjdmMTYzNGU4YTRiMmU1NzA1YWFiZDY4Yjc3MWE2NjBiMDhlZg==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-03-01T20:43:02Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-03-01T20:43:02Z"}, "message": "remove unused symlinks from generated include dir\n\nFrom-SVN: r32284", "tree": {"sha": "4d013874e12240faddf721b85aba7d8aa0bb085f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d013874e12240faddf721b85aba7d8aa0bb085f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78067f1634e8a4b2e5705aabd68b771a660b08ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78067f1634e8a4b2e5705aabd68b771a660b08ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78067f1634e8a4b2e5705aabd68b771a660b08ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78067f1634e8a4b2e5705aabd68b771a660b08ef/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbb886eb3867db7f93c0f1a328911d5b308b8680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb886eb3867db7f93c0f1a328911d5b308b8680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb886eb3867db7f93c0f1a328911d5b308b8680"}], "stats": {"total": 165, "additions": 129, "deletions": 36}, "files": [{"sha": "d5de0e7211ff83b2c1a1491a8d40a405449139f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78067f1634e8a4b2e5705aabd68b771a660b08ef", "patch": "@@ -1,3 +1,10 @@\n+2000-03-01  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/inclhack.tpl: remove unused symlinks\n+\t* fixinc/README: GCC Maintainer info\n+\t* fixinc/inclhack.sh: regen\n+\t* fixinc/fixincl.sh: regen\n+\n 2000-03-01  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpphash.c (collect_expansion): Trim trailing white space"}, {"sha": "c67aff264032560d6649d4aa764f6aee81661de3", "filename": "gcc/fixinc/README", "status": "modified", "additions": 62, "deletions": 30, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FREADME?ref=78067f1634e8a4b2e5705aabd68b771a660b08ef", "patch": "@@ -6,7 +6,7 @@ See also:  http://autogen.linuxbox.com/fixincludes\n \n The set of fixes required was distilled down to just the data required\n to specify what needed to happen for each fix.  Those data were edited\n-into a new file named gcc/fixinc/inclhack.def.  A program called\n+into a file named gcc/fixinc/inclhack.def.  A program called\n AutoGen (http://autogen.linuxbox.com) uses these definitions to\n instantiate several different templates (gcc/fixinc/*.tpl) that then\n produces a fixincludes replacement shell script (inclhack.sh), a\n@@ -20,32 +20,11 @@ mkfixinc.sh determines that your system needs machine-specific fixes\n that have not yet been applied to inclhack.def, it will install and\n use the current fixinc.* for that system instead.\n \n-Usually, the mkfixinc.sh script will be able to detect when\n-the binary is not runable.  If you do have problems, however,\n-please try configuring \"--without-fast-fixincludes\".  Thank you.\n-\n Regards,\n \tBruce <autogen@linuxbox.com>\n \n \n \n-POSSIBLE PROBLEMS\n-=================\n-\n-There may be some systems on which the fixinc binary program appears\n-to be functional, but fails to work.  If you are experiencing this\n-problem, then copy the script ${src}/gcc/fixinc/inclhack.sh into\n-${builddir}/gcc/fixinc.sh and run make again.\n-\n-And, *please* also report the problem with a description of\n-the failure mode (symptoms) and the output from:\n-\n-        egcs/config.guess\n-\n-to me:  Bruce Korb <autogen@linuxbox.com>\n-\n-\n-\n GCC MAINTAINER INFORMATION\n ==========================\n \n@@ -93,11 +72,11 @@ Here are the rules for making fixes in the inclhack.def file:\n         Please take advantage of the fact AutoGen will glue\n         together string fragments.  It helps.  Also take note\n         that double quote strings and single quote strings have\n-        different formation rules.  Double quote strings are\n-        a tiny superset of C string syntax.  Single quote strings\n-        follow shell single quote string formation rules, except\n-        that the backslash is processed before '\\\\', '\\'' and '#'\n-        characters (using C character syntax).\n+        different formation rules.  Double quote strings are a\n+        tiny superset of ANSI-C string syntax.  Single quote\n+        strings follow shell single quote string formation\n+        rules, except that the backslash is processed before\n+        '\\\\', '\\'' and '#' characters (using C character syntax).\n \n     Examples of test specifications:\n \n@@ -128,10 +107,14 @@ Here are the rules for making fixes in the inclhack.def file:\n         discard the input.\n \n     3.  A C language subroutine method for both tests and fixes.\n+        See ``fixtests.c'' for instructions on writing C-language\n+        applicability tests and ``fixfixes.c'' for C-language fixing.\n \n-    4.  Replacement text.  If the replacement is empty, then\n-        no fix is applied.  Otherwise, the replacement text is written\n-        to the output file and no further fixes are applied.\n+    4.  Replacement text.  If the replacement is empty, then no\n+        fix is applied.  Otherwise, the replacement text is\n+        written to the output file and no further fixes are\n+        applied.  If you really want a no-op file, replace the\n+        file with a comment.\n \n         Replacement text \"fixes\" must be first in this file!!\n \n@@ -204,3 +187,52 @@ Here are the rules for making fixes in the inclhack.def file:\n     for documentation on how to include new functions into that\n     module.\n \n+5.  Testing fixes.\n+\n+    The brute force method is, of course, to configure and build\n+    GCC.  There are easier ways, too.  You can run the compiled\n+    binaries in isolation.  ``c_tests'' can be tested with\n+    ``fixtests'', ``c_fixes'' with ``fixfixes'' and any fix or\n+    test can be tested with ``fixincl''.\n+\n+    ``fixtests'' is invoked as follows:\n+\n+        fixtests filename.h your_test_name\n+        if [ $? -ne 0 ]\n+        then echo do not apply your_fix_name\n+        else echo APPLY your_fix_name ; fi\n+\n+    and ``fixfixes'' is invoked thus:\n+\n+        fixfixes filename.h your_fix_name < filename.h > /tmp/fixed\n+\n+    The file name argument is required, but is only used as a hint\n+    for use by ``your_fix_name'', it is not used for obtaining the\n+    data.  Also, ``your_fix_name'' and ``your_test_name'' may be\n+    the same, since fix names and test names are in different\n+    \"name spaces.\"\n+\n+    The ``fixincl'' program is a little harder to work with  :-}.\n+    It was written with the expectation that it would be run\n+    inside of the fixincl.sh script that handles everything.\n+\n+    Run it with no arguments to get usage hints, but here is what\n+    you will need to do (approximately):\n+\n+        FI=${top_builddir}/gcc/fixinc/fixincl\n+        TARGET_MACHINE=`sh ${top_srcdir}/config.guess`\n+        SRCDIR=/usr/include\n+        DESTDIR=/tmp/fixtest\n+        VERBOSE=4\n+        FIND_BASE=\".\"\n+        export TARGET_MACHINE SRCDIR DESTDIR VERBOSE FIND_BASE\n+        rm -rf ${DESTDIR}\n+        mkdir -p ${DESTDIR}\n+        cd ${SRCDIR}\n+        find * -follow -type f -name '*.h' > ${DESTDIR}/LIST\n+        # you may edit this to the list you want\n+        ${FI} ${DESTDIR}/LIST > /dev/null 2> ${DESTDIR}/LOG\n+\n+    Check your results in ${DESTDIR}/LOG.  The stdout output\n+    is merely some shell commands that are relevant only to\n+    the fixincl.sh shell script."}, {"sha": "b5b8cdc0f6ce12918b888913c893bc8dd988aed7", "filename": "gcc/fixinc/fixincl.sh", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2Ffixincl.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2Ffixincl.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.sh?ref=78067f1634e8a4b2e5705aabd68b771a660b08ef", "patch": "@@ -428,8 +428,26 @@ then echo 'Cleaning up unneeded directories:' ; fi\n cd $LIB\n all_dirs=`find . -type d \\! -name '.' -print | sort -r`\n for file in $all_dirs; do\n-  rmdir $LIB/$file > /dev/null 2>&1\n-done\n+  if rmdir $LIB/$file > /dev/null\n+  then\n+    test $VERBOSE -gt 3 && echo \"  removed $file\"\n+  fi\n+done 2> /dev/null\n+\n+test $VERBOSE -gt 2 && echo \"Removing unused symlinks\"\n+\n+all_dirs=`find . -type l -print`\n+for file in $all_dirs\n+do\n+  if ls -lLd $file > /dev/null\n+  then :\n+  else rm -f $file\n+       test $VERBOSE -gt 3 && echo \"  removed $file\"\n+       rmdir `dirname $file` > /dev/null && \\\n+         test $VERBOSE -gt 3 && \\\n+         echo \"  removed `dirname $file`\"\n+  fi\n+done 2> /dev/null\n \n if test $VERBOSE -gt 0\n then echo fixincludes is done ; fi"}, {"sha": "67a997453315ca44ec5bf5bee11e623b54a5845e", "filename": "gcc/fixinc/inclhack.sh", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2Finclhack.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2Finclhack.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.sh?ref=78067f1634e8a4b2e5705aabd68b771a660b08ef", "patch": "@@ -3473,8 +3473,26 @@ then echo 'Cleaning up unneeded directories:' ; fi\n cd $LIB\n all_dirs=`find . -type d \\! -name '.' -print | sort -r`\n for file in $all_dirs; do\n-  rmdir $LIB/$file > /dev/null 2>&1\n-done\n+  if rmdir $LIB/$file > /dev/null\n+  then\n+    test $VERBOSE -gt 3 && echo \"  removed $file\"\n+  fi\n+done 2> /dev/null\n+\n+test $VERBOSE -gt 2 && echo \"Removing unused symlinks\"\n+\n+all_dirs=`find . -type l -print`\n+for file in $all_dirs\n+do\n+  if ls -lLd $file > /dev/null\n+  then :\n+  else rm -f $file\n+       test $VERBOSE -gt 3 && echo \"  removed $file\"\n+       rmdir `dirname $file` > /dev/null && \\\n+         test $VERBOSE -gt 3 && \\\n+         echo \"  removed `dirname $file`\"\n+  fi\n+done 2> /dev/null\n \n if test $VERBOSE -gt 0\n then echo fixincludes is done ; fi"}, {"sha": "7b085a75f7d23d858cea9c6eeffb16bd5b1fec53", "filename": "gcc/fixinc/inclhack.tpl", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2Finclhack.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78067f1634e8a4b2e5705aabd68b771a660b08ef/gcc%2Ffixinc%2Finclhack.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.tpl?ref=78067f1634e8a4b2e5705aabd68b771a660b08ef", "patch": "@@ -445,8 +445,26 @@ then echo 'Cleaning up unneeded directories:' ; fi\n cd $LIB\n all_dirs=`find . -type d \\! -name '.' -print | sort -r`\n for file in $all_dirs; do\n-  rmdir $LIB/$file > /dev/null 2>&1\n-done\n+  if rmdir $LIB/$file > /dev/null\n+  then\n+    test $VERBOSE -gt 3 && echo \"  removed $file\"\n+  fi\n+done 2> /dev/null\n+\n+test $VERBOSE -gt 2 && echo \"Removing unused symlinks\"\n+\n+all_dirs=`find . -type l -print`\n+for file in $all_dirs\n+do\n+  if ls -lLd $file > /dev/null\n+  then :\n+  else rm -f $file\n+       test $VERBOSE -gt 3 && echo \"  removed $file\"\n+       rmdir `dirname $file` > /dev/null && \\\n+         test $VERBOSE -gt 3 && \\\n+         echo \"  removed `dirname $file`\"\n+  fi\n+done 2> /dev/null\n \n if test $VERBOSE -gt 0\n then echo fixincludes is done ; fi"}]}