{"sha": "f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjN2JlMzhhZGNlNTQ0ZmEwZmJhNmMzM2NiNjdkZDhkNjY4ODZjMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T12:42:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T12:42:52Z"}, "message": "[multiple changes]\n\n2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-cfhama.ads, a-cfhase.ads, a-cforma.ads, a-cforse.ads Add\n\tSPARK_Mode pragmas to the public and private part of the unit.\n\t* sem_ch3.adb (Derive_Type_Declaration): Ensure that a derived\n\ttype cannot have discriminants if the parent type already has\n\tdiscriminants.\n\t(Process_Discriminants): Ensure that the type of a discriminant is\n\tdiscrete.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): The check on\n\tSPARK_Mode compatibility between a spec and a body can now be\n\tsafely performed while processing a generic.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): The check on\n\tSPARK_Mode compatibility between a spec and a body can now be\n\tsafely performed while processing a generic.\n\t* sem_prag.adb (Analyze_Pragma): Pragma SPARK_Mode can now be\n\tsafely analyzed when processing a generic.\n\n2014-08-04  Nicolas Roche  <roche@adacore.com>\n\n\t* g-dirope.adb: Minor reformating.\n\nFrom-SVN: r213575", "tree": {"sha": "c031180c890912b1e17b27e8d8c96fb4e9bec9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c031180c890912b1e17b27e8d8c96fb4e9bec9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/comments", "author": null, "committer": null, "parents": [{"sha": "31acf1bb1163d7f306bbcda8149e6b55d465cc02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31acf1bb1163d7f306bbcda8149e6b55d465cc02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31acf1bb1163d7f306bbcda8149e6b55d465cc02"}], "stats": {"total": 131, "additions": 91, "deletions": 40}, "files": [{"sha": "b6665e65f250ff14dab480d26fe40a833ebfa3ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -1,3 +1,25 @@\n+2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-cfhama.ads, a-cfhase.ads, a-cforma.ads, a-cforse.ads Add\n+\tSPARK_Mode pragmas to the public and private part of the unit.\n+\t* sem_ch3.adb (Derive_Type_Declaration): Ensure that a derived\n+\ttype cannot have discriminants if the parent type already has\n+\tdiscriminants.\n+\t(Process_Discriminants): Ensure that the type of a discriminant is\n+\tdiscrete.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): The check on\n+\tSPARK_Mode compatibility between a spec and a body can now be\n+\tsafely performed while processing a generic.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): The check on\n+\tSPARK_Mode compatibility between a spec and a body can now be\n+\tsafely performed while processing a generic.\n+\t* sem_prag.adb (Analyze_Pragma): Pragma SPARK_Mode can now be\n+\tsafely analyzed when processing a generic.\n+\n+2014-08-04  Nicolas Roche  <roche@adacore.com>\n+\n+\t* g-dirope.adb: Minor reformating.\n+\n 2014-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb: Minor reformatting."}, {"sha": "b5c440ec74df239d0e8cbac1d0bc97322eaaa10d", "filename": "gcc/ada/a-cfhama.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cfhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cfhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.ads?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -68,6 +68,7 @@ generic\n package Ada.Containers.Formal_Hashed_Maps is\n    pragma Annotate (GNATprove, External_Axiomatization);\n    pragma Pure;\n+   pragma SPARK_Mode (On);\n \n    type Map (Capacity : Count_Type; Modulus : Hash_Type) is private with\n      Iterable => (First       => First,\n@@ -276,6 +277,7 @@ private\n    pragma Inline (Has_Element);\n    pragma Inline (Equivalent_Keys);\n    pragma Inline (Next);\n+   pragma SPARK_Mode (Off);\n \n    type Node_Type is record\n       Key         : Key_Type;\n@@ -285,11 +287,10 @@ private\n    end record;\n \n    package HT_Types is new\n-     Ada.Containers.Hash_Tables.Generic_Bounded_Hash_Table_Types\n-       (Node_Type);\n+     Ada.Containers.Hash_Tables.Generic_Bounded_Hash_Table_Types (Node_Type);\n \n    type Map (Capacity : Count_Type; Modulus : Hash_Type) is\n-      new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n+     new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n \n    use HT_Types;\n "}, {"sha": "2a2f4e87637887ffa18cac631448460156351382", "filename": "gcc/ada/a-cfhase.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cfhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cfhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhase.ads?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -70,6 +70,7 @@ generic\n package Ada.Containers.Formal_Hashed_Sets is\n    pragma Annotate (GNATprove, External_Axiomatization);\n    pragma Pure;\n+   pragma SPARK_Mode (On);\n \n    type Set (Capacity : Count_Type; Modulus : Hash_Type) is private with\n      Iterable => (First       => First,\n@@ -329,8 +330,8 @@ package Ada.Containers.Formal_Hashed_Sets is\n    --  scanned yet.\n \n private\n-\n    pragma Inline (Next);\n+   pragma SPARK_Mode (Off);\n \n    type Node_Type is\n       record\n@@ -343,7 +344,7 @@ private\n      Ada.Containers.Hash_Tables.Generic_Bounded_Hash_Table_Types (Node_Type);\n \n    type Set (Capacity : Count_Type; Modulus : Hash_Type) is\n-      new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n+     new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n \n    use HT_Types;\n "}, {"sha": "e9a5f976e91682b9cbe0aa2a4c15e1a94071fd43", "filename": "gcc/ada/a-cforma.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cforma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cforma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforma.ads?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -69,6 +69,7 @@ generic\n package Ada.Containers.Formal_Ordered_Maps is\n    pragma Annotate (GNATprove, External_Axiomatization);\n    pragma Pure;\n+   pragma SPARK_Mode (On);\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean with\n      Global => null;\n@@ -265,10 +266,11 @@ package Ada.Containers.Formal_Ordered_Maps is\n    function Overlap (Left, Right : Map) return Boolean with\n      Global => null;\n    --  Overlap returns True if the containers have common keys\n-private\n \n+private\n    pragma Inline (Next);\n    pragma Inline (Previous);\n+   pragma SPARK_Mode (Off);\n \n    subtype Node_Access is Count_Type;\n \n@@ -288,7 +290,7 @@ private\n      new Ada.Containers.Red_Black_Trees.Generic_Bounded_Tree_Types (Node_Type);\n \n    type Map (Capacity : Count_Type) is\n-      new Tree_Types.Tree_Type (Capacity) with null record;\n+     new Tree_Types.Tree_Type (Capacity) with null record;\n \n    type Cursor is record\n       Node : Node_Access;"}, {"sha": "dc17407002331febd57a454216725c9b5df425c2", "filename": "gcc/ada/a-cforse.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cforse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fa-cforse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforse.ads?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -67,6 +67,7 @@ generic\n package Ada.Containers.Formal_Ordered_Sets is\n    pragma Annotate (GNATprove, External_Axiomatization);\n    pragma Pure;\n+   pragma SPARK_Mode (On);\n \n    function Equivalent_Elements (Left, Right : Element_Type) return Boolean\n    with\n@@ -347,9 +348,9 @@ package Ada.Containers.Formal_Ordered_Sets is\n    --  scanned yet.\n \n private\n-\n    pragma Inline (Next);\n    pragma Inline (Previous);\n+   pragma SPARK_Mode (Off);\n \n    type Node_Type is record\n       Has_Element : Boolean := False;"}, {"sha": "3b745b1c0aede7d334a3f5e2c7da51d90c259ace", "filename": "gcc/ada/g-dirope.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fg-dirope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fg-dirope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dirope.adb?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2012, AdaCore                     --\n+--                     Copyright (C) 1998-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -693,7 +693,7 @@ package body GNAT.Directory_Operations is\n    end Read;\n \n    -------------------------\n-   -- Read_Is_Thread_Sage --\n+   -- Read_Is_Thread_Safe --\n    -------------------------\n \n    function Read_Is_Thread_Safe return Boolean is"}, {"sha": "aa410e4fec1bf16e3aff1a080106c97417f4ac74", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -15046,7 +15046,7 @@ package body Sem_Ch3 is\n       end if;\n \n       --  Only composite types other than array types are allowed to have\n-      --  discriminants. In SPARK, no types are allowed to have discriminants.\n+      --  discriminants.\n \n       if Present (Discriminant_Specifications (N)) then\n          if (Is_Elementary_Type (Parent_Type)\n@@ -15057,8 +15057,22 @@ package body Sem_Ch3 is\n               (\"elementary or array type cannot have discriminants\",\n                Defining_Identifier (First (Discriminant_Specifications (N))));\n             Set_Has_Discriminants (T, False);\n+\n+         --  The type is allowed to have discriminants\n+\n          else\n             Check_SPARK_05_Restriction (\"discriminant type is not allowed\", N);\n+\n+            --  The following check is only relevant when SPARK_Mode is on as\n+            --  it is not a standard Ada legality rule. A derived type cannot\n+            --  have discriminants if the parent type is discriminated.\n+\n+            if SPARK_Mode = On and then Has_Discriminants (Parent_Type) then\n+               SPARK_Msg_N\n+                 (\"discriminants not allowed if parent type is discriminated\",\n+                  Defining_Identifier\n+                    (First (Discriminant_Specifications (N))));\n+            end if;\n          end if;\n       end if;\n \n@@ -18024,24 +18038,44 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n-         if Is_Access_Type (Discr_Type) then\n+         --  The following checks are only relevant when SPARK_Mode is on as\n+         --  they are not standard Ada legality rules.\n+\n+         if SPARK_Mode = On then\n+            if Is_Access_Type (Discr_Type) then\n+               SPARK_Msg_N\n+                 (\"discriminant cannot have an access type\",\n+                  Discriminant_Type (Discr));\n+\n+            elsif not Is_Discrete_Type (Discr_Type) then\n+               SPARK_Msg_N\n+                 (\"discriminant must have a discrete type\",\n+                  Discriminant_Type (Discr));\n+            end if;\n \n-            --  Ada 2005 (AI-230): Access discriminant allowed in non-limited\n-            --  record types\n+         --  Normal Ada rules\n \n-            if Ada_Version < Ada_2005 then\n-               Check_Access_Discriminant_Requires_Limited\n-                 (Discr, Discriminant_Type (Discr));\n-            end if;\n+         else\n+            if Is_Access_Type (Discr_Type) then\n+\n+               --  Ada 2005 (AI-230): Access discriminant allowed in non-\n+               --  limited record types\n+\n+               if Ada_Version < Ada_2005 then\n+                  Check_Access_Discriminant_Requires_Limited\n+                    (Discr, Discriminant_Type (Discr));\n+               end if;\n \n-            if Ada_Version = Ada_83 and then Comes_From_Source (Discr) then\n+               if Ada_Version = Ada_83 and then Comes_From_Source (Discr) then\n+                  Error_Msg_N\n+                    (\"(Ada 83) access discriminant not allowed\", Discr);\n+               end if;\n+\n+            elsif not Is_Discrete_Type (Discr_Type) then\n                Error_Msg_N\n-                 (\"(Ada 83) access discriminant not allowed\", Discr);\n+                 (\"discriminants must have a discrete or access type\",\n+                  Discriminant_Type (Discr));\n             end if;\n-\n-         elsif not Is_Discrete_Type (Discr_Type) then\n-            Error_Msg_N (\"discriminants must have a discrete or access type\",\n-              Discriminant_Type (Discr));\n          end if;\n \n          Set_Etype (Defining_Identifier (Discr), Discr_Type);"}, {"sha": "01c6e26b50c555bc3b0f28b42b16b7d8d90e7b16", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -3741,10 +3741,7 @@ package body Sem_Ch6 is\n \n       --  Verify that the SPARK_Mode of the body agrees with that of its spec\n \n-      if not Inside_A_Generic\n-        and then Present (Spec_Id)\n-        and then Present (SPARK_Pragma (Body_Id))\n-      then\n+      if Present (Spec_Id) and then Present (SPARK_Pragma (Body_Id)) then\n          if Present (SPARK_Pragma (Spec_Id)) then\n             if Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Spec_Id)) = Off\n                  and then"}, {"sha": "4821db529c813682ebf638ce373dfb9dba86ed2c", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -439,7 +439,7 @@ package body Sem_Ch7 is\n \n       --  Verify that the SPARK_Mode of the body agrees with that of its spec\n \n-      if not Inside_A_Generic and then Present (SPARK_Pragma (Body_Id)) then\n+      if Present (SPARK_Pragma (Body_Id)) then\n          if Present (SPARK_Aux_Pragma (Spec_Id)) then\n             if Get_SPARK_Mode_From_Pragma (SPARK_Aux_Pragma (Spec_Id)) = Off\n                  and then"}, {"sha": "da9c066d5b1c1c8f34d47e87309c77981dd5288a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c7be38adce544fa0fba6c33cb67dd8d66886c0/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "patch": "@@ -19243,13 +19243,6 @@ package body Sem_Prag is\n                Rewrite (N, Make_Null_Statement (Loc));\n                Analyze (N);\n                return;\n-\n-            --  Do not analyze the pragma when it appears inside a generic\n-            --  because the semantic information of the related context is\n-            --  scarce.\n-\n-            elsif Inside_A_Generic then\n-               return;\n             end if;\n \n             GNAT_Pragma;"}]}