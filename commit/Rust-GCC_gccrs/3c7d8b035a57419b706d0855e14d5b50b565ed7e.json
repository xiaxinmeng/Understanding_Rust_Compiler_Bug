{"sha": "3c7d8b035a57419b706d0855e14d5b50b565ed7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3ZDhiMDM1YTU3NDE5YjcwNmQwODU1ZTE0ZDViNTBiNTY1ZWQ3ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-11-06T00:06:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-11-06T00:06:42Z"}, "message": "deque: Constrain InputIterator parameters.\n\n\t* include/profile/deque: Constrain InputIterator parameters.\n\t* include/profile/forward_list: Likewise.\n\t* include/profile/list: Likewise.\n\t* include/profile/map.h: Likewise.\n\t* include/profile/multimap.h: Likewise.\n\t* include/profile/set.h: Likewise.\n\t* include/profile/multiset.h: Likewise.\n\t* include/profile/vector: Likewise.\n\nFrom-SVN: r193196", "tree": {"sha": "a0c6c1ab914365cdd8c1d0ced44ef0e6d6774e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0c6c1ab914365cdd8c1d0ced44ef0e6d6774e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c7d8b035a57419b706d0855e14d5b50b565ed7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7d8b035a57419b706d0855e14d5b50b565ed7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7d8b035a57419b706d0855e14d5b50b565ed7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7d8b035a57419b706d0855e14d5b50b565ed7e/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9052f54ccb2851e9814e86b40f4442411c96d822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9052f54ccb2851e9814e86b40f4442411c96d822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9052f54ccb2851e9814e86b40f4442411c96d822"}], "stats": {"total": 129, "additions": 111, "deletions": 18}, "files": [{"sha": "3164b03f3f6cbdc36680260831f20f7494f051eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -1,3 +1,14 @@\n+2012-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/profile/deque: Constrain InputIterator parameters.\n+\t* include/profile/forward_list: Likewise.\n+\t* include/profile/list: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\t* include/profile/set.h: Likewise.\n+\t* include/profile/multiset.h: Likewise.\n+\t* include/profile/vector: Likewise.\n+\n 2012-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/profile/forward_list: Update to meet allocator-aware"}, {"sha": "99cc46524a6944dee67a1cdad792c88a47c28ceb", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -1,6 +1,6 @@\n // Profiling deque implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,7 +79,12 @@ namespace __profile\n       : _Base(__n, __value, __a) { }\n #endif\n \n-      template<class _InputIterator>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<typename _InputIterator>\n+#endif\n         deque(_InputIterator __first, _InputIterator __last,\n \t      const _Allocator& __a = _Allocator())\n \t: _Base(__first, __last, __a)\n@@ -129,7 +134,12 @@ namespace __profile\n       }\n #endif\n \n-      template<class _InputIterator>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<typename _InputIterator>\n+#endif\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n@@ -343,7 +353,12 @@ namespace __profile\n \t_Base::insert(__position, __n, __x);\n       }\n \n-      template<class _InputIterator>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<typename _InputIterator>\n+#endif\n         void\n         insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)"}, {"sha": "9cb58202f33f8b3a8d31565b26f5465a798e8f69", "filename": "libstdc++-v3/include/profile/forward_list", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -77,7 +77,8 @@ namespace __profile\n       : _Base(__n, __value, __al)\n       { }\n \n-      template<typename _InputIterator>\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n         forward_list(_InputIterator __first, _InputIterator __last,\n                      const _Alloc& __al = _Alloc())\n         : _Base(__first, __last, __al)"}, {"sha": "2f8535e946e286817bc1f3b63f7dc3b4b1809401", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -1,6 +1,6 @@\n // Profiling list implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -99,7 +99,12 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n       list(_InputIterator __first, _InputIterator __last,\n \t   const _Allocator& __a = _Allocator())\n       : _Base(__first, __last, __a)\n@@ -171,7 +176,12 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       {\t_Base::assign(__l); }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         { _Base::assign(__first, __last); }\n@@ -328,7 +338,8 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         emplace(iterator __position, _Args&&... __args)\n \t{\n \t  return iterator(_Base::emplace(__position.base(),\n-                                         std::forward<_Args>(__args)...));\n+                                         std::forward<_Args>(__args)...),\n+\t\t\t  this);\n \t}\n #endif\n \n@@ -363,14 +374,19 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \t_Base::insert(__position.base(), __n, __x);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n-      {\n-        _M_profile_insert(this, __position, size());\n-        _Base::insert(__position.base(), __first, __last);\n-      }\n+\t{\n+\t  _M_profile_insert(this, __position, size());\n+\t  _Base::insert(__position.base(), __first, __last);\n+\t}\n \n       iterator\n       erase(iterator __position)"}, {"sha": "fe2f4564d0ceb5040900b75529e171267bae8675", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -69,7 +69,12 @@ namespace __profile\n       : _Base(__comp, __a)\n       { __profcxx_map_to_unordered_map_construct(this); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         map(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp = _Compare(),\n \t    const _Allocator& __a = _Allocator())\n@@ -252,7 +257,7 @@ namespace __profile\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{\n \t  size_type size_before = size();\n-\t  auto __res = _Base::emplace_hint(__pos.base(),\n+\t  auto __res = _Base::emplace_hint(__pos,\n \t\t\t\t\t   std::forward<_Args>(__args)...);\n \t  __profcxx_map_to_unordered_map_insert(this, size_before,\n \t\t\t\t\t\tsize() - size_before);\n@@ -326,7 +331,12 @@ namespace __profile\n       }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n         {"}, {"sha": "42662af363eb7ce45a0e32f08eeec0855a368cb0", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -68,7 +68,12 @@ namespace __profile\n \t\t\tconst _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n       multimap(_InputIterator __first, _InputIterator __last,\n \t       const _Compare& __comp = _Compare(),\n \t       const _Allocator& __a = _Allocator())\n@@ -234,7 +239,12 @@ namespace __profile\n \t\t\t\t\tstd::forward<_Pair>(__x))); }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n         { _Base::insert(__first, __last); }"}, {"sha": "358879726d92c9e7bfbd7fcb59c407f1445eef0e", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -1,6 +1,6 @@\n // Profiling multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,7 +68,12 @@ namespace __profile\n \t\t\tconst _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         multiset(_InputIterator __first, _InputIterator __last,\n \t\t const _Compare& __comp = _Compare(),\n \t\t const _Allocator& __a = _Allocator())\n@@ -215,7 +220,12 @@ namespace __profile\n       { return iterator(_Base::insert(__position, std::move(__x))); }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n         { _Base::insert(__first, __last); }"}, {"sha": "5aadab8317cd1c0c29b785b63d27edad31633e19", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -1,6 +1,6 @@\n // Profiling set implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,7 +68,12 @@ namespace __profile\n \t\t   const _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         set(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp = _Compare(),\n \t    const _Allocator& __a = _Allocator())\n@@ -230,7 +235,12 @@ namespace __profile\n       { return iterator(_Base::insert(__position, std::move(__x))); }\n #endif\n \n-      template <typename _InputIterator>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<typename _InputIterator>\n+#endif\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n         { _Base::insert(__first, __last); }"}, {"sha": "fcd6962799556a12d3f379af67882a68dfe8f22c", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d8b035a57419b706d0855e14d5b50b565ed7e/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=3c7d8b035a57419b706d0855e14d5b50b565ed7e", "patch": "@@ -1,6 +1,6 @@\n // Profiling vector implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -109,7 +109,12 @@ namespace __profile\n       }\n #endif\n \n-      template<class _InputIterator>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<typename _InputIterator>\n+#endif\n         vector(_InputIterator __first, _InputIterator __last,\n \t       const _Allocator& __a = _Allocator())\n \t: _Base(__first, __last, __a)\n@@ -401,7 +406,12 @@ namespace __profile\n         _M_profile_resize(this, __old_size, this->capacity());\n       }\n \n-      template<class _InputIterator>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<typename _InputIterator>\n+#endif\n       void\n       insert(iterator __position,\n              _InputIterator __first, _InputIterator __last)"}]}