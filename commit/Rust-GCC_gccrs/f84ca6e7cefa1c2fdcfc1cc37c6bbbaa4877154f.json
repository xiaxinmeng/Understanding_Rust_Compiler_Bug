{"sha": "f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0Y2E2ZTdjZWZhMWMyZmRjZmMxY2MzN2M2YmJiYWE0ODc3MTU0Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-04-14T22:33:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-14T22:33:22Z"}, "message": "re PR libstdc++/52699 (infinite loop generated with -O0)\n\n2012-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/52699\n\t* include/bits/random.tcc (independent_bits_engine<>::operator()())\n\tAvoid various overflows; use common_type on result_type and\n\t_RandomNumberEngine::result_type; avoid floating point computations;\n\tother smaller tweaks.\n\n\t* include/bits/random.tcc (uniform_int_distribution<>::operator())\n\tUse common_type; assume _UniformRandomNumberGenerator::result_type\n\tunsigned; tidy.\n\n\t* include/bits/stl_algobase.h (__lg(unsigned), __lg(unsigned long),\n\t__lg(unsigned long long)): Add.\n\nFrom-SVN: r186456", "tree": {"sha": "8b420cece30584d28c1e8bb54f8329b5dfb328c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b420cece30584d28c1e8bb54f8329b5dfb328c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f/comments", "author": null, "committer": null, "parents": [{"sha": "608dccd7ab68e19bcd61caad1161be7d8db10056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608dccd7ab68e19bcd61caad1161be7d8db10056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608dccd7ab68e19bcd61caad1161be7d8db10056"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "97b091a52d40fba37953c4d750b8b4207acf999e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f", "patch": "@@ -1,3 +1,18 @@\n+2012-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/52699\n+\t* include/bits/random.tcc (independent_bits_engine<>::operator()())\n+\tAvoid various overflows; use common_type on result_type and\n+\t_RandomNumberEngine::result_type; avoid floating point computations;\n+\tother smaller tweaks.\n+\n+\t* include/bits/random.tcc (uniform_int_distribution<>::operator())\n+\tUse common_type; assume _UniformRandomNumberGenerator::result_type\n+\tunsigned; tidy.\n+\n+\t* include/bits/stl_algobase.h (__lg(unsigned), __lg(unsigned long),\n+\t__lg(unsigned long long)): Add.\n+\n 2012-04-14  Alan Modra  <amodra@gmail.com>\n \n \tPR libstdc++/52839"}, {"sha": "5da353f8bd4949876c87d7116e9e8dc43d05a921", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f", "patch": "@@ -730,40 +730,65 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::\n     operator()()\n     {\n-      const long double __r = static_cast<long double>(_M_b.max())\n-\t\t\t    - static_cast<long double>(_M_b.min()) + 1.0L;\n-      const result_type __m = std::log(__r) / std::log(2.0L);\n-      result_type __n, __n0, __y0, __y1, __s0, __s1;\n+      typedef typename _RandomNumberEngine::result_type _Eresult_type;\n+      const _Eresult_type __r\n+\t= (_M_b.max() - _M_b.min() < std::numeric_limits<_Eresult_type>::max()\n+\t   ? _M_b.max() - _M_b.min() + 1 : 0);\n+      const unsigned __edig = std::numeric_limits<_Eresult_type>::digits;\n+      const unsigned __m = __r ? std::__lg(__r) : __edig;\n+\n+      typedef typename std::common_type<_Eresult_type, result_type>::type\n+\t__ctype;\n+      const unsigned __cdig = std::numeric_limits<__ctype>::digits;\n+\n+      unsigned __n, __n0;\n+      __ctype __s0, __s1, __y0, __y1;\n+\n       for (size_t __i = 0; __i < 2; ++__i)\n \t{\n \t  __n = (__w + __m - 1) / __m + __i;\n \t  __n0 = __n - __w % __n;\n-\t  const result_type __w0 = __w / __n;\n-\t  const result_type __w1 = __w0 + 1;\n-\t  __s0 = result_type(1) << __w0;\n-\t  __s1 = result_type(1) << __w1;\n-\t  __y0 = __s0 * (__r / __s0);\n-\t  __y1 = __s1 * (__r / __s1);\n-\t  if (__r - __y0 <= __y0 / __n)\n+\t  const unsigned __w0 = __w / __n;  // __w0 <= __m\n+\n+\t  __s0 = 0;\n+\t  __s1 = 0;\n+\t  if (__w0 < __cdig)\n+\t    {\n+\t      __s0 = __ctype(1) << __w0;\n+\t      __s1 = __s0 << 1;\n+\t    }\n+\n+\t  __y0 = 0;\n+\t  __y1 = 0;\n+\t  if (__r)\n+\t    {\n+\t      __y0 = __s0 * (__r / __s0);\n+\t      if (__s1)\n+\t\t__y1 = __s1 * (__r / __s1);\n+\n+\t      if (__r - __y0 <= __y0 / __n)\n+\t\tbreak;\n+\t    }\n+\t  else\n \t    break;\n \t}\n \n       result_type __sum = 0;\n       for (size_t __k = 0; __k < __n0; ++__k)\n \t{\n-\t  result_type __u;\n+\t  __ctype __u;\n \t  do\n \t    __u = _M_b() - _M_b.min();\n-\t  while (__u >= __y0);\n-\t  __sum = __s0 * __sum + __u % __s0;\n+\t  while (__y0 && __u >= __y0);\n+\t  __sum = __s0 * __sum + (__s0 ? __u % __s0 : __u);\n \t}\n       for (size_t __k = __n0; __k < __n; ++__k)\n \t{\n-\t  result_type __u;\n+\t  __ctype __u;\n \t  do\n \t    __u = _M_b() - _M_b.min();\n-\t  while (__u >= __y1);\n-\t  __sum = __s1 * __sum + __u % __s1;\n+\t  while (__y1 && __u >= __y1);\n+\t  __sum = __s1 * __sum + (__s1 ? __u % __s1 : __u);\n \t}\n       return __sum;\n     }\n@@ -840,12 +865,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n-\ttypedef typename std::make_unsigned<typename\n-\t  _UniformRandomNumberGenerator::result_type>::type __urngtype;\n+\ttypedef typename _UniformRandomNumberGenerator::result_type\n+\t  _Gresult_type;\n \ttypedef typename std::make_unsigned<result_type>::type __utype;\n-\ttypedef typename std::conditional<(sizeof(__urngtype)\n-\t\t\t\t\t   > sizeof(__utype)),\n-\t  __urngtype, __utype>::type __uctype;\n+\ttypedef typename std::common_type<_Gresult_type, __utype>::type\n+\t  __uctype;\n \n \tconst __uctype __urngmin = __urng.min();\n \tconst __uctype __urngmax = __urng.max();"}, {"sha": "1ccf8604f5f8ccf657d18e61b1de282a3608d503", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=f84ca6e7cefa1c2fdcfc1cc37c6bbbaa4877154f", "patch": "@@ -989,14 +989,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __lg(int __n)\n   { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n \n+  inline unsigned\n+  __lg(unsigned __n)\n+  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n+\n   inline long\n   __lg(long __n)\n   { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n \n+  inline unsigned long\n+  __lg(unsigned long __n)\n+  { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n+\n   inline long long\n   __lg(long long __n)\n   { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n \n+  inline unsigned long long\n+  __lg(unsigned long long __n)\n+  { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n \n _GLIBCXX_BEGIN_NAMESPACE_ALGO"}]}