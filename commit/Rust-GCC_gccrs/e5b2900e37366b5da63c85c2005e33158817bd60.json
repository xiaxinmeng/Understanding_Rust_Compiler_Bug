{"sha": "e5b2900e37366b5da63c85c2005e33158817bd60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTViMjkwMGUzNzM2NmI1ZGE2M2M4NWMyMDA1ZTMzMTU4ODE3YmQ2MA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-11-13T15:12:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-11-13T15:12:26Z"}, "message": "[combine] Don't transform sign and zero extends inside mults\n\n2015-11-13  Segher Boessenkool  <segher@kernel.crashing.org>\n            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n        * combine.c (subst): Don't substitute or simplify when\n        handling register-wise widening multiply.\n        (force_to_mode): Likewise.\n\n        * gcc.target/aarch64/umaddl_combine_1.c: New test.\n\nFrom-SVN: r230326", "tree": {"sha": "293f945582a8472048901e812fed95ac9e080b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/293f945582a8472048901e812fed95ac9e080b60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5b2900e37366b5da63c85c2005e33158817bd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b2900e37366b5da63c85c2005e33158817bd60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b2900e37366b5da63c85c2005e33158817bd60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b2900e37366b5da63c85c2005e33158817bd60/comments", "author": null, "committer": null, "parents": [{"sha": "dd3c1b14afa954856789c4cb955dec474d799edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3c1b14afa954856789c4cb955dec474d799edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3c1b14afa954856789c4cb955dec474d799edd"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "4d6165ecda5def635da54102dea8faaea35f489c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5b2900e37366b5da63c85c2005e33158817bd60", "patch": "@@ -1,3 +1,10 @@\n+2015-11-13  Segher Boessenkool  <segher@kernel.crashing.org>\n+            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* combine.c (subst): Don't substitute or simplify when\n+\thandling register-wise widening multiply.\n+\t(force_to_mode): Likewise.\n+\n 2015-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/68264"}, {"sha": "2a66fd5c8bdf6dbccc407ab3290ee8723bb71448", "filename": "gcc/combine.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e5b2900e37366b5da63c85c2005e33158817bd60", "patch": "@@ -5284,6 +5284,22 @@ subst (rtx x, rtx from, rtx to, int in_dest, int in_cond, int unique_copy)\n \t      || GET_CODE (SET_DEST (x)) == PC))\n \tfmt = \"ie\";\n \n+      /* Substituting into the operands of a widening MULT is not likely\n+\t to create RTL matching a machine insn.  */\n+      if (code == MULT\n+\t  && (GET_CODE (XEXP (x, 0)) == ZERO_EXTEND\n+\t      || GET_CODE (XEXP (x, 0)) == SIGN_EXTEND)\n+\t  && (GET_CODE (XEXP (x, 1)) == ZERO_EXTEND\n+\t      || GET_CODE (XEXP (x, 1)) == SIGN_EXTEND)\n+\t  && REG_P (XEXP (XEXP (x, 0), 0))\n+\t  && REG_P (XEXP (XEXP (x, 1), 0)))\n+\t{\n+\t  if (from == to)\n+\t    return x;\n+\t  else\n+\t    return gen_rtx_CLOBBER (GET_MODE (x), const0_rtx);\n+\t}\n+\n       /* Get the mode of operand 0 in case X is now a SIGN_EXTEND of a\n \t constant.  */\n       if (fmt[0] == 'e')\n@@ -8455,6 +8471,17 @@ force_to_mode (rtx x, machine_mode mode, unsigned HOST_WIDE_INT mask,\n       /* ... fall through ...  */\n \n     case MULT:\n+      /* Substituting into the operands of a widening MULT is not likely to\n+\t create RTL matching a machine insn.  */\n+      if (code == MULT\n+\t  && (GET_CODE (XEXP (x, 0)) == ZERO_EXTEND\n+\t      || GET_CODE (XEXP (x, 0)) == SIGN_EXTEND)\n+\t  && (GET_CODE (XEXP (x, 1)) == ZERO_EXTEND\n+\t      || GET_CODE (XEXP (x, 1)) == SIGN_EXTEND)\n+\t  && REG_P (XEXP (XEXP (x, 0), 0))\n+\t  && REG_P (XEXP (XEXP (x, 1), 0)))\n+\treturn gen_lowpart_or_truncate (mode, x);\n+\n       /* For PLUS, MINUS and MULT, we need any bits less significant than the\n \t most significant bit in MASK since carries from those bits will\n \t affect the bits we are interested in.  */"}, {"sha": "10a2c808d1988a40c6e47fa32922d3e5d5696f4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5b2900e37366b5da63c85c2005e33158817bd60", "patch": "@@ -1,3 +1,7 @@\n+2015-11-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/umaddl_combine_1.c: New test.\n+\n 2015-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/68264"}, {"sha": "430277f1187b76b1e8a2f16e0ed7dd3d5f3b5bfa", "filename": "gcc/testsuite/gcc.target/aarch64/umaddl_combine_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fumaddl_combine_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b2900e37366b5da63c85c2005e33158817bd60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fumaddl_combine_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fumaddl_combine_1.c?ref=e5b2900e37366b5da63c85c2005e33158817bd60", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a53\" } */\n+\n+enum reg_class\n+{\n+  NO_REGS,\n+  AD_REGS,\n+  ALL_REGS, LIM_REG_CLASSES\n+};\n+\n+extern enum reg_class\n+  reg_class_subclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];\n+\n+void\n+init_reg_sets_1 (unsigned int i)\n+{\n+  unsigned int j;\n+  {\n+    for (j = i + 1; j < ((int) LIM_REG_CLASSES); j++)\n+      {\n+\tenum reg_class *p;\n+\tp = &reg_class_subclasses[j][0];\n+\twhile (*p != LIM_REG_CLASSES)\n+\t  p++;\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-not \"umull\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */"}]}