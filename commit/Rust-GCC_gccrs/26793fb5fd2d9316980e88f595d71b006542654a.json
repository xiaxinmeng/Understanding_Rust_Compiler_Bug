{"sha": "26793fb5fd2d9316980e88f595d71b006542654a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3OTNmYjVmZDJkOTMxNjk4MGU4OGY1OTVkNzFiMDA2NTQyNjU0YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-05-13T22:34:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-13T22:34:56Z"}, "message": "Fix bug with multiple results returning structs with invalid sizes.\n\n\t* go-gcc.cc (Gcc_backend::function_type): When building a struct\n\tfor multiple results, check that all fields types have a size.\n\t(Gcc_backend::placeholder_pointer_type): Permit name to be empty.\n\nFrom-SVN: r173742", "tree": {"sha": "43dee658f4fbca50013d2e10f226b4a588179418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43dee658f4fbca50013d2e10f226b4a588179418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26793fb5fd2d9316980e88f595d71b006542654a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26793fb5fd2d9316980e88f595d71b006542654a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26793fb5fd2d9316980e88f595d71b006542654a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26793fb5fd2d9316980e88f595d71b006542654a/comments", "author": null, "committer": null, "parents": [{"sha": "b8f2ad7cc540211400258e4e461a6b760ec44d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f2ad7cc540211400258e4e461a6b760ec44d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f2ad7cc540211400258e4e461a6b760ec44d09"}], "stats": {"total": 87, "additions": 78, "deletions": 9}, "files": [{"sha": "79e68be55ad6f42f2c540d045ecd75713d606347", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=26793fb5fd2d9316980e88f595d71b006542654a", "patch": "@@ -1,3 +1,9 @@\n+2011-05-13  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::function_type): When building a struct\n+\tfor multiple results, check that all fields types have a size.\n+\t(Gcc_backend::placeholder_pointer_type): Permit name to be empty.\n+\n 2011-05-12  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::local_variable): Add is_address_taken"}, {"sha": "a024e197132377e5588c0ea583defc573ae03c5a", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=26793fb5fd2d9316980e88f595d71b006542654a", "patch": "@@ -465,6 +465,7 @@ Gcc_backend::function_type(const Btyped_identifier& receiver,\n \t  tree field_type_tree = p->btype->get_tree();\n \t  if (field_type_tree == error_mark_node)\n \t    return this->error_type();\n+\t  gcc_assert(TYPE_SIZE(field_type_tree) != NULL_TREE);\n \t  tree field = build_decl(location, FIELD_DECL, name_tree,\n \t\t\t\t  field_type_tree);\n \t  DECL_CONTEXT(field) = result;\n@@ -573,10 +574,13 @@ Gcc_backend::placeholder_pointer_type(const std::string& name,\n \t\t\t\t      source_location location, bool)\n {\n   tree ret = build_variant_type_copy(ptr_type_node);\n-  tree decl = build_decl(location, TYPE_DECL,\n-\t\t\t get_identifier_from_string(name),\n-\t\t\t ret);\n-  TYPE_NAME(ret) = decl;\n+  if (!name.empty())\n+    {\n+      tree decl = build_decl(location, TYPE_DECL,\n+\t\t\t     get_identifier_from_string(name),\n+\t\t\t     ret);\n+      TYPE_NAME(ret) = decl;\n+    }\n   return this->make_type(ret);\n }\n "}, {"sha": "e2dde9a08e6df59dd26a743417742e4ef508b260", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=26793fb5fd2d9316980e88f595d71b006542654a", "patch": "@@ -113,7 +113,9 @@ class Backend\n   // Create a placeholder pointer type.  This is used for a named\n   // pointer type, since in Go a pointer type may refer to itself.\n   // NAME is the name of the type, and the location is where the named\n-  // type is defined.  FOR_FUNCTION is true if this is for a Go\n+  // type is defined.  This function is also used for unnamed function\n+  // types with multiple results, in which case the type has no name\n+  // and NAME will be empty.  FOR_FUNCTION is true if this is for a Go\n   // function type, which corresponds to a C/C++ pointer to function\n   // type.  The return value will later be passed as the first\n   // parameter to set_placeholder_pointer_type or"}, {"sha": "ba3e9df0c2ad0897b5766ccc7cbd9c233df012d9", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=26793fb5fd2d9316980e88f595d71b006542654a", "patch": "@@ -2599,6 +2599,8 @@ Gogo::convert_named_types()\n \n   Runtime::convert_types(this);\n \n+  Function_type::convert_types(this);\n+\n   this->named_types_are_converted_ = true;\n }\n "}, {"sha": "e33b349b3c16b6f9475d82259c5fdd14205a3977", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=26793fb5fd2d9316980e88f595d71b006542654a", "patch": "@@ -831,7 +831,8 @@ Type::check_int_value(Expression* e, const char* errmsg,\n   return false;\n }\n \n-// A hash table mapping unnamed types to trees.\n+// A hash table mapping unnamed types to the backend representation of\n+// those types.\n \n Type::Type_btypes Type::type_btypes;\n \n@@ -2588,10 +2589,10 @@ Function_type::do_hash_for_method(Gogo* gogo) const\n   return ret;\n }\n \n-// Get the tree for a function type.\n+// Get the backend representation for a function type.\n \n Btype*\n-Function_type::do_get_backend(Gogo* gogo)\n+Function_type::get_function_backend(Gogo* gogo)\n {\n   Backend::Btyped_identifier breceiver;\n   if (this->receiver_ != NULL)\n@@ -2643,6 +2644,46 @@ Function_type::do_get_backend(Gogo* gogo)\n \t\t\t\t\tthis->location());\n }\n \n+// A hash table mapping function types to their backend placeholders.\n+\n+Function_type::Placeholders Function_type::placeholders;\n+\n+// Get the backend representation for a function type.  If we are\n+// still converting types, and this types has multiple results, return\n+// a placeholder instead.  We do this because for multiple results we\n+// build a struct, and we need to make sure that all the types in the\n+// struct are valid before we create the struct.\n+\n+Btype*\n+Function_type::do_get_backend(Gogo* gogo)\n+{\n+  if (!gogo->named_types_are_converted()\n+      && this->results_ != NULL\n+      && this->results_->size() > 1)\n+    {\n+      Btype* placeholder =\n+\tgogo->backend()->placeholder_pointer_type(\"\", this->location(), true);\n+      Function_type::placeholders.push_back(std::make_pair(this, placeholder));\n+      return placeholder;\n+    }\n+  return this->get_function_backend(gogo);\n+}\n+\n+// Convert function types after all named types are converted.\n+\n+void\n+Function_type::convert_types(Gogo* gogo)\n+{\n+  for (Placeholders::const_iterator p = Function_type::placeholders.begin();\n+       p != Function_type::placeholders.end();\n+       ++p)\n+    {\n+      Btype* bt = p->first->get_function_backend(gogo);\n+      if (!gogo->backend()->set_placeholder_function_type(p->second, bt))\n+\tgo_assert(saw_errors());\n+    }\n+}\n+\n // Functions are initialized to NULL.\n \n tree\n@@ -7236,7 +7277,7 @@ Named_type::do_get_backend(Gogo* gogo)\n       --this->seen_;\n       if (this->is_circular_)\n \tbt1 = gogo->backend()->circular_pointer_type(bt, true);\n-      if (!gogo->backend()->set_placeholder_pointer_type(bt, bt1))\n+      if (!gogo->backend()->set_placeholder_function_type(bt, bt1))\n \tbt = gogo->backend()->error_type();\n       return bt;\n "}, {"sha": "913266b784c8e85942c270dbbf0c6ee078b10de8", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26793fb5fd2d9316980e88f595d71b006542654a/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=26793fb5fd2d9316980e88f595d71b006542654a", "patch": "@@ -1628,6 +1628,10 @@ class Function_type : public Type\n   Function_type*\n   copy_with_receiver(Type*) const;\n \n+  // Finishing converting function types.\n+  static void\n+  convert_types(Gogo*);\n+\n   static Type*\n   make_function_type_descriptor_type();\n \n@@ -1666,6 +1670,16 @@ class Function_type : public Type\n   type_descriptor_params(Type*, const Typed_identifier*,\n \t\t\t const Typed_identifier_list*);\n \n+  Btype*\n+  get_function_backend(Gogo*);\n+\n+  // A list of function types with multiple results and their\n+  // placeholder backend representations, used to postpone building\n+  // the structs we use for multiple results until all types are\n+  // converted.\n+  typedef std::vector<std::pair<Function_type*, Btype*> > Placeholders;\n+  static Placeholders placeholders;\n+\n   // The receiver name and type.  This will be NULL for a normal\n   // function, non-NULL for a method.\n   Typed_identifier* receiver_;"}]}