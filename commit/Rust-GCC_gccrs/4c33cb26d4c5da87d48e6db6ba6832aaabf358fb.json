{"sha": "4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzM2NiMjZkNGM1ZGE4N2Q0OGU2ZGI2YmE2ODMyYWFhYmYzNThmYg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-04-25T12:46:12Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-04-25T12:46:12Z"}, "message": "re PR rtl-optimization/20413 (VOIDmode LABEL_REFs are generated)\n\n2005-04-25  J\"orn Rennecke <joern.rennecke@st.com>\n\t    Stephen Clarke <stevec@superh.com>\n\t    Roger Sayle <roger@eyesopen.com>\n\n\tPR rtl-optimization/20413\n\t* cfgrtl.c (redirect_edge_and_branch): Use Pmode instead of\n\tVOIDmode for LABEL_REF.\n\t* final.c (shorten_branches): Likewise.\n\t* jump.c (mark_all_labels, redirect_exp_1): Likewise.\n\t* loop.c (reg_dead_after_loop): Likewise.\n\t* varasm.c (decode_addr_const): Likewise.\n\t* doc/rtl.texi: Document mode requirement for LABEL_REF.\n\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\nCo-Authored-By: Stephen Clarke <stevec@superh.com>\n\nFrom-SVN: r98711", "tree": {"sha": "91a9d5e5f1890e7f54fe29873cf50968a8f566e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91a9d5e5f1890e7f54fe29873cf50968a8f566e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/comments", "author": null, "committer": null, "parents": [{"sha": "a26b6b94b9ea3370110bf9b86057b83646304aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26b6b94b9ea3370110bf9b86057b83646304aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26b6b94b9ea3370110bf9b86057b83646304aa8"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "2d9324e6192659e0060c6079dd3915843e3b818e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "patch": "@@ -1,3 +1,16 @@\n+2005-04-25  J\"orn Rennecke <joern.rennecke@st.com>\n+\t    Stephen Clarke <stevec@superh.com>\n+\t    Roger Sayle <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/20413\n+\t* cfgrtl.c (redirect_edge_and_branch): Use Pmode instead of\n+\tVOIDmode for LABEL_REF.\n+\t* final.c (shorten_branches): Likewise.\n+\t* jump.c (mark_all_labels, redirect_exp_1): Likewise.\n+\t* loop.c (reg_dead_after_loop): Likewise.\n+\t* varasm.c (decode_addr_const): Likewise.\n+\t* doc/rtl.texi: Document mode requirement for LABEL_REF.\n+\n 2005-04-25  Ralf Corsepius  <ralf.corsepius@rtems.org>\n \n \t* config.gcc (avr-*-*): Remove redundant \"case\"."}, {"sha": "3ceca75f7e382e27449be01932d0a695fd62cc73", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "patch": "@@ -904,7 +904,7 @@ redirect_branch_edge (edge e, basic_block target)\n \t  && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF\n \t  && XEXP (XEXP (SET_SRC (tmp), 2), 0) == old_label)\n \t{\n-\t  XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (VOIDmode,\n+\t  XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (Pmode,\n \t\t\t\t\t\t       new_label);\n \t  --LABEL_NUSES (old_label);\n \t  ++LABEL_NUSES (new_label);"}, {"sha": "f917c85e016050458a02e3b66289669a056df16d", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "patch": "@@ -1390,7 +1390,7 @@ The @code{symbol_ref} contains a mode, which is usually @code{Pmode}.\n Usually that is the only mode for which a symbol is directly valid.\n \n @findex label_ref\n-@item (label_ref @var{label})\n+@item (label_ref:@var{mode} @var{label})\n Represents the value of an assembler label for code.  It contains one\n operand, an expression, which must be a @code{code_label} or a @code{note}\n of type @code{NOTE_INSN_DELETED_LABEL} that appears in the instruction\n@@ -1399,6 +1399,9 @@ sequence to identify the place where the label should go.\n The reason for using a distinct expression type for code label\n references is so that jump optimization can distinguish them.\n \n+The @code{label_ref} contains a mode, which is usually @code{Pmode}.\n+Usually that is the only mode for which a label is directly valid.\n+\n @item (const:@var{m} @var{exp})\n Represents a constant that is the result of an assembly-time\n arithmetic computation.  The operand, @var{exp}, is an expression that"}, {"sha": "0eed8893834e6c17eff99089c3acda364d17e7aa", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "patch": "@@ -953,8 +953,8 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t      if (min_align > LABEL_TO_ALIGNMENT (lab))\n \t\tmin_align = LABEL_TO_ALIGNMENT (lab);\n \t    }\n-\t  XEXP (pat, 2) = gen_rtx_LABEL_REF (VOIDmode, min_lab);\n-\t  XEXP (pat, 3) = gen_rtx_LABEL_REF (VOIDmode, max_lab);\n+\t  XEXP (pat, 2) = gen_rtx_LABEL_REF (Pmode, min_lab);\n+\t  XEXP (pat, 3) = gen_rtx_LABEL_REF (Pmode, max_lab);\n \t  insn_shuid = INSN_SHUID (insn);\n \t  rel = INSN_SHUID (XEXP (XEXP (pat, 0), 0));\n \t  memset (&flags, 0, sizeof (flags));"}, {"sha": "8cfe3b9bcfd556eced267f8648b44797483a016e", "filename": "gcc/jump.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "patch": "@@ -209,7 +209,7 @@ mark_all_labels (rtx f)\n \t\t  {\n \t\t    /* But a LABEL_REF around the REG_LABEL note, so\n \t\t       that we can canonicalize it.  */\n-\t\t    rtx label_ref = gen_rtx_LABEL_REF (VOIDmode,\n+\t\t    rtx label_ref = gen_rtx_LABEL_REF (Pmode,\n \t\t\t\t\t\t       XEXP (label_note, 0));\n \n \t\t    mark_jump_label (label_ref, insn, 0);\n@@ -1543,7 +1543,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n \t{\n \t  rtx n;\n \t  if (nlabel)\n-\t    n = gen_rtx_LABEL_REF (VOIDmode, nlabel);\n+\t    n = gen_rtx_LABEL_REF (Pmode, nlabel);\n \t  else\n \t    n = gen_rtx_RETURN (VOIDmode);\n \n@@ -1554,7 +1554,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n   else if (code == RETURN && olabel == 0)\n     {\n       if (nlabel)\n-\tx = gen_rtx_LABEL_REF (VOIDmode, nlabel);\n+\tx = gen_rtx_LABEL_REF (Pmode, nlabel);\n       else\n \tx = gen_rtx_RETURN (VOIDmode);\n       if (loc == &PATTERN (insn))"}, {"sha": "eaa1bd931b74900bd099b62f332c34137e152d2e", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "patch": "@@ -5074,7 +5074,7 @@ reg_dead_after_loop (const struct loop *loop, rtx reg)\n   /* HACK: Must also search the loop fall through exit, create a label_ref\n      here which points to the loop->end, and append the loop_number_exit_labels\n      list to it.  */\n-  label = gen_rtx_LABEL_REF (VOIDmode, loop->end);\n+  label = gen_rtx_LABEL_REF (Pmode, loop->end);\n   LABEL_NEXTREF (label) = loop->exit_labels;\n \n   for (; label; label = LABEL_NEXTREF (label))"}, {"sha": "78de840ce56bdba7ecc30d1a3b59ad4e32fbca25", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33cb26d4c5da87d48e6db6ba6832aaabf358fb/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4c33cb26d4c5da87d48e6db6ba6832aaabf358fb", "patch": "@@ -2309,7 +2309,7 @@ decode_addr_const (tree exp, struct addr_const *value)\n \n     case LABEL_DECL:\n       x = gen_rtx_MEM (FUNCTION_MODE,\n-\t\t       gen_rtx_LABEL_REF (VOIDmode, force_label_rtx (target)));\n+\t\t       gen_rtx_LABEL_REF (Pmode, force_label_rtx (target)));\n       break;\n \n     case REAL_CST:"}]}