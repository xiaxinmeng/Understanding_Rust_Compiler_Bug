{"sha": "35f2d8efd6b2d344c2147f13b8757547afc8a604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmMmQ4ZWZkNmIyZDM0NGMyMTQ3ZjEzYjg3NTc1NDdhZmM4YTYwNA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2008-09-18T12:04:46Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2008-09-18T12:04:46Z"}, "message": "frv.h (IRA_COVER_CLASSES): Define.\n\n* config/frv/frv.h (IRA_COVER_CLASSES): Define.\n  (SECONDARY_INPUT_RELOAD_CLASS): Omit unused argument in call\n  to frv_secondary_reload_class.\n  (SECONDARY_OUTPUT_RELOAD_CLASS): Likewise.\n  * config/frv/frv.c (TARGET_SECONDARY_RELOAD): Define.\n  (frv_secondary_reload_class): Omit unused parameter.\n  (frv_secondary_reload): New function.  Handle the case when\n  secondary_reload_class() is called before the reload_(in|out)\n  _optabs have been initialised.\n  * config/frv/frv-protos.h (frv_secondary_reload_class): Omit\n  unused parameter.\n  * config/frv/frv.md: Define an exclusion set between fr550_m0\n  and fr550_f0.\n\nFrom-SVN: r140452", "tree": {"sha": "ec9f8486c067d1690adeaf09c49f39added6d3d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9f8486c067d1690adeaf09c49f39added6d3d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35f2d8efd6b2d344c2147f13b8757547afc8a604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f2d8efd6b2d344c2147f13b8757547afc8a604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f2d8efd6b2d344c2147f13b8757547afc8a604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f2d8efd6b2d344c2147f13b8757547afc8a604/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f25a62a5f34a0f33b00238c6c681edac038e1078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25a62a5f34a0f33b00238c6c681edac038e1078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25a62a5f34a0f33b00238c6c681edac038e1078"}], "stats": {"total": 107, "additions": 95, "deletions": 12}, "files": [{"sha": "093f98291c70a8b081ff76e1cb60fc956869cd0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35f2d8efd6b2d344c2147f13b8757547afc8a604", "patch": "@@ -1,3 +1,19 @@\n+2008-09-18  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/frv/frv.h (IRA_COVER_CLASSES): Define.\n+\t(SECONDARY_INPUT_RELOAD_CLASS): Omit unused argument in call\n+\tto frv_secondary_reload_class.\n+\t(SECONDARY_OUTPUT_RELOAD_CLASS): Likewise.\n+\t* config/frv/frv.c (TARGET_SECONDARY_RELOAD): Define.\n+\t(frv_secondary_reload_class): Omit unused parameter.\n+\t(frv_secondary_reload): New function.  Handle the case when\n+\tsecondary_reload_class() is called before the reload_(in|out)\n+\t_optabs have been initialised.\n+\t* config/frv/frv-protos.h (frv_secondary_reload_class): Omit\n+\tunused parameter.\n+\t* config/frv/frv.md: Define an exclusion set between fr550_m0\n+\tand fr550_f0.\n+\n 2008-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37456"}, {"sha": "418ac9ac06957b884470e88b0f945ae1af315d48", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=35f2d8efd6b2d344c2147f13b8757547afc8a604", "patch": "@@ -104,9 +104,8 @@ extern void frv_ifcvt_modify_cancel\t(ce_if_block_t *);\n extern int frv_trampoline_size\t\t(void);\n extern void frv_initialize_trampoline\t(rtx, rtx, rtx);\n extern enum reg_class frv_secondary_reload_class\n-\t\t\t\t\t(enum reg_class rclass,\n-\t\t\t\t\t enum machine_mode mode,\n-\t\t\t\t\t rtx x, int);\n+\t\t\t\t\t(enum reg_class,\n+\t\t\t\t\t enum machine_mode, rtx);\n extern int frv_class_likely_spilled_p\t(enum reg_class rclass);\n extern int frv_hard_regno_mode_ok\t(int, enum machine_mode);\n extern int frv_hard_regno_nregs\t\t(int, enum machine_mode);"}, {"sha": "880419826074435c4481977a23b0344eecb03094", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=35f2d8efd6b2d344c2147f13b8757547afc8a604", "patch": "@@ -381,6 +381,9 @@ static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n   ATTRIBUTE_UNUSED;\n+static bool frv_secondary_reload                (bool, rtx, enum reg_class,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t secondary_reload_info *);\n \f\n /* Allow us to easily change the default for -malloc-cc.  */\n #ifndef DEFAULT_NO_ALLOC_CC\n@@ -462,6 +465,9 @@ static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL frv_output_dwarf_dtprel\n #endif\n \n+#undef  TARGET_SECONDARY_RELOAD\n+#define TARGET_SECONDARY_RELOAD frv_secondary_reload\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #define FRV_SYMBOL_REF_TLS_P(RTX) \\\n@@ -6343,8 +6349,7 @@ frv_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n enum reg_class\n frv_secondary_reload_class (enum reg_class rclass,\n                             enum machine_mode mode ATTRIBUTE_UNUSED,\n-                            rtx x,\n-                            int in_p ATTRIBUTE_UNUSED)\n+                            rtx x)\n {\n   enum reg_class ret;\n \n@@ -6391,7 +6396,7 @@ frv_secondary_reload_class (enum reg_class rclass,\n       ret = GPR_REGS;\n       break;\n \n-      /* The accumulators need fpr registers */\n+      /* The accumulators need fpr registers.  */\n     case ACC_REGS:\n     case EVEN_ACC_REGS:\n     case QUAD_ACC_REGS:\n@@ -6403,6 +6408,42 @@ frv_secondary_reload_class (enum reg_class rclass,\n   return ret;\n }\n \n+/* This hook exists to catch the case where secondary_reload_class() is\n+   called from init_reg_autoinc() in regclass.c - before the reload optabs\n+   have been initialised.  */\n+   \n+static bool\n+frv_secondary_reload (bool in_p, rtx x, enum reg_class reload_class,\n+\t\t      enum machine_mode reload_mode,\n+\t\t      secondary_reload_info * sri)\n+{\n+  enum reg_class rclass = NO_REGS;\n+\n+  if (sri->prev_sri && sri->prev_sri->t_icode != CODE_FOR_nothing)\n+    {\n+      sri->icode = sri->prev_sri->t_icode;\n+      return NO_REGS;\n+    }\n+\n+  rclass = frv_secondary_reload_class (reload_class, reload_mode, x);\n+\n+  if (rclass != NO_REGS)\n+    {\n+      enum insn_code icode = (in_p ? reload_in_optab[(int) reload_mode]\n+\t\t\t      : reload_out_optab[(int) reload_mode]);\n+      if (icode == 0)\n+\t{\n+\t  /* This happens when then the reload_[in|out]_optabs have\n+\t     not been initialised.  */\n+\t  sri->t_icode = CODE_FOR_nothing;\n+\t  return rclass;\n+\t}\n+    }\n+\n+  /* Fall back to the default secondary reload handler.  */\n+  return default_secondary_reload (in_p, x, reload_class, reload_mode, sri);\n+\n+}\n \f\n /* A C expression whose value is nonzero if pseudos that have been assigned to\n    registers of class RCLASS would likely be spilled because registers of RCLASS"}, {"sha": "2ef459e27ff18d8251de08eb9da18d684f12a78a", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=35f2d8efd6b2d344c2147f13b8757547afc8a604", "patch": "@@ -1,5 +1,5 @@\n /* Target macros for the FRV port of GCC.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Red Hat Inc.\n \n@@ -1153,6 +1153,21 @@ enum reg_class\n   { 0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x1fff}, /* ALL_REGS */\\\n }\n \n+/* The following macro defines cover classes for Integrated Register\n+   Allocator.  Cover classes is a set of non-intersected register\n+   classes covering all hard registers used for register allocation\n+   purpose.  Any move between two registers of a cover class should be\n+   cheaper than load or store of the registers.  The macro value is\n+   array of register classes with LIM_REG_CLASSES used as the end\n+   marker.  */\n+\n+#define IRA_COVER_CLASSES\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  GPR_REGS, FPR_REGS, ACC_REGS, ICR_REGS, FCR_REGS, ICC_REGS, FCC_REGS, \\\n+  ACCG_REGS, SPR_REGS,\t\t\t\t\t\t\t\\\n+  LIM_REG_CLASSES\t\t\t\t\t\t\t\\\n+}\n+\n /* A C expression whose value is a register class containing hard register\n    REGNO.  In general there is more than one such class; choose a class which\n    is \"minimal\", meaning that no smaller class also contains the register.  */\n@@ -1235,10 +1250,10 @@ extern enum reg_class reg_class_from_letter[];\n #define PREFERRED_RELOAD_CLASS(X, CLASS) CLASS\n \n #define SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, X) \\\n-  frv_secondary_reload_class (CLASS, MODE, X, TRUE)\n+  frv_secondary_reload_class (CLASS, MODE, X)\n \n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, X) \\\n-  frv_secondary_reload_class (CLASS, MODE, X, FALSE)\n+  frv_secondary_reload_class (CLASS, MODE, X)\n \n /* A C expression whose value is nonzero if pseudos that have been assigned to\n    registers of class CLASS would likely be spilled because registers of CLASS"}, {"sha": "aadf02c4fbd9846c4e01841f98d81a044d1a79e8", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f2d8efd6b2d344c2147f13b8757547afc8a604/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=35f2d8efd6b2d344c2147f13b8757547afc8a604", "patch": "@@ -1,5 +1,5 @@\n ;; Frv Machine Description\n-;; Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2007\n+;; Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2007, 2008\n ;; Free Software Foundation, Inc.\n ;; Contributed by Red Hat, Inc.\n \n@@ -1179,6 +1179,18 @@\n (define_cpu_unit \"fr550_f0,fr550_f1,fr550_f2,fr550_f3\" \"fr550_float_media\")\n (define_cpu_unit \"fr550_m0,fr550_m1,fr550_m2,fr550_m3\" \"fr550_float_media\")\n (exclusion_set \"fr550_f1,fr550_f2,fr550_f3\" \"fr550_m1,fr550_m2,fr550_m3\")\n+(exclusion_set \"fr550_m0\" \"fr550_f1,fr550_f2,fr550_f3\")\n+;; FIXME: This next exclusion set should be defined as well, so that we do\n+;; not get a packet containing multiple media instructions plus a single\n+;; floating point instruction.  At the moment we can get away with not\n+;; defining it because gcc does not seem to generate such packets.\n+;;\n+;; If we do enable the exclusion however the insertion of fnop insns into\n+;; a packet containing media instructions will stop working, because the\n+;; fnop insn counts as a floating point instruction.  The correct solution\n+;; is to fix the reservation for the fnop insn so that it does not have the\n+;; same restrictions as ordinary floating point insns.\n+;;(exclusion_set \"fr550_f0\" \"fr550_m1,fr550_m2,fr550_m3\")\n \n (define_reservation \"fr550_float\" \"fr550_f0|fr550_f1|fr550_f2|fr550_f3\")\n (define_reservation \"fr550_media\" \"fr550_m0|fr550_m1|fr550_m2|fr550_m3\")\n@@ -2092,8 +2104,8 @@\n     }\n   else\n     {\n-      operands[4] = GEN_INT ((((unsigned HOST_WIDE_INT)INTVAL (op1) >> 16)\n-\t\t\t      >> 16) ^ ((unsigned HOST_WIDE_INT)1 << 31)\n+      operands[4] = GEN_INT (((((unsigned HOST_WIDE_INT)INTVAL (op1) >> 16)\n+\t\t\t      >> 16) ^ ((unsigned HOST_WIDE_INT)1 << 31))\n \t\t\t     - ((unsigned HOST_WIDE_INT)1 << 31));\n       operands[5] = GEN_INT (trunc_int_for_mode (INTVAL (op1), SImode));\n     }"}]}