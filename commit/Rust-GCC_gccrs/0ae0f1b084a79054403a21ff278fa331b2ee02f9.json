{"sha": "0ae0f1b084a79054403a21ff278fa331b2ee02f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFlMGYxYjA4NGE3OTA1NDQwM2EyMWZmMjc4ZmEzMzFiMmVlMDJmOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-04-15T03:35:47Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-04-15T03:35:47Z"}, "message": "argv.c: Use ANSI_PROTOTYPES instead of __STDC__.\n\n\n\t* argv.c: Use ANSI_PROTOTYPES instead of __STDC__.\n\t* memchr.c: Likewise.\n\t* strcasecmp.c: Likewise.\n\t* strncasecmp.c: Likewise.\n\t* strncmp.c: Likewise.\n\t* xatexit.c: Likewise.\n\t* xmalloc.c: Likewise.\n\n\t* copysign.c: Use traditional function declaration instead of DEFUN.\n\t* sigsetmask.c: Likewise.\n\n\t* memcmp.c: Both of the above, ANSI_PROTOTYPES and DEFUN.\n\t* memset.c: Likewise.\n\n\t* memcpy.c: ANSI_PROTOTYPES, DEFUN and prototype bcopy.\n\t* memmove.c: Likewise.\n\nFrom-SVN: r65619", "tree": {"sha": "dcc4ca6916745869895ab9bff8b4d6e3c5108d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc4ca6916745869895ab9bff8b4d6e3c5108d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ae0f1b084a79054403a21ff278fa331b2ee02f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae0f1b084a79054403a21ff278fa331b2ee02f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae0f1b084a79054403a21ff278fa331b2ee02f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae0f1b084a79054403a21ff278fa331b2ee02f9/comments", "author": null, "committer": null, "parents": [{"sha": "db0b376eb938de6ee819e751c0c13d4faf5a2dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0b376eb938de6ee819e751c0c13d4faf5a2dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0b376eb938de6ee819e751c0c13d4faf5a2dda"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "6217c8c888a75b1cad9e5c8914e3b49f8fb7bddb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -1,3 +1,22 @@\n+2003-04-14  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* argv.c: Use ANSI_PROTOTYPES instead of __STDC__.\n+\t* memchr.c: Likewise.\n+\t* strcasecmp.c: Likewise.\n+\t* strncasecmp.c: Likewise.\n+\t* strncmp.c: Likewise.\n+\t* xatexit.c: Likewise.\n+\t* xmalloc.c: Likewise.\n+\n+\t* copysign.c: Use traditional function declaration instead of DEFUN.\n+\t* sigsetmask.c: Likewise.\n+\n+\t* memcmp.c: Both of the above, ANSI_PROTOTYPES and DEFUN.\n+\t* memset.c: Likewise.\n+\n+\t* memcpy.c: ANSI_PROTOTYPES, DEFUN and prototype bcopy.\n+\t* memmove.c: Likewise.\n+\n 2003-04-14  Roger Sayle  <roger@eyesopen.com>\n \n \t* strdup.c (strdup): Tweak implementation to use memcpy."}, {"sha": "e4a03793b65d8ad49c381c40235a1a617b71ec04", "filename": "libiberty/argv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA.  */\n \n /*  Routines imported from standard C runtime libraries. */\n \n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n \n #include <stddef.h>\n #include <string.h>"}, {"sha": "d288be239eb45b2cf4def41075a4329d9e036fcc", "filename": "libiberty/copysign.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fcopysign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fcopysign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcopysign.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -131,7 +131,9 @@ typedef union\n \n #if defined(__IEEE_BIG_ENDIAN) || defined(__IEEE_LITTLE_ENDIAN)\n \n-double DEFUN(copysign, (x, y), double x AND double y)\n+double\n+copysign (x, y)\n+     double x, y;\n {\n   __ieee_double_shape_type a,b;\n   b.value = y;  \n@@ -142,7 +144,9 @@ double DEFUN(copysign, (x, y), double x AND double y)\n \n #else\n \n-double DEFUN(copysign, (x, y), double x AND double y)\n+double\n+copysign (x, y)\n+     double x, y;\n {\n   if ((x < 0 && y > 0) || (x > 0 && y < 0))\n     return -x;"}, {"sha": "3948125963d2a1ff538aba2d7bbc01b09524a6a5", "filename": "libiberty/memchr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemchr.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -15,7 +15,7 @@ returned.\n */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long"}, {"sha": "92f2b6e6425726f7e1fd12f26120a4200e62c10b", "filename": "libiberty/memcmp.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemcmp.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -16,15 +16,17 @@ as if comparing unsigned char arrays.\n */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long\n #endif\n \n int\n-DEFUN(memcmp, (str1, str2, count),\n-      const PTR str1 AND const PTR str2 AND size_t count)\n+memcmp (str1, str2, count)\n+     const PTR str1;\n+     const PTR str2;\n+     size_t count;\n {\n   register const unsigned char *s1 = (const unsigned char*)str1;\n   register const unsigned char *s2 = (const unsigned char*)str2;"}, {"sha": "5eece7a0a0015c2535d50c58e03a33e16129519c", "filename": "libiberty/memcpy.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemcpy.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -13,14 +13,19 @@ Copies @var{length} bytes from memory region @var{in} to region\n */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long\n #endif\n \n+void bcopy PARAMS((const void*, void*, size_t));\n+\n PTR\n-DEFUN(memcpy, (out, in, length), PTR out AND const PTR in AND size_t length)\n+memcpy (out, in, length)\n+     PTR out;\n+     const PTR in;\n+     size_t length;\n {\n     bcopy(in, out, length);\n     return out;"}, {"sha": "00ac053401bf34833e5447c374153b7fefd68611", "filename": "libiberty/memmove.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemmove.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -13,12 +13,14 @@ Copies @var{count} bytes from memory area @var{from} to memory area\n */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long\n #endif\n \n+void bcopy PARAMS ((const void*, void*, size_t));\n+\n PTR\n memmove (s1, s2, n)\n      PTR s1;"}, {"sha": "5119f858ad067c1b834a2f00772fa3894602c69f", "filename": "libiberty/memset.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fmemset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemset.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -13,15 +13,17 @@ Sets the first @var{count} bytes of @var{s} to the constant byte\n */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long\n #endif\n \n PTR\n-DEFUN(memset, (dest, val, len),\n-      PTR dest AND register int val AND register size_t len)\n+memset (dest, val, len)\n+     PTR dest;\n+     register int val;\n+     register size_t len;\n {\n   register unsigned char *ptr = (unsigned char*)dest;\n   while (len-- > 0)"}, {"sha": "4de3e4b1eb826d9bd678bd84ff932862900dac04", "filename": "libiberty/sigsetmask.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fsigsetmask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fsigsetmask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsigsetmask.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -25,8 +25,8 @@ extern void abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n \n #ifdef SIG_SETMASK\n int\n-DEFUN(sigsetmask,(set),\n-      int set)\n+sigsetmask (set)\n+      int set;\n {\n     sigset_t new;\n     sigset_t old;"}, {"sha": "d2608dc0b8786a3ecb8ab66e19197f3e0d24c35d", "filename": "libiberty/strcasecmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fstrcasecmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fstrcasecmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrcasecmp.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -25,7 +25,7 @@ static char sccsid[] = \"@(#)strcasecmp.c\t5.5 (Berkeley) 11/24/87\";\n #endif /* LIBC_SCCS and not lint */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long"}, {"sha": "10feee82198e2105f2591164d413078c1ee7c3e3", "filename": "libiberty/strncasecmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fstrncasecmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fstrncasecmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncasecmp.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -25,7 +25,7 @@ static char sccsid[] = \"@(#)strcasecmp.c\t5.5 (Berkeley) 11/24/87\";\n #endif /* LIBC_SCCS and not lint */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long"}, {"sha": "ad87e1fde8ba704aa7ca64f9ca3b9cb8e157a268", "filename": "libiberty/strncmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fstrncmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fstrncmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncmp.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -13,7 +13,7 @@ Compares the first @var{n} bytes of two strings, returning a value as\n */\n \n #include <ansidecl.h>\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long"}, {"sha": "075599c61f95fd1580e1d69b0b3c85f4fe29a543", "filename": "libiberty/xatexit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fxatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fxatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxatexit.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -27,7 +27,7 @@ failure.  If you use @code{xatexit} to register functions, you must use\n \n #include <stdio.h>\n \n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long"}, {"sha": "c3fe1a84f4d2c21ae9c90c6b3800e1131e1ab81a", "filename": "libiberty/xmalloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fxmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae0f1b084a79054403a21ff278fa331b2ee02f9/libiberty%2Fxmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmalloc.c?ref=0ae0f1b084a79054403a21ff278fa331b2ee02f9", "patch": "@@ -68,7 +68,7 @@ function will be called to print an error message and terminate execution.\n \n #include <stdio.h>\n \n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n #define size_t unsigned long"}]}