{"sha": "64ef1ee2d5f6172882c04403ada2f3fc50f94e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRlZjFlZTJkNWY2MTcyODgyYzA0NDAzYWRhMmYzZmM1MGY5NGU2NQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-07T16:47:39Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-07T16:47:39Z"}, "message": "index.html: Explain libsupc++, mention 'long long' bugfixes on Solaris.\n\n2001-11-07  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/faq/index.html:  Explain libsupc++, mention 'long long'\n\tbugfixes on Solaris.\n\t* docs/html/faq/index.txt:  Regenerate.\n\nFrom-SVN: r46828", "tree": {"sha": "dc76df3b1e6c27834b1e215664861c1350f91f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc76df3b1e6c27834b1e215664861c1350f91f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64ef1ee2d5f6172882c04403ada2f3fc50f94e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ef1ee2d5f6172882c04403ada2f3fc50f94e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ef1ee2d5f6172882c04403ada2f3fc50f94e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ef1ee2d5f6172882c04403ada2f3fc50f94e65/comments", "author": null, "committer": null, "parents": [{"sha": "2a6f0eca1727e5494dd11ffa79f41e85f1ce4a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6f0eca1727e5494dd11ffa79f41e85f1ce4a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6f0eca1727e5494dd11ffa79f41e85f1ce4a3f"}], "stats": {"total": 763, "additions": 448, "deletions": 315}, "files": [{"sha": "106caf9bc0318795445cd80dcd57aee04ec9a2d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ef1ee2d5f6172882c04403ada2f3fc50f94e65/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ef1ee2d5f6172882c04403ada2f3fc50f94e65/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=64ef1ee2d5f6172882c04403ada2f3fc50f94e65", "patch": "@@ -1,3 +1,9 @@\n+2001-11-07  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/faq/index.html:  Explain libsupc++, mention 'long long'\n+\tbugfixes on Solaris.\n+\t* docs/html/faq/index.txt:  Regenerate.\n+\n 2001-11-06  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG):  Run the test in"}, {"sha": "b30ac965e2d7995477b7ecd2d3a909d01cd5656e", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 66, "deletions": 3, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ef1ee2d5f6172882c04403ada2f3fc50f94e65/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ef1ee2d5f6172882c04403ada2f3fc50f94e65/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=64ef1ee2d5f6172882c04403ada2f3fc50f94e65", "patch": "@@ -45,6 +45,7 @@ <h1>Questions</h1>\n          <li><a href=\"#2_3\">What is this CVS thing that you keep \n                             mentioning?</a>\n          <li><a href=\"#2_4\">How do I know if it works?</a>\n+         <li><a href=\"#2_5\">This library is HUGE!  And what's libsupc++?</a>\n       </ol>\n \n    <li><a href=\"#3_0\">Platform-Specific Issues</a>\n@@ -53,6 +54,7 @@ <h1>Questions</h1>\n                             favorite compiler&gt;?</a>\n          <li><a href=\"#3_2\">[removed]</a>\n          <li><a href=\"#3_3\">Building under DEC OSF kills the assembler</a>\n+         <li><a href=\"#3_4\">I can't use 'long long' on Solaris</a>\n       </ol>\n \n    <li><a href=\"#4_0\">Known Bugs and Non-Bugs</a>\n@@ -320,6 +322,56 @@ <h2><a name=\"2_4\">2.4 How do I know if it works?</a></h2>\n          <strong>please</strong> write up your idea and send it to the list!\n       </p>\n \n+<hr>\n+   <h2><a name=\"2_5\">2.4 This library is HUGE!  And what's libsupc++?</a></h2>\n+      <p>Usually the size of libraries on disk isn't noticeable.  When a\n+         link editor (or simply &quot;linker&quot;) pulls things from a\n+         static archive library, only the necessary object files are copied\n+         into your executable, not the entire library.  Unfortunately, even\n+         if you only need a single function or variable from an object file,\n+         the entire object file is extracted.  (There's nothing unique to C++\n+         or libstdc++-v3 about this; it's just common behavior, given here\n+         for background reasons.)\n+      </p>\n+      <p>Some of the object files which make up libstdc++.a are rather large.\n+         If you create a statically-linked executable with\n+         <code> -static</code>, those large object files are suddenly part\n+         of your executable.  Historically the best way around this was to\n+         only place a very few functions (often only a single one) in each\n+         source/object file; then extracting a single function is the same\n+         as extracting a single .o file.  For libstdc++-v3 this is only\n+         possible to a certain extent; the object files in question contain\n+         template classes and template functions, pre-instantiated, and\n+         splitting those up causes severe maintenance headaches.\n+      </p>\n+      <p>It's not a bug, and it's not really a problem.  Nevertheless, some\n+         people don't like it, so here are two pseudo-solutions:\n+      </p>\n+      <p>If the only functions from libstdc++.a which you need are language\n+         support functions (those listed in\n+         <a href=\"../18_support/howto.html\">clause 18</a> of the standard,\n+         e.g., <code>new</code> and <code>delete</code>), then try linking\n+         against <code>libsupc++.a</code> (usually specifying\n+         <code>-lsupc++</code> when calling g++ for the final link step will\n+         do it).  This library contains only those support routines, one per\n+         object file.  But if you are using anything from the rest of the\n+         library, such as IOStreams or vectors, then you'll still need\n+         pieces from <code>libstdc++.a</code>.\n+      </p>\n+      <p>The second method is one we hope to incorporate into the library\n+         build process.  Some platforms can place each function and variable\n+         into its own section in a .o file.  The GNU linker can then perform\n+         garbage collection on unused sections; this reduces the situation\n+         to only copying needed functions into the executable, as before,\n+         but all happens automatically.\n+      </p>\n+      <p>Unfortunately the garbage collection in GNU ld is buggy; sections\n+         (corresponding to functions and variables) which <em>are</em> used\n+         are mistakenly removed, leading to horrible crashes when your\n+         executable starts up.  For the time being, this feature is not used\n+         when building the library.\n+      </p>\n+\n <hr>\n <h1><a name=\"3_0\">3.0 Platform-Specific Issues</a></h1>\n    <h2><a name=\"3_1\">3.1 Can libstdc++-v3 be used with &lt;my\n@@ -363,6 +415,18 @@ <h2><a name=\"3_3\">3.3 Building DEC OSF kills the assembler</a></h2>\n          these two pseudos would win praise and accolades from many.\n       </p>\n \n+<hr>\n+   <h2><a name=\"3_4\">3.4 I can't use 'long long' on Solaris</a></h2>\n+      <p>By default we try to support the C99 <code>long long</code> type.\n+         This requires that certain functions from your C library be present.\n+      </p>\n+      <p>Up through release 3.0.2 the tests performed were too general, and\n+         this feature was disabled when it did not need to be.  The most\n+         commonly reported platform affected was Solaris.\n+      </p>\n+      <p>This has been fixed for 3.0.3 and onwards.\n+      </p>\n+\n <hr>\n <h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n    <em>Note that this section can get rapdily outdated -- such is the\n@@ -380,10 +444,9 @@ <h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n       specifically the part about configuring in a separate build directory,\n       and how strongly recommended it is.  Building in the source directory\n       is fragile, is rarely tested, and tends to break, as in this case.\n-      Work has already gone into the source tree to make this less painful\n-      for the next release.\n+      This was fixed for 3.0.2.\n    </p>\n-   <p><strong>Please do not report this as a bug.  We know about it.</strong>\n+   <p><strong>Please do not report these as bugs.  We know about them.</strong>\n       Reporting this -- or any other problem that's already been fixed --\n       hinders the development of GCC, because we have to take time to\n       respond to your report.  Thank you."}, {"sha": "ccf39cfaf916502487f1ee2f52e371260118d824", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 376, "deletions": 312, "changes": 688, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ef1ee2d5f6172882c04403ada2f3fc50f94e65/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ef1ee2d5f6172882c04403ada2f3fc50f94e65/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=64ef1ee2d5f6172882c04403ada2f3fc50f94e65", "patch": "@@ -1,7 +1,7 @@\n \n                      libstdc++ Frequently Asked Questions\n \n-   The   latest   version   of  this  document  is  always  available  at\n+   The latest version of this document is always available at\n    [1]http://gcc.gnu.org/onlinedocs/libstdc++/faq/.\n \n    To the [2]libstdc++-v3 homepage.\n@@ -24,211 +24,213 @@\n          2. [15][removed]\n          3. [16]What is this CVS thing that you keep mentioning?\n          4. [17]How do I know if it works?\n-    3. [18]Platform-Specific Issues\n-         1. [19]Can libstdc++-v3 be used with <my favorite compiler>?\n-         2. [20][removed]\n-         3. [21]Building under DEC OSF kills the assembler\n-    4. [22]Known Bugs and Non-Bugs\n-         1. [23]What works already?\n-         2. [24]Bugs in gcc/g++ (not libstdc++-v3)\n-         3. [25]Bugs in the C++ language/lib specification\n-         4. [26]Things in libstdc++ that look like bugs\n-               o [27]reopening a stream fails\n-               o [28]-Weffc++ complains too much\n-               o [29]\"ambiguous  overloads\"  after including an old-style\n+         5. [18]This library is HUGE! And what's libsupc++?\n+    3. [19]Platform-Specific Issues\n+         1. [20]Can libstdc++-v3 be used with <my favorite compiler>?\n+         2. [21][removed]\n+         3. [22]Building under DEC OSF kills the assembler\n+         4. [23]I can't use 'long long' on Solaris\n+    4. [24]Known Bugs and Non-Bugs\n+         1. [25]What works already?\n+         2. [26]Bugs in gcc/g++ (not libstdc++-v3)\n+         3. [27]Bugs in the C++ language/lib specification\n+         4. [28]Things in libstdc++ that look like bugs\n+               o [29]reopening a stream fails\n+               o [30]-Weffc++ complains too much\n+               o [31]\"ambiguous overloads\" after including an old-style\n                  header\n-               o [30]The g++-3 headers are not ours\n-               o [31]compilation errors from streambuf.h\n-               o [32]errors about *Cconcept and constraints in the STL...\n-         5. [33]Aw, that's easy to fix!\n-    5. [34]Miscellaneous\n-         1. [35]string::iterator is not char*; vector<T>::iterator is not\n+               o [32]The g++-3 headers are not ours\n+               o [33]compilation errors from streambuf.h\n+               o [34]errors about *Cconcept and constraints in the STL...\n+         5. [35]Aw, that's easy to fix!\n+    5. [36]Miscellaneous\n+         1. [37]string::iterator is not char*; vector<T>::iterator is not\n             T*\n-         2. [36]What's next after libstdc++-v3?\n-         3. [37]What about the STL from SGI?\n-         4. [38]Extensions and Backward Compatibility\n-         5. [39][removed]\n-         6. [40]Is libstdc++-v3 thread-safe?\n-         7. [41]How do I get a copy of the ISO C++ Standard?\n+         2. [38]What's next after libstdc++-v3?\n+         3. [39]What about the STL from SGI?\n+         4. [40]Extensions and Backward Compatibility\n+         5. [41][removed]\n+         6. [42]Is libstdc++-v3 thread-safe?\n+         7. [43]How do I get a copy of the ISO C++ Standard?\n      _________________________________________________________________\n \n                             1.0 General Information\n \n 1.1 What is libstdc++-v3?\n \n-   The  GNU  Standard  C++  Library  v3, or libstdc++-2.9x, is an ongoing\n-   project  to  implement the ISO 14882 Standard C++ library as described\n-   in  chapters  17 through 27 and annex D. As the library reaches stable\n-   plateaus,  it  is  captured  in  a  snapshot and released. The current\n-   release  is  [42]the  eleventh  snapshot.  For  those  who want to see\n-   exactly  how  far  the  project  has  come,  or  just  want the latest\n-   bleeding-edge  code, the up-to-date source is available over anonymous\n+   The GNU Standard C++ Library v3, or libstdc++-2.9x, is an ongoing\n+   project to implement the ISO 14882 Standard C++ library as described\n+   in chapters 17 through 27 and annex D. As the library reaches stable\n+   plateaus, it is captured in a snapshot and released. The current\n+   release is [44]the eleventh snapshot. For those who want to see\n+   exactly how far the project has come, or just want the latest\n+   bleeding-edge code, the up-to-date source is available over anonymous\n    CVS, and can even be browsed over the Web (see below).\n \n    A more formal description of the V3 goals can be found in the official\n-   [43]design document.\n+   [45]design document.\n      _________________________________________________________________\n \n 1.2 Why should I use libstdc++?\n \n    The completion of the ISO C++ standardization gave the C++ community a\n-   powerful  set  of  reuseable  tools  in  the  form of the C++ Standard\n-   Library.  However,  all existing C++ implementations are (as the Draft\n-   Standard  used to say) \"incomplet and incorrekt,\" and many suffer from\n+   powerful set of reuseable tools in the form of the C++ Standard\n+   Library. However, all existing C++ implementations are (as the Draft\n+   Standard used to say) \"incomplet and incorrekt,\" and many suffer from\n    limitations of the compilers that use them.\n \n-   The  GNU  C/C++/FORTRAN/<pick-a-language>  compiler (gcc, g++, etc) is\n+   The GNU C/C++/FORTRAN/<pick-a-language> compiler (gcc, g++, etc) is\n    widely considered to be one of the leading compilers in the world. Its\n-   development  has  recently been taken over by the [44]GCC team. All of\n-   the  rapid development and near-legendary [45]portability that are the\n+   development has recently been taken over by the [46]GCC team. All of\n+   the rapid development and near-legendary [47]portability that are the\n    hallmarks of an open-source project are being applied to libstdc++.\n \n-   That  means  that  all  of the Standard classes and functions (such as\n-   string,  vector<>, iostreams, and algorithms) will be freely available\n-   and  fully  compliant.  Programmers will no longer need to \"roll their\n+   That means that all of the Standard classes and functions (such as\n+   string, vector<>, iostreams, and algorithms) will be freely available\n+   and fully compliant. Programmers will no longer need to \"roll their\n    own\" nor be worried about platform-specific incompatabilities.\n      _________________________________________________________________\n \n 1.3 Who's in charge of it?\n \n    The libstdc++ project is contributed to by several developers all over\n-   the  world,  in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n+   the world, in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n    Dos Reis, Phil Edwards, and Ulrich Drepper are the lead maintainers of\n    the CVS archive.\n \n-   Development  and  discussion  is  held  on the libstdc++ mailing list.\n-   Subscribing  to  the  list, or searching the list archives, is open to\n-   everyone.  You can read instructions for doing so on the [46]homepage.\n+   Development and discussion is held on the libstdc++ mailing list.\n+   Subscribing to the list, or searching the list archives, is open to\n+   everyone. You can read instructions for doing so on the [48]homepage.\n    If you have questions, ideas, code, or are just curious, sign up!\n      _________________________________________________________________\n \n 1.4 How do I get libstdc++?\n \n-   The  eleventh  (and  latest) snapshot of libstdc++-v3 is [47]available\n+   The eleventh (and latest) snapshot of libstdc++-v3 is [49]available\n    via ftp. The filename is libstdc++-2.92.tar.gz.\n \n-   The  [48]homepage  has  instructions  for  retrieving  the  latest CVS\n+   The [50]homepage has instructions for retrieving the latest CVS\n    sources, and for browsing the CVS sources over the web.\n \n-   The  subset  commonly known as the Standard Template Library (chapters\n-   23  through  25,  mostly) is adapted from the final release of the SGI\n+   The subset commonly known as the Standard Template Library (chapters\n+   23 through 25, mostly) is adapted from the final release of the SGI\n    STL.\n      _________________________________________________________________\n \n 1.5 When is libstdc++ going to be finished?\n \n-   Nathan  Myers  gave  the best of all possible answers, responding to a\n+   Nathan Myers gave the best of all possible answers, responding to a\n    Usenet article asking this question: Sooner, if you help.\n      _________________________________________________________________\n \n 1.6 How do I contribute to the effort?\n \n-   Here  is  [49]a page devoted to this topic. Subscribing to the mailing\n-   list  (see  above,  or  the  homepage) is a very good idea if you have\n-   something  to  contribute, or if you have spare time and want to help.\n+   Here is [51]a page devoted to this topic. Subscribing to the mailing\n+   list (see above, or the homepage) is a very good idea if you have\n+   something to contribute, or if you have spare time and want to help.\n    Contributions don't have to be in the form of source code; anybody who\n-   is  willing  to  help write documentation, for example, or has found a\n+   is willing to help write documentation, for example, or has found a\n    bug in code that we all thought was working, is more than welcome!\n      _________________________________________________________________\n \n 1.7 What happened to libg++? I need that!\n \n-   The  most  recent  libg++ README states that libg++ is no longer being\n-   actively  maintained.  It  should not be used for new projects, and is\n+   The most recent libg++ README states that libg++ is no longer being\n+   actively maintained. It should not be used for new projects, and is\n    only being kicked along to support older code.\n \n-   The  libg++  was  designed  and  created when there was no Standard to\n-   provide  guidance.  Classes  like linked lists are now provided for by\n-   list<T>  and  do not need to be created by genclass. (For that matter,\n-   templates  exist now and are well-supported, whereas genclass (mostly)\n+   The libg++ was designed and created when there was no Standard to\n+   provide guidance. Classes like linked lists are now provided for by\n+   list<T> and do not need to be created by genclass. (For that matter,\n+   templates exist now and are well-supported, whereas genclass (mostly)\n    predates them.)\n \n-   There  are  other  classes in libg++ that are not specified in the ISO\n+   There are other classes in libg++ that are not specified in the ISO\n    Standard (e.g., statistical analysis). While there are a lot of really\n-   useful  things that are used by a lot of people (e.g., statistics :-),\n-   the  Standards  Committee couldn't include everything, and so a lot of\n+   useful things that are used by a lot of people (e.g., statistics :-),\n+   the Standards Committee couldn't include everything, and so a lot of\n    those \"obvious\" classes didn't get included.\n \n-   Since  libstdc++ is an implementation of the Standard Library, we have\n-   no  plans  at  this  time  to  include  non-Standard  utilities in the\n-   implementation,  however  handy  they are. (The extensions provided in\n-   the  SGI  STL  aren't  maintained  by  us  and  don't get a lot of our\n-   attention,  because  they  don't  require  a  lot  of our time.) It is\n-   entirely  plausable  that  the  \"useful  stuff\"  from  libg++ might be\n-   extracted  into  an  updated  utilities library, but nobody has stated\n+   Since libstdc++ is an implementation of the Standard Library, we have\n+   no plans at this time to include non-Standard utilities in the\n+   implementation, however handy they are. (The extensions provided in\n+   the SGI STL aren't maintained by us and don't get a lot of our\n+   attention, because they don't require a lot of our time.) It is\n+   entirely plausable that the \"useful stuff\" from libg++ might be\n+   extracted into an updated utilities library, but nobody has stated\n    such a project yet.\n \n-   (The  [50]Boost site houses free C++ libraries that do varying things,\n-   and  happened  to  be  started  by members of the Standards Committee.\n+   (The [52]Boost site houses free C++ libraries that do varying things,\n+   and happened to be started by members of the Standards Committee.\n    Certain \"useful stuff\" classes will probably migrate there.)\n \n-   For the bold and/or desperate, the [51]GCC FAQ describes where to find\n+   For the bold and/or desperate, the [53]GCC FAQ describes where to find\n    the last libg++ source.\n      _________________________________________________________________\n \n 1.8 What if I have more questions?\n \n    If you have read the README and RELEASE-NOTES files, and your question\n    remains unanswered, then just ask the mailing list. At present, you do\n-   not  need  to  be subscribed to the list to send a message to it. More\n-   information  is available on the homepage (including how to browse the\n-   list archives); to send to the list, use [52]libstdc++@gcc.gnu.org.\n+   not need to be subscribed to the list to send a message to it. More\n+   information is available on the homepage (including how to browse the\n+   list archives); to send to the list, use [54]libstdc++@gcc.gnu.org.\n \n-   If  you  have a question that you think should be included here, or if\n-   you  have  a  question  about a question/answer here, contact [53]Phil\n-   Edwards or [54]Gabriel Dos Reis.\n+   If you have a question that you think should be included here, or if\n+   you have a question about a question/answer here, contact [55]Phil\n+   Edwards or [56]Gabriel Dos Reis.\n      _________________________________________________________________\n \n 1.9 What are the license terms for libstdc++-v3?\n \n-   See [55]our license description for these and related questions.\n+   See [57]our license description for these and related questions.\n      _________________________________________________________________\n \n                                2.0 Installation\n \n 2.1 How do I install libstdc++-v3?\n \n-   Complete  instructions  are  not  given  here  (this  is a FAQ, not an\n+   Complete instructions are not given here (this is a FAQ, not an\n    installation document), but the tools required are few:\n-     * A  3.x  release  of GCC. Note that building GCC is much easier and\n+     * A 3.x release of GCC. Note that building GCC is much easier and\n        more automated than building the GCC 2.[78] series was. If you are\n-       using   GCC  2.95,  you  can  still  build  earlier  snapshots  of\n+       using GCC 2.95, you can still build earlier snapshots of\n        libstdc++.\n      * GNU Make is recommended, but should not be required.\n      * The GNU Autotools are needed if you are messing with the configury\n        or makefiles.\n \n-   The  file [56]documentation.html provides a good overview of the steps\n-   necessary  to  build,  install,  and use the library. Instructions for\n-   configuring  the  library  with new flags such as --enable-threads are\n-   there  also,  as well as patches and instructions for working with GCC\n+   The file [58]documentation.html provides a good overview of the steps\n+   necessary to build, install, and use the library. Instructions for\n+   configuring the library with new flags such as --enable-threads are\n+   there also, as well as patches and instructions for working with GCC\n    2.95.\n \n-   The  top-level  install.html  and  [57]RELEASE-NOTES files contain the\n-   exact  build  and  installation  instructions.  You may wish to browse\n-   those  files  over  CVSweb  ahead  of  time  to  get a feel for what's\n-   required.   RELEASE-NOTES   is  located  in  the  \".../docs/17_intro/\"\n+   The top-level install.html and [59]RELEASE-NOTES files contain the\n+   exact build and installation instructions. You may wish to browse\n+   those files over CVSweb ahead of time to get a feel for what's\n+   required. RELEASE-NOTES is located in the \".../docs/17_intro/\"\n    directory of the distribution.\n      _________________________________________________________________\n \n 2.2 [removed]\n \n-   This  question  has become moot and has been removed. The stub is here\n+   This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 2.3 What is this CVS thing that you keep mentioning?\n \n-   The  Concurrent  Versions  System  is  one of several revision control\n+   The Concurrent Versions System is one of several revision control\n    packages. It was selected for GNU projects because it's free (speech),\n-   free  (beer),  and  very  high  quality.  The [58]CVS entry in the GNU\n-   software  catalogue  has a better description as well as a [59]link to\n+   free (beer), and very high quality. The [60]CVS entry in the GNU\n+   software catalogue has a better description as well as a [61]link to\n    the makers of CVS.\n \n    The \"anonymous client checkout\" feature of CVS is similar to anonymous\n    FTP in that it allows anyone to retrieve the latest libstdc++ sources.\n \n-   After  the  first  of  April,  American  users will have a \"/pharmacy\"\n+   After the first of April, American users will have a \"/pharmacy\"\n    command-line option...\n      _________________________________________________________________\n \n@@ -237,14 +239,62 @@\n    libstdc++-v3 comes with its own testsuite. You do not need to actually\n    install the library (\"make install\") to run the testsuite.\n \n-   To  run  the  testsuite  on  the  library after building it, use \"make\n-   check\"  while  in  your  build  directory. To run the testsuite on the\n-   library  after  building  and  installing it, use \"make check-install\"\n+   To run the testsuite on the library after building it, use \"make\n+   check\" while in your build directory. To run the testsuite on the\n+   library after building and installing it, use \"make check-install\"\n    instead.\n \n    If you find bugs in the testsuite programs themselves, or if you think\n-   of  a new test program that should be added to the suite, please write\n+   of a new test program that should be added to the suite, please write\n    up your idea and send it to the list!\n+     _________________________________________________________________\n+\n+2.4 This library is HUGE! And what's libsupc++?\n+\n+   Usually the size of libraries on disk isn't noticeable. When a link\n+   editor (or simply \"linker\") pulls things from a static archive\n+   library, only the necessary object files are copied into your\n+   executable, not the entire library. Unfortunately, even if you only\n+   need a single function or variable from an object file, the entire\n+   object file is extracted. (There's nothing unique to C++ or\n+   libstdc++-v3 about this; it's just common behavior, given here for\n+   background reasons.)\n+\n+   Some of the object files which make up libstdc++.a are rather large.\n+   If you create a statically-linked executable with -static, those large\n+   object files are suddenly part of your executable. Historically the\n+   best way around this was to only place a very few functions (often\n+   only a single one) in each source/object file; then extracting a\n+   single function is the same as extracting a single .o file. For\n+   libstdc++-v3 this is only possible to a certain extent; the object\n+   files in question contain template classes and template functions,\n+   pre-instantiated, and splitting those up causes severe maintenance\n+   headaches.\n+\n+   It's not a bug, and it's not really a problem. Nevertheless, some\n+   people don't like it, so here are two pseudo-solutions:\n+\n+   If the only functions from libstdc++.a which you need are language\n+   support functions (those listed in [62]clause 18 of the standard,\n+   e.g., new and delete), then try linking against libsupc++.a (usually\n+   specifying -lsupc++ when calling g++ for the final link step will do\n+   it). This library contains only those support routines, one per object\n+   file. But if you are using anything from the rest of the library, such\n+   as IOStreams or vectors, then you'll still need pieces from\n+   libstdc++.a.\n+\n+   The second method is one we hope to incorporate into the library build\n+   process. Some platforms can place each function and variable into its\n+   own section in a .o file. The GNU linker can then perform garbage\n+   collection on unused sections; this reduces the situation to only\n+   copying needed functions into the executable, as before, but all\n+   happens automatically.\n+\n+   Unfortunately the garbage collection in GNU ld is buggy; sections\n+   (corresponding to functions and variables) which are used are\n+   mistakenly removed, leading to horrible crashes when your executable\n+   starts up. For the time being, this feature is not used when building\n+   the library.\n      _________________________________________________________________\n \n                          3.0 Platform-Specific Issues\n@@ -253,60 +303,71 @@\n \n    Probably not. Yet.\n \n-   Because  GCC advances so rapidly, development and testing of libstdc++\n-   is  being done almost entirely under that compiler. If you are curious\n-   about  whether other, lesser compilers (*grin*) support libstdc++, you\n-   are  more  than  welcome  to try. Configuring and building the library\n-   (see  above)  will  still require certain tools, however. Also keep in\n+   Because GCC advances so rapidly, development and testing of libstdc++\n+   is being done almost entirely under that compiler. If you are curious\n+   about whether other, lesser compilers (*grin*) support libstdc++, you\n+   are more than welcome to try. Configuring and building the library\n+   (see above) will still require certain tools, however. Also keep in\n    mind that building libstdc++ does not imply that your compiler will be\n    able to use all of the features found in the C++ Standard Library.\n \n-   Since  the  goal of ISO Standardization is for all C++ implementations\n-   to  be  able  to share code, the final libstdc++ should, in theory, be\n-   useable  under  any  ISO-compliant compiler. It will still be targeted\n+   Since the goal of ISO Standardization is for all C++ implementations\n+   to be able to share code, the final libstdc++ should, in theory, be\n+   useable under any ISO-compliant compiler. It will still be targeted\n    and optimized for GCC/g++, however.\n      _________________________________________________________________\n \n 3.2 [removed]\n \n-   This  question  has become moot and has been removed. The stub is here\n+   This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 3.3 Building DEC OSF kills the assembler\n \n-   The   atomicity.h  header  for  the  Alpha  processor  currently  uses\n-   pseudo-operators  which  the  DEC  assembler  doesn't  understand  (in\n-   particular,  .subsection  and  .previous).  The  simple solution is to\n-   install  GNU  as and arrange for the GCC build to use it (or merge the\n+   The atomicity.h header for the Alpha processor currently uses\n+   pseudo-operators which the DEC assembler doesn't understand (in\n+   particular, .subsection and .previous). The simple solution is to\n+   install GNU as and arrange for the GCC build to use it (or merge the\n    sources and build it during the bootstrap).\n \n-   Anyone  who  [60]knows  the  DEC  assembler well enough to provide the\n-   equivalent  of  these  two pseudos would win praise and accolades from\n+   Anyone who [63]knows the DEC assembler well enough to provide the\n+   equivalent of these two pseudos would win praise and accolades from\n    many.\n+     _________________________________________________________________\n+\n+3.4 I can't use 'long long' on Solaris\n+\n+   By default we try to support the C99 long long type. This requires\n+   that certain functions from your C library be present.\n+\n+   Up through release 3.0.2 the tests performed were too general, and\n+   this feature was disabled when it did not need to be. The most\n+   commonly reported platform affected was Solaris.\n+\n+   This has been fixed for 3.0.3 and onwards.\n      _________________________________________________________________\n \n                           4.0 Known Bugs and Non-Bugs\n \n-   Note  that this section can get rapdily outdated -- such is the nature\n-   of  an  open-source  project.  For  the  latest  information, join the\n-   mailing  list  or look through recent archives. The RELEASE- NOTES and\n+   Note that this section can get rapdily outdated -- such is the nature\n+   of an open-source project. For the latest information, join the\n+   mailing list or look through recent archives. The RELEASE- NOTES and\n    BUGS files are generally kept up-to-date.\n \n-   For  3.0.1,  the  most  common \"bug\" is an apparently missing \"../\" in\n+   For 3.0.1, the most common \"bug\" is an apparently missing \"../\" in\n    include/Makefile, resulting in files like gthr.h and gthr-single.h not\n    being found.\n \n-   Please  read  [61]the configuration instructions for GCC, specifically\n-   the  part  about  configuring  in  a separate build directory, and how\n-   strongly  recommended  it  is.  Building  in  the  source directory is\n-   fragile,  is  rarely tested, and tends to break, as in this case. Work\n-   has  already  gone  into the source tree to make this less painful for\n-   the next release.\n+   Please read [64]the configuration instructions for GCC, specifically\n+   the part about configuring in a separate build directory, and how\n+   strongly recommended it is. Building in the source directory is\n+   fragile, is rarely tested, and tends to break, as in this case. This\n+   was fixed for 3.0.2.\n \n-   Please  do  not report this as a bug. We know about it. Reporting this\n-   --  or  any  other  problem  that's  already been fixed -- hinders the\n-   development  of  GCC,  because we have to take time to respond to your\n+   Please do not report these as bugs. We know about them. Reporting this\n+   -- or any other problem that's already been fixed -- hinders the\n+   development of GCC, because we have to take time to respond to your\n    report. Thank you.\n \n 4.1 What works already?\n@@ -340,8 +401,8 @@ New:\n \n 4.2 Bugs in gcc/g++ (not libstdc++-v3)\n \n-   This  is by no means meant to be complete nor exhaustive, but mentions\n-   some  problems  that  users  may  encounter  when  building  or  using\n+   This is by no means meant to be complete nor exhaustive, but mentions\n+   some problems that users may encounter when building or using\n    libstdc++. If you are experiencing one of these problems, you can find\n    more information on the libstdc++ and the GCC mailing lists.\n      * As of 2.91, these bugs have all been fixed. We look forward to new\n@@ -350,34 +411,34 @@ New:\n \n 4.3 Bugs in the C++ language/lib specification\n \n-   Yes,  unfortunately,  there  are  some.  In a [62]message to the list,\n-   Nathan  Myers  announced that he has started a list of problems in the\n-   ISO  C++  Standard itself, especially with regard to the chapters that\n-   concern  the  library.  The  list itself is [63]posted on his website.\n-   Developers  who are having problems interpreting the Standard may wish\n+   Yes, unfortunately, there are some. In a [65]message to the list,\n+   Nathan Myers announced that he has started a list of problems in the\n+   ISO C++ Standard itself, especially with regard to the chapters that\n+   concern the library. The list itself is [66]posted on his website.\n+   Developers who are having problems interpreting the Standard may wish\n    to consult his notes.\n \n-   For  those  people  who  are  not part of the ISO Library Group (i.e.,\n-   nearly  all  of us needing to read this page in the first place :-), a\n-   public list of the library defects is occasionally published [64]here.\n-   Some of these have resulted in [65]code changes.\n+   For those people who are not part of the ISO Library Group (i.e.,\n+   nearly all of us needing to read this page in the first place :-), a\n+   public list of the library defects is occasionally published [67]here.\n+   Some of these have resulted in [68]code changes.\n      _________________________________________________________________\n \n 4.4 Things in libstdc++ that look like bugs\n \n-   There  are  things  which  are  not bugs in the compiler (4.2) nor the\n-   language  specification  (4.3),  but  aren't really bugs in libstdc++,\n+   There are things which are not bugs in the compiler (4.2) nor the\n+   language specification (4.3), but aren't really bugs in libstdc++,\n    either. Really! Please do not report these as bugs.\n \n-   -Weffc++  The  biggest  of these is the quadzillions of warnings about\n-   the  library  headers  emitted when -Weffc++ is used. Making libstdc++\n-   \"-Weffc++-clean\"  is  not  a  goal  of the project, for a few reasons.\n-   Mainly,  that  option  tries  to  enforce object-oriented programming,\n-   while  the  Standard  Library isn't necessarily trying to be OO. There\n+   -Weffc++ The biggest of these is the quadzillions of warnings about\n+   the library headers emitted when -Weffc++ is used. Making libstdc++\n+   \"-Weffc++-clean\" is not a goal of the project, for a few reasons.\n+   Mainly, that option tries to enforce object-oriented programming,\n+   while the Standard Library isn't necessarily trying to be OO. There\n    are multiple solutions under discussion.\n \n-   reopening  a stream fails Did I just say that -Weffc++ was our biggest\n-   false-bug  report?  I  lied.  (It  used  to  be.) Today it seems to be\n+   reopening a stream fails Did I just say that -Weffc++ was our biggest\n+   false-bug report? I lied. (It used to be.) Today it seems to be\n    reports that after executing a sequence like\n     #include <fstream>\n     ...\n@@ -388,40 +449,40 @@ New:\n     fs.close();\n     fs.open(\"a_new_file\");\n \n-   all  operations  on  the  re-opened fs will fail, or at least act very\n-   strangely.  Yes,  they  often  will,  especially if fs reached the EOF\n+   all operations on the re-opened fs will fail, or at least act very\n+   strangely. Yes, they often will, especially if fs reached the EOF\n    state on the previous file. The reason is that the state flags are not\n    cleared on a successful call to open(). The standard unfortunately did\n-   not  specify  behavior  in this case, and to everybody's great sorrow,\n-   the  [66]proposed  LWG  resolution  (see DR #22) is to leave the flags\n-   unchanged.  You  must insert a call to fs.clear() between the calls to\n-   close()  and  open(), and then everything will work like we all expect\n+   not specify behavior in this case, and to everybody's great sorrow,\n+   the [69]proposed LWG resolution (see DR #22) is to leave the flags\n+   unchanged. You must insert a call to fs.clear() between the calls to\n+   close() and open(), and then everything will work like we all expect\n    it to work.\n \n-   rel_ops  Another  is the rel_ops namespace and the template comparison\n-   operator  functions  contained  therein. If they become visible in the\n-   same  namespace  as other comparison functions (e.g., 'using' them and\n-   the  <iterator>  header),  then  you  will suddenly be faced with huge\n-   numbers  of  ambiguity  errors.  This  was  discussed on the -v3 list;\n-   Nathan Myers [67]sums things up here.\n+   rel_ops Another is the rel_ops namespace and the template comparison\n+   operator functions contained therein. If they become visible in the\n+   same namespace as other comparison functions (e.g., 'using' them and\n+   the <iterator> header), then you will suddenly be faced with huge\n+   numbers of ambiguity errors. This was discussed on the -v3 list;\n+   Nathan Myers [70]sums things up here.\n \n   The g++-3 headers are not ours\n \n-   If  you  have  found  an extremely broken header file which is causing\n-   problems  for  you, look carefully before submitting a \"high\" priority\n-   bug  report  (which  you  probably  shouldn't  do anyhow; see the last\n-   paragraph of the page describing [68]the GCC bug database).\n+   If you have found an extremely broken header file which is causing\n+   problems for you, look carefully before submitting a \"high\" priority\n+   bug report (which you probably shouldn't do anyhow; see the last\n+   paragraph of the page describing [71]the GCC bug database).\n \n-   If  the headers are in ${prefix}/include/g++-3, then you are using the\n-   old  libstdc++-v2  library,  which is nonstandard and unmaintained. Do\n+   If the headers are in ${prefix}/include/g++-3, then you are using the\n+   old libstdc++-v2 library, which is nonstandard and unmaintained. Do\n    not report problems with -v2 to the -v3 mailing list.\n \n-   Currently  our  header files are installed in ${prefix}/include/g++-v3\n-   (see  the  'v'?).  This may change with the next release of GCC, as it\n-   may be too confusing, but [69]the question has not yet been decided.\n+   Currently our header files are installed in ${prefix}/include/g++-v3\n+   (see the 'v'?). This may change with the next release of GCC, as it\n+   may be too confusing, but [72]the question has not yet been decided.\n \n-   glibc  If you're on a GNU/Linux system and have just upgraded to glibc\n-   2.2,  but  are  still  using gcc 2.95.2, then you should have read the\n+   glibc If you're on a GNU/Linux system and have just upgraded to glibc\n+   2.2, but are still using gcc 2.95.2, then you should have read the\n    glibc FAQ, specifically 2.34:\n 2.34.   When compiling C++ programs, I get a compilation error in streambuf.h.\n \n@@ -431,98 +492,98 @@ type has changed in glibc 2.2.  The patch is at\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n \n-   Note  that  2.95.x  shipped  with  the  [70]old v2 library which is no\n-   longer  maintained.  Also note that gcc 2.95.3 fixes this problem, but\n+   Note that 2.95.x shipped with the [73]old v2 library which is no\n+   longer maintained. Also note that gcc 2.95.3 fixes this problem, but\n    requires a separate patch for libstdc++-v3.\n \n    concept checks If you see compilation errors containing messages about\n-   fooConcept  and  a  constraints  member function, then most likely you\n-   have   violated   one  of  the  requirements  for  types  used  during\n-   instantiation  of  template  containers  and  functions.  For example,\n-   EqualityComparableConcept  appears  if  your  types must be comparable\n-   with  ==  and  you have not provided this capability (a typo, or wrong\n+   fooConcept and a constraints member function, then most likely you\n+   have violated one of the requirements for types used during\n+   instantiation of template containers and functions. For example,\n+   EqualityComparableConcept appears if your types must be comparable\n+   with == and you have not provided this capability (a typo, or wrong\n    visibility, or you just plain forgot, etc).\n \n-   More  information,  including  how  to  optionally  enable/disable the\n-   checks, is available [71]here.\n+   More information, including how to optionally enable/disable the\n+   checks, is available [74]here.\n      _________________________________________________________________\n \n 4.5 Aw, that's easy to fix!\n \n-   If  you  have  found  a  bug  in  the library and you think you have a\n-   working  fix,  then  send  it  in!  The  main  GCC  site has a page on\n-   [72]submitting  patches  that  covers the procedure, but for libstdc++\n-   you  should also send the patch to our mailing list in addition to the\n-   GCC  patches  mailing  list. The libstdc++ [73]contributors' page also\n+   If you have found a bug in the library and you think you have a\n+   working fix, then send it in! The main GCC site has a page on\n+   [75]submitting patches that covers the procedure, but for libstdc++\n+   you should also send the patch to our mailing list in addition to the\n+   GCC patches mailing list. The libstdc++ [76]contributors' page also\n    talks about how to submit patches.\n \n    In addition to the description, the patch, and the ChangeLog entry, it\n    is a Good Thing if you can additionally create a small test program to\n-   test  for  the  presence of the bug that your patch fixes. Bugs have a\n-   way  of  being  reintroduced; if an old bug creeps back in, it will be\n-   caught  immediately  by  the  [74]testsuite -- but only if such a test\n+   test for the presence of the bug that your patch fixes. Bugs have a\n+   way of being reintroduced; if an old bug creeps back in, it will be\n+   caught immediately by the [77]testsuite -- but only if such a test\n    exists.\n      _________________________________________________________________\n \n                                5.0 Miscellaneous\n \n 5.1 string::iterator is not char*; vector<T>::iterator is not T*\n \n-   If  you  have  code  that  depends  on  container<T>  iterators  being\n+   If you have code that depends on container<T> iterators being\n    implemented as pointer-to-T, your code is broken.\n \n-   While  there  are  arguments  for  iterators to be implemented in that\n-   manner,  A)  they  aren't very good ones in the long term, and B) they\n+   While there are arguments for iterators to be implemented in that\n+   manner, A) they aren't very good ones in the long term, and B) they\n    were never guaranteed by the Standard anyway. The type-safety achieved\n-   by  making  iterators  a  real  class  rather  than  a  typedef for T*\n+   by making iterators a real class rather than a typedef for T*\n    outweighs nearly all opposing arguments.\n \n    Code which does assume that a vector iterator i is a pointer can often\n-   be  fixed  by  changing  i  in  certain  expressions  to  &*i . Future\n-   revisions  of  the  Standard  are  expected  to  bless  this usage for\n+   be fixed by changing i in certain expressions to &*i . Future\n+   revisions of the Standard are expected to bless this usage for\n    vector<> (but not for basic_string<>).\n      _________________________________________________________________\n \n 5.2 What's next after libstdc++-v3?\n \n-   Hopefully,  not  much.  The  goal  of  libstdc++-v3  is  to  produce a\n-   fully-compliant,  fully-portable  Standard  Library. After that, we're\n+   Hopefully, not much. The goal of libstdc++-v3 is to produce a\n+   fully-compliant, fully-portable Standard Library. After that, we're\n    mostly done: there won't be any more compliance work to do. However:\n-    1. The  ISO Committee will meet periodically to review Defect Reports\n-       in  the  C++  Standard.  Undoubtedly  some of these will result in\n-       changes  to  the  Standard,  which will be reflected in patches to\n-       libstdc++.  Some  of  that  is already happening, see 4.2. Some of\n-       those  changes are being predicted by the library maintainers, and\n-       we  add  code  to  the  library based on what the current proposed\n-       resolution  specifies.  Those  additions  are  listed  in  [75]the\n+    1. The ISO Committee will meet periodically to review Defect Reports\n+       in the C++ Standard. Undoubtedly some of these will result in\n+       changes to the Standard, which will be reflected in patches to\n+       libstdc++. Some of that is already happening, see 4.2. Some of\n+       those changes are being predicted by the library maintainers, and\n+       we add code to the library based on what the current proposed\n+       resolution specifies. Those additions are listed in [78]the\n        extensions page.\n-    2. Performance  tuning.  Lots  of  performance  tuning.  This  too is\n-       already  underway  for  post-3.0  releases,  starting  with memory\n-       expansion  in  container  classes and buffer usage in synchronized\n+    2. Performance tuning. Lots of performance tuning. This too is\n+       already underway for post-3.0 releases, starting with memory\n+       expansion in container classes and buffer usage in synchronized\n        stream objects.\n-    3. An  ABI  for  libstdc++  will  eventually  be  developed,  so that\n+    3. An ABI for libstdc++ will eventually be developed, so that\n        multiple binary-incompatible copies of the library can be replaced\n        with a single backwards-compatible library, like libgcc_s.so is.\n-    4. The  current  libstdc++  contains  extensions to the Library which\n+    4. The current libstdc++ contains extensions to the Library which\n        must be explicitly requested by client code (for example, the hash\n        tables from SGI). Other extensions may be added to libstdc++-v3 if\n-       they  seem  to be \"standard\" enough. (For example, the \"long long\"\n-       type  from  C99.)  Bugfixes and rewrites (to improve or fix thread\n+       they seem to be \"standard\" enough. (For example, the \"long long\"\n+       type from C99.) Bugfixes and rewrites (to improve or fix thread\n        safety, for instance) will of course be a continuing task.\n \n-   [76]This  question  about  the  next libstdc++ prompted some brief but\n-   interesting [77]speculation.\n+   [79]This question about the next libstdc++ prompted some brief but\n+   interesting [80]speculation.\n      _________________________________________________________________\n \n 5.3 What about the STL from SGI?\n \n-   The  [78]STL  from  SGI, version 3.3, was the most recent merge of the\n-   STL  codebase.  The code in libstdc++ contains many fixes and changes,\n-   and  it  is  very  likely  that the SGI code is no longer under active\n+   The [81]STL from SGI, version 3.3, was the most recent merge of the\n+   STL codebase. The code in libstdc++ contains many fixes and changes,\n+   and it is very likely that the SGI code is no longer under active\n    development. We expect that no future merges will take place.\n \n    In particular, string is not from SGI and makes no use of their \"rope\"\n-   class  (which  is  included as an optional extension), nor is valarray\n+   class (which is included as an optional extension), nor is valarray\n    and some others. Classes like vector<> are, however.\n \n    The FAQ for SGI's STL (one jump off of their main page) is recommended\n@@ -531,31 +592,31 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n 5.4 Extensions and Backward Compatibility\n \n-   Although  you  can  specify -I options to make the preprocessor search\n-   the  g++-v3/ext  and  /backward  directories, it is better to refer to\n+   Although you can specify -I options to make the preprocessor search\n+   the g++-v3/ext and /backward directories, it is better to refer to\n    files there by their path, as in:\n        #include <ext/hash_map>\n \n \n-   Extensions to the library have [79]their own page.\n+   Extensions to the library have [82]their own page.\n      _________________________________________________________________\n \n 5.5 [removed]\n \n-   This  question  has become moot and has been removed. The stub is here\n+   This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 5.6 Is libstdc++-v3 thread-safe?\n \n-   When   the   system's   libc  is  itself  thread-safe,  a  non-generic\n-   implementation  of  atomicity.h  exists  for the architecture, and gcc\n-   itself  reports a thread model other than single; libstdc++-v3 strives\n-   to  be thread-safe. The user-code must guard against concurrent method\n-   calls   which  may  access  any  particular  library  object's  state.\n+   When the system's libc is itself thread-safe, a non-generic\n+   implementation of atomicity.h exists for the architecture, and gcc\n+   itself reports a thread model other than single; libstdc++-v3 strives\n+   to be thread-safe. The user-code must guard against concurrent method\n+   calls which may access any particular library object's state.\n    Typically, the application programmer may infer what object locks must\n-   be  held  based  on  the  objects referenced in a method call. Without\n-   getting   into  great  detail,  here  is  an  example  which  requires\n+   be held based on the objects referenced in a method call. Without\n+   getting into great detail, here is an example which requires\n    user-level locks:\n      library_class_a shared_object_a;\n \n@@ -569,8 +630,8 @@ a\n \n      // Multiple copies of thread_main() are started in independent threads.\n \n-   Under  the  assumption that object_a and object_b are never exposed to\n-   another  thread,  here  is  an  example  that  should  not require any\n+   Under the assumption that object_a and object_b are never exposed to\n+   another thread, here is an example that should not require any\n    user-level locks:\n      thread_main () {\n        library_class_a object_a;\n@@ -581,32 +642,32 @@ a\n \n    All library objects are safe to use in a multithreaded program as long\n    as each thread carefully locks out access by any other thread while it\n-   uses  any  object visible to another thread. This requirement includes\n-   both  read and write access to objects; do not assume that two threads\n+   uses any object visible to another thread. This requirement includes\n+   both read and write access to objects; do not assume that two threads\n    may read a shared standard container at the same time.\n \n-   See  chapters  [80]17 (library introduction), [81]23 (containers), and\n-   [82]27 (I/O) for more information.\n+   See chapters [83]17 (library introduction), [84]23 (containers), and\n+   [85]27 (I/O) for more information.\n      _________________________________________________________________\n \n 5.7 How do I get a copy of the ISO C++ Standard?\n \n-   Copies  of  the  full ISO 14882 standard are available on line via the\n-   ISO  mirror site for committee members. Non-members, or those who have\n-   not  paid  for the privilege of sitting on the committee and sustained\n-   their  two-meeting commitment for voting rights, may get a copy of the\n+   Copies of the full ISO 14882 standard are available on line via the\n+   ISO mirror site for committee members. Non-members, or those who have\n+   not paid for the privilege of sitting on the committee and sustained\n+   their two-meeting commitment for voting rights, may get a copy of the\n    standard from their respective national standards organization. In the\n    USA, this national standards organization is ANSI and their website is\n-   right  [83]here. (And if you've already registered with them, clicking\n-   this link will take you to directly to the place where you can [84]buy\n+   right [86]here. (And if you've already registered with them, clicking\n+   this link will take you to directly to the place where you can [87]buy\n    the standard on-line.\n \n-   Who is your country's member body? Visit the [85]ISO homepage and find\n+   Who is your country's member body? Visit the [88]ISO homepage and find\n    out!\n      _________________________________________________________________\n \n-   See  [86]license.html for copying conditions. Comments and suggestions\n-   are welcome, and may be sent to [87]the libstdc++ mailing list. \n+   See [89]license.html for copying conditions. Comments and suggestions\n+   are welcome, and may be sent to [90]the libstdc++ mailing list. \n \n References\n \n@@ -627,73 +688,76 @@ References\n   15. ../faq/index.html#2_2\n   16. ../faq/index.html#2_3\n   17. ../faq/index.html#2_4\n-  18. ../faq/index.html#3_0\n-  19. ../faq/index.html#3_1\n-  20. ../faq/index.html#3_2\n-  21. ../faq/index.html#3_3\n-  22. ../faq/index.html#4_0\n-  23. ../faq/index.html#4_1\n-  24. ../faq/index.html#4_2\n-  25. ../faq/index.html#4_3\n-  26. ../faq/index.html#4_4\n-  27. ../faq/index.html#4_4_iostreamclear\n-  28. ../faq/index.html#4_4_Weff\n-  29. ../faq/index.html#4_4_rel_ops\n-  30. ../faq/index.html#4_4_interface\n-  31. ../faq/index.html#4_4_glibc\n-  32. ../faq/index.html#4_4_checks\n-  33. ../faq/index.html#4_5\n-  34. ../faq/index.html#5_0\n-  35. ../faq/index.html#5_1\n-  36. ../faq/index.html#5_2\n-  37. ../faq/index.html#5_3\n-  38. ../faq/index.html#5_4\n-  39. ../faq/index.html#5_5\n-  40. ../faq/index.html#5_6\n-  41. ../faq/index.html#5_7\n-  42. http://gcc.gnu.org/libstdc++/download.html\n-  43. ../17_intro/DESIGN\n-  44. http://gcc.gnu.org/\n-  45. http://gcc.gnu.org/gcc-2.95/buildstat.html\n-  46. http://gcc.gnu.org/libstdc++/\n-  47. http://gcc.gnu.org/libstdc++/download.html\n+  18. ../faq/index.html#2_5\n+  19. ../faq/index.html#3_0\n+  20. ../faq/index.html#3_1\n+  21. ../faq/index.html#3_2\n+  22. ../faq/index.html#3_3\n+  23. ../faq/index.html#3_4\n+  24. ../faq/index.html#4_0\n+  25. ../faq/index.html#4_1\n+  26. ../faq/index.html#4_2\n+  27. ../faq/index.html#4_3\n+  28. ../faq/index.html#4_4\n+  29. ../faq/index.html#4_4_iostreamclear\n+  30. ../faq/index.html#4_4_Weff\n+  31. ../faq/index.html#4_4_rel_ops\n+  32. ../faq/index.html#4_4_interface\n+  33. ../faq/index.html#4_4_glibc\n+  34. ../faq/index.html#4_4_checks\n+  35. ../faq/index.html#4_5\n+  36. ../faq/index.html#5_0\n+  37. ../faq/index.html#5_1\n+  38. ../faq/index.html#5_2\n+  39. ../faq/index.html#5_3\n+  40. ../faq/index.html#5_4\n+  41. ../faq/index.html#5_5\n+  42. ../faq/index.html#5_6\n+  43. ../faq/index.html#5_7\n+  44. http://gcc.gnu.org/libstdc++/download.html\n+  45. ../17_intro/DESIGN\n+  46. http://gcc.gnu.org/\n+  47. http://gcc.gnu.org/gcc-2.95/buildstat.html\n   48. http://gcc.gnu.org/libstdc++/\n-  49. ../17_intro/contribute.html\n-  50. http://www.boost.org/\n-  51. http://gcc.gnu.org/fom_serv/cache/33.html\n-  52. mailto:libstdc++@gcc.gnu.org\n-  53. mailto:pme@gcc.gnu.org\n-  54. mailto:gdr@gcc.gnu.org\n-  55. ../17_intro/license.html\n-  56. ../documentation.html\n-  57. ../17_intro/RELEASE-NOTES\n-  58. http://www.gnu.org/software/cvs/cvs.html\n-  59. http://www.cvshome.org/\n-  60. http://gcc.gnu.org/ml/libstdc++/2000-12/msg00279.html\n-  61. http://gcc.gnu.org/install/configure.html\n-  62. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n-  63. http://www.cantrip.org/draft-bugs.txt\n-  64. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n-  65. ../faq/index.html#5_2\n-  66. ../ext/howto.html#5\n-  67. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n-  68. http://gcc.gnu.org/gnatswrite.html\n-  69. http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\n-  70. ../faq/index.html#4_4_interface\n-  71. ../19_diagnostics/howto.html#3\n-  72. http://gcc.gnu.org/contribute.html\n-  73. ../17_intro/contribute.html\n-  74. ../faq/index.html#2_4\n-  75. ../ext/howto.html#5\n-  76. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n-  77. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n-  78. http://www.sgi.com/Technology/STL/\n-  79. ../ext/howto.html\n-  80. ../17_intro/howto.html#3\n-  81. ../23_containers/howto.html#3\n-  82. ../27_io/howto.html#9\n-  83. http://www.ansi.org/\n-  84. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n-  85. http://www.iso.ch/\n-  86. ../17_intro/license.html\n-  87. mailto:libstdc++@gcc.gnu.org\n+  49. http://gcc.gnu.org/libstdc++/download.html\n+  50. http://gcc.gnu.org/libstdc++/\n+  51. ../17_intro/contribute.html\n+  52. http://www.boost.org/\n+  53. http://gcc.gnu.org/fom_serv/cache/33.html\n+  54. mailto:libstdc++@gcc.gnu.org\n+  55. mailto:pme@gcc.gnu.org\n+  56. mailto:gdr@gcc.gnu.org\n+  57. ../17_intro/license.html\n+  58. ../documentation.html\n+  59. ../17_intro/RELEASE-NOTES\n+  60. http://www.gnu.org/software/cvs/cvs.html\n+  61. http://www.cvshome.org/\n+  62. ../18_support/howto.html\n+  63. http://gcc.gnu.org/ml/libstdc++/2000-12/msg00279.html\n+  64. http://gcc.gnu.org/install/configure.html\n+  65. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n+  66. http://www.cantrip.org/draft-bugs.txt\n+  67. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n+  68. ../faq/index.html#5_2\n+  69. ../ext/howto.html#5\n+  70. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n+  71. http://gcc.gnu.org/gnatswrite.html\n+  72. http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\n+  73. ../faq/index.html#4_4_interface\n+  74. ../19_diagnostics/howto.html#3\n+  75. http://gcc.gnu.org/contribute.html\n+  76. ../17_intro/contribute.html\n+  77. ../faq/index.html#2_4\n+  78. ../ext/howto.html#5\n+  79. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n+  80. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n+  81. http://www.sgi.com/Technology/STL/\n+  82. ../ext/howto.html\n+  83. ../17_intro/howto.html#3\n+  84. ../23_containers/howto.html#3\n+  85. ../27_io/howto.html#9\n+  86. http://www.ansi.org/\n+  87. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n+  88. http://www.iso.ch/\n+  89. ../17_intro/license.html\n+  90. mailto:libstdc++@gcc.gnu.org"}]}