{"sha": "cb42ba5d667142c60c27fadd8efba35e0e18e797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0MmJhNWQ2NjcxNDJjNjBjMjdmYWRkOGVmYmEzNWUwZTE4ZTc5Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:40:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:40:05Z"}, "message": "[multiple changes]\n\n2012-10-02  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Expon): Use expression with actions\n\tfor x ** 4.\n\n2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb: (Analyze_Iterator_Specification): If container\n\thas a variable indexing aspect, the element is a variable and\n\tis modifiable in the loop. This check is also performed when the\n\tloop is expanded, but it must be done in semantic analysis when\n\texpansion is disabled, for example for ASIS usage.\n\n2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): If a child subprogram\n\thas no previous spec, treat a reference to its formals (such\n\tas a parameter association) as coming from source in order to\n\tgenerate the proper references and enable gps navigation between\n\treference and declaration.\n\nFrom-SVN: r191965", "tree": {"sha": "946ac23df94fe9dbd7c7c0d71ada9bf73e8b54f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946ac23df94fe9dbd7c7c0d71ada9bf73e8b54f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb42ba5d667142c60c27fadd8efba35e0e18e797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb42ba5d667142c60c27fadd8efba35e0e18e797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb42ba5d667142c60c27fadd8efba35e0e18e797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb42ba5d667142c60c27fadd8efba35e0e18e797/comments", "author": null, "committer": null, "parents": [{"sha": "4b1c4f20d84963a47ed6c12ea564488c0b224655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1c4f20d84963a47ed6c12ea564488c0b224655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1c4f20d84963a47ed6c12ea564488c0b224655"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "b93836e904d73da3d5aa92bf807643d45c548278", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cb42ba5d667142c60c27fadd8efba35e0e18e797", "patch": "@@ -1,3 +1,24 @@\n+2012-10-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Expon): Use expression with actions\n+\tfor x ** 4.\n+\n+2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb: (Analyze_Iterator_Specification): If container\n+\thas a variable indexing aspect, the element is a variable and\n+\tis modifiable in the loop. This check is also performed when the\n+\tloop is expanded, but it must be done in semantic analysis when\n+\texpansion is disabled, for example for ASIS usage.\n+\n+2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): If a child subprogram\n+\thas no previous spec, treat a reference to its formals (such\n+\tas a parameter association) as coming from source in order to\n+\tgenerate the proper references and enable gps navigation between\n+\treference and declaration.\n+\n 2012-10-02  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb (Apply_Arithmetic_Overflow_Checked_Suppressed):"}, {"sha": "ece60efa52c1bf570cb863897bead5658ce04334", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=cb42ba5d667142c60c27fadd8efba35e0e18e797", "patch": "@@ -7242,11 +7242,11 @@ package body Exp_Ch4 is\n       Exptyp : constant Entity_Id  := Etype (Exp);\n       Ovflo  : constant Boolean    := Do_Overflow_Check (N);\n       Expv   : Uint;\n-      Xnode  : Node_Id;\n       Temp   : Node_Id;\n       Rent   : RE_Id;\n       Ent    : Entity_Id;\n       Etyp   : Entity_Id;\n+      Xnode  : Node_Id;\n \n    begin\n       Binary_Op_Validity_Checks (N);\n@@ -7301,7 +7301,8 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  Test for case of known right argument\n+      --  Test for case of known right argument where we can replace the\n+      --  exponentiation by an equivalent expression using multiplication.\n \n       if Compile_Time_Known_Value (Exp) then\n          Expv := Expr_Value (Exp);\n@@ -7355,27 +7356,34 @@ package body Exp_Ch4 is\n                    Right_Opnd  => Duplicate_Subexpr_No_Checks (Base));\n \n             --  X ** 4  ->\n+\n+            --  do\n             --    En : constant base'type := base * base;\n-            --    ...\n+            --  in\n             --    En * En\n \n-            else -- Expv = 4\n+            else\n+               pragma Assert (Expv = 4);\n                Temp := Make_Temporary (Loc, 'E', Base);\n \n-               Insert_Actions (N, New_List (\n-                 Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Temp,\n-                   Constant_Present    => True,\n-                   Object_Definition   => New_Reference_To (Typ, Loc),\n+               Xnode :=\n+                 Make_Expression_With_Actions (Loc,\n+                   Actions    => New_List (\n+                     Make_Object_Declaration (Loc,\n+                       Defining_Identifier => Temp,\n+                       Constant_Present    => True,\n+                       Object_Definition   => New_Reference_To (Typ, Loc),\n+                       Expression =>\n+                         Make_Op_Multiply (Loc,\n+                           Left_Opnd  =>\n+                             Duplicate_Subexpr (Base),\n+                           Right_Opnd =>\n+                             Duplicate_Subexpr_No_Checks (Base)))),\n+\n                    Expression =>\n                      Make_Op_Multiply (Loc,\n-                       Left_Opnd  => Duplicate_Subexpr (Base),\n-                       Right_Opnd => Duplicate_Subexpr_No_Checks (Base)))));\n-\n-               Xnode :=\n-                 Make_Op_Multiply (Loc,\n-                   Left_Opnd  => New_Reference_To (Temp, Loc),\n-                   Right_Opnd => New_Reference_To (Temp, Loc));\n+                       Left_Opnd  => New_Reference_To (Temp, Loc),\n+                       Right_Opnd => New_Reference_To (Temp, Loc)));\n             end if;\n \n             Rewrite (N, Xnode);"}, {"sha": "aa9031f835ca6b1d71ae73b7fec3632141c62437", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=cb42ba5d667142c60c27fadd8efba35e0e18e797", "patch": "@@ -945,6 +945,13 @@ package body Lib.Xref is\n          then\n             Ent := E;\n \n+         --  Ditto for the formals of such a subprogram\n+\n+         elsif Is_Overloadable (Scope (E))\n+           and then Is_Child_Unit (Scope (E))\n+         then\n+            Ent := E;\n+\n          --  Record components of discriminated subtypes or derived types must\n          --  be treated as references to the original component.\n "}, {"sha": "f756dbcaf5d3bbff13681a5ebbd2b61e48435d47", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb42ba5d667142c60c27fadd8efba35e0e18e797/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=cb42ba5d667142c60c27fadd8efba35e0e18e797", "patch": "@@ -1808,6 +1808,13 @@ package body Sem_Ch5 is\n                   return;\n                else\n                   Set_Etype (Def_Id, Entity (Element));\n+\n+                  --  If the container has a variable indexing aspect, the\n+                  --  element is a variable and is modifiable in the loop.\n+\n+                  if Present (Find_Aspect (Typ, Aspect_Variable_Indexing)) then\n+                     Set_Ekind (Def_Id, E_Variable);\n+                  end if;\n                end if;\n             end;\n "}]}