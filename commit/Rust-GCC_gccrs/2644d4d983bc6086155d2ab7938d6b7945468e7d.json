{"sha": "2644d4d983bc6086155d2ab7938d6b7945468e7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY0NGQ0ZDk4M2JjNjA4NjE1NWQyYWI3OTM4ZDZiNzk0NTQ2OGU3ZA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-06-08T10:11:09Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-06-08T10:11:09Z"}, "message": "[AArch64, 2/6] Reimplement vector fixed-point intrinsics\n\n\t* config/aarch64/aarch64-builtins.def (scvtf): Register vector modes.\n\t(ucvtf): Likewise.\n\t(fcvtzs): Likewise.\n\t(fcvtzu): Likewise.\n\t* config/aarch64/aarch64-simd.md\n\t(<FCVT_F2FIXED:fcvt_fixed_insn><VDQF:mode>3): New.\n\t(<FCVT_FIXED2F:fcvt_fixed_insn><VDQ_SDI:mode>3): Likewise.\n\t* config/aarch64/arm_neon.h (vcvt_n_f32_s32): Remove inline assembly.\n\tUse builtin.\n\t(vcvt_n_f32_u32): Likewise.\n\t(vcvt_n_s32_f32): Likewise.\n\t(vcvt_n_u32_f32): Likewise.\n\t(vcvtq_n_f32_s32): Likewise.\n\t(vcvtq_n_f32_u32): Likewise.\n\t(vcvtq_n_f64_s64): Likewise.\n\t(vcvtq_n_f64_u64): Likewise.\n\t(vcvtq_n_s32_f32): Likewise.\n\t(vcvtq_n_s64_f64): Likewise.\n\t(vcvtq_n_u32_f32): Likewise.\n\t(vcvtq_n_u64_f64): Likewise.\n\t* config/aarch64/iterators.md (VDQ_SDI): New mode iterator.\n\t(VSDQ_SDI): Likewise.\n\t(fcvt_target): Support V4DI, V4SI and V2SI.\n\t(FCVT_TARGET): Likewise.\n\nFrom-SVN: r237201", "tree": {"sha": "f810a51c4e8629ffc913d57bb31d197833aeecdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f810a51c4e8629ffc913d57bb31d197833aeecdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2644d4d983bc6086155d2ab7938d6b7945468e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2644d4d983bc6086155d2ab7938d6b7945468e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2644d4d983bc6086155d2ab7938d6b7945468e7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2644d4d983bc6086155d2ab7938d6b7945468e7d/comments", "author": null, "committer": null, "parents": [{"sha": "3f598afe16222d0b8c8185415c6202e38e73cc2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f598afe16222d0b8c8185415c6202e38e73cc2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f598afe16222d0b8c8185415c6202e38e73cc2d"}], "stats": {"total": 341, "additions": 163, "deletions": 178}, "files": [{"sha": "9f6f3da351db0fb18ca2dfa4905e7c47d0614c73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2644d4d983bc6086155d2ab7938d6b7945468e7d", "patch": "@@ -1,37 +1,64 @@\n 2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n \n-        * config/aarch64/aarch64-builtins.c (TYPES_BINOP_USS): New\n-        (TYPES_BINOP_SUS): Likewise.\n-        (aarch64_simd_builtin_data): Update include file name.\n-        (aarch64_builtins): Likewise.\n-        * config/aarch64/aarch64-simd-builtins.def (scvtf): New entries\n-        for conversion between scalar float-point and fixed-point.\n-        (ucvtf): Likewise.\n-        (fcvtzs): Likewise.\n-        (fcvtzu): Likewise.\n-        * config/aarch64/aarch64.md\n-        (<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3: New\n-        pattern for conversion between scalar float to fixed-pointer.\n-        (<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>: Likewise.\n-        (UNSPEC_FCVTZS): New UNSPEC enumeration.\n-        (UNSPEC_FCVTZU): Likewise.\n-        (UNSPEC_SCVTF): Likewise.\n-        (UNSPEC_UCVTF): Likewise.\n-        * config/aarch64/arm_neon.h (vcvtd_n_f64_s64): Remove inline assembly.\n+\t* config/aarch64/aarch64-builtins.def (scvtf): Register vector modes.\n+\t(ucvtf): Likewise.\n+\t(fcvtzs): Likewise.\n+\t(fcvtzu): Likewise.\n+\t* config/aarch64/aarch64-simd.md\n+\t(<FCVT_F2FIXED:fcvt_fixed_insn><VDQF:mode>3): New.\n+\t(<FCVT_FIXED2F:fcvt_fixed_insn><VDQ_SDI:mode>3): Likewise.\n+\t* config/aarch64/arm_neon.h (vcvt_n_f32_s32): Remove inline assembly.\n+\tUse builtin.\n+\t(vcvt_n_f32_u32): Likewise.\n+\t(vcvt_n_s32_f32): Likewise.\n+\t(vcvt_n_u32_f32): Likewise.\n+\t(vcvtq_n_f32_s32): Likewise.\n+\t(vcvtq_n_f32_u32): Likewise.\n+\t(vcvtq_n_f64_s64): Likewise.\n+\t(vcvtq_n_f64_u64): Likewise.\n+\t(vcvtq_n_s32_f32): Likewise.\n+\t(vcvtq_n_s64_f64): Likewise.\n+\t(vcvtq_n_u32_f32): Likewise.\n+\t(vcvtq_n_u64_f64): Likewise.\n+\t* config/aarch64/iterators.md (VDQ_SDI): New mode iterator.\n+\t(VSDQ_SDI): Likewise.\n+\t(fcvt_target): Support V4DI, V4SI and V2SI.\n+\t(FCVT_TARGET): Likewise.\n+\n+2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (TYPES_BINOP_USS): New\n+\t(TYPES_BINOP_SUS): Likewise.\n+\t(aarch64_simd_builtin_data): Update include file name.\n+\t(aarch64_builtins): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def (scvtf): New entries\n+\tfor conversion between scalar float-point and fixed-point.\n+\t(ucvtf): Likewise.\n+\t(fcvtzs): Likewise.\n+\t(fcvtzu): Likewise.\n+\t* config/aarch64/aarch64.md\n+\t(<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3: New\n+\tpattern for conversion between scalar float to fixed-pointer.\n+\t(<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>: Likewise.\n+\t(UNSPEC_FCVTZS): New UNSPEC enumeration.\n+\t(UNSPEC_FCVTZU): Likewise.\n+\t(UNSPEC_SCVTF): Likewise.\n+\t(UNSPEC_UCVTF): Likewise.\n+\t* config/aarch64/arm_neon.h (vcvtd_n_f64_s64): Remove inline assembly.\n \tUse builtin.\n-        (vcvtd_n_f64_u64): Likewise.\n-        (vcvtd_n_s64_f64): Likewise.\n-        (vcvtd_n_u64_f64): Likewise.\n-        (vcvtd_n_f32_s32): Likewise.\n-        (vcvts_n_f32_u32): Likewise.\n-        (vcvtd_n_s32_f32): Likewise.\n-        (vcvts_n_u32_f32): Likewise.\n-        * config/aarch64/iterators.md (fcvt_target): Support integer to float\n+\t(vcvtd_n_f64_u64): Likewise.\n+\t(vcvtd_n_s64_f64): Likewise.\n+\t(vcvtd_n_u64_f64): Likewise.\n+\t(vcvtd_n_f32_s32): Likewise.\n+\t(vcvts_n_f32_u32): Likewise.\n+\t(vcvtd_n_s32_f32): Likewise.\n+\t(vcvts_n_u32_f32): Likewise.\n+\t* config/aarch64/iterators.md (fcvt_target): Support integer to float\n \tmapping.\n-        (FCVT_TARGET): Likewise.\n-        (FCVT_FIXED2F): New iterator.\n-        (FCVT_F2FIXED): Likewise.\n-        (fcvt_fixed_insn): New define_int_attr.\n+\t(FCVT_TARGET): Likewise.\n+\t(FCVT_FIXED2F): New iterator.\n+\t(FCVT_F2FIXED): Likewise.\n+\t(fcvt_fixed_insn): New define_int_attr.\n \n 2016-06-07  Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "a7ea3c4b8ea7d695b12e6b0291e6ff815826a641", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=2644d4d983bc6086155d2ab7938d6b7945468e7d", "patch": "@@ -447,7 +447,7 @@\n   BUILTIN_VSDQ_HSI (QUADOP_LANE, sqrdmlsh_laneq, 0)\n \n   /* Implemented by <FCVT_F2FIXED/FIXED2F:fcvt_fixed_insn><*><*>3.  */\n-  BUILTIN_GPI (BINOP, scvtf, 3)\n-  BUILTIN_GPI (BINOP_SUS, ucvtf, 3)\n-  BUILTIN_GPF (BINOP, fcvtzs, 3)\n-  BUILTIN_GPF (BINOP_USS, fcvtzu, 3)\n+  BUILTIN_VSDQ_SDI (BINOP, scvtf, 3)\n+  BUILTIN_VSDQ_SDI (BINOP_SUS, ucvtf, 3)\n+  BUILTIN_VALLF (BINOP, fcvtzs, 3)\n+  BUILTIN_VALLF (BINOP_USS, fcvtzu, 3)"}, {"sha": "d2a6cc27de9c571e84cf59713e5fcb9c450f83a3", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=2644d4d983bc6086155d2ab7938d6b7945468e7d", "patch": "@@ -1778,6 +1778,28 @@\n   [(set_attr \"type\" \"neon_fp_cvt_widen_s\")]\n )\n \n+;; Convert between fixed-point and floating-point (vector modes)\n+\n+(define_insn \"<FCVT_F2FIXED:fcvt_fixed_insn><VDQF:mode>3\"\n+  [(set (match_operand:<VDQF:FCVT_TARGET> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VDQF:FCVT_TARGET> [(match_operand:VDQF 1 \"register_operand\" \"w\")\n+\t\t\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t FCVT_F2FIXED))]\n+  \"TARGET_SIMD\"\n+  \"<FCVT_F2FIXED:fcvt_fixed_insn>\\t%<v>0<Vmtype>, %<v>1<Vmtype>, #%2\"\n+  [(set_attr \"type\" \"neon_fp_to_int_<VDQF:Vetype><q>\")]\n+)\n+\n+(define_insn \"<FCVT_FIXED2F:fcvt_fixed_insn><VDQ_SDI:mode>3\"\n+  [(set (match_operand:<VDQ_SDI:FCVT_TARGET> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VDQ_SDI:FCVT_TARGET> [(match_operand:VDQ_SDI 1 \"register_operand\" \"w\")\n+\t\t\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t FCVT_FIXED2F))]\n+  \"TARGET_SIMD\"\n+  \"<FCVT_FIXED2F:fcvt_fixed_insn>\\t%<v>0<Vmtype>, %<v>1<Vmtype>, #%2\"\n+  [(set_attr \"type\" \"neon_int_to_fp_<VDQ_SDI:Vetype><q>\")]\n+)\n+\n ;; ??? Note that the vectorizer usage of the vec_unpacks_[lo/hi] patterns\n ;; is inconsistent with vector ordering elsewhere in the compiler, in that\n ;; the meaning of HI and LO changes depending on the target endianness."}, {"sha": "04bce9ab80c151877619ee75e7cb50f5951099f7", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 72, "deletions": 144, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=2644d4d983bc6086155d2ab7938d6b7945468e7d", "patch": "@@ -6025,150 +6025,6 @@ vaddlvq_u32 (uint32x4_t a)\n        result;                                                          \\\n      })\n \n-#define vcvt_n_f32_s32(a, b)                                            \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x2_t a_ = (a);                                              \\\n-       float32x2_t result;                                              \\\n-       __asm__ (\"scvtf %0.2s, %1.2s, #%2\"                               \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvt_n_f32_u32(a, b)                                            \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x2_t a_ = (a);                                             \\\n-       float32x2_t result;                                              \\\n-       __asm__ (\"ucvtf %0.2s, %1.2s, #%2\"                               \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvt_n_s32_f32(a, b)                                            \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x2_t a_ = (a);                                            \\\n-       int32x2_t result;                                                \\\n-       __asm__ (\"fcvtzs %0.2s, %1.2s, #%2\"                              \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvt_n_u32_f32(a, b)                                            \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x2_t a_ = (a);                                            \\\n-       uint32x2_t result;                                               \\\n-       __asm__ (\"fcvtzu %0.2s, %1.2s, #%2\"                              \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_f32_s32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t a_ = (a);                                              \\\n-       float32x4_t result;                                              \\\n-       __asm__ (\"scvtf %0.4s, %1.4s, #%2\"                               \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_f32_u32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t a_ = (a);                                             \\\n-       float32x4_t result;                                              \\\n-       __asm__ (\"ucvtf %0.4s, %1.4s, #%2\"                               \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_f64_s64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t a_ = (a);                                              \\\n-       float64x2_t result;                                              \\\n-       __asm__ (\"scvtf %0.2d, %1.2d, #%2\"                               \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_f64_u64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64x2_t a_ = (a);                                             \\\n-       float64x2_t result;                                              \\\n-       __asm__ (\"ucvtf %0.2d, %1.2d, #%2\"                               \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_s32_f32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x4_t a_ = (a);                                            \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"fcvtzs %0.4s, %1.4s, #%2\"                              \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_s64_f64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float64x2_t a_ = (a);                                            \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"fcvtzs %0.2d, %1.2d, #%2\"                              \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_u32_f32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x4_t a_ = (a);                                            \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"fcvtzu %0.4s, %1.4s, #%2\"                              \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtq_n_u64_f64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float64x2_t a_ = (a);                                            \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"fcvtzu %0.2d, %1.2d, #%2\"                              \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vcvtx_f32_f64 (float64x2_t a)\n {\n@@ -12760,6 +12616,42 @@ vcvts_n_f32_u32 (uint32_t __a, const int __b)\n   return __builtin_aarch64_ucvtfsi_sus (__a, __b);\n }\n \n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vcvt_n_f32_s32 (int32x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfv2si (__a, __b);\n+}\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vcvt_n_f32_u32 (uint32x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfv2si_sus (__a, __b);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vcvtq_n_f32_s32 (int32x4_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfv4si (__a, __b);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vcvtq_n_f32_u32 (uint32x4_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfv4si_sus (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vcvtq_n_f64_s64 (int64x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfv2di (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vcvtq_n_f64_u64 (uint64x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfv2di_sus (__a, __b);\n+}\n+\n /* vcvt (float -> <u>fixed-point).  */\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n@@ -12786,6 +12678,42 @@ vcvts_n_u32_f32 (float32_t __a, const int __b)\n   return __builtin_aarch64_fcvtzusf_uss (__a, __b);\n }\n \n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vcvt_n_s32_f32 (float32x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzsv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vcvt_n_u32_f32 (float32x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzuv2sf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vcvtq_n_s32_f32 (float32x4_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzsv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vcvtq_n_u32_f32 (float32x4_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzuv4sf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n+vcvtq_n_s64_f64 (float64x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzsv2df (__a, __b);\n+}\n+\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vcvtq_n_u64_f64 (float64x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzuv2df_uss (__a, __b);\n+}\n+\n /* vcvt  (<u>int -> float)  */\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))"}, {"sha": "e8fbb1281dec2e8f37f58ef2ced792dd62e3b5aa", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2644d4d983bc6086155d2ab7938d6b7945468e7d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=2644d4d983bc6086155d2ab7938d6b7945468e7d", "patch": "@@ -154,6 +154,12 @@\n ;; Vector modes for S type.\n (define_mode_iterator VDQ_SI [V2SI V4SI])\n \n+;; Vector modes for S and D\n+(define_mode_iterator VDQ_SDI [V2SI V4SI V2DI])\n+\n+;; Scalar and Vector modes for S and D\n+(define_mode_iterator VSDQ_SDI [V2SI V4SI V2DI SI DI])\n+\n ;; Vector modes for Q and H types.\n (define_mode_iterator VDQQH [V8QI V16QI V4HI V8HI])\n \n@@ -649,8 +655,10 @@\n   [(QI \"b\") (HI \"h\") (SI \"\") (DI \"\")])\n \n (define_mode_attr fcvt_target [(V2DF \"v2di\") (V4SF \"v4si\") (V2SF \"v2si\")\n+\t\t\t       (V2DI \"v2df\") (V4SI \"v4sf\") (V2SI \"v2sf\")\n \t\t\t       (SF \"si\") (DF \"di\") (SI \"sf\") (DI \"df\")])\n (define_mode_attr FCVT_TARGET [(V2DF \"V2DI\") (V4SF \"V4SI\") (V2SF \"V2SI\")\n+\t\t\t       (V2DI \"V2DF\") (V4SI \"V4SF\") (V2SI \"V2SF\")\n \t\t\t       (SF \"SI\") (DF \"DI\") (SI \"SF\") (DI \"DF\")])\n \n "}]}