{"sha": "f3692274cb0ccbd2930de5a9c10901e4da531e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2OTIyNzRjYjBjY2JkMjkzMGRlNWE5YzEwOTAxZTRkYTUzMWUwMA==", "commit": {"author": {"name": "Mark Elbrecht", "email": "snowball3@usa.net", "date": "1999-03-24T23:35:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-24T23:35:34Z"}, "message": "system.h (STDIN_FILENO): Provide default definition if one is not provided by the system header files.\n\n        * system.h (STDIN_FILENO): Provide default definition if one is not\n        provided by the system header files.\n        (STDOUT_FILENO, STDERR_FILENO): Likewise.\n        * i386/xm-djgpp.h (COLLECT2_HOST_INITIALIZATION): New macro.\n        * collect2.c (main): Use it.\n        (pexecute_pid): New variable. Holds return value from call to pexecute.\n        (collect2_execute): Rework to use pexecute instead of fork.\n        (collect2_wait): Use pwait() instead of wait().\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r25960", "tree": {"sha": "479786bd47a0234a2321c522b6d2deb3274a26b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/479786bd47a0234a2321c522b6d2deb3274a26b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3692274cb0ccbd2930de5a9c10901e4da531e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3692274cb0ccbd2930de5a9c10901e4da531e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3692274cb0ccbd2930de5a9c10901e4da531e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3692274cb0ccbd2930de5a9c10901e4da531e00/comments", "author": null, "committer": null, "parents": [{"sha": "cc33944a7a4ad12e11ce9e278f028be948189575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc33944a7a4ad12e11ce9e278f028be948189575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc33944a7a4ad12e11ce9e278f028be948189575"}], "stats": {"total": 93, "additions": 75, "deletions": 18}, "files": [{"sha": "879e7a52ca33b6e8e504639c2f554324a44c253c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3692274cb0ccbd2930de5a9c10901e4da531e00", "patch": "@@ -5,7 +5,18 @@ Tue Mar 23 15:45:25 1999  Richard Earnshaw (rearnsha@arm.com)\n \tas we know the type.  Remove now unnecessary set of orig_type for\n \tconversions.\n \n-Wed Mar 24 23:27:25 1999  Mark Elbrecht  <snowball3@usa.net.\n+Wed Mar 24 23:27:25 1999  Mark Elbrecht  <snowball3@usa.net>\n+\t\t\t  Jeff Law <law@cygnus.com>\n+\n+\t* system.h (STDIN_FILENO): Provide default definition if one is not\n+\tprovided by the system header files.\n+\t(STDOUT_FILENO, STDERR_FILENO): Likewise.\n+\n+\t* i386/xm-djgpp.h (COLLECT2_HOST_INITIALIZATION): New macro.\n+\t* collect2.c (main): Use it.\n+\t(pexecute_pid): New variable. Holds return value from call to pexecute.\n+\t(collect2_execute): Rework to use pexecute instead of fork.\n+\t(collect2_wait): Use pwait() instead of wait().\n \n \t* i386/djgpp.h: Fix typo.\n "}, {"sha": "2f31d94138bd82ec8de67b0b22e368b2f2ed3f5e", "filename": "gcc/collect2.c", "status": "modified", "additions": 46, "deletions": 17, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=f3692274cb0ccbd2930de5a9c10901e4da531e00", "patch": "@@ -225,6 +225,9 @@ struct obstack temporary_obstack;\n struct obstack permanent_obstack;\n char * temporary_firstobj;\n \n+/* Holds the return value of pexecute.  */\n+int pexecute_pid;\n+\n /* Defined in the automatically-generated underscore.c.  */\n extern int prepends_underscore;\n \n@@ -999,6 +1002,11 @@ main (argc, argv)\n   int first_file;\n   int num_c_args\t= argc+9;\n \n+#if defined (COLLECT2_HOST_INITIALZATION)\n+  /* Perform system dependant initialization, if neccessary.  */\n+  COLLECT2_HOST_INITIALZATION;\n+#endif\n+\n #ifdef HAVE_LC_MESSAGES\n   setlocale (LC_MESSAGES, \"\");\n #endif\n@@ -1661,7 +1669,7 @@ collect_wait (prog)\n {\n   int status;\n \n-  wait (&status);\n+  pwait (pexecute_pid, &status, 0);\n   if (status)\n     {\n       if (WIFSIGNALED (status))\n@@ -1695,15 +1703,19 @@ do_wait (prog)\n }\n \n \f\n-/* Fork and execute a program, and wait for the reply.  */\n+/* Execute a program, and wait for the reply.  */\n \n void\n collect_execute (prog, argv, redir)\n      char *prog;\n      char **argv;\n      char *redir;\n {\n-  int pid;\n+  char *errmsg_fmt;\n+  char *errmsg_arg;\n+  int redir_handle = -1;\n+  int stdout_save = -1;\n+  int stderr_save = -1;\n \n   if (vflag || debug)\n     {\n@@ -1730,24 +1742,41 @@ collect_execute (prog, argv, redir)\n   if (argv[0] == 0)\n     fatal (\"cannot find `%s'\", prog);\n \n-  pid = vfork ();\n-  if (pid == -1)\n-    fatal_perror (VFORK_STRING);\n+  if (redir)\n+    {\n+      /* Open response file.  */\n+      redir_handle = open (redir, O_WRONLY | O_TRUNC | O_CREAT);\n \n-  if (pid == 0)\t\t\t/* child context */\n+      /* Duplicate the stdout and stderr file handles\n+\t so they can be restored later.  */\n+      stdout_save = dup (STDOUT_FILENO);\n+      if (stdout_save == -1)\n+\tfatal_perror (\"redirecting stdout: %s\", redir);\n+      stderr_save = dup (STDERR_FILENO);\n+      if (stderr_save == -1)\n+\tfatal_perror (\"redirecting stdout: %s\", redir);\n+\n+      /* Redirect stdout & stderr to our response file.  */\n+      dup2 (redir_handle, STDOUT_FILENO);\n+      dup2 (redir_handle, STDERR_FILENO);\n+    }\n+\n+  pexecute_pid = pexecute (argv[0], argv, argv[0], NULL,\n+\t\t\t   &errmsg_fmt, &errmsg_arg,\n+\t\t\t   (PEXECUTE_FIRST | PEXECUTE_LAST | PEXECUTE_SEARCH));\n+\n+  if (redir)\n     {\n-      if (redir)\n-\t{\n-\t  unlink (redir);\n-\t  if (freopen (redir, \"a\", stdout) == NULL)\n-\t    fatal_perror (\"freopen stdout %s\", redir);\n-\t  if (freopen (redir, \"a\", stderr) == NULL)\n-\t    fatal_perror (\"freopen stderr %s\", redir);\n-\t}\n+      /* Restore stdout and stderr to their previous settings.  */\n+      dup2 (stdout_save, STDOUT_FILENO);\n+      dup2 (stderr_save, STDERR_FILENO);\n \n-      execvp (argv[0], argv);\n-      fatal_perror (\"execvp %s\", prog);\n+      /* Close reponse file.  */\n+      close (redir_handle);\n     }\n+\n+ if (pexecute_pid == -1)\n+   fatal_perror (errmsg_fmt, errmsg_arg);\n }\n \n static void"}, {"sha": "de91855f2e70e064208f4f9c63664c1f2d9a561f", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=f3692274cb0ccbd2930de5a9c10901e4da531e00", "patch": "@@ -34,3 +34,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define LIBSTDCXX \"-lstdcxx\"\n \n+/* System dependant initialization for collect2\n+   to tell system() to act like Unix.  */\n+#define COLLECT2_HOST_INITIALIZATION \\\n+  do { __system_flags |= (__system_allow_multiple_cmds\t\t\t\\\n+\t\t          | __system_emulate_chdir); } while (0)\n+"}, {"sha": "7d62ed9cdba2b987e0da1effb5e5bf005019b969", "filename": "gcc/system.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3692274cb0ccbd2930de5a9c10901e4da531e00/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=f3692274cb0ccbd2930de5a9c10901e4da531e00", "patch": "@@ -477,6 +477,17 @@ extern void abort ();\n #define O_NOCTTY 0\n #endif\n \n+/* Define well known filenos if the system does not define them.  */\n+#ifndef STDIN_FILENO\n+# define STDIN_FILENO   0\n+#endif\n+#ifndef STDOUT_FILENO\n+# define STDOUT_FILENO  1\n+#endif\n+#ifndef STDOUT_FILENO\n+# define STDERR_FILENO  2\n+#endif\n+\n /* Get libiberty declarations. */\n #include \"libiberty.h\"\n "}]}