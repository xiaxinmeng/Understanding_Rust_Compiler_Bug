{"sha": "4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4YzBkZWNhNTI3ZmEyOGZjM2MxZWY4ODY3ZjZiOTM0OGRkYTQzMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-04-16T06:18:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-04-16T06:18:47Z"}, "message": "re PR target/6303 (output_operand: invalid expression as operand)\n\n\tPR target/6303\n\t* dwarf2out.c (rtl_for_decl_location): Call ASM_SIMPLIFY_DWARF_ADDR\n\tbefore returning.\n\t* config/i386/i386.c (i386_simplify_dwarf_addr): Simplify @GOT only\n\twhen inside of MEM by eliminating the indirection too.\n\t* config/s390/s390.h (ASM_SIMPLIFY_DWARF_ADDR): Define.\n\t* config/s390/s390.c (s390_simplify_dwarf_addr): New.\n\t* config/s390/s390-protos.h (s390_simplify_dwarf_addr): Add\n\tprototype.\n\n\t* gcc.dg/20020415-1.c: New test.\n\nFrom-SVN: r52358", "tree": {"sha": "b6cc3f213dc4555253d6e1f91a6f9b0fbb0649df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6cc3f213dc4555253d6e1f91a6f9b0fbb0649df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9772b60f3716f6f82d695bd0fc0300b87ca0b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9772b60f3716f6f82d695bd0fc0300b87ca0b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9772b60f3716f6f82d695bd0fc0300b87ca0b89"}], "stats": {"total": 116, "additions": 110, "deletions": 6}, "files": [{"sha": "2e9810c374fc949eaaa546c1eea21b3311b9beea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -1,3 +1,15 @@\n+2002-04-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/6303\n+\t* dwarf2out.c (rtl_for_decl_location): Call ASM_SIMPLIFY_DWARF_ADDR\n+\tbefore returning.\n+\t* config/i386/i386.c (i386_simplify_dwarf_addr): Simplify @GOT only\n+\twhen inside of MEM by eliminating the indirection too.\n+\t* config/s390/s390.h (ASM_SIMPLIFY_DWARF_ADDR): Define.\n+\t* config/s390/s390.c (s390_simplify_dwarf_addr): New.\n+\t* config/s390/s390-protos.h (s390_simplify_dwarf_addr): Add\n+\tprototype.\n+\n 2002-04-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/6279"}, {"sha": "275a465b4b0d2e689d6383ce6cc0be0a76149182", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -5424,11 +5424,15 @@ i386_simplify_dwarf_addr (orig_x)\n {\n   rtx x = orig_x, y;\n \n+  if (GET_CODE (x) == MEM)\n+    x = XEXP (x, 0);\n+\n   if (TARGET_64BIT)\n     {\n       if (GET_CODE (x) != CONST\n \t  || GET_CODE (XEXP (x, 0)) != UNSPEC\n-\t  || XINT (XEXP (x, 0), 1) != 15)\n+\t  || XINT (XEXP (x, 0), 1) != 15\n+\t  || GET_CODE (orig_x) != MEM)\n \treturn orig_x;\n       return XVECEXP (XEXP (x, 0), 0, 0);\n     }\n@@ -5463,8 +5467,8 @@ i386_simplify_dwarf_addr (orig_x)\n \n   x = XEXP (XEXP (x, 1), 0);\n   if (GET_CODE (x) == UNSPEC\n-      && (XINT (x, 1) == 6\n-\t  || XINT (x, 1) == 7))\n+      && ((XINT (x, 1) == 6 && GET_CODE (orig_x) == MEM)\n+\t  || (XINT (x, 1) == 7 && GET_CODE (orig_x) != MEM)))\n     {\n       if (y)\n \treturn gen_rtx_PLUS (Pmode, y, XVECEXP (x, 0, 0));\n@@ -5474,8 +5478,8 @@ i386_simplify_dwarf_addr (orig_x)\n   if (GET_CODE (x) == PLUS\n       && GET_CODE (XEXP (x, 0)) == UNSPEC\n       && GET_CODE (XEXP (x, 1)) == CONST_INT\n-      && (XINT (XEXP (x, 0), 1) == 6\n-\t  || XINT (XEXP (x, 0), 1) == 7))\n+      && ((XINT (XEXP (x, 0), 1) == 6 && GET_CODE (orig_x) == MEM)\n+\t  || (XINT (XEXP (x, 0), 1) == 7 && GET_CODE (orig_x) != MEM)))\n     {\n       x = gen_rtx_PLUS (VOIDmode, XVECEXP (XEXP (x, 0), 0, 0), XEXP (x, 1));\n       if (y)"}, {"sha": "2abc4ddd473c71f6b5625c6c9c27ae451a483b44", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -70,6 +70,7 @@ extern void s390_dump_literal_pool PARAMS ((rtx, rtx));\n extern void s390_trampoline_template PARAMS ((FILE *));\n extern void s390_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern rtx s390_gen_rtx_const_DI PARAMS ((int, int));\n+extern rtx s390_simplify_dwarf_addr PARAMS ((rtx));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "c365f0498545eec586f27bb78720b4c99ab54e4b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -1861,6 +1861,43 @@ legitimize_address (x, oldx, mode)\n   return x;\n }\n \n+/* In the name of slightly smaller debug output, and to cater to\n+   general assembler losage, recognize various UNSPEC sequences\n+   and turn them back into a direct symbol reference.  */\n+\n+rtx\n+s390_simplify_dwarf_addr (orig_x)\n+     rtx orig_x;\n+{\n+  rtx x = orig_x, y;\n+\n+  if (GET_CODE (x) != MEM)\n+    return orig_x;\n+\n+  x = XEXP (x, 0);\n+  if (GET_CODE (x) == PLUS\n+      && GET_CODE (XEXP (x, 1)) == CONST\n+      && GET_CODE (XEXP (x, 0)) == REG\n+      && REGNO (XEXP (x, 0)) == PIC_OFFSET_TABLE_REGNUM)\n+    {\n+      y = XEXP (XEXP (x, 1), 0);\n+      if (GET_CODE (y) == UNSPEC\n+\t  && XINT (y, 1) == 110)\n+\treturn XVECEXP (y, 0, 0);\n+      return orig_x;\n+    }\n+\n+  if (GET_CODE (x) == CONST)\n+    {\n+      y = XEXP (x, 0);\n+      if (GET_CODE (y) == UNSPEC\n+\t  && XINT (y, 1) == 111)\n+\treturn XVECEXP (y, 0, 0);\n+      return orig_x;\n+    }\n+\n+  return orig_x;      \n+}\n \n /* Output symbolic constant X in assembler syntax to \n    stdio stream FILE.  */"}, {"sha": "b50951a9a4114a379c36202fd8d1647725cf9792", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -1270,6 +1270,10 @@ extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n \n #define TARGET_MEM_FUNCTIONS\n \n+/* Either simplify a location expression, or return the original.  */\n+\n+#define ASM_SIMPLIFY_DWARF_ADDR(X) \\\n+  s390_simplify_dwarf_addr (X)\n \n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "b7a6d255fb2f9c086b04c1914949c7281971fc2e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -8850,7 +8850,12 @@ rtl_for_decl_location (decl)\n \t  && (CONSTANT_P (rtl)\n \t      || (GET_CODE (rtl) == MEM\n \t          && CONSTANT_P (XEXP (rtl, 0)))))\n-\treturn rtl;\n+\t{\n+#ifdef ASM_SIMPLIFY_DWARF_ADDR\n+\t  rtl = ASM_SIMPLIFY_DWARF_ADDR (rtl);\n+#endif\n+\t  return rtl;\n+\t}\n       rtl = NULL_RTX;\n     }\n   else if (TREE_CODE (decl) == PARM_DECL)\n@@ -8952,6 +8957,10 @@ rtl_for_decl_location (decl)\n \t}\n     }\n \n+#ifdef ASM_SIMPLIFY_DWARF_ADDR\n+  if (rtl)\n+    rtl = ASM_SIMPLIFY_DWARF_ADDR (rtl);\n+#endif\n   return rtl;\n }\n "}, {"sha": "826b30d6cba63d7bda116b088dcdb61288ab3a1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -2,6 +2,8 @@\n \n \t* gcc.dg/altivec-5.c: New test.\n \n+\t* gcc.dg/20020415-1.c: New test.\n+\n 2002-04-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/lib/chill.exp: Remove."}, {"sha": "06b3ce041b285e99d46c42d65e759d4d07dc76a6", "filename": "gcc/testsuite/gcc.dg/20020415-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Ftestsuite%2Fgcc.dg%2F20020415-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8c0deca527fa28fc3c1ef8867f6b9348dda433/gcc%2Ftestsuite%2Fgcc.dg%2F20020415-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020415-1.c?ref=4c8c0deca527fa28fc3c1ef8867f6b9348dda433", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/6303\n+   This testcase ICEd because s390 did not define\n+   ASM_SIMPLIFY_DWARF_ADDR hook.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpic -g\" } */\n+\n+static inline char *\n+bar (unsigned long x, char *y)\n+{\n+  extern const char ext[];\n+  const char *a = ext;\n+  char *b = y;\n+\n+  do *--b = a[x % 10]; while ((x /= 10) != 0);\n+  return b;\n+}\n+\n+struct A { char *p, *q; };\n+struct B { int r, s; };\n+\n+int\n+foo (struct A *a, const struct B *b)\n+{\n+  char c[(b->r > b->s) ? b->r : b->s];\n+  char *d = &c[sizeof c];\n+  register char *e;\n+\n+  e = bar (b->r, d);\n+  while (e < d)\n+    {\n+      register const int f = *e++;\n+      if (((a->p >= a->q) ? 1 : (unsigned char) (*a->p++ = f)) == -1)\n+\tbreak;\n+    }\n+}"}]}