{"sha": "a0c68737027348fb9ae1ff4a5a33a10d269962bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjNjg3MzcwMjczNDhmYjlhZTFmZjRhNWEzM2ExMGQyNjk5NjJiYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-12-16T10:08:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-12-16T10:08:43Z"}, "message": "re PR c++/13387 (assignment to base class corrupts subclass)\n\ncp:\n\tPR c++/13387\n\t* class.c (finish_struct_1): Compute mode and alias set for\n\tCLASSTYPE_AS_BASE.\n\t* call.c (build_over_call): Use CLASSTYPE_AS_BASE for trivial\n\tassignment of a class, as necessary.\n\t* cp-lang.c (cxx_get_alias_set): The alias set as a base is the\n\tsame as for the complete type.\ntestsuite:\n\tPR c++/13387\n\t* g++.dg/expr/assign1.C: New test.\n\nFrom-SVN: r74683", "tree": {"sha": "cdb6bff3438c48d90d9bc3062e8e3f8e2f8a81f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdb6bff3438c48d90d9bc3062e8e3f8e2f8a81f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c68737027348fb9ae1ff4a5a33a10d269962bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c68737027348fb9ae1ff4a5a33a10d269962bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c68737027348fb9ae1ff4a5a33a10d269962bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c68737027348fb9ae1ff4a5a33a10d269962bb/comments", "author": null, "committer": null, "parents": [{"sha": "0f30f285e44b335cef60431f418bda986f47df35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f30f285e44b335cef60431f418bda986f47df35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f30f285e44b335cef60431f418bda986f47df35"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "573604fe3b4c75291935355eb21eb350205a796e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a0c68737027348fb9ae1ff4a5a33a10d269962bb", "patch": "@@ -1,5 +1,13 @@\n 2003-12-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/13387\n+\t* class.c (finish_struct_1): Compute mode and alias set for\n+\tCLASSTYPE_AS_BASE.\n+\t* call.c (build_over_call): Use CLASSTYPE_AS_BASE for trivial\n+\tassignment of a class, as necessary.\n+\t* cp-lang.c (cxx_get_alias_set): The alias set as a base is the\n+\tsame as for the complete type.\n+\n \tPR c++/13242\n \tC++ ABI change. Mangling template parameters of reference type\n \t* mangle.c (write_template_args): Remove unreachable code."}, {"sha": "5634eea6302ea22bc56cc4454095deef5b388205", "filename": "gcc/cp/call.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a0c68737027348fb9ae1ff4a5a33a10d269962bb", "patch": "@@ -4631,9 +4631,30 @@ build_over_call (struct z_candidate *cand, int flags)\n     {\n       tree to = stabilize_reference\n \t(build_indirect_ref (TREE_VALUE (converted_args), 0));\n+      tree type = TREE_TYPE (to);\n+      tree as_base = CLASSTYPE_AS_BASE (type);\n \n       arg = build_indirect_ref (TREE_VALUE (TREE_CHAIN (converted_args)), 0);\n-      val = build (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n+      if (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (as_base)))\n+\tval = build (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n+      else\n+\t{\n+\t  /* We must only copy the non-tail padding parts. Use\n+\t     CLASSTYPE_AS_BASE for the bitwise copy.  */\n+\t  tree to_as_base, arg_as_base, base_ptr_type;\n+\n+\t  to = save_expr (to);\n+\t  base_ptr_type = build_pointer_type (as_base);\n+\t  to_as_base = build_indirect_ref\n+\t    (build_nop (base_ptr_type, build_unary_op (ADDR_EXPR, to, 0)), 0);\n+\t  arg_as_base = build_indirect_ref\n+\t    (build_nop (base_ptr_type, build_unary_op (ADDR_EXPR, arg, 0)), 0);\n+\t  \n+\t  val = build (MODIFY_EXPR, as_base, to_as_base, arg_as_base);\n+\t  val = build (COMPOUND_EXPR, type, convert_to_void (val, NULL), to);\n+\t  TREE_USED (val) = 1;\n+\t}\n+      \n       return val;\n     }\n "}, {"sha": "19b5ce67980734602fa53a9f352edad7b9b8d331", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a0c68737027348fb9ae1ff4a5a33a10d269962bb", "patch": "@@ -5052,6 +5052,10 @@ finish_struct_1 (tree t)\n \n   /* Layout the class itself.  */\n   layout_class_type (t, &virtuals);\n+  if (CLASSTYPE_AS_BASE (t) != t)\n+    /* We use the base type for trivial assignments, and hence it\n+       needs a mode.  */\n+    compute_record_mode (CLASSTYPE_AS_BASE (t));\n \n   /* Make sure that we get our own copy of the vfield FIELD_DECL.  */\n   vfield = TYPE_VFIELD (t);"}, {"sha": "fdb14048d4773b189fc79c68e67b0d08b1a47419", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=a0c68737027348fb9ae1ff4a5a33a10d269962bb", "patch": "@@ -296,6 +296,11 @@ ok_to_generate_alias_set_for_type (tree t)\n static HOST_WIDE_INT\n cxx_get_alias_set (tree t)\n {\n+  if (CLASS_TYPE_P (t) && TYPE_CONTEXT (t) && CLASS_TYPE_P (TYPE_CONTEXT (t))\n+      && CLASSTYPE_AS_BASE (TYPE_CONTEXT (t)) == t)\n+    /* The base variant of a type must be in the same alias set as the\n+       complete type.  */\n+    t = TYPE_CONTEXT (t);\n   \n   if (/* It's not yet safe to use alias sets for some classes in C++.  */\n       !ok_to_generate_alias_set_for_type (t)"}, {"sha": "0b91af749d2310a86ad2cf7bcec98c0e9ae6d9c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0c68737027348fb9ae1ff4a5a33a10d269962bb", "patch": "@@ -1,5 +1,8 @@\n 2003-12-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/13387\n+\t* g++.dg/expr/assign1.C: New test.\n+\n \tPR c++/13242\n \t* g++.dg/abi/mangle19-1.C: New test.\n \t* g++.dg/abi/mangle19-2.C: New test."}, {"sha": "7eb37e523acaa9b6f239af9048adfb1a3b10fb84", "filename": "gcc/testsuite/g++.dg/expr/assign1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fassign1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c68737027348fb9ae1ff4a5a33a10d269962bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fassign1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fassign1.C?ref=a0c68737027348fb9ae1ff4a5a33a10d269962bb", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run }\n+\n+// Contributed by Nathan Sidwell 15 Dec 2003 <nathan@codesourcery.com>\n+// Origin: Tasso Karkanis <Tasso.Karkanis@rogers.com>\n+// PR c++/13387. Clobbered tail padding of base\n+\n+inline void *operator new (__SIZE_TYPE__, void *ptr) \n+{\n+  return ptr;\n+}\n+\n+struct Base { \n+    Base() : i(0), c(0) {} \n+    int i; \n+    char c; \n+}; \n+ \n+struct Sub : Base { \n+    Sub () : d(0) {} \n+    char d; \n+}; \n+ \n+int main() { \n+  Sub sub;\n+  char base_alias[sizeof (Base)];\n+  Base *base;\n+  \n+  for (unsigned ix = sizeof base_alias; ix--;)\n+    base_alias[ix] = 0x55;\n+  base = new (&base_alias) Base ();\n+  \n+  static_cast <Base &> (sub) = *base;\n+  return sub.d; \n+} "}]}