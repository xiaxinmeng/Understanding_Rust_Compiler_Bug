{"sha": "299f5809e2d4bafeacb8d05d89da423f0e179a28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5ZjU4MDllMmQ0YmFmZWFjYjhkMDVkODlkYTQyM2YwZTE3OWEyOA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-18T08:56:55Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-18T08:56:55Z"}, "message": "2003-06-18  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/SelectorImpl.java\n\t(register): Use fd with value 0 for now, will be fixed later.\n\t* gnu/java/nio/ServerSocketChannelImpl.java\n\t(fd): Removed.\n\t(local_port): Removed.\n\t(InetSocketAddress): Removed.\n\t(ServerSocketChannelImpl): Just initialize internal socket object.\n\t(implCloseSelectableChannel): Close internal socket object.\n\t(implConfigureBlocking): Added comment.\n\t(accept): Use jaba.net stuff to accept socket.\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(fd): Removed.\n\t(local_port): Removed.\n\t(InetSocketAddress): Removed.\n\t(SocketCreate): Removed.\n\t(SocketConnect): Removed.\n\t(SocketBind): Removed.\n\t(SocketListen): Removed.\n\t(SocketAvailable): Removed.\n\t(SocketClose): Removed.\n\t(SocketRead): Removed.\n\t(SocketWrite): Removed.\n\t(SocketChannelImpl): Just initialize internal socket object.\n\t(implCloseSelectableChannel): Close internal socket object.\n\t(implConfigureBlocking): Fixed implementation, added comment.\n\t(connect): Use internal socket object to connect.\n\t(socket): No need for sanity checks.\n\t(read): Comment out some stuff, this will be reimplemented in the next\n\tcommit.\n\t(write): Likewise.\n\t* gnu/java/nio/natFileChannelImpl.cc\n\t(nio_mmap_file): Line wrapped.\n\t* gnu/java/nio/natSocketChannelImpl.cc: Removed.\n\t* Makefile.am\n\t(nat_source_files): Removeded gnu/java/nio/natSocketChannelImpl.cc.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r68145", "tree": {"sha": "c6a667deaaa6cb0a24b5ccb00dcb11b2cccab60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6a667deaaa6cb0a24b5ccb00dcb11b2cccab60e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/299f5809e2d4bafeacb8d05d89da423f0e179a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299f5809e2d4bafeacb8d05d89da423f0e179a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299f5809e2d4bafeacb8d05d89da423f0e179a28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299f5809e2d4bafeacb8d05d89da423f0e179a28/comments", "author": null, "committer": null, "parents": [{"sha": "20d513ff665af54cc8fb5cac4d2f4fe86ea94259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d513ff665af54cc8fb5cac4d2f4fe86ea94259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d513ff665af54cc8fb5cac4d2f4fe86ea94259"}], "stats": {"total": 323, "additions": 71, "deletions": 252}, "files": [{"sha": "1d6d8a16fc02c0bd48c61bfa3cf902051798af9e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=299f5809e2d4bafeacb8d05d89da423f0e179a28", "patch": "@@ -1,3 +1,42 @@\n+2003-06-18  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/SelectorImpl.java\n+\t(register): Use fd with value 0 for now, will be fixed later.\n+\t* gnu/java/nio/ServerSocketChannelImpl.java\n+\t(fd): Removed.\n+\t(local_port): Removed.\n+\t(InetSocketAddress): Removed.\n+\t(ServerSocketChannelImpl): Just initialize internal socket object.\n+\t(implCloseSelectableChannel): Close internal socket object.\n+\t(implConfigureBlocking): Added comment.\n+\t(accept): Use jaba.net stuff to accept socket.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(fd): Removed.\n+\t(local_port): Removed.\n+\t(InetSocketAddress): Removed.\n+\t(SocketCreate): Removed.\n+\t(SocketConnect): Removed.\n+\t(SocketBind): Removed.\n+\t(SocketListen): Removed.\n+\t(SocketAvailable): Removed.\n+\t(SocketClose): Removed.\n+\t(SocketRead): Removed.\n+\t(SocketWrite): Removed.\n+\t(SocketChannelImpl): Just initialize internal socket object.\n+\t(implCloseSelectableChannel): Close internal socket object.\n+\t(implConfigureBlocking): Fixed implementation, added comment.\n+\t(connect): Use internal socket object to connect.\n+\t(socket): No need for sanity checks.\n+\t(read): Comment out some stuff, this will be reimplemented in the next\n+\tcommit.\n+\t(write): Likewise.\n+\t* gnu/java/nio/natFileChannelImpl.cc\n+\t(nio_mmap_file): Line wrapped.\n+\t* gnu/java/nio/natSocketChannelImpl.cc: Removed.\n+\t* Makefile.am\n+\t(nat_source_files): Removeded gnu/java/nio/natSocketChannelImpl.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2003-06-18  Michael Koch  <konqueror@gmx.de>\n \n \t* java/util/Locale.java"}, {"sha": "ea2621740a9f13bae2a040802b19b5b3756107dd", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=299f5809e2d4bafeacb8d05d89da423f0e179a28", "patch": "@@ -2568,7 +2568,6 @@ gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n-gnu/java/nio/natSocketChannelImpl.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\"}, {"sha": "c8ee5b690d3d9abfd0f2b3210691913050815faf", "filename": "libjava/Makefile.in", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=299f5809e2d4bafeacb8d05d89da423f0e179a28", "patch": "@@ -2329,7 +2329,6 @@ gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n-gnu/java/nio/natSocketChannelImpl.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\\n@@ -2503,13 +2502,13 @@ gnu/gcj/runtime/natNameFinder.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n gnu/gcj/runtime/natStackTrace.lo gnu/gcj/runtime/natStringBuffer.lo \\\n gnu/gcj/runtime/natVMClassLoader.lo gnu/java/nio/natFileChannelImpl.lo \\\n gnu/java/nio/natFileLockImpl.lo gnu/java/nio/natMappedByteFileBuffer.lo \\\n-gnu/java/nio/natSelectorImpl.lo gnu/java/nio/natSocketChannelImpl.lo \\\n-java/io/natFile.lo java/io/natFileDescriptor.lo \\\n-java/io/natObjectInputStream.lo java/io/natVMObjectStreamClass.lo \\\n-java/lang/natCharacter.lo java/lang/natClass.lo \\\n-java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n-java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n-java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n+gnu/java/nio/natSelectorImpl.lo java/io/natFile.lo \\\n+java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n+java/io/natVMObjectStreamClass.lo java/lang/natCharacter.lo \\\n+java/lang/natClass.lo java/lang/natClassLoader.lo \\\n+java/lang/natConcreteProcess.lo java/lang/natDouble.lo \\\n+java/lang/natFloat.lo java/lang/natMath.lo java/lang/natObject.lo \\\n+java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n java/lang/natThread.lo java/lang/natVMSecurityManager.lo \\\n java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n@@ -2984,7 +2983,6 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/natFileLockImpl.P \\\n .deps/gnu/java/nio/natMappedByteFileBuffer.P \\\n .deps/gnu/java/nio/natSelectorImpl.P \\\n-.deps/gnu/java/nio/natSocketChannelImpl.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectInputStream.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectOutputStream.P \\\n .deps/gnu/java/rmi/dgc/DGCImpl.P .deps/gnu/java/rmi/dgc/DGCImpl_Skel.P \\"}, {"sha": "9f714cc70c5d4eb5fc8c4ac94d8a38f027374724", "filename": "libjava/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=299f5809e2d4bafeacb8d05d89da423f0e179a28", "patch": "@@ -255,17 +255,17 @@ protected SelectionKey register (AbstractSelectableChannel ch, int ops,\n     if (ch instanceof SocketChannelImpl)\n       {\n         SocketChannelImpl sc = (SocketChannelImpl) ch;\n-        result = new SelectionKeyImpl (ch, this, sc.fd);\n+        result = new SelectionKeyImpl (ch, this, 0); // FIXME: last argument\n       }\n     else if (ch instanceof DatagramChannelImpl)\n       {\n         DatagramChannelImpl dc = (DatagramChannelImpl) ch;\n-        result = new SelectionKeyImpl (ch, this, dc.fd);\n+        result = new SelectionKeyImpl (ch, this, 0); // FIXME: last argument\n       }\n     else if (ch instanceof ServerSocketChannelImpl)\n       {\n         ServerSocketChannelImpl ssc = (ServerSocketChannelImpl) ch;\n-        result = new SelectionKeyImpl (ch, this, ssc.fd);\n+        result = new SelectionKeyImpl (ch, this, 0); // FIXME: last argument\n       }\n     else\n       {"}, {"sha": "05ad0aefc309892d63072be7023b801c729f41f7", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=299f5809e2d4bafeacb8d05d89da423f0e179a28", "patch": "@@ -35,11 +35,13 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package gnu.java.nio;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.net.ServerSocket;\n+import java.net.Socket;\n import java.net.SocketAddress;\n import java.nio.channels.ServerSocketChannel;\n import java.nio.channels.SocketChannel;\n@@ -48,26 +50,14 @@\n class ServerSocketChannelImpl extends ServerSocketChannel\n {\n   ServerSocket serverSocket;\n-  int fd;\n-//   int local_port;\n   boolean blocking = true;\n   boolean connected = false;\n-//   InetSocketAddress sa;\n \n   protected ServerSocketChannelImpl (SelectorProvider provider)\n     throws IOException\n   {\n     super (provider);\n-    fd = SocketChannelImpl.SocketCreate ();\n-\n-    try\n-      {\n-        serverSocket = new ServerSocket ();\n-      }\n-    catch (IOException e)\n-      {\n-        System.err.println (\"ServerSocket could not be created.\");\n-      }\n+    serverSocket = new ServerSocket ();\n   }\n  \n   public void finalizer()\n@@ -87,20 +77,19 @@ public void finalizer()\n   protected void implCloseSelectableChannel () throws IOException\n   {\n     connected = false;\n-    SocketChannelImpl.SocketClose (fd);\n-    fd = SocketChannelImpl.SocketCreate ();\n+    serverSocket.close();\n   }\n \n   protected void implConfigureBlocking (boolean blocking) throws IOException\n   {\n-    this.blocking = blocking;\n+    this.blocking = blocking; // FIXME\n   }\n \n   public SocketChannel accept () throws IOException\n   {\n     SocketChannelImpl result = new SocketChannelImpl (provider ());\n-    result.sa = new InetSocketAddress (0);\n-    //int res = SocketAccept (this,result);\n+    Socket socket = serverSocket.accept();\n+    //socket.setChannel (result); // FIXME\n     return result;\n   }\n "}, {"sha": "94913fb8ac7c47af969c2100345a57e11a1a9e76", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=299f5809e2d4bafeacb8d05d89da423f0e179a28", "patch": "@@ -52,30 +52,13 @@\n public class SocketChannelImpl extends SocketChannel\n {\n   Socket socket;\n-  int fd;\n-  int local_port;\n   boolean blocking = true;\n   boolean connected = false;\n-  InetSocketAddress sa;\n-\n-  static native int SocketCreate();\n-  static native int SocketConnect(int fd, InetAddress addr, int port);\n-  static native int SocketBind(int fd, InetAddress addr, int port);\n-  static native int SocketListen(int fd, int backlog);\n-  static native int SocketAvailable(int fd);\n-  static native int SocketClose(int fd);\n-  static native int SocketRead(int fd, byte b[], int off, int len);\n-  static native int SocketWrite(int fd, byte b[], int off, int len);\n-\n-  public SocketChannelImpl(SelectorProvider provider)\t\t      \n+\n+  public SocketChannelImpl (SelectorProvider provider)\t\t      \n   {\n-    super(provider);\n-    fd = SocketCreate();\n-\t\n-    if (fd == -1)\n-\t    {\n-        System.err.println(\"failed to create socket:\"+fd);\n-\t    }\n+    super (provider);\n+    socket = new Socket ();\n   }\n \n   public void finalizer()\n@@ -95,39 +78,22 @@ public void finalizer()\n   protected void implCloseSelectableChannel () throws IOException\n   {\n     connected = false;\n-    SocketClose(fd);\n-    fd = SocketCreate();\n+    socket.close();\n   }\n \n   protected void implConfigureBlocking (boolean blocking) throws IOException\n   {\n-    if (this.blocking == blocking)\n-      return;\n+    this.blocking = blocking; // FIXME\n   }   \n \n   public boolean connect (SocketAddress remote) throws IOException\n   {\n     if (connected)\n-      {\n-        throw new AlreadyConnectedException ();\n-      }\n-\n-    // ok, lets connect !\n+      throw new AlreadyConnectedException();\n \t\n-    sa = (InetSocketAddress) remote;\n-\t\n-    InetAddress addr = sa.getAddress();\n-    int port = sa.getPort();\n-    int err = SocketConnect(fd, addr, port);\n-\t\n-    if (err < 0) \n-\t    {\n-        throw new IOException(\"Connection refused:\"+err + \", connect=\"+err);\n-\t    }\n-\n-    local_port = err;\n+    socket.connect (remote, 50);\n     connected = true;\n-    return blocking;\n+    return blocking; // FIXME\n   }\n     \n   public boolean finishConnect ()\n@@ -147,11 +113,6 @@ public boolean isConnectionPending ()\n     \n   public Socket socket ()\n   {\n-    if (socket != null)\n-\t    {\n-        //socket.ch = this;\n-\t    }\n-\n     return socket;\n   }\n \n@@ -161,6 +122,7 @@ public int read (ByteBuffer dst) throws IOException\n     int len = 1024;\n     byte[]b = new byte[len];\n \t\n+    /*\n     bytes = SocketRead(fd, b, 0, len);\n     dst.put(b, 0, bytes);\n \n@@ -169,6 +131,7 @@ public int read (ByteBuffer dst) throws IOException\n         // we've hit eof ?\n         return -1;\n       }\n+    */\n \n     return bytes;\n   }\n@@ -192,6 +155,7 @@ public int write (ByteBuffer src)\n     int bytes = 0;\n     int len = src.position();\n \n+    /*\n     if (src.hasArray ())\n       {\n         byte[] b = src.array ();\n@@ -203,6 +167,7 @@ public int write (ByteBuffer src)\n         src.get (b, 0, len);\n         bytes = SocketWrite (fd, b, 0, len);\n       }\n+    */\n \t\t\n     return bytes;\n   }"}, {"sha": "0bc0919672386ffc53b8850da1c4daa6d029e5bd", "filename": "libjava/gnu/java/nio/natFileChannelImpl.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299f5809e2d4bafeacb8d05d89da423f0e179a28/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc?ref=299f5809e2d4bafeacb8d05d89da423f0e179a28", "patch": "@@ -73,7 +73,8 @@ gnu::java::nio::FileChannelImpl::implTruncate (jlong size)\n }\n \n gnu::gcj::RawData*\n-gnu::java::nio::FileChannelImpl::nio_mmap_file (jlong pos, jlong size, jint /*mode*/)\n+gnu::java::nio::FileChannelImpl::nio_mmap_file (jlong pos, jlong size,\n+                                                jint /*mode*/)\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"mmap not implemented\"));\n }"}, {"sha": "480cc94e35a117311d0089df8b8fdaa7b6474626", "filename": "libjava/gnu/java/nio/natSocketChannelImpl.cc", "status": "removed", "additions": 0, "deletions": 172, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d513ff665af54cc8fb5cac4d2f4fe86ea94259/libjava%2Fgnu%2Fjava%2Fnio%2FnatSocketChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d513ff665af54cc8fb5cac4d2f4fe86ea94259/libjava%2Fgnu%2Fjava%2Fnio%2FnatSocketChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatSocketChannelImpl.cc?ref=20d513ff665af54cc8fb5cac4d2f4fe86ea94259", "patch": "@@ -1,172 +0,0 @@\n-// natSocketChannelImpl.cc\n-\n-/* Copyright (C) 2002, 2003  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-#include <config.h>\n-#include <platform.h>\n-\n-#include <errno.h>\n-\n-#include <gcj/cni.h>\n-#include <gnu/java/nio/SocketChannelImpl.h>\n-#include <java/io/IOException.h>\n-#include <java/net/InetAddress.h>\n-#include <java/net/SocketException.h>\n-\n-\n-#ifdef DISABLE_JAVA_NET\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketCreate ()\n-{\n-  throw new ::java::io::IOException (JvNewStringUTF (\"SocketCreate not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketConnect (jint,\n-                                                  ::java::net::InetAddress *,\n-                                                  jint)\n-{\n-  throw new ::java::io::IOException (JvNewStringUTF (\"SocketConnect not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketBind (jint, ::java::net::InetAddress *,\n-                                               jint)\n-{\n-  throw new ::java::io::IOException (JvNewStringUTF (\"SocketBind not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketListen (jint, jint)\n-{\n-  throw new ::java::io::IOException (JvNewStringUTF (\"SocketList not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketAvailable (jint)\n-{\n-  throw new ::java::net::SocketException (JvNewStringLatin1 (\"SocketAvailable: not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketClose (jint)\n-{\n-  throw new ::java::net::SocketException (JvNewStringLatin1 (\"SocketClose: not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketRead (jint, jbyteArray, jint, jint)\n-{\n-  throw new ::java::net::SocketException (JvNewStringLatin1 (\"SocketRead: not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketWrite (jint, jbyteArray, jint, jint)\n-{\n-  throw new ::java::net::SocketException (JvNewStringLatin1 (\"SocketWrite: not implemented\"));\n-}\n-\n-#else // DISABLE_JAVA_NET\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketCreate ()\n-{\n-  int sock = _Jv_socket (AF_INET, SOCK_STREAM, 0);\n-\n-  if (sock < 0)\n-    {\n-      char* strerr = strerror (errno);\n-      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n-    }\n-\n-  return sock;\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketConnect (jint fd,\n-                                                  ::java::net::InetAddress *addr,\n-                                                  jint port)\n-{\n-  throw new ::java::io::IOException (JvNewStringUTF (\"SocketConnect not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketBind (jint fd,\n-                                               ::java::net::InetAddress *addr,\n-                                               jint port)\n-{\n-  throw new ::java::io::IOException (JvNewStringUTF (\"SocketBind not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketListen (jint fd, jint backlog)\n-{\n-  int result = _Jv_listen (fd, backlog);\n-\n-  if (result < 0)\n-    {\n-      char* strerr = strerror (errno);\n-      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n-    }\n-\n-  return result;\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketAvailable (jint /*fd*/)\n-{\n-  throw new ::java::net::SocketException (JvNewStringLatin1 (\"SocketAvailable: not implemented\"));\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketClose (jint fd)\n-{\n-  int result = _Jv_close (fd);\n-\n-  if (result < 0)\n-    {\n-      char* strerr = strerror (errno);\n-      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n-    }\n-\n-  return result;\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketRead (jint fd, jbyteArray data,\n-                                               jint offset, jint length)\n-{\n-  int result = ::recv (fd, data, offset, length);\n-\n-  if (result < 0)\n-    {\n-      char* strerr = strerror (errno);\n-      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n-    }\n-\n-  return result;\n-}\n-\n-jint\n-gnu::java::nio::SocketChannelImpl::SocketWrite (jint fd, jbyteArray data,\n-                                                jint offset, jint length)\n-{\n-  int result = ::send (fd, data, offset, length);\n-\n-  if (result < 0)\n-    {\n-      char* strerr = strerror (errno);\n-      throw new ::java::io::IOException (JvNewStringUTF (strerr));\n-    }\n-\n-  return result;\n-}\n-\n-#endif // DISABLE_JAVA_NET"}]}