{"sha": "9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyYjMzNzUxZjA3ZjMwZjk3YTBjZmMxZGRiZmYzM2I0ZTdjOWUzMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-03T22:14:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-03T22:14:48Z"}, "message": "system.h (GIV_SORT_CRITERION): Poison.\n\n\t* system.h (GIV_SORT_CRITERION): Poison.\n\t* config/avr/avr.h (GIV_SORT_CRITERION): Remove.\n\t* config/ip2k/ip2k.h (GIV_SORT_CRITERION): Likewise.\n\nFrom-SVN: r77194", "tree": {"sha": "f2caae374a13459aeb7d1edfcb4f88756daced84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2caae374a13459aeb7d1edfcb4f88756daced84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/comments", "author": null, "committer": null, "parents": [{"sha": "888d65b5a81249c56aa92bc2998c798929f29f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888d65b5a81249c56aa92bc2998c798929f29f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888d65b5a81249c56aa92bc2998c798929f29f30"}], "stats": {"total": 38, "additions": 8, "deletions": 30}, "files": [{"sha": "3bfb9960a72bbdcca3eeee2c10fbf1d9c54fc953", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "patch": "@@ -1,3 +1,9 @@\n+2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* system.h (GIV_SORT_CRITERION): Poison.\n+\t* config/avr/avr.h (GIV_SORT_CRITERION): Remove.\n+\t* config/ip2k/ip2k.h (GIV_SORT_CRITERION): Likewise.\n+\n 2004-02-03  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/9348"}, {"sha": "64884281928fe9b1859870fbafcfe652c6a6b6a2", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "patch": "@@ -772,20 +772,6 @@ extern int avr_case_values_threshold;\n \n #define NO_DOLLAR_IN_LABEL 1\n \n-#define GIV_SORT_CRITERION(X, Y)\t\\\n-  if (GET_CODE ((X)->add_val) == CONST_INT\t\t\\\n-      && GET_CODE ((Y)->add_val) == CONST_INT)\t\t\\\n-    return INTVAL ((X)->add_val) - INTVAL ((Y)->add_val);\n-\n-/* `GIV_SORT_CRITERION(GIV1, GIV2)'\n-   In some cases, the strength reduction optimization pass can\n-   produce better code if this is defined.  This macro controls the\n-   order that induction variables are combined.  This macro is\n-   particularly useful if the target has limited addressing modes.\n-   For instance, the SH target has only positive offsets in\n-   addresses.  Thus sorting to put the smallest address first allows\n-   the most combinations to be found.  */\n-\n #define TRAMPOLINE_TEMPLATE(FILE) \\\n   internal_error (\"trampolines not supported\")\n "}, {"sha": "0769572fc533e1820a7ec3c4bf402337a0fff324", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "patch": "@@ -795,21 +795,6 @@ extern int ip2k_reorg_split_himode;\n extern int ip2k_reorg_merge_qimode;\n /* Flag to indicate that it's safe to merge QImode operands.  */\n \n-#define GIV_SORT_CRITERION(X, Y)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    if (GET_CODE ((X)->add_val) == CONST_INT\t\t\\\n-        && GET_CODE ((Y)->add_val) == CONST_INT)\t\\\n-      return INTVAL ((X)->add_val) - INTVAL ((Y)->add_val); \\\n-  } while (0)\n-\n-/* In some cases, the strength reduction optimization pass can\n-   produce better code if this is defined.  This macro controls the\n-   order that induction variables are combined.  This macro is\n-   particularly useful if the target has limited addressing modes.\n-   For instance, the SH target has only positive offsets in\n-   addresses.  Thus sorting to put the smallest address first allows\n-   the most combinations to be found.  */\n-\n #define TRAMPOLINE_TEMPLATE(FILE) abort ()\n \n #define TRAMPOLINE_SIZE 4"}, {"sha": "f77f0bf322335672fd8d880e17133db59b53b77b", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=9b2b33751f07f30f97a0cfc1ddbff33b4e7c9e30", "patch": "@@ -632,7 +632,8 @@ typedef char _Bool;\n \tCONVERT_HARD_REGISTER_TO_SSA_P ASM_OUTPUT_MAIN_SOURCE_FILENAME\t   \\\n \tFIRST_INSN_ADDRESS TEXT_SECTION SHARED_BSS_SECTION_ASM_OP\t   \\\n \tPROMOTED_MODE EXPAND_BUILTIN_VA_END\t\t\t\t   \\\n-\tLINKER_DOES_NOT_WORK_WITH_DWARF2 FUNCTION_ARG_KEEP_AS_REFERENCE\n+\tLINKER_DOES_NOT_WORK_WITH_DWARF2 FUNCTION_ARG_KEEP_AS_REFERENCE\t   \\\n+\tGIV_SORT_CRITERION\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}