{"sha": "ca3920adb2a8121fbb38100ebb8fde88015a49ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzOTIwYWRiMmE4MTIxZmJiMzgxMDBlYmI4ZmRlODgwMTVhNDliYQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-09-01T22:22:54Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-09-01T22:22:54Z"}, "message": "Eliminate false DV warnings for predicated calls to noreturn functions.\n\n\t* calls.c (emit_call_1): Add REG_NORETURN note to call if ECF_NORETURN.\n\t* combine.c (distribute_notes): Handle REG_NORETURN.\n\t* rtl.c (reg_note_name): Add REG_NORETURN.\n\t* rtl.h (enum reg_note): Likewise.\n\t* config/ia64/ia64-protos.h (emit_safe_across_calls): Renamed from\n\tia64_file_start.\n\t* config/ia64/ia64.c (emit_safe_across_calls): Likewise.\n\t(rtx_needs_barrier): Handle unspec_volatile 8 and 9.\n\t(emit_predicate_relation_info): Handle conditional calls with\n\tREG_NORETURN.\n\t* config/ia64/ia64.h (ASM_FILE_START): Call emit_safe_across_calls\n\tinstead of ia64_file_start.\n\t* config/ia64/sysv4.h (ASM_FILE_START): Likewise.\n\t* config/ia64/ia64.md (safe_across_calls_all,\n\tsave_across_calls_normal): New patterns.\n\nFrom-SVN: r36107", "tree": {"sha": "5d9506403a0ae211f76c9d2f6407a593c0046979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9506403a0ae211f76c9d2f6407a593c0046979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3920adb2a8121fbb38100ebb8fde88015a49ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3920adb2a8121fbb38100ebb8fde88015a49ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3920adb2a8121fbb38100ebb8fde88015a49ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3920adb2a8121fbb38100ebb8fde88015a49ba/comments", "author": null, "committer": null, "parents": [{"sha": "3c786c6945296d79a0d5f1799994aeb728aef083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c786c6945296d79a0d5f1799994aeb728aef083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c786c6945296d79a0d5f1799994aeb728aef083"}], "stats": {"total": 89, "additions": 83, "deletions": 6}, "files": [{"sha": "e2bb8124b44ffd5b20789d97dd418ff96d6f1567", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -24,6 +24,23 @@\n \n 2000-09-01  Jim Wilson  <wilson@cygnus.com>\n \n+\t* calls.c (emit_call_1): Add REG_NORETURN note to call if ECF_NORETURN.\n+\t* combine.c (distribute_notes): Handle REG_NORETURN.\n+\t* rtl.c (reg_note_name): Add REG_NORETURN.\n+\t* rtl.h (enum reg_note): Likewise.\n+\n+\t* config/ia64/ia64-protos.h (emit_safe_across_calls): Renamed from\n+\tia64_file_start.\n+\t* config/ia64/ia64.c (emit_safe_across_calls): Likewise.\n+\t(rtx_needs_barrier): Handle unspec_volatile 8 and 9.\n+\t(emit_predicate_relation_info): Handle conditional calls with\n+\tREG_NORETURN.\n+\t* config/ia64/ia64.h (ASM_FILE_START): Call emit_safe_across_calls\n+\tinstead of ia64_file_start.\n+\t* config/ia64/sysv4.h (ASM_FILE_START): Likewise.\n+\t* config/ia64/ia64.md (safe_across_calls_all,\n+\tsave_across_calls_normal): New patterns.\n+\n \t* loop.c (check_final_value): Check for biv use before checking for\n \tgiv use.  Check for both biv and giv uses.  Always set last_giv_use\n \tif there is a giv use."}, {"sha": "6d0a3b290bc11e4698b532992c02e8d570898144", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -605,6 +605,10 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n     REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, const0_rtx,\n \t\t\t\t\t       REG_NOTES (call_insn));\n \n+  if (ecf_flags & ECF_NORETURN)\n+    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_NORETURN, const0_rtx,\n+\t\t\t\t\t       REG_NOTES (call_insn));\n+\n   SIBLING_CALL_P (call_insn) = ((ecf_flags & ECF_SIBCALL) != 0);\n \n   /* Restore this now, so that we do defer pops for this call's args"}, {"sha": "df5314b9b6750f808bf445cc1f22b4bd3eee0cbe", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -12036,6 +12036,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \n \tcase REG_EH_REGION:\n \tcase REG_EH_RETHROW:\n+\tcase REG_NORETURN:\n \t  /* These notes must remain with the call.  It should not be\n \t     possible for both I2 and I3 to be a call.  */\n \t  if (GET_CODE (i3) == CALL_INSN)"}, {"sha": "36a67eb26ac21e31f4f5de0427a2f881f5c6b155", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -118,7 +118,7 @@ extern void ia64_encode_section_info PARAMS((tree));\n \n extern int ia64_register_move_cost PARAMS((enum reg_class, enum reg_class));\n extern int ia64_epilogue_uses PARAMS((int));\n-extern void ia64_file_start PARAMS((FILE *));\n+extern void emit_safe_across_calls PARAMS((FILE *));\n extern void ia64_output_end_prologue PARAMS((FILE *));\n extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));"}, {"sha": "7b422351b96ce1f1cd3296bbb8f898559b41fb31", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -984,7 +984,7 @@ spill_tfmode_operand (in, force)\n /* Begin the assembly file.  */\n \n void\n-ia64_file_start (f)\n+emit_safe_across_calls (f)\n      FILE *f;\n {\n   unsigned int rs, re;\n@@ -4003,6 +4003,8 @@ rtx_needs_barrier (x, flags, pred)\n           break;\n \n \tcase 7: /* pred.rel.mutex */\n+\tcase 8: /* safe_across_calls all */\n+\tcase 9: /* safe_across_calls normal */\n \t  return 0;\n \n \tdefault:\n@@ -4249,6 +4251,35 @@ emit_predicate_relation_info (insns)\n \t    head = n;\n \t  }\n     }\n+\n+  /* Look for conditional calls that do not return, and protect predicate\n+     relations around them.  Otherwise the assembler will assume the call\n+     returns, and complain about uses of call-clobbered predicates after\n+     the call.  */\n+  for (i = n_basic_blocks - 1; i >= 0; --i)\n+    {\n+      basic_block bb = BASIC_BLOCK (i);\n+      rtx insn = bb->head;\n+      \n+      while (1)\n+\t{\n+\t  if (GET_CODE (insn) == CALL_INSN\n+\t      && GET_CODE (PATTERN (insn)) == COND_EXEC\n+\t      && find_reg_note (insn, REG_NORETURN, NULL_RTX))\n+\t    {\n+\t      rtx b = emit_insn_before (gen_safe_across_calls_all (), insn);\n+\t      rtx a = emit_insn_after (gen_safe_across_calls_normal (), insn);\n+\t      if (bb->head == insn)\n+\t\tbb->head = b;\n+\t      if (bb->end == insn)\n+\t\tbb->end = a;\n+\t    }\n+\t  \n+\t  if (insn == bb->end)\n+\t    break;\n+\t  insn = NEXT_INSN (insn);\n+\t}\n+    }\n }\n \n /* Perform machine dependent operations on the rtl chain INSNS.  */"}, {"sha": "b19cb59c53d244ab3b23998992ccfa99b63ba492", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -1479,7 +1479,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Output at beginning of assembler file.  */\n \n #define ASM_FILE_START(FILE) \\\n-  ia64_file_start (FILE)\n+  emit_safe_across_calls (FILE)\n \n /* A C compound statement that outputs the assembler code for a thunk function,\n    used to implement C++ virtual function calls with multiple inheritance.  */"}, {"sha": "391ca15a476cc77f2922adbb594783fc9d32553e", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -70,6 +70,8 @@\n ;;\t2\tinsn_group_barrier\n ;;\t5\tset_bsp\n ;;\t7\tpred.rel.mutex\n+;;\t8\tpred.safe_across_calls all\n+;;\t9\tpred.safe_across_calls normal\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -3953,3 +3955,22 @@\n   \".pred.rel.mutex %0, %I0\"\n   [(set_attr \"type\" \"unknown\")\n    (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"safe_across_calls_all\"\n+  [(unspec_volatile [(const_int 0)] 8)]\n+  \"\"\n+  \".pred.safe_across_calls p1-p63\"\n+  [(set_attr \"type\" \"unknown\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"safe_across_calls_normal\"\n+  [(unspec_volatile [(const_int 0)] 9)]\n+  \"\"\n+  \"*\n+{\n+  emit_safe_across_calls (asm_out_file);\n+  return \\\"\\\";\n+}\"\n+  [(set_attr \"type\" \"unknown\")\n+   (set_attr \"predicable\" \"no\")])\n+"}, {"sha": "af92839d3eebbb6e0c1b4a2807fadc7474ca9c03", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -178,7 +178,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_FILE_START(STREAM) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   output_file_directive (STREAM, main_input_filename);\t\t\t\\\n-  ia64_file_start(STREAM);\t\t\t\t\t\t\\\n+  emit_safe_across_calls (STREAM);\t\t\t\t\t\\\n } while (0)\n \n /* Case label alignment is handled by ADDR_VEC_ALIGN now.  */"}, {"sha": "90d760e00c518958c4e8e0f7ca98528346d32cda", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -277,7 +277,7 @@ const char * const reg_note_name[] =\n   \"REG_LABEL\", \"REG_DEP_ANTI\", \"REG_DEP_OUTPUT\", \"REG_BR_PROB\",\n   \"REG_EXEC_COUNT\", \"REG_NOALIAS\", \"REG_SAVE_AREA\", \"REG_BR_PRED\",\n   \"REG_FRAME_RELATED_EXPR\", \"REG_EH_CONTEXT\", \"REG_EH_REGION\",\n-  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\"\n+  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\", \"REG_NORETURN\"\n };\n \n static void fatal_with_file_and_line PARAMS ((FILE *, const char *, ...))"}, {"sha": "44a5e8da6e2c00728f21c9915dee00b1d74e9d1d", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3920adb2a8121fbb38100ebb8fde88015a49ba/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ca3920adb2a8121fbb38100ebb8fde88015a49ba", "patch": "@@ -543,7 +543,10 @@ enum reg_note\n      a value which might not be used later, and if so it's OK to delete\n      the insn.  Normally, deleting any insn in the prologue is an error. \n      At present the parameter is unused and set to (const_int 0).  */\n-  REG_MAYBE_DEAD\n+  REG_MAYBE_DEAD,\n+\n+  /* Indicates that a call does not return.  */\n+  REG_NORETURN\n };\n \n /* The base value for branch probability notes.  */"}]}