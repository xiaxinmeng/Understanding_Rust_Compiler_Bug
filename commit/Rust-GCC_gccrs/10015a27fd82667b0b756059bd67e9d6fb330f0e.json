{"sha": "10015a27fd82667b0b756059bd67e9d6fb330f0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwMTVhMjdmZDgyNjY3YjBiNzU2MDU5YmQ2N2U5ZDZmYjMzMGYwZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-09T17:29:03Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-09T17:29:03Z"}, "message": "reload.c (refers_to_mem_for_reload_p, [...]): Make them static.\n\n\t* reload.c (refers_to_mem_for_reload_p,\n\trefers_to_regno_for_reload_p): Make them static.\n\t* reload.h: Remove the corresponding prototypes.\n\nFrom-SVN: r90349", "tree": {"sha": "f6f502726a533f7df49f2d086800ec7d30fd4712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6f502726a533f7df49f2d086800ec7d30fd4712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10015a27fd82667b0b756059bd67e9d6fb330f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10015a27fd82667b0b756059bd67e9d6fb330f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10015a27fd82667b0b756059bd67e9d6fb330f0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10015a27fd82667b0b756059bd67e9d6fb330f0e/comments", "author": null, "committer": null, "parents": [{"sha": "c75d6010b052d367dbd4b53c7615e09cf4f1bf5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75d6010b052d367dbd4b53c7615e09cf4f1bf5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75d6010b052d367dbd4b53c7615e09cf4f1bf5a"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "e949d74d9ecc9a2cd063bbf252b22d95f36c2f84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10015a27fd82667b0b756059bd67e9d6fb330f0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10015a27fd82667b0b756059bd67e9d6fb330f0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10015a27fd82667b0b756059bd67e9d6fb330f0e", "patch": "@@ -1,3 +1,9 @@\n+2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* reload.c (refers_to_mem_for_reload_p,\n+\trefers_to_regno_for_reload_p): Make them static.\n+\t* reload.h: Remove the corresponding prototypes.\n+\n 2004-11-09  James A. Morrison  <phython@gcc.gnu.org>\n             Eric Botcazou  <ebotcazou@libertysurf.fr>\n "}, {"sha": "c56a499a4e73e204807fd805499b12231530547d", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10015a27fd82667b0b756059bd67e9d6fb330f0e/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10015a27fd82667b0b756059bd67e9d6fb330f0e/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=10015a27fd82667b0b756059bd67e9d6fb330f0e", "patch": "@@ -271,6 +271,9 @@ static rtx find_reloads_subreg_address (rtx, int, int, enum reload_type,\n \t\t\t\t\tint, rtx);\n static void copy_replacements_1 (rtx *, rtx *, int);\n static int find_inc_amount (rtx, rtx);\n+static int refers_to_mem_for_reload_p (rtx);\n+static int refers_to_regno_for_reload_p (unsigned int, unsigned int,\n+\t\t\t\t\t rtx, rtx *);\n \f\n #ifdef HAVE_SECONDARY_RELOADS\n \n@@ -6171,7 +6174,7 @@ find_replacement (rtx *loc)\n    This is similar to refers_to_regno_p in rtlanal.c except that we\n    look at equivalences for pseudos that didn't get hard registers.  */\n \n-int\n+static int\n refers_to_regno_for_reload_p (unsigned int regno, unsigned int endregno,\n \t\t\t      rtx x, rtx *loc)\n {\n@@ -6364,7 +6367,7 @@ reg_overlap_mentioned_for_reload_p (rtx x, rtx in)\n /* Return nonzero if anything in X contains a MEM.  Look also for pseudo\n    registers.  */\n \n-int\n+static int\n refers_to_mem_for_reload_p (rtx x)\n {\n   const char *fmt;"}, {"sha": "5cd0ad62cb190344b6a42b6450723da698c64732", "filename": "gcc/reload.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10015a27fd82667b0b756059bd67e9d6fb330f0e/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10015a27fd82667b0b756059bd67e9d6fb330f0e/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=10015a27fd82667b0b756059bd67e9d6fb330f0e", "patch": "@@ -308,19 +308,9 @@ extern void move_replacements (rtx *x, rtx *y);\n    Otherwise, return *LOC.  */\n extern rtx find_replacement (rtx *);\n \n-/* Return nonzero if register in range [REGNO, ENDREGNO)\n-   appears either explicitly or implicitly in X\n-   other than being stored into.  */\n-extern int refers_to_regno_for_reload_p (unsigned int, unsigned int,\n-\t\t\t\t\t rtx, rtx *);\n-\n /* Nonzero if modifying X will affect IN.  */\n extern int reg_overlap_mentioned_for_reload_p (rtx, rtx);\n \n-/* Return nonzero if anything in X contains a MEM.  Look also for pseudo\n-   registers.  */\n-extern int refers_to_mem_for_reload_p (rtx);\n-\n /* Check the insns before INSN to see if there is a suitable register\n    containing the same value as GOAL.  */\n extern rtx find_equiv_reg (rtx, rtx, enum reg_class, int, short *,"}]}