{"sha": "edabbec31e3bfc9a9757f80c8610706ed00e5a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhYmJlYzMxZTNiZmM5YTk3NTdmODBjODYxMDcwNmVkMDBlNWExYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-13T23:13:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-14T01:30:18Z"}, "message": "\tPR c++/92746 - ICE with noexcept of function concept check.\n\nAnother place that needs to specially handle Concepts TS function-style\nconcepts.\n\n\t* except.c (check_noexcept_r): Handle concept-check.", "tree": {"sha": "065b4bf6ed94b2de06417a2db1aa6e5cdf9e4111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/065b4bf6ed94b2de06417a2db1aa6e5cdf9e4111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edabbec31e3bfc9a9757f80c8610706ed00e5a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edabbec31e3bfc9a9757f80c8610706ed00e5a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edabbec31e3bfc9a9757f80c8610706ed00e5a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edabbec31e3bfc9a9757f80c8610706ed00e5a1a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca4435f431f9b8049ebf102b5659f2d3e7be198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca4435f431f9b8049ebf102b5659f2d3e7be198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca4435f431f9b8049ebf102b5659f2d3e7be198"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "4729e3d331dae0c9b00e106ad04ce57a35633bd4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edabbec31e3bfc9a9757f80c8610706ed00e5a1a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edabbec31e3bfc9a9757f80c8610706ed00e5a1a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=edabbec31e3bfc9a9757f80c8610706ed00e5a1a", "patch": "@@ -1,5 +1,8 @@\n 2020-01-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/92746 - ICE with noexcept of function concept check.\n+\t* except.c (check_noexcept_r): Handle concept-check.\n+\n \tPR c++/92582 - ICE with member template as requirement.\n \t* pt.c (struct find_template_parameter_info): Add ctx_parms.\n \t(any_template_parm_r): Handle TEMPLATE_DECL."}, {"sha": "55b4b6af442ad2a3aeddb21f63383369e51192b6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edabbec31e3bfc9a9757f80c8610706ed00e5a1a/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edabbec31e3bfc9a9757f80c8610706ed00e5a1a/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=edabbec31e3bfc9a9757f80c8610706ed00e5a1a", "patch": "@@ -1117,6 +1117,8 @@ check_noexcept_r (tree *tp, int * /*walk_subtrees*/, void * /*data*/)\n \n          We could use TREE_NOTHROW (t) for !TREE_PUBLIC fns, though... */\n       tree fn = cp_get_callee (t);\n+      if (concept_check_p (fn))\n+\treturn NULL_TREE;\n       tree type = TREE_TYPE (fn);\n       gcc_assert (INDIRECT_TYPE_P (type));\n       type = TREE_TYPE (type);"}, {"sha": "ecb7f6b12f7d0d419c6cc26b78dc47cd86bada4d", "filename": "gcc/testsuite/g++.dg/concepts/fn-concept3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edabbec31e3bfc9a9757f80c8610706ed00e5a1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edabbec31e3bfc9a9757f80c8610706ed00e5a1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept3.C?ref=edabbec31e3bfc9a9757f80c8610706ed00e5a1a", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/92746\n+// { dg-do compile { target c++17_only } }\n+// { dg-options \"-fconcepts\" }\n+\n+template<typename T> concept bool C3() { return true; }\n+static_assert(noexcept(C3<int>()), \"function concept should be treated as if noexcept(true) specified\");"}]}