{"sha": "ee336e846de46aa5523a96f712d247c31a07c6e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzMzZlODQ2ZGU0NmFhNTUyM2E5NmY3MTJkMjQ3YzMxYTA3YzZlMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-05-07T23:04:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-05-07T23:04:22Z"}, "message": "[C++ PATCH] Kill -fno-for-scope\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-05/msg00299.html\n\tgcc/cp/\n\tRemove fno-for-scope\n\t* cp-tree.h (DECL_ERROR_REPORTED, DECL_DEAD_FOR_LOCAL)\n\t(DECL_HAS_SHADOWED_FOR_VAR_P, DECL_SHADOWED_FOR_VAR)\n\t(SET_DECL_SHADOWED_FOR_VAR): Delete.\n\t(decl_shadowed_for_var_lookup, decl_shadowed_for_var_insert)\n\t(check_for_out_of_scope_variable, init_shadowed_var_for_decl):\n\tDon't declare.\n\t* name-lookup.h (struct cp_binding_level): Remove\n\tdead_vars_from_for field.\n\t* cp-lang.c (cp_init_ts): Delete.\n\t(LANG_HOOKS_INIT_TS): Override to cp_common_init_ts.\n\t* cp-objcp-common.c (shadowed_var_for_decl): Delete.\n\t(decl_shadowed_for_var_lookup, decl_shadowed_for_var_insert)\n\t(init_shadowed_var_for_decl): Delete.\n\t* decl.c (poplevel): Remove shadowed for var handling.\n\t(cxx_init_decl_processing): Remove -ffor-scope deprecation.\n\t* name-lookup.c (find_local_binding): Remove shadowed for var\n\thandling.\n\t(check_local_shadow): Likewise.\n\t(check_for_out_of_scope_variable): Delete.\n\t* parser.c (cp_parser_primary_expression): Remove shadowed for var\n\thandling.\n\t* pt.c (tsubst_decl): Remove DECL_DEAD_FOR_LOCAL setting.\n\t* semantics.c (begin_for_scope): Always have a scope.\n\t(begin_for_stmt, finish_for_stmt): Remove ARM-for scope handling.\n\t(begin_range_for_stmt, finish_id_expression): Likewise.\n\n\tgcc/\n\t* doc/invoke.texi (C++ Dialect Options): Remove -ffor-scope.\n\t* doc/extend.texi (Deprecated Features): Remove -fno-for-scope\n\t(Backwards Compatibility): Likewise.\n\n\tc-family/\n\t* c.opt (ffor-scope): Remove functionality, issue warning.\n\n\tgcc/objcp/\n\t* objcp-lang.c (objcxx_init_ts): Don't call init_shadowed_var_for_decl.\n\n\tgcc/testsuite/\n\t* g++.dg/cpp0x/range-for10.C: Delete.\n\t* g++.dg/ext/forscope1.C: Delete.\n\t* g++.dg/ext/forscope2.C: Delete.\n\t* g++.dg/template/for1.C: Delete.\n\nFrom-SVN: r260015", "tree": {"sha": "8c66e81acd1034522f08d278a608f49f42e64ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c66e81acd1034522f08d278a608f49f42e64ee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee336e846de46aa5523a96f712d247c31a07c6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee336e846de46aa5523a96f712d247c31a07c6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee336e846de46aa5523a96f712d247c31a07c6e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee336e846de46aa5523a96f712d247c31a07c6e1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056"}], "stats": {"total": 518, "additions": 77, "deletions": 441}, "files": [{"sha": "868c87d525cbec42c7aaaf9ab8a615fb5197c344", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -1,3 +1,9 @@\n+2018-05-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/invoke.texi (C++ Dialect Options): Remove -ffor-scope.\n+\t* doc/extend.texi (Deprecated Features): Remove -fno-for-scope\n+\t(Backwards Compatibility): Likewise.\n+\n 2018-05-07  Luis Machado  <luis.machado@linaro.org>\n \n \tPR bootstrap/85681"}, {"sha": "087379f1a1517a1f7d120c8c36f859c3460b30c1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -1,3 +1,7 @@\n+2018-05-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c.opt (ffor-scope): Remove functionality, issue warning.\n+\n 2018-05-03  Nathan Sidwell  <nathan@acm.org>\n \n \t* c.opt (ffriend-injection): Remove functionality, issue warning."}, {"sha": "c48d6dced8d1e9be4de86d306977cfbb40848fce", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -1441,8 +1441,7 @@ fexternal-templates\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n ffor-scope\n-C++ ObjC++ Var(flag_new_for_scope) Init(1)\n-Scope of for-init-statement variables is local to the loop.\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n ffreestanding\n C ObjC C++ ObjC++"}, {"sha": "75f52078faa5c21ad3dbb43327cdf455cf58f14f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -1,3 +1,32 @@\n+2018-05-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\tRemove fno-for-scope\n+\t* cp-tree.h (DECL_ERROR_REPORTED, DECL_DEAD_FOR_LOCAL)\n+\t(DECL_HAS_SHADOWED_FOR_VAR_P, DECL_SHADOWED_FOR_VAR)\n+\t(SET_DECL_SHADOWED_FOR_VAR): Delete.\n+\t(decl_shadowed_for_var_lookup, decl_shadowed_for_var_insert)\n+\t(check_for_out_of_scope_variable, init_shadowed_var_for_decl):\n+\tDon't declare.\n+\t* name-lookup.h (struct cp_binding_level): Remove\n+\tdead_vars_from_for field.\n+\t* cp-lang.c (cp_init_ts): Delete.\n+\t(LANG_HOOKS_INIT_TS): Override to cp_common_init_ts.\n+\t* cp-objcp-common.c (shadowed_var_for_decl): Delete.\n+\t(decl_shadowed_for_var_lookup, decl_shadowed_for_var_insert)\n+\t(init_shadowed_var_for_decl): Delete.\n+\t* decl.c (poplevel): Remove shadowed for var handling.\n+\t(cxx_init_decl_processing): Remove -ffor-scope deprecation.\n+\t* name-lookup.c (find_local_binding): Remove shadowed for var\n+\thandling.\n+\t(check_local_shadow): Likewise.\n+\t(check_for_out_of_scope_variable): Delete.\n+\t* parser.c (cp_parser_primary_expression): Remove shadowed for var\n+\thandling.\n+\t* pt.c (tsubst_decl): Remove DECL_DEAD_FOR_LOCAL setting.\n+\t* semantics.c (begin_for_scope): Always have a scope.\n+\t(begin_for_stmt, finish_for_stmt): Remove ARM-for scope handling.\n+\t(begin_range_for_stmt, finish_id_expression): Likewise.\n+\n 2018-05-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85618 - ICE with initialized VLA."}, {"sha": "26a1e6d29cf6f2c97611ead62570d17c5965b838", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-objcp-common.h\"\n \n enum c_language_kind c_language = clk_cxx;\n-static void cp_init_ts (void);\n static const char * cxx_dwarf_name (tree t, int verbosity);\n static enum classify_record cp_classify_record (tree type);\n static tree cp_eh_personality (void);\n@@ -71,7 +70,7 @@ static tree cxx_enum_underlying_base_type (const_tree);\n #undef LANG_HOOKS_DWARF_NAME\n #define LANG_HOOKS_DWARF_NAME cxx_dwarf_name\n #undef LANG_HOOKS_INIT_TS\n-#define LANG_HOOKS_INIT_TS cp_init_ts\n+#define LANG_HOOKS_INIT_TS cp_common_init_ts\n #undef LANG_HOOKS_EH_PERSONALITY\n #define LANG_HOOKS_EH_PERSONALITY cp_eh_personality\n #undef LANG_HOOKS_EH_RUNTIME_TYPE\n@@ -102,14 +101,6 @@ objcp_tsubst_copy_and_build (tree /*t*/,\n   return NULL_TREE;\n }\n \n-static void\n-cp_init_ts (void)\n-{\n-  cp_common_init_ts ();\n-\n-  init_shadowed_var_for_decl ();\n-}\n-\n static const char *\n cxx_dwarf_name (tree t, int verbosity)\n {"}, {"sha": "25f0b3e1cdfc5fdf844b0ada3eae4f020bccd6cb", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -298,43 +298,6 @@ has_c_linkage (const_tree decl)\n   return DECL_EXTERN_C_P (decl);\n }\n \n-static GTY ((cache))\n-     hash_table<tree_decl_map_cache_hasher> *shadowed_var_for_decl;\n-\n-/* Lookup a shadowed var for FROM, and return it if we find one.  */\n-\n-tree\n-decl_shadowed_for_var_lookup (tree from)\n-{\n-  struct tree_decl_map *h, in;\n-  in.base.from = from;\n-\n-  h = shadowed_var_for_decl->find_with_hash (&in, DECL_UID (from));\n-  if (h)\n-    return h->to;\n-  return NULL_TREE;\n-}\n-\n-/* Insert a mapping FROM->TO in the shadowed var hashtable.  */\n-\n-void\n-decl_shadowed_for_var_insert (tree from, tree to)\n-{\n-  struct tree_decl_map *h;\n-\n-  h = ggc_alloc<tree_decl_map> ();\n-  h->base.from = from;\n-  h->to = to;\n-  *shadowed_var_for_decl->find_slot_with_hash (h, DECL_UID (from), INSERT) = h;\n-}\n-\n-void\n-init_shadowed_var_for_decl (void)\n-{\n-  shadowed_var_for_decl\n-    = hash_table<tree_decl_map_cache_hasher>::create_ggc (512);\n-}\n-\n /* Return true if stmt can fall through.  Used by block_may_fallthru\n    default case.  */\n "}, {"sha": "2df158c9ea69c38ca0dcd13d2a39bd68169a6a9d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -447,8 +447,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n    6: TYPE_DEPENDENT_P_VALID\n \n    Usage of DECL_LANG_FLAG_?:\n-   0: DECL_ERROR_REPORTED (in VAR_DECL).\n-      DECL_TEMPLATE_PARM_P (in PARM_DECL, CONST_DECL, TYPE_DECL, or TEMPLATE_DECL)\n+   0: DECL_TEMPLATE_PARM_P (in PARM_DECL, CONST_DECL, TYPE_DECL, or TEMPLATE_DECL)\n       DECL_LOCAL_FUNCTION_P (in FUNCTION_DECL)\n       DECL_MUTABLE_P (in FIELD_DECL)\n       DECL_DEPENDENT_P (in USING_DECL)\n@@ -475,8 +474,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n    6: DECL_THIS_STATIC (in VAR_DECL or FUNCTION_DECL).\n       DECL_FIELD_IS_BASE (in FIELD_DECL)\n       TYPE_DECL_ALIAS_P (in TYPE_DECL)\n-   7: DECL_DEAD_FOR_LOCAL (in VAR_DECL).\n-      DECL_THUNK_P (in a member FUNCTION_DECL)\n+   7: DECL_THUNK_P (in a member FUNCTION_DECL)\n       DECL_NORMAL_CAPTURE_P (in FIELD_DECL)\n    8: DECL_DECLARED_CONSTEXPR_P (in VAR_DECL, FUNCTION_DECL)\n \n@@ -3212,9 +3210,6 @@ struct GTY(()) lang_decl {\n    was inherited from a template parameter, not explicitly indicated.  */\n #define ABI_TAG_IMPLICIT(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n \n-extern tree decl_shadowed_for_var_lookup (tree);\n-extern void decl_shadowed_for_var_insert (tree, tree);\n-\n /* Non zero if this is a using decl for a dependent scope. */\n #define DECL_DEPENDENT_P(NODE) DECL_LANG_FLAG_0 (USING_DECL_CHECK (NODE))\n \n@@ -3227,19 +3222,6 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n /* Non zero if the using decl refers to a dependent type.  */\n #define USING_DECL_TYPENAME_P(NODE) DECL_LANG_FLAG_1 (USING_DECL_CHECK (NODE))\n \n-/* In a VAR_DECL, true if we have a shadowed local variable\n-   in the shadowed var table for this VAR_DECL.  */\n-#define DECL_HAS_SHADOWED_FOR_VAR_P(NODE) \\\n-  (VAR_DECL_CHECK (NODE)->decl_with_vis.shadowed_for_var_p)\n-\n-/* In a VAR_DECL for a variable declared in a for statement,\n-   this is the shadowed (local) variable.  */\n-#define DECL_SHADOWED_FOR_VAR(NODE) \\\n-  (DECL_HAS_SHADOWED_FOR_VAR_P(NODE) ? decl_shadowed_for_var_lookup (NODE) : NULL)\n-\n-#define SET_DECL_SHADOWED_FOR_VAR(NODE, VAL) \\\n-  (decl_shadowed_for_var_insert (NODE, VAL))\n-\n /* In a FUNCTION_DECL, this is nonzero if this function was defined in\n    the class definition.  We have saved away the text of the function,\n    but have not yet processed it.  */\n@@ -3844,14 +3826,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define TYPE_CONTAINS_VPTR_P(NODE)\t\t\\\n   (TYPE_POLYMORPHIC_P (NODE) || CLASSTYPE_VBASECLASSES (NODE))\n \n-/* This flag is true of a local VAR_DECL if it was declared in a for\n-   statement, but we are no longer in the scope of the for.  */\n-#define DECL_DEAD_FOR_LOCAL(NODE) DECL_LANG_FLAG_7 (VAR_DECL_CHECK (NODE))\n-\n-/* This flag is set on a VAR_DECL that is a DECL_DEAD_FOR_LOCAL\n-   if we already emitted a warning about using it.  */\n-#define DECL_ERROR_REPORTED(NODE) DECL_LANG_FLAG_0 (VAR_DECL_CHECK (NODE))\n-\n /* Nonzero if NODE is a FUNCTION_DECL (for a function with global\n    scope) declared in a local scope.  */\n #define DECL_LOCAL_FUNCTION_P(NODE) \\\n@@ -6232,7 +6206,6 @@ extern tree strip_fnptr_conv\t\t\t(tree);\n /* in name-lookup.c */\n extern void maybe_push_cleanup_level\t\t(tree);\n extern tree make_anon_name\t\t\t(void);\n-extern tree check_for_out_of_scope_variable\t(tree);\n extern tree maybe_push_decl\t\t\t(tree);\n extern tree current_decl_namespace\t\t(void);\n \n@@ -7403,7 +7376,6 @@ extern size_t cp_tree_size\t\t\t(enum tree_code);\n extern bool cp_var_mod_type_p\t\t\t(tree, tree);\n extern void cxx_initialize_diagnostics\t\t(diagnostic_context *);\n extern int cxx_types_compatible_p\t\t(tree, tree);\n-extern void init_shadowed_var_for_decl\t\t(void);\n extern bool cxx_block_may_fallthru\t\t(const_tree);\n \n /* in cp-gimplify.c */"}, {"sha": "fccddd54d69928ef958924a4a082e1fd4545a3a4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -576,9 +576,7 @@ poplevel (int keep, int reverse, int functionbody)\n   tree subblocks;\n   tree block;\n   tree decl;\n-  int leaving_for_scope;\n   scope_kind kind;\n-  unsigned ix;\n \n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n  restart:\n@@ -639,12 +637,6 @@ poplevel (int keep, int reverse, int functionbody)\n     for (link = subblocks; link; link = BLOCK_CHAIN (link))\n       BLOCK_SUPERCONTEXT (link) = block;\n \n-  /* We still support the old for-scope rules, whereby the variables\n-     in a init statement were in scope after the for-statement ended.\n-     We only use the new rules if flag_new_for_scope is nonzero.  */\n-  leaving_for_scope\n-    = current_binding_level->kind == sk_for && flag_new_for_scope;\n-\n   /* Before we remove the declarations first check for unused variables.  */\n   if ((warn_unused_variable || warn_unused_but_set_variable)\n       && current_binding_level->kind != sk_template_parms\n@@ -704,84 +696,13 @@ poplevel (int keep, int reverse, int functionbody)\n       decl = TREE_CODE (link) == TREE_LIST ? TREE_VALUE (link) : link;\n       tree name = OVL_NAME (decl);\n \n-      if (leaving_for_scope && VAR_P (decl)\n-\t  /* It's hard to make this ARM compatibility hack play nicely with\n-\t     lambdas, and it really isn't necessary in C++11 mode.  */\n-\t  && cxx_dialect < cxx11\n-\t  && name)\n-\t{\n-\t  cxx_binding *ob = outer_binding (name,\n-\t\t\t\t\t   IDENTIFIER_BINDING (name),\n-\t\t\t\t\t   /*class_p=*/true);\n-\t  tree ns_binding = NULL_TREE;\n-\t  if (!ob)\n-\t    ns_binding = get_namespace_binding (current_namespace, name);\n-\n-\t  if (ob && ob->scope == current_binding_level->level_chain)\n-\t    /* We have something like:\n-\n-\t\t int i;\n-\t\t for (int i; ;);\n-\n-\t       and we are leaving the `for' scope.  There's no reason to\n-\t       keep the binding of the inner `i' in this case.  */\n-\t    ;\n-\t  else if ((ob && (TREE_CODE (ob->value) == TYPE_DECL))\n-\t\t   || (ns_binding && TREE_CODE (ns_binding) == TYPE_DECL))\n-\t    /* Here, we have something like:\n-\n-\t\t typedef int I;\n-\n-\t\t void f () {\n-\t\t   for (int I; ;);\n-\t\t }\n-\n-\t       We must pop the for-scope binding so we know what's a\n-\t       type and what isn't.  */\n-\t    ;\n-\t  else\n-\t    {\n-\t      /* Mark this VAR_DECL as dead so that we can tell we left it\n-\t\t there only for backward compatibility.  */\n-\t      DECL_DEAD_FOR_LOCAL (link) = 1;\n-\n-\t      /* Keep track of what should have happened when we\n-\t\t popped the binding.  */\n-\t      if (ob && ob->value)\n-\t\t{\n-\t\t  SET_DECL_SHADOWED_FOR_VAR (link, ob->value);\n-\t\t  DECL_HAS_SHADOWED_FOR_VAR_P (link) = 1;\n-\t\t}\n-\n-\t      /* Add it to the list of dead variables in the next\n-\t\t outermost binding to that we can remove these when we\n-\t\t leave that binding.  */\n-\t      vec_safe_push (\n-\t\t  current_binding_level->level_chain->dead_vars_from_for,\n-\t\t  link);\n-\n-\t      /* Although we don't pop the cxx_binding, we do clear\n-\t\t its SCOPE since the scope is going away now.  */\n-\t      IDENTIFIER_BINDING (name)->scope\n-\t\t= current_binding_level->level_chain;\n-\n-\t      /* Don't remove the binding. */\n-\t      name = NULL_TREE;\n-\t    }\n-\t}\n       /* Remove the binding.  */\n       if (TREE_CODE (decl) == LABEL_DECL)\n \tpop_local_label (name, decl);\n       else\n \tpop_local_binding (name, decl);\n     }\n \n-  /* Remove declarations for any `for' variables from inner scopes\n-     that we kept around.  */\n-  FOR_EACH_VEC_SAFE_ELT_REVERSE (current_binding_level->dead_vars_from_for,\n-\t\t\t         ix, decl)\n-    pop_local_binding (DECL_NAME (decl), decl);\n-\n   /* Restore the IDENTIFIER_TYPE_VALUEs.  */\n   for (link = current_binding_level->type_shadowed;\n        link; link = TREE_CHAIN (link))\n@@ -4170,11 +4091,6 @@ cxx_init_decl_processing (void)\n   pop_namespace ();\n \n   flag_noexcept_type = (cxx_dialect >= cxx17);\n-  /* There's no fixed location for <command-line>, the current\n-     location is <builtins>, which is somewhat confusing.  */\n-  if (!flag_new_for_scope)\n-    warning_at (UNKNOWN_LOCATION, OPT_Wdeprecated,\n-\t\t\"%<-fno-for-scope%> is deprecated\");\n \n   c_common_nodes_and_builtins ();\n "}, {"sha": "8d1748a285a9d24abe7a65a159bec37a1791ff69", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -144,9 +144,7 @@ find_local_binding (cp_binding_level *b, tree name)\n   if (cxx_binding *binding = IDENTIFIER_BINDING (name))\n     for (;; b = b->level_chain)\n       {\n-\tif (binding->scope == b\n-\t    && !(VAR_P (binding->value)\n-\t\t && DECL_DEAD_FOR_LOCAL (binding->value)))\n+\tif (binding->scope == b)\n \t  return binding;\n \n \t/* Cleanup contours are transparent to the language.  */\n@@ -2632,8 +2630,6 @@ check_local_shadow (tree decl)\n       old = binding->value;\n       old_scope = binding->scope;\n     }\n-  while (old && VAR_P (old) && DECL_DEAD_FOR_LOCAL (old))\n-    old = DECL_SHADOWED_FOR_VAR (old);\n \n   tree shadowed = NULL_TREE;\n   if (old\n@@ -3213,84 +3209,6 @@ push_local_binding (tree id, tree decl, bool is_using)\n   add_decl_to_level (b, decl);\n }\n \n-/* Check to see whether or not DECL is a variable that would have been\n-   in scope under the ARM, but is not in scope under the ANSI/ISO\n-   standard.  If so, issue an error message.  If name lookup would\n-   work in both cases, but return a different result, this function\n-   returns the result of ANSI/ISO lookup.  Otherwise, it returns\n-   DECL.\n-\n-   FIXME: Scheduled for removal after GCC-8 is done.  */\n-\n-tree\n-check_for_out_of_scope_variable (tree decl)\n-{\n-  tree shadowed;\n-\n-  /* We only care about out of scope variables.  */\n-  if (!(VAR_P (decl) && DECL_DEAD_FOR_LOCAL (decl)))\n-    return decl;\n-\n-  shadowed = DECL_HAS_SHADOWED_FOR_VAR_P (decl)\n-    ? DECL_SHADOWED_FOR_VAR (decl) : NULL_TREE ;\n-  while (shadowed != NULL_TREE && VAR_P (shadowed)\n-\t && DECL_DEAD_FOR_LOCAL (shadowed))\n-    shadowed = DECL_HAS_SHADOWED_FOR_VAR_P (shadowed)\n-      ? DECL_SHADOWED_FOR_VAR (shadowed) : NULL_TREE;\n-  if (!shadowed)\n-    shadowed = find_namespace_value (current_namespace, DECL_NAME (decl));\n-  if (shadowed)\n-    {\n-      if (!DECL_ERROR_REPORTED (decl)\n-\t  && flag_permissive\n-\t  && warning (0, \"name lookup of %qD changed\", DECL_NAME (decl)))\n-\t{\n-\t  inform (DECL_SOURCE_LOCATION (shadowed),\n-\t\t  \"matches this %qD under ISO standard rules\", shadowed);\n-\t  inform (DECL_SOURCE_LOCATION (decl),\n-\t\t  \"  matches this %qD under old rules\", decl);\n-\t}\n-      DECL_ERROR_REPORTED (decl) = 1;\n-      return shadowed;\n-    }\n-\n-  /* If we have already complained about this declaration, there's no\n-     need to do it again.  */\n-  if (DECL_ERROR_REPORTED (decl))\n-    return decl;\n-\n-  DECL_ERROR_REPORTED (decl) = 1;\n-\n-  if (TREE_TYPE (decl) == error_mark_node)\n-    return decl;\n-\n-  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (decl)))\n-    {\n-      error (\"name lookup of %qD changed for ISO %<for%> scoping\",\n-\t     DECL_NAME (decl));\n-      inform (DECL_SOURCE_LOCATION (decl),\n-\t      \"cannot use obsolete binding %qD because it has a destructor\",\n-\t      decl);\n-      return error_mark_node;\n-    }\n-  else\n-    {\n-      permerror (input_location,\n-\t\t \"name lookup of %qD changed for ISO %<for%> scoping\",\n-\t         DECL_NAME (decl));\n-      if (flag_permissive)\n-        inform (DECL_SOURCE_LOCATION (decl),\n-\t\t\"using obsolete binding %qD\", decl);\n-      static bool hint;\n-      if (!hint)\n-\tinform (input_location, flag_permissive\n-\t\t? \"this flexibility is deprecated and will be removed\"\n-\t\t: \"if you use %<-fpermissive%> G++ will accept your code\");\n-      hint = true;\n-    }\n-\n-  return decl;\n-}\n \f\n /* true means unconditionally make a BLOCK for the next level pushed.  */\n "}, {"sha": "ae225db3ba5499c25c4c9bc5b629c0477da30277", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -205,11 +205,6 @@ struct GTY(()) cp_binding_level {\n   /* The binding level which this one is contained in (inherits from).  */\n   cp_binding_level *level_chain;\n \n-  /* List of VAR_DECLS saved from a previous for statement.\n-      These would be dead in ISO-conforming code, but might\n-      be referenced in ARM-era code.  */\n-  vec<tree, va_gc> *dead_vars_from_for;\n-\n   /* STATEMENT_LIST for statements in this binding contour.\n       Only used at present for SK_CLEANUP temporary bindings.  */\n   tree statement_list;"}, {"sha": "f8ecf030c0d8bd2e88c1bcc39c85740717e0c287", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -5585,27 +5585,10 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    if (parser->local_variables_forbidden_p\n \t\t&& local_variable_p (decl))\n \t      {\n-\t\t/* It might be that we only found DECL because we are\n-\t\t   trying to be generous with pre-ISO scoping rules.\n-\t\t   For example, consider:\n-\n-\t\t     int i;\n-\t\t     void g() {\n-\t\t       for (int i = 0; i < 10; ++i) {}\n-\t\t       extern void f(int j = i);\n-\t\t     }\n-\n-\t\t   Here, name look up will originally find the out\n-\t\t   of scope `i'.  We need to issue a warning message,\n-\t\t   but then use the global `i'.  */\n-\t\tdecl = check_for_out_of_scope_variable (decl);\n-\t\tif (local_variable_p (decl))\n-\t\t  {\n-\t\t    error_at (id_expr_token->location,\n-\t\t\t      \"local variable %qD may not appear in this context\",\n-\t\t\t      decl.get_value ());\n-\t\t    return error_mark_node;\n-\t\t  }\n+\t\terror_at (id_expr_token->location,\n+\t\t\t  \"local variable %qD may not appear in this context\",\n+\t\t\t  decl.get_value ());\n+\t\treturn error_mark_node;\n \t      }\n \t  }\n "}, {"sha": "c604f46f7425fc385b5873552b53a3317d489f03", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -13683,9 +13683,6 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t  }\n \tif (VAR_P (r))\n \t  {\n-\t    /* Even if the original location is out of scope, the\n-\t       newly substituted one is not.  */\n-\t    DECL_DEAD_FOR_LOCAL (r) = 0;\n \t    DECL_INITIALIZED_P (r) = 0;\n \t    DECL_TEMPLATE_INSTANTIATED (r) = 0;\n \t    if (type == error_mark_node)"}, {"sha": "2b2b51b2a7e339238e855b3c80e013013d2b8a1c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -934,9 +934,7 @@ finish_return_stmt (tree expr)\n tree\n begin_for_scope (tree *init)\n {\n-  tree scope = NULL_TREE;\n-  if (flag_new_for_scope)\n-    scope = do_pushlevel (sk_for);\n+  tree scope = do_pushlevel (sk_for);\n \n   if (processing_template_decl)\n     *init = push_stmt_list ();\n@@ -960,10 +958,10 @@ begin_for_stmt (tree scope, tree init)\n \n   if (scope == NULL_TREE)\n     {\n-      gcc_assert (!init || !flag_new_for_scope);\n-      if (!init)\n-\tscope = begin_for_scope (&init);\n+      gcc_assert (!init);\n+      scope = begin_for_scope (&init);\n     }\n+\n   FOR_INIT_STMT (r) = init;\n   FOR_SCOPE (r) = scope;\n \n@@ -1057,16 +1055,12 @@ finish_for_stmt (tree for_stmt)\n     FOR_BODY (for_stmt) = do_poplevel (FOR_BODY (for_stmt));\n \n   /* Pop the scope for the body of the loop.  */\n-  if (flag_new_for_scope)\n-    {\n-      tree scope;\n-      tree *scope_ptr = (TREE_CODE (for_stmt) == RANGE_FOR_STMT\n-\t\t\t ? &RANGE_FOR_SCOPE (for_stmt)\n-\t\t\t : &FOR_SCOPE (for_stmt));\n-      scope = *scope_ptr;\n-      *scope_ptr = NULL;\n-      add_stmt (do_poplevel (scope));\n-    }\n+  tree *scope_ptr = (TREE_CODE (for_stmt) == RANGE_FOR_STMT\n+\t\t     ? &RANGE_FOR_SCOPE (for_stmt)\n+\t\t     : &FOR_SCOPE (for_stmt));\n+  tree scope = *scope_ptr;\n+  *scope_ptr = NULL;\n+  add_stmt (do_poplevel (scope));\n }\n \n /* Begin a range-for-statement.  Returns a new RANGE_FOR_STMT.\n@@ -1077,18 +1071,15 @@ finish_for_stmt (tree for_stmt)\n tree\n begin_range_for_stmt (tree scope, tree init)\n {\n-  tree r;\n-\n   begin_maybe_infinite_loop (boolean_false_node);\n \n-  r = build_stmt (input_location, RANGE_FOR_STMT,\n-\t\t  NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE);\n+  tree r = build_stmt (input_location, RANGE_FOR_STMT,\n+\t\t       NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE);\n \n   if (scope == NULL_TREE)\n     {\n-      gcc_assert (!init || !flag_new_for_scope);\n-      if (!init)\n-\tscope = begin_for_scope (&init);\n+      gcc_assert (!init);\n+      scope = begin_for_scope (&init);\n     }\n \n   /* RANGE_FOR_STMTs do not use nor save the init tree, so we\n@@ -3560,11 +3551,6 @@ finish_id_expression (tree id_expression,\n \t  else\n \t    decl = id_expression;\n \t}\n-      /* If DECL is a variable that would be out of scope under\n-\t ANSI/ISO rules, but in scope in the ARM, name lookup\n-\t will succeed.  Issue a diagnostic here.  */\n-      else\n-\tdecl = check_for_out_of_scope_variable (decl);\n \n       /* Remember that the name was used in the definition of\n \t the current class so that we can check later to see if"}, {"sha": "9d085844cfde04b8f0a72f512b999c21c70b20cb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -23840,17 +23840,6 @@ superior alternatives.  Using the old features might cause a warning in\n some cases that the feature will be dropped in the future.  In other\n cases, the feature might be gone already.\n \n-While the list below is not exhaustive, it documents some of the options\n-that are now deprecated or have been removed:\n-\n-@table @code\n-\n-@item -fno-for-scope\n-This option provides compatibility with pre-standard C++.\n-@xref{Backwards Compatibility}.\n-\n-@end table\n-\n G++ allows a virtual function returning @samp{void *} to be overridden\n by one returning a different pointer type.  This extension to the\n covariant return type rules is now deprecated and will be removed from a\n@@ -23893,25 +23882,14 @@ liable to disappear in future versions of G++.} They should be considered\n deprecated.   @xref{Deprecated Features}.\n \n @table @code\n-@item For scope\n-If a variable is declared at for scope, it used to remain in scope\n-until the end of the scope that contained the for statement (rather\n-than just within the for scope).  The deprecated\n-@option{-fno-for-scope} option enables this non-standard behavior.\n-Without the option, G++ retains this, but issues a warning, if such a\n-variable is accessed outside the for scope.\n-\n-The behavior is deprecated, only available with @option{-std=c++98}\n-@option{-std=gnu++98} languages and you must use the\n-@option{-fpermissive} option to enable it.  The behavior will be\n-removed.\n \n @item Implicit C language\n Old C system header files did not contain an @code{extern \"C\" @{@dots{}@}}\n scope to set the language.  On such systems, all header files are\n implicitly scoped inside a C language scope.  Also, an empty prototype\n @code{()} is treated as an unspecified number of arguments, rather\n than no arguments, as C++ demands.\n+\n @end table\n \n @c  LocalWords:  emph deftypefn builtin ARCv2EM SIMD builtins msimd"}, {"sha": "94815ca9608dda8918eac670f73b6f992c787f6c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -195,7 +195,7 @@ in the following sections.\n -fconstexpr-depth=@var{n}  -fconstexpr-loop-limit=@var{n} @gol\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs @gol\n--ffor-scope  -fno-for-scope  -fno-gnu-keywords @gol\n+-fno-gnu-keywords @gol\n -fno-implicit-templates @gol\n -fno-implicit-inline-templates @gol\n -fno-implement-inlines  -fms-extensions @gol\n@@ -2490,21 +2490,6 @@ On targets that support symbol aliases, the default is\n @option{-fextern-tls-init}.  On targets that do not support symbol\n aliases, the default is @option{-fno-extern-tls-init}.\n \n-@item -ffor-scope\n-@itemx -fno-for-scope\n-@opindex ffor-scope\n-@opindex fno-for-scope\n-If @option{-ffor-scope} is specified, the scope of variables declared in\n-a @i{for-init-statement} is limited to the @code{for} loop itself,\n-as specified by the C++ standard.\n-If @option{-fno-for-scope} is specified, the scope of variables declared in\n-a @i{for-init-statement} extends to the end of the enclosing scope,\n-as was the case in old versions of G++, and other (traditional)\n-implementations of C++.\n-\n-This option is deprecated and the associated non-standard\n-functionality will be removed.\n-\n @item -fno-gnu-keywords\n @opindex fno-gnu-keywords\n Do not recognize @code{typeof} as a keyword, so that code can use this"}, {"sha": "ec829b9227056e4d018702c50d13063e5661a073", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -1,3 +1,7 @@\n+2018-05-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* objcp-lang.c (objcxx_init_ts): Don't call init_shadowed_var_for_decl.\n+\n 2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years.\n@@ -28,7 +32,7 @@\n \n \t* objcp-decl.c: Remove unused header files.\n \t* objcp-lang.c: Likewise.\n-\t\n+\n 2015-10-29  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* objcp-decl.c: Reorder #include's and remove duplicates.\n@@ -43,7 +47,7 @@\n \n \t* objcp-decl.c: Do not include input.h, line-map.h or is-a.h.\n \t* objcp-lang.c: Likewise.\n-\t\n+\n 2015-06-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* objcp-decl.c : Adjust include files."}, {"sha": "0372b6090b0dde7ee7b778fba4d99910f9641c38", "filename": "gcc/objcp/objcp-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -87,8 +87,6 @@ objcxx_init_ts (void)\n {\n   objc_common_init_ts ();\n   cp_common_init_ts ();\n-\n-  init_shadowed_var_for_decl ();\n }\n \n #include \"gtype-objcp.h\""}, {"sha": "df4bacbdb870163109a87711f26c48635881215c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336e846de46aa5523a96f712d247c31a07c6e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee336e846de46aa5523a96f712d247c31a07c6e1", "patch": "@@ -1,3 +1,10 @@\n+2018-05-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/cpp0x/range-for10.C: Delete.\n+\t* g++.dg/ext/forscope1.C: Delete.\n+\t* g++.dg/ext/forscope2.C: Delete.\n+\t* g++.dg/template/for1.C: Delete.\n+\n 2018-05-07  Jeff Law  <law@redhat.com>\n \n \t* gfortran.dg/linefile.f90: New test."}, {"sha": "7288a3b8b0c7cfae19553ae38e085bee5e03981a", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for10.C", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for10.C?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -1,18 +0,0 @@\n-// PR c++/47388\n-// { dg-do compile { target c++11 } }\n-// { dg-options \"-fno-for-scope -Wno-deprecated\" }\n-\n-template <int>\n-void\n-foo ()\n-{\n-  int a[] = { 1, 2, 3, 4 };\n-  for (int i : a)\n-    ;\n-}\n-\n-void\n-bar ()\n-{\n-  foo <0> ();\n-}"}, {"sha": "cf0cb2c5c9b13c6acec3bfe771427ab14da1b198", "filename": "gcc/testsuite/g++.dg/ext/forscope1.C", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope1.C?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -1,27 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-fno-for-scope -Wno-deprecated\" }\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-// Contributed by Nathan Sidwell 4 Sept 2001 <nathan@codesourcery.com>\n-\n-// Bug 4206. We were nesting SCOPE_STMTs badly.\n-\n-\n-struct A\n-{\n-  A ();\n-  ~A ();\n-};\n-\n-\n-void Go( )\n-{\n-  for (int i = 1;;)\n-    {\n-      switch (1) {\n-      default: {}\n-      }\n-      A d;\n-    }\n-  i;\n-}"}, {"sha": "3490d3f285c4c69642262a6025ec91ac8bf4e7a4", "filename": "gcc/testsuite/g++.dg/ext/forscope2.C", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope2.C?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -1,27 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-fpermissive -std=c++98\" }\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-// Contributed by Nathan Sidwell 4 Sept 2001 <nathan@codesourcery.com>\n-\n-// Bug 4206. We were nesting SCOPE_STMTs badly.\n-\n-\n-struct A\n-{\n-  A ();\n-  ~A ();\n-};\n-\n-\n-void Go( )\n-{\n-  for (int i = 1;;)\t// { dg-message \"using obsolete binding\" }\n-    {\n-      switch (1) {\n-      default: {}\n-      }\n-      A d;\n-    }\n-  i;  // { dg-warning \"name lookup\" }\n-}"}, {"sha": "ebb444531e63b662697d45907bff28c4853448e0", "filename": "gcc/testsuite/g++.dg/template/for1.C", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffor1.C?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -1,23 +0,0 @@\n-// PR c++/47388\n-// { dg-do compile }\n-// { dg-options \"-fno-for-scope -Wno-deprecated\" }\n-\n-template <int>\n-void\n-foo ()\n-{\n-  int i;\n-  for (i = 0; i < 16; i++)\n-    ;\n-  for (int j = 0; j < 16; j++)\n-    ;\n-  if (j != 16)\n-    for (;;)\n-      ;\n-}\n-\n-void\n-bar ()\n-{\n-  foo <0> ();\n-}"}]}