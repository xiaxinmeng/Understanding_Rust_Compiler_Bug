{"sha": "3db8e9c2422d924a958336fd0871b24cce3e65d1", "node_id": "C_kwDOANBUbNoAKDNkYjhlOWMyNDIyZDkyNGE5NTgzMzZmZDA4NzFiMjRjY2UzZTY1ZDE", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-21T06:56:08Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-26T03:20:46Z"}, "message": "Support 2-instruction vector shuffle for V4SI/V4SF in ix86_expand_vec_perm_const_1.\n\n2022-09-23  Hongtao Liu  <hongtao.liu@intel.com>\n\t    Liwei Xu  <liwei.xu@intel.com>\n\ngcc/ChangeLog:\n\n\tPR target/53346\n\t* config/i386/i386-expand.cc (expand_vec_perm_shufps_shufps):\n\tNew function.\n\t(ix86_expand_vec_perm_const_1): Insert\n\texpand_vec_perm_shufps_shufps at the end of 2-instruction\n\texpand sequence.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr53346-1.c: New test.\n\t* gcc.target/i386/pr53346-2.c: New test.\n\t* gcc.target/i386/pr53346-3.c: New test.\n\t* gcc.target/i386/pr53346-4.c: New test.", "tree": {"sha": "65ef5d298143750d8328fe627a80ca4d932f28df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65ef5d298143750d8328fe627a80ca4d932f28df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3db8e9c2422d924a958336fd0871b24cce3e65d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db8e9c2422d924a958336fd0871b24cce3e65d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db8e9c2422d924a958336fd0871b24cce3e65d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db8e9c2422d924a958336fd0871b24cce3e65d1/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de613c6295ea50d75167eaf89f41074a69298108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de613c6295ea50d75167eaf89f41074a69298108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de613c6295ea50d75167eaf89f41074a69298108"}], "stats": {"total": 373, "additions": 373, "deletions": 0}, "files": [{"sha": "6baff6d0e61b20f32033c95db118d3ba125f1302", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=3db8e9c2422d924a958336fd0871b24cce3e65d1", "patch": "@@ -19604,6 +19604,119 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   return false;\n }\n \n+/* A subroutine of ix86_expand_vec_perm_const_1. Try to implement D\n+   in terms of a pair of shufps+ shufps/pshufd instructions.  */\n+static bool\n+expand_vec_perm_shufps_shufps (struct expand_vec_perm_d *d)\n+{\n+  unsigned char perm1[4];\n+  machine_mode vmode = d->vmode;\n+  bool ok;\n+  unsigned i, j, k, count = 0;\n+\n+  if (d->one_operand_p\n+      || (vmode != V4SImode && vmode != V4SFmode))\n+    return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  for (i = 0; i < 4; ++i)\n+    count += d->perm[i] > 3 ? 1 : 0;\n+\n+  gcc_assert (count & 3);\n+\n+  rtx tmp = gen_reg_rtx (vmode);\n+  /* 2 from op0 and 2 from op1.  */\n+  if (count == 2)\n+    {\n+      unsigned char perm2[4];\n+      for (i = 0, j = 0, k = 2; i < 4; ++i)\n+\tif (d->perm[i] & 4)\n+\t  {\n+\t    perm1[k++] = d->perm[i];\n+\t    perm2[i] = k - 1;\n+\t  }\n+\telse\n+\t  {\n+\t    perm1[j++] = d->perm[i];\n+\t    perm2[i] = j - 1;\n+\t  }\n+\n+      /* shufps.  */\n+      ok = expand_vselect_vconcat (tmp, d->op0, d->op1,\n+\t\t\t\t  perm1, d->nelt, false);\n+      gcc_assert (ok);\n+      if (vmode == V4SImode && TARGET_SSE2)\n+      /* pshufd.  */\n+\tok = expand_vselect (d->target, tmp,\n+\t\t\t     perm2, d->nelt, false);\n+      else\n+\t{\n+\t  /* shufps.  */\n+\t  perm2[2] += 4;\n+\t  perm2[3] += 4;\n+\t  ok = expand_vselect_vconcat (d->target, tmp, tmp,\n+\t\t\t\t       perm2, d->nelt, false);\n+\t}\n+      gcc_assert (ok);\n+    }\n+  /* 3 from one op and 1 from another.  */\n+  else\n+    {\n+      unsigned pair_idx = 8, lone_idx = 8, shift;\n+\n+      /* Find the lone index.  */\n+      for (i = 0; i < 4; ++i)\n+\tif ((d->perm[i] > 3 && count == 1)\n+\t    || (d->perm[i] < 4 && count == 3))\n+\t  lone_idx = i;\n+\n+      /* When lone_idx is not 0, it must from second op(count == 1).  */\n+      gcc_assert (count == (lone_idx ? 1 : 3));\n+\n+      /* Find the pair index that sits in the same half as the lone index.  */\n+      shift = lone_idx & 2;\n+      pair_idx = 1 - lone_idx + 2 * shift;\n+\n+      /* First permutate lone index and pair index into the same vector as\n+\t [ lone, lone, pair, pair ].  */\n+      perm1[1] = perm1[0]\n+\t= (count == 3) ? d->perm[lone_idx] : d->perm[lone_idx] - 4;\n+      perm1[3] = perm1[2]\n+\t= (count == 3) ? d->perm[pair_idx] : d->perm[pair_idx] + 4;\n+\n+      /* Alway put the vector contains lone indx at the first.  */\n+      if (count == 1)\n+\tstd::swap (d->op0, d->op1);\n+\n+      /* shufps.  */\n+      ok = expand_vselect_vconcat (tmp, d->op0, d->op1,\n+\t\t\t\t   perm1, d->nelt, false);\n+      gcc_assert (ok);\n+\n+      /* Refine lone and pair index to original order.  */\n+      perm1[shift] = lone_idx << 1;\n+      perm1[shift + 1] = pair_idx << 1;\n+\n+      /* Select the remaining 2 elements in another vector.  */\n+      for (i = 2 - shift; i < 4 - shift; ++i)\n+\tperm1[i] = lone_idx == 1 ? d->perm[i] + 4 : d->perm[i];\n+\n+      /* Adjust to original selector.  */\n+      if (lone_idx > 1)\n+\tstd::swap (tmp, d->op1);\n+\n+      /* shufps.  */\n+      ok = expand_vselect_vconcat (d->target, tmp, d->op1,\n+\t\t\t\t   perm1, d->nelt, false);\n+\n+      gcc_assert (ok);\n+    }\n+\n+  return true;\n+}\n+\n /* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement D\n    in terms of a pair of pshuflw + pshufhw instructions.  */\n \n@@ -22152,6 +22265,9 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_2perm_pblendv (d, true))\n     return true;\n \n+  if (expand_vec_perm_shufps_shufps (d))\n+    return true;\n+\n   /* Try sequences of three instructions.  */\n \n   if (expand_vec_perm_even_odd_pack (d))"}, {"sha": "6d230da632cc10bfdbab7216de3326b0fc0f9c9c", "filename": "gcc/testsuite/gcc.target/i386/pr53346-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-1.c?ref=3db8e9c2422d924a958336fd0871b24cce3e65d1", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O2 -mno-sse3\" } */\n+/* { dg-final { scan-assembler-times \"shufps\" 15 } } */\n+/* { dg-final { scan-assembler-times \"pshufd\" 2 } } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+v4si\n+__attribute__((noipa))\n+foo (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 2, 5, 3);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo1 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 5, 2, 3);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo2 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 2, 3, 5);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo3 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 4, 5, 6);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo4 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 3, 6, 7, 5);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo5 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 4, 7, 6);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo6 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 4, 3, 6);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo7 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 3, 4, 6);\n+}\n+\n+v4si\n+__attribute__((noipa))\n+foo8 (v4si a, v4si b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 4, 6, 3);\n+}\n+"}, {"sha": "0c6c7b35e014debe535f111a6b52a762678c44ec", "filename": "gcc/testsuite/gcc.target/i386/pr53346-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-2.c?ref=3db8e9c2422d924a958336fd0871b24cce3e65d1", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+#include \"pr53346-1.c\"\n+\n+static void\n+sse2_test ()\n+{\n+  v4si a = __extension__(v4si) { 0, 1, 2, 3 };\n+  v4si b = __extension__(v4si) { 4, 5, 6, 7 };\n+  v4si exp = __extension__(v4si) { 1, 2, 5, 3 };\n+  v4si dest;\n+  dest = foo (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 1, 5, 2, 3 };\n+  dest = foo1 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 1, 2, 3, 5 };\n+  dest = foo2 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 1, 4, 5, 6 };\n+  dest = foo3 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 3, 6, 7, 5 };\n+  dest = foo4 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 2, 4, 7, 6 };\n+  dest = foo5 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 2, 4, 3, 6 };\n+  dest = foo6 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 2, 3, 4, 6 };\n+  dest = foo7 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4si) { 2, 4, 6, 3 };\n+  dest = foo8 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+}"}, {"sha": "0b204f6f21002fd03b93e473bbbe0396064d3ce3", "filename": "gcc/testsuite/gcc.target/i386/pr53346-3.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-3.c?ref=3db8e9c2422d924a958336fd0871b24cce3e65d1", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O2 -mno-sse3\" } */\n+/* { dg-final { scan-assembler-times \"shufps\" 17 } } */\n+\n+typedef float v4sf __attribute__((vector_size(16)));\n+\n+v4sf\n+__attribute__((noipa))\n+foo (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 2, 5, 3);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo1 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 5, 2, 3);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo2 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 2, 3, 5);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo3 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 1, 4, 5, 6);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo4 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 3, 6, 7, 5);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo5 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 4, 7, 6);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo6 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 4, 3, 6);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo7 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 3, 4, 6);\n+}\n+\n+v4sf\n+__attribute__((noipa))\n+foo8 (v4sf a, v4sf b)\n+{\n+  return __builtin_shufflevector (a, b, 2, 4, 6, 3);\n+}\n+"}, {"sha": "9e4e45bd5844442caa43210acf36ddacbc375bef", "filename": "gcc/testsuite/gcc.target/i386/pr53346-4.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db8e9c2422d924a958336fd0871b24cce3e65d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53346-4.c?ref=3db8e9c2422d924a958336fd0871b24cce3e65d1", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+#include \"pr53346-3.c\"\n+\n+static void\n+sse2_test ()\n+{\n+  v4sf a = __extension__(v4sf) { 0, 1, 2, 3 };\n+  v4sf b = __extension__(v4sf) { 4, 5, 6, 7 };\n+  v4sf exp = __extension__(v4sf) { 1, 2, 5, 3 };\n+  v4sf dest;\n+  dest = foo (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 1, 5, 2, 3 };\n+  dest = foo1 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 1, 2, 3, 5 };\n+  dest = foo2 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 1, 4, 5, 6 };\n+  dest = foo3 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 3, 6, 7, 5 };\n+  dest = foo4 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 2, 4, 7, 6 };\n+  dest = foo5 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 2, 4, 3, 6 };\n+  dest = foo6 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 2, 3, 4, 6 };\n+  dest = foo7 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+  exp = __extension__ (v4sf) { 2, 4, 6, 3 };\n+  dest = foo8 (a, b);\n+  if (__builtin_memcmp (&dest, &exp, 16))\n+    __builtin_abort ();\n+\n+}"}]}