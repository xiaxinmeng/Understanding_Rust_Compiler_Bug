{"sha": "48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhkMWMzYzU2OGMxNDE3Yjg2ZWQ5ZTIzZjQ4YzVkNDM0NGEyZDA5Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-11-13T22:15:17Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-11-13T22:15:17Z"}, "message": "re PR libstdc++/8230 (Buggy allocator behaviour)\n\n\n2002-11-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/8230\n\t* include/bits/vector.tcc (vector::reserve): Throw length_error if\n\trequested size is bigger than max_size().\n\t* include/bits/stl_bvector.h (vector<bool>::reserve): Same.\n\t* testsuite/23_containers/vector_capacity.cc (test02): Add.\n\nFrom-SVN: r59090", "tree": {"sha": "34209be2f1268c7cac587baa4d7ec94537df451b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34209be2f1268c7cac587baa4d7ec94537df451b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/comments", "author": null, "committer": null, "parents": [{"sha": "1a083c0e90c3b466525ad1d31fb9e7af542da55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a083c0e90c3b466525ad1d31fb9e7af542da55c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a083c0e90c3b466525ad1d31fb9e7af542da55c"}], "stats": {"total": 94, "additions": 73, "deletions": 21}, "files": [{"sha": "faa6414bd7084d85ffc4d10a925c9a41681dd9c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "patch": "@@ -1,10 +1,18 @@\n+2002-11-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/8230\n+\t* include/bits/vector.tcc (vector::reserve): Throw length_error if\n+\trequested size is bigger than max_size().\n+\t* include/bits/stl_bvector.h (vector<bool>::reserve): Same.\n+\t* testsuite/23_containers/vector_capacity.cc (test02): Add.\n+\t\n 2002-11-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/linker-map.gnu: Export all _S_construct.\n \n 2002-11-13  Loren J. Rittle  <ljrittle@acm.org>\n \n-\tlibstdc++/7445\n+\tPR libstdc++/7445\n \t* src/locale.cc (std::locale::classic()): Weaken locking protocol.\n \n 2002-11-13  Jonathan Wakely  <redi@gcc.gnu.org>"}, {"sha": "2c97d470582e3588aee8b5c68c3a9a55ea145890", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "patch": "@@ -604,7 +604,9 @@ template <typename _Alloc>\n     }    \n   \n     void reserve(size_type __n) {\n-      if (capacity() < __n) {\n+      if (__n > this->max_size())\n+\t__throw_length_error(\"vector::reserve\");\n+      if (this->capacity() < __n) {\n         _Bit_type * __q = _M_bit_alloc(__n);\n         _M_finish = copy(begin(), end(), iterator(__q, 0));\n         _M_deallocate();"}, {"sha": "4e742dd867233444e480318b5fc1a2412c218f69", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "patch": "@@ -68,16 +68,18 @@ namespace std\n     vector<_Tp,_Alloc>::\n     reserve(size_type __n)\n     {\n-      if (capacity() < __n)\n-      {\n-        const size_type __old_size = size();\n-        pointer __tmp = _M_allocate_and_copy(__n, _M_start, _M_finish);\n-        _Destroy(_M_start, _M_finish);\n-        _M_deallocate(_M_start, _M_end_of_storage - _M_start);\n-        _M_start = __tmp;\n-        _M_finish = __tmp + __old_size;\n-        _M_end_of_storage = _M_start + __n;\n-      }\n+      if (__n > this->max_size())\n+\t__throw_length_error(\"vector::reserve\");\n+      if (this->capacity() < __n)\n+\t{\n+\t  const size_type __old_size = size();\n+\t  pointer __tmp = _M_allocate_and_copy(__n, _M_start, _M_finish);\n+\t  _Destroy(_M_start, _M_finish);\n+\t  _M_deallocate(_M_start, _M_end_of_storage - _M_start);\n+\t  _M_start = __tmp;\n+\t  _M_finish = __tmp + __old_size;\n+\t  _M_end_of_storage = _M_start + __n;\n+\t}\n     }\n   \n   template <typename _Tp, typename _Alloc>"}, {"sha": "e73b15a3246876741053bd57cb616f6f761aff07", "filename": "libstdc++-v3/testsuite/23_containers/vector_capacity.cc", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_capacity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d1c3c568c1417b86ed9e23f48c5d4344a2d096/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_capacity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_capacity.cc?ref=48d1c3c568c1417b86ed9e23f48c5d4344a2d096", "patch": "@@ -1,7 +1,7 @@\n // 1999-05-07\n // bkoz \n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,16 +22,16 @@\n // 23.2.4.2 vector capacity\n \n #include <vector>\n+#include <stdexcept>\n #include <testsuite_hooks.h>\n \n template<typename T>\n   struct A { };\n \n struct B { };\n \n-bool test01()\n+void test01()\n {\n-\n   // non POD types\n   bool test = true;\n   std::vector< A<B> > vec01;\n@@ -51,17 +51,57 @@ bool test01()\n   vec01.resize(sz01);\n   sz02 = vec01.size();\n   VERIFY( sz01 == sz02 );\n+}\n \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  \n-  return test;\n+// libstdc++/8230\n+void test02()\n+{\n+  bool test = true;\n+\n+  {\n+    std::vector<int>  array;\n+    const std::size_t size = array.max_size();\n+    try \n+      {\n+\tarray.reserve(size);\n+      } \n+    catch (const std::length_error& error) \n+      {\n+\ttest &= false;\n+      }\n+    catch (const std::bad_alloc& error)\n+      {\n+\ttest &= true;\n+      }\n+    catch (...)\n+      {\n+\ttest &= false;\n+      }\n+    VERIFY( test );\n+  }\n+\n+  {\n+    std::vector<int>  array;\n+    const std::size_t size = array.max_size() + 1;\n+    try \n+      {\n+\tarray.reserve(size);\n+      } \n+    catch (const std::length_error& error) \n+      {\n+\ttest &= true;\n+      }\n+    catch (...)\n+      {\n+\ttest &= false;\n+      }\n+    VERIFY( test );\n+  }\n }\n \n int main()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }"}]}