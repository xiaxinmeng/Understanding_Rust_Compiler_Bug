{"sha": "e40b6fc7a16e78d6c806545dbe64430db003a66a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwYjZmYzdhMTZlNzhkNmM4MDY1NDVkYmU2NDQzMGRiMDAzYTY2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-22T22:36:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-22T22:36:20Z"}, "message": "re PR c++/79664 (ICE with #pragma omp parallel in constexpr function)\n\n\tPR c++/79664\n\t* parser.c (cp_parser_omp_teams, cp_parser_omp_target): Use\n\tSET_EXPR_LOCATION on OMP_TARGET/OMP_TEAMS tree.\n\t* constexpr.c (potential_constant_expression_1): Handle\n\tOMP_*, OACC_* and CILK_* trees.  Use error_at with\n\tEXPR_LOC_OR_LOC (t, input_location) computed early\n\tinstead of error, or error_at with location_of (t).\n\n\t* g++.dg/gomp/teams-1.C: Adjust expected diagnostic location.\n\t* g++.dg/cpp1y/constexpr-throw.C: Likewise.\n\t* g++.dg/gomp/pr79664.C: New test.\n\nFrom-SVN: r245662", "tree": {"sha": "e23a668b7cc255c235fd2264ebcb71d90ea00151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e23a668b7cc255c235fd2264ebcb71d90ea00151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e40b6fc7a16e78d6c806545dbe64430db003a66a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40b6fc7a16e78d6c806545dbe64430db003a66a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e40b6fc7a16e78d6c806545dbe64430db003a66a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40b6fc7a16e78d6c806545dbe64430db003a66a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe8ece053b4e3f5570881c774cd3f76b9fb41360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8ece053b4e3f5570881c774cd3f76b9fb41360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8ece053b4e3f5570881c774cd3f76b9fb41360"}], "stats": {"total": 269, "additions": 242, "deletions": 27}, "files": [{"sha": "e69e2eafdf1d3baf6d5cbbd8d9135ed28e468ecd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e40b6fc7a16e78d6c806545dbe64430db003a66a", "patch": "@@ -1,3 +1,13 @@\n+2017-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79664\n+\t* parser.c (cp_parser_omp_teams, cp_parser_omp_target): Use\n+\tSET_EXPR_LOCATION on OMP_TARGET/OMP_TEAMS tree.\n+\t* constexpr.c (potential_constant_expression_1): Handle\n+\tOMP_*, OACC_* and CILK_* trees.  Use error_at with\n+\tEXPR_LOC_OR_LOC (t, input_location) computed early\n+\tinstead of error, or error_at with location_of (t).\n+\n 2017-02-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79653"}, {"sha": "81489570d282947e6ae97110c0a016b740fb7e95", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e40b6fc7a16e78d6c806545dbe64430db003a66a", "patch": "@@ -5001,10 +5001,11 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     return false;\n   if (t == NULL_TREE)\n     return true;\n+  location_t loc = EXPR_LOC_OR_LOC (t, input_location);\n   if (TREE_THIS_VOLATILE (t) && !DECL_P (t))\n     {\n       if (flags & tf_error)\n-        error (\"expression %qE has side-effects\", t);\n+        error_at (loc, \"expression %qE has side-effects\", t);\n       return false;\n     }\n   if (CONSTANT_CLASS_P (t))\n@@ -5086,8 +5087,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t      {\n \t\t/* fold_call_expr can't do anything with IFN calls.  */\n \t\tif (flags & tf_error)\n-\t\t  error_at (EXPR_LOC_OR_LOC (t, input_location),\n-\t\t\t    \"call to internal function %qE\", t);\n+\t\t  error_at (loc, \"call to internal function %qE\", t);\n \t\treturn false;\n \t      }\n \t  }\n@@ -5105,8 +5105,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t\t  {\n \t\t    if (flags & tf_error)\n \t\t      {\n-\t\t\terror_at (EXPR_LOC_OR_LOC (t, input_location),\n-\t\t\t\t  \"call to non-constexpr function %qD\", fun);\n+\t\t\terror_at (loc, \"call to non-constexpr function %qD\",\n+\t\t\t\t  fun);\n \t\t\texplain_invalid_constexpr_fn (fun);\n \t\t      }\n \t\t    return false;\n@@ -5199,8 +5199,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t    && !integer_zerop (from))\n \t  {\n \t    if (flags & tf_error)\n-\t      error_at (EXPR_LOC_OR_LOC (t, input_location),\n-\t\t\t\"reinterpret_cast from integer to pointer\");\n+\t      error_at (loc, \"reinterpret_cast from integer to pointer\");\n \t    return false;\n \t  }\n         return (RECUR (from, TREE_CODE (t) != VIEW_CONVERT_EXPR));\n@@ -5266,7 +5265,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t\t&& !DECL_DECLARED_CONSTEXPR_P (DECL_CONTEXT (x)))\n \t      {\n \t\tif (flags & tf_error)\n-\t\t  error (\"use of %<this%> in a constant expression\");\n+\t\t  error_at (loc, \"use of %<this%> in a constant expression\");\n \t\treturn false;\n \t      }\n \t    return true;\n@@ -5354,10 +5353,40 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case DELETE_EXPR:\n     case VEC_DELETE_EXPR:\n     case THROW_EXPR:\n+    case OMP_PARALLEL:\n+    case OMP_TASK:\n+    case OMP_FOR:\n+    case OMP_DISTRIBUTE:\n+    case OMP_TASKLOOP:\n+    case OMP_TEAMS:\n+    case OMP_TARGET_DATA:\n+    case OMP_TARGET:\n+    case OMP_SECTIONS:\n+    case OMP_ORDERED:\n+    case OMP_CRITICAL:\n+    case OMP_SINGLE:\n+    case OMP_SECTION:\n+    case OMP_MASTER:\n+    case OMP_TASKGROUP:\n+    case OMP_TARGET_UPDATE:\n+    case OMP_TARGET_ENTER_DATA:\n+    case OMP_TARGET_EXIT_DATA:\n     case OMP_ATOMIC:\n     case OMP_ATOMIC_READ:\n     case OMP_ATOMIC_CAPTURE_OLD:\n     case OMP_ATOMIC_CAPTURE_NEW:\n+    case OACC_PARALLEL:\n+    case OACC_KERNELS:\n+    case OACC_DATA:\n+    case OACC_HOST_DATA:\n+    case OACC_LOOP:\n+    case OACC_CACHE:\n+    case OACC_DECLARE:\n+    case OACC_ENTER_DATA:\n+    case OACC_EXIT_DATA:\n+    case OACC_UPDATE:\n+    case CILK_SIMD:\n+    case CILK_FOR:\n       /* GCC internal stuff.  */\n     case VA_ARG_EXPR:\n     case OBJ_TYPE_REF:\n@@ -5366,7 +5395,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case AT_ENCODE_EXPR:\n     fail:\n       if (flags & tf_error)\n-\terror (\"expression %qE is not a constant expression\", t);\n+\terror_at (loc, \"expression %qE is not a constant expression\", t);\n       return false;\n \n     case TYPEID_EXPR:\n@@ -5378,8 +5407,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t    && TYPE_POLYMORPHIC_P (TREE_TYPE (e)))\n           {\n             if (flags & tf_error)\n-              error (\"typeid-expression is not a constant expression \"\n-                     \"because %qE is of polymorphic type\", e);\n+              error_at (loc, \"typeid-expression is not a constant expression \"\n+\t\t\t\"because %qE is of polymorphic type\", e);\n             return false;\n           }\n         return true;\n@@ -5438,8 +5467,9 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t   constant expression.  */\n \t{\n \t  if (flags & tf_error)\n-\t    error (\"cast to non-integral type %qT in a constant expression\",\n-\t\t   TREE_TYPE (t));\n+\t    error_at (loc,\n+\t\t      \"cast to non-integral type %qT in a constant expression\",\n+\t\t      TREE_TYPE (t));\n \t  return false;\n \t}\n \n@@ -5504,8 +5534,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t{\n \t  if (flags & tf_error)\n \t    {\n-\t      error (\"temporary of non-literal type %qT in a \"\n-\t\t     \"constant expression\", TREE_TYPE (t));\n+\t      error_at (loc, \"temporary of non-literal type %qT in a \"\n+\t\t\t\"constant expression\", TREE_TYPE (t));\n \t      explain_non_literal_class (TREE_TYPE (t));\n \t    }\n \t  return false;\n@@ -5657,8 +5687,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n       if (COND_EXPR_IS_VEC_DELETE (t))\n \t{\n \t  if (flags & tf_error)\n-\t    error_at (location_of (t),\n-\t\t      \"%<delete[]%> is not a constant expression\");\n+\t    error_at (loc, \"%<delete[]%> is not a constant expression\");\n \t  return false;\n \t}\n       /* Fall through.  */\n@@ -5681,15 +5710,15 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t\t\t\t\t     want_rval, strict, tf_none))\n \t  return true;\n       if (flags & tf_error)\n-\terror (\"expression %qE is not a constant expression\", t);\n+\terror_at (loc, \"expression %qE is not a constant expression\", t);\n       return false;\n \n     case VEC_INIT_EXPR:\n       if (VEC_INIT_EXPR_IS_CONSTEXPR (t))\n \treturn true;\n       if (flags & tf_error)\n \t{\n-\t  error (\"non-constant array initialization\");\n+\t  error_at (loc, \"non-constant array initialization\");\n \t  diagnose_non_constexpr_vec_init (t);\n \t}\n       return false;\n@@ -5710,7 +5739,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \tif (breaks (target) || continues (target))\n \t  return true;\n \tif (flags & tf_error)\n-\t  error (\"%<goto%> is not a constant expression\");\n+\t  error_at (loc, \"%<goto%> is not a constant expression\");\n \treturn false;\n       }\n "}, {"sha": "ffc0e88742a4fa94131def1573989db5ce2e10dc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e40b6fc7a16e78d6c806545dbe64430db003a66a", "patch": "@@ -35526,6 +35526,7 @@ cp_parser_omp_teams (cp_parser *parser, cp_token *pragma_tok,\n \t  OMP_TEAMS_CLAUSES (ret) = clauses;\n \t  OMP_TEAMS_BODY (ret) = body;\n \t  OMP_TEAMS_COMBINED (ret) = 1;\n+\t  SET_EXPR_LOCATION (ret, loc);\n \t  return add_stmt (ret);\n \t}\n     }\n@@ -35547,6 +35548,7 @@ cp_parser_omp_teams (cp_parser *parser, cp_token *pragma_tok,\n   TREE_TYPE (stmt) = void_type_node;\n   OMP_TEAMS_CLAUSES (stmt) = clauses;\n   OMP_TEAMS_BODY (stmt) = cp_parser_omp_structured_block (parser, if_p);\n+  SET_EXPR_LOCATION (stmt, loc);\n \n   return add_stmt (stmt);\n }\n@@ -35965,6 +35967,7 @@ cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,\n \t  OMP_TARGET_CLAUSES (stmt) = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n \t  OMP_TARGET_BODY (stmt) = body;\n \t  OMP_TARGET_COMBINED (stmt) = 1;\n+\t  SET_EXPR_LOCATION (stmt, pragma_tok->location);\n \t  add_stmt (stmt);\n \t  pc = &OMP_TARGET_CLAUSES (stmt);\n \t  goto check_clauses;"}, {"sha": "9279d5842dbf6ac06e0215551957303d05e7422e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e40b6fc7a16e78d6c806545dbe64430db003a66a", "patch": "@@ -1,5 +1,10 @@\n 2017-02-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/79664\n+\t* g++.dg/gomp/teams-1.C: Adjust expected diagnostic location.\n+\t* g++.dg/cpp1y/constexpr-throw.C: Likewise.\n+\t* g++.dg/gomp/pr79664.C: New test.\n+\n \t* g++.dg/debug/dwarf2/inline-var-2.C: New test.\n \n 2017-02-22  Marek Polacek  <polacek@redhat.com>"}, {"sha": "21629a7990abd90bf7df28d894f67e029dbf9cde", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-throw.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C?ref=e40b6fc7a16e78d6c806545dbe64430db003a66a", "patch": "@@ -7,19 +7,19 @@ constexpr void f1() {\n \n constexpr void f2() {\n   if (true)\n-    throw;\n-} // { dg-error \"not a constant expression\" }\n+    throw;\t// { dg-error \"not a constant expression\" }\n+}\n \n constexpr void f3() {\n   if (false)\n     ;\n   else\n-    throw;\n-}// { dg-error \"not a constant expression\" }\n+    throw;\t// { dg-error \"not a constant expression\" }\n+}\n \n constexpr void f4() {\n-  throw;\n-}// { dg-error \"not a constant expression\" }\n+  throw;\t// { dg-error \"not a constant expression\" }\n+}\n \n constexpr int fun(int n) {\n   switch (n) {"}, {"sha": "582eedb6d6de8c0669c64ee15b445f1b2972e186", "filename": "gcc/testsuite/g++.dg/gomp/pr79664.C", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr79664.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr79664.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr79664.C?ref=e40b6fc7a16e78d6c806545dbe64430db003a66a", "patch": "@@ -0,0 +1,168 @@\n+// PR c++/79664\n+// { dg-do compile }\n+// { dg-options \"-std=c++14 -fopenmp\" }\n+\n+constexpr int\n+f1 ()\n+{\n+  int i = 0;\n+#pragma omp parallel for\t\t\t// { dg-error \"is not a constant expression\" }\n+  for (i = 0; i < 10; ++i)\n+    ;\n+  return 0;\n+}\n+\n+constexpr int\n+f2 ()\n+{\n+  int i = 0;\n+#pragma omp parallel\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 5;\n+  return 0;\n+}\n+\n+constexpr int\n+f3 ()\n+{\n+  int i = 0;\n+#pragma omp task\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 5;\n+  return 0;\n+}\n+\n+constexpr int\n+f4 ()\n+{\n+  int i = 0;\n+#pragma omp for\t\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  for (i = 0; i < 10; ++i)\n+    ;\n+  return 0;\n+}\n+\n+constexpr int\n+f5 ()\n+{\n+  int i = 0;\n+#pragma omp taskloop\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  for (i = 0; i < 10; ++i)\n+    ;\n+  return 0;\n+}\n+\n+constexpr int\n+f6 ()\n+{\n+  int i = 0;\n+#pragma omp target teams\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 5;\n+  return 0;\n+}\n+\n+constexpr int\n+f7 ()\n+{\n+  int i = 0;\n+#pragma omp target data map(tofrom:i)\t\t// { dg-error \"is not a constant expression\" }\n+  i = 5;\n+  return 0;\n+}\n+\n+constexpr int\n+f8 ()\n+{\n+  int i = 0;\n+#pragma omp target\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 5;\n+  return 0;\n+}\n+\n+constexpr int\n+f9 ()\n+{\n+  int i = 0;\n+#pragma omp sections\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  {\n+#pragma omp section\n+    i = 5;\n+  }\n+  return 0;\n+}\n+\n+constexpr int\n+f10 ()\n+{\n+  int i = 0;\n+#pragma omp ordered\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 1;\n+  return 0;\n+}\n+\n+constexpr int\n+f11 ()\n+{\n+  int i = 0;\n+#pragma omp critical\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 1;\n+  return 0;\n+}\n+\n+constexpr int\n+f12 ()\n+{\n+  int i = 0;\n+#pragma omp single\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 1;\n+  return 0;\n+}\n+\n+constexpr int\n+f13 ()\n+{\n+  int i = 0;\n+#pragma omp master\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 1;\n+  return 0;\n+}\n+\n+constexpr int\n+f14 ()\n+{\n+  int i = 0;\n+#pragma omp taskgroup\t\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 1;\n+  return 0;\n+}\n+\n+constexpr int\n+f15 ()\n+{\n+  int i = 0;\n+#pragma omp target update to(i)\t\t\t// { dg-error \"is not a constant expression\" }\n+  i = 1;\n+  return 0;\n+}\n+\n+constexpr int\n+f16 ()\n+{\n+  int i = 0;\n+#pragma omp target update to(i)\t\t\t// { dg-error \"is not a constant expression\" }\n+  return 0;\n+}\n+\n+constexpr int\n+f17 ()\n+{\n+  int i = 0;\n+#pragma omp target enter data map(to:i)\t\t// { dg-error \"is not a constant expression\" }\n+  return 0;\n+}\n+\n+constexpr int\n+f18 ()\n+{\n+  int i = 0;\n+#pragma omp target exit data map(from:i)\t// { dg-error \"is not a constant expression\" }\n+  return 0;\n+}"}, {"sha": "3cea407bf1bf6d68693524f6a39b101721389b19", "filename": "gcc/testsuite/g++.dg/gomp/teams-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b6fc7a16e78d6c806545dbe64430db003a66a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C?ref=e40b6fc7a16e78d6c806545dbe64430db003a66a", "patch": "@@ -26,7 +26,7 @@ foo (int x)\n   {\n   #pragma omp target teams\n     { case 0:; }\t\t// { dg-error \"jump\" }\n-\t\t\t\t// { dg-warning \"statement will never be executed\" \"\" { target *-*-* } 28 }\n+\t\t\t\t// { dg-warning \"statement will never be executed\" \"\" { target *-*-* } 27 }\n                                 // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n   }\n }"}]}