{"sha": "e429a50b9687625fb50edbffb17355369f555366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQyOWE1MGI5Njg3NjI1ZmI1MGVkYmZmYjE3MzU1MzY5ZjU1NTM2Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T20:04:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T20:04:14Z"}, "message": "final.c: Use rtx_sequence\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* final.c (get_attr_length_1): Replace GET_CODE check with a\n\tdyn_cast, introducing local \"seq\" and the use of methods of\n\trtx_sequence.\n\t(shorten_branches): Likewise, introducing local \"body_seq\".\n\tStrengthen local \"inner_insn\" from rtx to rtx_insn *.\n\t(reemit_insn_block_notes): Replace GET_CODE check with a\n\tdyn_cast, strengthening local \"body\" from rtx to rtx_sequence *.\n\tUse methods of rtx_sequence.\n\t(final_scan_insn): Likewise, introducing local \"seq\" for when\n\t\"body\" is known to be a SEQUENCE, using its methods.\n\nFrom-SVN: r214594", "tree": {"sha": "598f4525f8fea0227c616e26975ac35479c37bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/598f4525f8fea0227c616e26975ac35479c37bfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e429a50b9687625fb50edbffb17355369f555366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e429a50b9687625fb50edbffb17355369f555366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e429a50b9687625fb50edbffb17355369f555366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e429a50b9687625fb50edbffb17355369f555366/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a62e439fb7289b71e2e9eb500091b561a8fe1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a62e439fb7289b71e2e9eb500091b561a8fe1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a62e439fb7289b71e2e9eb500091b561a8fe1f7"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "c8b68a2ce953178cd9026300fbbc5f934a05e4d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e429a50b9687625fb50edbffb17355369f555366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e429a50b9687625fb50edbffb17355369f555366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e429a50b9687625fb50edbffb17355369f555366", "patch": "@@ -1,3 +1,16 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* final.c (get_attr_length_1): Replace GET_CODE check with a\n+\tdyn_cast, introducing local \"seq\" and the use of methods of\n+\trtx_sequence.\n+\t(shorten_branches): Likewise, introducing local \"body_seq\".\n+\tStrengthen local \"inner_insn\" from rtx to rtx_insn *.\n+\t(reemit_insn_block_notes): Replace GET_CODE check with a\n+\tdyn_cast, strengthening local \"body\" from rtx to rtx_sequence *.\n+\tUse methods of rtx_sequence.\n+\t(final_scan_insn): Likewise, introducing local \"seq\" for when\n+\t\"body\" is known to be a SEQUENCE, using its methods.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* except.c (can_throw_external): Strengthen local \"seq\" from rtx"}, {"sha": "15e58e5f760336df6def37eaa5a9954c130e7f0d", "filename": "gcc/final.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e429a50b9687625fb50edbffb17355369f555366/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e429a50b9687625fb50edbffb17355369f555366/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e429a50b9687625fb50edbffb17355369f555366", "patch": "@@ -407,9 +407,9 @@ get_attr_length_1 (rtx uncast_insn, int (*fallback_fn) (rtx))\n \n \telse if (GET_CODE (body) == ASM_INPUT || asm_noperands (body) >= 0)\n \t  length = asm_insn_count (body) * fallback_fn (insn);\n-\telse if (GET_CODE (body) == SEQUENCE)\n-\t  for (i = 0; i < XVECLEN (body, 0); i++)\n-\t    length += get_attr_length_1 (XVECEXP (body, 0, i), fallback_fn);\n+\telse if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (body))\n+\t  for (i = 0; i < seq->len (); i++)\n+\t    length += get_attr_length_1 (seq->insn (i), fallback_fn);\n \telse\n \t  length = fallback_fn (insn);\n \tbreak;\n@@ -1149,12 +1149,12 @@ shorten_branches (rtx_insn *first)\n \t}\n       else if (GET_CODE (body) == ASM_INPUT || asm_noperands (body) >= 0)\n \tinsn_lengths[uid] = asm_insn_count (body) * insn_default_length (insn);\n-      else if (GET_CODE (body) == SEQUENCE)\n+      else if (rtx_sequence *body_seq = dyn_cast <rtx_sequence *> (body))\n \t{\n \t  int i;\n \t  int const_delay_slots;\n #ifdef DELAY_SLOTS\n-\t  const_delay_slots = const_num_delay_slots (XVECEXP (body, 0, 0));\n+\t  const_delay_slots = const_num_delay_slots (body_seq->insn (0));\n #else\n \t  const_delay_slots = 0;\n #endif\n@@ -1163,14 +1163,14 @@ shorten_branches (rtx_insn *first)\n \t  /* Inside a delay slot sequence, we do not do any branch shortening\n \t     if the shortening could change the number of delay slots\n \t     of the branch.  */\n-\t  for (i = 0; i < XVECLEN (body, 0); i++)\n+\t  for (i = 0; i < body_seq->len (); i++)\n \t    {\n-\t      rtx inner_insn = XVECEXP (body, 0, i);\n+\t      rtx_insn *inner_insn = body_seq->insn (i);\n \t      int inner_uid = INSN_UID (inner_insn);\n \t      int inner_length;\n \n \t      if (GET_CODE (body) == ASM_INPUT\n-\t\t  || asm_noperands (PATTERN (XVECEXP (body, 0, i))) >= 0)\n+\t\t  || asm_noperands (PATTERN (inner_insn)) >= 0)\n \t\tinner_length = (asm_insn_count (PATTERN (inner_insn))\n \t\t\t\t* insn_default_length (inner_insn));\n \t      else\n@@ -1685,15 +1685,14 @@ reemit_insn_block_notes (void)\n       this_block = insn_scope (insn);\n       /* For sequences compute scope resulting from merging all scopes\n \t of instructions nested inside.  */\n-      if (GET_CODE (PATTERN (insn)) == SEQUENCE)\n+      if (rtx_sequence *body = dyn_cast <rtx_sequence *> (PATTERN (insn)))\n \t{\n \t  int i;\n-\t  rtx body = PATTERN (insn);\n \n \t  this_block = NULL;\n-\t  for (i = 0; i < XVECLEN (body, 0); i++)\n+\t  for (i = 0; i < body->len (); i++)\n \t    this_block = choose_inner_scope (this_block,\n-\t\t\t\t\t     insn_scope (XVECEXP (body, 0, i)));\n+\t\t\t\t\t     insn_scope (body->insn (i)));\n \t}\n       if (! this_block)\n \t{\n@@ -2614,7 +2613,7 @@ final_scan_insn (rtx uncast_insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \n \tapp_disable ();\n \n-\tif (GET_CODE (body) == SEQUENCE)\n+\tif (rtx_sequence *seq = dyn_cast <rtx_sequence *> (body))\n \t  {\n \t    /* A delayed-branch sequence */\n \t    int i;\n@@ -2626,16 +2625,16 @@ final_scan_insn (rtx uncast_insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t       thought unnecessary.  If that happens, cancel this sequence\n \t       and cause that insn to be restored.  */\n \n-\t    next = final_scan_insn (XVECEXP (body, 0, 0), file, 0, 1, seen);\n-\t    if (next != XVECEXP (body, 0, 1))\n+\t    next = final_scan_insn (seq->insn (0), file, 0, 1, seen);\n+\t    if (next != seq->insn (1))\n \t      {\n \t\tfinal_sequence = 0;\n \t\treturn next;\n \t      }\n \n-\t    for (i = 1; i < XVECLEN (body, 0); i++)\n+\t    for (i = 1; i < seq->len (); i++)\n \t      {\n-\t\trtx insn = XVECEXP (body, 0, i);\n+\t\trtx_insn *insn = seq->insn (i);\n \t\trtx_insn *next = NEXT_INSN (insn);\n \t\t/* We loop in case any instruction in a delay slot gets\n \t\t   split.  */\n@@ -2653,7 +2652,7 @@ final_scan_insn (rtx uncast_insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t       called function.  Hence we don't preserve any CC-setting\n \t       actions in these insns and the CC must be marked as being\n \t       clobbered by the function.  */\n-\t    if (CALL_P (XVECEXP (body, 0, 0)))\n+\t    if (CALL_P (seq->insn (0)))\n \t      {\n \t\tCC_STATUS_INIT;\n \t      }"}]}