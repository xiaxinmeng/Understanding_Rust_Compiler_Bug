{"sha": "cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4NmMwNWE1OTMxZjg3NThlMDQ4ZmEzZmI4MTUyY2U2MzVmYTllZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-17T08:34:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-17T08:34:17Z"}, "message": "stl_uninitialized.h (__uninitialized_default, [...]): Add.\n\n2010-06-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_uninitialized.h (__uninitialized_default,\n\t__uninitialized_default_n, __uninitialized_default_a,\n\t__uninitialized_default_n_a): Add.\n\n\t* include/bits/stl_uninitialized.h (uninitialized_copy,\n\tuninitialized_fill, uninitialized_fill_n): Use __is_trivial\n\tinstead of __is_pod.\n\t* include/bits/valarray_array.h: Likewise.\n\t* include/bits/stl_algobase.h (__copy_move_backward_a,\n\t__copy_move_a): Likewise.\n\nFrom-SVN: r160882", "tree": {"sha": "f67f20d0528147060491d9f5c05c67cf0e20bd22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67f20d0528147060491d9f5c05c67cf0e20bd22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/comments", "author": null, "committer": null, "parents": [{"sha": "b26be063b3ef38c6ddc67e68992a4ecd9c92cd8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26be063b3ef38c6ddc67e68992a4ecd9c92cd8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b26be063b3ef38c6ddc67e68992a4ecd9c92cd8d"}], "stats": {"total": 235, "additions": 204, "deletions": 31}, "files": [{"sha": "e0c2f30444c0d5403ce7d8a1567d2323826bfec8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "patch": "@@ -1,3 +1,16 @@\n+2010-06-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_uninitialized.h (__uninitialized_default,\n+\t__uninitialized_default_n, __uninitialized_default_a,\n+\t__uninitialized_default_n_a): Add.\n+\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy,\n+\tuninitialized_fill, uninitialized_fill_n): Use __is_trivial\n+\tinstead of __is_pod.\n+\t* include/bits/valarray_array.h: Likewise.\n+\t* include/bits/stl_algobase.h (__copy_move_backward_a,\n+\t__copy_move_a): Likewise.\n+\n 2010-06-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_construct.h (_Construct): Change to variadic in"}, {"sha": "cfaeef8f645ab6ee31fc404fbc745ab391a37b70", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "patch": "@@ -394,7 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_II>::value_type _ValueTypeI;\n       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;\n       typedef typename iterator_traits<_II>::iterator_category _Category;\n-      const bool __simple = (__is_pod(_ValueTypeI)\n+      const bool __simple = (__is_trivial(_ValueTypeI)\n \t                     && __is_pointer<_II>::__value\n \t                     && __is_pointer<_OI>::__value\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);\n@@ -589,7 +589,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_BI1>::value_type _ValueType1;\n       typedef typename iterator_traits<_BI2>::value_type _ValueType2;\n       typedef typename iterator_traits<_BI1>::iterator_category _Category;\n-      const bool __simple = (__is_pod(_ValueType1)\n+      const bool __simple = (__is_trivial(_ValueType1)\n \t                     && __is_pointer<_BI1>::__value\n \t                     && __is_pointer<_BI2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);"}, {"sha": "c5cbde0c1a45b3dd331b815925189f6310390af4", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 182, "deletions": 22, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "patch": "@@ -60,13 +60,13 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  template<bool>\n+  template<bool _TrivialValueTypes>\n     struct __uninitialized_copy\n     {\n       template<typename _InputIterator, typename _ForwardIterator>\n         static _ForwardIterator\n-        uninitialized_copy(_InputIterator __first, _InputIterator __last,\n-\t\t\t   _ForwardIterator __result)\n+        __uninit_copy(_InputIterator __first, _InputIterator __last,\n+\t\t      _ForwardIterator __result)\n         {\n \t  _ForwardIterator __cur = __result;\n \t  __try\n@@ -88,8 +88,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       template<typename _InputIterator, typename _ForwardIterator>\n         static _ForwardIterator\n-        uninitialized_copy(_InputIterator __first, _InputIterator __last,\n-\t\t\t   _ForwardIterator __result)\n+        __uninit_copy(_InputIterator __first, _InputIterator __last,\n+\t\t      _ForwardIterator __result)\n         { return std::copy(__first, __last, __result); }\n     };\n \n@@ -112,19 +112,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType2;\n \n-      return std::__uninitialized_copy<(__is_pod(_ValueType1)\n-\t\t\t\t\t&& __is_pod(_ValueType2))>::\n-\tuninitialized_copy(__first, __last, __result);\n+      return std::__uninitialized_copy<(__is_trivial(_ValueType1)\n+\t\t\t\t\t&& __is_trivial(_ValueType2))>::\n+\t__uninit_copy(__first, __last, __result);\n     }\n \n \n-  template<bool>\n+  template<bool _TrivialValueType>\n     struct __uninitialized_fill\n     {\n       template<typename _ForwardIterator, typename _Tp>\n         static void\n-        uninitialized_fill(_ForwardIterator __first,\n-\t\t\t   _ForwardIterator __last, const _Tp& __x)\n+        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t      const _Tp& __x)\n         {\n \t  _ForwardIterator __cur = __first;\n \t  __try\n@@ -145,8 +145,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       template<typename _ForwardIterator, typename _Tp>\n         static void\n-        uninitialized_fill(_ForwardIterator __first,\n-\t\t\t   _ForwardIterator __last, const _Tp& __x)\n+        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t      const _Tp& __x)\n         { std::fill(__first, __last, __x); }\n     };\n \n@@ -167,18 +167,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n \n-      std::__uninitialized_fill<__is_pod(_ValueType)>::\n-\tuninitialized_fill(__first, __last, __x);\n+      std::__uninitialized_fill<__is_trivial(_ValueType)>::\n+\t__uninit_fill(__first, __last, __x);\n     }\n \n \n-  template<bool>\n+  template<bool _TrivialValueType>\n     struct __uninitialized_fill_n\n     {\n       template<typename _ForwardIterator, typename _Size, typename _Tp>\n         static void\n-        uninitialized_fill_n(_ForwardIterator __first, _Size __n,\n-\t\t\t     const _Tp& __x)\n+        __uninit_fill_n(_ForwardIterator __first, _Size __n,\n+\t\t\tconst _Tp& __x)\n         {\n \t  _ForwardIterator __cur = __first;\n \t  __try\n@@ -199,8 +199,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       template<typename _ForwardIterator, typename _Size, typename _Tp>\n         static void\n-        uninitialized_fill_n(_ForwardIterator __first, _Size __n,\n-\t\t\t     const _Tp& __x)\n+        __uninit_fill_n(_ForwardIterator __first, _Size __n,\n+\t\t\tconst _Tp& __x)\n         { std::fill_n(__first, __n, __x); }\n     };\n \n@@ -220,8 +220,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n \n-      std::__uninitialized_fill_n<__is_pod(_ValueType)>::\n-\tuninitialized_fill_n(__first, __n, __x);\n+      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::\n+\t__uninit_fill_n(__first, __n, __x);\n     }\n \n   // Extensions: versions of uninitialized_copy, uninitialized_fill,\n@@ -427,6 +427,166 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  // Extensions: __uninitialized_default, __uninitialized_default_n,\n+  // __uninitialized_default_a, __uninitialized_default_n_a.\n+\n+  template<bool _TrivialValueType>\n+    struct __uninitialized_default_1\n+    {\n+      template<typename _ForwardIterator>\n+        static void\n+        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)\n+        {\n+\t  _ForwardIterator __cur = __first;\n+\t  __try\n+\t    {\n+\t      for (; __cur != __last; ++__cur)\n+\t\tstd::_Construct(std::__addressof(*__cur));\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+    };\n+\n+  template<>\n+    struct __uninitialized_default_1<true>\n+    {\n+      template<typename _ForwardIterator>\n+        static void\n+        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)\n+        {\n+\t  typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t    _ValueType;\n+\n+\t  std::fill(__first, __last, _ValueType());\n+\t}\n+    };\n+\n+  template<bool _TrivialValueType>\n+    struct __uninitialized_default_n_1\n+    {\n+      template<typename _ForwardIterator, typename _Size>\n+        static void\n+        __uninit_default_n(_ForwardIterator __first, _Size __n)\n+        {\n+\t  _ForwardIterator __cur = __first;\n+\t  __try\n+\t    {\n+\t      for (; __n > 0; --__n, ++__cur)\n+\t\tstd::_Construct(std::__addressof(*__cur));\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+    };\n+\n+  template<>\n+    struct __uninitialized_default_n_1<true>\n+    {\n+      template<typename _ForwardIterator, typename _Size>\n+        static void\n+        __uninit_default_n(_ForwardIterator __first, _Size __n)\n+        {\n+\t  typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t    _ValueType;\n+\n+\t  std::fill_n(__first, __n, _ValueType());\n+\t}\n+    };\n+\n+  // __uninitialized_default\n+  // Fills [first, last) with std::distance(first, last) default\n+  // constructed value_types(s).\n+  template<typename _ForwardIterator>\n+    inline void\n+    __uninitialized_default(_ForwardIterator __first,\n+\t\t\t    _ForwardIterator __last)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n+      std::__uninitialized_default_1<__is_trivial(_ValueType)>::\n+\t__uninit_default(__first, __last);\n+    }\n+\n+  // __uninitialized_default_n\n+  // Fills [first, first + n) with n default constructed value_type(s).\n+  template<typename _ForwardIterator, typename _Size>\n+    inline void\n+    __uninitialized_default_n(_ForwardIterator __first, _Size __n)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n+      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::\n+\t__uninit_default_n(__first, __n);\n+    }\n+\n+\n+  // __uninitialized_default_a\n+  // Fills [first, last) with std::distance(first, last) default\n+  // constructed value_types(s), constructed with the allocator alloc.\n+  template<typename _ForwardIterator, typename _Allocator>\n+    void\n+    __uninitialized_default_a(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last,\n+\t\t\t      _Allocator& __alloc)\n+    {\n+      _ForwardIterator __cur = __first;\n+      __try\n+\t{\n+\t  for (; __cur != __last; ++__cur)\n+\t    __alloc.construct(std::__addressof(*__cur));\n+\t}\n+      __catch(...)\n+\t{\n+\t  std::_Destroy(__first, __cur, __alloc);\n+\t  __throw_exception_again;\n+\t}\n+    }\n+\n+  template<typename _ForwardIterator, typename _Tp>\n+    inline void\n+    __uninitialized_default_a(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last,\n+\t\t\t      allocator<_Tp>&)\n+    { std::__uninitialized_default(__first, __last); }\n+\n+\n+  // __uninitialized_default_n_a\n+  // Fills [first, first + n) with n default constructed value_types(s),\n+  // constructed with the allocator alloc.\n+  template<typename _ForwardIterator, typename _Size, typename _Allocator>\n+    void\n+    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, \n+\t\t\t\t_Allocator& __alloc)\n+    {\n+      _ForwardIterator __cur = __first;\n+      __try\n+\t{\n+\t  for (; __n > 0; --__n, ++__cur)\n+\t    __alloc.construct(std::__addressof(*__cur));\n+\t}\n+      __catch(...)\n+\t{\n+\t  std::_Destroy(__first, __cur, __alloc);\n+\t  __throw_exception_again;\n+\t}\n+    }\n+\n+  template<typename _ForwardIterator, typename _Size, typename _Tp>\n+    inline void\n+    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, \n+\t\t\t\tallocator<_Tp>&)\n+    { std::__uninitialized_default_n(__first, __n); }\n+\n+\n   template<typename _InputIterator, typename _Size,\n \t   typename _ForwardIterator>\n     _ForwardIterator"}, {"sha": "7aa61f14d81f258f7d4d5f2f7931e19e9119c23b", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc86c05a5931f8758e048fa3fb8152ce635fa9ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=cc86c05a5931f8758e048fa3fb8152ce635fa9ed", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- internal _Array helper class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -127,7 +127,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     __valarray_fill_construct(_Tp* __b, _Tp* __e, const _Tp __t)\n     {\n-      _Array_init_ctor<_Tp, __is_pod(_Tp)>::_S_do_it(__b, __e, __t);\n+      _Array_init_ctor<_Tp, __is_trivial(_Tp)>::_S_do_it(__b, __e, __t);\n     }\n \n   //\n@@ -160,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __valarray_copy_construct(const _Tp* __b, const _Tp* __e,\n \t\t\t      _Tp* __restrict__ __o)\n     {\n-      _Array_copy_ctor<_Tp, __is_pod(_Tp)>::_S_do_it(__b, __e, __o);\n+      _Array_copy_ctor<_Tp, __is_trivial(_Tp)>::_S_do_it(__b, __e, __o);\n     }\n \n   // copy-construct raw array [__o, *) from strided array __a[<__n : __s>]\n@@ -169,7 +169,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __valarray_copy_construct (const _Tp* __restrict__ __a, size_t __n,\n \t\t\t       size_t __s, _Tp* __restrict__ __o)\n     {\n-      if (__is_pod(_Tp))\n+      if (__is_trivial(_Tp))\n \twhile (__n--)\n \t  {\n \t    *__o++ = *__a;\n@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t       const size_t* __restrict__ __i,\n \t\t\t       _Tp* __restrict__ __o, size_t __n)\n     {\n-      if (__is_pod(_Tp))\n+      if (__is_trivial(_Tp))\n \twhile (__n--)\n \t  *__o++ = __a[*__i++];\n       else\n@@ -203,7 +203,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     __valarray_destroy_elements(_Tp* __b, _Tp* __e)\n     {\n-      if (!__is_pod(_Tp))\n+      if (!__is_trivial(_Tp))\n \twhile (__b != __e)\n \t  {\n \t    __b->~_Tp();\n@@ -267,7 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __valarray_copy(const _Tp* __restrict__ __a, size_t __n,\n \t\t    _Tp* __restrict__ __b)\n     {\n-      _Array_copier<_Tp, __is_pod(_Tp)>::_S_do_it(__a, __n, __b);\n+      _Array_copier<_Tp, __is_trivial(_Tp)>::_S_do_it(__a, __n, __b);\n     }\n \n   // Copy strided array __a[<__n : __s>] in plain __b[<__n>]"}]}