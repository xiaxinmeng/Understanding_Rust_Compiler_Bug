{"sha": "9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxNGY4Y2ZmOWU0M2NjMTI3ZGU4ZTQ5ZDVkOTc1MWM2YzNlZWRiOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-27T13:46:47Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-27T13:46:47Z"}, "message": "re PR fortran/20896 (ambiguous interface not detected)\n\n2006-12-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/20896\n\t* interface.c (check_sym_interfaces): Try to resolve interface\n\treference as a global symbol, if it is not a nodule procedure.\n\t(compare_actual_formal): Remove call to gfc_find_symbol; if\n\tthe expression is already a variable it is locally declared\n\tand this has precedence.\n\tgfortran.h : Add prototype for resolve_global_procedure.\n\tresolve.c (resolve_global_procedure): Remove static attribute\n\tfrom function declaration.\n\t(resolve_fl_procedure): Remove symtree declaration and the\n\tredundant check for an ambiguous procedure.\n\n\tPR fortran/25135\n\t* module.c (load_generic_interfaces): If the symbol is present\n\tand is not generic it is ambiguous.\n\n2006-12-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/20896\n\t* gfortran.dg/interface_10.f90: New test.\n\t* gfortran.dg/dummy_procedure_1.f90: Add error for call s1(z),\n\tsince z is already, locally a variable.\n\n\tPR fortran/25135\n\t* gfortran.dg/generic_11.f90: New test.\n\t* gfortran.dg/interface_7.f90: Remove name clash between module\n\tname and procedure 'x' referenced in the interface.\n\nFrom-SVN: r120218", "tree": {"sha": "231b280ad1ab1a5c7cd73bfdbf36922437ed84e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/231b280ad1ab1a5c7cd73bfdbf36922437ed84e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/comments", "author": null, "committer": null, "parents": [{"sha": "223da52186b67c474717dd7f221dd53515af64f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223da52186b67c474717dd7f221dd53515af64f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/223da52186b67c474717dd7f221dd53515af64f4"}], "stats": {"total": 145, "additions": 119, "deletions": 26}, "files": [{"sha": "49db7dcd17276a5c67e3b19ce969320c2805108f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -1,3 +1,21 @@\n+2006-12-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/20896\n+\t* interface.c (check_sym_interfaces): Try to resolve interface\n+\treference as a global symbol, if it is not a nodule procedure.\n+\t(compare_actual_formal): Remove call to gfc_find_symbol; if\n+\tthe expression is already a variable it is locally declared\n+\tand this has precedence.\n+\tgfortran.h : Add prototype for resolve_global_procedure.\n+\tresolve.c (resolve_global_procedure): Remove static attribute\n+\tfrom function declaration.\n+\t(resolve_fl_procedure): Remove symtree declaration and the\n+\tredundant check for an ambiguous procedure.\n+\n+\tPR fortran/25135\n+\t* module.c (load_generic_interfaces): If the symbol is present\n+\tand is not generic it is ambiguous.\n+\n 2006-12-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25818"}, {"sha": "b477439ff64fb19fe923649302e0a8e92a247f05", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -2032,6 +2032,7 @@ void gfc_free_statement (gfc_code *);\n void gfc_free_statements (gfc_code *);\n \n /* resolve.c */\n+void resolve_global_procedure (gfc_symbol *, locus *, int);\n try gfc_resolve_expr (gfc_expr *);\n void gfc_resolve (gfc_namespace *);\n void gfc_resolve_blocks (gfc_code *, gfc_namespace *);"}, {"sha": "8ec0b92bf1089961149d80e462acaae934add1bf", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -1016,6 +1016,11 @@ check_sym_interfaces (gfc_symbol * sym)\n   if (sym->ns != gfc_current_ns)\n     return;\n \n+  if (sym->attr.if_source == IFSRC_IFBODY\n+\t&& sym->attr.flavor == FL_PROCEDURE\n+\t&& !sym->attr.mod_proc)\n+    resolve_global_procedure (sym, &sym->declared_at, sym->attr.subroutine);\n+\n   if (sym->generic != NULL)\n     {\n       sprintf (interface_name, \"generic interface '%s'\", sym->name);\n@@ -1371,16 +1376,10 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n \t  && a->expr->expr_type == EXPR_VARIABLE\n \t  && f->sym->attr.flavor == FL_PROCEDURE)\n \t{\n-\t  gsym = gfc_find_gsymbol (gfc_gsym_root,\n-\t\t\t\t   a->expr->symtree->n.sym->name);\n-\t  if (gsym == NULL || (gsym->type != GSYM_FUNCTION\n-\t\t&& gsym->type != GSYM_SUBROUTINE))\n-\t    {\n-\t      if (where)\n-\t\tgfc_error (\"Expected a procedure for argument '%s' at %L\",\n-\t\t\t   f->sym->name, &a->expr->where);\n-\t      return 0;\n-\t    }\n+\t  if (where)\n+\t    gfc_error (\"Expected a procedure for argument '%s' at %L\",\n+\t\t       f->sym->name, &a->expr->where);\n+\t  return 0;\n \t}\n \n       if (f->sym->attr.flavor == FL_PROCEDURE"}, {"sha": "05056a5cb44154b29ae033248ddcc488df6eb20b", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -3090,6 +3090,16 @@ load_generic_interfaces (void)\n \t      sym->attr.generic = 1;\n \t      sym->attr.use_assoc = 1;\n \t    }\n+\t  else\n+\t    {\n+\t      /* Unless sym is a generic interface, this reference\n+\t\t is ambiguous.  */\n+\t      gfc_symtree *st;\n+\t      p = p ? p : name;\n+\t      st = gfc_find_symtree (gfc_current_ns->sym_root, p);\n+\t      st->ambiguous = sym->attr.generic ? 0 : 1;\n+\t    }\n+\n \t  if (i == 1)\n \t    {\n \t      mio_interface_rest (&sym->generic);"}, {"sha": "9794446d169bdab7fee598aa0f826ae4b14ae6f8", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -1156,7 +1156,7 @@ find_noncopying_intrinsics (gfc_symbol * fnsym, gfc_actual_arglist * actual)\n    reference.  The corresponding code that is called in creating\n    global entities is parse.c.  */\n \n-static void\n+void\n resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n {\n   gfc_gsymbol * gsym;\n@@ -5560,7 +5560,6 @@ static try\n resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n {\n   gfc_formal_arglist *arg;\n-  gfc_symtree *st;\n \n   if (sym->attr.ambiguous_interfaces && !sym->attr.referenced)\n     gfc_warning (\"Although not referenced, '%s' at %L has ambiguous \"\n@@ -5570,16 +5569,6 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t&& resolve_fl_var_and_proc (sym, mp_flag) == FAILURE)\n     return FAILURE;\n \n-  st = gfc_find_symtree (gfc_current_ns->sym_root, sym->name);\n-  if (st && st->ambiguous\n-\t && sym->attr.referenced\n-\t && !sym->attr.generic)\n-    {\n-      gfc_error (\"Procedure %s at %L is ambiguous\",\n-\t\t sym->name, &sym->declared_at);\n-      return FAILURE;\n-    }\n-\n   if (sym->ts.type == BT_CHARACTER)\n     {\n       gfc_charlen *cl = sym->ts.cl;"}, {"sha": "9d0be233c1fbcf736ab2537301ee2c193fda8339", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -1,3 +1,15 @@\n+2006-12-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/20896\n+\t* gfortran.dg/interface_10.f90: New test.\n+\t* gfortran.dg/dummy_procedure_1.f90: Add error for call s1(z),\n+\tsince z is already, locally a variable.\n+\n+\tPR fortran/25135\n+\t* gfortran.dg/generic_11.f90: New test.\n+\t* gfortran.dg/interface_7.f90: Remove name clash between module\n+\tname and procedure 'x' referenced in the interface.\n+\n 2006-12-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR middle-end/7651"}, {"sha": "6d681436125bea5e06b2fcb2bdcb0605e7cc085f", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -37,7 +37,7 @@ end function x\n   call s1(w) ! { dg-error \"not allowed as an actual argument\" }\n   call s1(x) ! explicit interface\n   call s1(y) ! declared external\n-  call s1(z) ! already compiled\n+  call s1(z) ! { dg-error \"Expected a procedure for argument\" }\n contains\n   integer function w()\n     w = 1"}, {"sha": "7547a43da76fbeb8ce9e4d4d3741ae038ba3e8f0", "filename": "gcc/testsuite/gfortran.dg/generic_11.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_11.f90?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! Test the fix for PR25135 in which the ambiguity between subroutine\n+! foo in m_foo and interface foo in m_bar was not recognised.\n+!\n+!Contributed by Yusuke IGUCHI <iguchi@coral.t.u-tokyo.ac.jp>\n+!\n+module m_foo\n+contains\n+  subroutine foo\n+    print *, \"foo\"\n+  end subroutine\n+end module\n+\n+module m_bar\n+  interface foo\n+    module procedure bar\n+  end interface\n+contains\n+  subroutine bar\n+    print *, \"bar\"\n+  end subroutine\n+end module\n+\n+use m_foo\n+use m_bar\n+\n+call foo ! { dg-error \"is an ambiguous reference\" } \n+end\n+! { dg-final { cleanup-modules \"m_foo m_bar\" } }\n+\n+"}, {"sha": "4dab96a3aace68552dd2f30711d38fbdaa552f24", "filename": "gcc/testsuite/gfortran.dg/interface_10.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_10.f90?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! Test the fix for PR20896 in which the ambiguous use\n+! of p was not detected.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+!\n+  INTERFACE g\n+    SUBROUTINE s1(p) ! { dg-error \"is already being used\" }\n+      INTERFACE\n+        SUBROUTINE p\n+        END\n+      END INTERFACE\n+    END\n+    SUBROUTINE s2(p) ! { dg-error \"Global name\" }\n+      INTERFACE\n+        REAL FUNCTION p()\n+        END\n+      END INTERFACE\n+    END\n+  END INTERFACE\n+\n+      INTERFACE\n+        REAL FUNCTION x()\n+        END\n+      END INTERFACE\n+      INTERFACE\n+        SUBROUTINE y\n+        END\n+      END INTERFACE\n+  call g (x)\n+  call g (y)\n+  END\n+"}, {"sha": "9f59b49721461ffce92e80947b930f39b43d5774", "filename": "gcc/testsuite/gfortran.dg/interface_7.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9914f8cff9e43cc127de8e49d5d9751c6c3eedb8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_7.f90?ref=9914f8cff9e43cc127de8e49d5d9751c6c3eedb8", "patch": "@@ -6,7 +6,7 @@\n ! standard explicitly does not require recursion into the formal\n ! arguments of procedures that themselves are interface arguments.\n !\n-module x\n+module xx\n   INTERFACE BAD9\n     SUBROUTINE S9A(X)\n       REAL :: X\n@@ -27,6 +27,6 @@ END FUNCTION X\n       END INTERFACE\n     END SUBROUTINE S9C  ! { dg-error \"Ambiguous interfaces\" }\n   END INTERFACE BAD9\n-end module x\n+end module xx\n \n-! { dg-final { cleanup-modules \"x\" } }\n+! { dg-final { cleanup-modules \"xx\" } }"}]}