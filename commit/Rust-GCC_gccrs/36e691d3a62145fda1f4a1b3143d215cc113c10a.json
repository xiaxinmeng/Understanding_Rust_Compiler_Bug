{"sha": "36e691d3a62145fda1f4a1b3143d215cc113c10a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlNjkxZDNhNjIxNDVmZGExZjRhMWIzMTQzZDIxNWNjMTEzYzEwYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-01T07:29:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-01T08:22:18Z"}, "message": "tree-optimization/97255 - missing vector bool pattern of SRAed bool\n\nSRA tends to use VIEW_CONVERT_EXPR when replacing bool fields with\nunsigned char fields.  Those are not handled in vector bool pattern\ndetection causing vector true values to leak.  The following fixes\nthis by turning those into b ? 1 : 0 as well.\n\n2020-10-01  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-patterns.c (vect_recog_bool_pattern): Also handle\n\tVIEW_CONVERT_EXPR.\n\n\t* g++.dg/vect/pr97255.cc: New testcase.", "tree": {"sha": "1cc5121575fddb868b318e72ab631bf480d67154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cc5121575fddb868b318e72ab631bf480d67154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e691d3a62145fda1f4a1b3143d215cc113c10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e691d3a62145fda1f4a1b3143d215cc113c10a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e691d3a62145fda1f4a1b3143d215cc113c10a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e691d3a62145fda1f4a1b3143d215cc113c10a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324bec558e95584e8c1997575ae9d75978af59f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324bec558e95584e8c1997575ae9d75978af59f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324bec558e95584e8c1997575ae9d75978af59f1"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "efb7f53fd278a4a3dab407f65ee0914366f09361", "filename": "gcc/testsuite/g++.dg/vect/pr97255.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e691d3a62145fda1f4a1b3143d215cc113c10a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr97255.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e691d3a62145fda1f4a1b3143d215cc113c10a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr97255.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr97255.cc?ref=36e691d3a62145fda1f4a1b3143d215cc113c10a", "patch": "@@ -0,0 +1,44 @@\n+// { dg-require-effective-target c++11 }\n+// { dg-additional-options \"-O3\" }\n+\n+template<class T, unsigned N>\n+class Array{\n+public:\n+    T& operator[](unsigned x) {return m_arr[x];}\n+private:\n+    T m_arr[N];\n+};\n+\n+int\n+__attribute__((noipa))\n+logicalOr(Array< char, 4 > in1[60],\n+          Array< bool, 4 > out[60])\n+{\n+  for (unsigned k0 = 0u; k0 < 60u; ++k0) {\n+      Array< char, 4 > in1m = in1[k0];\n+      Array< bool, 4 > x;\n+      for (unsigned k1 = 0u; k1 < 4u; ++k1) {\n+          char in1s = in1m[k1];\n+          x[k1] = in1s != char(0) || in1s != char(0);\n+      }\n+      out[k0] = x;\n+  }\n+  return out[0][0];\n+}\n+\n+\n+int main()\n+{\n+  Array< char, 4 > In1[60]{};\n+  Array< bool, 4 > Out7[60]{};\n+\n+  for( int i = 0; i < 60; ++i){\n+      for( int j = 0; j < 4; ++j){\n+          In1[i][j] = 240 - i*4 - j;\n+      }\n+  }\n+\n+  if (logicalOr(In1, Out7) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "d626c5f73624bd07eda8eebdab41bc39b5302294", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e691d3a62145fda1f4a1b3143d215cc113c10a/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e691d3a62145fda1f4a1b3143d215cc113c10a/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=36e691d3a62145fda1f4a1b3143d215cc113c10a", "patch": "@@ -4028,14 +4028,18 @@ vect_recog_bool_pattern (vec_info *vinfo,\n \n   var = gimple_assign_rhs1 (last_stmt);\n   lhs = gimple_assign_lhs (last_stmt);\n+  rhs_code = gimple_assign_rhs_code (last_stmt);\n+\n+  if (rhs_code == VIEW_CONVERT_EXPR)\n+    var = TREE_OPERAND (var, 0);\n \n   if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (var)))\n     return NULL;\n \n   hash_set<gimple *> bool_stmts;\n \n-  rhs_code = gimple_assign_rhs_code (last_stmt);\n-  if (CONVERT_EXPR_CODE_P (rhs_code))\n+  if (CONVERT_EXPR_CODE_P (rhs_code)\n+      || rhs_code == VIEW_CONVERT_EXPR)\n     {\n       if (! INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n \t  || TYPE_PRECISION (TREE_TYPE (lhs)) == 1)"}]}