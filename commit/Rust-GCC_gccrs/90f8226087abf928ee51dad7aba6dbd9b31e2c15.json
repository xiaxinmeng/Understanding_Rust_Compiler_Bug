{"sha": "90f8226087abf928ee51dad7aba6dbd9b31e2c15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmODIyNjA4N2FiZjkyOGVlNTFkYWQ3YWJhNmRiZDliMzFlMmMxNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-01T19:04:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-01T19:04:05Z"}, "message": "constraints.md (BC): Only allow -1 operands.\n\n\t* config/i386/constraints.md (BC): Only allow -1 operands.\n\t* config/i386/sse.md (mov<mode>_internal): Add (v,C) alternative.\n\tAdd \"enabled\" attribute.  Update XI mode attribute calculation.\n\t* config/i386/i386.md (*movxi_internal_avx512f): Add (v,C) alternative.\n\t(*movoi_internal_avx): Update XI mode attribute calculation.\n\t(*movti_internal): Ditto.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/avx256-unaligned-load-1.c: Update scan strings.\n\t* gcc.target/i386/avx256-unaligned-store-1.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-2.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-3.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-4.c: Ditto.\n\nFrom-SVN: r235693", "tree": {"sha": "11346c97508da986622d07cafeabbdc9f620fef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11346c97508da986622d07cafeabbdc9f620fef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f8226087abf928ee51dad7aba6dbd9b31e2c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f8226087abf928ee51dad7aba6dbd9b31e2c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f8226087abf928ee51dad7aba6dbd9b31e2c15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f8226087abf928ee51dad7aba6dbd9b31e2c15/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c100769bccf627e9d52eec8d2fae6dea140686d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c100769bccf627e9d52eec8d2fae6dea140686d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c100769bccf627e9d52eec8d2fae6dea140686d2"}], "stats": {"total": 96, "additions": 60, "deletions": 36}, "files": [{"sha": "3af200d12a02a374d23fb2f57c2a1ca904608930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -1,3 +1,12 @@\n+2016-05-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (BC): Only allow -1 operands.\n+\t* config/i386/sse.md (mov<mode>_internal): Add (v,C) alternative.\n+\tAdd \"enabled\" attribute.  Update XI mode attribute calculation.\n+\t* config/i386/i386.md (*movxi_internal_avx512f): Add (v,C) alternative.\n+\t(*movoi_internal_avx): Update XI mode attribute calculation.\n+\t(*movti_internal): Ditto.\n+\n 2016-05-01  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (push, pop, ic_invalidate_line, cstoresi4, cstoredi4,"}, {"sha": "93d136bc666c640de8b3a65d8e83904316f2dd3c", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -185,10 +185,9 @@\n   (match_operand 0 \"constant_call_address_operand\"))\n \n (define_constraint \"BC\"\n-  \"@internal SSE constant operand.\"\n+  \"@internal SSE constant -1 operand.\"\n   (and (match_test \"TARGET_SSE\")\n-       (ior (match_test \"op == const0_rtx || op == constm1_rtx\")\n-\t    (match_operand 0 \"const0_operand\")\n+       (ior (match_test \"op == constm1_rtx\")\n \t    (match_operand 0 \"vector_all_ones_operand\"))))\n \n ;; Integer constant constraints."}, {"sha": "b2d3b72123b3a4df577517d483f3b78465c4ba8e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -1970,8 +1970,8 @@\n    (set_attr \"length_immediate\" \"1\")])\n \n (define_insn \"*movxi_internal_avx512f\"\n-  [(set (match_operand:XI 0 \"nonimmediate_operand\"\t\t\"=v,v ,m\")\n-\t(match_operand:XI 1 \"nonimmediate_or_sse_const_operand\" \"BC,vm,v\"))]\n+  [(set (match_operand:XI 0 \"nonimmediate_operand\"\t\t\"=v,v ,v ,m\")\n+\t(match_operand:XI 1 \"nonimmediate_or_sse_const_operand\" \" C,BC,vm,v\"))]\n   \"TARGET_AVX512F\n    && (register_operand (operands[0], XImode)\n        || register_operand (operands[1], XImode))\"\n@@ -1992,13 +1992,13 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n+  [(set_attr \"type\" \"sselog1,sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n (define_insn \"*movoi_internal_avx\"\n-  [(set (match_operand:OI 0 \"nonimmediate_operand\"\t\t\"=v,v,v ,m\")\n-\t(match_operand:OI 1 \"nonimmediate_or_sse_const_operand\" \"BC,C,vm,v\"))]\n+  [(set (match_operand:OI 0 \"nonimmediate_operand\"\t\t\"=v,v ,v ,m\")\n+\t(match_operand:OI 1 \"nonimmediate_or_sse_const_operand\" \" C,BC,vm,v\"))]\n   \"TARGET_AVX\n    && (register_operand (operands[0], OImode)\n        || register_operand (operands[1], OImode))\"\n@@ -2033,16 +2033,15 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"avx2,*,*,*\")\n+  [(set_attr \"isa\" \"*,avx2,*,*\")\n    (set_attr \"type\" \"sselog1,sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set (attr \"mode\")\n \t(cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t (const_string \"XI\")\n-\t       (and (eq_attr \"alternative\" \"0\")\n-\t\t    (and (match_test \"TARGET_AVX512VL\")\n-\t\t\t (match_operand 1 \"constm1_operand\")))\n+\t       (and (eq_attr \"alternative\" \"1\")\n+\t\t    (match_test \"TARGET_AVX512VL\"))\n \t\t (const_string \"XI\")\n \t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t    (and (eq_attr \"alternative\" \"3\")\n@@ -2052,8 +2051,8 @@\n \t      (const_string \"OI\")))])\n \n (define_insn \"*movti_internal\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,v ,v,v ,m\")\n-\t(match_operand:TI 1 \"general_operand\"\t   \"riFo,re,BC,C,vm,v\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,v,v ,v ,m\")\n+\t(match_operand:TI 1 \"general_operand\"\t   \"riFo,re,C,BC,vm,v\"))]\n   \"(TARGET_64BIT\n     && !(MEM_P (operands[0]) && MEM_P (operands[1])))\n    || (TARGET_SSE\n@@ -2096,7 +2095,7 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"x64,x64,sse2,*,*,*\")\n+  [(set_attr \"isa\" \"x64,x64,*,sse2,*,*\")\n    (set_attr \"type\" \"multi,multi,sselog1,sselog1,ssemov,ssemov\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n@@ -2108,9 +2107,8 @@\n \t       (ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t (const_string \"XI\")\n-\t       (and (eq_attr \"alternative\" \"2\")\n-\t\t    (and (match_test \"TARGET_AVX512VL\")\n-\t\t\t (match_operand 1 \"constm1_operand\")))\n+\t       (and (eq_attr \"alternative\" \"3\")\n+\t\t    (match_test \"TARGET_AVX512VL\"))\n \t\t (const_string \"XI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")"}, {"sha": "42d553cfdaa5adce24dbee78ff8cb2567ca2a655", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -833,8 +833,10 @@\n })\n \n (define_insn \"mov<mode>_internal\"\n-  [(set (match_operand:VMOVE 0 \"nonimmediate_operand\"               \"=v,v ,m\")\n-\t(match_operand:VMOVE 1 \"nonimmediate_or_sse_const_operand\"  \"BC,vm,v\"))]\n+  [(set (match_operand:VMOVE 0 \"nonimmediate_operand\"\n+\t \"=v,v ,v ,m\")\n+\t(match_operand:VMOVE 1 \"nonimmediate_or_sse_const_operand\"\n+\t \" C,BC,vm,v\"))]\n   \"TARGET_SSE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n@@ -936,16 +938,15 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n+  [(set_attr \"type\" \"sselog1,sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(and (eq_attr \"alternative\" \"0\")\n-\t\t    (and (match_test \"TARGET_AVX512VL\")\n-\t\t    \t (match_operand 1 \"vector_all_ones_operand\")))\n+\t(cond [(and (eq_attr \"alternative\" \"1\")\n+\t\t    (match_test \"TARGET_AVX512VL\"))\n \t\t (const_string \"XI\")\n \t       (and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t\t (and (eq_attr \"alternative\" \"2\")\n+\t\t\t (and (eq_attr \"alternative\" \"3\")\n \t\t\t      (match_test \"TARGET_SSE_TYPELESS_STORES\"))))\n \t\t (const_string \"<ssePSmode>\")\n \t       (match_test \"TARGET_AVX\")\n@@ -957,7 +958,16 @@\n \t\t    (match_test \"TARGET_SSE_LOAD0_BY_PXOR\"))\n \t\t (const_string \"TI\")\n \t      ]\n-\t      (const_string \"<sseinsnmode>\")))])\n+\t      (const_string \"<sseinsnmode>\")))\n+   (set (attr \"enabled\")\n+        (cond [(and (match_test \"<MODE_SIZE> == 16\")\n+\t\t    (eq_attr \"alternative\" \"1\"))\n+\t\t (symbol_ref \"TARGET_SSE2\")\n+\t       (and (match_test \"<MODE_SIZE> == 32\")\n+\t\t    (eq_attr \"alternative\" \"1\"))\n+\t\t (symbol_ref \"TARGET_AVX2\")\n+\t      ]\n+\t      (symbol_ref \"true\")))])\n \n (define_insn \"<avx512>_load<mode>_mask\"\n   [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v,v\")"}, {"sha": "cee09bc125101fb9fcdef763d45bb936c18ce78f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -1,3 +1,11 @@\n+2016-05-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/avx256-unaligned-load-1.c: Update scan strings.\n+\t* gcc.target/i386/avx256-unaligned-store-1.c: Ditto.\n+\t* gcc.target/i386/avx256-unaligned-store-2.c: Ditto.\n+\t* gcc.target/i386/avx256-unaligned-store-3.c: Ditto.\n+\t* gcc.target/i386/avx256-unaligned-store-4.c: Ditto.\n+\n 2016-04-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ada/acats/run_acats: Rename into..."}, {"sha": "7115b0a9dde0dbb375a7aa5891a7f31d1bc8c7b4", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     c[i] = a[i] * b[i+3];\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups\\[^\\n\\r]*movv8sf_internal/2\" } } */\n-/* { dg-final { scan-assembler \"movv4sf_internal/2\" } } */\n+/* { dg-final { scan-assembler-not \"vmovups\\[^\\n\\r]*movv8sf_internal/3\" } } */\n+/* { dg-final { scan-assembler \"movv4sf_internal/3\" } } */\n /* { dg-final { scan-assembler \"vinsertf128\" } } */"}, {"sha": "4c713959df2debdd21ffc3efd33e47f2fdf2842c", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -17,6 +17,6 @@ avx_test (void)\n     d[i] = c[i] * 20.0;\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups.*movv8sf_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovups.*movv4sf_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovups.*movv8sf_internal/4\" } } */\n+/* { dg-final { scan-assembler \"vmovups.*movv4sf_internal/4\" } } */\n /* { dg-final { scan-assembler \"vextractf128\" } } */"}, {"sha": "a2b644eb1918a2f0685f16044bbcfc0cd403d352", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -23,6 +23,6 @@ avx_test (void)\n     }\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups.*movv32qi_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovups.*movv16qi_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovups.*movv32qi_internal/4\" } } */\n+/* { dg-final { scan-assembler \"vmovups.*movv16qi_internal/4\" } } */\n /* { dg-final { scan-assembler \"vextract.128\" } } */"}, {"sha": "4574f6a614641634748d718d33bbde0f29059e6b", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -17,6 +17,6 @@ avx_test (void)\n     d[i] = c[i] * 20.0;\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups.*movv4df_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovups.*movv2df_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovups.*movv4df_internal/4\" } } */\n+/* { dg-final { scan-assembler \"vmovups.*movv2df_internal/4\" } } */\n /* { dg-final { scan-assembler \"vextractf128\" } } */"}, {"sha": "c4566a330f34e705054dff7f0459cc8337fb5850", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8226087abf928ee51dad7aba6dbd9b31e2c15/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-4.c?ref=90f8226087abf928ee51dad7aba6dbd9b31e2c15", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     b[i+3] = a[i] * c[i];\n }\n \n-/* { dg-final { scan-assembler \"vmovups.*movv8sf_internal/3\" } } */\n-/* { dg-final { scan-assembler-not \"movups.*movv4sf_internal/3\" } } */\n+/* { dg-final { scan-assembler \"vmovups.*movv8sf_internal/4\" } } */\n+/* { dg-final { scan-assembler-not \"movups.*movv4sf_internal/4\" } } */\n /* { dg-final { scan-assembler-not \"vextractf128\" } } */"}]}