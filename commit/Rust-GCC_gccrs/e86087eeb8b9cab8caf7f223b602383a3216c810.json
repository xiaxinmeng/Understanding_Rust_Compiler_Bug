{"sha": "e86087eeb8b9cab8caf7f223b602383a3216c810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2MDg3ZWViOGI5Y2FiOGNhZjdmMjIzYjYwMjM4M2EzMjE2YzgxMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-22T13:57:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-22T13:57:47Z"}, "message": "2018-10-22  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-ssa-evrp-analyze.c\n\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Be\n\tsmarter about what ranges to use.\n\t* tree-vrp.c (add_assert_info): Dump here.\n\t(register_edge_assert_for_2): Instead of here at multiple but\n\tnot all places.\n\n\t* gcc.dg/tree-ssa/evrp12.c: New testcase.\n\t* gcc.dg/predict-6.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp33.c: Disable EVRP.\n\t* gcc.dg/tree-ssa/vrp02.c: Likewise.\n\t* gcc.dg/tree-ssa/cunroll-9.c: Likewise.\n\nFrom-SVN: r265391", "tree": {"sha": "98dfbd3555145dc4c6d3c6137793b4e489f4672b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98dfbd3555145dc4c6d3c6137793b4e489f4672b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e86087eeb8b9cab8caf7f223b602383a3216c810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86087eeb8b9cab8caf7f223b602383a3216c810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86087eeb8b9cab8caf7f223b602383a3216c810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86087eeb8b9cab8caf7f223b602383a3216c810/comments", "author": null, "committer": null, "parents": [{"sha": "d1e14d97207fafc3b9873bb06a3a6f1fc1f6d305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e14d97207fafc3b9873bb06a3a6f1fc1f6d305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e14d97207fafc3b9873bb06a3a6f1fc1f6d305"}], "stats": {"total": 122, "additions": 64, "deletions": 58}, "files": [{"sha": "96f187500df8dfd7cdfefcd38dd991f74706d486", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -1,3 +1,18 @@\n+2018-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-ssa-evrp-analyze.c\n+\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Be\n+\tsmarter about what ranges to use.\n+\t* tree-vrp.c (add_assert_info): Dump here.\n+\t(register_edge_assert_for_2): Instead of here at multiple but\n+\tnot all places.\n+\n+\t* gcc.dg/tree-ssa/evrp12.c: New testcase.\n+\t* gcc.dg/predict-6.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp33.c: Disable EVRP.\n+\t* gcc.dg/tree-ssa/vrp02.c: Likewise.\n+\t* gcc.dg/tree-ssa/cunroll-9.c: Likewise.\n+\n 2018-10-22  Steven Bosscher <steven@gcc.gnu.org>\n \tRichard Biener  <rguenther@suse.de>\n "}, {"sha": "b7b0fd8f17c1741caf881feed65222d8fba656fc", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -203,6 +203,16 @@ evrp_range_analyzer::record_ranges_from_incoming_edge (basic_block bb)\n \t     ordering issues that can lead to worse ranges.  */\n \t  for (unsigned i = 0; i < vrs.length (); ++i)\n \t    {\n+\t      /* But make sure we do not weaken ranges like when\n+\t         getting first [64, +INF] and then ~[0, 0] from\n+\t\t conditions like (s & 0x3cc0) == 0).  */\n+\t      value_range *old_vr = get_value_range (vrs[i].first);\n+\t      value_range tem (old_vr->kind (), old_vr->min (), old_vr->max ());\n+\t      tem.intersect (vrs[i].second);\n+\t      if (tem.kind () == old_vr->kind ()\n+\t\t  && tem.min () == old_vr->min ()\n+\t\t  && tem.max () == old_vr->max ())\n+\t\tcontinue;\n \t      push_value_range (vrs[i].first, vrs[i].second);\n \t      if (is_fallthru\n \t\t  && all_uses_feed_or_dominated_by_stmt (vrs[i].first, stmt))"}, {"sha": "629f777279331bb3ab6b73ffb404aecad0ad2ce7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -1,6 +1,14 @@\n+2018-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/evrp12.c: New testcase.\n+\t* gcc.dg/predict-6.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp33.c: Disable EVRP.\n+\t* gcc.dg/tree-ssa/vrp02.c: Likewise.\n+\t* gcc.dg/tree-ssa/cunroll-9.c: Likewise.\n+\n 2018-10-22  Martin Liska  <mliska@suse.cz>\n \n-  PR tree-optimization/87686\n+\tPR tree-optimization/87686\n \t* g++.dg/tree-ssa/pr87686.C: New test.\n \n 2018-10-22  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "08ce5cdb81d3d466839a2300f84815baf9936609", "filename": "gcc/testsuite/gcc.dg/predict-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -10,9 +10,9 @@ void foo (int base, int bound)\n   int i, ret = 0;\n   for (i = base; i <= bound; i++)\n     {\n-      if (i < base)\n+      if (i <= base)\n \tglobal += bar (i);\n-      if (i < base + 1)\n+      if (i < base + 2)\n \tglobal += bar (i);\n       if (i <= base + 3)\n \tglobal += bar (i);"}, {"sha": "886dc147ad1a955c63bc1a0a560bb833e4181191", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-9.c?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cunrolli-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-cunrolli-details -fdisable-tree-evrp\" } */\n void abort (void);\n int q (void);\n int a[10];"}, {"sha": "b3906c23465fe47ff86f53d91a9a3336e8b506db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp12.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp12.c?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+extern void link_error ();\n+\n+void\n+f3 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) == 0)\n+    {\n+      if (s >= -15552U)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s <= 0x3f)\n+\tlink_error ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"evrp\" } } */"}, {"sha": "4be538f5944ee5834fe8c043d042a2f187e0f07b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp02.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks -fdisable-tree-evrp\" } */\n \n struct A\n {"}, {"sha": "f1d3863943e4e78dfa3e803ef8d3d21cd4b959de", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-tree-fre\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-tree-fre -fdisable-tree-evrp\" } */\n \n /* This is from PR14052.  */\n "}, {"sha": "e3a64fd7e9e5d4a748dd1f8dd9d9cf7dbe1c57cf", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 52, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86087eeb8b9cab8caf7f223b602383a3216c810/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e86087eeb8b9cab8caf7f223b602383a3216c810", "patch": "@@ -2299,6 +2299,9 @@ add_assert_info (vec<assert_info> &asserts,\n   info.val = val;\n   info.expr = expr;\n   asserts.safe_push (info);\n+  dump_printf (MSG_NOTE | MSG_PRIORITY_INTERNALS,\n+\t       \"Adding assert for %T from %T %s %T\\n\",\n+\t       name, expr, op_symbol_code (comp_code), val);\n }\n \n /* If NAME doesn't have an ASSERT_EXPR registered for asserting\n@@ -2698,16 +2701,6 @@ register_edge_assert_for_2 (tree name, edge e,\n \t  tmp = build1 (NOP_EXPR, TREE_TYPE (name), name3);\n \t  if (cst2 != NULL_TREE)\n \t    tmp = build2 (PLUS_EXPR, TREE_TYPE (name), tmp, cst2);\n-\n-\t  if (dump_file)\n-\t    {\n-\t      fprintf (dump_file, \"Adding assert for \");\n-\t      print_generic_expr (dump_file, name3);\n-\t      fprintf (dump_file, \" from \");\n-\t      print_generic_expr (dump_file, tmp);\n-\t      fprintf (dump_file, \"\\n\");\n-\t    }\n-\n \t  add_assert_info (asserts, name3, tmp, comp_code, val);\n \t}\n \n@@ -2725,16 +2718,6 @@ register_edge_assert_for_2 (tree name, edge e,\n \t    tmp = build1 (NOP_EXPR, TREE_TYPE (name), tmp);\n \t  if (cst2 != NULL_TREE)\n \t    tmp = build2 (PLUS_EXPR, TREE_TYPE (name), tmp, cst2);\n-\n-\t  if (dump_file)\n-\t    {\n-\t      fprintf (dump_file, \"Adding assert for \");\n-\t      print_generic_expr (dump_file, name2);\n-\t      fprintf (dump_file, \" from \");\n-\t      print_generic_expr (dump_file, tmp);\n-\t      fprintf (dump_file, \"\\n\");\n-\t    }\n-\n \t  add_assert_info (asserts, name2, tmp, comp_code, val);\n \t}\n     }\n@@ -2857,16 +2840,6 @@ register_edge_assert_for_2 (tree name, edge e,\n \t\t  cst = fold_build2 (MINUS_EXPR, TREE_TYPE (name2), cst,\n \t\t\t\t     build_int_cst (TREE_TYPE (name2), 1));\n \t\t}\n-\n-\t      if (dump_file)\n-\t\t{\n-\t\t  fprintf (dump_file, \"Adding assert for \");\n-\t\t  print_generic_expr (dump_file, name2);\n-\t\t  fprintf (dump_file, \" from \");\n-\t\t  print_generic_expr (dump_file, tmp);\n-\t\t  fprintf (dump_file, \"\\n\");\n-\t\t}\n-\n \t      add_assert_info (asserts, name2, tmp, new_comp_code, cst);\n \t    }\n \t}\n@@ -2931,18 +2904,7 @@ register_edge_assert_for_2 (tree name, edge e,\n \t    }\n \n \t  if (new_val)\n-\t    {\n-\t      if (dump_file)\n-\t\t{\n-\t\t  fprintf (dump_file, \"Adding assert for \");\n-\t\t  print_generic_expr (dump_file, name2);\n-\t\t  fprintf (dump_file, \" from \");\n-\t\t  print_generic_expr (dump_file, tmp);\n-\t\t  fprintf (dump_file, \"\\n\");\n-\t\t}\n-\n-\t      add_assert_info (asserts, name2, tmp, new_comp_code, new_val);\n-\t    }\n+\t    add_assert_info (asserts, name2, tmp, new_comp_code, new_val);\n \t}\n \n       /* Add asserts for NAME cmp CST and NAME being defined as\n@@ -3170,16 +3132,6 @@ register_edge_assert_for_2 (tree name, edge e,\n \t\t\tmaxv2 = maxv - minv;\n \t\t      }\n \t\t    new_val = wide_int_to_tree (type, maxv2);\n-\n-\t\t    if (dump_file)\n-\t\t      {\n-\t\t\tfprintf (dump_file, \"Adding assert for \");\n-\t\t\tprint_generic_expr (dump_file, names[i]);\n-\t\t\tfprintf (dump_file, \" from \");\n-\t\t\tprint_generic_expr (dump_file, tmp);\n-\t\t\tfprintf (dump_file, \"\\n\");\n-\t\t      }\n-\n \t\t    add_assert_info (asserts, names[i], tmp, LE_EXPR, new_val);\n \t\t  }\n \t    }"}]}