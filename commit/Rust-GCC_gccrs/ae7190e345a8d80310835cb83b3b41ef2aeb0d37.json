{"sha": "ae7190e345a8d80310835cb83b3b41ef2aeb0d37", "node_id": "C_kwDOANBUbNoAKGFlNzE5MGUzNDVhOGQ4MDMxMDgzNWNiODNiM2I0MWVmMmFlYjBkMzc", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-17T13:43:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-17T18:44:33Z"}, "message": "c++: namespace-scoped friend in local class [PR69410]\n\ndo_friend was only considering class-qualified identifiers for the\nqualified-id case, but we also need to skip local scope when there's an\nexplicit namespace scope.\n\n\tPR c++/69410\n\ngcc/cp/ChangeLog:\n\n\t* friend.cc (do_friend): Handle namespace as scope argument.\n\t* decl.cc (grokdeclarator): Pass down in_namespace.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/lookup/friend24.C: New test.", "tree": {"sha": "f1b345637d8bc1e4657fbc7e9de964d08d6e2cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b345637d8bc1e4657fbc7e9de964d08d6e2cf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae7190e345a8d80310835cb83b3b41ef2aeb0d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7190e345a8d80310835cb83b3b41ef2aeb0d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7190e345a8d80310835cb83b3b41ef2aeb0d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7190e345a8d80310835cb83b3b41ef2aeb0d37/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c06560a7fa39049911eeb8777325d112e0deb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c06560a7fa39049911eeb8777325d112e0deb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c06560a7fa39049911eeb8777325d112e0deb9"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "f5785339c5a9927895d738aa3de875576d7d801b", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7190e345a8d80310835cb83b3b41ef2aeb0d37/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7190e345a8d80310835cb83b3b41ef2aeb0d37/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=ae7190e345a8d80310835cb83b3b41ef2aeb0d37", "patch": "@@ -14393,7 +14393,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tcplus_decl_attributes (&decl, *attrlist, 0);\n \t\t*attrlist = NULL_TREE;\n \n-\t\tdecl = do_friend (ctype, unqualified_id, decl,\n+\t\ttree scope = ctype ? ctype : in_namespace;\n+\t\tdecl = do_friend (scope, unqualified_id, decl,\n \t\t\t\t  flags, funcdef_flag);\n \t\treturn decl;\n \t      }"}, {"sha": "b36de2b20bba9f945299566c68b2e2af069bcb2e", "filename": "gcc/cp/friend.cc", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7190e345a8d80310835cb83b3b41ef2aeb0d37/gcc%2Fcp%2Ffriend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7190e345a8d80310835cb83b3b41ef2aeb0d37/gcc%2Fcp%2Ffriend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.cc?ref=ae7190e345a8d80310835cb83b3b41ef2aeb0d37", "patch": "@@ -487,19 +487,32 @@ make_friend_class (tree type, tree friend_type, bool complain)\n }\n \n /* Record DECL (a FUNCTION_DECL) as a friend of the\n-   CURRENT_CLASS_TYPE.  If DECL is a member function, CTYPE is the\n+   CURRENT_CLASS_TYPE.  If DECL is a member function, SCOPE is the\n    class of which it is a member, as named in the friend declaration.\n+   If the friend declaration was explicitly namespace-qualified, SCOPE\n+   is that namespace.\n    DECLARATOR is the name of the friend.  FUNCDEF_FLAG is true if the\n    friend declaration is a definition of the function.  FLAGS is as\n    for grokclass fn.  */\n \n tree\n-do_friend (tree ctype, tree declarator, tree decl,\n+do_friend (tree scope, tree declarator, tree decl,\n \t   enum overload_flags flags,\n \t   bool funcdef_flag)\n {\n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n-  gcc_assert (!ctype || MAYBE_CLASS_TYPE_P (ctype));\n+\n+  tree ctype = NULL_TREE;\n+  tree in_namespace = NULL_TREE;\n+  if (!scope)\n+    ;\n+  else if (MAYBE_CLASS_TYPE_P (scope))\n+    ctype = scope;\n+  else\n+    {\n+      gcc_checking_assert (TREE_CODE (scope) == NAMESPACE_DECL);\n+      in_namespace = scope;\n+    }\n \n   /* Friend functions are unique, until proved otherwise.  */\n   DECL_UNIQUE_FRIEND_P (decl) = 1;\n@@ -609,7 +622,7 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t       parameters.  Instead, we call pushdecl when the class\n \t       is instantiated.  */\n \t    decl = push_template_decl (decl, /*is_friend=*/true);\n-\t  else if (current_function_decl)\n+\t  else if (current_function_decl && !in_namespace)\n \t    /* pushdecl will check there's a local decl already.  */\n \t    decl = pushdecl (decl, /*hiding=*/true);\n \t  else"}, {"sha": "9a45410d2a7f007acf5709c3a682ed8551d0f90d", "filename": "gcc/testsuite/g++.dg/lookup/friend24.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7190e345a8d80310835cb83b3b41ef2aeb0d37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7190e345a8d80310835cb83b3b41ef2aeb0d37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend24.C?ref=ae7190e345a8d80310835cb83b3b41ef2aeb0d37", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/69410\n+\n+void a();\n+void f() {\n+    class A {\n+        friend void ::a();\n+        friend class Z;\n+    };\n+}"}]}