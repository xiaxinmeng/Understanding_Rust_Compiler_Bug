{"sha": "f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlkN2U1Y2Q5ZWNjMWEyMmE0NzY1ZGVlOWRiZGQ2OTViNDJjOWMzYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-17T19:03:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-17T19:03:04Z"}, "message": "alpha.c (alpha_expand_prologue): Use gen_adddi3 instead of emit_move_insn+plus_constant.\n\n        * alpha.c (alpha_expand_prologue): Use gen_adddi3 instead of\n        emit_move_insn+plus_constant.  For NT, don't use the stack probe\n        loop pointer to allocate stack space.\n        * alpha.md (adddi3): Always use lda to set the stack pointer.\n\nFrom-SVN: r26524", "tree": {"sha": "84028d48da4d024e152ae17059f174d03663179c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84028d48da4d024e152ae17059f174d03663179c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a/comments", "author": null, "committer": null, "parents": [{"sha": "01198c2f1f0197eaf446bc9153cd57cc7a94f52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01198c2f1f0197eaf446bc9153cd57cc7a94f52a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01198c2f1f0197eaf446bc9153cd57cc7a94f52a"}], "stats": {"total": 92, "additions": 71, "deletions": 21}, "files": [{"sha": "5d81e68b22253f96e2d22d3c7f1ccc0afad18c64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a", "patch": "@@ -1,3 +1,10 @@\n+Mon Apr 19 08:12:30 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_expand_prologue): Use gen_adddi3 instead of \n+\temit_move_insn+plus_constant.  For NT, don't use the stack probe\n+\tloop pointer to allocate stack space.\n+\t* alpha.md (adddi3): Always use lda to set the stack pointer.\n+\n 1999-04-17 20:11 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* c-aux-info.c, emit-rtl.c, explow.c, expmed.c, gcse.c,"}, {"sha": "c910278a00cdd24b91268cf908346a928008cb63", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a", "patch": "@@ -3405,8 +3405,8 @@ alpha_expand_prologue ()\n \n       if (frame_size != 0)\n \t{\n-\t  FRP (emit_move_insn (stack_pointer_rtx,\n-\t\t\t       plus_constant (stack_pointer_rtx, -frame_size)));\n+\t  FRP (emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t      GEN_INT (-frame_size))));\n \t}\n     }\n   else\n@@ -3423,7 +3423,7 @@ alpha_expand_prologue ()\n       rtx count = gen_rtx_REG (DImode, 23);\n \n       emit_move_insn (count, GEN_INT (blocks));\n-      emit_move_insn (ptr, plus_constant (stack_pointer_rtx, 4096));\n+      emit_insn (gen_adddi3 (ptr, stack_pointer_rtx, GEN_INT (4096)));\n \n       /* Because of the difficulty in emitting a new basic block this\n \t late in the compilation, generate the loop as a single insn.  */\n@@ -3436,18 +3436,38 @@ alpha_expand_prologue ()\n \t  emit_move_insn (last, const0_rtx);\n \t}\n \n-      ptr = emit_move_insn (stack_pointer_rtx, plus_constant (ptr, -leftover));\n-\n-      /* This alternative is special, because the DWARF code cannot possibly\n-\t intuit through the loop above.  So we invent this note it looks at\n-\t instead.  */\n-      RTX_FRAME_RELATED_P (ptr) = 1;\n-      REG_NOTES (ptr)\n-\t= gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t     gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t\t       gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t     GEN_INT (-frame_size))),\n-\t\t\t     REG_NOTES (ptr));\n+      if (TARGET_WINDOWS_NT)\n+\t{\n+\t  /* For NT stack unwind (done by 'reverse execution'), it's\n+\t     not OK to take the result of a loop, even though the value\n+\t     is already in ptr, so we reload it via a single operation\n+\t     and add it to sp.  */\n+\n+\t  HOST_WIDE_INT lo, hi;\n+\t  lo = ((-frame_size & 0xffff) ^ 0x8000) - 0x8000;\n+\t  hi = -frame_size - lo;\n+\n+\t  FRP (emit_insn (gen_adddi3 (ptr, stack_pointer_rtx, GEN_INT (hi))));\n+\t  FRP (emit_insn (gen_adddi3 (stack_pointer_rtx, ptr, GEN_INT (lo))));\n+\t}\n+      else\n+\t{\n+\t  rtx seq;\n+\n+\t  seq = emit_insn (gen_adddi3 (stack_pointer_rtx, ptr,\n+\t\t\t\t       GEN_INT (-leftover)));\n+\n+\t  /* This alternative is special, because the DWARF code cannot\n+\t     possibly intuit through the loop above.  So we invent this\n+\t     note it looks at instead.  */\n+\t  RTX_FRAME_RELATED_P (seq) = 1;\n+\t  REG_NOTES (seq)\n+\t    = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n+\t\t\t\t gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t   gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t\t GEN_INT (-frame_size))),\n+\t\t\t\t REG_NOTES (seq));\n+\t}\n     }\n \n   /* Cope with very large offsets to the register save area.  */\n@@ -3463,7 +3483,7 @@ alpha_expand_prologue ()\n \tbias = reg_offset, reg_offset = 0;\n \n       sa_reg = gen_rtx_REG (DImode, 24);\n-      FRP (emit_move_insn (sa_reg, plus_constant (stack_pointer_rtx, bias)));\n+      FRP (emit_insn (gen_adddi3 (sa_reg, stack_pointer_rtx, GEN_INT (bias))));\n     }\n     \n   /* Save regs in stack order.  Beginning with VMS PV.  */"}, {"sha": "ab569510ad5e5eafd9bc87093cebdc6c1d4c1722", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=f9d7e5cd9ecc1a22a4765dee9dbdd695b42c9c3a", "patch": "@@ -534,11 +534,34 @@\n \t(plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ,rJ,rJ,rJ\")\n \t\t (match_operand:DI 2 \"add_operand\" \"rI,O,K,L\")))]\n   \"\"\n-  \"@\n-   addq %r1,%2,%0\n-   subq %r1,%n2,%0\n-   lda %0,%2(%r1)\n-   ldah %0,%h2(%r1)\")\n+  \"*\n+{\n+  const char * const pattern[4] = {\n+    \\\"addq %r1,%2,%0\\\",\n+    \\\"subq %r1,%n2,%0\\\",\n+    \\\"lda %0,%2(%r1)\\\",\n+    \\\"ldah %0,%h2(%r1)\\\"\n+  };\n+\n+  /* The NT stack unwind code can't handle a subq to adjust the stack\n+     (that's a bug, but not one we can do anything about).  As of NT4.0 SP3,\n+     the exception handling code will loop if a subq is used and an\n+     exception occurs.\n+\n+     The 19980616 change to emit prologues as RTL also confused some\n+     versions of GDB, which also interprets prologues.  This has been\n+     fixed as of GDB 4.18, but it does not harm to unconditionally\n+     use lda here.  */\n+\n+  int which = which_alternative;\n+\n+  if (operands[0] == stack_pointer_rtx\n+      && GET_CODE (operands[2]) == CONST_INT\n+      && CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K'))\n+    which = 2;\n+\n+  return pattern[which];\n+}\")\n \n ;; Don't do this if we are adjusting SP since we don't want to do\n ;; it in two steps. "}]}