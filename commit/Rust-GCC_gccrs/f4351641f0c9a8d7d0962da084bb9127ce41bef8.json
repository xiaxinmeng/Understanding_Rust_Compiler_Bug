{"sha": "f4351641f0c9a8d7d0962da084bb9127ce41bef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzNTE2NDFmMGM5YThkN2QwOTYyZGEwODRiYjkxMjdjZTQxYmVmOA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-03-21T13:18:35Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-03-21T13:18:35Z"}, "message": "trans.c (Attribute_to_gnu): Compute as (hb < lb) ? 0 : hb - lb + 1 instead of max (hb - lb + 1, 0).\n\n2008-03-21  Olivier Hainque  <hainque@adacore.com>\n\n\tada/\n\t* trans.c (Attribute_to_gnu) <'length>: Compute as (hb < lb)\n\t? 0 : hb - lb + 1 instead of max (hb - lb + 1, 0).\n\n\ttestsuite/\n\t* gnat.dg/empty_vector_length.adb: New testcase.\n\nFrom-SVN: r133423", "tree": {"sha": "7dd9334039fab5a07642c27136c90dcf452b6bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dd9334039fab5a07642c27136c90dcf452b6bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4351641f0c9a8d7d0962da084bb9127ce41bef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4351641f0c9a8d7d0962da084bb9127ce41bef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4351641f0c9a8d7d0962da084bb9127ce41bef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4351641f0c9a8d7d0962da084bb9127ce41bef8/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10c5d1a0a8cf531acc940ca357894e807f1b90d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c5d1a0a8cf531acc940ca357894e807f1b90d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c5d1a0a8cf531acc940ca357894e807f1b90d8"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "461cbd192992f9184dbc35e2fc0edc532e01b9ce", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4351641f0c9a8d7d0962da084bb9127ce41bef8", "patch": "@@ -1,3 +1,8 @@\n+2008-03-21  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* trans.c (Attribute_to_gnu) <'length>: Compute as (hb < lb)\n+\t? 0 : hb - lb + 1 instead of max (hb - lb + 1, 0).\n+\n 2008-03-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* trans.c (addressable_p): Add notes on addressability issues."}, {"sha": "8bec7759bea7a342109824581b1d4e52a9f05f42", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=f4351641f0c9a8d7d0962da084bb9127ce41bef8", "patch": "@@ -1181,33 +1181,42 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \n \telse /* attribute == Attr_Range_Length || attribute == Attr_Length  */\n \t  {\n-\t    tree gnu_compute_type;\n-\n \t    if (pa && pa->length)\n \t      {\n \t\tgnu_result = pa->length;\n \t\tbreak;\n \t      }\n+\t    else\n+\t      {\n+\t\ttree gnu_compute_type\n+\t\t  = signed_or_unsigned_type_for\n+\t\t      (0, get_base_type (gnu_result_type));\n+\n+\t\ttree index_type\n+\t\t  = TYPE_INDEX_TYPE (TYPE_DOMAIN (gnu_type));\n+\t\ttree lb\n+\t\t  = convert (gnu_compute_type, TYPE_MIN_VALUE (index_type));\n+\t\ttree hb\n+\t\t  = convert (gnu_compute_type, TYPE_MAX_VALUE (index_type));\n+\t\t\n+\t\t/* We used to compute the length as max (hb - lb + 1, 0),\n+\t\t   which could overflow for some cases of empty arrays, e.g.\n+\t\t   when lb == index_type'first.\n+\n+\t\t   We now compute it as (hb < lb) ? 0 : hb - lb + 1, which\n+\t\t   could overflow as well, but only for extremely large arrays\n+\t\t   which we expect never to encounter in practice.  */\n \n-\t    gnu_compute_type\n-\t      = signed_or_unsigned_type_for (0,\n-\t\t\t\t\t     get_base_type (gnu_result_type));\n-\n-\t    gnu_result\n-\t      = build_binary_op\n-\t\t(MAX_EXPR, gnu_compute_type,\n-\t\t build_binary_op\n-\t\t (PLUS_EXPR, gnu_compute_type,\n-\t\t  build_binary_op\n-\t\t  (MINUS_EXPR, gnu_compute_type,\n-\t\t   convert (gnu_compute_type,\n-\t\t\t    TYPE_MAX_VALUE\n-\t\t\t    (TYPE_INDEX_TYPE (TYPE_DOMAIN (gnu_type)))),\n-\t\t   convert (gnu_compute_type,\n-\t\t\t    TYPE_MIN_VALUE\n-\t\t\t    (TYPE_INDEX_TYPE (TYPE_DOMAIN (gnu_type))))),\n-\t\t  convert (gnu_compute_type, integer_one_node)),\n-\t\t convert (gnu_compute_type, integer_zero_node));\n+\t\tgnu_result\n+\t\t  = build3\n+\t\t    (COND_EXPR, gnu_compute_type,\n+\t\t     build_binary_op (LT_EXPR, gnu_compute_type, hb, lb),\n+\t\t     convert (gnu_compute_type, integer_zero_node),\n+\t\t     build_binary_op\n+\t\t     (PLUS_EXPR, gnu_compute_type,\n+\t\t      build_binary_op (MINUS_EXPR, gnu_compute_type, hb, lb),\n+\t\t      convert (gnu_compute_type, integer_one_node)));\n+\t      }\n \t  }\n \n \t/* If this has a PLACEHOLDER_EXPR, qualify it by the object we are"}, {"sha": "baa2a2c16680f6726e55bdb795a734368fb715ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4351641f0c9a8d7d0962da084bb9127ce41bef8", "patch": "@@ -1,3 +1,7 @@\n+2008-03-21  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/empty_vector_length.adb: New testcase.\n+\n 2008-03-20  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-ccp-17.c: New testcase."}, {"sha": "256a254e2e25f58f04483e7587ec0638ce20fff5", "filename": "gcc/testsuite/gnat.dg/empty_vector_length.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Ftestsuite%2Fgnat.dg%2Fempty_vector_length.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4351641f0c9a8d7d0962da084bb9127ce41bef8/gcc%2Ftestsuite%2Fgnat.dg%2Fempty_vector_length.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fempty_vector_length.adb?ref=f4351641f0c9a8d7d0962da084bb9127ce41bef8", "patch": "@@ -0,0 +1,19 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnatp\" }\n+\n+procedure Empty_Vector_Length is\n+\n+   type Vector is array (Integer range <>) of Integer;\n+\n+   function Empty_Vector return Vector is\n+   begin\n+      return (2 .. Integer'First => 0);\n+   end;\n+\n+   My_Vector : Vector := Empty_Vector;\n+   My_Length : Integer := My_Vector'Length;\n+begin\n+   if My_Length /= 0 then\n+      raise Program_Error;\n+   end if;\n+end;"}]}