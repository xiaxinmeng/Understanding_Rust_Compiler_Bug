{"sha": "faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhNzY1OTY5ZmE5Y2U4NWIyN2JkMjBkOWE5NjZiMGNhYmJhNWNkYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1998-10-11T00:05:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-11T00:05:11Z"}, "message": "cppexp.c: When forcing unsigned comparisons, cast both sides of the operation.\n\n        * cppexp.c: When forcing unsigned comparisons, cast both sides\n        of the operation.\n        * cpphash.h: Move static declaration of hashtab[]...\n        * cpphash.c: ...here.\n        * cpplib.c: Cast difference of two pointers to size_t before\n        comparing it to size_t.  Cast signed to unsigned\n        before comparing to size_t. (FIXME: struct argdata should use\n        unsigned buffer sizes.)\n        * cpplib.h (struct cpp_reader): Declare token_buffer_size as\n        unsigned int. (CPP_WRITTEN): Cast return value to size_t.\n        (CPP_RESERVE): Parenthesize N for evaluation order, cast to\n        size_t before comparison.\n\nFrom-SVN: r22980", "tree": {"sha": "2f9de21a1e1e04335878526769ff5fd361b7abd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f9de21a1e1e04335878526769ff5fd361b7abd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/comments", "author": null, "committer": null, "parents": [{"sha": "9265dacf25a26ef02473949bc8feec743e1e5b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9265dacf25a26ef02473949bc8feec743e1e5b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9265dacf25a26ef02473949bc8feec743e1e5b8c"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "5197ef3f3eed35bc735ef376cc02c6bf9157072a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "patch": "@@ -1,3 +1,20 @@\n+Sun Oct 11 01:03:05 1998  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+\n+\t* cppexp.c: When forcing unsigned comparisons, cast both sides\n+\tof the operation.\n+\n+\t* cpphash.h: Move static declaration of hashtab[]...\n+\t* cpphash.c: ...here.\n+\n+\t* cpplib.c: Cast difference of two pointers to size_t before\n+\tcomparing it to size_t.  Cast signed to unsigned\n+\tbefore comparing to size_t. (FIXME: struct argdata should use\n+\tunsigned buffer sizes.)\n+\t* cpplib.h (struct cpp_reader): Declare token_buffer_size as\n+\tunsigned int. (CPP_WRITTEN): Cast return value to size_t.\n+\t(CPP_RESERVE): Parenthesize N for evaluation order, cast to\n+\tsize_t before comparison.\n+\n Sun Oct 11 00:15:29 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* flow.c (find_basic_blocks): Delte \"live_reachable_p\" argument."}, {"sha": "8fc5f04a948068ac15e4c1cb1fe9a140a3db0224", "filename": "gcc/cppexp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "patch": "@@ -365,7 +365,7 @@ cpp_lex (pfile, skip_evaluation)\n \t      {\n \t\tc = cpp_parse_escape (pfile, (char **) &ptr);\n \t\tif (width < HOST_BITS_PER_INT\n-\t\t  && (unsigned) c >= (1 << width))\n+\t\t  && (unsigned) c >= (unsigned)(1 << width))\n \t\t    cpp_pedwarn (pfile,\n \t\t\t\t \"escape sequence out of range for character\");\n \t      }\n@@ -649,7 +649,8 @@ right_shift (pfile, a, unsignedp, b)\n \n #define COMPARE(OP) \\\n   top->unsignedp = 0;\\\n-  top->value = (unsigned1 || unsigned2) ? (unsigned long) v1 OP v2 : (v1 OP v2)\n+  top->value = (unsigned1 || unsigned2) \\\n+  ? (unsigned long) v1 OP (unsigned long) v2 : (v1 OP v2)\n \n /* Parse and evaluate a C expression, reading from PFILE.\n    Returns the value of the expression.  */"}, {"sha": "d20f7bbe79d28276813be2b93f3cc6f0dcad627b", "filename": "gcc/cpphash.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "patch": "@@ -30,6 +30,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n extern char *xmalloc PARAMS ((unsigned));\n \n+static HASHNODE *hashtab[HASHSIZE];\n+\n /* Return hash function on name.  must be compatible with the one\n    computed a step at a time, elsewhere  */\n "}, {"sha": "c536ce418882643a4f24f4b5c7978fe2bfa3732a", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "patch": "@@ -31,7 +31,6 @@ typedef struct hashnode HASHNODE;\n    politeness, for use when speed isn't so important. */\n \n #define HASHSIZE 1403\n-static HASHNODE *hashtab[HASHSIZE];\n #define HASHSTEP(old, c) ((old << 2) + c)\n #define MAKE_POS(v) (v & 0x7fffffff) /* make number positive */\n "}, {"sha": "b56790ec32b554d29ef58a21ef6e051c0684b79b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "patch": "@@ -1512,7 +1512,7 @@ create_definition (buf, limit, pfile, predefinition)\n       while (is_idchar[*bp]) {\n \tbp++;\n \t/* do we have a \"special\" rest-args extension here? */\n-\tif (limit - bp > REST_EXTENSION_LENGTH\n+\tif ((size_t)(limit - bp) > REST_EXTENSION_LENGTH\n \t    && strncmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0) {\n \t  rest_args = 1;\n \t  temp->rest_args = 1;\n@@ -2747,7 +2747,7 @@ macroexpand (pfile, hp)\n \t\t\t     one space except within an string or char token.*/\n \t\t\t  if (is_space[c])\n \t\t\t    {\n-\t\t\t      if (CPP_WRITTEN (pfile) > arg->stringified\n+\t\t\t      if (CPP_WRITTEN (pfile) > (unsigned)arg->stringified\n \t\t\t\t  && (CPP_PWRITTEN (pfile))[-1] == '@')\n \t\t\t\t{\n \t\t\t\t  /* \"@ \" escape markers are removed */\n@@ -5528,7 +5528,7 @@ open_include_file (pfile, filename, searchptr)\n \tp = filename;\n       if (searchptr\n \t  && searchptr->fname\n-\t  && strlen (searchptr->fname) == p - filename\n+\t  && strlen (searchptr->fname) == (size_t) (p - filename)\n \t  && ! strncmp (searchptr->fname, filename, p - filename))\n \t{\n \t  /* FILENAME is in SEARCHPTR, which we've already checked.  */"}, {"sha": "ab63719c4c8f8c88c9334589ae6f842375bf6bf1", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa765969fa9ce85b27bd20d9a966b0cabba5cdb/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=faa765969fa9ce85b27bd20d9a966b0cabba5cdb", "patch": "@@ -179,7 +179,7 @@ struct cpp_reader {\n   /* A buffer used for both for cpp_get_token's output, and also internally. */\n   unsigned char *token_buffer;\n   /* Allocated size of token_buffer.  CPP_RESERVE allocates space.  */\n-  int token_buffer_size;\n+  unsigned int token_buffer_size;\n   /* End of the written part of token_buffer. */\n   unsigned char *limit;\n \n@@ -279,12 +279,12 @@ struct cpp_reader {\n #define CPP_OUT_BUFFER(PFILE) ((PFILE)->token_buffer)\n \n /* Number of characters currently in PFILE's output buffer. */\n-#define CPP_WRITTEN(PFILE) ((PFILE)->limit - (PFILE)->token_buffer)\n+#define CPP_WRITTEN(PFILE) ((size_t)((PFILE)->limit - (PFILE)->token_buffer))\n #define CPP_PWRITTEN(PFILE) ((PFILE)->limit)\n \n /* Make sure PFILE->token_buffer has space for at least N more characters. */\n #define CPP_RESERVE(PFILE, N) \\\n-  (CPP_WRITTEN (PFILE) + N > (PFILE)->token_buffer_size \\\n+  (CPP_WRITTEN (PFILE) + (size_t)(N) > (PFILE)->token_buffer_size \\\n    && (cpp_grow_buffer (PFILE, N), 0))\n \n /* Append string STR (of length N) to PFILE's output buffer."}]}