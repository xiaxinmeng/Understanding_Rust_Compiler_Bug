{"sha": "ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxYzA1MTEwMmRkNmM0MGZjOGRiYWY5YWI4ZDg3YjA2YjQ3YjhkMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T16:31:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T16:31:21Z"}, "message": "[multiple changes]\n\n2014-01-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat_rm.texi (Scalar_Storage_Order): Update documentation.\n\n2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Set_Instance_Env): In Ada 2012 mode, preserve\n\tthe value of Assertions_Enabled flag when compiling an instance of\n\tan internal unit. This facilitates the use of pre/postconditions\n\tin generic internal units, such as the new elementary function\n\tlibraries.\n\n2014-01-21  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb: Minor reformatting.\n\t* sem_attr.adb: Minor reformatting.\n\t* sem_res.adb: Minor comment addition.\n\t* einfo.adb: Minor comment updates.\n\t* freeze.adb: Minor reformatting and code reorganization.\n\n2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch4.adb (P_If_Expression): Handle more gracefully an\n\telsif clause that does not have an else part.\n\nFrom-SVN: r206891", "tree": {"sha": "2e81b304337d613b7f421cfab2229fe139325a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e81b304337d613b7f421cfab2229fe139325a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/comments", "author": null, "committer": null, "parents": [{"sha": "637a41a5d77d096f6a595c683490bee7f9943f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637a41a5d77d096f6a595c683490bee7f9943f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637a41a5d77d096f6a595c683490bee7f9943f5c"}], "stats": {"total": 202, "additions": 121, "deletions": 81}, "files": [{"sha": "a09a80e12fd089fd49e5cb9960eab137ebc2064c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -1,3 +1,28 @@\n+2014-01-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat_rm.texi (Scalar_Storage_Order): Update documentation.\n+\n+2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Set_Instance_Env): In Ada 2012 mode, preserve\n+\tthe value of Assertions_Enabled flag when compiling an instance of\n+\tan internal unit. This facilitates the use of pre/postconditions\n+\tin generic internal units, such as the new elementary function\n+\tlibraries.\n+\n+2014-01-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_aggr.adb: Minor reformatting.\n+\t* sem_attr.adb: Minor reformatting.\n+\t* sem_res.adb: Minor comment addition.\n+\t* einfo.adb: Minor comment updates.\n+\t* freeze.adb: Minor reformatting and code reorganization.\n+\n+2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb (P_If_Expression): Handle more gracefully an\n+\telsif clause that does not have an else part.\n+\n 2014-01-21  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb, sem_util.ads, sem_ch4.adb: Minor reformatting."}, {"sha": "88643b8ec943566e29d79dbfe3de95f680b85953", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -264,8 +264,6 @@ package body Einfo is\n    --  sense for them to be set true for certain subsets of entity kinds. See\n    --  the spec of Einfo for further details.\n \n-   --  Note: Flag1-Flag3 are not used, for historical reasons\n-\n    --    Is_Frozen                       Flag4\n    --    Has_Discriminants               Flag5\n    --    Is_Dispatching_Operation        Flag6\n@@ -556,6 +554,10 @@ package body Einfo is\n    --    SPARK_Pragma_Inherited          Flag265\n    --    SPARK_Aux_Pragma_Inherited      Flag266\n \n+   --    (unused)                        Flag1\n+   --    (unused)                        Flag2\n+   --    (unused)                        Flag3\n+\n    --    (unused)                        Flag267\n    --    (unused)                        Flag268\n    --    (unused)                        Flag269"}, {"sha": "6c5104bac6a1e0d5d6482d137c413430ab5f5d4e", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -3190,7 +3190,7 @@ package body Exp_Aggr is\n             Insert_Action (N,\n               Make_Raise_Constraint_Error (Loc,\n                 Condition => Cond,\n-                Reason => CE_Discriminant_Check_Failed));\n+                Reason    => CE_Discriminant_Check_Failed));\n          end if;\n \n          return True;"}, {"sha": "310511f5275515d129852f13df7eb1d01c23012d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 51, "deletions": 70, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -233,7 +233,7 @@ package body Freeze is\n \n       --  Note that it is legal for a renaming_as_body to rename an intrinsic\n       --  subprogram, as long as the renaming occurs before the new entity\n-      --  is frozen. See RM 8.5.4 (5).\n+      --  is frozen (RM 8.5.4 (5)).\n \n       if Nkind (Body_Decl) = N_Subprogram_Renaming_Declaration\n         and then Is_Entity_Name (Name (Body_Decl))\n@@ -1174,7 +1174,6 @@ package body Freeze is\n                Error_Msg_N\n                  (\"type of non-byte-aligned component must have same scalar \"\n                   & \"storage order as enclosing composite\", Err_Node);\n-\n             end if;\n          end if;\n \n@@ -1257,9 +1256,7 @@ package body Freeze is\n \n       --  Do not attempt to analyze case where range was in error\n \n-      if No (Scalar_Range (E))\n-        or else Error_Posted (Scalar_Range (E))\n-      then\n+      if No (Scalar_Range (E)) or else Error_Posted (Scalar_Range (E)) then\n          return;\n       end if;\n \n@@ -1284,7 +1281,6 @@ package body Freeze is\n          Lo_Bound := Type_Low_Bound (Ancestor);\n \n          if Compile_Time_Known_Value (Lo_Bound) then\n-\n             if Expr_Rep_Value (Lo_Bound) >= 0 then\n                Set_Is_Unsigned_Type (E, True);\n             end if;\n@@ -1452,10 +1448,8 @@ package body Freeze is\n                end if;\n \n             elsif Ekind (E) in Task_Kind\n-              and then\n-                (Nkind (Parent (E)) = N_Task_Type_Declaration\n-                   or else\n-                 Nkind (Parent (E)) = N_Single_Task_Declaration)\n+              and then Nkind_In (Parent (E), N_Task_Type_Declaration,\n+                                             N_Single_Task_Declaration)\n             then\n                Push_Scope (E);\n                Freeze_All (First_Entity (E), After);\n@@ -1626,10 +1620,8 @@ package body Freeze is\n             end if;\n \n          elsif Ekind (E) in Task_Kind\n-           and then\n-             (Nkind (Parent (E)) = N_Task_Type_Declaration\n-                or else\n-              Nkind (Parent (E)) = N_Single_Task_Declaration)\n+           and then Nkind_In (Parent (E), N_Task_Type_Declaration,\n+                                          N_Single_Task_Declaration)\n          then\n             declare\n                Ent : Entity_Id;\n@@ -2075,11 +2067,12 @@ package body Freeze is\n             --  If packing was requested or if the component size was\n             --  set explicitly, then see if bit packing is required. This\n             --  processing is only done for base types, since all of the\n-            --  representation aspects involved are type-related. This is not\n-            --  just an optimization, if we start processing the subtypes, they\n-            --  interfere with the settings on the base type (this is because\n-            --  Is_Packed has a slightly different meaning before and after\n-            --  freezing).\n+            --  representation aspects involved are type-related.\n+\n+            --  This is not just an optimization, if we start processing the\n+            --  subtypes, they interfere with the settings on the base type\n+            --  (this is because Is_Packed has a slightly different meaning\n+            --  before and after freezing).\n \n             declare\n                Csiz : Uint;\n@@ -2240,10 +2233,11 @@ package body Freeze is\n             --  Check for Atomic_Components or Aliased with unsuitable packing\n             --  or explicit component size clause given.\n \n-            if (Has_Atomic_Components (Arr)\n-                 or else Has_Aliased_Components (Arr))\n-              and then (Has_Component_Size_Clause (Arr)\n-                         or else Is_Packed (Arr))\n+            if (Has_Atomic_Components  (Arr)\n+                  or else\n+                Has_Aliased_Components (Arr))\n+              and then\n+                (Has_Component_Size_Clause (Arr) or else Is_Packed (Arr))\n             then\n                Alias_Atomic_Check : declare\n \n@@ -2343,19 +2337,13 @@ package body Freeze is\n                   & \"accessible by separate tasks??\", Clause, Arr);\n \n                if Has_Component_Size_Clause (Arr) then\n-                  Error_Msg_Sloc :=\n-                    Sloc\n-                      (Get_Attribute_Definition_Clause\n-                           (FS, Attribute_Component_Size));\n-                  Error_Msg_N\n-                    (\"\\because of component size clause#??\",\n-                     Clause);\n+                  Error_Msg_Sloc := Sloc (Get_Attribute_Definition_Clause\n+                                           (FS, Attribute_Component_Size));\n+                  Error_Msg_N (\"\\because of component size clause#??\", Clause);\n \n                elsif Has_Pragma_Pack (Arr) then\n-                  Error_Msg_Sloc :=\n-                    Sloc (Get_Rep_Pragma (FS, Name_Pack));\n-                  Error_Msg_N\n-                    (\"\\because of pragma Pack#??\", Clause);\n+                  Error_Msg_Sloc := Sloc (Get_Rep_Pragma (FS, Name_Pack));\n+                  Error_Msg_N (\"\\because of pragma Pack#??\", Clause);\n                end if;\n             end if;\n \n@@ -2433,8 +2421,7 @@ package body Freeze is\n                   end loop;\n \n                   if Elmts > Intval (High_Bound\n-                                     (Scalar_Range\n-                                        (Standard_Integer))) + 1\n+                                       (Scalar_Range (Standard_Integer))) + 1\n                   then\n                      Error_Msg_N\n                        (\"bit packed array type may not have \"\n@@ -2780,7 +2767,7 @@ package body Freeze is\n \n                   if Is_Itype (Etype (Comp))\n                     and then Is_Record_Type (Underlying_Type\n-                                             (Scope (Etype (Comp))))\n+                                               (Scope (Etype (Comp))))\n                   then\n                      Undelay_Type (Etype (Comp));\n                   end if;\n@@ -2820,21 +2807,25 @@ package body Freeze is\n                   --  Check for error of component clause given for variable\n                   --  sized type. We have to delay this test till this point,\n                   --  since the component type has to be frozen for us to know\n-                  --  if it is variable length. We omit this test in a generic\n-                  --  context, it will be applied at instantiation time.\n-\n-                  --  We also omit this test in CodePeer mode, since we do not\n-                  --  have sufficient info on size and representation clauses.\n+                  --  if it is variable length.\n \n                   if Present (CC) then\n                      Placed_Component := True;\n \n+                     --  We omit this test in a generic context, it will be\n+                     --  applied at instantiation time.\n+\n                      if Inside_A_Generic then\n                         null;\n \n+                     --  Also omit this test in CodePeer mode, since we do not\n+                     --  have sufficient info on size and rep clauses.\n+\n                      elsif CodePeer_Mode then\n                         null;\n \n+                     --  Do the check\n+\n                      elsif not\n                        Size_Known_At_Compile_Time\n                          (Underlying_Type (Etype (Comp)))\n@@ -3011,11 +3002,11 @@ package body Freeze is\n               and then Present (Expression (Parent (Comp)))\n               and then Nkind (Expression (Parent (Comp))) = N_Aggregate\n               and then Is_Fully_Defined\n-                 (Designated_Type (Component_Type (Etype (Comp))))\n+                         (Designated_Type (Component_Type (Etype (Comp))))\n             then\n                Freeze_And_Append\n                  (Designated_Type\n-                   (Component_Type (Etype (Comp))), N, Result);\n+                    (Component_Type (Etype (Comp))), N, Result);\n             end if;\n \n             Prev := Comp;\n@@ -3816,9 +3807,9 @@ package body Freeze is\n \n                         elsif (Is_Tagged_Type (R_Type)\n                                 or else (Is_Access_Type (R_Type)\n-                                           and then\n-                                             Is_Tagged_Type\n-                                               (Designated_Type (R_Type))))\n+                                          and then\n+                                            Is_Tagged_Type\n+                                              (Designated_Type (R_Type))))\n                           and then Convention (E) = Convention_C\n                           and then not Has_Warnings_Off (E)\n                           and then not Has_Warnings_Off (R_Type)\n@@ -4118,13 +4109,8 @@ package body Freeze is\n \n             --  Remaining step is to layout objects\n \n-            if Ekind (E) = E_Variable\n-                 or else\n-               Ekind (E) = E_Constant\n-                 or else\n-               Ekind (E) = E_Loop_Parameter\n-                 or else\n-               Is_Formal (E)\n+            if Ekind_In (E, E_Variable, E_Constant, E_Loop_Parameter)\n+              or else Is_Formal (E)\n             then\n                Layout_Object (E);\n             end if;\n@@ -4449,8 +4435,7 @@ package body Freeze is\n \n          elsif Is_Concurrent_Type (E) then\n             if Present (Corresponding_Record_Type (E)) then\n-               Freeze_And_Append\n-                 (Corresponding_Record_Type (E), N, Result);\n+               Freeze_And_Append (Corresponding_Record_Type (E), N, Result);\n             end if;\n \n             Comp := First_Entity (E);\n@@ -4596,9 +4581,7 @@ package body Freeze is\n             --  amendment type, so diagnosis is at the point of use and the\n             --  type might be frozen later.\n \n-            elsif E /= Base_Type (E)\n-              or else Is_Derived_Type (E)\n-            then\n+            elsif E /= Base_Type (E) or else Is_Derived_Type (E) then\n                null;\n \n             else\n@@ -4813,8 +4796,7 @@ package body Freeze is\n                --  be an array type, or a nonlimited record type).\n \n                if Has_Private_Declaration (E) then\n-                  if (not Is_Record_Type (E)\n-                       or else not Is_Limited_View (E))\n+                  if (not Is_Record_Type (E) or else not Is_Limited_View (E))\n                     and then not Is_Private_Type (E)\n                   then\n                      Error_Msg_Name_1 := Name_Simple_Storage_Pool_Type;\n@@ -4845,7 +4827,8 @@ package body Freeze is\n                   --  Upon return, Pool_Op_Formal will be updated to the next\n                   --  formal, if any.\n \n-                  procedure Validate_Simple_Pool_Operation (Op_Name : Name_Id);\n+                  procedure Validate_Simple_Pool_Operation\n+                    (Op_Name : Name_Id);\n                   --  Search for and validate a simple pool operation with the\n                   --  name Op_Name. If the name is Allocate, then there must be\n                   --  exactly one such primitive operation for the simple pool\n@@ -6784,18 +6767,16 @@ package body Freeze is\n             --  directly.\n \n             if Nkind (Dcopy) = N_Identifier\n-              or else Nkind (Dcopy) = N_Expanded_Name\n-              or else Nkind (Dcopy) = N_Integer_Literal\n+              or else Nkind_In (Dcopy, N_Expanded_Name,\n+                                       N_Integer_Literal,\n+                                       N_Character_Literal,\n+                                       N_String_Literal)\n               or else (Nkind (Dcopy) = N_Real_Literal\n                         and then not Vax_Float (Etype (Dcopy)))\n-              or else Nkind (Dcopy) = N_Character_Literal\n-              or else Nkind (Dcopy) = N_String_Literal\n-              or else Known_Null (Dcopy)\n               or else (Nkind (Dcopy) = N_Attribute_Reference\n-                        and then\n-                       Attribute_Name (Dcopy) = Name_Null_Parameter)\n+                        and then Attribute_Name (Dcopy) = Name_Null_Parameter)\n+              or else Known_Null (Dcopy)\n             then\n-\n                --  If there is no default function, we must still do a full\n                --  analyze call on the default value, to ensure that all error\n                --  checks are performed, e.g. those associated with static"}, {"sha": "9d270c92095366d5f03abf90cf7b6366db99d29a", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -8897,8 +8897,9 @@ order as the parent type.\n \n If a component of @var{S} has itself a record or array type, then it shall also\n have a @code{Scalar_Storage_Order} attribute definition clause. In addition,\n-if the component does not start on a byte boundary, then the scalar storage\n-order specified for S and for the nested component type shall be identical.\n+if the component is a packed array, or does not start on a byte boundary, then\n+the scalar storage order specified for S and for the nested component type shall\n+be identical.\n \n If @var{S} appears as the type of a record or array component, the enclosing\n record or array shall also have a @code{Scalar_Storage_Order} attribute"}, {"sha": "ab66f5c850a656ca051e1cf53861f829b8ce46af", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -3078,16 +3078,25 @@ package body Ch4 is\n    function P_If_Expression return Node_Id is\n       Exprs : constant List_Id    := New_List;\n       Loc   : constant Source_Ptr := Token_Ptr;\n+      Cond  : Node_Id;\n       Expr  : Node_Id;\n       State : Saved_Scan_State;\n \n    begin\n       Inside_If_Expression := Inside_If_Expression + 1;\n       Error_Msg_Ada_2012_Feature (\"|if expression\", Token_Ptr);\n       Scan; -- past IF or ELSIF\n-      Append_To (Exprs, P_Condition);\n-      TF_Then;\n-      Append_To (Exprs, P_Expression);\n+      Cond := P_Condition;\n+\n+      if Token = Tok_Then then\n+         Scan;  --  past THEN\n+         Append_To (Exprs, Cond);\n+         Append_To (Exprs, P_Expression);\n+\n+      else\n+         Error_Msg (\"ELSIF should be ELSE\", Loc);\n+         return Cond;\n+      end if;\n \n       --  We now have scanned out IF expr THEN expr\n \n@@ -3110,7 +3119,14 @@ package body Ch4 is\n \n       if Token = Tok_Elsif then\n          Expr := P_If_Expression;\n-         Set_Is_Elsif (Expr);\n+\n+         if Nkind (Expr) = N_If_Expression then\n+            Set_Is_Elsif (Expr);\n+\n+            --  Otherwise, this is an incomplete ELSIF as reported earlier,\n+            --  so treat the expression as a final ELSE for better recovery.\n+         end if;\n+\n          Append_To (Exprs, Expr);\n \n       --  Scan out ELSE phrase if present"}, {"sha": "5727e6d0990f6f161cc010c1f2de9e68b7b1c72d", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -9788,8 +9788,9 @@ package body Sem_Attr is\n                    Object_Access_Level (P) > Deepest_Type_Access_Level (Btyp)\n                  and then Attr_Id = Attribute_Access\n                then\n-                  --  In an instance, this is a runtime check, but one we\n-                  --  know will fail, so generate an appropriate warning.\n+                  --  In an instance, this is a runtime check, but one we know\n+                  --  will fail, so generate an appropriate warning. As usual,\n+                  --  this kind of warning is an error in SPARK mode.\n \n                   if In_Instance_Body then\n                      Error_Msg_Warn := SPARK_Mode /= On;"}, {"sha": "6b9c5feffc7d2b87e854ac4336f724065bef89b5", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -13796,6 +13796,8 @@ package body Sem_Ch12 is\n      (Gen_Unit : Entity_Id;\n       Act_Unit : Entity_Id)\n    is\n+      Assertion_Status : constant Boolean := Assertions_Enabled;\n+\n    begin\n       --  Regardless of the current mode, predefined units are analyzed in the\n       --  most current Ada mode, and earlier version Ada checks do not apply\n@@ -13807,6 +13809,16 @@ package body Sem_Ch12 is\n             Renamings_Included => True)\n       then\n          Set_Opt_Config_Switches (True, Current_Sem_Unit = Main_Unit);\n+\n+         --  In Ada2012 we may want to enable assertions in an instance of a\n+         --  predefined unit, in which case we need to preserve the current\n+         --  setting for the Assertions_Enabled flag. This will become more\n+         --  critical when pre/postconditions are added to predefined units,\n+         --  as is already the case for some numeric libraries.\n+\n+         if Ada_Version >= Ada_2012 then\n+            Assertions_Enabled := Assertion_Status;\n+         end if;\n       end if;\n \n       Current_Instantiated_Parent :="}, {"sha": "dbc13d3400829997b43015f8dd35541fa24ea68f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ef1c051102dd6c40fc8dbaf9ab8d87b06b47b8d0", "patch": "@@ -9069,6 +9069,8 @@ package body Sem_Res is\n          T := Etype (P);\n       end if;\n \n+      --  Set flag for expander if discriminant check required\n+\n       if Has_Discriminants (T)\n         and then Ekind_In (Entity (S), E_Component, E_Discriminant)\n         and then Present (Original_Record_Component (Entity (S)))"}]}