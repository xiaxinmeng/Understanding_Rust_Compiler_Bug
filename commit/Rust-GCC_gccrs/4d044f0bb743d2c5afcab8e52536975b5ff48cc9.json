{"sha": "4d044f0bb743d2c5afcab8e52536975b5ff48cc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwNDRmMGJiNzQzZDJjNWFmY2FiOGU1MjUzNjk3NWI1ZmY0OGNjOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T17:04:46Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T17:04:46Z"}, "message": "[arm] Add missing arm-isa.h\n\nFrom-SVN: r243718", "tree": {"sha": "f948714a7297ebdaea3d79908a508dd592d81e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f948714a7297ebdaea3d79908a508dd592d81e22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d044f0bb743d2c5afcab8e52536975b5ff48cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d044f0bb743d2c5afcab8e52536975b5ff48cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d044f0bb743d2c5afcab8e52536975b5ff48cc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d044f0bb743d2c5afcab8e52536975b5ff48cc9/comments", "author": null, "committer": null, "parents": [{"sha": "e3889521e1bfb21b289d77612afac7e888b3eff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3889521e1bfb21b289d77612afac7e888b3eff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3889521e1bfb21b289d77612afac7e888b3eff0"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "25182e52728237aab6f247bf3560d76236447100", "filename": "gcc/config/arm/arm-isa.h", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d044f0bb743d2c5afcab8e52536975b5ff48cc9/gcc%2Fconfig%2Farm%2Farm-isa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d044f0bb743d2c5afcab8e52536975b5ff48cc9/gcc%2Fconfig%2Farm%2Farm-isa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-isa.h?ref=4d044f0bb743d2c5afcab8e52536975b5ff48cc9", "patch": "@@ -0,0 +1,156 @@\n+/* ISA feature bits for ARM.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef ARM_ISA_FEATURE_H\n+#define ARM_ISA_FEATURE_H\n+\n+enum isa_feature\n+  {\n+    isa_nobit,\t\t/* Must be first.  */\n+    isa_bit_ARMv3m,\t/* Extended multiply.  */\n+    isa_bit_mode26,\t/* 26-bit mode support.  */\n+    isa_bit_mode32,\t/* 32-bit mode support.  */\n+    isa_bit_ARMv4,\t/* Architecture rel 4.  */\n+    isa_bit_ARMv5,\t/* Architecture rel 5.\t*/\n+    isa_bit_thumb,\t/* Thumb aware.  */\n+    isa_bit_ARMv5e,\t/* Architecture rel 5e.  */\n+    isa_bit_xscale,\t/* XScale.  */\n+    isa_bit_ARMv6,\t/* Architecture rel 6.  */\n+    isa_bit_ARMv6k,\t/* Architecture rel 6k.  */\n+    isa_bit_thumb2,\t/* Thumb-2.  */\n+    isa_bit_notm,\t/* Instructions that are not present in 'M' profile.  */\n+    isa_bit_tdiv,\t/* Thumb division instructions.  */\n+    isa_bit_ARMv7em,\t/* Architecture rel 7e-m.  */\n+    isa_bit_ARMv7,\t/* Architecture rel 7.  */\n+    isa_bit_adiv,\t/* ARM division instructions.  */\n+    isa_bit_ARMv8,\t/* Architecture rel 8.  */\n+    isa_bit_crc32,\t/* ARMv8 CRC32 instructions.  */\n+    isa_bit_iwmmxt,\t/* XScale v2 (Wireless MMX).  */\n+    isa_bit_iwmmxt2,\t/* XScale Wireless MMX2.  */\n+    isa_bit_ARMv8_1,\t/* Architecture rel 8.1.  */\n+    isa_bit_ARMv8_2,\t/* Architecutre rel 8.2.  */\n+    isa_bit_cmse,\t/* M-Profile security extensions.  */\n+    /* Floating point and Neon extensions.  */\n+    /* VFPv1 is not supported in GCC.  */\n+    isa_bit_VFPv2,\t/* Vector floating point v2.  */\n+    isa_bit_VFPv3,\t/* Vector floating point v3.  */\n+    isa_bit_VFPv4,\t/* Vector floating point v4.  */\n+    isa_bit_FPv5,\t/* Floating point v5.  */\n+    isa_bit_FP_ARMv8,\t/* ARMv8 floating-point extension.  */\n+    isa_bit_neon,\t/* Advanced SIMD instructions.  */\n+    isa_bit_fp16conv,\t/* Conversions to/from fp16 (VFPv3 extension).  */\n+    isa_bit_fp_dbl,\t/* Double precision operations supported.  */\n+    isa_bit_fp_d32,\t/* 32 Double precision registers.  */\n+    isa_bit_crypto,\t/* Crypto extension to ARMv8.  */\n+    isa_bit_fp16,\t/* FP16 data processing (half-precision float).  */\n+\n+    /* ISA Quirks (errata?).  Don't forget to add this to the list of\n+       all quirks below.  */\n+    isa_quirk_no_volatile_ce,\t/* No volatile memory in IT blocks.  */\n+    isa_quirk_ARMv6kz,\t\t/* Previously mis-identified by GCC.  */\n+    isa_quirk_cm3_ldrd,\t\t/* Cortex-M3 LDRD quirk.  */\n+\n+    /* Aren't currently, but probably should be tuning bits.  */\n+    isa_bit_smallmul,\t/* Slow multiply operations.  */\n+\n+    /* Tuning bits.  Should be elsewhere.  */\n+    isa_tune_co_proc,\t/* Has co-processor bus.  */\n+    isa_tune_ldsched,\t/* Load scheduling necessary.  */\n+    isa_tune_strong,\t/* StrongARM.  */\n+    isa_tune_wbuf,\t/* Schedule for write buffer ops (ARM6 & 7 only).  */\n+\n+    /* Must be last, used to dimension arrays.  */\n+    isa_num_bits\n+  };\n+\n+/* Helper macros for use when defining CPUs and architectures.\n+\n+   There must be no parenthesees in these lists, since they are used\n+   to initialize arrays.  */\n+\n+#define ISA_ARMv2\tisa_bit_notm\n+#define ISA_ARMv3\tISA_ARMv2, isa_bit_mode32\n+#define ISA_ARMv3m\tISA_ARMv3, isa_bit_ARMv3m\n+#define ISA_ARMv4\tISA_ARMv3m, isa_bit_ARMv4\n+#define ISA_ARMv4t\tISA_ARMv4, isa_bit_thumb\n+#define ISA_ARMv5\tISA_ARMv4, isa_bit_ARMv5\n+#define ISA_ARMv5t\tISA_ARMv5, isa_bit_thumb\n+#define ISA_ARMv5e\tISA_ARMv5, isa_bit_ARMv5e\n+#define ISA_ARMv5te\tISA_ARMv5e, isa_bit_thumb\n+#define ISA_ARMv5tej\tISA_ARMv5te\n+#define ISA_ARMv6\tISA_ARMv5te, isa_bit_ARMv6\n+#define ISA_ARMv6j\tISA_ARMv6\n+#define ISA_ARMv6k\tISA_ARMv6, isa_bit_ARMv6k\n+#define ISA_ARMv6z\tISA_ARMv6\n+#define ISA_ARMv6kz\tISA_ARMv6k, isa_quirk_ARMv6kz\n+#define ISA_ARMv6zk\tISA_ARMv6k\n+#define ISA_ARMv6t2\tISA_ARMv6, isa_bit_thumb2\n+\n+/* This is suspect.  ARMv6-m doesn't really pull in any useful features\n+   from ARMv5* or ARMv6.  */\n+#define ISA_ARMv6m\tisa_bit_mode32, isa_bit_ARMv3m, isa_bit_ARMv4, \\\n+    isa_bit_thumb, isa_bit_ARMv5, isa_bit_ARMv5e, isa_bit_ARMv6\n+/* This is suspect, the 'common' ARMv7 subset excludes the thumb2 'DSP' and\n+   integer SIMD instructions that are in ARMv6T2.  */\n+#define ISA_ARMv7\tISA_ARMv6m, isa_bit_thumb2, isa_bit_ARMv7\n+#define ISA_ARMv7a\tISA_ARMv7, isa_bit_notm, isa_bit_ARMv6k\n+#define ISA_ARMv7ve\tISA_ARMv7a, isa_bit_adiv, isa_bit_tdiv\n+#define ISA_ARMv7r\tISA_ARMv7a, isa_bit_tdiv\n+#define ISA_ARMv7m\tISA_ARMv7, isa_bit_tdiv\n+#define ISA_ARMv7em\tISA_ARMv7m, isa_bit_ARMv7em\n+#define ISA_ARMv8a\tISA_ARMv7ve, isa_bit_ARMv8\n+#define ISA_ARMv8_1a\tISA_ARMv8a, isa_bit_crc32, isa_bit_ARMv8_1\n+#define ISA_ARMv8_2a\tISA_ARMv8_1a, isa_bit_ARMv8_2\n+#define ISA_ARMv8m_base ISA_ARMv6m, isa_bit_ARMv8, isa_bit_cmse, isa_bit_tdiv\n+#define ISA_ARMv8m_main ISA_ARMv7m, isa_bit_ARMv8, isa_bit_cmse\n+\n+/* List of all FPU bits to strip out if -mfpu is used to override the\n+   default.  isa_bit_fp16 is deliberately missing from this list.  */\n+#define ISA_ALL_FPU\tisa_bit_VFPv2, isa_bit_VFPv3, isa_bit_VFPv4, \\\n+    isa_bit_FPv5, isa_bit_FP_ARMv8, isa_bit_neon, isa_bit_fp16conv, \\\n+    isa_bit_fp_dbl, isa_bit_fp_d32, isa_bit_crypto\n+\n+/* Useful combinations.  */\n+#define ISA_VFPv2\tisa_bit_VFPv2\n+#define ISA_VFPv3\tISA_VFPv2, isa_bit_VFPv3\n+#define ISA_VFPv4\tISA_VFPv3, isa_bit_VFPv4, isa_bit_fp16conv\n+#define ISA_FPv5\tISA_VFPv4, isa_bit_FPv5\n+#define ISA_FP_ARMv8\tISA_FPv5, isa_bit_FP_ARMv8\n+\n+#define ISA_FP_DBL\tisa_bit_fp_dbl\n+#define ISA_FP_D32\tISA_FP_DBL, isa_bit_fp_d32\n+#define ISA_NEON\tISA_FP_D32, isa_bit_neon\n+#define ISA_CRYPTO\tISA_NEON, isa_bit_crypto\n+\n+/* List of all quirk bits to strip out when comparing CPU features with\n+   architectures.  */\n+#define ISA_ALL_QUIRKS\tisa_quirk_no_volatile_ce, isa_quirk_ARMv6kz,\t\\\n+    isa_quirk_cm3_ldrd\n+\n+/* Helper macro so that we can concatenate multiple features together\n+   with arm-*.def files, since macro substitution can't have commas within an\n+   argument that lacks parenthesis.  */\n+#define ISA_FEAT(X)\tX,\n+#endif"}]}