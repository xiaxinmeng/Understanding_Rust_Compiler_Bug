{"sha": "1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZiZmIwZTI3YTk4MjgwMmFiYzJjZGQ0ZTVhN2Q1YzRlZmY0OWY1ZQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-07-29T09:11:51Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-07-29T09:11:51Z"}, "message": "re PR fortran/36403 (Some fortran tests using eoshift fail on SH)\n\n2008-07-29  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/36403\n\t* trans-intrinsic.c (conv_generic_with_optional_char_arg):  New method\n\tto append a string-length even if the string argument is missing, e.g.\n\tfor EOSHIFT.\n\t(gfc_conv_intrinsic_function):  Call the new method for EOSHIFT, PACK\n\tand RESHAPE.\n\n2008-07-29  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/36403\n\t* gfortran.dg/char_eoshift_5.f90:  New test.\n\t* gfortran.dg/intrinsic_optional_char_arg_1.f90:  New test.\n\nFrom-SVN: r138234", "tree": {"sha": "1aab016d4f8bfcb5d507252ce55dbb189ec16514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aab016d4f8bfcb5d507252ce55dbb189ec16514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c54989af547fdee4f47a176270d8bd3363e5132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c54989af547fdee4f47a176270d8bd3363e5132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c54989af547fdee4f47a176270d8bd3363e5132"}], "stats": {"total": 153, "additions": 152, "deletions": 1}, "files": [{"sha": "b15bcfb7adead808a4cf9f8c6d978eac906af2d0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "patch": "@@ -1,3 +1,12 @@\n+2008-07-29  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/36403\n+\t* trans-intrinsic.c (conv_generic_with_optional_char_arg):  New method\n+\tto append a string-length even if the string argument is missing, e.g.\n+\tfor EOSHIFT.\n+\t(gfc_conv_intrinsic_function):  Call the new method for EOSHIFT, PACK\n+\tand RESHAPE.\n+\n 2008-07-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gfortran.h (try): Remove macro.  Replace try with gfc_try"}, {"sha": "bbb129dbdcd5077d96bd4e6a69fd0d7d48c7fe81", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "patch": "@@ -2652,6 +2652,64 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n   se->expr = fold_build3 (COND_EXPR, type, tmp, args[0], rrot);\n }\n \n+\n+/* Process an intrinsic with unspecified argument-types that has an optional\n+   argument (which could be of type character), e.g. EOSHIFT.  For those, we\n+   need to append the string length of the optional argument if it is not\n+   present and the type is really character.\n+   primary specifies the position (starting at 1) of the non-optional argument\n+   specifying the type and optional gives the position of the optional\n+   argument in the arglist.  */\n+\n+static void\n+conv_generic_with_optional_char_arg (gfc_se* se, gfc_expr* expr,\n+\t\t\t\t     unsigned primary, unsigned optional)\n+{\n+  gfc_actual_arglist* prim_arg;\n+  gfc_actual_arglist* opt_arg;\n+  unsigned cur_pos;\n+  gfc_actual_arglist* arg;\n+  gfc_symbol* sym;\n+  tree append_args;\n+\n+  /* Find the two arguments given as position.  */\n+  cur_pos = 0;\n+  prim_arg = NULL;\n+  opt_arg = NULL;\n+  for (arg = expr->value.function.actual; arg; arg = arg->next)\n+    {\n+      ++cur_pos;\n+\n+      if (cur_pos == primary)\n+\tprim_arg = arg;\n+      if (cur_pos == optional)\n+\topt_arg = arg;\n+\n+      if (cur_pos >= primary && cur_pos >= optional)\n+\tbreak;\n+    }\n+  gcc_assert (prim_arg);\n+  gcc_assert (prim_arg->expr);\n+  gcc_assert (opt_arg);\n+\n+  /* If we do have type CHARACTER and the optional argument is really absent,\n+     append a dummy 0 as string length.  */\n+  append_args = NULL_TREE;\n+  if (prim_arg->expr->ts.type == BT_CHARACTER && !opt_arg->expr)\n+    {\n+      tree dummy;\n+\n+      dummy = build_int_cst (gfc_charlen_type_node, 0);\n+      append_args = gfc_chainon_list (append_args, dummy);\n+    }\n+\n+  /* Build the call itself.  */\n+  sym = gfc_get_symbol_for_expr (expr);\n+  gfc_conv_function_call (se, sym, expr->value.function.actual, append_args);\n+  gfc_free (sym);\n+}\n+\n+\n /* The length of a character string.  */\n static void\n gfc_conv_intrinsic_len (gfc_se * se, gfc_expr * expr)\n@@ -4128,7 +4186,22 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n \t{\n \t  if (lib == 1)\n \t    se->ignore_optional = 1;\n-\t  gfc_conv_intrinsic_funcall (se, expr);\n+\n+\t  switch (expr->value.function.isym->id)\n+\t    {\n+\t    case GFC_ISYM_EOSHIFT:\n+\t    case GFC_ISYM_PACK:\n+\t    case GFC_ISYM_RESHAPE:\n+\t      /* For all of those the first argument specifies the type and the\n+\t\t third is optional.  */\n+\t      conv_generic_with_optional_char_arg (se, expr, 1, 3);\n+\t      break;\n+\n+\t    default:\n+\t      gfc_conv_intrinsic_funcall (se, expr);\n+\t      break;\n+\t    }\n+\n \t  return;\n \t}\n     }\n@@ -4606,6 +4679,14 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_funcall (se, expr);\n       break;\n \n+    case GFC_ISYM_EOSHIFT:\n+    case GFC_ISYM_PACK:\n+    case GFC_ISYM_RESHAPE:\n+      /* For those, expr->rank should always be >0 and thus the if above the\n+\t switch should have matched.  */\n+      gcc_unreachable ();\n+      break;\n+\n     default:\n       gfc_conv_intrinsic_lib_function (se, expr);\n       break;"}, {"sha": "e6ec66ef5ba9c27500fea0f4e2e9a6497379759c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "patch": "@@ -1,3 +1,9 @@\n+2008-07-29  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/36403\n+\t* gfortran.dg/char_eoshift_5.f90:  New test.\n+\t* gfortran.dg/intrinsic_optional_char_arg_1.f90:  New test.\n+\n 2008-07-28  Richard Guenther  <rguenther@suse.de>\n \n \tMerge from gimple-tuples-branch."}, {"sha": "93c701a4f1ba828b72b6be237086ee739a5104d9", "filename": "gcc/testsuite/gfortran.dg/char_eoshift_5.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_5.f90?ref=1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+\n+! PR fortran/36403\n+! Check that the string length of BOUNDARY is added to the library-eoshift\n+! call even if BOUNDARY is missing (as it is optional).\n+! This is the original test from the PR.\n+\n+! Contributed by Kazumoto Kojima.\n+\n+  CHARACTER(LEN=3), DIMENSION(10) :: Z\n+  call test_eoshift\n+contains\n+  subroutine test_eoshift \n+    CHARACTER(LEN=1), DIMENSION(10) :: chk\n+    chk(1:8) = \"5\"\n+    chk(9:10) = \" \"\n+    Z(:)=\"456\"\n+    if (any (EOSHIFT(Z(:)(2:2),2) .ne. chk)) call abort \n+  END subroutine\n+END\n+\n+! Check that _gfortran_eoshift* is called with 8 arguments:\n+! { dg-final { scan-tree-dump \"_gfortran_eoshift\\[0-9_\\]+char \\\\(\\[&a-zA-Z0-9._\\]*, \\[&a-zA-Z0-9._\\]*, \\[&a-zA-Z0-9._\\]*, \\[&a-zA-Z0-9._\\]*, \\[&a-zA-Z0-9._\\]*, \\[&a-zA-Z0-9._\\]*, \\[&a-zA-Z0-9._\\]*, \\[&a-zA-Z0-9._\\]*\\\\)\" \"original\" } }"}, {"sha": "5352ee4bf260203930b6ef07430de295449c146b", "filename": "gcc/testsuite/gfortran.dg/intrinsic_optional_char_arg_1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_optional_char_arg_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_optional_char_arg_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_optional_char_arg_1.f90?ref=1fbfb0e27a982802abc2cdd4e5a7d5c4eff49f5e", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+\n+! PR fortran/36403\n+! Check that string lengths of optional arguments are added to the library-call\n+! even if those arguments are missing.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+  CHARACTER(len=1) :: vect(4)\n+  CHARACTER(len=1) :: matrix(2, 2)\n+\n+  matrix(1, 1) = \"\"\n+  matrix(2, 1) = \"a\"\n+  matrix(1, 2) = \"b\"\n+  matrix(2, 2) = \"\"\n+  vect = (/ \"w\", \"x\", \"y\", \"z\" /)\n+\n+  ! Call the affected intrinsics\n+  vect = EOSHIFT (vect, 2)\n+  vect = PACK (matrix, matrix /= \"\")\n+  matrix = RESHAPE (vect, (/ 2, 2 /))\n+\n+END PROGRAM main\n+\n+! All library function should be called with *two* trailing arguments \"1\" for\n+! the string lengths of both the main array and the optional argument:\n+! { dg-final { scan-tree-dump \"_eoshift\\[0-9_\\]+char \\\\(\\[&a-zA-Z0-9._, \\]+, 1, 0\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"_reshape\\[0-9_\\]+char \\\\(\\[&a-zA-Z0-9._, \\]+, 1, 0\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"_pack\\[0-9_\\]+char \\\\(\\[&a-zA-Z0-9._, \\]+, 1, 0\\\\)\" \"original\" } }"}]}