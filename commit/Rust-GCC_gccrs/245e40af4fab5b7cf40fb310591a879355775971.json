{"sha": "245e40af4fab5b7cf40fb310591a879355775971", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ1ZTQwYWY0ZmFiNWI3Y2Y0MGZiMzEwNTkxYTg3OTM1NTc3NTk3MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-28T22:41:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-29T22:49:59Z"}, "message": "c++: Fix attributes with lambda and trailing return type.\n\nMy fix for 60503 fixed handling of C++11 attributes following the\nlambda-declarator.  My patch for 89640 re-added support for GNU attributes,\nbut attributes after the trailing return type were parsed as applying to the\nreturn type rather than to the function.  This patch adjusts parsing of a\ntrailing-return-type to ignore GNU attributes at the end of the declaration\nso that they will be applied to the declaration as a whole.\n\nI also considered parsing the attributes between the closing paren and the\ntrailing-return-type, and tried a variety of approaches to implementing\nthat, but I think it's better to stick with the documented rule that \"An\nattribute specifier list may appear immediately before the comma, '=' or\nsemicolon terminating the declaration of an identifier....\"  Anyone\ndisagree?\n\nMeanwhile, C++ committee discussion about the lack of any way to apply\nattributes to a lambda op() seems to have concluded that they should go\nbetween the introducer and declarator, so I've implemented that as well.\n\n\tPR c++/90333\n\tPR c++/89640\n\tPR c++/60503\n\t* parser.c (cp_parser_type_specifier_seq): Don't parse attributes in\n\ta trailing return type.\n\t(cp_parser_lambda_declarator_opt): Parse C++11 attributes before\n\tparens.", "tree": {"sha": "06ce229101cdb2d7663bfb2bc8784750125c8438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ce229101cdb2d7663bfb2bc8784750125c8438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/245e40af4fab5b7cf40fb310591a879355775971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245e40af4fab5b7cf40fb310591a879355775971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245e40af4fab5b7cf40fb310591a879355775971", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245e40af4fab5b7cf40fb310591a879355775971/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165255c7a562e04e3be89eb1c87b4ac3c5248d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165255c7a562e04e3be89eb1c87b4ac3c5248d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165255c7a562e04e3be89eb1c87b4ac3c5248d77"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "b3075832205fd94d63df82915eeb46169604c9a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245e40af4fab5b7cf40fb310591a879355775971/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245e40af4fab5b7cf40fb310591a879355775971/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=245e40af4fab5b7cf40fb310591a879355775971", "patch": "@@ -1,3 +1,13 @@\n+2020-01-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90333\n+\tPR c++/89640\n+\tPR c++/60503\n+\t* parser.c (cp_parser_type_specifier_seq): Don't parse attributes in\n+\ta trailing return type.\n+\t(cp_parser_lambda_declarator_opt): Parse C++11 attributes before\n+\tparens.\n+\n 2020-01-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91754 - Fix template arguments comparison with class NTTP."}, {"sha": "bd8e524f0780c5b2774306c0de3025a9cf65e843", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245e40af4fab5b7cf40fb310591a879355775971/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245e40af4fab5b7cf40fb310591a879355775971/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=245e40af4fab5b7cf40fb310591a879355775971", "patch": "@@ -10962,6 +10962,9 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       ++parser->num_template_parameter_lists;\n     }\n \n+  /* Committee discussion supports allowing attributes here.  */\n+  lambda_specs.attributes = cp_parser_attributes_opt (parser);\n+\n   /* The parameter-declaration-clause is optional (unless\n      template-parameter-list was given), but must begin with an\n      opening parenthesis if present.  */\n@@ -11097,7 +11100,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n     fco = grokmethod (&return_type_specs,\n \t\t      declarator,\n-\t\t      gnu_attrs);\n+\t\t      chainon (gnu_attrs, lambda_specs.attributes));\n     if (fco != error_mark_node)\n       {\n \tDECL_INITIALIZED_IN_CLASS_P (fco) = 1;\n@@ -22277,6 +22280,18 @@ cp_parser_type_specifier_seq (cp_parser* parser,\n       /* Check for attributes first.  */\n       if (cp_next_tokens_can_be_attribute_p (parser))\n \t{\n+\t  /* GNU attributes at the end of a declaration apply to the\n+\t     declaration as a whole, not to the trailing return type.  So look\n+\t     ahead to see if these attributes are at the end.  */\n+\t  if (seen_type_specifier && is_trailing_return\n+\t      && cp_next_tokens_can_be_gnu_attribute_p (parser))\n+\t    {\n+\t      size_t n = cp_parser_skip_attributes_opt (parser, 1);\n+\t      cp_token *tok = cp_lexer_peek_nth_token (parser->lexer, n);\n+\t      if (tok->type == CPP_SEMICOLON || tok->type == CPP_COMMA\n+\t\t  || tok->type == CPP_EQ || tok->type == CPP_OPEN_BRACE)\n+\t\tbreak;\n+\t    }\n \t  type_specifier_seq->attributes\n \t    = attr_chainon (type_specifier_seq->attributes,\n \t\t\t    cp_parser_attributes_opt (parser));"}, {"sha": "ff3fb901ddd7ca82d15f0fbbc7a3b75974ac098c", "filename": "gcc/testsuite/g++.dg/ext/attr-trailing1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245e40af4fab5b7cf40fb310591a879355775971/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-trailing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245e40af4fab5b7cf40fb310591a879355775971/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-trailing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-trailing1.C?ref=245e40af4fab5b7cf40fb310591a879355775971", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/90333\n+// { dg-do compile { target c++11 } }\n+\n+auto l = [] [[nodiscard]] () -> int { return 0; };\n+auto l2 = []() -> int __attribute ((warn_unused_result)) { return 0; };\n+auto f() -> int __attribute ((warn_unused_result));\n+auto f() -> int { return 0; }\n+\n+int main()\n+{\n+  l();\t\t\t\t// { dg-warning \"nodiscard\" }\n+  l2();\t\t\t\t// { dg-warning \"unused_result\" }\n+  f();\t\t\t\t// { dg-warning \"unused_result\" }\n+}"}]}