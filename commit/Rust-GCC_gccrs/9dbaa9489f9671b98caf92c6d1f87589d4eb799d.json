{"sha": "9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRiYWE5NDg5Zjk2NzFiOThjYWY5MmM2ZDFmODc1ODlkNGViNzk5ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-01T15:34:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-01T15:34:07Z"}, "message": "re PR libstdc++/10378 ([library DR 402] cannot add object with inplace new into STL collections)\n\n2003-12-01  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/10378\n\t* include/bits/allocator.h (allocator::construct): Implement\n\tresolution of DR 402 [Ready] (in Revision 28).\n\t* include/bits/allocator_traits.h (__allocator::construct):\n\tLikewise.\n\t* include/bits/stl_construct.h (_Construct): Likewise.\n\t* testsuite/20_util/allocator_members.cc: Move to...\n\t* testsuite/20_util/allocator/1.cc: ... here.\n\t* testsuite/20_util/allocator/10378.cc: New.\n\t* docs/html/ext/howto.html: Add an entry for DR 402.\n\nFrom-SVN: r74104", "tree": {"sha": "5b0afb3841c075eaec8f179b049a6ff4579b5fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0afb3841c075eaec8f179b049a6ff4579b5fce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/comments", "author": null, "committer": null, "parents": [{"sha": "ec22cdf1405e694fb9b1c9557e6ef20baa7f7e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec22cdf1405e694fb9b1c9557e6ef20baa7f7e01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec22cdf1405e694fb9b1c9557e6ef20baa7f7e01"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "0a9e6729f93bb07e855d4e3e8eccf3fcdf40d670", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "patch": "@@ -1,3 +1,16 @@\n+2003-12-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/10378\n+\t* include/bits/allocator.h (allocator::construct): Implement\n+\tresolution of DR 402 [Ready] (in Revision 28).\n+\t* include/bits/allocator_traits.h (__allocator::construct):\n+\tLikewise.\n+\t* include/bits/stl_construct.h (_Construct): Likewise.\n+\t* testsuite/20_util/allocator_members.cc: Move to...\n+\t* testsuite/20_util/allocator/1.cc: ... here.\n+\t* testsuite/20_util/allocator/10378.cc: New.\n+\t* docs/html/ext/howto.html: Add an entry for DR 402.\n+\n 2003-11-30  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/gnu/codecvt_members.cc (codecvt::do_in,"}, {"sha": "c5e3e20d08c55497c337129d98b8aeef455ffbb7", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "patch": "@@ -694,6 +694,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     </dt>\n     <dd>Change the format string to &quot;%.0Lf&quot;.\n     </dd>\n+\n+    <dt><a href=\"lwg-active.html#402\">402</a>:\n+        <em>Wrong new expression in [some_]allocator::construct</em>\n+    </dt>\n+    <dd>Replace &quot;new&quot; with &quot;::new&quot;.\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "53d1d351f08ae3003993b2e7e3a5608b10e02303", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "patch": "@@ -172,8 +172,10 @@ namespace std\n       size_type\n       max_size() const throw() { return size_t(-1) / sizeof(_Tp); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 402. wrong new expression in [some_]allocator::construct\n       void \n-      construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }\n+      construct(pointer __p, const _Tp& __val) { ::new(__p) _Tp(__val); }\n \n       void \n       destroy(pointer __p) { __p->~_Tp(); }"}, {"sha": "93bae7a2d44236131b892e58ca403e59c6f9fc26", "filename": "libstdc++-v3/include/bits/allocator_traits.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator_traits.h?ref=9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "patch": "@@ -149,9 +149,11 @@ namespace std\n       \n       size_type\n       max_size() const throw() { return size_t(-1) / sizeof(_Tp); }\n-      \n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 402. wrong new expression in [some_]allocator::construct\n       void\n-      construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }\n+      construct(pointer __p, const _Tp& __val) { ::new(__p) _Tp(__val); }\n       \n       void\n       destroy(pointer __p) { __p->~_Tp(); }"}, {"sha": "d33bd7d749dde04adad6dedebac9d1282655d264", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "patch": "@@ -75,7 +75,11 @@ namespace std\n   template <class _T1, class _T2>\n     inline void\n     _Construct(_T1* __p, const _T2& __value)\n-    { new (static_cast<void*>(__p)) _T1(__value); }\n+    {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 402. wrong new expression in [some_]allocator::construct\n+      ::new (static_cast<void*>(__p)) _T1(__value); \n+    }\n   \n   /**\n    * @if maint\n@@ -86,7 +90,11 @@ namespace std\n   template <class _T1>\n     inline void\n     _Construct(_T1* __p)\n-    { new (static_cast<void*>(__p)) _T1(); }\n+    {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 402. wrong new expression in [some_]allocator::construct     \n+      ::new (static_cast<void*>(__p)) _T1();\n+    }\n \n   /**\n    * @if maint"}, {"sha": "4170a9d9a966c1ca039600fbd86b2d98a9ab98fe", "filename": "libstdc++-v3/testsuite/20_util/allocator/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc?ref=9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "previous_filename": "libstdc++-v3/testsuite/20_util/allocator_members.cc"}, {"sha": "88193b5a33fd1a8387af00b78ea6d38eea9c8bdd", "filename": "libstdc++-v3/testsuite/20_util/allocator/10378.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F10378.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbaa9489f9671b98caf92c6d1f87589d4eb799d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F10378.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F10378.cc?ref=9dbaa9489f9671b98caf92c6d1f87589d4eb799d", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.1.5 allocator requirements / 20.4.1.1 allocator members\n+\n+#include <list>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+class Bob\n+{\n+public:\n+  static void* operator new(size_t sz)\n+  { return std::malloc(sz); }\n+};\n+\n+// libstdc++/10378\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  list<Bob> uniset;\n+  uniset.push_back(Bob());\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}