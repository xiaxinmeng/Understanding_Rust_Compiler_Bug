{"sha": "eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhNWZhN2I3ZTdiYjYwYzMxYTM5YWM4ZTlkZTFkZGYzMGQ2NzcyNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-17T07:22:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-17T07:22:43Z"}, "message": "(cplusplus_comments): New var.\n\n(main): Set it according to options.\n(rescan, handle_directive, skip_if_group, validate_else):\n(skip_to_end_of_comment, macarg1, discard_comments):\nUse cplusplus_comments to enable C++ comment syntax.\n\nFrom-SVN: r2498", "tree": {"sha": "35155ce97980649cd20ee17599974a873d53b0d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35155ce97980649cd20ee17599974a873d53b0d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724/comments", "author": null, "committer": null, "parents": [{"sha": "8328559dece1b0a7a484d39ddfa9f901172915f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8328559dece1b0a7a484d39ddfa9f901172915f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8328559dece1b0a7a484d39ddfa9f901172915f6"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "dba4ef8f133a2d3f18b400886c5cdd258ebf92c1", "filename": "gcc/cccp.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=eda5fa7b7e7bb60c31a39ac8e9de1ddf30d67724", "patch": "@@ -316,11 +316,14 @@ static void dump_single_macro ();\n \n static char *progname;\n \n-/* Nonzero means handle C++ comment syntax and use\n-   extra default include directories for C++.  */\n+/* Nonzero means use extra default include directories for C++.  */\n \n static int cplusplus;\n \n+/* Nonzero means handle cplusplus style comments */\n+\n+static int cplusplus_comments;\n+\n /* Nonzero means handle #import, for objective C.  */\n \n static int objc;\n@@ -1003,6 +1006,7 @@ main (argc, argv)\n   dump_macros = dump_none;\n   no_output = 0;\n   cplusplus = 0;\n+  cplusplus_comments = 0;\n \n   bzero (pend_files, argc * sizeof (char *));\n   bzero (pend_defs, argc * sizeof (char *));\n@@ -1103,21 +1107,21 @@ main (argc, argv)\n \n       case 'l':\n \tif (! strcmp (argv[i], \"-lang-c\"))\n-\t  cplusplus = 0, objc = 0;\n+\t  cplusplus = 0, cplusplus_comments = 0, objc = 0;\n \tif (! strcmp (argv[i], \"-lang-c++\"))\n-\t  cplusplus = 1, objc = 0;\n+\t  cplusplus = 1, cplusplus_comments = 1, objc = 0;\n \tif (! strcmp (argv[i], \"-lang-objc\"))\n-\t  objc = 1, cplusplus = 0;\n+\t  objc = 1, cplusplus = 0, cplusplus_comments = 1;\n \tif (! strcmp (argv[i], \"-lang-objc++\"))\n-\t  objc = 1, cplusplus = 1;\n+\t  objc = 1, cplusplus = 1, cplusplus_comments = 1;\n  \tif (! strcmp (argv[i], \"-lang-asm\"))\n  \t  lang_asm = 1;\n  \tif (! strcmp (argv[i], \"-lint\"))\n  \t  lint = 1;\n \tbreak;\n \n       case '+':\n-\tcplusplus = 1;\n+\tcplusplus = 1, cplusplus_comments = 1;\n \tbreak;\n \n       case 'w':\n@@ -2287,7 +2291,7 @@ do { ip = &instack[indepth];\t\t\\\n \t\tbp++;\n \t      bp += 2;\n \t    }\n-\t    else if ((cplusplus || objc) && *bp == '/' && bp[1] == '/') {\n+\t    else if (cplusplus_comments && *bp == '/' && bp[1] == '/') {\n \t      bp += 2;\n \t      while (*bp++ != '\\n') ;\n \t    }\n@@ -2419,7 +2423,7 @@ do { ip = &instack[indepth];\t\t\\\n \tnewline_fix (ibp);\n \n       if (*ibp != '*'\n-\t  && !((cplusplus || objc) && *ibp == '/'))\n+\t  && !(cplusplus_comments && *ibp == '/'))\n \tgoto randomchar;\n       if (ip->macro != 0)\n \tgoto randomchar;\n@@ -3220,7 +3224,7 @@ handle_directive (ip, op)\n \t  if (*bp == '\\\\' && bp[1] == '\\n')\n \t    newline_fix (bp);\n \t  if (*bp == '*'\n-\t      || ((cplusplus || objc) && *bp == '/')) {\n+\t      || (cplusplus_comments && *bp == '/')) {\n \t    U_CHAR *obp = bp - 1;\n \t    ip->bufp = bp + 1;\n \t    skip_to_end_of_comment (ip, &ip->lineno, 0);\n@@ -3356,7 +3360,7 @@ handle_directive (ip, op)\n \n \t  case '/':\n \t    if (*xp == '*'\n-\t\t|| ((cplusplus || objc) && *xp == '/')) {\n+\t\t|| (cplusplus_comments && *xp == '/')) {\n \t      ip->bufp = xp + 1;\n \t      /* If we already copied the command through,\n \t\t already_output != 0 prevents outputting comment now.  */\n@@ -6210,7 +6214,7 @@ skip_if_group (ip, any)\n       if (*bp == '\\\\' && bp[1] == '\\n')\n \tnewline_fix (bp);\n       if (*bp == '*'\n-\t  || ((cplusplus || objc) && *bp == '/')) {\n+\t  || (cplusplus_comments && *bp == '/')) {\n \tip->bufp = ++bp;\n \tbp = skip_to_end_of_comment (ip, &ip->lineno, 0);\n       }\n@@ -6252,7 +6256,7 @@ skip_if_group (ip, any)\n \t  while (!(*bp == '*' && bp[1] == '/'))\n \t    bp++;\n \t  bp += 2;\n-\t} else if ((cplusplus || objc) && *bp == '/' && bp[1] == '/') {\n+\t} else if (cplusplus_comments && *bp == '/' && bp[1] == '/') {\n \t  bp += 2;\n \t  while (*bp++ != '\\n') ;\n         }\n@@ -6279,7 +6283,7 @@ skip_if_group (ip, any)\n \t    bp++;\n \t  }\n \t  bp += 2;\n-\t} else if ((cplusplus || objc) && *bp == '/' && bp[1] == '/') {\n+\t} else if (cplusplus_comments && *bp == '/' && bp[1] == '/') {\n \t  bp += 2;\n \t  while (*bp++ != '\\n') ;\n         }\n@@ -6541,7 +6545,7 @@ validate_else (p)\n \t  p++;\n \t}\n       }\n-      else if ((cplusplus || objc) && p[1] == '/') {\n+      else if (cplusplus_comments && p[1] == '/') {\n \tp += 2;\n \twhile (*p && *p++ != '\\n') ;\n       }\n@@ -6579,7 +6583,7 @@ skip_to_end_of_comment (ip, line_counter, nowarn)\n     *op->bufp++ = '/';\n     *op->bufp++ = '*';\n   }\n-  if ((cplusplus || objc) && bp[-1] == '/') {\n+  if (cplusplus_comments && bp[-1] == '/') {\n     if (output) {\n       while (bp < limit)\n \tif ((*op->bufp++ = *bp++) == '\\n') {\n@@ -7371,7 +7375,7 @@ macarg1 (start, limit, depthptr, newlines, comments, rest_args)\n     case '/':\n       if (bp[1] == '\\\\' && bp[2] == '\\n')\n \tnewline_fix (bp + 1);\n-      if ((cplusplus || objc) && bp[1] == '/') {\n+      if (cplusplus_comments && bp[1] == '/') {\n \t*comments = 1;\n \tbp += 2;\n \twhile (bp < limit && *bp++ != '\\n') ;\n@@ -7482,7 +7486,7 @@ discard_comments (start, length, newlines)\n       if (*ibp == '\\\\' && ibp[1] == '\\n')\n \tnewline_fix (ibp);\n       /* Delete any comment.  */\n-      if ((cplusplus || objc) && ibp[0] == '/') {\n+      if (cplusplus_comments && ibp[0] == '/') {\n \tobp--;\n \tibp++;\n \twhile (ibp < limit && *ibp++ != '\\n') ;"}]}