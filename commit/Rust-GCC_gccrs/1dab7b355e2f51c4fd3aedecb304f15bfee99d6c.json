{"sha": "1dab7b355e2f51c4fd3aedecb304f15bfee99d6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhYjdiMzU1ZTJmNTFjNGZkM2FlZGVjYjMwNGYxNWJmZWU5OWQ2Yw==", "commit": {"author": {"name": "Aurelien Jarno", "email": "aurelien@aurel32.net", "date": "2008-04-07T12:30:03Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2008-04-07T12:30:03Z"}, "message": "s-osinte-linux-kfreebsd.ads (SC_NPROCESSORS_ONLN): New constant constant for sysconf call.\n\n2008-04-07  Aurelien Jarno  <aurelien@aurel32.net>\n\n        * s-osinte-linux-kfreebsd.ads (SC_NPROCESSORS_ONLN): New\n        constant constant for sysconf call.\n        (bit_field): New packed boolean type used by cpu_set_t.\n        (cpu_set_t): New type corresponding to the C type with\n        the same name. Note that on the Ada side we use a bit\n        field array for the affinity mask. There is not need\n        for the C macro for setting individual bit.\n        (pthread_setaffinity_np): New imported routine.\n        * Makefile.in: Use s-tasinf-linux.ads and s-tasinf-linux.adb\n        on GNU/kFreeBSD.\n\nFrom-SVN: r133978", "tree": {"sha": "7dfaa9a59a8f722dc98076e9a8be70f51e3eec4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dfaa9a59a8f722dc98076e9a8be70f51e3eec4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c/comments", "author": {"login": "aurel32", "id": 7688913, "node_id": "MDQ6VXNlcjc2ODg5MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7688913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aurel32", "html_url": "https://github.com/aurel32", "followers_url": "https://api.github.com/users/aurel32/followers", "following_url": "https://api.github.com/users/aurel32/following{/other_user}", "gists_url": "https://api.github.com/users/aurel32/gists{/gist_id}", "starred_url": "https://api.github.com/users/aurel32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aurel32/subscriptions", "organizations_url": "https://api.github.com/users/aurel32/orgs", "repos_url": "https://api.github.com/users/aurel32/repos", "events_url": "https://api.github.com/users/aurel32/events{/privacy}", "received_events_url": "https://api.github.com/users/aurel32/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39fcde8ff2ba378999f0466b8d65c233042c51b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39fcde8ff2ba378999f0466b8d65c233042c51b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39fcde8ff2ba378999f0466b8d65c233042c51b6"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "c4ed0e7df24d2cf6c0530b25346a9623e899b226", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1dab7b355e2f51c4fd3aedecb304f15bfee99d6c", "patch": "@@ -1,3 +1,16 @@\n+2008-04-07  Aurelien Jarno  <aurelien@aurel32.net>\n+\n+\t* s-osinte-linux-kfreebsd.ads (SC_NPROCESSORS_ONLN): New \n+\tconstant constant for sysconf call.\n+\t(bit_field): New packed boolean type used by cpu_set_t.\n+\t(cpu_set_t): New type corresponding to the C type with\n+\tthe same name. Note that on the Ada side we use a bit\n+\tfield array for the affinity mask. There is not need\n+\tfor the C macro for setting individual bit.\n+\t(pthread_setaffinity_np): New imported routine.\n+\t* Makefile.in: Use s-tasinf-linux.ads and s-tasinf-linux.adb\n+\ton GNU/kFreeBSD.\n+\n 2008-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* utils2.c (build_binary_op): Fold ARRAY_REF and ARRAY_RANGE_REF too."}, {"sha": "291b0a8f79c670cd2d560b5d8d1f3ae1fc43f063", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=1dab7b355e2f51c4fd3aedecb304f15bfee99d6c", "patch": "@@ -892,6 +892,8 @@ ifeq ($(strip $(filter-out %86 kfreebsd%,$(arch) $(osys))),)\n   s-osinte.ads<s-osinte-kfreebsd-gnu.ads \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-freebsd-x86.ads"}, {"sha": "17c112905002b8c0880ad557983924cde40da6b2", "filename": "gcc/ada/s-osinte-kfreebsd-gnu.ads", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c/gcc%2Fada%2Fs-osinte-kfreebsd-gnu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dab7b355e2f51c4fd3aedecb304f15bfee99d6c/gcc%2Fada%2Fs-osinte-kfreebsd-gnu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-kfreebsd-gnu.ads?ref=1dab7b355e2f51c4fd3aedecb304f15bfee99d6c", "patch": "@@ -223,7 +223,8 @@ package System.OS_Interface is\n    function sysconf (name : int) return long;\n    pragma Import (C, sysconf);\n \n-   SC_CLK_TCK : constant := 2;\n+   SC_CLK_TCK          : constant := 2;\n+   SC_NPROCESSORS_ONLN : constant := 84;\n \n    -------------------------\n    -- Priority Scheduling --\n@@ -255,6 +256,7 @@ package System.OS_Interface is\n \n    type Thread_Body is access\n      function (arg : System.Address) return System.Address;\n+   pragma Convention (C, Thread_Body);\n \n    function Thread_Body_Access is new\n      Unchecked_Conversion (System.Address, Thread_Body);\n@@ -438,12 +440,31 @@ package System.OS_Interface is\n    pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n \n    type destructor_pointer is access procedure (arg : System.Address);\n+   pragma Convention (C, destructor_pointer);\n \n    function pthread_key_create\n      (key        : access pthread_key_t;\n       destructor : destructor_pointer) return int;\n    pragma Import (C, pthread_key_create, \"pthread_key_create\");\n \n+   CPU_SETSIZE : constant := 1_024;\n+\n+   type bit_field is array (1 .. CPU_SETSIZE) of Boolean;\n+   for bit_field'Size use CPU_SETSIZE;\n+   pragma Pack (bit_field);\n+   pragma Convention (C, bit_field);\n+\n+   type cpu_set_t is record\n+      bits : bit_field;\n+   end record;\n+   pragma Convention (C, cpu_set_t);\n+\n+   function pthread_setaffinity_np\n+     (thread     : pthread_t;\n+      cpusetsize : size_t;\n+      cpuset     : access cpu_set_t) return int;\n+   pragma Import (C, pthread_setaffinity_np, \"__gnat_pthread_setaffinity_np\");\n+\n private\n \n    type sigset_t is array (1 .. 4) of unsigned;"}]}