{"sha": "7e9282ae62f5318686dcd58498337090531cd6fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U5MjgyYWU2MmY1MzE4Njg2ZGNkNTg0OTgzMzcwOTA1MzFjZDZmYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-06T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-06T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "3ffc3508629af2b41784b634d2aaacdecb6f7605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ffc3508629af2b41784b634d2aaacdecb6f7605"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e9282ae62f5318686dcd58498337090531cd6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9282ae62f5318686dcd58498337090531cd6fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9282ae62f5318686dcd58498337090531cd6fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9282ae62f5318686dcd58498337090531cd6fc/comments", "author": null, "committer": null, "parents": [{"sha": "9af65c2b9047168f14e623d55f87beda33ba1503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af65c2b9047168f14e623d55f87beda33ba1503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af65c2b9047168f14e623d55f87beda33ba1503"}], "stats": {"total": 147, "additions": 146, "deletions": 1}, "files": [{"sha": "cd3901b940ccb5280f1396915e4c7ad5cd3aeeae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e9282ae62f5318686dcd58498337090531cd6fc", "patch": "@@ -1,3 +1,54 @@\n+2020-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::legacy_intersect): Only handle\n+\tlegacy ranges.\n+\t(irange::legacy_union): Same.\n+\t(irange::union_): When unioning legacy with non-legacy,\n+\tfirst convert to legacy and do everything in legacy mode.\n+\t(irange::intersect): Same, but for intersect.\n+\t* range-op.cc (range_tests): Adjust for above changes.\n+\n+2020-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_div::wi_fold): Return varying for\n+\tdivision by zero.\n+\t(class operator_rshift): Move class up.\n+\t(operator_abs::wi_fold): Return [-MIN,-MIN] for ABS([-MIN,-MIN]).\n+\t(operator_tests): Adjust tests.\n+\n+2020-10-05  Tom de Vries  <tdevries@suse.de>\n+\n+\t* tracer.c (ignore_bb_p): Ignore GOMP_SIMT_XCHG_*.\n+\n+2020-10-05  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/arm/arm-cpus.in (neoverse-v1): Add missing vendor and\n+\tpart numbers.\n+\n+2020-10-05  Tom de Vries  <tdevries@suse.de>\n+\n+\t* tracer.c (ignore_bb_p): Remove incorrect suggestion.\n+\n+2020-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* opth-gen.awk: Don't emit explicit_mask array if n_target_explicit\n+\tis equal to n_target_explicit_mask.\n+\t* optc-save-gen.awk: Compute has_target_explicit_mask and if false,\n+\tdon't emit code iterating over explicit_mask array elements.  Stream\n+\talso explicit_mask_* target members.\n+\n+2020-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-ssa-store-merging.c\n+\t(imm_store_chain_info::output_merged_store): Use ~0U instead of ~0 in\n+\tunsigned int array initializer.\n+\n+2020-10-05  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR fortran/95654\n+\t* tracer.c (ignore_bb_p): Ignore GOMP_SIMT_ENTER_ALLOC,\n+\tGOMP_SIMT_VOTE_ANY and GOMP_SIMT_EXIT.\n+\n 2020-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* opth-gen.awk: For variables referenced in Mask and InverseMask,"}, {"sha": "684bf4bc84dafebc61632769411a23d6ac8666c8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7e9282ae62f5318686dcd58498337090531cd6fc", "patch": "@@ -1 +1 @@\n-20201005\n+20201006"}, {"sha": "98895552e303ec077d35f9148b763f2b3795d2b8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7e9282ae62f5318686dcd58498337090531cd6fc", "patch": "@@ -1,3 +1,14 @@\n+2020-10-05  Richard Biener  <rguenther@suse.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97197\n+\t* c-pretty-print.c: Include langhooks.h.\n+\t(c_pretty_printer::postfix_expression): Handle TARGET_MEM_REF as\n+\texpression.\n+\t(c_pretty_printer::expression): Handle TARGET_MEM_REF as\n+\tunary_expression.\n+\t(c_pretty_printer::unary_expression): Handle TARGET_MEM_REF.\n+\n 2020-09-30  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97189"}, {"sha": "a741e0634f3bc587e402fca50280d0f4765bdcfc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e9282ae62f5318686dcd58498337090531cd6fc", "patch": "@@ -1,3 +1,20 @@\n+2020-10-05  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-tree.h (NON_UNION_CLASS_TYPE_P): Fix typo in a comment.\n+\n+2020-10-05  Richard Biener  <rguenther@suse.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97197\n+\t* error.c (dump_expr): Handle TARGET_MEM_REF.\n+\n+2020-10-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (maybe_add_fuzzy_decl): New.\n+\t(maybe_add_fuzzy_binding): New.\n+\t(consider_binding_level): Use intermediate sortable vector for\n+\tnamespace bindings.\n+\n 2020-10-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97014"}, {"sha": "5b92a025a4bc5cd8285aff1fd168b41b234d2c6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9282ae62f5318686dcd58498337090531cd6fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e9282ae62f5318686dcd58498337090531cd6fc", "patch": "@@ -1,3 +1,7 @@\n+2020-10-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-c++-common/spellcheck-reserved.c: Restore diagnostic.\n+\n 2020-10-04  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/97272"}, {"sha": "929eabbca650b0f71b4a18a8964d0ba08ae9e96f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9282ae62f5318686dcd58498337090531cd6fc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9282ae62f5318686dcd58498337090531cd6fc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7e9282ae62f5318686dcd58498337090531cd6fc", "patch": "@@ -1,3 +1,8 @@\n+2020-10-05  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR fortran/95654\n+\t* testsuite/libgomp.fortran/pr95654.f90: New test.\n+\n 2020-10-02  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* Makefile.in: Regenerate with automake 1.15.1."}, {"sha": "a2ca5d3aed396b80a4080d67883011085361cb79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9282ae62f5318686dcd58498337090531cd6fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9282ae62f5318686dcd58498337090531cd6fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7e9282ae62f5318686dcd58498337090531cd6fc", "patch": "@@ -1,3 +1,60 @@\n+2020-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h: Use __int_traits<int> instead of\n+\tstd::numeric_limits<int>.\n+\t* include/bits/uniform_int_dist.h: Use __int_traits<T>::__max\n+\tinstead of std::numeric_limits<T>::max().\n+\t* include/bits/hashtable_policy.h: Use size_t(-1) instead of\n+\tstd::numeric_limits<size_t>::max().\n+\t* include/std/regex: Include <ext/numeric_traits.h>.\n+\t* include/std/string_view: Use typedef for __int_traits<int>.\n+\t* src/c++11/hashtable_c++0x.cc: Use size_t(-1) instead of\n+\tstd::numeric_limits<size_t>::max().\n+\t* testsuite/std/ranges/iota/96042.cc: Include <limits>.\n+\t* testsuite/std/ranges/iota/difference_type.cc: Likewise.\n+\t* testsuite/std/ranges/subrange/96042.cc: Likewise.\n+\n+2020-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/numeric: Move all #include directives to the top\n+\tof the header.\n+\t* testsuite/26_numerics/gcd/gcd_neg.cc: Adjust dg-error line\n+\tnumbers.\n+\t* testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.\n+\n+2020-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver: Add new symbol.\n+\t* include/bits/functexcept.h (__throw_bad_array_new_length):\n+\tDeclare new function.\n+\t* include/ext/malloc_allocator.h (malloc_allocator::allocate):\n+\tThrow bad_array_new_length for impossible sizes (LWG 3190).\n+\t* include/ext/new_allocator.h (new_allocator::allocate):\n+\tLikewise.\n+\t* include/std/memory_resource (polymorphic_allocator::allocate)\n+\t(polymorphic_allocator::allocate_object): Use new function,\n+\t__throw_bad_array_new_length.\n+\t* src/c++11/functexcept.cc (__throw_bad_array_new_length):\n+\tDefine.\n+\t* testsuite/20_util/allocator/lwg3190.cc: New test.\n+\n+2020-10-05  Mike Crowe  <mac@mcrowe.com>\n+\n+\tPR libstdc++/91486\n+\t* include/bits/atomic_futex.h:\n+\t(__atomic_futex_unsigned::_M_load_when_equal_until): Use target\n+\tclock duration type when rounding.\n+\t* testsuite/30_threads/async/async.cc (test_pr91486_wait_for):\n+\tRename from test_pr91486.\n+\t(float_steady_clock): New class for test.\n+\t(test_pr91486_wait_until): New test.\n+\n+2020-10-05  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* testsuite/20_util/duration_cast/rounding_c++11.cc: Copy\n+\trounding.cc and alter to support compilation for C++11 and to\n+\ttest std::chrono::__detail::ceil.\n+\n 2020-10-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/29_atomics/atomic_float/value_init.cc: Use float"}]}