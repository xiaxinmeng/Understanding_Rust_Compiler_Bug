{"sha": "ee95f9288a029478f1fbf9741db51855ac9a552b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5NWY5Mjg4YTAyOTQ3OGYxZmJmOTc0MWRiNTE4NTVhYzlhNTUyYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-11-28T17:39:15Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-11-28T17:39:15Z"}, "message": "Add support for a minimal version of libgfortran for accelerator targets.\n\n\t* Makefile.am (AM_CFLAGS): Add -DLIBGFOR_MINIMAL if LIBGFOR_MINIMAL.\n        (gfor_io_src, gfor_heper_src, gfor_src): Split into minimal and\n        always included sources.\n        * Makefile.in: Regenerate.\n        * configure.ac (LIBGFOR_MINIMAL): New AM_CONDITIONAL.\n        * configure: Regenerate.\n        * caf/single.c (caf_runtime_error): Don't print messages if\n        LIBGFOR_MINIMAL.\n        * runtime/compile_options.c (fatal_error_in_progress,\n        show_signal, backtrace_handler, maybe_find_addr2line): Guard with\n        !defined LIBGFOR_MINIMAL.\n        (set_options): Likewise for the backtrace code.\n        * runtime/minimal.c: New file.\n\nFrom-SVN: r218170", "tree": {"sha": "0e296527e984f03d733bdbf9031d556f5292b19a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e296527e984f03d733bdbf9031d556f5292b19a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee95f9288a029478f1fbf9741db51855ac9a552b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee95f9288a029478f1fbf9741db51855ac9a552b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee95f9288a029478f1fbf9741db51855ac9a552b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee95f9288a029478f1fbf9741db51855ac9a552b/comments", "author": null, "committer": null, "parents": [{"sha": "8760be8546edd0941c1d62dd47e5130fae5df953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8760be8546edd0941c1d62dd47e5130fae5df953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8760be8546edd0941c1d62dd47e5130fae5df953"}], "stats": {"total": 1098, "additions": 690, "deletions": 408}, "files": [{"sha": "24ad58ecb57d803a7d1691e38b2c04f7f6018d74", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ee95f9288a029478f1fbf9741db51855ac9a552b", "patch": "@@ -1,3 +1,19 @@\n+2014-11-28  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+        * Makefile.am (AM_CFLAGS): Add -DLIBGFOR_MINIMAL if LIBGFOR_MINIMAL.\n+        (gfor_io_src, gfor_heper_src, gfor_src): Split into minimal and\n+        always included sources.\n+        * Makefile.in: Regenerate.\n+        * configure.ac (LIBGFOR_MINIMAL): New AM_CONDITIONAL.\n+        * configure: Regenerate.\n+        * caf/single.c (caf_runtime_error): Don't print messages if\n+        LIBGFOR_MINIMAL.\n+        * runtime/compile_options.c (fatal_error_in_progress,\n+        show_signal, backtrace_handler, maybe_find_addr2line): Guard with\n+        !defined LIBGFOR_MINIMAL.\n+        (set_options): Likewise for the backtrace code.\n+        * runtime/minimal.c: New file.\n+\n 2014-11-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* intrinsics/env.c (getenv): Remove unused variable res_len."}, {"sha": "31eb986f441296a54f3504593c895570cbd5423f", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 62, "deletions": 36, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=ee95f9288a029478f1fbf9741db51855ac9a552b", "patch": "@@ -77,7 +77,16 @@ AM_CFLAGS += $(SECTION_FLAGS)\n AM_CFLAGS += $(IEEE_FLAGS)\n AM_FCFLAGS += $(IEEE_FLAGS)\n \n+if LIBGFOR_MINIMAL\n+AM_CFLAGS += -DLIBGFOR_MINIMAL\n+endif\n+\n gfor_io_src= \\\n+io/size_from_kind.c\n+\n+if !LIBGFOR_MINIMAL\n+\n+gfor_io_src+= \\\n io/close.c \\\n io/file_pos.c \\\n io/format.c \\\n@@ -87,14 +96,15 @@ io/list_read.c \\\n io/lock.c \\\n io/open.c \\\n io/read.c \\\n-io/size_from_kind.c \\\n io/transfer.c \\\n io/transfer128.c \\\n io/unit.c \\\n io/unix.c \\\n io/write.c \\\n io/fbuf.c\n \n+endif\n+\n gfor_io_headers= \\\n io/io.h \\\n io/fbuf.h \\\n@@ -104,67 +114,73 @@ io/unix.h\n gfor_helper_src= \\\n intrinsics/associated.c \\\n intrinsics/abort.c \\\n-intrinsics/access.c \\\n intrinsics/args.c \\\n intrinsics/bit_intrinsics.c \\\n-intrinsics/c99_functions.c \\\n-intrinsics/chdir.c \\\n-intrinsics/chmod.c \\\n-intrinsics/clock.c \\\n-intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n-intrinsics/ctime.c \\\n-intrinsics/date_and_time.c \\\n-intrinsics/dtime.c \\\n-intrinsics/env.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/erfc_scaled.c \\\n-intrinsics/etime.c \\\n-intrinsics/execute_command_line.c \\\n-intrinsics/exit.c \\\n intrinsics/extends_type_of.c \\\n intrinsics/fnum.c \\\n-intrinsics/gerror.c \\\n-intrinsics/getcwd.c \\\n-intrinsics/getlog.c \\\n-intrinsics/getXid.c \\\n-intrinsics/hostnm.c \\\n intrinsics/ierrno.c \\\n intrinsics/ishftc.c \\\n intrinsics/iso_c_generated_procs.c \\\n intrinsics/iso_c_binding.c \\\n-intrinsics/kill.c \\\n-intrinsics/link.c \\\n intrinsics/malloc.c \\\n intrinsics/mvbits.c \\\n intrinsics/move_alloc.c \\\n intrinsics/pack_generic.c \\\n-intrinsics/perror.c \\\n intrinsics/selected_char_kind.c \\\n-intrinsics/signal.c \\\n intrinsics/size.c \\\n-intrinsics/sleep.c \\\n intrinsics/spread_generic.c \\\n intrinsics/string_intrinsics.c \\\n-intrinsics/system.c \\\n intrinsics/rand.c \\\n intrinsics/random.c \\\n-intrinsics/rename.c \\\n intrinsics/reshape_generic.c \\\n intrinsics/reshape_packed.c \\\n intrinsics/selected_int_kind.f90 \\\n intrinsics/selected_real_kind.f90 \\\n+intrinsics/transpose_generic.c \\\n+intrinsics/unpack_generic.c \\\n+runtime/in_pack_generic.c \\\n+runtime/in_unpack_generic.c\n+\n+if !LIBGFOR_MINIMAL\n+\n+gfor_helper_src+= \\\n+intrinsics/access.c \\\n+intrinsics/c99_functions.c \\\n+intrinsics/chdir.c \\\n+intrinsics/chmod.c \\\n+intrinsics/clock.c \\\n+intrinsics/cpu_time.c \\\n+intrinsics/ctime.c \\\n+intrinsics/date_and_time.c \\\n+intrinsics/dtime.c \\\n+intrinsics/env.c \\\n+intrinsics/etime.c \\\n+intrinsics/execute_command_line.c \\\n+intrinsics/exit.c \\\n+intrinsics/gerror.c \\\n+intrinsics/getcwd.c \\\n+intrinsics/getlog.c \\\n+intrinsics/getXid.c \\\n+intrinsics/hostnm.c \\\n+intrinsics/kill.c \\\n+intrinsics/link.c \\\n+intrinsics/perror.c \\\n+intrinsics/signal.c \\\n+intrinsics/sleep.c \\\n+intrinsics/system.c \\\n+intrinsics/rename.c \\\n intrinsics/stat.c \\\n intrinsics/symlnk.c \\\n intrinsics/system_clock.c \\\n intrinsics/time.c \\\n-intrinsics/transpose_generic.c \\\n intrinsics/umask.c \\\n-intrinsics/unlink.c \\\n-intrinsics/unpack_generic.c \\\n-runtime/in_pack_generic.c \\\n-runtime/in_unpack_generic.c\n+intrinsics/unlink.c\n+\n+endif\n \n if IEEE_SUPPORT\n \n@@ -182,19 +198,29 @@ gfor_ieee_src=\n endif\n \n gfor_src= \\\n-runtime/backtrace.c \\\n runtime/bounds.c \\\n runtime/compile_options.c \\\n+runtime/memory.c \\\n+runtime/string.c \\\n+runtime/select.c\n+\n+if LIBGFOR_MINIMAL\n+\n+gfor_src+= runtime/minimal.c\n+\n+else\n+\n+gfor_src+= \\\n+runtime/backtrace.c \\\n runtime/convert_char.c \\\n runtime/environ.c \\\n runtime/error.c \\\n runtime/fpu.c \\\n runtime/main.c \\\n-runtime/memory.c \\\n runtime/pause.c \\\n-runtime/stop.c \\\n-runtime/string.c \\\n-runtime/select.c\n+runtime/stop.c\n+\n+endif\n \n i_all_c= \\\n $(srcdir)/generated/all_l1.c \\"}, {"sha": "0f60e6e6f864fe016fb82574761c91e1dca90713", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 409, "deletions": 368, "changes": 777, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=ee95f9288a029478f1fbf9741db51855ac9a552b"}, {"sha": "632d172cf9ebe8a8ced014757733ca6a0801f87d", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=ee95f9288a029478f1fbf9741db51855ac9a552b", "patch": "@@ -48,13 +48,14 @@ caf_static_t *caf_static_list = NULL;\n static void\n caf_runtime_error (const char *message, ...)\n {\n+#ifndef LIBGFOR_MINIMAL\n   va_list ap;\n   fprintf (stderr, \"Fortran runtime error: \");\n   va_start (ap, message);\n   vfprintf (stderr, message, ap);\n   va_end (ap);\n   fprintf (stderr, \"\\n\");\n-\n+#endif\n   /* FIXME: Shutdown the Fortran RTL to flush the buffer.  PR 43849.  */\n   exit (EXIT_FAILURE);\n }"}, {"sha": "e1592f732492de2c9aa27c3a5749d6c85aa5d500", "filename": "libgfortran/configure", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=ee95f9288a029478f1fbf9741db51855ac9a552b", "patch": "@@ -641,6 +641,8 @@ RANLIB\n AR\n AS\n SECTION_FLAGS\n+LIBGFOR_MINIMAL_FALSE\n+LIBGFOR_MINIMAL_TRUE\n LIBGFOR_USE_SYMVER_SUN_FALSE\n LIBGFOR_USE_SYMVER_SUN_TRUE\n LIBGFOR_USE_SYMVER_GNU_FALSE\n@@ -5895,6 +5897,25 @@ else\n fi\n \n \n+# For GPU offloading, not everything in libfortran can be supported.\n+# Currently, the only target that has this problem is nvptx.  The\n+# following is a (partial) list of features that are unsupportable on\n+# this particular target:\n+# * Constructors\n+# * alloca\n+# * C library support for I/O, with printf as the one notable exception\n+# * C library support for other features such as signal, environment\n+#   variables, time functions\n+\n+ if test \"x${target_cpu}\" = xnvptx; then\n+  LIBGFOR_MINIMAL_TRUE=\n+  LIBGFOR_MINIMAL_FALSE='#'\n+else\n+  LIBGFOR_MINIMAL_TRUE='#'\n+  LIBGFOR_MINIMAL_FALSE=\n+fi\n+\n+\n # Figure out whether the compiler supports \"-ffunction-sections -fdata-sections\",\n # similarly to how libstdc++ does it\n ac_test_CFLAGS=\"${CFLAGS+set}\"\n@@ -12355,7 +12376,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12358 \"configure\"\n+#line 12379 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12461,7 +12482,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12464 \"configure\"\n+#line 12485 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -26822,6 +26843,10 @@ if test -z \"${LIBGFOR_USE_SYMVER_SUN_TRUE}\" && test -z \"${LIBGFOR_USE_SYMVER_SUN\n   as_fn_error \"conditional \\\"LIBGFOR_USE_SYMVER_SUN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LIBGFOR_MINIMAL_TRUE}\" && test -z \"${LIBGFOR_MINIMAL_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGFOR_MINIMAL\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${LIBGFOR_BUILD_QUAD_TRUE}\" && test -z \"${LIBGFOR_BUILD_QUAD_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGFOR_BUILD_QUAD\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "35a8b395885f28d9b276dc5f6432317c1bc48d43", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=ee95f9288a029478f1fbf9741db51855ac9a552b", "patch": "@@ -189,6 +189,18 @@ AM_CONDITIONAL(LIBGFOR_USE_SYMVER, [test \"x$gfortran_use_symver\" != xno])\n AM_CONDITIONAL(LIBGFOR_USE_SYMVER_GNU, [test \"x$gfortran_use_symver\" = xgnu])\n AM_CONDITIONAL(LIBGFOR_USE_SYMVER_SUN, [test \"x$gfortran_use_symver\" = xsun])\n \n+# For GPU offloading, not everything in libfortran can be supported.\n+# Currently, the only target that has this problem is nvptx.  The\n+# following is a (partial) list of features that are unsupportable on\n+# this particular target:\n+# * Constructors\n+# * alloca\n+# * C library support for I/O, with printf as the one notable exception\n+# * C library support for other features such as signal, environment\n+#   variables, time functions\n+\n+AM_CONDITIONAL(LIBGFOR_MINIMAL, [test \"x${target_cpu}\" = xnvptx])\n+\n # Figure out whether the compiler supports \"-ffunction-sections -fdata-sections\",\n # similarly to how libstdc++ does it\n ac_test_CFLAGS=\"${CFLAGS+set}\""}, {"sha": "6f78f9cf24aad951d63c1f31001ed4e0bbc916e1", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=ee95f9288a029478f1fbf9741db51855ac9a552b", "patch": "@@ -29,7 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Useful compile-time options will be stored in here.  */\n compile_options_t compile_options;\n \n-\n+#ifndef LIBGFOR_MINIMAL\n volatile sig_atomic_t fatal_error_in_progress = 0;\n \n \n@@ -146,6 +146,7 @@ maybe_find_addr2line (void)\n   if (options.backtrace == -1)\n     find_addr2line ();\n }\n+#endif\n \n /* Set the usual compile-time options.  */\n extern void set_options (int , int []);\n@@ -176,6 +177,7 @@ set_options (int num, int options[])\n   if (num >= 9)\n     compile_options.fpe_summary = options[8];\n \n+#ifndef LIBGFOR_MINIMAL\n   /* If backtrace is required, we set signal handlers on the POSIX\n      2001 signals with core action.  */\n   if (compile_options.backtrace)\n@@ -212,6 +214,7 @@ set_options (int num, int options[])\n \n       maybe_find_addr2line ();\n     }\n+#endif\n }\n \n "}, {"sha": "8dede63a08e516551248b43158dd7838a565cbfb", "filename": "libgfortran/runtime/minimal.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fruntime%2Fminimal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee95f9288a029478f1fbf9741db51855ac9a552b/libgfortran%2Fruntime%2Fminimal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fminimal.c?ref=ee95f9288a029478f1fbf9741db51855ac9a552b", "patch": "@@ -0,0 +1,158 @@\n+/* Copyright (C) 2002-2014 Free Software Foundation, Inc.\n+   Contributed by Andy Vaught and Paul Brook <paul@nowt.org>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <string.h>\n+#include <limits.h>\n+#include <errno.h>\n+\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+/* Stupid function to be sure the constructor is always linked in, even\n+   in the case of static linking.  See PR libfortran/22298 for details.  */\n+void\n+stupid_function_name_for_static_linking (void)\n+{\n+  return;\n+}\n+\n+options_t options;\n+\n+/* This will be 0 for little-endian\n+   machines and 1 for big-endian machines.\n+\n+   Currently minimal libgfortran only runs on little-endian devices\n+   which don't support constructors so this is just a constant.  */\n+int big_endian = 0;\n+\n+static int argc_save;\n+static char **argv_save;\n+\n+static const char *exe_path;\n+\n+/* recursion_check()-- It's possible for additional errors to occur\n+ * during fatal error processing.  We detect this condition here and\n+ * exit with code 4 immediately. */\n+\n+#define MAGIC 0x20DE8101\n+\n+static void\n+recursion_check (void)\n+{\n+  static int magic = 0;\n+\n+  /* Don't even try to print something at this point */\n+  if (magic == MAGIC)\n+    sys_abort ();\n+\n+  magic = MAGIC;\n+}\n+\n+#define STRERR_MAXSZ 256\n+\n+void\n+os_error (const char *message)\n+{\n+  recursion_check ();\n+  printf (\"Operating system error: \");\n+  printf (\"%s\\n\", message);\n+  exit (1);\n+}\n+iexport(os_error);\n+\n+void\n+runtime_error (const char *message, ...)\n+{\n+  va_list ap;\n+\n+  recursion_check ();\n+  printf (\"Fortran runtime error: \");\n+  va_start (ap, message);\n+  vprintf (message, ap);\n+  va_end (ap);\n+  printf (\"\\n\");\n+  exit (2);\n+}\n+iexport(runtime_error);\n+\n+/* void runtime_error_at()-- These are errors associated with a\n+ * run time error generated by the front end compiler.  */\n+\n+void\n+runtime_error_at (const char *where, const char *message, ...)\n+{\n+  va_list ap;\n+\n+  recursion_check ();\n+  printf (\"Fortran runtime error: \");\n+  va_start (ap, message);\n+  vprintf (message, ap);\n+  va_end (ap);\n+  printf (\"\\n\");\n+  exit (2);\n+}\n+iexport(runtime_error_at);\n+\n+/* Return the full path of the executable.  */\n+char *\n+full_exe_path (void)\n+{\n+  return (char *) exe_path;\n+}\n+\n+\n+/* Set the saved values of the command line arguments.  */\n+\n+void\n+set_args (int argc, char **argv)\n+{\n+  argc_save = argc;\n+  argv_save = argv;\n+  exe_path = argv[0];\n+}\n+iexport(set_args);\n+\n+\n+/* Retrieve the saved values of the command line arguments.  */\n+\n+void\n+get_args (int *argc, char ***argv)\n+{\n+  *argc = argc_save;\n+  *argv = argv_save;\n+}\n+\n+/* sys_abort()-- Terminate the program showing backtrace and dumping\n+   core.  */\n+\n+void\n+sys_abort (void)\n+{\n+  printf (\"Abort called.\\n\");\n+  abort();\n+}"}]}