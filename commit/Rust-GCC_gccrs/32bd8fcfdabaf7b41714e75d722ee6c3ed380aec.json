{"sha": "32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiZDhmY2ZkYWJhZjdiNDE3MTRlNzVkNzIyZWU2YzNlZDM4MGFlYw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-10-06T18:12:49Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-10-06T18:12:49Z"}, "message": "tm.texi.in (CLASS_LIKELY_SPILLED_P): Remove documentation.\n\n\t* doc/tm.texi.in (CLASS_LIKELY_SPILLED_P): Remove documentation.\n\t* doc/tm.texi.in: Regenerate.\n\t* system.h (CLASS_LIKELY_SPILLED_P): Poison.\n\t* targhooks.c (default_class_likely_spilled_p): Don't use the \n\tCLASS_LIKELY_SPILLED_P macro.\n\n\t* config\\arm\\arm.md: Update comment.\n\nFrom-SVN: r165060", "tree": {"sha": "06e65a39b8b30c010360e104fb790acb41078e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06e65a39b8b30c010360e104fb790acb41078e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/comments", "author": null, "committer": null, "parents": [{"sha": "d2ab66aa02a67a736eb2063b9f94390204401478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ab66aa02a67a736eb2063b9f94390204401478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ab66aa02a67a736eb2063b9f94390204401478"}], "stats": {"total": 54, "additions": 12, "deletions": 42}, "files": [{"sha": "a195c3c85b0cdab1e849d77bca264044d8f0aaac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "patch": "@@ -1,3 +1,13 @@\n+2010-10-06  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* doc/tm.texi.in (CLASS_LIKELY_SPILLED_P): Remove documentation.\n+\t* doc/tm.texi.in: Regenerate.\n+\t* system.h (CLASS_LIKELY_SPILLED_P): Poison.\n+\t* targhooks.c (default_class_likely_spilled_p): Don't use the \n+\tCLASS_LIKELY_SPILLED_P macro.\n+\n+\t* config\\arm\\arm.md: Update comment.\n+\n 2010-10-06  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa.c (cgraph_remove_unreachable_nodes): External references can always"}, {"sha": "6c63e64a784cdfaa506971aa9e59759371b09dc5", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "patch": "@@ -6671,7 +6671,7 @@\n \n ;; Sigh!  This variant shouldn't be needed, but combine often fails to\n ;; merge cases like this because the op1 is a hard register in\n-;; CLASS_LIKELY_SPILLED_P.\n+;; arm_class_likely_spilled_p.\n (define_peephole2\n   [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n \t(match_operand:SI 1 \"low_register_operand\" \"\"))"}, {"sha": "c686cbc99db15f4c9d0c9e02dd8126b66d914646", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "patch": "@@ -2852,24 +2852,6 @@ the only effect of such implementation would be to slow down register\n allocation.\n @end deftypefn\n \n-@defmac CLASS_LIKELY_SPILLED_P (@var{class})\n-A C expression whose value is nonzero if pseudos that have been assigned\n-to registers of class @var{class} would likely be spilled because\n-registers of @var{class} are needed for spill registers.\n-\n-The default value of this macro returns 1 if @var{class} has exactly one\n-register and zero otherwise.  On most machines, this default should be\n-used.  Only define this macro to some other expression if pseudos\n-allocated by @file{local-alloc.c} end up in memory because their hard\n-registers were needed for spill registers.  If this macro returns nonzero\n-for those classes, those pseudos will only be allocated by\n-@file{global.c}, which knows how to reallocate the pseudo to another\n-register.  If there would not be another register available for\n-reallocation, you should not change the definition of this macro since\n-the only effect of such a definition would be to slow down register\n-allocation.\n-@end defmac\n-\n @defmac CLASS_MAX_NREGS (@var{class}, @var{mode})\n A C expression for the maximum number of consecutive registers\n of class @var{class} needed to hold a value of mode @var{mode}."}, {"sha": "4c43fd535e839f2367b1c3a57db0e90fd12ccbd5", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "patch": "@@ -2852,24 +2852,6 @@ the only effect of such implementation would be to slow down register\n allocation.\n @end deftypefn\n \n-@defmac CLASS_LIKELY_SPILLED_P (@var{class})\n-A C expression whose value is nonzero if pseudos that have been assigned\n-to registers of class @var{class} would likely be spilled because\n-registers of @var{class} are needed for spill registers.\n-\n-The default value of this macro returns 1 if @var{class} has exactly one\n-register and zero otherwise.  On most machines, this default should be\n-used.  Only define this macro to some other expression if pseudos\n-allocated by @file{local-alloc.c} end up in memory because their hard\n-registers were needed for spill registers.  If this macro returns nonzero\n-for those classes, those pseudos will only be allocated by\n-@file{global.c}, which knows how to reallocate the pseudo to another\n-register.  If there would not be another register available for\n-reallocation, you should not change the definition of this macro since\n-the only effect of such a definition would be to slow down register\n-allocation.\n-@end defmac\n-\n @defmac CLASS_MAX_NREGS (@var{class}, @var{mode})\n A C expression for the maximum number of consecutive registers\n of class @var{class} needed to hold a value of mode @var{mode}."}, {"sha": "4bfebaf7331713b4bed115d96a4a8039968b357b", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "patch": "@@ -716,7 +716,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tCAN_ELIMINATE TRAMPOLINE_TEMPLATE INITIALIZE_TRAMPOLINE\t\t\\\n \tTRAMPOLINE_ADJUST_ADDRESS STATIC_CHAIN STATIC_CHAIN_INCOMING\t\\\n \tRETURN_POPS_ARGS UNITS_PER_SIMD_WORD OVERRIDE_OPTIONS\t\t\\\n-\tOPTIMIZATION_OPTIONS\t\t\t\t\t\t\\\n+\tOPTIMIZATION_OPTIONS CLASS_LIKELY_SPILLED_P\t\t\t\\\n \tUSING_SJLJ_EXCEPTIONS TARGET_UNWIND_INFO\n \n /* Other obsolete target macros, or macros that used to be in target"}, {"sha": "5a36f0eadfc53707fb24f65a4efaf0f07aa82483", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bd8fcfdabaf7b41714e75d722ee6c3ed380aec/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=32bd8fcfdabaf7b41714e75d722ee6c3ed380aec", "patch": "@@ -1226,11 +1226,7 @@ default_profile_before_prologue (void)\n bool\n default_class_likely_spilled_p (reg_class_t rclass)\n {\n-#ifndef CLASS_LIKELY_SPILLED_P\n   return (reg_class_size[(int) rclass] == 1);\n-#else\n-  return CLASS_LIKELY_SPILLED_P ((enum reg_class) rclass);\n-#endif\n }\n \n /* Determine the debugging unwind mechanism for the target.  */"}]}