{"sha": "b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmZDg4MDBiMDAxN2EzZDRjOGY4MDEyYzViNWQwYjY0OTQxOTFlMA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-01-16T02:39:40Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-01-16T02:39:40Z"}, "message": "tm.texi (TARGET_USE_BLOCKS_FOR_CONSTANT_P): Fix argument types.\n\n\t* doc/tm.texi (TARGET_USE_BLOCKS_FOR_CONSTANT_P): Fix argument types.\n\n\t(TARGET_SUPPORT_VECTOR_MISALIGNMENT): Fix argument types.\n\n\t(TARGET_USE_ANCHORS_FOR_SYMBOL_P): Fix argument types.\n\n\t(TARGET_SCHED_ALLOC_SCHED_CONTEXT): Put 'void *' in braces.\n\n\t(TARGET_IN_SMALL_DATA_P): Fix argument type.\n\n\t(TARGET_BINDS_LOCAL_P): Fix argument type.\n\n\t(TARGET_ASM_FILE_END): Use prototype.\n\n\t(TARGET_ASM_RECORD_GCC_SWITCHES): Don't put 'int' in braces.\n\n\t(TARGET_DWARF_CALLING_CONVENTION): Fix argument type.\n\n\t(TARGET_COMP_TYPE_ATTRIBUTES): Fix argument types.\n\n\t(TARGET_VALID_DLLIMPORT_ATTRIBUTE_P): Fix argument type.\n\n\t(TARGET_EMUTLS_VAR_ALIGN_FIXED): Don't put 'bool' in braces.\n\t(TARGET_EMUTLS_DEBUG_FORM_TLS_ADDRESS): Likewise.\n\n\t(TARGET_PCH_VALID_P): Put 'const char *' in braces.\n\t(TARGET_CHECK_PCH_TARGET_FLAGS): Likewise.\n\n\t(TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P): Don't put 'bool' in braces.\n\t(TARGET_ADDR_SPACE_SUBSET_P): Likewise.\n\t(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Don't put 'rtx' in braces.\n\t(TARGET_ADDR_SPACE_CONVERT): Likewise.\n\n\t(TARGET_CASE_VALUES_THRESHOLD): Put 'unsigned int' in braces.\n\n\t(TARGET_MACHINE_DEPENDENT_REORG: Use prototype.\n\n\t(TARGET_INIT_BUILTINS): Use prototype.\n\n\t(TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN):\n\tPut 'const char *' in braces.  Fix parameter types.\n\t(TARGET_INVALID_CONVERSION): Fix parameter types.\n\t(TARGET_INVALID_UNARY_OP, TARGET_INVALID_BINARY_OP): Likewise.\n\t(TARGET_INVALID_PARAMETER_TYPE, TARGET_INVALID_RETURN_TYPE): Likewise.\n\n\t(TARGET_PROMOTED_TYPE): Remove braces around 'tree'.\n\tFix argument type.\n\n\t(TARGET_CONVERT_TO_TYPE): Remove braces around 'tree'.\n\n\t(TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Remove braces around 'bool'.\n\nFrom-SVN: r155957", "tree": {"sha": "ca282fb216614d5a639fa5cfc7886c5ad23b4a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca282fb216614d5a639fa5cfc7886c5ad23b4a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0/comments", "author": null, "committer": null, "parents": [{"sha": "9ddb66ef68af54a489e187e583ca01909e15551f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddb66ef68af54a489e187e583ca01909e15551f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ddb66ef68af54a489e187e583ca01909e15551f"}], "stats": {"total": 118, "additions": 86, "deletions": 32}, "files": [{"sha": "85e0daeacb94b4a7c34c4fefffa87c330ca4bdb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0", "patch": "@@ -1,3 +1,57 @@\n+2010-01-16  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\t* doc/tm.texi (TARGET_USE_BLOCKS_FOR_CONSTANT_P): Fix argument types.\n+\n+\t(TARGET_SUPPORT_VECTOR_MISALIGNMENT): Fix argument types.\n+\n+\t(TARGET_USE_ANCHORS_FOR_SYMBOL_P): Fix argument types.\n+\n+\t(TARGET_SCHED_ALLOC_SCHED_CONTEXT): Put 'void *' in braces.\n+\n+\t(TARGET_IN_SMALL_DATA_P): Fix argument type.\n+\n+\t(TARGET_BINDS_LOCAL_P): Fix argument type.\n+\n+\t(TARGET_ASM_FILE_END): Use prototype.\n+\n+\t(TARGET_ASM_RECORD_GCC_SWITCHES): Don't put 'int' in braces.\n+\n+\t(TARGET_DWARF_CALLING_CONVENTION): Fix argument type.\n+\n+\t(TARGET_COMP_TYPE_ATTRIBUTES): Fix argument types.\n+\n+\t(TARGET_VALID_DLLIMPORT_ATTRIBUTE_P): Fix argument type.\n+\n+\t(TARGET_EMUTLS_VAR_ALIGN_FIXED): Don't put 'bool' in braces.\n+\t(TARGET_EMUTLS_DEBUG_FORM_TLS_ADDRESS): Likewise.\n+\n+\t(TARGET_PCH_VALID_P): Put 'const char *' in braces.\n+\t(TARGET_CHECK_PCH_TARGET_FLAGS): Likewise.\n+\n+\t(TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P): Don't put 'bool' in braces.\n+\t(TARGET_ADDR_SPACE_SUBSET_P): Likewise.\n+\t(TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS): Don't put 'rtx' in braces.\n+\t(TARGET_ADDR_SPACE_CONVERT): Likewise.\n+\n+\t(TARGET_CASE_VALUES_THRESHOLD): Put 'unsigned int' in braces.\n+\n+\t(TARGET_MACHINE_DEPENDENT_REORG: Use prototype.\n+\n+\t(TARGET_INIT_BUILTINS): Use prototype.\n+\n+\t(TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN):\n+\tPut 'const char *' in braces.  Fix parameter types.\n+\t(TARGET_INVALID_CONVERSION): Fix parameter types.\n+\t(TARGET_INVALID_UNARY_OP, TARGET_INVALID_BINARY_OP): Likewise.\n+\t(TARGET_INVALID_PARAMETER_TYPE, TARGET_INVALID_RETURN_TYPE): Likewise.\n+\n+\t(TARGET_PROMOTED_TYPE): Remove braces around 'tree'.\n+\tFix argument type.\n+\n+\t(TARGET_CONVERT_TO_TYPE): Remove braces around 'tree'.\n+\n+\t(TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Remove braces around 'bool'.\n+\n 2010-01-15  Joern Rennecke  <amylaar@spamcop.net>\n \n \t* doc/tm.texi (TARGET_HELP): Fix return type."}, {"sha": "16e984e55a2fb098bfab6b6db155b2af57c30154", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b6fd8800b0017a3d4c8f8012c5b5d0b6494191e0", "patch": "@@ -5611,7 +5611,7 @@ holding the constant.  This restriction is often true of addresses\n of TLS symbols for various targets.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_USE_BLOCKS_FOR_CONSTANT_P (enum machine_mode @var{mode}, rtx @var{x})\n+@deftypefn {Target Hook} bool TARGET_USE_BLOCKS_FOR_CONSTANT_P (enum machine_mode @var{mode}, const_rtx @var{x})\n This hook should return true if pool entries for constant @var{x} can\n be placed in an @code{object_block} structure.  @var{mode} is the mode\n of @var{x}.\n@@ -5703,7 +5703,7 @@ the vectorized function shall be of vector type @var{vec_type_out} and the\n argument types should be @var{vec_type_in}.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_SUPPORT_VECTOR_MISALIGNMENT (enum machine_mode @var{mode}, tree @var{type}, int @var{misalignment}, bool @var{is_packed})\n+@deftypefn {Target Hook} bool TARGET_SUPPORT_VECTOR_MISALIGNMENT (enum machine_mode @var{mode}, const_tree @var{type}, int @var{misalignment}, bool @var{is_packed})\n This hook should return true if the target supports misaligned vector\n store/load of a specific factor denoted in the @var{misalignment}\n parameter.  The vector store/load should be of machine mode @var{mode} and\n@@ -5771,7 +5771,7 @@ If @code{ASM_OUTPUT_DEF} is not available, the hook's default definition\n is @code{NULL}, which disables the use of section anchors altogether.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_USE_ANCHORS_FOR_SYMBOL_P (rtx @var{x})\n+@deftypefn {Target Hook} bool TARGET_USE_ANCHORS_FOR_SYMBOL_P (const_rtx @var{x})\n Return true if GCC should attempt to use anchors to access @code{SYMBOL_REF}\n @var{x}.  You can assume @samp{SYMBOL_REF_HAS_BLOCK_INFO_P (@var{x})} and\n @samp{!SYMBOL_REF_ANCHOR_P (@var{x})}.\n@@ -6594,7 +6594,7 @@ the instruction stream.  The hook notifies a target backend to extend its\n per instruction data structures.\n @end deftypefn\n \n-@deftypefn {Target Hook} void * TARGET_SCHED_ALLOC_SCHED_CONTEXT (void)\n+@deftypefn {Target Hook} {void *} TARGET_SCHED_ALLOC_SCHED_CONTEXT (void)\n Return a pointer to a store large enough to hold target scheduling context.\n @end deftypefn\n \n@@ -6617,7 +6617,7 @@ Deallocate internal data in target scheduling context pointed to by @var{tc}.\n Deallocate a store for target scheduling context pointed to by @var{tc}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void * TARGET_SCHED_ALLOC_SCHED_CONTEXT (void)\n+@deftypefn {Target Hook} {void *} TARGET_SCHED_ALLOC_SCHED_CONTEXT (void)\n Return a pointer to a store large enough to hold target scheduling context.\n @end deftypefn\n \n@@ -6994,7 +6994,7 @@ the characters that @code{TARGET_ENCODE_SECTION_INFO}\n may have added.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_IN_SMALL_DATA_P (tree @var{exp})\n+@deftypefn {Target Hook} bool TARGET_IN_SMALL_DATA_P (const_tree @var{exp})\n Returns true if @var{exp} should be placed into a ``small data'' section.\n The default version of this hook always returns false.\n @end deftypefn\n@@ -7004,7 +7004,7 @@ Contains the value true if the target places read-only\n ``small data'' into a separate section.  The default value is false.\n @end deftypevr\n \n-@deftypefn {Target Hook} bool TARGET_BINDS_LOCAL_P (tree @var{exp})\n+@deftypefn {Target Hook} bool TARGET_BINDS_LOCAL_P (const_tree @var{exp})\n Returns true if @var{exp} names an object for which name resolution\n rules must resolve to the current ``module'' (dynamic shared library\n or executable image).\n@@ -7126,7 +7126,7 @@ for the primary source file, immediately after printing\n this to be done.  The default is false.\n @end deftypevr\n \n-@deftypefn {Target Hook} void TARGET_ASM_FILE_END ()\n+@deftypefn {Target Hook} void TARGET_ASM_FILE_END (void)\n Output to @code{asm_out_file} any text which the assembler expects\n to find at the end of a file.  The default is to output nothing.\n @end deftypefn\n@@ -7217,7 +7217,7 @@ need to override this if your target has special flags that might be\n set via @code{__attribute__}.\n @end deftypefn\n \n-@deftypefn {Target Hook} {int} TARGET_ASM_RECORD_GCC_SWITCHES (print_switch_type @var{type}, const char * @var{text})\n+@deftypefn {Target Hook} int TARGET_ASM_RECORD_GCC_SWITCHES (print_switch_type @var{type}, const char *@var{text})\n Provides the target with the ability to record the gcc command line\n switches that have been passed to the compiler, and options that are\n enabled.  The @var{type} argument specifies what is being recorded.\n@@ -9158,7 +9158,7 @@ for SDB in response to the @option{-g} option.\n Define this macro if GCC should produce dwarf version 2 format\n debugging output in response to the @option{-g} option.\n \n-@deftypefn {Target Hook} int TARGET_DWARF_CALLING_CONVENTION (tree @var{function})\n+@deftypefn {Target Hook} int TARGET_DWARF_CALLING_CONVENTION (const_tree @var{function})\n Define this to enable the dwarf attribute @code{DW_AT_calling_convention} to\n be emitted for each function.  Instead of an integer return the enum\n value for the @code{DW_CC_} tag.\n@@ -9475,7 +9475,7 @@ entities to which these attributes are applied and the arguments they\n take.\n @end deftypevr\n \n-@deftypefn {Target Hook} int TARGET_COMP_TYPE_ATTRIBUTES (tree @var{type1}, tree @var{type2})\n+@deftypefn {Target Hook} int TARGET_COMP_TYPE_ATTRIBUTES (const_tree @var{type1}, const_tree @var{type2})\n If defined, this target hook is a function which returns zero if the attributes on\n @var{type1} and @var{type2} are incompatible, one if they are compatible,\n and two if they are nearly compatible (which causes a warning to be\n@@ -9519,7 +9519,7 @@ to perform initial processing of the @samp{dllimport} and\n @file{i386/i386.c}, for example.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_VALID_DLLIMPORT_ATTRIBUTE_P (tree @var{decl})\n+@deftypefn {Target Hook} bool TARGET_VALID_DLLIMPORT_ATTRIBUTE_P (const_tree @var{decl})\n @var{decl} is a variable or function with @code{__attribute__((dllimport))}\n specified. Use this hook if the target needs to add extra validation\n checks to @code{handle_dll_attribute}.\n@@ -9667,13 +9667,13 @@ is the TLS object and @var{tmpl_addr} is the address of the\n initializer.  The default initializes libgcc's emulated TLS control object.\n @end deftypefn\n \n-@deftypevr {Target Hook} {bool} TARGET_EMUTLS_VAR_ALIGN_FIXED\n+@deftypevr {Target Hook} bool TARGET_EMUTLS_VAR_ALIGN_FIXED\n Specifies whether the alignment of TLS control variable objects is\n fixed and should not be increased as some backends may do to optimize\n single objects.  The default is false.\n @end deftypevr\n \n-@deftypevr {Target Hook} {bool} TARGET_EMUTLS_DEBUG_FORM_TLS_ADDRESS\n+@deftypevr {Target Hook} bool TARGET_EMUTLS_DEBUG_FORM_TLS_ADDRESS\n Specifies whether a DWARF @code{DW_OP_form_tls_address} location descriptor\n may be used to describe emulated TLS control objects.\n @end deftypevr\n@@ -9727,7 +9727,7 @@ This hook returns the data needed by @code{TARGET_PCH_VALID_P} and sets\n @samp{*@var{sz}} to the size of the data in bytes.\n @end deftypefn\n \n-@deftypefn {Target Hook} const char *TARGET_PCH_VALID_P (const void *@var{data}, size_t @var{sz})\n+@deftypefn {Target Hook} {const char *} TARGET_PCH_VALID_P (const void *@var{data}, size_t @var{sz})\n This hook checks whether the options used to create a PCH file are\n compatible with the current settings.  It returns @code{NULL}\n if so and a suitable error message if not.  Error messages will\n@@ -9742,7 +9742,7 @@ The default definition of @code{default_pch_valid_p} should be\n suitable for most targets.\n @end deftypefn\n \n-@deftypefn {Target Hook} const char *TARGET_CHECK_PCH_TARGET_FLAGS (int @var{pch_flags})\n+@deftypefn {Target Hook} {const char *} TARGET_CHECK_PCH_TARGET_FLAGS (int @var{pch_flags})\n If this hook is nonnull, the default implementation of\n @code{TARGET_PCH_VALID_P} will use it to check for compatible values\n of @code{target_flags}.  @var{pch_flags} specifies the value that\n@@ -9912,7 +9912,7 @@ version of this hook returns true for the modes returned by either the\n target hooks for the given address space.\n @end deftypefn\n \n-@deftypefn {Target Hook} {bool} TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P (enum machine_mode @var{mode}, rtx @var{exp}, bool @var{strict}, addr_space_t @var{as})\n+@deftypefn {Target Hook} bool TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P (enum machine_mode @var{mode}, rtx @var{exp}, bool @var{strict}, addr_space_t @var{as})\n Define this to return true if @var{exp} is a valid address for mode\n @var{mode} in the named address space @var{as}.  The @var{strict}\n parameter says whether strict addressing is in effect after reload has\n@@ -9921,14 +9921,14 @@ finished.  This target hook is the same as the\n explicit named address space support.\n @end deftypefn\n \n-@deftypefn {Target Hook} {rtx} TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS (rtx @var{x}, rtx @var{oldx}, enum machine_mode @var{mode}, addr_space_t @var{as})\n+@deftypefn {Target Hook} rtx TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS (rtx @var{x}, rtx @var{oldx}, enum machine_mode @var{mode}, addr_space_t @var{as})\n Define this to modify an invalid address @var{x} to be a valid address\n with mode @var{mode} in the named address space @var{as}.  This target\n hook is the same as the @code{TARGET_LEGITIMIZE_ADDRESS} target hook,\n except that it includes explicit named address space support.\n @end deftypefn\n \n-@deftypefn {Target Hook} {bool} TARGET_ADDR_SPACE_SUBSET_P (addr_space_t @var{superset}, addr_space_t @var{subset})\n+@deftypefn {Target Hook} bool TARGET_ADDR_SPACE_SUBSET_P (addr_space_t @var{superset}, addr_space_t @var{subset})\n Define this to return whether the @var{subset} named address space is\n contained within the @var{superset} named address space.  Pointers to\n a named address space that is a subset of another named address space\n@@ -9937,7 +9937,7 @@ arithmetic operations.  Pointers to a superset address space can be\n converted to pointers to a subset address space via explicit casts.\n @end deftypefn\n \n-@deftypefn {Target Hook} {rtx} TARGET_ADDR_SPACE_CONVERT (rtx @var{op}, tree @var{from_type}, tree @var{to_type})\n+@deftypefn {Target Hook} rtx TARGET_ADDR_SPACE_CONVERT (rtx @var{op}, tree @var{from_type}, tree @var{to_type})\n Define this to convert the pointer expression represented by the RTL\n @var{op} with type @var{from_type} that points to a named address\n space to a new pointer expression with type @var{to_type} that points\n@@ -9994,7 +9994,7 @@ contain relative addresses only when @option{-fPIC} or @option{-fPIC}\n is in effect.\n @end defmac\n \n-@deftypefn {Target Hook} unsigned int TARGET_CASE_VALUES_THRESHOLD (void)\n+@deftypefn {Target Hook} {unsigned int} TARGET_CASE_VALUES_THRESHOLD (void)\n This function return the smallest number of different values for which it\n is best to use a jump-table instead of a tree of conditional branches.\n The default is four for machines with a @code{casesi} instruction and\n@@ -10623,7 +10623,7 @@ added to the @code{struct ce_if_block} structure.  These should be initialized\n by the @code{IFCVT_INIT_EXTRA_FIELDS} macro.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_MACHINE_DEPENDENT_REORG ()\n+@deftypefn {Target Hook} void TARGET_MACHINE_DEPENDENT_REORG (void)\n If non-null, this hook performs a target-specific pass over the\n instruction stream.  The compiler will run it at all optimization levels,\n just before the point at which it normally does delayed-branch scheduling.\n@@ -10637,7 +10637,7 @@ You need not implement the hook if it has nothing to do.  The default\n definition is null.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_INIT_BUILTINS ()\n+@deftypefn {Target Hook} void TARGET_INIT_BUILTINS (void)\n Define this hook if you have any machine-specific built-in functions\n that need to be defined.  It should be a function that performs the\n necessary setup.\n@@ -10936,47 +10936,47 @@ many recent processors which implement a policy of ``relaxed,''\n and ia64.  The default is @code{false}.\n @end deftypefn\n \n-@deftypefn {Target Hook} const char *TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN (tree @var{typelist}, tree @var{funcdecl}, tree @var{val})\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN (const_tree @var{typelist}, const_tree @var{funcdecl}, const_tree @var{val})\n If defined, this macro returns the diagnostic message when it is\n illegal to pass argument @var{val} to function @var{funcdecl}\n with prototype @var{typelist}.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_CONVERSION (tree @var{fromtype}, tree @var{totype})\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_CONVERSION (const_tree @var{fromtype}, const_tree @var{totype})\n If defined, this macro returns the diagnostic message when it is\n invalid to convert from @var{fromtype} to @var{totype}, or @code{NULL}\n if validity should be determined by the front end.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_UNARY_OP (int @var{op}, tree @var{type})\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_UNARY_OP (int @var{op}, const_tree @var{type})\n If defined, this macro returns the diagnostic message when it is\n invalid to apply operation @var{op} (where unary plus is denoted by\n @code{CONVERT_EXPR}) to an operand of type @var{type}, or @code{NULL}\n if validity should be determined by the front end.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_BINARY_OP (int @var{op}, tree @var{type1}, tree @var{type2})\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_BINARY_OP (int @var{op}, const_tree @var{type1}, const_tree @var{type2})\n If defined, this macro returns the diagnostic message when it is\n invalid to apply operation @var{op} to operands of types @var{type1}\n and @var{type2}, or @code{NULL} if validity should be determined by\n the front end.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_PARAMETER_TYPE (tree @var{type})\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_PARAMETER_TYPE (const_tree @var{type})\n If defined, this macro returns the diagnostic message when it is\n invalid for functions to include parameters of type @var{type}, \n or @code{NULL} if validity should be determined by\n the front end.  This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_RETURN_TYPE (tree @var{type})\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_RETURN_TYPE (const_tree @var{type})\n If defined, this macro returns the diagnostic message when it is\n invalid for functions to have return type @var{type}, \n or @code{NULL} if validity should be determined by\n the front end.  This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n-@deftypefn {Target Hook} {tree} TARGET_PROMOTED_TYPE (tree @var{type})\n+@deftypefn {Target Hook} tree TARGET_PROMOTED_TYPE (const_tree @var{type})\n If defined, this target hook returns the type to which values of \n @var{type} should be promoted when they appear in expressions, \n analogous to the integer promotions, or @code{NULL_TREE} to use the\n@@ -10985,7 +10985,7 @@ target-specific types with special promotion rules.\n This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n-@deftypefn {Target Hook} {tree} TARGET_CONVERT_TO_TYPE (tree @var{type}, tree @var{expr})\n+@deftypefn {Target Hook} tree TARGET_CONVERT_TO_TYPE (tree @var{type}, tree @var{expr})\n If defined, this hook returns the result of converting @var{expr} to \n @var{type}.  It should return the converted expression, \n or @code{NULL_TREE} to apply the front end's normal conversion rules.\n@@ -11023,7 +11023,7 @@ different argument pointer register is needed to access the function's\n argument list when stack is aligned.\n @end deftypefn\n \n-@deftypefn {Target Hook} {bool} TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS (void)\n+@deftypefn {Target Hook} bool TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS (void)\n When optimization is disabled, this hook indicates whether or not\n arguments should be allocated to stack slots.  Normally, GCC allocates\n stacks slots for arguments when not optimizing in order to make"}]}