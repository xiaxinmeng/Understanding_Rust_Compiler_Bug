{"sha": "5425159d176a7a92afc932cbb22d8822667099c4", "node_id": "C_kwDOANBUbNoAKDU0MjUxNTlkMTc2YTdhOTJhZmM5MzJjYmIyMmQ4ODIyNjY3MDk5YzQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-02T19:04:50Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-02T19:04:50Z"}, "message": "c++: more mce_false folding from cp_fully_fold_init [PR108243]\n\nWe should also fold the overall initializer passed to cp_fully_fold_init\nwith mce_false, which allows folding of the copy-initialization of\n'a1' in the below testcase (the initializer here is an AGGR_INIT_EXPR).\n\nUnfortunately this doesn't help with direct- or default-initialization\nbecause we don't call cp_fully_fold_init in that case, and even if we\ndid the initializer in that case is expressed as a bare CALL_EXPR\ninstead of an AGGR_INIT_EXPR, which cp_fully_fold_init can't really\nfold.\n\n\tPR c++/108243\n\tPR c++/97553\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (cp_fully_fold): Add an internal overload that\n\tadditionally takes and propagate an mce_value parameter, and\n\tdefine the existing public overload in terms of it.\n\t(cp_fully_fold_init): Pass mce_false to cp_fully_fold.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/opt/is_constant_evaluated3.C: New test.", "tree": {"sha": "349fd3034e3c174622bc76c8c359ba2f747a0876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/349fd3034e3c174622bc76c8c359ba2f747a0876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5425159d176a7a92afc932cbb22d8822667099c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5425159d176a7a92afc932cbb22d8822667099c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5425159d176a7a92afc932cbb22d8822667099c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5425159d176a7a92afc932cbb22d8822667099c4/comments", "author": null, "committer": null, "parents": [{"sha": "cbaa1d9c218d9c0b5e34e510a462ff4e299a0f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbaa1d9c218d9c0b5e34e510a462ff4e299a0f3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbaa1d9c218d9c0b5e34e510a462ff4e299a0f3f"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "b995b4f81a5fd6762ed84bef97f56c2ef6ae3ce3", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5425159d176a7a92afc932cbb22d8822667099c4/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5425159d176a7a92afc932cbb22d8822667099c4/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=5425159d176a7a92afc932cbb22d8822667099c4", "patch": "@@ -2449,16 +2449,16 @@ cp_fold_rvalue (tree x)\n \n /* Perform folding on expression X.  */\n \n-tree\n-cp_fully_fold (tree x)\n+static tree\n+cp_fully_fold (tree x, mce_value manifestly_const_eval)\n {\n   if (processing_template_decl)\n     return x;\n   /* FIXME cp_fold ought to be a superset of maybe_constant_value so we don't\n      have to call both.  */\n   if (cxx_dialect >= cxx11)\n     {\n-      x = maybe_constant_value (x);\n+      x = maybe_constant_value (x, /*decl=*/NULL_TREE, manifestly_const_eval);\n       /* Sometimes we are given a CONSTRUCTOR but the call above wraps it into\n \t a TARGET_EXPR; undo that here.  */\n       if (TREE_CODE (x) == TARGET_EXPR)\n@@ -2468,7 +2468,16 @@ cp_fully_fold (tree x)\n \t       && TREE_TYPE (TREE_OPERAND (x, 0)) == TREE_TYPE (x))\n \tx = TREE_OPERAND (x, 0);\n     }\n-  return cp_fold_rvalue (x);\n+  fold_flags_t flags = ff_none;\n+  if (manifestly_const_eval == mce_false)\n+    flags |= ff_mce_false;\n+  return cp_fold_rvalue (x, flags);\n+}\n+\n+tree\n+cp_fully_fold (tree x)\n+{\n+  return cp_fully_fold (x, mce_unknown);\n }\n \n /* Likewise, but also fold recursively, which cp_fully_fold doesn't perform\n@@ -2479,7 +2488,7 @@ cp_fully_fold_init (tree x)\n {\n   if (processing_template_decl)\n     return x;\n-  x = cp_fully_fold (x);\n+  x = cp_fully_fold (x, mce_false);\n   cp_fold_data data (ff_mce_false);\n   cp_walk_tree (&x, cp_fold_r, &data, NULL);\n   return x;"}, {"sha": "0a1e46e5638d78944dbfb06bcfc1f85876575af6", "filename": "gcc/testsuite/g++.dg/opt/is_constant_evaluated3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5425159d176a7a92afc932cbb22d8822667099c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fis_constant_evaluated3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5425159d176a7a92afc932cbb22d8822667099c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fis_constant_evaluated3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fis_constant_evaluated3.C?ref=5425159d176a7a92afc932cbb22d8822667099c4", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/108243\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-O -fdump-tree-original\" }\n+\n+struct A {\n+  constexpr A(int n) : n(n), m(__builtin_is_constant_evaluated()) { }\n+  constexpr A() : A(42) { }\n+  int n, m;\n+};\n+\n+int main() {\n+  A a1 = {42};\n+  A a2{42};\n+  A a3(42);\n+  A a4;\n+  A a5{};\n+}\n+\n+// { dg-final { scan-tree-dump \"a1 = {\\\\.n=42, \\\\.m=0}\" \"original\" } }\n+// { dg-final { scan-tree-dump \"a2 = {\\\\.n=42, \\\\.m=0}\" \"original\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump \"a3 = {\\\\.n=42, \\\\.m=0}\" \"original\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump \"a4 = {\\\\.n=42, \\\\.m=0}\" \"original\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump \"a5 = {\\\\.n=42, \\\\.m=0}\" \"original\" { xfail *-*-* } } }"}]}