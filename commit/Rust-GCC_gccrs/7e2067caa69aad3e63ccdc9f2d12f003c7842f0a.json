{"sha": "7e2067caa69aad3e63ccdc9f2d12f003c7842f0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyMDY3Y2FhNjlhYWQzZTYzY2NkYzlmMmQxMmYwMDNjNzg0MmYwYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-29T18:27:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-29T18:27:12Z"}, "message": "typeck2.c (process_init_constructor): Use same_type_p.\n\n\t* typeck2.c (process_init_constructor): Use same_type_p.\nFixes 834Y21a\n\t* decl.c (check_tag_decl): Don't warn about null decl inside a\n\tclass.\nFixes _113Y11a\n\nFrom-SVN: r23982", "tree": {"sha": "f015879b232347722f4326dc76ac52112d881048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f015879b232347722f4326dc76ac52112d881048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a/comments", "author": null, "committer": null, "parents": [{"sha": "9f3d9e461cb4c63c2b260ae6509799db75346db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3d9e461cb4c63c2b260ae6509799db75346db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3d9e461cb4c63c2b260ae6509799db75346db8"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "3cfe70127199859ba3a5a592b4468a42c11f84e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e2067caa69aad3e63ccdc9f2d12f003c7842f0a", "patch": "@@ -1,5 +1,10 @@\n 1998-11-29  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* typeck2.c (process_init_constructor): Use same_type_p.\n+\n+\t* decl.c (check_tag_decl): Don't warn about null decl inside a \n+\tclass.\n+\n \t* pt.c (unify, case OFFSET_TYPE): Pass down 'strict' rather than\n \tUNIFY_ALLOW_NONE.\n \t(convert_nontype_argument): Use TYPE_PTRMEMFUNC_FN_TYPE."}, {"sha": "cbb284e9f2bd234e5c9622bd5d810191c3405ee5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7e2067caa69aad3e63ccdc9f2d12f003c7842f0a", "patch": "@@ -6462,7 +6462,6 @@ check_tag_decl (declspecs)\n      tree declspecs;\n {\n   int found_type = 0;\n-  int friendp = 0;\n   tree ob_modifier = NULL_TREE;\n   register tree link;\n   register tree t = NULL_TREE;\n@@ -6486,8 +6485,6 @@ check_tag_decl (declspecs)\n \t  if (current_class_type == NULL_TREE\n \t      || current_scope () != current_class_type)\n \t    ob_modifier = value;\n-\t  else\n-\t    friendp = 1;\n \t}\n       else if (value == ridpointers[(int) RID_STATIC]\n \t       || value == ridpointers[(int) RID_EXTERN]\n@@ -6503,13 +6500,12 @@ check_tag_decl (declspecs)\n \n   if (found_type > 1)\n     error (\"multiple types in one declaration\");\n-    \n-  if (t == NULL_TREE)\n-    {\n-      if (! friendp)\n-\tpedwarn (\"declaration does not declare anything\");\n-    }\n-  else if (ANON_UNION_TYPE_P (t))\n+\n+  /* Inside a class, we might be in a friend or access declaration.\n+     Until we have a good way of detecting the latter, don't warn.  */\n+  if (t == NULL_TREE && ! current_class_type)\n+    pedwarn (\"declaration does not declare anything\");\n+  else if (t && ANON_UNION_TYPE_P (t))\n     /* Anonymous unions are objects, so they can have specifiers.  */;\n   else if (ob_modifier)\n     {"}, {"sha": "08a3dc232ebb1aab9baf158533e599cde6501c89", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2067caa69aad3e63ccdc9f2d12f003c7842f0a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7e2067caa69aad3e63ccdc9f2d12f003c7842f0a", "patch": "@@ -925,9 +925,10 @@ process_init_constructor (type, init, elts)\n \t\t  tree tail1 = tail;\n \t\t  next1 = digest_init (TREE_TYPE (type),\n \t\t\t\t       TREE_VALUE (tail), &tail1);\n-\t\t  my_friendly_assert (TYPE_MAIN_VARIANT (TREE_TYPE (type))\n-\t\t\t\t      == TYPE_MAIN_VARIANT (TREE_TYPE (next1)),\n-\t\t\t\t      981123);\n+\t\t  my_friendly_assert\n+\t\t    (same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)),\n+\t\t\t\t  TYPE_MAIN_VARIANT (TREE_TYPE (next1))),\n+\t\t     981123);\n \t\t  my_friendly_assert (tail1 == 0\n \t\t\t\t      || TREE_CODE (tail1) == TREE_LIST, 319);\n \t\t  if (tail == tail1 && len < 0)"}]}