{"sha": "a54d45c593ccadcd9ea99bb6ad66a7f7de91f855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0ZDQ1YzU5M2NjYWRjZDllYTk5YmI2YWQ2NmE3ZjdkZTkxZjg1NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-01-26T22:35:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-01-26T22:35:20Z"}, "message": "compiler: Avoid knock-on errors with impossibly large types.\n\n    \n    The gofrontend asks the backend compiler for the architecture\n    appropriate size of a given type.  For array types, it is possible\n    to construct a type too large to fit on the machine.  This patch does\n    two things: 1. When an impossibly large type is encountered, we mark\n    the type as erroneous and later calls to discover the size of that\n    type are short-circuited. 2. When generating the GC symbol data for\n    an impossibly large array of arrays, we avoid generating symbol data\n    as soon as we find an array that is too large to be expressed.\n    \n    Fixes golang/go#12938.\n    \n    Reviewed-on: https://go-review.googlesource.com/16234\n\nFrom-SVN: r232855", "tree": {"sha": "9ed10d3f86c009a9d7a6a5f5809193047cb3c303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ed10d3f86c009a9d7a6a5f5809193047cb3c303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855/comments", "author": null, "committer": null, "parents": [{"sha": "8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "9540d16b4c81c7d5e742b62cf84a769385d5c779", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a54d45c593ccadcd9ea99bb6ad66a7f7de91f855", "patch": "@@ -1,4 +1,4 @@\n-c375f3bf470f94220149b486c947bb3eb57cde7d\n+731941c155214d6158fa800e52ab3225c0b55f73\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "52a1e4da886f7a1e389888363f9a3bdae741fcf2", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d45c593ccadcd9ea99bb6ad66a7f7de91f855/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=a54d45c593ccadcd9ea99bb6ad66a7f7de91f855", "patch": "@@ -2550,6 +2550,8 @@ Type::backend_type_size(Gogo* gogo, int64_t *psize)\n {\n   if (!this->is_backend_type_size_known(gogo))\n     return false;\n+  if (this->is_error_type())\n+    return false;\n   Btype* bt = this->get_backend_placeholder(gogo);\n   *psize = gogo->backend()->type_size(bt);\n   if (*psize == -1)\n@@ -6453,7 +6455,7 @@ Array_type::slice_gc_symbol(Gogo* gogo, Expression_list** vals,\n   (*vals)->push_back(Expression::make_integer_ul(opval, uintptr_type, bloc));\n   (*vals)->push_back(*offset);\n \n-  if (element_size != 0)\n+  if (element_size != 0 && ok)\n     (*vals)->push_back(Expression::make_gc_symbol(element_type));\n   this->advance_gc_offset(offset);\n }\n@@ -6488,7 +6490,7 @@ Array_type::array_gc_symbol(Gogo* gogo, Expression_list** vals,\n   Type* element_type = this->element_type();\n   if (bound < 1 || !element_type->has_pointer())\n     this->advance_gc_offset(offset);\n-  else if (bound == 1 || iwidth <= 4 * pwidth)\n+  else if (ok && (bound == 1 || iwidth <= 4 * pwidth))\n     {\n       for (unsigned int i = 0; i < bound; ++i)\n \tType::gc_symbol(gogo, element_type, vals, offset, stack_size);"}]}