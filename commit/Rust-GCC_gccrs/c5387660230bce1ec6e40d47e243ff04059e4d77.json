{"sha": "c5387660230bce1ec6e40d47e243ff04059e4d77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzODc2NjAyMzBiY2UxZWM2ZTQwZDQ3ZTI0M2ZmMDQwNTllNGQ3Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-16T11:59:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-16T11:59:39Z"}, "message": "tm.texi.in (OVERRIDE_OPTIONS): Remove documentation.\n\n\t* doc/tm.texi.in (OVERRIDE_OPTIONS): Remove documentation.\n\t(C_COMMON_OVERRIDE_OPTIONS): Don't refer to OVERRIDE_OPTIONS.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (OVERRIDE_OPTIONS): Poison.\n\t* target.def (override): Default to hook_void_void.\n\t* targhooks.c (default_target_option_override): Remove.\n\t* genmodes.c, machmode.def: Update comments mentioning\n\tOVERRIDE_OPTIONS.\n\t* config/alpha/alpha-modes.def: Update comment mentioning\n\talpha_override_options.\n\t* config/alpha/alpha-protos.h (override_options): Remove.\n\t* config/alpha/alpha.c (override_options): Rename to\n\talpha_option_override.  Call SUBTARGET_OVERRIDE_OPTIONS.  Make\n\tstatic.\n\t(TARGET_OPTION_OVERRIDE): Define.\n\t* config/alpha/alpha.h (OVERRIDE_OPTIONS): Remove.\n\t* config/alpha/vms.h (SUBTARGET_OVERRIDE_OPTIONS): Define instead\n\tof OVERRIDE_OPTIONS.\n\t* config/arc/arc-protos.h (arc_init): Remove.\n\t* config/arc/arc.c (TARGET_OPTION_OVERRIDE): Define.\n\t(arc_init): Rename to arc_option_override.  Make static.\n\t* config/arc/arc.h (ARC_EXTENSION_CPU): Correct comment.\n\t(OVERRIDE_OPTIONS): Remove.\n\t* config/arm/arm-protos.h (arm_override_options): Remove.\n\t* config/arm/arm.c (TARGET_OPTION_OVERRIDE): Define.\n\t(arm_override_options): Rename to arm_option_override.  Make\n\tstatic.  Call SUBTARGET_OVERRIDE_OPTIONS.\n\t* config/arm/arm.h (OVERRIDE_OPTIONS): Remove.\n\t* config/arm/arm.md: Update comment referring to\n\tarm_override_options.\n\t* config/arm/vxworks.h (SUBTARGET_OVERRIDE_OPTIONS): Define\n\tinstead of OVERRIDE_OPTIONS.\n\t* config/avr/avr-protos.h (avr_override_options): Remove.\n\t* config/avr/avr.c (TARGET_OPTION_OVERRIDE): Define.\n\t(avr_override_options): Rename to avr_option_override.  Make\n\tstatic.\n\t* config/avr/avr.h (OVERRIDE_OPTIONS): Remove.\n\t* config/bfin/bfin-protos.h (override_options): Remove (twice).\n\t* config/bfin/bfin.c (override_options): Rename to\n\tbfin_option_override.  Make static.\n\t(TARGET_OPTION_OVERRIDE): Define.\n\t* config/bfin/bfin.h (OVERRIDE_OPTIONS): Remove.\n\t* config/cris/cris-protos.h (cris_override_options): Remove.\n\t* config/cris/cris.c (TARGET_OPTION_OVERRIDE): Define.\n\t(cris_override_options): Rename to cris_option_override.  Make\n\tstatic.\n\t* config/cris/cris.h (OVERRIDE_OPTIONS): Remove.\n\t* config/frv/frv-protos.h (frv_override_options): Remove.\n\t* config/frv/frv.c (TARGET_OPTION_OVERRIDE): Define.\n\t(frv_override_options): Rename to frv_option_override.  Make\n\tstatic.\n\t* config/frv/frv.h (OVERRIDE_OPTIONS): Remove.\n\t* config/h8300/h8300-protos.h (h8300_init_once): Remove.\n\t* config/h8300/h8300.c (h8300_init_once): Rename to\n\th8300_option_override.  Make static.\n\t(TARGET_OPTION_OVERRIDE): Define.\n\t* config/h8300/h8300.h (OVERRIDE_OPTIONS): Remove.\n\t* config/i386/i386-protos.h (override_options): Remove.\n\t* config/i386/i386.c (override_options): Rename to\n\tix86_option_override_internal.  Make static.  Comments referring\n\tto this function and callers changed.\n\t(ix86_option_override): New.\n\t(TARGET_OPTION_OVERRIDE): Define.\n\t* config/i386/i386.h (OVERRIDE_OPTION): Remove.\n\t* config/i386/linux64.h (DEFAULT_PCC_STRUCT_RETURN): Update\n\tcomment.\n\t* config/ia64/ia64.c (ia64_file_start): Update comment referring\n\tto ia64_override_options.\n\t* config/iq2000/iq2000-protos.h (override_options): Remove.\n\t* config/iq2000/iq2000.c (TARGET_OPTION_OVERRIDE): Define.\n\t(override_options): Rename to iq2000_option_override.  Make\n\tstatic.\n\t* config/iq2000/iq2000.h (OVERRIDE_OPTIONS): Remove.\n\t* config/lm32/lm32-protos.h (lm32_override_options): Remove.\n\t* config/lm32/lm32.c (TARGET_OPTION_OVERRIDE): Define.\n\t(lm32_override_options): Rename to lm32_option_override.  Make\n\tstatic.\n\t* config/lm32/lm32.h (OVERRIDE_OPTIONS): Remove.\n\t* config/m32r/m32r.c (TARGET_OPTION_OVERRIDE): Define.\n\t(m32r_option_override): New.\n\t(m32r_init): Update comment.\n\t* config/m32r/m32r.h (OVERRIDE_OPTIONS): Remove.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_override_options):\n\tRemove.\n\t* config/m68hc11/m68hc11.c (TARGET_OPTION_OVERRIDE): Define.\n\t(m68hc11_override_options): Rename to m68hc11_option_override.\n\tMake static.  Return void.\n\t* config/m68hc11/m68hc11.h (OVERRIDE_OPTIONS): Remove.\n\t* config/m68k/m68k-protos.h (override_options): Remove.\n\t* config/m68k/m68k.c (TARGET_OPTION_OVERRIDE): Define.\n\t(override_options): Rename to m68k_option_override.  Make static.\n\t* config/m68k/m68k.h (OVERRIDE_OPTIONS): Remove.\n\t* config/mcore/mcore-protos.h (mcore_override_options): Remove.\n\t* config/mcore/mcore.c (TARGET_OPTION_OVERRIDE): Define.\n\t(mcore_override_options): Rename to mcore_option_override.  Make\n\tstatic.\n\t* config/mcore/mcore.h (OVERRIDE_OPTIONS): Remove.\n\t* config/mep/mep-protos.h (mep_override_options): Remove.\n\t* config/mep/mep.c (TARGET_OPTION_OVERRIDE): Define.\n\t(mep_override_options): Rename to mep_option_override.  Make\n\tstatic.\n\t* config/mep/mep.h (OVERRIDE_OPTIONS): Remove.\n\t* config/mmix/mmix-protos.h (mmix_override_options): Remove.\n\t* config/mmix/mmix.c (TARGET_OPTION_OVERRIDE): Define.\n\t(mmix_override_options): Rename to mmix_option_override.  Make\n\tstatic.\n\t* config/mmix/mmix.h (OVERRIDE_OPTIONS): Remove.\n\t* config/mn10300/mn10300-protos.h (mn10300_override_options):\n\tRemove.\n\t* config/mn10300/mn10300.c (TARGET_OPTION_OVERRIDE): Define.\n\t(mn10300_override_options): Rename to mn10300_option_override.\n\tMake static.\n\t* config/mn10300/mn10300.h (OVERRIDE_OPTIONS): Remove.\n\t* config/moxie/moxie-protos.h (moxie_override_options): Remove.\n\t* config/moxie/moxie.c (moxie_override_options): Rename to\n\tmoxie_option_override.  Make static.\n\t(TARGET_OPTION_OVERRIDE): Define.\n\t* config/moxie/moxie.h (OVERRIDE_OPTIONS): Remove.\n\t* config/picochip/picochip-protos.h (picochip_override_options):\n\tRemove.  Update comment referring to picochip_override_options.\n\t* config/picochip/picochip.c (TARGET_OPTION_OVERRIDE): Define.\n\t(picochip_override_options): Rename to picochip_option_override.\n\tMake static.  Update comment and definition of\n\tTARGET_OVERRIDE_OPTIONS_AFTER_CHANGE.\n\t* config/picochip/picochip.h (OVERRIDE_OPTIONS): Remove.\n\t* config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n\tcomment.\n\t* config/rs6000/aix51.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n\tcomment.\n\t* config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n\tcomment.\n\t* config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n\tcomment.\n\t* config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n\tcomment.\n\t* config/rs6000/linux64.h (OPTION_TARGET_CPU_DEFAULT): Define\n\tinstead of OVERRIDE_OPTIONS.\n\t* config/rs6000/rs6000-modes.def: Update comment referring to\n\trs6000_override_options.\n\t* config/rs6000/rs6000-protos.h (rs6000_override_options): Remove.\n\t* config/rs6000/rs6000.c (TARGET_OPTION_OVERRIDE): Define.\n\t(rs6000_override_options): Rename to\n\trs6000_option_override_internal.  Make static.  Commented\n\treferring to rs6000_override_options and OVERRIDE_OPTIONS updated.\n\t(rs6000_option_override): New.\n\t* config/rs6000/rs6000.h (OPTION_TARGET_CPU_DEFAULT): Define\n\tinstead of OVERRIDE_OPTIONS.\n\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n\tcomment.\n\t* config/s390/s390-protos.h (override_options): Remove.\n\t* config/s390/s390.c (override_options): Rename to\n\ts390_option_override.  Make static.\n\t(TARGET_OPTION_OVERRIDE): Define.\n\t* config/s390/s390.h (OVERRIDE_OPTIONS): Remove.\n\t* config/score/score-protos.h (score_override_options): Remove.\n\t* config/score/score.c (TARGET_OPTION_OVERRIDE): Define.\n\t(score_override_options): Rename to score_option_override.  Make\n\tstatic.\n\t* config/score/score.h (OVERRIDE_OPTIONS): Remove.\n\tUpdate comment referring to override_options.\n\t* config/score/score3.c (score3_override_options): Rename to\n\tscore3_option_override.\n\t* config/score/score3.h (score3_override_options): Rename to\n\tscore3_option_override.\n\t* config/score/score7.c (score7_override_options): Rename to\n\tscore7_option_override.\n\t* config/score/score7.h (score7_override_options): Rename to\n\tscore7_option_override.\n\t* config/sh/sh.c: Update comments referring to OVERRIDE_OPTIONS.\n\t* config/sparc/sparc.c (TARGET_OPTION_OVERRIDE): Define.\n\t(sparc_override_options): Rename to sparc_option_override.  Make\n\tstatic.  Call SUBTARGET_OVERRIDE_OPTIONS.\n\t* config/sparc/sparc.h (OVERRIDE_OPTIONS): Remove.\n\t* config/sparc/vxworks.h (SUBTARGET_OVERRIDE_OPTIONS): Define\n\tinstead of OVERRIDE_OPTIONS.\n\t* config/spu/spu-protos.h (spu_override_options): Remove.\n\t* config/spu/spu.c (TARGET_OPTION_OVERRIDE): Define.\n\t(spu_override_options): Rename to spu_option_override.  Make\n\tstatic.\n\t* config/spu/spu.h (OVERRIDE_OPTIONS): Remove.\n\t* config/vax/elf.h (SUBTARGET_OVERRIDE_OPTIONS): Define instead of\n\tOVERRIDE_OPTIONS.\n\t* config/vax/vax-protos.h (override_options): Remove.\n\t* config/vax/vax.c (TARGET_OPTION_OVERRIDE): Define.\n\t(override_options): Rename to vax_option_override.  Make static.\n\tCall SUBTARGET_OVERRIDE_OPTIONS.\n\t* config/vax/vax.h (OVERRIDE_OPTIONS): Remove.\n\t* config/vxworks.c: Update comment referring to OVERRIDE_OPTIONS.\n\t* config/vxworks.h: Update comment referring to OVERRIDE_OPTIONS.\n\t* config/xtensa/xtensa-protos.h (override_options): Remove.\n\t* config/xtensa/xtensa.c (TARGET_OPTION_OVERRIDE): Define.\n\t(override_options): Rename to xtensa_option_override.  Make\n\tstatic.\n\t* config/xtensa/xtensa.h (OVERRIDE_OPTIONS): Remove.\n\nFrom-SVN: r164334", "tree": {"sha": "fb327a762f18445eb13e2ac7a08b9a9432e459f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb327a762f18445eb13e2ac7a08b9a9432e459f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5387660230bce1ec6e40d47e243ff04059e4d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5387660230bce1ec6e40d47e243ff04059e4d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5387660230bce1ec6e40d47e243ff04059e4d77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5387660230bce1ec6e40d47e243ff04059e4d77/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6c4831a9aca4764b45734ae31c9f6e8eac4cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6c4831a9aca4764b45734ae31c9f6e8eac4cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6c4831a9aca4764b45734ae31c9f6e8eac4cac"}], "stats": {"total": 1025, "additions": 537, "deletions": 488}, "files": [{"sha": "21941826201422a70a3850dca288ae6930beec9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,3 +1,200 @@\n+2010-09-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/tm.texi.in (OVERRIDE_OPTIONS): Remove documentation.\n+\t(C_COMMON_OVERRIDE_OPTIONS): Don't refer to OVERRIDE_OPTIONS.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (OVERRIDE_OPTIONS): Poison.\n+\t* target.def (override): Default to hook_void_void.\n+\t* targhooks.c (default_target_option_override): Remove.\n+\t* genmodes.c, machmode.def: Update comments mentioning\n+\tOVERRIDE_OPTIONS.\n+\t* config/alpha/alpha-modes.def: Update comment mentioning\n+\talpha_override_options.\n+\t* config/alpha/alpha-protos.h (override_options): Remove.\n+\t* config/alpha/alpha.c (override_options): Rename to\n+\talpha_option_override.  Call SUBTARGET_OVERRIDE_OPTIONS.  Make\n+\tstatic.\n+\t(TARGET_OPTION_OVERRIDE): Define.\n+\t* config/alpha/alpha.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/alpha/vms.h (SUBTARGET_OVERRIDE_OPTIONS): Define instead\n+\tof OVERRIDE_OPTIONS.\n+\t* config/arc/arc-protos.h (arc_init): Remove.\n+\t* config/arc/arc.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(arc_init): Rename to arc_option_override.  Make static.\n+\t* config/arc/arc.h (ARC_EXTENSION_CPU): Correct comment.\n+\t(OVERRIDE_OPTIONS): Remove.\n+\t* config/arm/arm-protos.h (arm_override_options): Remove.\n+\t* config/arm/arm.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(arm_override_options): Rename to arm_option_override.  Make\n+\tstatic.  Call SUBTARGET_OVERRIDE_OPTIONS.\n+\t* config/arm/arm.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/arm/arm.md: Update comment referring to\n+\tarm_override_options.\n+\t* config/arm/vxworks.h (SUBTARGET_OVERRIDE_OPTIONS): Define\n+\tinstead of OVERRIDE_OPTIONS.\n+\t* config/avr/avr-protos.h (avr_override_options): Remove.\n+\t* config/avr/avr.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(avr_override_options): Rename to avr_option_override.  Make\n+\tstatic.\n+\t* config/avr/avr.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/bfin/bfin-protos.h (override_options): Remove (twice).\n+\t* config/bfin/bfin.c (override_options): Rename to\n+\tbfin_option_override.  Make static.\n+\t(TARGET_OPTION_OVERRIDE): Define.\n+\t* config/bfin/bfin.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/cris/cris-protos.h (cris_override_options): Remove.\n+\t* config/cris/cris.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(cris_override_options): Rename to cris_option_override.  Make\n+\tstatic.\n+\t* config/cris/cris.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/frv/frv-protos.h (frv_override_options): Remove.\n+\t* config/frv/frv.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(frv_override_options): Rename to frv_option_override.  Make\n+\tstatic.\n+\t* config/frv/frv.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/h8300/h8300-protos.h (h8300_init_once): Remove.\n+\t* config/h8300/h8300.c (h8300_init_once): Rename to\n+\th8300_option_override.  Make static.\n+\t(TARGET_OPTION_OVERRIDE): Define.\n+\t* config/h8300/h8300.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/i386/i386-protos.h (override_options): Remove.\n+\t* config/i386/i386.c (override_options): Rename to\n+\tix86_option_override_internal.  Make static.  Comments referring\n+\tto this function and callers changed.\n+\t(ix86_option_override): New.\n+\t(TARGET_OPTION_OVERRIDE): Define.\n+\t* config/i386/i386.h (OVERRIDE_OPTION): Remove.\n+\t* config/i386/linux64.h (DEFAULT_PCC_STRUCT_RETURN): Update\n+\tcomment.\n+\t* config/ia64/ia64.c (ia64_file_start): Update comment referring\n+\tto ia64_override_options.\n+\t* config/iq2000/iq2000-protos.h (override_options): Remove.\n+\t* config/iq2000/iq2000.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(override_options): Rename to iq2000_option_override.  Make\n+\tstatic.\n+\t* config/iq2000/iq2000.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/lm32/lm32-protos.h (lm32_override_options): Remove.\n+\t* config/lm32/lm32.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(lm32_override_options): Rename to lm32_option_override.  Make\n+\tstatic.\n+\t* config/lm32/lm32.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/m32r/m32r.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(m32r_option_override): New.\n+\t(m32r_init): Update comment.\n+\t* config/m32r/m32r.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_override_options):\n+\tRemove.\n+\t* config/m68hc11/m68hc11.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(m68hc11_override_options): Rename to m68hc11_option_override.\n+\tMake static.  Return void.\n+\t* config/m68hc11/m68hc11.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/m68k/m68k-protos.h (override_options): Remove.\n+\t* config/m68k/m68k.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(override_options): Rename to m68k_option_override.  Make static.\n+\t* config/m68k/m68k.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/mcore/mcore-protos.h (mcore_override_options): Remove.\n+\t* config/mcore/mcore.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(mcore_override_options): Rename to mcore_option_override.  Make\n+\tstatic.\n+\t* config/mcore/mcore.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/mep/mep-protos.h (mep_override_options): Remove.\n+\t* config/mep/mep.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(mep_override_options): Rename to mep_option_override.  Make\n+\tstatic.\n+\t* config/mep/mep.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/mmix/mmix-protos.h (mmix_override_options): Remove.\n+\t* config/mmix/mmix.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(mmix_override_options): Rename to mmix_option_override.  Make\n+\tstatic.\n+\t* config/mmix/mmix.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/mn10300/mn10300-protos.h (mn10300_override_options):\n+\tRemove.\n+\t* config/mn10300/mn10300.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(mn10300_override_options): Rename to mn10300_option_override.\n+\tMake static.\n+\t* config/mn10300/mn10300.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/moxie/moxie-protos.h (moxie_override_options): Remove.\n+\t* config/moxie/moxie.c (moxie_override_options): Rename to\n+\tmoxie_option_override.  Make static.\n+\t(TARGET_OPTION_OVERRIDE): Define.\n+\t* config/moxie/moxie.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/picochip/picochip-protos.h (picochip_override_options):\n+\tRemove.  Update comment referring to picochip_override_options.\n+\t* config/picochip/picochip.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(picochip_override_options): Rename to picochip_option_override.\n+\tMake static.  Update comment and definition of\n+\tTARGET_OVERRIDE_OPTIONS_AFTER_CHANGE.\n+\t* config/picochip/picochip.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n+\tcomment.\n+\t* config/rs6000/aix51.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n+\tcomment.\n+\t* config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n+\tcomment.\n+\t* config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n+\tcomment.\n+\t* config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n+\tcomment.\n+\t* config/rs6000/linux64.h (OPTION_TARGET_CPU_DEFAULT): Define\n+\tinstead of OVERRIDE_OPTIONS.\n+\t* config/rs6000/rs6000-modes.def: Update comment referring to\n+\trs6000_override_options.\n+\t* config/rs6000/rs6000-protos.h (rs6000_override_options): Remove.\n+\t* config/rs6000/rs6000.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(rs6000_override_options): Rename to\n+\trs6000_option_override_internal.  Make static.  Commented\n+\treferring to rs6000_override_options and OVERRIDE_OPTIONS updated.\n+\t(rs6000_option_override): New.\n+\t* config/rs6000/rs6000.h (OPTION_TARGET_CPU_DEFAULT): Define\n+\tinstead of OVERRIDE_OPTIONS.\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Update\n+\tcomment.\n+\t* config/s390/s390-protos.h (override_options): Remove.\n+\t* config/s390/s390.c (override_options): Rename to\n+\ts390_option_override.  Make static.\n+\t(TARGET_OPTION_OVERRIDE): Define.\n+\t* config/s390/s390.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/score/score-protos.h (score_override_options): Remove.\n+\t* config/score/score.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(score_override_options): Rename to score_option_override.  Make\n+\tstatic.\n+\t* config/score/score.h (OVERRIDE_OPTIONS): Remove.\n+\tUpdate comment referring to override_options.\n+\t* config/score/score3.c (score3_override_options): Rename to\n+\tscore3_option_override.\n+\t* config/score/score3.h (score3_override_options): Rename to\n+\tscore3_option_override.\n+\t* config/score/score7.c (score7_override_options): Rename to\n+\tscore7_option_override.\n+\t* config/score/score7.h (score7_override_options): Rename to\n+\tscore7_option_override.\n+\t* config/sh/sh.c: Update comments referring to OVERRIDE_OPTIONS.\n+\t* config/sparc/sparc.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(sparc_override_options): Rename to sparc_option_override.  Make\n+\tstatic.  Call SUBTARGET_OVERRIDE_OPTIONS.\n+\t* config/sparc/sparc.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/sparc/vxworks.h (SUBTARGET_OVERRIDE_OPTIONS): Define\n+\tinstead of OVERRIDE_OPTIONS.\n+\t* config/spu/spu-protos.h (spu_override_options): Remove.\n+\t* config/spu/spu.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(spu_override_options): Rename to spu_option_override.  Make\n+\tstatic.\n+\t* config/spu/spu.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/vax/elf.h (SUBTARGET_OVERRIDE_OPTIONS): Define instead of\n+\tOVERRIDE_OPTIONS.\n+\t* config/vax/vax-protos.h (override_options): Remove.\n+\t* config/vax/vax.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(override_options): Rename to vax_option_override.  Make static.\n+\tCall SUBTARGET_OVERRIDE_OPTIONS.\n+\t* config/vax/vax.h (OVERRIDE_OPTIONS): Remove.\n+\t* config/vxworks.c: Update comment referring to OVERRIDE_OPTIONS.\n+\t* config/vxworks.h: Update comment referring to OVERRIDE_OPTIONS.\n+\t* config/xtensa/xtensa-protos.h (override_options): Remove.\n+\t* config/xtensa/xtensa.c (TARGET_OPTION_OVERRIDE): Define.\n+\t(override_options): Rename to xtensa_option_override.  Make\n+\tstatic.\n+\t* config/xtensa/xtensa.h (OVERRIDE_OPTIONS): Remove.\n+\n 2010-09-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45623"}, {"sha": "9d5a042467b23db1cb5a4a543631398321f6f79e", "filename": "gcc/config/alpha/alpha-modes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-modes.def?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Alpha extra machine modes. \n-   Copyright (C) 2003, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2007, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -17,7 +17,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* 128-bit floating point.  This gets reset in alpha_override_options\n+/* 128-bit floating point.  This gets reset in alpha_option_override\n    if VAX float format is in use.  */\n FLOAT_MODE (TF, 16, ieee_quad_format);\n "}, {"sha": "4b5e6734dc7f0af78f775ff28bf8072ae3939c78", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for alpha.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2009\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -21,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n extern int alpha_next_sequence_number;\n \n extern void literal_section (void);\n-extern void override_options (void);\n extern int zap_mask (HOST_WIDE_INT);\n extern int direct_return (void);\n "}, {"sha": "4db554cbfbe71a08bba4bdc7fac76f67086175c6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -256,8 +256,8 @@ alpha_mangle_type (const_tree type)\n \n /* Parse target option strings.  */\n \n-void\n-override_options (void)\n+static void\n+alpha_option_override (void)\n {\n   static const struct cpu_table {\n     const char *const name;\n@@ -283,6 +283,10 @@ override_options (void)\n   int const ct_size = ARRAY_SIZE (cpu_table);\n   int i;\n \n+#ifdef SUBTARGET_OVERRIDE_OPTIONS\n+  SUBTARGET_OVERRIDE_OPTIONS;\n+#endif\n+\n   /* Unicos/Mk doesn't have shared libraries.  */\n   if (TARGET_ABI_UNICOSMK && flag_pic)\n     {\n@@ -11157,6 +11161,9 @@ alpha_init_libfuncs (void)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION alpha_handle_option\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE alpha_option_override\n+\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE alpha_mangle_type"}, {"sha": "f0d8b9dba4d82f7a6f9c43cbdde8342c351e6434", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -212,17 +212,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n   {\"cpu\", \"%{!mcpu=*:-mcpu=%(VALUE)}\" }, \\\n   {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   On the Alpha, it is used to translate target-option strings into\n-   numeric values.  */\n-\n-#define OVERRIDE_OPTIONS override_options ()\n-\n \n /* Define this macro to change register usage conditional on target flags.\n "}, {"sha": "38b2068693e8b83450b345a3fe1d870679ad1566", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n    Copyright (C) 1996, 1997, 1998, 2000, 2001, 2002, 2004, 2005, 2007, 2008,\n-   2009\n+   2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -337,17 +337,16 @@ typedef struct crtl_name_spec\n /* The VMS convention is to always provide minimal debug info\n    for a traceback unless specifically overridden.  */\n \n-#undef OVERRIDE_OPTIONS\n-#define OVERRIDE_OPTIONS                            \\\n-{                                                   \\\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS                  \\\n+do {                                                \\\n   if (write_symbols == NO_DEBUG                     \\\n       && debug_info_level == DINFO_LEVEL_NONE)      \\\n     {                                               \\\n       write_symbols = VMS_DEBUG;                    \\\n       debug_info_level = DINFO_LEVEL_TERSE;         \\\n     }                                               \\\n-   override_options ();                             \\\n-}\n+} while (0)\n \n /* Link with vms-dwarf2.o if -g (except -g0). This causes the\n    VMS link to pull all the dwarf2 debug sections together.  */"}, {"sha": "5550ebfbe2cdc5554c505d2bb7f868fd5a79015f", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n-   Copyright (C) 2000, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2004, 2007, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -54,7 +54,6 @@ extern int shift_operator (rtx, enum machine_mode);\n extern enum arc_function_type arc_compute_function_type (tree);\n \n \n-extern void arc_init (void);\n extern unsigned int arc_compute_frame_size (int);\n extern void arc_save_restore (FILE *, const char *, unsigned int,\n \t\t\t      unsigned int, const char *);"}, {"sha": "5031b99e2f7939e882e7d0e580a2f21e4c40de1d", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on the Argonaut ARC cpu.\n    Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -95,6 +95,7 @@ static bool arc_return_in_memory (const_tree, const_tree);\n static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   const_tree, bool);\n static void arc_trampoline_init (rtx, tree, rtx);\n+static void arc_option_override (void);\n \n \f\n /* ARC specific attributs.  */\n@@ -130,6 +131,9 @@ static const struct attribute_spec arc_attribute_table[] =\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION arc_handle_option\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE arc_option_override\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS arc_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -173,10 +177,11 @@ arc_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n     }\n }\n \n-/* Called by OVERRIDE_OPTIONS to initialize various things.  */\n+/* Implement TARGET_OPTION_OVERRIDE.\n+   These need to be done at start up.  It's convenient to do them here.  */\n \n-void\n-arc_init (void)\n+static void\n+arc_option_override (void)\n {\n   char *tmp;\n   "}, {"sha": "f2d273dcae048f34793408b34dbcbb433fbfcb46", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n    Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005,\n-   2007, 2008, 2009 Free Software Foundation, Inc.\n+   2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -82,24 +82,9 @@ extern int arc_cpu_type;\n /* Check if CPU is an extension and set `arc_cpu_type' and `arc_mangle_cpu'\n    appropriately.  The result should be nonzero if the cpu is recognized,\n    otherwise zero.  This is intended to be redefined in a cover file.\n-   This is used by arc_init.  */\n+   This is used by arc_handle_option.  */\n #define ARC_EXTENSION_CPU(cpu) 0\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n-\n-#define OVERRIDE_OPTIONS \\\n-do {\t\t\t\t\\\n-  /* These need to be done at start up.  It's convenient to do them here.  */ \\\n-  arc_init ();\t\t\t\\\n-} while (0)\n \f\n /* Target machine storage layout.  */\n "}, {"sha": "1f9548524b406d483652b01f9f2ed5fe6594dafd", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes for exported functions defined in arm.c and pe.c\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009 Free Software Foundation, Inc.\n+   2009, 2010 Free Software Foundation, Inc.\n    Contributed by Richard Earnshaw (rearnsha@arm.com)\n    Minor hacks by Nick Clifton (nickc@cygnus.com)\n \n@@ -23,7 +23,6 @@\n #ifndef GCC_ARM_PROTOS_H\n #define GCC_ARM_PROTOS_H\n \n-extern void arm_override_options (void);\n extern void arm_optimization_options (int, int);\n extern int use_return_insn (int, rtx);\n extern enum reg_class arm_regno_class (int);"}, {"sha": "acbaee6ef97c584eca57de5b53945ba49d2389de", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -215,6 +215,7 @@ static void arm_init_libfuncs (void);\n static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n+static void arm_option_override (void);\n static bool arm_handle_option (size_t, const char *, int);\n static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n@@ -318,6 +319,8 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_HANDLE_OPTION arm_handle_option\n #undef  TARGET_HELP\n #define TARGET_HELP arm_target_help\n+#undef  TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE arm_option_override\n \n #undef  TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n@@ -1375,13 +1378,16 @@ arm_target_help (void)\n \n }\n \n-/* Fix up any incompatible options that the user has specified.\n-   This has now turned into a maze.  */\n-void\n-arm_override_options (void)\n+/* Fix up any incompatible options that the user has specified.  */\n+static void\n+arm_option_override (void)\n {\n   unsigned i;\n \n+#ifdef SUBTARGET_OVERRIDE_OPTIONS\n+  SUBTARGET_OVERRIDE_OPTIONS;\n+#endif\n+\n   if (arm_selected_arch)\n     {\n       if (arm_selected_cpu)"}, {"sha": "9e7e5040c31f7b4167a4bcdd28f8bf4a1e0ce070", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n@@ -498,8 +498,6 @@ extern int arm_arch_hwdiv;\n    that is controlled by the APCS-FRAME option.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n-#define OVERRIDE_OPTIONS  arm_override_options ()\n-\n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\\\n \tarm_optimization_options ((LEVEL), (SIZE))\n "}, {"sha": "61b95e3ee00cafcc98beb57ee9ffaa5b4035ac83", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -333,7 +333,7 @@\n \t (const_string \"alu\")))\n \n ; Load scheduling, set from the arm_ld_sched variable\n-; initialized by arm_override_options() \n+; initialized by arm_option_override()\n (define_attr \"ldsched\" \"no,yes\" (const (symbol_ref \"arm_ld_sched\")))\n \n ;; Classification of NEON instructions for scheduling purposes."}, {"sha": "3ceaed9039cfe5e8778812948303e16f551d503c", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GCC,\n    for ARM with targetting the VXWorks run time environment. \n-   Copyright (C) 1999, 2000, 2003, 2004, 2007, 2008\n+   Copyright (C) 1999, 2000, 2003, 2004, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    Contributed by: Mike Stump <mrs@wrs.com>\n@@ -44,14 +44,8 @@ along with GCC; see the file COPYING3.  If not see\n     VXWORKS_OS_CPP_BUILTINS ();\t\t\t\\\n   } while (0)\n \n-#undef OVERRIDE_OPTIONS\n-#define OVERRIDE_OPTIONS\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      VXWORKS_OVERRIDE_OPTIONS;\t\t\t\\\n-      arm_override_options ();\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n \n /* Subsume the arm/elf.h definition, and add RTP hooks.  */\n #undef SUBTARGET_CPP_SPEC"}, {"sha": "aa0c6614c5089e3d28f9a102ffb9fe2d5b9ec39a", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -22,7 +22,6 @@\n \n \n extern int function_arg_regno_p (int r);\n-extern void avr_override_options (void);\n extern void avr_cpu_cpp_builtins (struct cpp_reader * pfile);\n extern int avr_ret_register (void);\n extern bool class_likely_spilled_p (int c);"}, {"sha": "cabf678d8f9f91981318364ba3285c5baa449c6f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -49,6 +49,7 @@\n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))\n \n+static void avr_option_override (void);\n static int avr_naked_function_p (tree);\n static int interrupt_function_p (tree);\n static int signal_function_p (tree);\n@@ -192,10 +193,13 @@ static const struct attribute_spec avr_attribute_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE avr_can_eliminate\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE avr_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-void\n-avr_override_options (void)\n+static void\n+avr_option_override (void)\n {\n   const struct mcu_type_s *t;\n "}, {"sha": "92c197a6ab9b65777ab2d471b8e52231854fe382", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -124,8 +124,6 @@ extern GTY(()) section *progmem_section;\n \n #define TARGET_VERSION fprintf (stderr, \" (GNU assembler syntax)\");\n \n-#define OVERRIDE_OPTIONS avr_override_options ()\n-\n #define CAN_DEBUG_WITHOUT_FP\n \n #define BITS_BIG_ENDIAN 0"}, {"sha": "1e18307d710d1245cbd800b0e026371530cd99b9", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for Blackfin functions used in the md file & elsewhere.\n-   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -99,13 +99,11 @@ extern enum reg_class secondary_output_reload_class (enum reg_class, Mmode,\n \t\t\t\t\t\t     rtx);\n extern char *section_asm_op_1 (SECT_ENUM_T);\n extern char *section_asm_op (SECT_ENUM_T);\n-extern void override_options (void);\n extern void print_operand (FILE *,  rtx, char);\n extern void print_address_operand (FILE *, rtx);\n extern void split_di (rtx [], int, rtx [], rtx []);\n extern int split_load_immediate (rtx []);\n extern void emit_pic_move (rtx *, Mmode);\n-extern void override_options (void);\n extern void asm_conditional_branch (rtx, rtx *, int, int);\n extern rtx bfin_gen_compare (rtx, Mmode);\n "}, {"sha": "8ff9e2fd0a7940351c1a2bc9c7eeaba5df6e6c61", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -358,7 +358,7 @@ output_file_start (void)\n \n   /* Variable tracking should be run after all optimizations which change order\n      of insns.  It also needs a valid CFG.  This can't be done in\n-     override_options, because flag_var_tracking is finalized after\n+     bfin_option_override, because flag_var_tracking is finalized after\n      that.  */\n   bfin_flag_var_tracking = flag_var_tracking;\n   flag_var_tracking = 0;\n@@ -2639,10 +2639,10 @@ bfin_init_machine_status (void)\n   return ggc_alloc_cleared_machine_function ();\n }\n \n-/* Implement the macro OVERRIDE_OPTIONS.  */\n+/* Implement the TARGET_OPTION_OVERRIDE hook.  */\n \n-void\n-override_options (void)\n+static void\n+bfin_option_override (void)\n {\n   /* If processor type is not specified, enable all workarounds.  */\n   if (bfin_cpu_type == BFIN_CPU_UNKNOWN)\n@@ -6626,6 +6626,9 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION bfin_handle_option\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE bfin_option_override\n+\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n "}, {"sha": "037e5be20f78fa5eac777f872fe08bc391613879", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -276,17 +276,6 @@ extern int target_flags;\n \n extern const char *bfin_library_id_string;\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n- \n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n- \n-#define OVERRIDE_OPTIONS override_options ()\n-\n #define FUNCTION_MODE    SImode\n #define Pmode            SImode\n "}, {"sha": "84191c0920b183d6b6d58010da07deb5d44fc780", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006, 2007\n+   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Axis Communications.\n \n@@ -64,8 +64,6 @@ extern void cris_pragma_expand_mul (struct cpp_reader *);\n /* Need one that returns an int; usable in expressions.  */\n extern int cris_fatal (char *);\n \n-extern void cris_override_options (void);\n-\n extern int cris_initial_elimination_offset (int, int);\n \n extern void cris_init_expanders (void);"}, {"sha": "6e0421241cbb15ddba7eaf5c77f19201476f3668", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-   2008, 2009  Free Software Foundation, Inc.\n+   2008, 2009, 2010  Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -130,6 +130,7 @@ static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n static tree cris_md_asm_clobbers (tree, tree, tree);\n \n static bool cris_handle_option (size_t, const char *, int);\n+static void cris_option_override (void);\n \n static bool cris_frame_pointer_required (void);\n \n@@ -208,6 +209,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED cris_frame_pointer_required\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE cris_option_override\n+\n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE cris_asm_trampoline_template\n #undef TARGET_TRAMPOLINE_INIT\n@@ -2336,7 +2340,7 @@ cris_asm_output_case_end (FILE *stream, int num, rtx table)\n \n /* TARGET_HANDLE_OPTION worker.  We just store the values into local\n    variables here.  Checks for correct semantics are in\n-   cris_override_options.  */\n+   cris_option_override.  */\n \n static bool\n cris_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n@@ -2392,11 +2396,11 @@ cris_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n   return true;\n }\n \n-/* The OVERRIDE_OPTIONS worker.\n+/* The TARGET_OPTION_OVERRIDE worker.\n    As is the norm, this also parses -mfoo=bar type parameters.  */\n \n-void\n-cris_override_options (void)\n+static void\n+cris_option_override (void)\n {\n   if (cris_max_stackframe_str)\n     {"}, {"sha": "b767b23518da19c72d8e5419984d066500305307", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n-   2009 Free Software Foundation, Inc.\n+   2009, 2010 Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -328,8 +328,6 @@ extern int target_flags;\n \n #define CRIS_SUBTARGET_HANDLE_OPTION(x, y, z)\n \n-#define OVERRIDE_OPTIONS cris_override_options ()\n-\n #define OPTIMIZATION_OPTIONS(OPTIMIZE, SIZE)\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\"}, {"sha": "f2081faa05a8c5b0be673f3d027578e89a76412a", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -38,7 +38,6 @@ extern frv_cpu_t frv_cpu_type;\t\t\t/* value of -mcpu= */\n /* Define functions defined in frv.c */\n extern void frv_expand_prologue\t\t\t(void);\n extern void frv_expand_epilogue\t\t\t(bool);\n-extern void frv_override_options\t\t(void);\n extern void frv_optimization_options\t\t(int, int);\n extern void frv_conditional_register_usage\t(void);\n extern frv_stack_t *frv_stack_info\t\t(void);"}, {"sha": "295610d33223026fedca9864a298377efc181796", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -264,6 +264,7 @@ frv_cpu_t frv_cpu_type = CPU_TYPE;\t/* value of -mcpu= */\n /* Forward references */\n \n static bool frv_handle_option\t\t\t(size_t, const char *, int);\n+static void frv_option_override\t\t\t(void);\n static bool frv_legitimate_address_p\t\t(enum machine_mode, rtx, bool);\n static int frv_default_flags_for_cpu\t\t(void);\n static int frv_string_begins_with\t\t(const_tree, const char *);\n@@ -428,6 +429,8 @@ static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n    | MASK_NESTED_CE)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION frv_handle_option\n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE frv_option_override\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n@@ -669,17 +672,10 @@ frv_default_flags_for_cpu (void)\n     }\n }\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n+/* Implement TARGET_OPTION_OVERRIDE.  */\n \n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n-void\n-frv_override_options (void)\n+static void\n+frv_option_override (void)\n {\n   int regno;\n   unsigned int i;"}, {"sha": "22200dca83c0feb431008fb806ed3949b8ebbaba", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -328,16 +328,6 @@\n         #endif  */\n #define TARGET_VERSION fprintf (stderr, _(\" (frv)\"))\n \n-/* Sometimes certain combinations of command options do not make sense on a\n-   particular target machine.  You can define a macro `OVERRIDE_OPTIONS' to\n-   take account of this.  This macro, if defined, is executed once just after\n-   all the command options have been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for `-O'.  That\n-   is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n-#define OVERRIDE_OPTIONS frv_override_options ()\n-\n /* Some machines may desire to change what optimizations are performed for\n    various optimization levels.  This macro, if defined, is executed once just\n    after the optimization level is determined and before the remainder of the"}, {"sha": "7bf8ba367bdcd23d6e20ce66e19df7dead8814df", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Renesas H8/300 version\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n \n@@ -95,7 +96,6 @@ extern int h8300_eightbit_data_p (tree);\n extern int h8300_tiny_data_p (tree);\n #endif /* TREE_CODE */\n \n-extern void h8300_init_once (void);\n extern int h8300_can_use_return_insn_p (void);\n extern void h8300_expand_prologue (void);\n extern void h8300_expand_epilogue (void);"}, {"sha": "14007821d17260a7c4cf8f7611e1108efcacdce3", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -305,8 +305,8 @@ enum h8_cpu\n \n /* Initialize various cpu specific globals at start up.  */\n \n-void\n-h8300_init_once (void)\n+static void\n+h8300_option_override (void)\n {\n   static const char *const h8_push_ops[2] = { \"push\" , \"push.l\" };\n   static const char *const h8_pop_ops[2]  = { \"pop\"  , \"pop.l\"  };\n@@ -5922,4 +5922,7 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT h8300_trampoline_init\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE h8300_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "79469a0e81b7139487c4dca2c368c651803226cb", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Renesas H8/300 (generic)\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n@@ -129,15 +129,6 @@ extern const char * const *h8_reg_names;\n #endif\n #endif /* !IN_LIBGCC2 */\n \n-/* Do things that must be done once at start up.  */\n-\n-#define OVERRIDE_OPTIONS\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      h8300_init_once ();\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Default target_flags if no switches specified.  */\n \n #ifndef TARGET_DEFAULT"}, {"sha": "e35a15eb85ca32b5ba3d5591462bfb790f08df41", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* Functions in i386.c */\n-extern void override_options (bool);\n extern void optimization_options (int, int);\n extern void ix86_conditional_register_usage (void);\n "}, {"sha": "fd731c001207935437f102bdff8bfeb061e47746", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -2803,17 +2803,12 @@ ix86_debug_options (void)\n   return;\n }\n \f\n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n+/* Override various settings based on options.  If MAIN_ARGS_P, the\n+   options are from the command line, otherwise they are from\n+   attributes.  */\n \n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n-void\n-override_options (bool main_args_p)\n+static void\n+ix86_option_override_internal (bool main_args_p)\n {\n   int i;\n   unsigned int ix86_arch_mask, ix86_tune_mask;\n@@ -3709,6 +3704,14 @@ override_options (bool main_args_p)\n       = build_target_option_node ();\n }\n \n+/* Implement the TARGET_OPTION_OVERRIDE hook.  */\n+\n+static void\n+ix86_option_override (void)\n+{\n+  ix86_option_override_internal (true);\n+}\n+\n /* Update register usage after having seen the compiler flags.  */\n \n void\n@@ -4105,9 +4108,10 @@ ix86_valid_target_attribute_tree (tree args)\n   if (! ix86_valid_target_attribute_inner_p (args, option_strings))\n     return NULL_TREE;\n \n-  /* If the changed options are different from the default, rerun override_options,\n-     and then save the options away.  The string options are are attribute options,\n-     and will be undone when we copy the save structure.  */\n+  /* If the changed options are different from the default, rerun\n+     ix86_option_override_internal, and then save the options away.\n+     The string options are are attribute options, and will be undone\n+     when we copy the save structure.  */\n   if (ix86_isa_flags != def->ix86_isa_flags\n       || target_flags != def->target_flags\n       || option_strings[IX86_FUNCTION_SPECIFIC_ARCH]\n@@ -4133,7 +4137,7 @@ ix86_valid_target_attribute_tree (tree args)\n \tix86_fpmath_string = \"sse,387\";\n \n       /* Do any overrides, such as arch=xxx, or tune=xxx support.  */\n-      override_options (false);\n+      ix86_option_override_internal (false);\n \n       /* Add any builtin functions with the new isa if any.  */\n       ix86_add_new_builtins (ix86_isa_flags);\n@@ -4529,8 +4533,9 @@ optimization_options (int level, int size ATTRIBUTE_UNUSED)\n \n   /* The default values of these switches depend on the TARGET_64BIT\n      that is not known at this moment.  Mark these values with 2 and\n-     let user the to override these.  In case there is no command line option\n-     specifying them, we will set the defaults in override_options.  */\n+     let user the to override these.  In case there is no command line\n+     option specifying them, we will set the defaults in\n+     ix86_option_override_internal.  */\n   if (optimize >= 1)\n     flag_omit_frame_pointer = 2;\n \n@@ -7901,9 +7906,9 @@ ix86_frame_pointer_required (void)\n   if (SUBTARGET_FRAME_POINTER_REQUIRED)\n     return true;\n \n-  /* In override_options, TARGET_OMIT_LEAF_FRAME_POINTER turns off\n-     the frame pointer by default.  Turn it back on now if we've not\n-     got a leaf function.  */\n+  /* In ix86_option_override_internal, TARGET_OMIT_LEAF_FRAME_POINTER\n+     turns off the frame pointer by default.  Turn it back on now if\n+     we've not got a leaf function.  */\n   if (TARGET_OMIT_LEAF_FRAME_POINTER\n       && (!current_function_is_leaf\n \t  || ix86_current_function_calls_tls_descriptor))\n@@ -32497,6 +32502,9 @@ ix86_units_per_simd_word (enum machine_mode mode)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION ix86_handle_option\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE ix86_option_override\n+\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST ix86_register_move_cost\n #undef TARGET_MEMORY_MOVE_COST"}, {"sha": "8a9600c27d4f948a24cacd32dc28b5decbea12ae", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -506,17 +506,6 @@ extern enum calling_abi ix86_abi;\n    with the rounding mode forced to 53 bits.  */\n #define TARGET_96_ROUND_53_LONG_DOUBLE 0\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n-#define OVERRIDE_OPTIONS override_options (true)\n-\n /* Define this to change the optimizations performed by default.  */\n #define OPTIMIZATION_OPTIONS(LEVEL, SIZE) \\\n   optimization_options ((LEVEL), (SIZE))"}, {"sha": "fda73d211074f1a04a8b7685036cbde88689cf92", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -42,7 +42,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* The svr4 ABI for the i386 says that records and unions are returned\n    in memory.  In the 64bit compilation we will turn this flag off in\n-   override_options, as we never do pcc_struct_return scheme on this target.  */\n+   ix86_option_override_internal, as we never do pcc_struct_return\n+   scheme on this target.  */\n #undef DEFAULT_PCC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 1\n "}, {"sha": "ab01a5588d3881e35e48731f08003b9258128c28", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -2314,7 +2314,7 @@ ia64_file_start (void)\n {\n   /* Variable tracking should be run after all optimizations which change order\n      of insns.  It also needs a valid CFG.  This can't be done in\n-     ia64_override_options, because flag_var_tracking is finalized after\n+     ia64_option_override, because flag_var_tracking is finalized after\n      that.  */\n   ia64_flag_var_tracking = flag_var_tracking;\n   flag_var_tracking = 0;"}, {"sha": "971aadf4547c9833dd872a4032a6979c216fd8a9", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for iq2000.\n-   Copyright (C) 2003, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2007, 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -24,7 +24,6 @@ extern int              iq2000_check_split (rtx, enum machine_mode);\n extern int              iq2000_reg_mode_ok_for_base_p (rtx, enum machine_mode, int);\n extern const char *     iq2000_fill_delay_slot (const char *, enum delay_type, rtx *, rtx);\n extern const char *     iq2000_move_1word (rtx *, rtx, int);\n-extern void             override_options (void);\n extern HOST_WIDE_INT    iq2000_debugger_offset (rtx, HOST_WIDE_INT);\n extern void             final_prescan_insn (rtx, rtx *, int);\n extern HOST_WIDE_INT    compute_frame_size (HOST_WIDE_INT);"}, {"sha": "dd2c927108fb5edeb14d3cea9a4fab2a4ebc9867", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on Vitesse IQ2000 processors\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -147,6 +147,7 @@ static enum machine_mode gpr_mode;\n /* Initialize the GCC target structure.  */\n static struct machine_function* iq2000_init_machine_status (void);\n static bool iq2000_handle_option      (size_t, const char *, int);\n+static void iq2000_option_override    (void);\n static section *iq2000_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t   unsigned HOST_WIDE_INT);\n static void iq2000_init_builtins      (void);\n@@ -182,6 +183,8 @@ static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n #define TARGET_ASM_SELECT_RTX_SECTION\tiq2000_select_rtx_section\n #undef  TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION\t\tiq2000_handle_option\n+#undef  TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE\t\tiq2000_option_override\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS\t\tiq2000_rtx_costs\n #undef  TARGET_ADDRESS_COST\n@@ -1428,8 +1431,8 @@ iq2000_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n \n /* Detect any conflicts in the switches.  */\n \n-void\n-override_options (void)\n+static void\n+iq2000_option_override (void)\n {\n   target_flags &= ~MASK_GPOPT;\n "}, {"sha": "6e670badc58e9c2d00dd7ddb46c3c5908f50e5e0", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -69,8 +69,6 @@\n #define TARGET_VERSION TARGET_VERSION_INTERNAL (stderr)\n #endif\n \n-#define OVERRIDE_OPTIONS override_options ()\n-\n #define CAN_DEBUG_WITHOUT_FP\n \f\n /* Storage Layout.  */"}, {"sha": "51e191bab8183f120e2c013ae46e8e402762244a", "filename": "gcc/config/lm32/lm32-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Flm32%2Flm32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Flm32%2Flm32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,7 +1,7 @@\n /* Prototypes of target machine functions, Lattice Mico32 architecture.\n    Contributed by Jon Beniston <jon@beniston.com>\n \n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -28,7 +28,6 @@ extern void lm32_print_operand (FILE *file, rtx op, int letter);\n extern void lm32_print_operand_address (FILE *file, rtx addr);\n extern rtx lm32_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n                               tree type, int named);\n-extern void lm32_override_options (void);\n extern HOST_WIDE_INT lm32_compute_initial_elimination_offset (int from, \n                                                              int to);\n extern int lm32_can_use_return (void);"}, {"sha": "a0e9472c5ecc62dfed5332004f4affa3f4d17d70", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -76,9 +76,12 @@ static bool\n lm32_legitimate_address_p (enum machine_mode mode, rtx x, bool strict);\n static HOST_WIDE_INT lm32_compute_frame_size (int size);\n static bool lm32_handle_option (size_t code, const char *arg, int value);\n+static void lm32_option_override (void);\n \n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION lm32_handle_option\n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE lm32_option_override\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n #undef TARGET_RTX_COSTS\n@@ -713,8 +716,8 @@ lm32_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n }\n \n /* Override command line options.  */\n-void\n-lm32_override_options (void)\n+static void\n+lm32_option_override (void)\n {\n   /* We must have sign-extend enabled if barrel-shift isn't.  */\n   if (!TARGET_BARREL_SHIFT_ENABLED && !TARGET_SIGN_EXTEND_ENABLED)"}, {"sha": "2698d40b8962f83dd91aa2b9e8f30ee0945b30cc", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -68,8 +68,6 @@\n #undef  LIB_SPEC\n #define LIB_SPEC \"%{!T*:-T sim.ld}\"\n \n-#define OVERRIDE_OPTIONS lm32_override_options()\n-\n extern int target_flags;\n \n /* Add -G xx support.  */"}, {"sha": "93030add6cbc14eb5359c6af84b5042205f228e1", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -63,6 +63,7 @@ enum m32r_sdata m32r_sdata = M32R_SDATA_DEFAULT;\n \n /* Forward declaration.  */\n static bool  m32r_handle_option (size_t, const char *, int);\n+static void  m32r_option_override (void);\n static void  init_reg_tables (void);\n static void  block_move_call (rtx, rtx, rtx);\n static int   m32r_is_insn (rtx);\n@@ -150,6 +151,8 @@ static const struct attribute_spec m32r_attribute_table[] =\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_CPU_DEFAULT\n #undef  TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION m32r_handle_option\n+#undef  TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE m32r_option_override\n \n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO m32r_encode_section_info\n@@ -251,7 +254,7 @@ m32r_handle_option (size_t code, const char *arg, int value)\n     }\n }\n \n-/* Called by OVERRIDE_OPTIONS to initialize various things.  */\n+/* Called by m32r_option_override to initialize various things.  */\n \n void\n m32r_init (void)\n@@ -268,6 +271,15 @@ m32r_init (void)\n     g_switch_value = SDATA_DEFAULT_SIZE;\n }\n \n+static void\n+m32r_option_override (void)\n+{\n+  /* These need to be done at start up.\n+     It's convenient to do them here.  */\n+  m32r_init ();\n+  SUBTARGET_OVERRIDE_OPTIONS;\n+}\n+\n /* Vectors to keep interesting information about registers where it can easily\n    be got.  We use to use the actual mode value as the bit number, but there\n    is (or may be) more than 32 modes now.  Instead we use two tables: one"}, {"sha": "ee867bf8fe22f1e7417f4f49b22a741ffc61a935", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -302,29 +302,10 @@ extern enum m32r_sdata m32r_sdata;\n #define MULTILIB_DEFAULTS { \"mmodel=small\" SUBTARGET_MULTILIB_DEFAULTS }\n #endif\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n #ifndef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\n #endif\n \n-#define OVERRIDE_OPTIONS\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      /* These need to be done at start up.\t\\\n-\t It's convenient to do them here.  */\t\\\n-      m32r_init ();\t\t\t\t\\\n-      SUBTARGET_OVERRIDE_OPTIONS\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n #ifndef SUBTARGET_OPTIMIZATION_OPTIONS\n #define SUBTARGET_OPTIMIZATION_OPTIONS\n #endif"}, {"sha": "a0c4941c85b20695f9bc37d5aa0a4e08bdbefdbc", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n \n-extern int m68hc11_override_options (void);\n extern int m68hc11_optimization_options (int,int);\n extern void m68hc11_conditional_register_usage (void);\n extern int hard_regno_mode_ok (int, enum machine_mode);"}, {"sha": "ea60db6a35c567836d50aeddb7668bfd0fb4a9c5", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"df.h\"\n \n+static void m68hc11_option_override (void);\n static void emit_move_after_reload (rtx, rtx, rtx);\n static rtx simplify_logical (enum machine_mode, int, rtx, rtx *);\n static void m68hc11_emit_logical (enum machine_mode, enum rtx_code, rtx *);\n@@ -293,10 +294,13 @@ static const struct attribute_spec m68hc11_attribute_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT m68hc11_trampoline_init\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE m68hc11_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-int\n-m68hc11_override_options (void)\n+static void\n+m68hc11_option_override (void)\n {\n   memset (m68hc11_reg_valid_for_index, 0,\n \t  sizeof (m68hc11_reg_valid_for_index));\n@@ -361,7 +365,6 @@ m68hc11_override_options (void)\n       if (TARGET_LONG_CALLS)\n         current_function_far = 1;\n     }\n-  return 0;\n }\n \n "}, {"sha": "f19180d4a1b6425445df5e7b7d8fe93512a1e63e", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -142,17 +142,6 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION\tfprintf (stderr, \" (MC68HC11/MC68HC12/MC68HCS12)\")\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n-#define OVERRIDE_OPTIONS\tm68hc11_override_options ()\n-\n \f\n /* Define cost parameters for a given processor variant.  */\n struct processor_costs {"}, {"sha": "ad02026309a216a21610f762ec16353eeaeb9cd1", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n-   Copyright (C) 2000, 2002, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2002, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -94,7 +94,6 @@ extern int flags_in_68881 (void);\n extern void m68k_expand_prologue (void);\n extern bool m68k_use_return_insn (void);\n extern void m68k_expand_epilogue (bool);\n-extern void override_options (void);\n extern const char *m68k_cpp_cpu_ident (const char *);\n extern const char *m68k_cpp_cpu_family (const char *);\n extern void init_68881_table (void);"}, {"sha": "09b7ccbd86fa9ba7c4e52da797fa355f64981f74", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -135,6 +135,7 @@ static int m68k_sched_first_cycle_multipass_dfa_lookahead (void);\n static bool m68k_can_eliminate (const int, const int);\n static bool m68k_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool m68k_handle_option (size_t, const char *, int);\n+static void m68k_option_override (void);\n static rtx find_addr_reg (rtx);\n static const char *singlemove_string (rtx *);\n static void m68k_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n@@ -233,6 +234,9 @@ const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION m68k_handle_option\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE m68k_option_override\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m68k_rtx_costs\n \n@@ -539,17 +543,10 @@ m68k_handle_option (size_t code, const char *arg, int value)\n     }\n }\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n+/* Implement TARGET_OPTION_OVERRIDE.  */\n \n-void\n-override_options (void)\n+static void\n+m68k_option_override (void)\n {\n   const struct m68k_target_selection *entry;\n   unsigned long target_mask;"}, {"sha": "75217bae23197ad0fd24b20811b47b6d2bdc3532", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GCC for Motorola 680x0/ColdFire.\n    Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -274,8 +274,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TUNE_MAC\t((m68k_tune_flags & FL_CF_MAC) != 0)\n #define TUNE_EMAC\t((m68k_tune_flags & FL_CF_EMAC) != 0)\n \n-#define OVERRIDE_OPTIONS   override_options()\n-\n /* These are meant to be redefined in the host dependent files */\n #define SUBTARGET_OVERRIDE_OPTIONS\n \f"}, {"sha": "2093f16ec197f2031313869dc8f88df71e8a08dd", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in mcore.c\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Nick Clifton (nickc@redhat.com)\n \n@@ -29,7 +29,6 @@ extern int          mcore_initial_elimination_offset\t(int, int);\n extern int          mcore_byte_offset            \t(unsigned int);\n extern int          mcore_halfword_offset        \t(unsigned int);\n extern int          mcore_const_trick_uses_not   \t(HOST_WIDE_INT);\n-extern void         mcore_override_options       \t(void);\n extern int          mcore_dllexport_name_p       \t(const char *);\n extern int          mcore_dllimport_name_p       \t(const char *);\n extern int          mcore_naked_function_p       \t(void);"}, {"sha": "5556d7d1ed439d31fa6f7c708cadb7c69ecea49a", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for Motorola MCore processor\n    Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n-   2009 Free Software Foundation, Inc.\n+   2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -149,6 +149,7 @@ static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,\n \t\t\t\t\t\t tree, bool);\n static void       mcore_asm_trampoline_template (FILE *);\n static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n+static void       mcore_option_override\t\t(void);\n \f\n /* MCore specific attributes.  */\n \n@@ -225,6 +226,9 @@ static const struct attribute_spec mcore_attribute_table[] =\n #undef  TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT\t\tmcore_trampoline_init\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE mcore_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */\n@@ -2679,8 +2683,8 @@ mcore_is_same_reg (rtx x, rtx y)\n   return 0;\n }\n \n-void\n-mcore_override_options (void)\n+static void\n+mcore_option_override (void)\n {\n   /* Only the m340 supports little endian code.  */\n   if (TARGET_LITTLE_END && ! TARGET_M340)"}, {"sha": "d703baf2e312ebb22d2b4d1edf7b461e9dea5add", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for Motorola M*CORE Processor.\n    Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007,\n-   2008, 2009 Free Software Foundation, Inc.\n+   2008, 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -110,11 +110,6 @@ extern char * mcore_current_function_name;\n     }\t\t\t\t\t\t\\\n }\n \n-/* What options are we going to force to specific settings,\n-   regardless of what the user thought he wanted.\n-   We also use this for some post-processing of options.  */\n-#define OVERRIDE_OPTIONS  mcore_override_options ()\n-\n /* Target machine storage Layout.  */\n \n #define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)  \t\\"}, {"sha": "d3e21bd70f3c1e46a41d7ca198e38d62db3b4950", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -21,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void mep_conditional_register_usage (void);\n extern void mep_optimization_options (void);\n-extern void mep_override_options (void);\n extern int mep_regno_reg_class (int);\n extern int mep_reg_class_from_constraint (int, const char *);\n extern bool mep_const_ok_for_letter_p (HOST_WIDE_INT, int);"}, {"sha": "0e6ce08176fe4e6c6e304bc78482b97ee9ce7c68", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -302,8 +302,8 @@ mep_optimization_options (void)\n   flag_omit_frame_pointer = 1;\n }\n \n-void\n-mep_override_options (void)\n+static void\n+mep_option_override (void)\n {\n   if (flag_pic == 1)\n     warning (OPT_fpic, \"-fpic is not supported\");\n@@ -7409,6 +7409,8 @@ mep_asm_init_sections (void)\n #define TARGET_VECTOR_MODE_SUPPORTED_P\tmep_vector_mode_supported_p\n #undef  TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION            mep_handle_option\n+#undef  TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE\t\tmep_option_override\n #undef  TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n #undef  TARGET_ALLOCATE_INITIAL_VALUE"}, {"sha": "83a5582c15876e6b2343348523580e53b6fb1128", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -134,8 +134,6 @@ extern int target_flags;\n \n #define TARGET_VERSION fprintf (stderr, \" (Toshiba Media Processor (MeP))\");\n \n-#define OVERRIDE_OPTIONS mep_override_options ();\n-\n /* The MeP config tool will add TARGET_OPTION_TRANSLATE_TABLE here.  */\n #define TARGET_OPTION_TRANSLATE_TABLE \\\n   {\"-mall-opts\", \"-maverage -mmult -mdiv -mbitops -mleadz \\"}, {"sha": "d7e0a9470041cfee200f17a2b3e2225a3f7d0766", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -19,7 +19,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-extern void mmix_override_options (void);\n extern void mmix_init_expanders (void);\n extern int mmix_eh_return_data_regno (int);\n extern int mmix_initial_elimination_offset (int, int);"}, {"sha": "ce10a1b9bd0e66c7b5f72e28169c2dad0867605b", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -113,6 +113,7 @@ rtx mmix_compare_op1;\n /* Intermediate for insn output.  */\n static int mmix_output_destination_register;\n \n+static void mmix_option_override (void);\n static void mmix_asm_output_source_filename (FILE *, const char *);\n static void mmix_output_shiftvalue_op_from_str\n   (FILE *, const char *, HOST_WIDEST_INT);\n@@ -233,15 +234,18 @@ static void mmix_trampoline_init (rtx, tree, rtx);\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT mmix_trampoline_init\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE mmix_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Functions that are expansions for target macros.\n    See Target Macros in `Using and Porting GCC'.  */\n \n-/* OVERRIDE_OPTIONS.  */\n+/* TARGET_OPTION_OVERRIDE.  */\n \n-void\n-mmix_override_options (void)\n+static void\n+mmix_option_override (void)\n {\n   /* Should we err or should we warn?  Hmm.  At least we must neutralize\n      it.  For example the wrong kind of case-tables will be generated with"}, {"sha": "5672827f7c118ed50b28c5c458a6480c85ac6cce", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -149,8 +149,6 @@ extern int target_flags;\n #define TARGET_VERSION \\\n   fprintf (stderr, \" (MMIX)\")\n \n-#define OVERRIDE_OPTIONS mmix_override_options ()\n-\n #define OPTIMIZATION_OPTIONS(LEVEL, SIZE)\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\"}, {"sha": "02a7942824ac10d1246ca96a7ed229ae31650bfa", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler. Matsushita MN10300 series\n-   Copyright (C) 2000, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2003, 2004, 2005, 2007, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GCC.\n@@ -20,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #ifdef RTX_CODE\n \n-extern void mn10300_override_options (void);\n extern rtx legitimize_pic_address (rtx, rtx);\n extern int legitimate_pic_operand_p (rtx);\n extern void print_operand (FILE *, rtx, int);"}, {"sha": "fe03742e7e417fc0b79348ccd1fcf2f96944e3fe", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -69,6 +69,7 @@ enum processor_type mn10300_processor = PROCESSOR_DEFAULT;\n \n \n static bool mn10300_handle_option (size_t, const char *, int);\n+static void mn10300_option_override (void);\n static bool mn10300_legitimate_address_p (enum machine_mode, rtx, bool);\n static int mn10300_address_cost_1 (rtx, int *);\n static int mn10300_address_cost (rtx, bool);\n@@ -112,6 +113,8 @@ static bool mn10300_can_output_mi_thunk (const_tree, HOST_WIDE_INT, HOST_WIDE_IN\n #define TARGET_DEFAULT_TARGET_FLAGS MASK_MULT_BUG | MASK_PTR_A0D0\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION mn10300_handle_option\n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE mn10300_option_override\n \n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mn10300_encode_section_info\n@@ -177,10 +180,10 @@ mn10300_handle_option (size_t code,\n     }\n }\n \n-/* Implement OVERRIDE_OPTIONS.  */\n+/* Implement TARGET_OPTION_OVERRIDE.  */\n \n-void\n-mn10300_override_options (void)\n+static void\n+mn10300_option_override (void)\n {\n   if (TARGET_AM33)\n     target_flags &= ~MASK_MULT_BUG;"}, {"sha": "56e2bc80792dff04bc004b03aa9c685552b4f291", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -60,8 +60,6 @@ extern enum processor_type mn10300_processor;\n #define PROCESSOR_DEFAULT PROCESSOR_MN10300\n #endif\n \n-#define OVERRIDE_OPTIONS mn10300_override_options ()\n-\n /* Print subsidiary information on the compiler version in use.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (MN10300)\");"}, {"sha": "3c1027bee58d3b1d3aeac8a435bdd97e929f84da", "filename": "gcc/config/moxie/moxie-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -18,7 +18,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-extern void  moxie_override_options (void);\n extern void  moxie_expand_prologue (void);\n extern void  moxie_expand_epilogue (void);\n extern int   moxie_initial_elimination_offset (int, int);"}, {"sha": "cd2fb88deccfcb182fefc66f21d9cbf3cd98f305", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -231,10 +231,10 @@ moxie_init_machine_status (void)\n }\n \n \n-/* The OVERRIDE_OPTIONS worker.\n+/* The TARGET_OPTION_OVERRIDE worker.\n    All this curently does is set init_machine_status.  */\n-void\n-moxie_override_options (void)\n+static void\n+moxie_option_override (void)\n {\n   /* Set the per-function-data initializer.  */\n   init_machine_status = moxie_init_machine_status;\n@@ -567,6 +567,9 @@ moxie_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT moxie_trampoline_init\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE moxie_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-moxie.h\""}, {"sha": "1445202c332194ee4080449e80c8de6ca7a59efc", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -303,8 +303,6 @@ enum reg_class\n    pointer registers are already assumed to be used as needed.  */\n #define EPILOGUE_USES(R) (R == MOXIE_R5)\n \n-#define OVERRIDE_OPTIONS moxie_override_options ()\n-\n /* Storage Layout */\n \n #define BITS_BIG_ENDIAN 0"}, {"sha": "c80bf70b4b06fef63efd82a3c2bc6afa649a3684", "filename": "gcc/config/picochip/picochip-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes for exported functions defined in picochip.c\n \n-   Copyright (C) 2000, 2001, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by picoChip Designs Ltd. (http://www.picochip.com)\n    Maintained by Daniel Towner (daniel.towner@picochip.com) and\n    Hariharan Sandanagobalane (hariharan@picochip.com).\n@@ -91,7 +91,6 @@ extern void picochip_expand_epilogue (int is_sibling_call);\n \n extern void picochip_final_prescan_insn (rtx insn, rtx * operand, int num_operands);\n extern const char *picochip_asm_output_opcode (FILE * f, const char *ptr);\n-extern void picochip_override_options (void);\n \n extern int picochip_check_conditional_copy (rtx * operands);\n \n@@ -138,7 +137,7 @@ extern int picochip_flag_schedule_insns2;\n extern void picochip_asm_output_anchor (rtx symbol);\n \n /* Instruction set capability flags.  These are initialised to the\n-   appropriate values by picochip_override_options, once the user has\n+   appropriate values by picochip_option_override, once the user has\n    selected a CPU type. */\n extern bool picochip_has_mul_unit;\n extern bool picochip_has_mac_unit;"}, {"sha": "9bd2382915b04b5b4a812a4fbb6591f82f8288c2", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -117,6 +117,8 @@ picochip_asm_named_section (const char *name,\n \n static rtx picochip_static_chain (const_tree, bool);\n \n+static void picochip_option_override (void);\n+\n /* Lookup table mapping a register number to the earliest containing\n    class.  Used by REGNO_REG_CLASS.  */\n const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER] =\n@@ -301,8 +303,11 @@ static char picochip_get_vliw_alu_id (void);\n #undef TARGET_STATIC_CHAIN\n #define TARGET_STATIC_CHAIN picochip_static_chain\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE picochip_option_override\n+\n #undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n-#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE picochip_override_options\n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE picochip_option_override\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -317,9 +322,13 @@ picochip_return_in_memory(const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   return ((unsigned HOST_WIDE_INT) int_size_in_bytes (type) > 4);\n }\n \n-/* Allow certain command options to be overriden. */\n-void\n-picochip_override_options (void)\n+/* Allow some options to be overriden.  In particular, the 2nd\n+   scheduling pass option is switched off, and a machine dependent\n+   reorganisation ensures that it is run later on, after the second\n+   jump optimisation. */\n+\n+static void\n+picochip_option_override (void)\n {\n   /* If we are optimizing for stack, dont let inliner to inline functions\n      that could potentially increase stack size.*/\n@@ -1760,7 +1769,7 @@ picochip_asm_file_start (void)\n \n   /* Variable tracking should be run after all optimizations which change order\n      of insns.  It also needs a valid CFG.  This can't be done in\n-     picochip_override_options, because flag_var_tracking is finalized after\n+     picochip_option_override, because flag_var_tracking is finalized after\n      that.  */\n   picochip_flag_var_tracking = flag_var_tracking;\n   flag_var_tracking = 0;"}, {"sha": "cf81f59bb53f2f02c73d722541cb5999acb43e30", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for picoChip\n-   Copyright (C) 2001, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n    Contributed by picoChip Designs Ltd. (http://www.picochip.com)\n    Maintained by Daniel Towner (daniel.towner@picochip.com) and\n@@ -84,12 +84,6 @@ extern enum picochip_dfa_type picochip_schedule_type;\n #define TARGET_HAS_MAC_UNIT (picochip_has_mac_unit)\n #define TARGET_HAS_MULTIPLY (picochip_has_mac_unit || picochip_has_mul_unit)\n \n-/* Allow some options to be overriden.  In particular, the 2nd\n-   scheduling pass option is switched off, and a machine dependent\n-   reorganisation ensures that it is run later on, after the second\n-   jump optimisation. */\n-#define OVERRIDE_OPTIONS picochip_override_options()\n-\n #define CAN_DEBUG_WITHOUT_FP 1\n \n #define TARGET_VERSION fprintf(stderr, \"(picoChip)\");"}, {"sha": "8e285decbe65c7899a2ec06abaca296cf13887be", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX version 4.3.\n    Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n-   2007 Free Software Foundation, Inc.\n+   2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n    This file is part of GCC.\n@@ -20,14 +20,8 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n-   get control.  */\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n \n #define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\"}, {"sha": "90d504f61b65776821fb38ea11a6ae5961e7760d", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V5.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n@@ -20,14 +20,8 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n-   get control.  */\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n \n #define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\"}, {"sha": "a0fa21886973acd1dfb31f356d134af493c0f1ae", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V5.2.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n@@ -20,14 +20,8 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n-   get control.  */\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n \n #define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\"}, {"sha": "381e0d662e02d389f234c3e7378947bd679c13a6", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V5.3.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n@@ -20,14 +20,8 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n-   get control.  */\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n \n #define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\"}, {"sha": "4f949cffe6509bc2affa46c21b0b084a33d4780f", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V6.1.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n@@ -20,14 +20,8 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n-   get control.  */\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n \n #define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\"}, {"sha": "62eed2edc28d513ee755407bc50d66f5d338c56f", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -162,10 +162,10 @@ extern enum rs6000_cmodel cmodel;\n \n #ifdef\tRS6000_BI_ARCH\n \n-#undef\tOVERRIDE_OPTIONS\n-#define\tOVERRIDE_OPTIONS \\\n-  rs6000_override_options (((TARGET_DEFAULT ^ target_flags) & MASK_64BIT) \\\n-\t\t\t   ? (char *) 0 : TARGET_CPU_DEFAULT)\n+#undef\tOPTION_TARGET_CPU_DEFAULT\n+#define\tOPTION_TARGET_CPU_DEFAULT \\\n+  (((TARGET_DEFAULT ^ target_flags) & MASK_64BIT) \\\n+   ? (char *) 0 : TARGET_CPU_DEFAULT)\n \n #endif\n "}, {"sha": "724c947f14a0d12073511fc4753cfb2a6b9a39d3", "filename": "gcc/config/rs6000/rs6000-modes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n-   Copyright (C) 2002, 2003, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2007, 2010 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n    This file is part of GCC.\n@@ -19,7 +19,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n /* 128-bit floating point.  ABI_V4 uses IEEE quad, AIX/Darwin\n-   adjust this in rs6000_override_options.  */\n+   adjust this in rs6000_option_override_internal.  */\n FLOAT_MODE (TF, 16, ieee_quad_format);\n \n /* Add any extra modes needed to represent the condition code."}, {"sha": "38dc6937ee498630fd23538dbbfe4a5c78885cd1", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -154,7 +154,6 @@ extern enum direction function_arg_padding (enum machine_mode, const_tree);\n #endif /* TREE_CODE */\n \n extern void optimization_options (int, int);\n-extern void rs6000_override_options (const char *);\n extern int direct_return (void);\n extern int first_reg_to_save (void);\n extern int first_fp_reg_to_save (void);"}, {"sha": "0d95b39f37377718e7f3bee89df9d5000157e299", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1134,6 +1134,7 @@ static rtx altivec_expand_vec_init_builtin (tree, tree, rtx);\n static rtx altivec_expand_vec_set_builtin (tree);\n static rtx altivec_expand_vec_ext_builtin (tree, rtx);\n static int get_element_number (tree, tree);\n+static void rs6000_option_override (void);\n static bool rs6000_handle_option (size_t, const char *, int);\n static void rs6000_parse_tls_size_option (void);\n static void rs6000_parse_yes_no_option (const char *, const char *, int *);\n@@ -1592,6 +1593,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION rs6000_handle_option\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE rs6000_option_override\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   rs6000_builtin_vectorized_function\n@@ -2397,8 +2401,8 @@ darwin_rs6000_override_options (void)\n /* Override command line options.  Mostly we process the processor\n    type and sometimes adjust other TARGET_ options.  */\n \n-void\n-rs6000_override_options (const char *default_cpu)\n+static void\n+rs6000_option_override_internal (const char *default_cpu)\n {\n   size_t i, j;\n   struct rs6000_cpu_select *ptr;\n@@ -3230,6 +3234,15 @@ rs6000_override_options (const char *default_cpu)\n   rs6000_init_hard_regno_mode_ok ();\n }\n \n+/* Implement TARGET_OPTION_OVERRIDE.  On the RS/6000 this is used to\n+   define the target cpu type.  */\n+\n+static void\n+rs6000_option_override (void)\n+{\n+  rs6000_option_override_internal (OPTION_TARGET_CPU_DEFAULT);\n+}\n+\n /* Implement targetm.vectorize.builtin_mask_for_load.  */\n static tree\n rs6000_builtin_mask_for_load (void)\n@@ -7558,7 +7571,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n    controls this instead of DEFAULT_ABI; V.4 targets needing backward\n    compatibility can change DRAFT_V4_STRUCT_RET to override the\n    default, and -m switches get the final word.  See\n-   rs6000_override_options for more details.\n+   rs6000_option_override_internal for more details.\n \n    The PPC32 SVR4 ABI uses IEEE double extended for long double, if 128-bit\n    long double support is enabled.  These values are returned in memory.\n@@ -21969,7 +21982,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n       struct toc_hash_struct *h;\n       void * * found;\n \n-      /* Create toc_hash_table.  This can't be done at OVERRIDE_OPTIONS\n+      /* Create toc_hash_table.  This can't be done at TARGET_OPTION_OVERRIDE\n \t time because GGC is not initialized at that point.  */\n       if (toc_hash_table == NULL)\n \ttoc_hash_table = htab_create_ggc (1021, toc_hash_function,"}, {"sha": "1c2c391cc5e4d79d792dda8ef3f7d3232d5d5e66", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -619,18 +619,8 @@ extern unsigned char rs6000_recip_bits[];\n #define RS6000_RECIP_HIGH_PRECISION_P(MODE) \\\n   ((MODE) == SFmode || (MODE) == V4SFmode || TARGET_RECIP_PRECISION)\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Do not use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.\n-\n-   On the RS/6000 this is used to define the target cpu type.  */\n-\n-#define OVERRIDE_OPTIONS rs6000_override_options (TARGET_CPU_DEFAULT)\n+/* The default CPU for TARGET_OPTION_OVERRIDE.  */\n+#define OPTION_TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT\n \n /* Define this to change the optimizations performed by default.  */\n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE) optimization_options(LEVEL,SIZE)"}, {"sha": "69e9e82f570c7023a8a29eba1084707e2dcfeaf3", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -76,14 +76,8 @@ extern const char *rs6000_tls_size_string; /* For -mtls-size= */\n \n #define SDATA_DEFAULT_SIZE 8\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n-   get control.  */\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n \n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "d3e5ec7718e4d861f91872b06aad8c8b059ce65d", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for IBM S/390.\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    Contributed by Hartmut Penner (hpenner@de.ibm.com)\n@@ -35,7 +35,6 @@ extern bool s390_check_symref_alignment (rtx addr, HOST_WIDE_INT alignment);\n /* Declare functions in s390.c.  */\n \n extern void optimization_options (int, int);\n-extern void override_options (void);\n extern HOST_WIDE_INT s390_initial_elimination_offset (int, int);\n extern void s390_emit_prologue (void);\n extern void s390_emit_epilogue (bool);"}, {"sha": "e07b1d6e6ea2a10e95b03950b404a738796154a0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1555,8 +1555,8 @@ s390_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n     }\n }\n \n-void\n-override_options (void)\n+static void\n+s390_option_override (void)\n {\n   /* Set up function hooks.  */\n   init_machine_status = s390_init_machine_status;\n@@ -10423,6 +10423,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION s390_handle_option\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE s390_option_override\n+\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n "}, {"sha": "8f5a3a09dcf50d1bc3979290ae52fda6103124e2", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for IBM S/390\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-   2007, 2008, 2009 Free Software Foundation, Inc.\n+   2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n                   Ulrich Weigand (uweigand@de.ibm.com).\n                   Andreas Krebbel (Andreas.Krebbel@de.ibm.com)\n@@ -149,9 +149,8 @@ extern int s390_arch_flags;\n #define TARGET_VERSION fprintf (stderr, \" (S/390)\");\n #endif\n \n-/* Hooks to override options.  */\n+/* Hook to override options.  */\n #define OPTIMIZATION_OPTIONS(LEVEL, SIZE) optimization_options(LEVEL, SIZE)\n-#define OVERRIDE_OPTIONS override_options ()\n \n /* Frame pointer is not used for debugging.  */\n #define CAN_DEBUG_WITHOUT_FP"}, {"sha": "70daf74d28db39e90d8f1d87b416fe355a691312", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* score-protos.h for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -59,7 +59,6 @@ extern void score_init_cumulative_args (CUMULATIVE_ARGS *cum,\n extern void score_declare_object (FILE *stream, const char *name,\n                                   const char *directive, const char *fmt, ...);\n extern int score_output_external (FILE *file, tree decl, const char *name);\n-extern void score_override_options (void);\n extern enum reg_class score_secondary_reload_class (enum reg_class rclass,\n                                                     enum machine_mode mode,\n                                                     rtx x);"}, {"sha": "f2b2215f617ed33f820d6f46947a864949f81757", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -51,6 +51,8 @@\n #include \"score3.h\"\n #include \"df.h\"\n \n+static void score_option_override (void);\n+\n #undef  TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START           score_asm_file_start\n \n@@ -67,6 +69,8 @@\n #define TARGET_DEFAULT_TARGET_FLAGS     TARGET_DEFAULT\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION            score_handle_option\n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE          score_option_override\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS\tscore_legitimize_address\n@@ -351,16 +355,16 @@ score_handle_option (size_t code, const char *arg, int value)\n     }\n }\n \n-/* Implement OVERRIDE_OPTIONS macro.  */\n-void\n-score_override_options (void)\n+/* Implement TARGET_OPTION_OVERRIDE hook.  */\n+static void\n+score_option_override (void)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_override_options ();\n+    return score7_option_override ();\n   else if (TARGET_SCORE3)\n-    return score3_override_options ();\n+    return score3_option_override ();\n \n-  return score7_override_options ();\n+  return score7_option_override ();\n }\n \n /* Implement REGNO_REG_CLASS macro.  */"}, {"sha": "621f56ef3c2c666c5704f976c3fcaeb15d4f9591", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* score.h for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Sunnorth.\n \n    This file is part of GCC.\n@@ -98,8 +98,6 @@\n #define TARGET_VERSION \\\n       fprintf (stderr, \"Sunplus S+core rev=%s\", SCORE_GCC_VERSION);\n \n-#define OVERRIDE_OPTIONS       score_override_options ()\n-\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n@@ -235,7 +233,7 @@\n \n    Regarding coprocessor registers: without evidence to the contrary,\n    it's best to assume that each coprocessor register has a unique\n-   use.  This can be overridden, in, e.g., override_options() or\n+   use.  This can be overridden, in, e.g., TARGET_OPTION_OVERRIDE or\n    CONDITIONAL_REGISTER_USAGE should the assumption be inappropriate\n    for a particular target.  */\n "}, {"sha": "d4b171e05d2979b277df75d10fa6674875534ef0", "filename": "gcc/config/score/score3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* score3.c for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Sunnorth\n \n    This file is part of GCC.\n@@ -635,9 +635,9 @@ score3_asm_file_end (void)\n     }\n }\n \n-/* Implement OVERRIDE_OPTIONS macro.  */\n+/* Implement TARGET_OPTION_OVERRIDE hook.  */\n void\n-score3_override_options (void)\n+score3_option_override (void)\n {\n   flag_pic = false;\n   if (!flag_pic)"}, {"sha": "eea460376ace47b59e1c09c8015fba336d4bfb99", "filename": "gcc/config/score/score3.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* score3.h for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Sunnorth\n \n    This file is part of GCC.\n@@ -90,7 +90,7 @@ extern section *score3_select_rtx_section (enum machine_mode mode, rtx x,\n extern bool score3_in_small_data_p (tree decl);\n extern void score3_asm_file_start (void);\n extern void score3_asm_file_end (void);\n-extern void score3_override_options (void);\n+extern void score3_option_override (void);\n extern int score3_reg_class (int regno);\n extern enum reg_class score3_preferred_reload_class (rtx x ATTRIBUTE_UNUSED,\n                                                      enum reg_class rclass);"}, {"sha": "f1c86230d54bee3202e282c3e4cac955a9697fa2", "filename": "gcc/config/score/score7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* score7.c for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Sunnorth\n \n    This file is part of GCC.\n@@ -634,9 +634,9 @@ score7_asm_file_end (void)\n     }\n }\n \n-/* Implement OVERRIDE_OPTIONS macro.  */\n+/* Implement TARGET_OPTION_OVERRIDE hook.  */\n void\n-score7_override_options (void)\n+score7_option_override (void)\n {\n   flag_pic = false;\n   if (!flag_pic)"}, {"sha": "b6d2a5bba05247874eb526492177444737114fe1", "filename": "gcc/config/score/score7.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fscore%2Fscore7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* score7.h for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Sunnorth\n \n    This file is part of GCC.\n@@ -90,7 +90,7 @@ extern section *score7_select_rtx_section (enum machine_mode mode, rtx x,\n extern bool score7_in_small_data_p (tree decl);\n extern void score7_asm_file_start (void);\n extern void score7_asm_file_end (void);\n-extern void score7_override_options (void);\n+extern void score7_option_override (void);\n extern int score7_reg_class (int regno);\n extern enum reg_class score7_preferred_reload_class (rtx x ATTRIBUTE_UNUSED,\n                                                      enum reg_class rclass);"}, {"sha": "d521437c571f5a65da17ee434745aa4ed9b70de9", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -331,7 +331,7 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_ASM_UNALIGNED_SI_OP\n #define TARGET_ASM_UNALIGNED_SI_OP \"\\t.ualong\\t\"\n \n-/* These are NULLed out on non-SH5 in OVERRIDE_OPTIONS.  */\n+/* These are NULLed out on non-SH5 in TARGET_OPTION_OVERRIDE.  */\n #undef TARGET_ASM_UNALIGNED_DI_OP\n #define TARGET_ASM_UNALIGNED_DI_OP \"\\t.uaquad\\t\"\n #undef TARGET_ASM_ALIGNED_DI_OP\n@@ -720,7 +720,7 @@ sh_optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n \ttarget_flags |= MASK_SAVE_ALL_TARGET_REGS;\n     }\n   /* Likewise, we can't meaningfully test TARGET_SH2E / TARGET_IEEE\n-     here, so leave it to OVERRIDE_OPTIONS to set\n+     here, so leave it to TARGET_OPTION_OVERRIDE to set\n     flag_finite_math_only.  We set it to 2 here so we know if the user\n     explicitly requested this to be on or off.  */\n   flag_finite_math_only = 2;"}, {"sha": "36c60533d989c629d68c2ddd369750b270b7577b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -349,6 +349,7 @@ static HOST_WIDE_INT frame_base_offset;\n int sparc_indent_opcode = 0;\n \n static bool sparc_handle_option (size_t, const char *, int);\n+static void sparc_option_override (void);\n static void sparc_init_modes (void);\n static void scan_record_type (tree, int *, int *, int *);\n static int function_arg_slotno (const CUMULATIVE_ARGS *, enum machine_mode,\n@@ -595,6 +596,8 @@ static bool fpu_option_set = false;\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION sparc_handle_option\n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE sparc_option_override\n \n #if TARGET_GNU_TLS && defined(HAVE_AS_SPARC_UA_PCREL)\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n@@ -651,8 +654,8 @@ sparc_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n /* Validate and override various options, and do some machine dependent\n    initialization.  */\n \n-void\n-sparc_override_options (void)\n+static void\n+sparc_option_override (void)\n {\n   static struct code_model {\n     const char *const name;\n@@ -728,6 +731,10 @@ sparc_override_options (void)\n   const struct sparc_cpu_select *sel;\n   int fpu;\n \n+#ifdef SUBTARGET_OVERRIDE_OPTIONS\n+  SUBTARGET_OVERRIDE_OPTIONS;\n+#endif\n+\n #ifndef SPARC_BI_ARCH\n   /* Check for unsupported architecture size.  */\n   if (! TARGET_64BIT != DEFAULT_ARCH32_P)"}, {"sha": "fe07ce5507b42584dc6bc15696c5a68b2a674eda", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -499,10 +499,6 @@ extern enum cmodel sparc_cmodel;\n \n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n-\n-/* Option handling.  */\n-\n-#define OVERRIDE_OPTIONS  sparc_override_options ()\n \f\n /* Mask of all CPU selection flags.  */\n #define MASK_ISA \\"}, {"sha": "4d971a4bbc8e3b3ec8c80da0d2fea0ebb1e5e58e", "filename": "gcc/config/sparc/vxworks.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsparc%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fsparc%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxworks.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for SPARC targeting the VxWorks run time environment.\n-   Copyright (C) 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2007, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -27,14 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#undef OVERRIDE_OPTIONS\n-#define OVERRIDE_OPTIONS\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      VXWORKS_OVERRIDE_OPTIONS;\t\t\t\\\n-      sparc_override_options ();\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC VXWORKS_ADDITIONAL_CPP_SPEC"}, {"sha": "d456979101b31ed9c42e9672b7a35e23f9dda61f", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -21,7 +21,6 @@\n extern void spu_cpu_cpp_builtins (struct cpp_reader * pfile);\n extern void builtin_define_std (const char *);\n extern void spu_optimization_options (int level, int size);\n-extern void spu_override_options (void);\n extern void spu_c_common_override_options (void);\n extern int valid_subreg (rtx op);\n extern void spu_expand_extv (rtx * ops, int unsignedp);"}, {"sha": "dd4201f10471fadc940bbb026779190392487a01", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -149,6 +149,7 @@ static struct spu_builtin_range spu_builtin_range[] = {\n char regs_ever_allocated[FIRST_PSEUDO_REGISTER];\n \n /*  Prototypes and external defs.  */\n+static void spu_option_override (void);\n static void spu_init_builtins (void);\n static tree spu_builtin_decl (unsigned, bool);\n static bool spu_scalar_mode_supported_p (enum machine_mode mode);\n@@ -464,6 +465,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT spu_trampoline_init\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE spu_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n void\n@@ -477,12 +481,9 @@ spu_optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n   flag_rename_registers = 1;\n }\n \n-/* Sometimes certain combinations of command options do not make sense\n-   on a particular target machine.  You can define a macro\n-   OVERRIDE_OPTIONS to take account of this. This macro, if defined, is\n-   executed once just after all the command options have been parsed.  */\n-void\n-spu_override_options (void)\n+/* Implement TARGET_OPTION_OVERRIDE.  */\n+static void\n+spu_option_override (void)\n {\n   /* Small loops will be unpeeled at -O3.  For SPU it is more important\n      to keep code small by default.  */"}, {"sha": "251e2391b689ed3d5443cae795c91ec4398ad77e", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -20,7 +20,6 @@\n \n #define TARGET_VERSION fprintf (stderr, \" (spu %s)\", __DATE__);\n \n-#define OVERRIDE_OPTIONS spu_override_options()\n #define C_COMMON_OVERRIDE_OPTIONS spu_c_common_override_options()\n \n #define OPTIMIZATION_OPTIONS(level,size) \\"}, {"sha": "8e5f4afe650c8d0f4ee8d6571ab583866c97429d", "filename": "gcc/config/vax/elf.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Felf.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,6 @@\n /* Target definitions for GNU compiler for VAX using ELF\n-   Copyright (C) 2002, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Matt Thomas <matt@3am-software.com>\n \n This file is part of GCC.\n@@ -72,13 +73,10 @@ along with GCC; see the file COPYING3.  If not see\n #undef  ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE)\n \n-#undef OVERRIDE_OPTIONS\n-#define OVERRIDE_OPTIONS\t\t\t\t\\\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      /* Do generic VAX overrides.  */\t\t\t\\\n-      override_options ();\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n       /* Turn off function CSE if we're doing PIC.  */\t\\\n       if (flag_pic)\t\t\t\t\t\\\n \tflag_no_function_cse = 1;\t\t\t\\"}, {"sha": "6861260f300816a3c4ef5b77fd3456a38884940a", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler.  VAX version.\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -17,8 +18,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-extern void override_options (void);\n-\n extern bool legitimate_constant_address_p (rtx);\n extern bool legitimate_constant_p (rtx);\n extern bool vax_mode_dependent_address_p (rtx);"}, {"sha": "001a2269030ebd1d7c3eecbbbd30169c168f2bcb", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for VAX.\n    Copyright (C) 1987, 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2004, 2005, 2006, 2007, 2008, 2009\n+   2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n \n+static void vax_option_override (void);\n static bool vax_legitimate_address_p (enum machine_mode, rtx, bool);\n static void vax_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void vax_file_start (void);\n@@ -111,16 +112,23 @@ static int vax_return_pops_args (tree, tree, int);\n #undef TARGET_RETURN_POPS_ARGS\n #define TARGET_RETURN_POPS_ARGS vax_return_pops_args\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE vax_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Set global variables as needed for the options enabled.  */\n \n-void\n-override_options (void)\n+static void\n+vax_option_override (void)\n {\n   /* We're VAX floating point, not IEEE floating point.  */\n   if (TARGET_G_FLOAT)\n     REAL_MODE_FORMAT (DFmode) = &vax_g_format;\n+\n+#ifdef SUBTARGET_OVERRIDE_OPTIONS\n+  SUBTARGET_OVERRIDE_OPTIONS;\n+#endif\n }\n \n /* Generate the assembly code for function entry.  FILE is a stdio"}, {"sha": "bce9666698d8e15b0e75c540f9dcb3321e377199", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  VAX version.\n    Copyright (C) 1987, 1988, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -72,8 +72,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_DEFAULT (MASK_UNIX_ASM)\n #endif\n \n-#define OVERRIDE_OPTIONS override_options ()\n-\n \f\n /* Target machine storage layout */\n "}, {"sha": "7e56bd93a4ce917d8f7ce5a3a886d9aa048c5fca", "filename": "gcc/config/vxworks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Common VxWorks target definitions for GNU compiler.\n-   Copyright (C) 2007, 2008\n+   Copyright (C) 2007, 2008, 2010\n    Free Software Foundation, Inc.\n    Contributed by CodeSourcery, Inc.\n \n@@ -120,7 +120,7 @@ vxworks_emutls_var_init (tree var, tree decl, tree tmpl_addr)\n   return build_constructor (type, v);\n }\n \n-/* Do VxWorks-specific parts of OVERRIDE_OPTIONS.  */\n+/* Do VxWorks-specific parts of TARGET_OPTION_OVERRIDE.  */\n \n void\n vxworks_override_options (void)"}, {"sha": "142fd91e06fd16e6283e9a307eee9a2898b94b42", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Common VxWorks target definitions for GNU compiler.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010\n    Free Software Foundation, Inc.\n    Contributed by Wind River Systems.\n    Rewritten by CodeSourcery, LLC.\n@@ -84,7 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n #define\tVXWORKS_STARTFILE_SPEC \"%{mrtp:%{!shared:-l:crt0.o}}\"\n #define VXWORKS_ENDFILE_SPEC \"\"\n \n-/* Do VxWorks-specific parts of OVERRIDE_OPTIONS.  */\n+/* Do VxWorks-specific parts of TARGET_OPTION_OVERRIDE.  */\n #undef VXWORKS_OVERRIDE_OPTIONS\n #define VXWORKS_OVERRIDE_OPTIONS vxworks_override_options ()\n extern void vxworks_override_options (void);"}, {"sha": "dc1075f07c167d6c09ebfe365ff969f248c0e4fd", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes of target machine for GNU compiler for Xtensa.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n@@ -78,7 +78,6 @@ extern int function_arg_boundary (enum machine_mode, tree);\n \n extern void xtensa_setup_frame_addresses (void);\n extern int xtensa_dbx_register_number (int);\n-extern void override_options (void);\n extern long compute_frame_size (int);\n extern void xtensa_expand_prologue (void);\n extern void order_regs_for_local_alloc (void);"}, {"sha": "0820ab72a4650068d70870481109d692dfd47e00", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -118,6 +118,7 @@ const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER] =\n   ACC_REG,\n };\n \n+static void xtensa_option_override (void);\n static enum internal_test map_test_to_internal_test (enum rtx_code);\n static rtx gen_int_relational (enum rtx_code, rtx, rtx, int *);\n static rtx gen_float_relational (enum rtx_code, rtx, rtx);\n@@ -251,6 +252,9 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT xtensa_trampoline_init\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE xtensa_option_override\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -2096,8 +2100,8 @@ xtensa_return_in_msb (const_tree valtype)\n }\n \n \n-void\n-override_options (void)\n+static void\n+xtensa_option_override (void)\n {\n   int regno;\n   enum machine_mode mode;"}, {"sha": "4a213d0417935ce76f24bd340f339febb4104d52", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of Tensilica's Xtensa target machine for GNU compiler.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n@@ -74,8 +74,6 @@ extern unsigned xtensa_current_frame_size;\n #define HAVE_AS_TLS 0\n #endif\n \n-#define OVERRIDE_OPTIONS override_options ()\n-\n /* Reordering blocks for Xtensa is not a good idea unless the compiler\n    understands the range of conditional branches.  Currently all branch\n    relaxation for Xtensa is handled in the assembler, so GCC cannot do a"}, {"sha": "54f2d35224efee222b4bdacb5094150b365e5bed", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -773,24 +773,6 @@ description should define @code{TARGET_VERSION}.  For example:\n @end smallexample\n @end defmac\n \n-@defmac OVERRIDE_OPTIONS\n-Sometimes certain combinations of command options do not make sense on\n-a particular target machine.  You can define a macro\n-@code{OVERRIDE_OPTIONS} to take account of this.  This macro, if\n-defined, is executed once just after all the command options have been\n-parsed.\n-\n-Don't use this macro to turn on various extra optimizations for\n-@option{-O}.  That is what @code{OPTIMIZATION_OPTIONS} is for.\n-\n-If you need to do something whenever the optimization level is\n-changed via the optimize attribute or pragma, see\n-@code{TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE}\n-\n-This macros is obsolete, new ports should use the target hook\n-@code{TARGET_OPTION_OVERRIDE} instead.\n-@end defmac\n-\n @deftypefn {Target Hook} void TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE (void)\n This target function is similar to the hook @code{TARGET_OPTION_OVERRIDE}\n but is called when the optimize level is changed via an attribute or\n@@ -802,7 +784,8 @@ actions then, you should have @code{TARGET_OPTION_OVERRIDE} call\n @end deftypefn\n \n @defmac C_COMMON_OVERRIDE_OPTIONS\n-This is similar to @code{OVERRIDE_OPTIONS} but is only used in the C\n+This is similar to the @code{TARGET_OPTION_OVERRIDE} hook\n+but is only used in the C\n language frontends (C, Objective-C, C++, Objective-C++) and so can be\n used to alter option flag variables which only exist in those\n frontends."}, {"sha": "3f64388d7a39ee0e567c868ee8d6c9b7441ca897", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -773,24 +773,6 @@ description should define @code{TARGET_VERSION}.  For example:\n @end smallexample\n @end defmac\n \n-@defmac OVERRIDE_OPTIONS\n-Sometimes certain combinations of command options do not make sense on\n-a particular target machine.  You can define a macro\n-@code{OVERRIDE_OPTIONS} to take account of this.  This macro, if\n-defined, is executed once just after all the command options have been\n-parsed.\n-\n-Don't use this macro to turn on various extra optimizations for\n-@option{-O}.  That is what @code{OPTIMIZATION_OPTIONS} is for.\n-\n-If you need to do something whenever the optimization level is\n-changed via the optimize attribute or pragma, see\n-@code{TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE}\n-\n-This macros is obsolete, new ports should use the target hook\n-@code{TARGET_OPTION_OVERRIDE} instead.\n-@end defmac\n-\n @hook TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n This target function is similar to the hook @code{TARGET_OPTION_OVERRIDE}\n but is called when the optimize level is changed via an attribute or\n@@ -802,7 +784,8 @@ actions then, you should have @code{TARGET_OPTION_OVERRIDE} call\n @end deftypefn\n \n @defmac C_COMMON_OVERRIDE_OPTIONS\n-This is similar to @code{OVERRIDE_OPTIONS} but is only used in the C\n+This is similar to the @code{TARGET_OPTION_OVERRIDE} hook\n+but is only used in the C\n language frontends (C, Objective-C, C++, Objective-C++) and so can be\n used to alter option flag variables which only exist in those\n frontends."}, {"sha": "dae7e38ebdb4b7d8181a4c8635f022d9cb72f013", "filename": "gcc/genmodes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,5 +1,5 @@\n /* Generate the machine mode enumeration and associated tables.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1160,7 +1160,7 @@ emit_real_format_for_mode (void)\n      or not the table itself is constant.\n \n      For backward compatibility this table is always writable\n-     (several targets modify it in OVERRIDE_OPTIONS).   FIXME:\n+     (several targets modify it in TARGET_OPTION_OVERRIDE).   FIXME:\n      convert all said targets to use ADJUST_FORMAT instead.  */\n #if 0\n   print_maybe_const_decl (\"const struct real_format *%s\","}, {"sha": "bb7ea99eadb5497b4c61d4fff71a538a73450741", "filename": "gcc/machmode.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -1,7 +1,7 @@\n /* This file contains the definitions and documentation for the\n    machine modes used in the GNU compiler.\n    Copyright (C) 1987, 1992, 1994, 1997, 1998, 2000, 2003, 2004, 2005,\n-   2007  Free Software Foundation, Inc.\n+   2007, 2010  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -191,7 +191,7 @@ INT_MODE (TI, 16);\n    that need 1-word, 2-word, 80-bit, or 128-bit float types respectively.\n \n    These are the IEEE mappings.  They can be overridden with\n-   RESET_FLOAT_FORMAT or at runtime (in OVERRIDE_OPTIONS).  */\n+   RESET_FLOAT_FORMAT or at runtime (in TARGET_OPTION_OVERRIDE).  */\n \n FLOAT_MODE (SF, 4, ieee_single_format);\n FLOAT_MODE (DF, 8, ieee_double_format);"}, {"sha": "460b8a83b8e851824ccd1f8dacade25192922d6d", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -715,7 +715,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED \\\n \tCAN_ELIMINATE TRAMPOLINE_TEMPLATE INITIALIZE_TRAMPOLINE\t\t\\\n \tTRAMPOLINE_ADJUST_ADDRESS STATIC_CHAIN STATIC_CHAIN_INCOMING\t\\\n-\tRETURN_POPS_ARGS UNITS_PER_SIMD_WORD\n+\tRETURN_POPS_ARGS UNITS_PER_SIMD_WORD OVERRIDE_OPTIONS\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "61aae90f9df31293d5b589871e19fd061b48c10a", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -2311,7 +2311,7 @@ DEFHOOK\n (override,\n  \"\",\n  void, (void),\n- default_target_option_override)\n+ hook_void_void)\n \n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX"}, {"sha": "dd22bea6dd65678ceb9fe7772e74ddbd513937b2", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5387660230bce1ec6e40d47e243ff04059e4d77/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=c5387660230bce1ec6e40d47e243ff04059e4d77", "patch": "@@ -919,14 +919,6 @@ default_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n   return rclass;\n }\n \n-void\n-default_target_option_override (void)\n-{\n-#ifdef OVERRIDE_OPTIONS\n-  OVERRIDE_OPTIONS;\n-#endif\n-}\n-\n bool\n default_handle_c_option (size_t code ATTRIBUTE_UNUSED,\n \t\t\t const char *arg ATTRIBUTE_UNUSED,"}]}