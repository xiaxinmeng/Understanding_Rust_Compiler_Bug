{"sha": "ccb7042db8997440b8571405742e49b57787490e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NiNzA0MmRiODk5NzQ0MGI4NTcxNDA1NzQyZTQ5YjU3Nzg3NDkwZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-17T02:28:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-17T02:28:25Z"}, "message": "PR c++/81045 - Wrong type-dependence with auto return type.\n\n\t* pt.c (type_dependent_expression_p): An undeduced auto outside the\n\ttemplate isn't dependent.\n\t* call.c (build_over_call): Instantiate undeduced auto even in a\n\ttemplate.\n\nFrom-SVN: r249323", "tree": {"sha": "ba60737c2834ce10d9f3ebeb73ca2e7043826880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba60737c2834ce10d9f3ebeb73ca2e7043826880"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccb7042db8997440b8571405742e49b57787490e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb7042db8997440b8571405742e49b57787490e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccb7042db8997440b8571405742e49b57787490e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb7042db8997440b8571405742e49b57787490e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8"}], "stats": {"total": 95, "additions": 85, "deletions": 10}, "files": [{"sha": "88e148b1d8f5e617abe62bf71372db42cb09a377", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb7042db8997440b8571405742e49b57787490e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb7042db8997440b8571405742e49b57787490e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ccb7042db8997440b8571405742e49b57787490e", "patch": "@@ -1,5 +1,11 @@\n 2017-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/81045 - Wrong type-dependence with auto return type.\n+\t* pt.c (type_dependent_expression_p): An undeduced auto outside the\n+\ttemplate isn't dependent.\n+\t* call.c (build_over_call): Instantiate undeduced auto even in a\n+\ttemplate.\n+\n \tPR c++/80465 - ICE with generic lambda with noexcept-specifier.\n \t* lambda.c (maybe_add_lambda_conv_op): Keep processing_template_decl\n \tset longer for a generic lambda."}, {"sha": "d1f27dde830c123c5b0a60900c7979972f9bfb6f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb7042db8997440b8571405742e49b57787490e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb7042db8997440b8571405742e49b57787490e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ccb7042db8997440b8571405742e49b57787490e", "patch": "@@ -7584,6 +7584,9 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       const tree *argarray;\n       unsigned int nargs;\n \n+      if (undeduced_auto_decl (fn))\n+\tmark_used (fn, complain);\n+\n       return_type = TREE_TYPE (TREE_TYPE (fn));\n       nargs = vec_safe_length (args);\n       if (first_arg == NULL_TREE)"}, {"sha": "57be0ab43643caf3d88787841f7871115c8389d3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb7042db8997440b8571405742e49b57787490e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb7042db8997440b8571405742e49b57787490e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ccb7042db8997440b8571405742e49b57787490e", "patch": "@@ -24011,17 +24011,35 @@ type_dependent_expression_p (tree expression)\n    return true;\n \n   /* A function or variable template-id is type-dependent if it has any\n-     dependent template arguments.  Note that we only consider the innermost\n-     template arguments here, since those are the ones that come from the\n-     template-id; the template arguments for the enclosing class do not make it\n-     type-dependent, they only make a member function value-dependent.  */\n+     dependent template arguments.  */\n   if (VAR_OR_FUNCTION_DECL_P (expression)\n       && DECL_LANG_SPECIFIC (expression)\n-      && DECL_TEMPLATE_INFO (expression)\n-      && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (expression))\n-      && (any_dependent_template_arguments_p\n-\t  (INNERMOST_TEMPLATE_ARGS (DECL_TI_ARGS (expression)))))\n-    return true;\n+      && DECL_TEMPLATE_INFO (expression))\n+    {\n+      /* Consider the innermost template arguments, since those are the ones\n+\t that come from the template-id; the template arguments for the\n+\t enclosing class do not make it type-dependent unless they are used in\n+\t the type of the decl.  */\n+      if (PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (expression))\n+\t  && (any_dependent_template_arguments_p\n+\t      (INNERMOST_TEMPLATE_ARGS (DECL_TI_ARGS (expression)))))\n+\treturn true;\n+\n+      /* Otherwise, if the decl isn't from a dependent scope, it can't be\n+\t type-dependent.  Checking this is important for functions with auto\n+\t return type, which looks like a dependent type.  */\n+      if (TREE_CODE (expression) == FUNCTION_DECL\n+\t  && (!DECL_CLASS_SCOPE_P (expression)\n+\t      || !dependent_type_p (DECL_CONTEXT (expression)))\n+\t  && (!DECL_FRIEND_CONTEXT (expression)\n+\t      || !dependent_type_p (DECL_FRIEND_CONTEXT (expression)))\n+\t  && !DECL_LOCAL_FUNCTION_P (expression))\n+\t{\n+\t  gcc_assert (!dependent_type_p (TREE_TYPE (expression))\n+\t\t      || undeduced_auto_decl (expression));\n+\t  return false;\n+\t}\n+    }\n \n   /* Always dependent, on the number of arguments if nothing else.  */\n   if (TREE_CODE (expression) == EXPR_PACK_EXPANSION)"}, {"sha": "c019d9ef5836bda75993cb68f8d8748ba6a61b0c", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb7042db8997440b8571405742e49b57787490e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb7042db8997440b8571405742e49b57787490e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C?ref=ccb7042db8997440b8571405742e49b57787490e", "patch": "@@ -31,7 +31,7 @@ F<T>::bar (const G &)\n {\n   auto s = I;\n   typedef decltype (s) L;\n-  auto u =[&](L) { auto t = foo (J::K (), 0); }; // { dg-error \"25:'void t' has incomplete type\" }\n+  auto u =[&](L) { auto t = foo (J::K (), 0); }; // { dg-error \"25:declared void\" }\n }\n struct B {\n   typedef int G;"}, {"sha": "b4ba29eb200e9af99ccfe843f67ad0f4cac06322", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn39.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb7042db8997440b8571405742e49b57787490e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb7042db8997440b8571405742e49b57787490e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn39.C?ref=ccb7042db8997440b8571405742e49b57787490e", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/81045\n+// { dg-do compile { target c++14 } }\n+\n+template<typename T> class vectorIterator;\n+\n+template<typename T> class vector {\n+  public:\n+  auto get(unsigned int i) { return data[i]; }\n+\n+  auto begin() { return vectorIterator<T>{*this, 0}; }\n+  auto end() { return vectorIterator<T>{*this, 10}; }\n+\n+  private:\n+  T data[10] = {};\n+};\n+\n+template<typename T> class vectorIterator {\n+  public:\n+  vectorIterator(vector<T>& self, unsigned int offset) : self(self), offset(offset) {}\n+\n+  auto operator*() -> T& { return self.get(offset); }\n+  auto operator!=(const vectorIterator& source) -> bool { return offset != source.offset; }\n+  auto operator++() -> vectorIterator& { ++offset; return *this; }\n+\n+  private:\n+  vector<T>& self;\n+  unsigned int offset;\n+};\n+\n+class Object {\n+  public:\n+  template<typename T> auto cast() -> T {\n+    return T();\n+  }\n+};\n+\n+class Group : public Object {\n+  public:\n+  template<typename T = Object> auto objects() const -> void {\n+    vector<Object> easyObjects;\n+    for(auto obj : easyObjects) {\n+      auto casted = obj.cast<T>();\n+    }\n+  }\n+};\n+\n+int main() { return 0; }\n+"}]}