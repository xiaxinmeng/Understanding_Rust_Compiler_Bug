{"sha": "3428cb9fcb371855b04fd7b796cd98819a31047d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyOGNiOWZjYjM3MTg1NWIwNGZkN2I3OTZjZDk4ODE5YTMxMDQ3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T08:49:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T08:49:10Z"}, "message": "[multiple changes]\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* switch-c.ads, switch-c.adb, sem_ch13.adb: Minor reformatting.\n\t* sem_ch12.adb: Add pragmas Assert and Check to previous change.\n\n2010-06-17  Gary Dismukes  <dismukes@adacore.com>\n\n\t* layout.adb (Layout_Type): Broaden test for setting an array type's\n\tComponent_Size to include all scalar types, not just discrete types\n\t(components of real types were missed).\n\t* sem_ch3.adb (Constrain_Index): Add missing setting of First_Literal\n\ton the itype created for an index (consistent with Make_Index and\n\tavoids possible Assert_Failures).\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* atree.ads, atree.adb: Add 6-parameter version of Ekind_In\n\t* einfo.adb: Minor code reformatting (use Ekind_In)\n\nFrom-SVN: r160887", "tree": {"sha": "066e1adebcc7146bf71fc691cc7a5d509266e72e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/066e1adebcc7146bf71fc691cc7a5d509266e72e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3428cb9fcb371855b04fd7b796cd98819a31047d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3428cb9fcb371855b04fd7b796cd98819a31047d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3428cb9fcb371855b04fd7b796cd98819a31047d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3428cb9fcb371855b04fd7b796cd98819a31047d/comments", "author": null, "committer": null, "parents": [{"sha": "547c595499a0ff69e2d4d2b77cd1cb9ada430f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547c595499a0ff69e2d4d2b77cd1cb9ada430f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/547c595499a0ff69e2d4d2b77cd1cb9ada430f0e"}], "stats": {"total": 479, "additions": 222, "deletions": 257}, "files": [{"sha": "da0a9db84b4dcf81ea3680c5d1a2bbabb4cd1904", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -1,3 +1,22 @@\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* switch-c.ads, switch-c.adb, sem_ch13.adb: Minor reformatting.\n+\t* sem_ch12.adb: Add pragmas Assert and Check to previous change.\n+\n+2010-06-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* layout.adb (Layout_Type): Broaden test for setting an array type's\n+\tComponent_Size to include all scalar types, not just discrete types\n+\t(components of real types were missed).\n+\t* sem_ch3.adb (Constrain_Index): Add missing setting of First_Literal\n+\ton the itype created for an index (consistent with Make_Index and\n+\tavoids possible Assert_Failures).\n+\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.ads, atree.adb: Add 6-parameter version of Ekind_In\n+\t* einfo.adb: Minor code reformatting (use Ekind_In)\n+\n 2010-06-17  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_warn.adb (Test_Ref): Abandon scan if access subprogram parameter"}, {"sha": "2a8b221fece28235e8e87b54dbbef06309675f60", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -822,6 +822,24 @@ package body Atree is\n              T = V5;\n    end Ekind_In;\n \n+   function Ekind_In\n+     (T  : Entity_Kind;\n+      V1 : Entity_Kind;\n+      V2 : Entity_Kind;\n+      V3 : Entity_Kind;\n+      V4 : Entity_Kind;\n+      V5 : Entity_Kind;\n+      V6 : Entity_Kind) return Boolean\n+   is\n+   begin\n+      return T = V1 or else\n+             T = V2 or else\n+             T = V3 or else\n+             T = V4 or else\n+             T = V5 or else\n+             T = V6;\n+   end Ekind_In;\n+\n    function Ekind_In\n      (E  : Entity_Id;\n       V1 : Entity_Kind;\n@@ -864,6 +882,19 @@ package body Atree is\n       return Ekind_In (Ekind (E), V1, V2, V3, V4, V5);\n    end Ekind_In;\n \n+   function Ekind_In\n+     (E  : Entity_Id;\n+      V1 : Entity_Kind;\n+      V2 : Entity_Kind;\n+      V3 : Entity_Kind;\n+      V4 : Entity_Kind;\n+      V5 : Entity_Kind;\n+      V6 : Entity_Kind) return Boolean\n+   is\n+   begin\n+      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6);\n+   end Ekind_In;\n+\n    ------------------\n    -- Error_Posted --\n    ------------------"}, {"sha": "7408b0e48fea8d7e0fd2377b4d31d7ed5e7c6e4c", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -656,6 +656,15 @@ package Atree is\n       V4 : Entity_Kind;\n       V5 : Entity_Kind) return Boolean;\n \n+   function Ekind_In\n+     (E  : Entity_Id;\n+      V1 : Entity_Kind;\n+      V2 : Entity_Kind;\n+      V3 : Entity_Kind;\n+      V4 : Entity_Kind;\n+      V5 : Entity_Kind;\n+      V6 : Entity_Kind) return Boolean;\n+\n    function Ekind_In\n      (T  : Entity_Kind;\n       V1 : Entity_Kind;\n@@ -682,6 +691,15 @@ package Atree is\n       V4 : Entity_Kind;\n       V5 : Entity_Kind) return Boolean;\n \n+   function Ekind_In\n+     (T  : Entity_Kind;\n+      V1 : Entity_Kind;\n+      V2 : Entity_Kind;\n+      V3 : Entity_Kind;\n+      V4 : Entity_Kind;\n+      V5 : Entity_Kind;\n+      V6 : Entity_Kind) return Boolean;\n+\n    pragma Inline (Ekind_In);\n    --  Inline all above functions\n "}, {"sha": "c3edd69c36f42aa92bd8157fc884daa3d71c2110", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 137, "deletions": 244, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -559,9 +559,7 @@ package body Einfo is\n    function Actual_Subtype (Id : E) return E is\n    begin\n       pragma Assert\n-         (Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_Variable\n-           or else Ekind (Id) = E_Generic_In_Out_Parameter\n+         (Ekind_In (Id, E_Constant, E_Variable, E_Generic_In_Out_Parameter)\n            or else Is_Formal (Id));\n       return Node17 (Id);\n    end Actual_Subtype;\n@@ -582,10 +580,10 @@ package body Einfo is\n    begin\n       pragma Assert (Is_Type (Id)\n                        or else Is_Formal (Id)\n-                       or else Ekind (Id) = E_Loop_Parameter\n-                       or else Ekind (Id) = E_Constant\n-                       or else Ekind (Id) = E_Exception\n-                       or else Ekind (Id) = E_Variable);\n+                       or else Ekind_In (Id, E_Loop_Parameter,\n+                                             E_Constant,\n+                                             E_Exception,\n+                                             E_Variable));\n       return Uint14 (Id);\n    end Alignment;\n \n@@ -626,8 +624,7 @@ package body Einfo is\n \n    function Body_Entity (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Package or else Ekind (Id) = E_Generic_Package);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Generic_Package));\n       return Node19 (Id);\n    end Body_Entity;\n \n@@ -664,24 +661,19 @@ package body Einfo is\n \n    function Cloned_Subtype (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Record_Subtype\n-           or else\n-         Ekind (Id) = E_Class_Wide_Subtype);\n+      pragma Assert (Ekind_In (Id, E_Record_Subtype, E_Class_Wide_Subtype));\n       return Node16 (Id);\n    end Cloned_Subtype;\n \n    function Component_Bit_Offset (Id : E) return U is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       return Uint11 (Id);\n    end Component_Bit_Offset;\n \n    function Component_Clause (Id : E) return N is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       return Node13 (Id);\n    end Component_Clause;\n \n@@ -875,17 +867,14 @@ package body Einfo is\n \n    function DT_Position (Id : E) return U is\n    begin\n-      pragma Assert\n-        ((Ekind (Id) = E_Function\n-            or else Ekind (Id) = E_Procedure)\n-          and then Present (DTC_Entity (Id)));\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+                       and then Present (DTC_Entity (Id)));\n       return Uint15 (Id);\n    end DT_Position;\n \n    function DTC_Entity (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       return Node16 (Id);\n    end DTC_Entity;\n \n@@ -986,11 +975,11 @@ package body Einfo is\n    function Equivalent_Type (Id : E) return E is\n    begin\n       pragma Assert\n-        (Ekind (Id) = E_Class_Wide_Subtype                         or else\n-         Ekind (Id) = E_Access_Protected_Subprogram_Type           or else\n-         Ekind (Id) = E_Anonymous_Access_Protected_Subprogram_Type or else\n-         Ekind (Id) = E_Access_Subprogram_Type                     or else\n-         Ekind (Id) = E_Exception_Type);\n+        (Ekind_In (Id, E_Class_Wide_Subtype,\n+                       E_Access_Protected_Subprogram_Type,\n+                       E_Anonymous_Access_Protected_Subprogram_Type,\n+                       E_Access_Subprogram_Type,\n+                       E_Exception_Type));\n       return Node18 (Id);\n    end Equivalent_Type;\n \n@@ -1026,9 +1015,9 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-          or else Ekind (Id) = E_Entry_Family\n-          or else Ekind (Id) = E_Subprogram_Body\n-          or else Ekind (Id) = E_Subprogram_Type);\n+          or else Ekind_In (Id, E_Entry_Family,\n+                                E_Subprogram_Body,\n+                                E_Subprogram_Type));\n       return Node28 (Id);\n    end Extra_Formals;\n \n@@ -1074,15 +1063,13 @@ package body Einfo is\n \n    function First_Optional_Parameter (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       return Node14 (Id);\n    end First_Optional_Parameter;\n \n    function First_Private_Entity (Id : E) return E is\n    begin\n-      pragma Assert (Ekind (Id) = E_Package\n-                       or else Ekind (Id) = E_Generic_Package\n+      pragma Assert (Ekind_In (Id, E_Package, E_Generic_Package)\n                        or else Ekind (Id) in Concurrent_Kind);\n       return Node16 (Id);\n    end First_Private_Entity;\n@@ -1278,8 +1265,7 @@ package body Einfo is\n \n    function Has_Missing_Return (Id : E) return B is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function or else Ekind (Id) = E_Generic_Function);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Generic_Function));\n       return Flag142 (Id);\n    end Has_Missing_Return;\n \n@@ -1499,9 +1485,7 @@ package body Einfo is\n    function Has_Up_Level_Access (Id : E) return B is\n    begin\n       pragma Assert\n-        (Ekind (Id) = E_Variable\n-          or else Ekind (Id) = E_Constant\n-          or else Ekind (Id) = E_Loop_Parameter);\n+        (Ekind_In (Id, E_Variable, E_Constant, E_Loop_Parameter));\n       return Flag215 (Id);\n    end Has_Up_Level_Access;\n \n@@ -1528,9 +1512,7 @@ package body Einfo is\n \n    function Implemented_By_Entry (Id : E) return B is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function\n-           or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       return Flag232 (Id);\n    end Implemented_By_Entry;\n \n@@ -1615,8 +1597,7 @@ package body Einfo is\n \n    function Is_Asynchronous (Id : E) return B is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Procedure or else Is_Type (Id));\n+      pragma Assert (Ekind (Id) = E_Procedure or else Is_Type (Id));\n       return Flag81 (Id);\n    end Is_Asynchronous;\n \n@@ -1632,8 +1613,7 @@ package body Einfo is\n \n    function Is_Called (Id : E) return B is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Procedure or else Ekind (Id) = E_Function);\n+      pragma Assert (Ekind_In (Id, E_Procedure, E_Function));\n       return Flag102 (Id);\n    end Is_Called;\n \n@@ -1744,10 +1724,7 @@ package body Einfo is\n \n    function Is_For_Access_Subtype (Id : E) return B is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Record_Subtype\n-          or else\n-         Ekind (Id) = E_Private_Subtype);\n+      pragma Assert (Ekind_In (Id, E_Record_Subtype, E_Private_Subtype));\n       return Flag118 (Id);\n    end Is_For_Access_Subtype;\n \n@@ -1937,15 +1914,13 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-         or else Ekind (Id) = E_Generic_Function\n-         or else Ekind (Id) = E_Generic_Procedure);\n+         or else Ekind_In (Id, E_Generic_Function, E_Generic_Procedure));\n       return Flag218 (Id);\n    end Is_Primitive;\n \n    function Is_Primitive_Wrapper (Id : E) return B is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function\n-        or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       return Flag195 (Id);\n    end Is_Primitive_Wrapper;\n \n@@ -1962,8 +1937,7 @@ package body Einfo is\n \n    function Is_Private_Primitive (Id : E) return B is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function\n-        or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       return Flag245 (Id);\n    end Is_Private_Primitive;\n \n@@ -2231,8 +2205,7 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-          or else Ekind (Id) = E_Subprogram_Type\n-          or else Ekind (Id) = E_Entry_Family);\n+          or else Ekind_In (Id, E_Subprogram_Type, E_Entry_Family));\n       return Flag22 (Id);\n    end Needs_No_Actuals;\n \n@@ -2283,22 +2256,19 @@ package body Einfo is\n \n    function Normalized_First_Bit (Id : E) return U is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       return Uint8 (Id);\n    end Normalized_First_Bit;\n \n    function Normalized_Position (Id : E) return U is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       return Uint14 (Id);\n    end Normalized_Position;\n \n    function Normalized_Position_Max (Id : E) return U is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       return Uint10 (Id);\n    end Normalized_Position_Max;\n \n@@ -2317,18 +2287,14 @@ package body Einfo is\n    function Optimize_Alignment_Space (Id : E) return B is\n    begin\n       pragma Assert\n-        (Is_Type (Id)\n-           or else Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_Variable);\n+        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n       return Flag241 (Id);\n    end Optimize_Alignment_Space;\n \n    function Optimize_Alignment_Time (Id : E) return B is\n    begin\n       pragma Assert\n-        (Is_Type (Id)\n-           or else Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_Variable);\n+        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n       return Flag242 (Id);\n    end Optimize_Alignment_Time;\n \n@@ -2340,10 +2306,7 @@ package body Einfo is\n \n    function Original_Record_Component (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Void\n-           or else Ekind (Id) = E_Component\n-           or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Void, E_Component, E_Discriminant));\n       return Node22 (Id);\n    end Original_Record_Component;\n \n@@ -2359,10 +2322,7 @@ package body Einfo is\n \n    function Package_Instantiation (Id : E) return N is\n    begin\n-      pragma Assert\n-        (False\n-           or else Ekind (Id) = E_Generic_Package\n-           or else Ekind (Id) = E_Package);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Generic_Package));\n       return Node26 (Id);\n    end Package_Instantiation;\n \n@@ -2398,8 +2358,7 @@ package body Einfo is\n \n    function Prival_Link (Id : E) return E is\n    begin\n-      pragma Assert (Ekind (Id) = E_Constant\n-        or else Ekind (Id) = E_Variable);\n+      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n       return Node20 (Id);\n    end Prival_Link;\n \n@@ -2429,10 +2388,8 @@ package body Einfo is\n \n    function Protection_Object (Id : E) return E is\n    begin\n-      pragma Assert (Ekind (Id) = E_Entry\n-        or else Ekind (Id) = E_Entry_Family\n-        or else Ekind (Id) = E_Function\n-        or else Ekind (Id) = E_Procedure);\n+      pragma Assert\n+        (Ekind_In (Id, E_Entry, E_Entry_Family, E_Function, E_Procedure));\n       return Node23 (Id);\n    end Protection_Object;\n \n@@ -2476,21 +2433,19 @@ package body Einfo is\n \n    function Related_Expression (Id : E) return N is\n    begin\n-      pragma Assert (Ekind (Id) = E_Constant or else Ekind (Id) = E_Variable);\n+      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n       return Node24 (Id);\n    end Related_Expression;\n \n    function Related_Instance (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Package or else Ekind (Id) = E_Package_Body);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Package_Body));\n       return Node15 (Id);\n    end Related_Instance;\n \n    function Related_Type (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Constant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Constant));\n       return Node26 (Id);\n    end Related_Type;\n \n@@ -2576,8 +2531,7 @@ package body Einfo is\n \n    function Shadow_Entities (Id : E) return S is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Package or else Ekind (Id) = E_Generic_Package);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Generic_Package));\n       return List14 (Id);\n    end Shadow_Entities;\n \n@@ -2589,7 +2543,7 @@ package body Einfo is\n \n    function Size_Check_Code (Id : E) return N is\n    begin\n-      pragma Assert (Ekind (Id) = E_Constant or else Ekind (Id) = E_Variable);\n+      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n       return Node19 (Id);\n    end Size_Check_Code;\n \n@@ -2611,8 +2565,7 @@ package body Einfo is\n \n    function Spec_Entity (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Package_Body or else Is_Formal (Id));\n+      pragma Assert (Ekind (Id) = E_Package_Body or else Is_Formal (Id));\n       return Node19 (Id);\n    end Spec_Entity;\n \n@@ -2753,9 +2706,8 @@ package body Einfo is\n \n    function Wrapped_Entity (Id : E) return E is\n    begin\n-      pragma Assert ((Ekind (Id) = E_Function\n-          or else Ekind (Id) = E_Procedure)\n-        and then Is_Primitive_Wrapper (Id));\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+                       and then Is_Primitive_Wrapper (Id));\n       return Node27 (Id);\n    end Wrapped_Entity;\n \n@@ -2963,8 +2915,7 @@ package body Einfo is\n \n    function Is_Signed_Integer_Type              (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Signed_Integer_Kind;\n+      return Ekind (Id) in Signed_Integer_Kind;\n    end Is_Signed_Integer_Type;\n \n    function Is_Subprogram                       (Id : E) return B is\n@@ -3022,9 +2973,7 @@ package body Einfo is\n    procedure Set_Actual_Subtype (Id : E; V : E) is\n    begin\n       pragma Assert\n-         (Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_Variable\n-           or else Ekind (Id) = E_Generic_In_Out_Parameter\n+         (Ekind_In (Id, E_Constant, E_Variable, E_Generic_In_Out_Parameter)\n            or else Is_Formal (Id));\n       Set_Node17 (Id, V);\n    end Set_Actual_Subtype;\n@@ -3044,11 +2993,11 @@ package body Einfo is\n    procedure Set_Alignment (Id : E; V : U) is\n    begin\n       pragma Assert (Is_Type (Id)\n-                       or else Is_Formal (Id)\n-                       or else Ekind (Id) = E_Loop_Parameter\n-                       or else Ekind (Id) = E_Constant\n-                       or else Ekind (Id) = E_Exception\n-                       or else Ekind (Id) = E_Variable);\n+                      or else Is_Formal (Id)\n+                      or else Ekind_In (Id, E_Loop_Parameter,\n+                                            E_Constant,\n+                                            E_Exception,\n+                                            E_Variable));\n       Set_Uint14 (Id, V);\n    end Set_Alignment;\n \n@@ -3066,17 +3015,16 @@ package body Einfo is\n \n    procedure Set_Body_Entity (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Package or else Ekind (Id) = E_Generic_Package);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Generic_Package));\n       Set_Node19 (Id, V);\n    end Set_Body_Entity;\n \n    procedure Set_Body_Needed_For_SAL (Id : E; V : B := True) is\n    begin\n       pragma Assert\n         (Ekind (Id) = E_Package\n-           or else Is_Subprogram (Id)\n-           or else Is_Generic_Unit (Id));\n+          or else Is_Subprogram (Id)\n+          or else Is_Generic_Unit (Id));\n       Set_Flag40 (Id, V);\n    end Set_Body_Needed_For_SAL;\n \n@@ -3104,23 +3052,19 @@ package body Einfo is\n \n    procedure Set_Cloned_Subtype (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Record_Subtype\n-         or else Ekind (Id) = E_Class_Wide_Subtype);\n+      pragma Assert (Ekind_In (Id, E_Record_Subtype, E_Class_Wide_Subtype));\n       Set_Node16 (Id, V);\n    end Set_Cloned_Subtype;\n \n    procedure Set_Component_Bit_Offset (Id : E; V : U) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       Set_Uint11 (Id, V);\n    end Set_Component_Bit_Offset;\n \n    procedure Set_Component_Clause (Id : E; V : N) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       Set_Node13 (Id, V);\n    end Set_Component_Clause;\n \n@@ -3225,9 +3169,7 @@ package body Einfo is\n    procedure Set_Delay_Subprogram_Descriptors (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Is_Subprogram (Id)\n-           or else Ekind (Id) = E_Package\n-           or else Ekind (Id) = E_Package_Body);\n+        (Is_Subprogram (Id) or else Ekind_In (Id, E_Package, E_Package_Body));\n       Set_Flag50 (Id, V);\n    end Set_Delay_Subprogram_Descriptors;\n \n@@ -3320,14 +3262,13 @@ package body Einfo is\n \n    procedure Set_DT_Position (Id : E; V : U) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Uint15 (Id, V);\n    end Set_DT_Position;\n \n    procedure Set_DTC_Entity (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Node16 (Id, V);\n    end Set_DTC_Entity;\n \n@@ -3428,12 +3369,12 @@ package body Einfo is\n    procedure Set_Equivalent_Type (Id : E; V : E) is\n    begin\n       pragma Assert\n-        (Ekind (Id) = E_Class_Wide_Type                            or else\n-         Ekind (Id) = E_Class_Wide_Subtype                         or else\n-         Ekind (Id) = E_Access_Protected_Subprogram_Type           or else\n-         Ekind (Id) = E_Anonymous_Access_Protected_Subprogram_Type or else\n-         Ekind (Id) = E_Access_Subprogram_Type                     or else\n-         Ekind (Id) = E_Exception_Type);\n+        (Ekind_In (Id, E_Class_Wide_Type,\n+                       E_Class_Wide_Subtype,\n+                       E_Access_Protected_Subprogram_Type,\n+                       E_Anonymous_Access_Protected_Subprogram_Type,\n+                       E_Access_Subprogram_Type,\n+                       E_Exception_Type));\n       Set_Node18 (Id, V);\n    end Set_Equivalent_Type;\n \n@@ -3469,9 +3410,9 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-          or else Ekind (Id) = E_Entry_Family\n-          or else Ekind (Id) = E_Subprogram_Body\n-          or else Ekind (Id) = E_Subprogram_Type);\n+          or else Ekind_In (Id, E_Entry_Family,\n+                                E_Subprogram_Body,\n+                                E_Subprogram_Type));\n       Set_Node28 (Id, V);\n    end Set_Extra_Formals;\n \n@@ -3519,16 +3460,14 @@ package body Einfo is\n \n    procedure Set_First_Optional_Parameter (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Node14 (Id, V);\n    end Set_First_Optional_Parameter;\n \n    procedure Set_First_Private_Entity (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Package\n-                       or else Ekind (Id) = E_Generic_Package\n-                       or else Ekind (Id) in Concurrent_Kind);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Generic_Package)\n+                      or else Ekind (Id) in Concurrent_Kind);\n       Set_Node16 (Id, V);\n    end Set_First_Private_Entity;\n \n@@ -3546,7 +3485,7 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Type (Id)\n-         or else Ekind (Id) = E_Package);\n+          or else Ekind (Id) = E_Package);\n       Set_Flag159 (Id, V);\n    end Set_From_With_Type;\n \n@@ -3713,8 +3652,7 @@ package body Einfo is\n \n    procedure Set_Has_Initial_Value (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Variable or else Ekind (Id) = E_Out_Parameter);\n+      pragma Assert (Ekind_In (Id, E_Variable, E_Out_Parameter));\n       Set_Flag219 (Id, V);\n    end Set_Has_Initial_Value;\n \n@@ -3731,8 +3669,7 @@ package body Einfo is\n \n    procedure Set_Has_Missing_Return (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function or else Ekind (Id) = E_Generic_Function);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Generic_Function));\n       Set_Flag142 (Id, V);\n    end Set_Has_Missing_Return;\n \n@@ -3743,10 +3680,7 @@ package body Einfo is\n \n    procedure Set_Has_Up_Level_Access (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Variable\n-          or else Ekind (Id) = E_Constant\n-          or else Ekind (Id) = E_Loop_Parameter);\n+      pragma Assert (Ekind_In (Id, E_Variable, E_Constant, E_Loop_Parameter));\n       Set_Flag215 (Id, V);\n    end Set_Has_Up_Level_Access;\n \n@@ -3989,9 +3923,7 @@ package body Einfo is\n \n    procedure Set_Implemented_By_Entry (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function\n-           or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Flag232 (Id, V);\n    end Set_Implemented_By_Entry;\n \n@@ -4006,8 +3938,7 @@ package body Einfo is\n       pragma Assert\n         (Is_Internal (Id)\n           and then Is_Hidden (Id)\n-          and then (Ekind (Id) = E_Procedure\n-                      or else Ekind (Id) = E_Function));\n+          and then (Ekind_In (Id, E_Procedure, E_Function)));\n       Set_Node25 (Id, V);\n    end Set_Interface_Alias;\n \n@@ -4100,8 +4031,7 @@ package body Einfo is\n \n    procedure Set_Is_Called (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Procedure or else Ekind (Id) = E_Function);\n+      pragma Assert (Ekind_In (Id, E_Procedure, E_Function));\n       Set_Flag102 (Id, V);\n    end Set_Is_Called;\n \n@@ -4224,10 +4154,7 @@ package body Einfo is\n \n    procedure Set_Is_For_Access_Subtype (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Record_Subtype\n-          or else\n-         Ekind (Id) = E_Private_Subtype);\n+      pragma Assert (Ekind_In (Id, E_Record_Subtype, E_Private_Subtype));\n       Set_Flag118 (Id, V);\n    end Set_Is_For_Access_Subtype;\n \n@@ -4288,12 +4215,12 @@ package body Einfo is\n    procedure Set_Is_Interface (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind (Id) = E_Record_Type\n-          or else Ekind (Id) = E_Record_Subtype\n-          or else Ekind (Id) = E_Record_Type_With_Private\n-          or else Ekind (Id) = E_Record_Subtype_With_Private\n-          or else Ekind (Id) = E_Class_Wide_Type\n-          or else Ekind (Id) = E_Class_Wide_Subtype);\n+        (Ekind_In (Id, E_Record_Type,\n+                       E_Record_Subtype,\n+                       E_Record_Type_With_Private,\n+                       E_Record_Subtype_With_Private,\n+                       E_Class_Wide_Type,\n+                       E_Class_Wide_Subtype));\n       Set_Flag186 (Id, V);\n    end Set_Is_Interface;\n \n@@ -4428,15 +4355,13 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-         or else Ekind (Id) = E_Generic_Function\n-         or else Ekind (Id) = E_Generic_Procedure);\n+          or else Ekind_In (Id, E_Generic_Function, E_Generic_Procedure));\n       Set_Flag218 (Id, V);\n    end Set_Is_Primitive;\n \n    procedure Set_Is_Primitive_Wrapper (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function\n-        or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Flag195 (Id, V);\n    end Set_Is_Primitive_Wrapper;\n \n@@ -4453,8 +4378,7 @@ package body Einfo is\n \n    procedure Set_Is_Private_Primitive (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function\n-        or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Flag245 (Id, V);\n    end Set_Is_Private_Primitive;\n \n@@ -4521,11 +4445,11 @@ package body Einfo is\n    procedure Set_Is_Statically_Allocated (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind (Id) = E_Exception\n-          or else Ekind (Id) = E_Variable\n-          or else Ekind (Id) = E_Constant\n-          or else Is_Type (Id)\n-          or else Ekind (Id) = E_Void);\n+        (Is_Type (Id)\n+          or else Ekind_In (Id, E_Exception,\n+                                E_Variable,\n+                                E_Constant,\n+                                E_Void));\n       Set_Flag28 (Id, V);\n    end Set_Is_Statically_Allocated;\n \n@@ -4537,9 +4461,7 @@ package body Einfo is\n \n    procedure Set_Is_Tag (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component\n-          or else Ekind (Id) = E_Constant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Constant));\n       Set_Flag78 (Id, V);\n    end Set_Is_Tag;\n \n@@ -4728,8 +4650,7 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-          or else Ekind (Id) = E_Subprogram_Type\n-          or else Ekind (Id) = E_Entry_Family);\n+          or else Ekind_In (Id, E_Subprogram_Type, E_Entry_Family));\n       Set_Flag22 (Id, V);\n    end Set_Needs_No_Actuals;\n \n@@ -4752,9 +4673,7 @@ package body Einfo is\n    procedure Set_No_Return (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (V = False\n-          or else Ekind (Id) = E_Procedure\n-          or else Ekind (Id) = E_Generic_Procedure);\n+        (V = False or else Ekind_In (Id, E_Procedure, E_Generic_Procedure));\n       Set_Flag113 (Id, V);\n    end Set_No_Return;\n \n@@ -4786,22 +4705,19 @@ package body Einfo is\n \n    procedure Set_Normalized_First_Bit (Id : E; V : U) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       Set_Uint8 (Id, V);\n    end Set_Normalized_First_Bit;\n \n    procedure Set_Normalized_Position (Id : E; V : U) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       Set_Uint14 (Id, V);\n    end Set_Normalized_Position;\n \n    procedure Set_Normalized_Position_Max (Id : E; V : U) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n       Set_Uint10 (Id, V);\n    end Set_Normalized_Position_Max;\n \n@@ -4821,18 +4737,14 @@ package body Einfo is\n    procedure Set_Optimize_Alignment_Space (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Is_Type (Id)\n-           or else Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_Variable);\n+        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n       Set_Flag241 (Id, V);\n    end Set_Optimize_Alignment_Space;\n \n    procedure Set_Optimize_Alignment_Time (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Is_Type (Id)\n-           or else Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_Variable);\n+        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n       Set_Flag242 (Id, V);\n    end Set_Optimize_Alignment_Time;\n \n@@ -4844,10 +4756,7 @@ package body Einfo is\n \n    procedure Set_Original_Record_Component (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Void\n-           or else Ekind (Id) = E_Component\n-           or else Ekind (Id) = E_Discriminant);\n+      pragma Assert (Ekind_In (Id, E_Void, E_Component, E_Discriminant));\n       Set_Node22 (Id, V);\n    end Set_Original_Record_Component;\n \n@@ -4863,10 +4772,7 @@ package body Einfo is\n \n    procedure Set_Package_Instantiation (Id : E; V : N) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Void\n-           or else Ekind (Id) = E_Generic_Package\n-           or else Ekind (Id) = E_Package);\n+      pragma Assert (Ekind_In (Id, E_Void, E_Generic_Package, E_Package));\n       Set_Node26 (Id, V);\n    end Set_Package_Instantiation;\n \n@@ -4902,8 +4808,7 @@ package body Einfo is\n \n    procedure Set_Prival_Link (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Constant\n-        or else Ekind (Id) = E_Variable);\n+      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n       Set_Node20 (Id, V);\n    end Set_Prival_Link;\n \n@@ -4933,10 +4838,10 @@ package body Einfo is\n \n    procedure Set_Protection_Object (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Entry\n-        or else Ekind (Id) = E_Entry_Family\n-        or else Ekind (Id) = E_Function\n-        or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Entry,\n+                                   E_Entry_Family,\n+                                   E_Function,\n+                                   E_Procedure));\n       Set_Node23 (Id, V);\n    end Set_Protection_Object;\n \n@@ -4985,15 +4890,13 @@ package body Einfo is\n \n    procedure Set_Related_Instance (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Package or else Ekind (Id) = E_Package_Body);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Package_Body));\n       Set_Node15 (Id, V);\n    end Set_Related_Instance;\n \n    procedure Set_Related_Type (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Component or else Ekind (Id) = E_Constant);\n+      pragma Assert (Ekind_In (Id, E_Component, E_Constant));\n       Set_Node26 (Id, V);\n    end Set_Related_Type;\n \n@@ -5081,8 +4984,7 @@ package body Einfo is\n \n    procedure Set_Shadow_Entities (Id : E; V : S) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Package or else Ekind (Id) = E_Generic_Package);\n+      pragma Assert (Ekind_In (Id, E_Package, E_Generic_Package));\n       Set_List14 (Id, V);\n    end Set_Shadow_Entities;\n \n@@ -5094,7 +4996,7 @@ package body Einfo is\n \n    procedure Set_Size_Check_Code (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Constant or else Ekind (Id) = E_Variable);\n+      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n       Set_Node19 (Id, V);\n    end Set_Size_Check_Code;\n \n@@ -5268,9 +5170,8 @@ package body Einfo is\n \n    procedure Set_Wrapped_Entity (Id : E; V : E) is\n    begin\n-      pragma Assert ((Ekind (Id) = E_Function\n-          or else Ekind (Id) = E_Procedure)\n-        and then Is_Primitive_Wrapper (Id));\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+                      and then Is_Primitive_Wrapper (Id));\n       Set_Node27 (Id, V);\n    end Set_Wrapped_Entity;\n \n@@ -5765,9 +5666,9 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-          or else Ekind (Id) = E_Entry_Family\n-          or else Ekind (Id) = E_Subprogram_Body\n-          or else Ekind (Id) = E_Subprogram_Type);\n+          or else Ekind_In (Id, E_Entry_Family,\n+                                E_Subprogram_Body,\n+                                E_Subprogram_Type));\n \n       if Ekind (Id) = E_Enumeration_Literal then\n          return Empty;\n@@ -5793,9 +5694,9 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-          or else Ekind (Id) = E_Entry_Family\n-          or else Ekind (Id) = E_Subprogram_Body\n-          or else Ekind (Id) = E_Subprogram_Type);\n+                        or else Ekind_In (Id, E_Entry_Family,\n+                                              E_Subprogram_Body,\n+                                              E_Subprogram_Type));\n \n       if Ekind (Id) = E_Enumeration_Literal then\n          return Empty;\n@@ -6098,10 +5999,8 @@ package body Einfo is\n \n    function Is_Discriminal (Id : E) return B is\n    begin\n-      return\n-        (Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_In_Parameter)\n-         and then Present (Discriminal_Link (Id));\n+      return (Ekind_In (Id, E_Constant, E_In_Parameter)\n+               and then Present (Discriminal_Link (Id)));\n    end Is_Discriminal;\n \n    ----------------------\n@@ -6169,10 +6068,8 @@ package body Einfo is\n \n    function Is_Prival (Id : E) return B is\n    begin\n-      return\n-        (Ekind (Id) = E_Constant\n-           or else Ekind (Id) = E_Variable)\n-         and then Present (Prival_Link (Id));\n+      return (Ekind_In (Id, E_Constant, E_Variable)\n+                         and then Present (Prival_Link (Id)));\n    end Is_Prival;\n \n    ----------------------------\n@@ -6227,8 +6124,8 @@ package body Einfo is\n    begin\n       return Ekind (Id) in String_Kind\n         or else (Is_Array_Type (Id)\n-                   and then Number_Dimensions (Id) = 1\n-                   and then Is_Character_Type (Component_Type (Id)));\n+                  and then Number_Dimensions (Id) = 1\n+                  and then Is_Character_Type (Component_Type (Id)));\n    end Is_String_Type;\n \n    -------------------------\n@@ -6249,7 +6146,7 @@ package body Einfo is\n    function Is_Wrapper_Package (Id : E) return B is\n    begin\n       return (Ekind (Id) = E_Package\n-        and then Present (Related_Instance (Id)));\n+               and then Present (Related_Instance (Id)));\n    end Is_Wrapper_Package;\n \n    --------------------\n@@ -6279,9 +6176,7 @@ package body Einfo is\n    begin\n       Comp_Id := Next_Entity (Id);\n       while Present (Comp_Id) loop\n-         exit when Ekind (Comp_Id) = E_Component\n-                     or else\n-                   Ekind (Comp_Id) = E_Discriminant;\n+         exit when Ekind_In (Comp_Id, E_Component, E_Discriminant);\n          Comp_Id := Next_Entity (Comp_Id);\n       end loop;\n \n@@ -6318,7 +6213,7 @@ package body Einfo is\n          D := Next_Entity (D);\n          if No (D)\n            or else (Ekind (D) /= E_Discriminant\n-                      and then not Is_Itype (D))\n+                     and then not Is_Itype (D))\n          then\n             return Empty;\n          end if;\n@@ -8105,9 +8000,7 @@ package body Einfo is\n    begin\n       N := Next_Entity (N);\n       while Present (N) loop\n-         exit when Ekind (N) = E_Component\n-                     or else\n-                   Ekind (N) = E_Discriminant;\n+         exit when Ekind_In (N, E_Component, E_Discriminant);\n          N := Next_Entity (N);\n       end loop;\n    end Proc_Next_Component_Or_Discriminant;"}, {"sha": "c850ab0a35eeaf84084e82931710d8554c653482", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -2560,10 +2560,10 @@ package body Layout is\n \n             begin\n                --  For some reasons, access types can cause trouble, So let's\n-               --  just do this for discrete types ???\n+               --  just do this for scalar types ???\n \n                if Present (CT)\n-                 and then Is_Discrete_Type (CT)\n+                 and then Is_Scalar_Type (CT)\n                  and then Known_Static_Esize (CT)\n                then\n                   declare"}, {"sha": "80ed051883109921c48fecddc0f947a612972d70", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -12223,7 +12223,6 @@ package body Sem_Ch12 is\n                --  All other cases than aggregates\n \n                else\n-\n                   --  For pragmas, we propagate the Enabled status for the\n                   --  relevant pragmas to the original generic tree. This was\n                   --  originally needed for SCO generation. It is no longer\n@@ -12233,8 +12232,10 @@ package body Sem_Ch12 is\n \n                   if Nkind (N) = N_Pragma\n                     and  then\n-                      (Pragma_Name (N) = Name_Precondition\n-                       or else Pragma_Name (N) = Name_Postcondition)\n+                      (Pragma_Name (N) = Name_Assert\n+                        or else Pragma_Name (N) = Name_Check\n+                        or else Pragma_Name (N) = Name_Precondition\n+                        or else Pragma_Name (N) = Name_Postcondition)\n                     and then Present (Associated_Node (Pragma_Identifier (N)))\n                   then\n                      Set_Pragma_Enabled (N,"}, {"sha": "fa66b46c909bd32dd6d665693ca130104ce5d0c6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -2370,7 +2370,6 @@ package body Sem_Ch13 is\n                --  Get the alignment value to perform error checking\n \n                Mod_Val := Get_Alignment_Value (Expression (M));\n-\n             end if;\n          end;\n       end if;"}, {"sha": "9245d2d51f6d7e7f52584d540d12fa70148dff66", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -11071,6 +11071,7 @@ package body Sem_Ch3 is\n       else\n          Set_Ekind (Def_Id, E_Enumeration_Subtype);\n          Set_Is_Character_Type (Def_Id, Is_Character_Type (T));\n+         Set_First_Literal     (Def_Id, First_Literal (T));\n       end if;\n \n       Set_Size_Info      (Def_Id,                (T));"}, {"sha": "39bda75af2a112e99f3cf3e6afb65968bf0259e5", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -23,8 +23,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Command_Line; use Ada.Command_Line;\n-\n with Debug;    use Debug;\n with Lib;      use Lib;\n with Osint;    use Osint;\n@@ -34,8 +32,9 @@ with Validsw;  use Validsw;\n with Sem_Warn; use Sem_Warn;\n with Stylesw;  use Stylesw;\n \n-with System.OS_Lib; use System.OS_Lib;\n+with Ada.Command_Line; use Ada.Command_Line;\n \n+with System.OS_Lib;  use System.OS_Lib;\n with System.WCh_Con; use System.WCh_Con;\n \n package body Switch.C is\n@@ -45,8 +44,7 @@ package body Switch.C is\n \n    function Switch_Subsequently_Cancelled\n      (C        : String;\n-      Arg_Rank : Positive)\n-      return Boolean;\n+      Arg_Rank : Positive) return Boolean;\n    --  This function is called from Scan_Front_End_Switches. It determines if\n    --  the switch currently being scanned is followed by a switch of the form\n    --  \"-gnat-\" & C, where C is the argument. If so, then True is returned,\n@@ -1098,12 +1096,14 @@ package body Switch.C is\n \n    function Switch_Subsequently_Cancelled\n      (C        : String;\n-      Arg_Rank : Positive)\n-      return Boolean\n+      Arg_Rank : Positive) return Boolean\n    is\n       Arg : Positive;\n       Max : constant Natural := Argument_Count;\n+\n    begin\n+      --  Loop through arguments following the current one\n+\n       Arg := Arg_Rank + 1;\n       while Arg < Max loop\n          declare\n@@ -1117,6 +1117,8 @@ package body Switch.C is\n          Arg := Arg + 1;\n       end loop;\n \n+      --  No match found, not cancelled\n+\n       return False;\n    end Switch_Subsequently_Cancelled;\n "}, {"sha": "db7ffc3ddf435858150cef523617ba7ac12de553", "filename": "gcc/ada/switch-c.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fswitch-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3428cb9fcb371855b04fd7b796cd98819a31047d/gcc%2Fada%2Fswitch-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.ads?ref=3428cb9fcb371855b04fd7b796cd98819a31047d", "patch": "@@ -41,6 +41,7 @@ package Switch.C is\n    --  an optional terminating NUL character is allowed. A bad switch causes\n    --  a fatal error exit and control does not return. The call also sets\n    --  Usage_Requested to True if a switch -gnath is encountered.\n+   --\n    --  Arg_Rank is the position of the switch in the command line arguments.\n    --  It is used for certain switches -gnatx to check if a subsequent switch\n    --  -gnat-x cancels the switch -gnatx."}]}