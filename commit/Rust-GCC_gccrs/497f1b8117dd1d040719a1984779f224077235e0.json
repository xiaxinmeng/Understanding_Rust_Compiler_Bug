{"sha": "497f1b8117dd1d040719a1984779f224077235e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3ZjFiODExN2RkMWQwNDA3MTlhMTk4NDc3OWYyMjQwNzcyMzVlMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-24T10:23:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-24T10:23:25Z"}, "message": "tree-ssa-operands.h (struct ssa_operand_memory_d): add ssa_operand_mem_size.\n\n\t* tree-ssa-operands.h (struct ssa_operand_memory_d):\n\tadd ssa_operand_mem_size.\n\t* tree-ssa-operands.c (operands_bitmap_obstack): New.               \n\t(ssa_operand_mem_size): Remove.\n\t(init_ssa_operands): Initialize obstack; use it.\n\t(fini_ssa_operands): Release obstack.\n\t(ssa_operand_alloc): Update.\n\t(finalize_ssa_vdefs, finalize_ssa_vuse_ops, copy_virtual_operands,\n\tget_mpt_for): Use obstack.\n\t* tree-ssa.c (delete_tree_ssa): Call fini_ssa_operands.\n\t* tree-outof-ssa.c: (remove_ssa_form): Don't call it here.\n\nFrom-SVN: r120189", "tree": {"sha": "0729bdf66d39bb923bb810bd811b1f81a2fdd5cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0729bdf66d39bb923bb810bd811b1f81a2fdd5cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/497f1b8117dd1d040719a1984779f224077235e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497f1b8117dd1d040719a1984779f224077235e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497f1b8117dd1d040719a1984779f224077235e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497f1b8117dd1d040719a1984779f224077235e0/comments", "author": null, "committer": null, "parents": [{"sha": "7a223fd48dcbec588cbd3c26f0fec5eadeb204e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a223fd48dcbec588cbd3c26f0fec5eadeb204e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a223fd48dcbec588cbd3c26f0fec5eadeb204e8"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "c823842865169b8d6c93c4f5c4f79dc68965e18c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497f1b8117dd1d040719a1984779f224077235e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497f1b8117dd1d040719a1984779f224077235e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=497f1b8117dd1d040719a1984779f224077235e0", "patch": "@@ -1,3 +1,17 @@\n+2006-12-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-operands.h (struct ssa_operand_memory_d):\n+\tadd ssa_operand_mem_size.\n+\t* tree-ssa-operands.c (operands_bitmap_obstack): New.               \n+\t(ssa_operand_mem_size): Remove.\n+\t(init_ssa_operands): Initialize obstack; use it.\n+\t(fini_ssa_operands): Release obstack.\n+\t(ssa_operand_alloc): Update.\n+\t(finalize_ssa_vdefs, finalize_ssa_vuse_ops, copy_virtual_operands,\n+\tget_mpt_for): Use obstack.\n+\t* tree-ssa.c (delete_tree_ssa): Call fini_ssa_operands.\n+\t* tree-outof-ssa.c: (remove_ssa_form): Don't call it here.\n+\n 2006-12-24  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-mudflap.c (ml_decl_cache_locals, md_build_check_statement_for):"}, {"sha": "ad8c5ae029836322f45730cab72dfed2220d86b3", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=497f1b8117dd1d040719a1984779f224077235e0", "patch": "@@ -1180,9 +1180,6 @@ remove_ssa_form (bool perform_ter)\n \t}\n     }\n \n-  /* we no longer maintain the SSA operand cache at this point.  */\n-  fini_ssa_operands ();\n-\n   /* If any copies were inserted on edges, analyze and insert them now.  */\n   perform_edge_inserts ();\n "}, {"sha": "6705ca1c4684f0d258aacbb76e9b982ed5f635f3", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=497f1b8117dd1d040719a1984779f224077235e0", "patch": "@@ -139,6 +139,9 @@ static VEC(tree,heap) *build_vdefs;\n /* Set for building all the VUSE operands.  */\n static VEC(tree,heap) *build_vuses;\n \n+/* Bitmap obstack for our datastructures that needs to survive across\t\n+   compilations of multiple funcitons.  */\n+static bitmap_obstack operands_bitmap_obstack;\n /* Set for building all the loaded symbols.  */\n static bitmap build_loads;\n \n@@ -351,9 +354,6 @@ add_vop_to_freelist (voptype_p ptr)\n #define OP_SIZE_2\t110\n #define OP_SIZE_3\t511\n \n-/* Current size of the operand memory buffer.  */\n-static unsigned int ssa_operand_mem_size;\n-\n /* Initialize the operand cache routines.  */\n \n void\n@@ -365,18 +365,20 @@ init_ssa_operands (void)\n       build_uses = VEC_alloc (tree, heap, 10);\n       build_vuses = VEC_alloc (tree, heap, 25);\n       build_vdefs = VEC_alloc (tree, heap, 25);\n-      build_loads = BITMAP_ALLOC (NULL);\n-      build_stores = BITMAP_ALLOC (NULL);\n+      bitmap_obstack_initialize (&operands_bitmap_obstack);\n+      build_loads = BITMAP_ALLOC (&operands_bitmap_obstack);\n+      build_stores = BITMAP_ALLOC (&operands_bitmap_obstack);\n       scb_stack = VEC_alloc (scb_t, heap, 20);\n     }\n \n   gcc_assert (gimple_ssa_operands (cfun)->operand_memory == NULL);\n   gcc_assert (gimple_ssa_operands (cfun)->mpt_table == NULL);\n-  gimple_ssa_operands (cfun)->operand_memory_index = ssa_operand_mem_size;\n+  gimple_ssa_operands (cfun)->operand_memory_index\n+     = gimple_ssa_operands (cfun)->ssa_operand_mem_size;\n   gimple_ssa_operands (cfun)->ops_active = true;\n   memset (&clobber_stats, 0, sizeof (clobber_stats));\n   init_vop_buckets ();\n-  ssa_operand_mem_size = OP_SIZE_INIT;\n+  gimple_ssa_operands (cfun)->ssa_operand_mem_size = OP_SIZE_INIT;\n }\n \n \n@@ -426,6 +428,8 @@ fini_ssa_operands (void)\n \n   gimple_ssa_operands (cfun)->ops_active = false;\n \n+  if (!n_initialized)\n+    bitmap_obstack_release (&operands_bitmap_obstack);\n   if (dump_file && (dump_flags & TDF_STATS))\n     {\n       fprintf (dump_file, \"Original clobbered vars:           %d\\n\",\n@@ -452,31 +456,36 @@ ssa_operand_alloc (unsigned size)\n   char *ptr;\n \n   if (gimple_ssa_operands (cfun)->operand_memory_index + size\n-      >= ssa_operand_mem_size)\n+      >= gimple_ssa_operands (cfun)->ssa_operand_mem_size)\n     {\n       struct ssa_operand_memory_d *ptr;\n \n-      if (ssa_operand_mem_size == OP_SIZE_INIT)\n-\tssa_operand_mem_size = OP_SIZE_1 * sizeof (struct voptype_d);\n+      if (gimple_ssa_operands (cfun)->ssa_operand_mem_size == OP_SIZE_INIT)\n+\tgimple_ssa_operands (cfun)->ssa_operand_mem_size\n+\t   = OP_SIZE_1 * sizeof (struct voptype_d);\n       else\n-\tif (ssa_operand_mem_size == OP_SIZE_1 * sizeof (struct voptype_d))\n-\t  ssa_operand_mem_size = OP_SIZE_2 * sizeof (struct voptype_d);\n+\tif (gimple_ssa_operands (cfun)->ssa_operand_mem_size\n+\t    == OP_SIZE_1 * sizeof (struct voptype_d))\n+\t  gimple_ssa_operands (cfun)->ssa_operand_mem_size\n+\t     = OP_SIZE_2 * sizeof (struct voptype_d);\n \telse\n-\t  ssa_operand_mem_size = OP_SIZE_3 * sizeof (struct voptype_d);\n+\t  gimple_ssa_operands (cfun)->ssa_operand_mem_size\n+\t     = OP_SIZE_3 * sizeof (struct voptype_d);\n \n       /* Go right to the maximum size if the request is too large.  */\n-      if (size > ssa_operand_mem_size)\n-        ssa_operand_mem_size = OP_SIZE_3 * sizeof (struct voptype_d);\n+      if (size > gimple_ssa_operands (cfun)->ssa_operand_mem_size)\n+        gimple_ssa_operands (cfun)->ssa_operand_mem_size\n+\t  = OP_SIZE_3 * sizeof (struct voptype_d);\n \n       /* Fail if there is not enough space.  If there are this many operands\n \t required, first make sure there isn't a different problem causing this\n \t many operands.  If the decision is that this is OK, then we can \n \t specially allocate a buffer just for this request.  */\n-      gcc_assert (size <= ssa_operand_mem_size);\n+      gcc_assert (size <= gimple_ssa_operands (cfun)->ssa_operand_mem_size);\n \n       ptr = (struct ssa_operand_memory_d *) \n \t      ggc_alloc (sizeof (struct ssa_operand_memory_d) \n-\t\t\t + ssa_operand_mem_size - 1);\n+\t\t\t + gimple_ssa_operands (cfun)->ssa_operand_mem_size - 1);\n       ptr->next = gimple_ssa_operands (cfun)->operand_memory;\n       gimple_ssa_operands (cfun)->operand_memory = ptr;\n       gimple_ssa_operands (cfun)->operand_memory_index = 0;\n@@ -876,7 +885,7 @@ finalize_ssa_vdefs (tree stmt)\n   if (!bitmap_empty_p (build_stores))\n     {\n       if (ann->operands.stores == NULL)\n-\tann->operands.stores = BITMAP_ALLOC (NULL);\n+\tann->operands.stores = BITMAP_ALLOC (&operands_bitmap_obstack);\n \n       bitmap_copy (ann->operands.stores, build_stores);\n     }\n@@ -982,7 +991,7 @@ finalize_ssa_vuse_ops (tree stmt)\n   if (!bitmap_empty_p (build_loads))\n     {\n       if (ann->operands.loads == NULL)\n-\tann->operands.loads = BITMAP_ALLOC (NULL);\n+\tann->operands.loads = BITMAP_ALLOC (&operands_bitmap_obstack);\n \n       bitmap_copy (ann->operands.loads, build_loads);\n     }\n@@ -2403,13 +2412,13 @@ copy_virtual_operands (tree dest, tree src)\n \n   if (LOADED_SYMS (src))\n     {\n-      dest_ann->operands.loads = BITMAP_ALLOC (NULL);\n+      dest_ann->operands.loads = BITMAP_ALLOC (&operands_bitmap_obstack);\n       bitmap_copy (dest_ann->operands.loads, LOADED_SYMS (src));\n     }\n \n   if (STORED_SYMS (src))\n     {\n-      dest_ann->operands.stores = BITMAP_ALLOC (NULL);\n+      dest_ann->operands.stores = BITMAP_ALLOC (&operands_bitmap_obstack);\n       bitmap_copy (dest_ann->operands.stores, STORED_SYMS (src));\n     }\n \n@@ -2969,7 +2978,7 @@ get_mpt_for (tree sym)\n       MTAG_GLOBAL (mpt) = 1;\n       add_referenced_var (mpt);\n       VEC_safe_push (tree, heap, gimple_ssa_operands (cfun)->mpt_table, mpt);\n-      MPT_SYMBOLS (mpt) = BITMAP_ALLOC (NULL);\n+      MPT_SYMBOLS (mpt) = BITMAP_ALLOC (&operands_bitmap_obstack);\n       set_memory_partition (sym, mpt);\n     }\n "}, {"sha": "92dc4f9dace965ec1b2358a32dc235bd6da5cbd1", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=497f1b8117dd1d040719a1984779f224077235e0", "patch": "@@ -124,6 +124,8 @@ struct ssa_operand_memory_d GTY((chain_next(\"%h.next\")))\n struct ssa_operands GTY(()) {\n    struct ssa_operand_memory_d *operand_memory;\n    unsigned operand_memory_index;\n+   /* Current size of the operand memory buffer.  */\n+   unsigned int ssa_operand_mem_size;\n \n    bool ops_active;\n "}, {"sha": "6ca8f031ac90ab3ae7c334061d1cd41b966768a0", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497f1b8117dd1d040719a1984779f224077235e0/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=497f1b8117dd1d040719a1984779f224077235e0", "patch": "@@ -834,6 +834,8 @@ delete_tree_ssa (void)\n \n   fini_ssanames ();\n   fini_phinodes ();\n+  /* we no longer maintain the SSA operand cache at this point.  */\n+  fini_ssa_operands ();\n \n   cfun->gimple_df->global_var = NULL_TREE;\n   "}]}