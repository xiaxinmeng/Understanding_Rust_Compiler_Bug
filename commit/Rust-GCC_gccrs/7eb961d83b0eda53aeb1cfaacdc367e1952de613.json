{"sha": "7eb961d83b0eda53aeb1cfaacdc367e1952de613", "node_id": "C_kwDOANBUbNoAKDdlYjk2MWQ4M2IwZWRhNTNhZWIxY2ZhYWNkYzM2N2UxOTUyZGU2MTM", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-01T22:01:09Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-01T22:03:42Z"}, "message": "i386: Improve V8HI and V8HF inserts [PR102811]\n\nIntroduce vec_set_0 pattern for V8HI and V8HF modes to implement scalar\nelement 0 inserts to from a GP register, SSE register or memory.  Also\nadd V8HI and V8HF AVX2 (x,x,x) alternative to PINSR insn pattern, which is\nsplit after reload to a sequence of PBROADCASTW and PBLENDW.\n\nThe V8HF inserts from memory improve from:\n\n-       vpbroadcastw    4(%esp), %xmm1\n-       vpblendw        $16, %xmm1, %xmm0, %xmm0\n+       vpinsrw $4, 4(%esp), %xmm0, %xmm0\n\nand V8HF inserts from SSE register to element 0 improve from:\n\n        vpxor   %xmm2, %xmm2, %xmm2\n-       vpbroadcastw    %xmm0, %xmm0\n        vpblendw        $1, %xmm0, %xmm2, %xmm0\n\nBased on the above improvements, the register allocator is able to determine\nthe optimal instruction (or instruction sequence) based on the register set\nof the input value, so there is no need to manually expand V8HI and V8HF\ninserts to the sequence of VEC_DUPLICATE and VEC_MERGE RTXes.\n\n2021-12-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/102811\n\t* config/i386/sse.md (VI2F): Remove mode iterator.\n\t(VI2F_256_512): New mode iterator.\n\t(vec_set<V8_128:mode>_0): New insn pattern.\n\t(vec_set<VI2F_256_512:mode>_0>): Rename from vec_set<VI2F:mode>mode.\n\tUse VI2F_256_512 mode iterator instead of VI2F.\n\t(*axv512fp16_movsh): Remove.\n\t(<sse2p4_1>_pinsr<ssemodesuffix>): Add (x,x,x) AVX2 alternative.\n\tDo not disable V8HF mode insn on AVX2 targets.\n\t(pinsrw -> pbroadcast + pblendw peephole2): New peephole.\n\t(pinsrw -> pbroadcast + pblendw splitter): New post-reload splitter.\n\t* config/i386/i386.md (extendhfsf): Call gen_vec_setv8hf_0.\n\t* config/i386/i386-expand.c (ix86_expand_vector_set)\n\t<case E_V8HFmode>: Use vec_merge path for TARGET_AVX2.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/102881\n\t* gcc.target/i386/pr102811-1.c: New test.\n\t* gcc.target/i386/avx512fp16-1c.c (dg-final): Update\n\tscan-assembler-times scan strings for ia32 targets.\n\t* gcc.target/i386/pr102327-1.c (dg-final): Ditto.\n\t* gcc.target/i386/pr102811.c: Rename from ...\n\t* gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c: ... this.", "tree": {"sha": "21f566577f052fb2500939c1f09a4b95087aa8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21f566577f052fb2500939c1f09a4b95087aa8cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eb961d83b0eda53aeb1cfaacdc367e1952de613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb961d83b0eda53aeb1cfaacdc367e1952de613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb961d83b0eda53aeb1cfaacdc367e1952de613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb961d83b0eda53aeb1cfaacdc367e1952de613/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3e5aae6c4b540e808c822c1e878b0a3304d09c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3e5aae6c4b540e808c822c1e878b0a3304d09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3e5aae6c4b540e808c822c1e878b0a3304d09c"}], "stats": {"total": 221, "additions": 165, "deletions": 56}, "files": [{"sha": "cba2880dc8d0d8ba8a4fee995d5a1ad20c22b384", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=7eb961d83b0eda53aeb1cfaacdc367e1952de613", "patch": "@@ -16204,18 +16204,8 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t}\n       return;\n \n-    case E_V8HFmode:\n-      if (TARGET_AVX2)\n-\t{\n-\t  mmode = SImode;\n-\t  gen_blendm = gen_sse4_1_pblendph;\n-\t  blendm_const = true;\n-\t}\n-      else\n-\tuse_vec_merge = true;\n-      break;\n-\n     case E_V8HImode:\n+    case E_V8HFmode:\n     case E_V2HImode:\n       use_vec_merge = TARGET_SSE2;\n       break;"}, {"sha": "9d7d1161d15ed8fb73bf6f32c0a3134d5b8a9cb4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7eb961d83b0eda53aeb1cfaacdc367e1952de613", "patch": "@@ -4656,15 +4656,7 @@\n       rtx tmp = gen_reg_rtx (V8HFmode);\n       rtx zero = force_reg (V8HFmode, CONST0_RTX (V8HFmode));\n \n-      if (TARGET_AVX2)\n-\t{\n-\t  rtx dup = gen_reg_rtx (V8HFmode);\n-\t  emit_move_insn (dup, gen_rtx_VEC_DUPLICATE (V8HFmode, operands[1]));\n-\t  emit_move_insn (tmp, gen_rtx_VEC_MERGE (V8HFmode, dup,\n-\t\t\t\t\t\t  zero, const1_rtx));\n-\t}\n-      else\n-\temit_insn (gen_sse2_pinsrph (tmp, zero, operands[1], const1_rtx));\n+      emit_insn (gen_vec_setv8hf_0 (tmp, zero, operands[1]));\n       emit_insn (gen_vcvtph2ps (res, gen_lowpart (V8HImode, tmp)));\n       emit_move_insn (operands[0], gen_lowpart (SFmode, res));\n       DONE;"}, {"sha": "f8b34a15cc664fe3da55a0be89e8b5a5dd8a59ad", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 139, "deletions": 31, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7eb961d83b0eda53aeb1cfaacdc367e1952de613", "patch": "@@ -827,7 +827,7 @@\n   (V32HF \"TARGET_AVX512BW\")])\n \n ;; Int-float size matches\n-(define_mode_iterator VI2F [V8HI V16HI V32HI V8HF V16HF V32HF])\n+(define_mode_iterator VI2F_256_512 [V16HI V32HI V16HF V32HF])\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n (define_mode_iterator VI8F_128 [V2DI V2DF])\n (define_mode_iterator VI4F_256 [V8SI V8SF])\n@@ -10170,13 +10170,84 @@\n \t   ]\n \t   (symbol_ref \"true\")))])\n \n+(define_insn \"vec_set<mode>_0\"\n+  [(set (match_operand:V8_128 0 \"register_operand\"\n+\t  \"=v,v,v,x,x,Yr,*x,x,x,x,v,v\")\n+\t(vec_merge:V8_128\n+\t  (vec_duplicate:V8_128\n+\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\"\n+\t  \" r,m,v,r,m,Yr,*x,r,m,x,r,m\"))\n+\t  (match_operand:V8_128 1 \"reg_or_0_operand\"\n+\t  \" C,C,v,0,0,0 ,0 ,x,x,x,v,v\")\n+\t  (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   vmovw\\t{%k2, %0|%0, %k2}\n+   vmovw\\t{%2, %0|%0, %2}\n+   vmovsh\\t{%2, %1, %0|%0, %1, %2}\n+   pinsrw\\t{$0, %k2, %0|%0, %k2, 0}\n+   pinsrw\\t{$0, %2, %0|%0, %2, 0}\n+   pblendw\\t{$1, %2, %0|%0, %2, 1}\n+   pblendw\\t{$1, %2, %0|%0, %2, 1}\n+   vpinsrw\\t{$0, %k2, %1, %0|%0, %1, %k2, 0}\n+   vpinsrw\\t{$0, %2, %1, %0|%0, %1, %2, 0}\n+   vpblendw\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n+   vpinsrw\\t{$0, %k2, %1, %0|%0, %1, %k2, 0}\n+   vpinsrw\\t{$0, %2, %1, %0|%0, %1, %2, 0}\"\n+  [(set (attr \"isa\")\n+\t(cond [(eq_attr \"alternative\" \"0,1,2\")\n+\t\t (const_string \"avx512fp16\")\n+\t       (eq_attr \"alternative\" \"3\")\n+\t\t (const_string \"noavx\")\n+\t       (eq_attr \"alternative\" \"4,5,6\")\n+\t\t (const_string \"sse4_noavx\")\n+\t       (eq_attr \"alternative\" \"7,8,9\")\n+\t\t (const_string \"avx\")\n+\t       (eq_attr \"alternative\" \"10,11\")\n+\t\t (const_string \"avx512bw\")\n+\t      ]\n+\t      (const_string \"*\")))\n+   (set (attr \"type\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2,5,6,9\")\n+\t\t   (const_string \"ssemov\")\n+\t\t   (const_string \"sselog\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (eq_attr \"alternative\" \"3,4\")\n+\t\t   (const_string \"1\")\n+\t\t   (const_string \"*\")))\n+   (set (attr \"prefix_extra\")\n+     (if_then_else (eq_attr \"alternative\" \"5,6,7,8,9\")\n+\t\t   (const_string \"1\")\n+\t\t   (const_string \"*\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2\")\n+\t\t   (const_string \"*\")\n+\t\t   (const_string \"1\")))\n+   (set (attr \"prefix\")\n+\t(cond [(eq_attr \"alternative\" \"0,1,2,10,11\")\n+\t\t (const_string \"evex\")\n+\t       (eq_attr \"alternative\" \"7,8,9\")\n+\t\t (const_string \"vex\")\n+\t      ]\n+\t      (const_string \"orig\")))\n+   (set (attr \"mode\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2\")\n+\t\t   (const_string \"HF\")\n+\t\t   (const_string \"TI\")))\n+   (set (attr \"enabled\")\n+     (cond [(and (not (match_test \"<MODE>mode == V8HFmode\"))\n+\t\t (eq_attr \"alternative\" \"2\"))\n+\t      (symbol_ref \"false\")\n+\t   ]\n+\t   (const_string \"*\")))])\n+\n ;; vmovw clears also the higer bits\n (define_insn \"vec_set<mode>_0\"\n-  [(set (match_operand:VI2F 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VI2F\n-\t  (vec_duplicate:VI2F\n+  [(set (match_operand:VI2F_256_512 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VI2F_256_512\n+\t  (vec_duplicate:VI2F_256_512\n \t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m\"))\n-\t  (match_operand:VI2F 1 \"const0_operand\" \"C,C\")\n+\t  (match_operand:VI2F_256_512 1 \"const0_operand\" \"C,C\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512FP16\"\n   \"@\n@@ -10186,19 +10257,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"HF\")])\n \n-(define_insn \"*avx512fp16_movsh\"\n-  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n-\t(vec_merge:V8HF\n-\t  (vec_duplicate:V8HF\n-\t    (match_operand:HF 2 \"register_operand\" \"v\"))\n-\t  (match_operand:V8HF 1 \"register_operand\" \"v\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX512FP16\"\n-  \"vmovsh\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"HF\")])\n-\n (define_insn \"avx512fp16_movsh\"\n   [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n \t(vec_merge:V8HF\n@@ -17312,20 +17370,20 @@\n    (V4SI \"avx512dq\") (V2DI \"avx512dq\")])\n \n ;; sse4_1_pinsrd must come before sse2_loadld since it is preferred.\n-;; For V8HFmode and TARGET_AVX2, broadcastw + pblendw should be better.\n (define_insn \"<sse2p4_1>_pinsr<ssemodesuffix>\"\n-  [(set (match_operand:PINSR_MODE 0 \"register_operand\" \"=x,x,x,x,v,v\")\n+  [(set (match_operand:PINSR_MODE 0 \"register_operand\" \"=x,x,x,x,v,v,x\")\n \t(vec_merge:PINSR_MODE\n \t  (vec_duplicate:PINSR_MODE\n-\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\"))\n-\t  (match_operand:PINSR_MODE 1 \"register_operand\" \"0,0,x,x,v,v\")\n+\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m,r,m,r,m,x\"))\n+\t  (match_operand:PINSR_MODE 1 \"register_operand\" \"0,0,x,x,v,v,x\")\n \t  (match_operand:SI 3 \"const_int_operand\")))]\n   \"TARGET_SSE2\n    && ((unsigned) exact_log2 (INTVAL (operands[3]))\n-       < GET_MODE_NUNITS (<MODE>mode))\n-   && !(<MODE>mode == V8HFmode && TARGET_AVX2)\"\n+       < GET_MODE_NUNITS (<MODE>mode))\"\n {\n-  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  HOST_WIDE_INT items = INTVAL (operands[3]);\n+\n+  operands[3] = GEN_INT (exact_log2 (items));\n \n   switch (which_alternative)\n     {\n@@ -17343,33 +17401,83 @@\n     case 3:\n     case 5:\n       return \"vpinsr<sseintmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+    case 6:\n+      /* This pattern needs to be shadowed with vec_set{v8hi,v8hf}_0.  */\n+      gcc_assert (items > 1);\n+      return \"#\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"noavx,noavx,avx,avx,<pinsr_evex_isa>,<pinsr_evex_isa>\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx,<pinsr_evex_isa>,<pinsr_evex_isa>,avx2\")\n    (set_attr \"type\" \"sselog\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (not (match_test \"TARGET_AVX\"))\n-\t    (eq (const_string \"<MODE>mode\") (const_string \"V2DImode\")))\n+\t    (match_test \"GET_MODE_NUNITS (<MODE>mode) == 2\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (and (not (match_test \"TARGET_AVX\"))\n-\t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n+\t    (match_test \"GET_MODE_NUNITS (<MODE>mode) == 8\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix_extra\")\n      (if_then_else\n        (and (not (match_test \"TARGET_AVX\"))\n-\t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n+\t    (match_test \"GET_MODE_NUNITS (<MODE>mode) == 8\"))\n        (const_string \"*\")\n        (const_string \"1\")))\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,orig,vex,vex,evex,evex\")\n-   (set_attr \"mode\" \"TI\")])\n+   (set_attr \"prefix\" \"orig,orig,vex,vex,evex,evex,vex\")\n+   (set_attr \"mode\" \"TI\")\n+   (set (attr \"enabled\")\n+     (cond [(and (not (match_test \"GET_MODE_NUNITS (<MODE>mode) == 8\"))\n+\t\t (eq_attr \"alternative\" \"6\"))\n+\t      (symbol_ref \"false\")\n+\t   ]\n+\t   (const_string \"*\")))])\n+\n+;; For TARGET_AVX2, implement insert from XMM reg with PBROADCASTW + PBLENDW.\n+;; First try to get a scratch register and go through it.  In case this fails,\n+;; overwrite source reg with broadcasted value and blend from there.\n+(define_peephole2\n+  [(match_scratch:V8_128 4 \"x\")\n+   (set (match_operand:V8_128 0 \"sse_reg_operand\")\n+\t(vec_merge:V8_128\n+\t  (vec_duplicate:V8_128\n+\t    (match_operand:<ssescalarmode> 2 \"sse_reg_operand\"))\n+\t  (match_operand:V8_128 1 \"sse_reg_operand\")\n+\t  (match_operand:SI 3 \"const_int_operand\")))]\n+  \"TARGET_AVX2\n+   && INTVAL (operands[3]) > 1\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (<MODE>mode))\"\n+  [(set (match_dup 4)\n+\t(vec_duplicate:V8_128 (match_dup 2)))\n+   (set (match_dup 0)\n+\t(vec_merge:V8_128 (match_dup 4) (match_dup 1) (match_dup 3)))])\n+\n+(define_split\n+  [(set (match_operand:V8_128 0 \"sse_reg_operand\")\n+\t(vec_merge:V8_128\n+\t  (vec_duplicate:V8_128\n+\t    (match_operand:<ssescalarmode> 2 \"sse_reg_operand\"))\n+\t  (match_operand:V8_128 1 \"sse_reg_operand\")\n+\t  (match_operand:SI 3 \"const_int_operand\")))]\n+  \"TARGET_AVX2 && epilogue_completed\n+   && INTVAL (operands[3]) > 1\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (<MODE>mode))\"\n+  [(set (match_dup 4)\n+\t(vec_duplicate:V8_128 (match_dup 2)))\n+   (set (match_dup 0)\n+\t(vec_merge:V8_128 (match_dup 4) (match_dup 1) (match_dup 3)))]\n+{\n+  operands[4] = lowpart_subreg (<MODE>mode, operands[2],\n+\t\t\t\t<ssescalarmode>mode);\n+})\n \n (define_expand \"<extract_type>_vinsert<shuffletype><extract_suf>_mask\"\n   [(match_operand:AVX512_VEC 0 \"register_operand\")"}, {"sha": "096688690da7c231fe1260541a05b9eb46df7e17", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-1c.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1c.c?ref=7eb961d83b0eda53aeb1cfaacdc367e1952de613", "patch": "@@ -1,8 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vmovsh\" 1 } }  */\n-/* { dg-final { scan-assembler-times \"vpblendw\" 1 } } */\n-/* { dg-final { scan-assembler \"vpbroadcastw\" } }  */\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 1 { target { ! ia32 } } } }  */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\" 1 { target { ! ia32 } } } }  */\n+\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 2 { target ia32 } } }  */\n \n typedef _Float16 __v8hf __attribute__ ((__vector_size__ (16)));\n typedef _Float16 __m128h __attribute__ ((__vector_size__ (16), __may_alias__));"}, {"sha": "bd02f53460023da2c2082bc2b2f008eb5f40ff2b", "filename": "gcc/testsuite/gcc.target/i386/pr102327-1.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102327-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102327-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102327-1.c?ref=7eb961d83b0eda53aeb1cfaacdc367e1952de613", "patch": "@@ -60,6 +60,11 @@ VEC_SET (v32hf, _Float16, 14);\n VEC_SET (v32hf, _Float16, 16);\n VEC_SET (v32hf, _Float16, 24);\n VEC_SET (v32hf, _Float16, 28);\n-/* { dg-final { scan-assembler-times \"vpbroadcastw\" 10 } } */\n-/* { dg-final { scan-assembler-times \"vpblendw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 10 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 4 { target { ! ia32 } } } } */\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 9 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 3 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 1 { target ia32 } } } */\n+\n /* { dg-final { scan-assembler-times \"vpblendd\" 3 } } */"}, {"sha": "a1952d11ed2e1b094e16d8c8daed102a747738e1", "filename": "gcc/testsuite/gcc.target/i386/pr102811-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-1.c?ref=7eb961d83b0eda53aeb1cfaacdc367e1952de613", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mf16c -mno-avx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vpxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpblendw\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 2 { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"vpextrw\"} } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastw\"} } */\n+_Float16 test (_Float16 a, _Float16 b)\n+{\n+  return a + b;\n+}"}, {"sha": "9a6c432c866617f746f61501a0d893f3c5fa1261", "filename": "gcc/testsuite/gcc.target/i386/pr102811.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb961d83b0eda53aeb1cfaacdc367e1952de613/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811.c?ref=7eb961d83b0eda53aeb1cfaacdc367e1952de613", "previous_filename": "gcc/testsuite/gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c"}]}