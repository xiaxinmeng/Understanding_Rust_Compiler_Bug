{"sha": "c3a4169be95d5ccf21296ad4e483981d8375f1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhNDE2OWJlOTVkNWNjZjIxMjk2YWQ0ZTQ4Mzk4MWQ4Mzc1ZjFhZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-05-27T07:45:56Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-05-27T07:45:56Z"}, "message": "Daily bump.", "tree": {"sha": "02d46cda46891301a30e04e9b1b2c3b2fa98822b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02d46cda46891301a30e04e9b1b2c3b2fa98822b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a4169be95d5ccf21296ad4e483981d8375f1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a4169be95d5ccf21296ad4e483981d8375f1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a4169be95d5ccf21296ad4e483981d8375f1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a4169be95d5ccf21296ad4e483981d8375f1ae/comments", "author": null, "committer": null, "parents": [{"sha": "bc48456d085d4ab8be92cf5369624dd86317cecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc48456d085d4ab8be92cf5369624dd86317cecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc48456d085d4ab8be92cf5369624dd86317cecb"}], "stats": {"total": 390, "additions": 389, "deletions": 1}, "files": [{"sha": "122f395fb4083a1ec114353e56c9bdff3c7deddb", "filename": "contrib/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,45 @@\n+2020-05-26  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-changelog/git_commit.py (ChangeLogEntry): Handle entries\n+\twith multi-line file lists.\n+\t* gcc-changelog/test_email.py: New testcase.\n+\t* gcc-changelog/test_patches.txt: Likewise.\n+\n+2020-05-26  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-changelog/git_update_version.py: Close file objects after\n+\tuse.\n+\t* gcc-changelog/git_email.py: Likewise.\n+\t* gcc-changelog/test_email.py: Likewise.\n+\n+2020-05-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: Add 2 new options.\n+\n+2020-05-26  Alexandre Oliva  <oliva@gnu.org>\n+\n+\t* gcc-changelog/git_commit.py (changelog_regex): Accept optional\n+\t'for' prefix.\n+\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* compare-debug: Adjust for .gkd files named as dump files,\n+\twith the source suffix rather than the object suffix.\n+\n+2020-05-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Parse changelog entries for\n+\tignored locations.\n+\t* gcc-changelog/test_email.py: Add new test for it.\n+\t* gcc-changelog/test_patches.txt: Likewise.\n+\n+2020-05-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* prepare-commit-msg: New file.\n+\t* gcc-git-customization.sh: Install it.  Add commit-mklog alias.\n+\t* mklog.py: Add new option -c which appends\n+\tto a ChangeLog file.\n+\n 2020-05-25  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Add trailing '/'"}, {"sha": "dcea8ea9264adbbb34d435ad34f86664c4834c9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,154 @@\n+2020-05-27  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/testcompare.md (tst_extzv_1_n): Do not accept constants\n+\tfor the primary input operand.\n+\t(tstsi_variable_bit_qi): Similarly.\n+\n+2020-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (mmx_pswapdv2si2): Add SSE2 alternative.\n+\n+2020-05-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR ipa/95320\n+\t* ipa-utils.h (odr_type_p): Also permit calls with\n+\tonly flag_generate_offload set.\n+\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.c (validate_switches): Add braced parameter.  Adjust all\n+\tcallers.  Expected and skip trailing brace only if braced.\n+\tReturn after handling one atom otherwise.\n+\t(DUMPS_OPTIONS): New.\n+\t(cpp_debug_options): Define in terms of it.\n+\n+2020-05-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95327\n+\t* tree-vect-stmts.c (vectorizable_shift): Compute op1_vectype\n+\twhen we are not using a scalar shift.\n+\n+2020-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (*mmx_pshufd_1): New insn pattern.\n+\t* config/i386/i386-expand.c (ix86_vectorize_vec_perm_const):\n+\tHandle E_V2SImode and E_V4HImode.\n+\t(expand_vec_perm_even_odd_1): Handle E_V4HImode.\n+\tAssert that E_V2SImode is already handled.\n+\t(expand_vec_perm_broadcast_1): Assert that E_V2SImode\n+\tis already handled by standard shuffle patterns.\n+\n+2020-05-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (free_lang_data_in_type): Simpify types of TYPE_VALUES in\n+\tenumeral types.\n+\n+2020-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/95197\n+\t* gimplify.c (find_combined_omp_for): Move to omp-general.c.\n+\t* omp-general.h (find_combined_omp_for): Declare.\n+\t* omp-general.c: Include tree-iterator.h.\n+\t(find_combined_omp_for): New function, moved from gimplify.c.\n+\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* common.opt (aux_base_name): Define.\n+\t(dumpbase, dumpdir): Mark as Driver options.\n+\t(-dumpbase, -dumpdir): Likewise.\n+\t(dumpbase-ext, -dumpbase-ext): New.\n+\t(auxbase, auxbase-strip): Drop.\n+\t* doc/invoke.texi (-dumpbase, -dumpbase-ext, -dumpdir):\n+\tDocument.\n+\t(-o): Introduce the notion of primary output, mention it\n+\tinfluences auxiliary and dump output names as well, add\n+\texamples.\n+\t(-save-temps): Adjust, move examples into -dump*.\n+\t(-save-temps=cwd, -save-temps=obj): Likewise.\n+\t(-fdump-final-insns): Adjust.\n+\t* dwarf2out.c (gen_producer_string): Drop auxbase and\n+\tauxbase_strip; add dumpbase_ext.\n+\t* gcc.c (enum save_temps): Add SAVE_TEMPS_DUMP.\n+\t(save_temps_prefix, save_temps_length): Drop.\n+\t(save_temps_overrides_dumpdir): New.\n+\t(dumpdir, dumpbase, dumpbase_ext): New.\n+\t(dumpdir_length, dumpdir_trailing_dash_added): New.\n+\t(outbase, outbase_length): New.\n+\t(The Specs Language): Introduce %\".  Adjust %b and %B.\n+\t(ASM_FINAL_SPEC): Use %b.dwo for an aux output name always.\n+\tPrecede object file with %w when it's the primary output.\n+\t(cpp_debug_options): Do not pass on incoming -dumpdir,\n+\t-dumpbase and -dumpbase-ext options; recompute them with\n+\t%:dumps.\n+\t(cc1_options): Drop auxbase with and without compare-debug;\n+\tuse cpp_debug_options instead of dumpbase.  Mark asm output\n+\twith %w when it's the primary output.\n+\t(static_spec_functions): Drop %:compare-debug-auxbase-opt and\n+\t%:replace-exception.  Add %:dumps.\n+\t(driver_handle_option): Implement -save-temps=*/-dumpdir\n+\tmutual overriding logic.  Save dumpdir, dumpbase and\n+\tdumpbase-ext options.  Do not save output_file in\n+\tsave_temps_prefix.\n+\t(adds_single_suffix_p): New.\n+\t(single_input_file_index): New.\n+\t(process_command): Combine output dir, output base name, and\n+\tdumpbase into dumpdir and outbase.\n+\t(set_collect_gcc_options): Pass a possibly-adjusted -dumpdir.\n+\t(do_spec_1): Optionally dumpdir instead of save_temps_prefix,\n+\tand outbase instead of input_basename in %b, %B and in\n+\t-save-temps aux files.  Handle empty argument %\".\n+\t(driver::maybe_run_linker): Adjust dumpdir and auxbase.\n+\t(compare_debug_dump_opt_spec_function): Adjust gkd dump file\n+\tnaming.  Spec-quote the computed -fdump-final-insns file name.\n+\t(debug_auxbase_opt): Drop.\n+\t(compare_debug_self_opt_spec_function): Drop auxbase-strip\n+\tcomputation.\n+\t(compare_debug_auxbase_opt_spec_function): Drop.\n+\t(not_actual_file_p): New.\n+\t(replace_extension_spec_func): Drop.\n+\t(dumps_spec_func): New.\n+\t(convert_white_space): Split-out parts into...\n+\t(quote_string, whitespace_to_convert_p): ... these.  New.\n+\t(quote_spec_char_p, quote_spec, quote_spec_arg): New.\n+\t(driver::finalize): Release and reset new variables; drop\n+\tremoved ones.\n+\t* lto-wrapper.c (HAVE_TARGET_EXECUTABLE_SUFFIX): Define if...\n+\t(TARGET_EXECUTABLE_SUFFIX): ... is defined; define this to the\n+\tempty string otherwise.\n+\t(DUMPBASE_SUFFIX): Drop leading period.\n+\t(debug_objcopy): Use concat.\n+\t(run_gcc): Recognize -save-temps=* as -save-temps too.  Obey\n+\t-dumpdir.  Pass on empty dumpdir and dumpbase with a directory\n+\tcomponent.  Simplify temp file names.\n+\t* opts.c (finish_options): Drop aux base name handling.\n+\t(common_handle_option): Drop auxbase-strip handling.\n+\t* toplev.c (print_switch_values): Drop auxbase, add\n+\tdumpbase-ext.\n+\t(process_options): Derive aux_base_name from dump_base_name\n+\tand dump_base_ext.\n+\t(lang_dependent_init): Compute dump_base_ext along with\n+\tdump_base_name.  Disable stack usage and callgraph-info\tduring\n+\tlto generation and compare-debug recompilation.\n+\n+2020-05-26  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95211\n+\tPR target/95256\n+\t* config/i386/sse.md (<floatunssuffix>v2div2sf2): New expander.\n+\t(fix<fixunssuffix>_truncv2sfv2di2): Ditto.\n+\t(avx512dq_float<floatunssuffix>v2div2sf2): Renaming from\n+\tfloat<floatunssuffix>v2div2sf2.\n+\t(avx512dq_fix<fixunssuffix>_truncv2sfv2di2<mask_name>):\n+\tRenaming from fix<fixunssuffix>_truncv2sfv2di2<mask_name>.\n+\t(vec_pack<floatprefix>_float_<mode>): Adjust icode name.\n+\t(vec_unpack_<fixprefix>fix_trunc_lo_<mode>): Ditto.\n+\t(vec_unpack_<fixprefix>fix_trunc_hi_<mode>): Ditto.\n+\t* config/i386/i386-builtin.def: Ditto.\n+\t* emit-rtl.c (validate_subreg): Allow use of *paradoxical* vector\n+\tsubregs when both omode and imode are vector mode and\n+\thave the same inner mode.\n+\n 2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple-ssa-store-merging.c (merged_store_group::can_be_merged_into):"}, {"sha": "b7b667a34d155667b0421b4ee2700ec4d86c1cdf", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1 +1 @@\n-20200526\n+20200527"}, {"sha": "baac0be775726fc6f4baf1ede62583fa70f55d2e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,23 @@\n+2020-05-26  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\tPR ada/95333\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Never make a variant of\n+\tthe type.\n+\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc-interface/lang-specs.h (ADA_DUMPS_OPTIONS): Define in\n+\tterms of DUMPS_OPTIONS.  Replace occurrences of %{d*} %:dumps\n+\twith it.\n+\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc-interface/lang-specs.h: Drop auxbase and auxbase-strip.\n+\tUse %:dumps instead of -dumpbase.  Add %w for implicit .s\n+\tprimary output.\n+\t* switch.adb (Is_Internal_GCC_Switch): Recognize dumpdir and\n+\tdumpbase-ext.  Drop auxbase and auxbase-strip.\n+\n 2020-05-25  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb (Check_No_Hidden_State): Stop propagation at"}, {"sha": "7e263f72c8d9d96f9de039b5b8829fd108f8f1cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,11 @@\n+2020-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/95197\n+\t* cp-gimplify.c: Include omp-general.h.\n+\t(cp_genericize_r) <case OMP_DISTRIBUTE>: For class iteration\n+\tvariables in composite distribute parallel for, instantiate copy\n+\tctor of their types.\n+\n 2020-05-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94038"}, {"sha": "48284ed74e4252aab4ec215e8dc2b90a63bae1b6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,14 @@\n+2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95089\n+\t* trans-types.c (gfc_get_derived_type): Enlarge temporary to hold\n+\tmangled name \"_caf_symbol\".\n+\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* options.c (gfc_get_option_string): Drop auxbase, add\n+\tdumpbase_ext.\n+\n 2020-05-24  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95106"}, {"sha": "7be7fb0a974e989b1e2dbbbb65054cb90447271a", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,55 @@\n+2020-05-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/95306\n+\t* docs/topics/functions.rst\n+\t(gcc_jit_context_get_builtin_function): Document.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* dummy-frontend.c (jit_langhook_global_bindings_p): Remove\n+\tgcc_unreachable.\n+\t* jit-builtins.c (type_names): New array.\n+\t(get_string_for_type_id): New function.\n+\t(gcc::jit::builtins_manager::make_primitive_type): Show name of\n+\ttype in error messages.  Update cases to reflect the order in\n+\tbuiltin-types.def.  Implement cases for BT_INT8, BT_INT16,\n+\tBT_UINT8, BT_CONST_PTR, BT_VOLATILE_PTR, BT_INT_PTR, BT_FLOAT_PTR,\n+\tBT_CONST_DOUBLE_PTR, BT_SIZE, BT_CONST_SIZE.\n+\n+2020-05-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/topics/compatibility.rst: Fix underline.\n+\tFix missing labels.\n+\t* docs/topics/types.rst: Fix missing blank line.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n+2020-05-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/95296\n+\t* docs/topics/expressions.rst (Unary Operations): Document that\n+\tresult_type of gcc_jit_context_new_unary_op must be a numeric type.\n+\t(Binary Operations): Likewise for gcc_jit_context_new_binary_op.\n+\t(Global variables): Document that \"type\" of\n+\tgcc_jit_context_new_global must be non-`void`.\n+\t* docs/topics/function-pointers.rst\n+\t(gcc_jit_context_new_function_ptr_type): Document that the\n+\tparam_types must be non-void, but that return_type may be.\n+\t* docs/topics/functions.rst (Params): Document that\n+\tgcc_jit_context_new_param's type must be non-void.\n+\t(Functions): Likewise for gcc_jit_function_new_local.\n+\t* docs/topics/types.rst (gcc_jit_context_new_array_type): Document\n+\tthat the type must be non-void.\n+\t(gcc_jit_context_new_field): Likewise.\n+\t* docs/_build/texinfo/Makefile: Regenerate.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* libgccjit.c (gcc_jit_context_new_array_type): Fail if\n+\telement_type is void.\n+\t(gcc_jit_context_new_field): Likewise for \"type\".\n+\t(gcc_jit_context_new_function_ptr_type): Likewise for each\n+\telement of param_types.\n+\t(gcc_jit_context_new_param): Likewise for \"type\".\n+\t(gcc_jit_context_new_global): Likewise.\n+\t(gcc_jit_function_new_local): Likewise.\n+\t(gcc_jit_type_get_aligned): Likewise.\n+\n 2020-03-31  Andrea Corallo  <andrea.corallo@arm.com>\n \t    David Malcolm  <dmalcolm@redhat.com>\n "}, {"sha": "97d673fcd6d6e51f3428127082da8ce945a8a7fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,71 @@\n+2020-05-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/95306\n+\t* jit.dg/all-non-failing-tests.h: Add test-builtin-memcpy.c and\n+\ttest-pr95306-builtin-types.c.\n+\t* jit.dg/test-builtin-memcpy.c: New test.\n+\t* jit.dg/test-error-gcc_jit_context_get_builtin_function-unimplemented-type.c:\n+\tNew test.\n+\t* jit.dg/test-pr95306-builtin-types.c: New test.\n+\n+2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl   <kargl@gcc.gnu.org>\n+\n+\tPR libfortran/95104\n+\t* gfortran.dg/pr95104.f90: New test.\n+\n+2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95195\n+\t* gfortran.dg/namelist_97.f90: New test.\n+\n+2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95089\n+\t* gfortran.dg/pr95089.f90: New test.\n+\n+2020-05-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/95296\n+\t* jit.dg/test-error-gcc_jit_context_new_global-void-type.c: New\n+\ttest.\n+\t* jit.dg/test-error-gcc_jit_function_new_local-void-type.c: New\n+\ttest.\n+\t* jit.dg/test-fuzzer.c (fuzzer_init): Allow for make_random_type\n+\tto return NULL.\n+\t(get_random_type): Allow for elements in f->types to be NULL.\n+\n+2020-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/vperm-v2si.c: New test.\n+\t* gcc.target/i386/vperm-v4hi.c: Ditto.\n+\n+2020-05-26  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* g++.dg/coroutines/torture/co-ret-17-void-ret-coro.C: Check for\n+\tpromise destruction via a global variable.\n+\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.misc-tests/outputs.exp: New.\n+\t* gcc.misc-tests/outputs-0.c: New.\n+\t* gcc.misc-tests/outputs-1.c: New.\n+\t* gcc.misc-tests/outputs-2.c: New.\n+\t* lib/gcc-defs.exp (gcc_adjusted_linker_flags): New.\n+\t(gcc_adjust_linker_flags): New.\n+\t(dg-additional-files-options): Call it.  Pass -dumpbase \"\"\n+\twhen there are additional sources.\n+\t* lib/profopt.exp (profopt-execute): Pass the executable\n+\tsuffix with -dumpbase-ext.\n+\t* lib/scandump.exp (dump-base): Mention -dumpbase \"\" use.\n+\t* lib/scanltranstree.exp: Adjust dump suffix expectation.\n+\t* lib/scanwpaipa.exp: Likewise.\n+\n+2020-05-26  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/pr95211.c: New test.\n+\n 2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt84.adb: New test."}, {"sha": "83f079c75dc2db08751bbc59d9fa9911c2de8e5b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,15 @@\n+2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl   <kargl@gcc.gnu.org>\n+\n+\tPR libfortran/95104\n+\t* io/transfer.c (st_wait_async): Do not dereference NULL pointer.\n+\n+2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95195\n+\t* io/transfer.c (finalize_transfer): Generate runtime error for\n+\tnamelist input/output to unformatted file.\n+\n 2020-05-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/95191"}, {"sha": "d5d0a9bf9ad65e5d5c3054d9eb1bf4719cb3da9a", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,9 @@\n+2020-05-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Use git hash instead of SVN id.\n+\t* merge.sh: Use git instead of VCS.  Update paths\n+\trelative to upstream git repository.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "ec13cf35c3442a85cea43af7af1fa99051ef708c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,13 @@\n+2020-05-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/95322\n+\t* include/bits/stl_iterator.h (__detail::_Common_iter_proxy):\n+\tRemove and instead define it ...\n+\t(common_iterator::_Proxy): ... here.\n+\t(common_iterator::operator->): Use it.\n+\t* testsuite/24_iterators/common_iterator/2.cc: New test.\n+\t* testsuite/std/ranges/adaptors/95322.cc: New test.\n+\n 2020-05-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/93978"}, {"sha": "21d3df630e0a6e4062e6094904beaf8e0b7a6fea", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4169be95d5ccf21296ad4e483981d8375f1ae/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4169be95d5ccf21296ad4e483981d8375f1ae/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=c3a4169be95d5ccf21296ad4e483981d8375f1ae", "patch": "@@ -1,3 +1,11 @@\n+2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* lto-plugin.c (skip_in_suffix): New.\n+\t(exec_lto_wrapper): Use skip_in_suffix and concat to build\n+\tnon-temporary output names.\n+\t(onload): Look for -dumpdir in COLLECT_GCC_OPTIONS, and\n+\toverride link_output_name with it.\n+\n 2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/94998"}]}