{"sha": "58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "node_id": "C_kwDOANBUbNoAKDU4Zjg2NmJhNDViZjMzYzFiNGM1YzQ1ZTZkN2RkMDMyZjU3Y2ViOWU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-03T09:19:30Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-05T11:48:37Z"}, "message": "builtin: Cleanup handling of builtin macros\n\nThis commit regroups information related to builtin macros in one place instead\nof spreading it over multiple files. It also adds a simple bi-directional\nhashmap in order to perform lookups from a key as well as a value.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-macro.cc (builtin_macro_from_string): Move function.\n\t* ast/rust-macro.h (enum class): Move enum.\n\t(builtin_macro_from_string): Move function.\n\t* expand/rust-macro-builtins.cc (builtin_macro_from_string): New function.\n\t(make_macro_path_str): Use new bi-map.\n\t(parse_single_string_literal): Use new `BuiltinMacro` enum.\n\t(MacroBuiltin::include_bytes_handler): Likewise.\n\t(MacroBuiltin::include_str_handler): Likewise.\n\t(MacroBuiltin::compile_error_handler): Likewise.\n\t(MacroBuiltin::concat_handler): Likewise.\n\t(MacroBuiltin::env_handler): Likewise.\n\t(MacroBuiltin::include_handler): Likewise.\n\t(MacroBuiltin::sorry): New function.\n\t* expand/rust-macro-builtins.h (enum class): Move enum here.\n\t(builtin_macro_from_string): New function declaration.\n\t* resolve/rust-early-name-resolver.cc (EarlyNameResolver::visit): Use\n\tnew function.\n\t* util/rust-hir-map.cc (Mappings::insert_macro_def): Remove old\n\tbuiltin macro map.", "tree": {"sha": "bca320b79e952806b0fe3512853a8e2130b6b179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bca320b79e952806b0fe3512853a8e2130b6b179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a0114f52878a22819791a22c1f33bf6eb56d0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0114f52878a22819791a22c1f33bf6eb56d0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0114f52878a22819791a22c1f33bf6eb56d0b3"}], "stats": {"total": 307, "additions": 167, "deletions": 140}, "files": [{"sha": "4807c05008f74e5aec1f52fd19011e7c4407f7cb", "filename": "gcc/rust/ast/rust-macro.cc", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fast%2Frust-macro.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fast%2Frust-macro.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.cc?ref=58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "patch": "@@ -21,47 +21,5 @@\n namespace Rust {\n namespace AST {\n \n-BuiltinMacro\n-builtin_macro_from_string (const std::string &identifier)\n-{\n-  if (identifier == \"assert\")\n-    return BuiltinMacro::Assert;\n-\n-  if (identifier == \"file\")\n-    return BuiltinMacro::File;\n-\n-  if (identifier == \"line\")\n-    return BuiltinMacro::Line;\n-\n-  if (identifier == \"column\")\n-    return BuiltinMacro::Column;\n-\n-  if (identifier == \"include_bytes\")\n-    return BuiltinMacro::IncludeBytes;\n-\n-  if (identifier == \"include_str\")\n-    return BuiltinMacro::IncludeStr;\n-\n-  if (identifier == \"stringify\")\n-    return BuiltinMacro::Stringify;\n-\n-  if (identifier == \"compile_error\")\n-    return BuiltinMacro::CompileError;\n-\n-  if (identifier == \"concat\")\n-    return BuiltinMacro::Concat;\n-\n-  if (identifier == \"env\")\n-    return BuiltinMacro::Env;\n-\n-  if (identifier == \"cfg\")\n-    return BuiltinMacro::Cfg;\n-\n-  if (identifier == \"include\")\n-    return BuiltinMacro::Include;\n-\n-  gcc_unreachable ();\n-}\n-\n } // namespace AST\n } // namespace Rust"}, {"sha": "1df328f661ac9b45a1fc4b1037923f64d5eec464", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "patch": "@@ -25,6 +25,7 @@\n #include \"rust-location.h\"\n #include \"rust-item.h\"\n #include \"rust-make-unique.h\"\n+#include \"rust-macro-builtins.h\"\n \n namespace Rust {\n namespace AST {\n@@ -578,28 +579,6 @@ class MacroRulesDefinition : public VisItem\n   }\n };\n \n-/**\n- * All builtin macros possible\n- */\n-enum class BuiltinMacro\n-{\n-  Assert,\n-  File,\n-  Line,\n-  Column,\n-  IncludeBytes,\n-  IncludeStr,\n-  Stringify,\n-  CompileError,\n-  Concat,\n-  Env,\n-  Cfg,\n-  Include\n-};\n-\n-BuiltinMacro\n-builtin_macro_from_string (const std::string &identifier);\n-\n /* AST node of a macro invocation, which is replaced by the macro result at\n  * compile time. This is technically a sum-type/tagged-union, which represents\n  * both classic macro invocations and builtin macro invocations. Regular macro"}, {"sha": "67ec821664359126b27ba5f2deaf5a84eed75008", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 99, "deletions": 54, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "patch": "@@ -32,54 +32,91 @@\n #include \"bi-map.h\"\n \n namespace Rust {\n+static const BiMap<std::string, BuiltinMacro> builtins = {{\n+  {\"assert\", BuiltinMacro::Assert},\n+  {\"file\", BuiltinMacro::File},\n+  {\"line\", BuiltinMacro::Line},\n+  {\"column\", BuiltinMacro::Column},\n+  {\"include_bytes\", BuiltinMacro::IncludeBytes},\n+  {\"include_str\", BuiltinMacro::IncludeStr},\n+  {\"stringify\", BuiltinMacro::Stringify},\n+  {\"compile_error\", BuiltinMacro::CompileError},\n+  {\"concat\", BuiltinMacro::Concat},\n+  {\"env\", BuiltinMacro::Env},\n+  {\"option_env\", BuiltinMacro::OptionEnv},\n+  {\"cfg\", BuiltinMacro::Cfg},\n+  {\"include\", BuiltinMacro::Include},\n+  {\"format_args\", BuiltinMacro::FormatArgs},\n+  {\"format_args_nl\", BuiltinMacro::FormatArgsNl},\n+  {\"concat_idents\", BuiltinMacro::ConcatIdents},\n+  {\"module_path\", BuiltinMacro::ModulePath},\n+  {\"asm\", BuiltinMacro::Asm},\n+  {\"llvm_asm\", BuiltinMacro::LlvmAsm},\n+  {\"global_asm\", BuiltinMacro::GlobalAsm},\n+  {\"log_syntax\", BuiltinMacro::LogSyntax},\n+  {\"trace_macros\", BuiltinMacro::TraceMacros},\n+  {\"test\", BuiltinMacro::Test},\n+  {\"bench\", BuiltinMacro::Bench},\n+  {\"test_case\", BuiltinMacro::TestCase},\n+  {\"global_allocator\", BuiltinMacro::GlobalAllocator},\n+  {\"cfg_accessible\", BuiltinMacro::CfgAccessible},\n+  {\"RustcEncodable\", BuiltinMacro::RustcDecodable},\n+  {\"RustcDecodable\", BuiltinMacro::RustcEncodable},\n+}};\n+\n+std::unordered_map<\n+  std::string, std::function<AST::Fragment (Location, AST::MacroInvocData &)>>\n+  MacroBuiltin::builtin_transcribers = {\n+    {\"assert\", MacroBuiltin::assert_handler},\n+    {\"file\", MacroBuiltin::file_handler},\n+    {\"line\", MacroBuiltin::line_handler},\n+    {\"column\", MacroBuiltin::column_handler},\n+    {\"include_bytes\", MacroBuiltin::include_bytes_handler},\n+    {\"include_str\", MacroBuiltin::include_str_handler},\n+    {\"stringify\", MacroBuiltin::stringify_handler},\n+    {\"compile_error\", MacroBuiltin::compile_error_handler},\n+    {\"concat\", MacroBuiltin::concat_handler},\n+    {\"env\", MacroBuiltin::env_handler},\n+    {\"cfg\", MacroBuiltin::cfg_handler},\n+    {\"include\", MacroBuiltin::include_handler},\n+    /* Unimplemented macro builtins */\n+    {\"format_args\", MacroBuiltin::sorry},\n+    {\"option_env\", MacroBuiltin::sorry},\n+    {\"format_args_nl\", MacroBuiltin::sorry},\n+    {\"concat_idents\", MacroBuiltin::sorry},\n+    {\"module_path\", MacroBuiltin::sorry},\n+    {\"asm\", MacroBuiltin::sorry},\n+    {\"llvm_asm\", MacroBuiltin::sorry},\n+    {\"global_asm\", MacroBuiltin::sorry},\n+    {\"log_syntax\", MacroBuiltin::sorry},\n+    {\"trace_macros\", MacroBuiltin::sorry},\n+    {\"test\", MacroBuiltin::sorry},\n+    {\"bench\", MacroBuiltin::sorry},\n+    {\"test_case\", MacroBuiltin::sorry},\n+    {\"global_allocator\", MacroBuiltin::sorry},\n+    {\"cfg_accessible\", MacroBuiltin::sorry},\n+    {\"RustcEncodable\", MacroBuiltin::sorry},\n+    {\"RustcDecodable\", MacroBuiltin::sorry},\n+};\n+\n+// FIXME: This should return an Optional\n+BuiltinMacro\n+builtin_macro_from_string (const std::string &identifier)\n+{\n+  auto macro = builtins.lookup (identifier);\n+  rust_assert (builtins.is_iter_ok (macro));\n+\n+  return macro->second;\n+}\n+\n namespace {\n std::string\n-make_macro_path_str (AST::BuiltinMacro kind)\n+make_macro_path_str (BuiltinMacro kind)\n {\n-  std::string path_str;\n+  auto str = builtins.lookup (kind);\n+  rust_assert (builtins.is_iter_ok (str));\n \n-  switch (kind)\n-    {\n-    // TODO: Should this be a table lookup?\n-    case AST::BuiltinMacro::Assert:\n-      path_str = \"assert\";\n-      break;\n-    case AST::BuiltinMacro::File:\n-      path_str = \"file\";\n-      break;\n-    case AST::BuiltinMacro::Line:\n-      path_str = \"line\";\n-      break;\n-    case AST::BuiltinMacro::Column:\n-      path_str = \"column\";\n-      break;\n-    case AST::BuiltinMacro::IncludeBytes:\n-      path_str = \"include_bytes\";\n-      break;\n-    case AST::BuiltinMacro::IncludeStr:\n-      path_str = \"include_str\";\n-      break;\n-    case AST::BuiltinMacro::Stringify:\n-      path_str = \"stringify\";\n-      break;\n-    case AST::BuiltinMacro::CompileError:\n-      path_str = \"compile_error\";\n-      break;\n-    case AST::BuiltinMacro::Concat:\n-      path_str = \"concat\";\n-      break;\n-    case AST::BuiltinMacro::Env:\n-      path_str = \"env\";\n-      break;\n-    case AST::BuiltinMacro::Cfg:\n-      path_str = \"cfg\";\n-      break;\n-    case AST::BuiltinMacro::Include:\n-      path_str = \"include\";\n-      break;\n-    }\n-\n-  return path_str;\n+  return str->second;\n }\n \n static std::vector<std::unique_ptr<AST::MacroInvocation>>\n@@ -116,7 +153,7 @@ make_string (Location locus, std::string value)\n // TODO: Is this correct?\n static AST::Fragment\n make_eager_builtin_invocation (\n-  AST::BuiltinMacro kind, Location locus, AST::DelimTokenTree arguments,\n+  BuiltinMacro kind, Location locus, AST::DelimTokenTree arguments,\n   std::vector<std::unique_ptr<AST::MacroInvocation>> &&pending_invocations)\n {\n   auto path_str = make_macro_path_str (kind);\n@@ -224,7 +261,7 @@ try_expand_many_expr (Parser<MacroInvocLexer> &parser,\n    but otherwise enforce that these are the only tokens.  */\n \n std::unique_ptr<AST::Expr>\n-parse_single_string_literal (AST::BuiltinMacro kind,\n+parse_single_string_literal (BuiltinMacro kind,\n \t\t\t     AST::DelimTokenTree &invoc_token_tree,\n \t\t\t     Location invoc_locus, MacroExpander *expander)\n {\n@@ -384,7 +421,7 @@ MacroBuiltin::include_bytes_handler (Location invoc_locus,\n   /* Get target filename from the macro invocation, which is treated as a path\n      relative to the include!-ing file (currently being compiled).  */\n   auto lit_expr\n-    = parse_single_string_literal (AST::BuiltinMacro::IncludeBytes,\n+    = parse_single_string_literal (BuiltinMacro::IncludeBytes,\n \t\t\t\t   invoc.get_delim_tok_tree (), invoc_locus,\n \t\t\t\t   invoc.get_expander ());\n   if (lit_expr == nullptr)\n@@ -444,7 +481,7 @@ MacroBuiltin::include_str_handler (Location invoc_locus,\n   /* Get target filename from the macro invocation, which is treated as a path\n      relative to the include!-ing file (currently being compiled).  */\n   auto lit_expr\n-    = parse_single_string_literal (AST::BuiltinMacro::IncludeStr,\n+    = parse_single_string_literal (BuiltinMacro::IncludeStr,\n \t\t\t\t   invoc.get_delim_tok_tree (), invoc_locus,\n \t\t\t\t   invoc.get_expander ());\n   if (lit_expr == nullptr)\n@@ -527,7 +564,7 @@ MacroBuiltin::compile_error_handler (Location invoc_locus,\n \t\t\t\t     AST::MacroInvocData &invoc)\n {\n   auto lit_expr\n-    = parse_single_string_literal (AST::BuiltinMacro::CompileError,\n+    = parse_single_string_literal (BuiltinMacro::CompileError,\n \t\t\t\t   invoc.get_delim_tok_tree (), invoc_locus,\n \t\t\t\t   invoc.get_expander ());\n   if (lit_expr == nullptr)\n@@ -605,8 +642,7 @@ MacroBuiltin::concat_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n \n   auto pending_invocations = check_for_eager_invocations (expanded_expr);\n   if (!pending_invocations.empty ())\n-    return make_eager_builtin_invocation (AST::BuiltinMacro::Concat,\n-\t\t\t\t\t  invoc_locus,\n+    return make_eager_builtin_invocation (BuiltinMacro::Concat, invoc_locus,\n \t\t\t\t\t  invoc.get_delim_tok_tree (),\n \t\t\t\t\t  std::move (pending_invocations));\n \n@@ -672,7 +708,7 @@ MacroBuiltin::env_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n \n   auto pending = check_for_eager_invocations (expanded_expr);\n   if (!pending.empty ())\n-    return make_eager_builtin_invocation (AST::BuiltinMacro::Env, invoc_locus,\n+    return make_eager_builtin_invocation (BuiltinMacro::Env, invoc_locus,\n \t\t\t\t\t  invoc_token_tree,\n \t\t\t\t\t  std::move (pending));\n \n@@ -770,7 +806,7 @@ MacroBuiltin::include_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n   /* Get target filename from the macro invocation, which is treated as a path\n      relative to the include!-ing file (currently being compiled).  */\n   auto lit_expr\n-    = parse_single_string_literal (AST::BuiltinMacro::Include,\n+    = parse_single_string_literal (BuiltinMacro::Include,\n \t\t\t\t   invoc.get_delim_tok_tree (), invoc_locus,\n \t\t\t\t   invoc.get_expander ());\n   if (lit_expr == nullptr)\n@@ -877,6 +913,15 @@ MacroBuiltin::stringify_handler (Location invoc_locus,\n   auto token\n     = make_token (Token::make_string (invoc_locus, std::move (content)));\n   return AST::Fragment ({node}, std::move (token));\n-} // namespace Rust\n+}\n+\n+AST::Fragment\n+MacroBuiltin::sorry (Location invoc_locus, AST::MacroInvocData &invoc)\n+{\n+  rust_sorry_at (invoc_locus, \"unimplemented builtin macro: %qs\",\n+\t\t invoc.get_path ().as_string ().c_str ());\n+\n+  return AST::Fragment::create_error ();\n+}\n \n } // namespace Rust"}, {"sha": "8a36ddfed6f8431d50798c7311f5934b5f9f079a", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "patch": "@@ -23,6 +23,51 @@\n #include \"rust-ast-fragment.h\"\n #include \"rust-location.h\"\n \n+namespace Rust {\n+\n+// FIXME: Add a BuiltinMacro class which contains a name (or should it?), a\n+// transcriber and extra info if necessary\n+// then make a global map<string, BuiltinMacro>\n+\n+/**\n+ * All builtin macros possible\n+ */\n+enum class BuiltinMacro\n+{\n+  Assert,\n+  File,\n+  Line,\n+  Column,\n+  IncludeBytes,\n+  IncludeStr,\n+  Stringify,\n+  CompileError,\n+  Concat,\n+  Env,\n+  OptionEnv,\n+  Cfg,\n+  Include,\n+  FormatArgs,\n+  FormatArgsNl,\n+  ConcatIdents,\n+  ModulePath,\n+  Asm,\n+  LlvmAsm,\n+  GlobalAsm,\n+  LogSyntax,\n+  TraceMacros,\n+  Test,\n+  Bench,\n+  TestCase,\n+  GlobalAllocator,\n+  CfgAccessible,\n+  RustcDecodable,\n+  RustcEncodable,\n+};\n+\n+BuiltinMacro\n+builtin_macro_from_string (const std::string &identifier);\n+\n /**\n  * This class provides a list of builtin macros implemented by the compiler.\n  * The functions defined are called \"builtin transcribers\" in that they replace\n@@ -59,11 +104,13 @@\n  * This map is built as a static variable in the `insert_macro_def()` method\n  * of the `Mappings` class.\n  */\n-\n-namespace Rust {\n class MacroBuiltin\n {\n public:\n+  static std::unordered_map<\n+    std::string, std::function<AST::Fragment (Location, AST::MacroInvocData &)>>\n+    builtin_transcribers;\n+\n   static AST::Fragment assert_handler (Location invoc_locus,\n \t\t\t\t       AST::MacroInvocData &invoc);\n \n@@ -99,7 +146,20 @@ class MacroBuiltin\n \n   static AST::Fragment line_handler (Location invoc_locus,\n \t\t\t\t     AST::MacroInvocData &invoc);\n+\n+  static AST::Fragment sorry (Location invoc_locus, AST::MacroInvocData &invoc);\n };\n } // namespace Rust\n \n+namespace std {\n+template <> struct hash<Rust::BuiltinMacro>\n+{\n+  size_t operator() (const Rust::BuiltinMacro &macro) const noexcept\n+  {\n+    return hash<std::underlying_type<Rust::BuiltinMacro>::type> () (\n+      static_cast<std::underlying_type<Rust::BuiltinMacro>::type> (macro));\n+  }\n+};\n+} // namespace std\n+\n #endif // RUST_MACRO_BUILTINS_H"}, {"sha": "6bd4ebdd2ae565ed57f135f89ed1535e996a5cbc", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "patch": "@@ -19,6 +19,7 @@\n #include \"rust-early-name-resolver.h\"\n #include \"rust-ast-full.h\"\n #include \"rust-name-resolver.h\"\n+#include \"rust-macro-builtins.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -873,7 +874,7 @@ EarlyNameResolver::visit (AST::MacroInvocation &invoc)\n   if (is_builtin)\n     {\n       auto builtin_kind\n-\t= AST::builtin_macro_from_string (rules_def->get_rule_name ());\n+\t= builtin_macro_from_string (rules_def->get_rule_name ());\n       invoc.map_to_builtin (builtin_kind);\n     }\n "}, {"sha": "7b485a2147de198194ec2f006a0a630a515103c7", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=58f866ba45bf33c1b4c5c45e6d7dd032f57ceb9e", "patch": "@@ -868,23 +868,6 @@ Mappings::iterate_trait_items (\n void\n Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n {\n-  static std::map<\n-    std::string, std::function<AST::Fragment (Location, AST::MacroInvocData &)>>\n-    builtin_macros = {\n-      {\"assert\", MacroBuiltin::assert_handler},\n-      {\"file\", MacroBuiltin::file_handler},\n-      {\"line\", MacroBuiltin::line_handler},\n-      {\"column\", MacroBuiltin::column_handler},\n-      {\"include_bytes\", MacroBuiltin::include_bytes_handler},\n-      {\"include_str\", MacroBuiltin::include_str_handler},\n-      {\"stringify\", MacroBuiltin::stringify_handler},\n-      {\"compile_error\", MacroBuiltin::compile_error_handler},\n-      {\"concat\", MacroBuiltin::concat_handler},\n-      {\"env\", MacroBuiltin::env_handler},\n-      {\"cfg\", MacroBuiltin::cfg_handler},\n-      {\"include\", MacroBuiltin::include_handler},\n-    };\n-\n   auto outer_attrs = macro->get_outer_attrs ();\n   bool should_be_builtin\n     = std::any_of (outer_attrs.begin (), outer_attrs.end (),\n@@ -893,8 +876,9 @@ Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n \t\t   });\n   if (should_be_builtin)\n     {\n-      auto builtin = builtin_macros.find (macro->get_rule_name ());\n-      if (builtin != builtin_macros.end ())\n+      auto builtin\n+\t= MacroBuiltin::builtin_transcribers.find (macro->get_rule_name ());\n+      if (builtin != MacroBuiltin::builtin_transcribers.end ())\n \tmacro->set_builtin_transcriber (builtin->second);\n       else\n \trust_error_at (macro->get_locus (),"}]}