{"sha": "1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmYjVmOGY5Njk1ZWQxMTY2MzYyZTNhNTA4YTJmM2Q5YzdiMDIzOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-09-21T21:42:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-09-21T21:42:02Z"}, "message": "dwarf2out.c (add_const_value_attribute): Multiply by length, not 4.\n\n        * dwarf2out.c (add_const_value_attribute): Multiply by length, not 4.\n\n        * dwarf2out.c (tree_add_const_value_attribute): New fn.\n        (gen_variable_die): Call it for non-definitions.\n\n        * dwarf2out.c (die_struct): Add die_mark field.\n        (mark_dies, unmark_dies): New fns.\n        (clear_die_sizes): Remove.\n        (print_die): Check die_symbol rather than die_offset.\n        (build_abbrev_table, output_pubnames, output_aranges): Check\n        die_mark rather than die_offset.\n        (output_comp_unit): Move calc_die_sizes after build_abbrev_table.\n        Call mark_dies.\n\nFrom-SVN: r36565", "tree": {"sha": "e03df27e502599a9ba1c07a9acf073020f32809f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e03df27e502599a9ba1c07a9acf073020f32809f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2047e26f26df59ce6e571ceaff5e6cb7bbd3f930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2047e26f26df59ce6e571ceaff5e6cb7bbd3f930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2047e26f26df59ce6e571ceaff5e6cb7bbd3f930"}], "stats": {"total": 105, "additions": 88, "deletions": 17}, "files": [{"sha": "49524b493533c47ead16ea77e1d6782c91531b02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238", "patch": "@@ -1,3 +1,19 @@\n+2000-09-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* dwarf2out.c (add_const_value_attribute): Multiply by length, not 4.\n+\n+\t* dwarf2out.c (tree_add_const_value_attribute): New fn.\n+\t(gen_variable_die): Call it for non-definitions.\n+\n+\t* dwarf2out.c (die_struct): Add die_mark field.\n+\t(mark_dies, unmark_dies): New fns.\n+\t(clear_die_sizes): Remove.\n+\t(print_die): Check die_symbol rather than die_offset.\n+\t(build_abbrev_table, output_pubnames, output_aranges): Check\n+\tdie_mark rather than die_offset.\n+\t(output_comp_unit): Move calc_die_sizes after build_abbrev_table.\n+\tCall mark_dies.\n+\n Thu 21-Sep-2000 18:19:05 BST  Neil Booth  <NeilB@earthling.net>\n \n \t* cppfiles.c (lookup_include_file): Rename to open_file."}, {"sha": "f061f575b793645db438648debe9e23de7e17c1f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 72, "deletions": 17, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1bfb5f8f9695ed1166362e3a508a2f3d9c7b0238", "patch": "@@ -3021,6 +3021,7 @@ typedef struct die_struct\n   dw_die_ref die_sib;\n   dw_offset die_offset;\n   unsigned long die_abbrev;\n+  int die_mark;\n }\n die_node;\n \n@@ -3378,7 +3379,8 @@ static unsigned long size_of_string\tPARAMS ((const char *));\n static int constant_size\t\tPARAMS ((long unsigned));\n static unsigned long size_of_die\tPARAMS ((dw_die_ref));\n static void calc_die_sizes\t\tPARAMS ((dw_die_ref));\n-static void clear_die_sizes\t\tPARAMS ((dw_die_ref));\n+static void mark_dies\t\t\tPARAMS ((dw_die_ref));\n+static void unmark_dies\t\t\tPARAMS ((dw_die_ref));\n static unsigned long size_of_line_prolog PARAMS ((void));\n static unsigned long size_of_pubnames\tPARAMS ((void));\n static unsigned long size_of_aranges\tPARAMS ((void));\n@@ -3418,6 +3420,7 @@ static void add_AT_location_description\tPARAMS ((dw_die_ref,\n static void add_data_member_location_attribute PARAMS ((dw_die_ref, tree));\n static void add_const_value_attribute\tPARAMS ((dw_die_ref, rtx));\n static void add_location_or_const_value_attribute PARAMS ((dw_die_ref, tree));\n+static void tree_add_const_value_attribute PARAMS ((dw_die_ref, tree));\n static void add_name_attribute\t\tPARAMS ((dw_die_ref, const char *));\n static void add_bound_info\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute, tree));\n@@ -4893,7 +4896,7 @@ print_die (die, outfile)\n \tcase dw_val_class_die_ref:\n \t  if (AT_ref (a) != NULL)\n \t    {\n-\t      if (AT_ref (a)->die_offset == 0)\n+\t      if (AT_ref (a)->die_symbol)\n \t\tfprintf (outfile, \"die -> label: %s\", AT_ref (a)->die_symbol);\n \t      else\n \t\tfprintf (outfile, \"die -> %lu\", AT_ref (a)->die_offset);\n@@ -5401,11 +5404,11 @@ build_abbrev_table (die)\n   register dw_attr_ref d_attr, a_attr;\n \n   /* Scan the DIE references, and mark as external any that refer to\n-     DIEs from other CUs (i.e. those with cleared die_offset).  */\n+     DIEs from other CUs (i.e. those which are not marked).  */\n   for (d_attr = die->die_attr; d_attr; d_attr = d_attr->dw_attr_next)\n     {\n       if (AT_class (d_attr) == dw_val_class_die_ref\n-\t  && AT_ref (d_attr)->die_offset == 0)\n+\t  && AT_ref (d_attr)->die_mark == 0)\n \t{\n \t  if (AT_ref (d_attr)->die_symbol == 0)\n \t    abort ();\n@@ -5583,18 +5586,31 @@ calc_die_sizes (die)\n     next_die_offset += 1;\n }\n \n-/* Clear the offsets and sizes for a die and its children.  We do this so\n+/* Set the marks for a die and its children.  We do this so\n    that we know whether or not a reference needs to use FORM_ref_addr; only\n-   DIEs in the same CU will have non-zero offsets available.  */\n+   DIEs in the same CU will be marked.  We used to clear out the offset\n+   and use that as the flag, but ran into ordering problems.  */\n \n static void\n-clear_die_sizes (die)\n+mark_dies (die)\n      dw_die_ref die;\n {\n   register dw_die_ref c;\n-  die->die_offset = 0;\n+  die->die_mark = 1;\n+  for (c = die->die_child; c; c = c->die_sib)\n+    mark_dies (c);\n+}\n+\n+/* Clear the marks for a die and its children.  */\n+\n+static void\n+unmark_dies (die)\n+     dw_die_ref die;\n+{\n+  register dw_die_ref c;\n+  die->die_mark = 0;\n   for (c = die->die_child; c; c = c->die_sib)\n-    clear_die_sizes (c);\n+    unmark_dies (c);\n }\n \n /* Return the size of the line information prolog generated for the\n@@ -6069,12 +6085,15 @@ output_comp_unit (die)\n   if (die->die_child == 0)\n     return;\n \n+  /* Mark all the DIEs in this CU so we know which get local refs.  */\n+  mark_dies (die);\n+\n+  build_abbrev_table (die);\n+\n   /* Initialize the beginning DIE offset - and calculate sizes/offsets.   */\n   next_die_offset = DWARF_COMPILE_UNIT_HEADER_SIZE;\n   calc_die_sizes (die);\n \n-  build_abbrev_table (die);\n-\n   if (die->die_symbol)\n     {\n       secname = (char *) alloca (strlen (die->die_symbol) + 24);\n@@ -6090,10 +6109,10 @@ output_comp_unit (die)\n   output_compilation_unit_header ();\n   output_die (die);\n \n-  /* Leave the sizes on the main CU, since we do it last and we use the\n-     sizes in output_pubnames.  */\n+  /* Leave the marks on the main CU, so we can check them in\n+     output_pubnames.  */\n   if (die->die_symbol)\n-    clear_die_sizes (die);\n+    unmark_dies (die);\n }\n \n /* The DWARF2 pubname for a nested thingy looks like \"A::f\".  The output\n@@ -6172,7 +6191,7 @@ output_pubnames ()\n       register pubname_ref pub = &pubname_table[i];\n \n       /* We shouldn't see pubnames for DIEs outside of the main CU.  */\n-      if (pub->die->die_offset == 0)\n+      if (pub->die->die_mark == 0)\n \tabort ();\n \n       ASM_OUTPUT_DWARF_DATA (asm_out_file, pub->die->die_offset);\n@@ -6289,7 +6308,7 @@ output_aranges ()\n       dw_die_ref die = arange_table[i];\n \n       /* We shouldn't see aranges for DIEs outside of the main CU.  */\n-      if (die->die_offset == 0)\n+      if (die->die_mark == 0)\n \tabort ();\n \n       if (die->die_tag == DW_TAG_subprogram)\n@@ -7674,7 +7693,7 @@ add_const_value_attribute (die, rtl)\n \tif (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t  {\n \t    register unsigned length = GET_MODE_SIZE (mode) / sizeof (long);\n- \t    long *array = (long *) xmalloc (sizeof (long) * 4);\n+ \t    long *array = (long *) xmalloc (sizeof (long) * length);\n \t    REAL_VALUE_TYPE rv;\n \n \t    REAL_VALUE_FROM_CONST_DOUBLE (rv, rtl);\n@@ -7931,6 +7950,40 @@ add_location_or_const_value_attribute (die, decl)\n     }\n }\n \n+/* If we don't have a copy of this variable in memory for some reason (such\n+   as a C++ member constant that doesn't have an out-of-line definition),\n+   we should tell the debugger about the constant value.  */\n+\n+static void\n+tree_add_const_value_attribute (var_die, decl)\n+     dw_die_ref var_die;\n+     tree decl;\n+{\n+  tree init = DECL_INITIAL (decl);\n+  tree type = TREE_TYPE (decl);\n+\n+  if (TREE_READONLY (decl) && ! TREE_THIS_VOLATILE (decl) && init\n+      && initializer_constant_valid_p (init, type) == null_pointer_node)\n+    /* OK */;\n+  else\n+    return;\n+\n+  switch (TREE_CODE (type))\n+    {\n+    case INTEGER_TYPE:\n+      if (host_integerp (init, 0))\n+\tadd_AT_unsigned (var_die, DW_AT_const_value,\n+\t\t\t TREE_INT_CST_LOW (init));\n+      else\n+\tadd_AT_long_long (var_die, DW_AT_const_value,\n+\t\t\t  TREE_INT_CST_HIGH (init),\n+\t\t\t  TREE_INT_CST_LOW (init));\n+      break;\n+\n+    default:;\n+    }\n+}\n+     \n /* Generate an DW_AT_name attribute given some string value to be included as\n    the value of the attribute.  */\n \n@@ -9369,6 +9422,8 @@ gen_variable_die (decl, context_die)\n       add_location_or_const_value_attribute (var_die, decl);\n       add_pubname (decl, var_die);\n     }\n+  else\n+    tree_add_const_value_attribute (var_die, decl);\n }\n \n /* Generate a DIE to represent a label identifier.  */"}]}