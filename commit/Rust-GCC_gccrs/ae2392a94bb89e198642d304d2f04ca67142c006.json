{"sha": "ae2392a94bb89e198642d304d2f04ca67142c006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyMzkyYTk0YmI4OWUxOTg2NDJkMzA0ZDJmMDRjYTY3MTQyYzAwNg==", "commit": {"author": {"name": "Basile Starynkevitch", "email": "basile@starynkevitch.net", "date": "2009-05-26T17:33:33Z"}, "committer": {"name": "Basile Starynkevitch", "email": "bstarynk@gcc.gnu.org", "date": "2009-05-26T17:33:33Z"}, "message": "plugins.texi (Loading plugins): typo.\n\n\n2009-05-26  Basile Starynkevitch  <basile@starynkevitch.net>\n\n\t* gcc/doc/plugins.texi\n\t(Loading plugins): typo.\n\t(Plugin callbacks): Documented PLUGIN_INFO, PLUGIN_GGC_START,\n\tPLUGIN_GGC_MARKING, PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS.\n\t(Interacting with the GCC Garbage Collector): Added new section.\n\t(Giving information about a plugin): Added new section for\n\tPLUGIN_INFO.\n\t* gcc/testsuite/gcc.dg/plugin/plugin.exp: Added ggcplug.c test plugin\n\twith ggcplug-test-1.c for testing PLUGIN_GGC_MARKING etc...\n\t* gcc/testsuite/gcc.dg/plugin/ggcplug-test-1.c: Added new file.\n\t* gcc/testsuite/gcc.dg/plugin/ggcplug.c: Added new file.\n\t* gcc/ggc.h (ggc_register_root_tab): Added declaration.\n\t* gcc/gcc-plugin.h (PLUGIN_GGC_START, PLUGIN_GGC_MARKING)\n\t(PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS): Added new events.\n\t(register_callback): Improved comment in declaration.\n\t* gcc/ggc-common.c (const_ggc_root_tab_t) Added new typedef for\n\tvectors.\n\t(extra_root_vec) Added static variable for dynamic roots\n\tregistration.\n\t(ggc_register_root_tab) Added new routine.\n\t(ggc_mark_roots) Added iteration inside extra_root_vec, and invoke\n\tPLUGIN_GGC_MARKING event.\n\t* gcc/ggc-zone.c: Include plugin.h.\n\t(ggc_collect): Invoke PLUGIN_GGC_START & PLUGIN_GGC_END events.\n\t* gcc/ggc-page.c: Include plugin.h.\n\t(ggc_collect): Invoke PLUGIN_GGC_START & PLUGIN_GGC_END events.\n\t* gcc/plugin.c (plugin_event_name): added names of PLUGIN_GGC_START,\n\tPLUGIN_GGC_MARKING, PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS\n\t(register_callback): check lack of callbacks for\n\tpseudo-events. Added handling of PLUGIN_REGISTER_GGC_ROOTS,\n\tPLUGIN_GGC_START, PLUGIN_GGC_MARKING, PLUGIN_GGC_END.\n\t(invoke_plugin_callbacks): Handle PLUGIN_GGC_START,\n\tPLUGIN_GGC_MARKING, PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS.\n\t* gcc/Makefile.in (ggc-common.o, ggc-zone.o, ggc-page.o): Added\n\tdependency on plugin.h.\n\t(plugin.o): Added dependency on ggc.h...\n\nFrom-SVN: r147878", "tree": {"sha": "878cbdf019958acd271cdf6e396a37afeaf98aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/878cbdf019958acd271cdf6e396a37afeaf98aa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae2392a94bb89e198642d304d2f04ca67142c006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2392a94bb89e198642d304d2f04ca67142c006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2392a94bb89e198642d304d2f04ca67142c006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2392a94bb89e198642d304d2f04ca67142c006/comments", "author": {"login": "bstarynk", "id": 90412, "node_id": "MDQ6VXNlcjkwNDEy", "avatar_url": "https://avatars.githubusercontent.com/u/90412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstarynk", "html_url": "https://github.com/bstarynk", "followers_url": "https://api.github.com/users/bstarynk/followers", "following_url": "https://api.github.com/users/bstarynk/following{/other_user}", "gists_url": "https://api.github.com/users/bstarynk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstarynk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstarynk/subscriptions", "organizations_url": "https://api.github.com/users/bstarynk/orgs", "repos_url": "https://api.github.com/users/bstarynk/repos", "events_url": "https://api.github.com/users/bstarynk/events{/privacy}", "received_events_url": "https://api.github.com/users/bstarynk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06d9ea4246bae199a43808c323c4ac1e62ff8b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d9ea4246bae199a43808c323c4ac1e62ff8b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d9ea4246bae199a43808c323c4ac1e62ff8b07"}], "stats": {"total": 354, "additions": 341, "deletions": 13}, "files": [{"sha": "3528121988cb98f2d976a42f8dd5ac5ccc6ea9af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -1,3 +1,43 @@\n+\n+2009-05-26  Basile Starynkevitch  <basile@starynkevitch.net>\n+\n+\t* doc/plugins.texi\n+\t(Loading plugins): typo.\n+\t(Plugin callbacks): Documented PLUGIN_INFO, PLUGIN_GGC_START,\n+\tPLUGIN_GGC_MARKING, PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS.\n+\t(Interacting with the GCC Garbage Collector): Added new section.\n+\t(Giving information about a plugin): Added new section for\n+\tPLUGIN_INFO.\n+\t* testsuite/gcc.dg/plugin/plugin.exp: Added ggcplug.c test plugin\n+\twith ggcplug-test-1.c for testing PLUGIN_GGC_MARKING etc...\n+\t* testsuite/gcc.dg/plugin/ggcplug-test-1.c: Added new file.\n+\t* testsuite/gcc.dg/plugin/ggcplug.c: Added new file.\n+\t* ggc.h (ggc_register_root_tab): Added declaration.\n+\t* gcc-plugin.h (PLUGIN_GGC_START, PLUGIN_GGC_MARKING)\n+\t(PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS): Added new events.\n+\t(register_callback): Improved comment in declaration.\n+\t* ggc-common.c (const_ggc_root_tab_t) Added new typedef for\n+\tvectors.\n+\t(extra_root_vec) Added static variable for dynamic roots\n+\tregistration.\n+\t(ggc_register_root_tab) Added new routine.\n+\t(ggc_mark_roots) Added iteration inside extra_root_vec, and invoke\n+\tPLUGIN_GGC_MARKING event.\n+\t* ggc-zone.c: Include plugin.h.\n+\t(ggc_collect): Invoke PLUGIN_GGC_START & PLUGIN_GGC_END events.\n+\t* ggc-page.c: Include plugin.h.\n+\t(ggc_collect): Invoke PLUGIN_GGC_START & PLUGIN_GGC_END events.\n+\t* plugin.c (plugin_event_name): added names of PLUGIN_GGC_START,\n+\tPLUGIN_GGC_MARKING, PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS\n+\t(register_callback): check lack of callbacks for\n+\tpseudo-events. Added handling of PLUGIN_REGISTER_GGC_ROOTS,\n+\tPLUGIN_GGC_START, PLUGIN_GGC_MARKING, PLUGIN_GGC_END.\n+\t(invoke_plugin_callbacks): Handle PLUGIN_GGC_START,\n+\tPLUGIN_GGC_MARKING, PLUGIN_GGC_END, PLUGIN_REGISTER_GGC_ROOTS.\n+\t* Makefile.in (ggc-common.o, ggc-zone.o, ggc-page.o): Added\n+\tdependency on plugin.h.\n+\t(plugin.o): Added dependency on ggc.h...\n+\n 2009-05-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/40248"}, {"sha": "33b02032b8edfea0c40fb15313567f669cb95014", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -2046,15 +2046,16 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(CPP_ID_DATA_H) tree-chrec.h $(CFGLAYOUT_H) $(EXCEPT_H) output.h \\\n \t$(CFGLOOP_H)\n \n-ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n-\t$(HASHTAB_H) $(TOPLEV_H) $(PARAMS_H) hosthooks.h $(HOSTHOOKS_DEF_H)\n+ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n+\t$(GGC_H) $(HASHTAB_H) $(TOPLEV_H) $(PARAMS_H) hosthooks.h\t\\\n+\t$(HOSTHOOKS_DEF_H) vec.h plugin.h\n \n ggc-page.o: ggc-page.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-\t$(FLAGS_H) $(TOPLEV_H) $(GGC_H) $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H) $(TREE_FLOW_H)\n+\t$(FLAGS_H) $(TOPLEV_H) $(GGC_H) $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H) $(TREE_FLOW_H) plugin.h\n \n ggc-zone.o: ggc-zone.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n \t$(TREE_H) $(FLAGS_H) $(TOPLEV_H) $(GGC_H) $(TIMEVAR_H) $(TM_P_H) \\\n-\t$(PARAMS_H) $(BITMAP_H) $(VARRAY_H)\n+\t$(PARAMS_H) $(BITMAP_H) $(VARRAY_H) plugin.h\n \n ggc-none.o: ggc-none.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n \t$(BCONFIG_H)\n@@ -2502,7 +2503,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H)\n \n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TOPLEV_H) $(TREE_H) $(TREE_PASS_H) intl.h $(PLUGIN_VERSION_H)\n+   $(TOPLEV_H) $(TREE_H) $(TREE_PASS_H) intl.h $(PLUGIN_VERSION_H) $(GGC_H)\n \n main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H)\n "}, {"sha": "7f2f5a510f3c667e724f6e4bef6e76dd45838382", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -9,7 +9,7 @@\n \n @section Loading Plugins\n \n-Plugins are supported on platforms that support @option{-ld\n+Plugins are supported on platforms that support @option{-ldl\n -rdynamic}.  They are loaded by the compiler using @code{dlopen}\n and invoked at pre-determined locations in the compilation\n process.\n@@ -65,6 +65,25 @@ struct plugin_name_args\n If initialization fails, @code{plugin_init} must return a non-zero\n value.  Otherwise, it should return 0.\n \n+The version of the GCC compiler loading the plugin is described by the\n+following structure:\n+\n+@smallexample\n+struct plugin_gcc_version\n+@{\n+  const char *basever;\n+  const char *datestamp;\n+  const char *devphase;\n+  const char *revision;\n+  const char *configuration_arguments;\n+@};\n+@end smallexample\n+\n+The function @code{plugin_default_version_check} takes two pointers to\n+such structure and compare them field by field. It can be used by the\n+plugin's @code{plugin_init} function.\n+\n+\n @subsection Plugin callbacks\n \n Callback functions have the following prototype:\n@@ -87,13 +106,20 @@ enum plugin_event\n   PLUGIN_FINISH_UNIT,           /* Useful for summary processing.  */\n   PLUGIN_CXX_CP_PRE_GENERICIZE, /* Allows to see low level AST in C++ FE.  */\n   PLUGIN_FINISH,                /* Called before GCC exits.  */\n+  PLUGIN_INFO,                  /* Information about the plugin. */\n+  PLUGIN_GGC_START,\t\t/* Called at start of GCC Garbage Collection. */\n+  PLUGIN_GGC_MARKING,\t\t/* Extend the GGC marking. */\n+  PLUGIN_GGC_END,\t\t/* Called at end of GGC. */\n+  PLUGIN_REGISTER_GGC_ROOTS,\t/* Register an extra GGC root table. */\n   PLUGIN_ATTRIBUTES,            /* Called during attribute registration */\n   PLUGIN_EVENT_LAST             /* Dummy event used for indexing callback\n                                    array.  */\n @};\n @end smallexample\n \n-To register a callback, the plugin calls @code{register_callback} with the arguments:\n+\n+To register a callback, the plugin calls @code{register_callback} with\n+the arguments:\n \n @itemize\n @item @code{char *name}: Plugin name.\n@@ -102,6 +128,9 @@ To register a callback, the plugin calls @code{register_callback} with the argum\n @item @code{void *user_data}: Pointer to plugin-specific data.\n @end itemize\n \n+For the PLUGIN_PASS_MANAGER_SETUP, PLUGIN_INFO, and\n+PLUGIN_REGISTER_GGC_ROOTS pseudo-events the @code{callback} should be\n+null, and the @code{user_data} is specific.\n \n @section Interacting with the pass manager\n \n@@ -153,6 +182,50 @@ plugin_init (struct plugin_name_args *plugin_info,\n   ...\n @}\n @end smallexample\n+\n+\n+@section Interacting with the GCC Garbage Collector \n+\n+Some plugins may want to be informed when GGC (the GCC Garbage\n+Collector) is running. They can register callbacks for the\n+@code{PLUGIN_GGC_START} and @code{PLUGIN_GGC_END} events (for which\n+the callback is called with a null @code{gcc_data}) to be notified of\n+the start or end of the GCC garbage collection.\n+\n+Some plugins may need to have GGC mark additional data. This can be\n+done by registering a callback (called with a null @code{gcc_data})\n+for the @code{PLUGIN_GGC_MARKING} event. Such callbacks can call the\n+@code{ggc_set_mark} routine, preferably thru the @code{ggc_mark} macro\n+(and conversly, these routines should usually not be used in plugins\n+outside of the @code{PLUGIN_GGC_MARKING} event).\n+\n+Some plugins may need to add extra GGC root tables, e.g. to handle\n+their own @code{GTY}-ed data. This can be done with the\n+@code{PLUGIN_REGISTER_GGC_ROOTS} pseudo-event with a null callback and the\n+extra root table as @code{user_data}.\n+\n+You should understand the details of memory management inside GCC\n+before using @code{PLUGIN_GGC_MARKING} or\n+@code{PLUGIN_REGISTER_GGC_ROOTS}.\n+\n+\n+@section Giving information about a plugin\n+\n+A plugin should give some information to the user about itself. This\n+uses the following structure:\n+\n+@smallexample\n+struct plugin_info\n+@{\n+  const char *version;\n+  const char *help;\n+@};\n+@end smallexample\n+\n+Such a structure is passed as the @code{user_data} by the plugin's\n+init routine using @code{register_callback} with the\n+@code{PLUGIN_INFO} pseudo-event and a null callback.\n+\n @section Registering custom attributes\n \n For analysis purposes it is useful to be able to add custom attributes."}, {"sha": "2567bf730d247b1fae93d281d74ede60b040ce91", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -28,7 +28,11 @@ enum plugin_event\n   PLUGIN_FINISH_UNIT,           /* Useful for summary processing.  */\n   PLUGIN_CXX_CP_PRE_GENERICIZE, /* Allows to see low level AST in C++ FE.  */\n   PLUGIN_FINISH,                /* Called before GCC exits.  */\n-  PLUGIN_INFO,                  /* Information about the plugin */\n+  PLUGIN_INFO,                  /* Information about the plugin. */\n+  PLUGIN_GGC_START,\t\t/* Called at start of GCC Garbage Collection. */\n+  PLUGIN_GGC_MARKING,\t\t/* Extend the GGC marking. */\n+  PLUGIN_GGC_END,\t\t/* Called at end of GGC. */\n+  PLUGIN_REGISTER_GGC_ROOTS,\t/* Register an extra GGC root table. */\n   PLUGIN_ATTRIBUTES,            /* Called during attribute registration.  */\n   PLUGIN_EVENT_LAST             /* Dummy event used for indexing callback\n                                    array.  */\n@@ -128,7 +132,13 @@ typedef void (*plugin_callback_func) (void *gcc_data, void *user_data);\n    PLUGIN_NAME - display name for this plugin\n    EVENT       - which event the callback is for\n    CALLBACK    - the callback to be called at the event\n-   USER_DATA   - plugin-provided data   */\n+   USER_DATA   - plugin-provided data.\n+*/\n+\n+/* This is also called without a callback routine for the\n+   PLUGIN_PASS_MANAGER_SETUP, PLUGIN_INFO, PLUGIN_REGISTER_GGC_ROOTS\n+   pseudo-events, with a specific user_data.\n+  */\n \n extern void register_callback (const char *plugin_name,\n                                enum plugin_event event,"}, {"sha": "2499ff51cd7ff59eeb9cf196fc80c6ed8ab655a2", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"hosthooks.h\"\n #include \"hosthooks-def.h\"\n+#include \"plugin.h\"\n+#include \"vec.h\"\n \n #ifdef HAVE_SYS_RESOURCE_H\n # include <sys/resource.h>\n@@ -86,6 +88,34 @@ ggc_htab_delete (void **slot, void *info)\n   return 1;\n }\n \n+\n+/* This extra vector of dynamically registered root_tab-s is used by\n+   ggc_mark_roots and gives the ability to dynamically add new GGC root\n+   tables, for instance from some plugins; this vector is a heap one\n+   [since it is used by GGC internally!] */\n+typedef const struct ggc_root_tab* const_ggc_root_tab_t;\n+DEF_VEC_P(const_ggc_root_tab_t);\n+DEF_VEC_ALLOC_P(const_ggc_root_tab_t, heap);\n+static VEC(const_ggc_root_tab_t, heap) *extra_root_vec;\n+\n+\n+/* Dynamically register a new GGC root table RT. This is useful for\n+   plugins. */\n+\n+void \n+ggc_register_root_tab (const struct ggc_root_tab* rt)\n+{\n+  if (!rt)\n+    return;\n+  if (!extra_root_vec) \n+    {\n+      int vlen = 32;\n+      extra_root_vec = VEC_alloc (const_ggc_root_tab_t, heap, vlen);\n+    }\n+  VEC_safe_push (const_ggc_root_tab_t, heap, extra_root_vec, rt);\n+}\n+\n+\n /* Iterate through all registered roots and mark each element.  */\n \n void\n@@ -104,7 +134,21 @@ ggc_mark_roots (void)\n   for (rt = gt_ggc_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       for (i = 0; i < rti->nelt; i++)\n-\t(*rti->cb)(*(void **)((char *)rti->base + rti->stride * i));\n+\t(*rti->cb) (*(void **)((char *)rti->base + rti->stride * i));\n+\n+  if (extra_root_vec \n+      && VEC_length(const_ggc_root_tab_t,extra_root_vec) > 0)\n+    {\n+      const_ggc_root_tab_t rtp = NULL;\n+      for (i=0; \n+\t   VEC_iterate(const_ggc_root_tab_t, extra_root_vec, i, rtp); \n+\t   i++) \n+\t{\n+\t  for (rti = rtp; rti->base != NULL; rti++)\n+\t    for (i = 0; i < rti->nelt; i++)\n+\t      (*rti->cb) (*(void **) ((char *)rti->base + rti->stride * i));\n+\t}\n+    }\n \n   if (ggc_protect_identifiers)\n     ggc_mark_stringpool ();\n@@ -123,6 +167,9 @@ ggc_mark_roots (void)\n \n   if (! ggc_protect_identifiers)\n     ggc_purge_stringpool ();\n+\n+  /* Some plugins may call ggc_set_mark from here.  */\n+  invoke_plugin_callbacks (PLUGIN_GGC_MARKING, NULL);\n }\n \n /* Allocate a block of memory, then clear it.  */"}, {"sha": "4f872b294f16c006af1cc135ecf4f80bc02c771c", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"params.h\"\n #include \"tree-flow.h\"\n+#include \"plugin.h\"\n \n /* Prefer MAP_ANON(YMOUS) to /dev/zero, since we don't need to keep a\n    file open.  Prefer either to valloc.  */\n@@ -1937,6 +1938,8 @@ ggc_collect (void)\n   /* Indicate that we've seen collections at this context depth.  */\n   G.context_depth_collections = ((unsigned long)1 << (G.context_depth + 1)) - 1;\n \n+  invoke_plugin_callbacks (PLUGIN_GGC_START, NULL);\n+\n   clear_marks ();\n   ggc_mark_roots ();\n #ifdef GATHER_STATISTICS\n@@ -1948,6 +1951,8 @@ ggc_collect (void)\n \n   G.allocated_last_gc = G.allocated;\n \n+  invoke_plugin_callbacks (PLUGIN_GGC_END, NULL);\n+\n   timevar_pop (TV_GC);\n \n   if (!quiet_flag)"}, {"sha": "442c80e6713905c01f6db6e50bdcd3310b2d9ebf", "filename": "gcc/ggc-zone.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc-zone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc-zone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-zone.c?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"params.h\"\n #include \"bitmap.h\"\n+#include \"plugin.h\"\n \n /* Prefer MAP_ANON(YMOUS) to /dev/zero, since we don't need to keep a\n    file open.  Prefer either to valloc.  */\n@@ -2029,6 +2030,8 @@ ggc_collect (void)\n \t}\n     }\n \n+  invoke_plugin_callbacks (PLUGIN_GGC_START, NULL);\n+\n   /* Start by possibly collecting the main zone.  */\n   main_zone.was_collected = false;\n   marked |= ggc_collect_1 (&main_zone, true);\n@@ -2093,6 +2096,8 @@ ggc_collect (void)\n \t}\n     }\n \n+  invoke_plugin_callbacks (PLUGIN_GGC_END, NULL);\n+\n   timevar_pop (TV_GC);\n }\n "}, {"sha": "e3471e45353610900ad85465f22a829f67f1f1c3", "filename": "gcc/ggc.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -1,6 +1,7 @@\n /* Garbage collection for the GNU compiler.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n-   Free Software Foundation, Inc.\n+\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007,\n+   2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -270,6 +271,10 @@ extern const char *ggc_alloc_string (const char *contents, int length);\n    function is called, not during allocations.  */\n extern void ggc_collect\t(void);\n \n+/* Register an additional root table.  This can be useful for some\n+   plugins.  Does nothing if the passed pointer is null. */\n+extern void ggc_register_root_tab (const struct ggc_root_tab *);\n+\n /* Return the number of bytes allocated at the indicated address.  */\n extern size_t ggc_get_size (const void *);\n "}, {"sha": "0b5515e490746cb4bdbe2ac45288252f25980913", "filename": "gcc/plugin.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"plugin.h\"\n #include \"timevar.h\"\n+#include \"ggc.h\"\n+\n #ifdef ENABLE_PLUGIN\n #include \"plugin-version.h\"\n #endif\n@@ -51,6 +53,10 @@ const char *plugin_event_name[] =\n   \"PLUGIN_CXX_CP_PRE_GENERICIZE\",\n   \"PLUGIN_FINISH\",\n   \"PLUGIN_INFO\",\n+  \"PLUGIN_GGC_START\",\n+  \"PLUGIN_GGC_MARKING\",\n+  \"PLUGIN_GGC_END\",\n+  \"PLUGIN_REGISTER_GGC_ROOTS\",\n   \"PLUGIN_EVENT_LAST\"\n };\n \n@@ -472,14 +478,23 @@ register_callback (const char *plugin_name,\n   switch (event)\n     {\n       case PLUGIN_PASS_MANAGER_SETUP:\n+\tgcc_assert (!callback);\n         register_pass (plugin_name, (struct plugin_pass *) user_data);\n         break;\n       case PLUGIN_INFO:\n+\tgcc_assert (!callback);\n \tregister_plugin_info (plugin_name, (struct plugin_info *) user_data);\n \tbreak;\n+      case PLUGIN_REGISTER_GGC_ROOTS:\n+\tgcc_assert (!callback);\n+        ggc_register_root_tab ((const struct ggc_root_tab*) user_data);\n+\tbreak;\n       case PLUGIN_FINISH_TYPE:\n       case PLUGIN_FINISH_UNIT:\n       case PLUGIN_CXX_CP_PRE_GENERICIZE:\n+      case PLUGIN_GGC_START:\n+      case PLUGIN_GGC_MARKING:\n+      case PLUGIN_GGC_END:\n       case PLUGIN_ATTRIBUTES:\n       case PLUGIN_FINISH:\n         {\n@@ -524,6 +539,9 @@ invoke_plugin_callbacks (enum plugin_event event, void *gcc_data)\n       case PLUGIN_CXX_CP_PRE_GENERICIZE:\n       case PLUGIN_ATTRIBUTES:\n       case PLUGIN_FINISH:\n+      case PLUGIN_GGC_START:\n+      case PLUGIN_GGC_MARKING:\n+      case PLUGIN_GGC_END:\n         {\n           /* Iterate over every callback registered with this event and\n              call it.  */\n@@ -535,6 +553,7 @@ invoke_plugin_callbacks (enum plugin_event event, void *gcc_data)\n \n       case PLUGIN_PASS_MANAGER_SETUP:\n       case PLUGIN_EVENT_LAST:\n+      case PLUGIN_REGISTER_GGC_ROOTS:\n       default:\n         gcc_assert (false);\n     }"}, {"sha": "74e68bb82ec707fa743b3929ad78ec41bd8e3e76", "filename": "gcc/testsuite/gcc.dg/plugin/ggcplug-test-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug-test-1.c?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -0,0 +1,12 @@\n+/* Test the ggcplug plugin.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int main()\n+{\n+  int i=0, j=0;\n+  for (i= 0; i<1000; i++)\n+    if (i%8 == 0)\n+      j++;\n+  return 0;\n+}"}, {"sha": "136404ae65feee36b37983d994cf78e2db4b1a93", "filename": "gcc/testsuite/gcc.dg/plugin/ggcplug.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug.c?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -0,0 +1,109 @@\n+/* This plugin tests the GGC related plugin events.  */\n+/* { dg-options \"-O\" } */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"toplev.h\"\n+#include \"basic-block.h\"\n+#include \"gimple.h\"\n+#include \"tree.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+#include \"gcc-plugin.h\"\n+\n+\n+/* The initialization routine exposed to and called by GCC. The spec of this\n+   function is defined in gcc/gcc-plugin.h.\n+\n+   Note that this function needs to be named exactly \"plugin_init\".  */\n+\n+\n+/* our callback is the same for all PLUGIN_GGC_START,\n+   PLUGIN_GGC_MARKING, PLUGIN_GGC_END events; it just increments the\n+   user_data which is an int */\n+static void increment_callback (void *gcc_data, void *user_data);\n+\n+/* our counters are user_data */\n+static int our_ggc_start_counter;\n+static int our_ggc_end_counter;\n+static int our_ggc_marking_counter;\n+\n+/* our empty GGC extra root table */\n+static const struct ggc_root_tab our_xtratab[] = {\n+  LAST_GGC_ROOT_TAB\n+};\n+\n+int\n+plugin_init ((struct plugin_name_args *plugin_info,\n+\t      struct plugin_gcc_version *version)\n+{\n+  const char *plugin_name = plugin_info->base_name;\n+  int argc = plugin_info->argc;\n+  struct plugin_argument *argv = plugin_info->argv;\n+  if (!plugin_default_version_check (version, version))\n+    return 1;\n+  /* Process the plugin arguments. This plugin takes the following arguments:\n+     count-ggc-start count-ggc-end count-ggc-mark */\n+  for (i = 0; i < argc; ++i)\n+    {\n+      if (!strcmp (argv[i].key, \"count-ggc-start\"))\n+\t{\n+\t  if (argv[i].value)\n+\t    warning (0, G_ (\"option '-fplugin-arg-%s-count-ggc-start=%s'\"\n+\t\t\t    \" ignored (superfluous '=%s')\"),\n+\t\t     plugin_name, argv[i].value, argv[i].value);\n+\t  else\n+\t    register_callback (\"ggcplug\",\n+\t\t\t       PLUGIN_GGC_START,\n+\t\t\t       increment_callback,\n+\t\t\t       (void *) &our_ggc_start_counter);\n+\t}\n+      else if (!strcmp (argv[i].key, \"count-ggc-end\"))\n+\t{\n+\t  if (argv[i].value)\n+\t    warning (0, G_ (\"option '-fplugin-arg-%s-count-ggc-end=%s'\"\n+\t\t\t    \" ignored (superfluous '=%s')\"),\n+\t\t     plugin_name, argv[i].value, argv[i].value);\n+\t  else\n+\t    register_callback (\"ggcplug\",\n+\t\t\t       PLUGIN_GGC_END,\n+\t\t\t       increment_callback,\n+\t\t\t       (void *) &our_ggc_end_counter);\n+\t}\n+      else if (!strcmp (argv[i].key, \"count-ggc-mark\"))\n+\t{\n+\t  if (argv[i].value)\n+\t    warning (0, G_ (\"option '-fplugin-arg-%s-count-ggc-mark=%s'\"\n+\t\t\t    \" ignored (superfluous '=%s')\"),\n+\t\t     plugin_name, argv[i].value, argv[i].value);\n+\t  else\n+\t    register_callback (\"ggcplug\",\n+\t\t\t       PLUGIN_GGC_MARKING,\n+\t\t\t       increment_callback,\n+\t\t\t       (void *) &our_ggc_marking_counter);\n+\t}\n+      else if (!strcmp (argv[i].key, \"test-extra-root\"))\n+\t{\n+\t  if (argv[i].value)\n+\t    warning (0, G_ (\"option '-fplugin-arg-%s-test-extra-root=%s'\"\n+\t\t\t    \" ignored (superfluous '=%s')\"),\n+\t\t     plugin_name, argv[i].value, argv[i].value);\n+\t  else\n+\t    register_callback (\"ggcplug\",\n+\t\t\t       PLUGIN_REGISTER_GGC_ROOTS,\n+\t\t\t       NULL,\n+\t\t\t       (void *) our_xtratab);\n+\t}\n+    }\n+}\n+\n+static void\n+increment_callback (void *gcc_data, void *user_data)\n+{\n+  int *usercountptr = (int *) user_data;\n+  gcc_assert (!gcc_data);\n+  gcc_assert (user_data);\n+  (*usercountptr)++;\n+}"}, {"sha": "63ee74427f6039ba990862954eab12b8323fe8a1", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2392a94bb89e198642d304d2f04ca67142c006/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=ae2392a94bb89e198642d304d2f04ca67142c006", "patch": "@@ -47,7 +47,9 @@ load_lib plugin-support.exp\n # Specify the plugin source file and the associated test files in a list.\n # plugin_test_list={ {plugin1 test1 test2 ...} {plugin2 test1 ...} ... }\n set plugin_test_list [list \\\n-    { selfassign.c self-assign-test-1.c self-assign-test-2.c } ]\n+    { selfassign.c self-assign-test-1.c self-assign-test-2.c } \\\n+    { ggcplug.c ggcplug-test-1.c } \\\n+]\n \n foreach plugin_test $plugin_test_list {\n     # Replace each source file with its full-path name"}]}