{"sha": "454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU0ZDBjYzdkZDNlYmM0MmI1MmQ0NGIwYTY4MWViNmMxNGY1ODIwZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-01-17T19:43:13Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-01-17T19:43:13Z"}, "message": "document -fno-guess-branch-probability option\n\nFrom-SVN: r39096", "tree": {"sha": "c1ea06892a37aaa1493ad281873854f6e1c074de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ea06892a37aaa1493ad281873854f6e1c074de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e/comments", "author": null, "committer": null, "parents": [{"sha": "5f3aebeadf5ab4252900620f88a2159b2bafca3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3aebeadf5ab4252900620f88a2159b2bafca3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3aebeadf5ab4252900620f88a2159b2bafca3f"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "1d129cba2508d5d7acd080dcf421dc38977b21fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e", "patch": "@@ -1,9 +1,14 @@\n+2001-01-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * invoke.texi (-fno-guess-branch-probability): New option.\n+\n Wed Jan 17 13:26:34 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* combine.c (try_combine): Don't set i3_subst_into_i2 for\n \tcase of making new double-word constant.\n \tRevert last change: instead just test i3_subst_into_i2.\n \n+>>>>>>> 1.9022\n 2001-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (cmpqi_minus_1): Use {b} for QImode operation."}, {"sha": "8a7a9222f66c6128a17c43c99c0ad3f1b5b494aa", "filename": "gcc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=454d0cc7dd3ebc42b52d44b0a681eb6c14f5820e", "patch": "@@ -244,7 +244,8 @@ in the following sections.\n -finline-functions  -finline-limit=@var{n}  -fkeep-inline-functions @gol\n -fkeep-static-consts  -fmove-all-movables @gol\n -fno-default-inline  -fno-defer-pop @gol\n--fno-function-cse  -fno-inline  -fno-math-errno  -fno-peephole @gol\n+-fno-function-cse   -fno-guess-branch-probability\n+-fno-inline  -fno-math-errno  -fno-peephole @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n -foptimize-sibling-calls  -freduce-all-givs @gol\n -fregmove  -frename-registers @gol\n@@ -3123,6 +3124,15 @@ branch is mostly to take, the @samp{REG_BR_PROB} values are used to\n exactly determine which path is taken more often.\n @end ifset\n \n+@item -fno-guess-branch-probability\n+Sometimes gcc will opt to guess branch probabilities when none are\n+available from either profile directed feedback (@samp{-fprofile-arcs})\n+or @samp(__builtin_expect).  In a hard real-time system, people don't\n+want different runs of the compiler to produce code that has different\n+behavior; minimizing non-determinism is of paramount import.  This\n+switch allows users to reduce non-determinism, possibly at the expense\n+of inferior optimization.\n+\n @item -fstrict-aliasing\n Allows the compiler to assume the strictest aliasing rules applicable to\n the language being compiled.  For C (and C++), this activates"}]}