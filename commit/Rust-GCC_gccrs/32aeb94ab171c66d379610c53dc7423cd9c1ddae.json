{"sha": "32aeb94ab171c66d379610c53dc7423cd9c1ddae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJhZWI5NGFiMTcxYzY2ZDM3OTYxMGM1M2RjNzQyM2NkOWMxZGRhZQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2014-01-19T23:17:43Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2014-01-19T23:17:43Z"}, "message": "re PR libfortran/59771 (Cleanup handling of Gw.0 and Gw.0Ee format)\n\n2014-01-19  Jerry DeLisle  <jvdelisle@gcc.gnu>\n\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n\n\tPR libfortran/59771\n\tPR libfortran/59774\n\tPR libfortran/59836\n\t* io/write_float.def (output_float): Fix wrong handling of the\n\tFw.0 format.\n\t(output_float_FMT_G_): Fixes rounding issues with -m32.\n\nCo-Authored-By: Dominique d'Humieres <dominiq@lps.ens.fr>\n\nFrom-SVN: r206785", "tree": {"sha": "a6359e54c7c40f08ced929b1de5a0ed36e6a6642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6359e54c7c40f08ced929b1de5a0ed36e6a6642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32aeb94ab171c66d379610c53dc7423cd9c1ddae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32aeb94ab171c66d379610c53dc7423cd9c1ddae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32aeb94ab171c66d379610c53dc7423cd9c1ddae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32aeb94ab171c66d379610c53dc7423cd9c1ddae/comments", "author": null, "committer": null, "parents": [{"sha": "cdafab3de6518fa0055425aea8fcc82fc2b53872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdafab3de6518fa0055425aea8fcc82fc2b53872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdafab3de6518fa0055425aea8fcc82fc2b53872"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "3e3ef975d4063fbfc7315a2035ab14219d7b1fa9", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32aeb94ab171c66d379610c53dc7423cd9c1ddae/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32aeb94ab171c66d379610c53dc7423cd9c1ddae/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=32aeb94ab171c66d379610c53dc7423cd9c1ddae", "patch": "@@ -1,3 +1,13 @@\n+2014-01-19  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR libfortran/59771\n+\tPR libfortran/59774\n+\tPR libfortran/59836\n+\t* io/write_float.def (output_float): Fix wrong handling of the\n+\tFw.0 format.\n+\t(output_float_FMT_G_): Fixes rounding issues with -m32.\n+\n 2014-01-11  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>"}, {"sha": "4777cda93dd6e4a08d369ad1933392a6ab30328d", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32aeb94ab171c66d379610c53dc7423cd9c1ddae/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32aeb94ab171c66d379610c53dc7423cd9c1ddae/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=32aeb94ab171c66d379610c53dc7423cd9c1ddae", "patch": "@@ -373,7 +373,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   updown:\n \n   rchar = '0';\n-  if (w > 0 && d == 0 && p == 0)\n+  if (ft != FMT_F && nbefore == 0 && w > 0 && d == 0 && p == 0)\n     nbefore = 1;\n   /* Scan for trailing zeros to see if we really need to round it.  */\n   for(i = nbefore + nafter; i < ndigits; i++)\n@@ -386,13 +386,14 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   do_rnd:\n  \n   if (nbefore + nafter == 0)\n+    /* Handle the case Fw.0 and value < 1.0 */\n     {\n       ndigits = 0;\n       if (nzero_real == d && digits[0] >= rchar)\n \t{\n \t  /* We rounded to zero but shouldn't have */\n-\t  nzero--;\n-\t  nafter = 1;\n+\t  nbefore = 1;\n+\t  digits--;\n \t  digits[0] = '1';\n \t  ndigits = 1;\n \t}\n@@ -1018,13 +1019,14 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n   int d = f->u.real.d;\\\n   int w = f->u.real.w;\\\n   fnode newf;\\\n-  GFC_REAL_ ## x rexp_d, r = 0.5;\\\n+  GFC_REAL_ ## x exp_d, r = 0.5, r_sc;\\\n   int low, high, mid;\\\n   int ubound, lbound;\\\n   char *p, pad = ' ';\\\n   int save_scale_factor, nb = 0;\\\n   bool result;\\\n   int nprinted, precision;\\\n+  volatile GFC_REAL_ ## x temp;\\\n \\\n   save_scale_factor = dtp->u.p.scale_factor;\\\n \\\n@@ -1043,10 +1045,13 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n \tbreak;\\\n     }\\\n \\\n-  rexp_d = calculate_exp_ ## x (-d);\\\n-  if ((m > 0.0 && ((m < 0.1 - 0.1 * r * rexp_d) || (rexp_d * (m + r) >= 1.0)))\\\n+  exp_d = calculate_exp_ ## x (d);\\\n+  r_sc = (1 - r / exp_d);\\\n+  temp = 0.1 * r_sc;\\\n+  if ((m > 0.0 && ((m < temp) || (r >= (exp_d - m))))\\\n       || ((m == 0.0) && !(compile_options.allow_std\\\n-\t\t\t  & (GFC_STD_F2003 | GFC_STD_F2008))))\\\n+\t\t\t  & (GFC_STD_F2003 | GFC_STD_F2008)))\\\n+      ||  d == 0)\\\n     { \\\n       newf.format = FMT_E;\\\n       newf.u.real.w = w;\\\n@@ -1066,10 +1071,9 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n \\\n   while (low <= high)\\\n     { \\\n-      volatile GFC_REAL_ ## x temp;\\\n       mid = (low + high) / 2;\\\n \\\n-      temp = (calculate_exp_ ## x (mid - 1) * (1 - r * rexp_d));\\\n+      temp = (calculate_exp_ ## x (mid - 1) * r_sc);\\\n \\\n       if (m < temp)\\\n         { \\"}]}