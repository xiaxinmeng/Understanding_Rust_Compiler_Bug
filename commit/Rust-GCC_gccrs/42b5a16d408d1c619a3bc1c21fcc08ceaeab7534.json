{"sha": "42b5a16d408d1c619a3bc1c21fcc08ceaeab7534", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiNWExNmQ0MDhkMWM2MTlhM2JjMWMyMWZjYzA4Y2VhZWFiNzUzNA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-05-01T09:12:29Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-05-01T09:12:29Z"}, "message": "intrinsic.c (add_functions): Fixed ELEMENTAL specifications.\n\n2007-05-01  Daniel Franke  <franke.daniel@gmail.com>\n\n        * intrinsic.c (add_functions): Fixed ELEMENTAL specifications.\n        (add_subroutines): Replaced magic numbers in function calls by\n        ELEMENTAL and NOT_ELEMENTAL respectively.\n        * intrinsic.texi (MVBITS): Changed class to elemental subroutine.\n        (RANDOM_NUMBER): Changed class to subroutine.\n        (HUGE, TINY): Changed class to inquiry function.\n\nFrom-SVN: r124320", "tree": {"sha": "8f13638ed202c763166701641d34d5149004ed71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f13638ed202c763166701641d34d5149004ed71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0700ca3a406e2247b5d9cd9c9ecde143da6a975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0700ca3a406e2247b5d9cd9c9ecde143da6a975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0700ca3a406e2247b5d9cd9c9ecde143da6a975"}], "stats": {"total": 156, "additions": 80, "deletions": 76}, "files": [{"sha": "ca1991d0c5d494090b6806db56944d1be89629d5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=42b5a16d408d1c619a3bc1c21fcc08ceaeab7534", "patch": "@@ -1,3 +1,12 @@\n+2007-05-01  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* intrinsic.c (add_functions): Fixed ELEMENTAL specifications.\n+\t(add_subroutines): Replaced magic numbers in function calls by\n+\tELEMENTAL and NOT_ELEMENTAL respectively.\n+\t* intrinsic.texi (MVBITS): Changed class to elemental subroutine.\n+\t(RANDOM_NUMBER): Changed class to subroutine.\n+\t(HUGE, TINY): Changed class to inquiry function.\n+\n 2007-04-30  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* trans-const.c (gfc_conv_mpz_to_tree): Use mpz_get_double_int."}, {"sha": "de74678d2683c8fb59000fc4e7ef3b757fe8c685", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=42b5a16d408d1c619a3bc1c21fcc08ceaeab7534", "patch": "@@ -1199,7 +1199,7 @@ add_functions (void)\n \n   make_generic (\"cmplx\", GFC_ISYM_CMPLX, GFC_STD_F77);\n \n-  add_sym_0 (\"command_argument_count\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_0 (\"command_argument_count\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_F2003, NULL, NULL, NULL);\n \n   make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n@@ -1394,7 +1394,7 @@ add_functions (void)\n \n   make_generic (\"exponent\", GFC_ISYM_EXPONENT, GFC_STD_F95);\n \n-  add_sym_0 (\"fdate\", ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_GNU,\n+  add_sym_0 (\"fdate\", NOT_ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_fdate);\n \n   make_generic (\"fdate\", GFC_ISYM_FDATE, GFC_STD_GNU);\n@@ -1461,17 +1461,17 @@ add_functions (void)\n \n   make_generic (\"getcwd\", GFC_ISYM_GETCWD, GFC_STD_GNU);\n \n-  add_sym_0 (\"getgid\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"getgid\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_getgid);\n \n   make_generic (\"getgid\", GFC_ISYM_GETGID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getpid\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"getpid\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_getpid);\n \n   make_generic (\"getpid\", GFC_ISYM_GETPID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getuid\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"getuid\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_getuid);\n \n   make_generic (\"getuid\", GFC_ISYM_GETUID, GFC_STD_GNU);\n@@ -1500,13 +1500,13 @@ add_functions (void)\n \n   make_generic (\"iand\", GFC_ISYM_IAND, GFC_STD_F95);\n \n-  add_sym_2 (\"and\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"and\", NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_and, gfc_resolve_and,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"and\", GFC_ISYM_AND, GFC_STD_GNU);\n \n-  add_sym_0 (\"iargc\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"iargc\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, NULL);\n \n   make_generic (\"iargc\", GFC_ISYM_IARGC, GFC_STD_GNU);\n@@ -1542,13 +1542,13 @@ add_functions (void)\n \n   make_generic (\"ieor\", GFC_ISYM_IEOR, GFC_STD_F95);\n \n-  add_sym_2 (\"xor\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"xor\", NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_xor, gfc_resolve_xor,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"xor\", GFC_ISYM_XOR, GFC_STD_GNU);\n \n-  add_sym_0 (\"ierrno\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"ierrno\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_ierrno);\n \n   make_generic (\"ierrno\", GFC_ISYM_IERRNO, GFC_STD_GNU);\n@@ -1602,7 +1602,7 @@ add_functions (void)\n \n   make_generic (\"ior\", GFC_ISYM_IOR, GFC_STD_F95);\n \n-  add_sym_2 (\"or\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"or\", NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_or, gfc_resolve_or,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -1646,7 +1646,7 @@ add_functions (void)\n \n   make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n-  add_sym_2 (\"kill\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"kill\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_kill, NULL, gfc_resolve_kill,\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n@@ -2096,7 +2096,7 @@ add_functions (void)\n \n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n-  add_sym_2 (\"signal\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"signal\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_signal, NULL, gfc_resolve_signal,\n \t     num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -2190,7 +2190,7 @@ add_functions (void)\n \n   make_generic (\"symlnk\", GFC_ISYM_SYMLNK, GFC_STD_GNU);\n \n-  add_sym_1 (\"system\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"system\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, NULL,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n@@ -2216,12 +2216,12 @@ add_functions (void)\n \n   make_generic (\"tanh\", GFC_ISYM_TANH, GFC_STD_F77);\n \n-  add_sym_0 (\"time\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"time\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_time);\n \n   make_generic (\"time\", GFC_ISYM_TIME, GFC_STD_GNU);\n \n-  add_sym_0 (\"time8\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"time8\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_time8);\n \n   make_generic (\"time8\", GFC_ISYM_TIME8, GFC_STD_GNU);\n@@ -2328,240 +2328,240 @@ add_subroutines (void)\n   if ((gfc_option.allow_std & GFC_STD_GNU) || gfc_option.flag_all_intrinsics)\n     make_noreturn();\n \n-  add_sym_1s (\"cpu_time\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_1s (\"cpu_time\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n \t      tm, BT_REAL, dr, REQUIRED);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_2s (\"ctime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ctime\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ctime_sub, NULL, gfc_resolve_ctime_sub,\n \t      tm, BT_INTEGER, di, REQUIRED, res, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"idate\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"idate\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_idate,\n \t      vl, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_1s (\"itime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"itime\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_itime,\n \t      vl, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_2s (\"ltime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ltime\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ltime_gmtime, NULL, gfc_resolve_ltime,\n \t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_2s (\"gmtime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"gmtime\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ltime_gmtime, NULL, gfc_resolve_gmtime,\n \t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1s (\"second\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"second\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n \t      tm, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2s (\"chdir\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"chdir\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_chdir_sub, NULL, gfc_resolve_chdir_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"chmod\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"chmod\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_chmod_sub, NULL, gfc_resolve_chmod_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_4s (\"date_and_time\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_4s (\"date_and_time\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_date_and_time, NULL, NULL,\n \t      dt, BT_CHARACTER, dc, OPTIONAL, tm, BT_CHARACTER, dc, OPTIONAL,\n \t      zn, BT_CHARACTER, dc, OPTIONAL, vl, BT_INTEGER, di, OPTIONAL);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_2s (\"etime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"etime\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n-  add_sym_2s (\"dtime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"dtime\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n-  add_sym_1s (\"fdate\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"fdate\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fdate_sub, NULL, gfc_resolve_fdate_sub,\n \t      dt, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"gerror\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"gerror\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_gerror, NULL, gfc_resolve_gerror, res, BT_CHARACTER,\n \t      dc, REQUIRED);\n \n-  add_sym_2s (\"getcwd\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"getcwd\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"getenv\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"getenv\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, NULL,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER, dc,\n \t      REQUIRED);\n \n-  add_sym_2s (\"getarg\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"getarg\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_getarg,\n \t      c, BT_INTEGER, di, REQUIRED, vl, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"getlog\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"getlog\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_getlog, NULL, gfc_resolve_getlog, c, BT_CHARACTER,\n \t      dc, REQUIRED);\n \n   /* F2003 commandline routines.  */\n \n-  add_sym_3s (\"get_command\", 0, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_3s (\"get_command\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command,\n \t      com, BT_CHARACTER, dc, OPTIONAL,\n \t      length, BT_INTEGER, di, OPTIONAL,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_4s (\"get_command_argument\", 0, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_4s (\"get_command_argument\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command_argument,\n \t      num, BT_INTEGER, di, REQUIRED, val, BT_CHARACTER, dc, OPTIONAL,\n \t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL);\n \n   /* F2003 subroutine to get environment variables.  */\n \n-  add_sym_5s (\"get_environment_variable\", 0, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_5s (\"get_environment_variable\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_environment_variable,\n \t      name, BT_CHARACTER, dc, REQUIRED,\n \t      val, BT_CHARACTER, dc, OPTIONAL,\n \t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL,\n \t      trim_name, BT_LOGICAL, dl, OPTIONAL);\n \n-  add_sym_2s (\"move_alloc\", 0, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_2s (\"move_alloc\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      gfc_check_move_alloc, NULL, NULL,\n \t      f, BT_UNKNOWN, 0, REQUIRED,\n \t      t, BT_UNKNOWN, 0, REQUIRED);\n \n-  add_sym_5s (\"mvbits\", 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_5s (\"mvbits\", ELEMENTAL, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_mvbits, gfc_simplify_mvbits, gfc_resolve_mvbits,\n \t      f, BT_INTEGER, di, REQUIRED, fp, BT_INTEGER, di, REQUIRED,\n \t      ln, BT_INTEGER, di, REQUIRED, t, BT_INTEGER, di, REQUIRED,\n \t      tp, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1s (\"random_number\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_1s (\"random_number\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_random_number, NULL, gfc_resolve_random_number,\n \t      h, BT_REAL, dr, REQUIRED);\n \n-  add_sym_3s (\"random_seed\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_3s (\"random_seed\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_random_seed, NULL, NULL,\n \t      sz, BT_INTEGER, di, OPTIONAL, pt, BT_INTEGER, di, OPTIONAL,\n \t      gt, BT_INTEGER, di, OPTIONAL);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_3s (\"alarm\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"alarm\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_alarm_sub, NULL, gfc_resolve_alarm_sub,\n \t      sec, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"srand\", 0, BT_UNKNOWN, di, GFC_STD_GNU,\n+  add_sym_1s (\"srand\", NOT_ELEMENTAL,  BT_UNKNOWN, di, GFC_STD_GNU,\n \t      gfc_check_srand, NULL, gfc_resolve_srand,\n \t      c, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_1s (\"exit\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"exit\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_exit, NULL, gfc_resolve_exit,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n   if ((gfc_option.allow_std & GFC_STD_GNU) || gfc_option.flag_all_intrinsics)\n     make_noreturn();\n \n-  add_sym_3s (\"fgetc\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fgetc\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fgetc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"fget\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"fget\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fget_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"flush\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"flush\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_flush, NULL, gfc_resolve_flush,\n \t      c, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"fputc\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fputc\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fputc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"fput\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"fput\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fput_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"free\", 0, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_free,\n+  add_sym_1s (\"free\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_free,\n \t      NULL, gfc_resolve_free, c, BT_INTEGER, ii, REQUIRED);\n \n-  add_sym_2s (\"ftell\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ftell\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ftell_sub, NULL, gfc_resolve_ftell_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, of, BT_INTEGER, ii, REQUIRED);\n \n-  add_sym_2s (\"hostnm\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"hostnm\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_hostnm_sub, NULL, gfc_resolve_hostnm_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"kill\", 0, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_kill_sub,\n+  add_sym_3s (\"kill\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_kill_sub,\n \t      NULL, gfc_resolve_kill_sub, c, BT_INTEGER, di, REQUIRED,\n \t      val, BT_INTEGER, di, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"link\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"link\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_link_sub, NULL, gfc_resolve_link_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"perror\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"perror\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_perror, NULL, gfc_resolve_perror,\n \t      c, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_3s (\"rename\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"rename\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_rename_sub, NULL, gfc_resolve_rename_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"sleep\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"sleep\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_sleep_sub, NULL, gfc_resolve_sleep_sub,\n \t      val, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_3s (\"fstat\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fstat\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fstat_sub, NULL, gfc_resolve_fstat_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"lstat\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"lstat\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_lstat_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"stat\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"stat\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_stat_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"signal\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"signal\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_signal_sub, NULL, gfc_resolve_signal_sub,\n \t      num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"symlnk\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"symlnk\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_symlnk_sub, NULL, gfc_resolve_symlnk_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"system\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"system\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_system_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"system_clock\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_3s (\"system_clock\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t      c, BT_INTEGER, di, OPTIONAL, cr, BT_INTEGER, di, OPTIONAL,\n \t      cm, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"ttynam\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ttynam\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ttynam_sub, NULL, gfc_resolve_ttynam_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, name, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_2s (\"umask\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"umask\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_umask_sub, NULL, gfc_resolve_umask_sub,\n \t      val, BT_INTEGER, di, REQUIRED, num, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"unlink\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"unlink\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n }"}, {"sha": "b71609b4dd4dfa638697af2a3312e2e3c0fa3f8f", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b5a16d408d1c619a3bc1c21fcc08ceaeab7534/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=42b5a16d408d1c619a3bc1c21fcc08ceaeab7534", "patch": "@@ -4665,7 +4665,7 @@ the model of the type of @code{X}.\n F95 and later\n \n @item @emph{Class}:\n-Elemental function\n+Inquiry function\n \n @item @emph{Syntax}:\n @code{RESULT = HUGE(X)}\n@@ -7180,10 +7180,10 @@ affected by the movement of bits is unchanged. The values of\n F95 and later\n \n @item @emph{Class}:\n-Elemental function\n+Elemental subroutine\n \n @item @emph{Syntax}:\n-@code{RESULT = MVBITS(FROM, FROMPOS, LEN, TO, TOPOS)}\n+@code{CALL MVBITS(FROM, FROMPOS, LEN, TO, TOPOS)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -7195,13 +7195,8 @@ Elemental function\n @item @var{TOPOS}   @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n-@item @emph{Return value}:\n-The return value is of type @code{INTEGER(*)} and of the same kind as\n-@var{FROM}.\n-\n @item @emph{See also}:\n @ref{IBCLR}, @ref{IBSET}, @ref{IBITS}, @ref{IAND}, @ref{IOR}, @ref{IEOR}\n-\n @end table\n \n \n@@ -7845,7 +7840,7 @@ from the uniform distribution over the range @math{ 0 \\leq x < 1}.\n F95 and later\n \n @item @emph{Class}:\n-Elemental subroutine\n+Subroutine\n \n @item @emph{Syntax}:\n @code{RANDOM_NUMBER(HARVEST)}\n@@ -9636,7 +9631,7 @@ in the model of the type of @code{X}.\n F95 and later\n \n @item @emph{Class}:\n-Elemental function\n+Inquiry function\n \n @item @emph{Syntax}:\n @code{RESULT = TINY(X)}"}]}