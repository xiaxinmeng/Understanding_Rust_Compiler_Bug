{"sha": "7f397e451905d1ce2b04d56836044b97d71216dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzOTdlNDUxOTA1ZDFjZTJiMDRkNTY4MzYwNDRiOTdkNzEyMTZkZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-12-03T23:57:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-03T23:57:46Z"}, "message": "libstdc++: Implement spaceship for std::pair (P1614R2)\n\nThis defines operator<=> as a non-member function template and does not\nalter operator==. This contradicts the changes made by P1614R2, which\nspecify both as hidden friends, but that specification of operator<=> is\nbroken and the subject of a soon-to-be-published LWG issue.\n\n\t* include/bits/stl_pair.h [__cpp_lib_three_way_comparison]\n\t(operator<=>): Define for C++20.\n\t* libsupc++/compare (__cmp2way_res_t): Rename to __cmp3way_res_t,\n\tmove into __detail namespace. Do not turn argument types into lvalues.\n\t(__cmp3way_helper): Rename to __cmp3way_res_impl, move into __detail\n\tnamespace. Constrain with concepts instead of using void_t.\n\t(compare_three_way_result): Adjust name of base class.\n\t(compare_three_way_result_t): Use __cmp3way_res_impl directly.\n\t(__detail::__3way_cmp_with): Add workaround for PR 91073.\n\t(compare_three_way): Use workaround.\n\t(__detail::__synth3way, __detail::__synth3way_t): Define new helpers\n\timplementing synth-three-way and synth-three-way-result semantics.\n\t* testsuite/20_util/pair/comparison_operators/constexpr_c++20.cc: New\n\ttest.\n\nFrom-SVN: r278951", "tree": {"sha": "ce0d178fc7667c837a673141f0558e50129ff32a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0d178fc7667c837a673141f0558e50129ff32a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f397e451905d1ce2b04d56836044b97d71216dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f397e451905d1ce2b04d56836044b97d71216dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f397e451905d1ce2b04d56836044b97d71216dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f397e451905d1ce2b04d56836044b97d71216dd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb3d28f13dfc2591690b6f66d350f651bae6726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb3d28f13dfc2591690b6f66d350f651bae6726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb3d28f13dfc2591690b6f66d350f651bae6726"}], "stats": {"total": 146, "additions": 126, "deletions": 20}, "files": [{"sha": "50f506cc38ee0c6f36a22e2ea76422503790c886", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7f397e451905d1ce2b04d56836044b97d71216dd", "patch": "@@ -1,5 +1,20 @@\n 2019-12-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/stl_pair.h [__cpp_lib_three_way_comparison]\n+\t(operator<=>): Define for C++20.\n+\t* libsupc++/compare (__cmp2way_res_t): Rename to __cmp3way_res_t,\n+\tmove into __detail namespace. Do not turn argument types into lvalues.\n+\t(__cmp3way_helper): Rename to __cmp3way_res_impl, move into __detail\n+\tnamespace. Constrain with concepts instead of using void_t.\n+\t(compare_three_way_result): Adjust name of base class.\n+\t(compare_three_way_result_t): Use __cmp3way_res_impl directly.\n+\t(__detail::__3way_cmp_with): Add workaround for PR 91073.\n+\t(compare_three_way): Use workaround.\n+\t(__detail::__synth3way, __detail::__synth3way_t): Define new helpers\n+\timplementing synth-three-way and synth-three-way-result semantics.\n+\t* testsuite/20_util/pair/comparison_operators/constexpr_c++20.cc: New\n+\ttest.\n+\n \t* include/bits/stl_pair.h (pair): Remove stray Doxygen closing marker.\n \n \t* testsuite/util/slow_clock.h: Fix copyright date."}, {"sha": "02b1f0ac9229dc53d84c4621bbf34753ecf6a565", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=7f397e451905d1ce2b04d56836044b97d71216dd", "patch": "@@ -59,7 +59,10 @@\n #include <bits/move.h> // for std::move / std::forward, and std::swap\n \n #if __cplusplus >= 201103L\n-#include <type_traits> // for std::__decay_and_strip too\n+# include <type_traits> // for std::__decay_and_strip, std::is_reference_v\n+#endif\n+#if __cplusplus > 201703L\n+# include <compare>\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -447,7 +450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX20_CONSTEXPR\n         pair(tuple<_Args1...>&, tuple<_Args2...>&,\n              _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);\n-#endif\n+#endif // C++11\n     };\n \n   /// @relates pair @{\n@@ -462,6 +465,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return __x.first == __y.first && __x.second == __y.second; }\n \n+#if __cpp_lib_three_way_comparison && __cpp_lib_concepts\n+  template<typename _T1, typename _T2>\n+    constexpr common_comparison_category_t<__detail::__synth3way_t<_T1>,\n+\t\t\t\t\t   __detail::__synth3way_t<_T2>>\n+    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n+    {\n+      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)\n+\treturn __c;\n+      return __detail::__synth3way(__x.second, __y.second);\n+    }\n+#else\n   /** Defines a lexicographical order for pairs.\n    *\n    * For two pairs of the same type, `P` is ordered before `Q` if\n@@ -498,6 +512,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _GLIBCXX_CONSTEXPR bool\n     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__x < __y); }\n+#endif // !(three_way_comparison && concepts)\n \n #if __cplusplus >= 201103L\n   /** Swap overload for pairs. Calls std::pair::swap()."}, {"sha": "412ec6861d3ba8da5d69bf7dacebb9fb0f0e969f", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=7f397e451905d1ce2b04d56836044b97d71216dd", "patch": "@@ -509,34 +509,41 @@ namespace std\n \t{ __t <=> __u } -> __detail::__compares_as<_Cat>;\n \t{ __u <=> __t } -> __detail::__compares_as<_Cat>;\n       };\n-#endif\n \n-  template<typename _Tp, typename _Up>\n-    using __cmp2way_res_t\n-      = decltype(std::declval<_Tp&>() <=> std::declval<_Up&>());\n-\n-  template<typename _Tp, typename _Up = _Tp, typename = void>\n-    struct __cmp3way_helper\n-    { };\n+  namespace __detail\n+  {\n+    template<typename _Tp, typename _Up>\n+      using __cmp3way_res_t\n+\t= decltype(std::declval<_Tp>() <=> std::declval<_Up>());\n+\n+    // Implementation of std::compare_three_way_result.\n+    // It is undefined for a program to add specializations of\n+    // std::compare_three_way_result, so the std::compare_three_way_result_t\n+    // alias ignores std::compare_three_way_result and uses\n+    // __detail::__cmp3way_res_impl directly instead.\n+    template<typename _Tp, typename _Up>\n+      struct __cmp3way_res_impl\n+      { };\n \n-  template<typename _Tp, typename _Up>\n-    struct __cmp3way_helper<_Tp, _Up, void_t<__cmp2way_res_t<_Tp, _Up>>>\n-    {\n-      using type = __cmp2way_res_t<_Tp, _Up>;\n-      using __type = type;\n-    };\n+    template<typename _Tp, typename _Up>\n+      requires requires { typename __cmp3way_res_t<__cref<_Tp>, __cref<_Up>>; }\n+      struct __cmp3way_res_impl<_Tp, _Up>\n+      {\n+\tusing type = __cmp3way_res_t<__cref<_Tp>, __cref<_Up>>;\n+      };\n+  } // namespace __detail\n \n   /// [cmp.result], result of three-way comparison\n   template<typename _Tp, typename _Up = _Tp>\n     struct compare_three_way_result\n-    : __cmp3way_helper<_Tp, _Up>\n+    : __detail::__cmp3way_res_impl<_Tp, _Up>\n     { };\n \n+  /// [cmp.result], result of three-way comparison\n   template<typename _Tp, typename _Up = _Tp>\n     using compare_three_way_result_t\n-      = typename compare_three_way_result<_Tp, _Up>::__type;\n+      = typename __detail::__cmp3way_res_impl<_Tp, _Up>::type;\n \n-#if __cpp_lib_concepts\n   namespace __detail\n   {\n     // BUILTIN-PTR-THREE-WAY(T, U)\n@@ -548,13 +555,17 @@ namespace std\n \t     { operator<=>(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u)); }\n \t  && ! requires(_Tp&& __t, _Up&& __u)\n \t     { static_cast<_Tp&&>(__t).operator<=>(static_cast<_Up&&>(__u)); };\n+\n+    // FIXME: workaround for PR c++/91073\n+    template<typename _Tp, typename _Up>\n+      concept __3way_cmp_with = three_way_comparable_with<_Tp, _Up>;\n   } // namespace __detail\n \n   // [cmp.object], typename compare_three_way\n   struct compare_three_way\n   {\n     template<typename _Tp, typename _Up>\n-      requires (three_way_comparable_with<_Tp, _Up>\n+      requires (__detail::__3way_cmp_with<_Tp, _Up>\n \t  || __detail::__3way_builtin_ptr_cmp<_Tp, _Up>)\n       constexpr auto\n       operator()(_Tp&& __t, _Up&& __u) const noexcept\n@@ -915,6 +926,40 @@ namespace std\n     inline constexpr __cmp_cust::_Partial_fallback\n     compare_partial_order_fallback{};\n   }\n+\n+  namespace __detail\n+  {\n+    // [expos.only.func]\n+    inline constexpr struct _Synth3way\n+    {\n+      template<typename _Tp, typename _Up>\n+\tconstexpr auto\n+\toperator()(const _Tp& __t, const _Up& __u) const\n+\trequires requires\n+\t{\n+\t  { __t < __u } -> convertible_to<bool>;\n+\t  { __u < __t } -> convertible_to<bool>;\n+\t}\n+\t{\n+\t  if constexpr (__3way_cmp_with<_Tp, _Up>)\n+\t    return __t <=> __u;\n+\t  else\n+\t    {\n+\t      if (__t < __u)\n+\t\treturn weak_ordering::less;\n+\t      else if (__u < __t)\n+\t\treturn weak_ordering::greater;\n+\t      else\n+\t\treturn weak_ordering::equivalent;\n+\t    }\n+\t}\n+    } __synth3way = {};\n+\n+    template<typename _Tp, typename _Up = _Tp>\n+      using __synth3way_t\n+\t= decltype(__detail::__synth3way(std::declval<_Tp&>(),\n+\t\t\t\t\t std::declval<_Up&>()));\n+  } // namespace __detail\n #endif // concepts\n } // namespace std\n "}, {"sha": "127610d83684c02b5e7a460f1cb9a664cbb8bfff", "filename": "libstdc++-v3/testsuite/20_util/pair/comparison_operators/constexpr_c++20.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcomparison_operators%2Fconstexpr_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f397e451905d1ce2b04d56836044b97d71216dd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcomparison_operators%2Fconstexpr_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcomparison_operators%2Fconstexpr_c%2B%2B20.cc?ref=7f397e451905d1ce2b04d56836044b97d71216dd", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_comparison_operators test;\n+  test.operator()<std::pair<int, int>>();\n+\n+  constexpr std::pair<int, int> p{1, 2}, q{3, 0};\n+  static_assert( p <=> q == std::strong_ordering::less );\n+}"}]}