{"sha": "13d39dbc995d0284254ba02f47ba5fe957e4dd61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNkMzlkYmM5OTVkMDI4NDI1NGJhMDJmNDdiYTVmZTk1N2U0ZGQ2MQ==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-01-10T19:16:01Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-01-10T19:16:01Z"}, "message": "# Fix misspellings in comments.\n\nFrom-SVN: r3179", "tree": {"sha": "24af24330e628fef4df05b8b6e215c192eb41eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24af24330e628fef4df05b8b6e215c192eb41eff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13d39dbc995d0284254ba02f47ba5fe957e4dd61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d39dbc995d0284254ba02f47ba5fe957e4dd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d39dbc995d0284254ba02f47ba5fe957e4dd61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d39dbc995d0284254ba02f47ba5fe957e4dd61/comments", "author": null, "committer": null, "parents": [{"sha": "8999a12e4609fb552ed0db1f55e14ad717a66228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8999a12e4609fb552ed0db1f55e14ad717a66228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8999a12e4609fb552ed0db1f55e14ad717a66228"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "a0abffd380d68dec0c01f70d59b8e474df15d727", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -4229,7 +4229,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \tmain_type = TYPE_MAIN_VARIANT (type);\n \tif (main_type == float_type_node)\n \t  DECL_ARG_TYPE (decl) = double_type_node;\n-\t/* Don't use TYPE_PREISION to decide whether to promote,\n+\t/* Don't use TYPE_PRECISION to decide whether to promote,\n \t   because we should convert short if it's the same size as int,\n \t   but we should not convert long if it's the same size as int.  */\n \telse if (C_PROMOTING_INTEGER_TYPE_P (main_type))"}, {"sha": "8f0656fd6d234427dc6f27432cae05638118aa63", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -525,7 +525,7 @@ expand_call (exp, target, ignore)\n \t    is_integrable = 1;\n \t  else if (! TREE_ADDRESSABLE (fndecl))\n \t    {\n-\t      /* In case this function later becomes inlineable,\n+\t      /* In case this function later becomes inlinable,\n \t\t record that there was already a non-inline call to it.\n \n \t\t Use abstraction instead of setting TREE_ADDRESSABLE"}, {"sha": "f04cf30b2e51551460614898abb46b70644e7031", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -124,7 +124,7 @@ extern int target_flags;\n #define WCHAR_TYPE \"char\"\n #define WCHAR_TYPE_SIZE BITS_PER_UNIT\n \n-/* Define this macro if it is advisible to hold scalars in registers\n+/* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases, \n    the value is constrained to be within the bounds of the declared\n    type, but kept valid in the wider mode.  The signedness of the"}, {"sha": "3a3718462907750fac59801d37abd008d0efd6e6", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -127,7 +127,7 @@ extern int target_flags;\n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n \n-/* Define this macro if it is advisible to hold scalars in registers\n+/* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases, \n    the value is constrained to be within the bounds of the declared\n    type, but kept valid in the wider mode.  The signedness of the"}, {"sha": "dbf5126c6457672518af3ce6da72eef83e04ea42", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -69,7 +69,7 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressible storage unit */\n+/* Number of bits in an addressable storage unit */\n #define BITS_PER_UNIT 8\n \n /* Width in bits of a \"word\", which is the contents of a machine register.\n@@ -687,8 +687,8 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n /* Check a `double' value for validity for a particular machine mode.  */\n \n-/* note that it is very hard to accidently create a number that fits in a\n-   double but not in a float, since their ranges are almost the same */\n+/* Note that it is very hard to accidentally create a number that fits in a\n+   double but not in a float, since their ranges are almost the same.  */\n #define CHECK_FLOAT_VALUE(mode, d) \\\n   if ((mode) == SFmode) \\\n     { \\"}, {"sha": "4bf2728a5eae3076b81991e3d4eb69e4548de5b8", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -185,7 +185,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define\tTARGET_ASM_COMPAT\t(target_flags & TARGET_FLAG_ASM_COMPAT)\n \n /* For compatibility with the gcc960 v1.2 compiler.  Use the old structure\n-   alignement rules.  Also, turns on STRICT_ALIGNMENT.  */\n+   alignment rules.  Also, turns on STRICT_ALIGNMENT.  */\n #define TARGET_FLAG_OLD_ALIGN\t0x8000\n #define TARGET_OLD_ALIGN\t(target_flags & TARGET_FLAG_OLD_ALIGN)\n \n@@ -359,7 +359,7 @@ extern int target_flags;\n #define STRICT_ALIGNMENT TARGET_OLD_ALIGN\n \n /* Specify alignment for string literals (which might be higher than the\n-   base type's minimnal alignment requirement.  This allows strings to be\n+   base type's minimal alignment requirement.  This allows strings to be\n    aligned on word boundaries, and optimizes calls to the str* and mem*\n    library functions.  */\n #define CONSTANT_ALIGNMENT(EXP, ALIGN) \\\n@@ -996,7 +996,7 @@ extern struct rtx_def *i960_function_arg ();\n    It is always safe for this macro to do nothing.  It exists to recognize\n    opportunities to optimize the output.  */\n \n-/* On 80960, convert non-cannonical addresses to canonical form.  */\n+/* On 80960, convert non-canonical addresses to canonical form.  */\n \n extern struct rtx_def *legitimize_address ();\n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\\\n@@ -1417,7 +1417,7 @@ extern struct rtx_def *gen_compare_reg ();\n }\n \n #if 0\n-/* Promote char and short arguments to ints, when want compitibility with\n+/* Promote char and short arguments to ints, when want compatibility with\n    the iC960 compilers.  */\n \n /* ??? In order for this to work, all users would need to be changed"}, {"sha": "2c8acd808e3d6439209d17e65864e23dea297cf9", "filename": "gcc/config/m68k/dpx2.ifile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fm68k%2Fdpx2.ifile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fm68k%2Fdpx2.ifile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.ifile?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -4,7 +4,7 @@\n  *      Peter Schauer <Peter.Schauer@regent.e-technik.tu-muenchen.dbp.de>\n  *\n  *      Install this file as $prefix/gcc-lib/dpx2/VERSION/gcc.ifile\n- *\tand comment out the lines refering to COLLECT at the top\n+ *\tand comment out the lines referring to COLLECT at the top\n  *      of Makefile before building GCC.\n  *\t\n  *      This file has been tested with gcc-2.2.2 on a DPX/2 340"}, {"sha": "7f84bda9a446ffb54261792e0bb9fb053c8dd01c", "filename": "gcc/config/m68k/plexus.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fm68k%2Fplexus.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fm68k%2Fplexus.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fplexus.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -66,7 +66,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define PLEXUS_CC_COMPAT\n \n #ifdef PLEXUS_CC_COMPAT\n-#define STRUCTURE_SIZE_BOUNDARY 16\t/* for compatiblity with cc */\n+#define STRUCTURE_SIZE_BOUNDARY 16\t/* for compatibility with cc */\n #undef STACK_BOUNDARY\n #define STACK_BOUNDARY 32\t\t/* ditto */\n #endif"}, {"sha": "149626ad40295140880b48183374a98abdaf463c", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -1537,7 +1537,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define FUNCTION_MODE SImode\n \n /* A barrier will be aligned so account for the possible expansion.\n-   A volatile load may be preceeded by a serializing instruction.\n+   A volatile load may be preceded by a serializing instruction.\n    Account for profiling code output at NOTE_INSN_PROLOGUE_END.\n    Account for block profiling code at basic block boundaries.  */\n #define ADJUST_INSN_LENGTH(RTX, LENGTH)\t\t\t\t\t\\"}, {"sha": "29ea966306e7bb305ee0707f73fa69e4d813b3fb", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -1846,7 +1846,7 @@ block_move_load_store (dest_reg, src_reg, p_bytes, p_offset, align, orig_src)\n     }\n \n #if 0\n-  /* Don't generate unligned moves here, rather defer those to the\n+  /* Don't generate unaligned moves here, rather defer those to the\n      general movestrsi_internal pattern.  */\n   else if (bytes >= UNITS_PER_WORD)\n     {"}, {"sha": "5dd3c8160ee6c4559759be110593d10606a14f2d", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -814,7 +814,7 @@\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"1\")])\n \n-;;; pic symbol refrences\n+;;; pic symbol references\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")"}, {"sha": "1c239f5b19941b52ff3e2202c410941dd619a181", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -105,7 +105,7 @@ extern int target_flags;\n \f\n /* target machine storage layout */\n \n-/* Define this macro if it is advisible to hold scalars in registers\n+/* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases, \n    the value is constrained to be within the bounds of the declared\n    type, but kept valid in the wider mode.  The signedness of the"}, {"sha": "7c72ea8087116952c2b4a50fcfc885c524895220", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -3024,7 +3024,7 @@ sparc_type_code (type)\n \t  abort ();\n   \n \tcase COMPLEX_TYPE:\t/* GNU Fortran COMPLEX type.  */\n-\t  /* ??? We need to dinguish between double and float complex types,\n+\t  /* ??? We need to distinguish between double and float complex types,\n \t     but I don't know how yet because I can't reach this code from\n \t     existing front-ends.  */\n \t  return (qualifiers | 7);\t/* Who knows? */"}, {"sha": "866bc7ebc209a458f7ba1e933431b7abfe1bf804", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -324,7 +324,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   sprintf (LABEL, \"*.%s%d\", PREFIX, NUM);\t\t\t\t\\\n } while (0)\n \n-/* Output the label which preceeds a jumptable.  Note that for all svr4\n+/* Output the label which precedes a jumptable.  Note that for all svr4\n    systems where we actually generate jumptables (which is to say every\n    svr4 target except i386, where we use casesi instead) we put the jump-\n    tables into the .rodata section and since other stuff could have been"}, {"sha": "42f416b4ebc95646866c72449e37aac3cb5e2077", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d39dbc995d0284254ba02f47ba5fe957e4dd61/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=13d39dbc995d0284254ba02f47ba5fe957e4dd61", "patch": "@@ -338,7 +338,7 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n #define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n   gen_rtx (REG, TYPE_MODE (VALTYPE), 0)\n \n-/* libarary routines also return things in reg 0 */\n+/* library routines also return things in reg 0 */\n \n #define LIBCALL_VALUE(MODE)  gen_rtx (REG, MODE, 0)\n "}]}