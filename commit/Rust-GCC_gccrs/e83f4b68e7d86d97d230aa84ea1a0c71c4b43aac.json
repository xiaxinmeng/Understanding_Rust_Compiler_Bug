{"sha": "e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzZjRiNjhlN2Q4NmQ5N2QyMzBhYTg0ZWExYTBjNzFjNGI0M2FhYw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-12-20T01:15:46Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-12-20T01:15:46Z"}, "message": "re PR tree-optimization/42027 (Performance regression in convolution loop optimization)\n\n\tPR tree-optimization/42027\n\t* cfgexpand.c (expand_gimple_cond): Use jumpy sequence for &, &&, |\n\tand || if jumps are cheap.\n\nFrom-SVN: r155367", "tree": {"sha": "7c4ea5cbc5a0f4f136ef8ca29dd6d5cdacb56c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c4ea5cbc5a0f4f136ef8ca29dd6d5cdacb56c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e72297c57250b6a50d1a1f2b0d1983023c5266c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72297c57250b6a50d1a1f2b0d1983023c5266c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72297c57250b6a50d1a1f2b0d1983023c5266c8"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "0c02d32622c02aa481dd04318762449ee1324073", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac", "patch": "@@ -1,3 +1,9 @@\n+2009-12-20  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/42027\n+\t* cfgexpand.c (expand_gimple_cond): Use jumpy sequence for &, &&, |\n+\tand || if jumps are cheap.\n+\n 2009-12-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/42401"}, {"sha": "b0921bfe8e96ab9bf69adfca9c7a2a3b480a82de", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e83f4b68e7d86d97d230aa84ea1a0c71c4b43aac", "patch": "@@ -1606,13 +1606,35 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n       && bitmap_bit_p (SA.values, SSA_NAME_VERSION (op0)))\n     {\n       gimple second = SSA_NAME_DEF_STMT (op0);\n-      if (gimple_code (second) == GIMPLE_ASSIGN\n-\t  && TREE_CODE_CLASS (gimple_assign_rhs_code (second))\n-\t     == tcc_comparison)\n+      if (gimple_code (second) == GIMPLE_ASSIGN)\n \t{\n-\t  code = gimple_assign_rhs_code (second);\n-\t  op0 = gimple_assign_rhs1 (second);\n-\t  op1 = gimple_assign_rhs2 (second);\n+\t  enum tree_code code2 = gimple_assign_rhs_code (second);\n+\t  if (TREE_CODE_CLASS (code2) == tcc_comparison)\n+\t    {\n+\t      code = code2;\n+\t      op0 = gimple_assign_rhs1 (second);\n+\t      op1 = gimple_assign_rhs2 (second);\n+\t    }\n+\t  /* If jumps are cheap turn some more codes into\n+\t     jumpy sequences.  */\n+\t  else if (BRANCH_COST (optimize_insn_for_speed_p (), false) < 4)\n+\t    {\n+\t      if ((code2 == BIT_AND_EXPR\n+\t\t   && TYPE_PRECISION (TREE_TYPE (op0)) == 1\n+\t\t   && TREE_CODE (gimple_assign_rhs2 (second)) != INTEGER_CST)\n+\t\t  || code2 == TRUTH_AND_EXPR)\n+\t\t{\n+\t\t  code = TRUTH_ANDIF_EXPR;\n+\t\t  op0 = gimple_assign_rhs1 (second);\n+\t\t  op1 = gimple_assign_rhs2 (second);\n+\t\t}\n+\t      else if (code2 == BIT_IOR_EXPR || code2 == TRUTH_OR_EXPR)\n+\t\t{\n+\t\t  code = TRUTH_ORIF_EXPR;\n+\t\t  op0 = gimple_assign_rhs1 (second);\n+\t\t  op1 = gimple_assign_rhs2 (second);\n+\t\t}\n+\t    }\n \t}\n     }\n "}]}