{"sha": "f3d64372d777d7d6068df8167b6751c289963e85", "node_id": "C_kwDOANBUbNoAKGYzZDY0MzcyZDc3N2Q3ZDYwNjhkZjgxNjdiNjc1MWMyODk5NjNlODU", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-10-13T10:53:42Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-10-15T12:28:12Z"}, "message": "amdgcn: fix up offload debug linking with LLVM 13\n\nBetween LLVM 9 and LLVM 13 the attribute works differently in several ways,\nand this needs to be allowed for in GCC and mkoffload independently.\n\nThis patch fixes up mkoffload when debug info is enabled, which is made more\ncomplicated because the configure tests checks whether the attribute option\nis accepted silently, but does not check if the assembler actually sets the\nELF flags for that attribute, and mkoffload needs to mimick that behaviour\nexactly. The patch therefore removes some of the conditionals.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-hsa.h (S_FIJI): Set unconditionally.\n\t(S_900): Likewise.\n\t(S_906): Likewise.\n\t* config/gcn/gcn.c: Hard code SRAM ECC settings for old architectures.\n\t* config/gcn/mkoffload.c (ELFABIVERSION_AMDGPU_HSA): Rename to ...\n\t(ELFABIVERSION_AMDGPU_HSA_V3): ... this.\n\t(ELFABIVERSION_AMDGPU_HSA_V4): New.\n\t(SET_SRAM_ECC_UNSUPPORTED): New.\n\t(copy_early_debug_info): Create elf flags to match the other objects.\n\t(main): Just let the attribute flags pass through.", "tree": {"sha": "151782c85342f479d5c176e8c0745857ce4f8cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151782c85342f479d5c176e8c0745857ce4f8cf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d64372d777d7d6068df8167b6751c289963e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d64372d777d7d6068df8167b6751c289963e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d64372d777d7d6068df8167b6751c289963e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d64372d777d7d6068df8167b6751c289963e85/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbcba1eb28db3c2540957ccb3779f750daea6099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcba1eb28db3c2540957ccb3779f750daea6099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbcba1eb28db3c2540957ccb3779f750daea6099"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "4fd2f07b98366c6901368ca33c31c643165be4f0", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d64372d777d7d6068df8167b6751c289963e85/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d64372d777d7d6068df8167b6751c289963e85/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=f3d64372d777d7d6068df8167b6751c289963e85", "patch": "@@ -96,21 +96,10 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n #define X_908 \"march=gfx908:;\"\n #endif\n \n-#ifdef HAVE_GCN_SRAM_ECC_FIJI\n-#define S_FIJI\n-#else\n+/* These targets can't have SRAM-ECC, even if a broken assembler allows it.  */\n #define S_FIJI \"!march=*:;march=fiji:;\"\n-#endif\n-#ifdef HAVE_GCN_SRAM_ECC_GFX900\n-#define S_900\n-#else\n #define S_900 \"march=gfx900:;\"\n-#endif\n-#ifdef HAVE_GCN_SRAM_ECC_GFX906\n-#define S_906\n-#else\n #define S_906 \"march=gfx906:;\"\n-#endif\n #ifdef HAVE_GCN_SRAM_ECC_GFX908\n #define S_908\n #else"}, {"sha": "75a9c576694797bddc80dc4baed1063f21e95d04", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d64372d777d7d6068df8167b6751c289963e85/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d64372d777d7d6068df8167b6751c289963e85/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=f3d64372d777d7d6068df8167b6751c289963e85", "patch": "@@ -5226,27 +5226,21 @@ output_file_start (void)\n #ifndef HAVE_GCN_XNACK_FIJI\n       use_xnack_attr = false;\n #endif\n-#ifndef HAVE_GCN_SRAM_ECC_FIJI\n       use_sram_attr = false;\n-#endif\n       break;\n     case PROCESSOR_VEGA10:\n       cpu = \"gfx900\";\n #ifndef HAVE_GCN_XNACK_GFX900\n       use_xnack_attr = false;\n #endif\n-#ifndef HAVE_GCN_SRAM_ECC_GFX900\n       use_sram_attr = false;\n-#endif\n       break;\n     case PROCESSOR_VEGA20:\n       cpu = \"gfx906\";\n #ifndef HAVE_GCN_XNACK_GFX906\n       use_xnack_attr = false;\n #endif\n-#ifndef HAVE_GCN_SRAM_ECC_GFX906\n       use_sram_attr = false;\n-#endif\n       break;\n     case PROCESSOR_GFX908:\n       cpu = \"gfx908\";"}, {"sha": "b2e71ea5aa00821025e894f20689b0724f867cf6", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d64372d777d7d6068df8167b6751c289963e85/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d64372d777d7d6068df8167b6751c289963e85/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=f3d64372d777d7d6068df8167b6751c289963e85", "patch": "@@ -42,8 +42,10 @@\n \n #undef  ELFOSABI_AMDGPU_HSA\n #define ELFOSABI_AMDGPU_HSA\t 64\n-#undef  ELFABIVERSION_AMDGPU_HSA\n-#define ELFABIVERSION_AMDGPU_HSA 1\n+#undef  ELFABIVERSION_AMDGPU_HSA_V3\n+#define ELFABIVERSION_AMDGPU_HSA_V3 1\n+#undef  ELFABIVERSION_AMDGPU_HSA_V4\n+#define ELFABIVERSION_AMDGPU_HSA_V4 2\n \n #undef  EF_AMDGPU_MACH_AMDGCN_GFX803\n #define EF_AMDGPU_MACH_AMDGCN_GFX803 0x2a\n@@ -77,6 +79,7 @@\n #define SET_SRAM_ECC_ON(VAR) VAR |= EF_AMDGPU_SRAM_ECC_V3\n #define SET_SRAM_ECC_ANY(VAR) SET_SRAM_ECC_ON (VAR)\n #define SET_SRAM_ECC_OFF(VAR) VAR &= ~EF_AMDGPU_SRAM_ECC_V3\n+#define SET_SRAM_ECC_UNSUPPORTED(VAR) SET_SRAM_ECC_OFF (VAR)\n #define TEST_SRAM_ECC_ANY(VAR) 0 /* Not supported.  */\n #define TEST_SRAM_ECC_ON(VAR) (VAR & EF_AMDGPU_SRAM_ECC_V3)\n #endif\n@@ -94,6 +97,9 @@\n \t\t\t\t     | EF_AMDGPU_FEATURE_SRAMECC_ANY_V4)\n #define SET_SRAM_ECC_OFF(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n \t\t\t\t     | EF_AMDGPU_FEATURE_SRAMECC_OFF_V4)\n+#define SET_SRAM_ECC_UNSUPPORTED(VAR) \\\n+  VAR = ((VAR & ~EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n+\t | EF_AMDGPU_FEATURE_SRAMECC_UNSUPPORTED_V4)\n #define TEST_SRAM_ECC_ANY(VAR) ((VAR & EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n \t\t\t\t== EF_AMDGPU_FEATURE_SRAMECC_ANY_V4)\n #define TEST_SRAM_ECC_ON(VAR) ((VAR & EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n@@ -346,12 +352,27 @@ copy_early_debug_info (const char *infile, const char *outfile)\n   /* We only support host relocations of x86_64, for now.  */\n   gcc_assert (ehdr.e_machine == EM_X86_64);\n \n+  /* Fiji devices use HSACOv3 regardless of the assembler.  */\n+  uint32_t elf_flags_actual = (elf_arch == EF_AMDGPU_MACH_AMDGCN_GFX803\n+\t\t\t       ? 0 : elf_flags);\n+  /* GFX900 devices don't support the sramecc attribute even if\n+     a buggy assembler thinks it does.  This must match gcn-hsa.h  */\n+  if (elf_arch == EF_AMDGPU_MACH_AMDGCN_GFX900)\n+    SET_SRAM_ECC_UNSUPPORTED (elf_flags_actual);\n+\n   /* Patch the correct elf architecture flag into the file.  */\n   ehdr.e_ident[7] = ELFOSABI_AMDGPU_HSA;\n-  ehdr.e_ident[8] = ELFABIVERSION_AMDGPU_HSA;\n+#ifdef HAVE_GCN_ASM_V3_SYNTAX\n+  ehdr.e_ident[8] = ELFABIVERSION_AMDGPU_HSA_V3;\n+#endif\n+#ifdef HAVE_GCN_ASM_V4_SYNTAX\n+  ehdr.e_ident[8] = (elf_arch == EF_AMDGPU_MACH_AMDGCN_GFX803\n+\t\t     ? ELFABIVERSION_AMDGPU_HSA_V3\n+\t\t     : ELFABIVERSION_AMDGPU_HSA_V4);\n+#endif\n   ehdr.e_type = ET_REL;\n   ehdr.e_machine = EM_AMDGPU;\n-  ehdr.e_flags = elf_arch | elf_flags;\n+  ehdr.e_flags = elf_arch | elf_flags_actual;\n \n   /* Load the section headers so we can walk them later.  */\n   Elf64_Shdr *sections = (Elf64_Shdr *)xmalloc (sizeof (Elf64_Shdr)\n@@ -987,13 +1008,6 @@ main (int argc, char **argv)\n   obstack_ptr_grow (&cc_argv_obstack, \"-xlto\");\n   if (fopenmp)\n     obstack_ptr_grow (&cc_argv_obstack, \"-mgomp\");\n-  obstack_ptr_grow (&cc_argv_obstack,\n-\t\t    (TEST_XNACK (elf_flags)\n-\t\t     ? \"-mxnack\" : \"-mno-xnack\"));\n-  obstack_ptr_grow (&cc_argv_obstack,\n-\t\t    (TEST_SRAM_ECC_ON (elf_flags) ? \"-msram-ecc=on\"\n-\t\t     : TEST_SRAM_ECC_ANY (elf_flags) ? \"-msram-ecc=any\"\n-\t\t     : \"-msram-ecc=off\"));\n \n   for (int ix = 1; ix != argc; ix++)\n     {"}]}