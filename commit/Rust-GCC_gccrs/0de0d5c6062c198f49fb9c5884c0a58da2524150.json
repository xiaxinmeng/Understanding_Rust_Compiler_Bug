{"sha": "0de0d5c6062c198f49fb9c5884c0a58da2524150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRlMGQ1YzYwNjJjMTk4ZjQ5ZmI5YzU4ODRjMGE1OGRhMjUyNDE1MA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2012-06-01T00:12:22Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2012-06-01T00:12:22Z"}, "message": "Sparc longlong.h enhancements.\n\nlibgcc/\n\n\t* longlong.h [SPARC] (umul_ppmm, udiv_qrnnd): Use hardware integer multiply\n\tand divide instructions on 32-bit when V9.\n\t(add_ssaaaa, sub_ddmmss): Convert to branchless code on 64-bit.\n\nFrom-SVN: r188090", "tree": {"sha": "c2e4110af7f8a7306b17c63c9a33a5cb4c1f52dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2e4110af7f8a7306b17c63c9a33a5cb4c1f52dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0de0d5c6062c198f49fb9c5884c0a58da2524150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de0d5c6062c198f49fb9c5884c0a58da2524150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0de0d5c6062c198f49fb9c5884c0a58da2524150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de0d5c6062c198f49fb9c5884c0a58da2524150/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7033d59e696fc0970ee31c8d0861a316bab6205a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7033d59e696fc0970ee31c8d0861a316bab6205a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7033d59e696fc0970ee31c8d0861a316bab6205a"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "9b4491cde9617d32e20cf8b190df3d5d97609b2a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de0d5c6062c198f49fb9c5884c0a58da2524150/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de0d5c6062c198f49fb9c5884c0a58da2524150/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0de0d5c6062c198f49fb9c5884c0a58da2524150", "patch": "@@ -1,3 +1,9 @@\n+2012-05-31  David S. Miller  <davem@davemloft.net>\n+\n+\t* longlong.h [SPARC] (umul_ppmm, udiv_qrnnd): Use hardware integer\n+\tmultiply and divide instructions on 32-bit when V9.\n+\t(add_ssaaaa, sub_ddmmss): Convert to branchless code on 64-bit.\n+\n 2012-05-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arm/ieee754-df.S: Fix typos."}, {"sha": "ad42907f547d17a0c4c76218223abf2b0c411e5f", "filename": "libgcc/longlong.h", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de0d5c6062c198f49fb9c5884c0a58da2524150/libgcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de0d5c6062c198f49fb9c5884c0a58da2524150/libgcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flonglong.h?ref=0de0d5c6062c198f49fb9c5884c0a58da2524150", "patch": "@@ -1127,6 +1127,29 @@ UDItype __umulsidi3 (USItype, USItype);\n \t     \"rJ\" ((USItype) (al)),\t\t\t\t\t\\\n \t     \"rI\" ((USItype) (bl))\t\t\t\t\t\\\n \t   __CLOBBER_CC)\n+#if defined (__sparc_v9__)\n+#define umul_ppmm(w1, w0, u, v) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    register USItype __g1 asm (\"g1\");\t\t\t\t\t\\\n+    __asm__ (\"umul\\t%2,%3,%1\\n\\t\"\t\t\t\t\t\\\n+\t     \"srlx\\t%1, 32, %0\"\t\t\t\t\t\t\\\n+\t     : \"=r\" ((USItype) (w1)),\t\t\t\t\t\\\n+\t       \"=r\" (__g1)\t\t\t\t\t\t\\\n+\t     : \"r\" ((USItype) (u)),\t\t\t\t\t\\\n+\t       \"r\" ((USItype) (v)));\t\t\t\t\t\\\n+    (w0) = __g1;\t\t\t\t\t\t\t\\\n+  } while (0)\n+#define udiv_qrnnd(__q, __r, __n1, __n0, __d) \\\n+  __asm__ (\"mov\\t%2,%%y\\n\\t\"\t\t\t\t\t\t\\\n+\t   \"udiv\\t%3,%4,%0\\n\\t\"\t\t\t\t\t\t\\\n+\t   \"umul\\t%0,%4,%1\\n\\t\"\t\t\t\t\t\t\\\n+\t   \"sub\\t%3,%1,%1\"\t\t\t\t\t\t\\\n+\t   : \"=&r\" ((USItype) (__q)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (__r))\t\t\t\t\t\\\n+\t   : \"r\" ((USItype) (__n1)),\t\t\t\t\t\\\n+\t     \"r\" ((USItype) (__n0)),\t\t\t\t\t\\\n+\t     \"r\" ((USItype) (__d)))\n+#else\n #if defined (__sparc_v8__)\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"umul %2,%3,%1;rd %%y,%0\"\t\t\t\t\t\\\n@@ -1292,37 +1315,44 @@ UDItype __umulsidi3 (USItype, USItype);\n #define UDIV_TIME (3+7*32)\t/* 7 instructions/iteration. 32 iterations.  */\n #endif /* __sparclite__ */\n #endif /* __sparc_v8__ */\n+#endif /* __sparc_v9__ */\n #endif /* sparc32 */\n \n #if ((defined (__sparc__) && defined (__arch64__)) || defined (__sparcv9)) \\\n     && W_TYPE_SIZE == 64\n #define add_ssaaaa(sh, sl, ah, al, bh, bl)\t\t\t\t\\\n-  __asm__ (\"addcc %r4,%5,%1\\n\\t\"\t\t\t\t\t\\\n-   \t   \"add %r2,%3,%0\\n\\t\"\t\t\t\t\t\t\\\n-   \t   \"bcs,a,pn %%xcc, 1f\\n\\t\"\t\t\t\t\t\\\n-   \t   \"add %0, 1, %0\\n\"\t\t\t\t\t\t\\\n-\t   \"1:\"\t\t\t\t\t\t\t\t\\\n-\t   : \"=r\" ((UDItype)(sh)),\t\t\t\t      \t\\\n-\t     \"=&r\" ((UDItype)(sl))\t\t\t\t      \t\\\n-\t   : \"%rJ\" ((UDItype)(ah)),\t\t\t\t     \t\\\n-\t     \"rI\" ((UDItype)(bh)),\t\t\t\t      \t\\\n-\t     \"%rJ\" ((UDItype)(al)),\t\t\t\t     \t\\\n-\t     \"rI\" ((UDItype)(bl))\t\t\t\t       \t\\\n-\t   __CLOBBER_CC)\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UDItype __carry = 0;\t\t\t\t\t\t\\\n+    __asm__ (\"addcc\\t%r5,%6,%1\\n\\t\"\t\t\t\t\t\\\n+\t     \"add\\t%r3,%4,%0\\n\\t\"\t\t\t\t\t\\\n+\t     \"movcs\\t%%xcc, 1, %2\\n\\t\"\t\t\t\t\t\\\n+\t     \"add\\t%0, %2, %0\"\t\t\t\t\t\t\\\n+\t     : \"=r\" ((UDItype)(sh)),\t\t\t\t      \t\\\n+\t       \"=&r\" ((UDItype)(sl)),\t\t\t\t      \t\\\n+\t       \"+r\" (__carry)\t\t\t\t      \t\t\\\n+\t     : \"%rJ\" ((UDItype)(ah)),\t\t\t\t     \t\\\n+\t       \"rI\" ((UDItype)(bh)),\t\t\t\t      \t\\\n+\t       \"%rJ\" ((UDItype)(al)),\t\t\t\t     \t\\\n+\t       \"rI\" ((UDItype)(bl))\t\t\t\t       \t\\\n+\t     __CLOBBER_CC);\t\t\t\t\t\t\\\n+  } while (0)\n \n-#define sub_ddmmss(sh, sl, ah, al, bh, bl) \t\t\t\t\\\n-  __asm__ (\"subcc %r4,%5,%1\\n\\t\"\t\t\t\t\t\\\n-   \t   \"sub %r2,%3,%0\\n\\t\"\t\t\t\t\t\t\\\n-   \t   \"bcs,a,pn %%xcc, 1f\\n\\t\"\t\t\t\t\t\\\n-   \t   \"sub %0, 1, %0\\n\\t\"\t\t\t\t\t\t\\\n-\t   \"1:\"\t\t\t\t\t\t\t\t\\\n-\t   : \"=r\" ((UDItype)(sh)),\t\t\t\t      \t\\\n-\t     \"=&r\" ((UDItype)(sl))\t\t\t\t      \t\\\n-\t   : \"rJ\" ((UDItype)(ah)),\t\t\t\t     \t\\\n-\t     \"rI\" ((UDItype)(bh)),\t\t\t\t      \t\\\n-\t     \"rJ\" ((UDItype)(al)),\t\t\t\t     \t\\\n-\t     \"rI\" ((UDItype)(bl))\t\t\t\t       \t\\\n-\t   __CLOBBER_CC)\n+#define sub_ddmmss(sh, sl, ah, al, bh, bl)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UDItype __carry = 0;\t\t\t\t\t\t\\\n+    __asm__ (\"subcc\\t%r5,%6,%1\\n\\t\"\t\t\t\t\t\\\n+\t     \"sub\\t%r3,%4,%0\\n\\t\"\t\t\t\t\t\\\n+\t     \"movcs\\t%%xcc, 1, %2\\n\\t\"\t\t\t\t\t\\\n+\t     \"add\\t%0, %2, %0\"\t\t\t\t\t\t\\\n+\t     : \"=r\" ((UDItype)(sh)),\t\t\t\t      \t\\\n+\t       \"=&r\" ((UDItype)(sl)),\t\t\t\t      \t\\\n+\t       \"+r\" (__carry)\t\t\t\t      \t\t\\\n+\t     : \"%rJ\" ((UDItype)(ah)),\t\t\t\t     \t\\\n+\t       \"rI\" ((UDItype)(bh)),\t\t\t\t      \t\\\n+\t       \"%rJ\" ((UDItype)(al)),\t\t\t\t     \t\\\n+\t       \"rI\" ((UDItype)(bl))\t\t\t\t       \t\\\n+\t     __CLOBBER_CC);\t\t\t\t\t\t\\\n+  } while (0)\n \n #define umul_ppmm(wh, wl, u, v)\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}]}