{"sha": "c02bffe38a706d8251442cf01095563c1bdcd61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyYmZmZTM4YTcwNmQ4MjUxNDQyY2YwMTA5NTU2M2MxYmRjZDYxZg==", "commit": {"author": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "visit0r@gcc.gnu.org", "date": "2017-09-25T17:17:29Z"}, "committer": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "visit0r@gcc.gnu.org", "date": "2017-09-25T17:17:29Z"}, "message": "BRIGFE fixes:\n\n* brig-builtins.def: Treat HSAIL barrier builtins as\n  setjmp/longjump style functions.\n\n* brigfrontend/brig-to-generic.cc: Ensure per WI copies of\n  private variables are aligned too.\n\n* rt/workitems.c: Assume the host runtime allocates the work group\n  memory.\n\nFrom-SVN: r253160", "tree": {"sha": "890083ba57439197b76327702f4b9099ed466e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/890083ba57439197b76327702f4b9099ed466e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c02bffe38a706d8251442cf01095563c1bdcd61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02bffe38a706d8251442cf01095563c1bdcd61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02bffe38a706d8251442cf01095563c1bdcd61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02bffe38a706d8251442cf01095563c1bdcd61f/comments", "author": null, "committer": null, "parents": [{"sha": "15e23330102f2c2a0815c70cf0ffca18fcdfdc40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e23330102f2c2a0815c70cf0ffca18fcdfdc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e23330102f2c2a0815c70cf0ffca18fcdfdc40"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "f0a5a3db6646257f5abf127476a1d033ebb36f2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c02bffe38a706d8251442cf01095563c1bdcd61f", "patch": "@@ -1,3 +1,8 @@\n+2017-09-25  Pekka Jaaskelainen <pekka@parmance.com>\n+\n+\t* brig-builtins.def: Treat HSAIL barrier builtins as\n+\tsetjmp/longjump style functions.\n+\n 2017-09-25  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* target.def (constant_alignment): New hook."}, {"sha": "39f403e062337a923459ab0acafaaf8b140ddce5", "filename": "gcc/brig-builtins.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2Fbrig-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2Fbrig-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig-builtins.def?ref=c02bffe38a706d8251442cf01095563c1bdcd61f", "patch": "@@ -240,7 +240,7 @@ DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_FRACT_F64, BRIG_OPCODE_FRACT,\n \n DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_BARRIER, BRIG_OPCODE_BARRIER,\n \t\t  BRIG_TYPE_NONE, \"__hsail_barrier\", BT_FN_VOID_PTR,\n-\t\t  ATTR_NOTHROW_LIST)\n+\t\t  ATTR_RT_NOTHROW_LEAF_LIST)\n \n DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_INITFBAR, BRIG_OPCODE_INITFBAR,\n \t\t  BRIG_TYPE_NONE, \"__hsail_initfbar\", BT_FN_VOID_UINT_PTR,\n@@ -252,11 +252,11 @@ DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_JOINFBAR, BRIG_OPCODE_JOINFBAR,\n \n DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_WAITFBAR, BRIG_OPCODE_WAITFBAR,\n \t\t  BRIG_TYPE_NONE, \"__hsail_waitfbar\", BT_FN_VOID_UINT_PTR,\n-\t\t  ATTR_NOTHROW_LIST)\n+\t\t  ATTR_RT_NOTHROW_LEAF_LIST)\n \n DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_ARRIVEFBAR, BRIG_OPCODE_ARRIVEFBAR,\n \t\t  BRIG_TYPE_NONE, \"__hsail_arrivefbar\", BT_FN_VOID_UINT_PTR,\n-\t\t  ATTR_NOTHROW_LIST)\n+\t\t  ATTR_RT_NOTHROW_LEAF_LIST)\n \n DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_LEAVEFBAR, BRIG_OPCODE_LEAVEFBAR,\n \t\t  BRIG_TYPE_NONE, \"__hsail_leavefbar\", BT_FN_VOID_UINT_PTR,"}, {"sha": "69c57cbf80a60430fde5144c28b3c7fbc5d90b08", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=c02bffe38a706d8251442cf01095563c1bdcd61f", "patch": "@@ -1,3 +1,8 @@\n+2017-05-13  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n+\n+\t* brigfrontend/brig-to-generic.cc: Ensure per WI copies of\n+\tprivate variables are aligned too.\n+\n 2017-09-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* Make-lang.in (GO_TEXI_FILES): Rename to..."}, {"sha": "2b1d94e0ff7e441df5b36eadb4ed912838f4ae61", "filename": "gcc/brig/brigfrontend/brig-to-generic.cc", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bffe38a706d8251442cf01095563c1bdcd61f/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc?ref=c02bffe38a706d8251442cf01095563c1bdcd61f", "patch": "@@ -599,18 +599,34 @@ brig_to_generic::group_segment_size () const\n   return m_next_group_offset;\n }\n \n-/* Appends a new group variable to the current kernel's private segment.  */\n+/* Appends a new variable to the current kernel's private segment.  */\n \n void\n brig_to_generic::append_private_variable (const std::string &name,\n \t\t\t\t\t  size_t size, size_t alignment)\n {\n+  /* We need to take care of two cases of alignment with private\n+     variables because of the layout where the same variable for\n+     each work-item is laid out in successive addresses.\n+\n+     1) Ensure the first work-item's variable is in an aligned\n+     offset:  */\n   size_t align_padding = m_next_private_offset % alignment == 0 ?\n     0 : (alignment - m_next_private_offset % alignment);\n+\n+  /* 2) Each successive per-work-item copy should be aligned.\n+     If the variable has wider alignment than size then we need\n+     to add extra padding to ensure it.  The padding must be\n+     included in the size to allow per-work-item offset computation\n+     to find their own aligned copy.  */\n+\n+  size_t per_var_padding = size % alignment == 0 ?\n+    0 : (alignment - size % alignment);\n+  m_private_data_sizes[name] = size + per_var_padding;\n+\n   m_next_private_offset += align_padding;\n   m_private_offsets[name] = m_next_private_offset;\n-  m_next_private_offset += size;\n-  m_private_data_sizes[name] = size + align_padding;\n+  m_next_private_offset += size + per_var_padding;\n }\n \n size_t"}, {"sha": "bf86278584d50d483ffb1bdaf4617ac19e875b32", "filename": "libhsail-rt/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bffe38a706d8251442cf01095563c1bdcd61f/libhsail-rt%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bffe38a706d8251442cf01095563c1bdcd61f/libhsail-rt%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2FChangeLog?ref=c02bffe38a706d8251442cf01095563c1bdcd61f", "patch": "@@ -1,3 +1,7 @@\n+2017-09-25  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n+\n+\t* rt/workitems.c: Assume the host runtime allocates the work group\n+\tmemory.\n 2017-05-03  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n \n \t* rt/workitems.c: Removed a leftover comment."}, {"sha": "ed1185a5780d90600c25a80ed0e580f583ace68d", "filename": "libhsail-rt/rt/workitems.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bffe38a706d8251442cf01095563c1bdcd61f/libhsail-rt%2Frt%2Fworkitems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bffe38a706d8251442cf01095563c1bdcd61f/libhsail-rt%2Frt%2Fworkitems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Fworkitems.c?ref=c02bffe38a706d8251442cf01095563c1bdcd61f", "patch": "@@ -318,14 +318,6 @@ phsa_spawn_work_items (PHSAKernelLaunchData *context, void *group_base_ptr)\n   hsa_kernel_dispatch_packet_t *dp = context->dp;\n   size_t x, y, z;\n \n-  /* TO DO: host-side memory management of group and private segment\n-     memory.  Agents in general are less likely to support efficient dynamic mem\n-     allocation.  */\n-  if (dp->group_segment_size > 0\n-      && posix_memalign (&group_base_ptr, PRIVATE_SEGMENT_ALIGN,\n-\t\t\t dp->group_segment_size) != 0)\n-    phsa_fatal_error (3);\n-\n   context->group_segment_start_addr = (size_t) group_base_ptr;\n \n   /* HSA seems to allow the WG size to be larger than the grid size.  We need to\n@@ -371,9 +363,6 @@ phsa_spawn_work_items (PHSAKernelLaunchData *context, void *group_base_ptr)\n \n   phsa_execute_wi_gang (context, group_base_ptr, sat_wg_size_x, sat_wg_size_y,\n \t\t\tsat_wg_size_z);\n-\n-  if (dp->group_segment_size > 0)\n-    free (group_base_ptr);\n }\n #endif\n \n@@ -390,14 +379,6 @@ phsa_execute_work_groups (PHSAKernelLaunchData *context, void *group_base_ptr)\n   hsa_kernel_dispatch_packet_t *dp = context->dp;\n   size_t x, y, z, wg_x, wg_y, wg_z;\n \n-  /* TODO: host-side memory management of group and private segment\n-     memory.  Agents in general are less likely to support efficient dynamic mem\n-     allocation.  */\n-  if (dp->group_segment_size > 0\n-      && posix_memalign (&group_base_ptr, GROUP_SEGMENT_ALIGN,\n-\t\t\t dp->group_segment_size) != 0)\n-    phsa_fatal_error (3);\n-\n   context->group_segment_start_addr = (size_t) group_base_ptr;\n \n   /* HSA seems to allow the WG size to be larger than the grid size.  We need\n@@ -509,10 +490,6 @@ phsa_execute_work_groups (PHSAKernelLaunchData *context, void *group_base_ptr)\n   printf (\"### %lu WIs executed in %lu s (%lu WIs / s)\\n\", wi_total,\n \t  (uint64_t) spent_time_sec, (uint64_t) wis_per_sec);\n #endif\n-\n-  if (dp->group_segment_size > 0)\n-    free (group_base_ptr);\n-\n   free (private_base_ptr);\n   private_base_ptr = NULL;\n }"}]}