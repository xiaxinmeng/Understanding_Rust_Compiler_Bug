{"sha": "b0057efd3030267c324d1019786a428fd61b5de9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwNTdlZmQzMDMwMjY3YzMyNGQxMDE5Nzg2YTQyOGZkNjFiNWRlOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-12-02T07:55:40Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-12-02T07:55:40Z"}, "message": "S/390: Enable vrepi constants.\n\ngcc/testsuite/ChangeLog:\n\n2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vector/vec-vrepi-1.c: New test.\n\ngcc/ChangeLog:\n\n2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/constraints.md (\"jKK\"): New constraint.\n\t* config/s390/s390.c (tm-constrs.h): Include for\n\tsatisfies_constraint_*.\n\t(s390_legitimate_constant_p): Allow jKK constants.  Use\n\tsatisfies_constraint_* also for the others.\n\t(legitimate_reload_vector_constant_p): Likewise.\n\t(print_operand): Allow h output modifier on vectors.\n\t* config/s390/vector.md (\"mov<mode>\"): Add vrepi.\n\nFrom-SVN: r231154", "tree": {"sha": "350f6c089d2297c2fac47e42d5c475fd621ecebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/350f6c089d2297c2fac47e42d5c475fd621ecebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0057efd3030267c324d1019786a428fd61b5de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0057efd3030267c324d1019786a428fd61b5de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0057efd3030267c324d1019786a428fd61b5de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0057efd3030267c324d1019786a428fd61b5de9/comments", "author": null, "committer": null, "parents": [{"sha": "a4a443cee2ea9c2db55e2802d46a4d5b6cbe1784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a443cee2ea9c2db55e2802d46a4d5b6cbe1784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a443cee2ea9c2db55e2802d46a4d5b6cbe1784"}], "stats": {"total": 152, "additions": 122, "deletions": 30}, "files": [{"sha": "c5b4fdab3d3e09f6ee7d3d90454d26a25d6091ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0057efd3030267c324d1019786a428fd61b5de9", "patch": "@@ -1,3 +1,14 @@\n+2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/constraints.md (\"jKK\"): New constraint.\n+\t* config/s390/s390.c (tm-constrs.h): Include for\n+\tsatisfies_constraint_*.\n+\t(s390_legitimate_constant_p): Allow jKK constants.  Use\n+\tsatisfies_constraint_* also for the others.\n+\t(legitimate_reload_vector_constant_p): Likewise.\n+\t(print_operand): Allow h output modifier on vectors.\n+\t* config/s390/vector.md (\"mov<mode>\"): Add vrepi.\n+\n 2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vector.md (\"*vec_splats<mode>\"): Fix constraint"}, {"sha": "1dab92ac66ab14d3188be30caa9daa361581808b", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=b0057efd3030267c324d1019786a428fd61b5de9", "patch": "@@ -34,6 +34,8 @@\n ;;         jm1: constant scalar or vector with all bits set\n ;;         jxx: contiguous bitmask of 0 or 1 in all vector elements\n ;;         jyy: constant consisting of byte chunks being either 0 or 0xff\n+;;         jKK: constant vector with all elements having the same value and\n+;;              matching K constraint\n ;;    t -- Access registers 36 and 37.\n ;;    v -- Vector registers v0-v31.\n ;;    C -- A signed 8-bit constant (-128..127)\n@@ -108,23 +110,6 @@\n   \"FP_REGS\"\n   \"Floating point registers\")\n \n-(define_constraint \"j00\"\n-  \"Zero scalar or vector constant\"\n-  (match_test \"op == CONST0_RTX (GET_MODE (op))\"))\n-\n-(define_constraint \"jm1\"\n-  \"All one bit scalar or vector constant\"\n-  (match_test \"op == CONSTM1_RTX (GET_MODE (op))\"))\n-\n-(define_constraint \"jxx\"\n-  \"@internal\"\n-  (and (match_code \"const_vector\")\n-       (match_test \"s390_contiguous_bitmask_vector_p (op, NULL, NULL)\")))\n-\n-(define_constraint \"jyy\"\n-  \"@internal\"\n-  (and (match_code \"const_vector\")\n-       (match_test \"s390_bytemask_vector_p (op, NULL)\")))\n \n (define_register_constraint \"t\"\n   \"ACCESS_REGS\"\n@@ -402,6 +387,33 @@\n        (match_test \"s390_O_constraint_str ('n', ival)\")))\n \n \n+;;\n+;; Vector constraints follow.\n+;;\n+\n+(define_constraint \"j00\"\n+  \"Zero scalar or vector constant\"\n+  (match_test \"op == CONST0_RTX (GET_MODE (op))\"))\n+\n+(define_constraint \"jm1\"\n+  \"All one bit scalar or vector constant\"\n+  (match_test \"op == CONSTM1_RTX (GET_MODE (op))\"))\n+\n+(define_constraint \"jxx\"\n+  \"@internal\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"s390_contiguous_bitmask_vector_p (op, NULL, NULL)\")))\n+\n+(define_constraint \"jyy\"\n+  \"@internal\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"s390_bytemask_vector_p (op, NULL)\")))\n+\n+(define_constraint \"jKK\"\n+  \"@internal\"\n+  (and (and (match_code \"const_vector\")\n+\t    (match_test \"const_vec_duplicate_p (op)\"))\n+       (match_test \"satisfies_constraint_K (XVECEXP (op, 0, 0))\")))\n \n \n ;;"}, {"sha": "73465ef21e4402410a73013eaa372db2b0aa2c98", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b0057efd3030267c324d1019786a428fd61b5de9", "patch": "@@ -74,6 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n #include \"intl.h\"\n+#include \"tm-constrs.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -3643,9 +3644,11 @@ s390_legitimate_constant_p (machine_mode mode, rtx op)\n       if (GET_MODE_SIZE (mode) != 16)\n \treturn 0;\n \n-      if (!const0_operand (op, mode)\n-\t  && !s390_contiguous_bitmask_vector_p (op, NULL, NULL)\n-\t  && !s390_bytemask_vector_p (op, NULL))\n+      if (!satisfies_constraint_j00 (op)\n+\t  && !satisfies_constraint_jm1 (op)\n+\t  && !satisfies_constraint_jKK (op)\n+\t  && !satisfies_constraint_jxx (op)\n+\t  && !satisfies_constraint_jyy (op))\n \treturn 0;\n     }\n \n@@ -3826,14 +3829,12 @@ legitimate_reload_fp_constant_p (rtx op)\n static bool\n legitimate_reload_vector_constant_p (rtx op)\n {\n-  /* FIXME: Support constant vectors with all the same 16 bit unsigned\n-     operands.  These can be loaded with vrepi.  */\n-\n   if (TARGET_VX && GET_MODE_SIZE (GET_MODE (op)) == 16\n-      && (const0_operand (op, GET_MODE (op))\n-\t  || constm1_operand (op, GET_MODE (op))\n-\t  || s390_contiguous_bitmask_vector_p (op, NULL, NULL)\n-\t  || s390_bytemask_vector_p (op, NULL)))\n+      && (satisfies_constraint_j00 (op)\n+\t  || satisfies_constraint_jm1 (op)\n+\t  || satisfies_constraint_jKK (op)\n+\t  || satisfies_constraint_jxx (op)\n+\t  || satisfies_constraint_jyy (op)))\n     return true;\n \n   return false;\n@@ -7132,6 +7133,11 @@ print_operand (FILE *file, rtx x, int code)\n     case CONST_VECTOR:\n       switch (code)\n \t{\n+\tcase 'h':\n+\t  gcc_assert (const_vec_duplicate_p (x));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+\t\t   ((INTVAL (XVECEXP (x, 0, 0)) & 0xffff) ^ 0x8000) - 0x8000);\n+\t  break;\n \tcase 'e':\n \tcase 's':\n \t  {"}, {"sha": "9c1e6a6bd0ea36cc89b87f14c8447685695840d4", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=b0057efd3030267c324d1019786a428fd61b5de9", "patch": "@@ -137,8 +137,8 @@\n \n ; Full HW vector size moves\n (define_insn \"mov<mode>\"\n-  [(set (match_operand:V_128 0 \"nonimmediate_operand\" \"=v, v,QR,  v,  v,  v,  v,v,d\")\n-\t(match_operand:V_128 1 \"general_operand\"      \" v,QR, v,j00,jm1,jyy,jxx,d,v\"))]\n+  [(set (match_operand:V_128 0 \"nonimmediate_operand\" \"=v, v,QR,  v,  v,  v,  v,  v,v,d\")\n+\t(match_operand:V_128 1 \"general_operand\"      \" v,QR, v,j00,jm1,jyy,jxx,jKK,d,v\"))]\n   \"TARGET_VX\"\n   \"@\n    vlr\\t%v0,%v1\n@@ -148,9 +148,10 @@\n    vone\\t%v0\n    vgbm\\t%v0,%t1\n    vgm<bhfgq>\\t%v0,%s1,%e1\n+   vrepi<bhfgq>\\t%v0,%h1\n    vlvgp\\t%v0,%1,%N1\n    #\"\n-  [(set_attr \"op_type\" \"VRR,VRX,VRX,VRI,VRI,VRI,VRI,VRR,*\")])\n+  [(set_attr \"op_type\" \"VRR,VRX,VRX,VRI,VRI,VRI,VRI,VRI,VRR,*\")])\n \n (define_split\n   [(set (match_operand:V_128 0 \"register_operand\" \"\")"}, {"sha": "ea09cb1640a24e492a0a289f8dd24cc9acc59034", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0057efd3030267c324d1019786a428fd61b5de9", "patch": "@@ -1,3 +1,7 @@\n+2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-vrepi-1.c: New test.\n+\n 2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/zvector/vec-splat-1.c: New test."}, {"sha": "27bf39e09638221904ecdc8fc5f17e4bd7f3dd5d", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-vrepi-1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-vrepi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0057efd3030267c324d1019786a428fd61b5de9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-vrepi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-vrepi-1.c?ref=b0057efd3030267c324d1019786a428fd61b5de9", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -march=z13 --save-temps\" } */\n+/* { dg-require-effective-target vector } */\n+\n+typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n+typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+\n+uv2di __attribute__((noinline))\n+foo1 ()\n+{\n+  return (uv2di){ 0x7f0f, 0x7f0f };\n+}\n+/* { dg-final { scan-assembler-times \"vrepig\\t%v24,32527\" 1 } } */\n+\n+uv4si __attribute__((noinline))\n+foo2 ()\n+{\n+  return (uv4si){ 0x7f0f, 0x7f0f, 0x7f0f, 0x7f0f };\n+}\n+/* { dg-final { scan-assembler-times \"vrepif\\t%v24,32527\" 1 } } */\n+\n+uv8hi __attribute__((noinline))\n+foo3 ()\n+{\n+  return (uv8hi){ 0x7f0f, 0x7f0f, 0x7f0f, 0x7f0f,\n+      0x7f0f, 0x7f0f, 0x7f0f, 0x7f0f };\n+}\n+/* { dg-final { scan-assembler-times \"vrepih\\t%v24,32527\" 1 } } */\n+\n+uv16qi __attribute__((noinline))\n+foo4 ()\n+{\n+  return (uv16qi){ 0x77, 0x77, 0x77, 0x77,\n+      0x77, 0x77, 0x77, 0x77,\n+      0x77, 0x77, 0x77, 0x77,\n+      0x77, 0x77, 0x77, 0x77 };\n+}\n+/* { dg-final { scan-assembler-times \"vrepib\\t%v24,119\" 1 } } */\n+\n+int\n+main ()\n+{\n+  if (foo1()[1] != 0x7f0f)\n+    __builtin_abort ();\n+\n+  if (foo2()[1] != 0x7f0f)\n+    __builtin_abort ();\n+\n+  if (foo3()[1] != 0x7f0f)\n+    __builtin_abort ();\n+\n+  if (foo4()[1] != 0x77)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}