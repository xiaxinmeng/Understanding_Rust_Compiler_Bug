{"sha": "ea298f7ad0170458e740b03eb9af9b90b697f92f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyOThmN2FkMDE3MDQ1OGU3NDBiMDNlYjlhZjliOTBiNjk3ZjkyZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-07-15T20:26:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-07-15T20:26:43Z"}, "message": "i386.md (@test<mode>_ccno_1): Rename from test<mode>_ccno_1.\n\n\t* config/i386/i386.md (@test<mode>_ccno_1):\n\tRename from test<mode>_ccno_1.\n\t(*testdi_1): Remove redundant alternatives.  Remove modrm attribute.\n\t(*testqi_1_maybe_si): Remove modrm attribute.\n\t(*test<mode>_1): Ditto.\n\t* config/i386/i386-expand.c (ix86_split_idivmod): Use\n\tgen_test_ccno_1 and gen_extend_insn.\n\nFrom-SVN: r273496", "tree": {"sha": "cce25c2fa2b85250d77b486bab29931826f9e9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cce25c2fa2b85250d77b486bab29931826f9e9c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea298f7ad0170458e740b03eb9af9b90b697f92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea298f7ad0170458e740b03eb9af9b90b697f92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea298f7ad0170458e740b03eb9af9b90b697f92f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea298f7ad0170458e740b03eb9af9b90b697f92f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c559f3ef4eec68c43c8937c3aa08a383e9cf6251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c559f3ef4eec68c43c8937c3aa08a383e9cf6251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c559f3ef4eec68c43c8937c3aa08a383e9cf6251"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "92aed39806b818e0c586050f3ef4d03f22d83b87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea298f7ad0170458e740b03eb9af9b90b697f92f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea298f7ad0170458e740b03eb9af9b90b697f92f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea298f7ad0170458e740b03eb9af9b90b697f92f", "patch": "@@ -1,3 +1,13 @@\n+2019-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (@test<mode>_ccno_1):\n+\tRename from test<mode>_ccno_1.\n+\t(*testdi_1): Remove redundant alternatives.  Remove modrm attribute.\n+\t(*testqi_1_maybe_si): Remove modrm attribute.\n+\t(*test<mode>_1): Ditto.\n+\t* config/i386/i386-expand.c (ix86_split_idivmod): Use\n+\tgen_test_ccno_1 and gen_extend_insn.\n+\n 2019-07-15  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-alias.c (aliasing_component_refs_walk): Initialize same_p"}, {"sha": "d50e21e8a1cee37660908a60a633b8d7d4e0c6dc", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea298f7ad0170458e740b03eb9af9b90b697f92f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea298f7ad0170458e740b03eb9af9b90b697f92f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=ea298f7ad0170458e740b03eb9af9b90b697f92f", "patch": "@@ -1122,8 +1122,6 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n   rtx_insn *insn;\n   rtx scratch, tmp0, tmp1, tmp2;\n   rtx (*gen_divmod4_1) (rtx, rtx, rtx, rtx);\n-  rtx (*gen_zero_extend) (rtx, rtx);\n-  rtx (*gen_test_ccno_1) (rtx, rtx);\n \n   switch (mode)\n     {\n@@ -1135,21 +1133,16 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n \t  else\n \t    gen_divmod4_1\n \t      = unsigned_p ? gen_udivmodsi4_zext_2 : gen_divmodsi4_zext_2;\n-\t  gen_zero_extend = gen_zero_extendqisi2;\n \t}\n       else\n-\t{\n-\t  gen_divmod4_1\n-\t    = unsigned_p ? gen_udivmodsi4_zext_1 : gen_divmodsi4_zext_1;\n-\t  gen_zero_extend = gen_zero_extendqidi2;\n-\t}\n-      gen_test_ccno_1 = gen_testsi_ccno_1;\n+\tgen_divmod4_1\n+\t  = unsigned_p ? gen_udivmodsi4_zext_1 : gen_divmodsi4_zext_1;\n       break;\n+\n     case E_DImode:\n       gen_divmod4_1 = unsigned_p ? gen_udivmoddi4_1 : gen_divmoddi4_1;\n-      gen_test_ccno_1 = gen_testdi_ccno_1;\n-      gen_zero_extend = gen_zero_extendqidi2;\n       break;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -1164,7 +1157,7 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n   emit_move_insn (scratch, operands[2]);\n   scratch = expand_simple_binop (mode, IOR, scratch, operands[3],\n \t\t\t\t scratch, 1, OPTAB_DIRECT);\n-  emit_insn (gen_test_ccno_1 (scratch, GEN_INT (-0x100)));\n+  emit_insn (gen_test_ccno_1 (mode, scratch, GEN_INT (-0x100)));\n   tmp0 = gen_rtx_REG (CCNOmode, FLAGS_REG);\n   tmp0 = gen_rtx_EQ (VOIDmode, tmp0, const0_rtx);\n   tmp0 = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp0,\n@@ -1227,7 +1220,9 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n \n   /* Zero extend quotient from AL.  */\n   tmp1 = gen_lowpart (QImode, tmp0);\n-  insn = emit_insn (gen_zero_extend (operands[0], tmp1));\n+  insn = emit_insn (gen_extend_insn\n+\t\t    (operands[0], tmp1,\n+\t\t     GET_MODE (operands[0]), QImode, 1));\n   set_unique_reg_note (insn, REG_EQUAL, div);\n \n   emit_label (end_label);"}, {"sha": "19d1682317b0a3189bda4813302b03d82332b73a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea298f7ad0170458e740b03eb9af9b90b697f92f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea298f7ad0170458e740b03eb9af9b90b697f92f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ea298f7ad0170458e740b03eb9af9b90b697f92f", "patch": "@@ -8124,7 +8124,7 @@\n ;; On Pentium, \"test imm, reg\" is pairable only with eax, ax, and al.\n ;; Note that this excludes ah.\n \n-(define_expand \"test<mode>_ccno_1\"\n+(define_expand \"@test<mode>_ccno_1\"\n   [(set (reg:CCNO FLAGS_REG)\n \t(compare:CCNO\n \t  (and:SWI48\n@@ -8142,19 +8142,15 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t (and:DI\n-\t  (match_operand:DI 0 \"nonimmediate_operand\" \"%!*a,r,!*a,r,rm\")\n-\t  (match_operand:DI 1 \"x86_64_szext_nonmemory_operand\" \"Z,Z,e,e,re\"))\n+\t  (match_operand:DI 0 \"nonimmediate_operand\" \"r,rm\")\n+\t  (match_operand:DI 1 \"x86_64_szext_nonmemory_operand\" \"Z,re\"))\n \t (const_int 0)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{l}\\t{%k1, %k0|%k0, %k1}\n-   test{l}\\t{%k1, %k0|%k0, %k1}\n-   test{q}\\t{%1, %0|%0, %1}\n-   test{q}\\t{%1, %0|%0, %1}\n    test{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test\")\n-   (set_attr \"modrm\" \"0,1,0,1,1\")\n-   (set_attr \"mode\" \"SI,SI,DI,DI,DI\")])\n+   (set_attr \"mode\" \"SI,DI\")])\n \n (define_insn \"*testqi_1_maybe_si\"\n   [(set (reg FLAGS_REG)\n@@ -8177,7 +8173,6 @@\n   return \"test{b}\\t{%1, %0|%0, %1}\";\n }\n   [(set_attr \"type\" \"test\")\n-   (set_attr \"modrm\" \"0,1,1,1\")\n    (set_attr \"mode\" \"QI,QI,QI,SI\")\n    (set_attr \"pent_pair\" \"uv,np,uv,np\")])\n \n@@ -8191,7 +8186,6 @@\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test\")\n-   (set_attr \"modrm\" \"0,1,1\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"pent_pair\" \"uv,np,uv\")])\n "}]}