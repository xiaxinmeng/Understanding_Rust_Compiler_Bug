{"sha": "8afb53589b8c4378636f940d8e0d19e6e3db75b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmYjUzNTg5YjhjNDM3ODYzNmY5NDBkOGUwZDE5ZTZlM2RiNzViNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-28T15:02:38Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-28T15:02:38Z"}, "message": "[arm] Fix incorrect __ARM_ARCH_PROFILE for -march=armv7\n\nACLE explicitly states that when targetting the common subset of\nARMv7-A, ARMv7-R and ARMv7-M, the __ARM_ARCH_PROFILE macro should not\nbe set.  We currently set it to 'M' which is clearly erroneous.\n\nThe logic for creating this is very convoluted and also somewhat\nfragile, so I've taken the opportunity to use the new CPU and\narchitecture definition infrastructure to record the profile for each\narchitecture explicitly rather than try to reconstruct it from other\ndata.  I think this results in a much more robust solution.\n\n2017-06-28  Richard Earnshaw  <rearnsha@arm.com>\n\n\t* config/arm/parsecpu.awk (profile): Parse new keyword in an arch\n\tcontext.\n\t(gen_comm_data): Emit architectural setting of arch_prof.\n\t* config/arm/arm-cpus.in (armv6-m, armv6s-m, armv7-a, armv7ve): Set the\n\tprofile.\n\t(armv7-r, armv7-m, armv7e-m, armv8-a, armv8.1-a, armv8.2-a): Likewise.\n\t(armv8-m.base, armv8-m.main): Likewise.\n\t* arm-protos.h (arm_build_target): Add profile field.\n\t(arch_option): Likewise.\n\t* config/arm/arm.c (arm_configure_build_target): Copy the profile to\n\tthe active target.\n\t* config/arm/arm.h (TARGET_ARM_ARCH_PROFILE): Use\n\tarm_active_target.profile.\n\nFrom-SVN: r249743", "tree": {"sha": "0df647942750f8c8458fbe9033d4079b25f2549e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0df647942750f8c8458fbe9033d4079b25f2549e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8afb53589b8c4378636f940d8e0d19e6e3db75b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afb53589b8c4378636f940d8e0d19e6e3db75b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afb53589b8c4378636f940d8e0d19e6e3db75b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afb53589b8c4378636f940d8e0d19e6e3db75b4/comments", "author": null, "committer": null, "parents": [{"sha": "56a6d474ab255eddf334bd77df014673d4035336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a6d474ab255eddf334bd77df014673d4035336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a6d474ab255eddf334bd77df014673d4035336"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "0849c901faca4c7ecb0089821e69ed60afed00be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8afb53589b8c4378636f940d8e0d19e6e3db75b4", "patch": "@@ -1,3 +1,19 @@\n+2017-06-28  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/parsecpu.awk (profile): Parse new keyword in an arch\n+\tcontext.\n+\t(gen_comm_data): Emit architectural setting of arch_prof.\n+\t* config/arm/arm-cpus.in (armv6-m, armv6s-m, armv7-a, armv7ve): Set the\n+\tprofile.\n+\t(armv7-r, armv7-m, armv7e-m, armv8-a, armv8.1-a, armv8.2-a): Likewise.\n+\t(armv8-m.base, armv8-m.main): Likewise.\n+\t* arm-protos.h (arm_build_target): Add profile field.\n+\t(arch_option): Likewise.\n+\t* config/arm/arm.c (arm_configure_build_target): Copy the profile to\n+\tthe active target.\n+\t* config/arm/arm.h (TARGET_ARM_ARCH_PROFILE): Use\n+\tarm_active_target.profile.\n+\n 2017-06-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/81227"}, {"sha": "4528d071259dbd8394ccb6759b25bd6c4bc6ca03", "filename": "gcc/config/arm/arm-cpu-cdata.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h?ref=8afb53589b8c4378636f940d8e0d19e6e3db75b4", "patch": "@@ -2106,6 +2106,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"2\", BASE_ARCH_2,\n+    0,\n     TARGET_CPU_arm2,\n   },\n   {\n@@ -2116,6 +2117,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"2\", BASE_ARCH_2,\n+    0,\n     TARGET_CPU_arm2,\n   },\n   {\n@@ -2126,6 +2128,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"3\", BASE_ARCH_3,\n+    0,\n     TARGET_CPU_arm6,\n   },\n   {\n@@ -2136,6 +2139,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"3M\", BASE_ARCH_3M,\n+    0,\n     TARGET_CPU_arm7m,\n   },\n   {\n@@ -2146,6 +2150,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"4\", BASE_ARCH_4,\n+    0,\n     TARGET_CPU_arm7tdmi,\n   },\n   {\n@@ -2156,6 +2161,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"4T\", BASE_ARCH_4T,\n+    0,\n     TARGET_CPU_arm7tdmi,\n   },\n   {\n@@ -2166,6 +2172,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"5\", BASE_ARCH_5,\n+    0,\n     TARGET_CPU_arm10tdmi,\n   },\n   {\n@@ -2176,6 +2183,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"5T\", BASE_ARCH_5T,\n+    0,\n     TARGET_CPU_arm10tdmi,\n   },\n   {\n@@ -2186,6 +2194,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"5E\", BASE_ARCH_5E,\n+    0,\n     TARGET_CPU_arm1026ejs,\n   },\n   {\n@@ -2196,6 +2205,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"5TE\", BASE_ARCH_5TE,\n+    0,\n     TARGET_CPU_arm1026ejs,\n   },\n   {\n@@ -2206,6 +2216,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"5TEJ\", BASE_ARCH_5TEJ,\n+    0,\n     TARGET_CPU_arm1026ejs,\n   },\n   {\n@@ -2216,6 +2227,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6\", BASE_ARCH_6,\n+    0,\n     TARGET_CPU_arm1136js,\n   },\n   {\n@@ -2226,6 +2238,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6J\", BASE_ARCH_6J,\n+    0,\n     TARGET_CPU_arm1136js,\n   },\n   {\n@@ -2236,6 +2249,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6K\", BASE_ARCH_6K,\n+    0,\n     TARGET_CPU_mpcore,\n   },\n   {\n@@ -2246,6 +2260,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6Z\", BASE_ARCH_6Z,\n+    0,\n     TARGET_CPU_arm1176jzs,\n   },\n   {\n@@ -2256,6 +2271,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6KZ\", BASE_ARCH_6KZ,\n+    0,\n     TARGET_CPU_arm1176jzs,\n   },\n   {\n@@ -2266,6 +2282,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6KZ\", BASE_ARCH_6KZ,\n+    0,\n     TARGET_CPU_arm1176jzs,\n   },\n   {\n@@ -2276,6 +2293,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6T2\", BASE_ARCH_6T2,\n+    0,\n     TARGET_CPU_arm1156t2s,\n   },\n   {\n@@ -2286,6 +2304,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6M\", BASE_ARCH_6M,\n+    'M',\n     TARGET_CPU_cortexm1,\n   },\n   {\n@@ -2296,6 +2315,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"6M\", BASE_ARCH_6M,\n+    'M',\n     TARGET_CPU_cortexm1,\n   },\n   {\n@@ -2306,6 +2326,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"7\", BASE_ARCH_7,\n+    0,\n     TARGET_CPU_cortexa8,\n   },\n   {\n@@ -2316,6 +2337,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"7A\", BASE_ARCH_7A,\n+    'A',\n     TARGET_CPU_cortexa8,\n   },\n   {\n@@ -2326,6 +2348,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"7A\", BASE_ARCH_7A,\n+    'A',\n     TARGET_CPU_cortexa8,\n   },\n   {\n@@ -2336,6 +2359,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"7R\", BASE_ARCH_7R,\n+    'R',\n     TARGET_CPU_cortexr4,\n   },\n   {\n@@ -2346,6 +2370,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"7M\", BASE_ARCH_7M,\n+    'M',\n     TARGET_CPU_cortexm3,\n   },\n   {\n@@ -2356,6 +2381,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"7EM\", BASE_ARCH_7EM,\n+    'M',\n     TARGET_CPU_cortexm4,\n   },\n   {\n@@ -2366,6 +2392,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"8A\", BASE_ARCH_8A,\n+    'A',\n     TARGET_CPU_cortexa53,\n   },\n   {\n@@ -2376,6 +2403,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"8A\", BASE_ARCH_8A,\n+    'A',\n     TARGET_CPU_cortexa53,\n   },\n   {\n@@ -2386,6 +2414,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"8A\", BASE_ARCH_8A,\n+    'A',\n     TARGET_CPU_cortexa53,\n   },\n   {\n@@ -2396,6 +2425,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"8M_BASE\", BASE_ARCH_8M_BASE,\n+    'M',\n     TARGET_CPU_cortexm23,\n   },\n   {\n@@ -2406,6 +2436,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n+    'M',\n     TARGET_CPU_cortexm7,\n   },\n   {\n@@ -2416,6 +2447,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"5TE\", BASE_ARCH_5TE,\n+    0,\n     TARGET_CPU_iwmmxt,\n   },\n   {\n@@ -2426,6 +2458,7 @@ const arch_option all_architectures[] =\n       isa_nobit\n     },\n     \"5TE\", BASE_ARCH_5TE,\n+    0,\n     TARGET_CPU_iwmmxt2,\n   },\n   {{NULL, NULL, {isa_nobit}},"}, {"sha": "323174006bcfad8e77992e78304dc821b13afd97", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=8afb53589b8c4378636f940d8e0d19e6e3db75b4", "patch": "@@ -46,6 +46,7 @@\n #   tune for <cpu>\n #   [tune flags <list>]\n #   base <name>\n+#   [profile <A|R|M>]\n #   isa <isa-flags-list>\n # end arch <name>\n #\n@@ -211,12 +212,14 @@ end arch armv6t2\n begin arch armv6-m\n  tune for cortex-m1\n  base 6M\n+ profile M\n  isa ARMv6m\n end arch armv6-m\n \n begin arch armv6s-m\n  tune for cortex-m1\n  base 6M\n+ profile M\n  isa ARMv6m\n end arch armv6s-m\n \n@@ -235,6 +238,7 @@ begin arch armv7-a\n  tune for cortex-a8\n  tune flags CO_PROC\n  base 7A\n+ profile A\n  isa ARMv7a\n # fp => VFPv3-d16, simd => neon-vfpv3\n  option fp\t       add VFPv3 FP_DBL\n@@ -257,6 +261,7 @@ begin arch armv7ve\n  tune for cortex-a8\n  tune flags CO_PROC\n  base 7A\n+ profile A\n  isa ARMv7ve\n # fp => VFPv4-d16, simd => neon-vfpv4\n  option vfpv3-d16      add VFPv3 FP_DBL\n@@ -279,6 +284,7 @@ begin arch armv7-r\n  tune for cortex-r4\n  tune flags CO_PROC\n  base 7R\n+ profile R\n  isa ARMv7r\n # ARMv7-r uses VFPv3-d16\n  option fp.sp add VFPv3\n@@ -294,6 +300,7 @@ begin arch armv7-m\n  tune for cortex-m3\n  tune flags CO_PROC\n  base 7M\n+ profile M\n  isa ARMv7m\n # In theory FP is permitted in v7-m, but in practice no implementations exist.\n # leave it out for now.\n@@ -303,6 +310,7 @@ begin arch armv7e-m\n  tune for cortex-m4\n  tune flags CO_PROC\n  base 7EM\n+ profile M\n  isa ARMv7em\n # fp => VFPv4-sp-d16; fpv5 => FPv5-sp-d16; fp.dp => FPv5-d16\n  option fp add VFPv4\n@@ -317,6 +325,7 @@ begin arch armv8-a\n  tune for cortex-a53\n  tune flags CO_PROC\n  base 8A\n+ profile A\n  isa ARMv8a\n  option crc add bit_crc32\n  option simd add FP_ARMv8 NEON\n@@ -329,6 +338,7 @@ begin arch armv8.1-a\n  tune for cortex-a53\n  tune flags CO_PROC\n  base 8A\n+ profile A\n  isa ARMv8_1a\n  option simd add FP_ARMv8 NEON\n  option crypto add FP_ARMv8 CRYPTO\n@@ -340,6 +350,7 @@ begin arch armv8.2-a\n  tune for cortex-a53\n  tune flags CO_PROC\n  base 8A\n+ profile A\n  isa ARMv8_2a\n  option simd add FP_ARMv8 NEON\n  option fp16 add bit_fp16 FP_ARMv8 NEON\n@@ -351,13 +362,15 @@ end arch armv8.2-a\n begin arch armv8-m.base\n  tune for cortex-m23\n  base 8M_BASE\n+ profile M\n  isa ARMv8m_base\n end arch armv8-m.base\n \n begin arch armv8-m.main\n  tune for cortex-m7\n  tune flags CO_PROC\n  base 8M_MAIN\n+ profile M\n  isa ARMv8m_main\n  option dsp add bit_ARMv7em\n # fp => FPv5-sp-d16; fp.dp => FPv5-d16"}, {"sha": "94fbcf003b23f841107de01cc8f15bae522985b7", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=8afb53589b8c4378636f940d8e0d19e6e3db75b4", "patch": "@@ -464,6 +464,8 @@ struct arm_build_target\n   const char *arch_pp_name;\n   /* The base architecture value.  */\n   enum base_architecture base_arch;\n+  /* The profile letter for the architecture, upper case by convention.  */\n+  char profile;\n   /* Bitmap encapsulating the isa_bits for the target environment.  */\n   sbitmap isa;\n   /* Flags used for tuning.  Long term, these move into tune_params.  */\n@@ -507,6 +509,8 @@ struct arch_option\n   const char *arch;\n   /* Base architecture, from which this specific architecture is derived.  */\n   enum base_architecture base_arch;\n+  /* The profile letter for the architecture, upper case by convention.  */\n+  const char profile;\n   /* Default tune target (in the absence of any more specific data).  */\n   enum processor_type tune_id;\n };"}, {"sha": "d3a40b902525c00b0ad667ba443d1d416a4bb044", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8afb53589b8c4378636f940d8e0d19e6e3db75b4", "patch": "@@ -3273,6 +3273,7 @@ arm_configure_build_target (struct arm_build_target *target,\n   /* Finish initializing the target structure.  */\n   target->arch_pp_name = arm_selected_arch->arch;\n   target->base_arch = arm_selected_arch->base_arch;\n+  target->profile = arm_selected_arch->profile;\n \n   target->tune_flags = tune_data->tune_flags;\n   target->tune = tune_data->tune;"}, {"sha": "6bc36bbad73197670b1e05f57952529abcbba139", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=8afb53589b8c4378636f940d8e0d19e6e3db75b4", "patch": "@@ -2189,13 +2189,7 @@ extern int making_const_table;\n /* Expands to an upper-case char of the target's architectural\n    profile.  */\n #define TARGET_ARM_ARCH_PROFILE\t\t\t\t\\\n-  (!arm_arch_notm\t\t\t\t\t\\\n-    ? 'M'\t\t\t\t\t\t\\\n-    : (arm_arch7\t\t\t\t\t\\\n-      ? (strlen (arm_arch_name) >=3\t\t\t\\\n-\t? (arm_arch_name[strlen (arm_arch_name) - 3])\t\\\n-      \t: 0)\t\t\t\t\t\t\\\n-      : 0))\n+  (arm_active_target.profile)\n \n /* Bit-field indicating what size LDREX/STREX loads/stores are available.\n    Bit 0 for bytes, up to bit 3 for double-words.  */"}, {"sha": "d38d66435b3dac6e071856b96092fbcbd8168c3e", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afb53589b8c4378636f940d8e0d19e6e3db75b4/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=8afb53589b8c4378636f940d8e0d19e6e3db75b4", "patch": "@@ -299,6 +299,12 @@ function gen_comm_data () {\n \t# arch, base_arch\n \tprint \"    \\\"\" arch_base[archs[n]] \"\\\", BASE_ARCH_\" \\\n \t    arch_base[archs[n]] \",\"\n+\t# profile letter code, or zero if none.\n+\tif (archs[n] in arch_prof) {\n+\t    print \"    \\'\" arch_prof[archs[n]] \"\\',\"\n+\t} else {\n+\t    print \"    0,\"\n+\t}\n \t# tune_id\n \tprint \"    TARGET_CPU_\" cpu_cnames[arch_tune_for[archs[n]]] \",\"\n \tprint \"  },\"\n@@ -477,6 +483,12 @@ BEGIN {\n     parse_ok = 1\n }\n \n+/^[ \t]*profile / {\n+    if (arch_name == \"\") fatal(\"\\\"profile\\\" statement outside of arch block\")\n+    arch_prof[arch_name] = $2\n+    parse_ok = 1\n+}\n+\n /^end arch / {\n     if (arch_name != $3) fatal(\"mimatched end arch\")\n     if (! arch_name in arch_tune_for) {"}]}