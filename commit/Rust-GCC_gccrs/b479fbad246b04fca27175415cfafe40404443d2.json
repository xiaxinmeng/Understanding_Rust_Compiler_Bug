{"sha": "b479fbad246b04fca27175415cfafe40404443d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3OWZiYWQyNDZiMDRmY2EyNzE3NTQxNWNmYWZlNDA0MDQ0NDNkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-15T19:20:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-15T19:20:02Z"}, "message": "Refactor uses-allocator construction\n\nRemove duplicated logic in experimental::pmr::polymorphic_allocator by\ncalling the __uses_allocator_construct helper.\n\nFix bugs in std::pmr::polymorphic_allocator with incorrect SFINAE\nconstraint and incorrect argument order.\n\n\t* include/bits/uses_allocator.h (__uses_allocator_construct): Qualify\n\tcalls to __uses_allocator_construct_impl and __use_alloc.\n\t* include/experimental/memory_resource\n\t(polymorphic_allocator::_M_construct): Remove.\n\t(polymorphic_allocator::construct): Call __uses_allocator_construct.\n\tQualify calls to __use_alloc.\n\t* include/std/memory_resource (polymorphic_allocator::construct): Fix\n\ttype in SFINAE constraint. Use constexpr if instead of tag dispatching\n\tto _S_construct overloads.\n\t(polymorphic_allocator::construct(pair<T1, T2>*, ...)): Fix order of\n\targuments to _S_construct_p.\n\t(polymorphic_allocator::_S_construct): Remove.\n\t(polymorphic_allocator::_S_construct_p): Return allocators by value\n\tnot by reference.\n\t* include/std/scoped_allocator (scoped_allocator_adaptor::construct):\n\tQualify calls to __use_alloc.\n\t* testsuite/20_util/polymorphic_allocator/construct_pair.cc: New test,\n\tcopied from testsuite/20_util/scoped_allocator/construct_pair.cc.\n\t* testsuite/experimental/polymorphic_allocator/1.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/construct_pair.cc:\n\tNew test.\n\nFrom-SVN: r263566", "tree": {"sha": "5014786303603f6b806ed4b037cd19d751a09ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5014786303603f6b806ed4b037cd19d751a09ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b479fbad246b04fca27175415cfafe40404443d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b479fbad246b04fca27175415cfafe40404443d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b479fbad246b04fca27175415cfafe40404443d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b479fbad246b04fca27175415cfafe40404443d2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e6ae576c48cd8efc26670b0d0bbb9e961393bf"}], "stats": {"total": 332, "additions": 274, "deletions": 58}, "files": [{"sha": "f9596aca81fbc47294ba6c417056064f3745352f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -1,5 +1,27 @@\n 2018-08-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/uses_allocator.h (__uses_allocator_construct): Qualify\n+\tcalls to __uses_allocator_construct_impl and __use_alloc.\n+\t* include/experimental/memory_resource\n+\t(polymorphic_allocator::_M_construct): Remove.\n+\t(polymorphic_allocator::construct): Call __uses_allocator_construct.\n+\tQualify calls to __use_alloc.\n+\t* include/std/memory_resource (polymorphic_allocator::construct): Fix\n+\ttype in SFINAE constraint. Use constexpr if instead of tag dispatching\n+\tto _S_construct overloads.\n+\t(polymorphic_allocator::construct(pair<T1, T2>*, ...)): Fix order of\n+\targuments to _S_construct_p.\n+\t(polymorphic_allocator::_S_construct): Remove.\n+\t(polymorphic_allocator::_S_construct_p): Return allocators by value\n+\tnot by reference.\n+\t* include/std/scoped_allocator (scoped_allocator_adaptor::construct):\n+\tQualify calls to __use_alloc.\n+\t* testsuite/20_util/polymorphic_allocator/construct_pair.cc: New test,\n+\tcopied from testsuite/20_util/scoped_allocator/construct_pair.cc.\n+\t* testsuite/experimental/polymorphic_allocator/1.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/construct_pair.cc:\n+\tNew test.\n+\n \t* src/c++17/memory_resource.cc [!_GLIBCXX_HAS_GTHREADS]\n \t(atomic_mem_res): Add unsynchronized definition for single-threaded.\n "}, {"sha": "1d313b7e7fd382e94ba48415261060c319a9229d", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -179,8 +179,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,\n \t\t\t\t    _Args&&... __args)\n     {\n-      __uses_allocator_construct_impl(__use_alloc<_Tp, _Alloc, _Args...>(__a),\n-\t\t\t\t      __ptr, std::forward<_Args>(__args)...);\n+      std::__uses_allocator_construct_impl(\n+\t  std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr,\n+\t  std::forward<_Args>(__args)...);\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "ccb45bfa33542ca758385060a961512b3b455ffc", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -123,27 +123,6 @@ namespace pmr {\n   template<typename _Tp>\n     class polymorphic_allocator\n     {\n-      using __uses_alloc1_ = __uses_alloc1<memory_resource*>;\n-      using __uses_alloc2_ = __uses_alloc2<memory_resource*>;\n-\n-      template<typename _Tp1, typename... _Args>\n-\tvoid\n-\t_M_construct(__uses_alloc0, _Tp1* __p, _Args&&... __args)\n-\t{ ::new(__p) _Tp1(std::forward<_Args>(__args)...); }\n-\n-      template<typename _Tp1, typename... _Args>\n-\tvoid\n-\t_M_construct(__uses_alloc1_, _Tp1* __p, _Args&&...  __args)\n-\t{\n-\t  ::new(__p) _Tp1(allocator_arg, this->resource(),\n-\t\t\t  std::forward<_Args>(__args)...);\n-\t}\n-\n-      template<typename _Tp1, typename... _Args>\n-\tvoid\n-\t_M_construct(__uses_alloc2_, _Tp1* __p, _Args&&...  __args)\n-\t{ ::new(__p) _Tp1(std::forward<_Args>(__args)..., this->resource()); }\n-\n     public:\n       using value_type = _Tp;\n \n@@ -178,10 +157,8 @@ namespace pmr {\n \tvoid\n \tconstruct(_Tp1* __p, _Args&&... __args)\n \t{\n-\t  memory_resource* const __resource = this->resource();\n-\t  auto __use_tag\n-\t    = __use_alloc<_Tp1, memory_resource*, _Args...>(__resource);\n-\t  _M_construct(__use_tag, __p, std::forward<_Args>(__args)...);\n+\t  std::__uses_allocator_construct(this->resource(), __p,\n+\t\t\t\t\t  std::forward<_Args>(__args)...);\n \t}\n \n       // Specializations for pair using piecewise construction\n@@ -193,9 +170,9 @@ namespace pmr {\n \t{\n \t  memory_resource* const __resource = this->resource();\n \t  auto __x_use_tag =\n-\t    __use_alloc<_Tp1, memory_resource*, _Args1...>(__resource);\n+\t    std::__use_alloc<_Tp1, memory_resource*, _Args1...>(__resource);\n \t  auto __y_use_tag =\n-\t    __use_alloc<_Tp2, memory_resource*, _Args2...>(__resource);\n+\t    std::__use_alloc<_Tp2, memory_resource*, _Args2...>(__resource);\n \n \t  ::new(__p) std::pair<_Tp1, _Tp2>(piecewise_construct,\n \t\t\t\t\t   _M_construct_p(__x_use_tag, __x),\n@@ -247,6 +224,9 @@ namespace pmr {\n       memory_resource* resource() const { return _M_resource; }\n \n     private:\n+      using __uses_alloc1_ = __uses_alloc1<memory_resource*>;\n+      using __uses_alloc2_ = __uses_alloc2<memory_resource*>;\n+\n       template<typename _Tuple>\n \t_Tuple&&\n \t_M_construct_p(__uses_alloc0, _Tuple& __t)"}, {"sha": "7dc35ae723d3ee38ca86b15ef0d5f07632a2ee4a", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -163,14 +163,20 @@ namespace pmr\n \n       template<typename _Tp1, typename... _Args>\n \t__attribute__((__nonnull__))\n-\ttypename __not_pair<_Tp>::type\n+\ttypename __not_pair<_Tp1>::type\n \tconstruct(_Tp1* __p, _Args&&... __args)\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 2969. polymorphic_allocator::construct() shouldn't pass resource()\n-\t  auto __use_tag\n-\t    = __use_alloc<_Tp1, polymorphic_allocator, _Args...>(*this);\n-\t  _S_construct(__use_tag, __p, std::forward<_Args>(__args)...);\n+\t  using __use_tag\n+\t    = std::__uses_alloc_t<_Tp1, polymorphic_allocator, _Args...>;\n+\t  if constexpr (is_base_of_v<__uses_alloc0, __use_tag>)\n+\t    ::new(__p) _Tp1(std::forward<_Args>(__args)...);\n+\t  else if constexpr (is_base_of_v<__uses_alloc1_, __use_tag>)\n+\t    ::new(__p) _Tp1(allocator_arg, *this,\n+\t\t\t    std::forward<_Args>(__args)...);\n+\t  else\n+\t    ::new(__p) _Tp1(std::forward<_Args>(__args)..., *this);\n \t}\n \n       template<typename _Tp1, typename _Tp2,\n@@ -188,8 +194,8 @@ namespace pmr\n \t  index_sequence_for<_Args2...> __y_i;\n \n \t  ::new(__p) pair<_Tp1, _Tp2>(piecewise_construct,\n-\t\t\t\t      _S_construct_p(__x_tag, __x, __x_i),\n-\t\t\t\t      _S_construct_p(__y_tag, __y, __y_i));\n+\t\t\t\t      _S_construct_p(__x_tag, __x_i, __x),\n+\t\t\t\t      _S_construct_p(__y_tag, __y_i, __y));\n \t}\n \n       template<typename _Tp1, typename _Tp2>\n@@ -247,31 +253,13 @@ namespace pmr\n       using __uses_alloc1_ = __uses_alloc1<polymorphic_allocator>;\n       using __uses_alloc2_ = __uses_alloc2<polymorphic_allocator>;\n \n-      template<typename _Tp1, typename... _Args>\n-\tstatic void\n-\t_S_construct(__uses_alloc0, _Tp1* __p, _Args&&... __args)\n-\t{ ::new(__p) _Tp1(std::forward<_Args>(__args)...); }\n-\n-      template<typename _Tp1, typename... _Args>\n-\tstatic void\n-\t_S_construct(__uses_alloc1_ __ua, _Tp1* __p, _Args&&... __args)\n-\t{\n-\t  ::new(__p) _Tp1(allocator_arg, *__ua._M_a,\n-\t\t\t  std::forward<_Args>(__args)...);\n-\t}\n-\n-      template<typename _Tp1, typename... _Args>\n-\tstatic void\n-\t_S_construct(__uses_alloc2_ __ua, _Tp1* __p, _Args&&... __args)\n-\t{ ::new(__p) _Tp1(std::forward<_Args>(__args)..., *__ua._M_a); }\n-\n       template<typename _Ind, typename... _Args>\n \tstatic tuple<_Args&&...>\n \t_S_construct_p(__uses_alloc0, _Ind, tuple<_Args...>& __t)\n \t{ return std::move(__t); }\n \n       template<size_t... _Ind, typename... _Args>\n-\tstatic tuple<allocator_arg_t, polymorphic_allocator&, _Args&&...>\n+\tstatic tuple<allocator_arg_t, polymorphic_allocator, _Args&&...>\n \t_S_construct_p(__uses_alloc1_ __ua, index_sequence<_Ind...>,\n \t\t       tuple<_Args...>& __t)\n \t{\n@@ -281,7 +269,7 @@ namespace pmr\n \t}\n \n       template<size_t... _Ind, typename... _Args>\n-\tstatic tuple<_Args&&..., polymorphic_allocator&>\n+\tstatic tuple<_Args&&..., polymorphic_allocator>\n \t_S_construct_p(__uses_alloc2_ __ua, index_sequence<_Ind...>,\n \t\t       tuple<_Args...>& __t)\n \t{ return { std::get<_Ind>(std::move(__t))..., *__ua._M_a }; }"}, {"sha": "f1f5dd93252efac26a5d08aa467061acadd9a33d", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -361,7 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  auto& __inner = inner_allocator();\n \t  auto __use_tag\n-\t    = __use_alloc<_Tp, inner_allocator_type, _Args...>(__inner);\n+\t    = std::__use_alloc<_Tp, inner_allocator_type, _Args...>(__inner);\n \t  _M_construct(__use_tag, __p, std::forward<_Args>(__args)...);\n \t}\n \n@@ -375,9 +375,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // 2203.  wrong argument types for piecewise construction\n \t  auto& __inner = inner_allocator();\n \t  auto __x_use_tag\n-\t    = __use_alloc<_T1, inner_allocator_type, _Args1...>(__inner);\n+\t    = std::__use_alloc<_T1, inner_allocator_type, _Args1...>(__inner);\n \t  auto __y_use_tag\n-\t    = __use_alloc<_T2, inner_allocator_type, _Args2...>(__inner);\n+\t    = std::__use_alloc<_T2, inner_allocator_type, _Args2...>(__inner);\n \t  typename _Build_index_tuple<sizeof...(_Args1)>::__type __x_indices;\n \t  typename _Build_index_tuple<sizeof...(_Args2)>::__type __y_indices;\n \t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;"}, {"sha": "d9cab043c0b494284d0e3f6d103f99662057481f", "filename": "libstdc++-v3/testsuite/20_util/polymorphic_allocator/construct_pair.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fconstruct_pair.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fconstruct_pair.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fconstruct_pair.cc?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -0,0 +1,110 @@\n+// Copyright (C) 2016-2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <memory_resource>\n+#include <utility>\n+#include <tuple>\n+\n+struct do_not_copy {\n+  do_not_copy() = default;\n+  do_not_copy(const do_not_copy&) { throw 1; }\n+};\n+\n+void\n+test01()\n+{\n+  struct X {\n+    X(do_not_copy&&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::pmr::polymorphic_allocator<pair> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<do_not_copy>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+void\n+test02()\n+{\n+  struct X {\n+    using allocator_type = std::pmr::polymorphic_allocator<int>;\n+    X(do_not_copy&&, const allocator_type&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::pmr::polymorphic_allocator<pair> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<do_not_copy>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+void\n+test03()\n+{\n+  struct X {\n+    using allocator_type = std::pmr::polymorphic_allocator<int>;\n+    X(std::allocator_arg_t, const allocator_type&, do_not_copy&&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::pmr::polymorphic_allocator<pair> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<do_not_copy>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+void\n+test04()\n+{\n+  struct X\n+  {\n+    using allocator_type = std::pmr::polymorphic_allocator<int>;\n+    X() = default;\n+    X(const X&) { throw 1; }\n+    X(const X&, const allocator_type&) { }\n+  };\n+\n+  struct Y\n+  {\n+    using allocator_type = std::pmr::polymorphic_allocator<int>;\n+    Y() = default;\n+    Y(const Y&) = delete;\n+    Y(std::allocator_arg_t, const allocator_type&, const Y&) { }\n+  };\n+\n+  using pair_type = std::pair<X, Y>;\n+  std::pmr::polymorphic_allocator<pair_type> a;\n+  auto ptr = a.allocate(1);\n+  /* not const */ pair_type p;\n+  a.construct(ptr, p); // LWG 2975\n+  a.deallocate(ptr, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "9046347171989b25c9a8fa3919f2888f73dd36ef", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/1.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2F1.cc?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/memory_resource>\n+\n+struct X { int i = 0; };\n+\n+using test_type = std::experimental::pmr::polymorphic_allocator<X>;\n+\n+static_assert(std::is_default_constructible<test_type>{}, \"\");\n+static_assert(std::is_destructible<test_type>{}, \"\");\n+static_assert(std::is_copy_constructible<test_type>{}, \"\");\n+// N.B. std::pmr::polymorphic_allocator is not assignable, see p0337r0\n+static_assert(std::is_copy_assignable<test_type>{}, \"\");\n+static_assert(std::is_constructible<test_type,\n+    std::experimental::pmr::memory_resource*>{}, \"\");\n+\n+static_assert(std::is_same<test_type::value_type, X>{}, \"\");\n+\n+static_assert(!std::is_polymorphic<test_type>{}, \"\");\n+static_assert(!std::is_final<test_type>{}, \"\");"}, {"sha": "1708f5e329ba07492d74d4b7e431e7d7ebee5a76", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/construct_pair.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fconstruct_pair.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b479fbad246b04fca27175415cfafe40404443d2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fconstruct_pair.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fconstruct_pair.cc?ref=b479fbad246b04fca27175415cfafe40404443d2", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+\n+#include <experimental/memory_resource>\n+#include <utility>\n+#include <tuple>\n+\n+struct A { };\n+\n+void\n+test01()\n+{\n+  struct X {\n+    X(A&&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::experimental::pmr::polymorphic_allocator<pair> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<A>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+void\n+test02()\n+{\n+  struct X {\n+    using allocator_type = std::experimental::pmr::polymorphic_allocator<int>;\n+    X(A&&, const allocator_type&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::experimental::pmr::polymorphic_allocator<pair> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<A>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+void\n+test03()\n+{\n+  struct X {\n+    using allocator_type = std::experimental::pmr::polymorphic_allocator<int>;\n+    X(std::allocator_arg_t, const allocator_type&, A&&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::experimental::pmr::polymorphic_allocator<pair> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<A>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}