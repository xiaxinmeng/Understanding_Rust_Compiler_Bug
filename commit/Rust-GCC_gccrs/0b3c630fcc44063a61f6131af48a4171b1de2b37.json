{"sha": "0b3c630fcc44063a61f6131af48a4171b1de2b37", "node_id": "C_kwDOANBUbNoAKDBiM2M2MzBmY2M0NDA2M2E2MWY2MTMxYWY0OGE0MTcxYjFkZTJiMzc", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-12T18:40:50Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-12T18:40:50Z"}, "message": "middle-end: don't form FMAs when multiplication is not single use. [PR108583]\n\nThe testcase\n\ntypedef unsigned int vec __attribute__((vector_size(32)));\nvec\nf3 (vec a, vec b, vec c)\n{\n  vec d = a * b;\n  return d + ((c + d) >> 1);\n}\n\nshows a case where we don't want to form an FMA due to the MUL not being single\nuse.  In this case to form an FMA we have to redo the MUL as well as we no\nlonger have it to share.\n\nAs such making an FMA here would be a de-optimization.\n\ngcc/ChangeLog:\n\n\tPR target/108583\n\t* tree-ssa-math-opts.cc (convert_mult_to_fma): Inhibit FMA in case not\n\tsingle use.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/108583\n\t* gcc.dg/mla_1.c: New test.\n\nCo-Authored-By: Richard Sandiford <richard.sandiford@arm.com>", "tree": {"sha": "b3033ac2f983291900c22964bfc11f10d12635ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3033ac2f983291900c22964bfc11f10d12635ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b3c630fcc44063a61f6131af48a4171b1de2b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3c630fcc44063a61f6131af48a4171b1de2b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3c630fcc44063a61f6131af48a4171b1de2b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3c630fcc44063a61f6131af48a4171b1de2b37/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c6ba86757f0684c5419c90651106900f5ecb5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c6ba86757f0684c5419c90651106900f5ecb5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c6ba86757f0684c5419c90651106900f5ecb5a"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "98e5808ee7005e3e5c1b2d5688bfaf267a4d66ce", "filename": "gcc/testsuite/gcc.dg/mla_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3c630fcc44063a61f6131af48a4171b1de2b37/gcc%2Ftestsuite%2Fgcc.dg%2Fmla_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3c630fcc44063a61f6131af48a4171b1de2b37/gcc%2Ftestsuite%2Fgcc.dg%2Fmla_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmla_1.c?ref=0b3c630fcc44063a61f6131af48a4171b1de2b37", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-options \"-O2 -msve-vector-bits=256 -march=armv8.2-a+sve -fdump-tree-optimized\" { target aarch64*-*-* } } */\n+\n+unsigned int\n+f1 (unsigned int a, unsigned int b, unsigned int c) {\n+  unsigned int d = a * b;\n+  return d + ((c + d) >> 1);\n+}\n+\n+unsigned int\n+g1 (unsigned int a, unsigned int b, unsigned int c) {\n+  return a * b + c;\n+}\n+\n+__Uint32x4_t\n+f2 (__Uint32x4_t a, __Uint32x4_t b, __Uint32x4_t c) {\n+  __Uint32x4_t d = a * b;\n+  return d + ((c + d) >> 1);\n+}\n+\n+__Uint32x4_t\n+g2 (__Uint32x4_t a, __Uint32x4_t b, __Uint32x4_t c) {\n+  return a * b + c;\n+}\n+\n+typedef unsigned int vec __attribute__((vector_size(32))); vec\n+f3 (vec a, vec b, vec c)\n+{\n+  vec d = a * b;\n+  return d + ((c + d) >> 1);\n+}\n+\n+vec\n+g3 (vec a, vec b, vec c)\n+{\n+  return a * b + c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times {\\.FMA } 1 \"optimized\" { target aarch64*-*-* } } } */"}, {"sha": "26ed91d58fa4709a67c903ad446d267a3113c172", "filename": "gcc/tree-ssa-math-opts.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3c630fcc44063a61f6131af48a4171b1de2b37/gcc%2Ftree-ssa-math-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3c630fcc44063a61f6131af48a4171b1de2b37/gcc%2Ftree-ssa-math-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.cc?ref=0b3c630fcc44063a61f6131af48a4171b1de2b37", "patch": "@@ -3346,6 +3346,20 @@ convert_mult_to_fma (gimple *mul_stmt, tree op1, tree op2,\n \t\t    param_avoid_fma_max_bits));\n   bool defer = check_defer;\n   bool seen_negate_p = false;\n+\n+  /* There is no numerical difference between fused and unfused integer FMAs,\n+     and the assumption below that FMA is as cheap as addition is unlikely\n+     to be true, especially if the multiplication occurs multiple times on\n+     the same chain.  E.g., for something like:\n+\n+\t (((a * b) + c) >> 1) + (a * b)\n+\n+     we do not want to duplicate the a * b into two additions, not least\n+     because the result is not a natural FMA chain.  */\n+  if (ANY_INTEGRAL_TYPE_P (type)\n+      && !has_single_use (mul_result))\n+    return false;\n+\n   /* Make sure that the multiplication statement becomes dead after\n      the transformation, thus that all uses are transformed to FMAs.\n      This means we assume that an FMA operation has the same cost"}]}