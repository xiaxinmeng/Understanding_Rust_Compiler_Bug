{"sha": "052a4b28cadee0fa3210cf10e607e99aaa1d2522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyYTRiMjhjYWRlZTBmYTMyMTBjZjEwZTYwN2U5OWFhYTFkMjUyMg==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2000-02-17T04:09:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-02-17T04:09:21Z"}, "message": "invoke.texi: Add AVR invocation docs.\n\n        * invoke.texi: Add AVR invocation docs.\n        * install.texi: Add information about AVR.\n        * md.texi: Add AVR constraint letters description.\n        * extend.texi: Add description for AVR specific attributes.\n\nFrom-SVN: r32022", "tree": {"sha": "49a80b0e5056203e131e0b91b9c504a5bc1f785d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49a80b0e5056203e131e0b91b9c504a5bc1f785d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/052a4b28cadee0fa3210cf10e607e99aaa1d2522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052a4b28cadee0fa3210cf10e607e99aaa1d2522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052a4b28cadee0fa3210cf10e607e99aaa1d2522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052a4b28cadee0fa3210cf10e607e99aaa1d2522/comments", "author": null, "committer": null, "parents": [{"sha": "5ef57049f9a6cc27f909e73b0e4f41f3084c28a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef57049f9a6cc27f909e73b0e4f41f3084c28a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ef57049f9a6cc27f909e73b0e4f41f3084c28a0"}], "stats": {"total": 134, "additions": 131, "deletions": 3}, "files": [{"sha": "a843bcc95dea137c9f3a1081a8a7b155210ffd94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=052a4b28cadee0fa3210cf10e607e99aaa1d2522", "patch": "@@ -1,3 +1,10 @@\n+Wed Feb 16 21:07:53 2000  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* invoke.texi: Add AVR invocation docs.\n+\t* install.texi: Add information about AVR.\n+\t* md.texi: Add AVR constraint letters description.\n+\t* extend.texi: Add description for AVR specific attributes.\n+\n 2000-02-16  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* fixinc/fixinc.svr4: Wrap byteorder.h with extern \"C\"."}, {"sha": "87cf291428991ff116da55cfceea8c3e7d6a57df", "filename": "gcc/extend.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=052a4b28cadee0fa3210cf10e607e99aaa1d2522", "patch": "@@ -1682,6 +1682,25 @@ function is an interrupt handler.  The compiler will generate function\n entry and exit sequences suitable for use in an interrupt handler when this\n attribute is present.\n \n+Interrupt handler functions on the AVR processors\n+Use this option on the AVR to indicate that the specified\n+function is an interrupt handler.  The compiler will generate function\n+entry and exit sequences suitable for use in an interrupt handler when this\n+attribute is present. Interrupts will be enabled inside function.\n+\n+@item signal\n+@cindex signal handler functions on the AVR processors\n+Use this option on the AVR to indicate that the specified\n+function is an signal handler.  The compiler will generate function\n+entry and exit sequences suitable for use in an signal handler when this\n+attribute is present. Interrupts will be disabled inside function.\n+\n+@item naked\n+@cindex function without a prologue/epilogue code on the AVR processors\n+Use this option on the AVR to indicate that the specified\n+function don't have a prologue/epilogue.  The compiler don't generate\n+function entry and exit sequences.\n+\n @item model (@var{model-name})\n @cindex function addressability on the M32R/D\n Use this attribute on the M32R/D to set the addressability of an object,"}, {"sha": "9eb10aa73ef0e11af1ff558ad4ec6c34ff6b92dc", "filename": "gcc/install.texi", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=052a4b28cadee0fa3210cf10e607e99aaa1d2522", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988, 89, 92-98, 1999 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 89, 92-99, 2000 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -745,7 +745,7 @@ Here are the possible CPU types:\n \n @quotation\n @c gmicro, fx80, spur and tahoe omitted since they don't work.\n-1750a, a29k, alpha, arm, c@var{n}, clipper, dsp16xx, elxsi, fr30, h8300,\n+1750a, a29k, alpha, arm, avr, c@var{n}, clipper, dsp16xx, elxsi, fr30, h8300,\n hppa1.0, hppa1.1, i370, i386, i486, i586, i686, i786, i860, i960, m32r,\n m68000, m68k, m88k, mcore, mips, mipsel, mips64, mips64el, mn10200, mn10300,\n ns32k, pdp11, powerpc, powerpcle, romp, rs6000, sh, sparc, sparclite,\n@@ -977,6 +977,17 @@ particular configuration.\n @item a29k-*-bsd\n AMD Am29050 used in a system running a variant of BSD Unix.\n \n+@item avr\n+ATMEL AVR-family micro controllers.  These are used in embedded\n+applications.  There are no standard Unix configurations.\n+Supports following MCU's:\n+ - AT90S23xx\n+ - ATtiny22\n+ - AT90S44xx\n+ - AT90S85xx\n+ - ATmega603/603L\n+ - ATmega103/103L\n+\n @item decstation-*\n MIPS-based DECstations can support three different personalities:\n Ultrix, DEC OSF/1, and OSF/rose.  (Alpha-based DECstation products have"}, {"sha": "f3a483cd75b44a8e647b87f9197f6b7d3dbfad50", "filename": "gcc/invoke.texi", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=052a4b28cadee0fa3210cf10e607e99aaa1d2522", "patch": "@@ -428,6 +428,10 @@ in the following sections.\n -msoft-float -mrtd -mnortd -mregparam -mnoregparam -msb -mnosb\n -mbitfield -mnobitfield -mhimem -mnohimem\n \n+@emph{AVR Options}\n+-mmcu=@var{mcu} -msize -minit-stack=@var{n} -mno-interrupts\n+-mcall-prologues\n+\n @emph{MCore Options}\n -mhardlit, -mno-hardlit -mdiv -mno-div -mrelax-immediates \n -mno-relax-immediates -mwide-bitfields -mno-wide-bitfields\n@@ -3765,8 +3769,9 @@ that macro, which enables you to change the defaults.\n * TMS320C3x/C4x Options::\n * V850 Options::\n * ARC Options::\n-* MCore Options::\n * NS32K Options::\n+* AVR Options::\n+* MCore Options::\n @end menu\n \n @node M680x0 Options\n@@ -6841,6 +6846,32 @@ This is the default for all platforms.\n \n @end table\n \n+@node AVR Options\n+@subsection AVR Options\n+@cindex AVR Options\n+\n+These options are defined for AVR implementations:\n+\n+@table @code\n+@item -mmcu=@var{mcu}\n+Specify ATMEL AVR mcu (at90s23xx,attiny22,at90s44xx,at90s85xx,atmega603,\n+atmega103).\n+\n+@item -msize\n+Output instruction size's to the asm file\n+\n+@item -minit-stack=@var{N}\n+Specify the initial stack address\n+\n+@item -mno-interrupts\n+Generated code is not compatible with hardware interrupts.\n+Code size will be smaller.\n+\n+@item -mcall-prologues\n+Functions prologues/epilogues expanded as call to appropriate\n+subroutines. Code size will be smaller.\n+@end table\n+\n @node MCore Options\n @subsection MCore Options\n @cindex MCore options"}, {"sha": "8617adac3aea962100e96382ff5d283864a84478", "filename": "gcc/md.texi", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052a4b28cadee0fa3210cf10e607e99aaa1d2522/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=052a4b28cadee0fa3210cf10e607e99aaa1d2522", "patch": "@@ -1336,6 +1336,66 @@ A floating point constant (in @code{asm} statements, use the machine\n independent @samp{E} or @samp{F} instead)\n @end table\n \n+@item AVR family---@file{avr.h}\n+@table @code\n+@item l\n+Registers from r0 to r15\n+\n+@item a\n+Registers from r16 to r23\n+\n+@item d\n+Registers from r16 to r31\n+\n+@item w\n+Register from r24 to r31. This registers can be used in @samp{addw} command\n+\n+@item e\n+Pointer register (r26 - r31)\n+\n+@item b\n+Base pointer register (r28 - r31)\n+\n+@item t\n+Temporary register r0\n+\n+@item x\n+Register pair X (r27:r26)\n+\n+@item y\n+Register pair Y (r29:r28)\n+\n+@item z\n+Register pair Z (r31:r30)\n+\n+@item I\n+Constant greater than -1, less than 64\n+\n+@item J\n+Constant greater than -64, less than 1\n+\n+@item K\n+Constant integer 2\n+\n+@item L\n+Constant integer 0\n+\n+@item M\n+Constant that fits in 8 bits\n+\n+@item N\n+Constant integer -1\n+\n+@item O\n+Constant integer 8\n+\n+@item P\n+Constant integer 1\n+\n+@item G\n+A floating point constant 0.0\n+@end table\n+\n @item IBM RS6000---@file{rs6000.h}\n @table @code\n @item b"}]}