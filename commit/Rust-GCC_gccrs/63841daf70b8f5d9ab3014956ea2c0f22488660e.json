{"sha": "63841daf70b8f5d9ab3014956ea2c0f22488660e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4NDFkYWY3MGI4ZjVkOWFiMzAxNDk1NmVhMmMwZjIyNDg4NjYwZQ==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2019-11-15T14:18:14Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2019-11-15T14:18:14Z"}, "message": "[mid-end][__RTL] Account for column numbers in __RTL functions\n\n\nThe documentation for __RTL tests (see \"(gccint) RTL Tests\" info node) has the\nfollowing snippet.\n\n```\n The parser expects the RTL body to be in the format emitted by this\ndumping function:\n\n     DEBUG_FUNCTION void\n     print_rtx_function (FILE *outfile, function *fn, bool compact);\n\n when \"compact\" is true.  So you can capture RTL in the correct format\nfrom the debugger using:\n\n     (gdb) print_rtx_function (stderr, cfun, true);\n\n and copy and paste the output into the body of the C function.\n```\n\nSince r264944 print_rtx_function prints column number information, which the\n__RTL function parsing does not handle.\n\nThis patch handles column number information optionally, so pre-existing __RTL\nfunctions still work, and the above documentation quote still holds.\n\nNote: If people would prefer to require column information I could make a\nslightly neater code and update existing tests.\nI guess this would be OK since the intended use for __RTL functions is in these\ntestcases so there is no worry about other existing code.\n\nbootstrapped and regtested on aarch64\nbootstrapped and regtested on x86_64\n\nOk for trunk?\n\nCheers,\nMatthew\n\ngcc/ChangeLog:\n\n2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* read-rtl-function.c\n\t(function_reader::add_fixup_source_location): Take additional\n\tparameter of a column.\n\t(function_reader::maybe_read_location): Optionally parse column\n\tinformation and pass to add_fixup_source_location.\n\ngcc/testsuite/ChangeLog:\n\n2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.dg/rtl/aarch64/rtl-handle-column-numbers.c: New test.\n\nFrom-SVN: r278294", "tree": {"sha": "ca26305073ac7b9b715b37dc248ac9891b6034b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca26305073ac7b9b715b37dc248ac9891b6034b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63841daf70b8f5d9ab3014956ea2c0f22488660e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63841daf70b8f5d9ab3014956ea2c0f22488660e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63841daf70b8f5d9ab3014956ea2c0f22488660e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63841daf70b8f5d9ab3014956ea2c0f22488660e/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "9784821a88a43953bda2bb94839117798ff129ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63841daf70b8f5d9ab3014956ea2c0f22488660e", "patch": "@@ -1,3 +1,11 @@\n+2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* read-rtl-function.c\n+\t(function_reader::add_fixup_source_location): Take additional\n+\tparameter of a column.\n+\t(function_reader::maybe_read_location): Optionally parse column\n+\tinformation and pass to add_fixup_source_location.\n+\n 2019-11-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92512"}, {"sha": "47dc66ef2890e2db8775266f09240ec60847edba", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=63841daf70b8f5d9ab3014956ea2c0f22488660e", "patch": "@@ -115,7 +115,7 @@ class function_reader : public rtx_reader\n \t\t\t\t\tint operand_idx, int bb_idx);\n \n   void add_fixup_source_location (file_location loc, rtx_insn *insn,\n-\t\t\t\t  const char *filename, int lineno);\n+\t\t\t\t  const char *filename, int lineno, int colno);\n \n   void add_fixup_expr (file_location loc, rtx x,\n \t\t       const char *desc);\n@@ -1371,7 +1371,7 @@ function_reader::add_fixup_note_insn_basic_block (file_location loc, rtx insn,\n \n void\n function_reader::add_fixup_source_location (file_location, rtx_insn *,\n-\t\t\t\t\t    const char *, int)\n+\t\t\t\t\t    const char *, int, int)\n {\n }\n \n@@ -1557,7 +1557,20 @@ function_reader::maybe_read_location (rtx_insn *insn)\n       require_char (':');\n       struct md_name line_num;\n       read_name (&line_num);\n-      add_fixup_source_location (loc, insn, filename, atoi (line_num.string));\n+\n+      int column = 0;\n+      int ch = read_char ();\n+      if (ch == ':')\n+\t{\n+\t  struct md_name column_num;\n+\t  read_name (&column_num);\n+\t  column = atoi (column_num.string);\n+\t}\n+      else\n+\tunread_char (ch);\n+      add_fixup_source_location (loc, insn, filename,\n+\t\t\t\t atoi (line_num.string),\n+\t\t\t\t column);\n     }\n   else\n     unread_char (ch);"}, {"sha": "b835d671eba56fd0c19cf59ce8be939966f6bc46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63841daf70b8f5d9ab3014956ea2c0f22488660e", "patch": "@@ -1,3 +1,7 @@\n+2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.dg/rtl/aarch64/rtl-handle-column-numbers.c: New test.\n+\n 2019-11-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92512"}, {"sha": "9290e1e2eaad43597467b68776a7d83821cfa32d", "filename": "gcc/testsuite/gcc.dg/rtl/aarch64/rtl-handle-column-numbers.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Frtl-handle-column-numbers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63841daf70b8f5d9ab3014956ea2c0f22488660e/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Frtl-handle-column-numbers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Frtl-handle-column-numbers.c?ref=63841daf70b8f5d9ab3014956ea2c0f22488660e", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target aarch64-*-* } } */\n+\n+/* Should compile and not complain.  */\n+int __RTL (startwith (\"cprop_hardreg\"))\n+foo ()\n+{\n+(function \"f\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 100 (set (reg:DI x0)\n+\t\t  (plus:DI\n+\t\t   (reg:DI x1)\n+\t\t   (const_int 16777213)))\n+       \"/home/user/somefile.c\":10:3)\n+      ;; Extra insn, to avoid all of the above from being deleted by DCE\n+      (cinsn 10 (use (reg/i:DI x0)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function\n+}"}]}