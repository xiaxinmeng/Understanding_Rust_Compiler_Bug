{"sha": "3bcd44c0518ef7279437adc303d5ce599d3478ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjZDQ0YzA1MThlZjcyNzk0MzdhZGMzMDNkNWNlNTk5ZDM0NzhlZA==", "commit": {"author": {"name": "Stephen M. Webb", "email": "stephenw@xandros.com", "date": "2008-08-11T21:06:00Z"}, "committer": {"name": "Stephen M. Webb", "email": "smw@gcc.gnu.org", "date": "2008-08-11T21:06:00Z"}, "message": "Formatting fixes for include/tr1_impl/regex.\n\nFrom-SVN: r138967", "tree": {"sha": "fcea59b292619f628f194ee2ab26f4b3419d18c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcea59b292619f628f194ee2ab26f4b3419d18c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bcd44c0518ef7279437adc303d5ce599d3478ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcd44c0518ef7279437adc303d5ce599d3478ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bcd44c0518ef7279437adc303d5ce599d3478ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcd44c0518ef7279437adc303d5ce599d3478ed/comments", "author": null, "committer": null, "parents": [{"sha": "4d5670aa935dcf7339e59458c098ddc2ebe5d120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d5670aa935dcf7339e59458c098ddc2ebe5d120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d5670aa935dcf7339e59458c098ddc2ebe5d120"}], "stats": {"total": 788, "additions": 582, "deletions": 206}, "files": [{"sha": "55e2259da34415d3f192b3e45934725f1efc04c9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3bcd44c0518ef7279437adc303d5ce599d3478ed", "patch": "@@ -1,3 +1,11 @@\n+2008-08-11  Stephen M. Webb  <stephenw@xandros.com>\n+\n+\t* include/tr1_impl/regex: Formatting fixes.\n+\t* testsuite/tr1/7_regular_expressions/regex_traits/char/value.cc:\n+\t  New test.\n+\t* testsuite/tr1/7_regular_expressions/regex_traits/wchar_t/value.cc:\n+\t  New test.\n+\n 2008-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* config/locale/generic/c_locale.cc: Include <cstdio>."}, {"sha": "c2a60a2c3ea6f4dad8400b004a03f985f7bf7951", "filename": "libstdc++-v3/include/tr1_impl/regex", "status": "modified", "additions": 476, "deletions": 206, "changes": 682, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex?ref=3bcd44c0518ef7279437adc303d5ce599d3478ed", "patch": "@@ -29,6 +29,8 @@\n \n /**\n  * @file tr1_impl/regex\n+ * @brief The common implementation file for tr1 and std regular expressions.\n+ *\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n  */\n@@ -40,12 +42,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n /**\n  * @addtogroup tr1_regex Regular Expressions\n  * A facility for performing regular expression pattern matching.\n- * @{\n  */\n+ //@{\n \n namespace regex_constants\n {\n-  // [7.5.1] Bitmask Type syntax_option_type\n+  /**\n+   * @name 5.1 Regular Expression Syntax Options\n+   */\n+  //@{\n   enum __syntax_option\n     {\n       _S_icase,\n@@ -70,72 +75,103 @@ namespace regex_constants\n    *\n    * A valid value of type syntax_option_type shall have exactly one of the\n    * elements @c ECMAScript, @c basic, @c extended, @c awk, @c grep, @c egrep\n-   * set.\n+   * %set.\n    */\n   typedef unsigned int syntax_option_type;\n \n-  /// Specifies that the matching of regular expressions against a character\n-  /// sequence shall be performed without regard to case.\n+  /** \n+   * Specifies that the matching of regular expressions against a character\n+   * sequence shall be performed without regard to case.\n+   */\n   static const syntax_option_type icase      = 1 << _S_icase;\n \n-  /// Specifies that when a regular expression is matched against a character\n-  /// container sequence, no sub-expression matches are to be stored in the\n-  /// supplied match_results structure.\n+  /**\n+   * Specifies that when a regular expression is matched against a character\n+   * container sequence, no sub-expression matches are to be stored in the\n+   * supplied match_results structure.\n+   */\n   static const syntax_option_type nosubs     = 1 << _S_nosubs;\n \n-  /// Specifies that the regular expression engine should pay more attention to\n-  /// the speed with which regular expressions are matched, and less to the\n-  /// speed with which regular expression objects are constructed. Otherwise\n-  /// it has no detectable effect on the program output.\n+  /**\n+   * Specifies that the regular expression engine should pay more attention to\n+   * the speed with which regular expressions are matched, and less to the\n+   * speed with which regular expression objects are constructed. Otherwise\n+   * it has no detectable effect on the program output.\n+   */\n   static const syntax_option_type optimize   = 1 << _S_optimize;\n \n-  /// Specifies that character ranges of the form [a-b] should be locale\n-  /// sensitive.\n+  /**\n+   * Specifies that character ranges of the form [a-b] should be locale\n+   * sensitive.\n+   */\n   static const syntax_option_type collate    = 1 << _S_collate;\n \n-  /// Specifies that the grammar recognized by the regular expression engine is\n-  /// that used by ECMAScript in ECMA-262 [Ecma International, ECMAScript\n-  /// Language Specification, Standard Ecma-262, third edition, 1999], as\n-  /// modified in tr1 section [7.13].  This grammar is similar to that defined\n-  /// in the PERL scripting language but extended with elements found in the\n-  /// POSIX regular expression grammar.\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by ECMAScript in ECMA-262 [Ecma International, ECMAScript\n+   * Language Specification, Standard Ecma-262, third edition, 1999], as\n+   * modified in tr1 section [7.13].  This grammar is similar to that defined\n+   * in the PERL scripting language but extended with elements found in the\n+   * POSIX regular expression grammar.\n+   */\n   static const syntax_option_type ECMAScript = 1 << _S_ECMAScript;\n \n-  /// Specifies that the grammar recognized by the regular expression engine is\n-  /// that used by POSIX basic regular expressions in IEEE Std 1003.1-2001,\n-  /// Portable Operating System Interface (POSIX), Base Definitions and\n-  /// Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n-  /// Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX basic regular expressions in IEEE Std 1003.1-2001,\n+   * Portable Operating System Interface (POSIX), Base Definitions and\n+   * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n+   * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n+   */\n   static const syntax_option_type basic      = 1 << _S_basic;\n \n-  /// Specifies that the grammar recognized by the regular expression engine is\n-  /// that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n-  /// Portable Operating System Interface (POSIX), Base Definitions and Headers,\n-  /// Section 9, Regular Expressions.\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n+   * Portable Operating System Interface (POSIX), Base Definitions and Headers,\n+   * Section 9, Regular Expressions.\n+   */\n   static const syntax_option_type extended   = 1 << _S_extended;\n \n-  /// Specifies that the grammar recognized by the regular expression engine is\n-  /// that used by POSIX utility awk in IEEE Std 1003.1-2001.  This option is\n-  /// identical to syntax_option_type extended, except that C-style escape\n-  /// sequences are supported.  These sequences are, explicitly, '\\\\', '\\a',\n-  /// '\\b', '\\f', '\\n', '\\r', '\\t' , '\\v', '\\\"', '\\\\', and '\\ddd' (where ddd is\n-  /// one, two, or three octal digits).  \n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX utility awk in IEEE Std 1003.1-2001.  This option is\n+   * identical to syntax_option_type extended, except that C-style escape\n+   * sequences are supported.  These sequences are, explicitly, \"\\\\\", \"\\a\",\n+   * \"\\b\", \"\\f\", \"\\n\", \"\\r\", \"\\t\" , \"\\v\", \"\\\"\", \"'\",\n+   * and \"\\ddd\" (where ddd is one, two, or three octal digits).  \n+   */\n   static const syntax_option_type awk        = 1 << _S_awk;\n \n-  /// Specifies that the grammar recognized by the regular expression engine is\n-  /// that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n-  /// identical to syntax_option_type basic, except that newlines are treated\n-  /// as whitespace.\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n+   * identical to syntax_option_type basic, except that newlines are treated\n+   * as whitespace.\n+   */\n   static const syntax_option_type grep       = 1 << _S_grep;\n \n-  /// Specifies that the grammar recognized by the regular expression engine is\n-  /// that used by POSIX utility grep when given the -E option in\n-  /// IEEE Std 1003.1-2001.  This option is identical to syntax_option_type \n-  /// extended, except that newlines are treated as whitespace.\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX utility grep when given the -E option in\n+   * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type \n+   * extended, except that newlines are treated as whitespace.\n+   */\n   static const syntax_option_type egrep      = 1 << _S_egrep;\n \n+  //@}\n+\n+  /**\n+   * @name 5.2 Matching Rules\n+   *\n+   * Matching a regular expression against a sequence of characters [first,\n+   * last) proceeds according to the rules of the grammar specified for the\n+   * regular expression object, modified according to the effects listed\n+   * below for any bitmask elements set.\n+   *\n+   */\n+  //@{\n \n-  // [7.5.2] Bitmask Type match_flag_type\n   enum __match_flag\n     {\n       _S_not_bol,\n@@ -155,93 +191,122 @@ namespace regex_constants\n   /**\n    * @brief This is a bitmask type indicating regex matching rules.\n    *\n-   * Matching a regular expression against a sequence of characters [first,\n-   * last) proceeds according to the rules of the grammar specified for the\n-   * regular expression object, modified according to the effects listed\n-   * below for any bitmask elements set.\n-   *\n    * The @c match_flag_type is implementation defined but it is valid to\n    * perform bitwise operations on these values and expect the right thing to\n    * happen.\n    */\n   typedef std::bitset<_S_match_flag_last> match_flag_type;\n \n+  /**\n+   * The default matching rules.\n+   */\n   static const match_flag_type match_default     = 0;\n \n-  /// The first character in the sequence [first, last) is treated as though it\n-  /// is not at the beginning of a line, so the character \"^\" in the regular\n-  /// expression shall not match [first, first).\n+  /**\n+   * The first character in the sequence [first, last) is treated as though it\n+   * is not at the beginning of a line, so the character \"^\" in the regular\n+   * expression shall not match [first, first).\n+   */\n   static const match_flag_type match_not_bol     = 1 << _S_not_bol;\n \n-  /// The last character in the sequence [first, last) is treated as though it\n-  /// is not at the end of a line, so the character \"$\" in the regular\n-  /// expression shall not match [last, last).\n+  /**\n+   * The last character in the sequence [first, last) is treated as though it\n+   * is not at the end of a line, so the character \"$\" in the regular\n+   * expression shall not match [last, last).\n+   */\n   static const match_flag_type match_not_eol     = 1 << _S_not_eol;\n    \n-  /// The expression \"\\b\" is not matched against the sub-sequence\n-  /// [first,first).\n+  /**\n+   * The expression \"\\b\" is not matched against the sub-sequence\n+   * [first,first).\n+   */\n   static const match_flag_type match_not_bow     = 1 << _S_not_bow;\n    \n-  /// The expression \"\\b\" should not be matched against the sub-sequence\n-  /// [last,last).\n+  /**\n+   * The expression \"\\b\" should not be matched against the sub-sequence\n+   * [last,last).\n+   */\n   static const match_flag_type match_not_eow     = 1 << _S_not_eow;\n    \n-  /// If more than one match is possible then any match is an acceptable\n-  /// result.\n+  /**\n+   * If more than one match is possible then any match is an acceptable\n+   * result.\n+   */\n   static const match_flag_type match_any         = 1 << _S_any;\n    \n-  /// The expression does not match an empty sequence.\n+  /**\n+   * The expression does not match an empty sequence.\n+   */\n   static const match_flag_type match_not_null    = 1 << _S_not_null;\n    \n-  /// The expression only matches a sub-sequence that begins at first .\n+  /**\n+   * The expression only matches a sub-sequence that begins at first .\n+   */\n   static const match_flag_type match_continuous  = 1 << _S_continuous;\n    \n-  /// --first is a valid iterator position.  When this flag is set then the\n-  /// flags match_not_bol and match_not_bow are ignored by the regular\n-  /// expression algorithms 7.11 and iterators 7.12.\n+  /**\n+   * --first is a valid iterator position.  When this flag is set then the\n+   * flags match_not_bol and match_not_bow are ignored by the regular\n+   * expression algorithms 7.11 and iterators 7.12.\n+   */\n   static const match_flag_type match_prev_avail  = 1 << _S_prev_avail;\n \n-  /// When a regular expression match is to be replaced by a new string, the\n-  /// new string is constructed using the rules used by the ECMAScript replace\n-  /// function in ECMA- 262 [Ecma International, ECMAScript Language\n-  /// Specification, Standard Ecma-262, third edition, 1999], part 15.5.4.11\n-  /// String.prototype.replace. In addition, during search and replace\n-  /// operations all non-overlapping occurrences of the regular expression\n-  /// are located and replaced, and sections of the input that did not match\n-  /// the expression are copied unchanged to the output string.\n-  ///\n-  /// Format strings (from ECMA-262 [15.5.4.11]):\n-  /// $$  $\n-  /// $&  The matched substring.\n-  /// $`  The portion of <em>string</em> that precedes the matched substring.\n-  /// $'  The portion of <em>string</em> that follows the matched substring.\n-  /// $n  The nth capture, where n is in [1,9] and $n is not followed by a\n-  ///     decimal digit.  If n <= m and the nth capture is undefined, use the\n-  ///     empty string\n-  ///     instead. If n > m, the result is implementation-defined.\n-  /// $nn The nnth capture, where nn is a two-digit decimal number on [01, 99].\n-  ///     If nn <= m and the nth capture is undefined, use the empty string\n-  ///     instead. If nn > m, the result is implementation-defined.\n-  ///\n+  /**\n+   * When a regular expression match is to be replaced by a new string, the\n+   * new string is constructed using the rules used by the ECMAScript replace\n+   * function in ECMA- 262 [Ecma International, ECMAScript Language\n+   * Specification, Standard Ecma-262, third edition, 1999], part 15.5.4.11\n+   * String.prototype.replace. In addition, during search and replace\n+   * operations all non-overlapping occurrences of the regular expression\n+   * are located and replaced, and sections of the input that did not match\n+   * the expression are copied unchanged to the output string.\n+   * \n+   * Format strings (from ECMA-262 [15.5.4.11]):\n+   * @li $$  The dollar-sign itself ($)\n+   * @li $&  The matched substring.\n+   * @li $`  The portion of <em>string</em> that precedes the matched substring.\n+   *         This would be match_results::prefix().\n+   * @li $'  The portion of <em>string</em> that follows the matched substring.\n+   *         This would be match_results::suffix().\n+   * @li $n  The nth capture, where n is in [1,9] and $n is not followed by a\n+   *         decimal digit.  If n <= match_results::size() and the nth capture\n+   *         is undefined, use the empty string instead.  If n >\n+   *         match_results::size(), the result is implementation-defined.\n+   * @li $nn The nnth capture, where nn is a two-digit decimal number on\n+   *         [01, 99].  If nn <= match_results::size() and the nth capture is\n+   *         undefined, use the empty string instead. If\n+   *         nn > match_results::size(), the result is implementation-defined.\n+   */\n   static const match_flag_type format_default    = 0;\n \n-  /// When a regular expression match is to be replaced by a new string, the\n-  /// new string is constructed using the rules used by the POSIX sed utility\n-  /// in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n-  /// Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n+  /**\n+   * When a regular expression match is to be replaced by a new string, the\n+   * new string is constructed using the rules used by the POSIX sed utility\n+   * in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n+   * Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n+   */\n   static const match_flag_type format_sed        = 1 << _S_sed;\n \n-  /// During a search and replace operation, sections of the character\n-  /// container sequence being searched that do not match the regular\n-  /// expression shall not be copied to the output string.\n+  /**\n+   * During a search and replace operation, sections of the character\n+   * container sequence being searched that do not match the regular\n+   * expression shall not be copied to the output string.\n+   */\n   static const match_flag_type format_no_copy    = 1 << _S_no_copy;\n \n-  /// When specified during a search and replace operation, only the first\n-  /// occurrence of the regular expression shall be replaced.\n+  /**\n+   * When specified during a search and replace operation, only the first\n+   * occurrence of the regular expression shall be replaced.\n+   */\n   static const match_flag_type format_first_only = 1 << _S_first_only;\n \n+  //@}\n \n-  /// [7.5.3] implementation-defined error type\n+  /**\n+   * @name 5.3 Error Types\n+   */\n+  //@{\n+ \n   enum error_type\n     {\n       _S_error_collate,\n@@ -260,63 +325,78 @@ namespace regex_constants\n       _S_error_last\n     };\n \n-  /// The expression contained an invalid collating element name.\n+  /** The expression contained an invalid collating element name. */\n   static const error_type error_collate(_S_error_collate);\n \n-  /// The expression contained an invalid character class name.\n+  /** The expression contained an invalid character class name. */\n   static const error_type error_ctype(_S_error_ctype);\n \n-  /// The expression contained an invalid escaped character, or a trailing\n-  /// escape.\n+  /**\n+   * The expression contained an invalid escaped character, or a trailing\n+   * escape.\n+   */\n   static const error_type error_escape(_S_error_escape);\n \n-  /// The expression contained an invalid back reference.\n+  /** The expression contained an invalid back reference. */\n   static const error_type error_backref(_S_error_backref);\n \n-  /// The expression contained mismatched [ and ].\n+  /** The expression contained mismatched [ and ]. */\n   static const error_type error_brack(_S_error_brack);\n \n-  /// The expression contained mismatched ( and ).\n+  /** The expression contained mismatched ( and ). */\n   static const error_type error_paren(_S_error_paren);\n \n-  /// The expression contained mismatched { and }\n+  /** The expression contained mismatched { and } */\n   static const error_type error_brace(_S_error_brace);\n \n-  /// The expression contained an invalid range in a {} expression.\n+  /** The expression contained an invalid range in a {} expression. */\n   static const error_type error_badbrace(_S_error_badbrace);\n \n-  /// The expression contained an invalid character range,\n-  /// such as [b-a] in most encodings.\n+  /**\n+   * The expression contained an invalid character range,\n+   * such as [b-a] in most encodings.\n+   */\n   static const error_type error_range(_S_error_range);\n \n-  /// There was insufficient memory to convert the expression into a\n-  /// finite state machine.\n+  /**\n+   * There was insufficient memory to convert the expression into a\n+   * finite state machine.\n+   */\n   static const error_type error_space(_S_error_space);\n \n-  /// One of *?+{ was not preceded by a valid regular expression.\n+  /**\n+   * One of \"*?+{\" was not preceded by a valid regular expression.\n+   */\n   static const error_type error_badrepeat(_S_error_badrepeat);\n \n-  /// The complexity of an attempted match against a regular expression\n-  /// exceeded a pre-set level.\n+  /**\n+   * The complexity of an attempted match against a regular expression\n+   * exceeded a pre-set level.\n+   */\n   static const error_type error_complexity(_S_error_complexity);\n \n-  /// There was insufficient memory to determine whether the\n-  /// regular expression could match the specified character sequence.\n+  /**\n+   * There was insufficient memory to determine whether the\n+   * regular expression could match the specified character sequence.\n+   */\n   static const error_type error_stack(_S_error_stack);\n+\n+  //@}\n }\n \n \n   // [7.8] Class regex_error\n   /**\n-   * Defines the exception objects thrown report errors from the\n-   * regular expression library.\n+   * @brief A regular expression exception class.\n+   *\n+   * The regular expression library throws objects of this class on error.\n    */\n   class regex_error\n   : public std::runtime_error\n   {\n   public:\n     /**\n-     * @brief constructs a regex_error object.\n+     * @brief Constructs a regex_error object.\n      *\n      * @param ecode the regex error code.\n      */\n@@ -326,7 +406,7 @@ namespace regex_constants\n     { }\n \n     /**\n-     * @brief gets the regex error code.\n+     * @brief Gets the regex error code.\n      *\n      * @returns the regex error code.\n      */\n@@ -338,9 +418,10 @@ namespace regex_constants\n     regex_constants::error_type _M_code;\n   };\n \n-\n   // [7.7] Class regex_traits\n   /**\n+   * @brief Describes aspects of a regular expression.\n+   *\n    * A regular expression traits class that satisfies the requirements of tr1\n    * section [7.2].\n    *\n@@ -526,38 +607,7 @@ namespace regex_constants\n        *         facet.\n        */\n       bool\n-      isctype(_Ch_type __c, char_class_type __f) const\n-      {\n-\tusing std::ctype;\n-\tusing std::use_facet;\n-\tconst ctype<_Ch_type>& __ctype(use_facet<\n-\t\t\t\t       ctype<_Ch_type> >(_M_locale));\n-\t\n-\tif (__ctype.is(__c, __f))\n-\t  return true;\n-\t\n-\t// special case of underscore in [[:w:]]\n-\tif (__c == __ctype.widen('_'))\n-\t  {\n-\t    const char* const __wb[] = \"w\";\n-\t    char_class_type __wt = this->lookup_classname(__wb,\n-\t\t\t\t\t\t\t  __wb + sizeof(__wb));\n-\t    if (__f | __wt)\n-\t      return true;\n-\t  }\n-      \n-\t// special case of [[:space:]] in [[:blank:]]\n-\tif (__c == __ctype.isspace(__c))\n-\t  {\n-\t    const char* const __bb[] = \"blank\";\n-\t    char_class_type __bt = this->lookup_classname(__bb,\n-\t\t\t\t\t\t\t  __bb + sizeof(__bb));\n-\t    if (__f | __bt)\n-\t      return true;\n-\t  }\n-\t\n-\treturn false;\n-      }\n+      isctype(_Ch_type __c, char_class_type __f) const;\n \n       /**\n        * @brief Converts a digit to an int.\n@@ -568,8 +618,6 @@ namespace regex_constants\n        * \n        * @returns the value represented by the digit ch in base radix if the\n        * character ch is a valid digit in base radix; otherwise returns -1.\n-       *\n-       * @todo Implement this function.\n        */\n       int\n       value(_Ch_type __ch, int __radix) const;\n@@ -604,6 +652,54 @@ namespace regex_constants\n       locale_type _M_locale;\n     };\n \n+  template<typename _Ch_type>\n+    bool regex_traits<_Ch_type>::\n+    isctype(_Ch_type __c, char_class_type __f) const\n+    {\n+      using std::ctype;\n+      using std::use_facet;\n+      const ctype<_Ch_type>& __ctype(use_facet<\n+\t\t\t\t     ctype<_Ch_type> >(_M_locale));\n+      \n+      if (__ctype.is(__c, __f))\n+\treturn true;\n+      \n+      // special case of underscore in [[:w:]]\n+      if (__c == __ctype.widen('_'))\n+\t{\n+\t  const char* const __wb[] = \"w\";\n+\t  char_class_type __wt = this->lookup_classname(__wb,\n+\t\t\t\t\t\t\t__wb + sizeof(__wb));\n+\t  if (__f | __wt)\n+\t    return true;\n+\t}\n+    \n+      // special case of [[:space:]] in [[:blank:]]\n+      if (__c == __ctype.isspace(__c))\n+\t{\n+\t  const char* const __bb[] = \"blank\";\n+\t  char_class_type __bt = this->lookup_classname(__bb,\n+\t\t\t\t\t\t\t__bb + sizeof(__bb));\n+\t  if (__f | __bt)\n+\t    return true;\n+\t}\n+      \n+      return false;\n+    }\n+\n+  template<typename _Ch_type>\n+    int regex_traits<_Ch_type>::\n+    value(_Ch_type __ch, int __radix) const\n+    {\n+      std::basic_istringstream<_Ch_type> __is(string_type(1, __ch));\n+      int __v = -1;\n+      if (__radix == 8)\n+\t__is >> std::oct;\n+      else if (__radix == 16)\n+\t__is >> std::hex;\n+      __is >> __v;\n+      return __v;\n+    }\n \n   // [7.8] Class basic_regex\n   /**\n@@ -623,7 +719,11 @@ namespace regex_constants\n       typedef typename _Rx_traits::locale_type  locale_type;\n       typedef typename _Rx_traits::string_type  string_type;\n \n-      // [7.8.1] constants\n+      /**\n+       * @name Constants\n+       * tr1 [7.8.1] std [28.8.1]\n+       */\n+      //@{\n       static const regex_constants::syntax_option_type icase\n         = regex_constants::icase;\n       static const regex_constants::syntax_option_type nosubs\n@@ -644,6 +744,7 @@ namespace regex_constants\n         = regex_constants::grep;\n       static const regex_constants::syntax_option_type egrep\n         = regex_constants::egrep;\n+      //@}\n \n       // [7.8.2] construct/copy/destroy\n       /**\n@@ -722,7 +823,8 @@ namespace regex_constants\n        *              expression.\n        * @param f     The format flags of the regular expression.\n        *\n-       * @throws regex_error if @p p is not a valid regular expression.\n+       * @throws regex_error if @p [first, last) is not a valid regular\n+       *         expression.\n        */\n       template<typename _InputIterator>\n         basic_regex(_InputIterator __first, _InputIterator __last, \n@@ -731,6 +833,14 @@ namespace regex_constants\n         { _M_compile(); }\n \n #ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      /**\n+       * @brief Constructs a basic regular expression from an initializer list.\n+       *\n+       * @param l  The initializer list.\n+       * @param f  The format flags of the regular expression.\n+       *\n+       * @throws regex_error if @p l is not a valid regular expression.\n+       */\n       basic_regex(initializer_list<_Ch_type> __l,\n \t\t  flag_type __f = regex_constants::ECMAScript)\n \t: _M_flags(__f), _M_pattern(__l.begin(), __l.end()), _M_mark_count(0)\n@@ -853,7 +963,7 @@ namespace regex_constants\n        *\n        * @throws regex_error if p does not contain a valid regular expression\n        * pattern interpreted according to @p flags.  If regex_error is thrown,\n-       * *this remains unchanged.\n+       * the object remains unchanged.\n        */\n       template<typename _InputIterator>\n         basic_regex&\n@@ -862,6 +972,16 @@ namespace regex_constants\n         { return this->assign(string_type(__first, __last), __flags); }\n \n #ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      /**\n+       * @brief Assigns a new regular expression to a regex object.\n+       *\n+       * @param l     An initializer list representing a regular expression.\n+       * @param flags Syntax option flags.\n+       *\n+       * @throws regex_error if @p l does not contain a valid regular\n+       * expression pattern interpreted according to @p flags.  If regex_error\n+       * is thrown, the object remains unchanged.\n+       */\n       basic_regex&\n       assign(initializer_list<_Ch_type> __l,\n \t     flag_type __f = regex_constants::ECMAScript)\n@@ -933,8 +1053,10 @@ namespace regex_constants\n       _Rx_traits   _M_traits;\n     };\n   \n+  /** @brief Standard regular expressions. */\n   typedef basic_regex<char>    regex;\n #ifdef _GLIBCXX_USE_WCHAR_T\n+  /** @brief Standard wide-character regular expressions. */\n   typedef basic_regex<wchar_t> wregex;\n #endif\n \n@@ -1055,10 +1177,14 @@ namespace regex_constants\n     };\n   \n   \n+  /** @brief Standard regex submatch over a C-style null-terminated string. */\n   typedef sub_match<const char*>             csub_match;\n+  /** @brief Standard regex submatch over a standard string. */\n   typedef sub_match<string::const_iterator>  ssub_match;\n #ifdef _GLIBCXX_USE_WCHAR_T\n+  /** @brief Regex submatch over a C-style null-terminated wide string. */\n   typedef sub_match<const wchar_t*>          wcsub_match;\n+  /** @brief Regex submatch over a standard wide string. */\n   typedef sub_match<wstring::const_iterator> wssub_match;\n #endif\n \n@@ -1616,6 +1742,8 @@ namespace regex_constants\n \n   // [7.10] Class template match_results\n   /**\n+   * @brief The results of a match or search operation.\n+   *\n    * A collection of character sequences representing the result of a regular\n    * expression match.  Storage for the collection is allocated and freed as\n    * necessary by the member functions of class template match_results.\n@@ -1632,6 +1760,8 @@ namespace regex_constants\n    * of characters [first, second) which formed that match. Otherwise matched\n    * is false, and members first and second point to the end of the sequence\n    * that was searched.\n+   *\n+   * @nosubgrouping\n    */\n   template<typename _Bi_iter,\n \t   typename _Allocator = allocator<sub_match<_Bi_iter> > >\n@@ -1643,6 +1773,10 @@ namespace regex_constants\n                                                               _Base_type;\n \n     public:\n+      /**\n+       * @name 10.? Public Types\n+       */\n+      //@{\n       typedef sub_match<_Bi_iter>                             value_type;\n       typedef typename _Allocator::const_reference            const_reference;\n       typedef const_reference                                 reference;\n@@ -1654,19 +1788,25 @@ namespace regex_constants\n       typedef _Allocator                                      allocator_type;\n       typedef typename iterator_traits<_Bi_iter>::value_type  char_type;\n       typedef basic_string<char_type>                         string_type;\n+      //@}\n   \n     public:\n-      // [7.10.1] construct/copy/destroy\n       /**\n-       * @brief Constructs a default match_results container.\n+       * @name 10.1 Construction, Copying, and Destruction\n+       */\n+      //@{\n+\n+      /**\n+       * @brief Constructs a default %match_results container.\n+       * @post size() returns 0 and str() returns an empty string.\n        */\n       explicit\n       match_results(const _Allocator& __a = _Allocator())\n       : _Base_type(__a), _M_matched(false)\n       { }\n \n       /**\n-       * @brief Copy constructs a match_result.\n+       * @brief Copy constructs a %match_results.\n        */\n       match_results(const match_results& __rhs)\n       : _Base_type(__rhs), _M_matched(__rhs._M_matched),\n@@ -1684,44 +1824,71 @@ namespace regex_constants\n       }\n \n       /**\n-       * @todo Implement this function.\n+       * @brief Destroys a %match_results object.\n        */\n       ~match_results()\n       { }\n       \n-      // [7.10.2] size\n+      //@}\n+\n+      /**\n+       * @name 10.2 Size\n+       */\n+      //@{\n+\n       /**\n-       * @todo Document this function.\n+       * @brief Gets the number of matches and submatches.\n+       *\n+       * The number of matches for a given regular expression will be either 0\n+       * if there was no match or mark_count() + 1 if a match was successful.\n+       * Some matches may be empty.\n+       *\n+       * @returns the number of matches found.\n        */\n       size_type\n       size() const\n       { return _M_matched ? _Base_type::size() + 1 : 0; }\n       \n-      /**\n-       * @todo Implement this function.\n-       */\n       //size_type\n       //max_size() const;\n       using _Base_type::max_size;\n \n       /**\n-       * @todo Document this function.\n+       * @brief Indicates if the %match_results contains no results.\n+       * @retval true The %match_results object is empty.\n+       * @retval false The %match_results object is not empty.\n        */\n       bool\n       empty() const\n       { return size() == 0; }\n       \n-      // [7.10.3] element access\n+      //@}\n+\n+      /**\n+       * @name 10.3 Element Access\n+       */\n+      //@{\n+\n       /**\n        * @brief Gets the length of the indicated submatch.\n        * @param sub indicates the submatch.\n+       *\n+       * This function returns the length of the indicated submatch, or the\n+       * length of the entire match if @p sub is zero (the default).\n        */\n       difference_type\n       length(size_type __sub = 0) const\n       { return _M_matched ? this->str(__sub).length() : 0; }\n \n       /**\n-       * @todo Document this function.\n+       * @brief Gets the offset of the beginning of the indicated submatch.\n+       * @param sub indicates the submatch.\n+       *\n+       * This function returns the offset from the beginnig of the target\n+       * sequence to the beginning of the submatch, unless the value of @p sub\n+       * is zero (the default), in which case this function returns the offset\n+       * from the beginning of the target sequence to the beginning of the\n+       * match.\n        */\n       difference_type\n       position(size_type __sub = 0) const\n@@ -1731,35 +1898,54 @@ namespace regex_constants\n       }\n \n       /**\n-       * @todo Document this function.\n+       * @brief Gets the match or submatch converted to a string type.\n+       * @param sub indicates the submatch.\n+       *\n+       * This function gets the submatch (or match, if @p sub is zero) extracted\n+       * from the target range and converted to the associated string type.\n        */\n       string_type\n       str(size_type __sub = 0) const\n       { return _M_matched ? (*this)[__sub].str() : string_type(); }\n       \n       /**\n-       * @todo Document this function.\n+       * @brief Gets a %sub_match reference for the match or submatch.\n+       * @param sub indicates the submatch.\n+       *\n+       * This function gets a reference to the indicated submatch, or the entire\n+       * match if @p sub is zero.\n+       *\n+       * If @p sub >= size() then this function returns a %sub_match with a\n+       * special value indicating no submatch.\n        */\n       const_reference\n-      operator[](size_type __n) const\n-      { return _Base_type::operator[](__n); }\n+      operator[](size_type __sub) const\n+      { return _Base_type::operator[](__sub); }\n \n       /**\n-       * @todo Document this function.\n+       * @brief Gets a %sub_match representing the match prefix.\n+       *\n+       * This function gets a reference to a %sub_match object representing the\n+       * part of the target range between the start of the target range and the\n+       * start of the match.\n        */\n       const_reference\n       prefix() const\n       { return _M_prefix; }\n \n       /**\n-       * @todo Document this function.\n+       * @brief Gets a %sub_match representing the match suffix.\n+       *\n+       * This function gets a reference to a %sub_match object representing the\n+       * part of the target range between the end of the match and the end of\n+       * the target range.\n        */\n       const_reference\n       suffix() const\n       { return _M_suffix; }\n \n       /**\n-       * @todo Document this function.\n+       * @brief Gets an iterator to the start of the %sub_match collection.\n        */\n       const_iterator\n       begin() const\n@@ -1790,7 +1976,18 @@ namespace regex_constants\n       { return _Base_type::end(); }\n #endif\n \n-      // [7.10.4] format\n+      //@}\n+\n+      /**\n+       * @name 10.4 Formatting\n+       *\n+       * These functions perform formatted substitution of the matched character\n+       * sequences into their target.  The format specifiers and escape sequences\n+       * accepted by these functions are determined by their @p flags parameter \n+       * as documented above.\n+       */\n+       //@{\n+\n       /**\n        * @todo Implement this function.\n        */\n@@ -1809,17 +2006,29 @@ namespace regex_constants\n \t     regex_constants::match_flag_type __flags\n \t     = regex_constants::format_default) const;\n \n-      // [7.10.5] allocator\n+      //@} \n+\n+      /**\n+       * @name 10.5 Allocator\n+       */\n+      //@{ \n+\n       /**\n-       * @todo Document this function.\n+       * @brief Gets a copy of the allocator.\n        */\n       //allocator_type\n       //get_allocator() const;\n       using _Base_type::get_allocator;\n       \n-      // [7.10.6] swap\n+      //@} \n+\n       /**\n-       * @todo Document this function.\n+       * @name 10.6 Swap\n+       */\n+       //@{ \n+\n+      /**\n+       * @brief Swaps the contents of two match_results.\n        */\n       void\n       swap(match_results& __that)\n@@ -1829,6 +2038,7 @@ namespace regex_constants\n \tstd::swap(_M_prefix,  __that._M_prefix);\n \tstd::swap(_M_suffix,  __that._M_suffix);\n       }\n+      //@} \n       \n     private:\n       bool       _M_matched;\n@@ -1845,6 +2055,9 @@ namespace regex_constants\n \n   // match_results comparisons\n   /**\n+   * @brief Compares two match_results for equality.\n+   * @returns true if the two objects refer to the same match,\n+   * false otherwise.\n    * @todo Implement this function.\n    */\n   template<typename _Bi_iter, typename _Allocator>\n@@ -1853,12 +2066,15 @@ namespace regex_constants\n \t       const match_results<_Bi_iter, _Allocator>& __m2);\n \n   /**\n-   * @todo Implement this function.\n+   * @brief Compares two match_results for inequality.\n+   * @returns true if the two objects do not refer to the same match,\n+   * false otherwise.\n    */\n   template<typename _Bi_iter, class _Allocator>\n     inline bool\n     operator!=(const match_results<_Bi_iter, _Allocator>& __m1,\n-\t       const match_results<_Bi_iter, _Allocator>& __m2);\n+\t       const match_results<_Bi_iter, _Allocator>& __m2)\n+    { return !(__m1 == __m2); }\n \n   // [7.10.6] match_results swap\n   /**\n@@ -1875,6 +2091,11 @@ namespace regex_constants\n     { return __lhs.swap(__rhs); }\n \n   // [7.11.2] Function template regex_match\n+  /**\n+   * @name Matching, Searching, and Replacing\n+   */\n+  //@{\n+\n   /**\n    * @brief Determines if there is a match between the regular expression @p e\n    * and all of the character sequence [first, last).\n@@ -1888,6 +2109,8 @@ namespace regex_constants\n    * @retval true  A match exists.\n    * @retval false Otherwise.\n    *\n+   * @throws an exception of type regex_error.\n+   *\n    * @todo Implement this function.\n    */\n   template<typename _Bi_iter, typename _Allocator,\n@@ -1911,6 +2134,8 @@ namespace regex_constants\n    *\n    * @retval true  A match exists.\n    * @retval false Otherwise.\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Bi_iter, typename _Ch_type, typename _Rx_traits>\n     bool\n@@ -1934,6 +2159,8 @@ namespace regex_constants\n    *\n    * @retval true  A match exists.\n    * @retval false Otherwise.\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_type, typename _Allocator, typename _Rx_traits>\n     inline bool\n@@ -1955,6 +2182,8 @@ namespace regex_constants\n    *\n    * @retval true  A match exists.\n    * @retval false Otherwise.\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_traits, typename _Ch_alloc,\n \t   typename _Allocator, typename _Ch_type, typename _Rx_traits>\n@@ -1977,6 +2206,8 @@ namespace regex_constants\n    *\n    * @retval true  A match exists.\n    * @retval false Otherwise.\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_type, class _Rx_traits>\n     inline bool\n@@ -1996,6 +2227,8 @@ namespace regex_constants\n    *\n    * @retval true  A match exists.\n    * @retval false Otherwise.\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_traits, typename _Str_allocator,\n \t   typename _Ch_type, typename _Rx_traits>\n@@ -2017,6 +2250,9 @@ namespace regex_constants\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string, the content of %m is\n    *               undefined.\n+   *\n+   * @throws an exception of type regex_error.\n+   *\n    * @todo Implement this function.\n    */\n   template<typename _Bi_iter, typename _Allocator,\n@@ -2037,7 +2273,9 @@ namespace regex_constants\n    * @param flags [IN]  Search policy flags.\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string.\n-   * @todo Document me.\n+   * @doctodo\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Bi_iter, typename _Ch_type, typename _Rx_traits>\n     inline bool\n@@ -2059,7 +2297,9 @@ namespace regex_constants\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string, the content of %m is\n    *               undefined.\n-   * @todo Document me.\n+   * @doctodo\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_type, class _Allocator, class _Rx_traits>\n     inline bool\n@@ -2077,7 +2317,9 @@ namespace regex_constants\n    * @param f [IN]  Search policy flags.\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string.\n-   * @todo Document me.\n+   * @doctodo\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_type, typename _Rx_traits>\n     inline bool\n@@ -2094,7 +2336,9 @@ namespace regex_constants\n    * @param flags [IN]  Search policy flags.\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string.\n-   * @todo Document me.\n+   * @doctodo\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_traits, typename _String_allocator,\n \t   typename _Ch_type, typename _Rx_traits>\n@@ -2115,6 +2359,8 @@ namespace regex_constants\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string, the content of %m is\n    *               undefined.\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_traits, typename _Ch_alloc,\n \t   typename _Allocator, typename _Ch_type,\n@@ -2128,10 +2374,20 @@ namespace regex_constants\n \t\t = regex_constants::match_default)\n     { return regex_search(__s.begin(), __s.end(), __m, __e, __f); }\n \n-  // [7.11.4] Function template regex_replace\n+  // tr1 [7.11.4] std [28.11.4] Function template regex_replace\n   /**\n+   * @doctodo\n+   * @param out\n+   * @param first\n+   * @param last\n+   * @param e\n+   * @param fmt\n+   * @param flags\n+   *\n+   * @returns out\n+   * @throws an exception of type regex_error.\n+   *\n    * @todo Implement this function.\n-   * @todo Document this function.\n    */\n   template<typename _Out_iter, typename _Bi_iter,\n \t   typename _Rx_traits, typename _Ch_type>\n@@ -2144,7 +2400,15 @@ namespace regex_constants\n     { return __out; }\n \n   /**\n-   * @todo Document me.\n+   * @doctodo\n+   * @param s\n+   * @param e\n+   * @param fmt\n+   * @param flags\n+   *\n+   * @returns a copy of string @p s with replacements.\n+   *\n+   * @throws an exception of type regex_error.\n    */\n   template<typename _Rx_traits, typename _Ch_type>\n     inline basic_string<_Ch_type>\n@@ -2160,7 +2424,9 @@ namespace regex_constants\n       return __result;\n     }\n \n-  // [7.12.1] Class template regex_iterator\n+  //@}\n+\n+  // tr1 [7.12.1] std [28.12] Class template regex_iterator\n   /**\n    * An iterator adaptor that will provide repeated calls of regex_search over \n    * a range until no more matches remain.\n@@ -2183,7 +2449,7 @@ namespace regex_constants\n        * @brief Provides a singular iterator, useful for indicating\n        * one-past-the-end of a range.\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_iterator();\n       \n@@ -2194,7 +2460,7 @@ namespace regex_constants\n        * @param re [IN] The regular expression to match.\n        * @param m  [IN] Policy flags for match rules.\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_iterator(_Bi_iter __a, _Bi_iter __b, const regex_type& __re,\n \t\t     regex_constants::match_flag_type __m\n@@ -2203,55 +2469,55 @@ namespace regex_constants\n       /**\n        * Copy constructs a %regex_iterator.\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_iterator(const regex_iterator& __rhs);\n       \n       /**\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_iterator&\n       operator=(const regex_iterator& __rhs);\n       \n       /**\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       bool\n       operator==(const regex_iterator& __rhs);\n       \n       /**\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       bool\n       operator!=(const regex_iterator& __rhs);\n       \n       /**\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       const value_type&\n       operator*();\n       \n       /**\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       const value_type*\n       operator->();\n       \n       /**\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_iterator&\n       operator++();\n       \n       /**\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_iterator\n       operator++(int);\n@@ -2322,7 +2588,7 @@ namespace regex_constants\n        * @param m          [IN] Policy flags for match rules.\n        *\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_token_iterator(_Bi_iter __a, _Bi_iter __b, const regex_type& __re,\n \t\t\t   int __submatch = 0,\n@@ -2339,7 +2605,7 @@ namespace regex_constants\n        * @param m          [IN] Policy flags for match rules.\n        *\n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       regex_token_iterator(_Bi_iter __a, _Bi_iter __b,\n \t\t\t   const regex_type& __re,\n@@ -2357,7 +2623,7 @@ namespace regex_constants\n        * @param m          [IN] Policy flags for match rules.\n        \n        * @todo Implement this function.\n-       * @todo Document this function.\n+       * @doctodo\n        */\n       template<std::size_t _Nm>\n         regex_token_iterator(_Bi_iter __a, _Bi_iter __b,\n@@ -2433,14 +2699,18 @@ namespace regex_constants\n       std::vector<int>  __subs;\n     };\n \n+  /** @brief Token iterator for C-style NULL-terminated strings. */\n   typedef regex_token_iterator<const char*>             cregex_token_iterator;\n+  /** @brief Token iterator for standard strings. */\n   typedef regex_token_iterator<string::const_iterator>  sregex_token_iterator;\n #ifdef _GLIBCXX_USE_WCHAR_T\n+  /** @brief Token iterator for C-style NULL-terminated wide strings. */\n   typedef regex_token_iterator<const wchar_t*>          wcregex_token_iterator;\n+  /** @brief Token iterator for standard wide-character strings. */\n   typedef regex_token_iterator<wstring::const_iterator> wsregex_token_iterator;\n #endif\n   \n-  /** @} */ // group tr1_regex\n+  //@} // group tr1_regex\n   \n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "a203253e670934890b2d70de27ab7ab8868fd057", "filename": "libstdc++-v3/testsuite/tr1/7_regular_expressions/regex_traits/char/value.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F7_regular_expressions%2Fregex_traits%2Fchar%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F7_regular_expressions%2Fregex_traits%2Fchar%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F7_regular_expressions%2Fregex_traits%2Fchar%2Fvalue.cc?ref=3bcd44c0518ef7279437adc303d5ce599d3478ed", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run }\n+\n+// 2008-08-11  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// tr1 [7.7] class template regex_traits value() function\n+\n+#include <tr1/regex>\n+#include <testsuite_hooks.h>\n+\n+// Tests the value() function of the regex_traits<char> class.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::tr1::regex_traits<char> t;\n+  VERIFY( t.value('7', 8)  == 7 );\n+  VERIFY( t.value('7', 10) == 7 );\n+  VERIFY( t.value('7', 16) == 7 );\n+  VERIFY( t.value('9', 8)  == -1 );\n+  VERIFY( t.value('9', 10) == 9 );\n+  VERIFY( t.value('9', 16) == 9 );\n+  VERIFY( t.value('d', 8)  == -1 );\n+  VERIFY( t.value('d', 10) == -1 );\n+  VERIFY( t.value('d', 16) == 13 );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+};"}, {"sha": "a203253e670934890b2d70de27ab7ab8868fd057", "filename": "libstdc++-v3/testsuite/tr1/7_regular_expressions/regex_traits/wchar_t/value.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F7_regular_expressions%2Fregex_traits%2Fwchar_t%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd44c0518ef7279437adc303d5ce599d3478ed/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F7_regular_expressions%2Fregex_traits%2Fwchar_t%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F7_regular_expressions%2Fregex_traits%2Fwchar_t%2Fvalue.cc?ref=3bcd44c0518ef7279437adc303d5ce599d3478ed", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run }\n+\n+// 2008-08-11  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// tr1 [7.7] class template regex_traits value() function\n+\n+#include <tr1/regex>\n+#include <testsuite_hooks.h>\n+\n+// Tests the value() function of the regex_traits<char> class.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::tr1::regex_traits<char> t;\n+  VERIFY( t.value('7', 8)  == 7 );\n+  VERIFY( t.value('7', 10) == 7 );\n+  VERIFY( t.value('7', 16) == 7 );\n+  VERIFY( t.value('9', 8)  == -1 );\n+  VERIFY( t.value('9', 10) == 9 );\n+  VERIFY( t.value('9', 16) == 9 );\n+  VERIFY( t.value('d', 8)  == -1 );\n+  VERIFY( t.value('d', 10) == -1 );\n+  VERIFY( t.value('d', 16) == 13 );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+};"}]}