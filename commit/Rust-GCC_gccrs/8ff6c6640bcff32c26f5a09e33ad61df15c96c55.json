{"sha": "8ff6c6640bcff32c26f5a09e33ad61df15c96c55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmNmM2NjQwYmNmZjMyYzI2ZjVhMDllMzNhZDYxZGYxNWM5NmM1NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-15T10:10:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-15T10:10:03Z"}, "message": "decl.c (validate_size): Reorder, remove obsolete test and warning.\n\n\t* gcc-interface/decl.c (validate_size): Reorder, remove obsolete test\n\tand warning.\n\t(set_rm_size): Reorder and remove obsolete test.\n\nFrom-SVN: r158368", "tree": {"sha": "f1a0df4db7ad9ff3000c2764001ae0320e5e27d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1a0df4db7ad9ff3000c2764001ae0320e5e27d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff6c6640bcff32c26f5a09e33ad61df15c96c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff6c6640bcff32c26f5a09e33ad61df15c96c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff6c6640bcff32c26f5a09e33ad61df15c96c55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff6c6640bcff32c26f5a09e33ad61df15c96c55/comments", "author": null, "committer": null, "parents": [{"sha": "077668e3f55c4aa1bc26ddfa14a7d229fc0cf930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077668e3f55c4aa1bc26ddfa14a7d229fc0cf930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077668e3f55c4aa1bc26ddfa14a7d229fc0cf930"}], "stats": {"total": 84, "additions": 40, "deletions": 44}, "files": [{"sha": "008924c1985119a68a6f7c51e84548678d23b7a9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff6c6640bcff32c26f5a09e33ad61df15c96c55/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff6c6640bcff32c26f5a09e33ad61df15c96c55/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8ff6c6640bcff32c26f5a09e33ad61df15c96c55", "patch": "@@ -1,3 +1,9 @@\n+2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (validate_size): Reorder, remove obsolete test\n+\tand warning.\n+\t(set_rm_size): Reorder and remove obsolete test.\n+\n 2010-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h: Reorder declarations and tweak comments."}, {"sha": "b5ee0cfed0e66009d9d65dfe3550d67404e36db7", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 34, "deletions": 44, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff6c6640bcff32c26f5a09e33ad61df15c96c55/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff6c6640bcff32c26f5a09e33ad61df15c96c55/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=8ff6c6640bcff32c26f5a09e33ad61df15c96c55", "patch": "@@ -7516,13 +7516,9 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n   Node_Id gnat_error_node;\n   tree type_size, size;\n \n-  if (kind == VAR_DECL\n-      /* If a type needs strict alignment, a component of this type in\n-\t a packed record cannot be packed and thus uses the type size.  */\n-      || (kind == TYPE_DECL && Strict_Alignment (gnat_object)))\n-    type_size = TYPE_SIZE (gnu_type);\n-  else\n-    type_size = rm_size (gnu_type);\n+  /* Return 0 if no size was specified.  */\n+  if (uint_size == No_Uint)\n+    return NULL_TREE;\n \n   /* Find the node to use for errors.  */\n   if ((Ekind (gnat_object) == E_Component\n@@ -7534,19 +7530,17 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n   else\n     gnat_error_node = gnat_object;\n \n-  /* Return 0 if no size was specified, either because Esize was not Present\n-     or the specified size was zero.  */\n-  if (No (uint_size) || uint_size == No_Uint)\n-    return NULL_TREE;\n-\n   /* Get the size as a tree.  Issue an error if a size was specified but\n      cannot be represented in sizetype.  */\n   size = UI_To_gnu (uint_size, bitsizetype);\n   if (TREE_OVERFLOW (size))\n     {\n-      post_error_ne (component_p ? \"component size of & is too large\"\n-\t\t     : \"size of & is too large\",\n-\t\t     gnat_error_node, gnat_object);\n+      if (component_p)\n+\tpost_error_ne (\"component size of & is too large\", gnat_error_node,\n+\t\t       gnat_object);\n+      else\n+\tpost_error_ne (\"size of & is too large\", gnat_error_node,\n+\t\t       gnat_object);\n       return NULL_TREE;\n     }\n \n@@ -7582,6 +7576,14 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n       && TYPE_CONTAINS_TEMPLATE_P (gnu_type))\n     size = size_binop (PLUS_EXPR, DECL_SIZE (TYPE_FIELDS (gnu_type)), size);\n \n+  if (kind == VAR_DECL\n+      /* If a type needs strict alignment, a component of this type in\n+\t a packed record cannot be packed and thus uses the type size.  */\n+      || (kind == TYPE_DECL && Strict_Alignment (gnat_object)))\n+    type_size = TYPE_SIZE (gnu_type);\n+  else\n+    type_size = rm_size (gnu_type);\n+\n   /* Modify the size of the type to be that of the maximum size if it has a\n      discriminant.  */\n   if (type_size && CONTAINS_PLACEHOLDER_P (type_size))\n@@ -7591,13 +7593,9 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n      by the smallest integral mode that's valid for pointers.  */\n   if (TREE_CODE (gnu_type) == POINTER_TYPE || TYPE_IS_FAT_POINTER_P (gnu_type))\n     {\n-      enum machine_mode p_mode;\n-\n-      for (p_mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n-\t   !targetm.valid_pointer_mode (p_mode);\n-\t   p_mode = GET_MODE_WIDER_MODE (p_mode))\n-\t;\n-\n+      enum machine_mode p_mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n+      while (!targetm.valid_pointer_mode (p_mode))\n+\tp_mode = GET_MODE_WIDER_MODE (p_mode);\n       type_size = bitsize_int (GET_MODE_BITSIZE (p_mode));\n     }\n \n@@ -7612,22 +7610,11 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n \t  (\"component size for& too small{, minimum allowed is ^}\",\n \t   gnat_error_node, gnat_object, type_size);\n       else\n-\tpost_error_ne_tree (\"size for& too small{, minimum allowed is ^}\",\n-\t\t\t    gnat_error_node, gnat_object, type_size);\n-\n-      if (kind == VAR_DECL && !component_p\n-\t  && TREE_CODE (rm_size (gnu_type)) == INTEGER_CST\n-\t  && !tree_int_cst_lt (size, rm_size (gnu_type)))\n-\tpost_error_ne_tree_2\n-\t  (\"\\\\size of ^ is not a multiple of alignment (^ bits)\",\n-\t   gnat_error_node, gnat_object, rm_size (gnu_type),\n-\t   TYPE_ALIGN (gnu_type));\n-\n-      else if (INTEGRAL_TYPE_P (gnu_type))\n-\tpost_error_ne (\"\\\\size would be legal if & were not aliased!\",\n-\t\t       gnat_error_node, gnat_object);\n+\tpost_error_ne_tree\n+\t  (\"size for& too small{, minimum allowed is ^}\",\n+\t   gnat_error_node, gnat_object, type_size);\n \n-      return NULL_TREE;\n+      size = NULL_TREE;\n     }\n \n   return size;\n@@ -7639,16 +7626,17 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n static void\n set_rm_size (Uint uint_size, tree gnu_type, Entity_Id gnat_entity)\n {\n+  Node_Id gnat_attr_node;\n+  tree old_size, size;\n+\n+  /* Do nothing if no size was specified.  */\n+  if (uint_size == No_Uint)\n+    return;\n+\n   /* Only issue an error if a Value_Size clause was explicitly given.\n      Otherwise, we'd be duplicating an error on the Size clause.  */\n-  Node_Id gnat_attr_node\n+  gnat_attr_node\n     = Get_Attribute_Definition_Clause (gnat_entity, Attr_Value_Size);\n-  tree old_size = rm_size (gnu_type), size;\n-\n-  /* Do nothing if no size was specified, either because RM size was not\n-     Present or if the specified size was zero.  */\n-  if (No (uint_size) || uint_size == No_Uint)\n-    return;\n \n   /* Get the size as a tree.  Issue an error if a size was specified but\n      cannot be represented in sizetype.  */\n@@ -7672,6 +7660,8 @@ set_rm_size (Uint uint_size, tree gnu_type, Entity_Id gnat_entity)\n \t  && !Is_Discrete_Or_Fixed_Point_Type (gnat_entity)))\n     return;\n \n+  old_size = rm_size (gnu_type);\n+\n   /* If the old size is self-referential, get the maximum size.  */\n   if (CONTAINS_PLACEHOLDER_P (old_size))\n     old_size = max_size (old_size, true);"}]}