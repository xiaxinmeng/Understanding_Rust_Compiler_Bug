{"sha": "71a11456ef9b85dc6cc098151d90b6651db7f0df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhMTE0NTZlZjliODVkYzZjYzA5ODE1MWQ5MGI2NjUxZGI3ZjBkZg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T18:57:31Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T18:57:31Z"}, "message": "[AArch64] Add support for float16x{4,8}_t vectors/builtins\n\ngcc/:\n\n\t* config/aarch64/aarch64.c (aarch64_vector_mode_supported_p): Support\n\tV4HFmode and V8HFmode.\n\t(aarch64_split_simd_move): Add case for V8HFmode.\n\t* config/aarch64/aarch64-builtins.c (v4hf_UP, v8hf_UP): Define.\n\t(aarch64_simd_builtin_std_type): Handle HFmode.\n\t(aarch64_init_simd_builtin_types): Include Float16x4_t and Float16x8_t.\n\n\t* config/aarch64/aarch64-simd.md (mov<mode>, aarch64_get_lane<mode>,\n\taarch64_ld1<VALL:mode>, aarch64_st1<VALL:mode): Use VALL_F16 iterator.\n\t(aarch64_be_ld1<mode>, aarch64_be_st1<mode>): Use VALLDI_F16 iterator.\n\n\t* config/aarch64/aarch64-simd-builtin-types.def: Add Float16x4_t,\n\tFloat16x8_t.\n\n\t* config/aarch64/aarch64-simd-builtins.def (ld1, st1): Use VALL_F16.\n\t* config/aarch64/arm_neon.h (float16x4_t, float16x8_t, float16_t):\n\tNew typedefs.\n\t(vget_lane_f16, vgetq_lane_f16, vset_lane_f16, vsetq_lane_f16,\n\tvld1_f16, vld1q_f16, vst1_f16, vst1q_f16, vst1_lane_f16,\n\tvst1q_lane_f16): New.\n\t* config/aarch64/iterators.md (VD, VQ, VQ_NO2E): Add vectors of HFmode.\n\t(VALLDI_F16, VALL_F16): New.\n\t(Vmtype, VEL, VCONQ, VHALF, V_TWO_ELEM, V_THREE_ELEM, V_FOUR_ELEM, q):\n\tAdd cases for V4HF and V8HF.\n\t(VDBL, VRL2, VRL3, VRL4): Add V4HF case.\n\ngcc/testsuite/:\n\n\t* g++.dg/abi/mangle-neon-aarch64.C: Add cases for float16x4_t and\n\tfloat16x8_t.\n\t* gcc.target/aarch64/vset_lane_1.c: Likewise.\n\t* gcc.target/aarch64/vld1-vst1_1.c: Likewise.\n\t* gcc.target/aarch64/vld1_lane.c: Likewise.\n\nFrom-SVN: r227542", "tree": {"sha": "6fd918033aa59c6ceeeeb4ee3964422e5d09ca6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd918033aa59c6ceeeeb4ee3964422e5d09ca6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a11456ef9b85dc6cc098151d90b6651db7f0df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a11456ef9b85dc6cc098151d90b6651db7f0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a11456ef9b85dc6cc098151d90b6651db7f0df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a11456ef9b85dc6cc098151d90b6651db7f0df/comments", "author": null, "committer": null, "parents": [{"sha": "4b644867b3db01ff49bd0972980bd7b26705a000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b644867b3db01ff49bd0972980bd7b26705a000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b644867b3db01ff49bd0972980bd7b26705a000"}], "stats": {"total": 215, "additions": 187, "deletions": 28}, "files": [{"sha": "2f3254a025198fe59de6c94eae4ae5bce5e6f49c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -1,3 +1,31 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vector_mode_supported_p): Support\n+\tV4HFmode and V8HFmode.\n+\t(aarch64_split_simd_move): Add case for V8HFmode.\n+\t* config/aarch64/aarch64-builtins.c (v4hf_UP, v8hf_UP): Define.\n+\t(aarch64_simd_builtin_std_type): Handle HFmode.\n+\t(aarch64_init_simd_builtin_types): Include Float16x4_t and Float16x8_t.\n+\n+\t* config/aarch64/aarch64-simd.md (mov<mode>, aarch64_get_lane<mode>,\n+\taarch64_ld1<VALL:mode>, aarch64_st1<VALL:mode): Use VALL_F16 iterator.\n+\t(aarch64_be_ld1<mode>, aarch64_be_st1<mode>): Use VALLDI_F16 iterator.\n+\n+\t* config/aarch64/aarch64-simd-builtin-types.def: Add Float16x4_t,\n+\tFloat16x8_t.\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (ld1, st1): Use VALL_F16.\n+\t* config/aarch64/arm_neon.h (float16x4_t, float16x8_t, float16_t):\n+\tNew typedefs.\n+\t(vget_lane_f16, vgetq_lane_f16, vset_lane_f16, vsetq_lane_f16,\n+\tvld1_f16, vld1q_f16, vst1_f16, vst1q_f16, vst1_lane_f16,\n+\tvst1q_lane_f16): New.\n+\t* config/aarch64/iterators.md (VD, VQ, VQ_NO2E): Add vectors of HFmode.\n+\t(VALLDI_F16, VALL_F16): New.\n+\t(Vmtype, VEL, VCONQ, VHALF, V_TWO_ELEM, V_THREE_ELEM, V_FOUR_ELEM, q):\n+\tAdd cases for V4HF and V8HF.\n+\t(VDBL, VRL2, VRL3, VRL4): Add V4HF case.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/arm/arm-builtins.c (VAR11, VAR12): New."}, {"sha": "243fa9f58651e60e2255b4d2bd147f7781a58c8e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -61,13 +61,15 @@\n \n #define v8qi_UP  V8QImode\n #define v4hi_UP  V4HImode\n+#define v4hf_UP  V4HFmode\n #define v2si_UP  V2SImode\n #define v2sf_UP  V2SFmode\n #define v1df_UP  V1DFmode\n #define di_UP    DImode\n #define df_UP    DFmode\n #define v16qi_UP V16QImode\n #define v8hi_UP  V8HImode\n+#define v8hf_UP  V8HFmode\n #define v4si_UP  V4SImode\n #define v4sf_UP  V4SFmode\n #define v2di_UP  V2DImode\n@@ -520,6 +522,8 @@ aarch64_simd_builtin_std_type (enum machine_mode mode,\n       return aarch64_simd_intCI_type_node;\n     case XImode:\n       return aarch64_simd_intXI_type_node;\n+    case HFmode:\n+      return aarch64_fp16_type_node;\n     case SFmode:\n       return float_type_node;\n     case DFmode:\n@@ -604,6 +608,8 @@ aarch64_init_simd_builtin_types (void)\n   aarch64_simd_types[Poly64x2_t].eltype = aarch64_simd_types[Poly64_t].itype;\n \n   /* Continue with standard types.  */\n+  aarch64_simd_types[Float16x4_t].eltype = aarch64_fp16_type_node;\n+  aarch64_simd_types[Float16x8_t].eltype = aarch64_fp16_type_node;\n   aarch64_simd_types[Float32x2_t].eltype = float_type_node;\n   aarch64_simd_types[Float32x4_t].eltype = float_type_node;\n   aarch64_simd_types[Float64x1_t].eltype = double_type_node;"}, {"sha": "ea219b72ff9ac406c2439cda002617e710b2966c", "filename": "gcc/config/aarch64/aarch64-simd-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtin-types.def?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -44,6 +44,8 @@\n   ENTRY (Poly16x8_t, V8HI, poly, 12)\n   ENTRY (Poly64x1_t, DI, poly, 12)\n   ENTRY (Poly64x2_t, V2DI, poly, 12)\n+  ENTRY (Float16x4_t, V4HF, none, 13)\n+  ENTRY (Float16x8_t, V8HF, none, 13)\n   ENTRY (Float32x2_t, V2SF, none, 13)\n   ENTRY (Float32x4_t, V4SF, none, 13)\n   ENTRY (Float64x1_t, V1DF, none, 13)"}, {"sha": "39ff34e16d8bb79bcd44a4f40d214963996968af", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -367,11 +367,11 @@\n   VAR1 (UNOP, float_extend_lo_, 0, v2df)\n   VAR1 (UNOP, float_truncate_lo_, 0, v2sf)\n \n-  /* Implemented by aarch64_ld1<VALL:mode>.  */\n-  BUILTIN_VALL (LOAD1, ld1, 0)\n+  /* Implemented by aarch64_ld1<VALL_F16:mode>.  */\n+  BUILTIN_VALL_F16 (LOAD1, ld1, 0)\n \n-  /* Implemented by aarch64_st1<VALL:mode>.  */\n-  BUILTIN_VALL (STORE1, st1, 0)\n+  /* Implemented by aarch64_st1<VALL_F16:mode>.  */\n+  BUILTIN_VALL_F16 (STORE1, st1, 0)\n \n   /* Implemented by fma<mode>4.  */\n   BUILTIN_VDQF (TERNOP, fma, 4)"}, {"sha": "1bd6a19aea06ebf50cdd4e9eafa6b3f9405af238", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -19,8 +19,8 @@\n ;; <http://www.gnu.org/licenses/>.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VALL 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:VALL 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VALL_F16 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:VALL_F16 1 \"general_operand\" \"\"))]\n   \"TARGET_SIMD\"\n   \"\n     if (GET_CODE (operands[0]) == MEM)\n@@ -2450,7 +2450,7 @@\n (define_insn \"aarch64_get_lane<mode>\"\n   [(set (match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"=r, w, Utv\")\n \t(vec_select:<VEL>\n-\t  (match_operand:VALL 1 \"register_operand\" \"w, w, w\")\n+\t  (match_operand:VALL_F16 1 \"register_operand\" \"w, w, w\")\n \t  (parallel [(match_operand:SI 2 \"immediate_operand\" \"i, i, i\")])))]\n   \"TARGET_SIMD\"\n   {\n@@ -4243,17 +4243,18 @@\n )\n \n (define_insn \"aarch64_be_ld1<mode>\"\n-  [(set (match_operand:VALLDI 0\t\"register_operand\" \"=w\")\n-\t(unspec:VALLDI [(match_operand:VALLDI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+  [(set (match_operand:VALLDI_F16 0\t\"register_operand\" \"=w\")\n+\t(unspec:VALLDI_F16 [(match_operand:VALLDI_F16 1\n+\t\t\t     \"aarch64_simd_struct_operand\" \"Utv\")]\n \tUNSPEC_LD1))]\n   \"TARGET_SIMD\"\n   \"ld1\\\\t{%0<Vmtype>}, %1\"\n   [(set_attr \"type\" \"neon_load1_1reg<q>\")]\n )\n \n (define_insn \"aarch64_be_st1<mode>\"\n-  [(set (match_operand:VALLDI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:VALLDI [(match_operand:VALLDI 1 \"register_operand\" \"w\")]\n+  [(set (match_operand:VALLDI_F16 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:VALLDI_F16 [(match_operand:VALLDI_F16 1 \"register_operand\" \"w\")]\n \tUNSPEC_ST1))]\n   \"TARGET_SIMD\"\n   \"st1\\\\t{%1<Vmtype>}, %0\"\n@@ -4542,16 +4543,16 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_ld1<VALL:mode>\"\n- [(match_operand:VALL 0 \"register_operand\")\n+(define_expand \"aarch64_ld1<VALL_F16:mode>\"\n+ [(match_operand:VALL_F16 0 \"register_operand\")\n   (match_operand:DI 1 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <VALL:MODE>mode;\n+  machine_mode mode = <VALL_F16:MODE>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n \n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_aarch64_be_ld1<VALL:mode> (operands[0], mem));\n+    emit_insn (gen_aarch64_be_ld1<VALL_F16:mode> (operands[0], mem));\n   else\n     emit_move_insn (operands[0], mem);\n   DONE;\n@@ -4895,16 +4896,16 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_st1<VALL:mode>\"\n+(define_expand \"aarch64_st1<VALL_F16:mode>\"\n  [(match_operand:DI 0 \"register_operand\")\n-  (match_operand:VALL 1 \"register_operand\")]\n+  (match_operand:VALL_F16 1 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <VALL:MODE>mode;\n+  machine_mode mode = <VALL_F16:MODE>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[0]);\n \n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_aarch64_be_st1<VALL:mode> (mem, operands[1]));\n+    emit_insn (gen_aarch64_be_st1<VALL_F16:mode> (mem, operands[1]));\n   else\n     emit_move_insn (mem, operands[1]);\n   DONE;"}, {"sha": "59510451d2688b1b02f22224509ac60d58fd9332", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -1383,6 +1383,9 @@ aarch64_split_simd_move (rtx dst, rtx src)\n \tcase V2DImode:\n \t  gen = gen_aarch64_split_simd_movv2di;\n \t  break;\n+\tcase V8HFmode:\n+\t  gen = gen_aarch64_split_simd_movv8hf;\n+\t  break;\n \tcase V4SFmode:\n \t  gen = gen_aarch64_split_simd_movv4sf;\n \t  break;\n@@ -9780,6 +9783,7 @@ aarch64_vector_mode_supported_p (machine_mode mode)\n \t  || mode == V2SImode  || mode == V4HImode\n \t  || mode == V8QImode || mode == V2SFmode\n \t  || mode == V4SFmode || mode == V2DFmode\n+\t  || mode == V4HFmode || mode == V8HFmode\n \t  || mode == V1DFmode))\n     return true;\n "}, {"sha": "9669e0148824b94c22695b9c1adc9164ce11192f", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -875,7 +875,8 @@ extern enum aarch64_code_model aarch64_cmodel;\n /* Modes valid for AdvSIMD Q registers.  */\n #define AARCH64_VALID_SIMD_QREG_MODE(MODE) \\\n   ((MODE) == V4SImode || (MODE) == V8HImode || (MODE) == V16QImode \\\n-   || (MODE) == V4SFmode || (MODE) == V2DImode || mode == V2DFmode)\n+   || (MODE) == V4SFmode || (MODE) == V8HFmode || (MODE) == V2DImode \\\n+   || (MODE) == V2DFmode)\n \n #define ENDIAN_LANE_N(mode, n)  \\\n   (BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (mode) - 1 - n : n)"}, {"sha": "5f61b5b8871c56ee3fa6f9450406b4950fc27eb2", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -39,6 +39,7 @@ typedef __Int8x8_t int8x8_t;\n typedef __Int16x4_t int16x4_t;\n typedef __Int32x2_t int32x2_t;\n typedef __Int64x1_t int64x1_t;\n+typedef __Float16x4_t float16x4_t;\n typedef __Float32x2_t float32x2_t;\n typedef __Poly8x8_t poly8x8_t;\n typedef __Poly16x4_t poly16x4_t;\n@@ -51,6 +52,7 @@ typedef __Int8x16_t int8x16_t;\n typedef __Int16x8_t int16x8_t;\n typedef __Int32x4_t int32x4_t;\n typedef __Int64x2_t int64x2_t;\n+typedef __Float16x8_t float16x8_t;\n typedef __Float32x4_t float32x4_t;\n typedef __Float64x2_t float64x2_t;\n typedef __Poly8x16_t poly8x16_t;\n@@ -66,6 +68,7 @@ typedef __Poly16_t poly16_t;\n typedef __Poly64_t poly64_t;\n typedef __Poly128_t poly128_t;\n \n+typedef __fp16 float16_t;\n typedef float float32_t;\n typedef double float64_t;\n \n@@ -2690,6 +2693,12 @@ vcreate_p16 (uint64_t __a)\n \n /* vget_lane  */\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vget_lane_f16 (float16x4_t __a, const int __b)\n+{\n+  return __aarch64_vget_lane_any (__a, __b);\n+}\n+\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vget_lane_f32 (float32x2_t __a, const int __b)\n {\n@@ -2764,6 +2773,12 @@ vget_lane_u64 (uint64x1_t __a, const int __b)\n \n /* vgetq_lane  */\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vgetq_lane_f16 (float16x8_t __a, const int __b)\n+{\n+  return __aarch64_vget_lane_any (__a, __b);\n+}\n+\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vgetq_lane_f32 (float32x4_t __a, const int __b)\n {\n@@ -4424,6 +4439,12 @@ vreinterpretq_u32_p16 (poly16x8_t __a)\n \n /* vset_lane  */\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vset_lane_f16 (float16_t __elem, float16x4_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__elem, __vec, __index);\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vset_lane_f32 (float32_t __elem, float32x2_t __vec, const int __index)\n {\n@@ -4498,6 +4519,12 @@ vset_lane_u64 (uint64_t __elem, uint64x1_t __vec, const int __index)\n \n /* vsetq_lane  */\n \n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vsetq_lane_f16 (float16_t __elem, float16x8_t __vec, const int __index)\n+{\n+  return __aarch64_vset_lane_any (__elem, __vec, __index);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vsetq_lane_f32 (float32_t __elem, float32x4_t __vec, const int __index)\n {\n@@ -14628,6 +14655,12 @@ vfmsq_laneq_f64 (float64x2_t __a, float64x2_t __b,\n \n /* vld1 */\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vld1_f16 (const float16_t *__a)\n+{\n+  return __builtin_aarch64_ld1v4hf (__a);\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_f32 (const float32_t *a)\n {\n@@ -14707,6 +14740,12 @@ vld1_u64 (const uint64_t *a)\n \n /* vld1q */\n \n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vld1q_f16 (const float16_t *__a)\n+{\n+  return __builtin_aarch64_ld1v8hf (__a);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_f32 (const float32_t *a)\n {\n@@ -14935,6 +14974,12 @@ vld1q_dup_u64 (const uint64_t* __a)\n \n /* vld1_lane  */\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vld1_lane_f16 (const float16_t *__src, float16x4_t __vec, const int __lane)\n+{\n+  return __aarch64_vset_lane_any (*__src, __vec, __lane);\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_lane_f32 (const float32_t *__src, float32x2_t __vec, const int __lane)\n {\n@@ -15009,6 +15054,12 @@ vld1_lane_u64 (const uint64_t *__src, uint64x1_t __vec, const int __lane)\n \n /* vld1q_lane  */\n \n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vld1q_lane_f16 (const float16_t *__src, float16x8_t __vec, const int __lane)\n+{\n+  return __aarch64_vset_lane_any (*__src, __vec, __lane);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_lane_f32 (const float32_t *__src, float32x4_t __vec, const int __lane)\n {\n@@ -21976,6 +22027,12 @@ vsrid_n_u64 (uint64_t __a, uint64_t __b, const int __c)\n \n /* vst1 */\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1_f16 (float16_t *__a, float16x4_t __b)\n+{\n+  __builtin_aarch64_st1v4hf (__a, __b);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_f32 (float32_t *a, float32x2_t b)\n {\n@@ -22055,6 +22112,12 @@ vst1_u64 (uint64_t *a, uint64x1_t b)\n \n /* vst1q */\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1q_f16 (float16_t *__a, float16x8_t __b)\n+{\n+  __builtin_aarch64_st1v8hf (__a, __b);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_f32 (float32_t *a, float32x4_t b)\n {\n@@ -22135,6 +22198,12 @@ vst1q_u64 (uint64_t *a, uint64x2_t b)\n \n /* vst1_lane */\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1_lane_f16 (float16_t *__a, float16x4_t __b, const int __lane)\n+{\n+  *__a = __aarch64_vget_lane_any (__b, __lane);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_lane_f32 (float32_t *__a, float32x2_t __b, const int __lane)\n {\n@@ -22209,6 +22278,12 @@ vst1_lane_u64 (uint64_t *__a, uint64x1_t __b, const int __lane)\n \n /* vst1q_lane */\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1q_lane_f16 (float16_t *__a, float16x8_t __b, const int __lane)\n+{\n+  *__a = __aarch64_vget_lane_any (__b, __lane);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_lane_f32 (float32_t *__a, float32x4_t __b, const int __lane)\n {"}, {"sha": "3e4f07deca7429b8a9100be2a5cf795c7159af02", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -52,7 +52,7 @@\n (define_mode_iterator VSDQ_I_DI [V8QI V16QI V4HI V8HI V2SI V4SI V2DI DI])\n \n ;; Double vector modes.\n-(define_mode_iterator VD [V8QI V4HI V2SI V2SF])\n+(define_mode_iterator VD [V8QI V4HI V4HF V2SI V2SF])\n \n ;; vector, 64-bit container, all integer modes\n (define_mode_iterator VD_BHSI [V8QI V4HI V2SI])\n@@ -61,10 +61,10 @@\n (define_mode_iterator VDQ_BHSI [V8QI V16QI V4HI V8HI V2SI V4SI])\n \n ;; Quad vector modes.\n-(define_mode_iterator VQ [V16QI V8HI V4SI V2DI V4SF V2DF])\n+(define_mode_iterator VQ [V16QI V8HI V4SI V2DI V8HF V4SF V2DF])\n \n ;; VQ without 2 element modes.\n-(define_mode_iterator VQ_NO2E [V16QI V8HI V4SI V4SF])\n+(define_mode_iterator VQ_NO2E [V16QI V8HI V4SI V8HF V4SF])\n \n ;; Quad vector with only 2 element modes.\n (define_mode_iterator VQ_2E [V2DI V2DF])\n@@ -97,13 +97,21 @@\n ;; Vector Float modes with 2 elements.\n (define_mode_iterator V2F [V2SF V2DF])\n \n-;; All modes.\n+;; All vector modes on which we support any arithmetic operations.\n (define_mode_iterator VALL [V8QI V16QI V4HI V8HI V2SI V4SI V2DI V2SF V4SF V2DF])\n \n-;; All vector modes and DI.\n+;; All vector modes suitable for moving, loading, and storing.\n+(define_mode_iterator VALL_F16 [V8QI V16QI V4HI V8HI V2SI V4SI V2DI\n+\t\t\t\tV4HF V8HF V2SF V4SF V2DF])\n+\n+;; All vector modes barring HF modes, plus DI.\n (define_mode_iterator VALLDI [V8QI V16QI V4HI V8HI V2SI V4SI V2DI V2SF V4SF V2DF DI])\n \n-;; All vector modes and DI and DF.\n+;; All vector modes and DI.\n+(define_mode_iterator VALLDI_F16 [V8QI V16QI V4HI V8HI V2SI V4SI V2DI\n+\t\t\t\t  V4HF V8HF V2SF V4SF V2DF DI])\n+\n+;; All vector modes barring HF modes, plus DI and DF.\n (define_mode_iterator VALLDIF [V8QI V16QI V4HI V8HI V2SI V4SI\n \t\t\t       V2DI V2SF V4SF V2DF DI DF])\n \n@@ -361,7 +369,8 @@\n (define_mode_attr Vmtype [(V8QI \".8b\") (V16QI \".16b\")\n \t\t\t (V4HI \".4h\") (V8HI  \".8h\")\n \t\t\t (V2SI \".2s\") (V4SI  \".4s\")\n-\t\t\t (V2DI \".2d\") (V2SF \".2s\")\n+\t\t\t (V2DI \".2d\") (V4HF \".4h\")\n+\t\t\t (V8HF \".8h\") (V2SF \".2s\")\n \t\t\t (V4SF \".4s\") (V2DF \".2d\")\n \t\t\t (DI   \"\")    (SI   \"\")\n \t\t\t (HI   \"\")    (QI   \"\")\n@@ -398,6 +407,7 @@\n \t\t\t(V4HI \"HI\") (V8HI \"HI\")\n                         (V2SI \"SI\") (V4SI \"SI\")\n                         (DI \"DI\")   (V2DI \"DI\")\n+                        (V4HF \"HF\") (V8HF \"HF\")\n                         (V2SF \"SF\") (V4SF \"SF\")\n                         (V2DF \"DF\") (DF \"DF\")\n \t\t\t(SI   \"SI\") (HI   \"HI\")\n@@ -416,6 +426,7 @@\n \t\t\t (V4HI \"V8HI\") (V8HI \"V8HI\")\n \t\t\t (V2SI \"V4SI\") (V4SI \"V4SI\")\n \t\t\t (DI   \"V2DI\") (V2DI \"V2DI\")\n+\t\t\t (V4HF \"V8HF\") (V8HF \"V8HF\")\n \t\t\t (V2SF \"V2SF\") (V4SF \"V4SF\")\n \t\t\t (V2DF \"V2DF\") (SI   \"V4SI\")\n \t\t\t (HI   \"V8HI\") (QI   \"V16QI\")])\n@@ -425,10 +436,12 @@\n \t\t\t (V4HI \"V2HI\")  (V8HI  \"V4HI\")\n \t\t\t (V2SI \"SI\")    (V4SI  \"V2SI\")\n \t\t\t (V2DI \"DI\")    (V2SF  \"SF\")\n-\t\t\t (V4SF \"V2SF\")  (V2DF  \"DF\")])\n+\t\t\t (V4SF \"V2SF\")  (V4HF \"V2HF\")\n+\t\t\t (V8HF \"V4HF\")  (V2DF  \"DF\")])\n \n ;; Double modes of vector modes.\n (define_mode_attr VDBL [(V8QI \"V16QI\") (V4HI \"V8HI\")\n+\t\t\t(V4HF \"V8HF\")\n \t\t\t(V2SI \"V4SI\")  (V2SF \"V4SF\")\n \t\t\t(SI   \"V2SI\")  (DI   \"V2DI\")\n \t\t\t(DF   \"V2DF\")])\n@@ -539,14 +552,17 @@\n (define_mode_attr nregs [(OI \"2\") (CI \"3\") (XI \"4\")])\n \n (define_mode_attr VRL2 [(V8QI \"V32QI\") (V4HI \"V16HI\")\n+\t\t\t(V4HF \"V16HF\")\n \t\t\t(V2SI \"V8SI\")  (V2SF \"V8SF\")\n \t\t\t(DI   \"V4DI\")  (DF   \"V4DF\")])\n \n (define_mode_attr VRL3 [(V8QI \"V48QI\") (V4HI \"V24HI\")\n+\t\t\t(V4HF \"V24HF\")\n \t\t\t(V2SI \"V12SI\")  (V2SF \"V12SF\")\n \t\t\t(DI   \"V6DI\")  (DF   \"V6DF\")])\n \n (define_mode_attr VRL4 [(V8QI \"V64QI\") (V4HI \"V32HI\")\n+\t\t\t(V4HF \"V32HF\")\n \t\t\t(V2SI \"V16SI\")  (V2SF \"V16SF\")\n \t\t\t(DI   \"V8DI\")  (DF   \"V8DF\")])\n \n@@ -559,6 +575,7 @@\n                               (V2SI \"V2SI\") (V4SI \"V2SI\")\n                               (DI \"V2DI\")   (V2DI \"V2DI\")\n                               (V2SF \"V2SF\") (V4SF \"V2SF\")\n+                              (V4HF \"SF\") (V8HF \"SF\")\n                               (DF \"V2DI\")   (V2DF \"V2DI\")])\n \n ;; Similar, for three elements.\n@@ -567,6 +584,7 @@\n                                 (V2SI \"BLK\") (V4SI \"BLK\")\n                                 (DI \"EI\")    (V2DI \"EI\")\n                                 (V2SF \"BLK\") (V4SF \"BLK\")\n+                                (V4HF \"BLK\") (V8HF \"BLK\")\n                                 (DF \"EI\")    (V2DF \"EI\")])\n \n ;; Similar, for four elements.\n@@ -575,6 +593,7 @@\n                                (V2SI \"V4SI\") (V4SI \"V4SI\")\n                                (DI \"OI\")     (V2DI \"OI\")\n                                (V2SF \"V4SF\") (V4SF \"V4SF\")\n+                               (V4HF \"V4HF\") (V8HF \"V4HF\")\n                                (DF \"OI\")     (V2DF \"OI\")])\n \n \n@@ -633,6 +652,7 @@\n \t\t     (V4HI \"\") (V8HI  \"_q\")\n \t\t     (V2SI \"\") (V4SI  \"_q\")\n \t\t     (DI   \"\") (V2DI  \"_q\")\n+\t\t     (V4HF \"\") (V8HF \"_q\")\n \t\t     (V2SF \"\") (V4SF  \"_q\")\n \t\t\t       (V2DF  \"_q\")\n \t\t     (QI \"\") (HI \"\") (SI \"\") (DI \"\") (SF \"\") (DF \"\")])"}, {"sha": "1d8e58533fbed7a19bee407219afd0fca0df3098", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -1,3 +1,11 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* g++.dg/abi/mangle-neon-aarch64.C: Add cases for float16x4_t and\n+\tfloat16x8_t.\n+\t* gcc.target/aarch64/vset_lane_1.c: Likewise.\n+\t* gcc.target/aarch64/vld1-vst1_1.c: Likewise.\n+\t* gcc.target/aarch64/vld1_lane.c: Likewise.\n+\n 2015-09-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67369"}, {"sha": "5740c0281b2fdf8bbc11d9428ca2f6ba8f1760a0", "filename": "gcc/testsuite/g++.dg/abi/mangle-neon-aarch64.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-neon-aarch64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-neon-aarch64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-neon-aarch64.C?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -13,6 +13,7 @@ void f3 (uint8x8_t a) {}\n void f4 (uint16x4_t a) {}\n void f5 (uint32x2_t a) {}\n void f23 (uint64x1_t a) {}\n+void f61 (float16x4_t a) {}\n void f6 (float32x2_t a) {}\n void f7 (poly8x8_t a) {}\n void f8 (poly16x4_t a) {}\n@@ -25,6 +26,7 @@ void f13 (uint8x16_t a) {}\n void f14 (uint16x8_t a) {}\n void f15 (uint32x4_t a) {}\n void f16 (uint64x2_t a) {}\n+void f171 (float16x8_t a) {}\n void f17 (float32x4_t a) {}\n void f18 (float64x2_t a) {}\n void f19 (poly8x16_t a) {}\n@@ -42,6 +44,7 @@ void g1 (int8x16_t, int8x16_t) {}\n // { dg-final { scan-assembler \"_Z2f412__Uint16x4_t:\" } }\n // { dg-final { scan-assembler \"_Z2f512__Uint32x2_t:\" } }\n // { dg-final { scan-assembler \"_Z3f2312__Uint64x1_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f6113__Float16x4_t:\" } }\n // { dg-final { scan-assembler \"_Z2f613__Float32x2_t:\" } }\n // { dg-final { scan-assembler \"_Z2f711__Poly8x8_t:\" } }\n // { dg-final { scan-assembler \"_Z2f812__Poly16x4_t:\" } }\n@@ -53,6 +56,7 @@ void g1 (int8x16_t, int8x16_t) {}\n // { dg-final { scan-assembler \"_Z3f1412__Uint16x8_t:\" } }\n // { dg-final { scan-assembler \"_Z3f1512__Uint32x4_t:\" } }\n // { dg-final { scan-assembler \"_Z3f1612__Uint64x2_t:\" } }\n+// { dg-final { scan-assembler \"_Z4f17113__Float16x8_t:\" } }\n // { dg-final { scan-assembler \"_Z3f1713__Float32x4_t:\" } }\n // { dg-final { scan-assembler \"_Z3f1813__Float64x2_t:\" } }\n // { dg-final { scan-assembler \"_Z3f1912__Poly8x16_t:\" } }"}, {"sha": "fa9ef0f4e438b45cd7f316b18ba462573fe0e035", "filename": "gcc/testsuite/gcc.target/aarch64/vld1-vst1_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -31,13 +31,15 @@ THING (int8x8_t, 8, int8_t, _s8)\t\\\n THING (uint8x8_t, 8, uint8_t, _u8)\t\\\n THING (int16x4_t, 4, int16_t, _s16)\t\\\n THING (uint16x4_t, 4, uint16_t, _u16)\t\\\n+THING (float16x4_t, 4, float16_t, _f16)\t\\\n THING (int32x2_t, 2, int32_t, _s32)\t\\\n THING (uint32x2_t, 2, uint32_t, _u32)\t\\\n THING (float32x2_t, 2, float32_t, _f32) \\\n THING (int8x16_t, 16, int8_t, q_s8)\t\\\n THING (uint8x16_t, 16, uint8_t, q_u8)\t\\\n THING (int16x8_t, 8, int16_t, q_s16)\t\\\n THING (uint16x8_t, 8, uint16_t, q_u16)\t\\\n+THING (float16x8_t, 8, float16_t, q_f16)\\\n THING (int32x4_t, 4, int32_t, q_s32)\t\\\n THING (uint32x4_t, 4, uint32_t, q_u32)\t\\\n THING (float32x4_t, 4, float32_t, q_f32)\\"}, {"sha": "c70df7135c1f32714d87f0c21cae41650354ffb6", "filename": "gcc/testsuite/gcc.target/aarch64/vld1_lane.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1_lane.c?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -16,6 +16,7 @@ VARIANT (int32, , 2, _s32, 0)\t\\\n VARIANT (int64, , 1, _s64, 0)\t\\\n VARIANT (poly8, , 8, _p8, 7)\t\\\n VARIANT (poly16, , 4, _p16, 2)\t\\\n+VARIANT (float16, , 4, _f16, 3)\t\\\n VARIANT (float32, , 2, _f32, 1)\t\\\n VARIANT (float64, , 1, _f64, 0)\t\\\n VARIANT (uint8, q, 16, _u8, 13)\t\\\n@@ -28,6 +29,7 @@ VARIANT (int32, q, 4, _s32, 1)\t\\\n VARIANT (int64, q, 2, _s64, 1)\t\\\n VARIANT (poly8, q, 16, _p8, 7)\t\\\n VARIANT (poly16, q, 8, _p16, 4)\t\\\n+VARIANT (float16, q, 8, _f16, 3)\\\n VARIANT (float32, q, 4, _f32, 2)\\\n VARIANT (float64, q, 2, _f64, 1)\n \n@@ -76,6 +78,7 @@ main (int argc, char **argv)\n   int64_t int64_data = 0x1234567890abcdefLL;\n   poly8_t poly8_data = 13;\n   poly16_t poly16_data = 11111;\n+  float16_t float16_data = 8.75;\n   float32_t float32_data = 3.14159;\n   float64_t float64_data = 1.010010001;\n "}, {"sha": "bc0132c20a7b8150b81491eaaf9b76ce448b2410", "filename": "gcc/testsuite/gcc.target/aarch64/vset_lane_1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvset_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a11456ef9b85dc6cc098151d90b6651db7f0df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvset_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvset_lane_1.c?ref=71a11456ef9b85dc6cc098151d90b6651db7f0df", "patch": "@@ -16,6 +16,7 @@ VARIANT (int32_t, , 2, int32x2_t, _s32, 0)\t\\\n VARIANT (int64_t, , 1, int64x1_t, _s64, 0)\t\\\n VARIANT (poly8_t, , 8, poly8x8_t, _p8, 6)\t\\\n VARIANT (poly16_t, , 4, poly16x4_t, _p16, 2)\t\\\n+VARIANT (float16_t, , 4, float16x4_t, _f16, 3)\t\\\n VARIANT (float32_t, , 2, float32x2_t, _f32, 1)\t\\\n VARIANT (float64_t, , 1, float64x1_t, _f64, 0)\t\\\n VARIANT (uint8_t, q, 16, uint8x16_t, _u8, 11)\t\\\n@@ -28,6 +29,7 @@ VARIANT (int32_t, q, 4, int32x4_t, _s32, 3)\t\\\n VARIANT (int64_t, q, 2, int64x2_t, _s64, 0)\t\\\n VARIANT (poly8_t, q, 16, poly8x16_t, _p8, 14)\t\\\n VARIANT (poly16_t, q, 8, poly16x8_t, _p16, 6)\t\\\n+VARIANT (float16_t, q, 8, float16x8_t, _f16, 6)\t\\\n VARIANT (float32_t, q, 4, float32x4_t, _f32, 2) \\\n VARIANT (float64_t, q, 2, float64x2_t, _f64, 1)\n \n@@ -76,6 +78,9 @@ main (int argc, char **argv)\n   poly8_t poly8_t_data[16] =\n       { 0, 7, 13, 18, 22, 25, 27, 28, 29, 31, 34, 38, 43, 49, 56, 64 };\n   poly16_t poly16_t_data[8] = { 11111, 2222, 333, 44, 5, 65432, 54321, 43210 };\n+  float16_t float16_t_data[8] = { 1.25, 4.5, 7.875, 2.3125, 5.675, 8.875,\n+      3.6875, 6.75};\n+\n   float32_t float32_t_data[4] = { 3.14159, 2.718, 1.414, 100.0 };\n   float64_t float64_t_data[2] = { 1.01001000100001, 12345.6789 };\n "}]}