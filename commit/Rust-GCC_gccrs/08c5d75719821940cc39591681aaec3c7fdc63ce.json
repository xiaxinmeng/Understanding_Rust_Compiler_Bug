{"sha": "08c5d75719821940cc39591681aaec3c7fdc63ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjNWQ3NTcxOTgyMTk0MGNjMzk1OTE2ODFhYWVjM2M3ZmRjNjNjZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-20T14:54:37Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T14:54:37Z"}, "message": "ByteBufferImpl.java, [...]: Made sure all classes are final and removed final keyword from all methods.\n\n2004-04-20  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/ByteBufferImpl.java,\n\tjava/nio/CharBufferImpl.java,\n\tjava/nio/DirectByteBufferImpl.java,\n\tjava/nio/DoubleBufferImpl.java,\n\tjava/nio/DoubleViewBufferImpl.java,\n\tjava/nio/FloatBufferImpl.java,\n\tjava/nio/FloatViewBufferImpl.java,\n\tjava/nio/IntBufferImpl.java,\n\tjava/nio/IntViewBufferImpl.java,\n\tjava/nio/LongBufferImpl.java,\n\tjava/nio/LongViewBufferImpl.java,\n\tjava/nio/MappedByteBufferImpl.java,\n\tjava/nio/ShortBufferImpl.java,\n\tjava/nio/ShortViewBufferImpl.java:\n\tMade sure all classes are final and removed final keyword from all\n\tmethods.\n\nFrom-SVN: r80907", "tree": {"sha": "d537507404d80063e474451791d6e5fc6c41c099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d537507404d80063e474451791d6e5fc6c41c099"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c5d75719821940cc39591681aaec3c7fdc63ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c5d75719821940cc39591681aaec3c7fdc63ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c5d75719821940cc39591681aaec3c7fdc63ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c5d75719821940cc39591681aaec3c7fdc63ce/comments", "author": null, "committer": null, "parents": [{"sha": "a17c9f2ea1ecec71169eff40c591ca3bf8307a32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a17c9f2ea1ecec71169eff40c591ca3bf8307a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a17c9f2ea1ecec71169eff40c591ca3bf8307a32"}], "stats": {"total": 248, "additions": 133, "deletions": 115}, "files": [{"sha": "b57c3fbbd79d3ad25f62a7af2ffc5a77ab74592a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -1,3 +1,22 @@\n+2004-04-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/ByteBufferImpl.java,\n+\tjava/nio/CharBufferImpl.java,\n+\tjava/nio/DirectByteBufferImpl.java,\n+\tjava/nio/DoubleBufferImpl.java,\n+\tjava/nio/DoubleViewBufferImpl.java,\n+\tjava/nio/FloatBufferImpl.java,\n+\tjava/nio/FloatViewBufferImpl.java,\n+\tjava/nio/IntBufferImpl.java,\n+\tjava/nio/IntViewBufferImpl.java,\n+\tjava/nio/LongBufferImpl.java,\n+\tjava/nio/LongViewBufferImpl.java,\n+\tjava/nio/MappedByteBufferImpl.java,\n+\tjava/nio/ShortBufferImpl.java,\n+\tjava/nio/ShortViewBufferImpl.java:\n+\tMade sure all classes are final and removed final keyword from all\n+\tmethods.\n+\n 2004-04-20  Michael Koch  <konqueror@gmx.de>\n \n \t* java/rmi/MarshalledObject.java,"}, {"sha": "f79ae630acb28580523108070d1e8cd52911ffdf", "filename": "libjava/java/nio/ByteBufferImpl.java", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -131,7 +131,7 @@ public boolean isDirect ()\n   /**\n    * Relative get method. Reads the next <code>byte</code> from the buffer.\n    */\n-  final public byte get ()\n+  public byte get ()\n   {\n     byte result = backing_buffer [position () + array_offset];\n     position (position () + 1);\n@@ -144,7 +144,7 @@ final public byte get ()\n    * \n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public ByteBuffer put (byte value)\n+  public ByteBuffer put (byte value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -162,7 +162,7 @@ final public ByteBuffer put (byte value)\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n-  final public byte get (int index)\n+  public byte get (int index)\n   {\n     return backing_buffer [index + array_offset];\n   }\n@@ -175,7 +175,7 @@ final public byte get (int index)\n    * than the buffer's limit.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public ByteBuffer put (int index, byte value)\n+  public ByteBuffer put (int index, byte value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -184,133 +184,133 @@ final public ByteBuffer put (int index, byte value)\n     return this;\n   }\n   \n-  final public char getChar ()\n+  public char getChar ()\n   {\n     return ByteBufferHelper.getChar(this, order());\n   }\n   \n-  final public ByteBuffer putChar (char value)\n+  public ByteBuffer putChar (char value)\n   {\n     ByteBufferHelper.putChar(this, value, order());\n     return this;\n   }\n   \n-  final public char getChar (int index)\n+  public char getChar (int index)\n   {\n     return ByteBufferHelper.getChar(this, index, order());\n   }\n   \n-  final public ByteBuffer putChar (int index, char value)\n+  public ByteBuffer putChar (int index, char value)\n   {\n     ByteBufferHelper.putChar(this, index, value, order());\n     return this;\n   }\n \n-  final public short getShort ()\n+  public short getShort ()\n   {\n     return ByteBufferHelper.getShort(this, order());\n   }\n   \n-  final public ByteBuffer putShort (short value)\n+  public ByteBuffer putShort (short value)\n   {\n     ByteBufferHelper.putShort(this, value, order());\n     return this;\n   }\n   \n-  final public short getShort (int index)\n+  public short getShort (int index)\n   {\n     return ByteBufferHelper.getShort(this, index, order());\n   }\n   \n-  final public ByteBuffer putShort (int index, short value)\n+  public ByteBuffer putShort (int index, short value)\n   {\n     ByteBufferHelper.putShort(this, index, value, order());\n     return this;\n   }\n \n-  final public int getInt ()\n+  public int getInt ()\n   {\n     return ByteBufferHelper.getInt(this, order());\n   }\n   \n-  final public ByteBuffer putInt (int value)\n+  public ByteBuffer putInt (int value)\n   {\n     ByteBufferHelper.putInt(this, value, order());\n     return this;\n   }\n   \n-  final public int getInt (int index)\n+  public int getInt (int index)\n   {\n     return ByteBufferHelper.getInt(this, index, order());\n   }\n   \n-  final public ByteBuffer putInt (int index, int value)\n+  public ByteBuffer putInt (int index, int value)\n   {\n     ByteBufferHelper.putInt(this, index, value, order());\n     return this;\n   }\n \n-  final public long getLong ()\n+  public long getLong ()\n   {\n     return ByteBufferHelper.getLong(this, order());\n   }\n   \n-  final public ByteBuffer putLong (long value)\n+  public ByteBuffer putLong (long value)\n   {\n     ByteBufferHelper.putLong (this, value, order());\n     return this;\n   }\n   \n-  final public long getLong (int index)\n+  public long getLong (int index)\n   {\n     return ByteBufferHelper.getLong (this, index, order());\n   }\n   \n-  final public ByteBuffer putLong (int index, long value)\n+  public ByteBuffer putLong (int index, long value)\n   {\n     ByteBufferHelper.putLong (this, index, value, order());\n     return this;\n   }\n \n-  final public float getFloat ()\n+  public float getFloat ()\n   {\n     return ByteBufferHelper.getFloat (this, order());\n   }\n   \n-  final public ByteBuffer putFloat (float value)\n+  public ByteBuffer putFloat (float value)\n   {\n     ByteBufferHelper.putFloat (this, value, order());\n     return this;\n   }\n   \n-  public final float getFloat (int index)\n+  public float getFloat (int index)\n   {\n     return ByteBufferHelper.getFloat (this, index, order());\n   }\n \n-  final public ByteBuffer putFloat (int index, float value)\n+  public ByteBuffer putFloat (int index, float value)\n   {\n     ByteBufferHelper.putFloat (this, index, value, order());\n     return this;\n   }\n \n-  final public double getDouble ()\n+  public double getDouble ()\n   {\n     return ByteBufferHelper.getDouble (this, order());\n   }\n \n-  final public ByteBuffer putDouble (double value)\n+  public ByteBuffer putDouble (double value)\n   {\n     ByteBufferHelper.putDouble (this, value, order());\n     return this;\n   }\n   \n-  final public double getDouble (int index)\n+  public double getDouble (int index)\n   {\n     return ByteBufferHelper.getDouble (this, index, order());\n   }\n   \n-  final public ByteBuffer putDouble (int index, double value)\n+  public ByteBuffer putDouble (int index, double value)\n   {\n     ByteBufferHelper.putDouble (this, index, value, order());\n     return this;"}, {"sha": "1a8dff1d07cffe10640722d97110a7a896807ad1", "filename": "libjava/java/nio/CharBufferImpl.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FCharBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FCharBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -104,7 +104,7 @@ public boolean isDirect ()\n     return false;\n   }\n \n-  final public CharSequence subSequence (int start, int end)\n+  public CharSequence subSequence (int start, int end)\n   {\n     if (start < 0\n         || start > length ()\n@@ -118,7 +118,7 @@ final public CharSequence subSequence (int start, int end)\n   /**\n    * Relative get method. Reads the next <code>char</code> from the buffer.\n    */\n-  final public char get ()\n+  public char get ()\n   {\n     char result = backing_buffer [position ()];\n     position (position () + 1);\n@@ -131,7 +131,7 @@ final public char get ()\n    * \n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public CharBuffer put (char value)\n+  public CharBuffer put (char value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -148,7 +148,7 @@ final public CharBuffer put (char value)\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n-  final public char get (int index)\n+  public char get (int index)\n   {\n     if (index < 0\n         || index >= limit ())\n@@ -165,7 +165,7 @@ final public char get (int index)\n    * than the buffer's limit.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public CharBuffer put (int index, char value)\n+  public CharBuffer put (int index, char value)\n   {\n     if (index < 0\n         || index >= limit ())\n@@ -178,7 +178,7 @@ final public CharBuffer put (int index, char value)\n     return this;\n   }\n   \n-  final public ByteOrder order ()\n+  public ByteOrder order ()\n   {\n     return ByteOrder.nativeOrder ();\n   }"}, {"sha": "7c2b783d7d8c3903fbec6c5f052c44b435b19b2b", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -41,7 +41,7 @@\n import gnu.classpath.Configuration;\n import gnu.gcj.RawData;\n \n-class DirectByteBufferImpl extends ByteBuffer\n+final class DirectByteBufferImpl extends ByteBuffer\n {\n   static\n   {\n@@ -229,133 +229,133 @@ public DoubleBuffer asDoubleBuffer ()\n     return new DoubleViewBufferImpl (this, remaining() >> 3);\n   }\n \n-  final public char getChar ()\n+  public char getChar ()\n   {\n     return ByteBufferHelper.getChar(this, order());\n   }\n   \n-  final public ByteBuffer putChar (char value)\n+  public ByteBuffer putChar (char value)\n   {\n     ByteBufferHelper.putChar(this, value, order());\n     return this;\n   }\n   \n-  final public char getChar (int index)\n+  public char getChar (int index)\n   {\n     return ByteBufferHelper.getChar(this, index, order());\n   }\n   \n-  final public ByteBuffer putChar (int index, char value)\n+  public ByteBuffer putChar (int index, char value)\n   {\n     ByteBufferHelper.putChar(this, index, value, order());\n     return this;\n   }\n \n-  final public short getShort ()\n+  public short getShort ()\n   {\n     return ByteBufferHelper.getShort(this, order());\n   }\n   \n-  final public ByteBuffer putShort (short value)\n+  public ByteBuffer putShort (short value)\n   {\n     ByteBufferHelper.putShort(this, value, order());\n     return this;\n   }\n   \n-  final public short getShort (int index)\n+  public short getShort (int index)\n   {\n     return ByteBufferHelper.getShort(this, index, order());\n   }\n   \n-  final public ByteBuffer putShort (int index, short value)\n+  public ByteBuffer putShort (int index, short value)\n   {\n     ByteBufferHelper.putShort(this, index, value, order());\n     return this;\n   }\n \n-  final public int getInt ()\n+  public int getInt ()\n   {\n     return ByteBufferHelper.getInt(this, order());\n   }\n   \n-  final public ByteBuffer putInt (int value)\n+  public ByteBuffer putInt (int value)\n   {\n     ByteBufferHelper.putInt(this, value, order());\n     return this;\n   }\n   \n-  final public int getInt (int index)\n+  public int getInt (int index)\n   {\n     return ByteBufferHelper.getInt(this, index, order());\n   }\n   \n-  final public ByteBuffer putInt (int index, int value)\n+  public ByteBuffer putInt (int index, int value)\n   {\n     ByteBufferHelper.putInt(this, index, value, order());\n     return this;\n   }\n \n-  final public long getLong ()\n+  public long getLong ()\n   {\n     return ByteBufferHelper.getLong(this, order());\n   }\n   \n-  final public ByteBuffer putLong (long value)\n+  public ByteBuffer putLong (long value)\n   {\n     ByteBufferHelper.putLong (this, value, order());\n     return this;\n   }\n   \n-  final public long getLong (int index)\n+  public long getLong (int index)\n   {\n     return ByteBufferHelper.getLong (this, index, order());\n   }\n   \n-  final public ByteBuffer putLong (int index, long value)\n+  public ByteBuffer putLong (int index, long value)\n   {\n     ByteBufferHelper.putLong (this, index, value, order());\n     return this;\n   }\n \n-  final public float getFloat ()\n+  public float getFloat ()\n   {\n     return ByteBufferHelper.getFloat (this, order());\n   }\n   \n-  final public ByteBuffer putFloat (float value)\n+  public ByteBuffer putFloat (float value)\n   {\n     ByteBufferHelper.putFloat (this, value, order());\n     return this;\n   }\n   \n-  public final float getFloat (int index)\n+  public float getFloat (int index)\n   {\n     return ByteBufferHelper.getFloat (this, index, order());\n   }\n \n-  final public ByteBuffer putFloat (int index, float value)\n+  public ByteBuffer putFloat (int index, float value)\n   {\n     ByteBufferHelper.putFloat (this, index, value, order());\n     return this;\n   }\n \n-  final public double getDouble ()\n+  public double getDouble ()\n   {\n     return ByteBufferHelper.getDouble (this, order());\n   }\n \n-  final public ByteBuffer putDouble (double value)\n+  public ByteBuffer putDouble (double value)\n   {\n     ByteBufferHelper.putDouble (this, value, order());\n     return this;\n   }\n   \n-  final public double getDouble (int index)\n+  public double getDouble (int index)\n   {\n     return ByteBufferHelper.getDouble (this, index, order());\n   }\n   \n-  final public ByteBuffer putDouble (int index, double value)\n+  public ByteBuffer putDouble (int index, double value)\n   {\n     ByteBufferHelper.putDouble (this, index, value, order());\n     return this;"}, {"sha": "81fde6db6e6dc586d8ed52689fa9defdb6b364c6", "filename": "libjava/java/nio/DoubleBufferImpl.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -100,7 +100,7 @@ public boolean isDirect ()\n   /**\n    * Relative get method. Reads the next <code>double</code> from the buffer.\n    */\n-  final public double get ()\n+  public double get ()\n   {\n     double result = backing_buffer [position ()];\n     position (position () + 1);\n@@ -113,7 +113,7 @@ final public double get ()\n    * \n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public DoubleBuffer put (double value)\n+  public DoubleBuffer put (double value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -130,7 +130,7 @@ final public DoubleBuffer put (double value)\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n-  final public double get (int index)\n+  public double get (int index)\n   {\n     return backing_buffer [index];\n   }\n@@ -143,7 +143,7 @@ final public double get (int index)\n    * than the buffer's limit.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public DoubleBuffer put (int index, double value)\n+  public DoubleBuffer put (int index, double value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -152,7 +152,7 @@ final public DoubleBuffer put (int index, double value)\n     return this;\n   }\n   \n-  final public ByteOrder order ()\n+  public ByteOrder order ()\n   {\n     return ByteOrder.nativeOrder ();\n   }"}, {"sha": "7b04e4ca108e76e6d5385bcf2ea8dca4056ac24d", "filename": "libjava/java/nio/DoubleViewBufferImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -38,7 +38,7 @@\n \n package java.nio;\n \n-class DoubleViewBufferImpl extends DoubleBuffer\n+final class DoubleViewBufferImpl extends DoubleBuffer\n {\n   /** Position in bb (i.e. a byte offset) where this buffer starts. */\n   private int offset;"}, {"sha": "47479845da64639e09c0131df0d1cd2bb46e3623", "filename": "libjava/java/nio/FloatBufferImpl.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -100,7 +100,7 @@ public boolean isDirect ()\n   /**\n    * Relative get method. Reads the next <code>float</code> from the buffer.\n    */\n-  final public float get ()\n+  public float get ()\n   {\n     float result = backing_buffer [position ()];\n     position (position () + 1);\n@@ -113,7 +113,7 @@ final public float get ()\n    * \n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public FloatBuffer put (float value)\n+  public FloatBuffer put (float value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -130,7 +130,7 @@ final public FloatBuffer put (float value)\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n-  final public float get (int index)\n+  public float get (int index)\n   {\n     return backing_buffer [index];\n   }\n@@ -143,7 +143,7 @@ final public float get (int index)\n    * than the buffer's limit.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public FloatBuffer put (int index, float value)\n+  public FloatBuffer put (int index, float value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -152,7 +152,7 @@ final public FloatBuffer put (int index, float value)\n     return this;\n   }\n   \n-  final public ByteOrder order ()\n+  public ByteOrder order ()\n   {\n     return ByteOrder.nativeOrder ();\n   }"}, {"sha": "08c59097d37f6f2a1be7bbb4eb566d4bc1303ea3", "filename": "libjava/java/nio/FloatViewBufferImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -38,7 +38,7 @@\n \n package java.nio;\n \n-class FloatViewBufferImpl extends FloatBuffer\n+final class FloatViewBufferImpl extends FloatBuffer\n {\n   /** Position in bb (i.e. a byte offset) where this buffer starts. */\n   private int offset;"}, {"sha": "a491c1105c4880a2e61d029041c140eacc84aad8", "filename": "libjava/java/nio/IntBufferImpl.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FIntBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FIntBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -100,7 +100,7 @@ public boolean isDirect ()\n   /**\n    * Relative get method. Reads the next <code>int</code> from the buffer.\n    */\n-  final public int get ()\n+  public int get ()\n   {\n     int result = backing_buffer [position ()];\n     position (position () + 1);\n@@ -113,7 +113,7 @@ final public int get ()\n    * \n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public IntBuffer put (int value)\n+  public IntBuffer put (int value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -130,7 +130,7 @@ final public IntBuffer put (int value)\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n-  final public int get (int index)\n+  public int get (int index)\n   {\n     return backing_buffer [index];\n   }\n@@ -143,7 +143,7 @@ final public int get (int index)\n    * than the buffer's limit.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public IntBuffer put (int index, int value)\n+  public IntBuffer put (int index, int value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -152,7 +152,7 @@ final public IntBuffer put (int index, int value)\n     return this;\n   }\n   \n-  final public ByteOrder order ()\n+  public ByteOrder order ()\n   {\n     return ByteOrder.nativeOrder ();\n   }"}, {"sha": "074953793be5984101da3cd30a54316ca8bc7d39", "filename": "libjava/java/nio/IntViewBufferImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -38,7 +38,7 @@\n \n package java.nio;\n \n-class IntViewBufferImpl extends IntBuffer\n+final class IntViewBufferImpl extends IntBuffer\n {\n   /** Position in bb (i.e. a byte offset) where this buffer starts. */\n   private int offset;"}, {"sha": "88a9d8c54159145fd5ac1fe31a45946d91012181", "filename": "libjava/java/nio/LongBufferImpl.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FLongBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FLongBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -100,7 +100,7 @@ public boolean isDirect ()\n   /**\n    * Relative get method. Reads the next <code>long</code> from the buffer.\n    */\n-  final public long get ()\n+  public long get ()\n   {\n     long result = backing_buffer [position ()];\n     position (position () + 1);\n@@ -113,7 +113,7 @@ final public long get ()\n    * \n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public LongBuffer put (long value)\n+  public LongBuffer put (long value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -130,7 +130,7 @@ final public LongBuffer put (long value)\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n-  final public long get (int index)\n+  public long get (int index)\n   {\n     return backing_buffer [index];\n   }\n@@ -143,7 +143,7 @@ final public long get (int index)\n    * than the buffer's limit.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public LongBuffer put (int index, long value)\n+  public LongBuffer put (int index, long value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -152,7 +152,7 @@ final public LongBuffer put (int index, long value)\n     return this;\n   }\n   \n-  final public ByteOrder order ()\n+  public ByteOrder order ()\n   {\n     return ByteOrder.nativeOrder ();\n   }"}, {"sha": "d1dd060d3114cfe2501e0580830a40a694e552b1", "filename": "libjava/java/nio/LongViewBufferImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -38,7 +38,7 @@\n \n package java.nio;\n \n-class LongViewBufferImpl extends LongBuffer\n+final class LongViewBufferImpl extends LongBuffer\n {\n   /** Position in bb (i.e. a byte offset) where this buffer starts. */\n   private int offset;"}, {"sha": "ccd987edfbd7c6aa941cca34ad47cadb2a0a04df", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -39,10 +39,9 @@\n package java.nio;\n \n import java.io.IOException;\n-import gnu.java.nio.channels.FileChannelImpl;\n import gnu.gcj.RawData;\n \n-class MappedByteBufferImpl extends MappedByteBuffer\n+final class MappedByteBufferImpl extends MappedByteBuffer\n {\n   boolean readOnly;\n   RawData address;\n@@ -201,133 +200,133 @@ public DoubleBuffer asDoubleBuffer ()\n     return new DoubleViewBufferImpl (this, remaining() >> 3);\n   }\n \n-  final public char getChar ()\n+  public char getChar ()\n   {\n     return ByteBufferHelper.getChar(this, order());\n   }\n   \n-  final public ByteBuffer putChar (char value)\n+  public ByteBuffer putChar (char value)\n   {\n     ByteBufferHelper.putChar(this, value, order());\n     return this;\n   }\n   \n-  final public char getChar (int index)\n+  public char getChar (int index)\n   {\n     return ByteBufferHelper.getChar(this, index, order());\n   }\n   \n-  final public ByteBuffer putChar (int index, char value)\n+  public ByteBuffer putChar (int index, char value)\n   {\n     ByteBufferHelper.putChar(this, index, value, order());\n     return this;\n   }\n \n-  final public short getShort ()\n+  public short getShort ()\n   {\n     return ByteBufferHelper.getShort(this, order());\n   }\n   \n-  final public ByteBuffer putShort (short value)\n+  public ByteBuffer putShort (short value)\n   {\n     ByteBufferHelper.putShort(this, value, order());\n     return this;\n   }\n   \n-  final public short getShort (int index)\n+  public short getShort (int index)\n   {\n     return ByteBufferHelper.getShort(this, index, order());\n   }\n   \n-  final public ByteBuffer putShort (int index, short value)\n+  public ByteBuffer putShort (int index, short value)\n   {\n     ByteBufferHelper.putShort(this, index, value, order());\n     return this;\n   }\n \n-  final public int getInt ()\n+  public int getInt ()\n   {\n     return ByteBufferHelper.getInt(this, order());\n   }\n   \n-  final public ByteBuffer putInt (int value)\n+  public ByteBuffer putInt (int value)\n   {\n     ByteBufferHelper.putInt(this, value, order());\n     return this;\n   }\n   \n-  final public int getInt (int index)\n+  public int getInt (int index)\n   {\n     return ByteBufferHelper.getInt(this, index, order());\n   }\n   \n-  final public ByteBuffer putInt (int index, int value)\n+  public ByteBuffer putInt (int index, int value)\n   {\n     ByteBufferHelper.putInt(this, index, value, order());\n     return this;\n   }\n \n-  final public long getLong ()\n+  public long getLong ()\n   {\n     return ByteBufferHelper.getLong(this, order());\n   }\n   \n-  final public ByteBuffer putLong (long value)\n+  public ByteBuffer putLong (long value)\n   {\n     ByteBufferHelper.putLong (this, value, order());\n     return this;\n   }\n   \n-  final public long getLong (int index)\n+  public long getLong (int index)\n   {\n     return ByteBufferHelper.getLong (this, index, order());\n   }\n   \n-  final public ByteBuffer putLong (int index, long value)\n+  public ByteBuffer putLong (int index, long value)\n   {\n     ByteBufferHelper.putLong (this, index, value, order());\n     return this;\n   }\n \n-  final public float getFloat ()\n+  public float getFloat ()\n   {\n     return ByteBufferHelper.getFloat (this, order());\n   }\n   \n-  final public ByteBuffer putFloat (float value)\n+  public ByteBuffer putFloat (float value)\n   {\n     ByteBufferHelper.putFloat (this, value, order());\n     return this;\n   }\n   \n-  public final float getFloat (int index)\n+  public float getFloat (int index)\n   {\n     return ByteBufferHelper.getFloat (this, index, order());\n   }\n \n-  final public ByteBuffer putFloat (int index, float value)\n+  public ByteBuffer putFloat (int index, float value)\n   {\n     ByteBufferHelper.putFloat (this, index, value, order());\n     return this;\n   }\n \n-  final public double getDouble ()\n+  public double getDouble ()\n   {\n     return ByteBufferHelper.getDouble (this, order());\n   }\n \n-  final public ByteBuffer putDouble (double value)\n+  public ByteBuffer putDouble (double value)\n   {\n     ByteBufferHelper.putDouble (this, value, order());\n     return this;\n   }\n   \n-  final public double getDouble (int index)\n+  public double getDouble (int index)\n   {\n     return ByteBufferHelper.getDouble (this, index, order());\n   }\n   \n-  final public ByteBuffer putDouble (int index, double value)\n+  public ByteBuffer putDouble (int index, double value)\n   {\n     ByteBufferHelper.putDouble (this, index, value, order());\n     return this;"}, {"sha": "6871f096e9d2dd0d71b4233eeeea85ac48990326", "filename": "libjava/java/nio/ShortBufferImpl.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FShortBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FShortBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -100,7 +100,7 @@ public boolean isDirect ()\n   /**\n    * Relative get method. Reads the next <code>short</code> from the buffer.\n    */\n-  final public short get ()\n+  public short get ()\n   {\n     short result = backing_buffer [position ()];\n     position (position () + 1);\n@@ -113,7 +113,7 @@ final public short get ()\n    * \n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public ShortBuffer put (short value)\n+  public ShortBuffer put (short value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -130,7 +130,7 @@ final public ShortBuffer put (short value)\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n-  final public short get (int index)\n+  public short get (int index)\n   {\n     return backing_buffer [index];\n   }\n@@ -143,7 +143,7 @@ final public short get (int index)\n    * than the buffer's limit.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  final public ShortBuffer put (int index, short value)\n+  public ShortBuffer put (int index, short value)\n   {\n     if (readOnly)\n       throw new ReadOnlyBufferException ();\n@@ -152,7 +152,7 @@ final public ShortBuffer put (int index, short value)\n     return this;\n   }\n   \n-  final public ByteOrder order ()\n+  public ByteOrder order ()\n   {\n     return ByteOrder.nativeOrder ();\n   }"}, {"sha": "26aabad519c113c5e5e01b00f3e5d3ea70c06a52", "filename": "libjava/java/nio/ShortViewBufferImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c5d75719821940cc39591681aaec3c7fdc63ce/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java?ref=08c5d75719821940cc39591681aaec3c7fdc63ce", "patch": "@@ -38,7 +38,7 @@\n \n package java.nio;\n \n-class ShortViewBufferImpl extends ShortBuffer\n+final class ShortViewBufferImpl extends ShortBuffer\n {\n   /** Position in bb (i.e. a byte offset) where this buffer starts. */\n   private int offset;"}]}