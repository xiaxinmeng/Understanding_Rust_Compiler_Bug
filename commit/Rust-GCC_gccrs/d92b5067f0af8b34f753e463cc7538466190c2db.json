{"sha": "d92b5067f0af8b34f753e463cc7538466190c2db", "node_id": "C_kwDOANBUbNoAKGQ5MmI1MDY3ZjBhZjhiMzRmNzUzZTQ2M2NjNzUzODQ2NjE5MGMyZGI", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-13T20:59:57Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-14T08:35:06Z"}, "message": "Revert \"sphinx: port .def files to RST\"\n\nThis reverts commit c8874c5e8a7cee2933923c40f4933602da2022fb.", "tree": {"sha": "cb88907305d565f7fcef3695278aa9b598d517e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb88907305d565f7fcef3695278aa9b598d517e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d92b5067f0af8b34f753e463cc7538466190c2db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92b5067f0af8b34f753e463cc7538466190c2db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d92b5067f0af8b34f753e463cc7538466190c2db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92b5067f0af8b34f753e463cc7538466190c2db/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e070cff11f81051e70b613816075b66a6de61c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e070cff11f81051e70b613816075b66a6de61c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e070cff11f81051e70b613816075b66a6de61c2"}], "stats": {"total": 3393, "additions": 1692, "deletions": 1701}, "files": [{"sha": "141dcf307166479210561deadb717b160d8c0163", "filename": "gcc/c-family/c-target.def", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Fc-family%2Fc-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Fc-family%2Fc-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target.def?ref=d92b5067f0af8b34f753e463cc7538466190c2db", "patch": "@@ -48,53 +48,53 @@ and between C, C++ and their respective Objective-C dialects.\\n\\\n A string object might, for example, embed encoding and length information.\\n\\\n These objects are considered opaque to the compiler and handled as references.\\n\\\n An ideal implementation makes the composition of the string object\\n\\\n-match that of the Objective-C ``NSString`` (``NXString`` for GNUStep),\\n\\\n+match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep),\\n\\\n allowing efficient interworking between C-only and Objective-C code.\\n\\\n If a target implements string objects then this hook should return a\\n\\\n-reference to such an object constructed from the normal 'C' string\\n\\\n-representation provided in :samp:`{string}`.\\n\\\n+reference to such an object constructed from the normal `C' string\\n\\\n+representation provided in @var{string}.\\n\\\n At present, the hook is used by Objective-C only, to obtain a\\n\\\n-common-format string object when the target provides one.\",\n+ common-format string object when the target provides one.\",\n  tree, (tree string),\n  NULL)\n \n DEFHOOK\n (objc_declare_unresolved_class_reference,\n- \"Declare that Objective C class :samp:`{classname}` is referenced\\n\\\n+ \"Declare that Objective C class @var{classname} is referenced\\n\\\n by the current TU.\",\n  void, (const char *classname),\n  NULL)\n \n DEFHOOK\n (objc_declare_class_definition,\n- \"Declare that Objective C class :samp:`{classname}` is defined\\n\\\n+ \"Declare that Objective C class @var{classname} is defined\\n\\\n by the current TU.\",\n  void, (const char *classname),\n  NULL)\n \n DEFHOOK\n (string_object_ref_type_p,\n  \"If a target implements string objects then this hook should return\\n\\\n-``true`` if :samp:`{stringref}` is a valid reference to such an object.\",\n+@code{true} if @var{stringref} is a valid reference to such an object.\",\n  bool, (const_tree stringref),\n  hook_bool_const_tree_false)\n \n DEFHOOK\n (check_string_object_format_arg,\n  \"If a target implements string objects then this hook should\\n\\\n-provide a facility to check the function arguments in :samp:`{args_list}`\\n\\\n-against the format specifiers in :samp:`{format_arg}` where the type of\\n\\\n-:samp:`{format_arg}` is one recognized as a valid string reference type.\",\n+provide a facility to check the function arguments in @var{args_list}\\n\\\n+against the format specifiers in @var{format_arg} where the type of\\n\\\n+@var{format_arg} is one recognized as a valid string reference type.\",\n  void, (tree format_arg, tree args_list),\n  NULL)\n \n DEFHOOK\n (c_preinclude,\n  \"Define this hook to return the name of a header file to be included at\\n\\\n the start of all compilations, as if it had been included with\\n\\\n-``#include <file>``.  If this hook returns ``NULL``, or is\\n\\\n+@code{#include <@var{file}>}.  If this hook returns @code{NULL}, or is\\n\\\n not defined, or the header is not found, or if the user specifies\\n\\\n-:option:`-ffreestanding` or :option:`-nostdinc`, no header is included.\\n\\\n+@option{-ffreestanding} or @option{-nostdinc}, no header is included.\\n\\\n \\n\\\n This hook can be used together with a header provided by the system C\\n\\\n library to implement ISO C requirements for certain macros to be\\n\\"}, {"sha": "c4c6230073ab77991a9651697fc4cdf52c51862d", "filename": "gcc/common/common-target.def", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Fcommon%2Fcommon-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Fcommon%2Fcommon-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.def?ref=d92b5067f0af8b34f753e463cc7538466190c2db", "patch": "@@ -39,7 +39,7 @@ DEFHOOK\n \n DEFHOOK\n (option_init_struct,\n- \"Set target-dependent initial values of fields in :samp:`{opts}`.\",\n+\"Set target-dependent initial values of fields in @var{opts}.\",\n  void, (struct gcc_options *opts),\n  hook_void_gcc_optionsp)\n \n@@ -65,17 +65,17 @@ DEFHOOK\n DEFHOOK\n (supports_split_stack,\n  \"Whether this target supports splitting the stack when the options\\n\\\n-described in :samp:`{opts}` have been passed.  This is called\\n\\\n+described in @var{opts} have been passed.  This is called\\n\\\n after options have been parsed, so the target may reject splitting\\n\\\n the stack in some configurations.  The default version of this hook\\n\\\n-returns false.  If :samp:`{report}` is true, this function may issue a warning\\n\\\n-or error; if :samp:`{report}` is false, it must simply return a value\",\n+returns false.  If @var{report} is true, this function may issue a warning\\n\\\n+or error; if @var{report} is false, it must simply return a value\",\n  bool, (bool report, struct gcc_options *opts),\n  hook_bool_bool_gcc_optionsp_false)\n \n DEFHOOK\n (get_valid_option_values,\n- \"The hook is used for options that have a non-trivial list of\\n\\\n+\"The hook is used for options that have a non-trivial list of\\n\\\n possible option values.  OPTION_CODE is option code of opt_code\\n\\\n enum type.  PREFIX is used for bash completion and allows an implementation\\n\\\n to return more specific completion based on the prefix.  All string values\\n\\\n@@ -89,16 +89,16 @@ DEFHOOK\n  \"Some targets like RISC-V might have complicated multilib reuse rules which\\n\\\n are hard to implement with the current multilib scheme.  This hook allows\\n\\\n targets to override the result from the built-in multilib mechanism.\\n\\\n-:samp:`{switches}` is the raw option list with :samp:`{n_switches}` items;\\n\\\n-:samp:`{multilib_dir}` is the multi-lib result which is computed by the built-in\\n\\\n+@var{switches} is the raw option list with @var{n_switches} items;\\n\\\n+@var{multilib_dir} is the multi-lib result which is computed by the built-in\\n\\\n multi-lib mechanism;\\n\\\n-:samp:`{multilib_defaults}` is the default options list for multi-lib;\\n\\\n-:samp:`{multilib_select}` is the string containing the list of supported\\n\\\n+@var{multilib_defaults} is the default options list for multi-lib;\\n\\\n+@var{multilib_select} is the string containing the list of supported\\n\\\n multi-libs, and the option checking list.\\n\\\n-:samp:`{multilib_matches}`, :samp:`{multilib_exclusions}`, and :samp:`{multilib_reuse}`\\n\\\n-are corresponding to :samp:`{MULTILIB_MATCHES}`, :samp:`{MULTILIB_EXCLUSIONS}`,\\n\\\n-and :samp:`{MULTILIB_REUSE}`.\\n\\\n-The default definition does nothing but return :samp:`{multilib_dir}` directly.\",\n+@var{multilib_matches}, @var{multilib_exclusions}, and @var{multilib_reuse}\\n\\\n+are corresponding to @var{MULTILIB_MATCHES}, @var{MULTILIB_EXCLUSIONS},\\n\\\n+and @var{MULTILIB_REUSE}.\\n\\\n+The default definition does nothing but return @var{multilib_dir} directly.\",\n  const char *, (const struct switchstr *switches,\n \t\tint n_switches,\n \t\tconst char *multilib_dir,\n@@ -125,7 +125,7 @@ DEFHOOKPOD\n \n DEFHOOKPOD\n (always_strip_dotdot,\n- \"True if :samp:`..` components should always be removed from directory names\\n\\\n+ \"True if @file{..} components should always be removed from directory names\\n\\\n computed relative to GCC's internal directories, false (default) if such\\n\\\n components should be preserved and directory names containing them passed\\n\\\n to other tools such as the linker.\","}, {"sha": "7d999d0be0b168ad7c6d57393e283f78efbcd266", "filename": "gcc/d/d-target.def", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Fd%2Fd-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Fd%2Fd-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.def?ref=d92b5067f0af8b34f753e463cc7538466190c2db", "patch": "@@ -32,7 +32,7 @@ HOOK_VECTOR (TARGETDM_INITIALIZER, gcc_targetdm)\n DEFHOOK\n (d_cpu_versions,\n  \"Declare all environmental version identifiers relating to the target CPU\\n\\\n-using the function ``builtin_version``, which takes a string representing\\n\\\n+using the function @code{builtin_version}, which takes a string representing\\n\\\n the name of the version.  Version identifiers predefined by this hook apply\\n\\\n to all modules that are being compiled and imported.\",\n  void, (void),\n@@ -41,7 +41,7 @@ to all modules that are being compiled and imported.\",\n /* Environmental version identifiers relating to the target OS.  */\n DEFHOOK\n (d_os_versions,\n- \"Similarly to ``TARGET_D_CPU_VERSIONS``, but is used for versions\\n\\\n+ \"Similarly to @code{TARGET_D_CPU_VERSIONS}, but is used for versions\\n\\\n relating to the target operating system.\",\n  void, (void),\n  hook_void_void)\n@@ -50,18 +50,18 @@ relating to the target operating system.\",\n DEFHOOK\n (d_register_cpu_target_info,\n  \"Register all target information keys relating to the target CPU using the\\n\\\n-function ``d_add_target_info_handlers``, which takes a\\n\\\n-:samp:`struct d_target_info_spec` (defined in :samp:`d/d-target.h`).  The keys\\n\\\n+function @code{d_add_target_info_handlers}, which takes a\\n\\\n+@samp{struct d_target_info_spec} (defined in @file{d/d-target.h}).  The keys\\n\\\n added by this hook are made available at compile time by the\\n\\\n-``__traits(getTargetInfo)`` extension, the result is an expression\\n\\\n+@code{__traits(getTargetInfo)} extension, the result is an expression\\n\\\n describing the requested target information.\",\n  void, (void),\n  hook_void_void)\n \n /* getTargetInfo keys relating to the target OS.  */\n DEFHOOK\n (d_register_os_target_info,\n- \"Same as ``TARGET_D_CPU_TARGET_INFO``, but is used for keys relating to\\n\\\n+ \"Same as @code{TARGET_D_CPU_TARGET_INFO}, but is used for keys relating to\\n\\\n the target operating system.\",\n  void, (void),\n  hook_void_void)\n@@ -71,25 +71,25 @@ DEFHOOKPOD\n (d_minfo_section,\n  \"Contains the name of the section in which module info references should be\\n\\\n placed.  By default, the compiler puts all module info symbols in the\\n\\\n-``\\\"minfo\\\"`` section.  Define this macro to override the string if a\\n\\\n+@code{\\\"minfo\\\"} section.  Define this macro to override the string if a\\n\\\n different section name should be used.  This section is expected to be\\n\\\n-bracketed by two symbols ``TARGET_D_MINFO_SECTION_START`` and \\n\\\n-``TARGET_D_MINFO_SECTION_END`` to indicate the start and end address of\\n\\\n+bracketed by two symbols @code{TARGET_D_MINFO_SECTION_START} and \\n\\\n+@code{TARGET_D_MINFO_SECTION_END} to indicate the start and end address of\\n\\\n the section, so that the runtime library can collect all modules for each\\n\\\n-loaded shared library and executable.  Setting the value to ``NULL``\\n\\\n+loaded shared library and executable.  Setting the value to @code{NULL}\\n\\\n disables the use of sections for storing module info altogether.\",\n  const char *, \"minfo\")\n \n DEFHOOKPOD\n (d_minfo_section_start,\n- \"If ``TARGET_D_MINFO_SECTION`` is defined, then this must also be defined\\n\\\n+ \"If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\\n\\\n as the name of the symbol indicating the start address of the module info\\n\\\n section\",\n  const char *, \"__start_minfo\")\n \n DEFHOOKPOD\n (d_minfo_section_end,\n- \"If ``TARGET_D_MINFO_SECTION`` is defined, then this must also be defined\\n\\\n+ \"If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\\n\\\n as the name of the symbol indicating the end address of the module info\\n\\\n section\",\n  const char *, \"__stop_minfo\")\n@@ -99,11 +99,11 @@ section\",\n    on declarations with `extern(System)' and `extern(Windows)' linkage.  */\n DEFHOOK\n (d_has_stdcall_convention,\n- \"Returns ``true`` if the target supports the stdcall calling convention.\\n\\\n-The hook should also set :samp:`{link_system}` to ``1`` if the ``stdcall``\\n\\\n-attribute should be applied to functions with ``extern(System)`` linkage,\\n\\\n-and :samp:`{link_windows}` to ``1`` to apply ``stdcall`` to functions with\\n\\\n-``extern(Windows)`` linkage.\",\n+ \"Returns @code{true} if the target supports the stdcall calling convention.\\n\\\n+The hook should also set @var{link_system} to @code{1} if the @code{stdcall}\\n\\\n+attribute should be applied to functions with @code{extern(System)} linkage,\\n\\\n+and @var{link_windows} to @code{1} to apply @code{stdcall} to functions with\\n\\\n+@code{extern(Windows)} linkage.\",\n  bool, (unsigned int *link_system, unsigned int *link_windows),\n  hook_bool_uintp_uintp_false)\n \n@@ -112,7 +112,7 @@ DEFHOOKPOD\n (d_templates_always_comdat,\n  \"This flag is true if instantiated functions and variables are always COMDAT\\n\\\n if they have external linkage.  If this flag is false, then instantiated\\n\\\n-decls will be emitted as weak symbols.  The default is ``false``.\",\n+decls will be emitted as weak symbols.  The default is @code{false}.\",\n  bool, false)\n \n /* Close the 'struct gcc_targetdm' definition.  */"}, {"sha": "25f94c19fa710a541c2aa3a0a5a5f912dd17ab25", "filename": "gcc/target.def", "status": "modified", "additions": 1648, "deletions": 1657, "changes": 3305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92b5067f0af8b34f753e463cc7538466190c2db/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=d92b5067f0af8b34f753e463cc7538466190c2db"}]}