{"sha": "43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhZTIwNmNmOTA5NGVmOTEzYzNkOTFlMWEwYmU2YjNmMDdjOTVkMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-10-25T05:47:25Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-10-25T05:47:25Z"}, "message": "re PR other/33426 (Support of #pragma ivdep)\n\n2013-10-25  Tobias Burnus  <burnus@net-b.de>\n\n        PR other/33426\n        * parser.c (cp_parser_iteration_statement,\n        cp_parser_for, cp_parser_c_for, cp_parser_pragma): Handle\n        IVDEP pragma.\n\n        * g++.dg/parse/ivdep.C: New.\n        * g++.dg/vect/pr33426-ivdep.cc: New.\n\nFrom-SVN: r204047", "tree": {"sha": "2dfd498e60f6012ab79e9d79b5c6a76ae0ba193e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dfd498e60f6012ab79e9d79b5c6a76ae0ba193e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66d6cbaa5612d12933f42472a2ee93de920fb1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d6cbaa5612d12933f42472a2ee93de920fb1d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d6cbaa5612d12933f42472a2ee93de920fb1d2"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "dfe4a3f8f5b6b1496b519b3fd33c4b988c4b452e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "patch": "@@ -1,3 +1,10 @@\n+2013-10-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* parser.c (cp_parser_iteration_statement,\n+\tcp_parser_for, cp_parser_c_for, cp_parser_pragma): Handle\n+\tIVDEP pragma.\n+\n 2013-10-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/58705"}, {"sha": "8deffc35df28014f856449d4121f1091a9f638ab", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "patch": "@@ -1970,13 +1970,13 @@ static tree cp_parser_selection_statement\n static tree cp_parser_condition\n   (cp_parser *);\n static tree cp_parser_iteration_statement\n-  (cp_parser *);\n+  (cp_parser *, bool);\n static bool cp_parser_for_init_statement\n   (cp_parser *, tree *decl);\n static tree cp_parser_for\n-  (cp_parser *);\n+  (cp_parser *, bool);\n static tree cp_parser_c_for\n-  (cp_parser *, tree, tree);\n+  (cp_parser *, tree, tree, bool);\n static tree cp_parser_range_for\n   (cp_parser *, tree, tree, tree);\n static void do_range_for_auto_deduction\n@@ -9231,7 +9231,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \tcase RID_WHILE:\n \tcase RID_DO:\n \tcase RID_FOR:\n-\t  statement = cp_parser_iteration_statement (parser);\n+\t  statement = cp_parser_iteration_statement (parser, false);\n \t  break;\n \n \tcase RID_BREAK:\n@@ -9892,7 +9892,7 @@ cp_parser_condition (cp_parser* parser)\n    not included. */\n \n static tree\n-cp_parser_for (cp_parser *parser)\n+cp_parser_for (cp_parser *parser, bool ivdep)\n {\n   tree init, scope, decl;\n   bool is_range_for;\n@@ -9906,11 +9906,11 @@ cp_parser_for (cp_parser *parser)\n   if (is_range_for)\n     return cp_parser_range_for (parser, scope, init, decl);\n   else\n-    return cp_parser_c_for (parser, scope, init);\n+    return cp_parser_c_for (parser, scope, init, ivdep);\n }\n \n static tree\n-cp_parser_c_for (cp_parser *parser, tree scope, tree init)\n+cp_parser_c_for (cp_parser *parser, tree scope, tree init, bool ivdep)\n {\n   /* Normal for loop */\n   tree condition = NULL_TREE;\n@@ -9924,7 +9924,19 @@ cp_parser_c_for (cp_parser *parser, tree scope, tree init)\n \n   /* If there's a condition, process it.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n-    condition = cp_parser_condition (parser);\n+    {\n+      condition = cp_parser_condition (parser);\n+      if (ivdep)\n+\tcondition = build2 (ANNOTATE_EXPR, TREE_TYPE (condition), condition,\n+\t\t\t    build_int_cst (integer_type_node,\n+\t\t\t\t\t   annot_expr_ivdep_kind));\n+    }\n+  else if (ivdep)\n+    {\n+      cp_parser_error (parser, \"missing loop condition in loop with \"\n+\t\t       \"%<GCC ivdep%> pragma\");\n+      condition = error_mark_node;\n+    }\n   finish_for_cond (condition, stmt);\n   /* Look for the `;'.  */\n   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n@@ -10287,7 +10299,7 @@ cp_parser_range_for_member_function (tree range, tree identifier)\n    Returns the new WHILE_STMT, DO_STMT, FOR_STMT or RANGE_FOR_STMT.  */\n \n static tree\n-cp_parser_iteration_statement (cp_parser* parser)\n+cp_parser_iteration_statement (cp_parser* parser, bool ivdep)\n {\n   cp_token *token;\n   enum rid keyword;\n@@ -10360,7 +10372,7 @@ cp_parser_iteration_statement (cp_parser* parser)\n \t/* Look for the `('.  */\n \tcp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);\n \n-\tstatement = cp_parser_for (parser);\n+\tstatement = cp_parser_for (parser, ivdep);\n \n \t/* Look for the `)'.  */\n \tcp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n@@ -30909,6 +30921,20 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context)\n \t\t\"%<#pragma omp sections%> construct\");\n       break;\n \n+    case PRAGMA_IVDEP:\n+      {\n+\tcp_parser_skip_to_pragma_eol (parser, pragma_tok);\n+\tcp_token *tok;\n+\ttok = cp_lexer_peek_token (the_parser->lexer);\n+\tif (tok->type != CPP_KEYWORD || tok->keyword != RID_FOR)\n+\t  {\n+\t    cp_parser_error (parser, \"for statement expected\");\n+\t    return false;\n+\t  }\n+\tcp_parser_iteration_statement (parser, true);\n+\treturn true;\n+      }\n+\n     default:\n       gcc_assert (id >= PRAGMA_FIRST_EXTERNAL);\n       c_invoke_pragma_handler (id);"}, {"sha": "6ffba19f2d32ac2f66214df3df049da22511735a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "patch": "@@ -1,3 +1,8 @@\n+2013-10-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* g++.dg/parse/ivdep.C: New.\n+\t* g++.dg/vect/pr33426-ivdep.cc: New.\n+\n 2013-10-24  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl/58542"}, {"sha": "23d51de9fe3d13d0c45e556b0347793bf8a02265", "filename": "gcc/testsuite/g++.dg/parse/ivdep.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fivdep.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fivdep.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fivdep.C?ref=43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+/* PR other/33426 */\n+\n+void foo(int n, int *a, int *b, int *c, int *d, int *e) {\n+  int i, j;\n+#pragma GCC ivdep\n+  for (i = 0; ; ++i) { /* { dg-error \"missing loop condition in loop with 'GCC ivdep' pragma before ';' token\" } */\n+    a[i] = b[i] + c[i];\n+  }\n+}"}, {"sha": "7f867c60e2221c51313447bfefd3ef9997978e39", "filename": "gcc/testsuite/g++.dg/vect/pr33426-ivdep.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep.cc?ref=43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-options \"-O3 -fopt-info-vec-optimized\" } */\n+\n+/* PR other/33426 */\n+/* Testing whether #pragma ivdep is working.  */\n+\n+void foo(int n, int *a, int *b, int *c, int *d, int *e) {\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i) {\n+    a[i] = b[i] + c[i];\n+  }\n+}\n+\n+/* { dg-message \"loop vectorized\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \"version\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \"alias\" \"\" { target *-*-* } 0 } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}