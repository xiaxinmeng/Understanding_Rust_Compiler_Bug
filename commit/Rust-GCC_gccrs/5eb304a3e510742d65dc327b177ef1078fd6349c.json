{"sha": "5eb304a3e510742d65dc327b177ef1078fd6349c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViMzA0YTNlNTEwNzQyZDY1ZGMzMjdiMTc3ZWYxMDc4ZmQ2MzQ5Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-08-13T09:18:40Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-08-13T13:43:36Z"}, "message": "opts: do not repeat a string in errors\n\ngcc/ChangeLog:\n\n\t* opts.c (LIVE_PATCHING_OPTION): Define.\n\t(control_options_for_live_patching): Use it in error messages.", "tree": {"sha": "cc08838c6323374d49d5418fb625731e7e76ddab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc08838c6323374d49d5418fb625731e7e76ddab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eb304a3e510742d65dc327b177ef1078fd6349c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb304a3e510742d65dc327b177ef1078fd6349c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb304a3e510742d65dc327b177ef1078fd6349c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb304a3e510742d65dc327b177ef1078fd6349c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4341b1b165751e728692eec12405fc04b2c681aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4341b1b165751e728692eec12405fc04b2c681aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4341b1b165751e728692eec12405fc04b2c681aa"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "e0501551ef5ada7ce33444d443113f62eef01704", "filename": "gcc/opts.c", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb304a3e510742d65dc327b177ef1078fd6349c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb304a3e510742d65dc327b177ef1078fd6349c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5eb304a3e510742d65dc327b177ef1078fd6349c", "patch": "@@ -806,37 +806,39 @@ control_options_for_live_patching (struct gcc_options *opts,\n   switch (level)\n     {\n     case LIVE_PATCHING_INLINE_ONLY_STATIC:\n+#define LIVE_PATCHING_OPTION \"-flive-patching=inline-only-static\"\n       if (opts_set->x_flag_ipa_cp_clone && opts->x_flag_ipa_cp_clone)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-cp-clone\", \"-flive-patching=inline-only-static\");\n+\t\t  \"-fipa-cp-clone\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_cp_clone = 0;\n \n       if (opts_set->x_flag_ipa_sra && opts->x_flag_ipa_sra)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-sra\", \"-flive-patching=inline-only-static\");\n+\t\t  \"-fipa-sra\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_sra = 0;\n \n       if (opts_set->x_flag_partial_inlining && opts->x_flag_partial_inlining)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fpartial-inlining\", \"-flive-patching=inline-only-static\");\n+\t\t  \"-fpartial-inlining\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_partial_inlining = 0;\n \n       if (opts_set->x_flag_ipa_cp && opts->x_flag_ipa_cp)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-cp\", \"-flive-patching=inline-only-static\");\n+\t\t  \"-fipa-cp\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_cp = 0;\n \n       /* FALLTHROUGH.  */\n     case LIVE_PATCHING_INLINE_CLONE:\n+#undef LIVE_PATCHING_OPTION\n+#define LIVE_PATCHING_OPTION \"-flive-patching=inline-only-static|inline-clone\"\n       /* live patching should disable whole-program optimization.  */\n       if (opts_set->x_flag_whole_program && opts->x_flag_whole_program)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fwhole-program\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fwhole-program\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_whole_program = 0;\n \n@@ -846,71 +848,62 @@ control_options_for_live_patching (struct gcc_options *opts,\n \n       if (opts_set->x_flag_ipa_pta && opts->x_flag_ipa_pta)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-pta\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-pta\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_pta = 0;\n \n       if (opts_set->x_flag_ipa_reference && opts->x_flag_ipa_reference)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-reference\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-reference\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_reference = 0;\n \n       if (opts_set->x_flag_ipa_ra && opts->x_flag_ipa_ra)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-ra\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-ra\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_ra = 0;\n \n       if (opts_set->x_flag_ipa_icf && opts->x_flag_ipa_icf)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-icf\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-icf\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_icf = 0;\n \n       if (opts_set->x_flag_ipa_icf_functions && opts->x_flag_ipa_icf_functions)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-icf-functions\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-icf-functions\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_icf_functions = 0;\n \n       if (opts_set->x_flag_ipa_icf_variables && opts->x_flag_ipa_icf_variables)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-icf-variables\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-icf-variables\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_icf_variables = 0;\n \n       if (opts_set->x_flag_ipa_bit_cp && opts->x_flag_ipa_bit_cp)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-bit-cp\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-bit-cp\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_bit_cp = 0;\n \n       if (opts_set->x_flag_ipa_vrp && opts->x_flag_ipa_vrp)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-vrp\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-vrp\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_vrp = 0;\n \n       if (opts_set->x_flag_ipa_pure_const && opts->x_flag_ipa_pure_const)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-pure-const\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-pure-const\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_pure_const = 0;\n \n       if (opts_set->x_flag_ipa_modref && opts->x_flag_ipa_modref)\n \terror_at (loc,\n-\t\t  \"%<-fipa-modref%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\t\t  \"%<-fipa-modref%> is incompatible with %qs\",\n+\t\t  LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_modref = 0;\n \n@@ -920,23 +913,23 @@ control_options_for_live_patching (struct gcc_options *opts,\n       if (opts_set->x_flag_ipa_reference_addressable\n \t  && opts->x_flag_ipa_reference_addressable)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-reference-addressable\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-reference-addressable\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_reference_addressable = 0;\n \n       /* ipa stack alignment propagation.  */\n       if (opts_set->x_flag_ipa_stack_alignment\n \t  && opts->x_flag_ipa_stack_alignment)\n \terror_at (loc, \"%qs is incompatible with %qs\",\n-\t\t  \"-fipa-stack-alignment\",\n-\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n+\t\t  \"-fipa-stack-alignment\", LIVE_PATCHING_OPTION);\n       else\n \topts->x_flag_ipa_stack_alignment = 0;\n       break;\n     default:\n       gcc_unreachable ();\n     }\n+\n+#undef LIVE_PATCHING_OPTION\n }\n \n /* --help option argument if set.  */"}]}