{"sha": "52cc571b308d3d0103dd498fd277859e2116791a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjYzU3MWIzMDhkM2QwMTAzZGQ0OThmZDI3Nzg1OWUyMTE2NzkxYQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-14T07:41:48Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-14T07:41:48Z"}, "message": "Prevented several warnings about unused parameters", "tree": {"sha": "46eb33355b3d0351d4743d19d1d5c46ae9d5677c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46eb33355b3d0351d4743d19d1d5c46ae9d5677c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52cc571b308d3d0103dd498fd277859e2116791a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cc571b308d3d0103dd498fd277859e2116791a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52cc571b308d3d0103dd498fd277859e2116791a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cc571b308d3d0103dd498fd277859e2116791a/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "296916261846a9eaab03335d5e12a31271f2cf76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296916261846a9eaab03335d5e12a31271f2cf76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296916261846a9eaab03335d5e12a31271f2cf76"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "f86aa54e2575687c6ce473ffdde91631ccb7353f", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cc571b308d3d0103dd498fd277859e2116791a/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cc571b308d3d0103dd498fd277859e2116791a/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=52cc571b308d3d0103dd498fd277859e2116791a", "patch": "@@ -1972,7 +1972,7 @@ class EnumExprFieldIdentifier : public EnumExprField\n   Location locus;\n \n public:\n-  EnumExprFieldIdentifier (Identifier field_identifier)\n+  EnumExprFieldIdentifier (Identifier field_identifier, Location locus)\n     : field_name (std::move (field_identifier)), locus (locus)\n   {}\n "}, {"sha": "79e74ace40c9be0600cc15792f13c86be6f40211", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cc571b308d3d0103dd498fd277859e2116791a/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cc571b308d3d0103dd498fd277859e2116791a/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=52cc571b308d3d0103dd498fd277859e2116791a", "patch": "@@ -246,15 +246,15 @@ class AttrVisitor : public AST::ASTVisitor\n       expand_where_clause (decl.get_where_clause ());\n   }\n \n-  void visit (AST::Token &tok) override\n+  void visit (AST::Token &) override\n   {\n     // shouldn't require?\n   }\n-  void visit (AST::DelimTokenTree &delim_tok_tree) override\n+  void visit (AST::DelimTokenTree &) override\n   {\n     // shouldn't require?\n   }\n-  void visit (AST::AttrInputMetaItemContainer &input) override\n+  void visit (AST::AttrInputMetaItemContainer &) override\n   {\n     // shouldn't require?\n   }\n@@ -268,11 +268,11 @@ class AttrVisitor : public AST::ASTVisitor\n \treturn;\n       }\n   }\n-  void visit (AST::Lifetime &lifetime) override\n+  void visit (AST::Lifetime &) override\n   {\n     // shouldn't require?\n   }\n-  void visit (AST::LifetimeParam &lifetime_param) override\n+  void visit (AST::LifetimeParam &) override\n   {\n     // supposedly does not require - cfg does nothing\n   }\n@@ -309,7 +309,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t  expand_generic_args (segment.get_generic_args ());\n       }\n   }\n-  void visit (AST::TypePathSegment &segment) override\n+  void visit (AST::TypePathSegment &) override\n   {\n     // shouldn't require\n   }\n@@ -386,15 +386,15 @@ class AttrVisitor : public AST::ASTVisitor\n \treturn;\n       }\n   }\n-  void visit (AST::AttrInputLiteral &attr_input) override\n+  void visit (AST::AttrInputLiteral &) override\n   {\n     // shouldn't require?\n   }\n-  void visit (AST::MetaItemLitExpr &meta_item) override\n+  void visit (AST::MetaItemLitExpr &) override\n   {\n     // shouldn't require?\n   }\n-  void visit (AST::MetaItemPathLit &meta_item) override\n+  void visit (AST::MetaItemPathLit &) override\n   {\n     // shouldn't require?\n   }\n@@ -823,7 +823,7 @@ class AttrVisitor : public AST::ASTVisitor\n       rust_error_at (struct_name.get_locus (),\n \t\t     \"cannot strip path in this position\");\n   }\n-  void visit (AST::StructExprFieldIdentifier &field) override\n+  void visit (AST::StructExprFieldIdentifier &) override\n   {\n     // as no attrs (at moment, at least), no stripping possible\n   }\n@@ -992,7 +992,7 @@ class AttrVisitor : public AST::ASTVisitor\n       rust_error_at (struct_name.get_locus (),\n \t\t     \"cannot strip path in this position\");\n   }\n-  void visit (AST::EnumExprFieldIdentifier &field) override\n+  void visit (AST::EnumExprFieldIdentifier &) override\n   {\n     // as no attrs (at moment, at least), no stripping possible\n   }\n@@ -1375,7 +1375,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n-  void visit (AST::RangeFullExpr &expr) override\n+  void visit (AST::RangeFullExpr &) override\n   {\n     // outer attributes never allowed before these, so no stripping\n   }\n@@ -2001,7 +2001,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t\t\t \"cannot strip type in this position\");\n       }\n   }\n-  void visit (AST::LifetimeWhereClauseItem &item) override\n+  void visit (AST::LifetimeWhereClauseItem &) override\n   {\n     // shouldn't require\n   }\n@@ -2117,15 +2117,15 @@ class AttrVisitor : public AST::ASTVisitor\n \treturn;\n       }\n   }\n-  void visit (AST::UseTreeGlob &use_tree) override\n+  void visit (AST::UseTreeGlob &) override\n   {\n     // shouldn't require?\n   }\n-  void visit (AST::UseTreeList &use_tree) override\n+  void visit (AST::UseTreeList &) override\n   {\n     // shouldn't require?\n   }\n-  void visit (AST::UseTreeRebind &use_tree) override\n+  void visit (AST::UseTreeRebind &) override\n   {\n     // shouldn't require?\n   }\n@@ -2760,9 +2760,9 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n \n   // I don't think it would be possible to strip macros without expansion\n-  void visit (AST::MacroMatchFragment &match) override {}\n-  void visit (AST::MacroMatchRepetition &match) override {}\n-  void visit (AST::MacroMatcher &matcher) override {}\n+  void visit (AST::MacroMatchFragment &) override {}\n+  void visit (AST::MacroMatchRepetition &) override {}\n+  void visit (AST::MacroMatcher &) override {}\n   void visit (AST::MacroRulesDefinition &rules_def) override\n   {\n     // initial strip test based on outer attrs\n@@ -2789,14 +2789,14 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // TODO: maybe have stripping behaviour for the cfg! macro here?\n   }\n-  void visit (AST::MetaItemPath &meta_item) override {}\n-  void visit (AST::MetaItemSeq &meta_item) override {}\n-  void visit (AST::MetaWord &meta_item) override {}\n-  void visit (AST::MetaNameValueStr &meta_item) override {}\n-  void visit (AST::MetaListPaths &meta_item) override {}\n-  void visit (AST::MetaListNameValueStr &meta_item) override {}\n+  void visit (AST::MetaItemPath &) override {}\n+  void visit (AST::MetaItemSeq &) override {}\n+  void visit (AST::MetaWord &) override {}\n+  void visit (AST::MetaNameValueStr &) override {}\n+  void visit (AST::MetaListPaths &) override {}\n+  void visit (AST::MetaListNameValueStr &) override {}\n \n-  void visit (AST::LiteralPattern &pattern) override\n+  void visit (AST::LiteralPattern &) override\n   {\n     // not possible\n   }\n@@ -2812,11 +2812,11 @@ class AttrVisitor : public AST::ASTVisitor\n       rust_error_at (sub_pattern->get_locus_slow (),\n \t\t     \"cannot strip pattern in this position\");\n   }\n-  void visit (AST::WildcardPattern &pattern) override\n+  void visit (AST::WildcardPattern &) override\n   {\n     // not possible\n   }\n-  void visit (AST::RangePatternBoundLiteral &bound) override\n+  void visit (AST::RangePatternBoundLiteral &) override\n   {\n     // not possible\n   }\n@@ -3042,7 +3042,7 @@ class AttrVisitor : public AST::ASTVisitor\n       }\n   }\n \n-  void visit (AST::EmptyStmt &stmt) override\n+  void visit (AST::EmptyStmt &) override\n   {\n     // assuming no outer attributes, so nothing can happen\n   }\n@@ -3175,7 +3175,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t\t\t \"cannot strip type in this position\");\n       }\n   }\n-  void visit (AST::NeverType &type) override\n+  void visit (AST::NeverType &) override\n   {\n     // no stripping possible\n   }\n@@ -3222,7 +3222,7 @@ class AttrVisitor : public AST::ASTVisitor\n       rust_error_at (elem_type->get_locus_slow (),\n \t\t     \"cannot strip type in this position\");\n   }\n-  void visit (AST::InferredType &type) override\n+  void visit (AST::InferredType &) override\n   {\n     // none possible\n   }"}, {"sha": "a0c1a07656b9580790f22c0c4ff1f9c1151b6253", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cc571b308d3d0103dd498fd277859e2116791a/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cc571b308d3d0103dd498fd277859e2116791a/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=52cc571b308d3d0103dd498fd277859e2116791a", "patch": "@@ -15,7 +15,7 @@ class MacroInvocation;\n struct ExpansionCfg\n {\n   // features?\n-  unsigned int recursion_limit; // TODO: determine default recursion limit\n+  unsigned int recursion_limit = 50; // TODO: determine default recursion limit\n \t\t\t\t// trace macros?\n \t\t\t\t// should test?\n \t\t\t\t// more default stuff?"}]}