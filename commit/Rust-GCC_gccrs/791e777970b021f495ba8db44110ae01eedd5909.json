{"sha": "791e777970b021f495ba8db44110ae01eedd5909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkxZTc3Nzk3MGIwMjFmNDk1YmE4ZGI0NDExMGFlMDFlZWRkNTkwOQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-20T00:14:36Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-20T00:14:36Z"}, "message": "rs6000: Delete the \"wH\" and \"wI\" constraints\n\nThis replaces \"wH\" by \"v\", \"wI\" by \"d\", and when both are allowed it\nuses \"wa\"; all with isa \"p8v\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wH\"):\n\tDelete.\n\t(define_register_constraint \"wI\"): Delete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wH and RS6000_CONSTRAINT_wI.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wH\" and \"wI\" constraints by \"v\"\n\tresp. \"d\", or with \"wa\" as appropriate, all with \"p8v\".\n\t* config/rs6000/vsx.md: Ditto.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271390", "tree": {"sha": "3b4db168ade6697157637db57768760e141d845d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b4db168ade6697157637db57768760e141d845d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/791e777970b021f495ba8db44110ae01eedd5909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791e777970b021f495ba8db44110ae01eedd5909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791e777970b021f495ba8db44110ae01eedd5909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791e777970b021f495ba8db44110ae01eedd5909/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8509e17091254d25b7dfe4c83a79331bd08f7dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8509e17091254d25b7dfe4c83a79331bd08f7dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8509e17091254d25b7dfe4c83a79331bd08f7dae"}], "stats": {"total": 180, "additions": 84, "deletions": 96}, "files": [{"sha": "0686c206b621fe1a1e2d7e794eab412355d51afc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791e777970b021f495ba8db44110ae01eedd5909/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791e777970b021f495ba8db44110ae01eedd5909/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=791e777970b021f495ba8db44110ae01eedd5909", "patch": "@@ -1,3 +1,17 @@\n+2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wH\"):\n+\tDelete.\n+\t(define_register_constraint \"wI\"): Delete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wH and RS6000_CONSTRAINT_wI.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wH\" and \"wI\" constraints by \"v\"\n+\tresp. \"d\", or with \"wa\" as appropriate, all with \"p8v\".\n+\t* config/rs6000/vsx.md: Ditto.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wy\"):"}, {"sha": "dbcf08cfe85e7f66292485a9040dedb4bc991b7c", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=791e777970b021f495ba8db44110ae01eedd5909", "patch": "@@ -145,12 +145,6 @@\n   \"Memory operand suitable for power8 GPR load fusion\"\n   (match_operand 0 \"fusion_addis_mem_combo_load\"))\n \n-(define_register_constraint \"wH\" \"rs6000_constraints[RS6000_CONSTRAINT_wH]\"\n-  \"Altivec register to hold 32-bit integers or NO_REGS.\")\n-\n-(define_register_constraint \"wI\" \"rs6000_constraints[RS6000_CONSTRAINT_wI]\"\n-  \"FPR register to hold 32-bit integers or NO_REGS.\")\n-\n (define_constraint \"wL\"\n   \"Int constant that is the element number mfvsrld accesses in a vector.\"\n   (and (match_code \"const_int\")"}, {"sha": "b5dc5f30f8806e0c5720d5b228a263683fb2daf1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=791e777970b021f495ba8db44110ae01eedd5909", "patch": "@@ -2528,8 +2528,6 @@ rs6000_debug_reg_global (void)\n \t   \"wx reg_class = %s\\n\"\n \t   \"wz reg_class = %s\\n\"\n \t   \"wA reg_class = %s\\n\"\n-\t   \"wH reg_class = %s\\n\"\n-\t   \"wI reg_class = %s\\n\"\n \t   \"\\n\",\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_d]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_f]],\n@@ -2554,9 +2552,7 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ww]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wz]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wH]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wI]]);\n+\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]]);\n \n   nl = \"\\n\";\n   for (m = 0; m < NUM_MACHINE_MODES; ++m)\n@@ -3180,9 +3176,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twv - Altivec register for ISA 2.06 VSX DF/DI load/stores.\n \tww - Register class to do SF conversions in with VSX operations.\n \twx - Float register if we can do 32-bit int stores.\n-\twz - Float register if we can do 32-bit unsigned int loads.\n-\twH - Altivec register if SImode is allowed in VSX registers.\n-\twI - Float register if SImode is allowed in VSX registers.  */\n+\twz - Float register if we can do 32-bit unsigned int loads.  */\n \n   if (TARGET_HARD_FLOAT)\n     {\n@@ -3250,13 +3244,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   if (TARGET_DIRECT_MOVE_128)\n     rs6000_constraints[RS6000_CONSTRAINT_we] = VSX_REGS;\n \n-  /* Support small integers in VSX registers.  */\n-  if (TARGET_P8_VECTOR)\n-    {\n-      rs6000_constraints[RS6000_CONSTRAINT_wH] = ALTIVEC_REGS;\n-      rs6000_constraints[RS6000_CONSTRAINT_wI] = FLOAT_REGS;\n-    }\n-\n   /* Set up the reload helper and direct move functions.  */\n   if (TARGET_VSX || TARGET_ALTIVEC)\n     {"}, {"sha": "eaf309b45b7174bbd045fbd52dd165978b3be55a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=791e777970b021f495ba8db44110ae01eedd5909", "patch": "@@ -1269,8 +1269,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */\n   RS6000_CONSTRAINT_wz,\t\t/* FPR register for LFIWZX */\n   RS6000_CONSTRAINT_wA,\t\t/* BASE_REGS if 64-bit.  */\n-  RS6000_CONSTRAINT_wH,\t\t/* Altivec register for 32-bit integers.  */\n-  RS6000_CONSTRAINT_wI,\t\t/* VSX register for 32-bit integers.  */\n   RS6000_CONSTRAINT_MAX\n };\n "}, {"sha": "b2bba5d004c322b286acf88d751abf67b9305470", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=791e777970b021f495ba8db44110ae01eedd5909", "patch": "@@ -726,8 +726,8 @@\n ;; complex forms.  Basic data transfer is done later.\n \n (define_insn \"zero_extendqi<mode>2\"\n-  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,^wIwH,^wH\")\n-\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,Z,wH\")))]\n+  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,^wa,^v\")\n+\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,Z,v\")))]\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n@@ -780,8 +780,8 @@\n \n \n (define_insn \"zero_extendhi<mode>2\"\n-  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,^wIwH,^wH\")\n-\t(zero_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wH\")))]\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,^wa,^v\")\n+\t(zero_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,v\")))]\n   \"\"\n   \"@\n    lhz%U1%X1 %0,%1\n@@ -834,8 +834,8 @@\n \n \n (define_insn \"zero_extendsi<mode>2\"\n-  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wa,wj,r,wIwH\")\n-\t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wIwH,wIwH\")))]\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wa,wj,r,wa\")\n+\t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wa,wa\")))]\n   \"\"\n   \"@\n    lwz%U1%X1 %0,%1\n@@ -846,7 +846,7 @@\n    mfvsrwz %0,%x1\n    xxextractuw %x0,%x1,4\"\n   [(set_attr \"type\" \"load,shift,fpload,fpload,mffgpr,mftgpr,vecexts\")\n-   (set_attr \"isa\" \"*,*,*,p8v,*,*,p9v\")])\n+   (set_attr \"isa\" \"*,*,*,p8v,*,p8v,p9v\")])\n \n (define_insn_and_split \"*zero_extendsi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n@@ -891,8 +891,8 @@\n \n \n (define_insn \"extendqi<mode>2\"\n-  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,?*wH\")\n-\t(sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,?*wH\")))]\n+  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,?*v\")\n+\t(sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,?*v\")))]\n   \"\"\n   \"@\n    extsb %0,%1\n@@ -949,8 +949,8 @@\n   \"\")\n \n (define_insn \"*extendhi<mode>2\"\n-  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,?*wH,?*wH\")\n-\t(sign_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wH\")))]\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,?*v,?*v\")\n+\t(sign_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,v\")))]\n   \"\"\n   \"@\n    lha%U1%X1 %0,%1\n@@ -1019,9 +1019,9 @@\n \n (define_insn \"extendsi<mode>2\"\n   [(set (match_operand:EXTSI 0 \"gpc_reg_operand\"\n-\t\t     \"=r, r,   wl,    wa,    wj,    wH,     wH,    wr\")\n+\t\t     \"=r, r,   wl,    wa,    wj,    v,      v,     wr\")\n \t(sign_extend:EXTSI (match_operand:SI 1 \"lwa_operand\"\n-\t\t     \"YZ, r,   Z,     Z,     r,     wH,     wH,    ?wIwH\")))]\n+\t\t     \"YZ, r,   Z,     Z,     r,     v,      v,     ?wa\")))]\n   \"\"\n   \"@\n    lwa%U1%X1 %0,%1\n@@ -1035,7 +1035,7 @@\n   [(set_attr \"type\" \"load,exts,fpload,fpload,mffgpr,vecexts,vecperm,mftgpr\")\n    (set_attr \"sign_extend\" \"yes\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,8\")\n-   (set_attr \"isa\" \"*,*,*,p8v,*,p9v,*,*\")])\n+   (set_attr \"isa\" \"*,*,*,p8v,*,p9v,p8v,p8v\")])\n \n (define_split\n   [(set (match_operand:EXTSI 0 \"int_reg_operand\")\n@@ -5233,8 +5233,8 @@\n ; We don't define lfiwax/lfiwzx with the normal definition, because we\n ; don't want to support putting SImode in FPR registers.\n (define_insn \"lfiwax\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wH\")\n-\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wH\")]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,v\")\n+\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,v\")]\n \t\t   UNSPEC_LFIWAX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWAX\"\n   \"@\n@@ -5315,8 +5315,8 @@\n    (set_attr \"type\" \"fpload\")])\n \n (define_insn \"lfiwzx\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wIwH\")\n-\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wIwH\")]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wa\")\n+\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wa\")]\n \t\t   UNSPEC_LFIWZX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWZX\"\n   \"@\n@@ -5569,10 +5569,10 @@\n (define_insn_and_split \"*float<QHI:mode><FP_ISA3:mode>2_internal\"\n   [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\" \"=<Fv>,<Fv>,<Fv>\")\n \t(float:FP_ISA3\n-\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wH,r,Z\")))\n-   (clobber (match_scratch:DI 2 \"=wH,wi,wH\"))\n+\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"v,r,Z\")))\n+   (clobber (match_scratch:DI 2 \"=v,wi,v\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))\n-   (clobber (match_scratch:<QHI:MODE> 4 \"=X,X,wH\"))]\n+   (clobber (match_scratch:<QHI:MODE> 4 \"=X,X,v\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -5622,8 +5622,8 @@\n (define_insn_and_split \"*floatuns<QHI:mode><FP_ISA3:mode>2_internal\"\n   [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\" \"=<Fv>,<Fv>,<Fv>\")\n \t(unsigned_float:FP_ISA3\n-\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wH,r,Z\")))\n-   (clobber (match_scratch:DI 2 \"=wH,wi,wIwH\"))\n+\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"v,r,Z\")))\n+   (clobber (match_scratch:DI 2 \"=v,wi,wa\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n   \"#\"\n@@ -5764,8 +5764,8 @@\n ;; register allocation prevents the register allocator from doing a direct move\n ;; of the SImode value to a GPR, and then a store/load.\n (define_insn_and_split \"fix<uns>_trunc<SFDF:mode><QHI:mode>2\"\n-  [(set (match_operand:<QHI:MODE> 0 \"gpc_reg_operand\" \"=wI,wIwH,r\")\n-\t(any_fix:QHI (match_operand:SFDF 1 \"gpc_reg_operand\" \"wI,wIwH,wa\")))\n+  [(set (match_operand:<QHI:MODE> 0 \"gpc_reg_operand\" \"=d,wa,r\")\n+\t(any_fix:QHI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d,wa,wa\")))\n    (clobber (match_scratch:SI 2 \"=X,X,wi\"))]\n   \"TARGET_DIRECT_MOVE\"\n   \"@\n@@ -6892,16 +6892,16 @@\n ;;\t\tMF%1         MT%0         NOP\n (define_insn \"*movsi_internal1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-\t\t\"=r,         r,           r,           wI,          wH,\n+\t\t\"=r,         r,           r,           d,           v,\n \t\t m,          Z,           Z,           r,           r,\n-\t\t r,          wIwH,        wIwH,        wIwH,        v,\n-\t\t wIwH,       wH,          wH,          wIwH,        r,\n+\t\t r,          wa,          wa,          wa,          v,\n+\t\t wa,         v,           v,           wa,          r,\n \t\t r,          *h,          *h\")\n \t(match_operand:SI 1 \"input_operand\"\n \t\t\"r,          U,           m,           Z,           Z,\n-\t\t r,          wI,          wH,          I,           L,\n-\t\t n,          wIwH,        O,           wM,          wB,\n-\t\t O,          wM,          wS,          r,           wIwH,\n+\t\t r,          d,           v,           I,           L,\n+\t\t n,          wa,          O,           wM,          wB,\n+\t\t O,          wM,          wS,          r,           wa,\n \t\t *h,         r,           0\"))]\n   \"gpc_reg_operand (operands[0], SImode)\n    || gpc_reg_operand (operands[1], SImode)\"\n@@ -6942,10 +6942,10 @@\n \t\t 4,          4,           8,           4,           4,\n \t\t 4,          4,           4\")\n    (set_attr \"isa\"\n-\t\t\"*,          *,           *,           *,           *,\n-\t\t *,          *,           *,           *,           *,\n-\t\t *,          *,           p9v,         p9v,         p8v,\n-\t\t p9v,        *,           p9v,         *,           *,\n+\t\t\"*,          *,           *,           p8v,         p8v,\n+\t\t *,          p8v,         p8v,         *,           *,\n+\t\t *,          p8v,         p9v,         p9v,         p8v,\n+\t\t p9v,        p8v,         p9v,         p8v,         p8v,\n \t\t *,          *,           *\")])\n \n ;; Like movsi, but adjust a SF value to be used in a SI context, i.e.\n@@ -6969,17 +6969,17 @@\n \n (define_insn_and_split \"movsi_from_sf\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-\t\t\"=r,         r,           ?*wI,        ?*wH,     m,\n-\t\t m,          wY,          Z,           r,        ?*wIwH,\n-\t\t wIwH\")\n+\t\t\"=r,         r,           ?*d,         ?*v,      m,\n+\t\t m,          wY,          Z,           r,        ?*wa,\n+\t\t wa\")\n \t(unspec:SI [(match_operand:SF 1 \"input_operand\"\n \t\t\"r,          m,           Z,           Z,        r,\n-\t\t f,          v,           wa,          wIwH,     wIwH,\n+\t\t f,          v,           wa,          wa,       wa,\n \t\t r\")]\n \t\t    UNSPEC_SI_FROM_SF))\n    (clobber (match_scratch:V4SF 2\n \t\t\"=X,         X,           X,           X,        X,\n-\t\t X,          X,           X,           wIwH,     X,\n+\t\t X,          X,           X,           wa,       X,\n \t\t X\"))]\n   \"TARGET_NO_SF_SUBREG\n    && (register_operand (operands[0], SImode)\n@@ -7020,9 +7020,9 @@\n \t\t 4,          4,           4,           8,        4,\n \t\t 4\")\n    (set_attr \"isa\"\n-\t\t\"*,          *,           *,           *,        *,\n-\t\t *,          p9v,         p8v,         *,        *,\n-\t\t *\")])\n+\t\t\"*,          *,           p8v,         p8v,      *,\n+\t\t *,          p9v,         p8v,         p8v,      p8v,\n+\t\t p8v\")])\n \n ;; movsi_from_sf with zero extension\n ;;\n@@ -7031,16 +7031,16 @@\n \n (define_insn_and_split \"*movdi_from_sf_zero_ext\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\"\n-\t\t\"=r,         r,           ?*wI,        ?*wH,     r,\n-\t\t ?wH,        wIwH\")\n+\t\t\"=r,         r,           ?*d,         ?*v,      r,\n+\t\t ?v,         wa\")\n \t(zero_extend:DI\n \t (unspec:SI [(match_operand:SF 1 \"input_operand\"\n-\t\t\"r,          m,           Z,           Z,        wIwH,\n-\t\t wIwH,       r\")]\n+\t\t\"r,          m,           Z,           Z,        wa,\n+\t\t wa,         r\")]\n \t\t    UNSPEC_SI_FROM_SF)))\n    (clobber (match_scratch:V4SF 2\n \t\t\"=X,         X,           X,           X,        wa,\n-\t\t wIwH,       X\"))]\n+\t\t wa,         X\"))]\n   \"TARGET_DIRECT_MOVE_64BIT\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], SImode))\"\n@@ -7073,8 +7073,8 @@\n \t\t\"4,          4,           4,           4,        8,\n \t\t 8,          4\")\n    (set_attr \"isa\"\n-\t\t\"*,          *,           *,           *,        *,\n-\t\t p9v,        *\")])\n+\t\t\"*,          *,           p8v,         p8v,      p8v,\n+\t\t p9v,        p8v\")])\n \n ;; Like movsi_from_sf, but combine a convert from DFmode to SFmode before\n ;; moving it to SImode.  We cannot do a SFmode store without having to do the\n@@ -7168,12 +7168,12 @@\n ;;\t\tMTVSRWZ     MF%1       MT%1       NOP\n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:QHI 0 \"nonimmediate_operand\"\n-\t\t\"=r,        r,         wIwH,      m,         Z,         r,\n-\t\t wIwH,      wIwH,      wIwH,      wH,        ?wH,       r,\n-\t\t wIwH,      r,         *c*l,      *h\")\n+\t\t\"=r,        r,         wa,        m,         Z,         r,\n+\t\t wa,        wa,        wa,        v,         ?v,        r,\n+\t\t wa,        r,         *c*l,      *h\")\n \t(match_operand:QHI 1 \"input_operand\"\n-\t\t\"r,         m,         Z,         r,         wIwH,      i,\n-\t\t wIwH,      O,         wM,        wB,        wS,        wIwH,\n+\t\t\"r,         m,         Z,         r,         wa,        i,\n+\t\t wa,        O,         wM,        wB,        wS,        wa,\n \t\t r,         *h,        r,         0\"))]\n   \"gpc_reg_operand (operands[0], <MODE>mode)\n    || gpc_reg_operand (operands[1], <MODE>mode)\"\n@@ -8705,7 +8705,7 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n \t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"ww\")]\n \t\t   UNSPEC_P8V_RELOAD_FROM_VSX))\n-   (clobber (match_operand:V4SF 2 \"register_operand\" \"=wIwH\"))]\n+   (clobber (match_operand:V4SF 2 \"register_operand\" \"=wa\"))]\n   \"TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -8722,8 +8722,8 @@\n   DONE;\n }\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"two\")])\n-\n+   (set_attr \"type\" \"two\")\n+   (set_attr \"isa\" \"p8v\")])\n \f\n ;; Next come the multi-word integer load and store and the load and store\n ;; multiple insns."}, {"sha": "ae757f183d023f9569a888c3da11606fb75242fc", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=791e777970b021f495ba8db44110ae01eedd5909", "patch": "@@ -3525,7 +3525,7 @@\n (define_insn \"vsx_extract_<mode>_p9\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,<VSX_EX>\")\n \t(vec_select:<VS_scalar>\n-\t (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wH,<VSX_EX>\")\n+\t (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"v,<VSX_EX>\")\n \t (parallel [(match_operand:QI 2 \"<VSX_EXTRACT_PREDICATE>\" \"n,n\")])))\n    (clobber (match_scratch:SI 3 \"=r,X\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\"\n@@ -3581,7 +3581,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,<VSX_EX>\")\n \t(zero_extend:DI\n \t (vec_select:<VS_scalar>\n-\t  (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wH,<VSX_EX>\")\n+\t  (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"v,<VSX_EX>\")\n \t  (parallel [(match_operand:QI 2 \"const_int_operand\" \"n,n\")]))))\n    (clobber (match_scratch:SI 3 \"=r,X\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\"\n@@ -3617,7 +3617,7 @@\n \t(match_dup 3))])\n \n (define_insn_and_split  \"*vsx_extract_si\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,wHwI,Z\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,wa,Z\")\n \t(vec_select:SI\n \t (match_operand:V4SI 1 \"gpc_reg_operand\" \"v,v,v\")\n \t (parallel [(match_operand:QI 2 \"const_0_to_3_operand\" \"n,n,n\")])))\n@@ -3664,7 +3664,8 @@\n   DONE;\n }\n   [(set_attr \"type\" \"mftgpr,vecperm,fpstore\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"isa\" \"*,p8v,*\")])\n \n (define_insn_and_split  \"*vsx_extract_<mode>_p8\"\n   [(set (match_operand:<VS_scalar> 0 \"nonimmediate_operand\" \"=r\")\n@@ -3735,7 +3736,7 @@\n (define_insn_and_split \"vsx_extract_<mode>_var\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(unspec:<VS_scalar>\n-\t [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"wH,v,m\")\n+\t [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"v,v,m\")\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t UNSPEC_VSX_EXTRACT))\n    (clobber (match_scratch:DI 3 \"=r,r,&b\"))\n@@ -3755,7 +3756,7 @@\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(zero_extend:<VS_scalar>\n \t (unspec:<VSX_EXTRACT_I:VS_scalar>\n-\t  [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"wH,v,m\")\n+\t  [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"v,v,m\")\n \t   (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t  UNSPEC_VSX_EXTRACT)))\n    (clobber (match_scratch:DI 3 \"=r,r,&b\"))\n@@ -3955,7 +3956,7 @@\n \t  (match_operand:SF 2 \"gpc_reg_operand\" \"ww\")\n \t  (match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n-   (clobber (match_scratch:SI 4 \"=&wIwH\"))]\n+   (clobber (match_scratch:SI 4 \"=&wa\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -3991,7 +3992,7 @@\n \t  (match_operand:SF 2 \"zero_fp_constant\" \"j\")\n \t  (match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n-   (clobber (match_scratch:SI 4 \"=&wIwH\"))]\n+   (clobber (match_scratch:SI 4 \"=&wa\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -4049,7 +4050,7 @@\n \t\t\t  [(match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]))\n \t  (match_operand:QI 4 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n-   (clobber (match_scratch:SI 5 \"=&wIwH\"))]\n+   (clobber (match_scratch:SI 5 \"=&wa\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && VECTOR_MEM_VSX_P (V4SImode)\n    && TARGET_P9_VECTOR && TARGET_POWERPC64\n    && (INTVAL (operands[3]) != (BYTES_BIG_ENDIAN ? 1 : 2))\""}, {"sha": "6c7d121dd67c4bae97dceea8838c99b4ac19140c", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791e777970b021f495ba8db44110ae01eedd5909/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=791e777970b021f495ba8db44110ae01eedd5909", "patch": "@@ -3325,12 +3325,6 @@ Memory operand suitable for power8 GPR load fusion\n @item wG\n Memory operand suitable for TOC fusion memory references.\n \n-@item wH\n-Altivec register if @option{-mvsx-small-integer}.\n-\n-@item wI\n-Floating point register if @option{-mvsx-small-integer}.\n-\n @item wL\n Int constant that is the element number that the MFVSRLD instruction.\n targets."}]}