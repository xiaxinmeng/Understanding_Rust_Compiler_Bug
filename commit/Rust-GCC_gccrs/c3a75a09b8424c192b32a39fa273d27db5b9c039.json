{"sha": "c3a75a09b8424c192b32a39fa273d27db5b9c039", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhNzVhMDliODQyNGMxOTJiMzJhMzlmYTI3M2QyN2RiNWI5YzAzOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-19T08:14:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:14:47Z"}, "message": "[Ada] Get rid of useless temporary for slice in overaligned record type\n\nThis fixes a recent code quality regression for targets that do not\nrequire the strict alignment of memory accesses: the compiler would\ngenerate a useless temporary for a slice of an array component in an\noveraligned record type.\n\nRunning these commands:\n\n  gcc -c p.adb -gnatws -gnatD\n  grep loop p.adb.dg\n\nOn the following sources:\n\nprocedure P (N : Positive) is\n\n  type Rec1 is record\n    I : Integer;\n  end record;\n\n  type Arr is array (Positive range <>) of Rec1;\n\n  type Rec2 is record\n    A : Arr (1 .. 128);\n  end record;\n  for Rec2'Alignment use 8;\n\n  procedure Proc (A : Arr) is\n  begin\n    null;\n  end;\n\n  R : Rec2;\n\nbegin\n  Proc (R.A (1 .. N));\nend;\n\nShould execute silently.\n\n2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.adb (Is_Possibly_Unaligned_Slice): Do not return true\n\ton pure alignment considerations if the target does not require\n\tthe strict alignment of memory accesses.\n\nFrom-SVN: r275956", "tree": {"sha": "02248dbe080cb8039d06d8da007945feaac10b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02248dbe080cb8039d06d8da007945feaac10b45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a75a09b8424c192b32a39fa273d27db5b9c039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a75a09b8424c192b32a39fa273d27db5b9c039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a75a09b8424c192b32a39fa273d27db5b9c039", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a75a09b8424c192b32a39fa273d27db5b9c039/comments", "author": null, "committer": null, "parents": [{"sha": "87cd385fa5dad3a0e5d144e08670c7fdd85fe2ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cd385fa5dad3a0e5d144e08670c7fdd85fe2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cd385fa5dad3a0e5d144e08670c7fdd85fe2ef"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "58080084938180880c30c0f13957bcb5d6b070fc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a75a09b8424c192b32a39fa273d27db5b9c039/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a75a09b8424c192b32a39fa273d27db5b9c039/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c3a75a09b8424c192b32a39fa273d27db5b9c039", "patch": "@@ -1,3 +1,9 @@\n+2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Is_Possibly_Unaligned_Slice): Do not return true\n+\ton pure alignment considerations if the target does not require\n+\tthe strict alignment of memory accesses.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch12.adb (Check_Private_View): Add a comment to indicate"}, {"sha": "6306320c0cd86885fd17d3d697f9ef5e7158a068", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a75a09b8424c192b32a39fa273d27db5b9c039/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a75a09b8424c192b32a39fa273d27db5b9c039/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c3a75a09b8424c192b32a39fa273d27db5b9c039", "patch": "@@ -8692,9 +8692,11 @@ package body Exp_Util is\n                --  We are definitely in trouble if the record in question\n                --  has an alignment, and either we know this alignment is\n                --  inconsistent with the alignment of the slice, or we don't\n-               --  know what the alignment of the slice should be.\n+               --  know what the alignment of the slice should be. But this\n+               --  really matters only if the target has strict alignment.\n \n-               if Known_Alignment (Ptyp)\n+               if Target_Strict_Alignment\n+                 and then Known_Alignment (Ptyp)\n                  and then (Unknown_Alignment (Styp)\n                             or else Alignment (Styp) > Alignment (Ptyp))\n                then"}]}