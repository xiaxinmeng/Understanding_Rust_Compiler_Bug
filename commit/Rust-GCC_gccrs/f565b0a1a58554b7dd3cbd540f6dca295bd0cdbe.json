{"sha": "f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2NWIwYTFhNTg1NTRiN2RkM2NiZDU0MGY2ZGNhMjk1YmQwY2RiZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-06-23T13:24:14Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-06-23T13:24:14Z"}, "message": "re PR target/21760 (Powerpc atomic builtins missing PPC405 errata)\n\n        PR target/21760\n        * config/rs6000/rs6000.h (PPC405_ERRATUM77): New.\n        * config/rs6000/rs6000.md: Move atomic instructions to ...\n        * config/rs6000/sync.md: Here.\n        Change sync_compare_and_swap<mode> to define_expand.  All stwcx\n        patterns test PPC405_ERRATUM77.\n\nFrom-SVN: r101268", "tree": {"sha": "cdd194c3a09ac21a918083c8d8d04b6d4c56c50b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd194c3a09ac21a918083c8d8d04b6d4c56c50b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/comments", "author": null, "committer": null, "parents": [{"sha": "2de3f2f3a49bbd9dad509ca892e0027858098aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2de3f2f3a49bbd9dad509ca892e0027858098aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2de3f2f3a49bbd9dad509ca892e0027858098aa9"}], "stats": {"total": 957, "additions": 510, "deletions": 447}, "files": [{"sha": "29087f50049c63501b79ff0aeeac306ee6c4a125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "patch": "@@ -1,3 +1,12 @@\n+2005-06-23  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/21760\n+\t* config/rs6000/rs6000.h (PPC405_ERRATUM77): New.\n+\t* config/rs6000/rs6000.md: Move atomic instructions to ...\n+\t* config/rs6000/sync.md: Here.\n+\tChange sync_compare_and_swap<mode> to define_expand.  All stwcx\n+\tpatterns test PPC405_ERRATUM77.\n+\n 2005-06-23  Jan Hubicka  <jh@suse.cz>\n \t\n \t* tree-inline.c (copy_body_r): Remap labels correctly."}, {"sha": "54d78c02092717ffb27bb85a96a12ab4ad00700e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "patch": "@@ -49,6 +49,14 @@\n #define TARGET_CPU_DEFAULT ((char *)0)\n #endif\n \n+/* If configured for PPC405, support PPC405CR Erratum77.  */\n+#define PPC405_CPU_DEFAULT (\"405\")\n+#if #TARGET_CPU_DEFAULT == #PPC405_CPU_DEFAULT\n+#define PPC405_ERRATUM77 (rs6000_cpu == PROCESSOR_PPC405)\n+#else\n+#define PPC405_ERRATUM77 0\n+#endif\n+\n /* Common ASM definitions used by ASM_SPEC among the various targets\n    for handling -mcpu=xxx switches.  */\n #define ASM_CPU_SPEC \\"}, {"sha": "b0661f3475a0f1559b1d04cf32c358bcfb5af382", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 447, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "patch": "@@ -141,8 +141,6 @@\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\")])\n \n ; Various instructions that come in SI and DI forms.\n-(define_mode_attr larx [(SI \"lwarx\") (DI \"ldarx\")])\n-(define_mode_attr stcx [(SI \"stwcx.\") (DI \"stdcx.\")])\n ; A generic w/d attribute, for things like cmpw/cmpd.\n (define_mode_attr wd [(SI \"w\") (DI \"d\")])\n \n@@ -13939,451 +13937,7 @@\n }\"\n   [(set_attr \"type\" \"load\")])\n \f\n-; Atomic instructions\n-\n-(define_insn \"memory_barrier\"\n-  [(set (mem:BLK (match_scratch 0 \"X\"))\n-\t(unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_SYNC))]\n-  \"\"\n-  \"{ics|sync}\")\n-\n-(define_insn \"sync_compare_and_swap<mode>\"\n-  [(set (match_operand:GPR 1 \"memory_operand\" \"+Z\")\n-\t(unspec:GPR [(match_dup 1)\n-\t\t     (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")\n-\t\t     (match_operand:GPR 3 \"gpc_reg_operand\" \"r\")]\n-\t\t    UNSPEC_SYNC_SWAP))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\") (match_dup 1))\n-   (set (mem:BLK (match_scratch 5 \"X\"))\n-\t(unspec:BLK [(mem:BLK (match_scratch 6 \"X\"))] UNSPEC_SYNC))\n-   (clobber (match_scratch:CC 4 \"=&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"sync\\n\\t<larx> %0,%y1\\n\\tcmp<wd>%I2 %0,%2\\n\\tbne- $+12\\n\\t<stcx> %3,%y1\\n\\tbne- $-16\\n\\tisync\"\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_expand \"sync_add<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"add_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (PLUS, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_sub<mode>\"\n-  [(use (match_operand:GPR 0 \"memory_operand\" \"\"))\n-   (use (match_operand:GPR 1 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (MINUS, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_ior<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (IOR, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_and<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"and_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (AND, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_xor<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (XOR, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_nand<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (AND, <MODE>mode, \n-\t\t    gen_rtx_NOT (<MODE>mode, operands[0]),\n-\t\t    operands[1],\n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_old_add<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"add_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (PLUS, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_old_sub<mode>\"\n-  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:GPR 1 \"memory_operand\" \"\"))\n-   (use (match_operand:GPR 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (MINUS, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_old_ior<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (IOR, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_old_and<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"and_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (AND, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_old_xor<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (XOR, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_old_nand<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (AND, <MODE>mode, \n-\t\t    gen_rtx_NOT (<MODE>mode, operands[1]),\n-\t\t    operands[2],\n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_new_add<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"add_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (PLUS, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_new_sub<mode>\"\n-  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:GPR 1 \"memory_operand\" \"\"))\n-   (use (match_operand:GPR 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (MINUS, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_new_ior<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (IOR, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_new_and<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"and_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (AND, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_new_xor<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (XOR, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_new_nand<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC\"\n-  \"\n-{\n-  rs6000_emit_sync (AND, <MODE>mode, \n-\t\t    gen_rtx_NOT (<MODE>mode, operands[1]),\n-\t\t    operands[2],\n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n-}\")\n-\n-; the sync_*_internal patterns all have these operands:\n-; 0 - memory location\n-; 1 - operand\n-; 2 - value in memory after operation\n-; 3 - value in memory immediately before operation\n-\n-(define_insn \"*sync_add<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z,Z\")\n-\t\t (match_operand:GPR 1 \"add_operand\" \"rI,L\")))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b,&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec:GPR [(plus:GPR (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 4 \"=&x,&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"@\n-   <larx> %3,%y0\\n\\tadd%I1 %2,%3,%1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\n-   <larx> %3,%y0\\n\\taddis %2,%3,%v1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16\")])\n-\n-(define_insn \"*sync_addshort_internal\"\n-  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r\")\n-\t(ior:SI (and:SI (plus:SI (match_operand:SI 0 \"memory_operand\" \"+Z\")\n-\t\t\t\t (match_operand:SI 1 \"add_operand\" \"rI\"))\n-\t\t\t(match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n-\t\t(and:SI (not:SI (match_dup 4)) (match_dup 0))))\n-   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec:SI [(ior:SI (and:SI (plus:SI (match_dup 0) (match_dup 1))\n-\t\t\t\t    (match_dup 4))\n-\t\t\t    (and:SI (not:SI (match_dup 4)) (match_dup 0)))]\n-\t\t   UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x\"))\n-   (clobber (match_scratch:SI 6 \"=&r\"))]\n-  \"TARGET_POWERPC\"\n-  \"lwarx %3,%y0\\n\\tadd%I1 %2,%3,%1\\n\\tandc %6,%3,%4\\n\\tand %2,%2,%4\\n\\tor %2,%2,%6\\n\\tstwcx. %2,%y0\\n\\tbne- $-24\"\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"*sync_sub<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(minus:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\")\n-\t\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec:GPR [(minus:GPR (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 4 \"=&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"<larx> %3,%y0\\n\\tsubf %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n-\n-(define_insn \"*sync_andsi_internal\"\n-  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n-\t(and:SI (match_operand:SI 0 \"memory_operand\" \"+Z,Z,Z,Z\")\n-\t\t(match_operand:SI 1 \"and_operand\" \"r,T,K,L\")))\n-   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec:SI [(and:SI (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"@\n-   lwarx %3,%y0\\n\\tand %2,%3,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n-   lwarx %3,%y0\\n\\trlwinm %2,%3,0,%m1,%M1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n-   lwarx %3,%y0\\n\\tandi. %2,%3,%b1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n-   lwarx %3,%y0\\n\\tandis. %2,%3,%u1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16,16,16\")])\n-\n-(define_insn \"*sync_anddi_internal\"\n-  [(set (match_operand:DI 2 \"gpc_reg_operand\" \"=&r,&r,&r,&r,&r\")\n-\t(and:DI (match_operand:DI 0 \"memory_operand\" \"+Z,Z,Z,Z,Z\")\n-\t\t(match_operand:DI 1 \"and_operand\" \"r,S,T,K,J\")))\n-   (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec:DI [(and:DI (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x,&x\"))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   ldarx %3,%y0\\n\\tand %2,%3,%1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\trldic%B1 %2,%3,0,%S1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\trlwinm %2,%3,0,%m1,%M1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\tandi. %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\tandis. %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16,16,16,16\")])\n-\n-(define_insn \"*sync_boolsi_internal\"\n-  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r,&r,&r\")\n-\t(match_operator:SI 4 \"boolean_or_operator\"\n-\t [(match_operand:SI 0 \"memory_operand\" \"+Z,Z,Z\")\n-\t  (match_operand:SI 1 \"logical_operand\" \"r,K,L\")]))\n-   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"@\n-   lwarx %3,%y0\\n\\t%q4 %2,%3,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n-   lwarx %3,%y0\\n\\t%q4i %2,%3,%b1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n-   lwarx %3,%y0\\n\\t%q4is %2,%3,%u1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16,16\")])\n-\n-(define_insn \"*sync_booldi_internal\"\n-  [(set (match_operand:DI 2 \"gpc_reg_operand\" \"=&r,&r,&r\")\n-\t(match_operator:DI 4 \"boolean_or_operator\"\n-\t [(match_operand:DI 0 \"memory_operand\" \"+Z,Z,Z\")\n-\t  (match_operand:DI 1 \"logical_operand\" \"r,K,JF\")]))\n-   (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:DI [(match_dup 4)] UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   ldarx %3,%y0\\n\\t%q4 %2,%3,%1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\t%q4i %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\t%q4is %2,%3,%u1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16,16\")])\n-\n-(define_insn \"*sync_boolc<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operator:GPR 4 \"boolean_operator\"\n-\t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n-\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n-\n-; This pattern could also take immediate values of operand 1,\n-; since the non-NOT version of the operator is used; but this is not\n-; very useful, since in practice operand 1 is a full 32-bit value.\n-; Likewise, operand 5 is in practice either <= 2^16 or it is a register.\n-(define_insn \"*sync_boolcshort_internal\"\n-  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operator:SI 4 \"boolean_operator\"\n-\t [(xor:SI (match_operand:SI 0 \"memory_operand\" \"+Z\")\n-\t\t  (match_operand:SI 5 \"logical_operand\" \"rK\"))\n-\t  (match_operand:SI 1 \"gpc_reg_operand\" \"r\")]))\n-   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 6 \"=&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"lwarx %3,%y0\\n\\txor%I2 %2,%3,%5\\n\\t%q4 %2,%2,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-16\"\n-  [(set_attr \"length\" \"20\")])\n-\n-(define_insn \"*sync_boolc<mode>_internal2\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operator:GPR 4 \"boolean_operator\"\n-\t [(not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n-\t  (match_operand:GPR 0 \"memory_operand\" \"+Z\")]))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"<larx> %3,%y0\\n\\t%q4 %2,%3,%1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n-\n-(define_insn \"*sync_boolcc<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operator:GPR 4 \"boolean_operator\"\n-\t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n-\t  (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))]))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x\"))]\n-  \"TARGET_POWERPC\"\n-  \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n-\n-(define_insn \"isync\"\n-  [(set (mem:BLK (match_scratch 0 \"X\"))\n-        (unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_ISYNC))]\n-  \"TARGET_POWERPC\"\n-  \"isync\")\n-\n-(define_insn \"sync_lock_test_and_set<mode>\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n-   (set (match_dup 1) (unspec:GPR [(match_operand:GPR 2 \"gpc_reg_operand\" \"r\")] \n-\t\t\t\t UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 3 \"=&x\"))\n-   (set (mem:BLK (match_scratch 4 \"X\"))\n-        (unspec:BLK [(mem:BLK (match_scratch 5 \"X\"))] UNSPEC_ISYNC))]\n-  \"TARGET_POWERPC\"\n-  \"<larx> %0,%y1\\n\\t<stcx> %2,%y1\\n\\tbne- $-8\\n\\tisync\"\n-  [(set_attr \"length\" \"16\")])\n-\n-(define_expand \"sync_lock_release<mode>\"\n-  [(set (match_operand:INT 0 \"memory_operand\")\n-\t(match_operand:INT 1 \"any_operand\"))]\n-  \"\"\n-  \"\n-{\n-  emit_insn (gen_lwsync ());\n-  emit_move_insn (operands[0], operands[1]);\n-  DONE;\n-}\")\n-\n-; Some AIX assemblers don't accept lwsync, so we use a .long.\n-(define_insn \"lwsync\"\n-  [(set (mem:BLK (match_scratch 0 \"X\"))\n-        (unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_LWSYNC))]\n-  \"\"\n-  \".long 0x7c2004ac\")\n-\n-\f\n \n+(include \"sync.md\")\n (include \"altivec.md\")\n (include \"spe.md\")"}, {"sha": "6cf248c7a68c8d3c39c5b9c8b11fa908f84ed79d", "filename": "gcc/config/rs6000/sync.md", "status": "added", "additions": 492, "deletions": 0, "changes": 492, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=f565b0a1a58554b7dd3cbd540f6dca295bd0cdbe", "patch": "@@ -0,0 +1,492 @@\n+;; Machine description for PowerPC synchronization instructions.\n+;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;; Contributed by Geoffrey Keating.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+;; MA 02111-1307, USA.\n+\n+(define_mode_attr larx [(SI \"lwarx\") (DI \"ldarx\")])\n+(define_mode_attr stcx [(SI \"stwcx.\") (DI \"stdcx.\")])\n+\n+(define_insn \"memory_barrier\"\n+  [(set (mem:BLK (match_scratch 0 \"X\"))\n+\t(unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_SYNC))]\n+  \"\"\n+  \"{ics|sync}\")\n+\n+(define_expand \"sync_compare_and_swap<mode>\"\n+  [(parallel [(set (match_operand:GPR 1 \"memory_operand\" \"\")\n+\t\t   (unspec:GPR [(match_dup 1)\n+\t\t\t\t(match_operand:GPR 2 \"reg_or_short_operand\" \"\")\n+\t\t\t\t(match_operand:GPR 3 \"gpc_reg_operand\" \"\")]\n+\t\t\t       UNSPEC_SYNC_SWAP))\n+\t      (set (match_operand:GPR 0 \"gpc_reg_operand\" \"\") (match_dup 1))\n+\t      (set (mem:BLK (match_scratch 5 \"\"))\n+\t\t   (unspec:BLK [(mem:BLK (match_scratch 6 \"\"))] UNSPEC_SYNC))\n+\t      (clobber (match_scratch:CC 4 \"\"))])]\n+  \"TARGET_POWERPC\")\n+\n+(define_insn \"sync_compare_and_swap<mode>_internal\"\n+  [(set (match_operand:GPR 1 \"memory_operand\" \"+Z\")\n+\t(unspec:GPR [(match_dup 1)\n+\t\t     (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")\n+\t\t     (match_operand:GPR 3 \"gpc_reg_operand\" \"r\")]\n+\t\t    UNSPEC_SYNC_SWAP))\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\") (match_dup 1))\n+   (set (mem:BLK (match_scratch 5 \"X\"))\n+\t(unspec:BLK [(mem:BLK (match_scratch 6 \"X\"))] UNSPEC_SYNC))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"sync\\n\\t<larx> %0,%y1\\n\\tcmp<wd>%I2 %0,%2\\n\\tbne- $+12\\n\\t<stcx> %3,%y1\\n\\tbne- $-16\\n\\tisync\"\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_compare_and_swap<mode>_ppc405\"\n+  [(set (match_operand:GPR 1 \"memory_operand\" \"+Z\")\n+\t(unspec:GPR [(match_dup 1)\n+\t\t     (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")\n+\t\t     (match_operand:GPR 3 \"gpc_reg_operand\" \"r\")]\n+\t\t    UNSPEC_SYNC_SWAP))\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\") (match_dup 1))\n+   (set (mem:BLK (match_scratch 5 \"X\"))\n+\t(unspec:BLK [(mem:BLK (match_scratch 6 \"X\"))] UNSPEC_SYNC))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC && PPC405_ERRATUM77\"\n+  \"sync\\n\\t<larx> %0,%y1\\n\\tcmp<wd>%I2 %0,%2\\n\\tbne- $+12\\n\\tsync\\n\\t<stcx> %3,%y1\\n\\tbne- $-16\\n\\tisync\"\n+  [(set_attr \"length\" \"32\")])\n+\n+(define_expand \"sync_add<mode>\"\n+  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"add_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (PLUS, <MODE>mode, operands[0], operands[1], \n+\t\t    NULL_RTX, NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_sub<mode>\"\n+  [(use (match_operand:GPR 0 \"memory_operand\" \"\"))\n+   (use (match_operand:GPR 1 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (MINUS, <MODE>mode, operands[0], operands[1], \n+\t\t    NULL_RTX, NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_ior<mode>\"\n+  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"logical_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (IOR, <MODE>mode, operands[0], operands[1], \n+\t\t    NULL_RTX, NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_and<mode>\"\n+  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"and_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (AND, <MODE>mode, operands[0], operands[1], \n+\t\t    NULL_RTX, NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_xor<mode>\"\n+  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"logical_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (XOR, <MODE>mode, operands[0], operands[1], \n+\t\t    NULL_RTX, NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_nand<mode>\"\n+  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (AND, <MODE>mode, \n+\t\t    gen_rtx_NOT (<MODE>mode, operands[0]),\n+\t\t    operands[1],\n+\t\t    NULL_RTX, NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_old_add<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"add_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (PLUS, <MODE>mode, operands[1], operands[2], \n+\t\t    operands[0], NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_old_sub<mode>\"\n+  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:GPR 1 \"memory_operand\" \"\"))\n+   (use (match_operand:GPR 2 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (MINUS, <MODE>mode, operands[1], operands[2], \n+\t\t    operands[0], NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_old_ior<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (IOR, <MODE>mode, operands[1], operands[2], \n+\t\t    operands[0], NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_old_and<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"and_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (AND, <MODE>mode, operands[1], operands[2], \n+\t\t    operands[0], NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_old_xor<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (XOR, <MODE>mode, operands[1], operands[2], \n+\t\t    operands[0], NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_old_nand<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (AND, <MODE>mode, \n+\t\t    gen_rtx_NOT (<MODE>mode, operands[1]),\n+\t\t    operands[2],\n+\t\t    operands[0], NULL_RTX, true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_new_add<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"add_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (PLUS, <MODE>mode, operands[1], operands[2], \n+\t\t    NULL_RTX, operands[0], true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_new_sub<mode>\"\n+  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:GPR 1 \"memory_operand\" \"\"))\n+   (use (match_operand:GPR 2 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (MINUS, <MODE>mode, operands[1], operands[2], \n+\t\t    NULL_RTX, operands[0], true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_new_ior<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (IOR, <MODE>mode, operands[1], operands[2], \n+\t\t    NULL_RTX, operands[0], true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_new_and<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"and_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (AND, <MODE>mode, operands[1], operands[2], \n+\t\t    NULL_RTX, operands[0], true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_new_xor<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (XOR, <MODE>mode, operands[1], operands[2], \n+\t\t    NULL_RTX, operands[0], true);\n+  DONE;\n+}\")\n+\n+(define_expand \"sync_new_nand<mode>\"\n+  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n+   (use (match_operand:INT1 2 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"\n+{\n+  rs6000_emit_sync (AND, <MODE>mode, \n+\t\t    gen_rtx_NOT (<MODE>mode, operands[1]),\n+\t\t    operands[2],\n+\t\t    NULL_RTX, operands[0], true);\n+  DONE;\n+}\")\n+\n+; the sync_*_internal patterns all have these operands:\n+; 0 - memory location\n+; 1 - operand\n+; 2 - value in memory after operation\n+; 3 - value in memory immediately before operation\n+\n+(define_insn \"*sync_add<mode>_internal\"\n+  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r,&r\")\n+\t(plus:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z,Z\")\n+\t\t (match_operand:GPR 1 \"add_operand\" \"rI,L\")))\n+   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b,&b\") (match_dup 0))\n+   (set (match_dup 0) \n+\t(unspec:GPR [(plus:GPR (match_dup 0) (match_dup 1))]\n+\t\t   UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 4 \"=&x,&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"@\n+   <larx> %3,%y0\\n\\tadd%I1 %2,%3,%1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\n+   <larx> %3,%y0\\n\\taddis %2,%3,%v1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16,16\")])\n+\n+(define_insn \"*sync_addshort_internal\"\n+  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r\")\n+\t(ior:SI (and:SI (plus:SI (match_operand:SI 0 \"memory_operand\" \"+Z\")\n+\t\t\t\t (match_operand:SI 1 \"add_operand\" \"rI\"))\n+\t\t\t(match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n+\t\t(and:SI (not:SI (match_dup 4)) (match_dup 0))))\n+   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n+   (set (match_dup 0) \n+\t(unspec:SI [(ior:SI (and:SI (plus:SI (match_dup 0) (match_dup 1))\n+\t\t\t\t    (match_dup 4))\n+\t\t\t    (and:SI (not:SI (match_dup 4)) (match_dup 0)))]\n+\t\t   UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 5 \"=&x\"))\n+   (clobber (match_scratch:SI 6 \"=&r\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"lwarx %3,%y0\\n\\tadd%I1 %2,%3,%1\\n\\tandc %6,%3,%4\\n\\tand %2,%2,%4\\n\\tor %2,%2,%6\\n\\tstwcx. %2,%y0\\n\\tbne- $-24\"\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"*sync_sub<mode>_internal\"\n+  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n+\t(minus:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\")\n+\t\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))\n+   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n+   (set (match_dup 0) \n+\t(unspec:GPR [(minus:GPR (match_dup 0) (match_dup 1))]\n+\t\t   UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"<larx> %3,%y0\\n\\tsubf %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16\")])\n+\n+(define_insn \"*sync_andsi_internal\"\n+  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n+\t(and:SI (match_operand:SI 0 \"memory_operand\" \"+Z,Z,Z,Z\")\n+\t\t(match_operand:SI 1 \"and_operand\" \"r,T,K,L\")))\n+   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b\") (match_dup 0))\n+   (set (match_dup 0) \n+\t(unspec:SI [(and:SI (match_dup 0) (match_dup 1))]\n+\t\t   UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"@\n+   lwarx %3,%y0\\n\\tand %2,%3,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n+   lwarx %3,%y0\\n\\trlwinm %2,%3,0,%m1,%M1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n+   lwarx %3,%y0\\n\\tandi. %2,%3,%b1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n+   lwarx %3,%y0\\n\\tandis. %2,%3,%u1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16,16,16,16\")])\n+\n+(define_insn \"*sync_anddi_internal\"\n+  [(set (match_operand:DI 2 \"gpc_reg_operand\" \"=&r,&r,&r,&r,&r\")\n+\t(and:DI (match_operand:DI 0 \"memory_operand\" \"+Z,Z,Z,Z,Z\")\n+\t\t(match_operand:DI 1 \"and_operand\" \"r,S,T,K,J\")))\n+   (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b,&b\") (match_dup 0))\n+   (set (match_dup 0) \n+\t(unspec:DI [(and:DI (match_dup 0) (match_dup 1))]\n+\t\t   UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x,&x\"))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   ldarx %3,%y0\\n\\tand %2,%3,%1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n+   ldarx %3,%y0\\n\\trldic%B1 %2,%3,0,%S1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n+   ldarx %3,%y0\\n\\trlwinm %2,%3,0,%m1,%M1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n+   ldarx %3,%y0\\n\\tandi. %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n+   ldarx %3,%y0\\n\\tandis. %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16,16,16,16,16\")])\n+\n+(define_insn \"*sync_boolsi_internal\"\n+  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r,&r,&r\")\n+\t(match_operator:SI 4 \"boolean_or_operator\"\n+\t [(match_operand:SI 0 \"memory_operand\" \"+Z,Z,Z\")\n+\t  (match_operand:SI 1 \"logical_operand\" \"r,K,L\")]))\n+   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n+   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"@\n+   lwarx %3,%y0\\n\\t%q4 %2,%3,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n+   lwarx %3,%y0\\n\\t%q4i %2,%3,%b1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\n+   lwarx %3,%y0\\n\\t%q4is %2,%3,%u1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16,16,16\")])\n+\n+(define_insn \"*sync_booldi_internal\"\n+  [(set (match_operand:DI 2 \"gpc_reg_operand\" \"=&r,&r,&r\")\n+\t(match_operator:DI 4 \"boolean_or_operator\"\n+\t [(match_operand:DI 0 \"memory_operand\" \"+Z,Z,Z\")\n+\t  (match_operand:DI 1 \"logical_operand\" \"r,K,JF\")]))\n+   (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n+   (set (match_dup 0) (unspec:DI [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   ldarx %3,%y0\\n\\t%q4 %2,%3,%1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n+   ldarx %3,%y0\\n\\t%q4i %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n+   ldarx %3,%y0\\n\\t%q4is %2,%3,%u1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16,16,16\")])\n+\n+(define_insn \"*sync_boolc<mode>_internal\"\n+  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operator:GPR 4 \"boolean_operator\"\n+\t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n+\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]))\n+   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n+   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 5 \"=&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16\")])\n+\n+; This pattern could also take immediate values of operand 1,\n+; since the non-NOT version of the operator is used; but this is not\n+; very useful, since in practice operand 1 is a full 32-bit value.\n+; Likewise, operand 5 is in practice either <= 2^16 or it is a register.\n+(define_insn \"*sync_boolcshort_internal\"\n+  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operator:SI 4 \"boolean_operator\"\n+\t [(xor:SI (match_operand:SI 0 \"memory_operand\" \"+Z\")\n+\t\t  (match_operand:SI 5 \"logical_operand\" \"rK\"))\n+\t  (match_operand:SI 1 \"gpc_reg_operand\" \"r\")]))\n+   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n+   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 6 \"=&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"lwarx %3,%y0\\n\\txor%I2 %2,%3,%5\\n\\t%q4 %2,%2,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-16\"\n+  [(set_attr \"length\" \"20\")])\n+\n+(define_insn \"*sync_boolc<mode>_internal2\"\n+  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operator:GPR 4 \"boolean_operator\"\n+\t [(not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n+\t  (match_operand:GPR 0 \"memory_operand\" \"+Z\")]))\n+   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n+   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 5 \"=&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"<larx> %3,%y0\\n\\t%q4 %2,%3,%1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16\")])\n+\n+(define_insn \"*sync_boolcc<mode>_internal\"\n+  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operator:GPR 4 \"boolean_operator\"\n+\t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n+\t  (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))]))\n+   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n+   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 5 \"=&x\"))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n+  [(set_attr \"length\" \"16\")])\n+\n+(define_insn \"isync\"\n+  [(set (mem:BLK (match_scratch 0 \"X\"))\n+        (unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_ISYNC))]\n+  \"TARGET_POWERPC\"\n+  \"isync\")\n+\n+(define_insn \"sync_lock_test_and_set<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n+   (set (match_dup 1) (unspec:GPR [(match_operand:GPR 2 \"gpc_reg_operand\" \"r\")] \n+\t\t\t\t UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 3 \"=&x\"))\n+   (set (mem:BLK (match_scratch 4 \"X\"))\n+        (unspec:BLK [(mem:BLK (match_scratch 5 \"X\"))] UNSPEC_ISYNC))]\n+  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  \"<larx> %0,%y1\\n\\t<stcx> %2,%y1\\n\\tbne- $-8\\n\\tisync\"\n+  [(set_attr \"length\" \"16\")])\n+\n+(define_expand \"sync_lock_release<mode>\"\n+  [(set (match_operand:INT 0 \"memory_operand\")\n+\t(match_operand:INT 1 \"any_operand\"))]\n+  \"\"\n+  \"\n+{\n+  emit_insn (gen_lwsync ());\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+}\")\n+\n+; Some AIX assemblers don't accept lwsync, so we use a .long.\n+(define_insn \"lwsync\"\n+  [(set (mem:BLK (match_scratch 0 \"X\"))\n+        (unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_LWSYNC))]\n+  \"\"\n+  \".long 0x7c2004ac\")\n+"}]}