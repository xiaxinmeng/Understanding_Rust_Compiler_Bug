{"sha": "bf08ebebc7fb2f16aa6095a10987196cb4267a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwOGViZWJjN2ZiMmYxNmFhNjA5NWExMDk4NzE5NmNiNDI2N2E3OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-07-29T10:52:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-07-29T10:52:16Z"}, "message": "predict.c (always_optimize_for_size_p): New function.\n\n\n\t* predict.c (always_optimize_for_size_p): New function.\n\t(optimize_bb_for_size_p, optimize_bb_for_speed_p,\n\toptimize_edge_for_size_p, optimize_edge_for_speed_p,\n\toptimize_insn_for_size_p, optimize_insn_for_speed_p): New global\n\tfunctions.\n\t(rtl_profile_for_bb, rtl_profile_for_edge, rtl_default_profile): New.\n\t* function.c (prepare_function_start): Set default profile.\n\t* function.h (rtl_data): Add maybe_hot_insn_p.\n\t* cfgexpand.c (expand_gimple_basic_block): Set RTL profile.\n\t(construct_exit_block): Likewise.\n\t(tree_expand_cfg): Likewise.\n\t* basic-block.h\n\t(optimize_bb_for_size_p, optimize_bb_for_speed_p,\n\toptimize_edge_for_size_p, optimize_edge_for_speed_p,\n\toptimize_insn_for_size_p, optimize_insn_for_speed_p): Declare.\n\t(rtl_profile_for_bb, rtl_profile_for_edge, default_rtl_profile):\n\tDeclare.\n\nFrom-SVN: r138237", "tree": {"sha": "a553c86e8031502bd1ab3bdb7e5a7c83ff5e1088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a553c86e8031502bd1ab3bdb7e5a7c83ff5e1088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf08ebebc7fb2f16aa6095a10987196cb4267a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf08ebebc7fb2f16aa6095a10987196cb4267a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf08ebebc7fb2f16aa6095a10987196cb4267a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf08ebebc7fb2f16aa6095a10987196cb4267a78/comments", "author": null, "committer": null, "parents": [{"sha": "993555181042e01fcdb573a44f4c787a3e50e25a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993555181042e01fcdb573a44f4c787a3e50e25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993555181042e01fcdb573a44f4c787a3e50e25a"}], "stats": {"total": 135, "additions": 131, "deletions": 4}, "files": [{"sha": "296b56289b59e3f74ec9a9fc907c77989f54b943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf08ebebc7fb2f16aa6095a10987196cb4267a78", "patch": "@@ -1,3 +1,23 @@\n+2008-07-29  Jan HUbicka  <jh@suse.cz>\n+\n+\t* predict.c (always_optimize_for_size_p): New function.\n+\t(optimize_bb_for_size_p, optimize_bb_for_speed_p,\n+\toptimize_edge_for_size_p, optimize_edge_for_speed_p,\n+\toptimize_insn_for_size_p, optimize_insn_for_speed_p): New global\n+\tfunctions.\n+\t(rtl_profile_for_bb, rtl_profile_for_edge, rtl_default_profile): New.\n+\t* function.c (prepare_function_start): Set default profile.\n+\t* function.h (rtl_data): Add maybe_hot_insn_p.\n+\t* cfgexpand.c (expand_gimple_basic_block): Set RTL profile.\n+\t(construct_exit_block): Likewise.\n+\t(tree_expand_cfg): Likewise.\n+\t* basic-block.h\n+\t(optimize_bb_for_size_p, optimize_bb_for_speed_p,\n+\toptimize_edge_for_size_p, optimize_edge_for_speed_p,\n+\toptimize_insn_for_size_p, optimize_insn_for_speed_p): Declare.\n+\t(rtl_profile_for_bb, rtl_profile_for_edge, default_rtl_profile):\n+\tDeclare.\n+\n 2008-07-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 34985"}, {"sha": "caaf22ef74248047755806214466a62199c32089", "filename": "gcc/basic-block.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=bf08ebebc7fb2f16aa6095a10987196cb4267a78", "patch": "@@ -831,6 +831,12 @@ extern bool maybe_hot_bb_p (const_basic_block);\n extern bool maybe_hot_edge_p (edge);\n extern bool probably_cold_bb_p (const_basic_block);\n extern bool probably_never_executed_bb_p (const_basic_block);\n+extern bool optimize_bb_for_size_p (basic_block);\n+extern bool optimize_bb_for_speed_p (basic_block);\n+extern bool optimize_edge_for_size_p (edge);\n+extern bool optimize_edge_for_speed_p (edge);\n+extern bool optimize_insn_for_size_p (void);\n+extern bool optimize_insn_for_speed_p (void);\n extern bool gimple_predicted_by_p (const_basic_block, enum br_predictor);\n extern bool rtl_predicted_by_p (const_basic_block, enum br_predictor);\n extern void gimple_predict_edge (edge, enum br_predictor, int);\n@@ -988,6 +994,11 @@ bb_has_abnormal_pred (basic_block bb)\n \n /* In cfgloopmanip.c.  */\n extern edge mfb_kj_edge;\n-bool mfb_keep_just (edge);\n+extern bool mfb_keep_just (edge);\n+\n+/* In cfgexpand.c.  */\n+extern void rtl_profile_for_bb (basic_block);\n+extern void rtl_profile_for_edge (edge);\n+extern void default_rtl_profile (void);\n \n #endif /* GCC_BASIC_BLOCK_H */"}, {"sha": "6040b4460c26feec6580a2da8ac8b07d20738375", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=bf08ebebc7fb2f16aa6095a10987196cb4267a78", "patch": "@@ -1798,6 +1798,7 @@ expand_gimple_basic_block (basic_block bb)\n      access the BB sequence directly.  */\n   stmts = bb_seq (bb);\n   bb->il.gimple = NULL;\n+  rtl_profile_for_bb (bb);\n   init_rtl_bb_info (bb);\n   bb->flags |= BB_RTL;\n \n@@ -2020,6 +2021,8 @@ construct_exit_block (void)\n   edge_iterator ei;\n   rtx orig_end = BB_END (EXIT_BLOCK_PTR->prev_bb);\n \n+  rtl_profile_for_bb (EXIT_BLOCK_PTR);\n+\n   /* Make sure the locus is set to the end of the function, so that\n      epilogue line numbers and warnings are set properly.  */\n   if (cfun->function_end_locus != UNKNOWN_LOCATION)\n@@ -2153,6 +2156,8 @@ gimple_expand_cfg (void)\n   /* Some backends want to know that we are expanding to RTL.  */\n   currently_expanding_to_rtl = 1;\n \n+  rtl_profile_for_bb (ENTRY_BLOCK_PTR);\n+\n   insn_locators_alloc ();\n   if (!DECL_BUILT_IN (current_function_decl))\n     set_curr_insn_source_location (DECL_SOURCE_LOCATION (current_function_decl));\n@@ -2216,6 +2221,9 @@ gimple_expand_cfg (void)\n   lab_rtx_for_bb = pointer_map_create ();\n   FOR_BB_BETWEEN (bb, init_block->next_bb, EXIT_BLOCK_PTR, next_bb)\n     bb = expand_gimple_basic_block (bb);\n+\n+  /* Expansion is used by optimization passes too, set maybe_hot_insn_p\n+     conservatively to true until they are all profile aware.  */\n   pointer_map_destroy (lab_rtx_for_bb);\n   free_histograms ();\n \n@@ -2284,6 +2292,7 @@ gimple_expand_cfg (void)\n   /* Tag the blocks with a depth number so that change_scope can find\n      the common parent easily.  */\n   set_block_levels (DECL_INITIAL (cfun->decl), 0);\n+  default_rtl_profile ();\n   return 0;\n }\n "}, {"sha": "dc3854ba53fe64c936e207f1c72a8d8d8d769adf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bf08ebebc7fb2f16aa6095a10987196cb4267a78", "patch": "@@ -6680,7 +6680,7 @@ standard_80387_constant_p (rtx x)\n   /* For XFmode constants, try to find a special 80387 instruction when\n      optimizing for size or on those CPUs that benefit from them.  */\n   if (mode == XFmode\n-      && (optimize_size || TARGET_EXT_80387_CONSTANTS))\n+      && (optimize_insn_for_size_p () || TARGET_EXT_80387_CONSTANTS))\n     {\n       int i;\n \n@@ -16410,12 +16410,15 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n \t\t\t   || (alg != rep_prefix_1_byte\t\t\\\n \t\t\t       && alg != rep_prefix_4_byte      \\\n \t\t\t       && alg != rep_prefix_8_byte))\n+  const struct processor_costs *cost;\n+  \n+  cost = optimize_insn_for_size_p () ? &size_cost : ix86_cost;\n \n   *dynamic_check = -1;\n   if (memset)\n-    algs = &ix86_cost->memset[TARGET_64BIT != 0];\n+    algs = &cost->memset[TARGET_64BIT != 0];\n   else\n-    algs = &ix86_cost->memcpy[TARGET_64BIT != 0];\n+    algs = &cost->memcpy[TARGET_64BIT != 0];\n   if (stringop_alg != no_stringop && ALG_USABLE_P (stringop_alg))\n     return stringop_alg;\n   /* rep; movq or rep; movl is the smallest variant.  */"}, {"sha": "ea3ddf456045532de4e30c84c090343a1a98e391", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=bf08ebebc7fb2f16aa6095a10987196cb4267a78", "patch": "@@ -3885,6 +3885,7 @@ prepare_function_start (void)\n   init_emit ();\n   init_varasm_status ();\n   init_expr ();\n+  default_rtl_profile ();\n \n   cse_not_expected = ! optimize;\n "}, {"sha": "94f4642dc32cd5f2be44c35bf14903a3d9176487", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=bf08ebebc7fb2f16aa6095a10987196cb4267a78", "patch": "@@ -397,6 +397,9 @@ struct rtl_data GTY(())\n      Set in stmt.c if anything is allocated on the stack there.\n      Set in reload1.c if anything is allocated on the stack there.  */\n   bool frame_pointer_needed;\n+\n+  /* When set, expand should optimize for speed.  */\n+  bool maybe_hot_insn_p;\n };\n \n #define return_label (crtl->x_return_label)"}, {"sha": "853c0c6f70d2e7402d62bee6eea6885a34bcaffe", "filename": "gcc/predict.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08ebebc7fb2f16aa6095a10987196cb4267a78/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=bf08ebebc7fb2f16aa6095a10987196cb4267a78", "patch": "@@ -178,6 +178,86 @@ probably_never_executed_bb_p (const_basic_block bb)\n   return false;\n }\n \n+/* Return true when current function should always be optimized for size.  */\n+\n+static bool\n+always_optimize_for_size_p (void)\n+{\n+  return (optimize_size\n+\t  || cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED);\n+}\n+\n+/* Return TRUE when BB should be optimized for size.  */\n+\n+bool\n+optimize_bb_for_size_p (basic_block bb)\n+{\n+  return always_optimize_for_size_p () || !maybe_hot_bb_p (bb);\n+}\n+\n+/* Return TRUE when BB should be optimized for speed.  */\n+\n+bool\n+optimize_bb_for_speed_p (basic_block bb)\n+{\n+  return !optimize_bb_for_size_p (bb);\n+}\n+\n+/* Return TRUE when BB should be optimized for size.  */\n+\n+bool\n+optimize_edge_for_size_p (edge e)\n+{\n+  return always_optimize_for_size_p () || !maybe_hot_edge_p (e);\n+}\n+\n+/* Return TRUE when BB should be optimized for speed.  */\n+\n+bool\n+optimize_edge_for_speed_p (edge e)\n+{\n+  return !optimize_edge_for_size_p (e);\n+}\n+\n+/* Return TRUE when BB should be optimized for size.  */\n+\n+bool\n+optimize_insn_for_size_p (void)\n+{\n+  return always_optimize_for_size_p () || !crtl->maybe_hot_insn_p;\n+}\n+\n+/* Return TRUE when BB should be optimized for speed.  */\n+\n+bool\n+optimize_insn_for_speed_p (void)\n+{\n+  return !optimize_insn_for_size_p ();\n+}\n+\n+/* Set RTL expansion for BB profile.  */\n+\n+void\n+rtl_profile_for_bb (basic_block bb)\n+{\n+  crtl->maybe_hot_insn_p = maybe_hot_bb_p (bb);\n+}\n+\n+/* Set RTL expansion for edge profile.  */\n+\n+void\n+rtl_profile_for_edge (edge e)\n+{\n+  crtl->maybe_hot_insn_p = maybe_hot_edge_p (e);\n+}\n+\n+/* Set RTL expansion to default mode (i.e. when profile info is not known).  */\n+void\n+default_rtl_profile (void)\n+{\n+  crtl->maybe_hot_insn_p = true;\n+}\n+\n /* Return true if the one of outgoing edges is already predicted by\n    PREDICTOR.  */\n "}]}