{"sha": "1cdfb80a4ec7b6585b436917e13b205055732232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNkZmI4MGE0ZWM3YjY1ODViNDM2OTE3ZTEzYjIwNTA1NTczMjIzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-04T11:46:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-04T11:47:42Z"}, "message": "sccvn: Avoid overflows in push_partial_def\n\nThe following patch attempts to avoid dangerous overflows in the various\npush_partial_def HOST_WIDE_INT computations.\nThis is achieved by performing the subtraction offset2i - offseti in\nthe push_partial_def function and before doing that doing some tweaks.\nIf a constant store (non-CONSTRUCTOR) is too large (perhaps just\nhypothetical case), native_encode_expr would fail for it, but we don't\nnecessarily need to fail right away, instead we can treat it like\nnon-constant store and if it is already shadowed, we can ignore it.\nOtherwise, if it at most 64-byte and the caller ensured that there is\na range overlap and push_partial_def ensures the load is at most 64-byte,\nI think we should be fine, offset (relative to the load)\ncan be from -64*8+1 to 64*8-1 only and size at most 64*8, so no risks of\noverflowing HOST_WIDE_INT computations.\nFor CONSTRUCTOR (or non-constant) stores, those can be indeed arbitrarily\nlarge, the caller just checks that both the absolute offset and size fit\ninto signed HWI.  But, we store the same bytes in that case over and over\n(both in the {} case where it is all 0, and in the hypothetical future case\nwhere we handle in push_partial_def also memset (, 123, )), so we can tweak\nthe write range for our purposes.  For {} store we could just cap it at the\nstart offset and/or offset+size because all the bits are 0, but I wrote it\nin anticipation of the memset case and so the relative offset can now be\ndown to -7 and similarly size can grow up to 64 bytes + 14 bits, all this\ntrying to preserve the offset difference % BITS_PER_UNIT or end as well.\n\n2020-03-04  Jakub Jelinek  <jakub@redhat.com>\n\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Add offseti\n\targument.  Change pd argument so that it can be modified.  Turn\n\tconstant non-CONSTRUCTOR store into non-constant if it is too large.\n\tAdjust offset and size of CONSTRUCTOR or non-constant store to avoid\n\toverflows.\n\t(vn_walk_cb_data::vn_walk_cb_data, vn_reference_lookup_3): Adjust\n\tcallers.", "tree": {"sha": "c1f82425e5596304ab6873d9cfa941ec1c290a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1f82425e5596304ab6873d9cfa941ec1c290a15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cdfb80a4ec7b6585b436917e13b205055732232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdfb80a4ec7b6585b436917e13b205055732232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cdfb80a4ec7b6585b436917e13b205055732232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdfb80a4ec7b6585b436917e13b205055732232/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca54007ebb5d49c3d6cea63ee87fd8f3ccb9ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca54007ebb5d49c3d6cea63ee87fd8f3ccb9ca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca54007ebb5d49c3d6cea63ee87fd8f3ccb9ca5"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "df70632a763f8ebf3fe8240a8406a434493c32f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdfb80a4ec7b6585b436917e13b205055732232/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdfb80a4ec7b6585b436917e13b205055732232/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cdfb80a4ec7b6585b436917e13b205055732232", "patch": "@@ -1,3 +1,13 @@\n+2020-03-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Add offseti\n+\targument.  Change pd argument so that it can be modified.  Turn\n+\tconstant non-CONSTRUCTOR store into non-constant if it is too large.\n+\tAdjust offset and size of CONSTRUCTOR or non-constant store to avoid\n+\toverflows.\n+\t(vn_walk_cb_data::vn_walk_cb_data, vn_reference_lookup_3): Adjust\n+\tcallers.\n+\n 2020-02-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93964"}, {"sha": "9ea30ef433cbe4616b0c4341097448b78197e926", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdfb80a4ec7b6585b436917e13b205055732232/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdfb80a4ec7b6585b436917e13b205055732232/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1cdfb80a4ec7b6585b436917e13b205055732232", "patch": "@@ -1716,7 +1716,7 @@ struct vn_walk_cb_data\n \t\telse\n \t\t  pd.offset = pos;\n \t\tpd.size = tz;\n-\t\tvoid *r = push_partial_def (pd, 0, 0, prec);\n+\t\tvoid *r = push_partial_def (pd, 0, 0, 0, prec);\n \t\tgcc_assert (r == NULL_TREE);\n \t      }\n \t    pos += tz;\n@@ -1733,8 +1733,9 @@ struct vn_walk_cb_data\n   }\n   ~vn_walk_cb_data ();\n   void *finish (alias_set_type, alias_set_type, tree);\n-  void *push_partial_def (const pd_data& pd,\n-\t\t\t  alias_set_type, alias_set_type, HOST_WIDE_INT);\n+  void *push_partial_def (pd_data pd,\n+\t\t\t  alias_set_type, alias_set_type, HOST_WIDE_INT,\n+\t\t\t  HOST_WIDE_INT);\n \n   vn_reference_t vr;\n   ao_ref orig_ref;\n@@ -1817,8 +1818,9 @@ pd_tree_dealloc (void *, void *)\n    on failure.  */\n \n void *\n-vn_walk_cb_data::push_partial_def (const pd_data &pd,\n+vn_walk_cb_data::push_partial_def (pd_data pd,\n \t\t\t\t   alias_set_type set, alias_set_type base_set,\n+\t\t\t\t   HOST_WIDE_INT offseti,\n \t\t\t\t   HOST_WIDE_INT maxsizei)\n {\n   const HOST_WIDE_INT bufsize = 64;\n@@ -1831,6 +1833,27 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd,\n       || BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n     return (void *)-1;\n \n+  /* Turn too large constant stores into non-constant stores.  */\n+  if (CONSTANT_CLASS_P (pd.rhs) && pd.size > bufsize * BITS_PER_UNIT)\n+    pd.rhs = error_mark_node;\n+\n+  /* And for non-constant or CONSTRUCTOR stores shrink them to only keep at\n+     most a partial byte before and/or after the region.  */\n+  if (!CONSTANT_CLASS_P (pd.rhs))\n+    {\n+      if (pd.offset < offseti)\n+\t{\n+\t  HOST_WIDE_INT o = ROUND_DOWN (offseti - pd.offset, BITS_PER_UNIT);\n+\t  gcc_assert (pd.size > o);\n+\t  pd.size -= o;\n+\t  pd.offset += o;\n+\t}\n+      if (pd.size > maxsizei)\n+\tpd.size = maxsizei + ((pd.size - maxsizei) % BITS_PER_UNIT);\n+    }\n+\n+  pd.offset -= offseti;\n+\n   bool pd_constant_p = (TREE_CODE (pd.rhs) == CONSTRUCTOR\n \t\t\t|| CONSTANT_CLASS_P (pd.rhs));\n   if (partial_defs.is_empty ())\n@@ -2736,9 +2759,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t{\n \t  pd_data pd;\n \t  pd.rhs = build_constructor (NULL_TREE, NULL);\n-\t  pd.offset = offset2i - offseti;\n+\t  pd.offset = offset2i;\n \t  pd.size = leni << LOG2_BITS_PER_UNIT;\n-\t  return data->push_partial_def (pd, 0, 0, maxsizei);\n+\t  return data->push_partial_def (pd, 0, 0, offseti, maxsizei);\n \t}\n     }\n \n@@ -2785,11 +2808,11 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t by a later def.  */\n \t      pd_data pd;\n \t      pd.rhs = gimple_assign_rhs1 (def_stmt);\n-\t      pd.offset = offset2i - offseti;\n+\t      pd.offset = offset2i;\n \t      pd.size = size2i;\n \t      return data->push_partial_def (pd, ao_ref_alias_set (&lhs_ref),\n \t\t\t\t\t     ao_ref_base_alias_set (&lhs_ref),\n-\t\t\t\t\t     maxsizei);\n+\t\t\t\t\t     offseti, maxsizei);\n \t    }\n \t}\n     }\n@@ -2936,11 +2959,11 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      if (TREE_CODE (rhs) == SSA_NAME)\n \t\trhs = SSA_VAL (rhs);\n \t      pd.rhs = rhs;\n-\t      pd.offset = offset2i - offseti;\n+\t      pd.offset = offset2i;\n \t      pd.size = size2i;\n \t      return data->push_partial_def (pd, ao_ref_alias_set (&lhs_ref),\n \t\t\t\t\t     ao_ref_base_alias_set (&lhs_ref),\n-\t\t\t\t\t     maxsizei);\n+\t\t\t\t\t     offseti, maxsizei);\n \t    }\n \t}\n     }\n@@ -3014,11 +3037,11 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t    {\n \t      pd_data pd;\n \t      pd.rhs = SSA_VAL (def_rhs);\n-\t      pd.offset = offset2i - offseti;\n+\t      pd.offset = offset2i;\n \t      pd.size = size2i;\n \t      return data->push_partial_def (pd, ao_ref_alias_set (&lhs_ref),\n \t\t\t\t\t     ao_ref_base_alias_set (&lhs_ref),\n-\t\t\t\t\t     maxsizei);\n+\t\t\t\t\t     offseti, maxsizei);\n \t    }\n \t}\n     }\n@@ -3154,7 +3177,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.size = maxsizei;\n \t      return data->push_partial_def (pd, ao_ref_alias_set (&lhs_ref),\n \t\t\t\t\t     ao_ref_base_alias_set (&lhs_ref),\n-\t\t\t\t\t     maxsizei);\n+\t\t\t\t\t     0, maxsizei);\n \t    }\n \t}\n "}]}