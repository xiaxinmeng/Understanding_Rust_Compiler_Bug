{"sha": "8f1594b2b805e9214594ad1f4552f629429fd07e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxNTk0YjJiODA1ZTkyMTQ1OTRhZDFmNDU1MmY2Mjk0MjlmZDA3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-08-02T19:56:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-08-02T19:56:29Z"}, "message": "h8300: Generate correct unwind info around swap_into/out_of_er6.\n\nMinimal bug fix is to unset RTX_FRAME_RELATED_P on the PUSH\ninsn generated in h8300_swap_into_er6.  But with a tiny bit\nof effort we can generate real unwind info around the sequence.\n\nFrom-SVN: r177209", "tree": {"sha": "5e890980807492b4cdd0eb854fdc3823adfefa57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e890980807492b4cdd0eb854fdc3823adfefa57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f1594b2b805e9214594ad1f4552f629429fd07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1594b2b805e9214594ad1f4552f629429fd07e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1594b2b805e9214594ad1f4552f629429fd07e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1594b2b805e9214594ad1f4552f629429fd07e/comments", "author": null, "committer": null, "parents": [{"sha": "66f1dc79f5c4cc5b9cc95a23e05bae44fa8665f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f1dc79f5c4cc5b9cc95a23e05bae44fa8665f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f1dc79f5c4cc5b9cc95a23e05bae44fa8665f3"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "6745886dc55bb361828fc2b344b6a292caa2d100", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1594b2b805e9214594ad1f4552f629429fd07e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1594b2b805e9214594ad1f4552f629429fd07e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f1594b2b805e9214594ad1f4552f629429fd07e", "patch": "@@ -1,3 +1,9 @@\n+2011-08-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/h8300/h8300.c (push, pop): Return the insn.\n+\t(h8300_swap_into_er6): Generate correct unwind info.\n+\t(h8300_swap_out_of_er6): Likewise.\n+\n 2011-08-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Fix a typo."}, {"sha": "a929a28663a0d4123b59ea31a78c759c1a3656d7", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1594b2b805e9214594ad1f4552f629429fd07e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1594b2b805e9214594ad1f4552f629429fd07e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=8f1594b2b805e9214594ad1f4552f629429fd07e", "patch": "@@ -87,8 +87,6 @@ static int h8300_os_task_function_p (tree);\n static void h8300_emit_stack_adjustment (int, HOST_WIDE_INT, bool);\n static HOST_WIDE_INT round_frame_size (HOST_WIDE_INT);\n static unsigned int compute_saved_regs (void);\n-static void push (int);\n-static void pop (int);\n static const char *cond_string (enum rtx_code);\n static unsigned int h8300_asm_insn_count (const char *);\n static tree h8300_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n@@ -556,7 +554,7 @@ compute_saved_regs (void)\n \n /* Emit an insn to push register RN.  */\n \n-static void\n+static rtx\n push (int rn)\n {\n   rtx reg = gen_rtx_REG (word_mode, rn);\n@@ -570,11 +568,12 @@ push (int rn)\n     x = gen_push_h8300hs_normal (reg);\n   x = F (emit_insn (x), true);\n   add_reg_note (x, REG_INC, stack_pointer_rtx);\n+  return x;\n }\n \n /* Emit an insn to pop register RN.  */\n \n-static void\n+static rtx\n pop (int rn)\n {\n   rtx reg = gen_rtx_REG (word_mode, rn);\n@@ -588,6 +587,7 @@ pop (int rn)\n     x = gen_pop_h8300hs_normal (reg);\n   x = emit_insn (x);\n   add_reg_note (x, REG_INC, stack_pointer_rtx);\n+  return x;\n }\n \n /* Emit an instruction to push or pop NREGS consecutive registers\n@@ -2678,7 +2678,16 @@ h8sx_emit_movmd (rtx dest, rtx src, rtx length,\n void\n h8300_swap_into_er6 (rtx addr)\n {\n-  push (HARD_FRAME_POINTER_REGNUM);\n+  rtx insn = push (HARD_FRAME_POINTER_REGNUM);\n+  if (frame_pointer_needed)\n+    add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t  plus_constant (gen_rtx_MEM (Pmode, stack_pointer_rtx),\n+\t\t\t\t 2 * UNITS_PER_WORD));\n+  else\n+    add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+\t\t  gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t       plus_constant (stack_pointer_rtx, 4)));\n+\n   emit_move_insn (hard_frame_pointer_rtx, addr);\n   if (REGNO (addr) == SP_REG)\n     emit_move_insn (hard_frame_pointer_rtx,\n@@ -2692,9 +2701,20 @@ h8300_swap_into_er6 (rtx addr)\n void\n h8300_swap_out_of_er6 (rtx addr)\n {\n+  rtx insn;\n+\n   if (REGNO (addr) != SP_REG)\n     emit_move_insn (addr, hard_frame_pointer_rtx);\n-  pop (HARD_FRAME_POINTER_REGNUM);\n+\n+  insn = pop (HARD_FRAME_POINTER_REGNUM);\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+  if (frame_pointer_needed)\n+    add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t  plus_constant (hard_frame_pointer_rtx, 2 * UNITS_PER_WORD));\n+  else\n+    add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+\t\t  gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t       plus_constant (stack_pointer_rtx, -4)));\n }\n \f\n /* Return the length of mov instruction.  */"}, {"sha": "69218cb2dfec4a07501cc59f0f4da3bf1edd24a5", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1594b2b805e9214594ad1f4552f629429fd07e/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1594b2b805e9214594ad1f4552f629429fd07e/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=8f1594b2b805e9214594ad1f4552f629429fd07e", "patch": "@@ -778,8 +778,8 @@ def_cfa_1 (dw_cfa_location *new_cfa)\n   if (cfi)\n     {\n       cur_row->cfa = *new_cfa;\n-      if (cfi->dw_cfi_opc == DW_CFA_def_cfa_expression)\n-        cur_row->cfa_cfi = cfi;\n+      cur_row->cfa_cfi = (cfi->dw_cfi_opc == DW_CFA_def_cfa_expression\n+\t\t\t  ? cfi : NULL);\n \n       add_cfi (cfi);\n     }\n@@ -1205,32 +1205,25 @@ dwarf2out_frame_debug_def_cfa (rtx pat)\n \n   memset (&loc, 0, sizeof (loc));\n \n-  switch (GET_CODE (pat))\n+  if (GET_CODE (pat) == PLUS)\n     {\n-    case PLUS:\n-      loc.reg = dwf_regno (XEXP (pat, 0));\n       loc.offset = INTVAL (XEXP (pat, 1));\n-      break;\n-\n-    case REG:\n-      loc.reg = dwf_regno (pat);\n-      break;\n-\n-    case MEM:\n+      pat = XEXP (pat, 0);\n+    }\n+  if (MEM_P (pat))\n+    {\n       loc.indirect = 1;\n       pat = XEXP (pat, 0);\n       if (GET_CODE (pat) == PLUS)\n \t{\n \t  loc.base_offset = INTVAL (XEXP (pat, 1));\n \t  pat = XEXP (pat, 0);\n \t}\n-      loc.reg = dwf_regno (pat);\n-      break;\n-\n-    default:\n-      /* Recurse and define an expression.  */\n-      gcc_unreachable ();\n     }\n+  /* ??? If this fails, we could be calling into the _loc functions to\n+     define a full expression.  So far no port does that.  */\n+  gcc_assert (REG_P (pat));\n+  loc.reg = dwf_regno (pat);\n \n   def_cfa_1 (&loc);\n }"}]}