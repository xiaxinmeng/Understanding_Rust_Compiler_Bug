{"sha": "e282a2bc9f65e7476487a3e4e4e3476c20407c4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4MmEyYmM5ZjY1ZTc0NzY0ODdhM2U0ZTRlMzQ3NmMyMDQwN2M0ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-08-31T19:52:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-31T19:52:16Z"}, "message": "mt_allocator.h: Remove volatile qualifiers from data members and corresponding locals and...\n\n2006-08-31  Richard Guenther  <rguenther@suse.de>\n\n\t* include/ext/mt_allocator.h: Remove volatile qualifiers\n\tfrom data members and corresponding locals and function\n\tsignatures.\n\nFrom-SVN: r116606", "tree": {"sha": "2344d80026581a0f5dfde71c581680dff1eeed13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2344d80026581a0f5dfde71c581680dff1eeed13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e282a2bc9f65e7476487a3e4e4e3476c20407c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e282a2bc9f65e7476487a3e4e4e3476c20407c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e282a2bc9f65e7476487a3e4e4e3476c20407c4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e282a2bc9f65e7476487a3e4e4e3476c20407c4e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e5787ef86dd68d1e332eee116d1bc92c17aae44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5787ef86dd68d1e332eee116d1bc92c17aae44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5787ef86dd68d1e332eee116d1bc92c17aae44"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "8fe437401c69aab902257a03c096069fed24fb0c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e282a2bc9f65e7476487a3e4e4e3476c20407c4e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e282a2bc9f65e7476487a3e4e4e3476c20407c4e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e282a2bc9f65e7476487a3e4e4e3476c20407c4e", "patch": "@@ -1,3 +1,9 @@\n+2006-08-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* include/ext/mt_allocator.h: Remove volatile qualifiers\n+\tfrom data members and corresponding locals and function\n+\tsignatures.\n+\n 2006-08-31  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/abi/pre/gnu.ver: Correct atomic helper function signature"}, {"sha": "ae20d166fa5dfee3c55686f6f86fbd6d2b66b331", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e282a2bc9f65e7476487a3e4e4e3476c20407c4e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e282a2bc9f65e7476487a3e4e4e3476c20407c4e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=e282a2bc9f65e7476487a3e4e4e3476c20407c4e", "patch": "@@ -195,13 +195,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       union _Block_record\n       {\n \t// Points to the block_record of the next free block.\n-\t_Block_record* volatile         _M_next;\n+\t_Block_record* \t\t\t_M_next;\n       };\n \n       struct _Bin_record\n       {\n \t// An \"array\" of pointers to the first free block.\n-\t_Block_record** volatile        _M_first;\n+\t_Block_record**\t\t\t_M_first;\n \n \t// A list of the initial addresses of all allocated blocks.\n \t_Block_address*\t\t     \t_M_address;\n@@ -244,7 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // An \"array\" of bin_records each of which represents a specific\n       // power of 2 size. Memory to this \"array\" is allocated in\n       // _M_initialize().\n-      _Bin_record* volatile\t_M_bin;\n+      _Bin_record*\t\t _M_bin;\n       \n       // Actual value calculated in _M_initialize().\n       size_t \t       \t     \t_M_bin_size;     \n@@ -271,7 +271,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       struct _Thread_record\n       {\n \t// Points to next free thread id record. NULL if last record in list.\n-\t_Thread_record* volatile        _M_next;\n+\t_Thread_record*\t\t\t_M_next;\n \t\n \t// Thread id ranging from 1 to _S_max_threads.\n \tsize_t                          _M_id;\n@@ -280,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       union _Block_record\n       {\n \t// Points to the block_record of the next free block.\n-\t_Block_record* volatile         _M_next;\n+\t_Block_record*\t\t\t_M_next;\n \t\n \t// The thread id of the thread which has requested this block.\n \tsize_t                          _M_thread_id;\n@@ -291,7 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// An \"array\" of pointers to the first free block for each\n \t// thread id. Memory to this \"array\" is allocated in\n \t// _S_initialize() for _S_max_threads + global pool 0.\n-\t_Block_record** volatile        _M_first;\n+\t_Block_record**\t\t\t_M_first;\n \t\n \t// A list of the initial addresses of all allocated blocks.\n \t_Block_address*\t\t     \t_M_address;\n@@ -300,8 +300,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// blocks that are on the freelist/used for each thread id.\n \t// Memory to these \"arrays\" is allocated in _S_initialize() for\n \t// _S_max_threads + global pool 0.\n-\tsize_t* volatile                _M_free;\n-\tsize_t* volatile                _M_used;\n+\tsize_t*\t\t\t\t_M_free;\n+\tsize_t*\t\t\t        _M_used;\n \t\n \t// Each bin has its own mutex which is used to ensure data\n \t// integrity while changing \"ownership\" on a block.  The mutex\n@@ -365,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // An \"array\" of bin_records each of which represents a specific\n       // power of 2 size. Memory to this \"array\" is allocated in\n       // _M_initialize().\n-      _Bin_record* volatile\t_M_bin;\n+      _Bin_record*\t\t_M_bin;\n \n       // Actual value calculated in _M_initialize().\n       size_t \t       \t     \t_M_bin_size;"}]}