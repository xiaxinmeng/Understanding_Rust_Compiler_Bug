{"sha": "5b7f5b7ff963eec025fd52acc80a543d85b5af5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI3ZjViN2ZmOTYzZWVjMDI1ZmQ1MmFjYzgwYTU0M2Q4NWI1YWY1Yg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2005-12-09T17:20:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:20:53Z"}, "message": "sem_cat.adb (Validate_RCI_Subprogram_Declaration): Revise test for available user-specified stream attributes on limited...\n\n2005-12-05  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_cat.adb (Validate_RCI_Subprogram_Declaration): Revise test for\n\tavailable user-specified stream attributes on limited parameters to\n\talso test the type directly rather than only its underlying type (for\n\tAda 95) and, in the case of Ada 2005, to check that the user-specified\n\tattributes are visible at the point of the subprogram declaration.\n\tFor Ada 2005, the error message is modified to indicate that the\n\ttype's stream attributes must be visible (again, only for -gnat05).\n\nFrom-SVN: r108300", "tree": {"sha": "ca858e7cb7325f4b646d81b9bb023dd0c3cad7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca858e7cb7325f4b646d81b9bb023dd0c3cad7c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b7f5b7ff963eec025fd52acc80a543d85b5af5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7f5b7ff963eec025fd52acc80a543d85b5af5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7f5b7ff963eec025fd52acc80a543d85b5af5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7f5b7ff963eec025fd52acc80a543d85b5af5b/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3217dac82e78ecc5e3e428e8c14bab9047e2105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3217dac82e78ecc5e3e428e8c14bab9047e2105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3217dac82e78ecc5e3e428e8c14bab9047e2105"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "d650184913c564f227517356978349d3d2c2488b", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7f5b7ff963eec025fd52acc80a543d85b5af5b/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7f5b7ff963eec025fd52acc80a543d85b5af5b/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=5b7f5b7ff963eec025fd52acc80a543d85b5af5b", "patch": "@@ -1188,6 +1188,7 @@ package body Sem_Cat is\n       Param_Spec      : Node_Id;\n       Param_Type      : Entity_Id;\n       Base_Param_Type : Entity_Id;\n+      Base_Under_Type : Entity_Id;\n       Type_Decl       : Node_Id;\n       Error_Node      : Node_Id := N;\n \n@@ -1257,32 +1258,69 @@ package body Sem_Cat is\n                           and then not (Has_Private_Declaration (Param_Type))\n                           and then Comes_From_Source (N)))\n             then\n-               --  A limited parameter is legal only if user-specified\n-               --  Read and Write attributes exist for it.\n-               --  second part of RM E.2.3 (14)\n+               --  A limited parameter is legal only if user-specified Read and\n+               --  Write attributes exist for it. Second part of RM E.2.3 (14).\n \n                if No (Full_View (Param_Type))\n                  and then Ekind (Param_Type) /= E_Record_Type\n                then\n-                  --  Type does not have completion yet, so if declared in\n-                  --  in the current RCI scope it is illegal, and will be\n-                  --  flagged subsequently.\n+                  --  Type does not have completion yet, so if declared in in\n+                  --  the current RCI scope it is illegal, and will be flagged\n+                  --  subsequently.\n+\n                   return;\n                end if;\n \n-               Base_Param_Type := Base_Type (Underlying_Type (Param_Type));\n-\n-               if No (TSS (Base_Param_Type, TSS_Stream_Read))\n-                    or else\n-                  No (TSS (Base_Param_Type, TSS_Stream_Write))\n+               --  In Ada 95 the rules permit using a limited type that has\n+               --  user-specified Read and Write attributes that are specified\n+               --  in the private part of the package, whereas Ada 2005\n+               --  (AI-240) revises this to require the attributes to be\n+               --  \"available\" (implying that the attribute clauses must be\n+               --  visible to the RCI client). The Ada 95 rules violate the\n+               --  contract model for privacy, but we support both semantics\n+               --  for now for compatibility (note that ACATS test BXE2009\n+               --  checks a case that conforms to the Ada 95 rules but is\n+               --  illegal in Ada 2005).\n+\n+               Base_Param_Type := Base_Type (Param_Type);\n+               Base_Under_Type := Base_Type (Underlying_Type\n+                                              (Base_Param_Type));\n+\n+               if (Ada_Version < Ada_05\n+                     and then\n+                       (No (TSS (Base_Param_Type, TSS_Stream_Read))\n+                          or else\n+                        No (TSS (Base_Param_Type, TSS_Stream_Write)))\n+                     and then\n+                       (No (TSS (Base_Under_Type, TSS_Stream_Read))\n+                          or else\n+                        No (TSS (Base_Under_Type, TSS_Stream_Write))))\n+                 or else\n+                   (Ada_Version >= Ada_05\n+                      and then\n+                        (No (TSS (Base_Param_Type, TSS_Stream_Read))\n+                           or else\n+                         No (TSS (Base_Param_Type, TSS_Stream_Write))\n+                           or else\n+                         Is_Hidden (TSS (Base_Param_Type, TSS_Stream_Read))\n+                           or else\n+                         Is_Hidden (TSS (Base_Param_Type, TSS_Stream_Write))))\n                then\n                   if K = N_Subprogram_Declaration then\n                      Error_Node := Param_Spec;\n                   end if;\n \n-                  Error_Msg_N\n-                    (\"limited parameter in rci unit \"\n-                       & \"must have read/write attributes \", Error_Node);\n+                  if Ada_Version >= Ada_05 then\n+                     Error_Msg_N\n+                       (\"limited parameter in rci unit \"\n+                          & \"must have visible read/write attributes \",\n+                        Error_Node);\n+                  else\n+                     Error_Msg_N\n+                       (\"limited parameter in rci unit \"\n+                          & \"must have read/write attributes \",\n+                        Error_Node);\n+                  end if;\n                   Explain_Limited_Type (Param_Type, Error_Node);\n                end if;\n             end if;"}]}