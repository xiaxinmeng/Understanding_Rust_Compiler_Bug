{"sha": "6577bef9b85e7a26f4059ec86bced1651ef2046e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3N2JlZjliODVlN2EyNmY0MDU5ZWM4NmJjZWQxNjUxZWYyMDQ2ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T14:53:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T14:53:51Z"}, "message": "[multiple changes]\n\n2013-04-23  Yannick Moy  <moy@adacore.com>\n\n\t* err_vars.ads (Error_Msg_Qual_Level): Set variable to zero\n\tat declaration.\n\t* opt.ads (Multiple_Unit_Index): Set variable to zero at declaration.\n\t* sem_util.adb (NCT_Table_Entries): Set variable to zero at declaration.\n\t* set_targ.ads (Num_FPT_Modes): Set variable to zero at declaration.\n\t* stylesw.adb (Save_Style_Check_Options): Protect testing the\n\tvalue of Style_Check_Comments_Spacing by a previous test that\n\tStyle_Check_Comments is True.\n\n2013-04-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_prag.adb, sem_prag.ads (Effective_Name): Rename to\n\tOriginal_Name, and move declaration to package body as this\n\tsubprogram is not used from outside. Also clarify documentation.\n\nFrom-SVN: r198195", "tree": {"sha": "ec3ed22a6ab6dbfb232e3b6f95456c3b19ea7af1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec3ed22a6ab6dbfb232e3b6f95456c3b19ea7af1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6577bef9b85e7a26f4059ec86bced1651ef2046e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6577bef9b85e7a26f4059ec86bced1651ef2046e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6577bef9b85e7a26f4059ec86bced1651ef2046e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6577bef9b85e7a26f4059ec86bced1651ef2046e/comments", "author": null, "committer": null, "parents": [{"sha": "05c064c1a58fa0500d93e6da59e4d1d119d74e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c064c1a58fa0500d93e6da59e4d1d119d74e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c064c1a58fa0500d93e6da59e4d1d119d74e94"}], "stats": {"total": 185, "additions": 102, "deletions": 83}, "files": [{"sha": "164c690435d9182633da2be5fe1379ec993b70b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -1,3 +1,20 @@\n+2013-04-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* err_vars.ads (Error_Msg_Qual_Level): Set variable to zero\n+\tat declaration.\n+\t* opt.ads (Multiple_Unit_Index): Set variable to zero at declaration.\n+\t* sem_util.adb (NCT_Table_Entries): Set variable to zero at declaration.\n+\t* set_targ.ads (Num_FPT_Modes): Set variable to zero at declaration.\n+\t* stylesw.adb (Save_Style_Check_Options): Protect testing the\n+\tvalue of Style_Check_Comments_Spacing by a previous test that\n+\tStyle_Check_Comments is True.\n+\n+2013-04-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_prag.adb, sem_prag.ads (Effective_Name): Rename to\n+\tOriginal_Name, and move declaration to package body as this\n+\tsubprogram is not used from outside. Also clarify documentation.\n+\n 2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch6.adb (Expand_N_Subprogram_Body): When compiling with"}, {"sha": "bc43cb15230c506673a6dd64a6f7a489653fabdb", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,7 +54,7 @@ package Err_Vars is\n    --  variables are not reset by calls to the error message routines, so the\n    --  caller is responsible for resetting the default behavior after use.\n \n-   Error_Msg_Qual_Level : Int;\n+   Error_Msg_Qual_Level : Int := 0;\n    --  Number of levels of qualification required for type name (see the\n    --  description of the } insertion character. Note that this value does\n    --  note get reset by any Error_Msg call, so the caller is responsible"}, {"sha": "90bc1c9f74fc7084194da40257cc4e4adaab9c99", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -968,7 +968,7 @@ package Opt is\n    --  GNATMAKE\n    --  Set to True if minimal recompilation mode requested\n \n-   Multiple_Unit_Index : Int;\n+   Multiple_Unit_Index : Int := 0;\n    --  GNAT\n    --  This is set non-zero if the current unit is being compiled in multiple\n    --  unit per file mode, meaning that the current unit is selected from the"}, {"sha": "9ffc7b0ee418fbbc7726538d9380d5a8c8c33b29", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 73, "deletions": 63, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -181,6 +181,16 @@ package body Sem_Prag is\n    --  original one, following the renaming chain) is returned. Otherwise the\n    --  entity is returned unchanged. Should be in Einfo???\n \n+   function Original_Name (N : Node_Id) return Name_Id;\n+   --  N is a pragma node or aspect specification node. This function returns\n+   --  the name of the pragma or aspect in original source form, taking into\n+   --  account possible rewrites, and also cases where a pragma comes from an\n+   --  aspect (in such cases, the name can be different from the pragma name,\n+   --  e.g. a Pre aspect generates a Precondition pragma). This also deals with\n+   --  the presence of 'Class, which results in one of the special names\n+   --  Name_uPre, Name_uPost, Name_uInvariant, or Name_uType_Invariant being\n+   --  returned to represent the corresponding aspects with x'Class names.\n+\n    procedure Preanalyze_CTC_Args (N, Arg_Req, Arg_Ens : Node_Id);\n    --  Preanalyze the boolean expressions in the Requires and Ensures arguments\n    --  of a Test_Case pragma if present (possibly Empty). We treat these as\n@@ -2869,7 +2879,7 @@ package body Sem_Prag is\n \n             --  Get name from corresponding aspect\n \n-            Error_Msg_Name_1 := Effective_Name (N);\n+            Error_Msg_Name_1 := Original_Name (N);\n          end if;\n       end Fix_Error;\n \n@@ -6749,7 +6759,7 @@ package body Sem_Prag is\n       --  Here to start processing for recognized pragma\n \n       Prag_Id := Get_Pragma_Id (Pname);\n-      Pname := Effective_Name (N);\n+      Pname := Original_Name (N);\n \n       --  Check applicable policy. We skip this for a pragma that came from\n       --  an aspect, since we already dealt with the Disable case, and we set\n@@ -17990,7 +18000,7 @@ package body Sem_Prag is\n       PP     : Node_Id;\n       Policy : Name_Id;\n \n-      Ename : constant Name_Id := Effective_Name (N);\n+      Ename : constant Name_Id := Original_Name (N);\n \n    begin\n       --  No effect if not valid assertion kind name\n@@ -18050,66 +18060,6 @@ package body Sem_Prag is\n                                       Name_Priority_Specific_Dispatching);\n    end Delay_Config_Pragma_Analyze;\n \n-   --------------------\n-   -- Effective_Name --\n-   --------------------\n-\n-   function Effective_Name (N : Node_Id) return Name_Id is\n-      Pras : Node_Id;\n-      Name : Name_Id;\n-\n-   begin\n-      pragma Assert (Nkind_In (N, N_Aspect_Specification, N_Pragma));\n-      Pras := N;\n-\n-      if Is_Rewrite_Substitution (Pras)\n-        and then Nkind (Original_Node (Pras)) = N_Pragma\n-      then\n-         Pras := Original_Node (Pras);\n-      end if;\n-\n-      --  Case where we came from aspect specication\n-\n-      if Nkind (Pras) = N_Pragma and then From_Aspect_Specification (Pras) then\n-         Pras := Corresponding_Aspect (Pras);\n-      end if;\n-\n-      --  Get name from aspect or pragma\n-\n-      if Nkind (Pras) = N_Pragma then\n-         Name := Pragma_Name (Pras);\n-      else\n-         Name := Chars (Identifier (Pras));\n-      end if;\n-\n-      --  Deal with 'Class\n-\n-      if Class_Present (Pras) then\n-         case Name is\n-\n-         --  Names that need converting to special _xxx form\n-\n-            when Name_Pre             => Name := Name_uPre;\n-            when Name_Post            => Name := Name_uPost;\n-            when Name_Invariant       => Name := Name_uInvariant;\n-            when Name_Type_Invariant  => Name := Name_uType_Invariant;\n-\n-               --  Names already in special _xxx form (leave them alone)\n-\n-            when Name_uPre            => null;\n-            when Name_uPost           => null;\n-            when Name_uInvariant      => null;\n-            when Name_uType_Invariant => null;\n-\n-               --  Anything else is impossible with Class_Present set True\n-\n-            when others               => raise Program_Error;\n-         end case;\n-      end if;\n-\n-      return Name;\n-   end Effective_Name;\n-\n    -------------------------\n    -- Get_Base_Subprogram --\n    -------------------------\n@@ -18664,6 +18614,66 @@ package body Sem_Prag is\n       end if;\n    end Make_Aspect_For_PPC_In_Gen_Sub_Decl;\n \n+   -------------------\n+   -- Original_Name --\n+   -------------------\n+\n+   function Original_Name (N : Node_Id) return Name_Id is\n+      Pras : Node_Id;\n+      Name : Name_Id;\n+\n+   begin\n+      pragma Assert (Nkind_In (N, N_Aspect_Specification, N_Pragma));\n+      Pras := N;\n+\n+      if Is_Rewrite_Substitution (Pras)\n+        and then Nkind (Original_Node (Pras)) = N_Pragma\n+      then\n+         Pras := Original_Node (Pras);\n+      end if;\n+\n+      --  Case where we came from aspect specication\n+\n+      if Nkind (Pras) = N_Pragma and then From_Aspect_Specification (Pras) then\n+         Pras := Corresponding_Aspect (Pras);\n+      end if;\n+\n+      --  Get name from aspect or pragma\n+\n+      if Nkind (Pras) = N_Pragma then\n+         Name := Pragma_Name (Pras);\n+      else\n+         Name := Chars (Identifier (Pras));\n+      end if;\n+\n+      --  Deal with 'Class\n+\n+      if Class_Present (Pras) then\n+         case Name is\n+\n+         --  Names that need converting to special _xxx form\n+\n+            when Name_Pre             => Name := Name_uPre;\n+            when Name_Post            => Name := Name_uPost;\n+            when Name_Invariant       => Name := Name_uInvariant;\n+            when Name_Type_Invariant  => Name := Name_uType_Invariant;\n+\n+               --  Names already in special _xxx form (leave them alone)\n+\n+            when Name_uPre            => null;\n+            when Name_uPost           => null;\n+            when Name_uInvariant      => null;\n+            when Name_uType_Invariant => null;\n+\n+               --  Anything else is impossible with Class_Present set True\n+\n+            when others               => raise Program_Error;\n+         end case;\n+      end if;\n+\n+      return Name;\n+   end Original_Name;\n+\n    -------------------------\n    -- Preanalyze_CTC_Args --\n    -------------------------"}, {"sha": "3ec3e3b1b7d5943f525d8c4a42e66dfd155e764b", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -104,16 +104,6 @@ package Sem_Prag is\n    --  True have their analysis delayed until after the main program is parsed\n    --  and analyzed.\n \n-   function Effective_Name (N : Node_Id) return Name_Id;\n-   --  N is a pragma node or aspect specification node. This function returns\n-   --  the name of the pragma or aspect, taking into account possible rewrites,\n-   --  and also cases where a pragma comes from an aspect (in such cases,\n-   --  the name can be different from the pragma name, e.g. Pre generates\n-   --  a Precondition pragma). This also deals with the presence of 'Class\n-   --  which results in one of the special names Name_uPre, Name_uPost,\n-   --  Name_uInvariant, or Name_uType_Invariant being returned to represent\n-   --  the corresponding aspects with x'Class names.\n-\n    procedure Initialize;\n    --  Initializes data structures used for pragma processing. Must be called\n    --  before analyzing each new main source program."}, {"sha": "e82080e8d61c36c84ac3d8d3a12b5b5ed80ae82a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -83,7 +83,7 @@ package body Sem_Util is\n    NCT_Hash_Tables_Used : Boolean := False;\n    --  Set to True if hash tables are in use\n \n-   NCT_Table_Entries : Nat;\n+   NCT_Table_Entries : Nat := 0;\n    --  Count entries in table to see if threshold is reached\n \n    NCT_Hash_Table_Setup : Boolean := False;"}, {"sha": "a14fbcbce3ea3ad079aed81f101d1cdcb1c177ca", "filename": "gcc/ada/set_targ.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fset_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fset_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.ads?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -98,7 +98,7 @@ package Set_Targ is\n    end record;\n \n    FPT_Mode_Table : array (1 .. 1000) of FPT_Mode_Entry;\n-   Num_FPT_Modes  : Natural;\n+   Num_FPT_Modes  : Natural := 0;\n    --  Table containing the supported modes and number of entries\n \n    -----------------"}, {"sha": "7b78a1643959cc8371c2a02d73a67130d07b38ba", "filename": "gcc/ada/stylesw.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fstylesw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6577bef9b85e7a26f4059ec86bced1651ef2046e/gcc%2Fada%2Fstylesw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.adb?ref=6577bef9b85e7a26f4059ec86bced1651ef2046e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -161,10 +161,12 @@ package body Stylesw is\n       Add ('b', Style_Check_Blanks_At_End);\n       Add ('B', Style_Check_Boolean_And_Or);\n \n-      if Style_Check_Comments_Spacing = 2 then\n-         Add ('c', Style_Check_Comments);\n-      elsif Style_Check_Comments_Spacing = 1 then\n-         Add ('C', Style_Check_Comments);\n+      if Style_Check_Comments then\n+         if Style_Check_Comments_Spacing = 2 then\n+            Add ('c', Style_Check_Comments);\n+         elsif Style_Check_Comments_Spacing = 1 then\n+            Add ('C', Style_Check_Comments);\n+         end if;\n       end if;\n \n       Add ('d', Style_Check_DOS_Line_Terminator);"}]}