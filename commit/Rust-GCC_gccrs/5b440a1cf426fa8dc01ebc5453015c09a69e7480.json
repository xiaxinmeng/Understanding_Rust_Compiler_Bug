{"sha": "5b440a1cf426fa8dc01ebc5453015c09a69e7480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0NDBhMWNmNDI2ZmE4ZGMwMWViYzU0NTMwMTVjMDlhNjllNzQ4MA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-10-16T22:29:46Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-10-16T22:29:46Z"}, "message": "[multiple changes]\n\n2006-10-17  Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/20541\n\t* trans-array.c (gfc_trans_array_bounds): Test for and set\n\tnegative stride of a non-constant bound array to zero.\n\n\tPR fortran/29392\n\t* data.c (create_character_intializer): Copy and simplify\n\tthe expressions for the start and end of a sub-string\n\treference.\n\n2006-10-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29392\n\t* gfortran.dg/data_char_3.f90: New test.\n\n\tPR fortran/20541\n\t* gfortran.dg/negative_automatic_size.f90: New test.\n\nFrom-SVN: r117797", "tree": {"sha": "36463b2afe69cf810cf47a28df21f64d27c408bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36463b2afe69cf810cf47a28df21f64d27c408bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b440a1cf426fa8dc01ebc5453015c09a69e7480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b440a1cf426fa8dc01ebc5453015c09a69e7480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b440a1cf426fa8dc01ebc5453015c09a69e7480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b440a1cf426fa8dc01ebc5453015c09a69e7480/comments", "author": null, "committer": null, "parents": [{"sha": "f2523ab3c482c8cd066d5760b32eb843829300fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2523ab3c482c8cd066d5760b32eb843829300fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2523ab3c482c8cd066d5760b32eb843829300fa"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "ac027c74ad94a18fb2006402fbce8bf9a0dc072f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5b440a1cf426fa8dc01ebc5453015c09a69e7480", "patch": "@@ -1,3 +1,14 @@\n+2006-10-17  Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/20541\n+\t* trans-array.c (gfc_trans_array_bounds): Test for and set\n+\tnegative stride of a non-constant bound array to zero.\n+\n+\tPR fortran/29392\n+\t* data.c (create_character_intializer): Copy and simplify\n+\tthe expressions for the start and end of a sub-string\n+\treference.\n+\n 2006-10-16  Kaz Kojima  <kkojima@rr.iij4u.or.jp>\n \n \t* io.c (gfc_match_close): Ensure that status is terminated by"}, {"sha": "2ab6f507bbebf00da6d92870d94831b5aba78d10", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=5b440a1cf426fa8dc01ebc5453015c09a69e7480", "patch": "@@ -167,13 +167,26 @@ create_character_intializer (gfc_expr * init, gfc_typespec * ts,\n \n   if (ref)\n     {\n+      gfc_expr *start_expr, *end_expr;\n+\n       gcc_assert (ref->type == REF_SUBSTRING);\n \n       /* Only set a substring of the destination.  Fortran substring bounds\n          are one-based [start, end], we want zero based [start, end).  */\n-      gfc_extract_int (ref->u.ss.start, &start);\n+      start_expr = gfc_copy_expr (ref->u.ss.start);\n+      end_expr = gfc_copy_expr (ref->u.ss.end);\n+\n+      if ((gfc_simplify_expr (start_expr, 1) == FAILURE)\n+\t     || (gfc_simplify_expr (end_expr, 1)) == FAILURE)\n+\t{\n+\t  gfc_error (\"failure to simplify substring reference in DATA\"\n+\t\t     \"statement at %L\", &ref->u.ss.start->where);\n+\t  return NULL;\n+\t}\n+\n+      gfc_extract_int (start_expr, &start);\n       start--;\n-      gfc_extract_int (ref->u.ss.end, &end);\n+      gfc_extract_int (end_expr, &end);\n     }\n   else\n     {"}, {"sha": "6fd93dd374579e268f39882b9086dbaeefb11099", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=5b440a1cf426fa8dc01ebc5453015c09a69e7480", "patch": "@@ -3540,6 +3540,14 @@ gfc_trans_array_bounds (tree type, gfc_symbol * sym, tree * poffset,\n             gfc_add_modify_expr (pblock, stride, tmp);\n           else\n             stride = gfc_evaluate_now (tmp, pblock);\n+\n+\t  /* Make sure that negative size arrays are translated\n+\t     to being zero size.  */\n+\t  tmp = build2 (GE_EXPR, boolean_type_node,\n+\t\t\tstride, gfc_index_zero_node);\n+\t  tmp = build3 (COND_EXPR, gfc_array_index_type, tmp,\n+\t\t\tstride, gfc_index_zero_node);\n+\t  gfc_add_modify_expr (pblock, stride, tmp);\n         }\n \n       size = stride;"}, {"sha": "5fed58bc537f20fd8366e3e038e4472108394338", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b440a1cf426fa8dc01ebc5453015c09a69e7480", "patch": "@@ -1,3 +1,11 @@\n+2006-10-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29392\n+\t* gfortran.dg/data_char_3.f90: New test.\n+\n+\tPR fortran/20541\n+\t* gfortran.dg/negative_automatic_size.f90: New test.\n+\n 2006-10-16  David Daney  <ddaney@avtrex.com>\n \n \t* g++.dg/other/unused1.C : Match on '.ascii\\t\"name\\000\"' also."}, {"sha": "022ec5c12e7a1d210365f66d7dfbda4ec97c3657", "filename": "gcc/testsuite/gfortran.dg/data_char_3.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_3.f90?ref=5b440a1cf426fa8dc01ebc5453015c09a69e7480", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do run }\n+! { dg-options \"-O2\" }\n+! Tests the fix PR29392, in which the iterator valued substring\n+! reference would cause a segfault.\n+!\n+! Contributed by Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>   \n+!\n+  character(LEN=2) :: a(2) \n+  data ((a(I)(k:k),I=1,2),k=1,2) /2*'a',2*'z'/ \n+  IF (ANY(a.NE.\"az\")) CALL ABORT() \n+  END "}, {"sha": "322eafe9fe1fd7c26a61604a7422e9411f374abb", "filename": "gcc/testsuite/gfortran.dg/negative_automatic_size.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_automatic_size.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b440a1cf426fa8dc01ebc5453015c09a69e7480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_automatic_size.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_automatic_size.f90?ref=5b440a1cf426fa8dc01ebc5453015c09a69e7480", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+! { dg-options \"-O2\" }\n+! Tests the fix PR29451, in which the negative size of the\n+! automatic array 'jello' was not detected and the\n+! runtime error: Attempt to allocate a negative amount of memory\n+! resulted.\n+!\n+! Contributed by Philip Mason  <pmason@ricardo.com> \n+!\n+program fred\n+  call jackal (1, 0)\n+  call jackal (2, 1)\n+  call jackal (3, 0)\n+end\n+\n+subroutine jackal (b, c)\n+  integer :: b, c\n+  integer :: jello(b:c), cake(1:2, b:c), soda(b:c, 1:2)\n+  if (lbound (jello, 1) <= ubound (jello, 1)) call abort ()\n+  if (size (jello) /= 0) call abort ()\n+\n+  if (.not.any(lbound (cake) <= ubound (cake))) call abort ()\n+  if (size (cake) /= 0) call abort ()\n+\n+  if ((lbound (soda, 1) > ubound (soda, 1)) .and. &\n+      (lbound (soda, 2) > ubound (soda, 2))) call abort ()\n+  if (size (soda) /= 0) call abort ()\n+\n+end subroutine jackal"}]}