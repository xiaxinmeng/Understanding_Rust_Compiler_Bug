{"sha": "a8c8351cf4fedb842988eed4f73304019c361e86", "node_id": "C_kwDOANBUbNoAKGE4YzgzNTFjZjRmZWRiODQyOTg4ZWVkNGY3MzMwNDAxOWMzNjFlODY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-04-07T00:17:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-04-07T00:17:36Z"}, "message": "Daily bump.", "tree": {"sha": "1b994939d1208378622504da79cba6ee0faa401c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b994939d1208378622504da79cba6ee0faa401c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8c8351cf4fedb842988eed4f73304019c361e86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c8351cf4fedb842988eed4f73304019c361e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c8351cf4fedb842988eed4f73304019c361e86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c8351cf4fedb842988eed4f73304019c361e86/comments", "author": null, "committer": null, "parents": [{"sha": "1d509f190393627cffffdf0afffc427b25dd21c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d509f190393627cffffdf0afffc427b25dd21c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d509f190393627cffffdf0afffc427b25dd21c2"}], "stats": {"total": 1272, "additions": 1271, "deletions": 1}, "files": [{"sha": "61b05aa486c979333d212925fd1ab760f2b93390", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c8351cf4fedb842988eed4f73304019c361e86/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c8351cf4fedb842988eed4f73304019c361e86/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a8c8351cf4fedb842988eed4f73304019c361e86", "patch": "@@ -1,3 +1,7 @@\n+2023-04-06  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* MAINTAINERS: Add myself.\n+\n 2023-03-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* MAINTAINERS: Add myself as OpenMP and libgomp maintainer."}, {"sha": "02b49d14726ae89934c97421da6236d066f8c336", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8c8351cf4fedb842988eed4f73304019c361e86", "patch": "@@ -1,3 +1,21 @@\n+2023-04-06  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/107674\n+\t* config/arm/arm.cc (arm_effective_regno): New function.\n+\t(mve_vector_mem_operand): Use it.\n+\n+2023-04-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109417\n+\t* gimple-range-gori.cc (gori_compute::may_recompute_p): Check if\n+\tdependency is in SSA_NAME_FREE_LIST.\n+\n+2023-04-06  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/109427\n+\t* params.opt (-param=vect-induction-float=):\n+\tFix option attribute typo for IntegerRange.\n+\n 2023-04-05  Jeff Law  <jlaw@ventanamicro>\n \n \tPR target/108892"}, {"sha": "0baf8f5399650c8d9ca6d684c3f8b104cc8d948c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a8c8351cf4fedb842988eed4f73304019c361e86", "patch": "@@ -1 +1 @@\n-20230406\n+20230407"}, {"sha": "25b8ddff9e84caa3f1810bfdb308eef5ffa4d659", "filename": "gcc/rust/ChangeLog", "status": "modified", "additions": 950, "deletions": 0, "changes": 950, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2Frust%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2Frust%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FChangeLog?ref=a8c8351cf4fedb842988eed4f73304019c361e86", "patch": "@@ -1,3 +1,953 @@\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* parse/rust-parse-impl.h\n+\t(Parser::parse_stmt): Handle unsafe expression statements.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* parse/rust-parse-impl.h\n+\t(Parser::parse_expr_stmt): Remove hypothetical unsafe + expr_stmt_without_block handling.\n+\n+2023-04-06  M V V S Manoj Kumar  <mvvsmanojkumar@gmail.com>\n+\n+\t* ast/rust-ast-full-decls.h (class InlineAsm):Added class declaration.\n+\t* ast/rust-expr.h (class InlineAsm):Added class definition.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust-diagnostics.h (struct Error): Add new Kind enum and various new\n+\tstatic constructors to allow for hints as well.\n+\t* rust-diagnostics.cc (Error::Error): Use new `kind` field properly.\n+\t* checks/errors/privacy/rust-visibility-resolver.cc\n+\t(VisibilityResolver::resolve_module_path): Use new Error API.\n+\t* expand/rust-macro-builtins.cc (MacroBuiltin::include_handler): Likewise.\n+\t* expand/rust-macro-expand.cc (parse_many): Likewise.\n+\t(transcribe_type): Likewise.\n+\t* parse/rust-parse-impl.h (Parser::parse_crate): Likewise.\n+\t* rust-session-manager.cc (Session::handle_crate_name): Likewise.\n+\t* ast/rust-ast.cc (Module::load_items): Likewise.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast.h: Keep location in TraitItem base class\n+\t* ast/rust-item.h (class TraitItemFunc): Use base class location instead.\n+\t(class TraitItemMethod): Likewise.\n+\t(class TraitItemConst): Likewise.\n+\t(class TraitItemType): Likewise.\n+\t* ast/rust-macro.h: Likewise.\n+\n+2023-04-06  SainiAditya1  <Adityasaini10012001@outlook.com>\n+\n+\t* hir/tree/rust-hir-full-test.cc: Moved to...\n+\t* hir/tree/rust-hir.cc: ...here.\n+\t* Make-lang.in: Rename rust-hir-full-test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* ast/rust-ast-dump.cc\n+\t(Dump::visit): Add AltPattern visitor.\n+\t* ast/rust-ast-dump.h:\n+\t(Dump::visit): Add AltPattern visitor.\n+\t* ast/rust-ast-full-decls.h\n+\t(class AltPattern): Add declaration.\n+\t* ast/rust-ast-visitor.h:\n+\t(ASTVisitor::visit): Add AltPattern visitor.\n+\t* ast/rust-ast.cc\n+\t(AltPattern::as_string): Add definition.\n+\t(AltPattern::accept_vis): Add definition.\n+\t* ast/rust-pattern.h\n+\t(class AltPattern): Add declaration.\n+\t* checks/errors/rust-feature-gate.h:\n+\t(FeatureGate::visit) Add AltPattern visitor\n+\t* expand/rust-attribute-visitor.cc\n+\t(AttrVisitor::visit): Add AltPattern visitor.\n+\t* expand/rust-attribute-visitor.h:\n+\t(AttrVisitor::visit): Add AltPattern visitor.\n+\t* hir/rust-ast-lower-base.cc\n+\t(ASTLoweringBase::visit): Add AltPattern visitor.\n+\t* hir/rust-ast-lower-base.h:\n+\t(ASTLoweringBase::visit): Add AltPattern visitor.\n+\t* resolve/rust-ast-resolve-base.cc\n+\t(ResolverBase::visit): Add AltPattern visitor.\n+\t* resolve/rust-ast-resolve-base.h:\n+\t(ResolverBase::visit): Add AltPattern visitor.\n+\t* resolve/rust-early-name-resolver.cc\n+\t(EarlyNameResolver::visit): Add AltPattern visitor.\n+\t* resolve/rust-early-name-resolver.h:\n+\t(EarlyNameResolver::visit): Add AltPattern visitor.\n+\t* util/rust-attributes.cc\n+\t(AttributeChecker::visit): Add AltPattern visitor.\n+\t* util/rust-attributes.h:\n+\t(AttributeChecker::visit): Add AltPattern visitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* ast/rust-pattern.h: Fix formatting.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-builtins.cc (MacroBuiltin::include_handler): Do not\n+\treturn nullptr token in expansion of `include!()`\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* checks/errors/rust-feature-gate.h: Add trailing newline before EOF.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-reference.cc (TraitReference::clear_associated_types): make const\n+\t(TraitReference::clear_associated_type_projections): new interface\n+\t* typecheck/rust-hir-trait-reference.h:\n+\t* typecheck/rust-hir-trait-resolve.cc (TraitResolver::resolve_trait): refactor\n+\t(TraitItemReference::associated_type_reset): reset projections\n+\t* typecheck/rust-hir-type-bounds.h:\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): fix bounds\n+\t* typecheck/rust-tyty-bounds.cc (TypeBoundsProbe::TypeBoundsProbe): refactor into cc file\n+\t(TypeBoundsProbe::Probe): refactor\n+\t(TypeBoundsProbe::is_bound_satisfied_for_type): likewise\n+\t(TypeBoundsProbe::assemble_sized_builtin): add builtin for Sized\n+\t(TypeCheckBase::get_predicate_from_bound): refactor\n+\t(TypeBoundPredicate::lookup_associated_type): refactor\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionRef::lookup_associated_impl)\n+\t(SubstitutionRef::prepare_higher_ranked_bounds): new interface to clear hanging bounds\n+\t(SubstitutionRef::monomorphize): refactor\n+\t* typecheck/rust-tyty-subst.h:\n+\t* typecheck/rust-tyty.cc (BaseType::get_locus): helper\n+\t(BaseType::satisfies_bound): ensure bounds are satisfied and assoicated types\n+\t(ParamType::ParamType): new field in constructor\n+\t(ParamType::clone): update clone\n+\t(ParamType::set_implicit_self_trait): new interface\n+\t(ParamType::is_implicit_self_trait): likewise\n+\t* typecheck/rust-tyty.h: cleanup\n+\t* util/rust-hir-map.cc (Mappings::Mappings): builtin marker\n+\t(Mappings::~Mappings): delete marker\n+\t(Mappings::lookup_builtin_marker): lookup\n+\t* util/rust-hir-map.h: update header\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* hir/tree/rust-hir-item.h: implement virtual function\n+\t* hir/tree/rust-hir.h: add virtual function\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: add new dependancy\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::query_type): refactor\n+\t* typecheck/rust-hir-type-check-base.h: refactor\n+\t* typecheck/rust-hir-type-check.h (RUST_HIR_TYPE_CHECK): refactor\n+\t* typecheck/rust-type-util.cc: New file.\n+\t* typecheck/rust-type-util.h: New file.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* expand/rust-macro-builtins.cc\n+\t(MacroBuiltin::include_str_handler): Add check for valid UTF-8.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* parse/rust-parse-impl.h\n+\t(Parser::parse_grouped_or_tuple_pattern): Add support for empty tuple patterns.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* lex/rust-lex.h: Add file type check.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-pattern.cc\n+\t(CompilePatternLet::visit): Simplify WildcardPattern compilation for let statements.\n+\t* backend/rust-compile-var-decl.h:\n+\t(CompileVarDecl::visit): Remove variable declaration for WildcardPattern.\n+\t* resolve/rust-ast-resolve-pattern.h:\n+\t(PatternDeclaration::visit): Remove name resolution for WildcardPattern.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* typecheck/rust-tyty-call.cc\n+\t(TypeCheckCallExpr::visit): Add variadic argument type checking.\n+\t(TypeCheckCallExpr::visit): Fix comment spelling (\"varadic\").\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* checks/errors/rust-feature-gate.cc: Add implementation for\n+\t`void FeatureGate::visit (AST::ExternBlock &block)`. Add `valid_feature`\n+\tconstruction process in `FeatureGate::check`.\n+\t* checks/errors/rust-feature-gate.h: Add declaration for\n+\t`void FeatureGate::visit (AST::ExternBlock &block)`. Add private\n+\tvariable `valid_feature`.\n+\t* checks/errors/rust-feature.h: Change `issue` to `m_issue`.\n+\n+2023-04-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* ast/rust-ast-fragment.cc: Update copyright years.\n+\t* ast/rust-ast-fragment.h: Likewise.\n+\t* ast/rust-macro.cc: Likewise.\n+\t* checks/errors/rust-feature-gate.cc: Likewise.\n+\t* checks/errors/rust-feature-gate.h: Likewise.\n+\t* checks/errors/rust-feature.cc: Likewise.\n+\t* checks/errors/rust-feature.h: Likewise.\n+\t* hir/rust-ast-lower-expr.cc: Likewise.\n+\t* hir/rust-ast-lower-type.cc: Likewise.\n+\t* resolve/rust-early-name-resolver.cc: Likewise.\n+\t* resolve/rust-early-name-resolver.h: Likewise.\n+\t* rust-gcc.h: Likewise.\n+\t* typecheck/rust-hir-path-probe.cc: Likewise.\n+\t* typecheck/rust-hir-trait-reference.cc: Likewise.\n+\t* typecheck/rust-tyty-bounds.h: Likewise.\n+\t* typecheck/rust-tyty-subst.cc: Likewise.\n+\t* typecheck/rust-tyty-subst.h: Likewise.\n+\t* typecheck/rust-tyty-util.cc: Likewise.\n+\t* typecheck/rust-tyty-util.h: Likewise.\n+\t* typecheck/rust-unify.cc: Likewise.\n+\t* typecheck/rust-unify.h: Likewise.\n+\t* util/rust-inline-visitor.h: Likewise.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* rust-session-manager.cc (Session::compile_crate): Update the\n+\tenvironment variable name.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* Make-lang.in: Add `rust-hir-trait-reference.o`.\n+\t* typecheck/rust-hir-trait-reference.h: Remove multiple function body.\n+\t* typecheck/rust-hir-trait-reference.cc: Add multiple function body.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-expand.cc (MacroExpander::expand_eager_invocations):\n+\tAdd documentation explaining the algorithm.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-macro.cc: New file.\n+\t* Make-lang.in: Add `rust-macro.o` object\n+\t* ast/rust-ast-fragment.cc (Fragment::Fragment): Change API around\n+\tthe construction of AST fragments.\n+\t(Fragment::operator=): Correct `Fragment::operator=` to take into\n+\taccount the fragment tokens.\n+\t(Fragment::create_error): Use new constructor.\n+\t(Fragment::complete): Remove in favor of new constructor.\n+\t(Fragment::unexpanded): Remove as that Fragment type is no longer used\n+\tor possible.\n+\t(Fragment::get_tokens): Add helper to access a fragment's tokens.\n+\t* ast/rust-ast-fragment.h (enum class): Remove `FragmentKind::Unused`\n+\t* ast/rust-ast.cc (MacroInvocation::as_string): Display\n+\tbuiltin macro invocations properly.\n+\t* ast/rust-ast.h: Fix `DelimTokenTree` class copy constructors and\n+\thandling of its token vector.\n+\t* ast/rust-macro.h (class MacroMatcher): Format.\n+\t(class MetaItemSeq): Likewise.\n+\t(builtin_macro_from_string): Get a `BuiltinMacroKind` from a given\n+\tstring, i.e the name of the macro (`assert!`, `cfg!` and so on).\n+\t* expand/rust-attribute-visitor.cc (AttrVisitor::visit): Do not expand\n+\tmacros recursively anymore.\n+\t(AttrVisitor::maybe_expand_expr): Likewise.\n+\t(AttrVisitor::maybe_expand_type): Likewise.\n+\t* expand/rust-attribute-visitor.h: Likewise, and remove\n+\t`expand_macro_fragment_recursively` function.\n+\t* expand/rust-macro-builtins.cc (make_token): Add shorthand for\n+\treturning `std::unique_ptr<AST::Token>`s.\n+\t(make_macro_invocation): Add shorthand for returning fragments\n+\tcontaining builtin macro invocations.\n+\t(try_expand_macro_expression): Do not expand macros recursively.\n+\t(try_expand_single_string_literal): Likewise.\n+\t(try_expand_many_expr): Likewise.\n+\t(parse_single_string_literal): Error out more appropriately.\n+\t(MacroBuiltin::compile_error_handler): Add explanation for eager\n+\tinvocation\n+\t(MacroBuiltin::file_handler): Return the proper tokens associated with\n+\tmacro invocation, and builtin macros in the case of necessary eager\n+\texpansion.\n+\t(MacroBuiltin::column_handler): Likewise.\n+\t(MacroBuiltin::include_bytes_handler): Likewise.\n+\t(MacroBuiltin::include_str_handler): Likewise.\n+\t(MacroBuiltin::concat_handler): Likewise.\n+\t(MacroBuiltin::env_handler): Likewise.\n+\t(MacroBuiltin::cfg_handler): Likewise.\n+\t(MacroBuiltin::include_handler): Likewise.\n+\t(MacroBuiltin::line_handler): Likewise.\n+\t* expand/rust-macro-expand.cc (MacroExpander::expand_eager_invocations):\n+\tAdd function to expand eager invocations *once* in the fixed point\n+\tpipeline.\n+\t(MacroExpander::expand_invoc): Call into `expand_eager_invocations` for\n+\tbuiltin macro invocations.\n+\t(MacroExpander::expand_crate): Use new `AttrVisitor` API.\n+\t(parse_many): Return tokens in `AST::Fragment`.\n+\t(transcribe_expression): Likewise.\n+\t(transcribe_type): Likewise.\n+\t* expand/rust-macro-expand.h (struct MacroExpander): Add `has_changed`\n+\tflag for fixed point checking.\n+\t* resolve/rust-early-name-resolver.cc (EarlyNameResolver::EarlyNameResolver):\n+\tKeep track of the current macro scope.\n+\t(EarlyNameResolver::go): Use `scoped` API.\n+\t(EarlyNameResolver::visit): Likewise.\n+\t* resolve/rust-early-name-resolver.h: Add `scoped` API.\n+\t* rust-session-manager.cc (Session::expansion): Perform macro expansion\n+\tin a fixed-point fashion.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-invoc-lexer.cc (MacroInvocLexer::get_token_slice):\n+\tAdd API to retrieve token slices when lexing macro expansions.\n+\t* expand/rust-macro-invoc-lexer.h: Declare `get_token_slice`.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse.h: Move `parse_macro_invocation` to public API.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-item.h (class BlockExpr): Remove forward declaration of\n+\tclass `BlockExpr`.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/tree/rust-hir-pattern.h\n+\t(TuplePatternItemsRanged::get_lower_patterns): Add method.\n+\t(TuplePatternItemsRanged::get_upper_patterns): Add method.\n+\t* backend/rust-compile-pattern.cc\n+\t(CompilePatternLet::visit): Implement TuplePattern visitor.\n+\t* backend/rust-compile-pattern.h\n+\t(CompilePatternLet::visit): Move TuplePattern visitor out of header file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-unify.cc (UnifyRules::go): ensure the bounds are checked\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): remove error message\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-reference.h: add const infterface\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionParamMapping::get_generic_param): make const\n+\t(SubstitutionRef::monomorphize): fix issue\n+\t* typecheck/rust-tyty-subst.h: constify interface\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* util/rust-lang-item.h:\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionArg::is_conrete): fix check\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update names\n+\t* backend/rust-compile-expr.cc (CompileExpr::resolve_method_address):\n+\tupdate to use new interface\n+\t* typecheck/rust-coercion.cc (TypeCoercionRules::coerce_borrowed_pointer): likewise\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::unify_site): likewise\n+\t* typecheck/rust-tyty.cc (BaseType::destructure): likewise\n+\t(InferType::unify): removed old unify interface\n+\t(ErrorType::unify): likewise\n+\t(ADTType::unify): likewise\n+\t(TupleType::unify): likewise\n+\t(FnType::unify): likewise\n+\t(FnPtr::unify): likewise\n+\t(ClosureType::unify): likewise\n+\t(ArrayType::unify): likewise\n+\t(SliceType::unify): likewise\n+\t(BoolType::unify): likewise\n+\t(IntType::unify): likewise\n+\t(UintType::unify): likewise\n+\t(FloatType::unify): likewise\n+\t(USizeType::unify): likewise\n+\t(ISizeType::unify): likewise\n+\t(CharType::unify): likewise\n+\t(ReferenceType::unify): likewise\n+\t(PointerType::unify): likewise\n+\t(ParamType::unify): likewise\n+\t(StrType::unify): likewise\n+\t(NeverType::unify): likewise\n+\t(PlaceholderType::unify): likewise\n+\t(ProjectionType::unify): likewise\n+\t(DynamicObjectType::unify): likewise\n+\t* typecheck/rust-tyty.h: update destructure interface\n+\t* typecheck/rust-tyty-rules.h: Removed.\n+\t* typecheck/rust-unify.cc: New file.\n+\t* typecheck/rust-unify.h: New file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-reference.h: change interface to return self\n+\t* typecheck/rust-hir-trait-resolve.cc: likewise\n+\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_segments): likewise\n+\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): remove monomorphization hack\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-subst.cc: add missing callback\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-subst.cc: update copy constructors\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-bounds.cc: refactor to take a reference\n+\t* typecheck/rust-tyty-subst.cc: likewise\n+\t(SubstitutionRef::get_substitution_arguments): likewise\n+\t(SubstitutionRef::infer_substitions): likewise\n+\t* typecheck/rust-tyty-subst.h: likewise\n+\t* typecheck/rust-tyty.cc (ADTType::handle_substitions): likewise\n+\t(TupleType::handle_substitions): likewise\n+\t(FnType::handle_substitions): likewise\n+\t(ClosureType::handle_substitions): likewise\n+\t(ArrayType::handle_substitions): likewise\n+\t(SliceType::handle_substitions): likewise\n+\t(ReferenceType::handle_substitions): likewise\n+\t(PointerType::handle_substitions): likewise\n+\t(ParamType::handle_substitions): likewise\n+\t(ProjectionType::handle_substitions): likewise\n+\t* typecheck/rust-tyty.h: likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-ref.h: Moved to...\n+\t* typecheck/rust-hir-trait-reference.h: ...here.\n+\t* typecheck/rust-hir-trait-resolve.cc: refactor\n+\t* typecheck/rust-hir-trait-resolve.h (RUST_HIR_TRAIT_RESOLVE_H): likewise\n+\t* typecheck/rust-hir-type-check.h: likewise\n+\t* typecheck/rust-tyty.cc: likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update name\n+\t* typecheck/rust-tyctx.cc: Moved to...\n+\t* typecheck/rust-typecheck-context.cc: ...here.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-type-check.h: refactor\n+\t* typecheck/rust-tyctx.cc (TypeCheckContext::iterate): refactor\n+\t(TypeCheckContext::have_loop_context): likewise\n+\t(TypeCheckContext::push_new_loop_context): likewise\n+\t(TypeCheckContext::push_new_while_loop_context): likewise\n+\t(TypeCheckContext::peek_loop_context): likewise\n+\t(TypeCheckContext::pop_loop_context): likewise\n+\t(TypeCheckContext::swap_head_loop_context): likewise\n+\t(TypeCheckContext::insert_trait_reference): likewise\n+\t(TypeCheckContext::lookup_trait_reference): likewise\n+\t(TypeCheckContext::insert_receiver): likewise\n+\t(TypeCheckContext::lookup_receiver): likewise\n+\t(TypeCheckContext::insert_associated_type_mapping): likewise\n+\t(TypeCheckContext::clear_associated_type_mapping): likewise\n+\t(TypeCheckContext::lookup_associated_type_mapping): likewise\n+\t(TypeCheckContext::insert_variant_definition): likewise\n+\t(TypeCheckContext::lookup_variant_definition): likewise\n+\t(TypeCheckContext::insert_operator_overload): likewise\n+\t(TypeCheckContext::lookup_operator_overload): likewise\n+\t(TypeCheckContext::insert_unconstrained_check_marker): likewise\n+\t(TypeCheckContext::have_checked_for_unconstrained): likewise\n+\t(TypeCheckContext::insert_resolved_predicate): likewise\n+\t(TypeCheckContext::lookup_predicate): likewise\n+\t(TypeCheckContext::insert_query): likewise\n+\t(TypeCheckContext::query_completed): likewise\n+\t(TypeCheckContext::query_in_progress): likewise\n+\t(TypeCheckContext::insert_trait_query): likewise\n+\t(TypeCheckContext::trait_query_completed): likewise\n+\t(TypeCheckContext::trait_query_in_progress): likewise\n+\t(TypeCheckContextItem::Item::Item): likewise\n+\t(TypeCheckContextItem::TypeCheckContextItem): likewise\n+\t(TypeCheckContextItem::get_item): likewise\n+\t(TypeCheckContextItem::get_impl_item): likewise\n+\t(TypeCheckContextItem::get_trait_item): likewise\n+\t(TypeCheckContextItem::get_type): likewise\n+\t* typecheck/rust-tyty.cc (StructFieldType::StructFieldType): likewise\n+\t(StructFieldType::get_ref): likewise\n+\t(StructFieldType::get_name): likewise\n+\t(StructFieldType::get_field_type): likewise\n+\t(StructFieldType::set_field_type): likewise\n+\t(StructFieldType::is_concrete): likewise\n+\t(StructFieldType::debug): likewise\n+\t(StructFieldType::get_locus): likewise\n+\t(VariantDef::variant_type_string): likewise\n+\t(VariantDef::VariantDef): likewise\n+\t(VariantDef::operator=): likewise\n+\t(VariantDef::get_error_node): likewise\n+\t(VariantDef::is_error): likewise\n+\t(VariantDef::get_id): likewise\n+\t(VariantDef::get_defid): likewise\n+\t(VariantDef::get_variant_type): likewise\n+\t(VariantDef::is_data_variant): likewise\n+\t(VariantDef::is_dataless_variant): likewise\n+\t(VariantDef::get_identifier): likewise\n+\t(VariantDef::num_fields): likewise\n+\t(VariantDef::get_field_at_index): likewise\n+\t(VariantDef::get_fields): likewise\n+\t(VariantDef::lookup_field): likewise\n+\t(VariantDef::get_discriminant): likewise\n+\t(VariantDef::as_string): likewise\n+\t(VariantDef::is_equal): likewise\n+\t(VariantDef::clone): likewise\n+\t(VariantDef::monomorphized_clone): likewise\n+\t(VariantDef::get_ident): likewise\n+\t(TupleType::TupleType): likewise\n+\t(TupleType::get_unit_type): likewise\n+\t(TupleType::is_unit): likewise\n+\t(TupleType::num_fields): likewise\n+\t(TupleType::is_concrete): likewise\n+\t(TupleType::get_fields): likewise\n+\t(BoolType::BoolType): likewise\n+\t(BoolType::get_name): likewise\n+\t(BoolType::is_concrete): likewise\n+\t(IntType::IntType): likewise\n+\t(IntType::get_name): likewise\n+\t(IntType::get_int_kind): likewise\n+\t(IntType::is_concrete): likewise\n+\t(UintType::UintType): likewise\n+\t(UintType::get_name): likewise\n+\t(UintType::get_uint_kind): likewise\n+\t(UintType::is_concrete): likewise\n+\t(FloatType::FloatType): likewise\n+\t(FloatType::get_name): likewise\n+\t(FloatType::get_float_kind): likewise\n+\t(FloatType::is_concrete): likewise\n+\t(USizeType::USizeType): likewise\n+\t(USizeType::get_name): likewise\n+\t(USizeType::is_concrete): likewise\n+\t(ISizeType::ISizeType): likewise\n+\t(ISizeType::get_name): likewise\n+\t(ISizeType::is_concrete): likewise\n+\t(CharType::CharType): likewise\n+\t(CharType::is_concrete): likewise\n+\t(CharType::get_name): likewise\n+\t(ReferenceType::ReferenceType): likewise\n+\t(ReferenceType::is_concrete): likewise\n+\t(ReferenceType::mutability): likewise\n+\t(ReferenceType::is_mutable): likewise\n+\t(ReferenceType::is_dyn_object): likewise\n+\t(ReferenceType::is_dyn_slice_type): likewise\n+\t(ReferenceType::is_dyn_str_type): likewise\n+\t(PointerType::PointerType): likewise\n+\t(PointerType::is_concrete): likewise\n+\t(PointerType::mutability): likewise\n+\t(PointerType::is_mutable): likewise\n+\t(PointerType::is_const): likewise\n+\t(PointerType::is_dyn_object): likewise\n+\t(PointerType::is_dyn_slice_type): likewise\n+\t(PointerType::is_dyn_str_type): likewise\n+\t(ParamType::ParamType): likewise\n+\t(ParamType::get_generic_param): likewise\n+\t(ParamType::can_resolve): likewise\n+\t(ParamType::is_concrete): likewise\n+\t(StrType::StrType): likewise\n+\t(StrType::get_name): likewise\n+\t(StrType::is_concrete): likewise\n+\t(NeverType::NeverType): likewise\n+\t(NeverType::get_name): likewise\n+\t(NeverType::is_unit): likewise\n+\t(NeverType::is_concrete): likewise\n+\t(PlaceholderType::PlaceholderType): likewise\n+\t(PlaceholderType::get_name): likewise\n+\t(PlaceholderType::is_unit): likewise\n+\t(PlaceholderType::get_symbol): likewise\n+\t(PlaceholderType::is_concrete): likewise\n+\t(ProjectionType::is_unit): likewise\n+\t(ProjectionType::get_name): likewise\n+\t(ProjectionType::needs_generic_substitutions): likewise\n+\t(ProjectionType::supports_substitutions): likewise\n+\t(ProjectionType::has_subsititions_defined): likewise\n+\t(ProjectionType::get): likewise\n+\t(ProjectionType::is_concrete): likewise\n+\t(DynamicObjectType::is_concrete): likewise\n+\t* typecheck/rust-tyty.h: likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-path-probe.cc (PathProbeCandidate::Candidate::Candidate): refactor\n+\t(PathProbeCandidate::PathProbeCandidate): likewise\n+\t(PathProbeCandidate::as_string): likewise\n+\t(PathProbeCandidate::is_enum_candidate): likewise\n+\t(PathProbeCandidate::is_impl_candidate): likewise\n+\t(PathProbeCandidate::is_trait_candidate): likewise\n+\t(PathProbeCandidate::is_full_trait_item_candidate): likewise\n+\t(PathProbeCandidate::get_error): likewise\n+\t(PathProbeCandidate::is_error): likewise\n+\t(PathProbeCandidate::get_defid): likewise\n+\t(PathProbeCandidate::operator<): likewise\n+\t* typecheck/rust-hir-path-probe.h (struct PathProbeCandidate): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-path-probe.cc (PathProbeType::PathProbeType): refactor\n+\t(PathProbeType::Probe): likewise\n+\t(PathProbeType::visit): likewise\n+\t(PathProbeType::process_enum_item_for_candiates): likewise\n+\t(PathProbeType::process_impl_items_for_candidates): likewise\n+\t(PathProbeType::is_reciever_generic): likewise\n+\t(PathProbeImplTrait::PathProbeImplTrait): likewise\n+\t(PathProbeImplTrait::Probe): likewise\n+\t(PathProbeImplTrait::process_trait_impl_items_for_candidates): likewise\n+\t* typecheck/rust-hir-path-probe.h (struct PathProbeCandidate): likewise\n+\t* typecheck/rust-hir-trait-resolve.cc\n+\t(PathProbeImplTrait::process_trait_impl_items_for_candidates): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty.cc (BaseType::BaseType): refactor\n+\t(BaseType::~BaseType): likewise\n+\t(BaseType::get_ref): likewise\n+\t(BaseType::set_ref): likewise\n+\t(BaseType::get_ty_ref): likewise\n+\t(BaseType::set_ty_ref): likewise\n+\t(BaseType::is_equal): likewise\n+\t(BaseType::is_unit): likewise\n+\t(BaseType::get_kind): likewise\n+\t(BaseType::get_combined_refs): likewise\n+\t(BaseType::append_reference): likewise\n+\t(BaseType::supports_substitutions): likewise\n+\t(BaseType::has_subsititions_defined): likewise\n+\t(BaseType::can_substitute): likewise\n+\t(BaseType::needs_generic_substitutions): likewise\n+\t(BaseType::contains_type_parameters): likewise\n+\t(BaseType::get_ident): likewise\n+\t(BaseType::get_locus): likewise\n+\t(InferType::InferType): likewise\n+\t(InferType::get_infer_kind): likewise\n+\t(InferType::get_name): likewise\n+\t(InferType::is_concrete): likewise\n+\t(ErrorType::ErrorType): likewise\n+\t(ErrorType::is_unit): likewise\n+\t(ErrorType::is_concrete): likewise\n+\t(ErrorType::get_name): likewise\n+\t(ErrorType::monomorphized_clone): likewise\n+\t* typecheck/rust-tyty.h (class SubstitutionArgumentMappings): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-substitution-mapper.cc (SubstMapper::SubstMapper): refactor\n+\t(SubstMapper::Resolve): likewise\n+\t(SubstMapper::InferSubst): likewise\n+\t(SubstMapper::have_generic_args): likewise\n+\t(SubstMapper::visit): likewise\n+\t(SubstMapperInternal::visit): likewise\n+\t(SubstMapperFromExisting::SubstMapperFromExisting): likewise\n+\t(SubstMapperFromExisting::Resolve): likewise\n+\t(SubstMapperFromExisting::visit): likewise\n+\t(GetUsedSubstArgs::GetUsedSubstArgs): likewise\n+\t(GetUsedSubstArgs::From): likewise\n+\t(GetUsedSubstArgs::visit): likewise\n+\t* typecheck/rust-substitution-mapper.h: refactor\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionParamMapping::get_generic_param): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update the makefile\n+\t* typecheck/rust-tyty.cc (SubstitutionParamMapping::need_substitution): likewise\n+\t(SubstitutionParamMapping::override_context): likewise\n+\t(SubstitutionRef::get_mappings_from_generic_args): likewise\n+\t(SubstitutionRef::infer_substitions): likewise\n+\t(SubstitutionRef::are_mappings_bound): likewise\n+\t(SubstitutionRef::solve_missing_mappings_from_this): likewise\n+\t(SubstitutionRef::monomorphize): likewise\n+\t* typecheck/rust-tyty.h (class SubstitutionParamMapping): likewise\n+\t(class SubstitutionArg): likewise\n+\t(std::function<void): likewise\n+\t(class SubstitutionArgumentMappings): likewise\n+\t(class SubstitutionRef): likewise\n+\t* typecheck/rust-tyty-subst.cc: New file.\n+\t* typecheck/rust-tyty-subst.h: New file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update makefile\n+\t* typecheck/rust-tyty.cc (TyVar::TyVar): move to new file\n+\t(TyVar::get_tyty): likewise\n+\t(TyVar::get_implicit_infer_var): likewise\n+\t(TyVar::subst_covariant_var): likewise\n+\t(TyVar::clone): likewise\n+\t(TyVar::monomorphized_clone): likewise\n+\t(TyWithLocation::TyWithLocation): likewise\n+\t* typecheck/rust-tyty.h (class BaseType): cleanup\n+\t(class TypeBoundPredicate): move to its own file\n+\t(class TypeBoundPredicateItem): likewise\n+\t(class TypeBoundsMappings): likewise\n+\t(class TyVar): likewise\n+\t(class TyWithLocation): likewise\n+\t* typecheck/rust-tyty-bounds.h: New file.\n+\t* typecheck/rust-tyty-util.cc: New file.\n+\t* typecheck/rust-tyty-util.h: New file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-bounds.cc (TypeBoundPredicateItem::error): refactor\n+\t(TypeBoundPredicateItem::is_error): likewise\n+\t(TypeBoundPredicateItem::get_parent): likewise\n+\t* typecheck/rust-tyty.h: Move the implementation for the above\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Removed copy-pasted comment.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* Make-lang.in: Add object files: `rust-feature.o` and `rust-feature-gate.o`\n+\t* checks/errors/rust-feature-gate.cc: New file.\n+\t* checks/errors/rust-feature-gate.h: New file.\n+\t* checks/errors/rust-feature.cc: New file.\n+\t* checks/errors/rust-feature.h: New file.\n+\t* rust-session-manager.cc: Add FeatureGate check.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_closure_expr): Advance tokens\n+\tproperly when parsing closure param list.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_generic_arg): Handle type\n+\tpaths and nested generics properly.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* ast/rust-pattern.h:\n+\t(ReferencePattern::is_double_reference): Add method.\n+\t(ReferencePattern::get_is_mut): Add method.\n+\t* hir/rust-ast-lower-pattern.cc\n+\t(ASTLoweringPattern::visit): Add ReferencePattern visitor.\n+\t* hir/rust-ast-lower-pattern.h:\n+\t(ASTLoweringPattern::visit): Add ReferencePattern visitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/tree/rust-hir-pattern.h\n+\t(class ReferencePattern): Remove has_two_amps field.\n+\t* hir/tree/rust-hir-full-test.cc\n+\t(ReferencePattern::as_string): Remove usage of ReferencePattern::has_two_amps.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-fnparam.h\n+\t(CompileFnParam::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-pattern.cc\n+\t(CompilePatternCaseLabelExpr::visit): Remove HIR::GroupedPattern visitor.\n+\t(CompilePatternBindings::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-pattern.h\n+\t(CompilePatternCaseLabelExpr::visit): Remove HIR::GroupedPattern visitor.\n+\t(CompilePatternBindings::visit): Remove HIR::GroupedPattern visitor.\n+\t(CompilePatternLet::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-resolve-path.h\n+\t(ResolvePathRef::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-var-decl.h\n+\t(CompileVarDecl::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-const-checker.cc\n+\t(ConstChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-const-checker.h\n+\t(ConstChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-unsafe-checker.cc\n+\t(UnsafeChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-unsafe-checker.h\n+\t(UnsafeChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* hir/rust-hir-dump.cc (Dump::visit): Remove HIR::GroupedPattern visitor.\n+\t* hir/rust-hir-dump.h (Dump::visit): Remove HIR::GroupedPattern visitor.\n+\t* hir/tree/rust-hir-full-decls.h (class GroupedPattern): Remove class.\n+\t* hir/tree/rust-hir-full-test.cc (GroupedPattern::accept_vis): Remove method.\n+\t* hir/tree/rust-hir-pattern.h (class GroupedPattern): Remove class.\n+\t* hir/tree/rust-hir-visitor.h\n+\t(HIRFullVisitor::visit): Remove HIR::GroupedPattern visitor.\n+\t(HIRFullVisitorBase::visit): Remove HIR::GroupedPattern visitor.\n+\t(HIRPatternVisitor::visit): Remove HIR::GroupedPattern visitor.\n+\t* typecheck/rust-hir-type-check-pattern.cc\n+\t(TypeCheckPattern::visit): Remove HIR::GroupedPattern visitor.\n+\t* typecheck/rust-hir-type-check-pattern.h\n+\t(TypeCheckPattern::visit): Remove HIR::GroupedPattern visitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/rust-ast-lower-pattern.cc\n+\t(ASTLoweringPattern::visit): Lower AST::GroupedPattern to its inner pattern.\n+\n+2023-04-06  MAHAD  <mahadtxt@gmail.com>\n+\n+\t* rust-buffered-queue.h: Moved to...\n+\t* util/rust-buffered-queue.h: ...here.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_type): Handle double ampersan\n+\tproperly\n+\t(Parser::parse_reference_type): Call into `parse_reference_type_inner`\n+\tand wrap double reference types in another `AST::ReferenceType` node\n+\t(Parser::parse_reference_type_inner): Add parsing implementation\n+\twhich does not care about the leading token (& or  &&)\n+\t(Parser::parse_type_no_bounds): Handle double ampersand properly\n+\t* parse/rust-parse.h: Declare `parse_reference_type_inner`\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-pattern.cc (CompilePatternLet::visit): New function.\n+\t* backend/rust-compile-stmt.cc (CompileStmt::visit): Likewise.\n+\t* backend/rust-compile-pattern.h (class CompilePatternLet): New visitor.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-macro.h (enum class): Add `BuiltinMacro` enum class.\n+\t* expand/rust-attribute-visitor.cc (AttrVisitor::visit): Mention\n+\tswitching on `macro.kind` once builtin macro invocations are properly\n+\thandled.\n+\t* parse/rust-parse-impl.h (Parser::parse_macro_invocation): Switch to new MacroInvocation\n+\tAPI.\n+\t(Parser::parse_type): Likewise.\n+\t(Parser::parse_type_no_bounds): Likewise.\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): removed extra indentations in trait ast dump\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::null_denotation): Add proper error\n+\twhen seeing wildcard var on right side of assignment.\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* ast/rust-ast.cc: Fix include list.\n+\t* ast/rust-expr.h: Likewise.\n+\t* hir/tree/rust-hir-expr.h: Likewise.\n+\t* rust-backend.h: Likewise.\n+\t* util/rust-lang-item.h: Likewise.\n+\t* operator.h: Moved to...\n+\t* util/rust-operators.h: ...here.\n+\n+2023-04-06  Parthib  <parthibdutta02@gmail.com>\n+\n+\t* Make-lang.in: Rename object file.\n+\t* ast/rust-ast-full-test.cc: Moved to...\n+\t* ast/rust-ast.cc: ...here.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-pattern.cc (CompilePatternCaseLabelExpr::visit): Add proper\n+\tvisitor.\n+\t(CompilePatternBindings::visit): Likewise.\n+\t* backend/rust-compile-pattern.h: Declare them.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* typecheck/rust-hir-type-check-pattern.cc (TypeCheckPattern::visit): Add proper\n+\tvisitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/tree/rust-hir-pattern.h: Add get_item method.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/rust-ast-lower-pattern.cc (ASTLoweringPattern::visit): Add proper visitor.\n+\t* hir/rust-ast-lower-pattern.h: Declare it.\n+\n+2023-04-06  Lyra  <teromene@teromene.fr>\n+\n+\t* expand/rust-macro-expand.cc (transcribe_expression): Fix ICE when expanding\n+\tempty macros.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* resolve/rust-ast-resolve-pattern.h: Support GroupedPattern properly.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-base.cc (HIRCompileBase::compile_locals_for_block):\n+\tAllow patterns to declare zero or multiple variables.\n+\t* backend/rust-compile-var-decl.h: Change function declaration.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* lex/rust-lex.cc (Lexer::build_token): Make location enclose entire token.\n+\t(Lexer::parse_byte_char): Likewise.\n+\t(Lexer::parse_byte_string): Likewise.\n+\t(Lexer::parse_raw_byte_string): Likewise.\n+\t(Lexer::parse_raw_identifier): Likewise.\n+\t(Lexer::parse_string): Likewise.\n+\t(Lexer::parse_identifier_or_keyword): Likewise.\n+\t(Lexer::parse_raw_string): Likewise.\n+\t(Lexer::parse_non_decimal_int_literal): Likewise.\n+\t(Lexer::parse_decimal_int_or_float): Likewise.\n+\t(Lexer::parse_char_or_lifetime): Likewise.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* ast/rust-ast.h: Add get_locus method.\n+\t* ast/rust-expr.h: Likewise.\n+\t* ast/rust-macro.h: Likewise.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Cleanup LetStmt\n+\ttype checking.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* hir/tree/rust-hir-path.h: Add const get_identifier and get_type method.\n+\t* typecheck/rust-hir-path-probe.h: Use new SubstitutionArgumentMappings constructor.\n+\t* typecheck/rust-hir-trait-resolve.cc: Likewise.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Likewise.\n+\t* typecheck/rust-tyty-bounds.cc (TypeCheckBase::get_predicate_from_bound):\n+\tDo not assert failure on size mismatch anymore.\n+\t(TypeBoundPredicate::TypeBoundPredicate): Use new SubstitutionArgumentMappings constructor.\n+\t(TypeBoundPredicate::operator=): Likewise.\n+\t(TypeBoundPredicate::apply_generic_arguments): Likewise.\n+\t(TypeBoundPredicateItem::get_tyty_for_receiver): Likewise.\n+\t(TypeBoundPredicate::get_num_associated_bindings): Likewise.\n+\t(TypeBoundPredicate::lookup_associated_type): Fix implementation for new system.\n+\t(TypeBoundPredicate::get_associated_type_items): Likewise.\n+\t* typecheck/rust-tyty.cc (SubstitutionRef::get_mappings_from_generic_args): Add new\n+\tbehavior.\n+\t(SubstitutionRef::infer_substitions): Use new constructor and add comment.\n+\t(SubstitutionRef::solve_missing_mappings_from_this): Use new constructor.\n+\t* typecheck/rust-tyty.h: Define new constructors.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* resolve/rust-ast-resolve-type.cc (ResolveGenericArgs::go): Add name resolution to\n+\tTrait items.\n+\n+2023-04-06  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* ast/rust-ast-full-decls.h (class MacroItem): Remove forward declaration.\n+\t* ast/rust-ast-full-test.cc (MacroRulesDefinition):\n+\tRework MacroRulesDefinition class\n+\t* ast/rust-ast.h (class MacroItem): Remove abstract class.\n+\t* ast/rust-item.h (class MacroItem): Remove forward declaration.\n+\t* ast/rust-macro.h (class MacroItem): Likewise.\n+\t(class MacroRulesDefinition): Add MacroKind enum.\n+\t(class MacroInvocation): Fix inheritance.\n+\t* lex/rust-token.h: Token \"macro\" is now used.\n+\t* parse/rust-parse-impl.h (Parser::parse_item): Add handling for MACRO.\n+\t(Parser::parse_vis_item): Call into parse_decl_macro_def.\n+\t(Parser::parse_macro_item): Delete function.\n+\t(Parser::parse_macro_rules_def): Return MBE macros only.\n+\t(Parser::parse_decl_macro_def): New function.\n+\t(Parser::parse_stmt): Handle MACRO token.\n+\t(Parser::parse_stmt_or_expr_without_block): Call into parse_macro_rules_def.\n+\t* parse/rust-parse.h: Declare new function.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_generic_arg): Add proper bound parsing.\n+\n+2023-04-06  Dave  <dme2223@gmail.com>\n+\n+\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Use StackedContext\n+\tclass.\n+\n+2023-04-06  Prajwal S N  <prajwalnadig21@gmail.com>\n+\n+\t* checks/errors/rust-unsafe-checker.cc (check_target_attr): New function.\n+\t(UnsafeChecker::check_function_attr): Call into `check_target_attr`.\n+\t(UnsafeChecker::visit): Check for target_feature attributes.\n+\t* checks/errors/rust-unsafe-checker.h: Add declarations.\n+\t* util/rust-attributes.cc: Add attribute.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust-session-manager.cc (Session::compile_crate): Fix typo.\n+\n 2023-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* rust-lang.cc (grs_langhook_type_for_mode): Also consider all"}, {"sha": "6c5abfa629b1acff0a54e0467d7b3e03db6e1318", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c8351cf4fedb842988eed4f73304019c361e86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8c8351cf4fedb842988eed4f73304019c361e86", "patch": "@@ -1,3 +1,301 @@\n+2023-04-06  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c: Remove unused variables.\n+\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c: Remove unused variables.\n+\n+2023-04-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109417\n+\t* gcc.dg/pr109417.c: New.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/issue-1422.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1361.rs: New test.\n+\n+2023-04-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* rust/compile/issue-1830_bytes.rs: Fix up DejaGnu directives.\n+\t* rust/compile/issue-1830_str.rs: Likewise.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/empty.in: New test.\n+\t* rust/compile/include_empty.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/torture/traits10.rs: Fix test-case\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1725-1.rs: New test.\n+\t* rust/compile/issue-1725-2.rs: New test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/builtin_macro_include_str.rs:\n+\tInclude test of invalid UTF-8.\n+\t* rust/compile/invalid_utf8: File with invalid UTF-8.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/parse_empty_tuple_pattern.rs: New test.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* rust/compile/issue-1830_bytes.rs: New test.\n+\t* rust/compile/issue-1830_str.rs: New test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/variadic.rs: New test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/execute/torture/overflow1.rs: Fix test.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/const-issue1440.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/feature_intrinsics.rs: New file.\n+\t* rust/compile/issue-1031.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1130.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1131.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1237.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1289.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/rust-const-blog-issue.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-3.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-4.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-5.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-6.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-7.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/issue-1024.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/issue-1075.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/issue-1432.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/unsafe10.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/atomic_load.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/atomic_store.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/copy_nonoverlapping1.rs: Add crate feature:\n+\t`intrinsics`.\n+\t* rust/execute/torture/issue-1120.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/issue-1133.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/issue-1232.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/slice-magic.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/slice-magic2.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/str-layout1.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/transmute1.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/wrapping_op1.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/wrapping_op2.rs: Add crate feature: `intrinsics`.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/macro17.rs: Fix testsuite for new recursion errors.\n+\t* rust/compile/macro44.rs: Fix invalid testcase assertions.\n+\t* rust/compile/builtin_macro_recurse.rs: Fix invalid test.\n+\t* rust/compile/builtin_macro_recurse2.rs: New test.\n+\t* rust/compile/macro46.rs: New test.\n+\t* rust/compile/builtin_macro_eager1.rs: New file.\n+\t* rust/compile/builtin_macro_eager2.rs: New file.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/execute/torture/let-pattern-1.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/torture/intrinsics-4.rs: implement Copy trait\n+\t* rust/compile/torture/intrinsics-5.rs: likewise\n+\t* rust/execute/torture/atomic_load.rs: likewise\n+\t* rust/execute/torture/atomic_store.rs: likewise\n+\t* rust/bounds1.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/func3.rs: update test case\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1786.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/never_type_err1.rs: Moved to...\n+\t* rust/compile/never_type1.rs: ...here. It now works\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1773.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/execute/torture/issue-1720-2.rs: New test.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/feature.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/closure_move_expr.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/parse_complex_generic_application.rs: New test.\n+\t* rust/compile/parse_complex_generic_application2.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/multi_reference_type.rs: New test.\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* rust/compile/issue-867.rs: New test.\n+\n+2023-04-06  Lyra  <teromene@teromene.fr>\n+\n+\t* rust/compile/macro45.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/execute/torture/builtin_macro_cfg.rs: Handle carriage returns\n+\t\tproperly.\n+\t* rust/execute/torture/builtin_macro_concat.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_env.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_include_bytes.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_include_str.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_line.rs: Likewise.\n+\t* rust/execute/torture/builtin_macros1.rs: Likewise.\n+\t* rust/execute/torture/builtin_macros3.rs: Likewise.\n+\t* rust/execute/torture/cfg1.rs: Likewise.\n+\t* rust/execute/torture/cfg2.rs: Likewise.\n+\t* rust/execute/torture/cfg3.rs: Likewise.\n+\t* rust/execute/torture/cfg4.rs: Likewise.\n+\t* rust/execute/torture/coercion1.rs: Likewise.\n+\t* rust/execute/torture/coercion2.rs: Likewise.\n+\t* rust/execute/torture/extern_mod4.rs: Likewise.\n+\t* rust/execute/torture/helloworld1.rs: Likewise.\n+\t* rust/execute/torture/helloworld2.rs: Likewise.\n+\t* rust/execute/torture/issue-1198.rs: Likewise.\n+\t* rust/execute/torture/issue-1231.rs: Likewise.\n+\t* rust/execute/torture/issue-1232.rs: Likewise.\n+\t* rust/execute/torture/issue-1249.rs: Likewise.\n+\t* rust/execute/torture/issue-1436.rs: Likewise.\n+\t* rust/execute/torture/issue-1496.rs: Likewise.\n+\t* rust/execute/torture/issue-647.rs: Likewise.\n+\t* rust/execute/torture/issue-845.rs: Likewise.\n+\t* rust/execute/torture/issue-851.rs: Likewise.\n+\t* rust/execute/torture/issue-858.rs: Likewise.\n+\t* rust/execute/torture/issue-976.rs: Likewise.\n+\t* rust/execute/torture/macros10.rs: Likewise.\n+\t* rust/execute/torture/macros11.rs: Likewise.\n+\t* rust/execute/torture/macros12.rs: Likewise.\n+\t* rust/execute/torture/macros13.rs: Likewise.\n+\t* rust/execute/torture/macros14.rs: Likewise.\n+\t* rust/execute/torture/macros2.rs: Likewise.\n+\t* rust/execute/torture/macros22.rs: Likewise.\n+\t* rust/execute/torture/macros29.rs: Likewise.\n+\t* rust/execute/torture/macros3.rs: Likewise.\n+\t* rust/execute/torture/macros30.rs: Likewise.\n+\t* rust/execute/torture/macros31.rs: Likewise.\n+\t* rust/execute/torture/macros7.rs: Likewise.\n+\t* rust/execute/torture/macros8.rs: Likewise.\n+\t* rust/execute/torture/macros9.rs: Likewise.\n+\t* rust/execute/torture/match1.rs: Likewise.\n+\t* rust/execute/torture/match2.rs: Likewise.\n+\t* rust/execute/torture/match3.rs: Likewise.\n+\t* rust/execute/torture/match_bool1.rs: Likewise.\n+\t* rust/execute/torture/match_byte1.rs: Likewise.\n+\t* rust/execute/torture/match_char1.rs: Likewise.\n+\t* rust/execute/torture/match_int1.rs: Likewise.\n+\t* rust/execute/torture/match_loop1.rs: Likewise.\n+\t* rust/execute/torture/match_range1.rs: Likewise.\n+\t* rust/execute/torture/match_range2.rs: Likewise.\n+\t* rust/execute/torture/match_tuple1.rs: Likewise.\n+\t* rust/execute/torture/method1.rs: Likewise.\n+\t* rust/execute/torture/method2.rs: Likewise.\n+\t* rust/execute/torture/method3.rs: Likewise.\n+\t* rust/execute/torture/method4.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_1.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_10.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_11.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_12.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_2.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_4.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_5.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_6.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_7.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_8.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_9.rs: Likewise.\n+\t* rust/execute/torture/str-layout1.rs: Likewise.\n+\t* rust/execute/torture/str-zero.rs: Likewise.\n+\t* rust/execute/torture/trait1.rs: Likewise.\n+\t* rust/execute/torture/trait10.rs: Likewise.\n+\t* rust/execute/torture/trait11.rs: Likewise.\n+\t* rust/execute/torture/trait12.rs: Likewise.\n+\t* rust/execute/torture/trait13.rs: Likewise.\n+\t* rust/execute/torture/trait2.rs: Likewise.\n+\t* rust/execute/torture/trait3.rs: Likewise.\n+\t* rust/execute/torture/trait4.rs: Likewise.\n+\t* rust/execute/torture/trait5.rs: Likewise.\n+\t* rust/execute/torture/trait6.rs: Likewise.\n+\t* rust/execute/torture/trait7.rs: Likewise.\n+\t* rust/execute/torture/trait8.rs: Likewise.\n+\t* rust/execute/torture/trait9.rs: Likewise.\n+\t* rust/execute/torture/closure2.rs: Likewise.\n+\t* rust/execute/torture/closure3.rs: Likewise.\n+\t* rust/execute/torture/loop-condition-eval.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_3.rs: Likewise.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/diagnostic_underline.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/bounds.rs: change to use -fsyntax-only\n+\t* rust/execute/torture/issue-1720.rs: New test.\n+\n+2023-04-06  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* rust/compile/decl_macro1.rs: New test.\n+\t* rust/compile/decl_macro2.rs: New test.\n+\t* rust/compile/decl_macro3.rs: New test.\n+\t* rust/compile/decl_macro4.rs: New test.\n+\t* rust/compile/decl_macro5.rs: New test.\n+\t* rust/compile/decl_macro6.rs: New test.\n+\t* rust/compile/decl_macro7.rs: New test.\n+\t* rust/execute/torture/decl_macro1.rs: New test.\n+\t* rust/execute/torture/decl_macro2.rs: New test.\n+\t* rust/execute/torture/decl_macro3.rs: New test.\n+\t* rust/execute/torture/decl_macro4.rs: New test.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/bounds.rs: New test.\n+\n+2023-04-06  Dave  <dme2223@gmail.com>\n+\n+\t* rust/compile/const10.rs: New test.\n+\n+2023-04-06  Prajwal S N  <prajwalnadig21@gmail.com>\n+\n+\t* rust/compile/unsafe11.rs: New test.\n+\n+2023-04-06  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/signbit-2.c: Add -maltivec if supported.\n+\n+2023-04-06  Alexandre Oliva  <oliva@adacore.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR testsuite/108899\n+\t* g++.dg/modules/modules.exp (unsupported): Drop renaming.\n+\tFix quoting.\n+\n 2023-04-05  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \tPR modula2/109423"}]}