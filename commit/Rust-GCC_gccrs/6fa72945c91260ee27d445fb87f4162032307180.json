{"sha": "6fa72945c91260ee27d445fb87f4162032307180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZhNzI5NDVjOTEyNjBlZTI3ZDQ0NWZiODdmNDE2MjAzMjMwNzE4MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1998-09-30T18:15:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-30T18:15:13Z"}, "message": "toplev.c (documented_lang_options): Recognize -include, -imacros, -iwithprefix, -iwithprefixbefore.\n\n        * toplev.c (documented_lang_options): Recognize -include,\n        -imacros, -iwithprefix, -iwithprefixbefore.\n        * cpplib.c (cpp_start_read): Process -imacros and -include\n        switches at the same time and in command-line order, after\n        initializing the dependency-output code.  Emit properly nested\n        #line directives for them.  Emit a #line for the main file\n        before processing these switches, and don't do it again\n        afterward.\n\nFrom-SVN: r22689", "tree": {"sha": "b2cba3207f5b9a1ff7b4789dccdf4b0727a0d40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2cba3207f5b9a1ff7b4789dccdf4b0727a0d40c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fa72945c91260ee27d445fb87f4162032307180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa72945c91260ee27d445fb87f4162032307180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa72945c91260ee27d445fb87f4162032307180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa72945c91260ee27d445fb87f4162032307180/comments", "author": null, "committer": null, "parents": [{"sha": "1e326708e83b2e03807c689f14ed3772cd346efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e326708e83b2e03807c689f14ed3772cd346efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e326708e83b2e03807c689f14ed3772cd346efc"}], "stats": {"total": 91, "additions": 53, "deletions": 38}, "files": [{"sha": "20939cabc3b563cbd983550d5eb9db8c416eb462", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa72945c91260ee27d445fb87f4162032307180/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa72945c91260ee27d445fb87f4162032307180/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fa72945c91260ee27d445fb87f4162032307180", "patch": "@@ -1,3 +1,14 @@\n+Wed Sep 30 19:13:20 1998 Zack Weinberg  <zack@rabi.phys.columbia.edu>  \n+\n+\t* toplev.c (documented_lang_options): Recognize -include,\n+\t-imacros, -iwithprefix, -iwithprefixbefore.\n+\t* cpplib.c (cpp_start_read): Process -imacros and -include\n+\tswitches at the same time and in command-line order, after\n+\tinitializing the dependency-output code.  Emit properly nested\n+\t#line directives for them.  Emit a #line for the main file\n+\tbefore processing these switches, and don't do it again\n+\tafterward.\n+\n Wed Sep 30 18:03:22 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* function.c (purge_addressof_1): Use bitfield manipulation"}, {"sha": "c605a4a9b9caec12a303f5477fdb0caf4b575ba3", "filename": "gcc/cpplib.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa72945c91260ee27d445fb87f4162032307180/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa72945c91260ee27d445fb87f4162032307180/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=6fa72945c91260ee27d445fb87f4162032307180", "patch": "@@ -5972,29 +5972,6 @@ cpp_start_read (pfile, fname)\n     fprintf (stderr, \"End of search list.\\n\");\n   }\n \n-  /* Scan the -imacros files before the main input.\n-     Much like #including them, but with no_output set\n-     so that only their macro definitions matter.  */\n-\n-  opts->no_output++; pfile->no_record_file++;\n-  for (pend = opts->pending;  pend;  pend = pend->next)\n-    {\n-      if (pend->cmd != NULL && strcmp (pend->cmd, \"-imacros\") == 0)\n-\t{\n-\t  int fd = open (pend->arg, O_RDONLY, 0666);\n-\t  if (fd < 0)\n-\t    {\n-\t      cpp_perror_with_name (pfile, pend->arg);\n-\t      return 0;\n-\t    }\n-\t  if (!cpp_push_buffer (pfile, NULL, 0))\n-\t      return 0;\n-\t  finclude (pfile, fd, pend->arg, 0, NULL_PTR);\n-\t  cpp_scan_buffer (pfile);\n-\t}\n-    }\n-  opts->no_output--; pfile->no_record_file--;\n-\n   /* Copy the entire contents of the main input file into\n      the stacked input buffer previously allocated for it.  */\n   if (fname == NULL || *fname == 0) {\n@@ -6139,24 +6116,48 @@ cpp_start_read (pfile, fname)\n     trigraph_pcp (fp);\n #endif\n \n-  /* Scan the -include files before the main input.\n-   We push these in reverse order, so that the first one is handled first.  */\n+  /* Avoid a #line 0 if -include files are present. */\n+  CPP_BUFFER (pfile)->lineno = 1;\n+  output_line_command (pfile, 0, same_file);\n+  \n+  /* Scan the -include and -imacros files before the main input. */\n \n   pfile->no_record_file++;\n-  opts->pending = nreverse_pending (opts->pending);\n   for (pend = opts->pending;  pend;  pend = pend->next)\n     {\n-      if (pend->cmd != NULL && strcmp (pend->cmd, \"-include\") == 0)\n-\t{\n-\t  int fd = open (pend->arg, O_RDONLY, 0666);\n-\t  if (fd < 0)\n+      if (pend->cmd != NULL)\n+        {\n+\t  if (strcmp (pend->cmd, \"-include\") == 0)\n \t    {\n-\t      cpp_perror_with_name (pfile, pend->arg);\n-\t      return 0;\n+\t      int fd = open (pend->arg, O_RDONLY, 0666);\n+\t      if (fd < 0)\n+\t        {\n+\t          cpp_perror_with_name (pfile, pend->arg);\n+\t          return 0;\n+\t        }\n+\t      if (!cpp_push_buffer (pfile, NULL, 0))\n+\t        return 0;\n+\t      if (finclude (pfile, fd, pend->arg, 0, NULL_PTR))\n+\t        {\n+\t\t  output_line_command (pfile, 0, enter_file);\n+\t\t  cpp_scan_buffer (pfile);\n+\t\t}\n+\t    }\n+\t  else if (strcmp (pend->cmd, \"-imacros\") == 0)\n+\t    {\n+\t      int fd = open (pend->arg, O_RDONLY, 0666);\n+\t      if (fd < 0)\n+\t        {\n+\t          cpp_perror_with_name (pfile, pend->arg);\n+\t          return 0;\n+\t        }\n+\t      opts->no_output++;\n+\t      if (!cpp_push_buffer (pfile, NULL, 0))\n+\t        return 0;\n+\t      if (finclude (pfile, fd, pend->arg, 0, NULL_PTR))\n+\t\tcpp_scan_buffer (pfile);\n+\t      opts->no_output--;\n \t    }\n-\t  if (!cpp_push_buffer (pfile, NULL, 0))\n-\t    return 0;\n-\t  finclude (pfile, fd, pend->arg, 0, NULL_PTR);\n \t}\n     }\n   pfile->no_record_file--;\n@@ -6182,8 +6183,7 @@ cpp_start_read (pfile, fname)\n     pedwarn (\"file does not end in newline\");\n \n #endif\n-  if (finclude (pfile, f, fname, 0, NULL_PTR))\n-    output_line_command (pfile, 0, same_file);\n+  finclude (pfile, f, fname, 0, NULL_PTR);\n   return 1;\n }\n "}, {"sha": "6ca6b93d1c1094d785501418eb8accdea6e9f4ec", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa72945c91260ee27d445fb87f4162032307180/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa72945c91260ee27d445fb87f4162032307180/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6fa72945c91260ee27d445fb87f4162032307180", "patch": "@@ -1047,16 +1047,20 @@ documented_lang_options[] =\n   { \"-I\", \"\" },\n   { \"-U\", \"\" },\n   { \"-idirafter\", \"\" },\n+  { \"-imacros\", \"\" },\n+  { \"-include\", \"\" },\n   { \"-iprefix\", \"\" },\n   { \"-isystem\", \"\" },\n+  { \"-iwithprefix\", \"\" },\n+  { \"-iwithprefixbefore\", \"\" },\n   { \"-lang-c\", \"\" },\n   { \"-lang-c89\", \"\" },\n   { \"-lang-c++\", \"\" },\n+  { \"-remap\", \"\" },\n   { \"-nostdinc\", \"\" },\n   { \"-nostdinc++\", \"\" },\n   { \"-trigraphs\", \"\" },\n   { \"-undef\", \"\" },\n-  { \"-remap\", \"\" },\n   \n #define DEFINE_LANG_NAME(NAME) { NULL, NAME },\n   "}]}