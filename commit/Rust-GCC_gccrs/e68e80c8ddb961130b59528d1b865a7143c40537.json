{"sha": "e68e80c8ddb961130b59528d1b865a7143c40537", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4ZTgwYzhkZGI5NjExMzBiNTk1MjhkMWI4NjVhNzE0M2M0MDUzNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-12T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-12T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "4cd3798a91082da8518e4e42ea2900de42541bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cd3798a91082da8518e4e42ea2900de42541bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e68e80c8ddb961130b59528d1b865a7143c40537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68e80c8ddb961130b59528d1b865a7143c40537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68e80c8ddb961130b59528d1b865a7143c40537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68e80c8ddb961130b59528d1b865a7143c40537/comments", "author": null, "committer": null, "parents": [{"sha": "11c7261128ad3ee136508703b20e45cbe04f8dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c7261128ad3ee136508703b20e45cbe04f8dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c7261128ad3ee136508703b20e45cbe04f8dd0"}], "stats": {"total": 597, "additions": 596, "deletions": 1}, "files": [{"sha": "49afab1d1f377d369387e80d2d52b534d82bc401", "filename": "contrib/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1,3 +1,24 @@\n+2020-06-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* prepare-commit-msg: Use the gcc-config.mklog-hook-type Git\n+\tconfig key instead of the GCC_FORCE_MKLOG environment variable.\n+\tOptionally disable generating a new ChangeLog template for\n+\tamended commits when the existing log is still OK.\n+\n+2020-06-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: Add --curent argument.\n+\n+2020-06-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* prepare-commit-msg: Replace ENV variable with a git config\n+\tvalue.\n+\n+2020-06-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* prepare-commit-msg: Use 'tee' to save the diff to a file\n+\tinstead of running 'git diff' twice.\n+\n 2020-06-10  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Fix renamed files in"}, {"sha": "2381eb6ccd4c537334ff36fcb5975fc0ed0dd5a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1,3 +1,120 @@\n+2020-06-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/rs6000/rs6000.c (rs6000_density_test): Fix GNU coding\n+\tstyle.\n+\n+2020-06-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/95627\n+\t* config/rs6000/rs6000.c (rs6000_density_test): Skip debug\n+\tstatements.\n+\n+2020-06-11  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/95634\n+\t* asan.c (asan_emit_stack_protection): Fix emission for ilp32\n+\tby using Pmode instead of ptr_mode.\n+\n+2020-06-11  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* tree-vect-loop-manip.c (vect_set_loop_mask): Renamed to ...\n+\t(vect_set_loop_control): ... this.\n+\t(vect_maybe_permute_loop_masks): Rename rgroup_masks related things.\n+\t(vect_set_loop_masks_directly): Renamed to ...\n+\t(vect_set_loop_controls_directly): ... this.  Also rename some\n+\tvariables with ctrl instead of mask.  Rename vect_set_loop_mask to\n+\tvect_set_loop_control.\n+\t(vect_set_loop_condition_masked): Rename rgroup_masks related things.\n+\tAlso rename some variables with ctrl instead of mask.\n+\t* tree-vect-loop.c (release_vec_loop_masks): Renamed to ...\n+\t(release_vec_loop_controls): ... this.  Rename rgroup_masks related\n+\tthings.\n+\t(_loop_vec_info::~_loop_vec_info): Rename release_vec_loop_masks to\n+\trelease_vec_loop_controls.\n+\t(can_produce_all_loop_masks_p): Rename rgroup_masks related things.\n+\t(vect_get_max_nscalars_per_iter): Likewise.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t(vect_record_loop_mask): Likewise.\n+\t(vect_get_loop_mask): Likewise.\n+\t* tree-vectorizer.h (struct rgroup_masks): Renamed to ...\n+\t(struct rgroup_controls): ... this.  Also rename mask_type\n+\tto type and rename masks to controls.\n+\n+2020-06-11  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* tree-vect-loop-manip.c (vect_set_loop_condition): Rename\n+\tLOOP_VINFO_FULLY_MASKED_P to LOOP_VINFO_USING_PARTIAL_VECTORS_P.\n+\t(vect_gen_vector_loop_niters): Likewise.\n+\t(vect_do_peeling): Likewise.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Rename\n+\tfully_masked_p to using_partial_vectors_p.\n+\t(vect_analyze_loop_costing): Rename LOOP_VINFO_FULLY_MASKED_P to\n+\tLOOP_VINFO_USING_PARTIAL_VECTORS_P.\n+\t(determine_peel_for_niter): Likewise.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t(vect_transform_loop): Likewise.\n+\t* tree-vectorizer.h (LOOP_VINFO_FULLY_MASKED_P): Updated.\n+\t(LOOP_VINFO_USING_PARTIAL_VECTORS_P): New macro.\n+\n+2020-06-11  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Rename\n+\tcan_fully_mask_p to can_use_partial_vectors_p.\n+\t(vect_analyze_loop_2): Rename LOOP_VINFO_CAN_FULLY_MASK_P to\n+\tLOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P.  Rename saved_can_fully_mask_p\n+\tto saved_can_use_partial_vectors_p.\n+\t(vectorizable_reduction): Rename LOOP_VINFO_CAN_FULLY_MASK_P to\n+\tLOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P.\n+\t(vectorizable_live_operation): Likewise.\n+\t* tree-vect-stmts.c (permute_vec_elements): Likewise.\n+\t(check_load_store_masking): Likewise.\n+\t(vectorizable_operation): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.\n+\t(vectorizable_condition): Likewise.\n+\t* tree-vectorizer.h (LOOP_VINFO_CAN_FULLY_MASK_P): Renamed to ...\n+\t(LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P): ... this.\n+\t(_loop_vec_info): Rename can_fully_mask_p to can_use_partial_vectors_p.\n+\n+2020-06-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* optc-save-gen.awk: Quote error string.\n+\n+2020-06-11  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* print-rtl.c (print_mem_expr): Enable TDF_SLIM in dump_flags.\n+\n+2020-06-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv-protos.h (riscv_output_gpr_save): Remove.\n+\t* config/riscv/riscv-sr.c (riscv_sr_match_prologue): Update\n+\tvalue.\n+\t* config/riscv/riscv.c (riscv_output_gpr_save): Remove.\n+\t* config/riscv/riscv.md (gpr_save): Update output asm pattern.\n+\n+2020-06-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/predicates.md (gpr_save_operation): New.\n+\t* config/riscv/riscv-protos.h (riscv_gen_gpr_save_insn): New.\n+\t(riscv_gpr_save_operation_p): Ditto.\n+\t* config/riscv/riscv-sr.c (riscv_remove_unneeded_save_restore_calls):\n+\tIgnore USEs for gpr_save patter.\n+\t* config/riscv/riscv.c (gpr_save_reg_order): New.\n+\t(riscv_expand_prologue): Use riscv_gen_gpr_save_insn to gen gpr_save.\n+\t(riscv_gen_gpr_save_insn): New.\n+\t(riscv_gpr_save_operation_p): Ditto.\n+\t* config/riscv/riscv.md (S3_REGNUM): New.\n+\t(S4_REGNUM): Ditto.\n+\t(S5_REGNUM): Ditto.\n+\t(S6_REGNUM): Ditto.\n+\t(S7_REGNUM): Ditto.\n+\t(S8_REGNUM): Ditto.\n+\t(S9_REGNUM): Ditto.\n+\t(S10_REGNUM): Ditto.\n+\t(S11_REGNUM): Ditto.\n+\t(gpr_save): Model USEs correctly.\n+\n 2020-06-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/95353"}, {"sha": "98278266c63a302a866c183c2e83cf619cd67b63", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1 +1 @@\n-20200611\n+20200612"}, {"sha": "a02459bb400e94582a1be03597756be288a92691", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 324, "deletions": 0, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1,3 +1,327 @@\n+2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Implicit_Dereference): In an instance,\n+\treset the type of the prefix if it is private before building\n+\tthe dereference.\n+\n+2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Safe_Unchecked_Type_Conversion): Add missing\n+\tIs_Type guard before calling Has_Discriminants on Etype.\n+\n+2020-06-11  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-nbnbin__gmp.adb: There's no Optional_Big_Integer\n+\tanymore.  Invalid_Big_Integer is not used.\n+\tGreatest_Common_Divisor returns Big_Positive.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Get_Value): Refine type of the Compon parameter.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Refine type of\n+\tOthers_Box.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb, exp_ch7.adb, exp_ch9.adb, exp_smem.adb, lib.adb,\n+\tnlists.adb, sem.adb, sem_aggr.adb, sem_ch3.adb, sem_ch6.adb,\n+\tsem_ch8.adb, sem_dim.adb, sem_res.adb, sem_util.adb,\n+\tsem_warn.adb: Replace uses of Next function with procedure.\n+\n+2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_pakd.ads: Add paragraph about scalar storage order.\n+\t* exp_pakd.adb (Install_PAT): Do not set the scalar storage\n+\torder of the PAT here but...\n+\t(Set_PB_Type): ...here instead and...\n+\t(Create_Packed_Array_Impl_Type): ...here as well.\n+\t* rtsfind.ads (RE_Id): Add RE_Rev_Packed_Bytes{1,2,4}.\n+\t(RE_Unit_Table): Likewise.\n+\t* libgnat/s-unstyp.ads (Rev_Packed_Bytes1): New derived type.\n+\t(Rev_Packed_Bytes2): Likewise.\n+\t(Rev_Packed_Bytes4): Likewise.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch4.adb, sem_ch6.adb, sem_res.adb, sem_util.ads: Fix\n+\treferences to SPARK RM 7.1.3 rule numbers.\n+\n+2020-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify code,\n+\tremove inner predicate Is_Covered_Formal, preserve warning for\n+\ttwo overlapping composite types when only one is writable, and\n+\tfor two overlapping and writable elementary types.\n+\n+2020-06-11  Steve Baird  <baird@adacore.com>\n+\n+\t* contracts.adb (Add_Contract_Item): Support specifying\n+\tvolatility refinement aspects for types.\n+\t(Analyze_Contracts): Add call to Analyze_Type_Contract in the\n+\tcase of a contract for a type.\n+\t(Freeze_Contracts): Add call to Analyze_Type_Contract in the\n+\tcase of a contract for a type.\n+\t(Check_Type_Or_Object_External_Properties): A new procedure\n+\twhich performs the work that needs to be done for both object\n+\tdeclarations and types.\n+\t(Analyze_Object_Contract): Add a call to\n+\tCheck_Type_Or_Object_External_Properties and remove the code in\n+\tthis procedure which did much of the work that is now performed\n+\tby that call.\n+\t(Analyze_Type_Contract): Implement this new routine as nothing\n+\tmore than a call to Check_Type_Or_Object_External_Properties.\n+\t* contracts.ads: Update comment for Add_Contract_To_Item because\n+\ttypes can have contracts.  Follow (questionable) precedent and\n+\tdeclare new routine Analyze_Type_Contract as visible (following\n+\texample of Analyze_Object_Contract), despite the fact that it is\n+\tnever called from outside of the package where it is declared.\n+\t* einfo.adb (Contract, Set_Contract): Id argument can be a type;\n+\tsupport this case.\n+\t(Write_Field34_Name): Field name is \"contract\" for a type.\n+\t* einfo.ads: Update comment describing Contract attribute.\n+\t* sem_ch3.adb (Build_Derived_Numeric_Type): Is_Volatile should\n+\treturn same answer for all subtypes of a given type. Thus, when\n+\tbuilding the base type for something like type Volatile_1_To_10\n+\tis range 1 .. 10 with Volatile; that basetype should be marked\n+\tas being volatile.\n+\t(Access_Type_Declaration): Add SPARK-specific legality check\n+\tthat the designated type of an access type shall be compatible\n+\twith respect to volatility with the access type.\n+\t* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Add\n+\tSPARK-specific legality check that an actual type parameter in\n+\tan instantiation shall be compatible with respect to volatility\n+\twith the corresponding formal type.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Perform checks\n+\tfor aspect specs for the 4 volatility refinement aspects that\n+\twere already being performed for all language-defined aspects.\n+\t* sem_prag.adb (Analyze_External_Property_In_Decl_Part,\n+\tAnalyze_Pragma): External properties (other than No_Caching) may\n+\tbe specified for a type, including a generic formal type.\n+\t* sem_util.ads: Declare new subprograms - Async_Readers_Enabled,\n+\tAsync_Writers_Enabled, Effective_Reads, Effective_Writes, and\n+\tCheck_Volatility_Compatibility.\n+\t* sem_util.adb (Async_Readers_Enabled, Async_Writers_Enabled,\n+\tEffective_Reads, Effective_Writes): Initial implementation of\n+\tnew functions for querying aspect values.\n+\t(Check_Volatility_Compatibility): New procedure intended for use\n+\tin checking all SPARK legality rules of the form \"<> shall be\n+\tcompatible with respect to volatility with <>\".\n+\t(Has_Enabled_Property): Update comment because Item_Id can be a\n+\ttype.  Change name of nested Variable_Has_Enabled_Property\n+\tfunction to Type_Or_Variable_Has_Enabled_Property; add a\n+\tparameter to that function because recursion may be needed,\n+\te.g., in the case of a derived typ).  Cope with the case where\n+\tthe argument to Has_Enabled_Property is a type.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Add_Association): Add assertion about the formal\n+\tparameters.\n+\t(Propagate_Discriminants): Always add an explicit component\n+\tassociation, so that an \"others => <>\" association is never\n+\tneeded.\n+\n+2020-06-11  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_put_image.adb (Build_Elementary_Put_Image_Call): If the\n+\tunderlying type is real, call Put_Image_Unknown.\n+\t(Build_Unknown_Put_Image_Call): Pass the type name to\n+\tPut_Image_Unknown.\n+\t* libgnat/s-putima.ads, libgnat/s-putima.adb\n+\t(Put_Image_Unknown): Add Type_Name parameter.  Remove\n+\toverly-detailed documentation of what it does; better to leave\n+\tit open.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Constrained_Array_Type,\n+\tBuild_Constrained_Discriminated_Type): Skip unnecessary loop\n+\titerations.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Build_Constrained_Itype): Move to Sem_Util.\n+\t* sem_ch3.adb (Build_Subtype, Inherit_Predicate_Flags): Move...\n+\t* sem_util.adb (Build_Subtype): Here.  Add parameters for\n+\treferences to objects previously declared in enclosing scopes.\n+\t(Inherit_Predicate_Flags): And here, because it is called by\n+\tBuild_Subtype.\n+\t* sem_util.ads (Build_Overriding_Spec): Reorder alphabetically.\n+\t(Build_Subtype): Moved from Sem_Ch3; comments updated.\n+\t(Build_Constrained_Itype): Moved from Sem_Aggr; comments\n+\tupdated.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Case_Table_Type): Change index type from Nat to\n+\tPos.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Build_Constrained_Itype): Previously a declare\n+\tblock, now a separate procedure; the only change is that now\n+\tNew_Assoc_List might include components and an others clause,\n+\twhich we ignore (while we deal with discriminants exactly as we\n+\tdid before); extend a ??? comment about how this routine is\n+\tdifferent from the Build_Subtype\n+\t(Resolve_Record_Aggregate): Create a constrained itype not just\n+\tfor the outermost record aggregate, but for its inner record\n+\taggregates as well.\n+\n+2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Build_Discriminant_Checks): Build an explicit\n+\tdereference when the type is an access type.\n+\t* exp_atag.adb (Build_CW_Membership): Add explicit dereferences.\n+\t(Build_Get_Access_Level): Likewise.\n+\t(Build_Get_Alignment): Likewise.\n+\t(Build_Inherit_Prims): Likewise.\n+\t(Build_Get_Transportable): Likewise.\n+\t(Build_Set_Size_Function): Likewise.\n+\t* exp_ch3.adb (Build_Offset_To_Top_Function): Likewise.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Likewise.\n+\t(Expand_N_Indexed_Component ): Remove code dealing with implicit\n+\tdereferences.\n+\t(Expand_N_Selected_Component): Likewise.\n+\t(Expand_N_Slice): Likewise.\n+\t* exp_ch9.adb (Add_Formal_Renamings): Add explicit dereference.\n+\t(Expand_Accept_Declarations): Likewise.\n+\t(Build_Simple_Entry_Call): Remove code dealing with implicit\n+\tdereferences.\n+\t(Expand_N_Requeue_Statement): Likewise.\n+\t* exp_disp.adb (Expand_Dispatching_Call): Build an explicit\n+\tdereference when the controlling type is an access type.\n+\t* exp_spark.adb (Expand_SPARK_N_Selected_Component): Delete.\n+\t(Expand_SPARK_N_Slice_Or_Indexed_Component): Likewise.\n+\t(Expand_SPARK): Do not call them.\n+\t* sem_ch4.adb (Process_Implicit_Dereference_Prefix): Delete.\n+\t(Process_Indexed_Component): Call Implicitly_Designated_Type\n+\tto get the designated type for an implicit dereference.\n+\t(Analyze_Overloaded_Selected_Component): Do not insert an\n+\texplicit dereference here.\n+\t(Analyze_Selected_Component): Likewise.\n+\t(Analyze_Slice): Call Implicitly_Designated_Type to get the\n+\tdesignated type for an implicit dereference.\n+\t* sem_ch8.adb (Has_Components): New predicate extracted from...\n+\t(Is_Appropriate_For_Record): ...this.  Delete.\n+\t(Is_Appropriate_For_Entry_Prefix): Likewise.\n+\t(Analyze_Renamed_Entry): Deal with implicit dereferences.\n+\t(Find_Selected_Component): Do not insert an explicit dereference\n+\there.  Call Implicitly_Designated_Type to get the designated type\n+\tfor an implicit dereference.  Call Has_Components, Is_Task_Type\n+\tand Is_Protected_Type directly.  Adjust test for error.\n+\t* sem_res.adb (Resolve_Implicit_Dereference): New procedure.\n+\t(Resolve_Call): Call Resolve_Indexed_Component last.\n+\t(Resolve_Entry): Call Resolve_Implicit_Dereference on the prefix.\n+\t(Resolve_Indexed_Component): Call Implicitly_Designated_Type to\n+\tget the designated type for an implicit dereference and\n+\tResolve_Implicit_Dereference on the prefix at the end.\n+\t(Resolve_Selected_Component): Likewise.\n+\t(Resolve_Slice): Likewise.  Do not apply access checks here.\n+\t* sem_util.ads (Implicitly_Designated_Type): Declare.\n+\t* sem_util.adb (Copy_And_Maybe_Dereference): Simplify.\n+\t(Implicitly_Designated_Type): New function.\n+\t(Object_Access_Level): Fix typo.\n+\t* sem_warn.adb (Check_Unset_Reference): Test Comes_From_Source\n+\ton the original node.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting.\n+\t* exp_aggr.adb (Is_Static_Dispatch_Table_Aggregate): Recognize\n+\taggregates of the Ada.Tags.Object_Specific_Data type as static.\n+\t* sem_aggr.adb (Check_Static_Discriminated_Subtype): Deconstruct\n+\tand do not call it from Build_Constrained_Itype.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_disp.adb (Make_Secondary_DT): Internally generated OSD\n+\ttables are now constant.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Backend_Processing_Possible): Remove useless\n+\tcall.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* opt.ads (Building_Static_Dispatch_Tables): Fix punctuation in\n+\tcomment.\n+\n+2020-06-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-stposu.ads (Root_Storage_Pool_With_Subpools,\n+\tRoot_Subpool): Mark with Preelaborable_Initialization.\n+\n+2020-06-11  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Conditional_Entry_Call): Replace call to\n+\tNew_Copy_List by calls to the new routine\n+\tNew_Copy_Separate_List.\n+\t* sem_util.ads (New_Copy_Separate_List, New_Copy_Separate_Tree):\n+\tNew routines.\n+\t* sem_util.adb (New_Copy_Separate_List, New_Copy_Separate_Tree):\n+\tNew routines.\n+\t(New_Copy_Tree): Extend the machinery that detects syntactic\n+\tnodes to handle lists of indentifiers with field More_Ids;\n+\totherwise such nodes are erroneously handled as semantic nodes.\n+\tCopy aspect specifications attached to nodes.\n+\t* sem_ch12.adb (Copy_Generic_Node): Protect reading attribute\n+\tEtype.\n+\n+2020-06-11  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Do not set the\n+\tHas_Predicates flag when the Predicate_Failure aspect is seen.\n+\tIt is legal (but pointless) to use this aspect without a\n+\tpredicate.  If we set the flag, we generate a half-baked\n+\tPredicate procedure, and if that procedure is nested, it causes\n+\tunnesting to crash.\n+\n+2020-06-11  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_put_image.adb (Build_Record_Put_Image_Procedure): Remove\n+\tspecial processing of protected types, because those are handled\n+\tby Build_Protected_Put_Image_Call.\n+\t(Enable_Put_Image): Use the switch -gnatd_z to control enabling\n+\tof Put_Image. Disable Put_Image for types in Remote_Types\n+\tpackages.\n+\t* debug.adb: Document -gnatd_z switch.\n+\t* exp_imgv.adb, libgnat/a-stteou.ads, opt.ads: Minor cleanups.\n+\n+2020-06-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Add label to the\n+\touter loop and use it in the exit statement.\n+\n+2020-06-11  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Assignment): Generate predicate check if\n+\tsubtype mark has predicate.\n+\n+2020-06-11  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Expand_N_Attribute_Reference): Use original\n+\tnodes where required to avoid looking at the expanded tree.\n+\n+2020-06-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-catizo.ads, libgnat/a-nbnbin.ads,\n+\tlibgnat/a-nbnbre.ads, libgnat/a-nubinu.ads,\n+\tlibgnat/s-aoinar.ads, libgnat/s-aomoar.ads,\n+\tlibgnat/s-aotase.ads, libgnat/s-stopoo.ads: Remove aspects that\n+\twe will not implement.\n+\n+2020-06-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-aoinar.adb (Atomic_Fetch_And_Add,\n+\tAtomic_Fetch_And_Subtract): Add fallback using\n+\tcompare-and-exchange, in case the integer type does not map to a\n+\tmachine type.\n+\n 2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n \n \t* libgnat/s-aomoar.ads, libgnat/s-aomoar.adb: New files."}, {"sha": "876c36483c27bcd399515616f3f62dbd3c961dd7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1,3 +1,20 @@\n+2020-06-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93467\n+\t* constraint.cc (associate_classtype_constraints): If there is a\n+\tdiscrepancy between the current template depth and the template\n+\tdepth of the original declaration, then adjust the template\n+\tparameter depth within the current constraints appropriately.\n+\t* pt.c (tsubst_friend_class): Substitute into and set the\n+\tconstraints on the injected declaration.\n+\n+2020-06-11  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (instantiate_coro_traits): Pass a reference\n+\tto lambda closure objects to traits instantiation.\n+\t(morph_fn_to_coro): Likewise for promise parameter\n+\tpreview and allocator lookup.\n+\n 2020-06-10  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/95440"}, {"sha": "530333e38c4ea9baa8ed35e1689f8caebc38522b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1,3 +1,49 @@\n+2020-06-11  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl   <kargl@gcc.gnu.org>\n+\n+\tPR fortran/95611\n+\t* decl.c (access_attr_decl): Use correct symbol in error message.\n+\n+2020-06-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95544\n+\t* check.c (invalid_null_arg): Rename to gfc_invalid_null_arg.\n+\t(gfc_check_associated, gfc_check_kind, gfc_check_merge)\n+\t(gfc_check_shape, gfc_check_size, gfc_check_spread)\n+\t(gfc_check_transfer): Adjust.\n+\t(gfc_check_len_lentrim, gfc_check_trim): Check for NULL() argument.\n+\t* gfortran.h: Declare gfc_invalid_null_arg ().\n+\t* intrinsic.c (check_arglist): Check for NULL() argument.\n+\n+2020-06-11  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95503\n+\t* expr.c (gfc_check_pointer_assign): Skip contiguity check of rhs\n+\tof pointer assignment if lhs cannot be simply contiguous.\n+\n+2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/95331\n+\t* trans-array.c (gfc_conv_array_ref): For class array dummy\n+\targuments use the transformed descriptor in sym->backend_decl\n+\tinstead of the original descriptor.\n+\n+2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/52351\n+\tPR fortran/85868\n+\t* trans-array.c (gfc_conv_expr_descriptor): Enable the\n+\tcreation of a new descriptor with the correct one based\n+\tindexing for array sections.  Rework array descriptor\n+\tindexing offset calculation.\n+\n+2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/94022\n+\t* trans-expr.c (gfc_conv_procedure_call): In the case of\n+\tassumed-size arrays ensure that the reference is to a full array.\n+\n 2020-06-07  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95091"}, {"sha": "46e9c7eb1a81d1c49f0c035c56523c2e884d1f30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1,3 +1,62 @@\n+2020-06-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93467\n+\t* g++.dg/cpp2a/concepts-friend6.C: New test.\n+\t* g++.dg/cpp2a/concepts-friend7.C: New test.\n+\n+2020-06-11  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl   <kargl@gcc.gnu.org>\n+\n+\tPR fortran/95611\n+\t* gfortran.dg/pr95611.f90: New file.\n+\n+2020-06-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95544\n+\t* gfortran.dg/pr95544.f90: New file.\n+\n+2020-06-11  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_exceptions_enabled):\n+\tMark as C++ test input.\n+\n+2020-06-11  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95503\n+\t* gfortran.dg/pr95503.f90: New test.\n+\n+2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/95331\n+\t* gfortran.dg/PR95331.f90: New test.\n+\n+2020-06-11  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/abi/pure-virtual1.C: XFAIL AIX.\n+\n+2020-06-11  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.dg/spellcheck-inttypes.c: Don't include inttypes.h on AIX.\n+\n+2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/52351\n+\tPR fortran/85868\n+\t* gfortran.dg/coarray_lib_comm_1.f90: Adjust match test for\n+\tthe newly generated descriptor.\n+\t* gfortran.dg/PR85868A.f90: New test.\n+\t* gfortran.dg/PR85868B.f90: New test.\n+\n+2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/94022\n+\t* gfortran.dg/PR94022.f90: New test.\n+\n+2020-06-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/pr95252.c: New.\n+\n 2020-06-10  Alexandre Oliva  <oliva@adacore.com>\n \n \tPR rtl-optimization/51447"}, {"sha": "bf017a407167123b45a7666f986d3b37d57da750", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68e80c8ddb961130b59528d1b865a7143c40537/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68e80c8ddb961130b59528d1b865a7143c40537/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e68e80c8ddb961130b59528d1b865a7143c40537", "patch": "@@ -1,3 +1,14 @@\n+2020-06-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94749\n+\t* include/bits/istream.tcc (basic_istream::ignore(streamsize, CharT)):\n+\tOnly discard an extra character if we didn't already reach the\n+\tmaximum number.\n+\t* src/c++98/istream.cc (istream::ignore(streamsiz, char))\n+\t(wistream::ignore(streamsize, wchar_t)): Likewise.\n+\t* testsuite/27_io/basic_istream/ignore/char/94749.cc: New test.\n+\t* testsuite/27_io/basic_istream/ignore/wchar_t/94749.cc: New test.\n+\n 2020-06-10  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/95578"}]}