{"sha": "c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkM2ZhNzY4YjVhNWFiY2E4Y2ZiMjdjNzhmZDFlM2RhMGQ0ZDNjZg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-01-06T23:21:39Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-01-06T23:21:39Z"}, "message": "re PR fortran/59589 ([OOP] Memory leak when deallocating polymorphic)\n\n2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/59589\n\t* class.c (comp_is_finalizable): New function to dermine if a given\n\tcomponent is finalizable.\n\t(finalize_component, generate_finalization_wrapper): Use it.\n\n\n2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/59589\n\t* gfortran.dg/class_allocate_16.f90: New.\n\nFrom-SVN: r206379", "tree": {"sha": "4d1566fc164b2a1788074794c012381a8ee3fef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d1566fc164b2a1788074794c012381a8ee3fef6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529a6471280e26d5ea558b83aa094ac847dbbec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529a6471280e26d5ea558b83aa094ac847dbbec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529a6471280e26d5ea558b83aa094ac847dbbec9"}], "stats": {"total": 85, "additions": 61, "deletions": 24}, "files": [{"sha": "f35ce55185c31ed8dd5ebed5965fdf206e0c411e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "patch": "@@ -1,3 +1,10 @@\n+2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59589\n+\t* class.c (comp_is_finalizable): New function to dermine if a given\n+\tcomponent is finalizable.\n+\t(finalize_component, generate_finalization_wrapper): Use it.\n+\n 2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/59023"}, {"sha": "d3569fd6ba89aa3bef2850ba4ba27d35b1092665", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "patch": "@@ -787,6 +787,25 @@ has_finalizer_component (gfc_symbol *derived)\n }\n \n \n+static bool\n+comp_is_finalizable (gfc_component *comp)\n+{\n+  if (comp->attr.allocatable && comp->ts.type != BT_CLASS)\n+    return true;\n+  else if (comp->ts.type == BT_DERIVED && !comp->attr.pointer\n+\t   && (comp->ts.u.derived->attr.alloc_comp\n+\t       || has_finalizer_component (comp->ts.u.derived)\n+\t       || (comp->ts.u.derived->f2k_derived\n+\t\t   && comp->ts.u.derived->f2k_derived->finalizers)))\n+    return true;\n+  else if (comp->ts.type == BT_CLASS && CLASS_DATA (comp)\n+\t    && CLASS_DATA (comp)->attr.allocatable)\n+    return true;\n+  else\n+    return false;\n+}\n+\n+\n /* Call DEALLOCATE for the passed component if it is allocatable, if it is\n    neither allocatable nor a pointer but has a finalizer, call it. If it\n    is a nonpointer component with allocatable components or has finalizers, walk\n@@ -803,19 +822,7 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n   gfc_expr *e;\n   gfc_ref *ref;\n \n-  if (comp->ts.type != BT_DERIVED && comp->ts.type != BT_CLASS\n-      && !comp->attr.allocatable)\n-    return;\n-\n-  if ((comp->ts.type == BT_DERIVED && comp->attr.pointer)\n-      || (comp->ts.type == BT_CLASS && CLASS_DATA (comp)\n-\t  && CLASS_DATA (comp)->attr.pointer))\n-    return;\n-\n-  if (comp->ts.type == BT_DERIVED && !comp->attr.allocatable\n-      && (comp->ts.u.derived->f2k_derived == NULL\n-\t  || comp->ts.u.derived->f2k_derived->finalizers == NULL)\n-      && !has_finalizer_component (comp->ts.u.derived))\n+  if (!comp_is_finalizable (comp))\n     return;\n \n   e = gfc_copy_expr (expr);\n@@ -1462,17 +1469,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t    && ancestor_wrapper && ancestor_wrapper->expr_type != EXPR_NULL)\n \tcontinue;\n \n-\tif (comp->ts.type != BT_CLASS && !comp->attr.pointer\n-\t    && (comp->attr.allocatable\n-\t\t|| (comp->ts.type == BT_DERIVED\n-\t\t    && (comp->ts.u.derived->attr.alloc_comp\n-\t\t\t|| has_finalizer_component (comp->ts.u.derived)\n-\t\t\t|| (comp->ts.u.derived->f2k_derived\n-\t\t\t    && comp->ts.u.derived->f2k_derived->finalizers)))))\n-\t  finalizable_comp = true;\n-\telse if (comp->ts.type == BT_CLASS && CLASS_DATA (comp)\n-\t\t && CLASS_DATA (comp)->attr.allocatable)\n-\t  finalizable_comp = true;\n+\tfinalizable_comp |= comp_is_finalizable (comp);\n       }\n \n   /* If there is no new finalizer and no new allocatable, return with"}, {"sha": "e6576d46e115e071e824d3fb5e0280e05801a7a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "patch": "@@ -1,3 +1,8 @@\n+2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59589\n+\t* gfortran.dg/class_allocate_16.f90: New.\n+\n 2014-01-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/59644"}, {"sha": "28776084d8661444c78c542c4f4752123c1f28a2", "filename": "gcc/testsuite/gfortran.dg/class_allocate_16.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_16.f90?ref=c9d3fa768b5a5abca8cfb27c78fd1e3da0d4d3cf", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR 59589: [4.9 Regression] [OOP] Memory leak when deallocating polymorphic\n+!\n+! Contributed by Rich Townsend <townsend@astro.wisc.edu>\n+\n+  implicit none\n+\n+  type :: foo\n+     real, allocatable :: x(:)\n+  end type\n+\n+  type :: bar\n+     type(foo) :: f\n+  end type\n+\n+  class(bar), allocatable :: b\n+\n+  allocate(bar::b)\n+  allocate(b%f%x(1000000))\n+  b%f%x = 1.\n+  deallocate(b)\n+\n+end\n+\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 4 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}