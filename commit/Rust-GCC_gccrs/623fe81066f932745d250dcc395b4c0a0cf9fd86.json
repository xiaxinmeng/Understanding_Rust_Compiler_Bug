{"sha": "623fe81066f932745d250dcc395b4c0a0cf9fd86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIzZmU4MTA2NmY5MzI3NDVkMjUwZGNjMzk1YjRjMGEwY2Y5ZmQ4Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-14T17:19:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-14T17:19:04Z"}, "message": "i386.c (internal_label_prefix): New.\n\n        * config/i386/i386.c (internal_label_prefix): New.\n        (internal_label_prefix_len): New.\n        (override_options): Set them.\n        (local_symbolic_operand): New.\n        (legitimate_pic_address_disp_p): Use it.\n        (legitimize_pic_address): Likewise.\n\nFrom-SVN: r45605", "tree": {"sha": "4433288b0c7345e569de6a64ca440004fe0e54ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4433288b0c7345e569de6a64ca440004fe0e54ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/623fe81066f932745d250dcc395b4c0a0cf9fd86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623fe81066f932745d250dcc395b4c0a0cf9fd86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623fe81066f932745d250dcc395b4c0a0cf9fd86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623fe81066f932745d250dcc395b4c0a0cf9fd86/comments", "author": null, "committer": null, "parents": [{"sha": "0e1f7b2a8fa2e23f39b8484becae19215b50148f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1f7b2a8fa2e23f39b8484becae19215b50148f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1f7b2a8fa2e23f39b8484becae19215b50148f"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "390310d6a5f97f3244d1f6bf008ab35c58593d90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623fe81066f932745d250dcc395b4c0a0cf9fd86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623fe81066f932745d250dcc395b4c0a0cf9fd86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=623fe81066f932745d250dcc395b4c0a0cf9fd86", "patch": "@@ -1,3 +1,12 @@\n+2001-09-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (internal_label_prefix): New.\n+\t(internal_label_prefix_len): New.\n+\t(override_options): Set them.\n+\t(local_symbolic_operand): New.\n+\t(legitimate_pic_address_disp_p): Use it.\n+\t(legitimize_pic_address): Likewise.\n+\n 2001-09-14  Marc Espie <espie@openbsd.org>\n \n \t* config/i386/unix.h (ASM_OUTPUT_MI_THUNK):  Generate reference to GOT\n@@ -142,7 +151,7 @@\n \tsparc_flat_function_epilogue): Likewise.\n \n 2001-09-13  Markus Werle <numerical.simulation@web.de>\n-            Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n+\t    Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/install.texi (Binaries): Add \"Binaries for HP-UX 11.00 at\n \tAachen University of Technology\"."}, {"sha": "35c9dcfea1c5d1a190d783ab6d4fdf2fb3c46db8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 60, "deletions": 16, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623fe81066f932745d250dcc395b4c0a0cf9fd86/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623fe81066f932745d250dcc395b4c0a0cf9fd86/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=623fe81066f932745d250dcc395b4c0a0cf9fd86", "patch": "@@ -579,7 +579,12 @@ const char *ix86_branch_cost_string;\n \n /* Power of two alignment for functions.  */\n const char *ix86_align_funcs_string;\n+\n+/* Prefix built by ASM_GENERATE_INTERNAL_LABEL.  */\n+static char internal_label_prefix[16];\n+static int internal_label_prefix_len;\n \f\n+static int local_symbolic_operand PARAMS ((rtx, enum machine_mode));\n static void output_pic_addr_const PARAMS ((FILE *, rtx, int));\n static void put_condition_code PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t       int, int, FILE *));\n@@ -948,6 +953,15 @@ override_options ()\n       && !(target_flags & MASK_NO_ACCUMULATE_OUTGOING_ARGS)\n       && !optimize_size)\n     target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n+\n+  /* Figure out what ASM_GENERATE_INTERNAL_LABEL builds as a prefix.  */\n+  {\n+    char *p;\n+    ASM_GENERATE_INTERNAL_LABEL (internal_label_prefix, \"LX\", 0);\n+    p = strchr (internal_label_prefix, 'X');\n+    internal_label_prefix_len = p - internal_label_prefix;\n+    *p = '\\0';\n+  }\n }\n \f\n void\n@@ -1530,6 +1544,41 @@ pic_symbolic_operand (op, mode)\n   return 0;\n }\n \n+/* Return true if OP is a symbolic operand that resolves locally.  */\n+\n+static int\n+local_symbolic_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  if (GET_CODE (op) == LABEL_REF)\n+    return 1;\n+\n+  if (GET_CODE (op) == CONST\n+      && GET_CODE (XEXP (op, 0)) == PLUS\n+      && GET_CODE (XEXP (XEXP (op, 0), 1)) == CONST_INT)\n+    op = XEXP (XEXP (op, 0), 0);\n+\n+  if (GET_CODE (op) != SYMBOL_REF)\n+    return 0;\n+\n+  /* These we've been told are local by varasm and encode_section_info\n+     respectively.  */\n+  if (CONSTANT_POOL_ADDRESS_P (op) || SYMBOL_REF_FLAG (op))\n+    return 1;\n+\n+  /* There is, however, a not insubstantial body of code in the rest of\n+     the compiler that assumes it can just stick the results of \n+     ASM_GENERATE_INTERNAL_LABEL in a symbol_ref and have done.  */\n+  /* ??? This is a hack.  Should update the body of the compiler to\n+     always create a DECL an invoke ENCODE_SECTION_INFO.  */\n+  if (strncmp (XSTR (op, 0), internal_label_prefix,\n+\t       internal_label_prefix_len) == 0)\n+    return 1;\n+\n+  return 0;\n+}\n+\n /* Test for a valid operand for a call instruction.  Don't allow the\n    arg pointer register or virtual regs since they may decay into\n    reg + const, which the patterns can't handle.  */\n@@ -3218,15 +3267,16 @@ legitimate_pic_address_disp_p (disp)\n     return 0;\n \n   /* Must be @GOT or @GOTOFF.  */\n-  if (XINT (disp, 1) != 6\n-      && XINT (disp, 1) != 7)\n-    return 0;\n-\n-  if (GET_CODE (XVECEXP (disp, 0, 0)) != SYMBOL_REF\n-      && GET_CODE (XVECEXP (disp, 0, 0)) != LABEL_REF)\n-    return 0;\n+  switch (XINT (disp, 1))\n+    {\n+    case 6: /* @GOT */\n+      return GET_CODE (XVECEXP (disp, 0, 0)) == SYMBOL_REF;\n \n-  return 1;\n+    case 7: /* @GOTOFF */\n+      return local_symbolic_operand (XVECEXP (disp, 0, 0), Pmode);\n+    }\n+    \n+  return 0;\n }\n \n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression that is a valid\n@@ -3471,10 +3521,7 @@ legitimize_pic_address (orig, reg)\n   rtx new = orig;\n   rtx base;\n \n-  if (GET_CODE (addr) == LABEL_REF\n-      || (GET_CODE (addr) == SYMBOL_REF\n-\t  && (CONSTANT_POOL_ADDRESS_P (addr)\n-\t      || SYMBOL_REF_FLAG (addr))))\n+  if (local_symbolic_operand (addr, Pmode))\n     {\n       /* This symbol may be referenced via a displacement from the PIC\n \t base address (@GOTOFF).  */\n@@ -3526,10 +3573,7 @@ legitimize_pic_address (orig, reg)\n \n \t  /* Check first to see if this is a constant offset from a @GOTOFF\n \t     symbol reference.  */\n-\t  if ((GET_CODE (op0) == LABEL_REF\n-\t       || (GET_CODE (op0) == SYMBOL_REF\n-\t\t   && (CONSTANT_POOL_ADDRESS_P (op0)\n-\t\t       || SYMBOL_REF_FLAG (op0))))\n+\t  if (local_symbolic_operand (op0, Pmode)\n \t      && GET_CODE (op1) == CONST_INT)\n \t    {\n \t      current_function_uses_pic_offset_table = 1;"}]}