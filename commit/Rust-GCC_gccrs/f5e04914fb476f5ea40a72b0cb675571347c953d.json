{"sha": "f5e04914fb476f5ea40a72b0cb675571347c953d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlMDQ5MTRmYjQ3NmY1ZWE0MGE3MmIwY2I2NzU1NzEzNDdjOTUzZA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-10-27T13:23:17Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-10-27T13:23:17Z"}, "message": "collect2.c (aix64_flag): New variable.\n\n\t* collect2.c (aix64_flag): New variable.\n\t(main, case 'b'): Parse it.\n\t(GCC_CHECK_HDR): object magic number must match mode.\n\t(scan_prog_file): Only check for shared object if valid header.\n\tPrint debugging if header/mode mismatch.\n\nFrom-SVN: r23365", "tree": {"sha": "fe4551b0e6ba86eb00ea71b7f06eba5b29105f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe4551b0e6ba86eb00ea71b7f06eba5b29105f91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e04914fb476f5ea40a72b0cb675571347c953d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e04914fb476f5ea40a72b0cb675571347c953d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e04914fb476f5ea40a72b0cb675571347c953d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e04914fb476f5ea40a72b0cb675571347c953d/comments", "author": null, "committer": null, "parents": [{"sha": "b355a481345c7c8e88a481e1bb41f5247f43115b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b355a481345c7c8e88a481e1bb41f5247f43115b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b355a481345c7c8e88a481e1bb41f5247f43115b"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "d664b98475acf5c4c8e4f2116bf8e8c2e747096f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e04914fb476f5ea40a72b0cb675571347c953d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e04914fb476f5ea40a72b0cb675571347c953d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5e04914fb476f5ea40a72b0cb675571347c953d", "patch": "@@ -1,4 +1,12 @@\n-Tue Oct 27 10:15:02 EST 1998  Nick Clifton  <nickc@cygnus.com>\n+Tue Oct 27 16:11:43 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* collect2.c (aix64_flag): New variable.\n+\t(main, case 'b'): Parse it.\n+\t(GCC_CHECK_HDR): object magic number must match mode.\n+\t(scan_prog_file): Only check for shared object if valid header.\n+\tPrint debugging if header/mode mismatch.\n+\n+Tue Oct 27 10:15:02 1998  Nick Clifton  <nickc@cygnus.com>\n \n \tAdded support for arm-elf-linux configuration, submitted by Philip\n \tBlundell <pb@nexus.co.uk>, and integrated this with the arm-elf\n@@ -52,7 +60,7 @@ Tue Oct 27 10:15:02 EST 1998  Nick Clifton  <nickc@cygnus.com>\n \tcommand line option.\n \n \t\n-Tue Oct 27 08:56:46 EST 1998  Andrew MacLeod  <amacleod@cygnus.com>\n+Tue Oct 27 08:56:46 1998  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* dwarfout.c (ASM_OUTPUT_DWARF_STRING_NEWLINE): ASM_OUTPUT_DWARF_STRING\n \thas been changed to not include a newline. Use this macro instead."}, {"sha": "166cbe1c483fff641fe89410a2763fcf7a7cdf64", "filename": "gcc/collect2.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e04914fb476f5ea40a72b0cb675571347c953d/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e04914fb476f5ea40a72b0cb675571347c953d/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=f5e04914fb476f5ea40a72b0cb675571347c953d", "patch": "@@ -196,6 +196,7 @@ static int rflag;\t\t\t/* true if -r */\n static int strip_flag;\t\t\t/* true if -s */\n #ifdef COLLECT_EXPORT_LIST\n static int export_flag;                 /* true if -bE */\n+static int aix64_flag;\t\t\t/* true if -b64 */\n #endif\n \n int debug;\t\t\t\t/* true if -debug */\n@@ -1264,6 +1265,8 @@ main (argc, argv)\n \t    case 'b':\n \t      if (arg[2] == 'E' || strncmp (&arg[2], \"export\", 6) == 0)\n                 export_flag = 1;\n+\t      if (arg[2] == '6' && arg[3] == '4')\n+\t\taix64_flag = 1;\n \t      break;\n #endif\n \n@@ -2798,7 +2801,9 @@ scan_libraries (prog_name)\n      (((X).n_sclass == C_EXT) && ((X).n_scnum == N_UNDEF))\n #   define GCC_SYMINC(X)\t((X).n_numaux+1)\n #   define GCC_SYMZERO(X)\t0\n-#   define GCC_CHECK_HDR(X)\t(1)\n+#   define GCC_CHECK_HDR(X) \\\n+     ((HEADER (X).f_magic == U802TOCMAGIC && ! aix64_flag) \\\n+      || (HEADER (X).f_magic == 0757 && aix64_flag))\n #endif\n \n extern char *ldgetname ();\n@@ -2841,18 +2846,19 @@ scan_prog_file (prog_name, which_pass)\n #endif\n       if ((ldptr = ldopen (prog_name, ldptr)) != NULL)\n \t{\n-\n-\t  if (!MY_ISCOFF (HEADER (ldptr).f_magic))\n+\t  if (! MY_ISCOFF (HEADER (ldptr).f_magic))\n \t    fatal (\"%s: not a COFF file\", prog_name);\n \n-#ifdef COLLECT_EXPORT_LIST\n-\t  /* Is current archive member a shared object?  */\n-\t  is_shared = HEADER (ldptr).f_flags & F_SHROBJ;\n-#endif\n \t  if (GCC_CHECK_HDR (ldptr))\n \t    {\n \t      sym_count = GCC_SYMBOLS (ldptr);\n \t      sym_index = GCC_SYMZERO (ldptr);\n+\n+#ifdef COLLECT_EXPORT_LIST\n+\t      /* Is current archive member a shared object?  */\n+\t      is_shared = HEADER (ldptr).f_flags & F_SHROBJ;\n+#endif\n+\n \t      while (sym_index < sym_count)\n \t\t{\n \t\t  GCC_SYMENT symbol;\n@@ -2970,6 +2976,16 @@ scan_prog_file (prog_name, which_pass)\n #endif\n \t\t}\n \t    }\n+#ifdef COLLECT_EXPORT_LIST\n+\t  else\n+\t    {\n+\t      /* If archive contains both 32-bit and 64-bit objects,\n+\t\t we want to skip objects in other mode so mismatch normal.  */\n+\t      if (debug)\n+\t\tfprintf (stderr, \"%s : magic=%o aix64=%d mismatch\\n\",\n+\t\t\t prog_name, HEADER (ldptr).f_magic, aix64_flag);\n+\t    }\n+#endif\n \t}\n       else\n \t{"}]}