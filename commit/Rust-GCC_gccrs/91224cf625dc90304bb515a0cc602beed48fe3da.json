{"sha": "91224cf625dc90304bb515a0cc602beed48fe3da", "node_id": "C_kwDOANBUbNoAKDkxMjI0Y2Y2MjVkYzkwMzA0YmI1MTVhMGNjNjAyYmVlZDQ4ZmUzZGE", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2021-10-13T09:16:27Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@foss.st.com", "date": "2022-02-22T15:55:07Z"}, "message": "arm: Implement auto-vectorized MVE comparisons with vectors of boolean predicates\n\nWe make use of qualifier_predicate to describe MVE builtins\nprototypes, restricting to auto-vectorizable vcmp* and vpsel builtins,\nas they are exercised by the tests added earlier in the series.\n\nSpecial handling is needed for mve_vpselq because it has a v2di\nvariant, which has no natural VPR.P0 representation: we keep HImode\nfor it.\n\nThe vector_compare expansion code is updated to use the right VxBI\nmode instead of HI for the result.\n\nWe extend the existing thumb2_movhi_vfp and thumb2_movhi_fp16 patterns\nto use the new MVE_7_HI iterator which covers HI and the new VxBI\nmodes, in conjunction with the new DB constraint for a constant vector\nof booleans.\n\nThis patch also adds tests derived from the one provided in PR\ntarget/101325: there is a compile-only test because I did not have\naccess to anything that could execute MVE code until recently.  I have\nbeen able to add an executable test since QEMU supports MVE.\n\nInstead of adding arm_v8_1m_mve_hw, I update arm_mve_hw so that it\nuses add_options_for_arm_v8_1m_mve_fp, like arm_neon_hw does.  This\nensures arm_mve_hw passes even if the toolchain does not generate MVE\ncode by default.\n\nMost of the work of this patch series was carried out while I was\nworking at STMicroelectronics as a Linaro assignee.\n\n2022-02-22  Christophe Lyon <christophe.lyon@arm.com>\n\t    Richard Sandiford  <richard.sandiford@arm.com>\n\n\tgcc/\n\tPR target/100757\n\tPR target/101325\n\t* config/arm/arm-builtins.cc (BINOP_PRED_UNONE_UNONE_QUALIFIERS)\n\t(BINOP_PRED_NONE_NONE_QUALIFIERS)\n\t(TERNOP_NONE_NONE_NONE_PRED_QUALIFIERS)\n\t(TERNOP_UNONE_UNONE_UNONE_PRED_QUALIFIERS): New.\n\t* config/arm/arm-protos.h (mve_bool_vec_to_const): New.\n\t* config/arm/arm.cc (arm_hard_regno_mode_ok): Handle new VxBI\n\tmodes.\n\t(arm_mode_to_pred_mode): New.\n\t(arm_expand_vector_compare): Use the right VxBI mode instead of\n\tHI.\n\t(arm_expand_vcond): Likewise.\n\t(simd_valid_immediate): Handle MODE_VECTOR_BOOL.\n\t(mve_bool_vec_to_const): New.\n\t(neon_make_constant): Call mve_bool_vec_to_const when needed.\n\t* config/arm/arm_mve_builtins.def (vcmpneq_, vcmphiq_, vcmpcsq_)\n\t(vcmpltq_, vcmpleq_, vcmpgtq_, vcmpgeq_, vcmpeqq_, vcmpneq_f)\n\t(vcmpltq_f, vcmpleq_f, vcmpgtq_f, vcmpgeq_f, vcmpeqq_f, vpselq_u)\n\t(vpselq_s, vpselq_f): Use new predicated qualifiers.\n\t* config/arm/constraints.md (DB): New.\n\t* config/arm/iterators.md (MVE_7, MVE_7_HI): New mode iterators.\n\t(MVE_VPRED, MVE_vpred): New attribute iterators.\n\t* config/arm/mve.md (@mve_vcmp<mve_cmp_op>q_<mode>)\n\t(@mve_vcmp<mve_cmp_op>q_f<mode>, @mve_vpselq_<supf><mode>)\n\t(@mve_vpselq_f<mode>): Use MVE_VPRED instead of HI.\n\t(@mve_vpselq_<supf>v2di): Define separately.\n\t(mov<mode>): New expander for VxBI modes.\n\t* config/arm/vfp.md (thumb2_movhi_vfp, thumb2_movhi_fp16): Use\n\tMVE_7_HI iterator and add support for DB constraint.\n\n\tgcc/testsuite/\n\tPR target/100757\n\tPR target/101325\n\t* gcc.dg/rtl/arm/mve-vxbi.c: New test.\n\t* gcc.target/arm/simd/pr101325.c: New.\n\t* gcc.target/arm/simd/pr101325-2.c: New.\n\t* lib/target-supports.exp (check_effective_target_arm_mve_hw): Use\n\tadd_options_for_arm_v8_1m_mve_fp.", "tree": {"sha": "7aa9eebd2a98fa64f5ff69acd8515b76b38c8c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa9eebd2a98fa64f5ff69acd8515b76b38c8c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91224cf625dc90304bb515a0cc602beed48fe3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91224cf625dc90304bb515a0cc602beed48fe3da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91224cf625dc90304bb515a0cc602beed48fe3da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91224cf625dc90304bb515a0cc602beed48fe3da/comments", "author": null, "committer": null, "parents": [{"sha": "884f77b4222289510e1df9db2889b60c5df6fcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/884f77b4222289510e1df9db2889b60c5df6fcda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/884f77b4222289510e1df9db2889b60c5df6fcda"}], "stats": {"total": 310, "additions": 268, "deletions": 42}, "files": [{"sha": "1c6b9c986ee41be85a6ec4ba0902c0fc817a9edd", "filename": "gcc/config/arm/arm-builtins.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.cc?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -420,6 +420,12 @@ arm_binop_unone_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define BINOP_UNONE_UNONE_UNONE_QUALIFIERS \\\n   (arm_binop_unone_unone_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_binop_pred_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_predicate, qualifier_unsigned, qualifier_unsigned };\n+#define BINOP_PRED_UNONE_UNONE_QUALIFIERS \\\n+  (arm_binop_pred_unone_unone_qualifiers)\n+\n static enum arm_type_qualifiers\n arm_binop_unone_none_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_none, qualifier_immediate };\n@@ -438,6 +444,12 @@ arm_binop_unone_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define BINOP_UNONE_NONE_NONE_QUALIFIERS \\\n   (arm_binop_unone_none_none_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_binop_pred_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_predicate, qualifier_none, qualifier_none };\n+#define BINOP_PRED_NONE_NONE_QUALIFIERS \\\n+  (arm_binop_pred_none_none_qualifiers)\n+\n static enum arm_type_qualifiers\n arm_binop_unone_unone_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned, qualifier_none };\n@@ -509,6 +521,12 @@ arm_ternop_none_none_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define TERNOP_NONE_NONE_NONE_UNONE_QUALIFIERS \\\n   (arm_ternop_none_none_none_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_ternop_none_none_none_pred_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_predicate };\n+#define TERNOP_NONE_NONE_NONE_PRED_QUALIFIERS \\\n+  (arm_ternop_none_none_none_pred_qualifiers)\n+\n static enum arm_type_qualifiers\n arm_ternop_none_none_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_immediate, qualifier_unsigned };\n@@ -528,6 +546,13 @@ arm_ternop_unone_unone_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define TERNOP_UNONE_UNONE_UNONE_UNONE_QUALIFIERS \\\n   (arm_ternop_unone_unone_unone_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_ternop_unone_unone_unone_pred_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+    qualifier_predicate };\n+#define TERNOP_UNONE_UNONE_UNONE_PRED_QUALIFIERS \\\n+  (arm_ternop_unone_unone_unone_pred_qualifiers)\n+\n static enum arm_type_qualifiers\n arm_ternop_none_none_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none, qualifier_none };"}, {"sha": "f2f7ca6c23c22ac9e4907ade6540c04671476f46", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -101,6 +101,7 @@ extern char *neon_output_shift_immediate (const char *, char, rtx *,\n \t\t\t\t\t  machine_mode, int, bool);\n extern void neon_pairwise_reduce (rtx, rtx, machine_mode,\n \t\t\t\t  rtx (*) (rtx, rtx, rtx));\n+extern rtx mve_bool_vec_to_const (rtx const_vec);\n extern rtx neon_make_constant (rtx, bool generate = true);\n extern tree arm_builtin_vectorized_function (unsigned int, tree, tree);\n extern void neon_expand_vector_init (rtx, rtx);"}, {"sha": "df43c670b058895868b28162406724901efc66d5", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -12802,7 +12802,10 @@ simd_valid_immediate (rtx op, machine_mode mode, int inverse,\n   innersize = GET_MODE_UNIT_SIZE (mode);\n \n   /* Only support 128-bit vectors for MVE.  */\n-  if (TARGET_HAVE_MVE && (!vector || n_elts * innersize != 16))\n+  if (TARGET_HAVE_MVE\n+      && (!vector\n+\t  || (GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL)\n+\t  || n_elts * innersize != 16))\n     return -1;\n \n   /* Vectors of float constants.  */\n@@ -13167,6 +13170,29 @@ neon_vdup_constant (rtx vals, bool generate)\n   return gen_vec_duplicate (mode, x);\n }\n \n+/* Return a HI representation of CONST_VEC suitable for MVE predicates.  */\n+rtx\n+mve_bool_vec_to_const (rtx const_vec)\n+{\n+  int n_elts = GET_MODE_NUNITS ( GET_MODE (const_vec));\n+  int repeat = 16 / n_elts;\n+  int i;\n+  int hi_val = 0;\n+\n+  for (i = 0; i < n_elts; i++)\n+    {\n+      rtx el = CONST_VECTOR_ELT (const_vec, i);\n+      unsigned HOST_WIDE_INT elpart;\n+\n+      gcc_assert (CONST_INT_P (el));\n+      elpart = INTVAL (el);\n+\n+      for (int j = 0; j < repeat; j++)\n+\thi_val |= elpart << (i * repeat + j);\n+    }\n+  return gen_int_mode (hi_val, HImode);\n+}\n+\n /* Return a non-NULL RTX iff VALS, which is a PARALLEL containing only\n    constants (for vec_init) or CONST_VECTOR, can be effeciently loaded\n    into a register.\n@@ -13207,6 +13233,8 @@ neon_make_constant (rtx vals, bool generate)\n       && simd_immediate_valid_for_move (const_vec, mode, NULL, NULL))\n     /* Load using VMOV.  On Cortex-A8 this takes one cycle.  */\n     return const_vec;\n+  else if (TARGET_HAVE_MVE && (GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL))\n+    return mve_bool_vec_to_const (const_vec);\n   else if ((target = neon_vdup_constant (vals, generate)) != NULL_RTX)\n     /* Loaded using VDUP.  On Cortex-A8 the VDUP takes one NEON\n        pipeline cycle; creating the constant takes one or two ARM\n@@ -25365,7 +25393,10 @@ arm_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n     return false;\n \n   if (IS_VPR_REGNUM (regno))\n-    return mode == HImode;\n+    return mode == HImode\n+      || mode == V16BImode\n+      || mode == V8BImode\n+      || mode == V4BImode;\n \n   if (TARGET_THUMB1)\n     /* For the Thumb we only allow values bigger than SImode in\n@@ -31053,6 +31084,19 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n     arm_post_atomic_barrier (model);\n }\n \f\n+/* Return the mode for the MVE vector of predicates corresponding to MODE.  */\n+machine_mode\n+arm_mode_to_pred_mode (machine_mode mode)\n+{\n+  switch (GET_MODE_NUNITS (mode))\n+    {\n+    case 16: return V16BImode;\n+    case 8: return V8BImode;\n+    case 4: return V4BImode;\n+    }\n+  gcc_unreachable ();\n+}\n+\n /* Expand code to compare vectors OP0 and OP1 using condition CODE.\n    If CAN_INVERT, store either the result or its inverse in TARGET\n    and return true if TARGET contains the inverse.  If !CAN_INVERT,\n@@ -31136,7 +31180,7 @@ arm_expand_vector_compare (rtx target, rtx_code code, rtx op0, rtx op1,\n \t  if (vcond_mve)\n \t    vpr_p0 = target;\n \t  else\n-\t    vpr_p0 = gen_reg_rtx (HImode);\n+\t    vpr_p0 = gen_reg_rtx (arm_mode_to_pred_mode (cmp_mode));\n \n \t  switch (GET_MODE_CLASS (cmp_mode))\n \t    {\n@@ -31178,7 +31222,7 @@ arm_expand_vector_compare (rtx target, rtx_code code, rtx op0, rtx op1,\n \t  if (vcond_mve)\n \t    vpr_p0 = target;\n \t  else\n-\t    vpr_p0 = gen_reg_rtx (HImode);\n+\t    vpr_p0 = gen_reg_rtx (arm_mode_to_pred_mode (cmp_mode));\n \n \t  emit_insn (gen_mve_vcmpq (code, cmp_mode, vpr_p0, op0, force_reg (cmp_mode, op1)));\n \t  if (!vcond_mve)\n@@ -31205,7 +31249,7 @@ arm_expand_vector_compare (rtx target, rtx_code code, rtx op0, rtx op1,\n \t  if (vcond_mve)\n \t    vpr_p0 = target;\n \t  else\n-\t    vpr_p0 = gen_reg_rtx (HImode);\n+\t    vpr_p0 = gen_reg_rtx (arm_mode_to_pred_mode (cmp_mode));\n \n \t  emit_insn (gen_mve_vcmpq (swap_condition (code), cmp_mode, vpr_p0, force_reg (cmp_mode, op1), op0));\n \t  if (!vcond_mve)\n@@ -31258,7 +31302,7 @@ arm_expand_vcond (rtx *operands, machine_mode cmp_result_mode)\n   if (TARGET_HAVE_MVE)\n     {\n       vcond_mve=true;\n-      mask = gen_reg_rtx (HImode);\n+      mask = gen_reg_rtx (arm_mode_to_pred_mode (cmp_result_mode));\n     }\n   else\n     mask = gen_reg_rtx (cmp_result_mode);"}, {"sha": "44b41eab4c552c6cb97ee8636fde98cfbf7fc3ca", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -89,7 +89,7 @@ VAR3 (BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)\n VAR1 (BINOP_NONE_NONE_UNONE, vaddlvq_p_s, v4si)\n VAR1 (BINOP_UNONE_UNONE_UNONE, vaddlvq_p_u, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_NONE_NONE, vcmpneq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_u, v16qi, v8hi, v4si)\n@@ -117,9 +117,9 @@ VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, veorq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_UNONE_UNONE, vcmphiq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_n_, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_UNONE_UNONE, vcmpcsq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n@@ -143,15 +143,15 @@ VAR3 (BINOP_UNONE_UNONE_IMM, vshlq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_IMM, vrshrq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_IMM, vqshlq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_n_, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_NONE_NONE, vcmpltq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_n_, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_NONE_NONE, vcmpleq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_n_, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_NONE_NONE, vcmpgtq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_NONE_NONE, vcmpgeq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_PRED_NONE_NONE, vcmpeqq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_IMM, vqshluq_n_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_UNONE, vaddvq_p_s, v16qi, v8hi, v4si)\n@@ -219,17 +219,17 @@ VAR2 (BINOP_UNONE_UNONE_IMM, vshllbq_n_u, v16qi, v8hi)\n VAR2 (BINOP_UNONE_UNONE_IMM, vorrq_n_u, v8hi, v4si)\n VAR2 (BINOP_UNONE_UNONE_IMM, vbicq_n_u, v8hi, v4si)\n VAR2 (BINOP_UNONE_NONE_NONE, vcmpneq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_UNONE_NONE_NONE, vcmpneq_f, v8hf, v4sf)\n+VAR2 (BINOP_PRED_NONE_NONE, vcmpneq_f, v8hf, v4sf)\n VAR2 (BINOP_UNONE_NONE_NONE, vcmpltq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_UNONE_NONE_NONE, vcmpltq_f, v8hf, v4sf)\n+VAR2 (BINOP_PRED_NONE_NONE, vcmpltq_f, v8hf, v4sf)\n VAR2 (BINOP_UNONE_NONE_NONE, vcmpleq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_UNONE_NONE_NONE, vcmpleq_f, v8hf, v4sf)\n+VAR2 (BINOP_PRED_NONE_NONE, vcmpleq_f, v8hf, v4sf)\n VAR2 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_UNONE_NONE_NONE, vcmpgtq_f, v8hf, v4sf)\n+VAR2 (BINOP_PRED_NONE_NONE, vcmpgtq_f, v8hf, v4sf)\n VAR2 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_UNONE_NONE_NONE, vcmpgeq_f, v8hf, v4sf)\n+VAR2 (BINOP_PRED_NONE_NONE, vcmpgeq_f, v8hf, v4sf)\n VAR2 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_UNONE_NONE_NONE, vcmpeqq_f, v8hf, v4sf)\n+VAR2 (BINOP_PRED_NONE_NONE, vcmpeqq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vsubq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vqmovntq_s, v8hi, v4si)\n VAR2 (BINOP_NONE_NONE_NONE, vqmovnbq_s, v8hi, v4si)\n@@ -295,8 +295,8 @@ VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vcvtaq_m_u, v8hi, v4si)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtaq_m_s, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vshlcq_vec_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_UNONE_IMM, vshlcq_vec_s, v16qi, v8hi, v4si)\n-VAR4 (TERNOP_UNONE_UNONE_UNONE_UNONE, vpselq_u, v16qi, v8hi, v4si, v2di)\n-VAR4 (TERNOP_NONE_NONE_NONE_UNONE, vpselq_s, v16qi, v8hi, v4si, v2di)\n+VAR4 (TERNOP_UNONE_UNONE_UNONE_PRED, vpselq_u, v16qi, v8hi, v4si, v2di)\n+VAR4 (TERNOP_NONE_NONE_NONE_PRED, vpselq_s, v16qi, v8hi, v4si, v2di)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vrev64q_m_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmvnq_m_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmlasq_n_u, v16qi, v8hi, v4si)\n@@ -426,7 +426,7 @@ VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrev64q_m_f, v8hf, v4sf)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrev32q_m_s, v16qi, v8hi)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vqmovntq_m_s, v8hi, v4si)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vqmovnbq_m_s, v8hi, v4si)\n-VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vpselq_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_PRED, vpselq_f, v8hf, v4sf)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vnegq_m_f, v8hf, v4sf)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmovntq_m_s, v8hi, v4si)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmovnbq_m_s, v8hi, v4si)"}, {"sha": "2b411b0cb0fcfcafc775173674d147179aea6157", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -312,6 +312,12 @@\n  (and (match_code \"const_vector\")\n       (match_test \"(TARGET_NEON || TARGET_HAVE_MVE) && op == CONST0_RTX (mode)\")))\n \n+(define_constraint \"DB\"\n+ \"@internal\n+  In ARM/Thumb-2 state with MVE a constant vector of booleans.\"\n+ (and (match_code \"const_vector\")\n+      (match_test \"TARGET_HAVE_MVE && GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL\")))\n+\n (define_constraint \"Da\"\n  \"@internal\n   In ARM/Thumb-2 state a const_int, const_double or const_vector that can"}, {"sha": "37cf7971be8015970cea91c089dcea2d5ce041f5", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -272,6 +272,8 @@\n (define_mode_iterator MVE_2 [V16QI V8HI V4SI])\n (define_mode_iterator MVE_5 [V8HI V4SI])\n (define_mode_iterator MVE_6 [V8HI V4SI])\n+(define_mode_iterator MVE_7 [V16BI V8BI V4BI])\n+(define_mode_iterator MVE_7_HI [HI V16BI V8BI V4BI])\n \n ;;----------------------------------------------------------------------------\n ;; Code iterators\n@@ -946,6 +948,10 @@\n \t\t\t       (V8HF \"u16\") (V4SF \"32\")])\n (define_mode_attr earlyclobber_32 [(V16QI \"=w\") (V8HI \"=w\") (V4SI \"=&w\")\n \t\t\t\t\t\t(V8HF \"=w\") (V4SF \"=&w\")])\n+(define_mode_attr MVE_VPRED [(V16QI \"V16BI\") (V8HI \"V8BI\") (V4SI \"V4BI\")\n+                             (V2DI \"HI\") (V8HF \"V8BI\")   (V4SF \"V4BI\")])\n+(define_mode_attr MVE_vpred [(V16QI \"v16bi\") (V8HI \"v8bi\") (V4SI \"v4bi\")\n+                             (V2DI \"hi\") (V8HF \"v8bi\")   (V4SF \"v4bi\")])\n \n ;;----------------------------------------------------------------------------\n ;; Code attributes"}, {"sha": "983aa10e6526b3879b768ba70b7cd664dc734f50", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -839,8 +839,8 @@\n ;;\n (define_insn \"@mve_vcmp<mve_cmp_op>q_<mode>\"\n   [\n-   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n-\t(MVE_COMPARISONS:HI (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+   (set (match_operand:<MVE_VPRED> 0 \"vpr_register_operand\" \"=Up\")\n+\t(MVE_COMPARISONS:<MVE_VPRED> (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n \t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -1929,8 +1929,8 @@\n ;;\n (define_insn \"@mve_vcmp<mve_cmp_op>q_f<mode>\"\n   [\n-   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n-\t(MVE_FP_COMPARISONS:HI (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+   (set (match_operand:<MVE_VPRED> 0 \"vpr_register_operand\" \"=Up\")\n+\t(MVE_FP_COMPARISONS:<MVE_VPRED> (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n \t\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n@@ -3324,7 +3324,7 @@\n    (set (match_operand:MVE_1 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_1 [(match_operand:MVE_1 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:MVE_1 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t\t       (match_operand:<MVE_VPRED> 3 \"vpr_register_operand\" \"Up\")]\n \t VPSELQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -4419,7 +4419,7 @@\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t\t       (match_operand:<MVE_VPRED> 3 \"vpr_register_operand\" \"Up\")]\n \t VPSELQ_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n@@ -10516,3 +10516,14 @@\n   \"vldr<V_sz_elem1>.<V_sz_elem>\\t%q0, %E1\"\n   [(set_attr \"type\" \"mve_load\")]\n )\n+\n+;; Expander for VxBI moves\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:MVE_7 0 \"nonimmediate_operand\")\n+        (match_operand:MVE_7 1 \"general_operand\"))]\n+  \"TARGET_HAVE_MVE\"\n+  {\n+    if (!register_operand (operands[0], <MODE>mode))\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+  }\n+)"}, {"sha": "f00d1cad3e9c5f5d901967c6905d56e9dc693a3d", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -73,21 +73,26 @@\n \n (define_insn \"*thumb2_movhi_vfp\"\n  [(set\n-   (match_operand:HI 0 \"nonimmediate_operand\"\n+   (match_operand:MVE_7_HI 0 \"nonimmediate_operand\"\n     \"=rk, r, l, r, m, r, *t, r, *t, Up, r\")\n-   (match_operand:HI 1 \"general_operand\"\n-    \"rk, I, Py, n, r, m, r, *t, *t, r, Up\"))]\n+   (match_operand:MVE_7_HI 1 \"general_operand\"\n+    \"rk, IDB, Py, n, r, m, r, *t, *t, r, Up\"))]\n  \"TARGET_THUMB2 && TARGET_VFP_BASE\n   && !TARGET_VFP_FP16INST\n-  && (register_operand (operands[0], HImode)\n-       || register_operand (operands[1], HImode))\"\n+  && (register_operand (operands[0], <MODE>mode)\n+       || register_operand (operands[1], <MODE>mode))\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n-    case 1:\n     case 2:\n       return \"mov%?\\t%0, %1\\t%@ movhi\";\n+    case 1:\n+      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_VECTOR_BOOL)\n+        operands[1] = mve_const_bool_vec_to_hi (operands[1]);\n+      else\n+        operands[1] = gen_lowpart (HImode, operands[1]);\n+      return \"mov%?\\t%0, %1\\t%@ movhi\";\n     case 3:\n       return \"movw%?\\t%0, %L1\\t%@ movhi\";\n     case 4:\n@@ -173,20 +178,25 @@\n \n (define_insn \"*thumb2_movhi_fp16\"\n  [(set\n-   (match_operand:HI 0 \"nonimmediate_operand\"\n+   (match_operand:MVE_7_HI 0 \"nonimmediate_operand\"\n     \"=rk, r, l, r, m, r, *t, r, *t, Up, r\")\n-   (match_operand:HI 1 \"general_operand\"\n-    \"rk, I, Py, n, r, m, r, *t, *t, r, Up\"))]\n+   (match_operand:MVE_7_HI 1 \"general_operand\"\n+    \"rk, IDB, Py, n, r, m, r, *t, *t, r, Up\"))]\n  \"TARGET_THUMB2 && (TARGET_VFP_FP16INST || TARGET_HAVE_MVE)\n-  && (register_operand (operands[0], HImode)\n-       || register_operand (operands[1], HImode))\"\n+  && (register_operand (operands[0], <MODE>mode)\n+       || register_operand (operands[1], <MODE>mode))\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n-    case 1:\n     case 2:\n       return \"mov%?\\t%0, %1\\t%@ movhi\";\n+    case 1:\n+      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_VECTOR_BOOL)\n+        operands[1] = mve_const_bool_vec_to_hi (operands[1]);\n+      else\n+        operands[1] = gen_lowpart (HImode, operands[1]);\n+      return \"mov%?\\t%0, %1\\t%@ movhi\";\n     case 3:\n       return \"movw%?\\t%0, %L1\\t%@ movhi\";\n     case 4:"}, {"sha": "093283ed43c45e0818e87772a7027338ada2df0a", "filename": "gcc/testsuite/gcc.dg/rtl/arm/mve-vxbi.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Farm%2Fmve-vxbi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Farm%2Fmve-vxbi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Farm%2Fmve-vxbi.c?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+void __RTL (startwith (\"ira\")) foo (void *ptr)\n+{\n+  (function \"foo\"\n+   (param \"ptr\"\n+    (DECL_RTL (reg/v:SI <0> [ ptr ]))\n+    (DECL_RTL_INCOMING (reg:SI r0 [ ptr ]))\n+    ) ;; param \"n\"\n+   (insn-chain\n+    (block 2\n+     (edge-from entry (flags \"FALLTHRU\"))\n+     (cnote 5 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+     (insn 7 (set (reg:V4BI <1>)\n+\t      (const_vector:V4BI [(const_int 1)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 1)])) (nil))\n+     (insn 8 (set (mem:V4BI (reg:SI <0>) [1 ptr+0 S2 A16]) (reg:V4BI <1>)))\n+     (edge-to exit (flags \"FALLTHRU\"))\n+     ) ;; block 2\n+    ) ;; insn-chain\n+   ) ;; function\n+}\n+\n+void __RTL (startwith (\"ira\")) foo2 (void *ptr)\n+{\n+  (function \"foo\"\n+   (param \"ptr\"\n+    (DECL_RTL (reg/v:SI <0> [ ptr ]))\n+    (DECL_RTL_INCOMING (reg:SI r0 [ ptr ]))\n+    ) ;; param \"n\"\n+   (insn-chain\n+    (block 2\n+     (edge-from entry (flags \"FALLTHRU\"))\n+     (cnote 5 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+     (insn 7 (set (reg:V8BI <1>)\n+\t      (const_vector:V8BI [(const_int 1)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 1)\n+\t\t\t\t  (const_int 1)\n+\t\t\t\t  (const_int 1)\n+\t\t\t\t  (const_int 1)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 1)])) (nil))\n+     (insn 8 (set (mem:V8BI (reg:SI <0>) [1 ptr+0 S2 A16]) (reg:V8BI <1>)))\n+     (edge-to exit (flags \"FALLTHRU\"))\n+     ) ;; block 2\n+    ) ;; insn-chain\n+   ) ;; function\n+}\n+\n+void __RTL (startwith (\"ira\")) foo3 (void *ptr)\n+{\n+  (function \"foo\"\n+   (param \"ptr\"\n+    (DECL_RTL (reg/v:SI <0> [ ptr ]))\n+    (DECL_RTL_INCOMING (reg:SI r0 [ ptr ]))\n+    ) ;; param \"n\"\n+   (insn-chain\n+    (block 2\n+     (edge-from entry (flags \"FALLTHRU\"))\n+     (cnote 5 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+     (insn 7 (set (reg:V16BI <1>)\n+\t      (const_vector:V16BI [(const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)\n+\t\t\t\t  (const_int 0)])) (nil))\n+     (insn 8 (set (mem:V16BI (reg:SI <0>) [1 ptr+0 S2 A16]) (reg:V16BI <1>)))\n+     (edge-to exit (flags \"FALLTHRU\"))\n+     ) ;; block 2\n+    ) ;; insn-chain\n+   ) ;; function\n+}"}, {"sha": "355f6473a0054d3e7716123650e5574f1bcaeaf9", "filename": "gcc/testsuite/gcc.target/arm/simd/pr101325-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr101325-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr101325-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr101325-2.c?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_mve_hw } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+\n+#include <arm_mve.h>\n+\n+\n+__attribute((noipa))\n+unsigned foo(int8x16_t v, int8x16_t w)\n+{\n+  return vcmpeqq (v, w);\n+}\n+\n+int main(void)\n+{\n+  if (foo (vdupq_n_s8(0), vdupq_n_s8(0)) != 0xffffU)\n+    __builtin_abort ();\n+}"}, {"sha": "4cb2513da871edaf1bb9a384255bc742a431b6d9", "filename": "gcc/testsuite/gcc.target/arm/simd/pr101325.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr101325.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr101325.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr101325.c?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <arm_mve.h>\n+\n+unsigned foo(int8x16_t v, int8x16_t w)\n+{\n+  return vcmpeqq (v, w);\n+}\n+/* { dg-final { scan-assembler {\\tvcmp.i8  eq} } } */\n+/* { dg-final { scan-assembler {\\tvmrs\\tr[0-9]+, P0} } } */\n+/* { dg-final { scan-assembler {\\tuxth} } } */"}, {"sha": "972400f34515b5b77c1e059d659f34bfc26a6086", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91224cf625dc90304bb515a0cc602beed48fe3da/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=91224cf625dc90304bb515a0cc602beed48fe3da", "patch": "@@ -5038,6 +5038,7 @@ proc check_effective_target_arm_cmse_hw { } {\n \t}\n     } \"-mcmse\"]\n }\n+\n # Return 1 if the target supports executing MVE instructions, 0\n # otherwise.\n \n@@ -5053,7 +5054,7 @@ proc check_effective_target_arm_mve_hw {} {\n \t       : \"0\" (a), \"r\" (b));\n \t  return (a != 2);\n \t}\n-    } \"\"]\n+    } [add_options_for_arm_v8_1m_mve_fp \"\"]]\n }\n \n # Return 1 if this is an ARM target where ARMv8-M Security Extensions with"}]}