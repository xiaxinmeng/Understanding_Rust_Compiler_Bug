{"sha": "62549523462ea288aebd4e476bb33169bbe0a293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI1NDk1MjM0NjJlYTI4OGFlYmQ0ZTQ3NmJiMzMxNjliYmUwYTI5Mw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-12-16T11:34:45Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-12-16T11:34:45Z"}, "message": "Implement LWG 2769, Redundant const in the return type of any_cast(const any&).\n\nImplement LWG 2769, Redundant const in the return type of\nany_cast(const any&).\n* include/std/any (_AnyCast): New.\n(any_cast(const any&)): Use it and add an explicit cast for return.\n(any_cast(any&)): Likewise.\n(any_cast(any&&)): Likewise.\n* testsuite/20_util/any/misc/any_cast.cc: Add a test for a type\nthat has an explicit copy constructor.\n*testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n\nFrom-SVN: r243739", "tree": {"sha": "7b9f82a4f8271aa9bbfad13dac55d30a9f1d1557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9f82a4f8271aa9bbfad13dac55d30a9f1d1557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62549523462ea288aebd4e476bb33169bbe0a293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62549523462ea288aebd4e476bb33169bbe0a293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62549523462ea288aebd4e476bb33169bbe0a293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62549523462ea288aebd4e476bb33169bbe0a293/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "a0804e7d92035ba4c654c00119048d52f246f743", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=62549523462ea288aebd4e476bb33169bbe0a293", "patch": "@@ -1,3 +1,15 @@\n+2016-12-16  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2769, Redundant const in the return type of\n+\tany_cast(const any&).\n+\t* include/std/any (_AnyCast): New.\n+\t(any_cast(const any&)): Use it and add an explicit cast for return.\n+\t(any_cast(any&)): Likewise.\n+\t(any_cast(any&&)): Likewise.\n+\t* testsuite/20_util/any/misc/any_cast.cc: Add a test for a type\n+\tthat has an explicit copy constructor.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n+\n 2016-12-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/59170"}, {"sha": "44546e18c0f1aa83ff1bdbd9b55fcfe0e838b38b", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=62549523462ea288aebd4e476bb33169bbe0a293", "patch": "@@ -433,6 +433,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return any(in_place_type<_Tp>, __il, std::forward<_Args>(__args)...);\n     }\n \n+  template <typename _Tp>\n+    using _AnyCast = remove_cv_t<remove_reference_t<_Tp>>;\n   /**\n    * @brief Access the contained object.\n    *\n@@ -448,9 +450,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(any::__is_valid_cast<_ValueType>(),\n \t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<add_const_t<remove_reference_t<_ValueType>>>(&__any);\n+      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n       if (__p)\n-\treturn *__p;\n+\treturn static_cast<_ValueType>(*__p);\n       __throw_bad_any_cast();\n     }\n \n@@ -471,9 +473,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(any::__is_valid_cast<_ValueType>(),\n \t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<remove_reference_t<_ValueType>>(&__any);\n+      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n       if (__p)\n-\treturn *__p;\n+\treturn static_cast<_ValueType>(*__p);\n       __throw_bad_any_cast();\n     }\n \n@@ -485,9 +487,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(any::__is_valid_cast<_ValueType>(),\n \t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<remove_reference_t<_ValueType>>(&__any);\n+      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n       if (__p)\n-\treturn *__p;\n+\treturn static_cast<_ValueType>(*__p);\n       __throw_bad_any_cast();\n     }\n \n@@ -499,9 +501,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(any::__is_valid_cast<_ValueType>(),\n \t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<remove_reference_t<_ValueType>>(&__any);\n+      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n       if (__p)\n-\treturn std::move(*__p);\n+\treturn static_cast<_ValueType>(std::move(*__p));\n       __throw_bad_any_cast();\n     }\n   // @}"}, {"sha": "f3ae5927904285f72b89457071ff556652e29692", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc?ref=62549523462ea288aebd4e476bb33169bbe0a293", "patch": "@@ -106,9 +106,22 @@ void test03()\n   MoveDeleted&& md3 = any_cast<MoveDeleted&&>(any(std::move(md)));\n }\n \n+void test04()\n+{\n+  struct ExplicitCopy\n+  {\n+    ExplicitCopy() = default;\n+    explicit ExplicitCopy(const ExplicitCopy&) = default;\n+  };\n+  any x = ExplicitCopy();\n+  ExplicitCopy ec{any_cast<ExplicitCopy>(x)};\n+  ExplicitCopy ec2{any_cast<ExplicitCopy>(std::move(x))};\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}, {"sha": "a8a1ca9fd0abfcd6c5351123a662b855efb6f7c7", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62549523462ea288aebd4e476bb33169bbe0a293/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=62549523462ea288aebd4e476bb33169bbe0a293", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 453 }\n+  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 455 }\n }"}]}