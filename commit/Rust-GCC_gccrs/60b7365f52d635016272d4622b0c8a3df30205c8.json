{"sha": "60b7365f52d635016272d4622b0c8a3df30205c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBiNzM2NWY1MmQ2MzUwMTYyNzJkNDYyMmIwYzhhM2RmMzAyMDVjOA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-01-27T06:04:29Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-01-27T06:04:29Z"}, "message": "ObjectInputStream.java (read): AND byte with 0xff to make result unsigned.\n\n\t* java/io/ObjectInputStream.java (read): AND byte with 0xff to make\n\tresult unsigned.\n\t(read (byte[], int, int)): Only call readNextBlock() if the block\n\tbuffer would actually be overrun. Increment blockDataPosition.\n\t(callReadMethod): Propagate exceptions from invocation target.\n\t* java/io/ObjectOutputStream.java (callWriteMethod): Propagate\n\texceptions from invocation target.\n\nFrom-SVN: r39293", "tree": {"sha": "c15526d29fdc612fde34a407401f6e18edca8b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c15526d29fdc612fde34a407401f6e18edca8b69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60b7365f52d635016272d4622b0c8a3df30205c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b7365f52d635016272d4622b0c8a3df30205c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b7365f52d635016272d4622b0c8a3df30205c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b7365f52d635016272d4622b0c8a3df30205c8/comments", "author": null, "committer": null, "parents": [{"sha": "31e1e0a6528b84e40f8eb97552e4bbe1070e5513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e1e0a6528b84e40f8eb97552e4bbe1070e5513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e1e0a6528b84e40f8eb97552e4bbe1070e5513"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "b4916054ca8ad118ee64e33dc544440bffcdd7a9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60b7365f52d635016272d4622b0c8a3df30205c8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60b7365f52d635016272d4622b0c8a3df30205c8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=60b7365f52d635016272d4622b0c8a3df30205c8", "patch": "@@ -1,3 +1,13 @@\n+2001-01-27  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/io/ObjectInputStream.java (read): AND byte with 0xff to make\n+\tresult unsigned.\n+\t(read (byte[], int, int)): Only call readNextBlock() if the block \n+\tbuffer would actually be overrun. Increment blockDataPosition.\n+\t(callReadMethod): Propagate exceptions from invocation target.\n+\t* java/io/ObjectOutputStream.java (callWriteMethod): Propagate \n+\texceptions from invocation target.\n+\n 2001-01-26  Tom Tromey  <tromey@redhat.com>\n \n \t* jni.cc (_Jv_JNI_GetAnyMethodID): Rewrite signature from external"}, {"sha": "9c10d58388d7044ca62178d5b48e8a68a338a6d6", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60b7365f52d635016272d4622b0c8a3df30205c8/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60b7365f52d635016272d4622b0c8a3df30205c8/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=60b7365f52d635016272d4622b0c8a3df30205c8", "patch": "@@ -577,21 +577,23 @@ public int read () throws IOException\n     {\n       if (this.blockDataPosition >= this.blockDataBytes)\n \treadNextBlock ();\n-      return this.blockData[this.blockDataPosition++];\n+      return (this.blockData[this.blockDataPosition++] & 0xff);\n     }\n     else\n       return this.realInputStream.read ();\n   }\n \n-  public int read (byte data[], int offset, int length) throws IOException\n+  public int read (byte[] data, int offset, int length) throws IOException\n   {\n     if (this.readDataFromBlock)\n     {\n-      if (this.blockDataPosition + length >= this.blockDataBytes)\n+      if (this.blockDataPosition + length > this.blockDataBytes)\n \treadNextBlock ();\n \n       System.arraycopy (this.blockData, this.blockDataPosition,\n \t\t\tdata, offset, length);\n+      blockDataPosition += length;\t\n+\n       return length;\n     }\n     else\n@@ -1359,16 +1361,29 @@ private void callReadMethod (Object obj, Class klass) throws IOException\n   {\n     try\n       {\n-\tClass classArgs[] = {Class.forName (\"java.io.ObjectInputStream\")};\n+\tClass classArgs[] = {ObjectInputStream.class};\n \tMethod m = getMethod (klass, \"readObject\", classArgs);\n \tif (m == null)\n \t  return;\n \tObject args[] = {this};\n-\tm.invoke (obj, args);\t\n+\tm.invoke (obj, args);\n       }\n-    catch (Exception _)\n+    catch (InvocationTargetException x)\n+      {\n+        /* Rethrow if possible. */\n+\tThrowable exception = x.getTargetException();\n+\tif (exception instanceof RuntimeException)\n+\t  throw (RuntimeException) exception;\n+\tif (exception instanceof IOException)\n+\t  throw (IOException) exception;\n+\n+\tthrow new IOException (\"Exception thrown from readObject() on \" +\n+\t\t\t       klass + \": \" + exception.getClass().getName());\n+      }\n+    catch (Exception x)\n       {\n-\tthrow new IOException ();\n+\tthrow new IOException (\"Failure invoking readObject() on \" +\n+\t\t\t       klass + \": \" + x.getClass().getName());\n       }\n   }\n     "}, {"sha": "faf7ea1a21b37c96ed3afc6289206496f6445baa", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60b7365f52d635016272d4622b0c8a3df30205c8/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60b7365f52d635016272d4622b0c8a3df30205c8/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=60b7365f52d635016272d4622b0c8a3df30205c8", "patch": "@@ -633,7 +633,7 @@ public void write (int data) throws IOException\n   /**\n      @see java.io.DataOutputStream#write (byte[])\n   */\n-  public void write (byte b[]) throws IOException\n+  public void write (byte[] b) throws IOException\n   {\n     write (b, 0, b.length);\n   }\n@@ -642,7 +642,7 @@ public void write (byte b[]) throws IOException\n   /**\n      @see java.io.DataOutputStream#write (byte[],int,int)\n   */\n-  public void write (byte b[], int off, int len) throws IOException\n+  public void write (byte[] b, int off, int len) throws IOException\n   {\n     if (writeDataAsBlocks)\n     {\n@@ -1175,22 +1175,35 @@ private void setBlockDataMode (boolean on)\n \n   private void callWriteMethod (Object obj) throws IOException\n   {\n+    Class klass = obj.getClass ();\n     try\n       {\n-\tClass classArgs[] = {Class.forName (\"java.io.ObjectOutputStream\")};\n-\tClass klass = obj.getClass ();\n+\tClass classArgs[] = {ObjectOutputStream.class};\n \tMethod m = getMethod (klass, \"writeObject\", classArgs);\n \tif (m == null)\n \t  return;\n \tObject args[] = {this};\n \tm.invoke (obj, args);\t\n       }\n-    catch (Exception _)\n+    catch (InvocationTargetException x)\n       {\n-\tthrow new IOException ();\n+        /* Rethrow if possible. */\n+\tThrowable exception = x.getTargetException();\n+\tif (exception instanceof RuntimeException)\n+\t  throw (RuntimeException) exception;\n+\tif (exception instanceof IOException)\n+\t  throw (IOException) exception;\n+\n+\tthrow new IOException (\"Exception thrown from writeObject() on \" +\n+\t\t\t       klass + \": \" + exception.getClass().getName());\n+      }\n+    catch (Exception x)\n+      {\n+\tthrow new IOException (\"Failure invoking writeObject() on \" +\n+\t\t\t       klass + \": \" + x.getClass().getName());\n       }\n   }\n-    \n+\n   private boolean getBooleanField (Object obj, String field_name) throws IOException\n   {\n     try\n@@ -1331,7 +1344,7 @@ private Object getObjectField (Object obj, String field_name,\n   private static native Field getField (Class klass, String name)\n     throws java.lang.NoSuchFieldException;\n \n-  private static native Method getMethod (Class klass, String name, Class args[])\n+  private static native Method getMethod (Class klass, String name, Class[] args)\n     throws java.lang.NoSuchMethodException;\n \n   // this value comes from 1.2 spec, but is used in 1.1 as well"}]}