{"sha": "ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5NDhiMzc3NjhjOTljZDhlYjlmNWI2ZmJkNDVmY2Y0YmQxNWI3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-14T07:04:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-14T07:04:45Z"}, "message": "options: Save and restore opts_set for Optimization and Target options\n\n> Seems a latent issue.\n> Neither cl_optimization_{save,restore} nor cl_target_option_{save,restore}\n> (nor any of the target hooks they call) saves or restores any opts_set\n> values, so I think opts_set can be trusted only during option processing (if\n> at all), but not later.\n> So, short term a fix would be IMHO just stop using opts_set altogether in\n> arm_configure_build_target, it doesn't make much sense to me, it should test\n> if those strings are non-NULL instead, or at least do that when it is\n> invoked from arm_option_restore (e.g. could be done by calling it with\n> opts instead of &global_options_set ).\n> Longer term, the question is if cl_optimization_{save,restore} and\n> cl_target_option_{save,restore} shouldn't be changed not to only\n> save/restore the options, but also save the opts_set flags.\n> It could be done e.g. by adding a bool array or set of bool members\n> to struct cl_optimization and struct cl_target_option , or even more compact\n> by using bitmasks, pack each 64 adjacent option flags into a UHWI element\n> of an array.\n\nSo, I've tried under debugger how it behaves and seems global_options_set\nis really an or of whether an option has been ever seen as explicit, either\non the command line or in any of the option pragmas or optimize/target\nattributes seen so far, so it isn't something that can be relied on.\n\nThe following patch implements the saving/restoring of the opts_set bits\n(though only for the options/variables saved by the generic options-save.c\ncode, for the target specific stuff that isn't handled by the generic code\nthe opts_set argument is now passed to the hook and the backends can choose\ne.g. to use a TargetSave variable to save the flags either individually or\ntogether in some bitmask (or ignore it if they never need opts_set for the\noptions).\n\nThis patch itself doesn't fix the testcase failing on arm, but a follow up\npatch will.\n\n2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* opt-read.awk: Also initialize extra_target_var_types array.\n\t* opth-gen.awk: Emit explicit_mask arrays to struct cl_optimization\n\tand cl_target_option.  Adjust cl_optimization_save,\n\tcl_optimization_restore, cl_target_option_save and\n\tcl_target_option_restore declarations.\n\t* optc-save-gen.awk: Add opts_set argument to cl_optimization_save,\n\tcl_optimization_restore, cl_target_option_save and\n\tcl_target_option_restore functions and save or restore opts_set\n\tnext to the opts values into or from explicit_mask arrays.\n\tIn cl_target_option_eq and cl_optimization_option_eq compare\n\texplicit_mask arrays, in cl_target_option_hash and cl_optimization_hash\n\thash them and in cl_target_option_stream_out,\n\tcl_target_option_stream_in, cl_optimization_stream_out and\n\tcl_optimization_stream_in stream them.\n\t* tree.h (build_optimization_node, build_target_option_node): Add\n\topts_set argument.\n\t* tree.c (build_optimization_node): Add opts_set argument, pass it\n\tto cl_optimization_save.\n\t(build_target_option_node): Add opts_set argument, pass it to\n\tcl_target_option_save.\n\t* function.c (invoke_set_current_function_hook): Adjust\n\tcl_optimization_restore caller.\n\t* ipa-inline-transform.c (inline_call): Adjust cl_optimization_restore\n\tand build_optimization_node callers.\n\t* target.def (TARGET_OPTION_SAVE, TARGET_OPTION_RESTORE): Add opts_set\n\targument.\n\t* target-globals.c (save_target_globals_default_opts): Adjust\n\tcl_optimization_restore callers.\n\t* toplev.c (process_options): Adjust build_optimization_node and\n\tcl_optimization_restore callers.\n\t(target_reinit): Adjust cl_optimization_restore caller.\n\t* tree-streamer-in.c (lto_input_ts_function_decl_tree_pointers):\n\tAdjust build_optimization_node and cl_optimization_restore callers.\n\t* doc/tm.texi: Updated.\n\t* config/aarch64/aarch64.c (aarch64_override_options): Adjust\n\tbuild_target_option_node caller.\n\t(aarch64_option_save, aarch64_option_restore): Add opts_set argument.\n\t(aarch64_set_current_function): Adjust cl_target_option_restore\n\tcaller.\n\t(aarch64_option_valid_attribute_p): Adjust cl_target_option_save,\n\tcl_target_option_restore, cl_optimization_restore,\n\tbuild_optimization_node and build_target_option_node callers.\n\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse): Adjust\n\tcl_target_option_restore and build_target_option_node callers.\n\t* config/arm/arm.c (arm_option_save, arm_option_restore): Add\n\topts_set argument.\n\t(arm_option_override): Adjust cl_target_option_save,\n\tbuild_optimization_node and build_target_option_node callers.\n\t(arm_set_current_function): Adjust cl_target_option_restore caller.\n\t(arm_valid_target_attribute_tree): Adjust build_target_option_node\n\tcaller.\n\t(add_attribute): Formatting fix.\n\t(arm_valid_target_attribute_p): Adjust cl_optimization_restore,\n\tcl_target_option_restore, arm_valid_target_attribute_tree and\n\tbuild_optimization_node callers.\n\t* config/arm/arm-c.c (arm_pragma_target_parse): Adjust\n\tcl_target_option_restore callers.\n\t* config/csky/csky.c (csky_option_override): Adjust\n\tbuild_target_option_node and cl_target_option_save callers.\n\t* config/gcn/gcn.c (gcn_fixup_accel_lto_options): Adjust\n\tbuild_optimization_node and cl_optimization_restore callers.\n\t* config/i386/i386-builtins.c (get_builtin_code_for_version):\n\tAdjust cl_target_option_save and cl_target_option_restore\n\tcallers.\n\t* config/i386/i386-c.c (ix86_pragma_target_parse): Adjust\n\tbuild_target_option_node and cl_target_option_restore callers.\n\t* config/i386/i386-options.c (ix86_function_specific_save,\n\tix86_function_specific_restore): Add opts_set arguments.\n\t(ix86_valid_target_attribute_tree): Adjust build_target_option_node\n\tcaller.\n\t(ix86_valid_target_attribute_p): Adjust build_optimization_node,\n\tcl_optimization_restore, cl_target_option_restore,\n\tix86_valid_target_attribute_tree and build_optimization_node callers.\n\t(ix86_option_override_internal): Adjust build_target_option_node\n\tcaller.\n\t(ix86_reset_previous_fndecl, ix86_set_current_function): Adjust\n\tcl_target_option_restore callers.\n\t* config/i386/i386-options.h (ix86_function_specific_save,\n\tix86_function_specific_restore): Add opts_set argument.\n\t* config/nios2/nios2.c (nios2_option_override): Adjust\n\tbuild_target_option_node caller.\n\t(nios2_option_save, nios2_option_restore): Add opts_set argument.\n\t(nios2_valid_target_attribute_tree): Adjust build_target_option_node\n\tcaller.\n\t(nios2_valid_target_attribute_p): Adjust build_optimization_node,\n\tcl_optimization_restore, cl_target_option_save and\n\tcl_target_option_restore callers.\n\t(nios2_set_current_function, nios2_pragma_target_parse): Adjust\n\tcl_target_option_restore callers.\n\t* config/pru/pru.c (pru_option_override): Adjust\n\tbuild_target_option_node caller.\n\t(pru_set_current_function): Adjust cl_target_option_restore\n\tcallers.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust\n\tcl_target_option_save caller.\n\t(rs6000_option_override_internal): Adjust build_target_option_node\n\tcaller.\n\t(rs6000_valid_attribute_p): Adjust build_optimization_node,\n\tcl_optimization_restore, cl_target_option_save,\n\tcl_target_option_restore and build_target_option_node callers.\n\t(rs6000_pragma_target_parse): Adjust cl_target_option_restore and\n\tbuild_target_option_node callers.\n\t(rs6000_activate_target_options): Adjust cl_target_option_restore\n\tcallers.\n\t(rs6000_function_specific_save, rs6000_function_specific_restore):\n\tAdd opts_set argument.\n\t* config/s390/s390.c (s390_function_specific_restore): Likewise.\n\t(s390_option_override_internal): Adjust s390_function_specific_restore\n\tcaller.\n\t(s390_option_override, s390_valid_target_attribute_tree): Adjust\n\tbuild_target_option_node caller.\n\t(s390_valid_target_attribute_p): Adjust build_optimization_node,\n\tcl_optimization_restore and cl_target_option_restore callers.\n\t(s390_activate_target_options): Adjust cl_target_option_restore\n\tcaller.\n\t* config/s390/s390-c.c (s390_cpu_cpp_builtins): Adjust\n\tcl_target_option_save caller.\n\t(s390_pragma_target_parse): Adjust build_target_option_node and\n\tcl_target_option_restore callers.\ngcc/c-family/\n\t* c-attribs.c (handle_optimize_attribute): Adjust\n\tcl_optimization_save, cl_optimization_restore and\n\tbuild_optimization_node callers.\n\t* c-pragma.c (handle_pragma_optimize): Adjust\n\tbuild_optimization_node caller.\n\t(handle_pragma_push_options): Adjust\n\tbuild_optimization_node and build_target_option_node callers.\n\t(handle_pragma_pop_options, handle_pragma_reset_options):\n\tAdjust cl_optimization_restore callers.\ngcc/go/\n\t* go-gcc.cc (Gcc_backend::function): Adjust\n\tcl_optimization_save, cl_optimization_restore and\n\tbuild_optimization_node callers.\ngcc/ada/\n\t* gcc-interface/trans.c (gigi): Adjust build_optimization_node\n\tcaller.", "tree": {"sha": "e8d5a3b0d68993e3b4331fbdc12621cd28647879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8d5a3b0d68993e3b4331fbdc12621cd28647879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac7b66958016225724084078e6e7937e23ffcd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac7b66958016225724084078e6e7937e23ffcd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac7b66958016225724084078e6e7937e23ffcd3"}], "stats": {"total": 740, "additions": 583, "deletions": 157}, "files": [{"sha": "3491451cc3dbe32ae3102ab947666c1afa74efb7", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -691,7 +691,8 @@ gigi (Node_Id gnat_root,\n \n   /* Save the current optimization options again after the above possible\n      global_options changes.  */\n-  optimization_default_node = build_optimization_node (&global_options);\n+  optimization_default_node\n+    = build_optimization_node (&global_options, &global_options_set);\n   optimization_current_node = optimization_default_node;\n \n   /* Now translate the compilation unit proper.  */"}, {"sha": "4920725ca2deb7590fdf2b64aeb4376e9e8aba04", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -4448,7 +4448,7 @@ handle_optimize_attribute (tree *node, tree name, tree args,\n       tree old_opts = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node);\n \n       /* Save current options.  */\n-      cl_optimization_save (&cur_opts, &global_options);\n+      cl_optimization_save (&cur_opts, &global_options, &global_options_set);\n \n       /* If we previously had some optimization options, use them as the\n \t default.  */\n@@ -4460,16 +4460,17 @@ handle_optimize_attribute (tree *node, tree name, tree args,\n \t}\n \n       if (old_opts)\n-\tcl_optimization_restore (&global_options,\n+\tcl_optimization_restore (&global_options, &global_options_set,\n \t\t\t\t TREE_OPTIMIZATION (old_opts));\n \n       /* Parse options, and update the vector.  */\n       parse_optimize_options (args, true);\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n-\t= build_optimization_node (&global_options);\n+\t= build_optimization_node (&global_options, &global_options_set);\n \n       /* Restore current options.  */\n-      cl_optimization_restore (&global_options, &cur_opts);\n+      cl_optimization_restore (&global_options, &global_options_set,\n+\t\t\t       &cur_opts);\n       if (saved_global_options != NULL)\n \t{\n \t  cl_optimization_compare (saved_global_options, &global_options);"}, {"sha": "dc52ee8b003672e5c142c9b483cb7a695dde958a", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -987,7 +987,8 @@ handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n \n       parse_optimize_options (args, false);\n       current_optimize_pragma = chainon (current_optimize_pragma, args);\n-      optimization_current_node = build_optimization_node (&global_options);\n+      optimization_current_node\n+\t= build_optimization_node (&global_options, &global_options_set);\n       c_cpp_builtins_optimize_pragma (parse_in,\n \t\t\t\t      optimization_previous_node,\n \t\t\t\t      optimization_current_node);\n@@ -1034,8 +1035,10 @@ handle_pragma_push_options (cpp_reader *ARG_UNUSED(dummy))\n       p->saved_global_options = XNEW (gcc_options);\n       *p->saved_global_options = global_options;\n     }\n-  p->optimize_binary = build_optimization_node (&global_options);\n-  p->target_binary = build_target_option_node (&global_options);\n+  p->optimize_binary = build_optimization_node (&global_options,\n+\t\t\t\t\t\t&global_options_set);\n+  p->target_binary = build_target_option_node (&global_options,\n+\t\t\t\t\t       &global_options_set);\n \n   /* Save optimization and target flags in string list format.  */\n   p->optimize_strings = copy_list (current_optimize_pragma);\n@@ -1079,7 +1082,7 @@ handle_pragma_pop_options (cpp_reader *ARG_UNUSED(dummy))\n   if (p->optimize_binary != optimization_current_node)\n     {\n       tree old_optimize = optimization_current_node;\n-      cl_optimization_restore (&global_options,\n+      cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t       TREE_OPTIMIZATION (p->optimize_binary));\n       c_cpp_builtins_optimize_pragma (parse_in, old_optimize,\n \t\t\t\t      p->optimize_binary);\n@@ -1122,7 +1125,7 @@ handle_pragma_reset_options (cpp_reader *ARG_UNUSED(dummy))\n   if (new_optimize != optimization_current_node)\n     {\n       tree old_optimize = optimization_current_node;\n-      cl_optimization_restore (&global_options,\n+      cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t       TREE_OPTIMIZATION (new_optimize));\n       c_cpp_builtins_optimize_pragma (parse_in, old_optimize, new_optimize);\n       optimization_current_node = new_optimize;"}, {"sha": "5e23328608bd5d327cf0f9e21c2e70293c09a641", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -242,12 +242,12 @@ aarch64_pragma_target_parse (tree args, tree pop_target)\n   else\n     {\n       pop_target = pop_target ? pop_target : target_option_default_node;\n-      cl_target_option_restore (&global_options,\n+      cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\tTREE_TARGET_OPTION (pop_target));\n     }\n \n   target_option_current_node\n-    = build_target_option_node (&global_options);\n+    = build_target_option_node (&global_options, &global_options_set);\n \n   aarch64_reset_previous_fndecl ();\n   /* For the definitions, ensure all newly defined macros are considered"}, {"sha": "b251f3947e20e38d43d49ad4a93b96fc3890d5b1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -15034,7 +15034,7 @@ aarch64_override_options (void)\n   /* Save these options as the default ones in case we push and pop them later\n      while processing functions with potential target attributes.  */\n   target_option_default_node = target_option_current_node\n-      = build_target_option_node (&global_options);\n+    = build_target_option_node (&global_options, &global_options_set);\n }\n \n /* Implement targetm.override_options_after_change.  */\n@@ -15109,7 +15109,8 @@ initialize_aarch64_code_model (struct gcc_options *opts)\n /* Implement TARGET_OPTION_SAVE.  */\n \n static void\n-aarch64_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\n+aarch64_option_save (struct cl_target_option *ptr, struct gcc_options *opts,\n+\t\t     struct gcc_options */* opts_set */)\n {\n   ptr->x_aarch64_override_tune_string = opts->x_aarch64_override_tune_string;\n   ptr->x_aarch64_branch_protection_string\n@@ -15120,7 +15121,9 @@ aarch64_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\n    using the information saved in PTR.  */\n \n static void\n-aarch64_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\n+aarch64_option_restore (struct gcc_options *opts,\n+\t\t\tstruct gcc_options */* opts_set */,\n+\t\t\tstruct cl_target_option *ptr)\n {\n   opts->x_explicit_tune_core = ptr->x_explicit_tune_core;\n   selected_tune = aarch64_get_tune_cpu (ptr->x_explicit_tune_core);\n@@ -15210,7 +15213,8 @@ aarch64_set_current_function (tree fndecl)\n   aarch64_previous_fndecl = fndecl;\n \n   /* First set the target options.  */\n-  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+  cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t    TREE_TARGET_OPTION (new_tree));\n \n   aarch64_save_restore_target_globals (new_tree);\n }\n@@ -15709,17 +15713,18 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n     }\n   tree func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n \n-  old_optimize = build_optimization_node (&global_options);\n+  old_optimize\n+    = build_optimization_node (&global_options, &global_options_set);\n   func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n \n   /* If the function changed the optimization levels as well as setting\n      target options, start with the optimizations specified.  */\n   if (func_optimize && func_optimize != old_optimize)\n-    cl_optimization_restore (&global_options,\n+    cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t     TREE_OPTIMIZATION (func_optimize));\n \n   /* Save the current target options to restore at the end.  */\n-  cl_target_option_save (&cur_target, &global_options);\n+  cl_target_option_save (&cur_target, &global_options, &global_options_set);\n \n   /* If fndecl already has some target attributes applied to it, unpack\n      them so that we add this attribute on top of them, rather than\n@@ -15730,11 +15735,12 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n \t= TREE_TARGET_OPTION (existing_target);\n \n       if (existing_options)\n-\tcl_target_option_restore (&global_options, existing_options);\n+\tcl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t\t  existing_options);\n     }\n   else\n-    cl_target_option_restore (&global_options,\n-\t\t\tTREE_TARGET_OPTION (target_option_current_node));\n+    cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t      TREE_TARGET_OPTION (target_option_current_node));\n \n   ret = aarch64_process_target_attr (args);\n \n@@ -15754,12 +15760,14 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n \t  aarch64_init_simd_builtins ();\n \t  current_target_pragma = saved_current_target_pragma;\n \t}\n-      new_target = build_target_option_node (&global_options);\n+      new_target = build_target_option_node (&global_options,\n+\t\t\t\t\t     &global_options_set);\n     }\n   else\n     new_target = NULL;\n \n-  new_optimize = build_optimization_node (&global_options);\n+  new_optimize = build_optimization_node (&global_options,\n+\t\t\t\t\t  &global_options_set);\n \n   if (fndecl && ret)\n     {\n@@ -15769,10 +15777,10 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n \tDECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) = new_optimize;\n     }\n \n-  cl_target_option_restore (&global_options, &cur_target);\n+  cl_target_option_restore (&global_options, &global_options_set, &cur_target);\n \n   if (old_optimize != new_optimize)\n-    cl_optimization_restore (&global_options,\n+    cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t     TREE_OPTIMIZATION (old_optimize));\n   return ret;\n }"}, {"sha": "899b890d7a3b79041044a2b994bfc5bb7449bb20", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -390,7 +390,7 @@ arm_pragma_target_parse (tree args, tree pop_target)\n   if (! args)\n     {\n       cur_tree = ((pop_target) ? pop_target : target_option_default_node);\n-      cl_target_option_restore (&global_options,\n+      cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\tTREE_TARGET_OPTION (cur_tree));\n     }\n   else\n@@ -399,7 +399,7 @@ arm_pragma_target_parse (tree args, tree pop_target)\n \t\t\t\t\t\t  &global_options_set);\n       if (cur_tree == NULL_TREE)\n \t{\n-\t  cl_target_option_restore (&global_options,\n+\t  cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\t    TREE_TARGET_OPTION (prev_tree));\n \t  return false;\n \t}"}, {"sha": "f4f32b66a3b38d8516e40364e77abfeb615bdae3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -247,8 +247,9 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n-static void arm_option_save (struct cl_target_option *, struct gcc_options *);\n-static void arm_option_restore (struct gcc_options *,\n+static void arm_option_save (struct cl_target_option *, struct gcc_options *,\n+\t\t\t     struct gcc_options *);\n+static void arm_option_restore (struct gcc_options *, struct gcc_options *,\n \t\t\t\tstruct cl_target_option *);\n static void arm_override_options_after_change (void);\n static void arm_option_print (FILE *, int, struct cl_target_option *);\n@@ -3043,7 +3044,8 @@ arm_override_options_after_change (void)\n \n /* Implement TARGET_OPTION_SAVE.  */\n static void\n-arm_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\n+arm_option_save (struct cl_target_option *ptr, struct gcc_options *opts,\n+\t\t struct gcc_options */* opts_set */)\n {\n   ptr->x_arm_arch_string = opts->x_arm_arch_string;\n   ptr->x_arm_cpu_string = opts->x_arm_cpu_string;\n@@ -3052,13 +3054,13 @@ arm_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\n \n /* Implement TARGET_OPTION_RESTORE.  */\n static void\n-arm_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\n+arm_option_restore (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t    struct cl_target_option *ptr)\n {\n   opts->x_arm_arch_string = ptr->x_arm_arch_string;\n   opts->x_arm_cpu_string = ptr->x_arm_cpu_string;\n   opts->x_arm_tune_string = ptr->x_arm_tune_string;\n-  arm_configure_build_target (&arm_active_target, ptr, &global_options_set,\n-\t\t\t      false);\n+  arm_configure_build_target (&arm_active_target, ptr, opts_set, false);\n }\n \n /* Reset options between modes that the user has specified.  */\n@@ -3457,7 +3459,7 @@ arm_option_override (void)\n       arm_fpu_index = (enum fpu_type) fpu_index;\n     }\n \n-  cl_target_option_save (&opts, &global_options);\n+  cl_target_option_save (&opts, &global_options, &global_options_set);\n   arm_configure_build_target (&arm_active_target, &opts, &global_options_set,\n \t\t\t      true);\n \n@@ -3682,7 +3684,8 @@ arm_option_override (void)\n     flag_schedule_fusion = 0;\n \n   /* Need to remember initial options before they are overriden.  */\n-  init_optimize = build_optimization_node (&global_options);\n+  init_optimize = build_optimization_node (&global_options,\n+\t\t\t\t\t   &global_options_set);\n \n   arm_options_perform_arch_sanity_checks ();\n   arm_option_override_internal (&global_options, &global_options_set);\n@@ -3691,7 +3694,7 @@ arm_option_override (void)\n \n   /* Create the default target_options structure.  */\n   target_option_default_node = target_option_current_node\n-    = build_target_option_node (&global_options);\n+    = build_target_option_node (&global_options, &global_options_set);\n \n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();\n@@ -32332,7 +32335,8 @@ arm_set_current_function (tree fndecl)\n   arm_previous_fndecl = fndecl;\n \n   /* First set the target options.  */\n-  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+  cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t    TREE_TARGET_OPTION (new_tree));\n \n   save_restore_target_globals (new_tree);\n \n@@ -32534,7 +32538,7 @@ arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n   if (!arm_valid_target_attribute_rec (args, opts))\n     return NULL_TREE;\n \n-  cl_target_option_save (&cl_opts, opts);\n+  cl_target_option_save (&cl_opts, opts, opts_set);\n   arm_configure_build_target (&arm_active_target, &cl_opts, opts_set, false);\n   arm_option_check_internal (opts);\n   /* Do any overrides, such as global options arch=xxx.\n@@ -32543,11 +32547,11 @@ arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n   arm_options_perform_arch_sanity_checks ();\n   arm_option_override_internal (opts, opts_set);\n \n-  return build_target_option_node (opts);\n+  return build_target_option_node (opts, opts_set);\n }\n \n static void \n-add_attribute  (const char * mode, tree *attributes)\n+add_attribute (const char * mode, tree *attributes)\n {\n   size_t len = strlen (mode);\n   tree value = build_string (len, mode);\n@@ -32599,7 +32603,7 @@ arm_valid_target_attribute_p (tree fndecl, tree ARG_UNUSED (name),\n \t\t\t      tree args, int ARG_UNUSED (flags))\n {\n   bool ret = true;\n-  struct gcc_options func_options;\n+  struct gcc_options func_options, func_options_set;\n   tree cur_tree, new_optimize;\n   gcc_assert ((fndecl != NULL_TREE) && (args != NULL_TREE));\n \n@@ -32615,22 +32619,23 @@ arm_valid_target_attribute_p (tree fndecl, tree ARG_UNUSED (name),\n   memset (&func_options, 0, sizeof (func_options));\n   init_options_struct (&func_options, NULL);\n   lang_hooks.init_options_struct (&func_options);\n+  memset (&func_options_set, 0, sizeof (func_options_set));\n \n   /* Initialize func_options to the defaults.  */\n-  cl_optimization_restore (&func_options,\n+  cl_optimization_restore (&func_options, &func_options_set,\n \t\t\t   TREE_OPTIMIZATION (func_optimize));\n \n-  cl_target_option_restore (&func_options,\n+  cl_target_option_restore (&func_options, &func_options_set,\n \t\t\t    TREE_TARGET_OPTION (target_option_default_node));\n \n   /* Set func_options flags with new target mode.  */\n   cur_tree = arm_valid_target_attribute_tree (args, &func_options,\n-\t\t\t\t\t      &global_options_set);\n+\t\t\t\t\t      &func_options_set);\n \n   if (cur_tree == NULL_TREE)\n     ret = false;\n \n-  new_optimize = build_optimization_node (&func_options);\n+  new_optimize = build_optimization_node (&func_options, &func_options_set);\n \n   DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = cur_tree;\n "}, {"sha": "aa05365162ab976702eb036ed8f4602157e184a2", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -2435,7 +2435,7 @@ csky_option_override (void)\n   /* Create the default target_options structure.  We need this early\n      to configure the overall build target.  */\n   target_option_default_node = target_option_current_node\n-\t\t\t     = build_target_option_node (&global_options);\n+    = build_target_option_node (&global_options, &global_options_set);\n \n   csky_configure_build_target (&csky_active_target,\n \t\t\t      TREE_TARGET_OPTION (target_option_default_node),\n@@ -2600,7 +2600,7 @@ csky_option_override (void)\n \n   /* Resynchronize the saved target options.  */\n   cl_target_option_save (TREE_TARGET_OPTION (target_option_default_node),\n-\t\t\t &global_options);\n+\t\t\t &global_options, &global_options_set);\n \n #ifdef ENABLE_TPF_DEBUG\n   /* Don't emit DWARF4 unless specifically selected.  The TPF"}, {"sha": "e868a8d9ae4f877fbcf2316bc9ed07398ae17ce0", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -4975,26 +4975,28 @@ gcn_fixup_accel_lto_options (tree fndecl)\n   if (!func_optimize)\n     return;\n \n-  tree old_optimize = build_optimization_node (&global_options);\n+  tree old_optimize\n+    = build_optimization_node (&global_options, &global_options_set);\n   tree new_optimize;\n \n   /* If the function changed the optimization levels as well as\n      setting target options, start with the optimizations\n      specified.  */\n   if (func_optimize != old_optimize)\n-    cl_optimization_restore (&global_options,\n+    cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t     TREE_OPTIMIZATION (func_optimize));\n \n   gcn_option_override ();\n \n   /* The target attributes may also change some optimization flags,\n      so update the optimization options if necessary.  */\n-  new_optimize = build_optimization_node (&global_options);\n+  new_optimize = build_optimization_node (&global_options,\n+\t\t\t\t\t  &global_options_set);\n \n   if (old_optimize != new_optimize)\n     {\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) = new_optimize;\n-      cl_optimization_restore (&global_options,\n+      cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t       TREE_OPTIMIZATION (old_optimize));\n     }\n }"}, {"sha": "ca7a870896b5b6a6fb301d2ade6bdeb3910c543b", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -1866,7 +1866,8 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n      before the ssse3 version. */\n   if (strstr (attrs_str, \"arch=\") != NULL)\n     {\n-      cl_target_option_save (&cur_target, &global_options);\n+      cl_target_option_save (&cur_target, &global_options,\n+\t\t\t     &global_options_set);\n       target_node\n \t= ix86_valid_target_attribute_tree (decl, attrs, &global_options,\n \t\t\t\t\t    &global_options_set, 0);\n@@ -1935,7 +1936,8 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      break;\n \t    }\n \n-      cl_target_option_restore (&global_options, &cur_target);\n+      cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t\t&cur_target);\n \t\n       if (predicate_list && arg_str == NULL)\n \t{"}, {"sha": "3553a3724277ca6b6c0cee6a31b63b985aea5dca", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -603,7 +603,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n static bool\n ix86_pragma_target_parse (tree args, tree pop_target)\n {\n-  tree prev_tree = build_target_option_node (&global_options);\n+  tree prev_tree\n+    = build_target_option_node (&global_options, &global_options_set);\n   tree cur_tree;\n   struct cl_target_option *prev_opt;\n   struct cl_target_option *cur_opt;\n@@ -621,7 +622,7 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n   if (! args)\n     {\n       cur_tree = (pop_target ? pop_target : target_option_default_node);\n-      cl_target_option_restore (&global_options,\n+      cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\tTREE_TARGET_OPTION (cur_tree));\n     }\n   else\n@@ -631,7 +632,7 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n \t\t\t\t\t\t   &global_options_set, 0);\n       if (!cur_tree || cur_tree == error_mark_node)\n        {\n-         cl_target_option_restore (&global_options,\n+         cl_target_option_restore (&global_options, &global_options_set,\n                                    TREE_TARGET_OPTION (prev_tree));\n          return false;\n        }"}, {"sha": "2fabd2002980ca2b58ae632eeba97363be86d222", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -627,7 +627,8 @@ ix86_debug_options (void)\n \n void\n ix86_function_specific_save (struct cl_target_option *ptr,\n-\t\t\t     struct gcc_options *opts)\n+\t\t\t     struct gcc_options *opts,\n+\t\t\t     struct gcc_options */* opts_set */)\n {\n   ptr->arch = ix86_arch;\n   ptr->schedule = ix86_schedule;\n@@ -754,6 +755,7 @@ set_ix86_tune_features (struct gcc_options *opts,\n \n void\n ix86_function_specific_restore (struct gcc_options *opts,\n+\t\t\t\tstruct gcc_options */* opts_set */,\n \t\t\t\tstruct cl_target_option *ptr)\n {\n   enum processor_type old_tune = ix86_tune;\n@@ -1356,7 +1358,7 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n \n       /* Save the current options unless we are validating options for\n \t #pragma.  */\n-      t = build_target_option_node (opts);\n+      t = build_target_option_node (opts, opts_set);\n \n       opts->x_ix86_arch_string = orig_arch_string;\n       opts->x_ix86_tune_string = orig_tune_string;\n@@ -1377,7 +1379,7 @@ ix86_valid_target_attribute_p (tree fndecl,\n \t\t\t       tree args,\n \t\t\t       int flags)\n {\n-  struct gcc_options func_options;\n+  struct gcc_options func_options, func_options_set;\n   tree new_target, new_optimize;\n   bool ret = true;\n \n@@ -1389,7 +1391,8 @@ ix86_valid_target_attribute_p (tree fndecl,\n       && strcmp (TREE_STRING_POINTER (TREE_VALUE (args)), \"default\") == 0)\n     return true;\n \n-  tree old_optimize = build_optimization_node (&global_options);\n+  tree old_optimize = build_optimization_node (&global_options,\n+\t\t\t\t\t       &global_options_set);\n \n   /* Get the optimization options of the current function.  */  \n   tree func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n@@ -1401,21 +1404,22 @@ ix86_valid_target_attribute_p (tree fndecl,\n   memset (&func_options, 0, sizeof (func_options));\n   init_options_struct (&func_options, NULL);\n   lang_hooks.init_options_struct (&func_options);\n- \n-  cl_optimization_restore (&func_options,\n+  memset (&func_options_set, 0, sizeof (func_options_set));\n+\n+  cl_optimization_restore (&func_options, &func_options_set,\n \t\t\t   TREE_OPTIMIZATION (func_optimize));\n \n   /* Initialize func_options to the default before its target options can\n      be set.  */\n-  cl_target_option_restore (&func_options,\n+  cl_target_option_restore (&func_options, &func_options_set,\n \t\t\t    TREE_TARGET_OPTION (target_option_default_node));\n \n   /* FLAGS == 1 is used for target_clones attribute.  */\n   new_target\n     = ix86_valid_target_attribute_tree (fndecl, args, &func_options,\n-\t\t\t\t\t&global_options_set, flags == 1);\n+\t\t\t\t\t&func_options_set, flags == 1);\n \n-  new_optimize = build_optimization_node (&func_options);\n+  new_optimize = build_optimization_node (&func_options, &func_options_set);\n \n   if (new_target == error_mark_node)\n     ret = false;\n@@ -2954,7 +2958,7 @@ ix86_option_override_internal (bool main_args_p,\n      options.  */\n   if (main_args_p)\n     target_option_default_node = target_option_current_node\n-      = build_target_option_node (opts);\n+      = build_target_option_node (opts, opts_set);\n \n   if (opts->x_flag_cf_protection != CF_NONE)\n     opts->x_flag_cf_protection\n@@ -2991,7 +2995,8 @@ void\n ix86_reset_previous_fndecl (void)\n {\n   tree new_tree = target_option_current_node;\n-  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+  cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t    TREE_TARGET_OPTION (new_tree));\n   if (TREE_TARGET_GLOBALS (new_tree))\n     restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n   else if (new_tree == target_option_default_node)\n@@ -3250,7 +3255,8 @@ ix86_set_current_function (tree fndecl)\n \n   if (old_tree != new_tree)\n     {\n-      cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+      cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t\tTREE_TARGET_OPTION (new_tree));\n       if (TREE_TARGET_GLOBALS (new_tree))\n \trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n       else if (new_tree == target_option_default_node)"}, {"sha": "9172936bbea4b48495ecdb7ef7d11709a76438b2", "filename": "gcc/config/i386/i386-options.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fi386%2Fi386-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.h?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -70,8 +70,10 @@ extern const char *stringop_alg_names[];\n \n void ix86_add_new_builtins (HOST_WIDE_INT isa, HOST_WIDE_INT isa2);\n void ix86_function_specific_save (struct cl_target_option *,\n-\t\t\t\t  struct gcc_options *opts);\n+\t\t\t\t  struct gcc_options *opts,\n+\t\t\t\t  struct gcc_options *opts_set);\n void ix86_function_specific_restore (struct gcc_options *opts,\n+\t\t\t\t     struct gcc_options *opts_set,\n \t\t\t\t     struct cl_target_option *);\n void ix86_function_specific_post_stream_in (struct cl_target_option *);\n void ix86_function_specific_print (FILE *, int,"}, {"sha": "55664358ba4758636329dd1bb8688d1a5aa13d34", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -1448,7 +1448,7 @@ nios2_option_override (void)\n   /* Save the initial options in case the user does function specific\n      options.  */\n   target_option_default_node = target_option_current_node\n-    = build_target_option_node (&global_options);\n+    = build_target_option_node (&global_options, &global_options_set);\n }\n \n \f\n@@ -4137,7 +4137,8 @@ nios2_deregister_custom_code (unsigned int N)\n \n static void\n nios2_option_save (struct cl_target_option *ptr,\n-\t\t   struct gcc_options *opts ATTRIBUTE_UNUSED)\n+\t\t   struct gcc_options *opts ATTRIBUTE_UNUSED,\n+\t\t   struct gcc_options *opts_set ATTRIBUTE_UNUSED)\n {\n   unsigned int i;\n   for (i = 0; i < ARRAY_SIZE (nios2_fpu_insn); i++)\n@@ -4150,6 +4151,7 @@ nios2_option_save (struct cl_target_option *ptr,\n \n static void\n nios2_option_restore (struct gcc_options *opts ATTRIBUTE_UNUSED,\n+\t\t      struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t      struct cl_target_option *ptr)\n {\n   unsigned int i;\n@@ -4310,7 +4312,7 @@ nios2_valid_target_attribute_tree (tree args)\n   if (!nios2_valid_target_attribute_rec (args))\n     return NULL_TREE;\n   nios2_custom_check_insns ();\n-  return build_target_option_node (&global_options);\n+  return build_target_option_node (&global_options, &global_options_set);\n }\n \n /* Hook to validate attribute((target(\"string\"))).  */\n@@ -4321,21 +4323,22 @@ nios2_valid_target_attribute_p (tree fndecl, tree ARG_UNUSED (name),\n {\n   struct cl_target_option cur_target;\n   bool ret = true;\n-  tree old_optimize = build_optimization_node (&global_options);\n+  tree old_optimize\n+    = build_optimization_node (&global_options, &global_options_set);\n   tree new_target, new_optimize;\n   tree func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n \n   /* If the function changed the optimization levels as well as setting target\n      options, start with the optimizations specified.  */\n   if (func_optimize && func_optimize != old_optimize)\n-    cl_optimization_restore (&global_options,\n+    cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t     TREE_OPTIMIZATION (func_optimize));\n \n   /* The target attributes may also change some optimization flags, so update\n      the optimization options if necessary.  */\n-  cl_target_option_save (&cur_target, &global_options);\n+  cl_target_option_save (&cur_target, &global_options, &global_options_set);\n   new_target = nios2_valid_target_attribute_tree (args);\n-  new_optimize = build_optimization_node (&global_options);\n+  new_optimize = build_optimization_node (&global_options, &global_options_set);\n \n   if (!new_target)\n     ret = false;\n@@ -4348,10 +4351,10 @@ nios2_valid_target_attribute_p (tree fndecl, tree ARG_UNUSED (name),\n \tDECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) = new_optimize;\n     }\n \n-  cl_target_option_restore (&global_options, &cur_target);\n+  cl_target_option_restore (&global_options, &global_options_set, &cur_target);\n \n   if (old_optimize != new_optimize)\n-    cl_optimization_restore (&global_options,\n+    cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t     TREE_OPTIMIZATION (old_optimize));\n   return ret;\n }\n@@ -4381,7 +4384,7 @@ nios2_set_current_function (tree fndecl)\n \n       else if (new_tree)\n \t{\n-\t  cl_target_option_restore (&global_options,\n+\t  cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\t    TREE_TARGET_OPTION (new_tree));\n \t  target_reinit ();\n \t}\n@@ -4391,7 +4394,7 @@ nios2_set_current_function (tree fndecl)\n \t  struct cl_target_option *def\n \t    = TREE_TARGET_OPTION (target_option_current_node);\n \n-\t  cl_target_option_restore (&global_options, def);\n+\t  cl_target_option_restore (&global_options, &global_options_set, def);\n \t  target_reinit ();\n \t}\n     }\n@@ -4409,7 +4412,7 @@ nios2_pragma_target_parse (tree args, tree pop_target)\n       cur_tree = ((pop_target)\n \t\t  ? pop_target\n \t\t  : target_option_default_node);\n-      cl_target_option_restore (&global_options,\n+      cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\tTREE_TARGET_OPTION (cur_tree));\n     }\n   else"}, {"sha": "39104e5f9cdb0f6179fcd03a77bffe88f624380c", "filename": "gcc/config/pru/pru.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fpru%2Fpru.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fpru%2Fpru.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -621,7 +621,7 @@ pru_option_override (void)\n   /* Save the initial options in case the user does function specific\n      options.  */\n   target_option_default_node = target_option_current_node\n-    = build_target_option_node (&global_options);\n+    = build_target_option_node (&global_options, &global_options_set);\n \n   /* Due to difficulties in implementing the TI ABI with GCC,\n      at least check and error-out if GCC cannot compile a\n@@ -2848,7 +2848,7 @@ pru_set_current_function (tree fndecl)\n \n       else if (new_tree)\n \t{\n-\t  cl_target_option_restore (&global_options,\n+\t  cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\t    TREE_TARGET_OPTION (new_tree));\n \t  target_reinit ();\n \t}\n@@ -2858,7 +2858,7 @@ pru_set_current_function (tree fndecl)\n \t  struct cl_target_option *def\n \t    = TREE_TARGET_OPTION (target_option_current_node);\n \n-\t  cl_target_option_restore (&global_options, def);\n+\t  cl_target_option_restore (&global_options, &global_options_set, def);\n \t  target_reinit ();\n \t}\n     }"}, {"sha": "abbcc50e1047062fe0c4d2856c7c7e5470353d85", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -2393,7 +2393,7 @@ rs6000_debug_reg_global (void)\n   else\n     fprintf (stderr, DEBUG_FMT_S, \"tune\", \"<none>\");\n \n-  cl_target_option_save (&cl_opts, &global_options);\n+  cl_target_option_save (&cl_opts, &global_options, &global_options_set);\n   rs6000_print_isa_options (stderr, 0, \"rs6000_isa_flags\",\n \t\t\t    rs6000_isa_flags);\n \n@@ -4769,7 +4769,7 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Save the initial options in case the user does function specific options */\n   if (global_init_p)\n     target_option_default_node = target_option_current_node\n-      = build_target_option_node (&global_options);\n+      = build_target_option_node (&global_options, &global_options_set);\n \n   /* If not explicitly specified via option, decide whether to generate the\n      extra blr's required to preserve the link stack on some cpus (eg, 476).  */\n@@ -23662,31 +23662,34 @@ rs6000_valid_attribute_p (tree fndecl,\n       && strcmp (TREE_STRING_POINTER (TREE_VALUE (args)), \"default\") == 0)\n     return true;\n \n-  old_optimize = build_optimization_node (&global_options);\n+  old_optimize = build_optimization_node (&global_options,\n+\t\t\t\t\t  &global_options_set);\n   func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n \n   /* If the function changed the optimization levels as well as setting target\n      options, start with the optimizations specified.  */\n   if (func_optimize && func_optimize != old_optimize)\n-    cl_optimization_restore (&global_options,\n+    cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t     TREE_OPTIMIZATION (func_optimize));\n \n   /* The target attributes may also change some optimization flags, so update\n      the optimization options if necessary.  */\n-  cl_target_option_save (&cur_target, &global_options);\n+  cl_target_option_save (&cur_target, &global_options, &global_options_set);\n   rs6000_cpu_index = rs6000_tune_index = -1;\n   ret = rs6000_inner_target_options (args, true);\n \n   /* Set up any additional state.  */\n   if (ret)\n     {\n       ret = rs6000_option_override_internal (false);\n-      new_target = build_target_option_node (&global_options);\n+      new_target = build_target_option_node (&global_options,\n+\t\t\t\t\t     &global_options_set);\n     }\n   else\n     new_target = NULL;\n \n-  new_optimize = build_optimization_node (&global_options);\n+  new_optimize = build_optimization_node (&global_options,\n+\t\t\t\t\t  &global_options_set);\n \n   if (!new_target)\n     ret = false;\n@@ -23699,10 +23702,10 @@ rs6000_valid_attribute_p (tree fndecl,\n \tDECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) = new_optimize;\n     }\n \n-  cl_target_option_restore (&global_options, &cur_target);\n+  cl_target_option_restore (&global_options, &global_options_set, &cur_target);\n \n   if (old_optimize != new_optimize)\n-    cl_optimization_restore (&global_options,\n+    cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t     TREE_OPTIMIZATION (old_optimize));\n \n   return ret;\n@@ -23716,7 +23719,8 @@ rs6000_valid_attribute_p (tree fndecl,\n bool\n rs6000_pragma_target_parse (tree args, tree pop_target)\n {\n-  tree prev_tree = build_target_option_node (&global_options);\n+  tree prev_tree = build_target_option_node (&global_options,\n+\t\t\t\t\t     &global_options_set);\n   tree cur_tree;\n   struct cl_target_option *prev_opt, *cur_opt;\n   HOST_WIDE_INT prev_flags, cur_flags, diff_flags;\n@@ -23745,15 +23749,16 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n       cur_tree = ((pop_target)\n \t\t  ? pop_target\n \t\t  : target_option_default_node);\n-      cl_target_option_restore (&global_options,\n+      cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\tTREE_TARGET_OPTION (cur_tree));\n     }\n   else\n     {\n       rs6000_cpu_index = rs6000_tune_index = -1;\n       if (!rs6000_inner_target_options (args, false)\n \t  || !rs6000_option_override_internal (false)\n-\t  || (cur_tree = build_target_option_node (&global_options))\n+\t  || (cur_tree = build_target_option_node (&global_options,\n+\t\t\t\t\t\t   &global_options_set))\n \t     == NULL_TREE)\n \t{\n \t  if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n@@ -23808,7 +23813,8 @@ static GTY(()) tree rs6000_previous_fndecl;\n void\n rs6000_activate_target_options (tree new_tree)\n {\n-  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+  cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t    TREE_TARGET_OPTION (new_tree));\n   if (TREE_TARGET_GLOBALS (new_tree))\n     restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n   else if (new_tree == target_option_default_node)\n@@ -23899,7 +23905,8 @@ rs6000_set_current_function (tree fndecl)\n \n static void\n rs6000_function_specific_save (struct cl_target_option *ptr,\n-\t\t\t       struct gcc_options *opts)\n+\t\t\t       struct gcc_options *opts,\n+\t\t\t       struct gcc_options */* opts_set */)\n {\n   ptr->x_rs6000_isa_flags = opts->x_rs6000_isa_flags;\n   ptr->x_rs6000_isa_flags_explicit = opts->x_rs6000_isa_flags_explicit;\n@@ -23909,6 +23916,7 @@ rs6000_function_specific_save (struct cl_target_option *ptr,\n \n static void\n rs6000_function_specific_restore (struct gcc_options *opts,\n+\t\t\t\t  struct gcc_options */* opts_set */,\n \t\t\t\t  struct cl_target_option *ptr)\n \t\t\t\t  \n {"}, {"sha": "8e5f2c9a394d252c9599feab07673639c36c5cde", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -388,7 +388,7 @@ s390_cpu_cpp_builtins (cpp_reader *pfile)\n     cpp_define (pfile, \"__s390x__\");\n   if (TARGET_LONG_DOUBLE_128)\n     cpp_define (pfile, \"__LONG_DOUBLE_128__\");\n-  cl_target_option_save (&opts, &global_options);\n+  cl_target_option_save (&opts, &global_options, &global_options_set);\n   s390_cpu_cpp_builtins_internal (pfile, &opts, NULL);\n }\n \n@@ -400,7 +400,8 @@ s390_cpu_cpp_builtins (cpp_reader *pfile)\n static bool\n s390_pragma_target_parse (tree args, tree pop_target)\n {\n-  tree prev_tree = build_target_option_node (&global_options);\n+  tree prev_tree = build_target_option_node (&global_options,\n+\t\t\t\t\t     &global_options_set);\n   tree cur_tree;\n \n   if (! args)\n@@ -411,7 +412,7 @@ s390_pragma_target_parse (tree args, tree pop_target)\n \t\t\t\t\t\t   &global_options_set, true);\n       if (!cur_tree || cur_tree == error_mark_node)\n \t{\n-\t  cl_target_option_restore (&global_options,\n+\t  cl_target_option_restore (&global_options, &global_options_set,\n \t\t\t\t    TREE_TARGET_OPTION (prev_tree));\n \t  return false;\n \t}"}, {"sha": "c762840c7e0e79748783f5ad5836ffa4e08ebecc", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -15207,6 +15207,7 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n \n static void\n s390_function_specific_restore (struct gcc_options *opts,\n+\t\t\t\tstruct gcc_options */* opts_set */,\n \t\t\t\tstruct cl_target_option *ptr ATTRIBUTE_UNUSED)\n {\n   opts->x_s390_cost_pointer = (long)processor_table[opts->x_s390_tune].cost;\n@@ -15230,7 +15231,7 @@ s390_override_options_after_change (void)\n \n static void\n s390_option_override_internal (struct gcc_options *opts,\n-\t\t\t       const struct gcc_options *opts_set)\n+\t\t\t       struct gcc_options *opts_set)\n {\n   /* Architecture mode defaults according to ABI.  */\n   if (!(opts_set->x_target_flags & MASK_ZARCH))\n@@ -15444,7 +15445,7 @@ s390_option_override_internal (struct gcc_options *opts,\n \n   /* Call target specific restore function to do post-init work.  At the moment,\n      this just sets opts->x_s390_cost_pointer.  */\n-  s390_function_specific_restore (opts, NULL);\n+  s390_function_specific_restore (opts, opts_set, NULL);\n \n   /* Check whether -mfentry is supported. It cannot be used in 31-bit mode,\n      because 31-bit PLT stubs assume that %r12 contains GOT address, which is\n@@ -15513,7 +15514,8 @@ s390_option_override (void)\n \n   /* Save the initial options in case the user does function specific\n      options.  */\n-  target_option_default_node = build_target_option_node (&global_options);\n+  target_option_default_node\n+    = build_target_option_node (&global_options, &global_options_set);\n   target_option_current_node = target_option_default_node;\n \n   /* This cannot reside in s390_option_optimization_table since HAVE_prefetch\n@@ -15803,7 +15805,7 @@ s390_valid_target_attribute_tree (tree args,\n       s390_option_override_internal (opts, &new_opts_set);\n       /* Save the current options unless we are validating options for\n \t #pragma.  */\n-      t = build_target_option_node (opts);\n+      t = build_target_option_node (opts, &new_opts_set);\n     }\n   return t;\n }\n@@ -15816,7 +15818,7 @@ s390_valid_target_attribute_p (tree fndecl,\n \t\t\t       tree args,\n \t\t\t       int ARG_UNUSED (flags))\n {\n-  struct gcc_options func_options;\n+  struct gcc_options func_options, func_options_set;\n   tree new_target, new_optimize;\n   bool ret = true;\n \n@@ -15828,7 +15830,8 @@ s390_valid_target_attribute_p (tree fndecl,\n       && strcmp (TREE_STRING_POINTER (TREE_VALUE (args)), \"default\") == 0)\n     return true;\n \n-  tree old_optimize = build_optimization_node (&global_options);\n+  tree old_optimize\n+    = build_optimization_node (&global_options, &global_options_set);\n \n   /* Get the optimization options of the current function.  */\n   tree func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n@@ -15840,19 +15843,21 @@ s390_valid_target_attribute_p (tree fndecl,\n   memset (&func_options, 0, sizeof (func_options));\n   init_options_struct (&func_options, NULL);\n   lang_hooks.init_options_struct (&func_options);\n+  memset (&func_options_set, 0, sizeof (func_options_set));\n \n-  cl_optimization_restore (&func_options, TREE_OPTIMIZATION (func_optimize));\n+  cl_optimization_restore (&func_options, &func_options_set,\n+\t\t\t   TREE_OPTIMIZATION (func_optimize));\n \n   /* Initialize func_options to the default before its target options can\n      be set.  */\n-  cl_target_option_restore (&func_options,\n+  cl_target_option_restore (&func_options, &func_options_set,\n \t\t\t    TREE_TARGET_OPTION (target_option_default_node));\n \n   new_target = s390_valid_target_attribute_tree (args, &func_options,\n \t\t\t\t\t\t &global_options_set,\n \t\t\t\t\t\t (args ==\n \t\t\t\t\t\t  current_target_pragma));\n-  new_optimize = build_optimization_node (&func_options);\n+  new_optimize = build_optimization_node (&func_options, &func_options_set);\n   if (new_target == error_mark_node)\n     ret = false;\n   else if (fndecl && new_target)\n@@ -15990,7 +15995,8 @@ s390_indirect_branch_settings (tree fndecl)\n void\n s390_activate_target_options (tree new_tree)\n {\n-  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+  cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t    TREE_TARGET_OPTION (new_tree));\n   if (TREE_TARGET_GLOBALS (new_tree))\n     restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n   else if (new_tree == target_option_default_node)"}, {"sha": "8e9e7701531534bd2444c62d4af88291da58e5f8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -10493,14 +10493,14 @@ the function declaration to hold a pointer to a target-specific\n @code{struct cl_target_option} structure.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_OPTION_SAVE (struct cl_target_option *@var{ptr}, struct gcc_options *@var{opts})\n+@deftypefn {Target Hook} void TARGET_OPTION_SAVE (struct cl_target_option *@var{ptr}, struct gcc_options *@var{opts}, struct gcc_options *@var{opts_set})\n This hook is called to save any additional target-specific information\n in the @code{struct cl_target_option} structure for function-specific\n options from the @code{struct gcc_options} structure.\n @xref{Option file format}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_OPTION_RESTORE (struct gcc_options *@var{opts}, struct cl_target_option *@var{ptr})\n+@deftypefn {Target Hook} void TARGET_OPTION_RESTORE (struct gcc_options *@var{opts}, struct gcc_options *@var{opts_set}, struct cl_target_option *@var{ptr})\n This hook is called to restore any additional target-specific\n information in the @code{struct cl_target_option} structure for\n function-specific options to the @code{struct gcc_options} structure."}, {"sha": "de5947937eb06b81a0c2f81c4b6c8e717c73e2b1", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -4664,7 +4664,8 @@ invoke_set_current_function_hook (tree fndecl)\n       if (optimization_current_node != opts)\n \t{\n \t  optimization_current_node = opts;\n-\t  cl_optimization_restore (&global_options, TREE_OPTIMIZATION (opts));\n+\t  cl_optimization_restore (&global_options, &global_options_set,\n+\t\t\t\t   TREE_OPTIMIZATION (opts));\n \t}\n \n       targetm.set_current_function (fndecl);"}, {"sha": "505fb1528fa37209406de35c2a8a3d9a2d95dd71", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -3281,13 +3281,15 @@ Gcc_backend::function(Btype* fntype, const std::string& name,\n       if (pos == name.length())\n \t{\n \t  struct cl_optimization cur_opts;\n-\t  cl_optimization_save(&cur_opts, &global_options);\n+\t  cl_optimization_save(&cur_opts, &global_options,\n+\t\t\t       &global_options_set);\n \t  global_options.x_optimize_size = 1;\n \t  global_options.x_optimize_fast = 0;\n \t  global_options.x_optimize_debug = 0;\n \t  DECL_FUNCTION_SPECIFIC_OPTIMIZATION(decl) =\n-\t    build_optimization_node(&global_options);\n-\t  cl_optimization_restore(&global_options, &cur_opts);\n+\t    build_optimization_node(&global_options, &global_options_set);\n+\t  cl_optimization_restore(&global_options, &global_options_set,\n+\t\t\t\t  &cur_opts);\n \t}\n     }\n "}, {"sha": "5e37e612bfdd99bbd635f9212f6457876f140466", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -380,14 +380,15 @@ inline_call (struct cgraph_edge *e, bool update_original,\n       && opt_for_fn (to->decl, flag_strict_aliasing))\n     {\n       struct gcc_options opts = global_options;\n+      struct gcc_options opts_set = global_options_set;\n \n-      cl_optimization_restore (&opts, opts_for_fn (to->decl));\n+      cl_optimization_restore (&opts, &opts_set, opts_for_fn (to->decl));\n       opts.x_flag_strict_aliasing = false;\n       if (dump_file)\n \tfprintf (dump_file, \"Dropping flag_strict_aliasing on %s\\n\",\n \t\t to->dump_name ());\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (to->decl)\n-\t = build_optimization_node (&opts);\n+\t = build_optimization_node (&opts, &opts_set);\n       reload_optimization_node = true;\n     }\n \n@@ -420,8 +421,9 @@ inline_call (struct cgraph_edge *e, bool update_original,\n \t     != opt_for_fn (to->decl, flag_errno_math))\n \t{\n \t  struct gcc_options opts = global_options;\n+\t  struct gcc_options opts_set = global_options_set;\n \n-\t  cl_optimization_restore (&opts, opts_for_fn (to->decl));\n+\t  cl_optimization_restore (&opts, &opts_set, opts_for_fn (to->decl));\n \t  opts.x_flag_rounding_math\n \t    = opt_for_fn (callee->decl, flag_rounding_math);\n \t  opts.x_flag_trapping_math\n@@ -448,7 +450,7 @@ inline_call (struct cgraph_edge *e, bool update_original,\n \t    fprintf (dump_file, \"Copying FP flags from %s to %s\\n\",\n \t\t     callee->dump_name (), to->dump_name ());\n \t  DECL_FUNCTION_SPECIFIC_OPTIMIZATION (to->decl)\n-\t     = build_optimization_node (&opts);\n+\t     = build_optimization_node (&opts, &opts_set);\n \t  reload_optimization_node = true;\n \t}\n     }"}, {"sha": "b113291f9a41277beae8a3b4f32abcd55ebca401", "filename": "gcc/opt-read.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fopt-read.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fopt-read.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-read.awk?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -71,6 +71,7 @@ BEGIN {\n \t\t\tn_target_save++\n \n \t\t\textra_target_vars[n_extra_target_vars] = name\n+\t\t\textra_target_var_types[n_extra_target_vars] = type\n \t\t\tn_extra_target_vars++\n \t\t}\n \t\telse if ($1 == \"HeaderInclude\") {"}, {"sha": "2e4787ec57e9a64109049a3b071ec77ca46df2ae", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 360, "deletions": 10, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -78,7 +78,8 @@ for (i = 0; i < n_opts; i++) {\n \n print \"/* Save optimization variables into a structure.  */\"\n print \"void\";\n-print \"cl_optimization_save (struct cl_optimization *ptr, struct gcc_options *opts)\";\n+print \"cl_optimization_save (struct cl_optimization *ptr, struct gcc_options *opts,\";\n+print \"\t\t      struct gcc_options *opts_set)\";\n print \"{\";\n \n n_opt_char = 4;\n@@ -116,9 +117,10 @@ for (i = 0; i < n_opts; i++) {\n \t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n \t\t\tvar_opt_short[n_opt_short++] = name;\n \n-\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *\"))\n+\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *\")) {\n+\t\t\tvar_opt_enum_type[n_opt_enum] = otype;\n \t\t\tvar_opt_enum[n_opt_enum++] = name;\n-\n+\t\t}\n \t\telse if (otype ~ \"^((un)?signed +)?char *$\") {\n \t\t\tvar_opt_char[n_opt_char++] = name;\n \t\t\tif (otype ~ \"^unsigned +char *$\")\n@@ -166,12 +168,88 @@ for (i = 0; i < n_opt_string; i++) {\n \tprint \"  ptr->x_\" var_opt_string[i] \" = opts->x_\" var_opt_string[i] \";\";\n }\n \n+print \"\";\n+print \"  unsigned HOST_WIDE_INT mask = 0;\";\n+\n+j = 0;\n+k = 0;\n+for (i = 0; i < n_opt_other; i++) {\n+\tprint \"  if (opts_set->x_\" var_opt_other[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_opt_int; i++) {\n+\tprint \"  if (opts_set->x_\" var_opt_int[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_opt_enum; i++) {\n+\tprint \"  if (opts_set->x_\" var_opt_enum[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_opt_short; i++) {\n+\tprint \"  if (opts_set->x_\" var_opt_short[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_opt_char; i++) {\n+\tprint \"  if (opts_set->x_\" var_opt_char[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_opt_string; i++) {\n+\tprint \"  if (opts_set->x_\" var_opt_string[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+if (j != 0) {\n+\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+}\n+\n print \"}\";\n \n print \"\";\n print \"/* Restore optimization options from a structure.  */\";\n print \"void\";\n-print \"cl_optimization_restore (struct gcc_options *opts, struct cl_optimization *ptr)\";\n+print \"cl_optimization_restore (struct gcc_options *opts, struct gcc_options *opts_set,\";\n+print \"\t\t\t struct cl_optimization *ptr)\";\n print \"{\";\n \n for (i = 0; i < n_opt_other; i++) {\n@@ -198,6 +276,77 @@ for (i = 0; i < n_opt_string; i++) {\n \tprint \"  opts->x_\" var_opt_string[i] \" = ptr->x_\" var_opt_string[i] \";\";\n }\n \n+print \"\";\n+print \"  unsigned HOST_WIDE_INT mask;\";\n+\n+j = 64;\n+k = 0;\n+for (i = 0; i < n_opt_other; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_opt_other[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_opt_int; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_opt_int[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_opt_enum; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_opt_enum[i] \" = static_cast<\" var_opt_enum_type[i] \">((mask & 1) != 0);\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_opt_short; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_opt_short[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_opt_char; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_opt_char[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_opt_string; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_opt_string[i] \" = (mask & 1) ? \\\"\\\" : nullptr;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n print \"  targetm.override_options_after_change ();\";\n print \"}\";\n \n@@ -344,7 +493,8 @@ print \"}\";\n print \"\";\n print \"/* Save selected option variables into a structure.  */\"\n print \"void\";\n-print \"cl_target_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\";\n+print \"cl_target_option_save (struct cl_target_option *ptr, struct gcc_options *opts,\";\n+print \"\t\t       struct gcc_options *opts_set)\";\n print \"{\";\n \n n_target_char = 0;\n@@ -372,9 +522,10 @@ if (have_save) {\n \t\t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n \t\t\t\tvar_target_short[n_target_short++] = name;\n \n-\t\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *$\"))\n+\t\t\telse if (otype ~ (\"^enum +[_\" alnum \"]+ *$\")) {\n+\t\t\t\tvar_target_enum_type[n_target_enum] = otype;\n \t\t\t\tvar_target_enum[n_target_enum++] = name;\n-\n+\t\t\t}\n \t\t\telse if (otype ~ \"^((un)?signed +)?char *$\") {\n \t\t\t\tvar_target_char[n_target_char++] = name;\n \t\t\t\tif (otype ~ \"^unsigned +char *$\")\n@@ -409,7 +560,7 @@ if (have_assert)\n \tprint \"\";\n \n print \"  if (targetm.target_option.save)\";\n-print \"    targetm.target_option.save (ptr, opts);\";\n+print \"    targetm.target_option.save (ptr, opts, opts_set);\";\n print \"\";\n \n for (i = 0; i < n_extra_target_vars; i++) {\n@@ -440,12 +591,99 @@ for (i = 0; i < n_target_string; i++) {\n \tprint \"  ptr->x_\" var_target_string[i] \" = opts->x_\" var_target_string[i] \";\";\n }\n \n+print \"\";\n+print \"  unsigned HOST_WIDE_INT mask = 0;\";\n+\n+j = 0;\n+k = 0;\n+for (i = 0; i < n_extra_target_vars; i++) {\n+\tprint \"  if (opts_set->x_\" extra_target_vars[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_target_other; i++) {\n+\tprint \"  if (opts_set->x_\" var_target_other[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_target_enum; i++) {\n+\tprint \"  if (opts_set->x_\" var_target_enum[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tprint \"  if (opts_set->x_\" var_target_int[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_target_short; i++) {\n+\tprint \"  if (opts_set->x_\" var_target_short[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_target_char; i++) {\n+\tprint \"  if (opts_set->x_\" var_target_char[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+for (i = 0; i < n_target_string; i++) {\n+\tprint \"  if (opts_set->x_\" var_target_string[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n+\tj++;\n+\tif (j == 64) {\n+\t\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+\t\tprint \"  mask = 0;\";\n+\t\tj = 0;\n+\t\tk++;\n+\t}\n+}\n+\n+if (j != 0) {\n+\tprint \"  ptr->explicit_mask[\" k \"] = mask;\";\n+}\n+\n print \"}\";\n \n print \"\";\n print \"/* Restore selected current options from a structure.  */\";\n print \"void\";\n-print \"cl_target_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\";\n+print \"cl_target_option_restore (struct gcc_options *opts, struct gcc_options *opts_set,\";\n+print \"\t\t\t  struct cl_target_option *ptr)\";\n print \"{\";\n \n for (i = 0; i < n_extra_target_vars; i++) {\n@@ -476,11 +714,101 @@ for (i = 0; i < n_target_string; i++) {\n \tprint \"  opts->x_\" var_target_string[i] \" = ptr->x_\" var_target_string[i] \";\";\n }\n \n+print \"\";\n+print \"  unsigned HOST_WIDE_INT mask;\";\n+\n+j = 64;\n+k = 0;\n+for (i = 0; i < n_extra_target_vars; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tif (extra_target_var_types[i] ~ (\"^enum +[_\" alnum \"]+ *$\")) {\n+\t\tprint \"  opts_set->x_\" extra_target_vars[i] \" = static_cast<\" extra_target_var_types[i] \">((mask & 1) != 0);\";\n+\t}\n+\telse if (extra_target_var_types[i] ~ \"^const char \\\\**$\") {\n+\t\tprint \"  opts_set->x_\" extra_target_vars[i] \" = (mask & 1) ? \\\"\\\" : nullptr;\";\n+\t}\n+\telse {\n+\t\tprint \"  opts_set->x_\" extra_target_vars[i] \" = (mask & 1) != 0;\";\n+\t}\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_target_other; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_target_other[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_target_enum; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_target_enum[i] \" = static_cast<\" var_target_enum_type[i] \">((mask & 1) != 0);\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_target_int[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_target_short; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_target_short[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_target_char; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_target_char[i] \" = (mask & 1) != 0;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n+for (i = 0; i < n_target_string; i++) {\n+\tif (j == 64) {\n+\t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n+\t\tk++;\n+\t\tj = 0;\n+\t}\n+\tprint \"  opts_set->x_\" var_target_string[i] \" = (mask & 1) ? \\\"\\\" : nullptr;\";\n+\tprint \"  mask >>= 1;\"\n+\tj++;\n+}\n+\n # This must occur after the normal variables in case the code depends on those\n # variables.\n print \"\";\n print \"  if (targetm.target_option.restore)\";\n-print \"    targetm.target_option.restore (opts, ptr);\";\n+print \"    targetm.target_option.restore (opts, opts_set, ptr);\";\n \n print \"}\";\n \n@@ -726,6 +1054,10 @@ for (i = 0; i < n_target_val; i++) {\n \tprint \"    return false;\";\n }\n \n+print \"  for (size_t i = 0; i < sizeof (ptr1->explicit_mask) / sizeof (ptr1->explicit_mask[0]); i++)\";\n+print \"    if (ptr1->explicit_mask[i] != ptr2->explicit_mask[i])\";\n+print \"      return false;\"\n+\n print \"  return true;\";\n \n print \"}\";\n@@ -754,6 +1086,8 @@ for (i = 0; i < n_target_val; i++) {\n \tname = var_target_val[i]\n \tprint \"  hstate.add_hwi (ptr->\" name\");\";\n }\n+print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"    hstate.add_hwi (ptr->explicit_mask[i]);\";\n print \"  return hstate.end ();\";\n print \"}\";\n \n@@ -778,6 +1112,10 @@ for (i = 0; i < n_target_val; i++) {\n \tname = var_target_val[i]\n \tprint \"  bp_pack_value (bp, ptr->\" name\", 64);\";\n }\n+\n+print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"    bp_pack_value (bp, ptr->explicit_mask[i], 64);\";\n+\n print \"}\";\n \n print \"\";\n@@ -804,6 +1142,9 @@ for (i = 0; i < n_target_val; i++) {\n \tprint \"  ptr->\" name\" = (\" var_target_val_type[i] \") bp_unpack_value (bp, 64);\";\n }\n \n+print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);\";\n+\n print \"}\";\n \n print \"/* free heap memory used by target options  */\";\n@@ -869,6 +1210,8 @@ for (i = 0; i < n_opt_val; i++) {\n \telse\n \t\tprint \"  hstate.add_hwi (ptr->\" name\");\";\n }\n+print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"    hstate.add_hwi (ptr->explicit_mask[i]);\";\n print \"  return hstate.end ();\";\n print \"}\";\n \n@@ -896,6 +1239,9 @@ for (i = 0; i < n_opt_val; i++) {\n \t\tprint \"    return false;\";\n \t}\n }\n+print \"  for (size_t i = 0; i < sizeof (ptr1->explicit_mask) / sizeof (ptr1->explicit_mask[0]); i++)\";\n+print \"    if (ptr1->explicit_mask[i] != ptr2->explicit_mask[i])\";\n+print \"      return false;\"\n print \"  return true;\";\n print \"}\";\n \n@@ -914,6 +1260,8 @@ for (i = 0; i < n_opt_val; i++) {\n \telse\n \t\tprint \"  bp_pack_value (bp, ptr->\" name\", 64);\";\n }\n+print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"    bp_pack_value (bp, ptr->explicit_mask[i], 64);\";\n print \"}\";\n \n print \"\";\n@@ -935,6 +1283,8 @@ for (i = 0; i < n_opt_val; i++) {\n \telse\n \t      print \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_value (bp, 64);\";\n }\n+print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);\";\n print \"}\";\n print \"/* Free heap memory used by optimization options  */\";\n print \"void\";"}, {"sha": "8fec607041eec0d606f3d53e12650056065e5d15", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -137,6 +137,7 @@ n_opt_short = 0;\n n_opt_int = 0;\n n_opt_enum = 0;\n n_opt_other = 0;\n+n_opt_explicit = 4;\n var_opt_char[0] = \"unsigned char x_optimize\";\n var_opt_char[1] = \"unsigned char x_optimize_size\";\n var_opt_char[2] = \"unsigned char x_optimize_debug\";\n@@ -152,6 +153,7 @@ for (i = 0; i < n_opts; i++) {\n \t\t\tcontinue;\n \n \t\tvar_opt_seen[name]++;\n+\t\tn_opt_explicit++;\n \t\totype = var_type_struct(flags[i]);\n \t\tif (otype ~ \"^((un)?signed +)?int *$\")\n \t\t\tvar_opt_int[n_opt_int++] = otype \"x_\" name;\n@@ -190,6 +192,9 @@ for (i = 0; i < n_opt_char; i++) {\n \tprint \"  \" var_opt_char[i] \";\";\n }\n \n+print \"  /* \" n_opt_explicit \" members */\";\n+print \"  unsigned HOST_WIDE_INT explicit_mask[\" int ((n_opt_explicit + 63) / 64) \"];\";\n+\n print \"};\";\n print \"\";\n \n@@ -203,6 +208,7 @@ n_target_short = 0;\n n_target_int = 0;\n n_target_enum = 0;\n n_target_other = 0;\n+n_target_explicit = n_extra_target_vars;\n \n for (i = 0; i < n_target_save; i++) {\n \tif (target_save_decl[i] ~ \"^((un)?signed +)?int +[_\" alnum \"]+$\")\n@@ -232,6 +238,7 @@ if (have_save) {\n \t\t\t\tcontinue;\n \n \t\t\tvar_save_seen[name]++;\n+\t\t\tn_target_explicit++;\n \t\t\totype = var_type_struct(flags[i])\n \t\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n \t\t\t\tvar_target_int[n_target_int++] = otype \"x_\" name;\n@@ -251,6 +258,7 @@ if (have_save) {\n \t}\n } else {\n \tvar_target_int[n_target_int++] = \"int x_target_flags\";\n+\tn_target_explicit++;\n }\n \n for (i = 0; i < n_target_other; i++) {\n@@ -273,14 +281,17 @@ for (i = 0; i < n_target_char; i++) {\n \tprint \"  \" var_target_char[i] \";\";\n }\n \n+print \"  /* \" n_target_explicit \" members */\";\n+print \"  unsigned HOST_WIDE_INT explicit_mask[\" int ((n_target_explicit + 63) / 64) \"];\";\n+\n print \"};\";\n print \"\";\n print \"\";\n print \"/* Save optimization variables into a structure.  */\"\n-print \"extern void cl_optimization_save (struct cl_optimization *, struct gcc_options *);\";\n+print \"extern void cl_optimization_save (struct cl_optimization *, struct gcc_options *, struct gcc_options *);\";\n print \"\";\n print \"/* Restore optimization variables from a structure.  */\";\n-print \"extern void cl_optimization_restore (struct gcc_options *, struct cl_optimization *);\";\n+print \"extern void cl_optimization_restore (struct gcc_options *, struct gcc_options *, struct cl_optimization *);\";\n print \"\";\n print \"/* Print optimization variables from a structure.  */\";\n print \"extern void cl_optimization_print (FILE *, int, struct cl_optimization *);\";\n@@ -289,10 +300,10 @@ print \"/* Print different optimization variables from structures provided as arg\n print \"extern void cl_optimization_print_diff (FILE *, int, cl_optimization *ptr1, cl_optimization *ptr2);\";\n print \"\";\n print \"/* Save selected option variables into a structure.  */\"\n-print \"extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *);\";\n+print \"extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *, struct gcc_options *);\";\n print \"\";\n print \"/* Restore selected option variables from a structure.  */\"\n-print \"extern void cl_target_option_restore (struct gcc_options *, struct cl_target_option *);\";\n+print \"extern void cl_target_option_restore (struct gcc_options *, struct gcc_options *, struct cl_target_option *);\";\n print \"\";\n print \"/* Print target option variables from a structure.  */\";\n print \"extern void cl_target_option_print (FILE *, int, struct cl_target_option *);\";"}, {"sha": "c7fcd70f776537f8df206bfa96f3cc5903badf35", "filename": "gcc/target-globals.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -108,11 +108,11 @@ save_target_globals_default_opts ()\n \t attribute.  */\n       optimization_current_node = optimization_default_node;\n       cl_optimization_restore\n-\t(&global_options,\n+\t(&global_options, &global_options_set,\n \t TREE_OPTIMIZATION (optimization_default_node));\n       globals = save_target_globals ();\n       optimization_current_node = opts;\n-      cl_optimization_restore (&global_options,\n+      cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t       TREE_OPTIMIZATION (opts));\n       return globals;\n     }"}, {"sha": "fc4563d144cd5fb573e27f397c379c5438563d9e", "filename": "gcc/target.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -6376,7 +6376,8 @@ DEFHOOK\n in the @code{struct cl_target_option} structure for function-specific\\n\\\n options from the @code{struct gcc_options} structure.\\n\\\n @xref{Option file format}.\",\n- void, (struct cl_target_option *ptr, struct gcc_options *opts), NULL)\n+ void, (struct cl_target_option *ptr, struct gcc_options *opts,\n+\tstruct gcc_options *opts_set), NULL)\n \n /* Function to restore any extra target state from the target options\n    structure.  */\n@@ -6385,7 +6386,8 @@ DEFHOOK\n  \"This hook is called to restore any additional target-specific\\n\\\n information in the @code{struct cl_target_option} structure for\\n\\\n function-specific options to the @code{struct gcc_options} structure.\",\n- void, (struct gcc_options *opts, struct cl_target_option *ptr), NULL)\n+ void, (struct gcc_options *opts, struct gcc_options *opts_set,\n+\tstruct cl_target_option *ptr), NULL)\n \n /* Function to update target-specific option information after being\n    streamed in.  */"}, {"sha": "cdd4b5b4f92177ff45e32c5037338df2a5d9e34e", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -1867,7 +1867,8 @@ process_options (void)\n                                     DK_ERROR, UNKNOWN_LOCATION);\n \n   /* Save the current optimization options.  */\n-  optimization_default_node = build_optimization_node (&global_options);\n+  optimization_default_node\n+    = build_optimization_node (&global_options, &global_options_set);\n   optimization_current_node = optimization_default_node;\n \n   if (flag_checking >= 2)\n@@ -2075,7 +2076,7 @@ target_reinit (void)\n     {\n       optimization_current_node = optimization_default_node;\n       cl_optimization_restore\n-\t(&global_options,\n+\t(&global_options, &global_options_set,\n \t TREE_OPTIMIZATION (optimization_default_node));\n     }\n   this_fn_optabs = this_target_optabs;\n@@ -2107,7 +2108,7 @@ target_reinit (void)\n   if (saved_optimization_current_node != optimization_default_node)\n     {\n       optimization_current_node = saved_optimization_current_node;\n-      cl_optimization_restore (&global_options,\n+      cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t       TREE_OPTIMIZATION (optimization_current_node));\n     }\n   this_fn_optabs = saved_this_fn_optabs;"}, {"sha": "2a8817bd2826cb3cbeaba1d0e7f98ff07b447f1e", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -800,11 +800,12 @@ lto_input_ts_function_decl_tree_pointers (class lto_input_block *ib,\n     tree opts = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr);\n     if (opts)\n       {\n-\tstruct gcc_options tmp;\n+\tstruct gcc_options tmp, tmp_set;\n \tinit_options_struct (&tmp, NULL);\n-\tcl_optimization_restore (&tmp, TREE_OPTIMIZATION (opts));\n-\tfinish_options (&tmp, &global_options_set, UNKNOWN_LOCATION);\n-\topts = build_optimization_node (&tmp);\n+\tmemset (&tmp_set, 0, sizeof (tmp_set));\n+\tcl_optimization_restore (&tmp, &tmp_set, TREE_OPTIMIZATION (opts));\n+\tfinish_options (&tmp, &tmp_set, UNKNOWN_LOCATION);\n+\topts = build_optimization_node (&tmp, &tmp_set);\n \tDECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr) = opts;\n       }\n   }"}, {"sha": "4046debb72f4db666a80fb72906461f6313e85d2", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -12574,17 +12574,18 @@ cl_option_hasher::equal (tree x, tree y)\n     gcc_unreachable ();\n }\n \n-/* Build an OPTIMIZATION_NODE based on the options in OPTS.  */\n+/* Build an OPTIMIZATION_NODE based on the options in OPTS and OPTS_SET.  */\n \n tree\n-build_optimization_node (struct gcc_options *opts)\n+build_optimization_node (struct gcc_options *opts,\n+\t\t\t struct gcc_options *opts_set)\n {\n   tree t;\n \n   /* Use the cache of optimization nodes.  */\n \n   cl_optimization_save (TREE_OPTIMIZATION (cl_optimization_node),\n-\t\t\topts);\n+\t\t\topts, opts_set);\n \n   tree *slot = cl_option_hash_table->find_slot (cl_optimization_node, INSERT);\n   t = *slot;\n@@ -12601,17 +12602,18 @@ build_optimization_node (struct gcc_options *opts)\n   return t;\n }\n \n-/* Build a TARGET_OPTION_NODE based on the options in OPTS.  */\n+/* Build a TARGET_OPTION_NODE based on the options in OPTS and OPTS_SET.  */\n \n tree\n-build_target_option_node (struct gcc_options *opts)\n+build_target_option_node (struct gcc_options *opts,\n+\t\t\t  struct gcc_options *opts_set)\n {\n   tree t;\n \n   /* Use the cache of optimization nodes.  */\n \n   cl_target_option_save (TREE_TARGET_OPTION (cl_target_option_node),\n-\t\t\t opts);\n+\t\t\t opts, opts_set);\n \n   tree *slot = cl_option_hash_table->find_slot (cl_target_option_node, INSERT);\n   t = *slot;"}, {"sha": "8c65f7ca0a91d34186660795fe69673e6d35f143", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ba948b37768c99cd8eb9f5b6fbd45fcf4bd15b78", "patch": "@@ -3272,17 +3272,21 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n #define TREE_OPTIMIZATION_BASE_OPTABS(NODE) \\\n   (OPTIMIZATION_NODE_CHECK (NODE)->optimization.base_optabs)\n \n-/* Return a tree node that encapsulates the optimization options in OPTS.  */\n-extern tree build_optimization_node (struct gcc_options *opts);\n+/* Return a tree node that encapsulates the optimization options in OPTS\n+   and OPTS_SET.  */\n+extern tree build_optimization_node (struct gcc_options *opts,\n+\t\t\t\t     struct gcc_options *opts_set);\n \n #define TREE_TARGET_OPTION(NODE) \\\n   (TARGET_OPTION_NODE_CHECK (NODE)->target_option.opts)\n \n #define TREE_TARGET_GLOBALS(NODE) \\\n   (TARGET_OPTION_NODE_CHECK (NODE)->target_option.globals)\n \n-/* Return a tree node that encapsulates the target options in OPTS.  */\n-extern tree build_target_option_node (struct gcc_options *opts);\n+/* Return a tree node that encapsulates the target options in OPTS and\n+   OPTS_SET.  */\n+extern tree build_target_option_node (struct gcc_options *opts,\n+\t\t\t\t      struct gcc_options *opts_set);\n \n extern void prepare_target_option_nodes_for_pch (void);\n "}]}