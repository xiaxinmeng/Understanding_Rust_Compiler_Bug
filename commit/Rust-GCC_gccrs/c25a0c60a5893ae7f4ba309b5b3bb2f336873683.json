{"sha": "c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1YTBjNjBhNTg5M2FlN2Y0YmEzMDliNWIzYmIyZjMzNjg3MzY4Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-16T13:57:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-16T13:57:48Z"}, "message": "re PR tree-optimization/54767 (Incorrect code generated with \"-O2 -fcheck=bounds\")\n\n2013-01-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/54767\n\tPR tree-optimization/53465\n\t* tree-vrp.c (vrp_meet_1): Revert original fix for PR53465.\n\t(vrp_visit_phi_node): For PHI arguments coming via backedges\n\tdrop all symbolical range information.\n\t(execute_vrp): Compute backedges.\n\n\t* gfortran.fortran-torture/execute/pr54767.f90: New testcase.\n\nFrom-SVN: r195238", "tree": {"sha": "bf26002dab1b0a5d65c7eb332ee9ec6f9b197e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf26002dab1b0a5d65c7eb332ee9ec6f9b197e26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04b535af39f1c081d95961e4a7b0a0818182a7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b535af39f1c081d95961e4a7b0a0818182a7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b535af39f1c081d95961e4a7b0a0818182a7a6"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "16a3abc7afa50a59f4bf8887b7d5e950903c2d35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "patch": "@@ -1,3 +1,12 @@\n+2013-01-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54767\n+\tPR tree-optimization/53465\n+\t* tree-vrp.c (vrp_meet_1): Revert original fix for PR53465.\n+\t(vrp_visit_phi_node): For PHI arguments coming via backedges\n+\tdrop all symbolical range information.\n+\t(execute_vrp): Compute backedges.\n+\n 2013-01-16  Richard Biener  <rguenther@suse.de>\n \n \t* doc/install.texi: Update CLooG and ISL requirements to"}, {"sha": "05f76676eda77e801aeeb55d8779409a0f3e7b71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "patch": "@@ -1,3 +1,9 @@\n+2013-01-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54767\n+\tPR tree-optimization/53465\n+\t* gfortran.fortran-torture/execute/pr54767.f90: New testcase.\n+\n 2013-01-16  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/55301"}, {"sha": "f95bff1b338c42b93e50f824eb437212514ba245", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/pr54767.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr54767.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr54767.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr54767.f90?ref=c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "patch": "@@ -0,0 +1,31 @@\n+SUBROUTINE XXX (IL, IU)\n+  implicit none\n+  integer, INTENT(IN) :: IL, IU\n+\n+  integer :: NXX (14) = (/ 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14 /)\n+  integer :: ivvv, ia, ja, iaii\n+  logical :: qop\n+\n+  QOP=.FALSE.\n+\n+  DO IA=IL,IU\n+    JA=NXX(IA)\n+    IF (.NOT. QOP .and. JA.GT.0) THEN\n+      IAII=IA\n+      QOP=.TRUE.\n+    ENDIF\n+\n+    IF (QOP) THEN\n+      ivvv=IA-IAII+1       ! mis-compiled\n+    ENDIF\n+  ENDDO\n+\n+  IF (ivvv.NE.2) THEN\n+    call abort\n+  ENDIF\n+END subroutine\n+\n+program p\n+  implicit none\n+  CALL XXX (1, 3)\n+end"}, {"sha": "0efac6045e3f5e3fca618c23b60e6ac84fac1289", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a0c60a5893ae7f4ba309b5b3bb2f336873683/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c25a0c60a5893ae7f4ba309b5b3bb2f336873683", "patch": "@@ -7877,17 +7877,13 @@ vrp_meet_1 (value_range_t *vr0, value_range_t *vr1)\n \n   if (vr0->type == VR_UNDEFINED)\n     {\n-      /* Drop equivalences.  See PR53465.  */\n-      set_value_range (vr0, vr1->type, vr1->min, vr1->max, NULL);\n+      set_value_range (vr0, vr1->type, vr1->min, vr1->max, vr1->equiv);\n       return;\n     }\n \n   if (vr1->type == VR_UNDEFINED)\n     {\n-      /* VR0 already has the resulting range, just drop equivalences.\n-\t See PR53465.  */\n-      if (vr0->equiv)\n-\tbitmap_clear (vr0->equiv);\n+      /* VR0 already has the resulting range.  */\n       return;\n     }\n \n@@ -8012,6 +8008,21 @@ vrp_visit_phi_node (gimple phi)\n \t  if (TREE_CODE (arg) == SSA_NAME)\n \t    {\n \t      vr_arg = *(get_value_range (arg));\n+\t      /* Do not allow equivalences or symbolic ranges to leak in from\n+\t\t backedges.  That creates invalid equivalencies.\n+\t\t See PR53465 and PR54767.  */\n+\t      if (e->flags & EDGE_DFS_BACK\n+\t\t  && (vr_arg.type == VR_RANGE\n+\t\t      || vr_arg.type == VR_ANTI_RANGE))\n+\t\t{\n+\t\t  vr_arg.equiv = NULL;\n+\t\t  if (symbolic_range_p (&vr_arg))\n+\t\t    {\n+\t\t      vr_arg.type = VR_VARYING;\n+\t\t      vr_arg.min = NULL_TREE;\n+\t\t      vr_arg.max = NULL_TREE;\n+\t\t    }\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -9260,12 +9271,18 @@ execute_vrp (void)\n   rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n   scev_initialize ();\n \n+  /* ???  This ends up using stale EDGE_DFS_BACK for liveness computation.\n+     Inserting assertions may split edges which will invalidate\n+     EDGE_DFS_BACK.  */\n   insert_range_assertions ();\n \n   to_remove_edges.create (10);\n   to_update_switch_stmts.create (5);\n   threadedge_initialize_values ();\n \n+  /* For visiting PHI nodes we need EDGE_DFS_BACK computed.  */\n+  mark_dfs_back_edges ();\n+\n   vrp_initialize ();\n   ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n   vrp_finalize ();"}]}