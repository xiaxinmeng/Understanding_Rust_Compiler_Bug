{"sha": "b53d0fe275e48d4488804ebb88bef73a24b3ed65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzZDBmZTI3NWU0OGQ0NDg4ODA0ZWJiODhiZWY3M2EyNGIzZWQ2NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2012-01-23T17:49:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T17:49:03Z"}, "message": "cxh1001.a: Removed, test not suitable on all configurations.\n\n\t* ada/acats/tests/cxh/cxh1001.a: Removed, test not suitable on all\n\tconfigurations.\n\t* ada/acats/run_all.sh: Simplify by removing cxh1001 special case.\n\nFrom-SVN: r183443", "tree": {"sha": "39d44a02176588ffd98e6ba0ce9167eb593fe8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d44a02176588ffd98e6ba0ce9167eb593fe8f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b53d0fe275e48d4488804ebb88bef73a24b3ed65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53d0fe275e48d4488804ebb88bef73a24b3ed65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53d0fe275e48d4488804ebb88bef73a24b3ed65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53d0fe275e48d4488804ebb88bef73a24b3ed65/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36ff4a7af7dbc1b38e682391215b443a2942760a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ff4a7af7dbc1b38e682391215b443a2942760a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ff4a7af7dbc1b38e682391215b443a2942760a"}], "stats": {"total": 356, "additions": 6, "deletions": 350}, "files": [{"sha": "41929df32cc70a9389f628a295a900eed30dfae8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53d0fe275e48d4488804ebb88bef73a24b3ed65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53d0fe275e48d4488804ebb88bef73a24b3ed65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b53d0fe275e48d4488804ebb88bef73a24b3ed65", "patch": "@@ -1,3 +1,9 @@\n+2012-01-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ada/acats/tests/cxh/cxh1001.a: Removed, test not suitable on all\n+\tconfigurations.\n+\t* ada/acats/run_all.sh: Simplify by removing cxh1001 special case.\n+\n 2012-01-23  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR testsuite/51941"}, {"sha": "c3c104a86bf381cf5cc067d0295d647100f1ce33", "filename": "gcc/testsuite/ada/acats/run_all.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53d0fe275e48d4488804ebb88bef73a24b3ed65/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53d0fe275e48d4488804ebb88bef73a24b3ed65/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh?ref=b53d0fe275e48d4488804ebb88bef73a24b3ed65", "patch": "@@ -257,7 +257,6 @@ for chapter in $chapters; do\n         cxb30*) EXTERNAL_OBJECTS=\"$dir/support/cxb30040.o $dir/support/cxb30060.o $dir/support/cxb30130.o $dir/support/cxb30131.o\";;\n         ca1020e) rm -f ca1020e_func1.adb ca1020e_func2.adb ca1020e_proc1.adb ca1020e_proc2.adb > /dev/null 2>&1;;\n         ca14028) rm -f ca14028_func2.ads ca14028_func3.ads ca14028_proc1.ads ca14028_proc3.ads > /dev/null 2>&1;;\n-        cxh1001) extraflags=\"-a -f\"; echo \"pragma Normalize_Scalars;\" > gnat.adc\n       esac\n       if [ \"$main\" = \"\" ]; then\n          display \"FAIL:\t$i\""}, {"sha": "12379a1a551e8bbad8fcd140f1d04182877efa87", "filename": "gcc/testsuite/ada/acats/tests/cxh/cxh1001.a", "status": "removed", "additions": 0, "deletions": 349, "changes": 349, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ff4a7af7dbc1b38e682391215b443a2942760a/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fcxh%2Fcxh1001.a", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ff4a7af7dbc1b38e682391215b443a2942760a/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fcxh%2Fcxh1001.a", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fcxh%2Fcxh1001.a?ref=36ff4a7af7dbc1b38e682391215b443a2942760a", "patch": "@@ -1,349 +0,0 @@\n--- CXH1001.A\n---\n---                             Grant of Unlimited Rights\n---\n---     Under contracts F33600-87-D-0337, F33600-84-D-0280, MDA903-79-C-0687,\n---     F08630-91-C-0015, and DCA100-97-D-0025, the U.S. Government obtained \n---     unlimited rights in the software and documentation contained herein.\n---     Unlimited rights are defined in DFAR 252.227-7013(a)(19).  By making \n---     this public release, the Government intends to confer upon all \n---     recipients unlimited rights  equal to those held by the Government.  \n---     These rights include rights to use, duplicate, release or disclose the \n---     released technical data and computer software in whole or in part, in \n---     any manner and for any purpose whatsoever, and to have or permit others \n---     to do so.\n---\n---                                    DISCLAIMER\n---\n---     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR\n---     DISCLOSED ARE AS IS.  THE GOVERNMENT MAKES NO EXPRESS OR IMPLIED \n---     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE\n---     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE \n---     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A\n---     PARTICULAR PURPOSE OF SAID MATERIAL.\n---*\n---\n--- OBJECTIVE\n---     Check pragma Normalize_Scalars.\n---     Check that this configuration pragma causes uninitialized scalar\n---     objects to be set to a predictable value.  Check that multiple\n---     compilation units are affected.  Check for uninitialized scalar\n---     objects that are subcomponents of composite objects, unassigned\n---     out parameters, objects that have been allocated without an initial\n---     value, and objects that are stand alone.\n---\n--- TEST DESCRIPTION\n---     The test requires that the configuration pragma Normalize_Scalars\n---     be processed.  It then defines a few scalar types (some enumeration,\n---     some integer) in a few packages.  The scalar types are designed such\n---     that the representation will easily allow for an out of range value.\n---     Unchecked_Conversion and the 'Valid attribute are both used to verify\n---     that the default values of the various kinds of objects are indeed\n---     invalid for the type.\n---\n---     Note that this test relies on having uninitialized objects, compilers\n---     may generate several warnings to this effect.\n---\n--- SPECIAL REQUIREMENTS\n---      The implementation must process configuration pragmas which\n---      are not part of any Compilation Unit;  the method employed\n---      is implementation defined.\n---\n--- APPLICABILITY CRITERIA:\n---      This test is only applicable for a compiler attempting validation\n---      for the Safety and Security Annex.\n---\n---\n--- CHANGE HISTORY:\n---      26 OCT 95   SAIC   Initial version\n---      04 NOV 96   SAIC   Added cases, upgraded commentary\n---\n---!\n-\n----------------------------- CONFIGURATION PRAGMAS -----------------------\n-\n-pragma Normalize_Scalars;                                         -- OK\n-                                                -- configuration pragma\n-\n------------------------- END OF CONFIGURATION PRAGMAS --------------------\n-\n-\n------------------------------------------------------------------ CXH1001_0\n-\n-with Impdef.Annex_H;\n-with Unchecked_Conversion;\n-package CXH1001_0 is\n-\n-  package Imp_H renames Impdef.Annex_H;\n-  use type Imp_H.Small_Number;\n-  use type Imp_H.Scalar_To_Normalize;\n-\n-  Global_Object : Imp_H.Scalar_To_Normalize;\n-  -- if the pragma is in effect, this should come up with the predictable\n-  -- value\n-\n-  Global_Number : Imp_H.Small_Number;\n-  -- if the pragma is in effect, this should come up with the predictable\n-  -- value\n-\n-  procedure Package_Check;\n-\n-  type Num is range 0..2**Imp_H.Scalar_To_Normalize'Size-1;\n-  for Num'Size use Imp_H.Scalar_To_Normalize'Size;  \n-\n-  function STN_2_Num is\n-     new Unchecked_Conversion( Imp_H.Scalar_To_Normalize, Num );\n-\n-  Small_Last : constant Integer := Integer(Imp_H.Small_Number'Last);\n-\n-end CXH1001_0;\n-\n--- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-\n-with Report;\n-package body CXH1001_0 is\n-\n-  procedure Heap_Check( A_Value  : access Imp_H.Scalar_To_Normalize;\n-                        A_Number : access Imp_H.Small_Number ) is\n-    Value  : Num;\n-    Number : Integer;\n-  begin\n-\n-    if A_Value.all'Valid then\n-      Value := STN_2_Num ( A_Value.all );\n-      if Imp_H.Default_For_Scalar_To_Normalize_Is_In_Range then\n-        if Imp_H.Scalar_To_Normalize'Val(Value)\n-           /= Imp_H.Default_For_Scalar_To_Normalize then\n-          Report.Failed(\"Implicit initial value for local variable is not \"\n-                         & \"the predicted value\"); \n-        end if;\n-      else\n-        if Value in 0 ..\n-            Imp_H.Scalar_To_Normalize'Pos(Imp_H.Scalar_To_Normalize'Last) then\n-          Report.Failed(\"Implicit initial value for local variable is a \"\n-                         & \"value of the type\"); \n-        end if;\n-      end if;\n-    end if;\n-\n-    if A_Number.all'Valid then\n-      Number := Integer( A_Number.all );\n-      if Imp_H.Default_For_Small_Number_Is_In_Range then\n-        if Global_Number /= Imp_H.Default_For_Small_Number then\n-          Report.Failed(\"Implicit initial value for number is not \"\n-                         & \"the predicted value\"); \n-        end if;\n-      else\n-        if Integer( Global_Number ) in 0 .. Report.Ident_Int(Small_Last) then\n-          Report.Failed(\"Implicit initial value for number is a \"\n-                         & \"value of the type\"); \n-        end if;\n-      end if;\n-    end if;\n-\n-  end Heap_Check;\n-\n-  procedure Package_Check is\n-    Value  : Num;\n-    Number : Integer;\n-  begin\n-\n-    if Global_Object'Valid then\n-      Value := STN_2_Num ( Global_Object );\n-      if Imp_H.Default_For_Scalar_To_Normalize_Is_In_Range then\n-        if Imp_H.Scalar_To_Normalize'Val(Value)\n-           /= Imp_H.Default_For_Scalar_To_Normalize then\n-          Report.Failed(\"Implicit initial value for local variable is not \"\n-                         & \"the predicted value\"); \n-        end if;\n-      else\n-        if Value in 0 .. \n-            Imp_H.Scalar_To_Normalize'Pos(Imp_H.Scalar_To_Normalize'Last) then\n-          Report.Failed(\"Implicit initial value for local variable is a \"\n-                         & \"value of the type\"); \n-        end if;\n-      end if;\n-    end if;\n-\n-    if Global_Number'Valid then\n-      Number := Integer( Global_Number );\n-      if Imp_H.Default_For_Small_Number_Is_In_Range then\n-        if Global_Number /= Imp_H.Default_For_Small_Number then\n-          Report.Failed(\"Implicit initial value for number is not \"\n-                         & \"the predicted value\"); \n-        end if;\n-      else\n-        if Integer( Global_Number ) in 0 .. Report.Ident_Int(Small_Last) then\n-          Report.Failed(\"Implicit initial value for number is a \"\n-                         & \"value of the type\"); \n-        end if;\n-      end if;\n-    end if;\n-\n-    Heap_Check( new Imp_H.Scalar_To_Normalize, new Imp_H.Small_Number );\n-\n-  end Package_Check;\n-\n-end CXH1001_0;\n-\n------------------------------------------------------------------ CXH1001_1\n-\n-with Unchecked_Conversion;\n-package CXH1001_0.CXH1001_1 is\n-\n-  -- kill as many birds as possible with a single stone:\n-  --   embed a protected object in the body of a child package,\n-  -- checks the multiple compilation unit case,\n-  -- and part of the subcomponent case.\n-\n-  protected Thingy is\n-    procedure Check_Embedded_Values;\n-  private\n-    Hidden_Object : Imp_H.Scalar_To_Normalize;  -- not initialized\n-    Hidden_Number : Imp_H.Small_Number;         -- not initialized\n-  end Thingy;\n-\n-end CXH1001_0.CXH1001_1;\n-\n--- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-\n-with Report;\n-package body CXH1001_0.CXH1001_1 is\n-\n-  Childs_Object : Imp_H.Scalar_To_Normalize;  -- not initialized\n-\n-  protected body Thingy is\n-\n-    procedure Check_Embedded_Values is\n-    begin\n-\n-      if Imp_H.Default_For_Scalar_To_Normalize_Is_In_Range then\n-        if Childs_Object /= Imp_H.Default_For_Scalar_To_Normalize then\n-          Report.Failed(\"Implicit initial value for child object is not \"\n-                         & \"the predicted value\"); \n-        end if;\n-      elsif Childs_Object'Valid and then STN_2_Num( Childs_Object ) in 0 ..\n-            Imp_H.Scalar_To_Normalize'Pos(Imp_H.Scalar_To_Normalize'Last) then\n-          Report.Failed(\"Implicit initial value for child object is a \"\n-                         & \"value of the type\"); \n-      end if;\n-\n-      if Imp_H.Default_For_Scalar_To_Normalize_Is_In_Range then\n-        if Hidden_Object /= Imp_H.Default_For_Scalar_To_Normalize then\n-          Report.Failed(\"Implicit initial value for protected package object \"\n-                         & \"is not the predicted value\"); \n-        end if;\n-      elsif Hidden_Object'Valid and then STN_2_Num( Hidden_Object ) in 0 ..\n-            Imp_H.Scalar_To_Normalize'Pos(Imp_H.Scalar_To_Normalize'Last) then\n-          Report.Failed(\"Implicit initial value for protected component \"\n-                         & \"is a value of the type\"); \n-      end if;\n-\n-      if Imp_H.Default_For_Small_Number_Is_In_Range then\n-        if Hidden_Number /= Imp_H.Default_For_Small_Number then\n-          Report.Failed(\"Implicit initial value for protected number \"\n-                         & \"is not the predicted value\"); \n-        end if;\n-      elsif Hidden_Number'Valid and then Hidden_Number in\n-                    0 .. Imp_H.Small_Number(Report.Ident_Int(Small_Last)) then\n-          Report.Failed(\"Implicit initial value for protected number \"\n-                         & \"is a value of the type\"); \n-      end if;\n-\n-    end Check_Embedded_Values;\n-\n- end Thingy;\n-\n-end CXH1001_0.CXH1001_1;\n-\n-------------------------------------------------------------------- CXH1001\n-\n-with Impdef.Annex_H;\n-with Report;\n-with CXH1001_0.CXH1001_1;\n-procedure CXH1001 is\n-\n-  package Imp_H renames Impdef.Annex_H;\n-  use type CXH1001_0.Num;\n-\n-  My_Object : Imp_H.Scalar_To_Normalize;  -- not initialized\n-\n-  Value     : CXH1001_0.Num := CXH1001_0.STN_2_Num ( My_Object );\n-                               -- My_Object is not initialized\n-\n-  Parameter_Value : Imp_H.Scalar_To_Normalize\n-                  := Imp_H.Scalar_To_Normalize'Last;\n-\n-  type Structure is record  -- not initialized\n-    Std_Int : Integer;\n-    Scalar  : Imp_H.Scalar_To_Normalize;\n-    Num     : CXH1001_0.Num;\n-  end record;\n-\n-  S : Structure;  -- not initialized\n-\n-  procedure Bad_Code( Unassigned : out Imp_H.Scalar_To_Normalize ) is\n-    -- returns uninitialized OUT parameter\n-  begin\n-\n-    if Report.Ident_Int( 0 ) = 1 then\n-      Report.Failed( \"Nothing is something\" );\n-      Unassigned := Imp_H.Scalar_To_Normalize'First;\n-    end if;\n-\n-  end Bad_Code; \n-\n-  procedure Check( V : CXH1001_0.Num; Message : String ) is\n-  begin\n-\n-\n-    if Imp_H.Default_For_Scalar_To_Normalize_Is_In_Range then\n-      if V /= Imp_H.Scalar_To_Normalize'Pos(\n-                                  Imp_H.Default_For_Scalar_To_Normalize) then\n-        Report.Failed(Message & \": Implicit initial value for object \"\n-                       & \"is not the predicted value\"); \n-      end if;\n-    elsif V'Valid and then V in\n-      0 .. Imp_H.Scalar_To_Normalize'Pos(Imp_H.Scalar_To_Normalize'Last) then\n-      Report.Failed(Message & \": Implicit initial value for object \"\n-                     & \"is a value of the type\"); \n-    end if;\n-\n-  end Check;\n-\n-begin  -- Main test procedure.\n-\n-  Report.Test (\"CXH1001\", \"Check that the configuration pragma \" &\n-                          \"Normalize_Scalars causes uninitialized scalar \" &\n-                          \"objects to be set to a predictable value. \" &\n-                          \"Check that multiple compilation units are \" &\n-                          \"affected.  Check for uninitialized scalar \" &\n-                          \"objects that are subcomponents of composite \" &\n-                          \"objects, unassigned out parameters, have been \" &\n-                          \"allocated without an initial value, and are \" &\n-                          \"stand alone.\" );\n-   \n-  CXH1001_0.Package_Check;\n-\n-  if My_Object'Valid then\n-    Value := CXH1001_0.STN_2_Num ( My_Object ); -- My_Object not initialized\n-  end if;\n-  -- otherwise, we just leave Value uninitialized\n-\n-  Check( Value, \"main procedure variable\" );\n-\n-  Bad_Code( Parameter_Value );\n-\n-  if Parameter_Value'Valid then\n-    Check( CXH1001_0.STN_2_Num ( Parameter_Value ), \"Out parameter return\" );\n-  end if;\n-\n-  if S.Scalar'Valid then\n-    Check( CXH1001_0.STN_2_Num ( S.Scalar ), \"Record component\" );\n-  end if;\n-\n-  CXH1001_0.CXH1001_1.Thingy.Check_Embedded_Values;\n-\n-  Report.Result;\n-\n-end CXH1001;"}]}