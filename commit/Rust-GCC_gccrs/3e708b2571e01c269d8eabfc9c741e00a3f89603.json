{"sha": "3e708b2571e01c269d8eabfc9c741e00a3f89603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3MDhiMjU3MWUwMWMyNjlkOGVhYmZjOWM3NDFlMDBhM2Y4OTYwMw==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-09-12T07:56:07Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-09-12T07:56:07Z"}, "message": "re PR fortran/33395 ([ISO_C_BINDING ?] ICE (segfault) in gfc_conv_initializer)\n\n2007-09-12  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33395\n\t* trans-expr.c (gfc_conv_initializer): Remove unnecessary test for\n\tintmod_sym_id and use derived symbol to set new kind of C_NULL_PTR\n\tand C_NULL_FUNPTR expressions.\n\n2007-09-12  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33395\n\t* gfortran.dg/c_ptr_tests_12.f03: New test case.\n\nFrom-SVN: r128418", "tree": {"sha": "c08d56c1c4b10466bb44edd3a378a4f4257c2da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c08d56c1c4b10466bb44edd3a378a4f4257c2da0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e708b2571e01c269d8eabfc9c741e00a3f89603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e708b2571e01c269d8eabfc9c741e00a3f89603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e708b2571e01c269d8eabfc9c741e00a3f89603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e708b2571e01c269d8eabfc9c741e00a3f89603/comments", "author": null, "committer": null, "parents": [{"sha": "54a5b59be2162d982b5cf3f4a46d962c041b9e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54a5b59be2162d982b5cf3f4a46d962c041b9e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54a5b59be2162d982b5cf3f4a46d962c041b9e11"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "c17cac4c499c3f5e786b6970050ddfa5a8b6aa95", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e708b2571e01c269d8eabfc9c741e00a3f89603", "patch": "@@ -1,3 +1,10 @@\n+2007-09-12  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33395\n+\t* trans-expr.c (gfc_conv_initializer): Remove unnecessary test for\n+\tintmod_sym_id and use derived symbol to set new kind of C_NULL_PTR\n+\tand C_NULL_FUNPTR expressions.\n+\n 2007-09-11  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/33040"}, {"sha": "7e71a72201626f566f292447a32aefedb6c00cde", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=3e708b2571e01c269d8eabfc9c741e00a3f89603", "patch": "@@ -2851,11 +2851,21 @@ gfc_conv_initializer (gfc_expr * expr, gfc_typespec * ts, tree type,\n   if (!(expr || pointer))\n     return NULL_TREE;\n \n-  if (expr != NULL && expr->ts.type == BT_DERIVED\n-      && expr->ts.is_iso_c && expr->ts.derived\n-      && (expr->symtree->n.sym->intmod_sym_id == ISOCBINDING_NULL_PTR\n-\t  || expr->symtree->n.sym->intmod_sym_id == ISOCBINDING_NULL_FUNPTR))\n+  /* Check if we have ISOCBINDING_NULL_PTR or ISOCBINDING_NULL_FUNPTR\n+     (these are the only two iso_c_binding derived types that can be\n+     used as initialization expressions).  If so, we need to modify\n+     the 'expr' to be that for a (void *).  */\n+  if (expr->ts.type == BT_DERIVED && expr->ts.is_iso_c && expr->ts.derived)\n+    {\n+      gfc_symbol *derived = expr->ts.derived;\n+\n       expr = gfc_int_expr (0);\n+\n+      /* The derived symbol has already been converted to a (void *).  Use\n+\t its kind.  */\n+      expr->ts.f90_type = derived->ts.f90_type;\n+      expr->ts.kind = derived->ts.kind;\n+    }\n   \n   if (array)\n     {"}, {"sha": "dc18e62e9f72678e78846f05756c3b53c1a26522", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e708b2571e01c269d8eabfc9c741e00a3f89603", "patch": "@@ -1,3 +1,8 @@\n+2007-09-12  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33395\n+\t* gfortran.dg/c_ptr_tests_12.f03: New test case.\n+\n 2007-09-12  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/33373"}, {"sha": "71e81709374d5dbc0e41d29742acd2d775ec25a9", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_12.f03", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_12.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e708b2571e01c269d8eabfc9c741e00a3f89603/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_12.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_12.f03?ref=3e708b2571e01c269d8eabfc9c741e00a3f89603", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! Verify that initialization of c_ptr components works.  This is based on \n+! code from fgsl: \n+! http://www.lrz-muenchen.de/services/software/mathematik/gsl/fortran/\n+! and tests PR 33395.\n+module fgsl\n+  use, intrinsic :: iso_c_binding\n+  implicit none\n+!\n+!\n+! Kind and length parameters are default integer\n+!\n+  integer, parameter, public :: fgsl_double = c_double\n+\n+!\n+! Types : Array support\n+!\n+  type, public :: fgsl_vector\n+     private\n+     type(c_ptr) :: gsl_vector = c_null_ptr\n+  end type fgsl_vector\n+\n+contains\n+  function fgsl_vector_align(p_x, f_x)\n+    real(fgsl_double), pointer :: p_x(:)\n+    type(fgsl_vector) :: f_x\n+    integer :: fgsl_vector_align\n+    fgsl_vector_align = 4\n+  end function fgsl_vector_align\n+end module fgsl\n+\n+module tmod\n+  use fgsl\n+  implicit none\n+contains\n+  subroutine expb_df() bind(c)\n+    type(fgsl_vector) :: f_x\n+    real(fgsl_double), pointer :: p_x(:)\n+    integer :: status\n+    status = fgsl_vector_align(p_x, f_x)\n+  end subroutine expb_df\n+end module tmod\n+\n+! { dg-final { cleanup-modules \"fgsl tmod\" } } \n+"}]}