{"sha": "2399cad0909d5753f774f670a19efd329d020b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5OWNhZDA5MDlkNTc1M2Y3NzRmNjcwYTE5ZWZkMzI5ZDAyMGIzYg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2013-12-02T19:50:55Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2013-12-02T19:50:55Z"}, "message": "Fix C++0x memory model for unaligned fields in packed...\n\n2013-12-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Fix C++0x memory model for unaligned fields in packed, aligned(4)\n        structures with -fno-strict-volatile-bitfields on STRICT_ALIGNMENT\n        targets like arm-none-eabi.\n        * expr.c (expand_assignment): Handle normal fields like bit regions.\n\ntestsuite:\n2013-12-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * gcc.dg/pr56997-4.c: New testcase.\n\nFrom-SVN: r205597", "tree": {"sha": "569bc9e6949ab42a3b0713707ffc43092cf900ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/569bc9e6949ab42a3b0713707ffc43092cf900ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2399cad0909d5753f774f670a19efd329d020b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2399cad0909d5753f774f670a19efd329d020b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2399cad0909d5753f774f670a19efd329d020b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2399cad0909d5753f774f670a19efd329d020b3b/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72ee07fb7620604030a5713bf8967af64dfbe5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ee07fb7620604030a5713bf8967af64dfbe5c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ee07fb7620604030a5713bf8967af64dfbe5c2"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "21b8aa331568e906e8a32a75faad8cf68afcaf87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2399cad0909d5753f774f670a19efd329d020b3b", "patch": "@@ -1,3 +1,10 @@\n+2013-12-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tFix C++0x memory model for unaligned fields in packed, aligned(4)\n+\tstructures with -fno-strict-volatile-bitfields on STRICT_ALIGNMENT\n+\ttargets like arm-none-eabi.\n+\t* expr.c (expand_assignment): Handle normal fields like bit regions.\n+\n 2013-12-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR target/58115"}, {"sha": "c0539da250c987ce59b8fb2d2af6b33b1adea02b", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2399cad0909d5753f774f670a19efd329d020b3b", "patch": "@@ -4824,6 +4824,17 @@ expand_assignment (tree to, tree from, bool nontemporal)\n       if (TREE_CODE (to) == COMPONENT_REF\n \t  && DECL_BIT_FIELD_TYPE (TREE_OPERAND (to, 1)))\n \tget_bit_range (&bitregion_start, &bitregion_end, to, &bitpos, &offset);\n+      /* The C++ memory model naturally applies to byte-aligned fields.\n+\t However, if we do not have a DECL_BIT_FIELD_TYPE but BITPOS or\n+\t BITSIZE are not byte-aligned, there is no need to limit the range\n+\t we can access.  This can occur with packed structures in Ada.  */\n+      else if (bitsize > 0\n+\t       && bitsize % BITS_PER_UNIT == 0\n+\t       && bitpos % BITS_PER_UNIT == 0)\n+\t{\n+\t  bitregion_start = bitpos;\n+\t  bitregion_end = bitpos + bitsize - 1;\n+\t}\n \n       to_rtx = expand_expr (tem, NULL_RTX, VOIDmode, EXPAND_WRITE);\n "}, {"sha": "f92967a671c14bb9b808e53309d1094cf494c21c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2399cad0909d5753f774f670a19efd329d020b3b", "patch": "@@ -1,3 +1,7 @@\n+2013-12-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gcc.dg/pr56997-4.c: New testcase.\n+\n 2013-12-02  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/ubsan/vla-1.c: Split the tests into individual"}, {"sha": "38f6248d2ed59681a715527948faa6264780744f", "filename": "gcc/testsuite/gcc.dg/pr56997-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56997-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2399cad0909d5753f774f670a19efd329d020b3b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56997-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56997-4.c?ref=2399cad0909d5753f774f670a19efd329d020b3b", "patch": "@@ -0,0 +1,23 @@\n+/* Test volatile access to unaligned field.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-strict-volatile-bitfields -fdump-rtl-final\" } */\n+\n+#define test_type unsigned short\n+\n+typedef struct s{\n+ unsigned char Prefix[1];\n+ volatile test_type Type;\n+}__attribute((__packed__,__aligned__(4))) ss;\n+\n+extern volatile ss v;\n+\n+void\n+foo (test_type u)\n+{\n+  v.Type = u;\n+}\n+\n+/* The C++ memory model forbids data store race conditions outside the\n+   unaligned data member, therefore only QI or HI access is allowed, no SI.  */\n+/* { dg-final { scan-rtl-dump-not \"mem/v(/.)*:SI\" \"final\" } } */\n+/* { dg-final { cleanup-rtl-dump \"final\" } } */"}]}