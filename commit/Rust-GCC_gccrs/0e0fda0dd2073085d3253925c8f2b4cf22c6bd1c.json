{"sha": "0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwZmRhMGRkMjA3MzA4NWQzMjUzOTI1YzhmMmI0Y2YyMmM2YmQxYw==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-03-16T08:33:24Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-03-16T08:33:24Z"}, "message": "c-lex.c (yylex): Remove warning for integer literals being larger than the largest target int.\n\n\t* c-lex.c (yylex) : Remove warning for integer literals being\n\tlarger than the largest target int.  Add warning for integer\n\tliteral being larger than than its choosen type.\n\nFrom-SVN: r25800", "tree": {"sha": "f5ac52146a9858758c4f6fa86da80d1c345b30d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5ac52146a9858758c4f6fa86da80d1c345b30d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c/comments", "author": null, "committer": null, "parents": [{"sha": "3ce1ba83d698f792310b7880703dc8b351f82bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce1ba83d698f792310b7880703dc8b351f82bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce1ba83d698f792310b7880703dc8b351f82bd2"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "f9caaace14e81398e77c16e61f40afe66db3e478", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c", "patch": "@@ -1,3 +1,9 @@\n+Tue Mar 16 11:30:19 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* c-lex.c (yylex) : Remove warning for integer literals being\n+\tlarger than the largest target int.  Add warning for integer\n+\tliteral being larger than than its choosen type.\n+\n Tue Mar 16 10:53:17 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* invoke.texi: Add -mlong32 documentation."}, {"sha": "be366fae83e632f583e58c689a7c831e92371f44", "filename": "gcc/c-lex.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=0e0fda0dd2073085d3253925c8f2b4cf22c6bd1c", "patch": "@@ -1698,20 +1698,10 @@ yylex ()\n \t\tc = GETC();\n \t      }\n \n-\t    /* If the constant won't fit in the targets widest int,\n-\t       or it won't fit in the host's representation for ints, \n-\t       then warn that the constant is out of range. */\n-\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-\t    bytes = TYPE_PRECISION (intTI_type_node) / HOST_BITS_PER_CHAR;\n-#else\n-\t    bytes = TYPE_PRECISION (intDI_type_node) / HOST_BITS_PER_CHAR;\n-#endif\n+\t    /* If it won't fit in the host's representation for integers,\n+\t       then pedwarn. */\n \n \t    warn = overflow;\n-\t    for (i = bytes; i < TOTAL_PARTS; i++)\n-\t      if (parts[i])\n-\t\twarn = 1;\n \t    if (warn)\n \t      pedwarn (\"integer constant out of range\");\n \n@@ -1802,7 +1792,10 @@ yylex ()\n \t    if (pedantic && !flag_traditional && !spec_long_long && !warn\n \t\t&& (TYPE_PRECISION (long_integer_type_node)\n \t\t    < TYPE_PRECISION (type)))\n-\t      pedwarn (\"integer constant out of range\");\n+\t      {\n+\t\twarn = 1;\n+\t\tpedwarn (\"integer constant out of range\");\n+\t      }\n \n \t    if (base == 10 && ! spec_unsigned && TREE_UNSIGNED (type))\n \t      warning (\"decimal constant is so large that it is unsigned\");\n@@ -1830,6 +1823,15 @@ yylex ()\n \t      }\n \t    else\n \t      TREE_TYPE (yylval.ttype) = type;\n+\n+\n+\t    /* If it's still an integer (not a complex), and it doesn't\n+\t       fit in the type we choose for it, then pedwarn. */\n+\n+\t    if (! warn\n+\t\t&& TREE_CODE (TREE_TYPE (yylval.ttype)) == INTEGER_TYPE\n+\t\t&& ! int_fits_type_p (yylval.ttype, TREE_TYPE (yylval.ttype)))\n+\t      pedwarn (\"integer constant out of range\");\n \t  }\n \n \tUNGETC (c);"}]}