{"sha": "4c7428133bb93c325331630f92728172de304493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3NDI4MTMzYmI5M2MzMjUzMzE2MzBmOTI3MjgxNzJkZTMwNDQ5Mw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-04-23T23:54:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-04-23T23:54:59Z"}, "message": "mn10300.c (secondary_reload_class): Handle more cases where we need secondary reloads.\n\n        * mn10300.c (secondary_reload_class): Handle more cases where we\n        need secondary reloads.\n        (impossible_plus_operand): Accept anything that involves addition\n        of the stack pointer.\n        * mn10300.md (reload_insi): Always load the stack pointer into\n        the destination (which is always an address register).\n        * mn10300.h (STORE_FLAG_VALUE): Remove definition.\n        * xm-mn10300.h: Declare malloc, realloc, calloc and free.\n\nFrom-SVN: r13973", "tree": {"sha": "26ee00f1f051090313e8a6e6900d51db8e890ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26ee00f1f051090313e8a6e6900d51db8e890ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7428133bb93c325331630f92728172de304493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7428133bb93c325331630f92728172de304493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7428133bb93c325331630f92728172de304493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7428133bb93c325331630f92728172de304493/comments", "author": null, "committer": null, "parents": [{"sha": "cd1bbde17b0a2c2982b9c40499b90292aada2363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1bbde17b0a2c2982b9c40499b90292aada2363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1bbde17b0a2c2982b9c40499b90292aada2363"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "bbfb68eac94dff484867927d10656bcd6663f433", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=4c7428133bb93c325331630f92728172de304493", "patch": "@@ -675,6 +675,12 @@ secondary_reload_class (class, mode, in)\n \t\t  || XEXP (in, 1) == stack_pointer_rtx))))\n     return ADDRESS_REGS;\n \n+  if (GET_CODE (in) == PLUS\n+      && (XEXP (in, 0) == stack_pointer_rtx\n+\t  || XEXP (in, 1) == stack_pointer_rtx))\n+    return DATA_REGS;\n+ \n+\n   /* Otherwise assume no secondary reloads are needed.  */\n   return NO_REGS;\n }\n@@ -950,16 +956,9 @@ impossible_plus_operand (op, mode)\n   if (GET_CODE (op) != PLUS)\n     return 0;\n \n-  if ((XEXP (op, 0) == stack_pointer_rtx)\n-      && ((REG_P (XEXP (op, 1)) && reg_equiv_mem [REGNO (XEXP (op, 1))])\n-\t  || (GET_CODE (XEXP (op, 1)) == SUBREG\n-\t      && GET_CODE (SUBREG_REG (XEXP (op, 1))) == MEM)))\n+  if (XEXP (op, 0) == stack_pointer_rtx\n+      || XEXP (op, 1) == stack_pointer_rtx)\n     return 1;\n \n-  if ((XEXP (op, 1) == stack_pointer_rtx)\n-      && ((REG_P (XEXP (op, 0)) && reg_equiv_mem [REGNO (XEXP (op, 0))])\n-\t  || (GET_CODE (XEXP (op, 0)) == SUBREG\n-\t      && GET_CODE (SUBREG_REG (XEXP (op, 0))) == MEM)))\n-    return 1;\n   return 0;\n }"}, {"sha": "b24f6b42f6cfe0be628afe7772afef289c544339", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=4c7428133bb93c325331630f92728172de304493", "patch": "@@ -971,8 +971,6 @@ do { char dstr[30];\t\t\t\t\t\\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-#define STORE_FLAG_VALUE 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "9f1d9179f8d79f089f6496baa722a04fa8faebef", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=4c7428133bb93c325331630f92728172de304493", "patch": "@@ -162,12 +162,20 @@\n (define_expand \"reload_insi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(match_operand:SI 1 \"impossible_plus_operand\" \"\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&a\"))]\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n   \"\"\n   \"\n {\n-  emit_move_insn (operands[0], XEXP (operands[1], 0));\n-  emit_move_insn (operands[2], XEXP (operands[1], 1));\n+  if (XEXP (operands[1], 0) == stack_pointer_rtx)\n+    {\n+      emit_move_insn (operands[0], XEXP (operands[1], 0));\n+      emit_move_insn (operands[2], XEXP (operands[1], 1));\n+    }\n+  else\n+    {\n+      emit_move_insn (operands[0], XEXP (operands[1], 1));\n+      emit_move_insn (operands[2], XEXP (operands[1], 0));\n+    }\n   emit_insn (gen_addsi3 (operands[0], operands[0], operands[2]));\n   DONE;\n }\")\n@@ -1024,12 +1032,6 @@\n   btst %1,%0\"\n   [(set_attr \"cc\" \"set_zn_c0\")])\n \n-;; -----------------------------------------------------------------\n-;; -----------------------------------------------------------------\n-;; Scc INSTRUCTIONS\n-;; -----------------------------------------------------------------\n-;; It's probably worth the time to define setcc type insns too\n-\n \f\n ;; ----------------------------------------------------------------------\n ;; JUMP INSTRUCTIONS"}, {"sha": "63d61c276c221982cd3e9efbd3d59492a1be3318", "filename": "gcc/config/mn10300/xm-mn10300.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7428133bb93c325331630f92728172de304493/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h?ref=4c7428133bb93c325331630f92728172de304493", "patch": "@@ -38,3 +38,10 @@ Boston, MA 02111-1307, USA.  */\n    tm.h is a symbolic link to the actual target specific file.   */\n \n #include \"tm.h\"\n+\n+#ifndef __STDC__\n+extern char *malloc (), *realloc (), *calloc ();\n+#else\n+extern void *malloc (), *realloc (), *calloc ();\n+#endif\n+extern void free ();"}]}