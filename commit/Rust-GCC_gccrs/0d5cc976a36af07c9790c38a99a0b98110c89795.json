{"sha": "0d5cc976a36af07c9790c38a99a0b98110c89795", "node_id": "C_kwDOANBUbNoAKDBkNWNjOTc2YTM2YWYwN2M5NzkwYzM4YTk5YTBiOTgxMTBjODk3OTU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-01T12:00:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-01T12:00:49Z"}, "message": "unswitch: Fold case label lo/hi values to index type [PR105770]\n\nThe following testcase ICEs because we use different types in comparison,\nidx has int type, while CASE_LOW has char type.\n\nWhile I believe all CASE_{LOW,HIGH} in the same switch have to use the same\nor compatible type, the index expression can have a promoted type as happens\nin this testcase.  Other spots that handle switches do such foldings too.\n\n2022-06-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105770\n\t* tree-ssa-loop-unswitch.cc (find_unswitching_predicates_for_bb): Cast\n\tCASE_LOW and CASE_HIGH to TREE_TYPE (idx) before comparisons with idx.\n\n\t* gcc.dg/pr105770.c: New test.", "tree": {"sha": "7564d5ff9124d49fed52f08a1d2dc70c77070d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7564d5ff9124d49fed52f08a1d2dc70c77070d62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5cc976a36af07c9790c38a99a0b98110c89795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5cc976a36af07c9790c38a99a0b98110c89795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5cc976a36af07c9790c38a99a0b98110c89795", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5cc976a36af07c9790c38a99a0b98110c89795/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45c8523dd3e50daa5f0bba040099fdfd2ad1aaaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c8523dd3e50daa5f0bba040099fdfd2ad1aaaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c8523dd3e50daa5f0bba040099fdfd2ad1aaaa"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "c1e0140292045193f8324bf0e590327d1e57bee9", "filename": "gcc/testsuite/gcc.dg/pr105770.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5cc976a36af07c9790c38a99a0b98110c89795/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105770.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5cc976a36af07c9790c38a99a0b98110c89795/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105770.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105770.c?ref=0d5cc976a36af07c9790c38a99a0b98110c89795", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/105770 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -funswitch-loops -fno-tree-forwprop\" } */\n+\n+char a;\n+\n+void\n+foo (void)\n+{\n+  while (a)\n+    switch (a)\n+      {\n+      case ' ':\n+      case '\\t':\n+\treturn;\n+      }\n+\n+  __builtin_unreachable ();\n+}"}, {"sha": "2b6013e9d6963dc9f738797ee14d5c7bc74103dd", "filename": "gcc/tree-ssa-loop-unswitch.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5cc976a36af07c9790c38a99a0b98110c89795/gcc%2Ftree-ssa-loop-unswitch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5cc976a36af07c9790c38a99a0b98110c89795/gcc%2Ftree-ssa-loop-unswitch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.cc?ref=0d5cc976a36af07c9790c38a99a0b98110c89795", "patch": "@@ -494,6 +494,7 @@ find_unswitching_predicates_for_bb (basic_block bb, class loop *loop,\n     {\n       unsigned nlabels = gimple_switch_num_labels (stmt);\n       tree idx = gimple_switch_index (stmt);\n+      tree idx_type = TREE_TYPE (idx);\n       if (!gimple_range_ssa_p (idx) || nlabels < 1)\n \treturn;\n       /* Index must be invariant.  */\n@@ -525,16 +526,18 @@ find_unswitching_predicates_for_bb (basic_block bb, class loop *loop,\n \t  if (CASE_HIGH (lab) != NULL_TREE)\n \t    {\n \t      tree cmp1 = fold_build2 (GE_EXPR, boolean_type_node, idx,\n-\t\t\t\t       CASE_LOW (lab));\n+\t\t\t\t       fold_convert (idx_type,\n+\t\t\t\t\t\t     CASE_LOW (lab)));\n \t      tree cmp2 = fold_build2 (LE_EXPR, boolean_type_node, idx,\n-\t\t\t\t       CASE_HIGH (lab));\n+\t\t\t\t       fold_convert (idx_type,\n+\t\t\t\t\t\t     CASE_HIGH (lab)));\n \t      cmp = fold_build2 (BIT_AND_EXPR, boolean_type_node, cmp1, cmp2);\n \t      lab_range.set (CASE_LOW (lab), CASE_HIGH (lab));\n \t    }\n \t  else\n \t    {\n \t      cmp = fold_build2 (EQ_EXPR, boolean_type_node, idx,\n-\t\t\t\t CASE_LOW (lab));\n+\t\t\t\t fold_convert (idx_type, CASE_LOW (lab)));\n \t      lab_range.set (CASE_LOW (lab));\n \t    }\n "}]}