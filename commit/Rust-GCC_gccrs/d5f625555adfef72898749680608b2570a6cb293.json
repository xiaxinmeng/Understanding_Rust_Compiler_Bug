{"sha": "d5f625555adfef72898749680608b2570a6cb293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmNjI1NTU1YWRmZWY3Mjg5ODc0OTY4MDYwOGIyNTcwYTZjYjI5Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-24T14:34:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-24T14:34:19Z"}, "message": "re PR java/19295 (Incorrect bytecode produced for bitwise AND)\n\n\n\tPR java/19295\n\t* jcf-write.c (generate_bytecode_insns): Conversions between\n\tinteger types of the same precision shouldn't generate widening\n\tor narrowing conversion bytecodes.\n\n\t* testsuite/libjava.compile/PR19295.java: New test case.\n\nFrom-SVN: r94162", "tree": {"sha": "e0a0cb7ef097bd8ede15923f72e3c49733beef0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0a0cb7ef097bd8ede15923f72e3c49733beef0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5f625555adfef72898749680608b2570a6cb293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f625555adfef72898749680608b2570a6cb293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f625555adfef72898749680608b2570a6cb293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f625555adfef72898749680608b2570a6cb293/comments", "author": null, "committer": null, "parents": [{"sha": "e930780c1eb7656f60a9e3d42ad5f91432fad363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e930780c1eb7656f60a9e3d42ad5f91432fad363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e930780c1eb7656f60a9e3d42ad5f91432fad363"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "cf7810c4278cd56cbc3b55d36d6ded5ea6434465", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f625555adfef72898749680608b2570a6cb293/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f625555adfef72898749680608b2570a6cb293/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d5f625555adfef72898749680608b2570a6cb293", "patch": "@@ -1,3 +1,10 @@\n+2005-01-24  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR java/19295\n+\t* jcf-write.c (generate_bytecode_insns): Conversions between\n+\tinteger types of the same precision shouldn't generate widening\n+\tor narrowing conversion bytecodes.\n+\n 2005-01-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* java-except.h, java-tree.h: Remove unused prototypes."}, {"sha": "da8c6c99870eff0af8bb7ad00a10a192ffd9c7be", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f625555adfef72898749680608b2570a6cb293/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f625555adfef72898749680608b2570a6cb293/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=d5f625555adfef72898749680608b2570a6cb293", "patch": "@@ -2260,40 +2260,48 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n \t  }\n \telse /* Convert numeric types. */\n \t  {\n-\t    int wide_src = TYPE_PRECISION (src_type) > 32;\n-\t    int wide_dst = TYPE_PRECISION (dst_type) > 32;\n-\t    NOTE_POP (1 + wide_src);\n-\t    RESERVE (1);\n+\t    int src_prec = TYPE_PRECISION (src_type);\n+\t    int dst_prec = TYPE_PRECISION (dst_type);\n+\t    int wide_src = src_prec > 32;\n+\t    int wide_dst = dst_prec > 32;\n \t    if (TREE_CODE (dst_type) == REAL_TYPE)\n \t      {\n+\t\tNOTE_POP (1 + wide_src);\n+\t\tRESERVE (1);\n \t\tif (TREE_CODE (src_type) == REAL_TYPE)\n \t\t  OP1 (wide_dst ? OPCODE_f2d : OPCODE_d2f);\n-\t\telse if (TYPE_PRECISION (src_type) == 64)\n+\t\telse if (src_prec == 64)\n \t\t  OP1 (OPCODE_l2f + wide_dst);\n \t\telse\n \t\t  OP1 (OPCODE_i2f + wide_dst);\n+\t\tNOTE_PUSH (1 + wide_dst);\n \t      }\n-\t    else /* Convert to integral type. */\n+\t    /* Convert to integral type (but ignore non-widening\n+\t       and non-narrowing integer type conversions).  */\n+\t    else if (TREE_CODE (src_type) == REAL_TYPE\n+\t\t     || src_prec != dst_prec)\n \t      {\n+\t\tNOTE_POP (1 + wide_src);\n+\t\tRESERVE (1);\n \t\tif (TREE_CODE (src_type) == REAL_TYPE)\n \t\t  OP1 (OPCODE_f2i + wide_dst + 3 * wide_src);\n \t\telse if (wide_dst)\n \t\t  OP1 (OPCODE_i2l);\n \t\telse if (wide_src)\n \t\t  OP1 (OPCODE_l2i);\n-\t\tif (TYPE_PRECISION (dst_type) < 32)\n+\t\tif (dst_prec < 32)\n \t\t  {\n \t\t    RESERVE (1);\n \t\t    /* Already converted to int, if needed. */\n-\t\t    if (TYPE_PRECISION (dst_type) <= 8)\n+\t\t    if (dst_prec <= 8)\n \t\t      OP1 (OPCODE_i2b);\n \t\t    else if (TYPE_UNSIGNED (dst_type))\n \t\t      OP1 (OPCODE_i2c);\n \t\t    else\n \t\t      OP1 (OPCODE_i2s);\n \t\t  }\n+\t\tNOTE_PUSH (1 + wide_dst);\n \t      }\n-\t    NOTE_PUSH (1 + wide_dst);\n \t  }\n       }\n       break;"}, {"sha": "86447b92f4c231f5bf5ef33192602dfa5b4c311d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f625555adfef72898749680608b2570a6cb293/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f625555adfef72898749680608b2570a6cb293/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d5f625555adfef72898749680608b2570a6cb293", "patch": "@@ -1,3 +1,8 @@\n+2005-01-24  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR java/19295\n+\t* testsuite/libjava.compile/PR19295.java: New test case.\n+\n 2005-01-19  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/VMCompiler.java (compileClass): Ignore UnknownError."}, {"sha": "336f7e9863b5543964e564c9ba7d5419e768d1ab", "filename": "libjava/testsuite/libjava.compile/PR19295.java", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f625555adfef72898749680608b2570a6cb293/libjava%2Ftestsuite%2Flibjava.compile%2FPR19295.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f625555adfef72898749680608b2570a6cb293/libjava%2Ftestsuite%2Flibjava.compile%2FPR19295.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2FPR19295.java?ref=d5f625555adfef72898749680608b2570a6cb293", "patch": "@@ -0,0 +1,16 @@\n+public class PR19295 implements myInterface {\n+        public long tagBits = 0;\n+\n+        public final boolean isArrayType() {\n+            return (tagBits & IsArrayType) != 0;\n+        }\n+}\n+\n+abstract class blah {\n+\tpublic final static int Bit1 = 0x2;\n+}\n+\n+interface myInterface {\n+        long IsArrayType = blah.Bit1;\n+}\n+"}]}