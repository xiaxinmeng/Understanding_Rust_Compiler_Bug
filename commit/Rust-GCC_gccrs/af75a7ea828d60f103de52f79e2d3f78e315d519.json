{"sha": "af75a7ea828d60f103de52f79e2d3f78e315d519", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3NWE3ZWE4MjhkNjBmMTAzZGU1MmY3OWUyZDNmNzhlMzE1ZDUxOQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-08-20T16:48:00Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-08-20T16:48:00Z"}, "message": "re PR tree-optimization/17111 (tree check ICE in value_insert_into_set_bitmap on inlining a memcmp-like function)\n\n2004-08-20  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/17111\n\t* tree-ssa-pre.c (create_value_expr_from): Don't change the types\n\tof non-value_handles.\n\t(bitmap_set_contains): All constants are in every set.\n\nFrom-SVN: r86331", "tree": {"sha": "7f9e0f8eb04d3281ea4f4c056521694d7907ec2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f9e0f8eb04d3281ea4f4c056521694d7907ec2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af75a7ea828d60f103de52f79e2d3f78e315d519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af75a7ea828d60f103de52f79e2d3f78e315d519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af75a7ea828d60f103de52f79e2d3f78e315d519", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af75a7ea828d60f103de52f79e2d3f78e315d519/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b84ead6fecd0ac9cb4f3d7213e00b27332c7d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b84ead6fecd0ac9cb4f3d7213e00b27332c7d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b84ead6fecd0ac9cb4f3d7213e00b27332c7d5d"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "1ec68113158b7c2885e3cb585f2ce92ea3d01e74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af75a7ea828d60f103de52f79e2d3f78e315d519/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af75a7ea828d60f103de52f79e2d3f78e315d519/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af75a7ea828d60f103de52f79e2d3f78e315d519", "patch": "@@ -1,3 +1,10 @@\n+2004-08-20  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\tFix PR tree-optimization/17111\n+\t* tree-ssa-pre.c (create_value_expr_from): Don't change the types\n+\tof non-value_handles.\n+\t(bitmap_set_contains): All constants are in every set.\n+\n 2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* fold-const.c (round_up, round_down): Use build_int_cst."}, {"sha": "1267a546b0b7499d20e24ee572f6243cb8c315ed", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af75a7ea828d60f103de52f79e2d3f78e315d519/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af75a7ea828d60f103de52f79e2d3f78e315d519/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=af75a7ea828d60f103de52f79e2d3f78e315d519", "patch": "@@ -629,6 +629,10 @@ set_contains_value (value_set_t set, tree val)\n static bool\n bitmap_set_contains (bitmap_set_t set, tree expr)\n {\n+  /* All constants are in every set.  */\n+  if (is_gimple_min_invariant (get_value_handle (expr)))\n+    return true;\n+\n   /* XXX: Bitmapped sets only contain SSA_NAME's for now.  */\n   if (TREE_CODE (expr) != SSA_NAME)\n     return false;\n@@ -734,6 +738,7 @@ static void\n bitmap_value_insert_into_set (bitmap_set_t set, tree expr)\n {\n   tree val = get_value_handle (expr);\n+\n   if (is_gimple_min_invariant (val))\n     return;\n   \n@@ -1701,7 +1706,8 @@ create_value_expr_from (tree expr, basic_block block, vuse_optype vuses)\n \t  tree val = vn_lookup_or_add (op, vuses);\n \t  if (!is_undefined_value (op))\n \t    value_insert_into_set (EXP_GEN (block), op);\n-\t  TREE_TYPE (val) = TREE_TYPE (TREE_OPERAND (vexpr, i));\n+\t  if (TREE_CODE (val) == VALUE_HANDLE)\n+\t    TREE_TYPE (val) = TREE_TYPE (TREE_OPERAND (vexpr, i));\n \t  TREE_OPERAND (vexpr, i) = val;\n \t}\n     }"}]}