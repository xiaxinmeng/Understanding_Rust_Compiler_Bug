{"sha": "72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5MzBkOWYyOWM5ODJkZWE4ZTVhMjE5YWQxYmFhZjNmNmQ5Yzc1MA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-05-29T18:29:04Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-05-29T18:29:04Z"}, "message": "PR middle-end/85888 - New test case c-c++-common/attr-nonstring-6.c from r260541 fails with excess errors\n\n2018-05-29  Martin Sebor  <msebor@redhat.com>\n\t    Richard Biener  <rguenther@suse.de>\n\n\tPR testsuite/85888\n\t* calls.c (get_size_range): Call determine_value_range instead\n\tof get_value_range..\n\t* tree-vrp.h (determine_value_range): Declared new function.\n\t* tree-vrp.c (determine_value_range_1, determine_value_range): New.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r260902", "tree": {"sha": "b801e96e27ee0c35deabfc849676b29dbfe305eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b801e96e27ee0c35deabfc849676b29dbfe305eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "009bb506b1a01ceff3ddf0f17a78c381891dfa64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009bb506b1a01ceff3ddf0f17a78c381891dfa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009bb506b1a01ceff3ddf0f17a78c381891dfa64"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "31144af9672a869f5d065da47d5c25f79eab0760", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "patch": "@@ -1,3 +1,12 @@\n+2018-05-29  Martin Sebor  <msebor@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/85888\n+\t* calls.c (get_size_range): Call determine_value_range instead\n+\tof get_value_range..\n+\t* tree-vrp.h (determine_value_range): Declared new function.\n+\t* tree-vrp.c (determine_value_range_1, determine_value_range): New.\n+\n 2018-05-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_preserves_scalar_order_p): Make"}, {"sha": "1f2cde696ece4d8fc687d6d6df92acfbe70ee856", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "patch": "@@ -1319,8 +1319,8 @@ get_size_range (tree exp, tree range[2], bool allow_zero /* = false */)\n   wide_int min, max;\n   enum value_range_type range_type;\n \n-  if (TREE_CODE (exp) == SSA_NAME && integral)\n-    range_type = get_range_info (exp, &min, &max);\n+  if (integral)\n+    range_type = determine_value_range (exp, &min, &max);\n   else\n     range_type = VR_VARYING;\n "}, {"sha": "fad25ed2e338bc57d8a45221d7327dbe6bff5b82", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "patch": "@@ -7130,3 +7130,62 @@ make_pass_vrp (gcc::context *ctxt)\n {\n   return new pass_vrp (ctxt);\n }\n+\n+\n+/* Worker for determine_value_range.  */\n+\n+static void\n+determine_value_range_1 (value_range *vr, tree expr)\n+{\n+  if (BINARY_CLASS_P (expr))\n+    {\n+      value_range vr0 = VR_INITIALIZER, vr1 = VR_INITIALIZER;\n+      determine_value_range_1 (&vr0, TREE_OPERAND (expr, 0));\n+      determine_value_range_1 (&vr1, TREE_OPERAND (expr, 1));\n+      extract_range_from_binary_expr_1 (vr, TREE_CODE (expr), TREE_TYPE (expr),\n+\t\t\t\t\t&vr0, &vr1);\n+    }\n+  else if (UNARY_CLASS_P (expr))\n+    {\n+      value_range vr0 = VR_INITIALIZER;\n+      determine_value_range_1 (&vr0, TREE_OPERAND (expr, 0));\n+      extract_range_from_unary_expr (vr, TREE_CODE (expr), TREE_TYPE (expr),\n+\t\t\t\t     &vr0, TREE_TYPE (TREE_OPERAND (expr, 0)));\n+    }\n+  else if (TREE_CODE (expr) == INTEGER_CST)\n+    set_value_range_to_value (vr, expr, NULL);\n+  else\n+    {\n+      value_range_type kind;\n+      wide_int min, max;\n+      /* For SSA names try to extract range info computed by VRP.  Otherwise\n+\t fall back to varying.  */\n+      if (TREE_CODE (expr) == SSA_NAME\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (expr))\n+\t  && (kind = get_range_info (expr, &min, &max)) != VR_VARYING)\n+\tset_value_range (vr, kind, wide_int_to_tree (TREE_TYPE (expr), min),\n+\t\t\t wide_int_to_tree (TREE_TYPE (expr), max), NULL);\n+      else\n+\tset_value_range_to_varying (vr);\n+    }\n+}\n+\n+/* Compute a value-range for EXPR and set it in *MIN and *MAX.  Return\n+   the determined range type.  */\n+\n+value_range_type\n+determine_value_range (tree expr, wide_int *min, wide_int *max)\n+{\n+  value_range vr = VR_INITIALIZER;\n+  determine_value_range_1 (&vr, expr);\n+  if ((vr.type == VR_RANGE\n+       || vr.type == VR_ANTI_RANGE)\n+      && !symbolic_range_p (&vr))\n+    {\n+      *min = wi::to_wide (vr.min);\n+      *max = wi::to_wide (vr.max);\n+      return vr.type;\n+    }\n+\n+  return VR_VARYING;\n+}"}, {"sha": "608ca5658b52c6061b944f19d7a5546883117cc3", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72930d9f29c982dea8e5a219ad1baaf3f6d9c750/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=72930d9f29c982dea8e5a219ad1baaf3f6d9c750", "patch": "@@ -119,7 +119,7 @@ extern bool range_int_cst_singleton_p (value_range *);\n extern int value_inside_range (tree, tree, tree);\n extern tree get_single_symbol (tree, bool *, tree *);\n extern void maybe_set_nonzero_bits (edge, tree);\n-\n+extern value_range_type determine_value_range (tree, wide_int *, wide_int *);\n \n struct switch_update {\n   gswitch *stmt;"}]}