{"sha": "f1308e4b82467d9293ed989ff3e5a191a76fbef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEzMDhlNGI4MjQ2N2Q5MjkzZWQ5ODlmZjNlNWExOTFhNzZmYmVmNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-30T15:41:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-30T15:41:45Z"}, "message": "genmatch.c: Remove <map>, <utility> and <string> includes.\n\n2014-10-30  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c: Remove <map>, <utility> and <string> includes.\n\tInclude ggc.h and hash-map.h.\n\t(ggc_internal_cleared_alloc): Provide stub definition.\n\t(ggc_free): Likewise.\n\t(struct capture_id_map_hasher): New traits for hash_map.\n\t(cid_map_t): New typedef.\n\t(everywhere else): Replace std::map use with cid_map_t.\n\t* hash-map.h (hash_map::elements): New member function.\n\t* Makefile.in (build/genmatch.o): Add $(HASH_TABLE_H),\n\thash-map.h and $(GGC_H) as dependency.\n\nFrom-SVN: r216940", "tree": {"sha": "c5e0462a35b1e8a51050239cd3e22abc7b3b38e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e0462a35b1e8a51050239cd3e22abc7b3b38e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1308e4b82467d9293ed989ff3e5a191a76fbef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1308e4b82467d9293ed989ff3e5a191a76fbef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1308e4b82467d9293ed989ff3e5a191a76fbef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1308e4b82467d9293ed989ff3e5a191a76fbef4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d822570f733f2660b8bd5c78cf5077e654c4387e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d822570f733f2660b8bd5c78cf5077e654c4387e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d822570f733f2660b8bd5c78cf5077e654c4387e"}], "stats": {"total": 84, "additions": 67, "deletions": 17}, "files": [{"sha": "bb70ce47e9ad25b2a9b877eb18a2a8f03f4a21f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1308e4b82467d9293ed989ff3e5a191a76fbef4", "patch": "@@ -1,3 +1,16 @@\n+2014-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c: Remove <map>, <utility> and <string> includes.\n+\tInclude ggc.h and hash-map.h.\n+\t(ggc_internal_cleared_alloc): Provide stub definition.\n+\t(ggc_free): Likewise.\n+\t(struct capture_id_map_hasher): New traits for hash_map.\n+\t(cid_map_t): New typedef.\n+\t(everywhere else): Replace std::map use with cid_map_t.\n+\t* hash-map.h (hash_map::elements): New member function.\n+\t* Makefile.in (build/genmatch.o): Add $(HASH_TABLE_H),\n+\thash-map.h and $(GGC_H) as dependency.\n+\n 2014-10-30  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (capture_info::walk_c_expr): Ignore capture"}, {"sha": "9c67fe21b7f241da580c4ff50142b21d42447433", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f1308e4b82467d9293ed989ff3e5a191a76fbef4", "patch": "@@ -2495,7 +2495,7 @@ build/genhooks.o : genhooks.c $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n build/genmddump.o : genmddump.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n build/genmatch.o : genmatch.c $(BCONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h errors.h\n+  coretypes.h errors.h $(HASH_TABLE_H) hash-map.h $(GGC_H)\n \n # Compile the programs that generate insn-* from the machine description.\n # They are compiled with $(COMPILER_FOR_BUILD), and associated libraries,"}, {"sha": "d238a50cbd898e24df3fb1d44560d76bfe38ef1e", "filename": "gcc/genmatch.c", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=f1308e4b82467d9293ed989ff3e5a191a76fbef4", "patch": "@@ -23,19 +23,30 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"bconfig.h\"\n #include <new>\n-#include <map>\n-#include <utility>\n-#include <string>\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"ggc.h\"\n #include <cpplib.h>\n #include \"errors.h\"\n #include \"hashtab.h\"\n #include \"hash-table.h\"\n+#include \"hash-map.h\"\n #include \"vec.h\"\n #include \"is-a.h\"\n \n \n+/* Stubs for GGC referenced through instantiations triggered by hash-map.  */\n+void *ggc_internal_cleared_alloc (size_t, void (*)(void *),\n+\t\t\t\t  size_t, size_t\n+\t\t\t\t  CXX_MEM_STAT_INFO)\n+{\n+  return NULL;\n+}\n+void ggc_free (void *)\n+{\n+}\n+\n+\n /* libccp helpers.  */\n \n static struct line_maps *line_table;\n@@ -350,6 +361,28 @@ get_operator (const char *id)\n }\n \n \n+/* Helper for the capture-id map.  */\n+\n+struct capture_id_map_hasher : default_hashmap_traits\n+{\n+  static inline hashval_t hash (const char *);\n+  static inline bool equal_keys (const char *, const char *);\n+};\n+\n+inline hashval_t\n+capture_id_map_hasher::hash (const char *id)\n+{\n+  return htab_hash_string (id);\n+}\n+\n+inline bool\n+capture_id_map_hasher::equal_keys (const char *id1, const char *id2)\n+{\n+  return strcmp (id1, id2) == 0;\n+}\n+\n+typedef hash_map<const char *, unsigned, capture_id_map_hasher> cid_map_t;\n+\n \n /* The AST produced by parsing of the pattern definitions.  */\n \n@@ -410,13 +443,13 @@ struct c_expr : public operand\n   };\n \n   c_expr (cpp_reader *r_, vec<cpp_token> code_, unsigned nr_stmts_,\n-\t  vec<id_tab> ids_, std::map<std::string, unsigned> *capture_ids_)\n+\t  vec<id_tab> ids_, cid_map_t *capture_ids_)\n     : operand (OP_C_EXPR), r (r_), code (code_), capture_ids (capture_ids_),\n       nr_stmts (nr_stmts_), ids (ids_) {}\n   /* cpplib tokens and state to transform this back to source.  */\n   cpp_reader *r;\n   vec<cpp_token> code;\n-  std::map<std::string, unsigned> *capture_ids;\n+  cid_map_t *capture_ids;\n   /* The number of statements parsed (well, the number of ';'s).  */\n   unsigned nr_stmts;\n   /* The identifier replacement vector.  */\n@@ -492,11 +525,11 @@ struct simplify\n   simplify (operand *match_, source_location match_location_,\n \t    struct operand *result_, source_location result_location_,\n \t    vec<if_or_with> ifexpr_vec_, vec<vec<user_id *> > for_vec_,\n-\t    std::map<std::string, unsigned> *capture_ids_)\n+\t    cid_map_t *capture_ids_)\n       : match (match_), match_location (match_location_),\n       result (result_), result_location (result_location_),\n       ifexpr_vec (ifexpr_vec_), for_vec (for_vec_),\n-      capture_ids (capture_ids_), capture_max (capture_ids_->size () - 1) {}\n+      capture_ids (capture_ids_), capture_max (capture_ids_->elements () - 1) {}\n \n   /* The expression that is matched against the GENERIC or GIMPLE IL.  */\n   operand *match;\n@@ -513,7 +546,7 @@ struct simplify\n      in the lowering phase.  */\n   vec<vec<user_id *> > for_vec;\n   /* A map of capture identifiers to indexes.  */\n-  std::map<std::string, unsigned> *capture_ids;\n+  cid_map_t *capture_ids;\n   int capture_max;\n };\n \n@@ -1419,7 +1452,7 @@ c_expr::gen_transform (FILE *f, const char *dest,\n \t\tid = (const char *)n->val.str.text;\n \t      else\n \t\tid = (const char *)CPP_HASHNODE (n->val.node.node)->ident.str;\n-\t      fprintf (f, \"captures[%u]\", (*capture_ids)[id]);\n+\t      fprintf (f, \"captures[%u]\", *capture_ids->get(id));\n \t      ++i;\n \t      continue;\n \t    }\n@@ -2029,7 +2062,7 @@ capture_info::walk_c_expr (c_expr *e)\n \t    id = (const char *)n->val.str.text;\n \t  else\n \t    id = (const char *)CPP_HASHNODE (n->val.node.node)->ident.str;\n-\t  info[(*e->capture_ids)[id]].force_no_side_effects_p = true;\n+\t  info[*e->capture_ids->get(id)].force_no_side_effects_p = true;\n \t}\n     }\n }\n@@ -2439,7 +2472,7 @@ class parser\n   vec<if_or_with> active_ifs;\n   vec<vec<user_id *> > active_fors;\n \n-  std::map<std::string, unsigned> *capture_ids;\n+  cid_map_t *capture_ids;\n \n public:\n   vec<simplify *> simplifiers;\n@@ -2615,10 +2648,12 @@ parser::parse_capture (operand *op)\n     id = get_ident ();\n   else\n     fatal_at (token, \"expected number or identifier\");\n-  unsigned next_id = capture_ids->size ();\n-  std::pair<std::map<std::string, unsigned>::iterator, bool> res\n-    = capture_ids->insert (std::pair<std::string, unsigned>(id, next_id));\n-  return new capture ((*res.first).second, op);\n+  unsigned next_id = capture_ids->elements ();\n+  bool existed;\n+  unsigned &num = capture_ids->get_or_insert (id, &existed);\n+  if (!existed)\n+    num = next_id;\n+  return new capture (num, op);\n }\n \n /* Parse an expression\n@@ -2799,7 +2834,7 @@ parser::parse_simplify (source_location match_location,\n \t\t\texpr *result)\n {\n   /* Reset the capture map.  */\n-  capture_ids = new std::map<std::string, unsigned>;\n+  capture_ids = new cid_map_t;\n \n   const cpp_token *loc = peek ();\n   struct operand *match = parse_op ();"}, {"sha": "a5816dca3ced080b362253188989dfeef9382294", "filename": "gcc/hash-map.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1308e4b82467d9293ed989ff3e5a191a76fbef4/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=f1308e4b82467d9293ed989ff3e5a191a76fbef4", "patch": "@@ -264,6 +264,8 @@ class GTY((user)) hash_map\n \t  break;\n     }\n \n+  size_t elements () const { return m_table.elements (); }\n+\n private:\n \n   template<typename T, typename U, typename V> friend void gt_ggc_mx (hash_map<T, U, V> *);"}]}