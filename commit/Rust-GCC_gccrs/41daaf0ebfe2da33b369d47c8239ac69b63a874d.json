{"sha": "41daaf0ebfe2da33b369d47c8239ac69b63a874d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkYWFmMGViZmUyZGEzM2IzNjlkNDdjODIzOWFjNjliNjNhODc0ZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-03-08T22:38:00Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-03-08T22:38:00Z"}, "message": "rs6000.c (rs6000_va_arg): Fix alignment for vectors.\n\n2002-03-08  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000.c (rs6000_va_arg): Fix alignment for\n        vectors.\n\nFrom-SVN: r50463", "tree": {"sha": "30b464cb200db0c74a98ce013c3425952fdac8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30b464cb200db0c74a98ce013c3425952fdac8df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41daaf0ebfe2da33b369d47c8239ac69b63a874d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41daaf0ebfe2da33b369d47c8239ac69b63a874d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41daaf0ebfe2da33b369d47c8239ac69b63a874d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41daaf0ebfe2da33b369d47c8239ac69b63a874d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e23483d273c930173a1bff9eb0734a93c293ce92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23483d273c930173a1bff9eb0734a93c293ce92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23483d273c930173a1bff9eb0734a93c293ce92"}], "stats": {"total": 93, "additions": 59, "deletions": 34}, "files": [{"sha": "024914af0fcfbb8e9797922f4de7e363fe515f92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41daaf0ebfe2da33b369d47c8239ac69b63a874d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41daaf0ebfe2da33b369d47c8239ac69b63a874d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41daaf0ebfe2da33b369d47c8239ac69b63a874d", "patch": "@@ -1,3 +1,8 @@\n+2002-03-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/rs6000.c (rs6000_va_arg): Fix alignment for\n+        vectors.\n+\n 2002-03-08  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/sysv4.h (BIGGEST_ALIGNMENT): Change for altivec."}, {"sha": "0a869212e00436b0f48b66b70649d9c20f218f00", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 54, "deletions": 34, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41daaf0ebfe2da33b369d47c8239ac69b63a874d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41daaf0ebfe2da33b369d47c8239ac69b63a874d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=41daaf0ebfe2da33b369d47c8239ac69b63a874d", "patch": "@@ -3192,50 +3192,62 @@ rs6000_va_arg (valist, type)\n   lab_over = gen_label_rtx ();\n   addr_rtx = gen_reg_rtx (Pmode);\n \n-  emit_cmp_and_jump_insns (expand_expr (reg, NULL_RTX, QImode, EXPAND_NORMAL),\n-\t\t\t   GEN_INT (8 - n_reg + 1), GE, const1_rtx, QImode, 1,\n-\t\t\t   lab_false);\n-\n-  /* Long long is aligned in the registers.  */\n-  if (n_reg > 1)\n+  /*  Vectors never go in registers.  */\n+  if (TREE_CODE (type) != VECTOR_TYPE)\n     {\n-      u = build (BIT_AND_EXPR, TREE_TYPE (reg), reg,\n-\t\t build_int_2 (n_reg - 1, 0));\n-      u = build (PLUS_EXPR, TREE_TYPE (reg), reg, u);\n-      u = build (MODIFY_EXPR, TREE_TYPE (reg), reg, u);\n-      TREE_SIDE_EFFECTS (u) = 1;\n-      expand_expr (u, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-    }\n+      TREE_THIS_VOLATILE (reg) = 1;\n+      emit_cmp_and_jump_insns\n+\t(expand_expr (reg, NULL_RTX, QImode, EXPAND_NORMAL),\n+\t GEN_INT (8 - n_reg + 1), GE, const1_rtx, QImode, 1,\n+\t lab_false);\n \n-  if (sav_ofs)\n-    t = build (PLUS_EXPR, ptr_type_node, sav, build_int_2 (sav_ofs, 0));\n-  else\n-    t = sav;\n+      /* Long long is aligned in the registers.  */\n+      if (n_reg > 1)\n+\t{\n+\t  u = build (BIT_AND_EXPR, TREE_TYPE (reg), reg,\n+\t\t     build_int_2 (n_reg - 1, 0));\n+\t  u = build (PLUS_EXPR, TREE_TYPE (reg), reg, u);\n+\t  u = build (MODIFY_EXPR, TREE_TYPE (reg), reg, u);\n+\t  TREE_SIDE_EFFECTS (u) = 1;\n+\t  expand_expr (u, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t}\n \n-  u = build (POSTINCREMENT_EXPR, TREE_TYPE (reg), reg, build_int_2 (n_reg, 0));\n-  TREE_SIDE_EFFECTS (u) = 1;\n+      if (sav_ofs)\n+\tt = build (PLUS_EXPR, ptr_type_node, sav, build_int_2 (sav_ofs, 0));\n+      else\n+\tt = sav;\n \n-  u = build1 (CONVERT_EXPR, integer_type_node, u);\n-  TREE_SIDE_EFFECTS (u) = 1;\n+      u = build (POSTINCREMENT_EXPR, TREE_TYPE (reg), reg,\n+\t\t build_int_2 (n_reg, 0));\n+      TREE_SIDE_EFFECTS (u) = 1;\n \n-  u = build (MULT_EXPR, integer_type_node, u, build_int_2 (sav_scale, 0));\n-  TREE_SIDE_EFFECTS (u) = 1;\n+      u = build1 (CONVERT_EXPR, integer_type_node, u);\n+      TREE_SIDE_EFFECTS (u) = 1;\n \n-  t = build (PLUS_EXPR, ptr_type_node, t, u);\n-  TREE_SIDE_EFFECTS (t) = 1;\n+      u = build (MULT_EXPR, integer_type_node, u, build_int_2 (sav_scale, 0));\n+      TREE_SIDE_EFFECTS (u) = 1;\n \n-  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-  if (r != addr_rtx)\n-    emit_move_insn (addr_rtx, r);\n+      t = build (PLUS_EXPR, ptr_type_node, t, u);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+\n+      r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n+      if (r != addr_rtx)\n+\temit_move_insn (addr_rtx, r);\n+\n+      emit_jump_insn (gen_jump (lab_over));\n+      emit_barrier ();\n+    }\n \n-  emit_jump_insn (gen_jump (lab_over));\n-  emit_barrier ();\n   emit_label (lab_false);\n \n   /* ... otherwise out of the overflow area.  */\n \n-  /* Make sure we don't find reg 7 for the next int arg.  */\n-  if (n_reg > 1)\n+  /* Make sure we don't find reg 7 for the next int arg.\n+\n+     All AltiVec vectors go in the overflow area.  So in the AltiVec\n+     case we need to get the vectors from the overflow area, but\n+     remember where the GPRs and FPRs are.  */\n+  if (n_reg > 1 && TREE_CODE (type) != VECTOR_TYPE)\n     {\n       t = build (MODIFY_EXPR, TREE_TYPE (reg), reg, build_int_2 (8, 0));\n       TREE_SIDE_EFFECTS (t) = 1;\n@@ -3247,8 +3259,16 @@ rs6000_va_arg (valist, type)\n     t = ovf;\n   else\n     {\n-      t = build (PLUS_EXPR, TREE_TYPE (ovf), ovf, build_int_2 (7, 0));\n-      t = build (BIT_AND_EXPR, TREE_TYPE (t), t, build_int_2 (-8, -1));\n+      int align;\n+\n+      /* Vectors are 16 byte aligned.  */\n+      if (TREE_CODE (type) == VECTOR_TYPE)\n+\talign = 15;\n+      else\n+\talign = 7;\n+\n+      t = build (PLUS_EXPR, TREE_TYPE (ovf), ovf, build_int_2 (align, 0));\n+      t = build (BIT_AND_EXPR, TREE_TYPE (t), t, build_int_2 (-align-1, -1));\n     }\n   t = save_expr (t);\n "}]}