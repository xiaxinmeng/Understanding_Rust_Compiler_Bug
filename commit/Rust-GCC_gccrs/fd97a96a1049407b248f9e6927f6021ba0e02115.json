{"sha": "fd97a96a1049407b248f9e6927f6021ba0e02115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5N2E5NmExMDQ5NDA3YjI0OGY5ZTY5MjdmNjAyMWJhMGUwMjExNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-02-11T22:38:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-02-11T22:38:37Z"}, "message": "re PR c++/30111 (Value-initialization of POD base class doesn't initialize members)\n\n        PR c++/30111\n        * init.c (build_value_init_noctor): Split out from...\n        (build_value_init): ...here.\n        (expand_aggr_init_1): Handle value-initialization.\n        * cp-tree.h: Add declaration.\n        * class.c (type_has_user_provided_constructor):\n        Handle non-class arguments.\n\nFrom-SVN: r144112", "tree": {"sha": "dc134d4d594d3c5e37ab4a52debdc05c7516eaf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc134d4d594d3c5e37ab4a52debdc05c7516eaf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd97a96a1049407b248f9e6927f6021ba0e02115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd97a96a1049407b248f9e6927f6021ba0e02115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd97a96a1049407b248f9e6927f6021ba0e02115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd97a96a1049407b248f9e6927f6021ba0e02115/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ad6b2669b7a6d9cd1b12330fd7accd44fdd2154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad6b2669b7a6d9cd1b12330fd7accd44fdd2154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad6b2669b7a6d9cd1b12330fd7accd44fdd2154"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "58bffd77e2539c55b3cd5da5de4c9049d1d0a6ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd97a96a1049407b248f9e6927f6021ba0e02115", "patch": "@@ -1,3 +1,13 @@\n+2009-02-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/30111\n+\t* init.c (build_value_init_noctor): Split out from...\n+\t(build_value_init): ...here.\n+\t(expand_aggr_init_1): Handle value-initialization.\n+\t* cp-tree.h: Add declaration.\n+\t* class.c (type_has_user_provided_constructor): \n+\tHandle non-class arguments.\n+\n 2009-02-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38649"}, {"sha": "cef2371963774228cb220770c5094baa9c0e8db6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fd97a96a1049407b248f9e6927f6021ba0e02115", "patch": "@@ -4090,6 +4090,9 @@ type_has_user_provided_constructor (tree t)\n {\n   tree fns;\n \n+  if (!CLASS_TYPE_P (t))\n+    return false;\n+\n   if (!TYPE_HAS_USER_CONSTRUCTOR (t))\n     return false;\n "}, {"sha": "5a9b891668fb6b41d692be0bfb8f4a4288620f79", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fd97a96a1049407b248f9e6927f6021ba0e02115", "patch": "@@ -4476,6 +4476,7 @@ extern int is_class_type\t\t\t(tree, int);\n extern tree get_type_value\t\t\t(tree);\n extern tree build_zero_init\t\t\t(tree, tree, bool);\n extern tree build_value_init\t\t\t(tree);\n+extern tree build_value_init_noctor\t\t(tree);\n extern tree build_offset_ref\t\t\t(tree, tree, bool);\n extern tree build_new\t\t\t\t(tree, tree, tree, tree, int,\n                                                  tsubst_flags_t);"}, {"sha": "d583e3b799c4f83c616521b4b9cb7a954f450535", "filename": "gcc/cp/init.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=fd97a96a1049407b248f9e6927f6021ba0e02115", "patch": "@@ -318,7 +318,21 @@ build_value_init (tree type)\n \t  AGGR_INIT_ZERO_FIRST (ctor) = 1;\n \t  return ctor;\n \t}\n-      else if (TREE_CODE (type) != UNION_TYPE)\n+    }\n+  return build_value_init_noctor (type);\n+}\n+\n+/* Like build_value_init, but don't call the constructor for TYPE.  Used\n+   for base initializers.  */\n+\n+tree\n+build_value_init_noctor (tree type)\n+{\n+  if (CLASS_TYPE_P (type))\n+    {\n+      gcc_assert (!TYPE_NEEDS_CONSTRUCTING (type));\n+\t\n+      if (TREE_CODE (type) != UNION_TYPE)\n \t{\n \t  tree field;\n \t  VEC(constructor_elt,gc) *v = NULL;\n@@ -800,11 +814,6 @@ emit_mem_initializers (tree mem_inits)\n \t\t \"copy constructor\",\n \t\t current_function_decl, BINFO_TYPE (subobject));\n \n-      /* If an explicit -- but empty -- initializer list was present,\n-\t treat it just like default initialization at this point.  */\n-      if (arguments == void_type_node)\n-\targuments = NULL_TREE;\n-\n       /* Initialize the base.  */\n       if (BINFO_VIRTUAL_P (subobject))\n \tconstruct_virtual_base (subobject, arguments);\n@@ -1385,6 +1394,33 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n       return;\n     }\n \n+  /* If an explicit -- but empty -- initializer list was present,\n+     that's value-initialization.  */\n+  if (init == void_type_node)\n+    {\n+      /* If there's a user-provided constructor, we just call that.  */\n+      if (type_has_user_provided_constructor (type))\n+\t/* Fall through.  */;\n+      /* If there isn't, but we still need to call the constructor,\n+\t zero out the object first.  */\n+      else if (TYPE_NEEDS_CONSTRUCTING (type))\n+\t{\n+\t  init = build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n+\t  init = build2 (INIT_EXPR, type, exp, init);\n+\t  finish_expr_stmt (init);\n+\t  /* And then call the constructor.  */\n+\t}\n+      /* If we don't need to mess with the constructor at all,\n+\t then just zero out the object and we're done.  */\n+      else\n+\t{\n+\t  init = build2 (INIT_EXPR, type, exp, build_value_init_noctor (type));\n+\t  finish_expr_stmt (init);\n+\t  return;\n+\t}\n+      init = NULL_TREE;\n+    }\n+\n   /* We know that expand_default_init can handle everything we want\n      at this point.  */\n   expand_default_init (binfo, true_exp, exp, init, flags, complain);"}, {"sha": "7c088650e9742d32f70ef5033ea629f8fab69df4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd97a96a1049407b248f9e6927f6021ba0e02115", "patch": "@@ -1,3 +1,8 @@\n+2009-02-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/30111\n+\t* g++.dg/init/value7.C: New test.\n+\n 2009-02-11  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.target/i386/pr38824.c: New testcase."}, {"sha": "c79de4a68642e1b73684dd31180d75450d5b32d1", "filename": "gcc/testsuite/g++.dg/init/value7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd97a96a1049407b248f9e6927f6021ba0e02115/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue7.C?ref=fd97a96a1049407b248f9e6927f6021ba0e02115", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/30111\n+// { dg-do run }\n+\n+struct pod {\n+  int i;\n+};\n+\n+struct inherit : pod {\n+  inherit() : pod() {}\n+};\n+\n+int main()\n+{\n+  inherit i;\n+  return i.i != 0;\n+}\n+"}]}