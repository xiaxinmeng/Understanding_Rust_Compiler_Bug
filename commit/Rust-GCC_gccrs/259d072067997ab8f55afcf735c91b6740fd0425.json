{"sha": "259d072067997ab8f55afcf735c91b6740fd0425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5ZDA3MjA2Nzk5N2FiOGY1NWFmY2Y3MzVjOTFiNjc0MGZkMDQyNQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-08-19T09:02:21Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-08-24T09:08:30Z"}, "message": "arm: Fix -mpure-code support/-mslow-flash-data for armv8-m.base [PR94538]\n\narmv8-m.base (cortex-m23) has the movt instruction, so we need to\ndisable the define_split to generate a constant in this case,\notherwise we get incorrect insn constraints as described in PR94538.\n\nWe also need to fix the pure-code alternative for thumb1_movsi_insn\nbecause the assembler complains with instructions like\nmovs r0, #:upper8_15:1234\n(Internal error in md_apply_fix)\nWe now generate movs r0, 4 instead.\n\n2020-08-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tPR target/94538\n\tgcc/\n\t* config/arm/thumb1.md: Disable set-constant splitter when\n\tTARGET_HAVE_MOVT.\n\t(thumb1_movsi_insn): Fix -mpure-code\n\talternative.\n\n\tPR target/94538\n\tgcc/testsuite/\n\t* gcc.target/arm/pure-code/pr94538-1.c: New test.\n\t* gcc.target/arm/pure-code/pr94538-2.c: New test.", "tree": {"sha": "bf352a8395dda6acdf1098f669a4a69923478d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf352a8395dda6acdf1098f669a4a69923478d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/259d072067997ab8f55afcf735c91b6740fd0425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259d072067997ab8f55afcf735c91b6740fd0425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/259d072067997ab8f55afcf735c91b6740fd0425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259d072067997ab8f55afcf735c91b6740fd0425/comments", "author": null, "committer": null, "parents": [{"sha": "cdb2e365fc0dba2ee052827e5ca65234ca82d605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdb2e365fc0dba2ee052827e5ca65234ca82d605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdb2e365fc0dba2ee052827e5ca65234ca82d605"}], "stats": {"total": 91, "additions": 79, "deletions": 12}, "files": [{"sha": "f0129db2c3eac6008f596b2c4df33f4d7bd0cd9f", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259d072067997ab8f55afcf735c91b6740fd0425/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259d072067997ab8f55afcf735c91b6740fd0425/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=259d072067997ab8f55afcf735c91b6740fd0425", "patch": "@@ -70,6 +70,7 @@\n   \"TARGET_THUMB1\n    && arm_disable_literal_pool\n    && GET_CODE (operands[1]) == CONST_INT\n+   && !TARGET_HAVE_MOVT\n    && !satisfies_constraint_I (operands[1])\"\n   [(clobber (const_int 0))]\n   \"\n@@ -696,18 +697,59 @@\n   \"TARGET_THUMB1\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n-  \"@\n-   movs\t%0, %1\n-   movs\t%0, %1\n-   movw\t%0, %1\n-   #\n-   #\n-   ldmia\\\\t%1, {%0}\n-   stmia\\\\t%0, {%1}\n-   movs\\\\t%0, #:upper8_15:%1; lsls\\\\t%0, #8; adds\\\\t%0, #:upper0_7:%1; lsls\\\\t%0, #8; adds\\\\t%0, #:lower8_15:%1; lsls\\\\t%0, #8; adds\\\\t%0, #:lower0_7:%1\n-   ldr\\\\t%0, %1\n-   str\\\\t%1, %0\n-   mov\\\\t%0, %1\"\n+{\n+  switch (which_alternative)\n+    {\n+      default:\n+      case 0: return \"movs\\t%0, %1\";\n+      case 1: return \"movs\\t%0, %1\";\n+      case 2: return \"movw\\t%0, %1\";\n+      case 3: return \"#\";\n+      case 4: return \"#\";\n+      case 5: return \"ldmia\\t%1, {%0}\";\n+      case 6: return \"stmia\\t%0, {%1}\";\n+      case 7:\n+      /* pure-code alternative: build the constant byte by byte,\n+\t instead of loading it from a constant pool.  */\n+\t{\n+\t  int i;\n+\t  HOST_WIDE_INT op1 = INTVAL (operands[1]);\n+\t  bool mov_done_p = false;\n+\t  rtx ops[2];\n+\t  ops[0] = operands[0];\n+\n+\t  /* Emit upper 3 bytes if needed.  */\n+\t  for (i = 0; i < 3; i++)\n+\t    {\n+\t       int byte = (op1 >> (8 * (3 - i))) & 0xff;\n+\n+\t      if (byte)\n+\t\t{\n+\t\t  ops[1] = GEN_INT (byte);\n+\t\t  if (mov_done_p)\n+\t\t    output_asm_insn (\"adds\\t%0, %1\", ops);\n+\t\t  else\n+\t\t    output_asm_insn (\"movs\\t%0, %1\", ops);\n+\t\t  mov_done_p = true;\n+\t\t}\n+\n+\t      if (mov_done_p)\n+\t\toutput_asm_insn (\"lsls\\t%0, #8\", ops);\n+\t    }\n+\n+\t  /* Emit lower byte if needed.  */\n+\t  ops[1] = GEN_INT (op1 & 0xff);\n+\t  if (!mov_done_p)\n+\t    output_asm_insn (\"movs\\t%0, %1\", ops);\n+\t  else if (op1 & 0xff)\n+\t    output_asm_insn (\"adds\\t%0, %1\", ops);\n+\t  return \"\";\n+\t}\n+      case 8: return \"ldr\\t%0, %1\";\n+      case 9: return \"str\\t%1, %0\";\n+      case 10: return \"mov\\t%0, %1\";\n+    }\n+}\n   [(set_attr \"length\" \"2,2,4,4,4,2,2,14,2,2,2\")\n    (set_attr \"type\" \"mov_reg,mov_imm,mov_imm,multiple,multiple,load_4,store_4,alu_sreg,load_4,store_4,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,*,*,*,*, *,1018,*,*\")"}, {"sha": "31061d5d44500b7feabf4a86b5c4fb9fcd5df623", "filename": "gcc/testsuite/gcc.target/arm/pure-code/pr94538-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259d072067997ab8f55afcf735c91b6740fd0425/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr94538-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259d072067997ab8f55afcf735c91b6740fd0425/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr94538-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr94538-1.c?ref=259d072067997ab8f55afcf735c91b6740fd0425", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"skip override\" { *-*-* } { \"-mfloat-abi=hard\" } { \"\" } } */\n+/* { dg-options \"-mpure-code -mcpu=cortex-m23 -march=armv8-m.base -mthumb -mfloat-abi=soft\" } */\n+\n+typedef int __attribute__ ((__vector_size__ (16))) V;\n+\n+V v;\n+\n+void\n+foo (void)\n+{\n+  v += (V){4095};\n+}"}, {"sha": "c1789da67807c27403b6f7c8eccd31e85623a27f", "filename": "gcc/testsuite/gcc.target/arm/pure-code/pr94538-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259d072067997ab8f55afcf735c91b6740fd0425/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr94538-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259d072067997ab8f55afcf735c91b6740fd0425/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr94538-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr94538-2.c?ref=259d072067997ab8f55afcf735c91b6740fd0425", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpure-code\" } */\n+\n+typedef int __attribute__ ((__vector_size__ (16))) V;\n+\n+V v;\n+\n+void\n+foo (void)\n+{\n+  v += (V){4095};\n+}"}]}