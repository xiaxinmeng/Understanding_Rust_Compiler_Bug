{"sha": "816551fe37d92bdd0982d85fe9e833e81dd9a255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE2NTUxZmUzN2Q5MmJkZDA5ODJkODVmZTllODMzZTgxZGQ5YTI1NQ==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2014-03-26T21:33:28Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2014-03-26T21:33:28Z"}, "message": "re PR c++/52369 (Const-qualified non-class base member and defaulted default constructor)\n\n2014-03-26  Fabien Chene  <fabien@gcc.gnu.org>\n        PR c++/52369\n        * cp/method.c (walk_field_subobs): improve the diagnostic\n\tlocations for both REFERENCE_TYPEs and non-static const members.\n\t* cp/init.c (diagnose_uninitialized_cst_or_ref_member): use %q#D\n\tinstead of %qD to be consistent with the c++11 diagnostic.\n\n2014-03-26  Fabien Chene  <fabien@gcc.gnu.org>\n\n        PR c++/52369\n        * g++.dg/init/const10.C: New.\n\t* g++.dg/init/const11.C: New.\n\t* g++.dg/init/pr25811.C: Adjust.\n\t* g++.dg/init/pr29043.C: Likewise.\n\t* g++.dg/init/pr43719.C: Likewise.\n\t* g++.dg/init/pr44086.C: Likewise.\n\t* g++.dg/init/ctor8.C: Likewise.\n\t* g++.dg/init/uninitialized1.C: Likewise.\n\nFrom-SVN: r208854", "tree": {"sha": "f68ff5496d477c9f254942a564dfada70b727292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f68ff5496d477c9f254942a564dfada70b727292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/816551fe37d92bdd0982d85fe9e833e81dd9a255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816551fe37d92bdd0982d85fe9e833e81dd9a255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/816551fe37d92bdd0982d85fe9e833e81dd9a255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816551fe37d92bdd0982d85fe9e833e81dd9a255/comments", "author": null, "committer": null, "parents": [{"sha": "c288ec8f21609193c80546000ac23ce1f1bc69e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c288ec8f21609193c80546000ac23ce1f1bc69e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c288ec8f21609193c80546000ac23ce1f1bc69e7"}], "stats": {"total": 280, "additions": 194, "deletions": 86}, "files": [{"sha": "71f94fcf64ff546d20734d522b81a8d839fadbe1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,3 +1,10 @@\n+2014-03-26  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+        PR c++/52369\n+        * cp/method.c (walk_field_subobs): improve the diagnostic\n+\tlocations for both REFERENCE_TYPEs and non-static const members.\n+\t* cp/init.c (diagnose_uninitialized_cst_or_ref_member): use %q#D\n+\tinstead of %qD to be consistent with the c++11 diagnostic.\n+\n 2014-03-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/60566"}, {"sha": "f85776c5ec7581e0df91e875ff62db3131dcee13", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -2157,7 +2157,7 @@ diagnose_uninitialized_cst_or_ref_member_1 (tree type, tree origin,\n \t\t\t   \"of %q#T\", DECL_CONTEXT (field), origin);\n \t\t}\n \t      inform (DECL_SOURCE_LOCATION (field),\n-\t\t      \"%qD should be initialized\", field);\n+\t\t      \"%q#D should be initialized\", field);\n \t    }\n \t}\n \n@@ -2185,7 +2185,7 @@ diagnose_uninitialized_cst_or_ref_member_1 (tree type, tree origin,\n \t\t\t   \"of %q#T\", DECL_CONTEXT (field), origin);\n \t\t}\n \t      inform (DECL_SOURCE_LOCATION (field),\n-\t\t      \"%qD should be initialized\", field);\n+\t\t      \"%q#D should be initialized\", field);\n \t    }\n \t}\n "}, {"sha": "11bff7f45878ece660410341cc9fdc71ce8b24f0", "filename": "gcc/cp/method.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1110,15 +1110,23 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t      && default_init_uninitialized_part (mem_type))\n \t    {\n \t      if (diag)\n-\t\terror (\"uninitialized non-static const member %q#D\",\n-\t\t       field);\n+\t\t{\n+\t\t  error (\"uninitialized const member in %q#T\",\n+\t\t\t current_class_type);\n+\t\t  inform (DECL_SOURCE_LOCATION (field),\n+\t\t\t  \"%q#D should be initialized\", field);\n+\t\t}\n \t      bad = true;\n \t    }\n \t  else if (TREE_CODE (mem_type) == REFERENCE_TYPE)\n \t    {\n \t      if (diag)\n-\t\terror (\"uninitialized non-static reference member %q#D\",\n-\t\t       field);\n+\t\t{\n+\t\t  error (\"uninitialized reference member in %q#T\",\n+\t\t\t current_class_type);\n+\t\t  inform (DECL_SOURCE_LOCATION (field),\n+\t\t\t  \"%q#D should be initialized\", field);\n+\t\t}\n \t      bad = true;\n \t    }\n "}, {"sha": "a5bcb88b1a8718b2419b666062f82120cf434851", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,3 +1,15 @@\n+2014-03-26  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+        PR c++/52369\n+        * g++.dg/init/const10.C: New.\n+\t* g++.dg/init/const11.C: New.\n+\t* g++.dg/init/pr25811.C: Adjust.\n+\t* g++.dg/init/pr29043.C: Likewise.\n+\t* g++.dg/init/pr43719.C: Likewise.\n+\t* g++.dg/init/pr44086.C: Likewise.\n+\t* g++.dg/init/ctor8.C: Likewise.\n+\t* g++.dg/init/uninitialized1.C: Likewise.\n+\n 2014-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/60636"}, {"sha": "ecd0db4501bc2c353c14ad1db824614888235d52", "filename": "gcc/testsuite/g++.dg/init/const10.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst10.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -0,0 +1,33 @@\n+// PR C++/52369\n+// { dg-do compile { target c++11 } }\n+\n+class B // { dg-message \"implicitly deleted\" }\n+        // { dg-error \"uninitialized\" \"\" { target c++11 } 4 }\n+{\n+  int const v_; // { dg-message \"should be initialized\" }\n+};\n+\n+struct D : B {}; // { dg-error \"deleted\" }\n+\n+class A // { dg-message \"implicitly deleted\" }\n+\t// { dg-error \"uninitialized\" \"\" { target c++11 } 12 }\n+{\n+  int& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct C : A {}; // { dg-error \"deleted\" }\n+\n+void f()\n+{\n+  D d; // { dg-error \"use of deleted\" }\n+  new D; // { dg-error \"use of deleted\" }\n+  D(); // { dg-error \"use of deleted\" }\n+  new D(); // { dg-error \"use of deleted\" }\n+\n+  C c; // { dg-error \"use of deleted\" }\n+  new C; // { dg-error \"use of deleted\" }\n+  C(); // { dg-error \"use of deleted\" }\n+  new C(); // { dg-error \"use of deleted\" }\n+}\n+\n+"}, {"sha": "08d5185c09c3e17bc432f949d386fdc7bd5b7f28", "filename": "gcc/testsuite/g++.dg/init/const11.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst11.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -0,0 +1,29 @@\n+// PR C++/52369\n+// { dg-do compile { target { ! c++11 } } }\n+\n+class B\n+{\n+  int const v_; // { dg-message \"should be initialized\" }\n+};\n+\n+struct D : B {};\n+\n+class A\n+{\n+  int& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct C : A {};\n+\n+void f()\n+{\n+  D d; // { dg-error \"uninitialized\" }\n+  new D; // { dg-error \"uninitialized\" }\n+  D();\n+  new D();\n+\n+  C c; // { dg-error \"uninitialized\" }\n+  new C; // { dg-error \"uninitialized\" }\n+  C(); // { dg-error \"value-initialization\" }\n+  new C(); // { dg-error \"value-initialization\" }\n+}"}, {"sha": "3c37790c0c44bbeb2ed08354550f712507738bde", "filename": "gcc/testsuite/g++.dg/init/ctor8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,6 +1,6 @@\n // PR c++/29039\n \n-typedef struct S {\t    // { dg-error \"reference\" \"\" { target c++11 } }\n+typedef struct S { // { dg-error \"reference\" \"\" { target c++11 } }\n   int &r; \n }; // { dg-warning \"'typedef' was ignored\" }\n "}, {"sha": "c29f40607bd2a053a3f07894387b55b56ea63146", "filename": "gcc/testsuite/g++.dg/init/pr25811.C", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,51 +1,60 @@\n // PR c++/25811\n // { dg-do compile }\n \n-struct A1\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A1 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+          // { dg-error \"uninitialized\" \"\" { target c++11 } 4 }\n {\n-  int const j; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const j; // { dg-message \"should be initialized\" }\n };\n \n-struct A2\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+          // { dg-error \"uninitialized\" \"\" { target c++11 } 10 }\n {\n-  int const volatile i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const volatile i; // { dg-message \"should be initialized\" }\n };\n \n-struct A3\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A3 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 16 }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n-struct A4\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 22 }\n {\n-  int const& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const& ref; // { dg-message \"should be initialized\" }\n };\n \n-struct A5\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A5 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 28 }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n-template <class T> struct S1 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+template <class T> struct S1 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 35 }\n {\n-  T const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T const i; // { dg-message \"should be initialized\" }\n };\n \n-template <class T> struct S2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+template <class T> struct S2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 41 }\n {\n-  T const volatile i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T const volatile i; // { dg-message \"should be initialized\" }\n };\n \n-template <class T> struct S3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+template <class T> struct S3 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 47 }\n {\n-  T& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T& ref; // { dg-message \"should be initialized\" }\n };\n \n-template <class T> struct S4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+template <class T> struct S4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 53 }\n {\n-  T const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n-  T& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T const i; // { dg-message \"should be initialized\" }\n+  T& ref; // { dg-message \"should be initialized\" }\n };\n \n struct X\n@@ -55,52 +64,58 @@ struct X\n   int const& r;\n };\n \n-struct Y11\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Y11 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t   // { dg-error \"uninitialized\" \"\" { target c++11 } 67 }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n-struct Y1\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n+struct Y1 // { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y11 a[1];\n };\n \n-struct Y22\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Y22 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t   // { dg-error \"uninitialized\" \"\" { target c++11 } 78 }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n-struct Y2\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n+struct Y2 // { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y22 a[1];\n };\n \n-struct Z1\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z1 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 89 }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n-struct Z2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 95 }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n-struct Z3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z3 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 101 }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n-struct Z4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 107 }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n struct Z5\n {\n   int i;\n };\n \n-struct Z\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n+struct Z // { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Z1 z1;\n   Z2 z2;\n@@ -109,9 +124,10 @@ struct Z\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n   Z5 z5;\n };\n \n-union U // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+union U // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t// { dg-error \"uninitialized\" \"\" { target c++11 } 127 }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n void f1 ()"}, {"sha": "c81c39cb0f642425a6537b2a92d25e79a07a88aa", "filename": "gcc/testsuite/g++.dg/init/pr29043.C", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,9 +1,10 @@\n // PR c++/29043\n // { dg-do compile }\n \n-struct S\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct S // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t // { dg-error \"uninitialized\" \"\" { target c++11 } 4 }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n class C\n@@ -13,9 +14,10 @@ public:\n   S s;\n };\n \n-struct S2\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct S2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 17 }\n {\n-  int& ref;   // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref;   // { dg-message \"should be initialized\" }\n };\n \n class C2\n@@ -33,9 +35,10 @@ class C3\n   };\n };\n \n-struct S4\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct S4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 38 }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n struct C4\n@@ -46,7 +49,7 @@ struct C4\n \n struct C5\n {\n-  C5() {} // { dg-message \"uninitialized\" }   \n+  C5() {} // { dg-error \"uninitialized\" }\n   int const iit[ 1 ];\n };\n "}, {"sha": "c8cebc2de1530a5fa77a0dfc6479213f7be31943", "filename": "gcc/testsuite/g++.dg/init/pr43719.C", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,51 +1,51 @@\n // PR c++/43719\n // { dg-do compile }\n \n-struct A1\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A1 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const j; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const j; // { dg-message \"should be initialized\" }\n };\n \n-struct A2\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const volatile i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const volatile i; // { dg-message \"should be initialized\" }\n };\n \n-struct A3\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n-struct A4\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const& ref; // { dg-message \"should be initialized\" }\n };\n \n-struct A5\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A5 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S1 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T const i; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const volatile i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T const volatile i; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T& ref; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n-  T& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  T const i; // { dg-message \"should be initialized\" }\n+  T& ref; // { dg-message \"should be initialized\" }\n };\n \n struct X\n@@ -55,44 +55,44 @@ struct X\n   int const& r;\n };\n \n-struct Y11\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Y11 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n struct Y1\t\t  // { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y11 a[1];\n };\n \n-struct Y22\t       // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Y22 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n struct Y2\t\t      // { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y22 a[1];\n };\n \n-struct Z1\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z1 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n-struct Z2\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n-struct Z3\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n-struct Z4\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct Z4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int& ref; // { dg-message \"should be initialized\" }\n };\n \n struct Z5\n@@ -109,9 +109,9 @@ struct Z\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n   Z5 z5;\n };\n \n-union U\t\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+union U // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+  int const i; // { dg-message \"should be initialized\" }\n };\n \n "}, {"sha": "c3e9d4e56ae27d3f5926b87a209c92b6e702c5a4", "filename": "gcc/testsuite/g++.dg/init/pr44086.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr44086.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr44086.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr44086.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,9 +1,9 @@\n // PR c++/44086\n // { dg-do compile }\n \n-struct A\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n+struct A // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-    int const i : 2; // { dg-message \"should be initialized\" \"\" { target { ! c++11 } } }\n+    int const i : 2; // { dg-message \"should be initialized\" }\n };\n \n void f()"}, {"sha": "e8509ff4b70fbb8f0c5257eb62931037f53656ae", "filename": "gcc/testsuite/g++.dg/init/uninitialized1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funinitialized1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816551fe37d92bdd0982d85fe9e833e81dd9a255/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funinitialized1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funinitialized1.C?ref=816551fe37d92bdd0982d85fe9e833e81dd9a255", "patch": "@@ -1,8 +1,8 @@\n // PR c++/58126\n \n-struct A {\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n-  const int value1;\n-  int& value2;\n+struct A { // { dg-error \"uninitialized\" \"\" { target c++11 } }\n+  const int value1; // { dg-message \"should be initialized\" }\n+  int& value2; // { dg-message \"should be initialized\" }\n };\n \n struct B : A { };\t// { dg-error \"deleted\" \"\" { target c++11 } }"}]}