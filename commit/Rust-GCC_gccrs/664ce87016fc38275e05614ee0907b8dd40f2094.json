{"sha": "664ce87016fc38275e05614ee0907b8dd40f2094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0Y2U4NzAxNmZjMzgyNzVlMDU2MTRlZTA5MDdiOGRkNDBmMjA5NA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-11-21T07:16:01Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-11-21T07:16:01Z"}, "message": "style.css: Update.\n\n2002-11-21  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/doxygen/style.css:  Update.\n\t* docs/doxygen/user.cfg.in:  Update.\n\t* docs/html/documentation.html:  Regenerate.\n\t* docs/html/17_intro/howto.html:  Tweak I/O sentry entry.\n\t* docs/html/27_io/howto.html:  New section on headers.\n\t* docs/html/faq/index.html:  Add i386 threading entry.\n\t* docs/html/faq/index.txt:  Regenerate.\n\n\t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:\n\tImport R23.\n\nFrom-SVN: r59326", "tree": {"sha": "8ea694245d0fbb4ef74e6900b51dd74c530496c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ea694245d0fbb4ef74e6900b51dd74c530496c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664ce87016fc38275e05614ee0907b8dd40f2094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664ce87016fc38275e05614ee0907b8dd40f2094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664ce87016fc38275e05614ee0907b8dd40f2094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664ce87016fc38275e05614ee0907b8dd40f2094/comments", "author": null, "committer": null, "parents": [{"sha": "840ceb345b02d8f883b740949984878c9ed6f18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840ceb345b02d8f883b740949984878c9ed6f18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840ceb345b02d8f883b740949984878c9ed6f18e"}], "stats": {"total": 2251, "additions": 1641, "deletions": 610}, "files": [{"sha": "7135c13378e6c826b3db5cb2fd5c0322f162bb97", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -1,3 +1,16 @@\n+2002-11-21  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/doxygen/style.css:  Update.\n+\t* docs/doxygen/user.cfg.in:  Update.\n+\t* docs/html/documentation.html:  Regenerate.\n+\t* docs/html/17_intro/howto.html:  Tweak I/O sentry entry.\n+\t* docs/html/27_io/howto.html:  New section on headers.\n+\t* docs/html/faq/index.html:  Add i386 threading entry.\n+\t* docs/html/faq/index.txt:  Regenerate.\n+\n+\t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:\n+\tImport R23.\n+\n 2002-11-21  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/TODO:  Note change in clause 27 docs."}, {"sha": "e527a57c4f20cfac11e3c3bf47053705c79e88de", "filename": "libstdc++-v3/docs/doxygen/style.css", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fstyle.css", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fstyle.css", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fstyle.css?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -1,4 +1,5 @@\n H1 { text-align: center; }\n+CAPTION { font-weight: bold }\n A.qindex {}\n A.qindexRef {}\n A.el { text-decoration: none; font-weight: bold }\n@@ -10,15 +11,39 @@ DL.el { margin-left: -1cm }\n DIV.fragment { width: 100%; border: none; background-color: #eeeeee }\n DIV.ah { background-color: black; font-weight: bold; color: #ffffff; margin-bottom: 3px; margin-top: 3px }\n TD.md { background-color: #f2f2ff; font-weight: bold; }\n-TD.mdname1 { background-color: #f2f2ff; font-weight: bold; font-style: italic; }\n-TD.mdname { background-color: #f2f2ff; font-weight: bold; font-style: italic; width: 600px; }\n+TD.mdname1 { background-color: #f2f2ff; font-weight: bold; color: #602020; }\n+TD.mdname { background-color: #f2f2ff; font-weight: bold; color: #602020; width: 600px; }\n DIV.groupHeader { margin-left: 16px; margin-top: 12px; margin-bottom: 6px; font-weight: bold }\n DIV.groupText { margin-left: 16px; font-style: italic; font-size: smaller }\n-FONT.keyword       { color: #008000 }\n-FONT.keywordtype   { color: #604020 }\n-FONT.keywordflow   { color: #e08000 }\n-FONT.comment       { color: #800000 }\n-FONT.preprocessor  { color: #806020 }\n-FONT.stringliteral { color: #002080 }\n-FONT.charliteral   { color: #008080 }\n-.smallertext { font-size: smaller }\n+BODY { background: white }\n+TD.indexkey { \n+   background-color: #eeeeff; \n+   font-weight: bold; \n+   padding-right  : 10px; \n+   padding-top    : 2px; \n+   padding-left   : 10px; \n+   padding-bottom : 2px; \n+   margin-left    : 0px; \n+   margin-right   : 0px; \n+   margin-top     : 2px; \n+   margin-bottom  : 2px  \n+}\n+TD.indexvalue { \n+   background-color: #eeeeff; \n+   font-style: italic; \n+   padding-right  : 10px; \n+   padding-top    : 2px; \n+   padding-left   : 10px; \n+   padding-bottom : 2px; \n+   margin-left    : 0px; \n+   margin-right   : 0px; \n+   margin-top     : 2px; \n+   margin-bottom  : 2px  \n+}\n+span.keyword       { color: #008000 }\n+span.keywordtype   { color: #604020 }\n+span.keywordflow   { color: #e08000 }\n+span.comment       { color: #800000 }\n+span.preprocessor  { color: #806020 }\n+span.stringliteral { color: #002080 }\n+span.charliteral   { color: #008080 }"}, {"sha": "966d6e855bb1be5bfc6f0dc8f1fd9659c38bdaa3", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 142, "deletions": 15, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -1,4 +1,4 @@\n-# Doxyfile 1.2.12\n+# Doxyfile 1.2.18\n \n # This file describes the settings to be used by the documentation system\n # doxygen (www.doxygen.org) for a project\n@@ -43,9 +43,11 @@ OUTPUT_DIRECTORY       = @outdir@\n # documentation generated by doxygen is written. Doxygen will use this \n # information to generate all constant output in the proper language. \n # The default language is English, other supported languages are: \n-# Brazilian, Chinese, Croatian, Czech, Danish, Dutch, Finnish, French, \n-# German, Hungarian, Italian, Japanese, Korean, Norwegian, Polish, \n-# Portuguese, Romanian, Russian, Slovak, Slovene, Spanish and Swedish.\n+# Brazilian, Catalan, Chinese, Chinese-Traditional, Croatian, Czech, Danish, Dutch,\n+# Finnish, French, German, Greek, Hungarian, Italian, Japanese, Japanese-en\n+# (Japanese with english messages), Korean, Norwegian, Polish, Portuguese,\n+# Romanian, Russian, Serbian, Slovak, Slovene, Spanish, Swedish and Ukrainian.\n+\n \n OUTPUT_LANGUAGE        = English\n \n@@ -66,6 +68,12 @@ EXTRACT_PRIVATE        = YES\n \n EXTRACT_STATIC         = YES\n \n+# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)\n+# defined locally in source files will be included in the documentation.\n+# If set to NO only classes defined in header files are included.\n+\n+EXTRACT_LOCAL_CLASSES  = NO\n+\n # If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all \n # undocumented members of documented classes, files or namespaces. \n # If set to NO (the default) these members will be included in the \n@@ -81,6 +89,13 @@ HIDE_UNDOC_MEMBERS     = YES\n \n HIDE_UNDOC_CLASSES     = YES\n \n+# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all\n+# friend (class|struct|union) declarations.\n+# If set to NO (the default) these declarations will be included in the\n+# documentation.\n+\n+HIDE_FRIEND_COMPOUNDS  = NO\n+\n # If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will \n # include brief member descriptions after the members that are listed in \n # the file and class documentation (similar to JavaDoc). \n@@ -101,6 +116,14 @@ REPEAT_BRIEF           = YES\n \n ALWAYS_DETAILED_SEC    = YES\n \n+# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all inherited\n+# members of a class in the documentation of that class as if those members were\n+# ordinary class members. Constructors, destructors and assignment operators of\n+# the base classes will not be shown.\n+\n+INLINE_INHERITED_MEMB  = NO\n+# pedwards -- this is useful, but ch27 gets huge\n+\n # If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full \n # path before files name in the file list and in the header files. If set \n # to NO the shortest path that makes the file name unique will be used.\n@@ -167,6 +190,21 @@ SHOW_INCLUDE_FILES     = YES\n \n JAVADOC_AUTOBRIEF      = NO\n \n+# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen\n+# treat a multi-line C++ special comment block (i.e. a block of //! or ///\n+# comments) as a brief description. This used to be the default behaviour.\n+# The new default is to treat a multi-line C++ comment block as a detailed\n+# description. Set this tag to YES if you prefer the old behaviour instead.\n+\n+MULTILINE_CPP_IS_BRIEF = YES\n+\n+# If the DETAILS_AT_TOP tag is set to YES then Doxygen\n+# will output the detailed description near the top, like JavaDoc.\n+# If set to NO, the detailed description appears after the member\n+# documentation.\n+\n+DETAILS_AT_TOP         = NO\n+\n # If the INHERIT_DOCS tag is set to YES (the default) then an undocumented \n # member inherits the documentation from any documented member that it \n # reimplements.\n@@ -183,7 +221,7 @@ INLINE_INFO            = YES\n # alphabetically by member name. If set to NO the members will appear in \n # declaration order.\n \n-SORT_MEMBER_DOCS       = NO\n+SORT_MEMBER_DOCS       = YES\n \n # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC \n # tag is set to YES, then doxygen will reuse the documentation of the first \n@@ -215,14 +253,21 @@ GENERATE_TESTLIST      = NO\n \n GENERATE_BUGLIST       = YES\n \n+# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or\n+# disable (NO) the deprecated list. This list is created by putting\n+# \\deprecated commands in the documentation.\n+\n+GENERATE_DEPRECATEDLIST= YES\n+\n # This tag can be used to specify a number of aliases that acts \n # as commands in the documentation. An alias has the form \"name=value\". \n # For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to \n # put the command \\sideeffect (or @sideeffect) in the documentation, which \n # will result in a user defined paragraph with heading \"Side Effects:\". \n # You can put \\n's in the value part of an alias to insert newlines.\n \n-ALIASES                = \"doctodo=@todo\\nDoc me!  See docs/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more.\"\n+ALIASES                = \"doctodo=@todo\\nDoc me!  See docs/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more.\" \\\n+\"isiosfwd=One of the @link s27_2_iosfwd I/O forward declarations @endlink\"\n \n # The ENABLED_SECTIONS tag can be used to enable conditional \n # documentation sections, marked by \\if sectionname ... \\endif.\n@@ -237,7 +282,7 @@ ENABLED_SECTIONS       = @enabled_sections@\n # documentation can be controlled using \\showinitializer or \\hideinitializer \n # command in the documentation regardless of this setting.\n \n-MAX_INITIALIZER_LINES  = 30\n+MAX_INITIALIZER_LINES  = 0\n \n # Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C sources \n # only. Doxygen will then generate output that is more tailored for C. \n@@ -246,6 +291,13 @@ MAX_INITIALIZER_LINES  = 30\n \n OPTIMIZE_OUTPUT_FOR_C  = NO\n \n+# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java sources\n+# only. Doxygen will then generate output that is more tailored for Java.\n+# For instance namespaces will be presented as packages, qualified scopes\n+# will look different, etc.\n+\n+OPTIMIZE_OUTPUT_JAVA   = NO\n+\n # Set the SHOW_USED_FILES tag to NO to disable the list of files generated \n # at the bottom of the documentation of classes and structs. If set to YES the \n # list will mention the files that were used to generate the documentation.\n@@ -325,12 +377,18 @@ RECURSIVE              = YES\n \n EXCLUDE                = Makefile CVS\n \n+# The EXCLUDE_SYMLINKS tag can be used select whether or not files or directories\n+# that are symbolic links (a Unix filesystem feature) are excluded from the input.\n+\n+EXCLUDE_SYMLINKS       = NO\n+\n # If the value of the INPUT tag contains directories, you can use the \n # EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude \n # certain files from those directories.\n \n EXCLUDE_PATTERNS       = CVS \\\n-                         stamp-*\n+                         stamp-*  \\\n+\t\t\t Makefile\n \n # The EXAMPLE_PATH tag can be used to specify one or more files or \n # directories that contain example code fragments that are included (see \n@@ -369,7 +427,7 @@ INPUT_FILTER           =\n \n # If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using \n # INPUT_FILTER) will be used to filter the input files when producing source \n-# files to browse.\n+# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n \n FILTER_SOURCE_FILES    = NO\n \n@@ -437,6 +495,12 @@ GENERATE_HTML          = @do_html@\n \n HTML_OUTPUT            = @html_output_dir@\n \n+# The HTML_FILE_EXTENSION tag can be used to specify the file extension for\n+# each generated HTML page (for example: .htm,.php,.asp). If it is left blank\n+# doxygen will generate files with .html extension.\n+\n+HTML_FILE_EXTENSION    = .html\n+\n # The HTML_HEADER tag can be used to specify a personal HTML header for \n # each generated HTML page. If it is left blank doxygen will generate a \n # standard header.\n@@ -469,6 +533,20 @@ HTML_ALIGN_MEMBERS     = YES\n \n GENERATE_HTMLHELP      = NO\n \n+# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can\n+# be used to specify the file name of the resulting .chm file. You\n+# can add a path in front of the file if the result should not be\n+# written to the html output dir.\n+\n+CHM_FILE               =\n+\n+# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can\n+# be used to specify the location (absolute path including file name) of\n+# the HTML help compiler (hhc.exe). If non empty doxygen will try to run\n+# the html help compiler on the generated index.hhp.\n+\n+HHC_LOCATION           =\n+\n # If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag \n # controls if a separate .chi index file is generated (YES) or that \n # it should be included in the master .chm file (NO).\n@@ -528,6 +606,17 @@ GENERATE_LATEX         = NO\n \n LATEX_OUTPUT           = latex\n \n+# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to\n+# be invoked. If left blank `latex' will be used as the default command name.\n+\n+LATEX_CMD_NAME         = latex\n+\n+# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to\n+# generate index for LaTeX. If left blank `makeindex' will be used as the\n+# default command name.\n+\n+MAKEINDEX_CMD_NAME     = makeindex\n+\n # If the COMPACT_LATEX tag is set to YES Doxygen generates more compact \n # LaTeX documents. This may be useful for small projects and may help to \n # save some trees in general.\n@@ -654,6 +743,30 @@ MAN_LINKS              = NO\n \n GENERATE_XML           = NO\n \n+# The XML_SCHEMA tag can be used to specify an XML schema,\n+# which can be used by a validating XML parser to check the\n+# syntax of the XML files.\n+\n+XML_SCHEMA             =\n+\n+# The XML_DTD tag can be used to specify an XML DTD,\n+# which can be used by a validating XML parser to check the\n+# syntax of the XML files.\n+\n+XML_DTD                =\n+\n+#---------------------------------------------------------------------------\n+# configuration options for the AutoGen Definitions output\n+#---------------------------------------------------------------------------\n+\n+# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will\n+# generate an AutoGen Definitions (see autogen.sf.net) file\n+# that captures the structure of the code including all\n+# documentation. Note that this feature is still experimental\n+# and incomplete at the moment.\n+\n+GENERATE_AUTOGEN_DEF   = NO\n+\n #---------------------------------------------------------------------------\n # Configuration options related to the preprocessor   \n #---------------------------------------------------------------------------\n@@ -707,6 +820,8 @@ INCLUDE_FILE_PATTERNS  =\n ### completely broken, and the presence of the macros confuses the parser.\n \n PREDEFINED             = _GLIBCPP_DEPRECATED              \\\n+                         _GLIBCPP_USE_WCHAR_T             \\\n+                         _GLIBCPP_USE_LONG_LONG           \\\n                          __glibcpp_class_requires=\"//\"    \\\n                          __glibcpp_class_requires2=\"//\"   \\\n                          __glibcpp_class_requires3=\"//\"   \\\n@@ -745,6 +860,12 @@ GENERATE_TAGFILE       =\n \n ALLEXTERNALS           = YES\n \n+# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed\n+# in the modules index. If set to NO, only the current project's groups will\n+# be listed.\n+\n+EXTERNAL_GROUPS        = YES\n+\n # The PERL_PATH should be the absolute path and name of the perl script \n # interpreter (i.e. the result of `which perl').\n \n@@ -762,6 +883,12 @@ PERL_PATH              = /usr/bin/perl\n \n CLASS_DIAGRAMS         = YES\n \n+# If set to YES, the inheritance and collaboration graphs will hide\n+# inheritance and usage relations if the target is undocumented\n+# or is not a class.\n+\n+HIDE_UNDOC_RELATIONS   = YES\n+\n # If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is \n # available from the path. This tool is part of Graphviz, a graph visualization \n # toolkit from AT&T and Lucent Bell Labs. The other options in this section \n@@ -788,12 +915,6 @@ COLLABORATION_GRAPH    = YES\n \n TEMPLATE_RELATIONS     = YES\n \n-# If set to YES, the inheritance and collaboration graphs will hide \n-# inheritance and usage relations if the target is undocumented \n-# or is not a class.\n-\n-HIDE_UNDOC_RELATIONS   = YES\n-\n # If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT \n # tags are set to YES then doxygen will generate a graph for each documented \n # file showing the direct and indirect include dependencies of the file with \n@@ -813,6 +934,12 @@ INCLUDED_BY_GRAPH      = YES\n \n GRAPHICAL_HIERARCHY    = YES\n \n+# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n+# generated by dot. Possible values are png, jpg, or gif\n+# If left blank png will be used.\n+\n+DOT_IMAGE_FORMAT       = png\n+\n # The tag DOT_PATH can be used to specify the path where the dot tool can be \n # found. If left blank, it is assumed the dot tool can be found on the path.\n "}, {"sha": "9d10becfad4513060a87c0641d31667e9cb374b4", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -261,8 +261,9 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n       on the --enable-libio choice:  for stdio, if the written data is\n       already in the stdio buffer, the data may be completely safe!\n    </p>\n-   <p><strong>I/O sentry ctor/dtor</strong> They can perform additional work\n-      than the minimum required.  I don't think we're currently taking\n+   <p><strong>[27.6.1.1.2]</strong>,<br />\n+      <strong>[27.6.2.3]</strong> The I/O sentry ctor and dtor can perform\n+      additional work than the minimum required.  We are not currently taking\n       advantage of this yet.\n    </p>\n    <p><strong>[27.7.1.3]/16</strong>,<br />"}, {"sha": "d7a984ec3d580cca9a0f4f98239ecd9e35b969e9", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -34,6 +34,7 @@ <h1>Contents</h1>\n    <li><a href=\"#7\">More on binary I/O</a></li>\n    <li><a href=\"#8\">Pathetic performance?  Ditch C.</a></li>\n    <li><a href=\"#9\">Threads and I/O</a></li>\n+   <li><a href=\"#10\">Which header?</a></li>\n </ul>\n \n <hr />\n@@ -558,6 +559,138 @@ <h3>Alternatives</h3>\n       &quot;interesting&quot; problems.\n    </p>\n \n+<hr />\n+<h2><a name=\"10\">Which header?</a></h2>\n+   <p>To minimize the time you have to wait on the compiler, it's good to\n+      only include the headers you really need.  Many people simply include\n+      &lt;iostream&gt; when they don't need to -- and that can <em>penalize\n+      your runtime as well.</em>  Here are some tips on which header to use\n+      for which situations, starting with the simplest.\n+   </p>\n+   <p><strong>&lt;iosfwd&gt;</strong> should be included whenever you simply\n+      need the <em>name</em> of an I/O-related class, such as\n+      &quot;ofstream&quot; or &quot;basic_streambuf&quot;.  Like the name\n+      implies, these are forward declarations.  (A word to all you fellow\n+      old school programmers:  trying to forward declare classes like\n+      &quot;class istream;&quot; won't work.  Look in the iosfwd header if\n+      you'd like to know why.)  For example,\n+   </p>\n+   <pre>\n+    #include &lt;iosfwd&gt;\n+\n+    class MyClass\n+    {\n+        ....\n+        std::ifstream   input_file;\n+    };\n+\n+    extern std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, MyClass&amp;);\n+   </pre>\n+   <p><strong>&lt;ios&gt;</strong> declares the base classes for the entire\n+      I/O stream hierarchy, std::ios_base and std::basic_ios&lt;charT&gt;, the\n+      counting types std::streamoff and std::streamsize, the file\n+      positioning type std::fpos, and the various manipulators like\n+      std::hex, std::fixed, std::noshowbase, and so forth.\n+   </p>\n+   <p>The ios_base class is what holds the format flags, the state flags,\n+      and the functions which change them (setf(), width(), precision(),\n+      etc).  You can also store extra data and register callback functions\n+      through ios_base, but that has been historically underused.  Anything\n+      which doesn't depend on the type of characters stored is consolidated\n+      here.\n+   </p>\n+   <p>The template class basic_ios is the highest template class in the\n+      hierarchy; it is the first one depending on the character type, and\n+      holds all general state associated with that type:  the pointer to the\n+      polymorphic stream buffer, the facet information, etc.\n+   </p>\n+   <p><strong>&lt;streambuf&gt;</strong> declares the template class\n+      basic_streambuf, and two standard instantiations, streambuf and\n+      wstreambuf.  If you need to work with the vastly useful and capable\n+      stream buffer classes, e.g., to create a new form of storage\n+      transport, this header is the one to include.\n+   </p>\n+   <p><strong>&lt;istream&gt;</strong>/<strong>&lt;ostream&gt;</strong> are\n+      the headers to include when you are using the &gt;&gt;/&lt;&lt;\n+      interface, or any of the other abstract stream formatting functions.\n+      For example,\n+   </p>\n+   <pre>\n+    #include &lt;istream&gt;\n+\n+    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, MyClass&amp; c)\n+    {\n+       return os &lt;&lt; c.data1() &lt;&lt; c.data2();\n+    }\n+   </pre>\n+   <p>The std::istream and std::ostream classes are the abstract parents of\n+      the various concrete implementations.  If you are only using the\n+      interfaces, then you only need to use the appropriate interface header.\n+   </p>\n+   <p><strong>&lt;iomanip&gt;</strong> provides &quot;extractors and inserters\n+      that alter information maintained by class ios_base and its dervied\n+      classes,&quot; such as std::setprecision and std::setw.  If you need\n+      to write expressions like <code>os &lt;&lt; setw(3);</code> or\n+      <code>is &gt;&gt; setbase(8);</code>, you must include &lt;iomanip&gt;.\n+   </p>\n+   <p><strong>&lt;sstream&gt;</strong>/<strong>&lt;fstream&gt;</strong>\n+      declare the six stringstream and fstream classes.  As they are the\n+      standard concrete descendants of istream and ostream, you will already\n+      know about them.\n+   </p>\n+   <p>Finally, <strong>&lt;iostream&gt;</strong> provides the eight standard\n+      global objects (cin, cout, etc).  To do this correctly, this header\n+      also provides the contents of the &lt;istream&gt; and &lt;ostream&gt;\n+      headers, but nothing else.  The contents of this header look like\n+   </p>\n+   <pre>\n+    #include &lt;ostream&gt;\n+    #include &lt;istream&gt;\n+\n+    namespace std\n+    {\n+        extern istream cin;\n+        extern ostream cout;\n+        ....\n+\n+        // this is explained below\n+        <strong>static ios_base::Init __foo;</strong>    // not its real name\n+    }\n+   </pre>\n+   <p>Now, the runtime penalty mentioned previously:  the global objects\n+      must be initialized before any of your own code uses them; this is\n+      guaranteed by the standard.  Like any other global object, they must\n+      be initialized once and only once.  This is typically done with a\n+      construct like the one above, and the nested class ios_base::Init is \n+      specified in the standard for just this reason.\n+   </p>\n+   <p>How does it work?  Because the header is included before any of your\n+      code, the <strong>__foo</strong> object is constructed before any of\n+      your objects.  (Global objects are built in the order in which they\n+      are declared, and destroyed in reverse order.)  The first time the\n+      constructor runs, the eight stream objects are set up.\n+   </p>\n+   <p>The <code>static</code> keyword means that each object file compiled\n+      from a source file containing &lt;iostream&gt; will have its own\n+      private copy of <strong>__foo</strong>.  There is no specified order\n+      of construction across object files (it's one of those pesky NP\n+      problems that make life so interesting), so one copy in each object\n+      file means that the stream objects are guaranteed to be set up before\n+      any of your code which uses them could run, thereby meeting the\n+      requirements of the standard.\n+   </p>\n+   <p>The penalty, of course, is that after the first copy of\n+      <strong>__foo</strong> is constructed, all the others are just wasted\n+      processor time.  The time spent is merely for an increment-and-test\n+      inside a function call, but over several dozen or hundreds of object\n+      files, that time can add up.  (It's not in a tight loop, either.)\n+   </p>\n+   <p>The lesson?  Only include &lt;iostream&gt; when you need to use one of\n+      the standard objects in that source file; you'll pay less startup\n+      time.  Only include the header files you need to in general; your\n+      compile times will go down when there's less parsing work to do.\n+   </p>\n+\n \n <!-- ####################################################### -->\n "}, {"sha": "8c40fb01e4d95e45dd524704e52a18d9fb191428", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -66,7 +66,7 @@ <h2><a name=\"4\">Source-Level Documentation</a></h2>\n <ul>\n    <li><a href=\"libstdc++-html-USERS-3.1/index.html\">for the 3.1 release</a>\n    </li>\n-   <li><a href=\"libstdc++-html-USERS-3.2/index.html\">for the 3.2 release</a>\n+   <li><a href=\"libstdc++-html-USERS-3.2/index.html\">for the 3.2.x release</a>\n    </li>\n    <li><a href=\"latest-doxygen/index.html\">&quot;the latest collection&quot;</a>\n        (for the snapshot or later; see the date on the first page)\n@@ -208,6 +208,7 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n      <li><a href=\"27_io/howto.html#7\">More on binary I/O</a></li>\n      <li><a href=\"27_io/howto.html#8\">Pathetic performance?  Ditch C.</a></li>\n      <li><a href=\"27_io/howto.html#9\">Threads and I/O</a></li>\n+     <li><a href=\"27_io/howto.html#10\">Which header?</a></li>\n    </ul>\n    </li>\n "}, {"sha": "a69d6c67c40c02df3cc46347f73ead8c443484f4", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "modified", "additions": 742, "deletions": 42, "changes": 784, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -5,22 +5,22 @@\n <table>\n <tr>\n <td align=\"left\">Doc. no.</td>\n-<td align=\"left\">J16/02-0027 = WG21 N1369</td>\n+<td align=\"left\">J16/02-0048 = WG21 N1390</td>\n </tr>\n <tr>\n <td align=\"left\">Date:</td>\n-<td align=\"left\">10 May 2002</td>\n+<td align=\"left\">10 Sep 2002</td>\n </tr>\n <tr>\n <td align=\"left\">Project:</td>\n <td align=\"left\">Programming Language C++</td>\n </tr>\n <tr>\n <td align=\"left\">Reply to:</td>\n-<td align=\"left\">Matt Austern &lt;austern@research.att.com&gt;</td>\n+<td align=\"left\">Matt Austern &lt;austern@apple.com&gt;</td>\n </tr>\n </table>\n-<h1>C++ Standard Library Active Issues List (Revision 22)</h1>\n+<h1>C++ Standard Library Active Issues List (Revision 23)</h1>\n   <p>Reference ISO/IEC IS 14882:1998(E)</p>\n   <p>Also see:</p>\n   <ul>\n@@ -78,7 +78,7 @@ <h1>C++ Standard Library Active Issues List (Revision 22)</h1>\n   <p>Public information as to how to obtain a copy of the C++ Standard,\n   join the standards committee, submit an issue, or comment on an issue\n   can be found in the C++ FAQ at <a href=\"http://www.research.att.com/~austern/csc/faq.html\">http://www.research.att.com/~austern/csc/faq.html</a>.\n-  Public discussion of C++ Standard related issues occurs on <a href=\"news:comp.std.c++\">news:comp.std.c++</a>.\n+  Public discussion of C++ Standard related issues occurs on <a href=\"news:comp.std.c%2B%2B\">news:comp.std.c++</a>.\n   </p>\n \n  <p>For committee members, files available on the committee's private\n@@ -88,6 +88,10 @@ <h1>C++ Standard Library Active Issues List (Revision 22)</h1>\n   directory as the issues list files.  </p>\n <h2>Revision History</h2>\n <ul>\n+<li>R23: \n+Pre-Santa Cruz mailing.  Added new issues <a href=\"lwg-active.html#367\">367</a>-<a href=\"lwg-active.html#382\">382</a>.\n+Moved issues in the TC to TC status.\n+</li>\n <li>R22: \n Post-Cura&ccedil;ao mailing.  Added new issues <a href=\"lwg-active.html#362\">362</a>-<a href=\"lwg-active.html#366\">366</a>.\n </li>\n@@ -1486,7 +1490,7 @@ <h2>Active Issues</h2>\n existing implementations.</p>\n <hr>\n <a name=\"225\"><h3>225.&nbsp;std:: algorithms use of other unqualified algorithms</h3></a><p>\n-<b>Section:</b>&nbsp;17.4.4.3 <a href=\"lib-intro.html#lib.global.functions\"> [lib.global.functions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;01 Apr 2000</p>\n+<b>Section:</b>&nbsp;17.4.4.3 <a href=\"lib-intro.html#lib.global.functions\"> [lib.global.functions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;01 Apr 2000</p>\n <p>Are algorithms in std:: allowed to use other algorithms without qualification, so functions in\n user namespaces might be found through Koenig lookup?</p>\n <p>For example, a popular standard library implementation includes this\n@@ -1586,13 +1590,14 @@ <h2>Active Issues</h2>\n \n <p><i>[Cura&ccedil;ao: An LWG-subgroup spent an afternoon working on issues\n 225, 226, and 229.  Their conclusion was that the issues should be\n-separated into an LWG portion (Howard will write a proposal), and a\n+separated into an LWG portion (Howard's paper, N1387=02-0045), and a\n EWG portion (Dave will write a proposal). The LWG and EWG had\n-(separate) discussions of this plan the next day.]</i></p>\n+(separate) discussions of this plan the next day.  The proposed\n+resolution for this issue is in accordance with Howard's paper.]</i></p>\n \n <hr>\n <a name=\"226\"><h3>226.&nbsp;User supplied specializations or overloads of namespace std function templates</h3></a><p>\n-<b>Section:</b>&nbsp;17.4.3.1 <a href=\"lib-intro.html#lib.reserved.names\"> [lib.reserved.names]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;01 Apr 2000</p>\n+<b>Section:</b>&nbsp;17.4.3.1 <a href=\"lib-intro.html#lib.reserved.names\"> [lib.reserved.names]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;01 Apr 2000</p>\n <p>The issues are:&nbsp;</p>\n <p>1. How can a 3rd party library implementor (lib1) write a version of a standard\n algorithm which is specialized to work with his own class template?&nbsp;</p>\n@@ -1677,6 +1682,9 @@ <h2>Active Issues</h2>\n \n <p><b>Proposed resolution:</b></p>\n \n+<p>Adopt the wording in the <b>Customization Points</b> section of\n+Howard Hinnant's paper, N1387=02-0045.</p>\n+\n <p><i>[Tokyo: Summary, &quot;There is no conforming way to extend\n std::swap for user defined templates.&quot;&nbsp; The LWG agrees that\n there is a problem.&nbsp; Would like more information before\n@@ -1734,13 +1742,14 @@ <h2>Active Issues</h2>\n \n <p><i>[Cura&ccedil;ao: An LWG-subgroup spent an afternoon working on issues\n 225, 226, and 229.  Their conclusion was that the issues should be\n-separated into an LWG portion (Howard will write a proposal), and a\n+separated into an LWG portion (Howard's paper, N1387=02-0045), and a\n EWG portion (Dave will write a proposal). The LWG and EWG had\n-(separate) discussions of this plan the next day.]</i></p>\n+(separate) discussions of this plan the next day.  The proposed\n+resolution is the one proposed by Howard.]</i></p>\n \n <hr>\n <a name=\"229\"><h3>229.&nbsp;Unqualified references of other library entities</h3></a><p>\n-<b>Section:</b>&nbsp;17.4.1.1 <a href=\"lib-intro.html#lib.contents\"> [lib.contents]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;19 Apr 2000</p>\n+<b>Section:</b>&nbsp;17.4.1.1 <a href=\"lib-intro.html#lib.contents\"> [lib.contents]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;19 Apr 2000</p>\n <p>Throughout the library chapters, the descriptions of library entities refer\n to other library entities without necessarily qualifying the names.</p>\n \n@@ -1784,13 +1793,15 @@ <h2>Active Issues</h2>\n \n <p><i>[Cura&ccedil;ao: An LWG-subgroup spent an afternoon working on issues\n 225, 226, and 229.  Their conclusion was that the issues should be\n-separated into an LWG portion (Howard will write a proposal), and a\n+separated into an LWG portion (Howard's paper, N1387=02-0045), and a\n EWG portion (Dave will write a proposal). The LWG and EWG had\n-(separate) discussions of this plan the next day.]</i></p>\n+(separate) discussions of this plan the next day.  This paper resolves\n+issues 225 and 226.  In light of that resolution, the proposed\n+resolution for the current issue makes sense.]</i></p>\n \n <hr>\n <a name=\"231\"><h3>231.&nbsp;Precision in iostream?</h3></a><p>\n-<b>Section:</b>&nbsp;22.2.2.2.2 <a href=\"lib-locales.html#lib.facet.num.put.virtuals\"> [lib.facet.num.put.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;James Kanze, Stephen Clamage&nbsp; <b>Date:</b>&nbsp; 25 Apr 2000</p>\n+<b>Section:</b>&nbsp;22.2.2.2.2 <a href=\"lib-locales.html#lib.facet.num.put.virtuals\"> [lib.facet.num.put.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;James Kanze, Stephen Clamage&nbsp; <b>Date:</b>&nbsp; 25 Apr 2000</p>\n <p>What is the following program supposed to output?</p>\n <pre>#include &lt;iostream&gt;\n \n@@ -1831,24 +1842,31 @@ <h2>Active Issues</h2>\n of the anomalies of printf:-).</p>\n <p><b>Proposed resolution:</b></p>\n <p>\n-In 22.2.2.2.2 <a href=\"lib-locales.html#lib.facet.num.put.virtuals\"> [lib.facet.num.put.virtuals]</a>, paragraph 11, change \n-&quot;if <tt>(flags &amp; fixed) != 0</tt>&quot; to \n-&quot;if <tt>(flags &amp; floatfield) == fixed ||\n-        (flags &amp; floatfield) == scientific</tt>&quot;\n+Replace 22.2.2.2.2 <a href=\"lib-locales.html#lib.facet.num.put.virtuals\"> [lib.facet.num.put.virtuals]</a>, paragraph 11, with the following \n+sentence:\n </p>\n+<blockquote>\n+For conversion from a floating-point type,\n+<tt><i>str</i>.precision()</tt> is specified in the conversion\n+specification.\n+</blockquote>\n <p><b>Rationale:</b></p>\n <p>The floatfield determines whether numbers are formatted as if\n with %f, %e, or %g.  If the <tt>fixed</tt> bit is set, it's %f,\n if <tt>scientific</tt> it's %e, and if both bits are set, or \n-neither, it's %e.</p>\n+neither, it's %g.</p>\n <p>Turning to the C standard, a precision of 0 is meaningful\n-for %f and %e, but not for %g: for %g, precision 0 is taken\n-to be the same as precision 1.</p>\n-<p>The proposed resolution has the effect that the output of\n-the above program will be &quot;1e+00&quot;.</p>\n-\n-<p><i>[Cura&ccedil;ao: Howard will send Matt improved wording dealing with\n-case not covered by current PR.]</i></p>\n+for %f and %e.  For %g, precision 0 is taken to be the same as \n+precision 1.</p>\n+<p>The proposed resolution has the effect that if neither\n+<tt>fixed</tt> nor <tt>scientific</tt> is set we'll be\n+specifying a precision of 0, which will be internally\n+turned into 1.  There's no need to call it out as a special\n+case.</p>\n+<p>The output of the above program will be &quot;1e+00&quot;.</p>\n+\n+<p><i>[Post-Cura&ccedil;ao: Howard provided improved wording covering the case\n+where precision is 0 and mode is %g.]</i></p>\n \n <hr>\n <a name=\"233\"><h3>233.&nbsp;Insertion hints in associative containers</h3></a><p>\n@@ -2354,18 +2372,38 @@ <h2>Active Issues</h2>\n <p>(Not all of these options are mutually exclusive.)</p>\n \n <p><b>Proposed resolution:</b></p>\n+<p>NAD/Future</p>\n+<p><b>Rationale:</b></p>\n+\n+<p>Throwing a bad_alloc while trying to construct a message for another\n+exception-derived class is not necessarily a bad thing.  And the\n+bad_alloc constructor already has a no throw spec on it (18.4.2.1).</p>\n+\n+<p>\n+The copy constructors of all exception-derived classes already have a\n+no throw spec.  Reference 18.6.1,  19.1 and 15.4/13.\n+</p>\n+\n+<p><b>Future:</b></p>\n+\n+<p>All involved would like to see const char* constructors added, but\n+this should probably be done for C++0X as opposed to a DR.</p>\n+\n+<p>I believe the no throw specs currently decorating these functions\n+could be improved by some kind of static no throw spec checking\n+mechanism (in a future C++ language).  As they stand, the copy\n+constructors might fail via a call to unexpected.  I think what is\n+intended here is that the copy constructors can't fail.</p>\n \n <p><i>[Toronto: some LWG members thought this was merely a QoI issue,\n but most believed that it was at least a borderline defect.  There was\n more support for nonnormative advice to implementors than for a\n normative change.]</i></p>\n \n <p><i>[Redmond: discussed, without definite conclusion.  Most LWG\n-members thought there was a real defect lurking here.  A small group\n-(Herb, Kevlin, Howard, Martin, Dave) will try to make a\n-recommendation.]</i></p>\n-\n-<p><i>[Cura&ccedil;ao: Howard will nag the others to work on a recommendation.]</i></p>\n+members thought there was a real defect lurking here.  The above\n+proposed resolution/rationale is from Howard, Herb, Kevlin,  Martin,\n+and Dave.]</i></p>\n \n <hr>\n <a name=\"258\"><h3>258.&nbsp;Missing allocator requirement</h3></a><p>\n@@ -2553,7 +2591,7 @@ <h2>Active Issues</h2>\n \n <hr>\n <a name=\"282\"><h3>282.&nbsp;What types does numpunct grouping refer to?</h3></a><p>\n-<b>Section:</b>&nbsp;22.2.2.2.2 <a href=\"lib-locales.html#lib.facet.num.put.virtuals\"> [lib.facet.num.put.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;5 Dec 2000</p>\n+<b>Section:</b>&nbsp;22.2.2.2.2 <a href=\"lib-locales.html#lib.facet.num.put.virtuals\"> [lib.facet.num.put.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;5 Dec 2000</p>\n <p>\n Paragraph 16 mistakenly singles out integral types for inserting \n thousands_sep() characters.  This conflicts with the syntax for floating \n@@ -2593,8 +2631,8 @@ <h2>Active Issues</h2>\n standard.\n ]</i></p>\n \n-<p><i>[Cura&ccedil;ao: Howard will email Bill and other implementors to try to\n-move the issue forward.]</i></p>\n+<p><i>[Post-Cura&ccedil;ao: the above proposed resolution is the consensus of\n+Howard, Bill, Pete, Benjamin, Nathan, Dietmar, Boris, and Martin.]</i></p>\n \n <hr>\n <a name=\"283\"><h3>283.&nbsp;std::replace() requirement incorrect/insufficient</h3></a><p>\n@@ -3099,22 +3137,42 @@ <h2>Active Issues</h2>\n unintended in this case.\n </p>\n <p><b>Proposed resolution:</b></p>\n+<p>In 23.2.2.4 <a href=\"lib-containers.html#lib.list.ops\"> [lib.list.ops]</a>, replace paragraps 23-25 with:</p>\n+<blockquote>\n <p>\n-Change 23.2.2.4, p23 to:\n+23 Effects: if (&amp;x == this) does nothing; otherwise, merges the two\n+sorted ranges [begin(), end()) and [x.begin(), x.end()).  The result\n+is a range in which the elements will be sorted in non-decreasing\n+order according to the ordering defined by comp; that is, for every\n+iterator i in the range other than the first, the condition comp(*i,\n+*(i - 1)) will be false.\n </p>\n-<blockquote>\n-<b>Effects</b>: If &amp;x == this, does nothing; otherwise, merges the\n-argument list into the list.\n+\n+<p>\n+24 Notes: Stable: if (&amp;x != this), then for equivalent elements in the\n+two original ranges, the elements from the original range [begin(),\n+end()) always precede the elements from the original range [x.begin(),\n+x.end()).  If (&amp;x != this) the range [x.begin(), x.end()) is empty\n+after the merge.\n+</p>\n+\n+<p>\n+25 Complexity: At most size() + x.size() - 1 applications of comp if\n+(&amp;x !  = this); otherwise, no applications of comp are performed.  If\n+an exception is thrown other than by a comparison there are no\n+effects.\n+</p>\n+\n </blockquote>\n \n-<p><i>[Copenhagen: The proposed resolution does not fix all of the\n-problems in 23.2.2.4 <a href=\"lib-containers.html#lib.list.ops\"> [lib.list.ops]</a>, p22-25.  Three different\n+<p><i>[Copenhagen: The original proposed resolution did not fix all of\n+the problems in 23.2.2.4 <a href=\"lib-containers.html#lib.list.ops\"> [lib.list.ops]</a>, p22-25.  Three different\n paragraphs (23, 24, 25) describe the effects of <tt>merge</tt>.\n Changing p23, without changing the other two, appears to introduce\n contradictions.  Additionally, &quot;merges the argument list into the\n list&quot; is excessively vague.]</i></p>\n \n-<p><i>[Cura&ccedil;ao: Robert Klarer volunteers to work on this issue.]</i></p>\n+<p><i>[Post-Cura&ccedil;ao: Robert Klarer provided new wording.]</i></p>\n \n <hr>\n <a name=\"304\"><h3>304.&nbsp;Must <tt>*a</tt> return an lvalue when <tt>a</tt> is an input iterator?</h3></a><p>\n@@ -5283,6 +5341,648 @@ <h2>Active Issues</h2>\n   basic_filebuf&lt;charT,traits&gt;* rdbuf();\n   const basic_filebuf&lt;charT,traits&gt;* rdbuf() const;\n </pre>\n+<hr>\n+<a name=\"367\"><h3>367.&nbsp;remove_copy/remove_copy_if and Input Iterators</h3></a><p>\n+<b>Section:</b>&nbsp;25.2.7 <a href=\"lib-algorithms.html#lib.alg.remove\"> [lib.alg.remove]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Anthony Williams&nbsp; <b>Date:</b>&nbsp;13 May 2002</p>\n+<p>\n+remove_copy and remove_copy_if (25.2.7 <a href=\"lib-algorithms.html#lib.alg.remove\"> [lib.alg.remove]</a>) permit their\n+input range to be marked with Input Iterators. However, since two\n+operations are required against the elements to copy (comparison and\n+assigment), when the input range uses Input Iterators, a temporary\n+copy must be taken to avoid dereferencing the iterator twice. This\n+therefore requires the value type of the InputIterator to be\n+CopyConstructible. If the iterators are at least Forward Iterators,\n+then the iterator can be dereferenced twice, or a reference to the\n+result maintained, so the temporary is not required.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Add &quot;If InputIterator does not meet the requirements of forward\n+iterator, then the value type of InputIterator must be copy\n+constructible. Otherwise copy constructible is not required.&quot; to\n+25.2.7 <a href=\"lib-algorithms.html#lib.alg.remove\"> [lib.alg.remove]</a> paragraph 6.\n+</p>\n+<hr>\n+<a name=\"368\"><h3>368.&nbsp;basic_string::replace has two &quot;Throws&quot; paragraphs</h3></a><p>\n+<b>Section:</b>&nbsp;21.3.5.6 <a href=\"lib-strings.html#lib.string::replace\"> [lib.string::replace]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Beman Dawes&nbsp; <b>Date:</b>&nbsp;3 Jun 2002</p>\n+<p>\n+21.3.5.6 <a href=\"lib-strings.html#lib.string::replace\"> [lib.string::replace]</a> basic_string::replace, second\n+signature, given in paragraph 1, has two &quot;Throws&quot; paragraphs (3 and\n+5).\n+</p>\n+\n+<p>\n+In addition, the second &quot;Throws&quot; paragraph (5) includes specification\n+(beginning with &quot;Otherwise, the function replaces ...&quot;) that should be\n+part of the &quot;Effects&quot; paragraph.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"369\"><h3>369.&nbsp;io stream objects and static ctors</h3></a><p>\n+<b>Section:</b>&nbsp;27.3 <a href=\"lib-iostreams.html#lib.iostream.objects\"> [lib.iostream.objects]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Ruslan Abdikeev&nbsp; <b>Date:</b>&nbsp;8 Jul 2002</p>\n+<p>\n+Is it safe to use standard iostream objects from constructors of\n+static objects?  Are standard iostream objects constructed and are\n+their associations established at that time?\n+</p>\n+\n+<p>Surpisingly enough, Standard does NOT require that.</p>\n+\n+<p>\n+27.3/2 [lib.iostream.objects] guarantees that standard iostream\n+objects are constructed and their associations are established before\n+the body of main() begins execution.  It also refers to ios_base::Init\n+class as the panacea for constructors of static objects.\n+</p>\n+\n+<p>\n+However, there's nothing in 27.3 [lib.iostream.objects],\n+in 27.4.2 [lib.ios.base], and in 27.4.2.1.6 [lib.ios::Init],\n+that would require implementations to allow access to standard\n+iostream objects from constructors of static objects.\n+</p>\n+\n+<p>Details:</p>\n+\n+<p>Core text refers to some magic object ios_base::Init, which will\n+be discussed below:</p>\n+\n+<blockquote>\n+    &quot;The [standard iostream] objects are constructed, and their\n+    associations are established at some time prior to or during\n+    first time an object of class basic_ios&lt;charT,traits&gt;::Init\n+    is constructed, and in any case before the body of main\n+    begins execution.&quot; (27.3/2 [lib.iostream.objects])\n+</blockquote>\n+\n+<p>\n+The first <i>non-normative</i> footnote encourages implementations\n+to initialize standard iostream objects earlier than required.\n+</p>\n+\n+<p>However, the second <i>non-normative</i> footnote makes an explicit\n+and unsupported claim:</p>\n+\n+<blockquote>\n+  &quot;Constructors and destructors for static objects can access these\n+  [standard iostream] objects to read input from stdin or write output\n+  to stdout or stderr.&quot; (27.3/2 footnote 265 [lib.iostream.objects])\n+</blockquote>\n+\n+<p>\n+The only bit of magic is related to that ios_base::Init class.  AFAIK,\n+the rationale behind ios_base::Init was to bring an instance of this\n+class to each translation unit which #included &lt;iostream&gt; or\n+related header.  Such an inclusion would support the claim of footnote\n+quoted above, because in order to use some standard iostream object it\n+is necessary to #include &lt;iostream&gt;.\n+</p>\n+\n+<p>\n+However, while Standard explicitly describes ios_base::Init as\n+an appropriate class for doing the trick, I failed to found a\n+mention of an _instance_ of ios_base::Init in Standard.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+At the end of header &lt;iostream&gt; synopsis in 27.3 <a href=\"lib-iostreams.html#lib.iostream.objects\"> [lib.iostream.objects]</a>\n+</p>\n+\n+<pre>\n+       namespace std\n+       {\n+          ... extern istream cin; ...\n+</pre>\n+\n+<p>add the following lines</p>\n+\n+<pre>\n+          namespace\n+          {\n+             ios_base::Init &lt;some_implementation_defined_name&gt;;\n+          }\n+        }\n+</pre>\n+<hr>\n+<a name=\"370\"><h3>370.&nbsp;Minor error in basic_istream::get</h3></a><p>\n+<b>Section:</b>&nbsp;27.6.1.3 <a href=\"lib-iostreams.html#lib.istream.unformatted\"> [lib.istream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;15 Jul 2002</p>\n+<p>Defect report for description of basic_istream::get (section 27.6.1.3 <a href=\"lib-iostreams.html#lib.istream.unformatted\"> [lib.istream.unformatted]</a>), paragraph 15. The description for the get function\n+with the following signature:</p>\n+\n+<pre>\n+  basic_istream&lt;charT,traits&gt;&amp; get(basic_streambuf&lt;char_type,traits&gt;&amp;\n+  sb);\n+</pre>\n+\n+<p>is incorrect. It reads</p>\n+\n+<blockquote>\n+  Effects: Calls get(s,n,widen('\\n'))\n+</blockquote>\n+\n+<p>which I believe should be:</p>\n+\n+<blockquote>\n+  Effects: Calls get(sb,widen('\\n'))\n+</blockquote>\n+<p><b>Proposed resolution:</b></p>\n+<p>Change the <b>Effects</b> paragraph to:</p>\n+<blockquote>\n+  Effects: Calls get(sb,widen('\\n'))\n+</blockquote>\n+<hr>\n+<a name=\"371\"><h3>371.&nbsp;Stability of multiset and multimap member functions</h3></a><p>\n+<b>Section:</b>&nbsp;23.1 <a href=\"lib-containers.html#lib.container.requirements\"> [lib.container.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Frank Compagner&nbsp; <b>Date:</b>&nbsp;20 Jul 2002</p>\n+<p>\n+The requirements for multiset and multimap containers (23.1\n+[lib.containers.requirements], 23.1.2 [lib.associative.reqmnts],\n+23.3.2 [lib.multimap] and 23.3.4 [lib.multiset]) make no mention of\n+the stability of the required (mutating) member functions. It appears\n+the standard allows these functions to reorder equivalent elements of\n+the container at will, yet the pervasive red-black tree implementation\n+appears to provide stable behaviour.\n+</p>\n+\n+<p>This is of most concern when considering the behaviour of erase().\n+A stability requirement would guarantee the correct working of the\n+following 'idiom' that removes elements based on a certain predicate\n+function.\n+</p>\n+\n+<pre>\n+  multimap&lt;int, int&gt; m;\n+  multimap&lt;int, int&gt;::iterator i = m.begin();\n+  while (i != m.end()) {\n+      if (pred(i))\n+          m.erase (i++);\n+      else\n+          ++i;\n+  }\n+</pre>\n+\n+<p>\n+Although clause 23.1.2/8 guarantees that i remains a valid iterator\n+througout this loop, absence of the stability requirement could\n+potentially result in elements being skipped. This would make\n+this code incorrect, and, furthermore, means that there is no way\n+of erasing these elements without iterating first over the entire\n+container, and second over the elements to be erased. This would\n+be unfortunate, and have a negative impact on both performance and\n+code simplicity.\n+</p>\n+\n+<p>\n+If the stability requirement is intended, it should be made explicit\n+(probably through an extra paragraph in clause 23.1.2).\n+</p>\n+<p>\n+If it turns out stability cannot be guaranteed, i'd argue that a\n+remark or footnote is called for (also somewhere in clause 23.1.2) to\n+warn against relying on stable behaviour (as demonstrated by the code\n+above).  If most implementations will display stable behaviour, any\n+problems emerging on an implementation without stable behaviour will\n+be hard to track down by users. This would also make the need for an\n+erase_if() member function that much greater.\n+</p>\n+\n+<p>This issue is somewhat related to LWG issue <a href=\"lwg-closed.html#130\">130</a>.</p>\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"372\"><h3>372.&nbsp;Inconsistent description of stdlib exceptions</h3></a><p>\n+<b>Section:</b>&nbsp;17.4.4.8 <a href=\"lib-intro.html#lib.res.on.exception.handling\"> [lib.res.on.exception.handling]</a>, 18.6.1 <a href=\"lib-support.html#lib.exception\"> [lib.exception]</a>, &nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Randy Maddox&nbsp; <b>Date:</b>&nbsp;22 Jul 2002</p>\n+\n+<p>Paragraph 3 under clause 17.4.4.8 <a href=\"lib-intro.html#lib.res.on.exception.handling\"> [lib.res.on.exception.handling]</a>, Restrictions on\n+Exception Handling, states that &quot;Any other functions defined in the\n+C++ Standard Library that do not have an exception-specification may\n+throw implementation-defined exceptions unless otherwise specified.&quot;\n+This statement is followed by a reference to footnote 178 at the\n+bottom of that page which states, apparently in reference to the C++\n+Standard Library, that &quot;Library implementations are encouraged (but\n+not required) to report errors by throwing exceptions from (or derived\n+from) the standard exceptions.&quot;</p>\n+\n+<p>These statements appear to be in direct contradiction to clause\n+18.6.1 <a href=\"lib-support.html#lib.exception\"> [lib.exception]</a>, which states &quot;The class exception defines the\n+base class for the types of objects thrown as exceptions by the C++\n+Standard library components ...&quot;.</p>\n+\n+<p>Is this inconsistent?</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"373\"><h3>373.&nbsp;Are basic_istream and basic_ostream to use (exceptions()&amp;badbit) != 0 ?</h3></a><p>\n+<b>Section:</b>&nbsp;27.6.1.2.1 <a href=\"lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a>, 27.6.2.5.1 <a href=\"lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Keith Baker&nbsp; <b>Date:</b>&nbsp;23 Jul 2002</p>\n+\n+<p>\n+In 27.6.1.2.1 <a href=\"lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a> and 27.6.2.5.1 <a href=\"lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>\n+(exception()&amp;badbit) != 0 is used in testing for rethrow, yet\n+exception() is the constructor to class std::exception in 18.6.1 <a href=\"lib-support.html#lib.exception\"> [lib.exception]</a> that has no return type. Should member function\n+exceptions() found in 27.4.4 <a href=\"lib-iostreams.html#lib.ios\"> [lib.ios]</a> be used instead?\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+</p>\n+<hr>\n+<a name=\"374\"><h3>374.&nbsp;moneypunct::frac_digits returns int not unsigned</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.6.3.1 <a href=\"lib-locales.html#lib.locale.moneypunct.members\"> [lib.locale.moneypunct.members]</a>, 22.2.6.3.2 <a href=\"lib-locales.html#lib.locale.moneypunct.virtuals\"> [lib.locale.moneypunct.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;8 Aug 2002</p>\n+<p>\n+In section 22.2.6.3.1 <a href=\"lib-locales.html#lib.locale.moneypunct.members\"> [lib.locale.moneypunct.members]</a>, frac_digits() returns type\n+&quot;int&quot;. This implies that frac_digits() might return a negative value,\n+but a negative value is nonsensical. It should return &quot;unsigned&quot;.\n+</p>\n+\n+<p>\n+Similarly, in section 22.2.6.3.2 <a href=\"lib-locales.html#lib.locale.moneypunct.virtuals\"> [lib.locale.moneypunct.virtuals]</a>, do_frac_digits()\n+should return &quot;unsigned&quot;.\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"375\"><h3>375.&nbsp;basic_ios should be ios_base in 27.7.1.3</h3></a><p>\n+<b>Section:</b>&nbsp;27.7.1.3 <a href=\"lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n+<p>\n+In Section 27.7.1.3 <a href=\"lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>: Table 90, Table 91, and paragraph\n+14 all contain references to &quot;basic_ios::&quot; which should be\n+&quot;ios_base::&quot;.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Change all references to &quot;basic_ios&quot; in Table 90, Table 91, and\n+paragraph 14 to &quot;ios_base&quot;.\n+</p>\n+<hr>\n+<a name=\"376\"><h3>376.&nbsp;basic_streambuf semantics</h3></a><p>\n+<b>Section:</b>&nbsp;27.7.1.3 <a href=\"lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n+<p>\n+In Section 27.7.1.3 <a href=\"lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>, Table 90, the implication is that\n+the four conditions should be mutually exclusive, but they are not.\n+The first two cases, as written, are subcases of the third. I think it\n+would be clearer if the conditions were rewritten as follows:\n+</p>\n+\n+<blockquote>\n+<p>\n+  (which &amp; (ios_base::in|ios_base::out)) == ios_base::in\n+</p>\n+\n+<p>\n+  (which &amp; (ios_base::in|ios_base::out)) == ios_base::out\n+</p>\n+\n+<p>\n+  (which &amp; (ios_base::in|ios_base::out)) == \n+(ios_base::in|ios_base::out)\n+   and way == either ios_base::beg or ios_base::end\n+</p>\n+\n+<p>Otherwise</p>\n+</blockquote>\n+\n+<p>\n+As written, it is unclear what should be the result if cases 1 &amp; 2\n+are true, but case 3 is false, e.g.,\n+</p>\n+\n+<blockquote>\n+  seekoff(0, ios_base::cur, ios_base::in | ios_base::out)\n+</blockquote>\n+\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"377\"><h3>377.&nbsp;basic_string::insert and length_error</h3></a><p>\n+<b>Section:</b>&nbsp;21.3.5.4 <a href=\"lib-strings.html#lib.string::insert\"> [lib.string::insert]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;16 Aug 2002</p>\n+<p>\n+Section 21.3.5.4 <a href=\"lib-strings.html#lib.string::insert\"> [lib.string::insert]</a>, paragraph 4, contains the following,\n+&quot;Then throws length_error if size() &gt;= npos - rlen.&quot;\n+</p>\n+\n+<p>\n+Related to DR 83, this sentence should probably be removed.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"378\"><h3>378.&nbsp;locale immutability and locale::operator=()</h3></a><p>\n+<b>Section:</b>&nbsp;22.1.1 <a href=\"lib-locales.html#lib.locale\"> [lib.locale]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n+<p>\n+I think there is a problem with 22.1.1, p6 which says that\n+</p>\n+<pre>\n+    -6- An instance of locale is immutable; once a facet reference\n+        is obtained from it, that reference remains usable as long\n+        as the locale value itself exists.\n+</pre>\n+<p>\n+and 22.1.1.2, p4:\n+</p>\n+<pre>\n+    const locale&amp; operator=(const locale&amp; other) throw();\n+\n+    -4- Effects: Creates a copy of other, replacing the current value.\n+</pre>\n+<p>\n+How can a reference to a facet obtained from a locale object remain\n+valid after an assignment that clearly must replace all the facets\n+in the locale object? Imagine a program such as this\n+</p>\n+<pre>\n+    std::locale loc (&quot;de_DE&quot;);\n+    const std::ctype&lt;char&gt; &amp;r0 = std::use_facet&lt;std::ctype&lt;char&gt; &gt;(loc);\n+    loc = std::locale (&quot;en_US&quot;);\n+    const std::ctype&lt;char&gt; &amp;r1 = std::use_facet&lt;std::ctype&lt;char&gt; &gt;(loc);\n+</pre>\n+<p>\n+Is r0 really supposed to be preserved and destroyed only when loc goes\n+out of scope?\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Suggest to replace 22.1.1 <a href=\"lib-locales.html#lib.locale\"> [lib.locale]</a>, p6 with\n+</p>\n+<pre>\n+    -6- Unless assigned a new value, locale objects are immutable;\n+        once a facet reference is obtained from it, that reference\n+        remains usable as long as the locale object itself exists\n+        or until the locale object is assigned the value of another,\n+        distinct locale object.\n+</pre>\n+<hr>\n+<a name=\"379\"><h3>379.&nbsp;nonsensical ctype::do_widen() requirement</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.1.1.2 <a href=\"lib-locales.html#lib.locale.ctype.virtuals\"> [lib.locale.ctype.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n+<p>\n+The last sentence in 22.2.1.1.2, p11 below doesn't seem to make sense.\n+</p>\n+<pre>\n+  charT do_widen (char c) const;\n+\n+  -11- Effects: Applies the simplest reasonable transformation from\n+       a char value or sequence of char values to the corresponding\n+       charT value or values. The only characters for which unique\n+       transformations are required are those in the basic source\n+       character set (2.2). For any named ctype category with a\n+       ctype&lt;charT&gt; facet ctw and valid ctype_base::mask value\n+       M (is(M, c) || !ctw.is(M, do_widen(c))) is true.\n+</pre>\n+<p>\n+Shouldn't the last sentence instead read\n+</p>\n+<pre>\n+       For any named ctype category with a ctype&lt;char&gt; facet ctc\n+       and valid ctype_base::mask value M\n+       (ctc.is(M, c) || !is(M, do_widen(c))) is true.\n+</pre>\n+<p>\n+I.e., if the narrow character c is not a member of a class of\n+characters then neither is the widened form of c. (To paraphrase\n+footnote 224.)\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Replace the last sentence of 22.2.1.1.2 <a href=\"lib-locales.html#lib.locale.ctype.virtuals\"> [lib.locale.ctype.virtuals]</a>, p11 with the\n+following text:\n+</p>\n+<pre>\n+       For any named ctype category with a ctype&lt;char&gt; facet ctc\n+       and valid ctype_base::mask value M\n+       (ctc.is(M, c) || !is(M, do_widen(c))) is true.\n+</pre>\n+<hr>\n+<a name=\"380\"><h3>380.&nbsp;typos in codecvt tables 53 and 54</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n+<p>\n+Tables 53 and 54 in 22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a> are both titled &quot;convert\n+result values,&quot; when surely &quot;do_in/do_out result values&quot; must have\n+been intended for Table 53 and &quot;do_unshift result values&quot; for Table\n+54.\n+</p>\n+<p>\n+Table 54, row 3 says that the meaning of partial is &quot;more characters\n+needed to be supplied to complete termination.&quot; The function is not\n+supplied any characters, it is given a buffer which it fills with\n+characters or, more precisely, destination elements (i.e., an escape\n+sequence). So partial means that space for more than (to_limit - to)\n+destination elements was needed to terminate a sequence given the\n+value of state.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Change the title of Table 53 to &quot;do_in/do_out result values&quot; and\n+the title of Table 54 to &quot;do_unshift result values.&quot;\n+</p>\n+<p>\n+Change the text in Table 54, row 3, under the heading Meaning to\n+&quot;space for more than (to_limit - to) destination elements was\n+needed to terminate a sequence given the value of state.&quot;\n+</p>\n+<hr>\n+<a name=\"381\"><h3>381.&nbsp;detection of invalid mbstate_t in codecvt</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n+<p>\n+All but one codecvt member functions that take a state_type argument\n+list as one of their preconditions that the state_type argument have\n+a valid value. However, according to 22.2.1.5.2, p6,\n+codecvt::do_unshift() is the only codecvt member that is supposed to\n+return error if the state_type object is invalid.\n+</p>\n+\n+<p>\n+It seems to me that the treatment of state_type by all codecvt member\n+functions should be the same and the current requirements should be\n+changed. Since the detection of invalid state_type values may be\n+difficult in general or computationally expensive in some specific\n+cases, I propose the following:\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Add a new paragraph before 22.2.1.5.2, p5, and after the function\n+declaration below\n+</p>\n+<pre>\n+    result do_unshift(stateT&amp; state,\n+    externT* to, externT* to_limit, externT*&amp; to_next) const;\n+</pre>\n+<p>\n+as follows:\n+</p>\n+<pre>\n+    Requires: (to &lt;= to_end) well defined and true; state initialized,\n+    if at the beginning of a sequence, or else equal to the result of\n+    converting the preceding characters in the sequence.\n+</pre>\n+<p>\n+and change the text in Table 54, row 4, under the heading Meaning\n+from\n+</p>\n+<pre>\n+    state has invalid value\n+</pre>\n+<p>\n+to\n+</p>\n+<pre>\n+    an unspecified error has occurred\n+</pre>\n+<p>\n+The return value of error should allow implementers to detect and\n+report invalid state values but shouldn't require it, hence the\n+word &quot;unspecified&quot; in the new wording.\n+</p>\n+<hr>\n+<a name=\"382\"><h3>382.&nbsp;codecvt do_in/out result</h3></a><p>\n+<b>Section:</b>&nbsp;22.2.1.5 <a href=\"lib-locales.html#lib.locale.codecvt\"> [lib.locale.codecvt]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;30 Aug  2002</p>\n+<p>\n+It seems that the descriptions of codecvt do_in() and do_out() leave\n+sufficient room for interpretation so that two implementations of\n+codecvt may not work correctly with the same filebuf. Specifically,\n+the following seems less than adequately specified:\n+</p>\n+\n+<ol>\n+<li>\n+  the conditions under which the functions terminate\n+</li>\n+<li>\n+  precisely when the functions return ok\n+</li>\n+<li>\n+  precisely when the functions return partial\n+</li>\n+<li>\n+  the full set of conditions when the functions return error\n+</li>\n+</ol>\n+\n+<ol>\n+<li>\n+   22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>, p2 says this about the effects of the\n+   function: ...Stops if it encounters a character it cannot\n+   convert...  This assumes that there *is* a character to\n+   convert. What happens when there is a sequence that doesn't form a\n+   valid source character, such as an unassigned or invalid UNICODE\n+   character, or a sequence that cannot possibly form a character\n+   (e.g., the sequence &quot;\\xc0\\xff&quot; in UTF-8)?\n+</li>\n+<li>\n+   Table 53 says that the function returns codecvt_base::ok\n+   to indicate that the function(s) &quot;completed the conversion.&quot;\n+   Suppose that the source sequence is &quot;\\xc0\\x80&quot; in UTF-8,\n+   with from pointing to '\\xc0' and (from_end==from + 1).\n+   It is not clear whether the return value should be ok\n+   or partial (see below).\n+</li>\n+<li>\n+   Table 53 says that the function returns codecvt_base::partial\n+   if &quot;not all source characters converted.&quot; With the from pointers\n+   set up the same way as above, it is not clear whether the return\n+   value should be partial or ok (see above).\n+</li>\n+<li>\n+   Table 53, in the row describing the meaning of error mistakenly\n+   refers to a &quot;from_type&quot; character, without the symbol from_type\n+   having been defined. Most likely, the word &quot;source&quot; character\n+   is intended, although that is not sufficient. The functions\n+   may also fail when they encounter an invalid source sequence\n+   that cannot possibly form a valid source character (e.g., as\n+   explained in bullet 1 above).\n+</li>\n+</ol>\n+<p>\n+Finally, the conditions described at the end of 22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>, p4 don't seem to be possible:\n+</p>\n+<blockquote>\n+    &quot;A return value of partial, if (from_next == from_end),\n+    indicates that either the destination sequence has not\n+    absorbed all the available destination elements, or that\n+    additional source elements are needed before another\n+    destination element can be produced.&quot;\n+</blockquote>\n+<p>\n+If the value is partial, it's not clear to me that (from_next\n+==from_end) could ever hold if there isn't enough room\n+in the destination buffer. In order for (from_next==from_end) to\n+hold, all characters in that range must have been successfully\n+converted (according to 22.2.1.5.2 <a href=\"lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>, p2) and since there are no\n+further source characters to convert, no more room in the\n+destination buffer can be needed.\n+</p>\n+<p>\n+It's also not clear to me that (from_next==from_end) could ever\n+hold if additional source elements are needed to produce another\n+destination character (not element as incorrectly stated in the\n+text). partial is returned if &quot;not all source characters have\n+been converted&quot; according to Table 53, which also implies that\n+(from_next==from) does NOT hold.\n+</p>\n+<p>\n+Could it be that the intended qualifying condition was actually\n+(from_next != from_end), i.e., that the sentence was supposed\n+to read\n+</p>\n+<blockquote>\n+    &quot;A return value of partial, if (from_next != from_end),...&quot;\n+</blockquote>\n+<p>\n+which would make perfect sense, since, as far as I understand it,\n+partial can only occur if (from_next != from_end)?\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+To address these issues, I propose that paragraphs 2, 3, and 4\n+be rewritten as follows. The proposal incorporates the accepted\n+resolution of lwg issue 19.\n+</p>\n+<pre>\n+-2- Effects: Converts characters in the range of source elements\n+    [from, from_end), placing the results in sequential positions\n+    starting at destination to. Converts no more than (from_end&shy;from)\n+    source elements, and stores no more than (to_limit&shy;to)\n+    destination elements.\n+\n+    Stops if it encounters a sequence of source elements it cannot\n+    convert to a valid destination character. It always leaves the\n+    from_next and to_next pointers pointing one beyond the last\n+    element successfully converted.\n+\n+    [Note: If returns noconv, internT and externT are the same type\n+    and the converted sequence is identical to the input sequence\n+    [from, from_next). to_next is set equal to to, the value of\n+    state is unchanged, and there are no changes to the values in\n+    [to, to_limit). --end note]\n+\n+-3- Notes: Its operations on state are unspecified.\n+    [Note: This argument can be used, for example, to maintain shift\n+    state, to specify conversion options (such as count only), or to\n+    identify a cache of seek offsets. --end note]\n+\n+-4- Returns: An enumeration value, as summarized in Table 53:\n+\n+    Table 53 -- do_in/do_out result values\n+\n+     Value      Meaning\n+    +---------+----------------------------------------------------+\n+    | ok      | successfully completed the conversion of all       |\n+    |         | complete characters in the source range            |\n+    +---------+----------------------------------------------------+\n+    | partial | the characters in the source range would, after    |\n+    |         | conversion, require space greater than that        |\n+    |         | available in the destination range                 |\n+    +---------+----------------------------------------------------+\n+    | error   | encountered either a sequence of elements in the   |\n+    |         | source range forming a valid source character that |\n+    |         | could not be converted to a destination character, |\n+    |         | or a sequence of elements in the source range that |\n+    |         | could not possibly form a valid source character   |\n+    +---------+----------------------------------------------------+\n+    | noconv  | internT and externT are the same type, and input   |\n+    |         | sequence is identical to converted sequence        |\n+    +---------+----------------------------------------------------+\n+\n+    A return value of partial, i.e., if (from_next != from_end),\n+    indicates that either the destination sequence has not absorbed\n+    all the available destination elements, or that additional\n+    source elements are needed before another destination character\n+    can be produced.\n+</pre>\n <p>----- End of document -----</p>\n </body>\n </html>"}, {"sha": "41ae2f822c65c8751e4833e7de4145a0cc92835f", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "modified", "additions": 134, "deletions": 130, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=664ce87016fc38275e05614ee0907b8dd40f2094"}, {"sha": "f7a9b0ac708a9e4d7a7aafe5387b398400571a25", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -70,7 +70,8 @@ <h1>Questions</h1>\n          <li><a href=\"#3_5\"><code>_XOPEN_SOURCE</code> /\n                             <code>_GNU_SOURCE</code> / etc is always defined</a>\n          </li>\n-         <li><a href=\"#3_6\">OS X ctype.h is broken!  How can I hack it?</a> </li>\n+         <li><a href=\"#3_6\">OS X ctype.h is broken!  How can I hack it?</a></li>\n+         <li><a href=\"#3_7\">Threading is broken on i386</a></li>\n       </ol>\n    </li>\n \n@@ -497,6 +498,18 @@ <h2><a name=\"3_6\">3.6 OS X ctype.h is broken!  How can I hack it?</a></h2>\n          link to the solution.</a>\n       </p>\n \n+<hr />\n+   <h2><a name=\"3_7\">Threading is broken on i386</a></h2>\n+      <p>Support for atomic integer operations is/was broken on i386\n+         platforms.  The assembly code accidentally used opcodes that are\n+         only available on the i486 and later.  So if you configured GCC\n+         to target, for example, i386-linux, but actually used the programs\n+\t on an i686, then you would encounter no problems.  Only when\n+\t actually running the code on a i386 will the problem appear.  \n+      </p>\n+      <p>This is fixed in 3.2.2.\n+      </p>\n+\n <hr />\n <h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n    <em>Note that this section can get rapdily outdated -- such is the"}, {"sha": "3ea90597d43a688fb087a4af9b8a356066eedc0f", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 423, "deletions": 409, "changes": 832, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664ce87016fc38275e05614ee0907b8dd40f2094/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=664ce87016fc38275e05614ee0907b8dd40f2094", "patch": "@@ -1,8 +1,8 @@\n \n                      libstdc++ Frequently Asked Questions\n \n-   The   latest   version   of  this  document  is  always  available  at\n-   [1]http://gcc.gnu.org/onlinedocs/libstdc++/faq/.        The       main\n+   The latest version of this document is always available at\n+   [1]http://gcc.gnu.org/onlinedocs/libstdc++/faq/. The main\n    documentation page is at\n    [2]http://gcc.gnu.org/onlinedocs/libstdc++/documentation.html.\n \n@@ -34,215 +34,216 @@\n          4. [24]I can't use 'long long' on Solaris\n          5. [25]_XOPEN_SOURCE / _GNU_SOURCE / etc is always defined\n          6. [26]OS X ctype.h is broken! How can I hack it?\n-    4. [27]Known Bugs and Non-Bugs\n-         1. [28]What works already?\n-         2. [29]Bugs in gcc/g++ (not libstdc++-v3)\n-         3. [30]Bugs in the C++ language/lib specification\n-         4. [31]Things in libstdc++ that only look like bugs\n-               o [32]reopening a stream fails\n-               o [33]-Weffc++ complains too much\n-               o [34]\"ambiguous  overloads\"  after including an old-style\n+         7. [27]Threading is broken on i386\n+    4. [28]Known Bugs and Non-Bugs\n+         1. [29]What works already?\n+         2. [30]Bugs in gcc/g++ (not libstdc++-v3)\n+         3. [31]Bugs in the C++ language/lib specification\n+         4. [32]Things in libstdc++ that only look like bugs\n+               o [33]reopening a stream fails\n+               o [34]-Weffc++ complains too much\n+               o [35]\"ambiguous overloads\" after including an old-style\n                  header\n-               o [35]The g++-3 headers are not ours\n-               o [36]compilation errors from streambuf.h\n-               o [37]errors about *Concept and constraints in the STL...\n-               o [38]program   crashes  when  using  library  code  in  a\n+               o [36]The g++-3 headers are not ours\n+               o [37]compilation errors from streambuf.h\n+               o [38]errors about *Concept and constraints in the STL...\n+               o [39]program crashes when using library code in a\n                  dynamically-loaded library\n-         5. [39]Aw, that's easy to fix!\n-    5. [40]Miscellaneous\n-         1. [41]string::iterator is not char*; vector<T>::iterator is not\n+         5. [40]Aw, that's easy to fix!\n+    5. [41]Miscellaneous\n+         1. [42]string::iterator is not char*; vector<T>::iterator is not\n             T*\n-         2. [42]What's next after libstdc++-v3?\n-         3. [43]What about the STL from SGI?\n-         4. [44]Extensions and Backward Compatibility\n-         5. [45][removed]\n-         6. [46]Is libstdc++-v3 thread-safe?\n-         7. [47]How do I get a copy of the ISO C++ Standard?\n-         8. [48]What's an ABI and why is it so messy?\n+         2. [43]What's next after libstdc++-v3?\n+         3. [44]What about the STL from SGI?\n+         4. [45]Extensions and Backward Compatibility\n+         5. [46][removed]\n+         6. [47]Is libstdc++-v3 thread-safe?\n+         7. [48]How do I get a copy of the ISO C++ Standard?\n+         8. [49]What's an ABI and why is it so messy?\n      _________________________________________________________________\n \n                             1.0 General Information\n \n 1.1 What is libstdc++-v3?\n \n    The GNU Standard C++ Library v3 is an ongoing project to implement the\n-   ISO  14882 Standard C++ library as described in chapters 17 through 27\n+   ISO 14882 Standard C++ library as described in chapters 17 through 27\n    and annex D. As the library reaches stable plateaus, it is captured in\n-   a  snapshot  and  released.  The  latest release is [49]the fourteenth\n+   a snapshot and released. The latest release is [50]the fourteenth\n    snapshot but newer versions have been included in recent GCC releases.\n-   For  those  who  want  to see exactly how far the project has come, or\n-   just  want  the  latest  bleeding-edge  code, the up-to-date source is\n-   available  over  anonymous  CVS,  and can even be browsed over the Web\n-   (see [50]1.4 below).\n+   For those who want to see exactly how far the project has come, or\n+   just want the latest bleeding-edge code, the up-to-date source is\n+   available over anonymous CVS, and can even be browsed over the Web\n+   (see [51]1.4 below).\n \n-   The  older  libstdc++-v2 project is no longer maintained; the code has\n-   been  completely replaced and rewritten. [51]If you are using V2, then\n+   The older libstdc++-v2 project is no longer maintained; the code has\n+   been completely replaced and rewritten. [52]If you are using V2, then\n    you need to report bugs to your system vendor, not to the V3 list.\n \n    A more formal description of the V3 goals can be found in the official\n-   [52]design document.\n+   [53]design document.\n      _________________________________________________________________\n \n 1.2 Why should I use libstdc++?\n \n    The completion of the ISO C++ standardization gave the C++ community a\n-   powerful  set  of  reuseable  tools  in  the  form of the C++ Standard\n-   Library.  However,  all existing C++ implementations are (as the Draft\n-   Standard  used to say) \"incomplet and incorrekt,\" and many suffer from\n+   powerful set of reuseable tools in the form of the C++ Standard\n+   Library. However, all existing C++ implementations are (as the Draft\n+   Standard used to say) \"incomplet and incorrekt,\" and many suffer from\n    limitations of the compilers that use them.\n \n-   The  GNU  C/C++/FORTRAN/<pick-a-language>  compiler (gcc, g++, etc) is\n+   The GNU C/C++/FORTRAN/<pick-a-language> compiler (gcc, g++, etc) is\n    widely considered to be one of the leading compilers in the world. Its\n-   development  has  recently been taken over by the [53]GCC team. All of\n-   the  rapid development and near-legendary [54]portability that are the\n+   development has recently been taken over by the [54]GCC team. All of\n+   the rapid development and near-legendary [55]portability that are the\n    hallmarks of an open-source project are being applied to libstdc++.\n \n-   That  means  that  all  of the Standard classes and functions (such as\n-   string,  vector<>, iostreams, and algorithms) will be freely available\n-   and  fully  compliant.  Programmers will no longer need to \"roll their\n+   That means that all of the Standard classes and functions (such as\n+   string, vector<>, iostreams, and algorithms) will be freely available\n+   and fully compliant. Programmers will no longer need to \"roll their\n    own\" nor be worried about platform-specific incompatibilities.\n      _________________________________________________________________\n \n 1.3 Who's in charge of it?\n \n    The libstdc++ project is contributed to by several developers all over\n-   the  world,  in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n-   Dos  Reis, Phil Edwards, Ulrich Drepper, Loren James Rittle, and Paolo\n+   the world, in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n+   Dos Reis, Phil Edwards, Ulrich Drepper, Loren James Rittle, and Paolo\n    Carlini are the lead maintainers of the CVS archive.\n \n-   Development  and  discussion  is  held  on the libstdc++ mailing list.\n-   Subscribing  to  the  list, or searching the list archives, is open to\n-   everyone.  You can read instructions for doing so on the [55]homepage.\n+   Development and discussion is held on the libstdc++ mailing list.\n+   Subscribing to the list, or searching the list archives, is open to\n+   everyone. You can read instructions for doing so on the [56]homepage.\n    If you have questions, ideas, code, or are just curious, sign up!\n      _________________________________________________________________\n \n 1.4 How do I get libstdc++?\n \n-   The  fourteenth (and latest) snapshot of libstdc++-v3 is [56]available\n+   The fourteenth (and latest) snapshot of libstdc++-v3 is [57]available\n    via ftp.\n \n-   The  [57]homepage  has  instructions  for  retrieving  the  latest CVS\n+   The [58]homepage has instructions for retrieving the latest CVS\n    sources, and for browsing the CVS sources over the web.\n \n-   The  subset  commonly known as the Standard Template Library (chapters\n-   23  through  25,  mostly) is adapted from the final release of the SGI\n+   The subset commonly known as the Standard Template Library (chapters\n+   23 through 25, mostly) is adapted from the final release of the SGI\n    STL.\n      _________________________________________________________________\n \n 1.5 When is libstdc++ going to be finished?\n \n-   Nathan  Myers  gave  the best of all possible answers, responding to a\n+   Nathan Myers gave the best of all possible answers, responding to a\n    Usenet article asking this question: Sooner, if you help.\n      _________________________________________________________________\n \n 1.6 How do I contribute to the effort?\n \n-   Here  is  [58]a page devoted to this topic. Subscribing to the mailing\n-   list  (see  above,  or  the  homepage) is a very good idea if you have\n-   something  to  contribute, or if you have spare time and want to help.\n+   Here is [59]a page devoted to this topic. Subscribing to the mailing\n+   list (see above, or the homepage) is a very good idea if you have\n+   something to contribute, or if you have spare time and want to help.\n    Contributions don't have to be in the form of source code; anybody who\n-   is  willing  to  help write documentation, for example, or has found a\n+   is willing to help write documentation, for example, or has found a\n    bug in code that we all thought was working, is more than welcome!\n      _________________________________________________________________\n \n 1.7 What happened to libg++? I need that!\n \n-   The  most  recent  libg++ README states that libg++ is no longer being\n-   actively  maintained.  It  should not be used for new projects, and is\n+   The most recent libg++ README states that libg++ is no longer being\n+   actively maintained. It should not be used for new projects, and is\n    only being kicked along to support older code.\n \n-   The  libg++  was  designed  and  created when there was no Standard to\n-   provide  guidance.  Classes  like linked lists are now provided for by\n-   list<T>  and  do not need to be created by genclass. (For that matter,\n-   templates  exist now and are well-supported, whereas genclass (mostly)\n+   The libg++ was designed and created when there was no Standard to\n+   provide guidance. Classes like linked lists are now provided for by\n+   list<T> and do not need to be created by genclass. (For that matter,\n+   templates exist now and are well-supported, whereas genclass (mostly)\n    predates them.)\n \n-   There  are  other  classes in libg++ that are not specified in the ISO\n+   There are other classes in libg++ that are not specified in the ISO\n    Standard (e.g., statistical analysis). While there are a lot of really\n-   useful  things that are used by a lot of people (e.g., statistics :-),\n-   the  Standards  Committee couldn't include everything, and so a lot of\n+   useful things that are used by a lot of people (e.g., statistics :-),\n+   the Standards Committee couldn't include everything, and so a lot of\n    those \"obvious\" classes didn't get included.\n \n-   Since  libstdc++ is an implementation of the Standard Library, we have\n-   no  plans  at  this  time  to  include  non-Standard  utilities in the\n-   implementation,  however  handy  they are. (The extensions provided in\n-   the  SGI  STL  aren't  maintained  by  us  and  don't get a lot of our\n-   attention,  because  they  don't  require  a  lot  of our time.) It is\n-   entirely  plausable  that  the  \"useful  stuff\"  from  libg++ might be\n-   extracted  into  an  updated  utilities library, but nobody has stated\n+   Since libstdc++ is an implementation of the Standard Library, we have\n+   no plans at this time to include non-Standard utilities in the\n+   implementation, however handy they are. (The extensions provided in\n+   the SGI STL aren't maintained by us and don't get a lot of our\n+   attention, because they don't require a lot of our time.) It is\n+   entirely plausable that the \"useful stuff\" from libg++ might be\n+   extracted into an updated utilities library, but nobody has stated\n    such a project yet.\n \n-   (The  [59]Boost site houses free C++ libraries that do varying things,\n-   and  happened  to  be  started  by members of the Standards Committee.\n+   (The [60]Boost site houses free C++ libraries that do varying things,\n+   and happened to be started by members of the Standards Committee.\n    Certain \"useful stuff\" classes will probably migrate there.)\n \n-   For the bold and/or desperate, the [60]GCC FAQ describes where to find\n+   For the bold and/or desperate, the [61]GCC FAQ describes where to find\n    the last libg++ source.\n      _________________________________________________________________\n \n 1.8 What if I have more questions?\n \n    If you have read the README and RELEASE-NOTES files, and your question\n    remains unanswered, then just ask the mailing list. At present, you do\n-   not  need  to  be subscribed to the list to send a message to it. More\n-   information  is available on the homepage (including how to browse the\n-   list archives); to send to the list, use [61]libstdc++@gcc.gnu.org.\n+   not need to be subscribed to the list to send a message to it. More\n+   information is available on the homepage (including how to browse the\n+   list archives); to send to the list, use [62]libstdc++@gcc.gnu.org.\n \n-   If  you  have a question that you think should be included here, or if\n-   you  have  a  question  about a question/answer here, contact [62]Phil\n-   Edwards or [63]Gabriel Dos Reis.\n+   If you have a question that you think should be included here, or if\n+   you have a question about a question/answer here, contact [63]Phil\n+   Edwards or [64]Gabriel Dos Reis.\n      _________________________________________________________________\n \n 1.9 What are the license terms for libstdc++-v3?\n \n-   See [64]our license description for these and related questions.\n+   See [65]our license description for these and related questions.\n      _________________________________________________________________\n \n                                2.0 Installation\n \n 2.1 How do I install libstdc++-v3?\n \n-   Complete  instructions  are  not  given  here  (this  is a FAQ, not an\n+   Complete instructions are not given here (this is a FAQ, not an\n    installation document), but the tools required are few:\n-     * A  3.x  release  of GCC. Note that building GCC is much easier and\n+     * A 3.x release of GCC. Note that building GCC is much easier and\n        more automated than building the GCC 2.[78] series was. If you are\n-       using   GCC  2.95,  you  can  still  build  earlier  snapshots  of\n+       using GCC 2.95, you can still build earlier snapshots of\n        libstdc++.\n      * GNU Make is recommended, but should not be required.\n      * The GNU Autotools are needed if you are messing with the configury\n        or makefiles.\n \n-   The  file [65]documentation.html provides a good overview of the steps\n-   necessary  to  build,  install,  and use the library. Instructions for\n-   configuring  the  library  with new flags such as --enable-threads are\n-   there  also,  as well as patches and instructions for working with GCC\n+   The file [66]documentation.html provides a good overview of the steps\n+   necessary to build, install, and use the library. Instructions for\n+   configuring the library with new flags such as --enable-threads are\n+   there also, as well as patches and instructions for working with GCC\n    2.95.\n \n-   The  top-level  install.html  and  [66]RELEASE-NOTES files contain the\n-   exact  build  and  installation  instructions.  You may wish to browse\n-   those  files  over  CVSweb  ahead  of  time  to  get a feel for what's\n-   required.   RELEASE-NOTES   is  located  in  the  \".../docs/17_intro/\"\n+   The top-level install.html and [67]RELEASE-NOTES files contain the\n+   exact build and installation instructions. You may wish to browse\n+   those files over CVSweb ahead of time to get a feel for what's\n+   required. RELEASE-NOTES is located in the \".../docs/17_intro/\"\n    directory of the distribution.\n      _________________________________________________________________\n \n 2.2 [removed]\n \n-   This  question  has become moot and has been removed. The stub is here\n+   This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 2.3 What is this CVS thing that you keep mentioning?\n \n-   The  Concurrent  Versions  System  is  one of several revision control\n+   The Concurrent Versions System is one of several revision control\n    packages. It was selected for GNU projects because it's free (speech),\n-   free  (beer),  and  very  high  quality.  The [67]CVS entry in the GNU\n-   software  catalogue  has a better description as well as a [68]link to\n+   free (beer), and very high quality. The [68]CVS entry in the GNU\n+   software catalogue has a better description as well as a [69]link to\n    the makers of CVS.\n \n    The \"anonymous client checkout\" feature of CVS is similar to anonymous\n    FTP in that it allows anyone to retrieve the latest libstdc++ sources.\n \n-   After  the  first  of  April,  American  users will have a \"/pharmacy\"\n+   After the first of April, American users will have a \"/pharmacy\"\n    command-line option...\n      _________________________________________________________________\n \n@@ -251,61 +252,61 @@\n    libstdc++-v3 comes with its own testsuite. You do not need to actually\n    install the library (\"make install\") to run the testsuite.\n \n-   To  run  the  testsuite  on  the  library after building it, use \"make\n-   check\"  while  in  your  build  directory. To run the testsuite on the\n-   library  after  building  and  installing it, use \"make check-install\"\n+   To run the testsuite on the library after building it, use \"make\n+   check\" while in your build directory. To run the testsuite on the\n+   library after building and installing it, use \"make check-install\"\n    instead.\n \n    If you find bugs in the testsuite programs themselves, or if you think\n-   of  a new test program that should be added to the suite, please write\n+   of a new test program that should be added to the suite, please write\n    up your idea and send it to the list!\n      _________________________________________________________________\n \n 2.4 This library is HUGE! And what's libsupc++?\n \n-   Usually  the  size  of libraries on disk isn't noticeable. When a link\n-   editor  (or  simply  \"linker\")  pulls  things  from  a  static archive\n-   library,  only  the  necessary  object  files  are  copied  into  your\n-   executable,  not  the  entire library. Unfortunately, even if you only\n-   need  a  single  function  or variable from an object file, the entire\n-   object   file   is  extracted.  (There's  nothing  unique  to  C++  or\n-   libstdc++-v3  about  this;  it's  just common behavior, given here for\n+   Usually the size of libraries on disk isn't noticeable. When a link\n+   editor (or simply \"linker\") pulls things from a static archive\n+   library, only the necessary object files are copied into your\n+   executable, not the entire library. Unfortunately, even if you only\n+   need a single function or variable from an object file, the entire\n+   object file is extracted. (There's nothing unique to C++ or\n+   libstdc++-v3 about this; it's just common behavior, given here for\n    background reasons.)\n \n-   Some  of  the object files which make up libstdc++.a are rather large.\n+   Some of the object files which make up libstdc++.a are rather large.\n    If you create a statically-linked executable with -static, those large\n-   object  files  are  suddenly part of your executable. Historically the\n-   best  way  around  this  was to only place a very few functions (often\n-   only  a  single  one)  in  each  source/object file; then extracting a\n-   single  function  is  the  same  as  extracting  a single .o file. For\n-   libstdc++-v3  this  is  only  possible to a certain extent; the object\n-   files  in  question  contain  template classes and template functions,\n-   pre-instantiated,  and  splitting  those  up causes severe maintenance\n+   object files are suddenly part of your executable. Historically the\n+   best way around this was to only place a very few functions (often\n+   only a single one) in each source/object file; then extracting a\n+   single function is the same as extracting a single .o file. For\n+   libstdc++-v3 this is only possible to a certain extent; the object\n+   files in question contain template classes and template functions,\n+   pre-instantiated, and splitting those up causes severe maintenance\n    headaches.\n \n-   It's  not  a  bug,  and  it's not really a problem. Nevertheless, some\n+   It's not a bug, and it's not really a problem. Nevertheless, some\n    people don't like it, so here are two pseudo-solutions:\n \n-   If  the  only  functions  from libstdc++.a which you need are language\n-   support  functions  (those  listed  in  [69]clause 18 of the standard,\n-   e.g.,  new  and delete), then try linking against libsupc++.a (usually\n-   specifying  -lsupc++  when calling g++ for the final link step will do\n+   If the only functions from libstdc++.a which you need are language\n+   support functions (those listed in [70]clause 18 of the standard,\n+   e.g., new and delete), then try linking against libsupc++.a (usually\n+   specifying -lsupc++ when calling g++ for the final link step will do\n    it). This library contains only those support routines, one per object\n    file. But if you are using anything from the rest of the library, such\n-   as   IOStreams   or  vectors,  then  you'll  still  need  pieces  from\n+   as IOStreams or vectors, then you'll still need pieces from\n    libstdc++.a.\n \n    The second method is one we hope to incorporate into the library build\n-   process.  Some platforms can place each function and variable into its\n-   own  section  in  a  .o  file. The GNU linker can then perform garbage\n-   collection  on  unused  sections;  this  reduces the situation to only\n-   copying  needed  functions  into  the  executable,  as before, but all\n+   process. Some platforms can place each function and variable into its\n+   own section in a .o file. The GNU linker can then perform garbage\n+   collection on unused sections; this reduces the situation to only\n+   copying needed functions into the executable, as before, but all\n    happens automatically.\n \n-   Unfortunately  the  garbage  collection  in  GNU ld is buggy; sections\n-   (corresponding   to  functions  and  variables)  which  are  used  are\n-   mistakenly  removed,  leading to horrible crashes when your executable\n-   starts  up. For the time being, this feature is not used when building\n+   Unfortunately the garbage collection in GNU ld is buggy; sections\n+   (corresponding to functions and variables) which are used are\n+   mistakenly removed, leading to horrible crashes when your executable\n+   starts up. For the time being, this feature is not used when building\n    the library.\n      _________________________________________________________________\n \n@@ -315,112 +316,124 @@\n \n    Probably not. Yet.\n \n-   Because  GCC advances so rapidly, development and testing of libstdc++\n-   is  being done almost entirely under that compiler. If you are curious\n-   about  whether other, lesser compilers (*grin*) support libstdc++, you\n-   are  more  than  welcome  to try. Configuring and building the library\n-   (see  above)  will  still require certain tools, however. Also keep in\n+   Because GCC advances so rapidly, development and testing of libstdc++\n+   is being done almost entirely under that compiler. If you are curious\n+   about whether other, lesser compilers (*grin*) support libstdc++, you\n+   are more than welcome to try. Configuring and building the library\n+   (see above) will still require certain tools, however. Also keep in\n    mind that building libstdc++ does not imply that your compiler will be\n    able to use all of the features found in the C++ Standard Library.\n \n-   Since  the  goal of ISO Standardization is for all C++ implementations\n-   to  be  able  to share code, the final libstdc++ should, in theory, be\n+   Since the goal of ISO Standardization is for all C++ implementations\n+   to be able to share code, the final libstdc++ should, in theory, be\n    usable under any ISO-compliant compiler. It will still be targeted and\n    optimized for GCC/g++, however.\n      _________________________________________________________________\n \n 3.2 [removed]\n \n-   This  question  has become moot and has been removed. The stub is here\n+   This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 3.3 [removed]\n \n-   This  question  has become moot and has been removed. The stub is here\n+   This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 3.4 I can't use 'long long' on Solaris\n \n-   By  default  we  try  to support the C99 long long type. This requires\n+   By default we try to support the C99 long long type. This requires\n    that certain functions from your C library be present.\n \n-   Up  through  release  3.0.2  the tests performed were too general, and\n-   this  feature  was  disabled  when  it  did  not  need to be. The most\n+   Up through release 3.0.2 the tests performed were too general, and\n+   this feature was disabled when it did not need to be. The most\n    commonly reported platform affected was Solaris.\n \n    This has been fixed for 3.0.3 and onwards.\n      _________________________________________________________________\n \n 3.5 _XOPEN_SOURCE / _GNU_SOURCE / etc is always defined\n \n-   On  Solaris,  g++  (but not gcc) always defines the preprocessor macro\n-   _XOPEN_SOURCE.  On GNU/Linux, the same happens with _GNU_SOURCE. (This\n-   is  not  an exhaustive list; other macros and other platforms are also\n+   On Solaris, g++ (but not gcc) always defines the preprocessor macro\n+   _XOPEN_SOURCE. On GNU/Linux, the same happens with _GNU_SOURCE. (This\n+   is not an exhaustive list; other macros and other platforms are also\n    affected.)\n \n-   These  macros  are  typically  used in C library headers, guarding new\n-   versions  of  functions  from  their  older versions. The C++ standard\n-   library  includes  the  C  standard  library,  but it requires the C90\n-   version,  which  for  backwards-compatability reasons is often not the\n+   These macros are typically used in C library headers, guarding new\n+   versions of functions from their older versions. The C++ standard\n+   library includes the C standard library, but it requires the C90\n+   version, which for backwards-compatability reasons is often not the\n    default for many vendors.\n \n-   More  to  the  point, the C++ standard requires behavior which is only\n-   available  on  certain  platforms  after  certain symbols are defined.\n-   Usually  the  issue  involves I/O-related typedefs. In order to ensure\n+   More to the point, the C++ standard requires behavior which is only\n+   available on certain platforms after certain symbols are defined.\n+   Usually the issue involves I/O-related typedefs. In order to ensure\n    correctness, the compiler simply predefines those symbols.\n \n-   Note  that  it's  not  enough to #define them only when the library is\n-   being  built  (during  installation).  Since we don't have an 'export'\n-   keyword,  much  of the library exists as headers, which means that the\n+   Note that it's not enough to #define them only when the library is\n+   being built (during installation). Since we don't have an 'export'\n+   keyword, much of the library exists as headers, which means that the\n    symbols must also be defined as your programs are parsed and compiled.\n \n-   To  see  which symbols are defined, look for CPLUSPLUS_CPP_SPEC in the\n-   gcc  config headers for your target (and try changing them to see what\n-   happens  when building complicated code). You can also run \"g++ -E -dM\n-   -  <  /dev/null\"  to  display  a  list  of  predefined  macros for any\n+   To see which symbols are defined, look for CPLUSPLUS_CPP_SPEC in the\n+   gcc config headers for your target (and try changing them to see what\n+   happens when building complicated code). You can also run \"g++ -E -dM\n+   - < /dev/null\" to display a list of predefined macros for any\n    particular installation.\n \n-   This has been discussed on the mailing lists [70]quite a bit.\n+   This has been discussed on the mailing lists [71]quite a bit.\n \n-   This  method  is  something  of  a  wart.  We'd like to find a cleaner\n+   This method is something of a wart. We'd like to find a cleaner\n    solution, but nobody yet has contributed the time.\n      _________________________________________________________________\n \n 3.6 OS X ctype.h is broken! How can I hack it?\n \n-   This  is  a  long-standing  bug  in the OS X support. Fortunately, the\n-   patch  is  quite  simple,  and  well-known.  [71]Here's  a link to the\n+   This is a long-standing bug in the OS X support. Fortunately, the\n+   patch is quite simple, and well-known. [72]Here's a link to the\n    solution.\n+     _________________________________________________________________\n+\n+Threading is broken on i386\n+\n+   Support for atomic integer operations is/was broken on i386 platforms.\n+   The assembly code accidentally used opcodes that are only available on\n+   the i486 and later. So if you configured GCC to target, for example,\n+   i386-linux, but actually used the programs on an i686, then you would\n+   encounter no problems. Only when actually running the code on a i386\n+   will the problem appear.\n+\n+   This is fixed in 3.2.2.\n      _________________________________________________________________\n \n                           4.0 Known Bugs and Non-Bugs\n \n-   Note  that this section can get rapdily outdated -- such is the nature\n-   of  an  open-source  project.  For  the  latest  information, join the\n-   mailing  list  or look through recent archives. The RELEASE- NOTES and\n+   Note that this section can get rapdily outdated -- such is the nature\n+   of an open-source project. For the latest information, join the\n+   mailing list or look through recent archives. The RELEASE- NOTES and\n    BUGS files are generally kept up-to-date.\n \n-   For  3.0.1,  the  most  common \"bug\" is an apparently missing \"../\" in\n+   For 3.0.1, the most common \"bug\" is an apparently missing \"../\" in\n    include/Makefile, resulting in files like gthr.h and gthr-single.h not\n-   being  found.  Please read [72]the configuration instructions for GCC,\n+   being found. Please read [73]the configuration instructions for GCC,\n    specifically the part about configuring in a separate build directory,\n-   and  how  strongly recommended it is. Building in the source directory\n-   is  fragile,  is  rarely  tested, and tends to break, as in this case.\n+   and how strongly recommended it is. Building in the source directory\n+   is fragile, is rarely tested, and tends to break, as in this case.\n    This was fixed for 3.0.2.\n \n-   For  3.1, the most common \"bug\" is a parse error when using <fstream>,\n-   ending  with  a message, \"bits/basic_file.h:52: parse error before `{'\n-   token.\"   Please  read  [73]the  installation  instructions  for  GCC,\n-   specifically  the  part  about not installing newer versions on top of\n-   older  versions.  If  you  install  3.1 over a 3.0.x release, then the\n-   wrong  basic_file.h header will be found (its location changed between\n+   For 3.1, the most common \"bug\" is a parse error when using <fstream>,\n+   ending with a message, \"bits/basic_file.h:52: parse error before `{'\n+   token.\" Please read [74]the installation instructions for GCC,\n+   specifically the part about not installing newer versions on top of\n+   older versions. If you install 3.1 over a 3.0.x release, then the\n+   wrong basic_file.h header will be found (its location changed between\n    releases).\n \n    Please do not report these as bugs. We know about them. Reporting this\n-   --  or  any  other  problem  that's  already been fixed -- hinders the\n-   development  of  GCC,  because we have to take time to respond to your\n+   -- or any other problem that's already been fixed -- hinders the\n+   development of GCC, because we have to take time to respond to your\n    report. Thank you.\n \n 4.1 What works already?\n@@ -476,51 +489,51 @@ New:\n \n 4.2 Bugs in gcc/g++ (not libstdc++-v3)\n \n-   This  is by no means meant to be complete nor exhaustive, but mentions\n-   some  problems  that  users  may  encounter  when  building  or  using\n+   This is by no means meant to be complete nor exhaustive, but mentions\n+   some problems that users may encounter when building or using\n    libstdc++. If you are experiencing one of these problems, you can find\n    more information on the libstdc++ and the GCC mailing lists.\n \n-   Before  reporting  a  bug,  examine  the  [74]bugs  database  with the\n-   category  set  to  \"libstdc++\".  The BUGS file in the source tree also\n+   Before reporting a bug, examine the [75]bugs database with the\n+   category set to \"libstdc++\". The BUGS file in the source tree also\n    tracks known serious problems.\n-     * Debugging  is  problematic,  due to bugs in line-number generation\n+     * Debugging is problematic, due to bugs in line-number generation\n        (mostly fixed in the compiler) and gdb lagging behind the compiler\n-       (lack  of  personnel). We recommend configuring the compiler using\n-       --with-dwarf2  if  the  DWARF2 debugging format is not already the\n-       default on your platform. Also, [75]changing your GDB settings can\n+       (lack of personnel). We recommend configuring the compiler using\n+       --with-dwarf2 if the DWARF2 debugging format is not already the\n+       default on your platform. Also, [76]changing your GDB settings can\n        have a profound effect on your C++ debugging experiences. :-)\n      _________________________________________________________________\n \n 4.3 Bugs in the C++ language/lib specification\n \n-   Yes,  unfortunately,  there  are  some.  In a [76]message to the list,\n-   Nathan  Myers  announced that he has started a list of problems in the\n-   ISO  C++  Standard itself, especially with regard to the chapters that\n-   concern  the  library.  The  list itself is [77]posted on his website.\n-   Developers  who are having problems interpreting the Standard may wish\n+   Yes, unfortunately, there are some. In a [77]message to the list,\n+   Nathan Myers announced that he has started a list of problems in the\n+   ISO C++ Standard itself, especially with regard to the chapters that\n+   concern the library. The list itself is [78]posted on his website.\n+   Developers who are having problems interpreting the Standard may wish\n    to consult his notes.\n \n-   For  those  people  who  are  not part of the ISO Library Group (i.e.,\n-   nearly  all  of us needing to read this page in the first place :-), a\n-   public list of the library defects is occasionally published [78]here.\n-   Some of these have resulted in [79]code changes.\n+   For those people who are not part of the ISO Library Group (i.e.,\n+   nearly all of us needing to read this page in the first place :-), a\n+   public list of the library defects is occasionally published [79]here.\n+   Some of these have resulted in [80]code changes.\n      _________________________________________________________________\n \n 4.4 Things in libstdc++ that only look like bugs\n \n-   There  are  things  which  are  not bugs in the compiler (4.2) nor the\n-   language  specification  (4.3),  but  aren't really bugs in libstdc++,\n+   There are things which are not bugs in the compiler (4.2) nor the\n+   language specification (4.3), but aren't really bugs in libstdc++,\n    either. Really! Please do not report these as bugs.\n \n-   -Weffc++  The  biggest  of these is the quadzillions of warnings about\n-   the  library  headers  emitted when -Weffc++ is used. Making libstdc++\n-   \"-Weffc++-clean\"  is  not  a  goal  of the project, for a few reasons.\n-   Mainly,  that  option  tries  to  enforce object-oriented programming,\n+   -Weffc++ The biggest of these is the quadzillions of warnings about\n+   the library headers emitted when -Weffc++ is used. Making libstdc++\n+   \"-Weffc++-clean\" is not a goal of the project, for a few reasons.\n+   Mainly, that option tries to enforce object-oriented programming,\n    while the Standard Library isn't necessarily trying to be OO.\n \n-   reopening  a stream fails Did I just say that -Weffc++ was our biggest\n-   false-bug  report?  I  lied.  (It  used  to  be.) Today it seems to be\n+   reopening a stream fails Did I just say that -Weffc++ was our biggest\n+   false-bug report? I lied. (It used to be.) Today it seems to be\n    reports that after executing a sequence like\n     #include <fstream>\n     ...\n@@ -531,43 +544,43 @@ New:\n     fs.close();\n     fs.open(\"a_new_file\");\n \n-   all  operations  on  the  re-opened fs will fail, or at least act very\n-   strangely.  Yes,  they  often  will,  especially if fs reached the EOF\n+   all operations on the re-opened fs will fail, or at least act very\n+   strangely. Yes, they often will, especially if fs reached the EOF\n    state on the previous file. The reason is that the state flags are not\n    cleared on a successful call to open(). The standard unfortunately did\n-   not  specify  behavior  in this case, and to everybody's great sorrow,\n-   the  [80]proposed  LWG  resolution  (see DR #22) is to leave the flags\n-   unchanged.  You  must insert a call to fs.clear() between the calls to\n-   close()  and  open(), and then everything will work like we all expect\n+   not specify behavior in this case, and to everybody's great sorrow,\n+   the [81]proposed LWG resolution (see DR #22) is to leave the flags\n+   unchanged. You must insert a call to fs.clear() between the calls to\n+   close() and open(), and then everything will work like we all expect\n    it to work.\n \n-   rel_ops  Another  is the rel_ops namespace and the template comparison\n-   operator  functions  contained  therein. If they become visible in the\n-   same  namespace  as other comparison functions (e.g., 'using' them and\n-   the  <iterator>  header),  then  you  will suddenly be faced with huge\n-   numbers  of  ambiguity  errors.  This  was  discussed on the -v3 list;\n-   Nathan   Myers   [81]sums   things   up   here.  The  collisions  with\n+   rel_ops Another is the rel_ops namespace and the template comparison\n+   operator functions contained therein. If they become visible in the\n+   same namespace as other comparison functions (e.g., 'using' them and\n+   the <iterator> header), then you will suddenly be faced with huge\n+   numbers of ambiguity errors. This was discussed on the -v3 list;\n+   Nathan Myers [82]sums things up here. The collisions with\n    vector/string iterator types have been fixed for 3.1.\n \n   The g++-3 headers are not ours\n \n-   If  you  have  found  an extremely broken header file which is causing\n-   problems  for  you, look carefully before submitting a \"high\" priority\n-   bug  report  (which  you  probably  shouldn't  do anyhow; see the last\n-   paragraph of the page describing [82]the GCC bug database).\n+   If you have found an extremely broken header file which is causing\n+   problems for you, look carefully before submitting a \"high\" priority\n+   bug report (which you probably shouldn't do anyhow; see the last\n+   paragraph of the page describing [83]the GCC bug database).\n \n-   If  the  headers  are  in ${prefix}/include/g++-3, or if the installed\n+   If the headers are in ${prefix}/include/g++-3, or if the installed\n    library's name looks like libstdc++-2.10.a or libstdc++-libc6-2.10.so,\n-   then  you are using the old libstdc++-v2 library, which is nonstandard\n-   and  unmaintained.  Do not report problems with -v2 to the -v3 mailing\n+   then you are using the old libstdc++-v2 library, which is nonstandard\n+   and unmaintained. Do not report problems with -v2 to the -v3 mailing\n    list.\n \n-   Currently  our  header files are installed in ${prefix}/include/g++-v3\n-   (see  the  'v'?).  This may change with the next release of GCC, as it\n-   may be too confusing, but [83]the question has not yet been decided.\n+   Currently our header files are installed in ${prefix}/include/g++-v3\n+   (see the 'v'?). This may change with the next release of GCC, as it\n+   may be too confusing, but [84]the question has not yet been decided.\n \n-   glibc  If you're on a GNU/Linux system and have just upgraded to glibc\n-   2.2,  but  are  still  using gcc 2.95.2, then you should have read the\n+   glibc If you're on a GNU/Linux system and have just upgraded to glibc\n+   2.2, but are still using gcc 2.95.2, then you should have read the\n    glibc FAQ, specifically 2.34:\n 2.34.   When compiling C++ programs, I get a compilation error in streambuf.h.\n \n@@ -577,23 +590,23 @@ type has changed in glibc 2.2.  The patch is at\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n \n-   Note  that  2.95.x  shipped  with  the  [84]old v2 library which is no\n-   longer  maintained.  Also note that gcc 2.95.3 fixes this problem, but\n+   Note that 2.95.x shipped with the [85]old v2 library which is no\n+   longer maintained. Also note that gcc 2.95.3 fixes this problem, but\n    requires a separate patch for libstdc++-v3.\n \n    concept checks If you see compilation errors containing messages about\n-   fooConcept  and  a  constraints  member function, then most likely you\n-   have   violated   one  of  the  requirements  for  types  used  during\n-   instantiation  of  template  containers  and  functions.  For example,\n-   EqualityComparableConcept  appears  if  your  types must be comparable\n-   with  ==  and  you have not provided this capability (a typo, or wrong\n+   fooConcept and a constraints member function, then most likely you\n+   have violated one of the requirements for types used during\n+   instantiation of template containers and functions. For example,\n+   EqualityComparableConcept appears if your types must be comparable\n+   with == and you have not provided this capability (a typo, or wrong\n    visibility, or you just plain forgot, etc).\n \n-   More  information,  including  how  to  optionally  enable/disable the\n-   checks, is available [85]here.\n+   More information, including how to optionally enable/disable the\n+   checks, is available [86]here.\n \n-   dlopen/dlsym    If    you   are   using   the   C++   library   across\n-   dynamically-loaded  objects,  make  certain  that  you are passing the\n+   dlopen/dlsym If you are using the C++ library across\n+   dynamically-loaded objects, make certain that you are passing the\n    correct options when compiling and linking:\n     // compile the library components\n     g++ -fPIC -c a.cc\n@@ -610,80 +623,80 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n 4.5 Aw, that's easy to fix!\n \n-   If  you  have  found  a  bug  in  the library and you think you have a\n-   working  fix,  then  send  it  in!  The  main  GCC  site has a page on\n-   [86]submitting  patches  that  covers the procedure, but for libstdc++\n-   you  should also send the patch to our mailing list in addition to the\n-   GCC  patches  mailing  list. The libstdc++ [87]contributors' page also\n+   If you have found a bug in the library and you think you have a\n+   working fix, then send it in! The main GCC site has a page on\n+   [87]submitting patches that covers the procedure, but for libstdc++\n+   you should also send the patch to our mailing list in addition to the\n+   GCC patches mailing list. The libstdc++ [88]contributors' page also\n    talks about how to submit patches.\n \n    In addition to the description, the patch, and the ChangeLog entry, it\n    is a Good Thing if you can additionally create a small test program to\n-   test  for  the  presence of the bug that your patch fixes. Bugs have a\n-   way  of  being  reintroduced; if an old bug creeps back in, it will be\n-   caught  immediately  by  the  [88]testsuite -- but only if such a test\n+   test for the presence of the bug that your patch fixes. Bugs have a\n+   way of being reintroduced; if an old bug creeps back in, it will be\n+   caught immediately by the [89]testsuite -- but only if such a test\n    exists.\n      _________________________________________________________________\n \n                                5.0 Miscellaneous\n \n 5.1 string::iterator is not char*; vector<T>::iterator is not T*\n \n-   If  you  have  code  that  depends  on  container<T>  iterators  being\n+   If you have code that depends on container<T> iterators being\n    implemented as pointer-to-T, your code is broken.\n \n-   While  there  are  arguments  for  iterators to be implemented in that\n-   manner,  A)  they  aren't very good ones in the long term, and B) they\n+   While there are arguments for iterators to be implemented in that\n+   manner, A) they aren't very good ones in the long term, and B) they\n    were never guaranteed by the Standard anyway. The type-safety achieved\n-   by  making  iterators  a  real  class  rather  than  a  typedef for T*\n+   by making iterators a real class rather than a typedef for T*\n    outweighs nearly all opposing arguments.\n \n    Code which does assume that a vector iterator i is a pointer can often\n-   be  fixed  by  changing  i  in  certain  expressions  to  &*i . Future\n-   revisions  of  the  Standard  are  expected  to  bless  this usage for\n+   be fixed by changing i in certain expressions to &*i . Future\n+   revisions of the Standard are expected to bless this usage for\n    vector<> (but not for basic_string<>).\n      _________________________________________________________________\n \n 5.2 What's next after libstdc++-v3?\n \n-   Hopefully,  not  much.  The  goal  of  libstdc++-v3  is  to  produce a\n-   fully-compliant,  fully-portable  Standard  Library. After that, we're\n+   Hopefully, not much. The goal of libstdc++-v3 is to produce a\n+   fully-compliant, fully-portable Standard Library. After that, we're\n    mostly done: there won't be any more compliance work to do. However:\n-    1. The  ISO Committee will meet periodically to review Defect Reports\n-       in  the  C++  Standard.  Undoubtedly  some of these will result in\n-       changes  to  the  Standard,  which will be reflected in patches to\n-       libstdc++.  Some  of  that  is already happening, see 4.2. Some of\n-       those  changes are being predicted by the library maintainers, and\n-       we  add  code  to  the  library based on what the current proposed\n-       resolution  specifies.  Those  additions  are  listed  in  [89]the\n+    1. The ISO Committee will meet periodically to review Defect Reports\n+       in the C++ Standard. Undoubtedly some of these will result in\n+       changes to the Standard, which will be reflected in patches to\n+       libstdc++. Some of that is already happening, see 4.2. Some of\n+       those changes are being predicted by the library maintainers, and\n+       we add code to the library based on what the current proposed\n+       resolution specifies. Those additions are listed in [90]the\n        extensions page.\n-    2. Performance  tuning.  Lots  of  performance  tuning.  This  too is\n-       already  underway  for  post-3.0  releases,  starting  with memory\n-       expansion  in  container  classes and buffer usage in synchronized\n+    2. Performance tuning. Lots of performance tuning. This too is\n+       already underway for post-3.0 releases, starting with memory\n+       expansion in container classes and buffer usage in synchronized\n        stream objects.\n-    3. An  ABI  for  libstdc++  is  being  developed,  so  that  multiple\n-       binary-incompatible  copies  of the library can be replaced with a\n+    3. An ABI for libstdc++ is being developed, so that multiple\n+       binary-incompatible copies of the library can be replaced with a\n        single backwards-compatible library, like libgcc_s.so is.\n-    4. The  current  libstdc++  contains  extensions to the Library which\n+    4. The current libstdc++ contains extensions to the Library which\n        must be explicitly requested by client code (for example, the hash\n        tables from SGI). Other extensions may be added to libstdc++-v3 if\n-       they  seem  to be \"standard\" enough. (For example, the \"long long\"\n-       type  from  C99.)  Bugfixes and rewrites (to improve or fix thread\n+       they seem to be \"standard\" enough. (For example, the \"long long\"\n+       type from C99.) Bugfixes and rewrites (to improve or fix thread\n        safety, for instance) will of course be a continuing task.\n \n-   [90]This  question  about  the  next libstdc++ prompted some brief but\n-   interesting [91]speculation.\n+   [91]This question about the next libstdc++ prompted some brief but\n+   interesting [92]speculation.\n      _________________________________________________________________\n \n 5.3 What about the STL from SGI?\n \n-   The  [92]STL  from  SGI, version 3.3, was the most recent merge of the\n-   STL  codebase.  The code in libstdc++ contains many fixes and changes,\n-   and  it  is  very  likely  that the SGI code is no longer under active\n+   The [93]STL from SGI, version 3.3, was the most recent merge of the\n+   STL codebase. The code in libstdc++ contains many fixes and changes,\n+   and it is very likely that the SGI code is no longer under active\n    development. We expect that no future merges will take place.\n \n    In particular, string is not from SGI and makes no use of their \"rope\"\n-   class  (which  is  included as an optional extension), nor is valarray\n+   class (which is included as an optional extension), nor is valarray\n    and some others. Classes like vector<> are, however.\n \n    The FAQ for SGI's STL (one jump off of their main page) is recommended\n@@ -692,34 +705,34 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n 5.4 Extensions and Backward Compatibility\n \n-   Headers  in  the ext and backward subdirectories should be referred to\n+   Headers in the ext and backward subdirectories should be referred to\n    by their relative paths:\n       #include <ext/hash_map>\n \n-   rather  than  using  -I  or  other  options. This is more portable and\n-   forward-compatible.  (The  situation  is  the  same  as  that of other\n-   headers   whose   directories   are   not   searched  directly,  e.g.,\n+   rather than using -I or other options. This is more portable and\n+   forward-compatible. (The situation is the same as that of other\n+   headers whose directories are not searched directly, e.g.,\n    <sys/stat.h>, <X11/Xlib.h>.\n \n-   Extensions to the library have [93]their own page.\n+   Extensions to the library have [94]their own page.\n      _________________________________________________________________\n \n 5.5 [removed]\n \n-   This  question  has become moot and has been removed. The stub is here\n+   This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 5.6 Is libstdc++-v3 thread-safe?\n \n-   When   the   system's   libc  is  itself  thread-safe,  a  non-generic\n-   implementation  of  atomicity.h  exists  for the architecture, and gcc\n-   itself  reports a thread model other than single; libstdc++-v3 strives\n-   to  be thread-safe. The user-code must guard against concurrent method\n-   calls   which  may  access  any  particular  library  object's  state.\n+   When the system's libc is itself thread-safe, a non-generic\n+   implementation of atomicity.h exists for the architecture, and gcc\n+   itself reports a thread model other than single; libstdc++-v3 strives\n+   to be thread-safe. The user-code must guard against concurrent method\n+   calls which may access any particular library object's state.\n    Typically, the application programmer may infer what object locks must\n-   be  held  based  on  the  objects referenced in a method call. Without\n-   getting   into  great  detail,  here  is  an  example  which  requires\n+   be held based on the objects referenced in a method call. Without\n+   getting into great detail, here is an example which requires\n    user-level locks:\n      library_class_a shared_object_a;\n \n@@ -733,8 +746,8 @@ a\n \n      // Multiple copies of thread_main() are started in independent threads.\n \n-   Under  the  assumption that object_a and object_b are never exposed to\n-   another  thread,  here  is  an  example  that  should  not require any\n+   Under the assumption that object_a and object_b are never exposed to\n+   another thread, here is an example that should not require any\n    user-level locks:\n      thread_main () {\n        library_class_a object_a;\n@@ -745,80 +758,80 @@ a\n \n    All library objects are safe to use in a multithreaded program as long\n    as each thread carefully locks out access by any other thread while it\n-   uses   any   object  visible  to  another  thread.  In  general,  this\n-   requirement  includes  both  read  and write access to objects; unless\n-   otherwise  documented  as  safe,  do  not  assume that two threads may\n+   uses any object visible to another thread. In general, this\n+   requirement includes both read and write access to objects; unless\n+   otherwise documented as safe, do not assume that two threads may\n    access a shared standard library object at the same time.\n \n-   See  chapters  [94]17 (library introduction), [95]23 (containers), and\n-   [96]27 (I/O) for more information.\n+   See chapters [95]17 (library introduction), [96]23 (containers), and\n+   [97]27 (I/O) for more information.\n      _________________________________________________________________\n \n 5.7 How do I get a copy of the ISO C++ Standard?\n \n-   Copies  of  the  full ISO 14882 standard are available on line via the\n-   ISO  mirror site for committee members. Non-members, or those who have\n-   not  paid  for the privilege of sitting on the committee and sustained\n-   their  two-meeting commitment for voting rights, may get a copy of the\n+   Copies of the full ISO 14882 standard are available on line via the\n+   ISO mirror site for committee members. Non-members, or those who have\n+   not paid for the privilege of sitting on the committee and sustained\n+   their two-meeting commitment for voting rights, may get a copy of the\n    standard from their respective national standards organization. In the\n    USA, this national standards organization is ANSI and their website is\n-   right  [97]here. (And if you've already registered with them, clicking\n-   this link will take you to directly to the place where you can [98]buy\n+   right [98]here. (And if you've already registered with them, clicking\n+   this link will take you to directly to the place where you can [99]buy\n    the standard on-line.\n \n-   Who is your country's member body? Visit the [99]ISO homepage and find\n-   out!\n+   Who is your country's member body? Visit the [100]ISO homepage and\n+   find out!\n      _________________________________________________________________\n \n 5.8 What's an ABI and why is it so messy?\n \n-   \"ABI\"  stands  for  \"Application Binary Interface.\" Conventionally, it\n-   refers  to a great mass of details about how arguments are arranged on\n+   \"ABI\" stands for \"Application Binary Interface.\" Conventionally, it\n+   refers to a great mass of details about how arguments are arranged on\n    the call stack and/or in registers, and how various types are arranged\n-   and  padded  in  structs. A single CPU design may suffer multiple ABIs\n-   designed  by  different  development  tool  vendors who made different\n-   choices,  or even by the same vendor for different target applications\n+   and padded in structs. A single CPU design may suffer multiple ABIs\n+   designed by different development tool vendors who made different\n+   choices, or even by the same vendor for different target applications\n    or compiler versions. In ideal circumstances the CPU designer presents\n-   one  ABI  and all the OSes and compilers use it. In practice every ABI\n+   one ABI and all the OSes and compilers use it. In practice every ABI\n    omits details that compiler implementers (consciously or accidentally)\n    must choose for themselves.\n \n-   That  ABI  definition  suffices  for  compilers  to generate code so a\n+   That ABI definition suffices for compilers to generate code so a\n    program can interact safely with an OS and its lowest-level libraries.\n    Users usually want an ABI to encompass more detail, allowing libraries\n-   built  with  different  compilers  (or  different releases of the same\n-   compiler!)  to  be  linked  together. For C++, this includes many more\n-   details  than  for  C,  and CPU designers (for good reasons elaborated\n-   below)  have  not  stepped up to publish C++ ABIs. The details include\n-   virtual  function  implementation,  struct  inheritance  layout,  name\n+   built with different compilers (or different releases of the same\n+   compiler!) to be linked together. For C++, this includes many more\n+   details than for C, and CPU designers (for good reasons elaborated\n+   below) have not stepped up to publish C++ ABIs. The details include\n+   virtual function implementation, struct inheritance layout, name\n    mangling, and exception handling. Such an ABI has been defined for GNU\n-   C++,  and  is  immediately  useful for embedded work relying only on a\n-   \"free-standing  implementation\"  that  doesn't  include  (much of) the\n+   C++, and is immediately useful for embedded work relying only on a\n+   \"free-standing implementation\" that doesn't include (much of) the\n    standard library. It is a good basis for the work to come.\n \n-   A  useful  C++  ABI must also incorporate many details of the standard\n-   library  implementation.  For  a  C  ABI, the layouts of a few structs\n-   (such  as  FILE, stat, jmpbuf, and the like) and a few macros suffice.\n-   For  C++,  the  details include the complete set of names of functions\n-   and  types  used,  the offsets of class members and virtual functions,\n-   and  the  actual  definitions  of  all  inlines. C++ exposes many more\n-   library  details  to  the  caller  than  C  does.  It makes defining a\n-   complete  ABI  a  much  bigger  undertaking,  and  requires  not  just\n-   documenting  library  implementation  details, but carefully designing\n-   those  details  so that future bug fixes and optimizations don't force\n+   A useful C++ ABI must also incorporate many details of the standard\n+   library implementation. For a C ABI, the layouts of a few structs\n+   (such as FILE, stat, jmpbuf, and the like) and a few macros suffice.\n+   For C++, the details include the complete set of names of functions\n+   and types used, the offsets of class members and virtual functions,\n+   and the actual definitions of all inlines. C++ exposes many more\n+   library details to the caller than C does. It makes defining a\n+   complete ABI a much bigger undertaking, and requires not just\n+   documenting library implementation details, but carefully designing\n+   those details so that future bug fixes and optimizations don't force\n    breaking the ABI.\n \n    There are ways to help isolate library implementation details from the\n-   ABI,  but  they trade off against speed. Library details used in inner\n-   loops  (e.g.,  getchar)  must  be exposed and frozen for all time, but\n-   many  others may reasonably be kept hidden from user code, so they may\n+   ABI, but they trade off against speed. Library details used in inner\n+   loops (e.g., getchar) must be exposed and frozen for all time, but\n+   many others may reasonably be kept hidden from user code, so they may\n    later be changed. Deciding which, and implementing the decisions, must\n-   happen  before  you  can  reasonably document a candidate C++ ABI that\n+   happen before you can reasonably document a candidate C++ ABI that\n    encompasses the standard library.\n      _________________________________________________________________\n \n-   See [100]license.html for copying conditions. Comments and suggestions\n-   are welcome, and may be sent to [101]the libstdc++ mailing list. \n+   See [101]license.html for copying conditions. Comments and suggestions\n+   are welcome, and may be sent to [102]the libstdc++ mailing list. \n \n References\n \n@@ -848,78 +861,79 @@ References\n   24. ../faq/index.html#3_4\n   25. ../faq/index.html#3_5\n   26. ../faq/index.html#3_6\n-  27. ../faq/index.html#4_0\n-  28. ../faq/index.html#4_1\n-  29. ../faq/index.html#4_2\n-  30. ../faq/index.html#4_3\n-  31. ../faq/index.html#4_4\n-  32. ../faq/index.html#4_4_iostreamclear\n-  33. ../faq/index.html#4_4_Weff\n-  34. ../faq/index.html#4_4_rel_ops\n-  35. ../faq/index.html#4_4_interface\n-  36. ../faq/index.html#4_4_glibc\n-  37. ../faq/index.html#4_4_checks\n-  38. ../faq/index.html#4_4_dlsym\n-  39. ../faq/index.html#4_5\n-  40. ../faq/index.html#5_0\n-  41. ../faq/index.html#5_1\n-  42. ../faq/index.html#5_2\n-  43. ../faq/index.html#5_3\n-  44. ../faq/index.html#5_4\n-  45. ../faq/index.html#5_5\n-  46. ../faq/index.html#5_6\n-  47. ../faq/index.html#5_7\n-  48. ../faq/index.html#5_8\n-  49. http://gcc.gnu.org/libstdc++/index.html#download\n-  50. ../faq/index.html#1_4\n-  51. ../faq/index.html#4_4_interface\n-  52. ../17_intro/DESIGN\n-  53. http://gcc.gnu.org/\n-  54. http://gcc.gnu.org/gcc-3.0/buildstat.html\n-  55. http://gcc.gnu.org/libstdc++/\n-  56. http://gcc.gnu.org/libstdc++/index.html#download\n-  57. http://gcc.gnu.org/libstdc++/\n-  58. ../17_intro/contribute.html\n-  59. http://www.boost.org/\n-  60. http://gcc.gnu.org/fom_serv/cache/33.html\n-  61. mailto:libstdc++@gcc.gnu.org\n-  62. mailto:pme@gcc.gnu.org\n-  63. mailto:gdr@gcc.gnu.org\n-  64. ../17_intro/license.html\n-  65. ../documentation.html\n-  66. ../17_intro/RELEASE-NOTES\n-  67. http://www.gnu.org/software/cvs/cvs.html\n-  68. http://www.cvshome.org/\n-  69. ../18_support/howto.html\n-  70. http://gcc.gnu.org/cgi-bin/htsearch?method=and&format=builtin-long&sort=score&words=_XOPEN_SOURCE+Solaris\n-  71. http://gcc.gnu.org/ml/gcc/2002-03/msg00817.html\n-  72. http://gcc.gnu.org/install/configure.html\n-  73. http://gcc.gnu.org/install/\n-  74. http://gcc.gnu.org/bugs.html\n-  75. http://gcc.gnu.org/ml/libstdc++/2002-02/msg00034.html\n-  76. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n-  77. http://www.cantrip.org/draft-bugs.txt\n-  78. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n-  79. ../faq/index.html#5_2\n-  80. ../ext/howto.html#5\n-  81. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n-  82. http://gcc.gnu.org/gnatswrite.html\n-  83. http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\n-  84. ../faq/index.html#4_4_interface\n-  85. ../19_diagnostics/howto.html#3\n-  86. http://gcc.gnu.org/contribute.html\n-  87. ../17_intro/contribute.html\n-  88. ../faq/index.html#2_4\n-  89. ../ext/howto.html#5\n-  90. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n-  91. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n-  92. http://www.sgi.com/Technology/STL/\n-  93. ../ext/howto.html\n-  94. ../17_intro/howto.html#3\n-  95. ../23_containers/howto.html#3\n-  96. ../27_io/howto.html#9\n-  97. http://www.ansi.org/\n-  98. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n-  99. http://www.iso.ch/\n- 100. ../17_intro/license.html\n- 101. mailto:libstdc++@gcc.gnu.org\n+  27. ../faq/index.html#3_7\n+  28. ../faq/index.html#4_0\n+  29. ../faq/index.html#4_1\n+  30. ../faq/index.html#4_2\n+  31. ../faq/index.html#4_3\n+  32. ../faq/index.html#4_4\n+  33. ../faq/index.html#4_4_iostreamclear\n+  34. ../faq/index.html#4_4_Weff\n+  35. ../faq/index.html#4_4_rel_ops\n+  36. ../faq/index.html#4_4_interface\n+  37. ../faq/index.html#4_4_glibc\n+  38. ../faq/index.html#4_4_checks\n+  39. ../faq/index.html#4_4_dlsym\n+  40. ../faq/index.html#4_5\n+  41. ../faq/index.html#5_0\n+  42. ../faq/index.html#5_1\n+  43. ../faq/index.html#5_2\n+  44. ../faq/index.html#5_3\n+  45. ../faq/index.html#5_4\n+  46. ../faq/index.html#5_5\n+  47. ../faq/index.html#5_6\n+  48. ../faq/index.html#5_7\n+  49. ../faq/index.html#5_8\n+  50. http://gcc.gnu.org/libstdc++/index.html#download\n+  51. ../faq/index.html#1_4\n+  52. ../faq/index.html#4_4_interface\n+  53. ../17_intro/DESIGN\n+  54. http://gcc.gnu.org/\n+  55. http://gcc.gnu.org/gcc-3.0/buildstat.html\n+  56. http://gcc.gnu.org/libstdc++/\n+  57. http://gcc.gnu.org/libstdc++/index.html#download\n+  58. http://gcc.gnu.org/libstdc++/\n+  59. ../17_intro/contribute.html\n+  60. http://www.boost.org/\n+  61. http://gcc.gnu.org/fom_serv/cache/33.html\n+  62. mailto:libstdc++@gcc.gnu.org\n+  63. mailto:pme@gcc.gnu.org\n+  64. mailto:gdr@gcc.gnu.org\n+  65. ../17_intro/license.html\n+  66. ../documentation.html\n+  67. ../17_intro/RELEASE-NOTES\n+  68. http://www.gnu.org/software/cvs/cvs.html\n+  69. http://www.cvshome.org/\n+  70. ../18_support/howto.html\n+  71. http://gcc.gnu.org/cgi-bin/htsearch?method=and&format=builtin-long&sort=score&words=_XOPEN_SOURCE+Solaris\n+  72. http://gcc.gnu.org/ml/gcc/2002-03/msg00817.html\n+  73. http://gcc.gnu.org/install/configure.html\n+  74. http://gcc.gnu.org/install/\n+  75. http://gcc.gnu.org/bugs.html\n+  76. http://gcc.gnu.org/ml/libstdc++/2002-02/msg00034.html\n+  77. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n+  78. http://www.cantrip.org/draft-bugs.txt\n+  79. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n+  80. ../faq/index.html#5_2\n+  81. ../ext/howto.html#5\n+  82. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n+  83. http://gcc.gnu.org/gnatswrite.html\n+  84. http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\n+  85. ../faq/index.html#4_4_interface\n+  86. ../19_diagnostics/howto.html#3\n+  87. http://gcc.gnu.org/contribute.html\n+  88. ../17_intro/contribute.html\n+  89. ../faq/index.html#2_4\n+  90. ../ext/howto.html#5\n+  91. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n+  92. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n+  93. http://www.sgi.com/Technology/STL/\n+  94. ../ext/howto.html\n+  95. ../17_intro/howto.html#3\n+  96. ../23_containers/howto.html#3\n+  97. ../27_io/howto.html#9\n+  98. http://www.ansi.org/\n+  99. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n+ 100. http://www.iso.ch/\n+ 101. ../17_intro/license.html\n+ 102. mailto:libstdc++@gcc.gnu.org"}]}