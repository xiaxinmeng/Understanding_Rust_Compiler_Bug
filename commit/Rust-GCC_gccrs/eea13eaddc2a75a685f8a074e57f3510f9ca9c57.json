{"sha": "eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhMTNlYWRkYzJhNzVhNjg1ZjhhMDc0ZTU3ZjM1MTBmOWNhOWM1Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-07-28T09:36:21Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-07-28T09:36:21Z"}, "message": "darwin-driver.c (SWITCH_TAKES_ARG, [...]): Remove.\n\n\t* config/darwin-driver.c (SWITCH_TAKES_ARG,\n\tWORD_SWITCH_TAKES_ARG): Remove.\n\t* cppspec.c (SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG): Remove.\n\t* defaults.h (DEFAULT_SWITCH_TAKES_ARG,\n\tDEFAULT_WORD_SWITCH_TAKES_ARG): Move from gcc.h.\n\t(SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG): Move default\n\tdefinitions from gcc.c.\n\t* gcc.c (SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG): Move to\n\tdefaults.h.\n\t* gcc.h (DEFAULT_SWITCH_TAKES_ARG, DEFAULT_WORD_SWITCH_TAKES_ARG):\n\tMove to defaults.h.\n\t* opts-common.c: Include tm.h.\n\t(decode_cmdline_option): Use SWITCH_TAKES_ARG and\n\tWORD_SWITCH_TAKES_ARG to count arguments to unknown options.\n\tHandle more than one argument.  Set canonical_option_num_elements.\n\t(decode_cmdline_options_to_array): Set\n\tcanonical_option_num_elements and trailing elements of\n\tcanonical_option.\n\t* opts.h (struct cl_decoded_option): Allow four elements in\n\tcanonical_option.  Add field canonical_option_num_elements.\n\t* Makefile.in (opts-common.o): Update dependencies.\n\nada:\n\t* gcc-interface/misc.c (gnat_init_options): Ignore erroneous\n\toptions.  Check canonical_option_num_elements on options copied.\n\nfortran:\n\t* gfortranspec.c (SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG):\n\tRemove.\n\nFrom-SVN: r162620", "tree": {"sha": "8fceb4a0955d8a639a2e7420a4f65b586c873f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fceb4a0955d8a639a2e7420a4f65b586c873f62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e15568e886ab57612d45618deb416c8f63eec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e15568e886ab57612d45618deb416c8f63eec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e15568e886ab57612d45618deb416c8f63eec2"}], "stats": {"total": 220, "additions": 135, "deletions": 85}, "files": [{"sha": "177c873987fe992dd2de608ba2ccef1bd5c1b69d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -1,3 +1,27 @@\n+2010-07-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/darwin-driver.c (SWITCH_TAKES_ARG,\n+\tWORD_SWITCH_TAKES_ARG): Remove.\n+\t* cppspec.c (SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG): Remove.\n+\t* defaults.h (DEFAULT_SWITCH_TAKES_ARG,\n+\tDEFAULT_WORD_SWITCH_TAKES_ARG): Move from gcc.h.\n+\t(SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG): Move default\n+\tdefinitions from gcc.c.\n+\t* gcc.c (SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG): Move to\n+\tdefaults.h.\n+\t* gcc.h (DEFAULT_SWITCH_TAKES_ARG, DEFAULT_WORD_SWITCH_TAKES_ARG):\n+\tMove to defaults.h.\n+\t* opts-common.c: Include tm.h.\n+\t(decode_cmdline_option): Use SWITCH_TAKES_ARG and\n+\tWORD_SWITCH_TAKES_ARG to count arguments to unknown options.\n+\tHandle more than one argument.  Set canonical_option_num_elements.\n+\t(decode_cmdline_options_to_array): Set\n+\tcanonical_option_num_elements and trailing elements of\n+\tcanonical_option.\n+\t* opts.h (struct cl_decoded_option): Allow four elements in\n+\tcanonical_option.  Add field canonical_option_num_elements.\n+\t* Makefile.in (opts-common.o): Update dependencies.\n+\n 2010-07-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/44790"}, {"sha": "49724aaf4c5cf2ad4e996c8c299d7def538506e9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -2806,7 +2806,7 @@ opts.o : opts.c opts.h options.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(\n    $(FLAGS_H) $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H) debug.h \\\n    $(PLUGIN_H) $(EXCEPT_H) $(LTO_STREAMER_H) opts-diagnostic.h\n opts-common.o : opts-common.c opts.h options.h $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h intl.h $(DIAGNOSTIC_H)\n+   coretypes.h intl.h $(DIAGNOSTIC_H) $(TM_H)\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h \\"}, {"sha": "c6198c84fb389d78e0a32e426c3f04b04b20c24a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -1,3 +1,8 @@\n+2010-07-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/misc.c (gnat_init_options): Ignore erroneous\n+\toptions.  Check canonical_option_num_elements on options copied.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc-interface/misc.c (gnat_handle_option): Update prototype and"}, {"sha": "c104e2935df009004dfa5440306aa1c3c942a17a", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -272,8 +272,13 @@ gnat_init_options (unsigned int decoded_options_count,\n   save_argc = 0;\n   for (i = 0; i < decoded_options_count; i++)\n     {\n+      if (decoded_options[i].errors\n+\t  || decoded_options[i].opt_index == OPT_SPECIAL_unknown)\n+\tcontinue;\n+      gcc_assert (decoded_options[i].canonical_option_num_elements >= 1\n+\t\t  && decoded_options[i].canonical_option_num_elements <= 2);\n       save_argv[save_argc++] = decoded_options[i].canonical_option[0];\n-      if (decoded_options[i].canonical_option[1] != NULL)\n+      if (decoded_options[i].canonical_option_num_elements >= 2)\n \tsave_argv[save_argc++] = decoded_options[i].canonical_option[1];\n     }\n   save_argv[save_argc] = NULL;"}, {"sha": "b23efc50c0a89e5b0544b35581ad0c8c405746b3", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -27,14 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n #include <sys/sysctl.h>\n #include \"xregex.h\"\n \n-#ifndef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) DEFAULT_SWITCH_TAKES_ARG(CHAR)\n-#endif\n-\n-#ifndef WORD_SWITCH_TAKES_ARG\n-#define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n-#endif\n-\n /* When running on a Darwin system and using that system's headers and\n    libraries, default the -mmacosx-version-min flag to be the version\n    of the system on which the compiler is running.  */"}, {"sha": "f9a526847d04a98d2bdb42aaefcfeab5cd2f4246", "filename": "gcc/cppspec.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -30,14 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n    assume the user knows what they're doing.  If no explicit input is\n    mentioned, it will read stdin.  */\n \n-#ifndef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) DEFAULT_SWITCH_TAKES_ARG(CHAR)\n-#endif\n-\n-#ifndef WORD_SWITCH_TAKES_ARG\n-#define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n-#endif\n-\n /* Suffixes for known sorts of input files.  Note that we do not list\n    files which are normally considered to have been preprocessed already,\n    since the user's expectation is that `cpp' always preprocesses.  */"}, {"sha": "c772ff5e9dd76be8d38aa85a42dc3c3e2a45ad40", "filename": "gcc/defaults.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -32,6 +32,38 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GET_ENVIRONMENT(VALUE, NAME) do { (VALUE) = getenv (NAME); } while (0)\n #endif\n \n+/* This defines which switch letters take arguments.  */\n+\n+#define DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n+  ((CHAR) == 'D' || (CHAR) == 'U' || (CHAR) == 'o' \\\n+   || (CHAR) == 'e' || (CHAR) == 'T' || (CHAR) == 'u' \\\n+   || (CHAR) == 'I' || (CHAR) == 'J' || (CHAR) == 'm' \\\n+   || (CHAR) == 'x' || (CHAR) == 'L' || (CHAR) == 'A' \\\n+   || (CHAR) == 'B' )\n+\n+/* This defines which multi-letter switches take arguments.  */\n+\n+#define DEFAULT_WORD_SWITCH_TAKES_ARG(STR)\t\t\\\n+ (!strcmp (STR, \"Tdata\") || !strcmp (STR, \"Ttext\")\t\\\n+  || !strcmp (STR, \"Tbss\") || !strcmp (STR, \"include\")\t\\\n+  || !strcmp (STR, \"imacros\") || !strcmp (STR, \"aux-info\") \\\n+  || !strcmp (STR, \"idirafter\") || !strcmp (STR, \"iprefix\") \\\n+  || !strcmp (STR, \"iwithprefix\") || !strcmp (STR, \"iwithprefixbefore\") \\\n+  || !strcmp (STR, \"iquote\") || !strcmp (STR, \"isystem\") \\\n+  || !strcmp (STR, \"isysroot\") \\\n+  || !strcmp (STR, \"-param\") || !strcmp (STR, \"specs\") \\\n+  || !strcmp (STR, \"MF\") || !strcmp (STR, \"MT\") || !strcmp (STR, \"MQ\") \\\n+  || !strcmp (STR, \"fintrinsic-modules-path\") \\\n+  || !strcmp (STR, \"dumpbase\") || !strcmp (STR, \"dumpdir\"))\n+\n+#ifndef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) DEFAULT_SWITCH_TAKES_ARG (CHAR)\n+#endif\n+\n+#ifndef WORD_SWITCH_TAKES_ARG\n+#define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n+#endif\n+\n /* Store in OUTPUT a string (made with alloca) containing an\n    assembler-name for a local static variable or function named NAME.\n    LABELNO is an integer which is different for each call.  */"}, {"sha": "f03041e0ba75f170fae0e8cfa2e3206c14eb01a8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -1,3 +1,8 @@\n+2010-07-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gfortranspec.c (SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG):\n+\tRemove.\n+\n 2010-07-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45077"}, {"sha": "0c3e9abdb0bd30c94ca9e7ad4f5d8dafa675f3b5", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -113,22 +113,6 @@ static void append_arg (const char *);\n static int g77_newargc;\n static const char **g77_newargv;\n \n-/* --- This comes from gcc.c (2.8.1) verbatim: */\n-\n-/* This defines which switch letters take arguments.  */\n-\n-#ifndef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) DEFAULT_SWITCH_TAKES_ARG(CHAR)\n-#endif\n-\n-/* This defines which multi-letter switches take arguments.  */\n-\n-#ifndef WORD_SWITCH_TAKES_ARG\n-#define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n-#endif\n-\n-/* --- End of verbatim.  */\n-\n /* Assumes text[0] == '-'.  Returns number of argv items that belong to\n    (and follow) this one, an option id for options important to the\n    caller, and a pointer to the first char of the arg, if embedded (else"}, {"sha": "62b3378f44982e202aa3abce945f0aff5ee05b0e", "filename": "gcc/gcc.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -946,13 +946,6 @@ struct user_specs\n \n static struct user_specs *user_specs_head, *user_specs_tail;\n \n-#ifndef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) DEFAULT_SWITCH_TAKES_ARG(CHAR)\n-#endif\n-\n-#ifndef WORD_SWITCH_TAKES_ARG\n-#define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n-#endif\n \f\n #ifdef HAVE_TARGET_EXECUTABLE_SUFFIX\n /* This defines which switches stop a full compilation.  */"}, {"sha": "8d59773c05936da041d47f5da47ea5c5938cb211", "filename": "gcc/gcc.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -32,31 +32,6 @@ struct spec_function\n   const char *(*func) (int, const char **);\n };\n \n-/* This defines which switch letters take arguments.  */\n-\n-#define DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n-  ((CHAR) == 'D' || (CHAR) == 'U' || (CHAR) == 'o' \\\n-   || (CHAR) == 'e' || (CHAR) == 'T' || (CHAR) == 'u' \\\n-   || (CHAR) == 'I' || (CHAR) == 'J' || (CHAR) == 'm' \\\n-   || (CHAR) == 'x' || (CHAR) == 'L' || (CHAR) == 'A' \\\n-   || (CHAR) == 'B' )\n-\n-/* This defines which multi-letter switches take arguments.  */\n-\n-#define DEFAULT_WORD_SWITCH_TAKES_ARG(STR)\t\t\\\n- (!strcmp (STR, \"Tdata\") || !strcmp (STR, \"Ttext\")\t\\\n-  || !strcmp (STR, \"Tbss\") || !strcmp (STR, \"include\")\t\\\n-  || !strcmp (STR, \"imacros\") || !strcmp (STR, \"aux-info\") \\\n-  || !strcmp (STR, \"idirafter\") || !strcmp (STR, \"iprefix\") \\\n-  || !strcmp (STR, \"iwithprefix\") || !strcmp (STR, \"iwithprefixbefore\") \\\n-  || !strcmp (STR, \"iquote\") || !strcmp (STR, \"isystem\") \\\n-  || !strcmp (STR, \"isysroot\") \\\n-  || !strcmp (STR, \"-param\") || !strcmp (STR, \"specs\") \\\n-  || !strcmp (STR, \"MF\") || !strcmp (STR, \"MT\") || !strcmp (STR, \"MQ\") \\\n-  || !strcmp (STR, \"fintrinsic-modules-path\") \\\n-  || !strcmp (STR, \"dumpbase\") || !strcmp (STR, \"dumpdir\"))\n-\n-\n /* These are exported by gcc.c.  */\n extern int do_spec (const char *);\n extern void record_temp_file (const char *, int, int);"}, {"sha": "8028015a1228331897c3119fe340dd58fcd955ec", "filename": "gcc/opts-common.c", "status": "modified", "additions": 56, "deletions": 15, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"options.h\"\n #include \"diagnostic.h\"\n+#include \"tm.h\" /* For SWITCH_TAKES_ARG and WORD_SWITCH_TAKES_ARG.  */\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and\n@@ -138,7 +139,9 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   const char *opt, *arg = 0;\n   char *dup = 0;\n   int value = 1;\n-  unsigned int result = 1;\n+  unsigned int result = 1, i;\n+  size_t total_len;\n+  char *p;\n   const struct cl_option *option;\n   int errors = 0;\n \n@@ -242,22 +245,54 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   decoded->arg = arg;\n   decoded->value = value;\n   decoded->errors = errors;\n-  switch (result)\n+\n+  if (opt_index == OPT_SPECIAL_unknown)\n     {\n-    case 1:\n-      decoded->orig_option_with_args_text = argv[0];\n-      decoded->canonical_option[0] = argv[0];\n-      decoded->canonical_option[1] = NULL;\n-      break;\n-    case 2:\n-      decoded->orig_option_with_args_text = concat (argv[0], \" \",\n-\t\t\t\t\t\t    argv[1], NULL);\n-      decoded->canonical_option[0] = argv[0];\n-      decoded->canonical_option[1] = argv[1];\n-      break;\n-    default:\n-      gcc_unreachable ();\n+      /* Skip the correct number of arguments for options handled\n+\t through specs.  */\n+      const char *popt = argv[0] + 1;\n+      int c = *popt;\n+\n+      gcc_assert (result == 1);\n+      if (SWITCH_TAKES_ARG (c) > (popt[1] != 0))\n+\tresult += SWITCH_TAKES_ARG (c) - (popt[1] != 0);\n+      else if (WORD_SWITCH_TAKES_ARG (popt))\n+\tresult += WORD_SWITCH_TAKES_ARG (popt);\n+      if (result > 1)\n+\tfor (i = 1; i < result; i++)\n+\t  if (argv[i] == NULL)\n+\t    {\n+\t      result = i;\n+\t      break;\n+\t    }\n     }\n+\n+  gcc_assert (result >= 1 && result <= ARRAY_SIZE (decoded->canonical_option));\n+  decoded->canonical_option_num_elements = result;\n+  total_len = 0;\n+  for (i = 0; i < ARRAY_SIZE (decoded->canonical_option); i++)\n+    {\n+      if (i < result)\n+\t{\n+\t  decoded->canonical_option[i] = argv[i];\n+\t  total_len += strlen (argv[i]) + 1;\n+\t}\n+      else\n+\tdecoded->canonical_option[i] = NULL;\n+    }\n+  decoded->orig_option_with_args_text = p = XNEWVEC (char, total_len);\n+  for (i = 0; i < result; i++)\n+    {\n+      size_t len = strlen (argv[i]);\n+\n+      memcpy (p, argv[i], len);\n+      p += len;\n+      if (i == result - 1)\n+\t*p++ = 0;\n+      else\n+\t*p++ = ' ';\n+    }\n+\n   return result;\n }\n \n@@ -284,8 +319,11 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n   opt_array[0].opt_index = OPT_SPECIAL_program_name;\n   opt_array[0].arg = argv[0];\n   opt_array[0].orig_option_with_args_text = argv[0];\n+  opt_array[0].canonical_option_num_elements = 1;\n   opt_array[0].canonical_option[0] = argv[0];\n   opt_array[0].canonical_option[1] = NULL;\n+  opt_array[0].canonical_option[2] = NULL;\n+  opt_array[0].canonical_option[3] = NULL;\n   opt_array[0].value = 1;\n   opt_array[0].errors = 0;\n   num_decoded_options = 1;\n@@ -300,8 +338,11 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n \t  opt_array[num_decoded_options].opt_index = OPT_SPECIAL_input_file;\n \t  opt_array[num_decoded_options].arg = opt;\n \t  opt_array[num_decoded_options].orig_option_with_args_text = opt;\n+\t  opt_array[num_decoded_options].canonical_option_num_elements = 1;\n \t  opt_array[num_decoded_options].canonical_option[0] = opt;\n \t  opt_array[num_decoded_options].canonical_option[1] = NULL;\n+\t  opt_array[num_decoded_options].canonical_option[2] = NULL;\n+\t  opt_array[num_decoded_options].canonical_option[3] = NULL;\n \t  opt_array[num_decoded_options].value = 1;\n \t  opt_array[num_decoded_options].errors = 0;\n \t  num_decoded_options++;"}, {"sha": "005a846f12a49a2038f3b91f8ff539fb451ac705", "filename": "gcc/opts.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea13eaddc2a75a685f8a074e57f3510f9ca9c57/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=eea13eaddc2a75a685f8a074e57f3510f9ca9c57", "patch": "@@ -121,10 +121,12 @@ struct cl_decoded_option\n   /* The canonical form of the option and its argument, for when it is\n      necessary to reconstruct argv elements (in particular, for\n      processing specs and passing options to subprocesses from the\n-     driver).  The first element of this array is non-NULL; the second\n-     is NULL if the canonical form uses only one argv element,\n-     non-NULL otherwise.  */\n-  const char *canonical_option[2];\n+     driver).  */\n+  const char *canonical_option[4];\n+\n+  /* The number of elements in the canonical form of the option and\n+     arguments; always at least 1.  */\n+  size_t canonical_option_num_elements;\n \n   /* For a boolean option, 1 for the true case and 0 for the \"no-\"\n      case.  For an unsigned integer option, the value of the"}]}