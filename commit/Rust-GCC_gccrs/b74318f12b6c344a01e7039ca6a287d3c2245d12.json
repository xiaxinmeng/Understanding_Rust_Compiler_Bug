{"sha": "b74318f12b6c344a01e7039ca6a287d3c2245d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0MzE4ZjEyYjZjMzQ0YTAxZTcwMzljYTZhMjg3ZDNjMjI0NWQxMg==", "commit": {"author": {"name": "Bob Walters", "email": "bob.s.walters@gmail.com", "date": "2008-11-07T15:26:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-11-07T15:26:25Z"}, "message": "pointer.h: Add experimental support for non-standard pointer types in containers via the...\n\n2008-11-07  Bob Walters  <bob.s.walters@gmail.com>\n\n\t* include/ext/pointer.h: Add experimental support for non-standard\n\tpointer types in containers via the allocator::pointer typedef.\n\t(Currently only supported/working with std::vector)\n\t* include/ext/cast.h: Add overload-able pointer casting functions\n\tfor use in containers supporting non-standard pointer types.\n\t* include/ext/extptr_allocator.h: Add _ExtPtr_allocator.\n\t* include/Makefile.am: Update.\n\t* include/precompiled/extc++.h: Likewise.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/ext/ext_pointer/1.cc: New.\n\t* testsuite/ext/ext_pointer/1_neg.cc: Likewise.\t\n\t* testsuite/23_containers/vector/ext_pointer/citerators.cc: New.\n\t* testsuite/23_containers/vector/ext_pointer/data_access.cc: Likewise.\n\t* testsuite/23_containers/vector/ext_pointer/resize.cc: Likewise.\n\t* testsuite/23_containers/vector/ext_pointer/types/1.cc: Likewise.\n\t* testsuite/23_containers/vector/ext_pointer/modifiers/element.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/ext_pointer/modifiers/erase.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/ext_pointer/modifiers/insert.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n\t1.cc: Likewise.\n\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n\t3.cc: Likewise.\n\nFrom-SVN: r141674", "tree": {"sha": "d2a3c6d9e64461b361d0aee8e62d31d72b6e22f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2a3c6d9e64461b361d0aee8e62d31d72b6e22f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74318f12b6c344a01e7039ca6a287d3c2245d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74318f12b6c344a01e7039ca6a287d3c2245d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74318f12b6c344a01e7039ca6a287d3c2245d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74318f12b6c344a01e7039ca6a287d3c2245d12/comments", "author": {"login": "bob-walters", "id": 2716127, "node_id": "MDQ6VXNlcjI3MTYxMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/2716127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bob-walters", "html_url": "https://github.com/bob-walters", "followers_url": "https://api.github.com/users/bob-walters/followers", "following_url": "https://api.github.com/users/bob-walters/following{/other_user}", "gists_url": "https://api.github.com/users/bob-walters/gists{/gist_id}", "starred_url": "https://api.github.com/users/bob-walters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bob-walters/subscriptions", "organizations_url": "https://api.github.com/users/bob-walters/orgs", "repos_url": "https://api.github.com/users/bob-walters/repos", "events_url": "https://api.github.com/users/bob-walters/events{/privacy}", "received_events_url": "https://api.github.com/users/bob-walters/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fee6a39eb712a971f56f6c80ccb6b260655d3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fee6a39eb712a971f56f6c80ccb6b260655d3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fee6a39eb712a971f56f6c80ccb6b260655d3e8"}], "stats": {"total": 1008, "additions": 1007, "deletions": 1}, "files": [{"sha": "7cb7f8fc8ee6e6808a9a0fdeb0fd63ced81bc70a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -1,3 +1,31 @@\n+2008-11-07  Bob Walters  <bob.s.walters@gmail.com>\n+\n+\t* include/ext/pointer.h: Add experimental support for non-standard\n+\tpointer types in containers via the allocator::pointer typedef.\n+\t(Currently only supported/working with std::vector)\n+\t* include/ext/cast.h: Add overload-able pointer casting functions\n+\tfor use in containers supporting non-standard pointer types.\n+\t* include/ext/extptr_allocator.h: Add _ExtPtr_allocator.\n+\t* include/Makefile.am: Update.\n+\t* include/precompiled/extc++.h: Likewise.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/ext/ext_pointer/1.cc: New.\n+\t* testsuite/ext/ext_pointer/1_neg.cc: Likewise.\t\n+\t* testsuite/23_containers/vector/ext_pointer/citerators.cc: New.\n+\t* testsuite/23_containers/vector/ext_pointer/data_access.cc: Likewise.\n+\t* testsuite/23_containers/vector/ext_pointer/resize.cc: Likewise.\n+\t* testsuite/23_containers/vector/ext_pointer/types/1.cc: Likewise.\n+\t* testsuite/23_containers/vector/ext_pointer/modifiers/element.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/ext_pointer/modifiers/erase.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/ext_pointer/modifiers/insert.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n+\t1.cc: Likewise.\n+\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n+\t3.cc: Likewise.\n+\n 2008-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/38017"}, {"sha": "0a2a7a5095dbd1f83d987657f2d7b19ba8c2f92d", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -484,10 +484,12 @@ ext_headers = \\\n \t${ext_srcdir}/atomicity.h \\\n \t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n+\t${ext_srcdir}/cast.h \\\n \t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/concurrence.h \\\n \t${ext_srcdir}/debug_allocator.h \\\n \t${ext_srcdir}/enc_filebuf.h \\\n+\t${ext_srcdir}/extptr_allocator.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n@@ -499,6 +501,7 @@ ext_headers = \\\n \t${ext_srcdir}/numeric \\\n \t${ext_srcdir}/numeric_traits.h \\\n \t${ext_srcdir}/pod_char_traits.h \\\n+\t${ext_srcdir}/pointer.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\\n \t${ext_srcdir}/rope \\"}, {"sha": "72404f802f7c3e960ccbb57da6150c17065d6cd6", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -748,10 +748,12 @@ ext_headers = \\\n \t${ext_srcdir}/atomicity.h \\\n \t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n+\t${ext_srcdir}/cast.h \\\n \t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/concurrence.h \\\n \t${ext_srcdir}/debug_allocator.h \\\n \t${ext_srcdir}/enc_filebuf.h \\\n+\t${ext_srcdir}/extptr_allocator.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n@@ -763,6 +765,7 @@ ext_headers = \\\n \t${ext_srcdir}/numeric \\\n \t${ext_srcdir}/numeric_traits.h \\\n \t${ext_srcdir}/pod_char_traits.h \\\n+\t${ext_srcdir}/pointer.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\\n \t${ext_srcdir}/rope \\"}, {"sha": "22ffc33c28f3567d6964333b3db4173ff4b268d9", "filename": "libstdc++-v3/include/precompiled/extc++.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -1,6 +1,6 @@\n // C++ includes used for precompiling extensions -*- C++ -*-\n \n-// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,8 +37,10 @@\n #include <ext/array_allocator.h>\n #include <ext/atomicity.h>\n #include <ext/bitmap_allocator.h>\n+#include <ext/cast.h>\n #include <ext/concurrence.h>\n #include <ext/debug_allocator.h>\n+#include <ext/extptr_allocator.h>\n #include <ext/functional>\n #include <ext/iterator>\n #include <ext/malloc_allocator.h>\n@@ -47,6 +49,7 @@\n #include <ext/new_allocator.h>\n #include <ext/numeric>\n #include <ext/pod_char_traits.h>\n+#include <ext/pointer.h>\n #include <ext/pool_allocator.h>\n #include <ext/rb_tree>\n #include <ext/rope>"}, {"sha": "fc2702c510897906a262d07779b673ed6baf8214", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/citerators.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fciterators.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <ext/extptr_allocator.h>\n+\n+// Ensures equivalence of iterators based on low-level comparison\n+// between const / non-const Pointer types.\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> > v(7);\n+  VERIFY( v.cbegin() == v.begin() );\n+  VERIFY( v.cend() == v.end() );\n+  VERIFY( v.crbegin() == v.rbegin() );\n+  VERIFY( v.crend() == v.rend() );\n+  VERIFY( v.cbegin() != v.cend() );\n+  VERIFY( v.crbegin() != v.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f8ccd4861c0b0467051638e0a0f270a162f06785", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/data_access.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fdata_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fdata_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fdata_access.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,62 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <ext/extptr_allocator.h>\n+\n+// libstdc++/23578\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> > vector_type;\n+\n+  {\n+    const int A[] = { 0, 1, 2, 3, 4 };    \n+    vector_type v(A, A + 5);\n+    VERIFY( v.data() == &v.front() );\n+    int* pi = &* v.data();\n+    VERIFY( *pi == 0 );\n+  }\n+\n+  {\n+    const int A[] = { 4, 3, 2, 1, 0 };    \n+    const vector_type cv(A, A + 5);\n+    VERIFY( cv.data() == &cv.front() );\n+    const int* pci = &* cv.data();\n+    VERIFY( *pci == 4 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e98dc5f626f94812c68bb53d1799955cbc6b1836", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/explicit_instantiation/1.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F1.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,36 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <ext/extptr_allocator.h>\n+\n+// { dg-do compile }\n+\n+template class std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> >;"}, {"sha": "a19961625600a14d86c7c7e6cfc255a535af53d3", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/explicit_instantiation/3.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F3.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,37 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <ext/extptr_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/21770\n+template class std::vector<int, __gnu_cxx::_ExtPtr_allocator<char> >;"}, {"sha": "31b72b03eba0da0ecc8e560abc7b3a6bd5397625", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/modifiers/element.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Felement.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Felement.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Felement.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,86 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <ext/extptr_allocator.h>\n+\n+// General tests element access and manipulation\n+void test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int A[] = { 0, 1, 2, 3, 4 };\n+  __gnu_cxx::_ExtPtr_allocator<int> alloc;\n+  std::vector<int,__gnu_cxx::_ExtPtr_allocator<int> > mv( A, A+5, alloc );\n+\n+  VERIFY( mv.size() == 5 );\n+  VERIFY( mv.front() == 0 );\n+  VERIFY( mv.back() == 4 );\n+  VERIFY( mv.at(2) == 2 );\n+  VERIFY( mv[3] == 3);\n+  mv.front() = 5;\n+  mv.back() = 6;\n+  mv.at(2) = 7;\n+  mv[3] = 8;\n+  VERIFY( mv.size() == 5 );\n+  VERIFY( mv.front() == 5 );\n+  VERIFY( mv.back() == 6 );\n+  VERIFY( mv.at(2) == 7 );\n+  VERIFY( mv[3] == 8 );\n+\n+  try \n+    {\n+  \tmv.at(100) = 8;\n+    }\n+  catch(std::out_of_range&)\n+    {\n+      VERIFY( true );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  \n+  const std::vector<int,__gnu_cxx::_ExtPtr_allocator<int> > cmv( mv );\n+  VERIFY( cmv.get_allocator() == mv.get_allocator() );\n+  VERIFY( mv.size() == 5 );\n+  VERIFY( mv.front() == 5 );\n+  VERIFY( mv.back() == 6 );\n+  VERIFY( mv.at(2) == 7 );\n+  VERIFY( mv[3] == 8 );\t\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8d611401cefe9c41fd6c54fc3b302ca8203f3daf", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/modifiers/erase.cc", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Ferase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Ferase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Ferase.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,153 @@\n+// Bob Walters 10-2008\n+\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <ext/extptr_allocator.h>\n+\n+const int  A[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+const int A1[] = {0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+const int A2[] = {0, 2, 3, 4, 10, 11, 12, 13, 14, 15};\n+const int A3[] = {0, 2, 3, 4, 10, 11};\n+const int A4[] = {4, 10, 11};\n+const int A5[] = {4, 10};\n+const unsigned int  N = sizeof(A)  / sizeof(int);\n+const unsigned int N1 = sizeof(A1) / sizeof(int);\n+const unsigned int N2 = sizeof(A2) / sizeof(int);\n+const unsigned int N3 = sizeof(A3) / sizeof(int);\n+const unsigned int N4 = sizeof(A4) / sizeof(int);\n+const unsigned int N5 = sizeof(A5) / sizeof(int);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::vector<int,__gnu_cxx::_ExtPtr_allocator<int> >  vec_type;\n+  typedef vec_type::iterator iterator_type;\n+\n+  vec_type v(A, A + N);\n+  std::cout << v.size() << std::endl;\n+  std::cout << v.capacity() << std::endl;\n+  std::cout << v.max_size() << std::endl;\n+\n+  iterator_type it1 = v.erase(v.begin() + 1);\n+  VERIFY( it1 == v.begin() + 1 );\n+  std::cout << N << std::endl << v.size() << std::endl;\n+  VERIFY( v.size() == N1 );\n+  VERIFY( std::equal(v.begin(), v.end(), A1) );\n+  \n+  iterator_type it2 = v.erase(v.begin() + 4, v.begin() + 9);\n+  VERIFY( it2 == v.begin() + 4 );\n+  VERIFY( v.size() == N2 );\n+  VERIFY( std::equal(v.begin(), v.end(), A2) );\n+  \n+  iterator_type it3 = v.erase(v.begin() + 6, v.end());\n+  VERIFY( it3 == v.begin() + 6 );\n+  VERIFY( v.size() == N3 );\n+  VERIFY( std::equal(v.begin(), v.end(), A3) );\n+\n+  iterator_type it4 = v.erase(v.begin(), v.begin() + 3);\n+  VERIFY( it4 == v.begin() );\n+  VERIFY( v.size() == N4 );\n+  VERIFY( std::equal(v.begin(), v.end(), A4) );\n+\n+  iterator_type it5 = v.erase(v.begin() + 2);\n+  VERIFY( it5 == v.begin() + 2 );\n+  VERIFY( v.size() == N5 );\n+  VERIFY( std::equal(v.begin(), v.end(), A5) );\n+\n+  iterator_type it6 = v.erase(v.begin(), v.end());\n+  VERIFY( it6 == v.begin() );\n+  VERIFY( v.empty() );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef __gnu_cxx::_ExtPtr_allocator<int> int_alloc_type;\n+  typedef __gnu_cxx::_ExtPtr_allocator< std::vector<int, int_alloc_type> > vec_alloc_type;\n+  typedef std::vector<std::vector<int, int_alloc_type >,vec_alloc_type>  vec_type; \n+  typedef vec_type::iterator          iterator_type;\n+\n+  vec_type v, v1, v2, v3, v4, v5;\n+  for (unsigned int i = 0; i < N; ++i)\n+    v.push_back(std::vector<int,int_alloc_type>(1, A[i]));\n+  for (unsigned int i = 0; i < N1; ++i)\n+    v1.push_back(std::vector<int,int_alloc_type>(1, A1[i]));\n+  for (unsigned int i = 0; i < N2; ++i)\n+    v2.push_back(std::vector<int,int_alloc_type>(1, A2[i]));\n+  for (unsigned int i = 0; i < N3; ++i)\n+    v3.push_back(std::vector<int,int_alloc_type>(1, A3[i]));\n+  for (unsigned int i = 0; i < N4; ++i)\n+    v4.push_back(std::vector<int,int_alloc_type>(1, A4[i]));\n+  for (unsigned int i = 0; i < N5; ++i)\n+    v5.push_back(std::vector<int,int_alloc_type>(1, A5[i]));\n+  \n+  iterator_type it1 = v.erase(v.begin() + 1);\n+  VERIFY( it1 == v.begin() + 1 );\n+  VERIFY( v.size() == N1 );\n+  VERIFY( std::equal(v.begin(), v.end(), v1.begin()) );\n+  \n+  iterator_type it2 = v.erase(v.begin() + 4, v.begin() + 9);\n+  VERIFY( it2 == v.begin() + 4 );\n+  VERIFY( v.size() == N2 );\n+  VERIFY( std::equal(v.begin(), v.end(), v2.begin()) );\n+  \n+  iterator_type it3 = v.erase(v.begin() + 6, v.end());\n+  VERIFY( it3 == v.begin() + 6 );\n+  VERIFY( v.size() == N3 );\n+  VERIFY( std::equal(v.begin(), v.end(), v3.begin()) );\n+\n+  iterator_type it4 = v.erase(v.begin(), v.begin() + 3);\n+  VERIFY( it4 == v.begin() );\n+  VERIFY( v.size() == N4 );\n+  VERIFY( std::equal(v.begin(), v.end(), v4.begin()) );\n+\n+  iterator_type it5 = v.erase(v.begin() + 2);\n+  VERIFY( it5 == v.begin() + 2 );\n+  VERIFY( v.size() == N5 );\n+  VERIFY( std::equal(v.begin(), v.end(), v5.begin()) );\n+\n+  iterator_type it6 = v.erase(v.begin(), v.end());\n+  VERIFY( it6 == v.begin() );\n+  VERIFY( v.empty() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "2e3e000413acc77c9d2d0dea0b1992f31ec60e7d", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/modifiers/insert.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Finsert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Finsert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fmodifiers%2Finsert.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,76 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <ext/extptr_allocator.h>\n+#include <stdexcept>\n+\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::_ExtPtr_allocator<int> alloc;\n+  std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> > iv(alloc);\n+  VERIFY( iv.get_allocator() == alloc );\n+  VERIFY( iv.size() == 0 );\n+  \n+  int A[] = { 0, 1, 2, 3, 4 };\n+  int B[] = { 5, 5, 5, 5, 5 };\n+  int C[] = { 6, 7 };\n+  iv.insert(iv.end(), A, A+5 );\n+  VERIFY( iv.size() == 5 );\n+  iv.insert(iv.begin(), 5, 5 );\n+  iv.insert(iv.begin()+5, 7);\n+  iv.insert(iv.begin()+5, 6);\n+  VERIFY( std::equal(iv.begin(), iv.begin()+5, B ));\n+  VERIFY( std::equal(iv.begin()+5, iv.begin()+7, C));\n+  VERIFY( std::equal(iv.begin()+7, iv.end(), A));\n+  VERIFY( iv.size() == 12 );\n+\n+  try\n+    {\n+      iv.insert(iv.end(), iv.max_size() + 1, 1);\n+    }\n+  catch(std::length_error&)\n+    {\n+      VERIFY( true );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d57e46ad0ea7c637a865ce7b91452b21c929b489", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/resize.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fresize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fresize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fresize.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,74 @@\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <stdexcept>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <ext/extptr_allocator.h>\n+\n+\n+void test01()\n+{\n+  // non POD types\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> > vec01;\n+  typedef std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> >::size_type size_type;\n+\n+  VERIFY(vec01.empty());\n+\n+  const int A[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };    \n+\n+  // Test resize of the vector based on reserve\n+  size_type sz01 = vec01.capacity();\n+  vec01.reserve(100);\n+  size_type sz02 = vec01.capacity();\n+  VERIFY(sz02 >= sz01);\n+\n+  // grow/shrink\n+  vec01.assign( A, A+10 );\n+  sz01 = vec01.size() + 100;\n+  vec01.resize(sz01);\n+  sz02 = vec01.size();\n+  VERIFY(sz01 == sz02);\n+  VERIFY(std::equal(vec01.begin(), vec01.begin()+10, A));\n+  \n+  sz01 = vec01.size() - 100;\n+  vec01.resize(sz01);\n+  sz02 = vec01.size();\n+  VERIFY(sz01 == sz02);\n+  VERIFY(std::equal(vec01.begin(), vec01.end(), A));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ba6b727ca0492dfc1d979481f063f08ba87c5eb3", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/types/1.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F1.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,70 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This is a copy of vector/types/1.cc with altered allocator.\n+// The operator+()s in this test initially failed the test -\n+// they stress the accurate recognition, by the compiler,\n+// of _Pointer_adapter's own pointer arithmetic functions,\n+// which have to match perfectly on the int type to get\n+// chosen by the compiler when it sees: _Pointer_adapter<T> + int, etc.\n+\n+#include <vector>\n+#include <ext/extptr_allocator.h>\n+\n+namespace N\n+{\n+  struct X { };\n+\n+  template<typename T>\n+    X operator+(T, std::size_t)\n+    { return X(); }\n+\n+  template<typename T>\n+    X operator-(T, T)\n+    { return X(); }\n+}\n+\n+int main()\n+{\n+  std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > v(5);\n+  const std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > w(1);\n+\n+  v[0];\n+  w[0];\n+  v.size();\n+  v.capacity();\n+  v.resize(1);\n+  v.insert(v.begin(), N::X());\n+  v.insert(v.begin(), 1, N::X());\n+  v.insert(v.begin(), w.begin(), w.end());\n+  v = w;\n+\n+  return 0;\n+}"}, {"sha": "f8ca588150f38696fd03d9ba06b215349c1c55da", "filename": "libstdc++-v3/testsuite/ext/ext_pointer/1.cc", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,208 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <ext/cast.h>\n+#include <ext/pointer.h>\n+\n+using __gnu_cxx::_Pointer_adapter;\n+using __gnu_cxx::_Relative_pointer_impl;\n+using __gnu_cxx::__static_pointer_cast;\n+using __gnu_cxx::__const_pointer_cast;\n+\n+\n+void \n+test01() {\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef _Pointer_adapter<_Relative_pointer_impl<int> >       pointer;\n+  typedef _Pointer_adapter<_Relative_pointer_impl<const int> > const_pointer;\n+\n+  int A[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+\n+  // basic pointer assignment/access tests.\n+  pointer x = &A[0];\n+  VERIFY(*x == 0);\n+  VERIFY(std::equal(x, x+10, A)); \n+  pointer y(&A[9]);\n+  VERIFY(*y == 9);\n+\n+  // assignability\n+  pointer z(x);\n+  VERIFY(z==x);\n+  VERIFY(*z == 0);\n+\n+  z = y;\n+  VERIFY(z==y);\n+  VERIFY(z!=x);\n+  VERIFY(z>x);\n+  VERIFY(*z == 9);\n+  \n+  // pointer arithmetic\n+  VERIFY(*++x == 1);\n+  VERIFY(*--x == 0);\n+  VERIFY(*(x++) == 0);\n+  VERIFY(*(x--) == 1);\n+  VERIFY(*(x+2) == 2);\n+  VERIFY(*(2+x) == 2);\n+  VERIFY(*(y-2) == 7);\n+  VERIFY(y - x == 9);\n+  VERIFY(&*y - x == 9);\n+  VERIFY(y - &*x == 9);\n+  \n+  size_t s(y - x);\n+  VERIFY(s == 9);\n+}\n+\n+\n+struct A {\n+  mutable int i;\n+};\n+struct B : public A{\n+  mutable int j;\n+};\n+typedef _Pointer_adapter<_Relative_pointer_impl<B> >       B_pointer; \n+typedef _Pointer_adapter<_Relative_pointer_impl<A> >       A_pointer; \n+typedef _Pointer_adapter<_Relative_pointer_impl<const A> > const_A_pointer; \n+typedef _Pointer_adapter<_Relative_pointer_impl<const B> > const_B_pointer; \n+\n+\n+// Test implicit conversion from B* to A*\n+void inc(_Pointer_adapter<_Relative_pointer_impl<A> > a) {\n+  a->i++;\n+}\n+// Test implicit conversion from B* to const B*\n+void inc2(_Pointer_adapter<_Relative_pointer_impl<const B> > b) {\n+  b->i++;\n+  b->j++;\n+}\n+// Test implicit conversion from B* to const A*\n+void inc3(_Pointer_adapter<_Relative_pointer_impl<const A> > a) {\n+  a->i++;\n+}\n+\n+void test02() {\n+  bool test __attribute__((unused)) = true;\n+\n+  B b;\n+  b.i = 2;\n+  b.j = 2;\n+\n+  B_pointer Bptr(&b);\n+  VERIFY(Bptr->i == 2);\n+  Bptr->i++;\n+  VERIFY(b.i == 3);\n+  \n+  const_B_pointer cBptr(&b);\n+  b.i++;\n+  VERIFY(cBptr->i == 4);\n+  \n+  A_pointer Aptr(&b);\n+  b.i++;\n+  VERIFY(Aptr->i == 5);\n+  Aptr->i++;\n+  VERIFY(b.i == 6);\n+  \n+  const_A_pointer cAptr(&b);\n+  b.i++;\n+  VERIFY(cAptr->i == 7);\n+\n+  const_B_pointer cBptr2(Bptr);\n+  b.i++;\n+  VERIFY(cBptr2->i == 8);\n+  \n+  A_pointer Aptr2(Bptr);\n+  b.i++;\n+  VERIFY(Aptr2->i == 9);\n+  Aptr2->i++;\n+  VERIFY(b.i == 10);\n+\n+  const_A_pointer cAptr2(Bptr);\n+  b.i++;\n+  VERIFY(cAptr2->i == 11);\n+\n+  // Implicit casting during invocation\n+  inc(Bptr);\n+  VERIFY(Bptr->i == 12);\n+  inc2(Bptr);\n+  VERIFY(Bptr->i == 13);\n+  VERIFY(Bptr->j == 3);\n+  inc3(Bptr);\n+  VERIFY(Bptr->i == 14);\n+}\n+\n+void test03() {\n+  bool test __attribute__((unused)) = true;\n+\n+  B b;\n+  B* bPtr = &b;\n+  A* aPtr __attribute__((unused)) = __static_pointer_cast<A*>(bPtr);\n+  const A *caPtr __attribute__((unused)) = __static_pointer_cast<const A*>(bPtr);\n+  const B *cbPtr __attribute__((unused)) = __static_pointer_cast<const B*>(bPtr);\n+\n+  B_pointer Bptr2 = &b;\n+\n+  const A* caPtr2 __attribute__((unused)) = __static_pointer_cast<const A*>(Bptr2);\n+  A * aPtr2 __attribute__((unused)) = __static_pointer_cast<A*>(Bptr2);\n+  const B* cbPtr2 __attribute__((unused)) = __const_pointer_cast<const B*>(Bptr2);\n+\n+  const_A_pointer caPtr3 __attribute__((unused)) = __static_pointer_cast<const A*>(Bptr2);\n+  A_pointer aPtr3 __attribute__((unused)) = __static_pointer_cast<A*>(Bptr2);\n+  const_B_pointer cbPtr3 __attribute__((unused)) = __const_pointer_cast<const B*>(Bptr2);\n+}\n+\n+// Confirm the usability of the __static_pointer_cast<> template function\n+// to transform between _Pointer_adapter and standard versions.\n+void test04() {\n+  bool test __attribute__((unused)) = true;\n+\n+  B b;\n+  B_pointer bPtr = &b;\n+\n+  A_pointer aPtr = __static_pointer_cast<A_pointer>(bPtr);\n+  VERIFY(aPtr == bPtr);\n+  B_pointer bPtr2 = __static_pointer_cast<B_pointer>(aPtr);\n+  VERIFY(bPtr2 == aPtr);\n+\n+  A* aPtr3 = __static_pointer_cast<A*>(bPtr);\n+  VERIFY(aPtr3 == bPtr);\n+  B* bPtr3 = __static_pointer_cast<B*>(aPtr);\n+  VERIFY(bPtr3 == aPtr);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}"}, {"sha": "678ac3bd6c010bf3f86110a1ba680cf885729340", "filename": "libstdc++-v3/testsuite/ext/ext_pointer/1_neg.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74318f12b6c344a01e7039ca6a287d3c2245d12/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc?ref=b74318f12b6c344a01e7039ca6a287d3c2245d12", "patch": "@@ -0,0 +1,112 @@\n+// Bob Walters 10-2008\n+\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <ext/pointer.h>\n+\n+using __gnu_cxx::_Pointer_adapter;\n+using __gnu_cxx::_Relative_pointer_impl;\n+using __gnu_cxx::__static_pointer_cast;\n+using __gnu_cxx::__const_pointer_cast;\n+\n+\n+struct A {\n+  int i;\n+};\n+struct B : public A{\n+  int j;\n+};\n+typedef _Pointer_adapter<_Relative_pointer_impl<B> > B_pointer; \n+typedef _Pointer_adapter<_Relative_pointer_impl<const B> > const_B_pointer; \n+typedef _Pointer_adapter<_Relative_pointer_impl<A> > A_pointer; \n+typedef _Pointer_adapter<_Relative_pointer_impl<const A> > const_A_pointer; \n+\n+\n+void test01(void) {\n+  bool test __attribute__((unused)) = true;\n+\n+  A a;\n+  B b;\n+\n+  A_pointer aptr( &a );\n+\n+  // Can't implicitly cast from A* to B*\n+  B_pointer bptr1(aptr); // { dg-error \"instantiated from here\" 31 }\n+  B_pointer bptr2(&a); // { dg-error \"instantiated from here\" 32 }\n+\n+  // but explicit cast/conversion is OK.\n+  B_pointer bptr3(__static_pointer_cast<B_pointer>(aptr)); // ok\n+  B_pointer bptr4(__static_pointer_cast<B_pointer>(&a)); // ok\n+\n+  // Can't implicitly cast from A* to B*\n+  bptr1 = aptr; // { dg-error \"instantiated from here\" 39 }\n+  bptr1 = &a; // { dg-error \"instantiated from here\" 40 }\n+\n+  // but explicit cast/conversion is OK.\n+  bptr1 = __static_pointer_cast<B_pointer>(aptr); // ok\n+  bptr1 = __static_pointer_cast<B_pointer>(&a); // ok\n+\n+  // Similarly, can't shed constness via implicit cast\n+  const_A_pointer captr(&a);\n+  A_pointer aptr2(captr); // { dg-error \"instantiated from here\" 48 }\n+\n+  // but explicit cast/conversion is OK.\n+  A_pointer aptr3(__const_pointer_cast<A_pointer>(captr)); // ok\n+\n+  // Similarly, can't shed constness via implicit cast\n+  aptr2 = captr; // { dg-error \"instantiated from here\" 54 }\n+\n+  // but explicit cast/conversion is OK.\n+  aptr3 = __const_pointer_cast<A_pointer>(captr); // ok\n+\n+  // Combine explicit const cast with implicit downcast.\n+  const_B_pointer cbptr(&b);\n+  A_pointer aptr4(cbptr); // { dg-error \"instantiated from here\" 61 }\n+  aptr4 = cbptr; // { dg-error \"instantiated from here\" 62 }\n+\n+  A_pointer aptr5(__const_pointer_cast<B_pointer>(cbptr)); // ok\n+  aptr5 = __const_pointer_cast<B_pointer>(cbptr);  // ok\n+}\n+\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 334 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 334 }\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 324 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 324 }\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 352 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 352 }\n+// { dg-error \"invalid conversion \" \"\" { target *-*-* } 360 }\n+// { dg-error \"initializing argument 1 of\" \"\" { target *-*-* } 360 }\n+// { dg-excess-errors \"In constructor\" }\n+"}]}