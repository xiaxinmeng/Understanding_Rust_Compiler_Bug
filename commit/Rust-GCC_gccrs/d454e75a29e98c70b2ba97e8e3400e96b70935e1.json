{"sha": "d454e75a29e98c70b2ba97e8e3400e96b70935e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ1NGU3NWEyOWU5OGM3MGIyYmE5N2U4ZTM0MDBlOTZiNzA5MzVlMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-09-29T21:23:45Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-09-29T21:23:45Z"}, "message": "real.h (ibm_extended_format): Declare.\n\n        * real.h (ibm_extended_format): Declare.\n        * real.c (encode_ibm_extended, decode_ibm_extended): New\n        functions.\n\nFrom-SVN: r57633", "tree": {"sha": "ac3fbab3c2af67d8a83c887b000c0e4abae66b4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac3fbab3c2af67d8a83c887b000c0e4abae66b4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d454e75a29e98c70b2ba97e8e3400e96b70935e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d454e75a29e98c70b2ba97e8e3400e96b70935e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d454e75a29e98c70b2ba97e8e3400e96b70935e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d454e75a29e98c70b2ba97e8e3400e96b70935e1/comments", "author": null, "committer": null, "parents": [{"sha": "89b06540822049651a79956ea93f83f7c530b8f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b06540822049651a79956ea93f83f7c530b8f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b06540822049651a79956ea93f83f7c530b8f8"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "f265ac7c3c8a2999eeb91dc3644ad963375250b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d454e75a29e98c70b2ba97e8e3400e96b70935e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d454e75a29e98c70b2ba97e8e3400e96b70935e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d454e75a29e98c70b2ba97e8e3400e96b70935e1", "patch": "@@ -1,3 +1,9 @@\n+2002-09-29  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* real.h (ibm_extended_format): Declare.\n+\t* real.c (encode_ibm_extended, decode_ibm_extended): New\n+\tfunctions.\n+\n 2002-09-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* darwin-protos.h (darwin_asm_output_dwarf_delta): Prototype."}, {"sha": "f5e6cb01db2b2590e1681f67f3c26cfce45b19fe", "filename": "gcc/real.c", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d454e75a29e98c70b2ba97e8e3400e96b70935e1/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d454e75a29e98c70b2ba97e8e3400e96b70935e1/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=d454e75a29e98c70b2ba97e8e3400e96b70935e1", "patch": "@@ -2950,6 +2950,99 @@ const struct real_format ieee_extended_intel_128_format =\n     true\n   };\n \n+\f\n+/* IBM 128-bit extended precision format: a pair of IEEE double precision\n+   numbers whose sum is equal to the extended precision value.  The number\n+   with greater magnitude is first.  This format has the same magnitude\n+   range as an IEEE double precision value, but effectively 106 bits of\n+   significand precision.  Infinity and NaN are represented by their IEEE\n+   double precision value stored in the first number, the second number is\n+   ignored.  Zeroes, Infinities, and NaNs are set in both doubles\n+   due to precedent.  */\n+\n+static void encode_ibm_extended PARAMS ((const struct real_format *fmt,\n+\t\t\t\t\t long *, const REAL_VALUE_TYPE *));\n+static void decode_ibm_extended PARAMS ((const struct real_format *,\n+\t\t\t\t\t REAL_VALUE_TYPE *, const long *));\n+\n+static void\n+encode_ibm_extended (fmt, buf, r)\n+     const struct real_format *fmt ATTRIBUTE_UNUSED;\n+     long *buf;\n+     const REAL_VALUE_TYPE *r;\n+{\n+  REAL_VALUE_TYPE u, v;\n+\n+  switch (r->class)\n+    {\n+    case rvc_zero:\n+      /* Both doubles have sign bit set.  */\n+      buf[0] = FLOAT_WORDS_BIG_ENDIAN ? r->sign << 31 : 0;\n+      buf[1] = FLOAT_WORDS_BIG_ENDIAN ? 0 : r->sign << 31;\n+      buf[2] = buf[0];\n+      buf[3] = buf[1];\n+      break;\n+\n+    case rvc_inf:\n+    case rvc_nan:\n+      /* Both doubles set to Inf / NaN.  */\n+      encode_ieee_double (&ieee_double_format, &buf[0], r);\n+      buf[2] = buf[0];\n+      buf[3] = buf[1];\n+      return;\n+      \n+    case rvc_normal:\n+      /* u = IEEE double precision portion of significand.  */\n+      u = *r;\n+      clear_significand_below (&u, SIGNIFICAND_BITS - 53);\n+\n+      /* v = remainder containing additional 53 bits of significand.  */\n+      do_add (&v, r, &u, 1);\n+\n+      encode_ieee_double (&ieee_double_format, &buf[0], &u);\n+      encode_ieee_double (&ieee_double_format, &buf[2], &v);\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+decode_ibm_extended (fmt, r, buf)\n+     const struct real_format *fmt ATTRIBUTE_UNUSED;\n+     REAL_VALUE_TYPE *r;\n+     const long *buf;\n+{\n+  REAL_VALUE_TYPE u, v;\n+\n+  decode_ieee_double (&ieee_double_format, &u, &buf[0]);\n+\n+  if (u.class != rvc_zero && u.class != rvc_inf && u.class != rvc_nan)\n+    {\n+      decode_ieee_double (&ieee_double_format, &v, &buf[2]);\n+      do_add (r, &u, &v, 0);\n+    }\n+  else\n+    *r = u;\n+}\n+\n+const struct real_format ibm_extended_format = \n+  {\n+    encode_ibm_extended,\n+    decode_ibm_extended,\n+    2,\n+    1,\n+    53 + 53,\n+    -1021,\n+    1024,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true\n+  };\n+\n \f\n /* IEEE quad precision format.  */\n "}, {"sha": "8244e7f46809004e00d8da2a6c45d080d67cc2dc", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d454e75a29e98c70b2ba97e8e3400e96b70935e1/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d454e75a29e98c70b2ba97e8e3400e96b70935e1/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=d454e75a29e98c70b2ba97e8e3400e96b70935e1", "patch": "@@ -216,6 +216,7 @@ extern const struct real_format ieee_double_format;\n extern const struct real_format ieee_extended_motorola_format;\n extern const struct real_format ieee_extended_intel_96_format;\n extern const struct real_format ieee_extended_intel_128_format;\n+extern const struct real_format ibm_extended_format;\n extern const struct real_format ieee_quad_format;\n extern const struct real_format vax_f_format;\n extern const struct real_format vax_d_format;"}]}