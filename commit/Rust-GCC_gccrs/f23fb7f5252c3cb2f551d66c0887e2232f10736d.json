{"sha": "f23fb7f5252c3cb2f551d66c0887e2232f10736d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzZmI3ZjUyNTJjM2NiMmY1NTFkNjZjMDg4N2UyMjMyZjEwNzM2ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-09-08T16:53:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-09-08T16:53:05Z"}, "message": "re PR c++/5296 ([DR115] Pointers to functions and template functions behave different in deduction)\n\n\tPR c++/5296\n\t* pt.c (try_one_overload): Add addr_p parameter.\n\t(resolve_overloaded_unification): Pass it.\n\n\tPR c++/5296\n\t* g++.dg/rtti/typeid2.C: New test.\n\nFrom-SVN: r71209", "tree": {"sha": "7ad79d8a9b99c0035eca8e5d90faf2985d09d4b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ad79d8a9b99c0035eca8e5d90faf2985d09d4b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f23fb7f5252c3cb2f551d66c0887e2232f10736d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23fb7f5252c3cb2f551d66c0887e2232f10736d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23fb7f5252c3cb2f551d66c0887e2232f10736d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23fb7f5252c3cb2f551d66c0887e2232f10736d/comments", "author": null, "committer": null, "parents": [{"sha": "c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1f927e84ec73debafbc0114cc4d81abd1b27ae7"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "b3a27e89ef5ab38f461e71bdf5e4c2573fb9a4c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f23fb7f5252c3cb2f551d66c0887e2232f10736d", "patch": "@@ -1,3 +1,9 @@\n+2003-09-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/5296\n+\t* pt.c (try_one_overload): Add addr_p parameter.\n+\t(resolve_overloaded_unification): Pass it.\n+\n 2003-09-08  Richard Henderson  <rth@redhat.com>\n \n \t* decl.c (finish_function): Clear current_function_decl."}, {"sha": "f829095a1e151334e77b07e22c12ee29e7f320f7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f23fb7f5252c3cb2f551d66c0887e2232f10736d", "patch": "@@ -93,7 +93,7 @@ static void pop_access_scope (tree);\n static int resolve_overloaded_unification (tree, tree, tree, tree,\n \t\t\t\t\t   unification_kind_t, int);\n static int try_one_overload (tree, tree, tree, tree, tree,\n-\t\t\t     unification_kind_t, int);\n+\t\t\t     unification_kind_t, int, bool);\n static int unify (tree, tree, tree, tree, int);\n static void add_pending_template (tree);\n static void reopen_tinst_level (tree);\n@@ -8924,9 +8924,15 @@ resolve_overloaded_unification (tree tparms,\n {\n   tree tempargs = copy_node (targs);\n   int good = 0;\n+  bool addr_p;\n \n   if (TREE_CODE (arg) == ADDR_EXPR)\n-    arg = TREE_OPERAND (arg, 0);\n+    {\n+      arg = TREE_OPERAND (arg, 0);\n+      addr_p = true;\n+    }\n+  else\n+    addr_p = false;\n \n   if (TREE_CODE (arg) == COMPONENT_REF)\n     /* Handle `&x' where `x' is some static or non-static member\n@@ -8962,25 +8968,18 @@ resolve_overloaded_unification (tree tparms,\n \t  if (subargs)\n \t    {\n \t      elem = tsubst (TREE_TYPE (fn), subargs, tf_none, NULL_TREE);\n-\t      if (TREE_CODE (elem) == METHOD_TYPE)\n-\t\telem = build_ptrmemfunc_type (build_pointer_type (elem));\n-\t      good += try_one_overload (tparms, targs, tempargs, parm, elem,\n-\t\t\t\t\tstrict, sub_strict);\n+\t      good += try_one_overload (tparms, targs, tempargs, parm, \n+\t\t\t\t\telem, strict, sub_strict, addr_p);\n \t    }\n \t}\n     }\n   else if (TREE_CODE (arg) == OVERLOAD\n \t   || TREE_CODE (arg) == FUNCTION_DECL)\n     {\n       for (; arg; arg = OVL_NEXT (arg))\n-\t{\n-\t  tree type = TREE_TYPE (OVL_CURRENT (arg));\n-\t  if (TREE_CODE (type) == METHOD_TYPE)\n-\t    type = build_ptrmemfunc_type (build_pointer_type (type));\n-\t  good += try_one_overload (tparms, targs, tempargs, parm,\n-\t\t\t\t    type,\n-\t\t\t\t    strict, sub_strict);\n-\t}\n+\tgood += try_one_overload (tparms, targs, tempargs, parm,\n+\t\t\t\t  TREE_TYPE (OVL_CURRENT (arg)),\n+\t\t\t\t  strict, sub_strict, addr_p);\n     }\n   else\n     abort ();\n@@ -9009,6 +9008,9 @@ resolve_overloaded_unification (tree tparms,\n /* Subroutine of resolve_overloaded_unification; does deduction for a single\n    overload.  Fills TARGS with any deduced arguments, or error_mark_node if\n    different overloads deduce different arguments for a given parm.\n+   ADDR_P is true if the expression for which deduction is being\n+   performed was of the form \"& fn\" rather than simply \"fn\".\n+\n    Returns 1 on success.  */\n \n static int\n@@ -9018,7 +9020,8 @@ try_one_overload (tree tparms,\n                   tree parm, \n                   tree arg, \n                   unification_kind_t strict,\n-\t\t  int sub_strict)\n+\t\t  int sub_strict,\n+\t\t  bool addr_p)\n {\n   int nargs;\n   tree tempargs;\n@@ -9034,6 +9037,11 @@ try_one_overload (tree tparms,\n   if (uses_template_parms (arg))\n     return 1;\n \n+  if (TREE_CODE (arg) == METHOD_TYPE)\n+    arg = build_ptrmemfunc_type (build_pointer_type (arg));\n+  else if (addr_p)\n+    arg = build_pointer_type (arg);\n+\n   sub_strict |= maybe_adjust_types_for_deduction (strict, &parm, &arg);\n \n   /* We don't copy orig_targs for this because if we have already deduced"}, {"sha": "bf04edf5323eadd9c2d42e6c39e2d5cb24d722f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f23fb7f5252c3cb2f551d66c0887e2232f10736d", "patch": "@@ -1,3 +1,8 @@\n+2003-09-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/5296\n+\t* g++.dg/rtti/typeid2.C: New test.\n+\n 2003-09-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20030904-1.c: New test."}, {"sha": "0dbcc598b9d34cab57ac2324f83270c49f50b187", "filename": "gcc/testsuite/g++.dg/rtti/typeid2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23fb7f5252c3cb2f551d66c0887e2232f10736d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid2.C?ref=f23fb7f5252c3cb2f551d66c0887e2232f10736d", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do run }\n+\n+#include <typeinfo>\n+\n+template <typename T>  const char *print_type (const T &) {\n+  return typeid(T).name();\n+}\n+\n+/* no template */      void pp1 (int) {}\n+template <typename X>  void pp2 (X)   {}\n+\n+int main () {\n+  if (print_type (&pp1) != print_type (&pp2<int>))\n+    return 1;\n+}"}]}