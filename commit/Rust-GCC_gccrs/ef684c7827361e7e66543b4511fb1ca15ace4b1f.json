{"sha": "ef684c7827361e7e66543b4511fb1ca15ace4b1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY2ODRjNzgyNzM2MWU3ZTY2NTQzYjQ1MTFmYjFjYTE1YWNlNGIxZg==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-08T15:06:48Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-08T15:06:48Z"}, "message": "[Arm] Implement CDE predicated intrinsics for MVE registers\n\nThese intrinsics are the predicated version of the intrinsics inroduced\nin https://gcc.gnu.org/pipermail/gcc-patches/2020-March/542725.html.\n\nThese are not yet public on developer.arm.com but we have reached\ninternal consensus on them.\n\nThe approach follows the same method as for the CDE intrinsics for MVE\nregisters, most notably using the same arm_resolve_overloaded_builtin\nfunction with minor modifications.\n\nThe resolver hook has been moved from arm-builtins.c to arm-c.c so it\ncan access the c-common function build_function_call_vec.  This function\nis needed to perform the same checks on arguments as a normal C or C++\nfunction would perform.\nIt is fine to put this resolver in arm-c.c since it's only use is for\nthe ACLE functions, and these are only available in C/C++.\nSo that the resolver function has access to information it needs from\nthe builtins, we put two query functions into arm-builtins.c and use\nthem from arm-c.c.\n\nWe rely on the order that the builtins are defined in\ngcc/config/arm/arm_cde_builtins.def, knowing that the predicated\nversions come after the non-predicated versions.\n\nThe machine description patterns for these builtins are simpler than\nthose for the non-predicated versions, since the accumulator versions\n*and* non-accumulator versions both need an input vector now.\nThe input vector is needed for the non-accumulator version to describe\nthe original values for those lanes that are not updated during the\nmerge operation.\n\nWe additionally need to introduce qualifiers for these new builtins,\nwhich follow the same pattern as the non-predicated versions but with an\nextra argument to describe the predicate.\n\nError message changes:\n- We directly mention the builtin argument when complaining that an\n  argument is not in the correct range.\n  This more closely matches the C error messages.\n- We ensure the resolver complains about *all* invalid arguments to a\n  function instead of just the first one.\n- The resolver error messages index arguments from 1 instead of 0 to\n  match the arguments coming from the C/C++ frontend.\n\nIn order to allow the user to give an argument for the merging predicate\nwhen they don't care what data is stored in the 'false' lanes, we also\nmove the __arm_vuninitializedq* intrinsics from arm_mve.h to\narm_mve_types.h which is shared with arm_cde.h.\n\nWe only move the fully type-specified `__arm_vuninitializedq*`\nintrinsics and not the polymorphic versions, since moving the\npolymorphic versions requires moving the _Generic framework as well as\njust the intrinsics we're interested in.  This matches the approach taken\nfor the `__arm_vreinterpret*` functions in this include file.\n\nThis patch also contains a slight change in spacing of an existing\nassembly instruction to be emitted.\nThis is just to help writing tests -- vmsr usually has a tab and a space\nbetween the mnemonic and the first argument, but in one case it just has\na tab -- making all the same helps make test regexps simpler.\n\nTesting Done:\n    Bootstrap and full regtest on arm-none-linux-gnueabihf\n    Full regtest on arm-none-eabi\n\n    All testing done with a local fix for the bugzilla PR below.\n    That bugzilla currently causes multiple ICE's on the tests added in\n    this patch.\n    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94341\n\ngcc/ChangeLog:\n\n2020-04-02  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/arm/arm-builtins.c (CX_UNARY_UNONE_QUALIFIERS): New.\n\t(CX_BINARY_UNONE_QUALIFIERS): New.\n\t(CX_TERNARY_UNONE_QUALIFIERS): New.\n\t(arm_resolve_overloaded_builtin): Move to arm-c.c.\n\t(arm_expand_builtin_args): Update error message.\n\t(enum resolver_ident): New.\n\t(arm_describe_resolver): New.\n\t(arm_cde_end_args): New.\n\t* config/arm/arm-builtins.h: New file.\n\t* config/arm/arm-c.c (arm_resolve_overloaded_builtin): New.\n\t(arm_resolve_cde_builtin): Moved from arm-builtins.c.\n\t* config/arm/arm_cde.h (__arm_vcx1q_m, __arm_vcx1qa_m,\n\t__arm_vcx2q_m, __arm_vcx2qa_m, __arm_vcx3q_m, __arm_vcx3qa_m):\n\tNew.\n\t* config/arm/arm_cde_builtins.def (vcx1q_p_, vcx1qa_p_,\n\tvcx2q_p_, vcx2qa_p_, vcx3q_p_, vcx3qa_p_): New builtin defs.\n\t* config/arm/iterators.md (CDE_VCX): New int iterator.\n\t(a) New int attribute.\n\t* config/arm/mve.md (arm_vcx1q<a>_p_v16qi, arm_vcx2q<a>_p_v16qi,\n\tarm_vcx3q<a>_p_v16qi): New patterns.\n\t* config/arm/vfp.md (thumb2_movhi_fp16): Extra space in assembly.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-02  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.target/arm/acle/cde-errors.c: Add predicated forms.\n\t* gcc.target/arm/acle/cde-mve-error-1.c: Add predicated forms.\n\t* gcc.target/arm/acle/cde-mve-error-2.c: Add predicated forms.\n\t* gcc.target/arm/acle/cde-mve-error-3.c: Add predicated forms.\n\t* gcc.target/arm/acle/cde-mve-full-assembly.c: Add predicated\n\tforms.\n\t* gcc.target/arm/acle/cde-mve-tests.c: Add predicated forms.\n\t* gcc.target/arm/acle/cde_v_1_err.c (test_imm_range): Update for\n\terror message format change.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c:\n\tUpdate scan-assembler regexp.", "tree": {"sha": "83d0ce8e2cc5553fbd452583a8e0f1495a4f5a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83d0ce8e2cc5553fbd452583a8e0f1495a4f5a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef684c7827361e7e66543b4511fb1ca15ace4b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef684c7827361e7e66543b4511fb1ca15ace4b1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef684c7827361e7e66543b4511fb1ca15ace4b1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef684c7827361e7e66543b4511fb1ca15ace4b1f/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78bf9163764aba15bb0c254cd38c985713924380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bf9163764aba15bb0c254cd38c985713924380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bf9163764aba15bb0c254cd38c985713924380"}], "stats": {"total": 2216, "additions": 1840, "deletions": 376}, "files": [{"sha": "16d2fb0b3f0a5197c6e8d1e45a705b026cb706da", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 43, "deletions": 83, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -42,6 +42,7 @@\n #include \"case-cfn-macros.h\"\n #include \"sbitmap.h\"\n #include \"stringpool.h\"\n+#include \"arm-builtins.h\"\n \n #define SIMD_MAX_BUILTIN_ARGS 7\n \n@@ -334,6 +335,32 @@ arm_cx_ternary_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned_immediate };\n #define CX_TERNARY_QUALIFIERS (arm_cx_ternary_qualifiers)\n \n+/* T (immediate, T, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cx_unary_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate, qualifier_none,\n+      qualifier_unsigned_immediate,\n+      qualifier_unsigned };\n+#define CX_UNARY_UNONE_QUALIFIERS (arm_cx_unary_unone_qualifiers)\n+\n+/* T (immediate, T, T, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cx_binary_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate,\n+      qualifier_none, qualifier_none,\n+      qualifier_unsigned_immediate,\n+      qualifier_unsigned };\n+#define CX_BINARY_UNONE_QUALIFIERS (arm_cx_binary_unone_qualifiers)\n+\n+/* T (immediate, T, T, T, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cx_ternary_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate,\n+      qualifier_none, qualifier_none, qualifier_none,\n+      qualifier_unsigned_immediate,\n+      qualifier_unsigned };\n+#define CX_TERNARY_UNONE_QUALIFIERS (arm_cx_ternary_unone_qualifiers)\n+\n /* The first argument (return type) of a store should be void type,\n    which we represent with qualifier_void.  Their first operand will be\n    a DImode pointer to the location to store to, so we must use\n@@ -3064,8 +3091,12 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \t\t\t\t   ARM_CDE_CONST_COPROC);\n \t\t\t}\n \t\t      else\n-\t\t\terror (\"%Kargument %d must be a constant immediate \"\n+\t\t\t/* Here we mention the builtin name to follow the same\n+\t\t\t   format that the C/C++ frontends use for referencing\n+\t\t\t   a given argument index.  */\n+\t\t\terror (\"%Kargument %d to %qE must be a constant immediate \"\n \t\t\t       \"in range [0-%d]\", exp, argc + 1,\n+\t\t\t       arm_builtin_decls[fcode],\n \t\t\t       cde_builtin_data[fcode -\n \t\t\t       ARM_BUILTIN_CDE_PATTERN_START].imm_max);\n \t\t    }\n@@ -4193,90 +4224,19 @@ arm_check_builtin_call (location_t , vec<location_t> , tree fndecl,\n   return true;\n }\n \n-/* Implement TARGET_RESOLVE_OVERLOADED_BUILTIN.  This is currently only\n-   used for the MVE related builtins for the CDE extension.\n-   Here we ensure the type of arguments is such that the size is correct, and\n-   then return a tree that describes the same function call but with the\n-   relevant types cast as necessary.  */\n-tree\n-arm_resolve_overloaded_builtin (location_t loc, tree fndecl, void *arglist)\n+enum resolver_ident\n+arm_describe_resolver (tree fndecl)\n {\n-  if (DECL_MD_FUNCTION_CODE (fndecl) <= ARM_BUILTIN_vcx1qv16qi\n-      || DECL_MD_FUNCTION_CODE (fndecl) >= ARM_BUILTIN_MVE_BASE)\n-    return NULL_TREE;\n-\n-  vec<tree, va_gc> *params = static_cast<vec<tree, va_gc> *> (arglist);\n-  unsigned param_num = params ? params->length() : 0;\n-  unsigned num_args = list_length (TYPE_ARG_TYPES (TREE_TYPE (fndecl))) - 1;\n-  /* Ensure this function has the correct number of arguments.\n-     This won't happen when using the intrinsics defined by the ACLE, since\n-     they're exposed to the user via a wrapper in the arm_cde.h header that has\n-     the correct number of arguments ... hence the compiler would already catch\n-     an incorrect number of arguments there.\n-\n-     It is still possible to get here if the user tries to call the __bulitin_*\n-     functions directly.  We could print some error message in this function,\n-     but instead we leave it to the rest of the code to catch this problem in\n-     the same way that other __builtin_* functions catch it.\n-\n-     This does mean an odd error message, but it's consistent with the rest of\n-     the builtins.  */\n-  if (param_num != num_args)\n-    return NULL_TREE;\n-\n-  tree to_return = NULL_TREE;\n-  /* Take the functions return type since that's the same type as the arguments\n-     this function needs (the types of the builtin function all come from the\n-     machine mode of the RTL pattern, and they're all the same and calculated\n-     in the same way).  */\n-  tree pattern_type = TREE_TYPE (TREE_TYPE (fndecl));\n-\n-  unsigned i;\n-  for (i = 1; i < (param_num - 1); i++)\n-    {\n-      tree this_param = (*params)[i];\n-      if (TREE_CODE (this_param) == ERROR_MARK)\n-\treturn NULL_TREE;\n-      tree param_type = TREE_TYPE (this_param);\n-\n-      /* Return value is cast to type that second argument originally was.\n-\t All non-constant arguments are cast to the return type calculated from\n-\t the RTL pattern.\n-\n-\t Set the return type to an unqualified version of the type of the first\n-\t parameter.  The first parameter since that is how the intrinsics are\n-\t defined -- to always return the same type as the first polymorphic\n-\t argument.  Unqualified version of the type since we don't want passing\n-\t a constant parameter to mean that the return value of the builtin is\n-\t also constant.  */\n-      if (i == 1)\n-\tto_return = build_qualified_type (param_type, 0 MEM_STAT_INFO);\n-\n-      /* The only requirement of these intrinsics on the type of the variable\n-\t is that it's 128 bits wide.  All other types are valid and we simply\n-\t VIEW_CONVERT_EXPR them to the type of the underlying builtin.  */\n-      tree type_size = TYPE_SIZE (param_type);\n-      if (! tree_fits_shwi_p (type_size)\n-\t  || tree_to_shwi (type_size) != 128)\n-\t{\n-\t  error_at (loc,\n-\t\t    \"argument %u to function %qE is of type %qT which is not \"\n-\t\t    \"known to be 128 bits wide\",\n-\t\t    i, fndecl, param_type);\n-\t  return NULL_TREE;\n-\t}\n-\n-      /* Only convert the argument if we actually need to.  */\n-      if (! check_base_type (pattern_type, param_type))\n-\t(*params)[i] = build1 (VIEW_CONVERT_EXPR, pattern_type, this_param);\n-    }\n-  tree call_expr = build_call_expr_loc_array (loc, fndecl, param_num,\n-\t\t\t\t\t      params->address());\n+  if (DECL_MD_FUNCTION_CODE (fndecl) >= ARM_BUILTIN_vcx1qv16qi\n+    && DECL_MD_FUNCTION_CODE (fndecl) < ARM_BUILTIN_MVE_BASE)\n+    return arm_cde_resolver;\n+  return arm_no_resolver;\n+}\n \n-  gcc_assert (to_return != NULL_TREE);\n-  if (! check_base_type (to_return, pattern_type))\n-    return build1 (VIEW_CONVERT_EXPR, to_return, call_expr);\n-  return call_expr;\n+unsigned\n+arm_cde_end_args (tree fndecl)\n+{\n+  return DECL_MD_FUNCTION_CODE (fndecl) >= ARM_BUILTIN_vcx1q_p_v16qi ? 2 : 1;\n }\n \n #include \"gt-arm-builtins.h\""}, {"sha": "62d6f178966aebbbc77f03f03bd7920fc1d56494", "filename": "gcc/config/arm/arm-builtins.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.h?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -0,0 +1,35 @@\n+/* Declarations for determining resolver for a given builtin.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_ARM_BUILTINS_H\n+#define GCC_ARM_BUILTINS_H\n+\n+enum resolver_ident {\n+    arm_cde_resolver,\n+    arm_no_resolver\n+};\n+enum resolver_ident arm_describe_resolver (tree);\n+unsigned arm_cde_end_args (tree);\n+\n+#endif /* GCC_ARM_BUILTINS_H */"}, {"sha": "7468a20bd9805c1c7eedbf6f8b881d59c551755e", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 113, "deletions": 1, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -27,8 +27,120 @@\n #include \"tm_p.h\"\n #include \"c-family/c-pragma.h\"\n #include \"stringpool.h\"\n+#include \"arm-builtins.h\"\n \n-tree arm_resolve_overloaded_builtin (location_t, tree, void*);\n+tree\n+arm_resolve_cde_builtin (location_t loc, tree fndecl, void *arglist)\n+{\n+  vec<tree, va_gc> *params = static_cast<vec<tree, va_gc> *> (arglist);\n+  unsigned param_num = params ? params->length() : 0;\n+  unsigned num_args = list_length (TYPE_ARG_TYPES (TREE_TYPE (fndecl))) - 1;\n+  /* Ensure this function has the correct number of arguments.\n+     This won't happen when using the intrinsics defined by the ACLE, since\n+     they're exposed to the user via a wrapper in the arm_cde.h header that has\n+     the correct number of arguments ... hence the compiler would already catch\n+     an incorrect number of arguments there.\n+\n+     It is still possible to get here if the user tries to call the __bulitin_*\n+     functions directly.  We could print some error message in this function,\n+     but instead we leave it to the rest of the code to catch this problem in\n+     the same way that other __builtin_* functions catch it.\n+\n+     This does mean an odd error message, but it's consistent with the rest of\n+     the builtins.  */\n+  if (param_num != num_args)\n+    return NULL_TREE;\n+\n+  tree to_return = NULL_TREE;\n+  /* Take the functions return type since that's the same type as the arguments\n+     this function needs (the types of the builtin function all come from the\n+     machine mode of the RTL pattern, and they're all the same and calculated\n+     in the same way).  */\n+  tree pattern_type = TREE_TYPE (TREE_TYPE (fndecl));\n+\n+  unsigned i;\n+  /* Hard coding the number of parameters we don't want to cast at the end of\n+     the builtin.  This is the  easiest approach for the CDE intrinsics, and\n+     introducing a parameter to store in the builtins.def macros seems overkill\n+     when they're only relevant here.  */\n+  unsigned end_args = arm_cde_end_args (fndecl);\n+  unsigned cast_param_end = param_num - end_args;\n+  /* For the vcx1q patterns that don't need any casts.  */\n+  if (cast_param_end == 1)\n+    return NULL_TREE;\n+\n+  /* In order to check all arguments rather than complaining on the first\n+     invalid one we record whether *any* arguments are invalid using this\n+     boolean variable.  */\n+  bool invalid = false;\n+  for (i = 1; i < cast_param_end; i++)\n+    {\n+      tree this_param = (*params)[i];\n+      if (TREE_CODE (this_param) == ERROR_MARK)\n+\t{\n+\t  invalid = true;\n+\t  continue;\n+\t}\n+      tree param_type = TREE_TYPE (this_param);\n+\n+      /* Return value is cast to type that second argument originally was.\n+\t All non-constant arguments are cast to the return type calculated from\n+\t the RTL pattern.\n+\n+\t Set the return type to an unqualified version of the type of the first\n+\t parameter.  The first parameter since that is how the intrinsics are\n+\t defined -- to always return the same type as the first polymorphic\n+\t argument.  Unqualified version of the type since we don't want passing\n+\t a constant parameter to mean that the return value of the builtin is\n+\t also constant.  */\n+      if (i == 1)\n+\tto_return = build_qualified_type (param_type, 0 MEM_STAT_INFO);\n+\n+      /* The only requirement of these intrinsics on the type of the variable\n+\t is that it's 128 bits wide.  All other types are valid and we simply\n+\t VIEW_CONVERT_EXPR them to the type of the underlying builtin.  */\n+      tree type_size = TYPE_SIZE (param_type);\n+      if (! tree_fits_shwi_p (type_size)\n+\t  || tree_to_shwi (type_size) != 128)\n+\t{\n+\t  error_at (loc,\n+\t\t    \"argument %u to function %qE is of type %qT which is not \"\n+\t\t    \"known to be 128 bits wide\",\n+\t\t    i + 1, fndecl, param_type);\n+\t  invalid = true;\n+\t  continue;\n+\t}\n+\n+      /* Only convert the argument if we actually need to.  */\n+      if (! check_base_type (pattern_type, param_type))\n+\t(*params)[i] = build1 (VIEW_CONVERT_EXPR, pattern_type, this_param);\n+    }\n+  if (invalid)\n+    return NULL_TREE;\n+\n+  /* We know it's safe to call this since this builtin is here to implement an\n+     ACLE function, and those functions are only for C/C++.  */\n+  tree call_expr = build_function_call_vec (loc, vNULL, fndecl, params,\n+\t\t\t\t\t    NULL, fndecl);\n+\n+  gcc_assert (to_return != NULL_TREE);\n+  if (! check_base_type (to_return, pattern_type))\n+    return build1 (VIEW_CONVERT_EXPR, to_return, call_expr);\n+  return call_expr;\n+}\n+\n+/* Implement TARGET_RESOLVE_OVERLOADED_BUILTIN.  This is currently only\n+   used for the MVE related builtins for the CDE extension.\n+   Here we ensure the type of arguments is such that the size is correct, and\n+   then return a tree that describes the same function call but with the\n+   relevant types cast as necessary.  */\n+tree\n+arm_resolve_overloaded_builtin (location_t loc, tree fndecl, void *arglist)\n+{\n+  if (arm_describe_resolver (fndecl) == arm_cde_resolver)\n+    return arm_resolve_cde_builtin (loc, fndecl, arglist);\n+  return NULL_TREE;\n+}\n \n /* Output C specific EABI object attributes.  These cannot be done in\n    arm.c because they require information from the C frontend.  */"}, {"sha": "d8ddda6bd648d8b94e97f7b6403b7708cebc9eb3", "filename": "gcc/config/arm/arm_cde.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_cde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_cde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde.h?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -160,6 +160,21 @@ extern \"C\" {\n #define __arm_vcx3qa(coproc, acc, n, m, imm) \\\n \t__builtin_arm_vcx3qav16qi(coproc, acc, n, m, imm)\n \n+#define __arm_vcx1q_m(coproc, inactive, imm, pred) \\\n+\t__builtin_arm_vcx1q_p_v16qi(coproc, inactive, imm, pred)\n+#define __arm_vcx1qa_m(coproc, acc, imm, pred) \\\n+\t__builtin_arm_vcx1qa_p_v16qi(coproc, acc, imm, pred)\n+\n+#define __arm_vcx2q_m(coproc, inactive, n, imm, pred) \\\n+\t__builtin_arm_vcx2q_p_v16qi(coproc, inactive, n, imm, pred)\n+#define __arm_vcx2qa_m(coproc, acc, n, imm, pred) \\\n+\t__builtin_arm_vcx2qa_p_v16qi(coproc, acc, n, imm, pred)\n+\n+#define __arm_vcx3q_m(coproc, inactive, n, m, imm, pred) \\\n+\t__builtin_arm_vcx3q_p_v16qi(coproc, inactive, n, m, imm, pred)\n+#define __arm_vcx3qa_m(coproc, acc, n, m, imm, pred) \\\n+\t__builtin_arm_vcx3qa_p_v16qi(coproc, acc, n, m, imm, pred)\n+\n #endif\n \n #ifdef __cplusplus"}, {"sha": "9f8ddb59c9e638bbb8ed23bdae8e389f7d41ae78", "filename": "gcc/config/arm/arm_cde_builtins.def", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -38,7 +38,8 @@ CDE_VAR2 (CX_BINARY, vcx3, si, di, ARM_VCDE_CONST_3, ECF_CONST)\n CDE_VAR2 (CX_TERNARY, vcx3a, si, di, ARM_VCDE_CONST_3, ECF_CONST)\n \n /* NOTE: The MVE intrinsics must be defined at the end of this file, and with\n-\t vcx1q first.\n+\t vcx1q first.  Amongst the MVE intrinsics, the predicated ones are\n+\t defined last.\n          These restrictions are relied on to determine which intrinsics need\n \t overload resolution in `arm_resolve_overloaded_builtin`.  */\n VAR1 (CX_IMM, vcx1q, v16qi, ARM_MVE_CDE_CONST_1, ECF_CONST)\n@@ -48,4 +49,10 @@ VAR1 (CX_BINARY, vcx2qa, v16qi, ARM_MVE_CDE_CONST_2, ECF_CONST)\n VAR1 (CX_BINARY, vcx3q, v16qi, ARM_MVE_CDE_CONST_3, ECF_CONST)\n VAR1 (CX_TERNARY, vcx3qa, v16qi, ARM_MVE_CDE_CONST_3, ECF_CONST)\n \n+VAR1 (CX_UNARY_UNONE, vcx1q_p_, v16qi, ARM_MVE_CDE_CONST_1, ECF_CONST)\n+VAR1 (CX_UNARY_UNONE, vcx1qa_p_, v16qi, ARM_MVE_CDE_CONST_1, ECF_CONST)\n+VAR1 (CX_BINARY_UNONE, vcx2q_p_, v16qi, ARM_MVE_CDE_CONST_2, ECF_CONST)\n+VAR1 (CX_BINARY_UNONE, vcx2qa_p_, v16qi, ARM_MVE_CDE_CONST_2, ECF_CONST)\n+VAR1 (CX_TERNARY_UNONE, vcx3q_p_, v16qi, ARM_MVE_CDE_CONST_3, ECF_CONST)\n+VAR1 (CX_TERNARY_UNONE, vcx3qa_p_, v16qi, ARM_MVE_CDE_CONST_3, ECF_CONST)\n #undef CDE_VAR2"}, {"sha": "8fe7c6e4846e97cbeb22aa4dffd8266dd62ab95f", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -13500,78 +13500,6 @@ __arm_vaddq_u32 (uint32x4_t __a, uint32x4_t __b)\n   return __a + __b;\n }\n \n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_u8 (void)\n-{\n-  uint8x16_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_u16 (void)\n-{\n-  uint16x8_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_u32 (void)\n-{\n-  uint32x4_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_u64 (void)\n-{\n-  uint64x2_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_s8 (void)\n-{\n-  int8x16_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_s16 (void)\n-{\n-  int16x8_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_s32 (void)\n-{\n-  int32x4_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_s64 (void)\n-{\n-  int64x2_t __uninit;\n-  __asm__ (\"\": \"=w\"(__uninit));\n-  return __uninit;\n-}\n-\n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vddupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n@@ -19206,24 +19134,6 @@ __arm_vaddq_f32 (float32x4_t __a, float32x4_t __b)\n   return __a + __b;\n }\n \n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_f16 (void)\n-{\n-  float16x8_t __uninit;\n-  __asm__ (\"\": \"=w\" (__uninit));\n-  return __uninit;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq_f32 (void)\n-{\n-  float32x4_t __uninit;\n-  __asm__ (\"\": \"=w\" (__uninit));\n-  return __uninit;\n-}\n-\n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_f32 (uint32x4_t * __addr, const int __offset)\n@@ -30144,62 +30054,6 @@ __arm_vaddq (uint32x4_t __a, uint32x4_t __b)\n  return __arm_vaddq_u32 (__a, __b);\n }\n \n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (uint8x16_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_u8 ();\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (uint16x8_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_u16 ();\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (uint32x4_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_u32 ();\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (uint64x2_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_u64 ();\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (int8x16_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_s8 ();\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (int16x8_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_s16 ();\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (int32x4_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_s32 ();\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (int64x2_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_s64 ();\n-}\n-\n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vddupq_m (uint8x16_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n@@ -35095,20 +34949,6 @@ __arm_vaddq (float32x4_t __a, float32x4_t __b)\n  return __arm_vaddq_f32 (__a, __b);\n }\n \n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (float16x8_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_f16 ();\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vuninitializedq (float32x4_t /* __v ATTRIBUTE UNUSED */)\n-{\n- return __arm_vuninitializedq_f32 ();\n-}\n-\n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb (uint32x4_t * __addr, const int __offset, float32x4_t __value)"}, {"sha": "554e285452fc8e05e217a38c6f8c935587ec5136", "filename": "gcc/config/arm/arm_mve_types.h", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_mve_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Farm_mve_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_types.h?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -450,6 +450,78 @@ __arm_vreinterpretq_u8_u64 (uint64x2_t __a)\n   return (uint8x16_t)  __a;\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u8 (void)\n+{\n+  uint8x16_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u16 (void)\n+{\n+  uint16x8_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u32 (void)\n+{\n+  uint32x4_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u64 (void)\n+{\n+  uint64x2_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s8 (void)\n+{\n+  int8x16_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s16 (void)\n+{\n+  int16x8_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s32 (void)\n+{\n+  int32x4_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s64 (void)\n+{\n+  int64x2_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline int32x4_t\n@@ -690,6 +762,24 @@ __arm_vreinterpretq_f32_u8 (uint8x16_t __a)\n   return (float32x4_t)  __a;\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_f16 (void)\n+{\n+  float16x8_t __uninit;\n+  __asm__ (\"\": \"=w\" (__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_f32 (void)\n+{\n+  float32x4_t __uninit;\n+  __asm__ (\"\": \"=w\" (__uninit));\n+  return __uninit;\n+}\n+\n #endif\n \n #ifdef __cplusplus\n@@ -1086,6 +1176,62 @@ __arm_vreinterpretq_u8 (uint64x2_t __a)\n  return __arm_vreinterpretq_u8_u64 (__a);\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (uint8x16_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_u8 ();\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (uint16x8_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_u16 ();\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (uint32x4_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_u32 ();\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (uint64x2_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_u64 ();\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (int8x16_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_s8 ();\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (int16x8_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_s16 ();\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (int32x4_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_s32 ();\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (int64x2_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_s64 ();\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n@@ -1324,6 +1470,20 @@ __arm_vreinterpretq_f32 (uint8x16_t __a)\n {\n  return __arm_vreinterpretq_f32_u8 (__a);\n }\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (float16x8_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_f16 ();\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq (float32x4_t /* __v ATTRIBUTE UNUSED */)\n+{\n+ return __arm_vuninitializedq_f32 ();\n+}\n #endif /* __ARM_FEATURE_MVE & 2 (MVE floating point)  */\n #endif /* __cplusplus */\n "}, {"sha": "0bc9eba0722689aff4c1a143e952f6eb91c0cd86", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -529,6 +529,8 @@\n \n (define_int_iterator BF_MA [UNSPEC_BFMAB UNSPEC_BFMAT])\n \n+(define_int_iterator CDE_VCX [UNSPEC_VCDE UNSPEC_VCDEA])\n+\n ;;----------------------------------------------------------------------------\n ;; Mode attributes\n ;;----------------------------------------------------------------------------\n@@ -1251,3 +1253,6 @@\n \n ;; An iterator for VFMA<bt>\n (define_int_attr bt [(UNSPEC_BFMAB \"b\") (UNSPEC_BFMAT \"t\")])\n+\n+;; An iterator for CDE MVE accumulator/non-accumulator versions.\n+(define_int_attr a [(UNSPEC_VCDE \"\") (UNSPEC_VCDEA \"a\")])"}, {"sha": "7054f7bf0963b41a52ea2c42927c067439789d15", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -11372,3 +11372,45 @@\n   \"vcx3a\\\\tp%c1, %q0, %q3, %q4, #%c5\"\n   [(set_attr \"type\" \"coproc\")]\n )\n+\n+(define_insn \"arm_vcx1q<a>_p_v16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t   (match_operand:V16QI 2 \"register_operand\" \"0\")\n+\t\t\t   (match_operand:SI 3 \"const_int_mve_cde1_operand\" \"i\")\n+\t\t\t   (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t CDE_VCX))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vpst\\;vcx1<a>t\\\\tp%c1, %q0, #%c3\"\n+  [(set_attr \"type\" \"coproc\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn \"arm_vcx2q<a>_p_v16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t  (match_operand:V16QI 2 \"register_operand\" \"0\")\n+\t\t\t  (match_operand:V16QI 3 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:SI 4 \"const_int_mve_cde2_operand\" \"i\")\n+\t\t\t  (match_operand:HI 5 \"vpr_register_operand\" \"Up\")]\n+\t CDE_VCX))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vpst\\;vcx2<a>t\\\\tp%c1, %q0, %q3, #%c4\"\n+  [(set_attr \"type\" \"coproc\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn \"arm_vcx3q<a>_p_v16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t  (match_operand:V16QI 2 \"register_operand\" \"0\")\n+\t\t\t  (match_operand:V16QI 3 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:V16QI 4 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:SI 5 \"const_int_mve_cde3_operand\" \"i\")\n+\t\t\t  (match_operand:HI 6 \"vpr_register_operand\" \"Up\")]\n+\t CDE_VCX))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vpst\\;vcx3<a>t\\\\tp%c1, %q0, %q3, %q4, #%c5\"\n+  [(set_attr \"type\" \"coproc\")\n+   (set_attr \"length\" \"8\")]\n+)"}, {"sha": "34706793279ae4848bbb7d2bebace31813ba9628", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -199,7 +199,7 @@\n     case 8:\n       return \"vmov%?.f32\\t%0, %1\\t%@ int\";\n     case 9:\n-      return \"vmsr%?\\tP0, %1\\t%@ movhi\";\n+      return \"vmsr%?\\t P0, %1\\t%@ movhi\";\n     case 10:\n       return \"vmrs%?\\t%0, P0\\t%@ movhi\";\n     default:"}, {"sha": "85a91666cd5ef200c6905f27c197c3ac1c710a40", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-errors.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -62,34 +62,34 @@ uint64_t test_cde (uint32_t n, uint32_t m)\n   accum += __arm_cx3da (8, accum, n, m,           0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n \n   /* `imm` out of range.  */\n-  accum += __arm_cx1   (0,                        8192); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx1a  (0, (uint32_t)accum,       8192); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx2   (0, n,                     512); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx2a  (0, (uint32_t)accum, n,    512); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx3   (0, n, m,                  64); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n-  accum += __arm_cx3a  (0, (uint32_t)accum, n, m, 64); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n-\n-  accum += __arm_cx1d  (0,                        8192); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx1da (0, accum,                 8192); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx2d  (0, n,                     512); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx2da (0, accum, n,              512); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx3d  (0, n, m,                  64); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n-  accum += __arm_cx3da (0, accum, n, m,           64); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n-\n-  /* `imm` is not an immediate.  */\n-  accum += __arm_cx1   (0,                        n); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx1a  (0, (uint32_t)accum,       n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx2   (0, n,                     n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx2a  (0, (uint32_t)accum, n,    n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx3   (0, n, m,                  n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n-  accum += __arm_cx3a  (0, (uint32_t)accum, n, m, n); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n-\n-  accum += __arm_cx1d  (0,                        n); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx1da (0, accum,                 n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n-  accum += __arm_cx2d  (0, n,                     n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx2da (0, accum, n,              n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n-  accum += __arm_cx3d  (0, n, m,                  n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n-  accum += __arm_cx3da (0, accum, n, m,           n); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx1   (0,                        8192); /* { dg-error {argument 2 to '__builtin_arm_cx1si' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1a  (0, (uint32_t)accum,       8192); /* { dg-error {argument 3 to '__builtin_arm_cx1asi' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2   (0, n,                     512);  /* { dg-error {argument 3 to '__builtin_arm_cx2si' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2a  (0, (uint32_t)accum, n,    512);  /* { dg-error {argument 4 to '__builtin_arm_cx2asi' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3   (0, n, m,                  64);   /* { dg-error {argument 4 to '__builtin_arm_cx3si' must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3a  (0, (uint32_t)accum, n, m, 64);   /* { dg-error {argument 5 to '__builtin_arm_cx3asi' must be a constant immediate in range \\[0-63\\]} } */\n+\n+  accum += __arm_cx1d  (0,                        8192); /* { dg-error {argument 2 to '__builtin_arm_cx1di' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1da (0, accum,                 8192); /* { dg-error {argument 3 to '__builtin_arm_cx1adi' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2d  (0, n,                     512);  /* { dg-error {argument 3 to '__builtin_arm_cx2di' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2da (0, accum, n,              512);  /* { dg-error {argument 4 to '__builtin_arm_cx2adi' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3d  (0, n, m,                  64);   /* { dg-error {argument 4 to '__builtin_arm_cx3di' must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3da (0, accum, n, m,           64);   /* { dg-error {argument 5 to '__builtin_arm_cx3adi' must be a constant immediate in range \\[0-63\\]} } */\n+\n+  /* `imm` must be an immediate.  */\n+  accum += __arm_cx1   (0,                        n);    /* { dg-error {argument 2 to '__builtin_arm_cx1si' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1a  (0, (uint32_t)accum,       n);    /* { dg-error {argument 3 to '__builtin_arm_cx1asi' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2   (0, n,                     n);    /* { dg-error {argument 3 to '__builtin_arm_cx2si' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2a  (0, (uint32_t)accum, n,    n);    /* { dg-error {argument 4 to '__builtin_arm_cx2asi' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3   (0, n, m,                  n);    /* { dg-error {argument 4 to '__builtin_arm_cx3si' must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3a  (0, (uint32_t)accum, n, m, n);    /* { dg-error {argument 5 to '__builtin_arm_cx3asi' must be a constant immediate in range \\[0-63\\]} } */\n+\n+  accum += __arm_cx1d  (0,                        n);    /* { dg-error {argument 2 to '__builtin_arm_cx1di' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1da (0, accum,                 n);    /* { dg-error {argument 3 to '__builtin_arm_cx1adi' must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2d  (0, n,                     n);    /* { dg-error {argument 3 to '__builtin_arm_cx2di' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2da (0, accum, n,              n);    /* { dg-error {argument 4 to '__builtin_arm_cx2adi' must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3d  (0, n, m,                  n);    /* { dg-error {argument 4 to '__builtin_arm_cx3di' must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3da (0, accum, n, m,           n);    /* { dg-error {argument 5 to '__builtin_arm_cx3adi' must be a constant immediate in range \\[0-63\\]} } */\n \n   /* `coproc` is not an immediate.  */\n   accum += __arm_cx1   ((int)m,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */"}, {"sha": "611bdb9dd0e183040f0d405f79f9fd11bcdc7f45", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-error-1.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-1.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -25,6 +25,19 @@ uint8x16_t test_invalid_arguments (uint8x16_t n, uint8x16_t m)\n   accum += __arm_vcx3q (0, n, m);                 /* { dg-error {macro \"__arm_vcx3q\" requires 4 arguments, but only 3 given} } */\n   accum += __arm_vcx3qa (0, accum, n, m);         /* { dg-error {macro \"__arm_vcx3qa\" requires 5 arguments, but only 4 given} } */\n \n+  accum += __arm_vcx1q_m (0, accum, 33, 1, 4);         /* { dg-error {macro \"__arm_vcx1q_m\" passed 5 arguments, but takes just 4} } */\n+  accum += __arm_vcx1qa_m (0, accum, 33, 1, 4);        /* { dg-error {macro \"__arm_vcx1qa_m\" passed 5 arguments, but takes just 4} } */\n+  accum += __arm_vcx2q_m (0, accum, n, 33, 1, 4);      /* { dg-error {macro \"__arm_vcx2q_m\" passed 6 arguments, but takes just 5} } */\n+  accum += __arm_vcx2qa_m (0, accum, n, 33, 1, 4);     /* { dg-error {macro \"__arm_vcx2qa_m\" passed 6 arguments, but takes just 5} } */\n+  accum += __arm_vcx3q_m (0, accum, n, m, 33, 1, 4);   /* { dg-error {macro \"__arm_vcx3q_m\" passed 7 arguments, but takes just 6} } */\n+  accum += __arm_vcx3qa_m (0, accum, n, m, 33, 1, 4);  /* { dg-error {macro \"__arm_vcx3qa_m\" passed 7 arguments, but takes just 6} } */\n+  accum += __arm_vcx1q_m (0, accum, 4);                /* { dg-error {macro \"__arm_vcx1q_m\" requires 4 arguments, but only 3 given} } */\n+  accum += __arm_vcx1qa_m (0, accum, 4);               /* { dg-error {macro \"__arm_vcx1qa_m\" requires 4 arguments, but only 3 given} } */\n+  accum += __arm_vcx2q_m (0, accum, n, 4);             /* { dg-error {macro \"__arm_vcx2q_m\" requires 5 arguments, but only 4 given} } */\n+  accum += __arm_vcx2qa_m (0, accum, n, 4);            /* { dg-error {macro \"__arm_vcx2qa_m\" requires 5 arguments, but only 4 given} } */\n+  accum += __arm_vcx3q_m (0, accum, n, m, 4);          /* { dg-error {macro \"__arm_vcx3q_m\" requires 6 arguments, but only 5 given} } */\n+  accum += __arm_vcx3qa_m (0, accum, n, m, 4);         /* { dg-error {macro \"__arm_vcx3qa_m\" requires 6 arguments, but only 5 given} } */\n+\n   /* The preprocessor complains that the macro was given an invalid number of\n      arguments, and because of that ends up not expanding the macro but\n      rather just leaving the macro name in the source code.  That macro name\n@@ -38,5 +51,12 @@ uint8x16_t test_invalid_arguments (uint8x16_t n, uint8x16_t m)\n   /* { dg-error {'__arm_vcx3q' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 17 } */\n   /* { dg-error {'__arm_vcx3qa' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 18 } */\n \n+  /* { dg-error {'__arm_vcx1q_m' undeclared \\(first use in this function\\)} \"\" { target { *-*-* } } 28 } */\n+  /* { dg-error {'__arm_vcx1qa_m' undeclared \\(first use in this function\\)} \"\" { target { *-*-* } } 29 } */\n+  /* { dg-error {'__arm_vcx2q_m' undeclared \\(first use in this function\\)} \"\" { target { *-*-* } } 30 } */\n+  /* { dg-error {'__arm_vcx2qa_m' undeclared \\(first use in this function\\)} \"\" { target { *-*-* } } 31 } */\n+  /* { dg-error {'__arm_vcx3q_m' undeclared \\(first use in this function\\)} \"\" { target { *-*-* } } 32 } */\n+  /* { dg-error {'__arm_vcx3qa_m' undeclared \\(first use in this function\\)} \"\" { target { *-*-* } } 33 } */\n+\n   return accum;\n }"}, {"sha": "37335a0d9ad36291952532eae56de65c2b725cbd", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-error-2.c", "status": "modified", "additions": 118, "deletions": 34, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -4,12 +4,14 @@\n /* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n \n-/* This file and cde-mve-error-tests.c are split since there are two kinds of\n-   errors happening here.  The errors in the other file cause the compiler to\n-   not reach the errors found here, hence they need to be in a different file\n-   so we can inspect these ones.  */\n+/* The error checking files are split since there are three kinds of\n+   errors happening here.  Different error types cause errors at different\n+   times, which means the compiler stops and doesn't produce messages about the\n+   later errors.  Hence they need to be in a different file so we can inspect\n+   these ones.  */\n \n-uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval)\n+uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval,\n+\t\t\t\tmve_pred16_t pred)\n {\n   uint8x16_t accum = (uint8x16_t)(uint32x4_t){0, 0, 0, 0};\n \n@@ -36,6 +38,13 @@ uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval)\n   accum += __arm_vcx3q (1, n, m, 15);          /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n   accum += __arm_vcx3qa (1, accum, n, m, 15);  /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n \n+  accum += __arm_vcx1q_m (1, accum, 4094, pred);       /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx1qa_m (1, accum, 4095, pred);      /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx2q_m (1, accum, n, 126, pred);     /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx2qa_m (1, accum, n, 127, pred);    /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx3q_m (1, accum, n, m, 15, pred);   /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx3qa_m (1, accum, n, m, 15, pred);  /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+\n   /* `coproc' out of range.  */\n   accum += __arm_vcx1q_u8 (8, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n   accum += __arm_vcx1qa (8, accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n@@ -46,25 +55,46 @@ uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval)\n   accum += __arm_vcx3q (8, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n   accum += __arm_vcx3qa (8, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n \n+  accum += __arm_vcx1q_m (8, accum, 4094, pred);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1qa_m (8, accum, 4095, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q_m (8, accum, n, 126, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2qa_m (8, accum, n, 127, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q_m (8, accum, n, m, 15, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3qa_m (8, accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n   /* `imm' out of range.  */\n-  accum += __arm_vcx1q_u8 (0, 4096);           /* { dg-error {argument 2 must be a constant immediate in range \\[0-4095\\]} } */\n-  accum += __arm_vcx1qa (0, accum, 4096);      /* { dg-error {argument 3 must be a constant immediate in range \\[0-4095\\]} } */\n-  accum += __arm_vcx2q (0, n, 128);            /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx2q_u8 (0, n, 129);         /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx2qa (0, accum, n, 128);    /* { dg-error {argument 4 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx3q_u8 (0, n, m, 16);       /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n-  accum += __arm_vcx3q (0, n, m, 17);          /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n-  accum += __arm_vcx3qa (0, accum, n, m, 16);  /* { dg-error {argument 5 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx1q_u8 (0, 4096);           /* { dg-error {argument 2 to '__builtin_arm_vcx1qv16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx1qa (0, accum, 4096);      /* { dg-error {argument 3 to '__builtin_arm_vcx1qav16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx2q (0, n, 128);            /* { dg-error {argument 3 to '__builtin_arm_vcx2qv16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2q_u8 (0, n, 129);         /* { dg-error {argument 3 to '__builtin_arm_vcx2qv16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2qa (0, accum, n, 128);    /* { dg-error {argument 4 to '__builtin_arm_vcx2qav16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx3q_u8 (0, n, m, 16);       /* { dg-error {argument 4 to '__builtin_arm_vcx3qv16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3q (0, n, m, 17);          /* { dg-error {argument 4 to '__builtin_arm_vcx3qv16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3qa (0, accum, n, m, 16);  /* { dg-error {argument 5 to '__builtin_arm_vcx3qav16qi' must be a constant immediate in range \\[0-15\\]} } */\n+\n+  accum += __arm_vcx1q_m (0, accum, 4097, pred);      /* { dg-error {argument 3 to '__builtin_arm_vcx1q_p_v16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx1qa_m (0, accum, 4096, pred);     /* { dg-error {argument 3 to '__builtin_arm_vcx1qa_p_v16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx2q_m (0, accum, n, 128, pred);    /* { dg-error {argument 4 to '__builtin_arm_vcx2q_p_v16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2qa_m (0, accum, n, 128, pred);   /* { dg-error {argument 4 to '__builtin_arm_vcx2qa_p_v16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx3q_m (0, accum, n, m, 17, pred);  /* { dg-error {argument 5 to '__builtin_arm_vcx3q_p_v16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3qa_m (0, accum, n, m, 16, pred); /* { dg-error {argument 5 to '__builtin_arm_vcx3qa_p_v16qi' must be a constant immediate in range \\[0-15\\]} } */\n \n   /* `imm' is not an immediate.  */\n-  accum += __arm_vcx1q_u8 (0, someval);             /* { dg-error {argument 2 must be a constant immediate in range \\[0-4095\\]} } */\n-  accum += __arm_vcx1qa (0, accum, someval);        /* { dg-error {argument 3 must be a constant immediate in range \\[0-4095\\]} } */\n-  accum += __arm_vcx2q (0, n, someval);             /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx2q_u8 (6, n, someval);          /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx2qa (0, accum, n, someval);     /* { dg-error {argument 4 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx3q_u8 (0, n, m, someval);       /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n-  accum += __arm_vcx3q (6, n, m, someval);          /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n-  accum += __arm_vcx3qa (0, accum, n, m, someval);  /* { dg-error {argument 5 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx1q_u8 (6, someval);             /* { dg-error {argument 2 to '__builtin_arm_vcx1qv16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx1qa (0, accum, someval);        /* { dg-error {argument 3 to '__builtin_arm_vcx1qav16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx2q (0, n, someval);             /* { dg-error {argument 3 to '__builtin_arm_vcx2qv16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2q_u8 (6, n, someval);          /* { dg-error {argument 3 to '__builtin_arm_vcx2qv16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2qa (0, accum, n, someval);     /* { dg-error {argument 4 to '__builtin_arm_vcx2qav16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx3q_u8 (0, n, m, someval);       /* { dg-error {argument 4 to '__builtin_arm_vcx3qv16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3q (6, n, m, someval);          /* { dg-error {argument 4 to '__builtin_arm_vcx3qv16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3qa (0, accum, n, m, someval);  /* { dg-error {argument 5 to '__builtin_arm_vcx3qav16qi' must be a constant immediate in range \\[0-15\\]} } */\n+\n+  accum += __arm_vcx1q_m (6, accum, someval, pred);        /* { dg-error {argument 3 to '__builtin_arm_vcx1q_p_v16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx1qa_m (0, accum, someval, pred);       /* { dg-error {argument 3 to '__builtin_arm_vcx1qa_p_v16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx2q_m (0, accum, n, someval, pred);     /* { dg-error {argument 4 to '__builtin_arm_vcx2q_p_v16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2qa_m (0, accum, n, someval, pred);    /* { dg-error {argument 4 to '__builtin_arm_vcx2qa_p_v16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx3q_m (6, accum, n, m, someval, pred);  /* { dg-error {argument 5 to '__builtin_arm_vcx3q_p_v16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3qa_m (0, accum, n, m, someval, pred); /* { dg-error {argument 5 to '__builtin_arm_vcx3qa_p_v16qi' must be a constant immediate in range \\[0-15\\]} } */\n \n   /* `coproc' is not an immediate.  */\n   accum += __arm_vcx1q_u8 (someval, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n@@ -76,28 +106,82 @@ uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval)\n   accum += __arm_vcx3q (someval, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n   accum += __arm_vcx3qa (someval, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n \n+  accum += __arm_vcx1q_m (someval, accum, 4096, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1qa_m (someval, accum, 4095, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q_m (someval, accum, n, 126, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2qa_m (someval, accum, n, 127, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q_m (someval, accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3qa_m (someval, accum, n, m, 15, pred); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n   /* `imm' is of wrong type.  */\n-  accum += __arm_vcx1q_u8 (0, \"\");           /* { dg-error {argument 2 must be a constant immediate in range \\[0-4095\\]} } */\n-  accum += __arm_vcx1qa (0, accum, \"\");      /* { dg-error {argument 3 must be a constant immediate in range \\[0-4095\\]} } */\n-  accum += __arm_vcx2q (0, n, \"\");            /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx2q_u8 (0, n, \"x\");         /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx2qa (0, accum, n, \"\");    /* { dg-error {argument 4 must be a constant immediate in range \\[0-127\\]} } */\n-  accum += __arm_vcx3q_u8 (0, n, m, \"\");       /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n-  accum += __arm_vcx3q (0, n, m, \"x\");          /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n-  accum += __arm_vcx3qa (0, accum, n, m, \"\");  /* { dg-error {argument 5 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx1q_u8 (0, \"\");                    /* { dg-error {argument 2 to '__builtin_arm_vcx1qv16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  /* { dg-warning {passing argument 2 of '__builtin_arm_vcx1qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 117 } */\n+  accum += __arm_vcx1qa (0, accum, \"\");               /* { dg-error {argument 3 to '__builtin_arm_vcx1qav16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  /* { dg-warning {passing argument 3 of '__builtin_arm_vcx1qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 119 } */\n+  accum += __arm_vcx2q (0, n, \"\");                    /* { dg-error {argument 3 to '__builtin_arm_vcx2qv16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  /* { dg-warning {passing argument 3 of '__builtin_arm_vcx2qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 121 } */\n+  accum += __arm_vcx2q_u8 (0, n, \"x\");                /* { dg-error {argument 3 to '__builtin_arm_vcx2qv16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  /* { dg-warning {passing argument 3 of '__builtin_arm_vcx2qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 123 } */\n+  accum += __arm_vcx2qa (0, accum, n, \"\");            /* { dg-error {argument 4 to '__builtin_arm_vcx2qav16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  /* { dg-warning {passing argument 4 of '__builtin_arm_vcx2qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 125 } */\n+  accum += __arm_vcx3q_u8 (0, n, m, \"\");              /* { dg-error {argument 4 to '__builtin_arm_vcx3qv16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  /* { dg-warning {passing argument 4 of '__builtin_arm_vcx3qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 127 } */\n+  accum += __arm_vcx3q (0, n, m, \"x\");                /* { dg-error {argument 4 to '__builtin_arm_vcx3qv16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  /* { dg-warning {passing argument 4 of '__builtin_arm_vcx3qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 129 } */\n+  accum += __arm_vcx3qa (0, accum, n, m, \"\");         /* { dg-error {argument 5 to '__builtin_arm_vcx3qav16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  /* { dg-warning {passing argument 5 of '__builtin_arm_vcx3qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 131 } */\n+\n+  accum += __arm_vcx1q_m (0, accum, \"\", pred);        /* { dg-error {argument 3 to '__builtin_arm_vcx1q_p_v16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  /* { dg-warning {passing argument 3 of '__builtin_arm_vcx1q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 134 } */\n+  accum += __arm_vcx1qa_m (0, accum, \"\", pred);       /* { dg-error {argument 3 to '__builtin_arm_vcx1qa_p_v16qi' must be a constant immediate in range \\[0-4095\\]} } */\n+  /* { dg-warning {passing argument 3 of '__builtin_arm_vcx1qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 136 } */\n+  accum += __arm_vcx2q_m (0, accum, n, \"\", pred);     /* { dg-error {argument 4 to '__builtin_arm_vcx2q_p_v16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  /* { dg-warning {passing argument 4 of '__builtin_arm_vcx2q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 138 } */\n+  accum += __arm_vcx2qa_m (0, accum, n, \"\", pred);    /* { dg-error {argument 4 to '__builtin_arm_vcx2qa_p_v16qi' must be a constant immediate in range \\[0-127\\]} } */\n+  /* { dg-warning {passing argument 4 of '__builtin_arm_vcx2qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 140 } */\n+  accum += __arm_vcx3q_m (0, accum, n, m, \"x\", pred); /* { dg-error {argument 5 to '__builtin_arm_vcx3q_p_v16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  /* { dg-warning {passing argument 5 of '__builtin_arm_vcx3q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 142 } */\n+  accum += __arm_vcx3qa_m (0, accum, n, m, \"\", pred); /* { dg-error {argument 5 to '__builtin_arm_vcx3qa_p_v16qi' must be a constant immediate in range \\[0-15\\]} } */\n+  /* { dg-warning {passing argument 5 of '__builtin_arm_vcx3qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 144 } */\n \n   /* `coproc' is of wrong type.  */\n-  accum += __arm_vcx1q_u8 (\"\", 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n   accum += __arm_vcx1qa (\"\", accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 148 } */\n   accum += __arm_vcx2q (\"\", n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2q_u8 (\"\", n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 150 } */\n   accum += __arm_vcx2qa (\"\", accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3q_u8 (\"\", n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 152 } */\n   accum += __arm_vcx3q (\"\", n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 154 } */\n   accum += __arm_vcx3qa (\"\", accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 156 } */\n+\n+  accum += __arm_vcx1q_m (\"\", accum, 4094, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 159 } */\n+  accum += __arm_vcx1qa_m (\"\", accum, 4095, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 161 } */\n+  accum += __arm_vcx2q_m (\"\", accum, n, 126, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 163 } */\n+  accum += __arm_vcx2qa_m (\"\", accum, n, 127, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 165 } */\n+  accum += __arm_vcx3q_m (\"\", accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 167 } */\n+  accum += __arm_vcx3qa_m (\"\", accum, n, m, 15, pred); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 169 } */\n \n-  /* { dg-warning {passing argument 2 of '__builtin_arm_vcx1qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 80 } */\n-  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 90 } */\n+  /* `pred\" is of wrong type.  */\n+  accum += __arm_vcx1q_m (0, accum, 4094, \"\");\n+  /* { dg-warning {passing argument 4 of '__builtin_arm_vcx1q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 173 } */\n+  accum += __arm_vcx1qa_m (0, accum, 4095, \"\");\n+  /* { dg-warning {passing argument 4 of '__builtin_arm_vcx1qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 175 } */\n+  accum += __arm_vcx2q_m (0, accum, n, 126, \"\");\n+  /* { dg-warning {passing argument 5 of '__builtin_arm_vcx2q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 177 } */\n+  accum += __arm_vcx2qa_m (0, accum, n, 127, \"\");\n+  /* { dg-warning {passing argument 5 of '__builtin_arm_vcx2qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 179 } */\n+  accum += __arm_vcx3q_m (0, accum, n, m, 15, \"\");\n+  /* { dg-warning {passing argument 6 of '__builtin_arm_vcx3q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 181 } */\n+  accum += __arm_vcx3qa_m (0, accum, n, m, 15, \"\");\n+  /* { dg-warning {passing argument 6 of '__builtin_arm_vcx3qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 183 } */\n \n   return accum;\n }"}, {"sha": "68ed51ad949e358cdde1f13c406f392981d6e0e3", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-error-3.c", "status": "modified", "additions": 73, "deletions": 44, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-3.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -4,61 +4,90 @@\n /* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n \n-uint32_t test (int8x16_t m, int8x16_t n)\n+uint32_t test (int8x16_t m, int8x16_t n, mve_pred16_t pred)\n {\n   /* Bad types for polymophic arguments.  */\n-  uint32_t accum = 0, n_int = 0;\n+  uint32_t accum = 0, n_int = 0, m_int = 0;\n   accum += __arm_vcx1qa (0, accum, 4095);\n   accum += __arm_vcx2q (0, n_int, 126);\n   accum += __arm_vcx2q_u8 (0, n_int, 127);\n-  accum += __arm_vcx2qa (0, accum, n, 127);\n-  accum += __arm_vcx3q_u8 (0, n_int, m, 14);\n-  accum += __arm_vcx3q (0, n_int, m, 15);\n-  accum += __arm_vcx3qa (0, accum, n, m, 15);\n+  accum += __arm_vcx2qa (0, accum, n_int, 127);\n+  accum += __arm_vcx3q_u8 (0, n_int, m_int, 14);\n+  accum += __arm_vcx3q (0, n_int, m_int, 15);\n+  accum += __arm_vcx3qa (0, accum, n_int, m_int, 15);\n \n-  /* { dg-error {argument 1 to function '__builtin_arm_vcx1qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 11 } */\n+  /* We get a at least two errors for each function since the errors are\n+     checked for validity in two different ways and both are caught.\n+     The resolver manually checks that each type is 128 bits wide, and only\n+     casts the value if that's true.\n+     After the resolver rejects the function call then the C frontend tries to\n+     fit the original call to the builtin.  This produces a second set of\n+     error messages from the C frontend argument checking.  */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx1qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 11 } */\n   /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx1qav16qi'} \"\" { target *-*-* } 11 } */\n-  /* { dg-error {argument 1 to function '__builtin_arm_vcx2qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 12 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx2qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 12 } */\n   /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2qv16qi'} \"\" { target *-*-* } 12 } */\n-  /* { dg-error {argument 1 to function '__builtin_arm_vcx2qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 13 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx2qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 13 } */\n   /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2qv16qi'} \"\" { target *-*-* } 13 } */\n-  /* { dg-error {argument 1 to function '__builtin_arm_vcx2qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 14 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx2qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 14 } */\n   /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2qav16qi'} \"\" { target *-*-* } 14 } */\n-  /* { dg-error {argument 1 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 15 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx2qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 14 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx2qav16qi'} \"\" { target *-*-* } 14 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 15 } */\n   /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 15 } */\n-  /* { dg-error {argument 1 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 16 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 15 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 15 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 16 } */\n   /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 16 } */\n-  /* { dg-error {argument 1 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 17 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 16 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 16 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 17 } */\n   /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 17 } */\n-  return accum;\n-}\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 17 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 17 } */\n+  /* { dg-error {argument 4 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 17 } */\n+  /* { dg-error {incompatible type for argument 4 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 17 } */\n+\n+  accum += __arm_vcx1qa_m (0, accum, 4095, pred);\n+  accum += __arm_vcx2q_m (0, accum, n_int, 126, pred);\n+  accum += __arm_vcx2qa_m (0, accum, n_int, 127, pred);\n+  accum += __arm_vcx3q_m (0, accum, n_int, m_int, 15, pred);\n+  accum += __arm_vcx3qa_m (0, accum, n_int, m_int, 15, pred);\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx1qa_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 58 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx1qa_p_v16qi'} \"\" { target *-*-* } 58 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx2q_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 59 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2q_p_v16qi'} \"\" { target *-*-* } 59 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx2q_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 59 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx2q_p_v16qi'} \"\" { target *-*-* } 59 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx2qa_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 60 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2qa_p_v16qi'} \"\" { target *-*-* } 60 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx2qa_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 60 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx2qa_p_v16qi'} \"\" { target *-*-* } 60 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3q_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 61 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3q_p_v16qi'} \"\" { target *-*-* } 61 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx3q_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 61 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3q_p_v16qi'} \"\" { target *-*-* } 61 } */\n+  /* { dg-error {argument 4 to function '__builtin_arm_vcx3q_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 61 } */\n+  /* { dg-error {incompatible type for argument 4 of '__builtin_arm_vcx3q_p_v16qi'} \"\" { target *-*-* } 61 } */\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qa_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 62 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3qa_p_v16qi'} \"\" { target *-*-* } 62 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qa_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 62 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qa_p_v16qi'} \"\" { target *-*-* } 62 } */\n+  /* { dg-error {argument 4 to function '__builtin_arm_vcx3qa_p_v16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 62 } */\n+  /* { dg-error {incompatible type for argument 4 of '__builtin_arm_vcx3qa_p_v16qi'} \"\" { target *-*-* } 62 } */\n \n-int8x16_t test2 (int8x16_t m, int8x16_t n)\n-{\n-  uint32_t n_int = 0, m_int = 0;\n-  int8x16_t accum = (int8x16_t)(uint64x2_t) { 0, 0 };\n-  accum += __arm_vcx2qa (0, accum, n_int, 127);\n-  accum += __arm_vcx3q_u8 (0, n, m_int, 14);\n-  accum += __arm_vcx3q (0, n, m_int, 15);\n-  accum += __arm_vcx3qa (0, accum, n_int, m, 15);\n-  accum += __arm_vcx3qa (0, accum, n_int, m, 15);\n-  accum += __arm_vcx3qa (0, accum, n, m_int, 15);\n-  accum += __arm_vcx3qa (0, accum, n, m_int, 15);\n-\n-  /* { dg-error {argument 2 to function '__builtin_arm_vcx2qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 40 } */\n-  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx2qav16qi'} \"\" { target *-*-* } 40 } */\n-  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 41 } */\n-  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 41 } */\n-  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 42 } */\n-  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 42 } */\n-  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 43 } */\n-  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 43 } */\n-  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 44 } */\n-  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 44 } */\n-  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 45 } */\n-  /* { dg-error {incompatible type for argument 4 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 45 } */\n-  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 46 } */\n-  /* { dg-error {incompatible type for argument 4 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 46 } */\n   return accum;\n }\n \n@@ -78,8 +107,8 @@ int8x16_t test3 (int8x16_t m, int8x16_t n)\n   accum += __arm_vcx3qa (0, accum, n_int, m, 15);\n   accum += __arm_vcx3qa (0, accum, n_int, m_int, 15);\n \n-  /* { dg-error {'accum_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 70 } */\n-  /* { dg-error {'n_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 71 } */\n-  /* { dg-error {'m_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 75 } */\n+  /* { dg-error {'accum_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 99 } */\n+  /* { dg-error {'n_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 100 } */\n+  /* { dg-error {'m_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 104 } */\n   return accum;\n }"}, {"sha": "501cc84da10ed7c5607eb0eedb8e8c55024026e3", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-full-assembly.c", "status": "modified", "additions": 594, "deletions": 0, "changes": 594, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-full-assembly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-full-assembly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-full-assembly.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -555,3 +555,597 @@\n ** \tvmov\tq0, \\2\n ** \tbx\tlr\n */\n+\n+/* Predicated MVE intrinsics.  */\n+/* Merging lane predication types.\n+   NOTE: Depending on the target, the setup instructions (vldr's and vmsr) can\n+   be in a different order.  Here we just check that all the expected setup\n+   instructions are there.  We don't check that the setup instructions are\n+   different since the likelyhood of the compiler generating repeated versions\n+   of one rather than one and the other is very low and it's difficult to apply\n+   such a constraint in TCL regexps (lookahead/lookbehind constraints may not\n+   contain back references).  */\n+/*\n+** test_cde_vcx1q_mfloat16x8_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_mfloat32x4_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_muint8x16_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_muint16x8_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_muint32x4_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_muint64x2_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_mint8x16_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_mint16x8_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_mint32x4_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_mint64x2_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1t\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+\n+\n+/*\n+** test_cde_vcx1qa_mfloat16x8_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_mfloat32x4_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_muint8x16_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_muint16x8_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_muint32x4_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_muint64x2_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_mint8x16_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_mint16x8_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_mint32x4_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qa_mint64x2_tintint:\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \t(?:vldr\\.64\td0, \\.L[0-9]*\\n\\tvldr\\.64\td1, \\.L[0-9]*\\+8|vmsr\t P0, r2\t@ movhi)\n+** \tvpst\n+** \tvcx1at\tp0, q0, #32\n+** \tbx\tlr\n+*/\n+\n+\n+/*\n+** test_cde_vcx2q_mfloat16x8_tuint16x8_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_mfloat16x8_tfloat32x4_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_mfloat32x4_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_mint64x2_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_mint8x16_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_muint16x8_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tint64x2_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tuint16x8_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2t\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+\n+\n+/*\n+** test_cde_vcx2qa_mfloat16x8_tuint16x8_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_mfloat16x8_tfloat32x4_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_mfloat32x4_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_mint64x2_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_mint8x16_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_muint16x8_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tint64x2_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tuint16x8_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tuint8x16_tint:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r1\t@ movhi)\n+** \tvpst\n+** \tvcx2at\tp0, (q[0-7]), q0, #32\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+\n+\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_mfloat16x8_tfloat16x8_tfloat16x8_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_mfloat32x4_tuint64x2_tfloat16x8_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint16x8_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint16x8_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tuint16x8_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_mint8x16_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_mint64x2_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tint64x2_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tint64x2_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tint64x2_tint64x2_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3t\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+\n+\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_mfloat16x8_tfloat16x8_tfloat16x8_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_mfloat32x4_tuint64x2_tfloat16x8_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint16x8_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint16x8_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tuint16x8_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_mint8x16_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_mint64x2_tuint8x16_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tint64x2_tuint8x16_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tint64x2_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tint64x2_tint64x2_t:\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \t(?:vldr\\.64\td(?:[02468]|1[024]), \\.L[0-9]*\\n\\tvldr\\.64\td(?:[13579]|1[135]), \\.L[0-9]*\\+8|vmsr\t P0, r0\t@ movhi)\n+** \tvpst\n+** \tvcx3at\tp0, (q[0-7]), q0, q1, #15\n+** \tvmov\tq0, \\1([[:space:]]+@ [^\\n]*)?\n+** \tbx\tlr\n+*/"}, {"sha": "e73ce2fa0546cef685c556fa734684dc532f96ad", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-tests.c", "status": "modified", "additions": 572, "deletions": 11, "changes": 583, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-tests.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -4,24 +4,14 @@\n /* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n /* { dg-final { check-function-bodies \"**\" \"\" } } */\n-\n+/* { dg-additional-options \"-mfpu=auto\" } */\n \n /* Test that the assembly is produced as expected.\n    Test that the same thing happens for each valid type.\n      (ensure we check *every* valid type, though we're not bothering with every\n      type combination, just checking \"all same type\" and \"different types\",\n      also want to check every valid type at least once)  */\n \n-#define TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, accum_type, n_type, m_type, arguments) \\\n-  accum_type test_cde_##name##accum_type##n_type##m_type ( \\\n-\t\t      __attribute__ ((unused)) n_type n, \\\n-\t\t      __attribute__ ((unused)) m_type m) \\\n-  {   \\\n-    accum_type accum = (accum_type)(uint32x4_t){0,0,0,0};  \\\n-    accum += (accum_type) __arm_##name arguments; \\\n-    return accum; \\\n-  }\n-\n /* Use every valid type for the output -- demonstrate can use any 128 bit value\n    (which is a requirement for these intrinsics).  */\n #define TEST_CDE_MVE_INTRINSIC_1(name, arguments) \\\n@@ -68,6 +58,17 @@\n   TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint8x16_t, int64x2_t, arguments) \\\n   TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, int64x2_t, int64x2_t, arguments)\n \n+\n+#define TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, accum_type, n_type, m_type, arguments) \\\n+  accum_type test_cde_##name##accum_type##n_type##m_type ( \\\n+\t\t      __attribute__ ((unused)) n_type n, \\\n+\t\t      __attribute__ ((unused)) m_type m) \\\n+  {   \\\n+    accum_type accum = (accum_type)(uint32x4_t){0,0,0,0};  \\\n+    accum += (accum_type) __arm_##name arguments; \\\n+    return accum; \\\n+  }\n+\n TEST_CDE_MVE_INTRINSIC_1(vcx1q_u8, (0, 33))\n TEST_CDE_MVE_INTRINSIC_1(vcx1qa, (0, accum, 33))\n \n@@ -79,6 +80,27 @@ TEST_CDE_MVE_INTRINSIC_3(vcx3q_u8, (0, n, m, 12))\n TEST_CDE_MVE_INTRINSIC_3(vcx3q, (0, n, m, 12))\n TEST_CDE_MVE_INTRINSIC_3(vcx3qa, (0, accum, n, m, 12))\n \n+#undef TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE\n+#define TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, accum_type, n_type, m_type, arguments) \\\n+  accum_type test_cde_##name##accum_type##n_type##m_type ( \\\n+\t\t      __attribute__ ((unused)) n_type n, \\\n+\t\t      __attribute__ ((unused)) m_type m, \\\n+\t\t      mve_pred16_t pred) \\\n+  {   \\\n+    accum_type accum = (accum_type)(uint32x4_t){0,0,0,0};  \\\n+    accum += (accum_type) __arm_##name arguments; \\\n+    return accum; \\\n+  }\n+\n+TEST_CDE_MVE_INTRINSIC_1(vcx1q_m, (0, accum, 32, pred))\n+TEST_CDE_MVE_INTRINSIC_1(vcx1qa_m, (0, accum, 32, pred))\n+\n+TEST_CDE_MVE_INTRINSIC_2(vcx2q_m, (0, accum, n, 32, pred))\n+TEST_CDE_MVE_INTRINSIC_2(vcx2qa_m, (0, accum, n, 32, pred))\n+\n+TEST_CDE_MVE_INTRINSIC_3(vcx3q_m, (0, accum, n, m, 15, pred))\n+TEST_CDE_MVE_INTRINSIC_3(vcx3qa_m, (0, accum, n, m, 15, pred))\n+\n /* This testcase checks that in all compilations this C code produces the\n    expected CDE instructions from the above intrinsics.\n \n@@ -101,6 +123,13 @@ TEST_CDE_MVE_INTRINSIC_3(vcx3qa, (0, accum, n, m, 12))\n /* { dg-final { scan-assembler-times \"\\tvcx3\\t\" 30 } } */\n /* { dg-final { scan-assembler-times \"\\tvcx3a\\t\" 15 } } */\n \n+/* { dg-final { scan-assembler-times \"\\tvcx1t\\t\" 11 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx1at\\t\" 11 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx2t\\t\" 12 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx2at\\t\" 12 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx3t\\t\" 15 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx3at\\t\" 15 } } */\n+\n /*\n ** test_cde_vcx1q_u8__builtin_neon_tiintint:\n ** \t...\n@@ -720,3 +749,535 @@ TEST_CDE_MVE_INTRINSIC_3(vcx3qa, (0, accum, n, m, 12))\n ** \t...\n */\n \n+/*\n+** test_cde_vcx1q_m__builtin_neon_tiintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_mfloat16x8_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_mfloat32x4_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_muint8x16_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_muint16x8_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_muint32x4_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_muint64x2_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_mint8x16_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_mint16x8_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_mint32x4_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_mint64x2_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1t\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_m__builtin_neon_tiintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_mfloat16x8_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_mfloat32x4_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_muint8x16_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_muint16x8_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_muint32x4_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_muint64x2_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_mint8x16_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_mint16x8_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_mint32x4_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa_mint64x2_tintint:\n+** \t...\n+** \tvpst\n+** \tvcx1at\tp0, q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_m__builtin_neon_tiuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_t__builtin_neon_tiint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_mfloat16x8_tuint16x8_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_mfloat16x8_tfloat32x4_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_mfloat32x4_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_mint64x2_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_mint8x16_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_muint16x8_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tint64x2_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tuint16x8_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_muint8x16_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2t\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_m__builtin_neon_tiuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_t__builtin_neon_tiint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_mfloat16x8_tuint16x8_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_mfloat16x8_tfloat32x4_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_mfloat32x4_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_mint64x2_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_mint8x16_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_muint16x8_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tint64x2_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tuint16x8_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa_muint8x16_tuint8x16_tint:\n+** \t...\n+** \tvpst\n+** \tvcx2at\tp0, q[0-7], q[0-7], #32\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_m__builtin_neon_tiuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_t__builtin_neon_ti:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_mfloat16x8_tfloat16x8_tfloat16x8_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_mfloat32x4_tuint64x2_tfloat16x8_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint16x8_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint16x8_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tuint16x8_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_mint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_mint64x2_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tint64x2_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tuint8x16_tint64x2_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_muint8x16_tint64x2_tint64x2_t:\n+** \t...\n+** \tvpst\n+** \tvcx3t\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_m__builtin_neon_tiuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_t__builtin_neon_ti:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_mfloat16x8_tfloat16x8_tfloat16x8_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_mfloat32x4_tuint64x2_tfloat16x8_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint16x8_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint16x8_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tuint16x8_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_mint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_mint64x2_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tint64x2_tuint8x16_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tuint8x16_tint64x2_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa_muint8x16_tint64x2_tint64x2_t:\n+** \t...\n+** \tvpst\n+** \tvcx3at\tp0, q[0-7], q[0-7], q[0-7], #15\n+** \t...\n+*/"}, {"sha": "121d20103f7726e021dfe6d76411b28fd8e7f9ca", "filename": "gcc/testsuite/gcc.target/arm/acle/cde_v_1_err.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_err.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_err.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde_v_1_err.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -26,18 +26,18 @@ uint64_t test_coproc_range (uint32_t a, uint64_t b)\n uint64_t test_imm_range (uint32_t a, uint64_t b)\n {\n   uint64_t res = 0;\n-  res += __arm_vcx1_u32 (0, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n-  res += __arm_vcx1a_u32 (0, a, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n-  res += __arm_vcx2_u32 (0, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n-  res += __arm_vcx2a_u32 (0, a, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n-  res += __arm_vcx3_u32 (0, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n-  res += __arm_vcx3a_u32 (0, a, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n-  res += __arm_vcx1d_u64 (0, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n-  res += __arm_vcx1da_u64 (0, a, 2048); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-2047\\]} } */\n-  res += __arm_vcx2d_u64 (0, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n-  res += __arm_vcx2da_u64 (0, a, a, 64); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-63\\]} } */\n-  res += __arm_vcx3d_u64 (0, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n-  res += __arm_vcx3da_u64 (0, a, a, a, 8); /* { dg-error {argument [2-5] must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx1_u32 (0, 2048);         /* { dg-error {argument [2-5] to '__builtin_arm_vcx1si' must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx1a_u32 (0, a, 2048);     /* { dg-error {argument [2-5] to '__builtin_arm_vcx1asi' must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx2_u32 (0, a, 64);        /* { dg-error {argument [2-5] to '__builtin_arm_vcx2si' must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx2a_u32 (0, a, a, 64);    /* { dg-error {argument [2-5] to '__builtin_arm_vcx2asi' must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx3_u32 (0, a, a, 8);      /* { dg-error {argument [2-5] to '__builtin_arm_vcx3si' must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3a_u32 (0, a, a, a, 8);  /* { dg-error {argument [2-5] to '__builtin_arm_vcx3asi' must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx1d_u64 (0, 2048);        /* { dg-error {argument [2-5] to '__builtin_arm_vcx1di' must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx1da_u64 (0, a, 2048);    /* { dg-error {argument [2-5] to '__builtin_arm_vcx1adi' must be a constant immediate in range \\[0-2047\\]} } */\n+  res += __arm_vcx2d_u64 (0, a, 64);       /* { dg-error {argument [2-5] to '__builtin_arm_vcx2di' must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx2da_u64 (0, a, a, 64);   /* { dg-error {argument [2-5] to '__builtin_arm_vcx2adi' must be a constant immediate in range \\[0-63\\]} } */\n+  res += __arm_vcx3d_u64 (0, a, a, 8);     /* { dg-error {argument [2-5] to '__builtin_arm_vcx3di' must be a constant immediate in range \\[0-7\\]} } */\n+  res += __arm_vcx3da_u64 (0, a, a, a, 8); /* { dg-error {argument [2-5] to '__builtin_arm_vcx3adi' must be a constant immediate in range \\[0-7\\]} } */\n   return res;\n }\n "}, {"sha": "9fb47daf486fafdb897618453958e776a069d432", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef684c7827361e7e66543b4511fb1ca15ace4b1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c?ref=ef684c7827361e7e66543b4511fb1ca15ace4b1f", "patch": "@@ -11,7 +11,7 @@ foo (uint32x4_t * addr, mve_pred16_t p)\n }\n \n /* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"vmsr\\tP0, r\\[0-9\\]+.*\" } } */\n+/* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n /* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}]}