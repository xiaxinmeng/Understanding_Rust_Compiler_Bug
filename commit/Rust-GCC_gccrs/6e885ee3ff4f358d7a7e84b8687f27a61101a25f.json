{"sha": "6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4ODVlZTNmZjRmMzU4ZDdhN2U4NGI4Njg3ZjI3YTYxMTAxYTI1Zg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-07-30T19:23:34Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-07-30T19:23:34Z"}, "message": "combine.c (distribute_notes): Cancel REG_VALUE_PROFILE notes.\n\n\t* combine.c (distribute_notes): Cancel REG_VALUE_PROFILE notes.\n\t* gcov-io.h (GCOV_FIRST_VALUE_COUNTER, GCOV_LAST_VALUE_COUNTER,\n\tGCOV_N_VALUE_COUNTERS): New.\n\t* profile.c (compute_value_histograms): New static function.\n\t(branch_prob): Read back the value histograms.\n\t* rtl.c (reg_note_name): Add name for REG_VALUE_PROFILE note.\n\t* rtl.h (enum reg_note): Add REG_VALUE_PROFILE note.\n\t* value-prof.c: Add comment on reading the profile.\n\t* value-prof.h (COUNTER_FOR_HIST_TYPE, HIST_TYPE_FOR_COUNTER): New.\n\t* doc/invoke.texi (-fprofile-values): Document behavior with\n\t-fbranch-probabilities.\n\nFrom-SVN: r69969", "tree": {"sha": "3736c245736a667b97a048cf693be5fe11ae12ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3736c245736a667b97a048cf693be5fe11ae12ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/comments", "author": null, "committer": null, "parents": [{"sha": "fd9b4d64fb349ebc9c6aa1fb7f44ce3b42614032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9b4d64fb349ebc9c6aa1fb7f44ce3b42614032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9b4d64fb349ebc9c6aa1fb7f44ce3b42614032"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "8fadb8d77676ed7655eee9ccc260b530280d6af2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -1,3 +1,17 @@\n+2003-07-30  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* combine.c (distribute_notes): Cancel REG_VALUE_PROFILE notes.\n+\t* gcov-io.h (GCOV_FIRST_VALUE_COUNTER, GCOV_LAST_VALUE_COUNTER,\n+\tGCOV_N_VALUE_COUNTERS): New.\n+\t* profile.c (compute_value_histograms): New static function.\n+\t(branch_prob): Read back the value histograms.\n+\t* rtl.c (reg_note_name): Add name for REG_VALUE_PROFILE note.\n+\t* rtl.h (enum reg_note): Add REG_VALUE_PROFILE note.\n+\t* value-prof.c: Add comment on reading the profile.\n+\t* value-prof.h (COUNTER_FOR_HIST_TYPE, HIST_TYPE_FOR_COUNTER): New.\n+\t* doc/invoke.texi (-fprofile-values): Document behavior with\n+\t-fbranch-probabilities.\n+\n 2003-07-30  David Edelsohn  <edelsohn@gnu.org>\n \n \t* longlong.h (PowerPC umul_ppmm): Do not test __vxworks__."}, {"sha": "e3c1cf6ec7ae6d282d732d658d6bf8ad1b4321f6", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -12456,6 +12456,10 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2)\n \t  place = i3;\n \t  break;\n \n+\tcase REG_VALUE_PROFILE:\n+\t  /* Just get rid of this note, as it is unused later anyway.  */\n+\t  break;\n+\n \tcase REG_VTABLE_REF:\n \t  /* ??? Should remain with *a particular* memory load.  Given the\n \t     nature of vtable data, the last insn seems relatively safe.  */"}, {"sha": "ada9e3d7d06100ea948c73e8bfcaa2e16c19f404", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -4355,6 +4355,10 @@ exactly determine which path is taken more often.\n If combined with @option{-fprofile-arcs}, it adds code so that some\n data about values of expressions in the program is gathered.\n \n+With @option{-fbranch-probabilities}, it reads back the data gathered\n+from profiling values of expressions and adds @samp{REG_VALUE_PROFILE}\n+notes to instructions for their later usage in optimizations.\n+\n @item -fnew-ra\n @opindex fnew-ra\n Use a graph coloring register allocator.  Currently this option is meant"}, {"sha": "59b202bc0a4e4a7fe10b86ceebbea1f9131c8018", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -286,13 +286,24 @@ typedef HOST_WIDEST_INT gcov_type;\n #define GCOV_COUNTER_ARCS \t0  /* Arc transitions.  */\n #define GCOV_COUNTERS_SUMMABLE\t1  /* Counters which can be\n \t\t\t\t      summaried.  */\n+#define GCOV_FIRST_VALUE_COUNTER 1 /* The first of counters used for value\n+\t\t\t\t      profiling.  They must form a consecutive\n+\t\t\t\t      interval and their order must match\n+\t\t\t\t      the order of HIST_TYPEs in\n+\t\t\t\t      value-prof.h.  */\n #define GCOV_COUNTER_V_INTERVAL\t1  /* Histogram of value inside an interval.  */\n #define GCOV_COUNTER_V_POW2\t2  /* Histogram of exact power2 logarithm\n \t\t\t\t      of a value.  */\n #define GCOV_COUNTER_V_SINGLE\t3  /* The most common value of expression.  */\n #define GCOV_COUNTER_V_DELTA\t4  /* The most common difference between\n \t\t\t\t      consecutive values of expression.  */\n+#define GCOV_LAST_VALUE_COUNTER 4  /* The last of counters used for value\n+\t\t\t\t      profiling.  */\n #define GCOV_COUNTERS\t\t5\n+\n+/* Number of counters used for value profiling.  */\n+#define GCOV_N_VALUE_COUNTERS \\\n+  (GCOV_LAST_VALUE_COUNTER - GCOV_FIRST_VALUE_COUNTER + 1)\n   \n   /* A list of human readable names of the counters */\n #define GCOV_COUNTER_NAMES\t{\"arcs\", \"interval\", \"pow2\", \"single\", \"delta\"}"}, {"sha": "37a5ecb5c11275a6ddfe685b3365a2eea51b63bf", "filename": "gcc/profile.c", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -117,6 +117,7 @@ static rtx gen_const_delta_profiler (struct histogram_value *, unsigned,\n static unsigned instrument_edges (struct edge_list *);\n static void instrument_values (unsigned, struct histogram_value *);\n static void compute_branch_probabilities (void);\n+static void compute_value_histograms (unsigned, struct histogram_value *);\n static gcov_type * get_exec_counts (void);\n static basic_block find_group (basic_block);\n static void union_groups (basic_block, basic_block);\n@@ -601,6 +602,57 @@ compute_branch_probabilities (void)\n   free_aux_for_blocks ();\n }\n \n+/* Load value histograms for N_VALUES values whose description is stored\n+   in VALUES array from .da file.  */\n+static void\n+compute_value_histograms (unsigned n_values, struct histogram_value *values)\n+{\n+  unsigned i, j, t, any;\n+  unsigned n_histogram_counters[GCOV_N_VALUE_COUNTERS];\n+  gcov_type *histogram_counts[GCOV_N_VALUE_COUNTERS];\n+  gcov_type *act_count[GCOV_N_VALUE_COUNTERS];\n+  gcov_type *aact_count;\n+ \n+  for (t = 0; t < GCOV_N_VALUE_COUNTERS; t++)\n+    n_histogram_counters[t] = 0;\n+\n+  for (i = 0; i < n_values; i++)\n+    n_histogram_counters[(int) (values[i].type)] += values[i].n_counters;\n+\n+  any = 0;\n+  for (t = 0; t < GCOV_N_VALUE_COUNTERS; t++)\n+    {\n+      histogram_counts[t] =\n+\tget_coverage_counts (COUNTER_FOR_HIST_TYPE (t),\n+\t\t\t     n_histogram_counters[t], &profile_info);\n+      if (histogram_counts[t])\n+\tany = 1;\n+      act_count[t] = histogram_counts[t];\n+    }\n+  if (!any)\n+    return;\n+\n+  for (i = 0; i < n_values; i++)\n+    {\n+      rtx hist_list = NULL_RTX;\n+      t = (int) (values[i].type);\n+\n+      aact_count = act_count[t];\n+      act_count[t] += values[i].n_counters;\n+      for (j = values[i].n_counters; j > 0; j--)\n+\thist_list = alloc_EXPR_LIST (0, GEN_INT (aact_count[j - 1]), hist_list);\n+      hist_list = alloc_EXPR_LIST (0, copy_rtx (values[i].value), hist_list);\n+      hist_list = alloc_EXPR_LIST (0, GEN_INT (values[i].type), hist_list);\n+      REG_NOTES (values[i].insn) =\n+\t      alloc_EXPR_LIST (REG_VALUE_PROFILE, hist_list,\n+\t\t\t       REG_NOTES (values[i].insn));\n+    }\n+\n+  for (t = 0; t < GCOV_N_VALUE_COUNTERS; t++)\n+    if (histogram_counts[t])\n+      free (histogram_counts[t]);\n+}\n+\n /* Instrument and/or analyze program behavior based on program flow graph.\n    In either case, this function builds a flow graph for the function being\n    compiled.  The flow graph is stored in BB_GRAPH.\n@@ -886,7 +938,11 @@ branch_prob (void)\n     }\n \n   if (flag_branch_probabilities)\n-    compute_branch_probabilities ();\n+    {\n+      compute_branch_probabilities ();\n+      if (flag_profile_values)\n+\tcompute_value_histograms (n_values, values);\n+    }\n \n   /* For each edge not on the spanning tree, add counting code as rtl.  */\n   if (profile_arc_flag"}, {"sha": "54b7476c738def61f83eff25be88122b996e94a7", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -228,7 +228,7 @@ const char * const reg_note_name[] =\n   \"REG_RETVAL\", \"REG_LIBCALL\", \"REG_NONNEG\",\n   \"REG_NO_CONFLICT\", \"REG_UNUSED\", \"REG_CC_SETTER\", \"REG_CC_USER\",\n   \"REG_LABEL\", \"REG_DEP_ANTI\", \"REG_DEP_OUTPUT\", \"REG_BR_PROB\",\n-  \"REG_NOALIAS\", \"REG_SAVE_AREA\", \"REG_BR_PRED\",\n+  \"REG_VALUE_PROFILE\", \"REG_NOALIAS\", \"REG_SAVE_AREA\", \"REG_BR_PRED\",\n   \"REG_FRAME_RELATED_EXPR\", \"REG_EH_CONTEXT\", \"REG_EH_REGION\",\n   \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\", \"REG_NORETURN\",\n   \"REG_NON_LOCAL_GOTO\", \"REG_SETJMP\", \"REG_ALWAYS_RETURN\","}, {"sha": "8fb2574ad51697a18df734aea9f33ad3bc845327", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -684,6 +684,11 @@ enum reg_note\n      return.  */\n   REG_BR_PROB,\n \n+  /* REG_VALUE_PROFILE is attached when the profile is read in to an insn\n+     before that the code to profile the value is inserted.  It contains\n+     the results of profiling.  */\n+  REG_VALUE_PROFILE,\n+\n   /* Attached to a call insn; indicates that the call is malloc-like and\n      that the pointer returned cannot alias anything else.  */\n   REG_NOALIAS,"}, {"sha": "171b30481e42f82230bcabdcc031335b805cd570", "filename": "gcc/value-prof.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -40,9 +40,14 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    insn_values_to_profile function.  This function is called from branch_prob\n    in profile.c and the requested values are instrumented by it in the first\n    compilation with -fprofile-arcs.  The optimization may then read the\n-   gathered data in the second compilation with -fbranch-probabilities (the\n-   description of an exact way how to do it will be added here once the\n-   code responsible for reading of the data is merged).  */\n+   gathered data in the second compilation with -fbranch-probablities.\n+   The measured data is appended as REG_VALUE_PROFILE note to the instrumented\n+   insn.  The argument to the note consists of an EXPR_LIST where its\n+   members have the following meaning (from the first to the last):\n+   \n+   -- type of information gathered (HIST_TYPE*)\n+   -- the expression that is profiled\n+   -- list of counters starting from the first one.  */\n \n static void insn_values_to_profile (rtx, unsigned *, struct histogram_value **);\n \f"}, {"sha": "233895e4a31996f2ec2335972193e007ae1b2052", "filename": "gcc/value-prof.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ee3ff4f358d7a7e84b8687f27a61101a25f/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=6e885ee3ff4f358d7a7e84b8687f27a61101a25f", "patch": "@@ -30,6 +30,10 @@ enum hist_type\n \t\t\t   difference between two evaluations of a value.  */\n };\n \n+#define COUNTER_FOR_HIST_TYPE(TYPE) ((int) (TYPE) + GCOV_FIRST_VALUE_COUNTER)\n+#define HIST_TYPE_FOR_COUNTER(COUNTER) \\\n+  ((enum hist_type) ((COUNTER) - GCOV_FIRST_VALUE_COUNTER))\n+\n /* The value to measure.  */\n struct histogram_value\n {"}]}