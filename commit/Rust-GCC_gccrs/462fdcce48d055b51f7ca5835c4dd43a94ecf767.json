{"sha": "462fdcce48d055b51f7ca5835c4dd43a94ecf767", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyZmRjY2U0OGQwNTViNTFmN2NhNTgzNWM0ZGQ0M2E5NGVjZjc2Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-21T01:21:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-21T01:21:11Z"}, "message": "fold-const.c (operand_equal_p): Temporarily support NULL args.\n\n\t* fold-const.c (operand_equal_p): Temporarily support NULL args.\n\t(operand_equal_p, case ARRAY_REF): Compare args 2 and 3.\n\t(operand_equal_p, case COMPONENT_REF): Likewise, for arg 2.\n\nFrom-SVN: r84990", "tree": {"sha": "208fd606ab7b1ab6d2cca7d8573cb5dd006033d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/208fd606ab7b1ab6d2cca7d8573cb5dd006033d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/462fdcce48d055b51f7ca5835c4dd43a94ecf767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462fdcce48d055b51f7ca5835c4dd43a94ecf767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462fdcce48d055b51f7ca5835c4dd43a94ecf767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462fdcce48d055b51f7ca5835c4dd43a94ecf767/comments", "author": null, "committer": null, "parents": [{"sha": "0e28378a9a0becf189130f49c34ac8622d0f806b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e28378a9a0becf189130f49c34ac8622d0f806b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e28378a9a0becf189130f49c34ac8622d0f806b"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "f581fcd9ca4d76805c06771cf24cbcfa40a8f2dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462fdcce48d055b51f7ca5835c4dd43a94ecf767/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462fdcce48d055b51f7ca5835c4dd43a94ecf767/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=462fdcce48d055b51f7ca5835c4dd43a94ecf767", "patch": "@@ -2,6 +2,12 @@\n \n \t* config/arm/arm.c (thumb_expand_prologue): Remove bogus GEN_INT.\n \n+2004-07-20  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* fold-const.c (operand_equal_p): Temporarily support NULL args.\n+\t(operand_equal_p, case ARRAY_REF): Compare args 2 and 3.\n+\t(operand_equal_p, case COMPONENT_REF): Likewise, for arg 2.\n+\n 2004-07-20  Zack Weinberg  <zack@codesourcery.com>\n \n \t* rtl.h (plus_constant): Delete."}, {"sha": "946a2fb1cc4634eb35db3ba608d3168173756e3c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462fdcce48d055b51f7ca5835c4dd43a94ecf767/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462fdcce48d055b51f7ca5835c4dd43a94ecf767/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=462fdcce48d055b51f7ca5835c4dd43a94ecf767", "patch": "@@ -2348,8 +2348,17 @@ truth_value_p (enum tree_code code)\n int\n operand_equal_p (tree arg0, tree arg1, unsigned int flags)\n {\n+  /* If one is specified and the other isn't, they aren't equal and if\n+     neither is specified, they are.\n+\n+     ??? This is temporary and is meant only to handle the cases of the\n+     optional operands for COMPONENT_REF and ARRAY_REF.  */\n+  if ((arg0 && !arg1) || (!arg0 && arg1))\n+    return 0;\n+  else if (!arg0 && !arg1)\n+    return 1;\n   /* If either is ERROR_MARK, they aren't equal.  */\n-  if (TREE_CODE (arg0) == ERROR_MARK || TREE_CODE (arg1) == ERROR_MARK)\n+  else if (TREE_CODE (arg0) == ERROR_MARK || TREE_CODE (arg1) == ERROR_MARK)\n     return 0;\n \n   /* If both types don't have the same signedness, then we can't consider\n@@ -2483,13 +2492,26 @@ operand_equal_p (tree arg0, tree arg1, unsigned int flags)\n \t  return operand_equal_p (TREE_OPERAND (arg0, 0),\n \t\t\t\t  TREE_OPERAND (arg1, 0), flags);\n \n-\tcase COMPONENT_REF:\n \tcase ARRAY_REF:\n \tcase ARRAY_RANGE_REF:\n \t  return (operand_equal_p (TREE_OPERAND (arg0, 0),\n \t\t\t\t   TREE_OPERAND (arg1, 0), flags)\n \t\t  && operand_equal_p (TREE_OPERAND (arg0, 1),\n-\t\t\t\t      TREE_OPERAND (arg1, 1), flags));\n+\t\t\t\t      TREE_OPERAND (arg1, 1), flags)\n+\t\t  && operand_equal_p (TREE_OPERAND (arg0, 2),\n+\t\t\t\t      TREE_OPERAND (arg1, 2), flags)\n+\t\t  && operand_equal_p (TREE_OPERAND (arg0, 3),\n+\t\t\t\t      TREE_OPERAND (arg1, 3), flags));\n+\n+\n+\tcase COMPONENT_REF:\n+\t  return (operand_equal_p (TREE_OPERAND (arg0, 0),\n+\t\t\t\t   TREE_OPERAND (arg1, 0), flags)\n+\t\t  && operand_equal_p (TREE_OPERAND (arg0, 1),\n+\t\t\t\t      TREE_OPERAND (arg1, 1), flags)\n+\t\t  && operand_equal_p (TREE_OPERAND (arg0, 2),\n+\t\t\t\t      TREE_OPERAND (arg1, 2), flags));\n+\n \n \tcase BIT_FIELD_REF:\n \t  return (operand_equal_p (TREE_OPERAND (arg0, 0),"}]}