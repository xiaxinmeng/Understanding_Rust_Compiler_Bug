{"sha": "8447859b3ecba626580a9b812a236ecc6438d730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ0Nzg1OWIzZWNiYTYyNjU4MGE5YjgxMmEyMzZlY2M2NDM4ZDczMA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2015-01-28T10:20:19Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2015-01-28T10:20:19Z"}, "message": "re PR tree-optimization/64718 (Bad 16-bit bswap replacement)\n\n2015-01-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR tree-optimization/64718\n    * tree-ssa-math-opts.c (pass_optimize_bswap::execute): Make bswap_type\n    be a 16bit unsigned integer when n->range is 16.\n    (bswap_replace): Convert src to that type if necessary for all bswap\n    sizes.  Fix rotation right notation in nearby comment.  Use bswap_type\n    set in pass_optimize_bswap::execute ().\n\n    gcc/testsuite/\n    PR tree-optimization/64718\n    * gcc.c-torture/execute/pr64718.c: New test.\n\nFrom-SVN: r220203", "tree": {"sha": "79c23d259d3122536e27807b8eb8ee4dcdd18bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c23d259d3122536e27807b8eb8ee4dcdd18bb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8447859b3ecba626580a9b812a236ecc6438d730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8447859b3ecba626580a9b812a236ecc6438d730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8447859b3ecba626580a9b812a236ecc6438d730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8447859b3ecba626580a9b812a236ecc6438d730/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "285398d2db1c0835373f9d97d95ff18b94125ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285398d2db1c0835373f9d97d95ff18b94125ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285398d2db1c0835373f9d97d95ff18b94125ad9"}], "stats": {"total": 65, "additions": 48, "deletions": 17}, "files": [{"sha": "71413471372326494ce111d32fc9876c003199be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8447859b3ecba626580a9b812a236ecc6438d730", "patch": "@@ -1,3 +1,12 @@\n+2015-01-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/64718\n+\t* tree-ssa-math-opts.c (pass_optimize_bswap::execute): Make bswap_type\n+\tbe a 16bit unsigned integer when n->range is 16.\n+\t(bswap_replace): Convert src to that type if necessary for all bswap\n+\tsizes.  Fix rotation right notation in nearby comment.  Use bswap_type\n+\tset in pass_optimize_bswap::execute ().\n+\n 2015-01-28  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_abs<mode>): New."}, {"sha": "4f4e72ca9f75379c00a2210c5757abd8697ea3e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8447859b3ecba626580a9b812a236ecc6438d730", "patch": "@@ -1,3 +1,8 @@\n+2015-01-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/64718\n+\t* gcc.c-torture/execute/pr64718.c: New test.\n+\n 2015-01-28  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/abs_2.c: New."}, {"sha": "58773e0453a203a621f0aa3d0c3b2eef3779b62c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr64718.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64718.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64718.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64718.c?ref=8447859b3ecba626580a9b812a236ecc6438d730", "patch": "@@ -0,0 +1,18 @@\n+static int __attribute__ ((noinline, noclone))\n+swap (int x)\n+{\n+  return (unsigned short) ((unsigned short) x << 8 | (unsigned short) x >> 8);\n+}\n+\n+static int a = 0x1234;\n+\n+int\n+main (void)\n+{\n+  int b = 0x1234;\n+  if (swap (a) != 0x3412)\n+    __builtin_abort ();\n+  if (swap (b) != 0x3412)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e30116dab1aab948c1aa59c0db49777f9c44c4ff", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8447859b3ecba626580a9b812a236ecc6438d730/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=8447859b3ecba626580a9b812a236ecc6438d730", "patch": "@@ -2355,37 +2355,36 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n \n   tmp = src;\n \n+  /* Convert the src expression if necessary.  */\n+  if (!useless_type_conversion_p (TREE_TYPE (tmp), bswap_type))\n+    {\n+      gimple convert_stmt;\n+\n+      tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapsrc\");\n+      convert_stmt = gimple_build_assign (tmp, NOP_EXPR, src);\n+      gsi_insert_before (&gsi, convert_stmt, GSI_SAME_STMT);\n+    }\n+\n   /* Canonical form for 16 bit bswap is a rotate expression.  Only 16bit values\n      are considered as rotation of 2N bit values by N bits is generally not\n-     equivalent to a bswap.  Consider for instance 0x01020304 >> 16 which gives\n-     0x03040102 while a bswap for that value is 0x04030201.  */\n+     equivalent to a bswap.  Consider for instance 0x01020304 r>> 16 which\n+     gives 0x03040102 while a bswap for that value is 0x04030201.  */\n   if (bswap && n->range == 16)\n     {\n       tree count = build_int_cst (NULL, BITS_PER_UNIT);\n-      bswap_type = TREE_TYPE (src);\n-      src = fold_build2 (LROTATE_EXPR, bswap_type, src, count);\n+      src = fold_build2 (LROTATE_EXPR, bswap_type, tmp, count);\n       bswap_stmt = gimple_build_assign (NULL, src);\n     }\n   else\n-    {\n-      /* Convert the src expression if necessary.  */\n-      if (!useless_type_conversion_p (TREE_TYPE (tmp), bswap_type))\n-\t{\n-\t  gimple convert_stmt;\n-\t  tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapsrc\");\n-\t  convert_stmt = gimple_build_assign (tmp, NOP_EXPR, src);\n-\t  gsi_insert_before (&gsi, convert_stmt, GSI_SAME_STMT);\n-\t}\n-\n-      bswap_stmt = gimple_build_call (fndecl, 1, tmp);\n-    }\n+    bswap_stmt = gimple_build_call (fndecl, 1, tmp);\n \n   tmp = tgt;\n \n   /* Convert the result if necessary.  */\n   if (!useless_type_conversion_p (TREE_TYPE (tgt), bswap_type))\n     {\n       gimple convert_stmt;\n+\n       tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapdst\");\n       convert_stmt = gimple_build_assign (tgt, NOP_EXPR, tmp);\n       gsi_insert_after (&gsi, convert_stmt, GSI_SAME_STMT);\n@@ -2498,7 +2497,7 @@ pass_optimize_bswap::execute (function *fun)\n \t      /* Already in canonical form, nothing to do.  */\n \t      if (code == LROTATE_EXPR || code == RROTATE_EXPR)\n \t\tcontinue;\n-\t      load_type = uint16_type_node;\n+\t      load_type = bswap_type = uint16_type_node;\n \t      break;\n \t    case 32:\n \t      load_type = uint32_type_node;"}]}