{"sha": "d5c6604f42034e36b149f899c5ddb93025a645b4", "node_id": "C_kwDOANBUbNoAKGQ1YzY2MDRmNDIwMzRlMzZiMTQ5Zjg5OWM1ZGRiOTMwMjVhNjQ1YjQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-02T10:51:23Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-02T10:51:23Z"}, "message": "Add a simulate_record_decl lang hook\n\nThis patch adds a lang hook for defining a struct/RECORD_TYPE\n\u201cas if\u201d it had appeared directly in the source code.  It follows\nthe similar existing hook for enums.\n\nIt's the caller's responsibility to create the fields\n(as FIELD_DECLs) but the hook's responsibility to create\nand declare the associated RECORD_TYPE.\n\nFor now the hook is hard-coded to do the equivalent of:\n\n  typedef struct NAME { FIELDS } NAME;\n\nbut this could be controlled by an extra parameter if some callers\nwant a different behaviour in future.\n\nThe motivating use case is to allow the long list of struct\ndefinitions in arm_neon.h to be provided by the compiler,\nwhich in turn unblocks various arm_neon.h optimisations.\n\ngcc/\n\t* langhooks.h (lang_hooks_for_types::simulate_record_decl): New hook.\n\t* langhooks-def.h (lhd_simulate_record_decl): Declare.\n\t(LANG_HOOKS_SIMULATE_RECORD_DECL): Define.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Include it.\n\t* langhooks.c (lhd_simulate_record_decl): New function.\n\ngcc/c/\n\t* c-tree.h (c_simulate_record_decl): Declare.\n\t* c-objc-common.h (LANG_HOOKS_SIMULATE_RECORD_DECL): Override.\n\t* c-decl.c (c_simulate_record_decl): New function.\n\ngcc/cp/\n\t* decl.c: Include langhooks-def.h.\n\t(cxx_simulate_record_decl): New function.\n\t* cp-objcp-common.h (cxx_simulate_record_decl): Declare.\n\t(LANG_HOOKS_SIMULATE_RECORD_DECL): Override.", "tree": {"sha": "3febb7400753ff374b3d69fb256da9e0a581a6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3febb7400753ff374b3d69fb256da9e0a581a6a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5c6604f42034e36b149f899c5ddb93025a645b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c6604f42034e36b149f899c5ddb93025a645b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c6604f42034e36b149f899c5ddb93025a645b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c6604f42034e36b149f899c5ddb93025a645b4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8fe39f417bebd34498ea60a3815c2f420116ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fe39f417bebd34498ea60a3815c2f420116ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8fe39f417bebd34498ea60a3815c2f420116ecf"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "186fa1692c165ed6249d710398eeb3fe0668a131", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -9436,6 +9436,36 @@ c_simulate_enum_decl (location_t loc, const char *name,\n   input_location = saved_loc;\n   return enumtype;\n }\n+\n+/* Implement LANG_HOOKS_SIMULATE_RECORD_DECL.  */\n+\n+tree\n+c_simulate_record_decl (location_t loc, const char *name,\n+\t\t\tarray_slice<const tree> fields)\n+{\n+  location_t saved_loc = input_location;\n+  input_location = loc;\n+\n+  class c_struct_parse_info *struct_info;\n+  tree ident = get_identifier (name);\n+  tree type = start_struct (loc, RECORD_TYPE, ident, &struct_info);\n+\n+  for (unsigned int i = 0; i < fields.size (); ++i)\n+    {\n+      DECL_FIELD_CONTEXT (fields[i]) = type;\n+      if (i > 0)\n+\tDECL_CHAIN (fields[i - 1]) = fields[i];\n+    }\n+\n+  finish_struct (loc, type, fields[0], NULL_TREE, struct_info);\n+\n+  tree decl = build_decl (loc, TYPE_DECL, ident, type);\n+  set_underlying_type (decl);\n+  lang_hooks.decls.pushdecl (decl);\n+\n+  input_location = saved_loc;\n+  return type;\n+}\n \f\n /* Create the FUNCTION_DECL for a function definition.\n    DECLSPECS, DECLARATOR and ATTRIBUTES are the parts of"}, {"sha": "f4e8271f06c072e7c982941ff20c6d7f6b344c47", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -81,6 +81,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef LANG_HOOKS_SIMULATE_ENUM_DECL\n #define LANG_HOOKS_SIMULATE_ENUM_DECL c_simulate_enum_decl\n+#undef LANG_HOOKS_SIMULATE_RECORD_DECL\n+#define LANG_HOOKS_SIMULATE_RECORD_DECL c_simulate_record_decl\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE"}, {"sha": "f1dbbd5d5735a925504aaa41bc9fd3e4ce977252", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -598,6 +598,8 @@ extern tree finish_struct (location_t, tree, tree, tree,\n \t\t\t   class c_struct_parse_info *);\n extern tree c_simulate_enum_decl (location_t, const char *,\n \t\t\t\t  vec<string_int_pair> *);\n+extern tree c_simulate_record_decl (location_t, const char *,\n+\t\t\t\t    array_slice<const tree>);\n extern struct c_arg_info *build_arg_info (void);\n extern struct c_arg_info *get_parm_info (bool, tree);\n extern tree grokfield (location_t, struct c_declarator *,"}, {"sha": "d5859406e8f648134f4ea333a20e35d4f51b6272", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -39,6 +39,8 @@ extern bool cp_handle_option (size_t, const char *, HOST_WIDE_INT, int,\n extern tree cxx_make_type_hook\t\t\t(tree_code);\n extern tree cxx_simulate_enum_decl (location_t, const char *,\n \t\t\t\t    vec<string_int_pair> *);\n+extern tree cxx_simulate_record_decl (location_t, const char *,\n+\t\t\t\t      array_slice<const tree>);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n    specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,\n@@ -139,6 +141,8 @@ extern tree cxx_simulate_enum_decl (location_t, const char *,\n #define LANG_HOOKS_MAKE_TYPE cxx_make_type_hook\n #undef LANG_HOOKS_SIMULATE_ENUM_DECL\n #define LANG_HOOKS_SIMULATE_ENUM_DECL cxx_simulate_enum_decl\n+#undef LANG_HOOKS_SIMULATE_RECORD_DECL\n+#define LANG_HOOKS_SIMULATE_RECORD_DECL cxx_simulate_record_decl\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE"}, {"sha": "7c2a134e40614e43da8ea4e83cfcac8280369f8f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"omp-general.h\"\n #include \"omp-offload.h\"  /* For offload_vars.  */\n #include \"opts.h\"\n+#include \"langhooks-def.h\"  /* For lhd_simulate_record_decl  */\n \n /* Possible cases of bad specifiers type used by bad_specifiers. */\n enum bad_spec_place {\n@@ -16602,6 +16603,42 @@ cxx_simulate_enum_decl (location_t loc, const char *name,\n   input_location = saved_loc;\n   return enumtype;\n }\n+\n+/* Implement LANG_HOOKS_SIMULATE_RECORD_DECL.  */\n+\n+tree\n+cxx_simulate_record_decl (location_t loc, const char *name,\n+\t\t\t  array_slice<const tree> fields)\n+{\n+  iloc_sentinel ils (loc);\n+\n+  tree ident = get_identifier (name);\n+  tree type = xref_tag (/*tag_code=*/record_type, ident);\n+  if (type != error_mark_node\n+      && (TREE_CODE (type) != RECORD_TYPE || COMPLETE_TYPE_P (type)))\n+    {\n+      error (\"redefinition of %q#T\", type);\n+      type = error_mark_node;\n+    }\n+  if (type == error_mark_node)\n+    return lhd_simulate_record_decl (loc, name, fields);\n+\n+  xref_basetypes (type, NULL_TREE);\n+  type = begin_class_definition (type);\n+  if (type == error_mark_node)\n+    return lhd_simulate_record_decl (loc, name, fields);\n+\n+  for (tree field : fields)\n+    finish_member_declaration (field);\n+\n+  type = finish_struct (type, NULL_TREE);\n+\n+  tree decl = build_decl (loc, TYPE_DECL, ident, type);\n+  set_underlying_type (decl);\n+  lang_hooks.decls.pushdecl (decl);\n+\n+  return type;\n+}\n \f\n /* We're defining DECL.  Make sure that its type is OK.  */\n "}, {"sha": "5f17620aaeb4928c036d256b13da07285c4c6379", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -56,6 +56,8 @@ extern void lhd_overwrite_decl_assembler_name (tree decl, tree name);\n extern bool lhd_warn_unused_global_decl (const_tree);\n extern tree lhd_simulate_enum_decl (location_t, const char *,\n \t\t\t\t    vec<string_int_pair> *);\n+extern tree lhd_simulate_record_decl (location_t, const char *,\n+\t\t\t\t      array_slice<const tree>);\n extern tree lhd_type_for_size (unsigned precision, int unsignedp);\n extern void lhd_incomplete_type_error (location_t, const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);\n@@ -183,6 +185,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n \n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n #define LANG_HOOKS_SIMULATE_ENUM_DECL\tlhd_simulate_enum_decl\n+#define LANG_HOOKS_SIMULATE_RECORD_DECL\tlhd_simulate_record_decl\n #define LANG_HOOKS_CLASSIFY_RECORD\tNULL\n #define LANG_HOOKS_TYPE_FOR_SIZE\tlhd_type_for_size\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n@@ -217,6 +220,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n   LANG_HOOKS_SIMULATE_ENUM_DECL, \\\n+  LANG_HOOKS_SIMULATE_RECORD_DECL, \\\n   LANG_HOOKS_CLASSIFY_RECORD, \\\n   LANG_HOOKS_TYPE_FOR_MODE, \\\n   LANG_HOOKS_TYPE_FOR_SIZE, \\"}, {"sha": "49613b42077eae4ee9b71029746651e427aeb835", "filename": "gcc/langhooks.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -516,6 +516,25 @@ lhd_simulate_enum_decl (location_t loc, const char *name,\n   return enumtype;\n }\n \n+/* Default implementation of LANG_HOOKS_SIMULATE_RECORD_DECL.\n+   Just create a normal RECORD_TYPE and a TYPE_DECL for it.  */\n+tree\n+lhd_simulate_record_decl (location_t loc, const char *name,\n+\t\t\t  array_slice<const tree> fields)\n+{\n+  for (unsigned int i = 1; i < fields.size (); ++i)\n+    /* Reversed by finish_builtin_struct.  */\n+    DECL_CHAIN (fields[i]) = fields[i - 1];\n+\n+  tree type = lang_hooks.types.make_type (RECORD_TYPE);\n+  finish_builtin_struct (type, name, fields.back (), NULL_TREE);\n+\n+  tree decl = build_decl (loc, TYPE_DECL, get_identifier (name), type);\n+  lang_hooks.decls.pushdecl (decl);\n+\n+  return type;\n+}\n+\n /* Default implementation of LANG_HOOKS_TYPE_FOR_SIZE.\n    Return an integer type with PRECISION bits of precision,\n    that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */"}, {"sha": "3e89134e8b436e1cb76bef982148102e05417bdb", "filename": "gcc/langhooks.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c6604f42034e36b149f899c5ddb93025a645b4/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=d5c6604f42034e36b149f899c5ddb93025a645b4", "patch": "@@ -68,6 +68,16 @@ struct lang_hooks_for_types\n      them all with the given source location.  */\n   tree (*simulate_enum_decl) (location_t, const char *, vec<string_int_pair> *);\n \n+  /* Do the equivalent of:\n+\n+       typedef struct NAME { FIELDS; } NAME;\n+\n+     associating it with location LOC.  Return the associated RECORD_TYPE.\n+\n+     FIELDS is a list of FIELD_DECLs, in layout order.  */\n+  tree (*simulate_record_decl) (location_t loc, const char *name,\n+\t\t\t\tarray_slice<const tree> fields);\n+\n   /* Return what kind of RECORD_TYPE this is, mainly for purposes of\n      debug information.  If not defined, record types are assumed to\n      be structures.  */"}]}