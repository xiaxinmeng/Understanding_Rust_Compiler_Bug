{"sha": "96df4529dc098109a5616d81feedade2f7b3922f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkZjQ1MjlkYzA5ODEwOWE1NjE2ZDgxZmVlZGFkZTJmN2IzOTIyZg==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "1999-09-16T19:27:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-16T19:27:01Z"}, "message": "ggc.h (ggc_root): Move to ggc-common.c.\n\nThu Sep 16 11:50:52 1999  Alex Samuel  <samuel@codesourcery.com>\n\n        * ggc.h (ggc_root): Move to ggc-common.c.\n        (roots): Remove.\n        (ggc_mark_rtx, ggc_mark_tree): Change to macro.\n        (ggc_mark_rtvec, ggc_mark_tree_varray): Declare extern.\n        (ggc_mark_tree_hash_table, ggc_mark_string, ggc_mark): Likewise.\n        (ggc_mark_roots, ggc_mark_rtx_children, ggc_mark_tree_children): New.\n        * ggc-common.c (ggc_root): Move from ggc.h.\n        (roots): Declare, static.\n        (ggc_mark_rtx, ggc_mark_tree): Renamed to...\n        (ggc_mark_rtx_children, ggc_mark_tree_children): Don't check for\n        null or check/set mark bit.\n        (ggc_mark_roots): New.\n        * ggc-simple.c (ggc_collect): Call ggc_mark_roots.\n\nFrom-SVN: r29461", "tree": {"sha": "a90b0ac22fb144d290710b57483c4c68cf242b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a90b0ac22fb144d290710b57483c4c68cf242b07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96df4529dc098109a5616d81feedade2f7b3922f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96df4529dc098109a5616d81feedade2f7b3922f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96df4529dc098109a5616d81feedade2f7b3922f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96df4529dc098109a5616d81feedade2f7b3922f/comments", "author": null, "committer": null, "parents": [{"sha": "2a6ec461e1904dc900350bc530768308cd339c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6ec461e1904dc900350bc530768308cd339c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6ec461e1904dc900350bc530768308cd339c8e"}], "stats": {"total": 118, "additions": 73, "deletions": 45}, "files": [{"sha": "1e19202dabcb2fb625b7c7d65fecbb5a0fd1dc6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96df4529dc098109a5616d81feedade2f7b3922f", "patch": "@@ -1,3 +1,19 @@\n+Thu Sep 16 11:50:52 1999  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* ggc.h (ggc_root): Move to ggc-common.c.\n+\t(roots): Remove.\n+\t(ggc_mark_rtx, ggc_mark_tree): Change to macro.\n+\t(ggc_mark_rtvec, ggc_mark_tree_varray): Declare extern.\n+\t(ggc_mark_tree_hash_table, ggc_mark_string, ggc_mark): Likewise.\n+\t(ggc_mark_roots, ggc_mark_rtx_children, ggc_mark_tree_children): New.\n+\t* ggc-common.c (ggc_root): Move from ggc.h.\n+\t(roots): Declare, static.\n+\t(ggc_mark_rtx, ggc_mark_tree): Renamed to...\n+\t(ggc_mark_rtx_children, ggc_mark_tree_children): Don't check for\n+\tnull or check/set mark bit.\n+\t(ggc_mark_roots): New.\n+\t* ggc-simple.c (ggc_collect): Call ggc_mark_roots.\n+\n Thu Sep 16 11:37:32 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* m32r.c: Include toplev.h.\n@@ -364,8 +380,8 @@ Tue Sep 14 04:01:46 1999  Loren Rittle  <ljrittle@acm.org>\n \n Tue Sep 14 03:58:44 1999  Andreas Jaeger  <aj@arthur.rhein-neckar.de>\n \n-        * configure.in: Add crtbeginS.o, crtendS.o for mips-linux; add \n-        thread support.\n+\t* configure.in: Add crtbeginS.o, crtendS.o for mips-linux; add \n+\tthread support.\n \t* configure: Rebuilt.\n \n Tue Sep 14 03:47:23 1999  Joel Sherrill <joel@OARcorp.com>"}, {"sha": "319623b0c7761b0df7b8d2683d0153de9f92e711", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=96df4529dc098109a5616d81feedade2f7b3922f", "patch": "@@ -32,7 +32,18 @@\n \n /* Maintain global roots that are preserved during GC.  */\n \n-struct ggc_root *roots;\n+/* Global roots that are preserved during calls to gc.  */\n+\n+struct ggc_root\n+{\n+  struct ggc_root *next;\n+  void *base;\n+  int nelt;\n+  int size;\n+  void (*cb) PROTO ((void *));\n+};\n+\n+static struct ggc_root *roots;\n \n /* Type-correct function to pass to ggc_add_root.  It just forwards\n    *ELT (which is an rtx) to ggc_mark_tree_varray.  */\n@@ -170,15 +181,29 @@ ggc_del_root (base)\n }\n \n void\n-ggc_mark_rtx (r)\n+ggc_mark_roots ()\n+{\n+  struct ggc_root* x;\n+  \n+  for (x = roots; x != NULL; x = x->next)\n+    {\n+      char *elt = x->base;\n+      int s = x->size, n = x->nelt;\n+      void (*cb) PROTO ((void *)) = x->cb;\n+      int i;\n+\n+      for (i = 0; i < n; ++i, elt += s)\n+\t(*cb)(elt);\n+    }\n+}\n+\n+void\n+ggc_mark_rtx_children (r)\n      rtx r;\n {\n   const char *fmt;\n   int i;\n \n-  if (r == NULL_RTX || ggc_set_mark_rtx (r))\n-    return;\n-\n   /* ??? If (some of) these are really pass-dependant info, do we have\n      any right poking our noses in?  */\n   switch (GET_CODE (r))\n@@ -256,13 +281,9 @@ ggc_mark_rtvec (v)\n }\n \n void\n-ggc_mark_tree (t)\n+ggc_mark_tree_children (t)\n      tree t;\n {\n-  /* FIXME what if t == NULL_TREE ? */\n-  if (t == NULL || ggc_set_mark_tree (t))\n-    return;\n-\n   /* Bits from common.  */\n   ggc_mark_tree (TREE_TYPE (t));\n   ggc_mark_tree (TREE_CHAIN (t));"}, {"sha": "3eeb8c38378e01c7200299db1a468daa374d7a13", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=96df4529dc098109a5616d81feedade2f7b3922f", "patch": "@@ -490,7 +490,6 @@ ggc_collect ()\n   struct ggc_rtvec *v, **vp;\n   struct ggc_tree *t, **tp;\n   struct ggc_string *s, **sp;\n-  struct ggc_root *x;\n   struct ggc_status *gs;\n   struct ggc_any *a, **ap;\n   int time, n_rtxs, n_trees, n_vecs, n_strings, n_anys;\n@@ -521,17 +520,7 @@ ggc_collect ()\n \ta->magic_mark = GGC_ANY_MAGIC;\n     }\n \n-  /* Mark through all the roots.  */\n-  for (x = roots; x != NULL; x = x->next)\n-    {\n-      char *elt = x->base;\n-      int s = x->size, n = x->nelt;\n-      void (*cb) PROTO ((void *)) = x->cb;\n-      int i;\n-\n-      for (i = 0; i < n; ++i, elt += s)\n-\t(*cb)(elt);\n-    }\n+  ggc_mark_roots ();\n \n   /* Sweep the resulting dead nodes.  */\n "}, {"sha": "de43e9e8ab5436bfd12499de0e9ed41a14df1442", "filename": "gcc/ggc.h", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96df4529dc098109a5616d81feedade2f7b3922f/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=96df4529dc098109a5616d81feedade2f7b3922f", "patch": "@@ -42,19 +42,6 @@ union  tree_node;\n struct varasm_status;\n struct varray_head_tag;\n \n-/* Global roots that are preserved during calls to gc.  */\n-\n-struct ggc_root\n-{\n-  struct ggc_root *next;\n-  void *base;\n-  int nelt;\n-  int size;\n-  void (*cb) PROTO ((void *));\n-};\n-\n-extern struct ggc_root *roots;\n-\n /* Manipulate global roots that are needed between calls to gc.  */\n void ggc_add_root PROTO ((void *base, int nelt, int size, void (*)(void *)));\n void ggc_add_rtx_root PROTO ((struct rtx_def **, int nelt));\n@@ -66,14 +53,29 @@ void ggc_del_root PROTO ((void *base));\n \n /* Mark nodes from the gc_add_root callback.  These functions follow\n    pointers to mark other objects too.  */\n-void ggc_mark_rtx PROTO ((struct rtx_def *));\n-void ggc_mark_rtvec PROTO ((struct rtvec_def *));\n-void ggc_mark_tree PROTO ((union tree_node *));\n-void ggc_mark_tree_varray PROTO ((struct varray_head_tag *));\n-void ggc_mark_tree_hash_table PROTO ((struct hash_table *));\n-void ggc_mark_string PROTO ((char *));\n-void ggc_mark PROTO ((void *));\n-\n+extern void ggc_mark_rtvec PROTO ((struct rtvec_def *));\n+extern void ggc_mark_tree_varray PROTO ((struct varray_head_tag *));\n+extern void ggc_mark_tree_hash_table PROTO ((struct hash_table *));\n+extern void ggc_mark_string PROTO ((char *));\n+extern void ggc_mark PROTO ((void *));\n+extern void ggc_mark_roots PROTO((void));\n+\n+extern void ggc_mark_rtx_children PROTO ((struct rtx_def *));\n+extern void ggc_mark_tree_children PROTO ((union tree_node *));\n+\n+#define ggc_mark_rtx(RTX_EXPR)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    rtx r__ = (RTX_EXPR);\t\t\t\t\\\n+    if (r__ != NULL && ! ggc_set_mark_rtx (r__))\t\\\n+      ggc_mark_rtx_children (r__);\t\t\t\\\n+  } while (0)\n+\n+#define ggc_mark_tree(TREE_EXPR)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    tree t__ = (TREE_EXPR);\t\t\t\t\\\n+    if (t__ != NULL && ! ggc_set_mark_tree (t__))\t\\\n+      ggc_mark_tree_children (t__);\t\t\t\\\n+  } while (0)\n \n /* A GC implementation must provide these functions.  */\n "}]}