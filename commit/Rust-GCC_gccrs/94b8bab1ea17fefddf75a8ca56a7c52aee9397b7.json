{"sha": "94b8bab1ea17fefddf75a8ca56a7c52aee9397b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRiOGJhYjFlYTE3ZmVmZGRmNzVhOGNhNTZhN2M1MmFlZTkzOTdiNw==", "commit": {"author": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-12-31T20:16:08Z"}, "committer": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-12-31T20:16:08Z"}, "message": "Deleted index variable stuff.  Index variables are a hack to the language.\n\nCleaned up some documentation.\n\nFrom-SVN: r149", "tree": {"sha": "af4d37451af566f9083e3b01dcbad8b01de4db9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4d37451af566f9083e3b01dcbad8b01de4db9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94b8bab1ea17fefddf75a8ca56a7c52aee9397b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b8bab1ea17fefddf75a8ca56a7c52aee9397b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94b8bab1ea17fefddf75a8ca56a7c52aee9397b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b8bab1ea17fefddf75a8ca56a7c52aee9397b7/comments", "author": null, "committer": null, "parents": [{"sha": "77c9c6c2030065092bcf848d2042032fe463daa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c9c6c2030065092bcf848d2042032fe463daa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c9c6c2030065092bcf848d2042032fe463daa5"}], "stats": {"total": 142, "additions": 65, "deletions": 77}, "files": [{"sha": "7628679407fb703d6c66ec50fc365dfd784ab3af", "filename": "gcc/objc/objc.h", "status": "modified", "additions": 65, "deletions": 77, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94b8bab1ea17fefddf75a8ca56a7c52aee9397b7/gcc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94b8bab1ea17fefddf75a8ca56a7c52aee9397b7/gcc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc.h?ref=94b8bab1ea17fefddf75a8ca56a7c52aee9397b7", "patch": "@@ -19,10 +19,13 @@\n  * along with this program; if not, write to the Free Software\n  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n  * \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/include/RCS/ObjC.h,v 0.8 1991/12/01 01:29:29 dennisg Exp dennisg $\n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/include/RCS/ObjC.h,v 0.9 1991/12/10 12:04:22 dennisg Exp dennisg $\n   $Author: dennisg $\n-  $Date: 1991/12/01 01:29:29 $\n+  $Date: 1991/12/10 12:04:22 $\n   $Log: ObjC.h,v $\n+ * Revision 0.9  1991/12/10  12:04:22  dennisg\n+ * Cleaned up file format for a distribution.\n+ *\n  * Revision 0.8  1991/12/01  01:29:29  dennisg\n  * modified to remove changes previously made to\n  * implement posing.  posing just got easy.\n@@ -134,10 +137,9 @@ typedef id  ( *IMP )( id, SEL, ... );\n #define _C_STRUCT_B '{'\n #define _C_STRUCT_E '}'\n \n-/* \n- * These definitions are masks used with \n- *  the \"info\" member variable in the class and \n- *  meta class structures. \n+/*\n+ * These definitions are masks used with the \"info\" member variable in the\n+ * class and meta class structures. \n  */\n #define CLS_CLASS         0x1L                  /* The structure is of type\n                                                   class (Class_t). */\n@@ -156,13 +158,13 @@ typedef id  ( *IMP )( id, SEL, ... );\n   extern BOOL objc_trace;\n \n \n-/* \n- * Whereas a Module (defined further down) is the \n- *  root (typically) of a file, a Symtab is the root of the \n- *  class and category definitions within the module.  \n+/*\n+ * Whereas a Module (defined further down) is the root (typically) of a file,\n+ * a Symtab is the root of the class and category definitions within the\n+ * module.  \n  *\n- * A Symtab contains a variable length array of pointers\n- *  to classes and categories  defined in the module. \n+ * A Symtab contains a variable length array of pointers to classes and\n+ * categories  defined in the module. \n  */\n typedef struct objc_symtab {\n   u_long    sel_ref_cnt;                        /* Unknown. */\n@@ -179,16 +181,14 @@ typedef struct objc_symtab {\n } Symtab,   *Symtab_t;\n \n \n-/* \n- * The compiler generates one of these structures for each\n- *  module that composes the executable (eg main.m).  \n+/*\n+ * The compiler generates one of these structures for each module that\n+ * composes the executable (eg main.m).  \n  *\n- * This data structure is the root of the definition tree\n- *  for the module.  \n+ * This data structure is the root of the definition tree for the module.  \n  *\n- * A collect program runs between ld stages and creates \n- *  a ObjC ctor array.  That array holds a pointer to each\n- *  module structure of the executable. \n+ * A collect program runs between ld stages and creates a ObjC ctor array. \n+ * That array holds a pointer to each module structure of the executable. \n  */\n typedef struct objc_module {\n   u_long      version;                          /* Compiler revision. */\n@@ -204,10 +204,9 @@ typedef struct objc_module {\n } Module, *Module_t;\n \n \n-/* \n- * The compiler generates one of these structures for a \n- *  class that has instance variables defined in its \n- *  specification. \n+/*\n+ * The compiler generates one of these structures for a class that has\n+ * instance variables defined in its specification. \n  */\n typedef struct objc_ivar* Ivar_t;\n typedef struct objc_ivar_list {\n@@ -232,13 +231,13 @@ typedef struct objc_ivar_list {\n } IvarList, *IvarList_t;\n \n \n-/* \n- * The compiler generates one (or more) of these structures \n- *  for a class that has methods defined in its specification. \n+/*\n+ * The compiler generates one (or more) of these structures for a class that\n+ * has methods defined in its specification. \n  *\n- * The implementation of a class can be broken into separate \n- *  pieces in a file and categories can break them across modules.\n- *  To handle this problem is a singly linked list of methods.\n+ * The implementation of a class can be broken into separate pieces in a file\n+ * and categories can break them across modules. To handle this problem is a\n+ * singly linked list of methods. \n  */\n typedef struct objc_method Method;\n typedef Method* Method_t;\n@@ -266,20 +265,16 @@ typedef struct objc_method_list {\n \n \n /*\n- * The compiler generates one of these structures for \n- *  each class.  \n+ * The compiler generates one of these structures for each class.  \n+ *\n+ * This structure is the definition for meta classes. By definition a meta\n+ * class is the class's class.  Its most relevant contribution is that its\n+ * method list contain the class's factory methods. \n  *\n- * This structure is the definition for meta classes.\n- *  By definition a meta class is the class's class.  Its \n- *  most relevant contribution is that its method list\n- *  contain the class's factory methods.\n- *  \n- * This structure is generated by the compiler in the\n- *  executable and used by the run-time during normal\n- *  messaging operations.  Therefore some members \n- *  change type.\n- * The compiler generates \"char* const\" and places a string\n- *  in the following member variables:  isa and super_class.\n+ * This structure is generated by the compiler in the executable and used by\n+ * the run-time during normal messaging operations.  Therefore some members\n+ * change type. The compiler generates \"char* const\" and places a string in\n+ * the following member variables:  isa and super_class. \n  */\n typedef struct objc_metaClass {     \n   struct objc_metaClass*  isa;                /* Pointer to Object meta\n@@ -306,17 +301,14 @@ typedef struct objc_metaClass {\n \n \n /*\n- * The compiler generates one of these structures for \n- *  each class.  \n+ * The compiler generates one of these structures for each class.  \n  *\n- * This structure is the definition for classes.\n- *  \n- * This structure is generated by the compiler in the\n- *  executable and used by the run-time during normal\n- *  messaging operations.  Therefore some members \n- *  change type.\n- * The compiler generates \"char* const\" and places a string\n- *  in the following member variables:  super_class.\n+ * This structure is the definition for classes. \n+ *\n+ * This structure is generated by the compiler in the executable and used by\n+ * the run-time during normal messaging operations.  Therefore some members\n+ * change type. The compiler generates \"char* const\" and places a string in\n+ * the following member variables:  super_class. \n  */\n typedef struct objc_class {     \n   MetaClass_t         isa;                    /* Pointer to the class's\n@@ -351,10 +343,8 @@ typedef struct objc_class {\n \n \n /*\n- * The compiler generates one of these structures \n- *  for each category.  A class may have many \n- *  categories and contain both instance and \n- *  factory methods.  \n+ * The compiler generates one of these structures for each category.  A class\n+ * may have many categories and contain both instance and factory methods.  \n  */\n typedef struct objc_category {\n   const char*   category_name;                /* Name of the category.  Name\n@@ -373,10 +363,10 @@ typedef struct objc_category {\n } Category, *Category_t;\n \n \n-/* \n- * Structure used when a message is send to a class's\n- *  super class.  The compiler generates one of these\n- *  structures and passes it to objc_msgSuper(). \n+/*\n+ * Structure used when a message is send to a class's super class.  The\n+ * compiler generates one of these structures and passes it to\n+ * objc_msgSuper(). \n  */\n typedef struct objc_super {\n   id      receiver;                           /* Id of the object sending\n@@ -385,33 +375,31 @@ typedef struct objc_super {\n } Super, *Super_t;\n \n /*\n- * _alloc points to the function, called through \n- *  class_createInstance(), used to allocate memory for \n- *  new instances.\n+ * _alloc points to the function, called through class_createInstance(), used\n+ * to allocate memory for new instances. \n  */\n-extern id (*_alloc)(Class_t aClass, u_int indexedIvarBytes);\n+extern id (*_alloc)(Class_t aClass);\n /*\n- * _dealloc points to the function, called \n- *  through object_dispose(), used to free instances.\n+ * _dealloc points to the function, called through object_dispose(), used to\n+ * free instances. \n  */\n extern id (*_dealloc)(id aObject);\n /*\n- * _realloc points to the function, called through \n- *  object_realloc(), used to reallocate memory for an object\n+ * _realloc points to the function, called through object_realloc(), used to\n+ * reallocate memory for an object \n  */\n-extern id (*_realloc)(id aObject, u_int numBytes);\n+extern id (*_realloc)(id aObject, u_int newSize);\n \n /*\n- * _copy points to the function, called through \n- *  object_copy(), used to create an exact copy of an object.\n+ * _copy points to the function, called through object_copy(), used to create\n+ * an exact copy of an object. \n  */\n-extern  id (*_copy)(id aObject, u_int indexedIvarBytes);\n+extern  id (*_copy)(id aObject);\n \n /*\n- * _error points to the function that the run-time \n- *  system calls in response to an error.  By default, \n- *  it prints formatted error messages to the standard \n- *  error stream and calls abort() to produce a core file.\n+ * _error points to the function that the run-time system calls in response\n+ * to an error.  By default, it prints formatted error messages to the\n+ * standard error stream and calls abort() to produce a core file. \n  */\n extern void (*_error)(id aObject, const char* fmt, va_list ap);\n "}]}