{"sha": "1fa754dc7b2672b011c955e51fd9986d95a56742", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZhNzU0ZGM3YjI2NzJiMDExYzk1NWU1MWZkOTk4NmQ5NWE1Njc0Mg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T19:34:21Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T19:34:21Z"}, "message": "[ARM/AArch64 Testsuite] Add float16 tests to advsimd-intrinsics testsuite\n\n\t* gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp:\n\tSet additional_flags for neon-fp16 if supported, else fallback to neon.\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n\t(hfloat16_t): New.\n\t(result, expected, clean_results, DECL_VARIABLE_64BITS_VARIANTS,\n\tDECL_VARIABLE_128BITS_VARIANTS): Add float16x4_t and float16x8_t cases\n\tif supported.\n\t(CHECK_RESULTS): Redefine using CHECK_RESULTS_NAMED.\n\t(CHECK_RESULTS_NAMED): Move body to CHECK_RESULTS_NAMED_NO_FP16;\n\tredefine in terms of CHECK_RESULTS_NAMED_NO_FP16 with float16 variants\n\twhen those are supported.\n\t(CHECK_RESULTS_NAMED_NO_FP16, CHECK_RESULTS_NO_FP16): New.\n\t(vdup_n_f16): New.\n\n\t* gcc.target/aarch64/advsimd-intrinsics/compute-ref-data.h (buffer,\n\tbuffer_pad, buffer_dup, buffer_dup_pad): Add float16x4 and float16x8_t\n\tcases if supported.\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vbsl.c (exec_vbsl):\n\tUse CHECK_RESULTS_NO_FP16 in place of CHECK_RESULTS.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdup-vmov.c (exec_vdup_vmov):\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c (exec_vdup_lane):\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vext.c (exec_vext): Likewise.\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vcombine.c (expected):\n\tAdd float16x8_t case.\n\t(main, exec_vcombine): test float16x4_t -> float16x8_t, if supported.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcreate.c (expected,\n\tmain, exec_vcreate): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_high (expected,\n\t exec_vget_high): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_low.c (expected,\n\texec_vget_low): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld1.c (expected, exec_vld1):\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld1_dup.c (expected,\n\texec_vld1_dup): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld1_lane.c (expected,\n\texec_vld1_lane): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c (expected, exec_vldX):\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c (expected,\n\texec_vldX_dup): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c (expected,\n\texec_vldX_lane): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vset_lane.c (expected,\n\texec_vset_lane): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst1_lane.c (expected,\n\t exec_vst1_lane): Likewise.\n\nFrom-SVN: r227554", "tree": {"sha": "2899193e0b238241291e51cfad9c816173dcc479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2899193e0b238241291e51cfad9c816173dcc479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fa754dc7b2672b011c955e51fd9986d95a56742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa754dc7b2672b011c955e51fd9986d95a56742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa754dc7b2672b011c955e51fd9986d95a56742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa754dc7b2672b011c955e51fd9986d95a56742/comments", "author": null, "committer": null, "parents": [{"sha": "979734578a6c2a11dce55c3c583c051b13b45ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979734578a6c2a11dce55c3c583c051b13b45ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979734578a6c2a11dce55c3c583c051b13b45ffc"}], "stats": {"total": 571, "additions": 509, "deletions": 62}, "files": [{"sha": "0ec65f1752a3ca7494e74cd4f55df5d899de5cd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -1,3 +1,58 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp:\n+\tSet additional_flags for neon-fp16 if supported, else fallback to neon.\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n+\t(hfloat16_t): New.\n+\t(result, expected, clean_results, DECL_VARIABLE_64BITS_VARIANTS,\n+\tDECL_VARIABLE_128BITS_VARIANTS): Add float16x4_t and float16x8_t cases\n+\tif supported.\n+\t(CHECK_RESULTS): Redefine using CHECK_RESULTS_NAMED.\n+\t(CHECK_RESULTS_NAMED): Move body to CHECK_RESULTS_NAMED_NO_FP16;\n+\tredefine in terms of CHECK_RESULTS_NAMED_NO_FP16 with float16 variants\n+\twhen those are supported.\n+\t(CHECK_RESULTS_NAMED_NO_FP16, CHECK_RESULTS_NO_FP16): New.\n+\t(vdup_n_f16): New.\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/compute-ref-data.h (buffer,\n+\tbuffer_pad, buffer_dup, buffer_dup_pad): Add float16x4 and float16x8_t\n+\tcases if supported.\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vbsl.c (exec_vbsl):\n+\tUse CHECK_RESULTS_NO_FP16 in place of CHECK_RESULTS.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdup-vmov.c (exec_vdup_vmov):\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c (exec_vdup_lane):\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vext.c (exec_vext): Likewise.\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcombine.c (expected):\n+\tAdd float16x8_t case.\n+\t(main, exec_vcombine): test float16x4_t -> float16x8_t, if supported.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcreate.c (expected,\n+\tmain, exec_vcreate): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_high (expected,\n+\texec_vget_high): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_low.c (expected,\n+\texec_vget_low): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1.c (expected, exec_vld1):\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1_dup.c (expected,\n+\texec_vld1_dup): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1_lane.c (expected,\n+\texec_vld1_lane): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c (expected, exec_vldX):\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c (expected,\n+\texec_vldX_dup): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c (expected,\n+\texec_vldX_lane): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vset_lane.c (expected,\n+\texec_vset_lane): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst1_lane.c (expected,\n+\texec_vst1_lane): Likewise.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/vget_high_1.c: Add float16x8->float16x4 case."}, {"sha": "462696315e05ea220dff60c1a605160ae2b59a1c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fadvsimd-intrinsics.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fadvsimd-intrinsics.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fadvsimd-intrinsics.exp?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -52,8 +52,12 @@ if {[istarget arm*-*-*]} then {\n torture-init\n set-torture-options $C_TORTURE_OPTIONS {{}} $LTO_TORTURE_OPTIONS\n \n-# Make sure Neon flags are provided, if necessary.\n-set additional_flags [add_options_for_arm_neon \"\"]\n+# Make sure Neon flags are provided, if necessary.  Use fp16 if we can.\n+if {[check_effective_target_arm_neon_fp16_ok]} then {\n+  set additional_flags [add_options_for_arm_neon_fp16 \"\"]\n+} else {\n+  set additional_flags [add_options_for_arm_neon \"\"]\n+}\n \n # Main loop.\n gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c]] \\"}, {"sha": "49fbd843e507ede8aa81d02c175a82a1221750a4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 63, "deletions": 30, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -7,6 +7,7 @@\n #include <inttypes.h>\n \n /* helper type, to help write floating point results in integer form.  */\n+typedef uint16_t hfloat16_t;\n typedef uint32_t hfloat32_t;\n typedef uint64_t hfloat64_t;\n \n@@ -132,6 +133,9 @@ static ARRAY(result, uint, 32, 2);\n static ARRAY(result, uint, 64, 1);\n static ARRAY(result, poly, 8, 8);\n static ARRAY(result, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+static ARRAY(result, float, 16, 4);\n+#endif\n static ARRAY(result, float, 32, 2);\n static ARRAY(result, int, 8, 16);\n static ARRAY(result, int, 16, 8);\n@@ -143,6 +147,9 @@ static ARRAY(result, uint, 32, 4);\n static ARRAY(result, uint, 64, 2);\n static ARRAY(result, poly, 8, 16);\n static ARRAY(result, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+static ARRAY(result, float, 16, 8);\n+#endif\n static ARRAY(result, float, 32, 4);\n #ifdef __aarch64__\n static ARRAY(result, float, 64, 2);\n@@ -160,6 +167,7 @@ extern ARRAY(expected, uint, 32, 2);\n extern ARRAY(expected, uint, 64, 1);\n extern ARRAY(expected, poly, 8, 8);\n extern ARRAY(expected, poly, 16, 4);\n+extern ARRAY(expected, hfloat, 16, 4);\n extern ARRAY(expected, hfloat, 32, 2);\n extern ARRAY(expected, int, 8, 16);\n extern ARRAY(expected, int, 16, 8);\n@@ -171,38 +179,11 @@ extern ARRAY(expected, uint, 32, 4);\n extern ARRAY(expected, uint, 64, 2);\n extern ARRAY(expected, poly, 8, 16);\n extern ARRAY(expected, poly, 16, 8);\n+extern ARRAY(expected, hfloat, 16, 8);\n extern ARRAY(expected, hfloat, 32, 4);\n extern ARRAY(expected, hfloat, 64, 2);\n \n-/* Check results. Operates on all possible vector types.  */\n-#define CHECK_RESULTS(test_name,comment)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    CHECK(test_name, int, 8, 8, PRIx8, expected, comment);\t\t\\\n-    CHECK(test_name, int, 16, 4, PRIx16, expected, comment);\t\t\\\n-    CHECK(test_name, int, 32, 2, PRIx32, expected, comment);\t\t\\\n-    CHECK(test_name, int, 64, 1, PRIx64, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 8, 8, PRIx8, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 16, 4, PRIx16, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 32, 2, PRIx32, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 64, 1, PRIx64, expected, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 8, PRIx8, expected, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 4, PRIx16, expected, comment);\t\t\\\n-    CHECK_FP(test_name, float, 32, 2, PRIx32, expected, comment);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    CHECK(test_name, int, 8, 16, PRIx8, expected, comment);\t\t\\\n-    CHECK(test_name, int, 16, 8, PRIx16, expected, comment);\t\t\\\n-    CHECK(test_name, int, 32, 4, PRIx32, expected, comment);\t\t\\\n-    CHECK(test_name, int, 64, 2, PRIx64, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 8, 16, PRIx8, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 16, 8, PRIx16, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 32, 4, PRIx32, expected, comment);\t\t\\\n-    CHECK(test_name, uint, 64, 2, PRIx64, expected, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 16, PRIx8, expected, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 8, PRIx16, expected, comment);\t\t\\\n-    CHECK_FP(test_name, float, 32, 4, PRIx32, expected, comment);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\n-#define CHECK_RESULTS_NAMED(test_name,EXPECTED,comment)\t\t\t\\\n+#define CHECK_RESULTS_NAMED_NO_FP16(test_name,EXPECTED,comment)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     CHECK(test_name, int, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n@@ -229,6 +210,24 @@ extern ARRAY(expected, hfloat, 64, 2);\n     CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment);\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \n+/* Check results against EXPECTED.  Operates on all possible vector types.  */\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define CHECK_RESULTS_NAMED(test_name,EXPECTED,comment)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    CHECK_RESULTS_NAMED_NO_FP16(test_name, EXPECTED, comment)\t\t\\\n+    CHECK_FP(test_name, float, 16, 4, PRIx16, EXPECTED, comment);\t\\\n+    CHECK_FP(test_name, float, 16, 8, PRIx16, EXPECTED, comment);\t\\\n+  }\n+#else\n+#define CHECK_RESULTS_NAMED(test_name,EXPECTED,comment)\t\t\\\n+  CHECK_RESULTS_NAMED_NO_FP16(test_name, EXPECTED, comment)\n+#endif\n+\n+#define CHECK_RESULTS_NO_FP16(test_name,comment)\t\t\t\\\n+  CHECK_RESULTS_NAMED_NO_FP16(test_name, expected, comment)\n+\n+#define CHECK_RESULTS(test_name,comment)\t\t\\\n+  CHECK_RESULTS_NAMED(test_name, expected, comment)\n \n \n #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n@@ -380,6 +379,9 @@ static void clean_results (void)\n   CLEAN(result, uint, 64, 1);\n   CLEAN(result, poly, 8, 8);\n   CLEAN(result, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CLEAN(result, float, 16, 4);\n+#endif\n   CLEAN(result, float, 32, 2);\n \n   CLEAN(result, int, 8, 16);\n@@ -392,6 +394,9 @@ static void clean_results (void)\n   CLEAN(result, uint, 64, 2);\n   CLEAN(result, poly, 8, 16);\n   CLEAN(result, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CLEAN(result, float, 16, 8);\n+#endif\n   CLEAN(result, float, 32, 4);\n \n #if defined(__aarch64__)\n@@ -443,21 +448,40 @@ static void clean_results (void)\n   DECL_VARIABLE(VAR, uint, 64, 2)\n \n /* Declare all 64 bits variants.  */\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define DECL_VARIABLE_64BITS_VARIANTS(VAR)\t\\\n+  DECL_VARIABLE_64BITS_SIGNED_VARIANTS(VAR);\t\\\n+  DECL_VARIABLE_64BITS_UNSIGNED_VARIANTS(VAR);\t\\\n+  DECL_VARIABLE(VAR, poly, 8, 8);\t\t\\\n+  DECL_VARIABLE(VAR, poly, 16, 4);\t\t\\\n+  DECL_VARIABLE(VAR, float, 16, 4);\t\t\\\n+  DECL_VARIABLE(VAR, float, 32, 2)\n+#else\n #define DECL_VARIABLE_64BITS_VARIANTS(VAR)\t\\\n   DECL_VARIABLE_64BITS_SIGNED_VARIANTS(VAR);\t\\\n   DECL_VARIABLE_64BITS_UNSIGNED_VARIANTS(VAR);\t\\\n   DECL_VARIABLE(VAR, poly, 8, 8);\t\t\\\n   DECL_VARIABLE(VAR, poly, 16, 4);\t\t\\\n   DECL_VARIABLE(VAR, float, 32, 2)\n+#endif\n \n /* Declare all 128 bits variants.  */\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n #define DECL_VARIABLE_128BITS_VARIANTS(VAR)\t\\\n   DECL_VARIABLE_128BITS_SIGNED_VARIANTS(VAR);\t\\\n   DECL_VARIABLE_128BITS_UNSIGNED_VARIANTS(VAR);\t\\\n   DECL_VARIABLE(VAR, poly, 8, 16);\t\t\\\n   DECL_VARIABLE(VAR, poly, 16, 8);\t\t\\\n+  DECL_VARIABLE(VAR, float, 16, 8);\t\t\\\n   DECL_VARIABLE(VAR, float, 32, 4)\n-\n+#else\n+#define DECL_VARIABLE_128BITS_VARIANTS(VAR)\t\\\n+  DECL_VARIABLE_128BITS_SIGNED_VARIANTS(VAR);\t\\\n+  DECL_VARIABLE_128BITS_UNSIGNED_VARIANTS(VAR);\t\\\n+  DECL_VARIABLE(VAR, poly, 8, 16);\t\t\\\n+  DECL_VARIABLE(VAR, poly, 16, 8);\t\t\\\n+  DECL_VARIABLE(VAR, float, 32, 4)\n+#endif\n /* Declare all variants.  */\n #define DECL_VARIABLE_ALL_VARIANTS(VAR)\t\t\\\n   DECL_VARIABLE_64BITS_VARIANTS(VAR);\t\t\\\n@@ -476,6 +500,15 @@ static void clean_results (void)\n /* Helpers to initialize vectors.  */\n #define VDUP(VAR, Q, T1, T2, W, N, V)\t\t\t\\\n   VECT_VAR(VAR, T1, W, N) = vdup##Q##_n_##T2##W(V)\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+/* Work around that there is no vdup_n_f16 intrinsic.  */\n+#define vdup_n_f16(VAL)\t\t\\\n+  __extension__\t\t\t\\\n+    ({\t\t\t\t\\\n+      float16_t f = VAL;\t\\\n+      vld1_dup_f16(&f);\t\t\\\n+    })\n+#endif\n \n #define VSET_LANE(VAR, Q, T1, T2, W, N, L, V)\t\t\t\t\\\n   VECT_VAR(VAR, T1, W, N) = vset##Q##_lane_##T2##W(V,\t\t\t\\"}, {"sha": "c8d43367bef3845bedc5a3cc35255db58a987e70", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/compute-ref-data.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcompute-ref-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcompute-ref-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcompute-ref-data.h?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -118,6 +118,10 @@ VECT_VAR_DECL_INIT(buffer, uint, 32, 2);\n PAD(buffer_pad, uint, 32, 2);\n VECT_VAR_DECL_INIT(buffer, uint, 64, 1);\n PAD(buffer_pad, uint, 64, 1);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+VECT_VAR_DECL_INIT(buffer, float, 16, 4);\n+PAD(buffer_pad, float, 16, 4);\n+#endif\n VECT_VAR_DECL_INIT(buffer, float, 32, 2);\n PAD(buffer_pad, float, 32, 2);\n VECT_VAR_DECL_INIT(buffer, int, 8, 16);\n@@ -140,6 +144,10 @@ VECT_VAR_DECL_INIT(buffer, poly, 8, 16);\n PAD(buffer_pad, poly, 8, 16);\n VECT_VAR_DECL_INIT(buffer, poly, 16, 8);\n PAD(buffer_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+VECT_VAR_DECL_INIT(buffer, float, 16, 8);\n+PAD(buffer_pad, float, 16, 8);\n+#endif\n VECT_VAR_DECL_INIT(buffer, float, 32, 4);\n PAD(buffer_pad, float, 32, 4);\n #ifdef __aarch64__\n@@ -170,6 +178,10 @@ VECT_VAR_DECL_INIT(buffer_dup, poly, 8, 8);\n VECT_VAR_DECL(buffer_dup_pad, poly, 8, 8);\n VECT_VAR_DECL_INIT(buffer_dup, poly, 16, 4);\n VECT_VAR_DECL(buffer_dup_pad, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+VECT_VAR_DECL_INIT4(buffer_dup, float, 16, 4);\n+VECT_VAR_DECL(buffer_dup_pad, float, 16, 4);\n+#endif\n VECT_VAR_DECL_INIT4(buffer_dup, float, 32, 2);\n VECT_VAR_DECL(buffer_dup_pad, float, 32, 2);\n \n@@ -193,5 +205,9 @@ VECT_VAR_DECL_INIT(buffer_dup, poly, 8, 16);\n VECT_VAR_DECL(buffer_dup_pad, poly, 8, 16);\n VECT_VAR_DECL_INIT(buffer_dup, poly, 16, 8);\n VECT_VAR_DECL(buffer_dup_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+VECT_VAR_DECL_INIT(buffer_dup, float, 16, 8);\n+VECT_VAR_DECL(buffer_dup_pad, float, 16, 8);\n+#endif\n VECT_VAR_DECL_INIT(buffer_dup, float, 32, 4);\n VECT_VAR_DECL(buffer_dup_pad, float, 32, 4);"}, {"sha": "c4fdbb45102a5407d71cdc75043e74dd0ebb076e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vbsl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -114,7 +114,7 @@ void exec_vbsl (void)\n   TEST_VBSL(uint, , float, f, 32, 2);\n   TEST_VBSL(uint, q, float, f, 32, 4);\n \n-  CHECK_RESULTS (TEST_MSG, \"\");\n+  CHECK_RESULTS_NO_FP16 (TEST_MSG, \"\");\n }\n \n int main (void)"}, {"sha": "5100375e5fe0c1f1f6b1e0cbff549990d73948e3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcombine.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -27,6 +27,8 @@ VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t 0x66, 0x66, 0x66, 0x66 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t   0x40533333, 0x40533333 };\n+VECT_VAR_DECL(expected,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t   0x4080, 0x4080, 0x4080, 0x4080 };\n \n #define TEST_MSG \"VCOMBINE\"\n void exec_vcombine (void)\n@@ -44,6 +46,9 @@ void exec_vcombine (void)\n \n   /* Initialize input \"vector64_a\" from \"buffer\".  */\n   TEST_MACRO_64BITS_VARIANTS_2_5(VLOAD, vector64_a, buffer);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VLOAD(vector64_a, buffer, , float, f, 16, 4);\n+#endif\n   VLOAD(vector64_a, buffer, , float, f, 32, 2);\n \n   /* Choose init value arbitrarily.  */\n@@ -57,6 +62,9 @@ void exec_vcombine (void)\n   VDUP(vector64_b, , uint, u, 64, 1, 0x88);\n   VDUP(vector64_b, , poly, p, 8, 8, 0x55);\n   VDUP(vector64_b, , poly, p, 16, 4, 0x66);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VDUP(vector64_b, , float, f, 16, 4, 2.25);\n+#endif\n   VDUP(vector64_b, , float, f, 32, 2, 3.3f);\n \n   clean_results ();\n@@ -72,6 +80,9 @@ void exec_vcombine (void)\n   TEST_VCOMBINE(uint, u, 64, 1, 2);\n   TEST_VCOMBINE(poly, p, 8, 8, 16);\n   TEST_VCOMBINE(poly, p, 16, 4, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VCOMBINE(float, f, 16, 4, 8);\n+#endif\n   TEST_VCOMBINE(float, f, 32, 2, 4);\n \n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n@@ -84,6 +95,9 @@ void exec_vcombine (void)\n   CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n }\n "}, {"sha": "b8b338ef3c06ff2489b525e22760cbaed1fda335", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcreate.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -16,6 +16,7 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0x123456789abcdef0 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf0, 0xde, 0xbc, 0x9a,\n \t\t\t\t\t0x78, 0x56, 0x34, 0x12 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xdef0, 0x9abc, 0x5678, 0x1234 };\n+VECT_VAR_DECL(expected,hfloat,16,4) [] = { 0xdef0, 0x9abc, 0x5678, 0x1234 };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x9abcdef0, 0x12345678 };\n \n #define INSN_NAME vcreate\n@@ -38,6 +39,9 @@ FNNAME (INSN_NAME)\n   DECL_VAL(val, int, 16, 4);\n   DECL_VAL(val, int, 32, 2);\n   DECL_VAL(val, int, 64, 1);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  DECL_VAL(val, float, 16, 4);\n+#endif\n   DECL_VAL(val, float, 32, 2);\n   DECL_VAL(val, uint, 8, 8);\n   DECL_VAL(val, uint, 16, 4);\n@@ -50,6 +54,9 @@ FNNAME (INSN_NAME)\n   DECL_VARIABLE(vector_res, int, 16, 4);\n   DECL_VARIABLE(vector_res, int, 32, 2);\n   DECL_VARIABLE(vector_res, int, 64, 1);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n   DECL_VARIABLE(vector_res, uint, 8, 8);\n   DECL_VARIABLE(vector_res, uint, 16, 4);\n@@ -65,6 +72,9 @@ FNNAME (INSN_NAME)\n   VECT_VAR(val, int, 16, 4) = 0x123456789abcdef0LL;\n   VECT_VAR(val, int, 32, 2) = 0x123456789abcdef0LL;\n   VECT_VAR(val, int, 64, 1) = 0x123456789abcdef0LL;\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_VAR(val, float, 16, 4) = 0x123456789abcdef0LL;\n+#endif\n   VECT_VAR(val, float, 32, 2) = 0x123456789abcdef0LL;\n   VECT_VAR(val, uint, 8, 8) = 0x123456789abcdef0ULL;\n   VECT_VAR(val, uint, 16, 4) = 0x123456789abcdef0ULL;\n@@ -76,6 +86,9 @@ FNNAME (INSN_NAME)\n   TEST_VCREATE(int, s, 8, 8);\n   TEST_VCREATE(int, s, 16, 4);\n   TEST_VCREATE(int, s, 32, 2);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VCREATE(float, f, 16, 4);\n+#endif\n   TEST_VCREATE(float, f, 32, 2);\n   TEST_VCREATE(int, s, 64, 1);\n   TEST_VCREATE(uint, u, 8, 8);\n@@ -95,6 +108,9 @@ FNNAME (INSN_NAME)\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n }\n "}, {"sha": "22d45d56c8e3c517da8cc595f767f8034aeabde8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdup-vmov.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup-vmov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup-vmov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup-vmov.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -187,13 +187,13 @@ void exec_vdup_vmov (void)\n \n     switch (i) {\n     case 0:\n-      CHECK_RESULTS_NAMED (TEST_MSG, expected0, \"\");\n+      CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected0, \"\");\n       break;\n     case 1:\n-      CHECK_RESULTS_NAMED (TEST_MSG, expected1, \"\");\n+      CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected1, \"\");\n       break;\n     case 2:\n-      CHECK_RESULTS_NAMED (TEST_MSG, expected2, \"\");\n+      CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected2, \"\");\n       break;\n     default:\n       abort();\n@@ -232,13 +232,13 @@ void exec_vdup_vmov (void)\n \n     switch (i) {\n     case 0:\n-      CHECK_RESULTS_NAMED (TEST_MSG, expected0, \"\");\n+      CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected0, \"\");\n       break;\n     case 1:\n-      CHECK_RESULTS_NAMED (TEST_MSG, expected1, \"\");\n+      CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected1, \"\");\n       break;\n     case 2:\n-      CHECK_RESULTS_NAMED (TEST_MSG, expected2, \"\");\n+      CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected2, \"\");\n       break;\n     default:\n       abort();"}, {"sha": "ef708dcba17e68ccc0e3540c52bb6507d0562fad", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -90,7 +90,7 @@ void exec_vdup_lane (void)\n   TEST_VDUP_LANE(q, poly, p, 16, 8, 4, 1);\n   TEST_VDUP_LANE(q, float, f, 32, 4, 2, 1);\n \n-  CHECK_RESULTS (TEST_MSG, \"\");\n+  CHECK_RESULTS_NO_FP16 (TEST_MSG, \"\");\n }\n \n int main (void)"}, {"sha": "98f88a69898130dc922e205717d1dcd82c77aa11", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vext.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -113,7 +113,7 @@ void exec_vext (void)\n   TEST_VEXT(q, poly, p, 16, 8, 6);\n   TEST_VEXT(q, float, f, 32, 4, 3);\n \n-  CHECK_RESULTS (TEST_MSG, \"\");\n+  CHECK_RESULTS_NO_FP16 (TEST_MSG, \"\");\n }\n \n int main (void)"}, {"sha": "9f0a1687f189bc2dfbe111c7f5c3b96c9acecd52", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_high.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -16,6 +16,7 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff1 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n \t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,hfloat,16,4) [] = { 0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n \n #define TEST_MSG \"VGET_HIGH\"\n@@ -31,6 +32,9 @@ void exec_vget_high (void)\n   DECL_VARIABLE_128BITS_VARIANTS(vector128);\n \n   TEST_MACRO_128BITS_VARIANTS_2_5(VLOAD, vector128, buffer);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VLOAD(vector128, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector128, buffer, q, float, f, 32, 4);\n \n   clean_results ();\n@@ -46,6 +50,9 @@ void exec_vget_high (void)\n   TEST_VGET_HIGH(uint, u, 64, 1, 2);\n   TEST_VGET_HIGH(poly, p, 8, 8, 16);\n   TEST_VGET_HIGH(poly, p, 16, 4, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VGET_HIGH(float, f, 16, 4, 8);\n+#endif\n   TEST_VGET_HIGH(float, f, 32, 2, 4);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");"}, {"sha": "2b875b9b7b86d850647cf977086f336b932cfb0b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_low.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -16,6 +16,7 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n \n #define TEST_MSG \"VGET_LOW\"\n@@ -31,6 +32,9 @@ void exec_vget_low (void)\n   DECL_VARIABLE_128BITS_VARIANTS(vector128);\n \n   TEST_MACRO_128BITS_VARIANTS_2_5(VLOAD, vector128, buffer);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VLOAD(vector128, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector128, buffer, q, float, f, 32, 4);\n \n   clean_results ();\n@@ -46,6 +50,9 @@ void exec_vget_low (void)\n   TEST_VGET_LOW(uint, u, 64, 1, 2);\n   TEST_VGET_LOW(poly, p, 8, 8, 16);\n   TEST_VGET_LOW(poly, p, 16, 4, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VGET_LOW(float, f, 16, 4, 8);\n+#endif\n   TEST_VGET_LOW(float, f, 32, 2, 4);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n@@ -58,6 +65,9 @@ void exec_vget_low (void)\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n }\n "}, {"sha": "4ed0e464f9ce6b0f599a6a72d3f49db5ac9a0374", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -16,6 +16,7 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n@@ -44,6 +45,8 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t 0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t   0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t   0xc1600000, 0xc1500000 };\n \n@@ -62,6 +65,10 @@ void exec_vld1 (void)\n \n   TEST_MACRO_ALL_VARIANTS_2_5(TEST_VLD1, vector, buffer);\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VLD1(vector, buffer, , float, f, 16, 4);\n+  TEST_VLD1(vector, buffer, q, float, f, 16, 8);\n+#endif\n   TEST_VLD1(vector, buffer, , float, f, 32, 2);\n   TEST_VLD1(vector, buffer, q, float, f, 32, 4);\n "}, {"sha": "34be214e9122c5701a341b09479443fdb5f2716b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1_dup.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1_dup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1_dup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1_dup.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -17,6 +17,7 @@ VECT_VAR_DECL(expected0,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected0,poly,8,8) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n \t\t\t\t\t 0xf0, 0xf0, 0xf0, 0xf0 };\n VECT_VAR_DECL(expected0,poly,16,4) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+VECT_VAR_DECL(expected0,hfloat,16,4) [] = { 0xcc00, 0xcc00, 0xcc00, 0xcc00 };\n VECT_VAR_DECL(expected0,hfloat,32,2) [] = { 0xc1800000, 0xc1800000 };\n VECT_VAR_DECL(expected0,int,8,16) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n \t\t\t\t\t 0xf0, 0xf0, 0xf0, 0xf0,\n@@ -44,6 +45,8 @@ VECT_VAR_DECL(expected0,poly,8,16) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n \t\t\t\t\t  0xf0, 0xf0, 0xf0, 0xf0 };\n VECT_VAR_DECL(expected0,poly,16,8) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0,\n \t\t\t\t\t  0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+VECT_VAR_DECL(expected0,hfloat,16,8) [] = { 0xcc00, 0xcc00, 0xcc00, 0xcc00,\n+\t\t\t\t\t    0xcc00, 0xcc00, 0xcc00, 0xcc00 };\n VECT_VAR_DECL(expected0,hfloat,32,4) [] = { 0xc1800000, 0xc1800000,\n \t\t\t\t\t    0xc1800000, 0xc1800000 };\n \n@@ -61,6 +64,7 @@ VECT_VAR_DECL(expected1,uint,64,1) [] = { 0xfffffffffffffff1 };\n VECT_VAR_DECL(expected1,poly,8,8) [] = { 0xf1, 0xf1, 0xf1, 0xf1,\n \t\t\t\t\t 0xf1, 0xf1, 0xf1, 0xf1 };\n VECT_VAR_DECL(expected1,poly,16,4) [] = { 0xfff1, 0xfff1, 0xfff1, 0xfff1 };\n+VECT_VAR_DECL(expected1,hfloat,16,4) [] = { 0xcb80, 0xcb80, 0xcb80, 0xcb80 };\n VECT_VAR_DECL(expected1,hfloat,32,2) [] = { 0xc1700000, 0xc1700000 };\n VECT_VAR_DECL(expected1,int,8,16) [] = { 0xf1, 0xf1, 0xf1, 0xf1,\n \t\t\t\t\t 0xf1, 0xf1, 0xf1, 0xf1,\n@@ -88,6 +92,8 @@ VECT_VAR_DECL(expected1,poly,8,16) [] = { 0xf1, 0xf1, 0xf1, 0xf1,\n \t\t\t\t\t  0xf1, 0xf1, 0xf1, 0xf1 };\n VECT_VAR_DECL(expected1,poly,16,8) [] = { 0xfff1, 0xfff1, 0xfff1, 0xfff1,\n \t\t\t\t\t  0xfff1, 0xfff1, 0xfff1, 0xfff1 };\n+VECT_VAR_DECL(expected1,hfloat,16,8) [] = { 0xcb80, 0xcb80, 0xcb80, 0xcb80,\n+\t\t\t\t\t    0xcb80, 0xcb80, 0xcb80, 0xcb80 };\n VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0xc1700000, 0xc1700000,\n \t\t\t\t\t    0xc1700000, 0xc1700000 };\n \n@@ -105,6 +111,7 @@ VECT_VAR_DECL(expected2,uint,64,1) [] = { 0xfffffffffffffff2 };\n VECT_VAR_DECL(expected2,poly,8,8) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t 0xf2, 0xf2, 0xf2, 0xf2 };\n VECT_VAR_DECL(expected2,poly,16,4) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected2,hfloat,16,4) [] = { 0xcb00, 0xcb00, 0xcb00, 0xcb00 };\n VECT_VAR_DECL(expected2,hfloat,32,2) [] = { 0xc1600000, 0xc1600000 };\n VECT_VAR_DECL(expected2,int,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t 0xf2, 0xf2, 0xf2, 0xf2,\n@@ -132,6 +139,8 @@ VECT_VAR_DECL(expected2,poly,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t  0xf2, 0xf2, 0xf2, 0xf2 };\n VECT_VAR_DECL(expected2,poly,16,8) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff2,\n \t\t\t\t\t  0xfff2, 0xfff2, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected2,hfloat,16,8) [] = { 0xcb00, 0xcb00, 0xcb00, 0xcb00,\n+\t\t\t\t\t    0xcb00, 0xcb00, 0xcb00, 0xcb00 };\n VECT_VAR_DECL(expected2,hfloat,32,4) [] = { 0xc1600000, 0xc1600000,\n \t\t\t\t\t    0xc1600000, 0xc1600000 };\n \n@@ -154,6 +163,10 @@ void exec_vld1_dup (void)\n \n     TEST_MACRO_ALL_VARIANTS_2_5(TEST_VLD1_DUP, vector, buffer_dup);\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+    TEST_VLD1_DUP(vector, buffer_dup, , float, f, 16, 4);\n+    TEST_VLD1_DUP(vector, buffer_dup, q, float, f, 16, 8);\n+#endif\n     TEST_VLD1_DUP(vector, buffer_dup, , float, f, 32, 2);\n     TEST_VLD1_DUP(vector, buffer_dup, q, float, f, 32, 4);\n "}, {"sha": "1f39006498d16bada53c42d298c080c6ba2556d1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1_lane.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1_lane.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -16,6 +16,7 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t0xaa, 0xaa, 0xaa, 0xf0 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xfff0 };\n+VECT_VAR_DECL(expected,hfloat,16,4) [] = { 0xaaaa, 0xaaaa, 0xcc00, 0xaaaa };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xaaaaaaaa, 0xc1800000 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t0xaa, 0xaa, 0xaa, 0xaa,\n@@ -43,6 +44,8 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t 0xf0, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t 0xaaaa, 0xaaaa, 0xfff0, 0xaaaa };\n+VECT_VAR_DECL(expected,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t   0xaaaa, 0xcc00, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t   0xc1800000, 0xaaaaaaaa };\n \n@@ -72,6 +75,9 @@ void exec_vld1_lane (void)\n   ARRAY(buffer_src, uint, 64, 1);\n   ARRAY(buffer_src, poly, 8, 8);\n   ARRAY(buffer_src, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  ARRAY(buffer_src, float, 16, 4);\n+#endif\n   ARRAY(buffer_src, float, 32, 2);\n \n   ARRAY(buffer_src, int, 8, 16);\n@@ -84,6 +90,9 @@ void exec_vld1_lane (void)\n   ARRAY(buffer_src, uint, 64, 2);\n   ARRAY(buffer_src, poly, 8, 16);\n   ARRAY(buffer_src, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  ARRAY(buffer_src, float, 16, 8);\n+#endif\n   ARRAY(buffer_src, float, 32, 4);\n \n   clean_results ();\n@@ -99,6 +108,9 @@ void exec_vld1_lane (void)\n   TEST_VLD1_LANE(, uint, u, 64, 1, 0);\n   TEST_VLD1_LANE(, poly, p, 8, 8, 7);\n   TEST_VLD1_LANE(, poly, p, 16, 4, 3);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VLD1_LANE(, float, f, 16, 4, 2);\n+#endif\n   TEST_VLD1_LANE(, float, f, 32, 2, 1);\n \n   TEST_VLD1_LANE(q, int, s, 8, 16, 15);\n@@ -111,6 +123,9 @@ void exec_vld1_lane (void)\n   TEST_VLD1_LANE(q, uint, u, 64, 2, 0);\n   TEST_VLD1_LANE(q, poly, p, 8, 16, 12);\n   TEST_VLD1_LANE(q, poly, p, 16, 8, 6);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VLD1_LANE(q, float, f, 16, 8, 5);\n+#endif\n   TEST_VLD1_LANE(q, float, f, 32, 4, 2);\n \n   CHECK_RESULTS (TEST_MSG, \"\");"}, {"sha": "1e02dc3fa103ca6f71325f668eb04f0b88b594a3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX.c", "status": "modified", "additions": 95, "deletions": 7, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -18,6 +18,7 @@ VECT_VAR_DECL(expected_vld2_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_vld2_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n VECT_VAR_DECL(expected_vld2_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld2_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_vld2_0,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7,\n@@ -41,6 +42,8 @@ VECT_VAR_DECL(expected_vld2_0,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected_vld2_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t\t  0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected_vld2_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n \n@@ -58,6 +61,7 @@ VECT_VAR_DECL(expected_vld2_1,uint,64,1) [] = { 0xfffffffffffffff1 };\n VECT_VAR_DECL(expected_vld2_1,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n \t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected_vld2_1,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,16,4) [] = { 0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected_vld2_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n VECT_VAR_DECL(expected_vld2_1,int,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t       0x4, 0x5, 0x6, 0x7,\n@@ -81,6 +85,8 @@ VECT_VAR_DECL(expected_vld2_1,poly,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n VECT_VAR_DECL(expected_vld2_1,poly,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n \t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,16,8) [] = { 0xc800, 0xc700, 0xc600, 0xc500,\n+\t\t\t\t\t\t  0xc400, 0xc200, 0xc000, 0xbc00 };\n VECT_VAR_DECL(expected_vld2_1,hfloat,32,4) [] = { 0xc1400000, 0xc1300000,\n \t\t\t\t\t\t  0xc1200000, 0xc1100000 };\n \n@@ -98,6 +104,7 @@ VECT_VAR_DECL(expected_vld3_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_vld3_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n VECT_VAR_DECL(expected_vld3_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld3_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_vld3_0,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7,\n@@ -121,6 +128,8 @@ VECT_VAR_DECL(expected_vld3_0,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected_vld3_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t\t  0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected_vld3_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n \n@@ -138,6 +147,7 @@ VECT_VAR_DECL(expected_vld3_1,uint,64,1) [] = { 0xfffffffffffffff1 };\n VECT_VAR_DECL(expected_vld3_1,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n \t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected_vld3_1,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,16,4) [] = { 0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected_vld3_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n VECT_VAR_DECL(expected_vld3_1,int,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t       0x4, 0x5, 0x6, 0x7,\n@@ -161,6 +171,8 @@ VECT_VAR_DECL(expected_vld3_1,poly,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n VECT_VAR_DECL(expected_vld3_1,poly,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n \t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,16,8) [] = { 0xc800, 0xc700, 0xc600, 0xc500,\n+\t\t\t\t\t\t  0xc400, 0xc200, 0xc000, 0xbc00 };\n VECT_VAR_DECL(expected_vld3_1,hfloat,32,4) [] = { 0xc1400000, 0xc1300000,\n \t\t\t\t\t\t  0xc1200000, 0xc1100000 };\n \n@@ -181,6 +193,7 @@ VECT_VAR_DECL(expected_vld3_2,poly,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n VECT_VAR_DECL(expected_vld3_2,poly,16,4) [] = { 0xfff8, 0xfff9,\n \t\t\t\t\t\t0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,16,4) [] = { 0xc800, 0xc700, 0xc600, 0xc500 };\n VECT_VAR_DECL(expected_vld3_2,hfloat,32,2) [] = { 0xc1400000, 0xc1300000 };\n VECT_VAR_DECL(expected_vld3_2,int,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n \t\t\t\t\t       0x14, 0x15, 0x16, 0x17,\n@@ -204,6 +217,8 @@ VECT_VAR_DECL(expected_vld3_2,poly,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n \t\t\t\t\t\t0x1c, 0x1d, 0x1e, 0x1f };\n VECT_VAR_DECL(expected_vld3_2,poly,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t\t0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,16,8) [] = { 0x0000, 0x3c00, 0x4000, 0x4200,\n+\t\t\t\t\t\t  0x4400, 0x4500, 0x4600, 0x4700 };\n VECT_VAR_DECL(expected_vld3_2,hfloat,32,4) [] = { 0xc1000000, 0xc0e00000,\n \t\t\t\t\t\t  0xc0c00000, 0xc0a00000 };\n \n@@ -223,6 +238,7 @@ VECT_VAR_DECL(expected_vld4_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_vld4_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n VECT_VAR_DECL(expected_vld4_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld4_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_vld4_0,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7,\n@@ -246,6 +262,8 @@ VECT_VAR_DECL(expected_vld4_0,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected_vld4_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t\t  0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected_vld4_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n \n@@ -263,6 +281,7 @@ VECT_VAR_DECL(expected_vld4_1,uint,64,1) [] = { 0xfffffffffffffff1 };\n VECT_VAR_DECL(expected_vld4_1,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n \t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n VECT_VAR_DECL(expected_vld4_1,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,16,4) [] = { 0xca00, 0xc980, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected_vld4_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n VECT_VAR_DECL(expected_vld4_1,int,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t       0x4, 0x5, 0x6, 0x7,\n@@ -286,6 +305,8 @@ VECT_VAR_DECL(expected_vld4_1,poly,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n VECT_VAR_DECL(expected_vld4_1,poly,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n \t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,16,8) [] = { 0xc800, 0xc700, 0xc600, 0xc500,\n+\t\t\t\t\t\t  0xc400, 0xc200, 0xc000, 0xbc00 };\n VECT_VAR_DECL(expected_vld4_1,hfloat,32,4) [] = { 0xc1400000, 0xc1300000,\n \t\t\t\t\t\t  0xc1200000, 0xc1100000 };\n \n@@ -303,6 +324,7 @@ VECT_VAR_DECL(expected_vld4_2,uint,64,1) [] = { 0xfffffffffffffff2 };\n VECT_VAR_DECL(expected_vld4_2,poly,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n VECT_VAR_DECL(expected_vld4_2,poly,16,4) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,16,4) [] = { 0xc800, 0xc700, 0xc600, 0xc500 };\n VECT_VAR_DECL(expected_vld4_2,hfloat,32,2) [] = { 0xc1400000, 0xc1300000 };\n VECT_VAR_DECL(expected_vld4_2,int,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n \t\t\t\t\t       0x14, 0x15, 0x16, 0x17,\n@@ -326,6 +348,8 @@ VECT_VAR_DECL(expected_vld4_2,poly,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n \t\t\t\t\t\t0x1c, 0x1d, 0x1e, 0x1f };\n VECT_VAR_DECL(expected_vld4_2,poly,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n \t\t\t\t\t\t0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,16,8) [] = { 0x0000, 0x3c00, 0x4000, 0x4200,\n+\t\t\t\t\t\t  0x4400, 0x4500, 0x4600, 0x4700 };\n VECT_VAR_DECL(expected_vld4_2,hfloat,32,4) [] = { 0xc1000000, 0xc0e00000,\n \t\t\t\t\t\t  0xc0c00000, 0xc0a00000 };\n \n@@ -343,6 +367,7 @@ VECT_VAR_DECL(expected_vld4_3,uint,64,1) [] = { 0xfffffffffffffff3 };\n VECT_VAR_DECL(expected_vld4_3,poly,8,8) [] = { 0x8, 0x9, 0xa, 0xb,\n \t\t\t\t\t       0xc, 0xd, 0xe, 0xf };\n VECT_VAR_DECL(expected_vld4_3,poly,16,4) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,16,4) [] = { 0xc400, 0xc200, 0xc000, 0xbc00 };\n VECT_VAR_DECL(expected_vld4_3,hfloat,32,2) [] = { 0xc1200000, 0xc1100000 };\n VECT_VAR_DECL(expected_vld4_3,int,8,16) [] = { 0x20, 0x21, 0x22, 0x23,\n \t\t\t\t\t       0x24, 0x25, 0x26, 0x27,\n@@ -366,6 +391,8 @@ VECT_VAR_DECL(expected_vld4_3,poly,8,16) [] = { 0x20, 0x21, 0x22, 0x23,\n \t\t\t\t\t\t0x2c, 0x2d, 0x2e, 0x2f };\n VECT_VAR_DECL(expected_vld4_3,poly,16,8) [] = { 0x8, 0x9, 0xa, 0xb,\n \t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,16,8) [] = { 0x4800, 0x4880, 0x4900, 0x4980,\n+\t\t\t\t\t\t  0x4a00, 0x4a80, 0x4b00, 0x4b80 };\n VECT_VAR_DECL(expected_vld4_3,hfloat,32,4) [] = { 0xc0800000, 0xc0400000,\n \t\t\t\t\t\t  0xc0000000, 0xbf800000 };\n \n@@ -398,7 +425,7 @@ void exec_vldX (void)\n \t sizeof(VECT_VAR(result, T1, W, N)));\n \n   /* We need all variants in 64 bits, but there is no 64x2 variant.  */\n-#define DECL_ALL_VLDX(X)\t\t\t\\\n+#define DECL_ALL_VLDX_NO_FP16(X)\t\t\\\n   DECL_VLDX(int, 8, 8, X);\t\t\t\\\n   DECL_VLDX(int, 16, 4, X);\t\t\t\\\n   DECL_VLDX(int, 32, 2, X);\t\t\t\\\n@@ -420,7 +447,16 @@ void exec_vldX (void)\n   DECL_VLDX(poly, 16, 8, X);\t\t\t\\\n   DECL_VLDX(float, 32, 4, X)\n \n-#define TEST_ALL_VLDX(X)\t\t\t\\\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define DECL_ALL_VLDX(X)\t\\\n+  DECL_ALL_VLDX_NO_FP16(X);\t\\\n+  DECL_VLDX(float, 16, 4, X);\t\\\n+  DECL_VLDX(float, 16, 8, X)\n+#else\n+#define DECL_ALL_VLDX(X) DECL_ALL_VLDX_NO_FP16(X)\n+#endif\n+\n+#define TEST_ALL_VLDX_NO_FP16(X)\t\t\\\n   TEST_VLDX(, int, s, 8, 8, X);\t\t\t\\\n   TEST_VLDX(, int, s, 16, 4, X);\t\t\\\n   TEST_VLDX(, int, s, 32, 2, X);\t\t\\\n@@ -442,7 +478,16 @@ void exec_vldX (void)\n   TEST_VLDX(q, poly, p, 16, 8, X);\t\t\\\n   TEST_VLDX(q, float, f, 32, 4, X)\n \n-#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\t\\\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_VLDX(X)\t\t\\\n+  TEST_ALL_VLDX_NO_FP16(X);\t\t\\\n+  TEST_VLDX(, float, f, 16, 4, X);\t\\\n+  TEST_VLDX(q, float, f, 16, 8, X)\n+#else\n+#define TEST_ALL_VLDX(X) TEST_ALL_VLDX_NO_FP16(X)\n+#endif\n+\n+#define TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\t\\\n   TEST_EXTRA_CHUNK(int, 8, 8, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 16, 4, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 32, 2, X, Y);\t\t\\\n@@ -464,9 +509,17 @@ void exec_vldX (void)\n   TEST_EXTRA_CHUNK(poly, 16, 8, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(float, 32, 4, X, Y)\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\t\\\n+  TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\t\t\\\n+  TEST_EXTRA_CHUNK(float, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 16, 8, X, Y);\n+#else\n+#define TEST_ALL_EXTRA_CHUNKS(X, Y) TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\n+#endif\n+\n   /* vldX supports all vector types except [u]int64x2.  */\n-#define CHECK_RESULTS_VLDX(test_name,EXPECTED,comment)\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n+#define CHECK_RESULTS_VLDX_NO_FP16(test_name,EXPECTED,comment)\t\t\\\n     CHECK(test_name, int, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n@@ -487,8 +540,19 @@ void exec_vldX (void)\n     CHECK(test_name, uint, 32, 4, PRIx32, EXPECTED, comment);\t\t\\\n     CHECK(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n-    CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+    CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment)\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define CHECK_RESULTS_VLDX(test_name,EXPECTED,comment)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    CHECK_RESULTS_VLDX_NO_FP16(test_name, EXPECTED, comment);\t\t\\\n+    CHECK_FP(test_name, float, 16, 4, PRIx16, EXPECTED, comment);\t\\\n+    CHECK_FP(test_name, float, 16, 8, PRIx16, EXPECTED, comment);\t\\\n+  }\n+#else\n+#define CHECK_RESULTS_VLDX(test_name, EXPECTED, comment)\t\t\\\n+  { CHECK_RESULTS_VLDX_NO_FP16(test_name, EXPECTED, comment); }\n+#endif\n \n   DECL_ALL_VLDX(2);\n   DECL_ALL_VLDX(3);\n@@ -516,6 +580,10 @@ void exec_vldX (void)\n   PAD(buffer_vld2_pad, poly, 8, 8);\n   VECT_ARRAY_INIT2(buffer_vld2, poly, 16, 4);\n   PAD(buffer_vld2_pad, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT2(buffer_vld2, float, 16, 4);\n+  PAD(buffer_vld2_pad, float, 16, 4);\n+#endif\n   VECT_ARRAY_INIT2(buffer_vld2, float, 32, 2);\n   PAD(buffer_vld2_pad, float, 32, 2);\n \n@@ -539,6 +607,10 @@ void exec_vldX (void)\n   PAD(buffer_vld2_pad, poly, 8, 16);\n   VECT_ARRAY_INIT2(buffer_vld2, poly, 16, 8);\n   PAD(buffer_vld2_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT2(buffer_vld2, float, 16, 8);\n+  PAD(buffer_vld2_pad, float, 16, 8);\n+#endif\n   VECT_ARRAY_INIT2(buffer_vld2, float, 32, 4);\n   PAD(buffer_vld2_pad, float, 32, 4);\n \n@@ -563,6 +635,10 @@ void exec_vldX (void)\n   PAD(buffer_vld3_pad, poly, 8, 8);\n   VECT_ARRAY_INIT3(buffer_vld3, poly, 16, 4);\n   PAD(buffer_vld3_pad, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT3(buffer_vld3, float, 16, 4);\n+  PAD(buffer_vld3_pad, float, 16, 4);\n+#endif\n   VECT_ARRAY_INIT3(buffer_vld3, float, 32, 2);\n   PAD(buffer_vld3_pad, float, 32, 2);\n \n@@ -586,6 +662,10 @@ void exec_vldX (void)\n   PAD(buffer_vld3_pad, poly, 8, 16);\n   VECT_ARRAY_INIT3(buffer_vld3, poly, 16, 8);\n   PAD(buffer_vld3_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT3(buffer_vld3, float, 16, 8);\n+  PAD(buffer_vld3_pad, float, 16, 8);\n+#endif\n   VECT_ARRAY_INIT3(buffer_vld3, float, 32, 4);\n   PAD(buffer_vld3_pad, float, 32, 4);\n \n@@ -610,6 +690,10 @@ void exec_vldX (void)\n   PAD(buffer_vld4_pad, poly, 8, 8);\n   VECT_ARRAY_INIT4(buffer_vld4, poly, 16, 4);\n   PAD(buffer_vld4_pad, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT4(buffer_vld4, float, 16, 4);\n+  PAD(buffer_vld4_pad, float, 16, 4);\n+#endif\n   VECT_ARRAY_INIT4(buffer_vld4, float, 32, 2);\n   PAD(buffer_vld4_pad, float, 32, 2);\n \n@@ -633,6 +717,10 @@ void exec_vldX (void)\n   PAD(buffer_vld4_pad, poly, 8, 16);\n   VECT_ARRAY_INIT4(buffer_vld4, poly, 16, 8);\n   PAD(buffer_vld4_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT4(buffer_vld4, float, 16, 8);\n+  PAD(buffer_vld4_pad, float, 16, 8);\n+#endif\n   VECT_ARRAY_INIT4(buffer_vld4, float, 32, 4);\n   PAD(buffer_vld4_pad, float, 32, 4);\n "}, {"sha": "e4cde46725fff839dc6e7b81ef60f045949a368a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c", "status": "modified", "additions": 75, "deletions": 7, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -18,6 +18,7 @@ VECT_VAR_DECL(expected_vld2_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_vld2_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf0, 0xf1,\n \t\t\t\t\t0xf0, 0xf1, 0xf0, 0xf1 };\n VECT_VAR_DECL(expected_vld2_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff0, 0xfff1 };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,16,4) [] = {0xcc00, 0xcb80, 0xcc00, 0xcb80 };\n VECT_VAR_DECL(expected_vld2_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n \n /* vld2_dup/chunk 1.  */\n@@ -35,6 +36,7 @@ VECT_VAR_DECL(expected_vld2_1,poly,8,8) [] = { 0xf0, 0xf1, 0xf0, 0xf1,\n \t\t\t\t\t       0xf0, 0xf1, 0xf0, 0xf1 };\n VECT_VAR_DECL(expected_vld2_1,poly,16,4) [] = { 0xfff0, 0xfff1,\n \t\t\t\t\t\t0xfff0, 0xfff1 };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcc00, 0xcb80 };\n VECT_VAR_DECL(expected_vld2_1,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n \n /* vld3_dup/chunk 0.  */\n@@ -54,6 +56,7 @@ VECT_VAR_DECL(expected_vld3_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf0,\n \t\t\t\t\t       0xf1, 0xf2, 0xf0, 0xf1 };\n VECT_VAR_DECL(expected_vld3_0,poly,16,4) [] = { 0xfff0, 0xfff1,\n \t\t\t\t\t\t0xfff2, 0xfff0 };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xcc00 };\n VECT_VAR_DECL(expected_vld3_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n \n /* vld3_dup/chunk 1.  */\n@@ -73,6 +76,7 @@ VECT_VAR_DECL(expected_vld3_1,poly,8,8) [] = { 0xf2, 0xf0, 0xf1, 0xf2,\n \t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xf0 };\n VECT_VAR_DECL(expected_vld3_1,poly,16,4) [] = { 0xfff1, 0xfff2,\n \t\t\t\t\t\t0xfff0, 0xfff1 };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,16,4) [] = { 0xcb80, 0xcb00, 0xcc00, 0xcb80 };\n VECT_VAR_DECL(expected_vld3_1,hfloat,32,2) [] = { 0xc1600000, 0xc1800000 };\n \n /* vld3_dup/chunk 2.  */\n@@ -92,6 +96,7 @@ VECT_VAR_DECL(expected_vld3_2,poly,8,8) [] = { 0xf1, 0xf2, 0xf0, 0xf1,\n \t\t\t\t\t       0xf2, 0xf0, 0xf1, 0xf2 };\n VECT_VAR_DECL(expected_vld3_2,poly,16,4) [] = { 0xfff2, 0xfff0,\n \t\t\t\t\t\t0xfff1, 0xfff2 };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,16,4) [] = { 0xcb00, 0xcc00, 0xcb80, 0xcb00 };\n VECT_VAR_DECL(expected_vld3_2,hfloat,32,2) [] = { 0xc1700000, 0xc1600000 };\n \n /* vld4_dup/chunk 0.  */\n@@ -109,6 +114,7 @@ VECT_VAR_DECL(expected_vld4_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_vld4_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xf3 };\n VECT_VAR_DECL(expected_vld4_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld4_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n \n /* vld4_dup/chunk 1.  */\n@@ -125,6 +131,7 @@ VECT_VAR_DECL(expected_vld4_1,uint,64,1) [] = { 0xfffffffffffffff1 };\n VECT_VAR_DECL(expected_vld4_1,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xf3 };\n VECT_VAR_DECL(expected_vld4_1,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld4_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n \n /* vld4_dup/chunk 2.  */\n@@ -141,6 +148,7 @@ VECT_VAR_DECL(expected_vld4_2,uint,64,1) [] = { 0xfffffffffffffff2 };\n VECT_VAR_DECL(expected_vld4_2,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xf3 };\n VECT_VAR_DECL(expected_vld4_2,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld4_2,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n \n /* vld4_dup/chunk3.  */\n@@ -157,6 +165,7 @@ VECT_VAR_DECL(expected_vld4_3,uint,64,1) [] = { 0xfffffffffffffff3 };\n VECT_VAR_DECL(expected_vld4_3,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xf3 };\n VECT_VAR_DECL(expected_vld4_3,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld4_3,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n \n void exec_vldX_dup (void)\n@@ -188,7 +197,7 @@ void exec_vldX_dup (void)\n \t &(VECT_VAR(result_bis_##X, T1, W, N)[Y*N]),\t\\\n \t sizeof(VECT_VAR(result, T1, W, N)));\n \n-#define DECL_ALL_VLDX_DUP(X)\t\t\t\\\n+#define DECL_ALL_VLDX_DUP_NO_FP16(X)\t\t\\\n   DECL_VLDX_DUP(int, 8, 8, X);\t\t\t\\\n   DECL_VLDX_DUP(int, 16, 4, X);\t\t\t\\\n   DECL_VLDX_DUP(int, 32, 2, X);\t\t\t\\\n@@ -201,7 +210,15 @@ void exec_vldX_dup (void)\n   DECL_VLDX_DUP(poly, 16, 4, X);\t\t\\\n   DECL_VLDX_DUP(float, 32, 2, X)\n \n-#define TEST_ALL_VLDX_DUP(X)\t\t\t\\\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define DECL_ALL_VLDX_DUP(X)\t\t\\\n+  DECL_ALL_VLDX_DUP_NO_FP16(X);\t\t\\\n+  DECL_VLDX_DUP(float, 16, 4, X)\n+#else\n+#define DECL_ALL_VLDX_DUP(X) DECL_ALL_VLDX_DUP_NO_FP16(X)\n+#endif\n+\n+#define TEST_ALL_VLDX_DUP_NO_FP16(X)\t\t\\\n   TEST_VLDX_DUP(, int, s, 8, 8, X);\t\t\\\n   TEST_VLDX_DUP(, int, s, 16, 4, X);\t\t\\\n   TEST_VLDX_DUP(, int, s, 32, 2, X);\t\t\\\n@@ -214,7 +231,15 @@ void exec_vldX_dup (void)\n   TEST_VLDX_DUP(, poly, p, 16, 4, X);\t\t\\\n   TEST_VLDX_DUP(, float, f, 32, 2, X)\n \n-#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\t\\\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_VLDX_DUP(X)\t\t\\\n+  TEST_ALL_VLDX_DUP_NO_FP16(X);\t\t\\\n+  TEST_VLDX_DUP(, float, f, 16, 4, X)\n+#else\n+#define TEST_ALL_VLDX_DUP(X) TEST_ALL_VLDX_DUP_NO_FP16(X)\n+#endif\n+\n+#define TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\t\\\n   TEST_EXTRA_CHUNK(int, 8, 8, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 16, 4, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 32, 2, X, Y);\t\t\\\n@@ -227,9 +252,16 @@ void exec_vldX_dup (void)\n   TEST_EXTRA_CHUNK(poly, 16, 4, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(float, 32, 2, X, Y)\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\\\n+  TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y);\t\\\n+  TEST_EXTRA_CHUNK(float, 16, 4, X, Y)\n+#else\n+#define TEST_ALL_EXTRA_CHUNKS(X, Y) TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\n+#endif\n+\n   /* vldX_dup supports only 64-bit inputs.  */\n-#define CHECK_RESULTS_VLDX_DUP(test_name,EXPECTED,comment)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n+#define CHECK_RESULTS_VLDX_DUP_NO_FP16(test_name,EXPECTED,comment)\t\\\n     CHECK(test_name, int, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n@@ -240,8 +272,20 @@ void exec_vldX_dup (void)\n     CHECK(test_name, uint, 64, 1, PRIx64, EXPECTED, comment);\t\t\\\n     CHECK(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n-    CHECK_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+    CHECK_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment)\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define CHECK_RESULTS_VLDX_DUP(test_name,EXPECTED,comment)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    CHECK_RESULTS_VLDX_DUP_NO_FP16(test_name,EXPECTED,comment);\t\t\\\n+    CHECK_FP(test_name, float, 16, 4, PRIx16, EXPECTED, comment);\t\\\n+  }\n+#else\n+#define CHECK_RESULTS_VLDX_DUP(test_name,EXPECTED,comment)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    CHECK_RESULTS_VLDX_DUP_NO_FP16(test_name,EXPECTED,comment);\t\t\\\n+  }\n+#endif\n \n   DECL_ALL_VLDX_DUP(2);\n   DECL_ALL_VLDX_DUP(3);\n@@ -269,6 +313,10 @@ void exec_vldX_dup (void)\n   PAD(buffer_vld2_pad, poly, 8, 8);\n   VECT_ARRAY_INIT2(buffer_vld2, poly, 16, 4);\n   PAD(buffer_vld2_pad, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT2(buffer_vld2, float, 16, 4);\n+  PAD(buffer_vld2_pad, float, 16, 4);\n+#endif\n   VECT_ARRAY_INIT2(buffer_vld2, float, 32, 2);\n   PAD(buffer_vld2_pad, float, 32, 2);\n \n@@ -292,6 +340,10 @@ void exec_vldX_dup (void)\n   PAD(buffer_vld2_pad, poly, 8, 16);\n   VECT_ARRAY_INIT2(buffer_vld2, poly, 16, 8);\n   PAD(buffer_vld2_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT2(buffer_vld2, float, 16, 8);\n+  PAD(buffer_vld2_pad, float, 16, 8);\n+#endif\n   VECT_ARRAY_INIT2(buffer_vld2, float, 32, 4);\n   PAD(buffer_vld2_pad, float, 32, 4);\n \n@@ -316,6 +368,10 @@ void exec_vldX_dup (void)\n   PAD(buffer_vld3_pad, poly, 8, 8);\n   VECT_ARRAY_INIT3(buffer_vld3, poly, 16, 4);\n   PAD(buffer_vld3_pad, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT3(buffer_vld3, float, 16, 4);\n+  PAD(buffer_vld3_pad, float, 16, 4);\n+#endif\n   VECT_ARRAY_INIT3(buffer_vld3, float, 32, 2);\n   PAD(buffer_vld3_pad, float, 32, 2);\n \n@@ -339,6 +395,10 @@ void exec_vldX_dup (void)\n   PAD(buffer_vld3_pad, poly, 8, 16);\n   VECT_ARRAY_INIT3(buffer_vld3, poly, 16, 8);\n   PAD(buffer_vld3_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT3(buffer_vld3, float, 16, 8);\n+  PAD(buffer_vld3_pad, float, 16, 8);\n+#endif\n   VECT_ARRAY_INIT3(buffer_vld3, float, 32, 4);\n   PAD(buffer_vld3_pad, float, 32, 4);\n \n@@ -363,6 +423,10 @@ void exec_vldX_dup (void)\n   PAD(buffer_vld4_pad, poly, 8, 8);\n   VECT_ARRAY_INIT4(buffer_vld4, poly, 16, 4);\n   PAD(buffer_vld4_pad, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT4(buffer_vld4, float, 16, 4);\n+  PAD(buffer_vld4_pad, float, 16, 4);\n+#endif\n   VECT_ARRAY_INIT4(buffer_vld4, float, 32, 2);\n   PAD(buffer_vld4_pad, float, 32, 2);\n \n@@ -386,6 +450,10 @@ void exec_vldX_dup (void)\n   PAD(buffer_vld4_pad, poly, 8, 16);\n   VECT_ARRAY_INIT4(buffer_vld4, poly, 16, 8);\n   PAD(buffer_vld4_pad, poly, 16, 8);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VECT_ARRAY_INIT4(buffer_vld4, float, 16, 8);\n+  PAD(buffer_vld4_pad, float, 16, 8);\n+#endif\n   VECT_ARRAY_INIT4(buffer_vld4, float, 32, 4);\n   PAD(buffer_vld4_pad, float, 32, 4);\n "}, {"sha": "33b0eafbadb475c6cfe7702205bcd88e0e344b0c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -18,6 +18,7 @@ VECT_VAR_DECL(expected_vld2_0,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld2_0,poly,16,4) [] = { 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld2_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_vld2_0,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -29,6 +30,8 @@ VECT_VAR_DECL(expected_vld2_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld2_0,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t  0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa } ;\n VECT_VAR_DECL(expected_vld2_0,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n \n@@ -44,6 +47,7 @@ VECT_VAR_DECL(expected_vld2_1,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n VECT_VAR_DECL(expected_vld2_1,poly,8,8) [] = { 0xf0, 0xf1, 0xaa, 0xaa,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld2_1,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1 };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld2_1,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld2_1,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t       0xfff0, 0xfff1, 0xaaaa, 0xaaaa };\n@@ -55,6 +59,8 @@ VECT_VAR_DECL(expected_vld2_1,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld2_1,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t  0xcc00, 0xcb80, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld2_1,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n \n@@ -70,6 +76,7 @@ VECT_VAR_DECL(expected_vld3_0,uint,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld3_0,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld3_0,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld3_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_vld3_0,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -81,6 +88,8 @@ VECT_VAR_DECL(expected_vld3_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t\t0xfffffff2, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld3_0,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t  0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld3_0,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n \n@@ -96,6 +105,7 @@ VECT_VAR_DECL(expected_vld3_1,uint,32,2) [] = { 0xaaaaaaaa, 0xfffffff0 };\n VECT_VAR_DECL(expected_vld3_1,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xaa };\n VECT_VAR_DECL(expected_vld3_1,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,16,4) [] = { 0xaaaa, 0xaaaa, 0xcc00, 0xcb80 };\n VECT_VAR_DECL(expected_vld3_1,hfloat,32,2) [] = { 0xc1600000, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld3_1,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -107,6 +117,8 @@ VECT_VAR_DECL(expected_vld3_1,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld3_1,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xfff0 };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t  0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld3_1,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t  0xc1800000, 0xc1700000 };\n \n@@ -122,6 +134,7 @@ VECT_VAR_DECL(expected_vld3_2,uint,32,2) [] = { 0xfffffff1, 0xfffffff2 };\n VECT_VAR_DECL(expected_vld3_2,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld3_2,poly,16,4) [] = { 0xaaaa, 0xfff0, 0xfff1, 0xfff2 };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,16,4) [] = { 0xcb00, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld3_2,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld3_2,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1,\n \t\t\t\t\t       0xfff2, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -133,6 +146,8 @@ VECT_VAR_DECL(expected_vld3_2,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld3_2,poly,16,8) [] = { 0xfff1, 0xfff2, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xcc00, 0xcb80,\n+\t\t\t\t\t\t  0xcb00, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld3_2,hfloat,32,4) [] = { 0xc1600000, 0xaaaaaaaa,\n \t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n \n@@ -148,6 +163,7 @@ VECT_VAR_DECL(expected_vld4_0,uint,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld4_0,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld4_0,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld4_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_vld4_0,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -159,6 +175,8 @@ VECT_VAR_DECL(expected_vld4_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n VECT_VAR_DECL(expected_vld4_0,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t  0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld4_0,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n \n@@ -174,6 +192,7 @@ VECT_VAR_DECL(expected_vld4_1,uint,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld4_1,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld4_1,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld4_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n VECT_VAR_DECL(expected_vld4_1,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -185,6 +204,8 @@ VECT_VAR_DECL(expected_vld4_1,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld4_1,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t  0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld4_1,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n \n@@ -200,6 +221,7 @@ VECT_VAR_DECL(expected_vld4_2,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n VECT_VAR_DECL(expected_vld4_2,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld4_2,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_vld4_2,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld4_2,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -211,6 +233,8 @@ VECT_VAR_DECL(expected_vld4_2,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld4_2,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t  0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld4_2,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n \n@@ -226,6 +250,7 @@ VECT_VAR_DECL(expected_vld4_3,uint,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n VECT_VAR_DECL(expected_vld4_3,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n \t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n VECT_VAR_DECL(expected_vld4_3,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld4_3,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld4_3,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n@@ -237,6 +262,8 @@ VECT_VAR_DECL(expected_vld4_3,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n VECT_VAR_DECL(expected_vld4_3,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n \t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t\t  0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n VECT_VAR_DECL(expected_vld4_3,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n \t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n \n@@ -252,6 +279,9 @@ VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 32, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 64, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 8, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 16, 2);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, float, 16, 2);\n+#endif\n VECT_VAR_DECL_INIT(buffer_vld2_lane, float, 32, 2);\n \n /* Input buffers for vld3_lane */\n@@ -265,6 +295,9 @@ VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 32, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 64, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 8, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 16, 3);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, float, 16, 3);\n+#endif\n VECT_VAR_DECL_INIT(buffer_vld3_lane, float, 32, 3);\n \n /* Input buffers for vld4_lane */\n@@ -278,6 +311,9 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 32, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 64, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 8, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, float, 16, 4);\n+#endif\n VECT_VAR_DECL_INIT(buffer_vld4_lane, float, 32, 4);\n \n void exec_vldX_lane (void)\n@@ -321,7 +357,7 @@ void exec_vldX_lane (void)\n \t sizeof(VECT_VAR(result, T1, W, N)));\n \n   /* We need all variants in 64 bits, but there is no 64x2 variant.  */\n-#define DECL_ALL_VLDX_LANE(X)\t\t\t\\\n+#define DECL_ALL_VLDX_LANE_NO_FP16(X)\t\t\\\n   DECL_VLDX_LANE(int, 8, 8, X);\t\t\t\\\n   DECL_VLDX_LANE(int, 16, 4, X);\t\t\\\n   DECL_VLDX_LANE(int, 32, 2, X);\t\t\\\n@@ -338,6 +374,15 @@ void exec_vldX_lane (void)\n   DECL_VLDX_LANE(float, 32, 2, X);\t\t\\\n   DECL_VLDX_LANE(float, 32, 4, X)\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define DECL_ALL_VLDX_LANE(X)\t\t\\\n+  DECL_ALL_VLDX_LANE_NO_FP16(X);\t\\\n+  DECL_VLDX_LANE(float, 16, 4, X);\t\\\n+  DECL_VLDX_LANE(float, 16, 8, X)\n+#else\n+#define DECL_ALL_VLDX_LANE(X) DECL_ALL_VLDX_LANE_NO_FP16(X)\n+#endif\n+\n   /* Add some padding to try to catch out of bound accesses.  */\n #define ARRAY1(V, T, W, N) VECT_VAR_DECL(V,T,W,N)[1]={42}\n #define DUMMY_ARRAY(V, T, W, N, L) \\\n@@ -346,7 +391,7 @@ void exec_vldX_lane (void)\n \n   /* Use the same lanes regardless of the size of the array (X), for\n      simplicity.  */\n-#define TEST_ALL_VLDX_LANE(X)\t\t\t\\\n+#define TEST_ALL_VLDX_LANE_NO_FP16(X)\t\t\\\n   TEST_VLDX_LANE(, int, s, 8, 8, X, 7);\t\t\\\n   TEST_VLDX_LANE(, int, s, 16, 4, X, 2);\t\\\n   TEST_VLDX_LANE(, int, s, 32, 2, X, 0);\t\\\n@@ -363,7 +408,16 @@ void exec_vldX_lane (void)\n   TEST_VLDX_LANE(, float, f, 32, 2, X, 0);\t\\\n   TEST_VLDX_LANE(q, float, f, 32, 4, X, 2)\n \n-#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\t\\\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_VLDX_LANE(X)\t\t\t\\\n+  TEST_ALL_VLDX_LANE_NO_FP16(X);\t\t\\\n+  TEST_VLDX_LANE(, float, f, 16, 4, X, 2);\t\\\n+  TEST_VLDX_LANE(q, float, f, 16, 8, X, 6)\n+#else\n+#define TEST_ALL_VLDX_LANE(X) TEST_ALL_VLDX_LANE_NO_FP16(X)\n+#endif\n+\n+#define TEST_ALL_EXTRA_CHUNKS_NO_FP16(X,Y)\t\\\n   TEST_EXTRA_CHUNK(int, 8, 8, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 16, 4, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 32, 2, X, Y);\t\t\\\n@@ -380,9 +434,17 @@ void exec_vldX_lane (void)\n   TEST_EXTRA_CHUNK(float, 32, 2, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(float, 32, 4, X, Y)\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_EXTRA_CHUNKS(X,Y)\t\t\\\n+  TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 16, 8, X, Y)\n+#else\n+#define TEST_ALL_EXTRA_CHUNKS(X,Y) TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\n+#endif\n+\n   /* vldX_lane supports only a subset of all variants.  */\n-#define CHECK_RESULTS_VLDX_LANE(test_name,EXPECTED,comment)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n+#define CHECK_RESULTS_VLDX_LANE_NO_FP16(test_name,EXPECTED,comment)\t\\\n     CHECK(test_name, int, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n@@ -397,8 +459,21 @@ void exec_vldX_lane (void)\n     CHECK(test_name, uint, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 4, PRIx32, EXPECTED, comment);\t\t\\\n     CHECK(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n-    CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+    CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment)\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define CHECK_RESULTS_VLDX_LANE(test_name,EXPECTED,comment)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    CHECK_RESULTS_VLDX_LANE_NO_FP16(test_name,EXPECTED,comment);\t\\\n+    CHECK_FP(test_name, float, 16, 4, PRIx16, EXPECTED, comment);\t\\\n+    CHECK_FP(test_name, float, 16, 8, PRIx16, EXPECTED, comment);\t\\\n+  }\n+#else\n+#define CHECK_RESULTS_VLDX_LANE(test_name,EXPECTED,comment)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    CHECK_RESULTS_VLDX_LANE_NO_FP16(test_name,EXPECTED,comment);\t\\\n+  }\n+#endif\n \n   /* Declare the temporary buffers / variables.  */\n   DECL_ALL_VLDX_LANE(2);\n@@ -419,6 +494,10 @@ void exec_vldX_lane (void)\n   DUMMY_ARRAY(buffer_src, uint, 16, 8, 4);\n   DUMMY_ARRAY(buffer_src, uint, 32, 4, 4);\n   DUMMY_ARRAY(buffer_src, poly, 16, 8, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  DUMMY_ARRAY(buffer_src, float, 16, 4, 4);\n+  DUMMY_ARRAY(buffer_src, float, 16, 8, 4);\n+#endif\n   DUMMY_ARRAY(buffer_src, float, 32, 2, 4);\n   DUMMY_ARRAY(buffer_src, float, 32, 4, 4);\n "}, {"sha": "e0499df5170594b0c97afc55b2dad3829aca57ad", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vset_lane.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvset_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvset_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvset_lane.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -16,6 +16,7 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0x88 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t0xf4, 0xf5, 0x55, 0xf7 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff0, 0xfff1, 0x66, 0xfff3 };\n+VECT_VAR_DECL(expected,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0x4840, 0xca80 };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0x4204cccd };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n@@ -41,6 +42,8 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t 0xfc, 0xfd, 0xdd, 0xff };\n VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t 0xfff4, 0xfff5, 0xee, 0xfff7 };\n+VECT_VAR_DECL(expected,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t   0xca00, 0x4480, 0xc900, 0xc880 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t   0xc1600000, 0x41333333 };\n \n@@ -61,6 +64,10 @@ void exec_vset_lane (void)\n \n   /* Initialize input \"vector\" from \"buffer\".  */\n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n@@ -75,6 +82,9 @@ void exec_vset_lane (void)\n   TEST_VSET_LANE(, uint, u, 64, 1, 0x88, 0);\n   TEST_VSET_LANE(, poly, p, 8, 8, 0x55, 6);\n   TEST_VSET_LANE(, poly, p, 16, 4, 0x66, 2);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VSET_LANE(, float, f, 16, 4, 8.5f, 2);\n+#endif\n   TEST_VSET_LANE(, float, f, 32, 2, 33.2f, 1);\n \n   TEST_VSET_LANE(q, int, s, 8, 16, 0x99, 15);\n@@ -87,6 +97,9 @@ void exec_vset_lane (void)\n   TEST_VSET_LANE(q, uint, u, 64, 2, 0x11, 1);\n   TEST_VSET_LANE(q, poly, p, 8, 16, 0xDD, 14);\n   TEST_VSET_LANE(q, poly, p, 16, 8, 0xEE, 6);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VSET_LANE(q, float, f, 16, 8, 4.5f, 5);\n+#endif\n   TEST_VSET_LANE(q, float, f, 32, 4, 11.2f, 3);\n \n   CHECK_RESULTS(TEST_MSG, \"\");"}, {"sha": "825d07dbf77fc54b5ef796b57a42c81d6dd6d611", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1_lane.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst1_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa754dc7b2672b011c955e51fd9986d95a56742/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst1_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst1_lane.c?ref=1fa754dc7b2672b011c955e51fd9986d95a56742", "patch": "@@ -16,6 +16,7 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf6, 0x33, 0x33, 0x33,\n \t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff2, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,16,4) [] = { 0xcb80, 0x3333, 0x3333, 0x3333 };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1700000, 0x33333333 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xff, 0x33, 0x33, 0x33,\n \t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n@@ -42,6 +43,8 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0xfa, 0x33, 0x33, 0x33,\n \t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff4, 0x3333, 0x3333, 0x3333,\n \t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,16,8) [] = { 0xc900, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t   0x3333, 0x3333, 0x3333, 0x3333 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1700000, 0x33333333,\n \t\t\t\t\t   0x33333333, 0x33333333 };\n \n@@ -69,6 +72,9 @@ void exec_vst1_lane (void)\n   TEST_VST1_LANE(, uint, u, 64, 1, 0);\n   TEST_VST1_LANE(, poly, p, 8, 8, 6);\n   TEST_VST1_LANE(, poly, p, 16, 4, 2);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VST1_LANE(, float, f, 16, 4, 1);\n+#endif\n   TEST_VST1_LANE(, float, f, 32, 2, 1);\n \n   TEST_VST1_LANE(q, int, s, 8, 16, 15);\n@@ -81,6 +87,9 @@ void exec_vst1_lane (void)\n   TEST_VST1_LANE(q, uint, u, 64, 2, 0);\n   TEST_VST1_LANE(q, poly, p, 8, 16, 10);\n   TEST_VST1_LANE(q, poly, p, 16, 8, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  TEST_VST1_LANE(q, float, f, 16, 8, 6);\n+#endif\n   TEST_VST1_LANE(q, float, f, 32, 4, 1);\n \n   CHECK_RESULTS(TEST_MSG, \"\");"}]}