{"sha": "72cb486456a39524c6f822327ba8654b0221ff4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJjYjQ4NjQ1NmEzOTUyNGM2ZjgyMjMyN2JhODY1NGIwMjIxZmY0Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-11T11:25:40Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-18T14:58:27Z"}, "message": "vectorizer: add _bb_vec_info::region_stmts and reverse_region_stmts\n\ngcc/ChangeLog:\n\n\t* coretypes.h (struct iterator_range): New type.\n\t* tree-vect-patterns.c (vect_determine_precisions): Use\n\trange-based iterator.\n\t(vect_pattern_recog): Likewise.\n\t* tree-vect-slp.c (_bb_vec_info):  Likewise.\n\t(_bb_vec_info::~_bb_vec_info): Likewise.\n\t(vect_slp_check_for_constructors): Likewise.\n\t* tree-vectorizer.h:Add new iterators\n\tand functions that use it.", "tree": {"sha": "23e189d3c2bbf03b63ddf6c07c31c29dd2684b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23e189d3c2bbf03b63ddf6c07c31c29dd2684b03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72cb486456a39524c6f822327ba8654b0221ff4c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7rgRMACgkQTcGC3A+n\nN4Vkqgf/RVkulc9IAlobntYCOtZ6iou7Q3AqLTx56xhEfrsiaIEM2S7d+tpfnMgA\nfU/LfuhxquYMDjDFgyiQnLXvW9O5UUM7kT/0/Ai40Y1sBHS5ynFd2wgfl6t4gWqX\neBTexZO0n9c8JFnnlctgaIhBogyk1r+VDNImzA88krZcCCuKmBdQcDo89f3pgX6z\nRJLsF9PWr7MfduZTd8nNg1u4eseM2AWWdUkqKcGrJ/hiUXTiNSqpb0uRZVZgmbmH\n5Q1IWubJweCGchbCjWsA6hvZO24ja55m7x5AilLL6w2DQTvkFOnaJM/oGu+5DZRi\nChIzHTamf4jQmuVkqDrX9TjoP/Aagw==\n=dcjL\n-----END PGP SIGNATURE-----", "payload": "tree 23e189d3c2bbf03b63ddf6c07c31c29dd2684b03\nparent bd0a89dcd8d13ad78950eb24eb3d1680f81ba95a\nauthor Martin Liska <mliska@suse.cz> 1591874740 +0200\ncommitter Martin Liska <mliska@suse.cz> 1592492307 +0200\n\nvectorizer: add _bb_vec_info::region_stmts and reverse_region_stmts\n\ngcc/ChangeLog:\n\n\t* coretypes.h (struct iterator_range): New type.\n\t* tree-vect-patterns.c (vect_determine_precisions): Use\n\trange-based iterator.\n\t(vect_pattern_recog): Likewise.\n\t* tree-vect-slp.c (_bb_vec_info):  Likewise.\n\t(_bb_vec_info::~_bb_vec_info): Likewise.\n\t(vect_slp_check_for_constructors): Likewise.\n\t* tree-vectorizer.h:Add new iterators\n\tand functions that use it.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72cb486456a39524c6f822327ba8654b0221ff4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72cb486456a39524c6f822327ba8654b0221ff4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72cb486456a39524c6f822327ba8654b0221ff4c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0a89dcd8d13ad78950eb24eb3d1680f81ba95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0a89dcd8d13ad78950eb24eb3d1680f81ba95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0a89dcd8d13ad78950eb24eb3d1680f81ba95a"}], "stats": {"total": 137, "additions": 109, "deletions": 28}, "files": [{"sha": "720f9f9c63f38b0f2c210f41bc3dd0a378afca1c", "filename": "gcc/coretypes.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=72cb486456a39524c6f822327ba8654b0221ff4c", "patch": "@@ -363,6 +363,23 @@ struct kv_pair\n template<typename T1, typename T2>\n using first_type = T1;\n \n+/* Iterator pair used for a collection iteration with range-based loops.  */\n+\n+template<typename T>\n+struct iterator_range\n+{\n+public:\n+  iterator_range (const T &begin, const T &end)\n+    : m_begin (begin), m_end (end) {}\n+\n+  T begin () const { return m_begin; }\n+  T end () const { return m_end; }\n+\n+private:\n+  T m_begin;\n+  T m_end;\n+};\n+\n #else\n \n struct _dont_use_rtx_here_;"}, {"sha": "03d50ec5c90b92594f77f7aaecdb0be6c049e006", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=72cb486456a39524c6f822327ba8654b0221ff4c", "patch": "@@ -5120,20 +5120,12 @@ vect_determine_precisions (vec_info *vinfo)\n   else\n     {\n       bb_vec_info bb_vinfo = as_a <bb_vec_info> (vinfo);\n-      gimple_stmt_iterator si = bb_vinfo->region_end;\n-      gimple *stmt;\n-      do\n+      for (gimple *stmt : bb_vinfo->reverse_region_stmts ())\n \t{\n-\t  if (!gsi_stmt (si))\n-\t    si = gsi_last_bb (bb_vinfo->bb);\n-\t  else\n-\t    gsi_prev (&si);\n-\t  stmt = gsi_stmt (si);\n \t  stmt_vec_info stmt_info = vinfo->lookup_stmt (stmt);\n \t  if (stmt_info && STMT_VINFO_VECTORIZABLE (stmt_info))\n \t    vect_determine_stmt_precisions (vinfo, stmt_info);\n \t}\n-      while (stmt != gsi_stmt (bb_vinfo->region_begin));\n     }\n }\n \n@@ -5492,10 +5484,8 @@ vect_pattern_recog (vec_info *vinfo)\n   else\n     {\n       bb_vec_info bb_vinfo = as_a <bb_vec_info> (vinfo);\n-      for (si = bb_vinfo->region_begin;\n-\t   gsi_stmt (si) != gsi_stmt (bb_vinfo->region_end); gsi_next (&si))\n+      for (gimple *stmt : bb_vinfo->region_stmts ())\n \t{\n-\t  gimple *stmt = gsi_stmt (si);\n \t  stmt_vec_info stmt_info = bb_vinfo->lookup_stmt (stmt);\n \t  if (!stmt_info || !STMT_VINFO_VECTORIZABLE (stmt_info))\n \t    continue;"}, {"sha": "98b5542806f6fdbaa121817b2d127044acd0879e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=72cb486456a39524c6f822327ba8654b0221ff4c", "patch": "@@ -2588,12 +2588,8 @@ _bb_vec_info::_bb_vec_info (gimple_stmt_iterator region_begin_in,\n     region_begin (region_begin_in),\n     region_end (region_end_in)\n {\n-  gimple_stmt_iterator gsi;\n-\n-  for (gsi = region_begin; gsi_stmt (gsi) != gsi_stmt (region_end);\n-       gsi_next (&gsi))\n+  for (gimple *stmt : this->region_stmts ())\n     {\n-      gimple *stmt = gsi_stmt (gsi);\n       gimple_set_uid (stmt, 0);\n       if (is_gimple_debug (stmt))\n \tcontinue;\n@@ -2609,10 +2605,9 @@ _bb_vec_info::_bb_vec_info (gimple_stmt_iterator region_begin_in,\n \n _bb_vec_info::~_bb_vec_info ()\n {\n-  for (gimple_stmt_iterator si = region_begin;\n-       gsi_stmt (si) != gsi_stmt (region_end); gsi_next (&si))\n+  for (gimple *stmt : this->region_stmts ())\n     /* Reset region marker.  */\n-    gimple_set_uid (gsi_stmt (si), -1);\n+    gimple_set_uid (stmt, -1);\n \n   bb->aux = NULL;\n }\n@@ -3050,24 +3045,21 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo)\n static void\n vect_slp_check_for_constructors (bb_vec_info bb_vinfo)\n {\n-  gimple_stmt_iterator gsi;\n-\n-  for (gsi = bb_vinfo->region_begin;\n-       gsi_stmt (gsi) != gsi_stmt (bb_vinfo->region_end); gsi_next (&gsi))\n+  for (gimple *stmt : bb_vinfo->region_stmts ())\n     {\n-      gassign *stmt = dyn_cast <gassign *> (gsi_stmt (gsi));\n-      if (!stmt || gimple_assign_rhs_code (stmt) != CONSTRUCTOR)\n+      gassign *assign = dyn_cast<gassign *> (stmt);\n+      if (!assign || gimple_assign_rhs_code (assign) != CONSTRUCTOR)\n \tcontinue;\n \n-      tree rhs = gimple_assign_rhs1 (stmt);\n+      tree rhs = gimple_assign_rhs1 (assign);\n       if (!VECTOR_TYPE_P (TREE_TYPE (rhs))\n \t  || maybe_ne (TYPE_VECTOR_SUBPARTS (TREE_TYPE (rhs)),\n \t\t       CONSTRUCTOR_NELTS (rhs))\n \t  || VECTOR_TYPE_P (TREE_TYPE (CONSTRUCTOR_ELT (rhs, 0)->value))\n \t  || uniform_vector_p (rhs))\n \tcontinue;\n \n-      stmt_vec_info stmt_info = bb_vinfo->lookup_stmt (stmt);\n+      stmt_vec_info stmt_info = bb_vinfo->lookup_stmt (assign);\n       BB_VINFO_GROUPED_STORES (bb_vinfo).safe_push (stmt_info);\n     }\n }"}, {"sha": "32feec3e24b45c821d81beb70ed150deefcf4744", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72cb486456a39524c6f822327ba8654b0221ff4c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=72cb486456a39524c6f822327ba8654b0221ff4c", "patch": "@@ -792,9 +792,91 @@ loop_vec_info_for_loop (class loop *loop)\n typedef class _bb_vec_info : public vec_info\n {\n public:\n+\n+  /* GIMPLE statement iterator going from region_begin to region_end.  */\n+\n+  struct const_iterator\n+  {\n+    const_iterator (gimple_stmt_iterator _gsi) : gsi (_gsi) {}\n+\n+    const const_iterator &\n+    operator++ ()\n+    {\n+      gsi_next (&gsi); return *this;\n+    }\n+\n+    gimple *operator* () const { return gsi_stmt (gsi); }\n+\n+    bool\n+    operator== (const const_iterator &other) const\n+    {\n+      return gsi_stmt (gsi) == gsi_stmt (other.gsi);\n+    }\n+\n+    bool\n+    operator!= (const const_iterator &other) const\n+    {\n+      return !(*this == other);\n+    }\n+\n+    gimple_stmt_iterator gsi;\n+  };\n+\n+  /* GIMPLE statement iterator going from region_end to region_begin.  */\n+\n+  struct const_reverse_iterator\n+  {\n+    const_reverse_iterator (gimple_stmt_iterator _gsi) : gsi (_gsi) {}\n+\n+    const const_reverse_iterator &\n+    operator++ ()\n+    {\n+      gsi_prev (&gsi); return *this;\n+    }\n+\n+    gimple *operator* () const { return gsi_stmt (gsi); }\n+\n+    bool\n+    operator== (const const_reverse_iterator &other) const\n+    {\n+      return gsi_stmt (gsi) == gsi_stmt (other.gsi);\n+    }\n+\n+    bool\n+    operator!= (const const_reverse_iterator &other) const\n+    {\n+      return !(*this == other);\n+    }\n+\n+    gimple_stmt_iterator gsi;\n+  };\n+\n   _bb_vec_info (gimple_stmt_iterator, gimple_stmt_iterator, vec_info_shared *);\n   ~_bb_vec_info ();\n \n+  /* Returns iterator_range for range-based loop.  */\n+\n+  iterator_range<const_iterator>\n+  region_stmts ()\n+  {\n+    return iterator_range<const_iterator> (region_begin, region_end);\n+  }\n+\n+  /* Returns iterator_range for range-based loop in a reverse order.  */\n+\n+  iterator_range<const_reverse_iterator>\n+  reverse_region_stmts ()\n+  {\n+    const_reverse_iterator begin = region_end;\n+    if (*begin == NULL)\n+      begin = const_reverse_iterator (gsi_last_bb (region_end.bb));\n+    else\n+      ++begin;\n+\n+    const_reverse_iterator end = region_begin;\n+    return iterator_range<const_reverse_iterator> (begin, ++end);\n+  }\n+\n   basic_block bb;\n   gimple_stmt_iterator region_begin;\n   gimple_stmt_iterator region_end;"}]}