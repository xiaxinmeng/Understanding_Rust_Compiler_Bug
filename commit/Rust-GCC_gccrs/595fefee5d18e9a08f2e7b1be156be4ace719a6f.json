{"sha": "595fefee5d18e9a08f2e7b1be156be4ace719a6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1ZmVmZWU1ZDE4ZTlhMDhmMmU3YjFiZTE1NmJlNGFjZTcxOWE2Zg==", "commit": {"author": {"name": "Matthew Gretton-Dann", "email": "matthew.gretton-dann@arm.com", "date": "2012-10-18T10:49:23Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-10-18T10:49:23Z"}, "message": "Add basic armv8-a support\n\n\n2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n\n\t* config/arm/lib1funcs.S (__ARM_ARCH__): Define for ARMv8-A.\n\n2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n\n        * gcc.target/arm/ftest-armv8a-arm.c: New testcase.\n        * gcc.target/arm/ftest-armv8a-thumb.c: Likewise.\n        * gcc.target/arm/ftest-support-arm.h (feature_matrix): Add\n        ARMv8-A row.\n        * gcc.target/arm/ftest-support-thumb.h (feature_matrix):\n        Likewise.\n        * gcc.target/arm/ftest-support.h (architecture): Add ARMv8-A.\n        * lib/target-supports.exp: Add ARMv8-A architecture expectation.\n\n2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        * config.gcc: Add support for ARMv8 for arm*-*-* targets.\n        * config/arm/arm-arches.def: Add armv8-a\n        * config/arm/arm-fpus.def: Add fp-armv8, neon-fp-armv8,\n        crypto-neon-fp-armv8.  Add crypto field.\n        * config/arm/arm-tables.opt: Regenerate.\n        * config/arm/arm.c (FL_FOR_ARCH8A): Likewise.\n        (arm_arch8): New global variable.\n        (ARM_FPU): Add crypto parameter.\n        (arm_option_override): Set arm_arch8, update comments.\n        * config/arm/arm.h (TARGET_CRYPTO): New macro.\n        (arm_fpu_desc): Add crypto field.\n        (base_architecture): Add ARMv8 entry.\n        (arm_arch8): New variable declaration.\n        * config/arm/bpabi.h: ARMv8 supports BE8.\n        * doc/invoke.texi: Document ARMv8 options.\n\n\n\n\n\n\nCo-Authored-By: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\n\nFrom-SVN: r192558", "tree": {"sha": "fc46d395d86fd64a67f721fb90ce21b242b75e21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc46d395d86fd64a67f721fb90ce21b242b75e21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/595fefee5d18e9a08f2e7b1be156be4ace719a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595fefee5d18e9a08f2e7b1be156be4ace719a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595fefee5d18e9a08f2e7b1be156be4ace719a6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595fefee5d18e9a08f2e7b1be156be4ace719a6f/comments", "author": {"login": "matt-gretton-dann", "id": 53790742, "node_id": "MDQ6VXNlcjUzNzkwNzQy", "avatar_url": "https://avatars.githubusercontent.com/u/53790742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-gretton-dann", "html_url": "https://github.com/matt-gretton-dann", "followers_url": "https://api.github.com/users/matt-gretton-dann/followers", "following_url": "https://api.github.com/users/matt-gretton-dann/following{/other_user}", "gists_url": "https://api.github.com/users/matt-gretton-dann/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-gretton-dann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-gretton-dann/subscriptions", "organizations_url": "https://api.github.com/users/matt-gretton-dann/orgs", "repos_url": "https://api.github.com/users/matt-gretton-dann/repos", "events_url": "https://api.github.com/users/matt-gretton-dann/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-gretton-dann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4"}], "stats": {"total": 342, "additions": 241, "deletions": 101}, "files": [{"sha": "f94b861c38a79ff7b911e3e821e01e118a248c96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -1,3 +1,22 @@\n+2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+        * config.gcc: Add support for ARMv8 for arm*-*-* targets.\n+        * config/arm/arm-arches.def: Add armv8-a\n+        * config/arm/arm-fpus.def: Add fp-armv8, neon-fp-armv8,\n+        crypto-neon-fp-armv8.  Add crypto field.\n+        * config/arm/arm-tables.opt: Regenerate.\n+        * config/arm/arm.c (FL_FOR_ARCH8A): Likewise.\n+        (arm_arch8): New global variable.\n+        (ARM_FPU): Add crypto parameter.\n+        (arm_option_override): Set arm_arch8, update comments.\n+        * config/arm/arm.h (TARGET_CRYPTO): New macro.\n+        (arm_fpu_desc): Add crypto field.\n+        (base_architecture): Add ARMv8 entry.\n+        (arm_arch8): New variable declaration.\n+        * config/arm/bpabi.h: ARMv8 supports BE8.\n+        * doc/invoke.texi: Document ARMv8 options.\n+\n 2012-10-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/54893"}, {"sha": "afefd45c83fb6db32470173df50342a6ee2d8978", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -3040,7 +3040,7 @@ case \"${target}\" in\n \t\t\"\" \\\n \t\t| armv[23456] | armv2a | armv3m | armv4t | armv5t \\\n \t\t| armv5te | armv6j |armv6k | armv6z | armv6zk | armv6-m \\\n-\t\t| armv7 | armv7-a | armv7-r | armv7-m \\\n+\t\t| armv7 | armv7-a | armv7-r | armv7-m | armv8-a \\\n \t\t| iwmmxt | ep9312)\n \t\t\t# OK\n \t\t\t;;\n@@ -3066,7 +3066,8 @@ case \"${target}\" in\n \t\t| vfp | vfp3 | vfpv3 \\\n \t\t| vfpv3-fp16 | vfpv3-d16 | vfpv3-d16-fp16 | vfpv3xd \\\n \t\t| vfpv3xd-fp16 | neon | neon-fp16 | vfpv4 | vfpv4-d16 \\\n-\t\t| fpv4-sp-d16 | neon-vfpv4)\n+\t\t| fpv4-sp-d16 | neon-vfpv4 | fp-arm-v8 | neon-fp-armv8 \\\n+                | crypto-neon-fp-armv8)\n \t\t\t# OK\n \t\t\t;;\n \t\t*)"}, {"sha": "d0b968f88a449cea9118e5fd1115df506ab578c8", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -55,5 +55,6 @@ ARM_ARCH(\"armv7-a\", cortexa8,\t7A,  FL_CO_PROC |\t      FL_FOR_ARCH7A)\n ARM_ARCH(\"armv7-r\", cortexr4,\t7R,  FL_CO_PROC |\t      FL_FOR_ARCH7R)\n ARM_ARCH(\"armv7-m\", cortexm3,\t7M,  FL_CO_PROC |\t      FL_FOR_ARCH7M)\n ARM_ARCH(\"armv7e-m\", cortexm4,  7EM, FL_CO_PROC |\t      FL_FOR_ARCH7EM)\n+ARM_ARCH(\"armv8-a\", cortexa15,  8A,  FL_CO_PROC |             FL_FOR_ARCH8A)\n ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)\n ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2)"}, {"sha": "377e5e14552d9a45e9d29c71e638cfdff7b5db62", "filename": "gcc/config/arm/arm-fpus.def", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm-fpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm-fpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fpus.def?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -21,24 +21,28 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16)\n+      ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16, CRYPTO)\n \n    The arguments are the fields of struct arm_fpu_desc.\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_FPU(\"vfp\",\t\tARM_FP_MODEL_VFP, 2, VFP_REG_D16, false, false)\n-ARM_FPU(\"vfpv3\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false)\n-ARM_FPU(\"vfpv3-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, true)\n-ARM_FPU(\"vfpv3-d16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, false)\n-ARM_FPU(\"vfpv3-d16-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, true)\n-ARM_FPU(\"vfpv3xd\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, false)\n-ARM_FPU(\"vfpv3xd-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, true)\n-ARM_FPU(\"neon\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true , false)\n-ARM_FPU(\"neon-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true, true)\n-ARM_FPU(\"vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, false, true)\n-ARM_FPU(\"vfpv4-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D16, false, true)\n-ARM_FPU(\"fpv4-sp-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_SINGLE, false, true)\n-ARM_FPU(\"neon-vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, true, true)\n+ARM_FPU(\"vfp\",\t\tARM_FP_MODEL_VFP, 2, VFP_REG_D16, false, false, false)\n+ARM_FPU(\"vfpv3\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false, false)\n+ARM_FPU(\"vfpv3-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, true, false)\n+ARM_FPU(\"vfpv3-d16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, false, false)\n+ARM_FPU(\"vfpv3-d16-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, true, false)\n+ARM_FPU(\"vfpv3xd\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, false, false)\n+ARM_FPU(\"vfpv3xd-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, true, false)\n+ARM_FPU(\"neon\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true , false, false)\n+ARM_FPU(\"neon-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true, true, false)\n+ARM_FPU(\"vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, false, true, false)\n+ARM_FPU(\"vfpv4-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D16, false, true, false)\n+ARM_FPU(\"fpv4-sp-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_SINGLE, false, true, false)\n+ARM_FPU(\"neon-vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, true, true, false)\n+ARM_FPU(\"fp-armv8\",\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, false, true, false)\n+ARM_FPU(\"neon-fp-armv8\",ARM_FP_MODEL_VFP, 8, VFP_REG_D32, true, true, false)\n+ARM_FPU(\"crypto-neon-fp-armv8\",\n+\t\t\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, true, true, true)\n /* Compatibility aliases.  */\n-ARM_FPU(\"vfp3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false)\n+ARM_FPU(\"vfp3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false, false)"}, {"sha": "1616d9da27e399d383ca03adf8663b7d0991a0bc", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -347,10 +347,13 @@ EnumValue\n Enum(arm_arch) String(armv7e-m) Value(22)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(23)\n+Enum(arm_arch) String(armv8-a) Value(23)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(24)\n+Enum(arm_arch) String(iwmmxt) Value(24)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt2) Value(25)\n \n Enum\n Name(arm_fpu) Type(int)\n@@ -396,5 +399,14 @@ EnumValue\n Enum(arm_fpu) String(neon-vfpv4) Value(12)\n \n EnumValue\n-Enum(arm_fpu) String(vfp3) Value(13)\n+Enum(arm_fpu) String(fp-armv8) Value(13)\n+\n+EnumValue\n+Enum(arm_fpu) String(neon-fp-armv8) Value(14)\n+\n+EnumValue\n+Enum(arm_fpu) String(crypto-neon-fp-armv8) Value(15)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfp3) Value(16)\n "}, {"sha": "165dfe20450a295aa30af4fe914b7ca388a3284c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -686,6 +686,7 @@ static int thumb_call_reg_needed;\n \t\t\t\t\t architecture.  */\n #define FL_ARCH7      (1 << 22)       /* Architecture 7.  */\n #define FL_ARM_DIV    (1 << 23)\t      /* Hardware divide (ARM mode).  */\n+#define FL_ARCH8      (1 << 24)       /* Architecture 8.  */\n \n #define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n #define FL_IWMMXT2    (1 << 30)       /* \"Intel Wireless MMX2 technology\".  */\n@@ -716,6 +717,8 @@ static int thumb_call_reg_needed;\n #define FL_FOR_ARCH7R\t(FL_FOR_ARCH7A | FL_THUMB_DIV)\n #define FL_FOR_ARCH7M\t(FL_FOR_ARCH7 | FL_THUMB_DIV)\n #define FL_FOR_ARCH7EM  (FL_FOR_ARCH7M | FL_ARCH7EM)\n+#define FL_FOR_ARCH8A\t(FL_FOR_ARCH7 | FL_ARCH6K | FL_ARCH8 | FL_THUMB_DIV \\\n+\t\t\t | FL_ARM_DIV | FL_NOTM)\n \n /* The bits in this mask specify which\n    instructions we are allowed to generate.  */\n@@ -765,6 +768,9 @@ int arm_arch_notm = 0;\n /* Nonzero if instructions present in ARMv7E-M can be used.  */\n int arm_arch7em = 0;\n \n+/* Nonzero if instructions present in ARMv8 can be used.  */\n+int arm_arch8 = 0;\n+\n /* Nonzero if this chip can benefit from load scheduling.  */\n int arm_ld_sched = 0;\n \n@@ -1059,8 +1065,8 @@ char arm_arch_name[] = \"__ARM_ARCH_0UNK__\";\n \n static const struct arm_fpu_desc all_fpus[] =\n {\n-#define ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16) \\\n-  { NAME, MODEL, REV, VFP_REGS, NEON, FP16 },\n+#define ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16, CRYPTO) \\\n+  { NAME, MODEL, REV, VFP_REGS, NEON, FP16, CRYPTO },\n #include \"arm-fpus.def\"\n #undef ARM_FPU\n };\n@@ -1743,6 +1749,7 @@ arm_option_override (void)\n   arm_arch6m = arm_arch6 && !arm_arch_notm;\n   arm_arch7 = (insn_flags & FL_ARCH7) != 0;\n   arm_arch7em = (insn_flags & FL_ARCH7EM) != 0;\n+  arm_arch8 = (insn_flags & FL_ARCH8) != 0;\n   arm_arch_thumb2 = (insn_flags & FL_THUMB2) != 0;\n   arm_arch_xscale = (insn_flags & FL_XSCALE) != 0;\n \n@@ -1959,6 +1966,7 @@ arm_option_override (void)\n   /* Enable -munaligned-access by default for\n      - all ARMv6 architecture-based processors\n      - ARMv7-A, ARMv7-R, and ARMv7-M architecture-based processors.\n+     - ARMv8 architecture-base processors.\n \n      Disable -munaligned-access by default for\n      - all pre-ARMv6 architecture-based processors"}, {"sha": "4ac5de70862f13a47f38d10f424c7843f3478ce6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -296,6 +296,9 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* FPU supports fused-multiply-add operations.  */\n #define TARGET_FMA (TARGET_VFP && arm_fpu_desc->rev >= 4)\n \n+/* FPU supports Crypto extensions.  */\n+#define TARGET_CRYPTO (TARGET_VFP && arm_fpu_desc->crypto)\n+\n /* FPU supports Neon instructions.  The setting of this macro gets\n    revealed via __ARM_NEON__ so we add extra guards upon TARGET_32BIT\n    and TARGET_HARD_FLOAT to ensure that NEON instructions are\n@@ -400,6 +403,7 @@ extern const struct arm_fpu_desc\n   enum vfp_reg_type regs;\n   int neon;\n   int fp16;\n+  int crypto;\n } *arm_fpu_desc;\n \n /* Which floating point hardware to schedule for.  */\n@@ -443,7 +447,8 @@ enum base_architecture\n   BASE_ARCH_7A = 7,\n   BASE_ARCH_7R = 7,\n   BASE_ARCH_7M = 7,\n-  BASE_ARCH_7EM = 7\n+  BASE_ARCH_7EM = 7,\n+  BASE_ARCH_8A = 8\n };\n \n /* The major revision number of the ARM Architecture implemented by the target.  */\n@@ -482,6 +487,9 @@ extern int arm_arch_notm;\n /* Nonzero if instructions present in ARMv7E-M can be used.  */\n extern int arm_arch7em;\n \n+/* Nonzero if this chip supports the ARM Architecture 8 extensions.  */\n+extern int arm_arch8;\n+\n /* Nonzero if this chip can benefit from load scheduling.  */\n extern int arm_ld_sched;\n "}, {"sha": "67e17a1b08f1a40122bef49272da1aeb1917538a", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -64,6 +64,7 @@\n    |march=armv7-m|mcpu=cortex-m3                        \\\n    |march=armv7e-m|mcpu=cortex-m4                       \\\n    |march=armv6-m|mcpu=cortex-m0                        \\\n+   |march=armv8-a\t\t\t\t\t\\\n    :%{!r:--be8}}}\"\n #else\n #define BE8_LINK_SPEC \\\n@@ -74,6 +75,7 @@\n    |march=armv7-m|mcpu=cortex-m3                        \\\n    |march=armv7e-m|mcpu=cortex-m4                       \\\n    |march=armv6-m|mcpu=cortex-m0                        \\\n+   |march=armv8-a\t\t\t\t\t\\\n    :%{!r:--be8}}}\"\n #endif\n "}, {"sha": "14e6264aeaa5effa9835676dd7f8fc40035838c6", "filename": "gcc/doc/arm-neon-intrinsics.texi", "status": "modified", "additions": 106, "deletions": 74, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-neon-intrinsics.texi?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -972,6 +972,38 @@\n \n \n \n+@subsubsection Fused-multiply-accumulate\n+\n+@itemize @bullet\n+@item float32x2_t vfma_f32 (float32x2_t, float32x2_t, float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vfma.f32 @var{d0}, @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item float32x4_t vfmaq_f32 (float32x4_t, float32x4_t, float32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vfma.f32 @var{q0}, @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+\n+\n+@subsubsection Fused-multiply-subtract\n+\n+@itemize @bullet\n+@item float32x2_t vfms_f32 (float32x2_t, float32x2_t, float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vfms.f32 @var{d0}, @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item float32x4_t vfmsq_f32 (float32x4_t, float32x4_t, float32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vfms.f32 @var{q0}, @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+\n+\n @subsubsection Subtraction\n \n @itemize @bullet\n@@ -1496,24 +1528,6 @@\n \n @subsubsection Comparison (greater-than-or-equal-to)\n \n-@itemize @bullet\n-@item uint32x2_t vcge_u32 (uint32x2_t, uint32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{d0}, @var{d0}, @var{d0}}\n-@end itemize\n-\n-\n-@itemize @bullet\n-@item uint16x4_t vcge_u16 (uint16x4_t, uint16x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{d0}, @var{d0}, @var{d0}}\n-@end itemize\n-\n-\n-@itemize @bullet\n-@item uint8x8_t vcge_u8 (uint8x8_t, uint8x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{d0}, @var{d0}, @var{d0}}\n-@end itemize\n-\n-\n @itemize @bullet\n @item uint32x2_t vcge_s32 (int32x2_t, int32x2_t)\n @*@emph{Form of expected instruction(s):} @code{vcge.s32 @var{d0}, @var{d0}, @var{d0}}\n@@ -1539,20 +1553,20 @@\n \n \n @itemize @bullet\n-@item uint32x4_t vcgeq_u32 (uint32x4_t, uint32x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{q0}, @var{q0}, @var{q0}}\n+@item uint32x2_t vcge_u32 (uint32x2_t, uint32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vcgeq_u16 (uint16x8_t, uint16x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{q0}, @var{q0}, @var{q0}}\n+@item uint16x4_t vcge_u16 (uint16x4_t, uint16x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vcgeq_u8 (uint8x16_t, uint8x16_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{q0}, @var{q0}, @var{q0}}\n+@item uint8x8_t vcge_u8 (uint8x8_t, uint8x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -1580,28 +1594,28 @@\n @end itemize\n \n \n-\n-\n-@subsubsection Comparison (less-than-or-equal-to)\n-\n @itemize @bullet\n-@item uint32x2_t vcle_u32 (uint32x2_t, uint32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{d0}, @var{d0}, @var{d0}}\n+@item uint32x4_t vcgeq_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vcle_u16 (uint16x4_t, uint16x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{d0}, @var{d0}, @var{d0}}\n+@item uint16x8_t vcgeq_u16 (uint16x8_t, uint16x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vcle_u8 (uint8x8_t, uint8x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{d0}, @var{d0}, @var{d0}}\n+@item uint8x16_t vcgeq_u8 (uint8x16_t, uint8x16_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n+\n+\n+@subsubsection Comparison (less-than-or-equal-to)\n+\n @itemize @bullet\n @item uint32x2_t vcle_s32 (int32x2_t, int32x2_t)\n @*@emph{Form of expected instruction(s):} @code{vcge.s32 @var{d0}, @var{d0}, @var{d0}}\n@@ -1627,20 +1641,20 @@\n \n \n @itemize @bullet\n-@item uint32x4_t vcleq_u32 (uint32x4_t, uint32x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{q0}, @var{q0}, @var{q0}}\n+@item uint32x2_t vcle_u32 (uint32x2_t, uint32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vcleq_u16 (uint16x8_t, uint16x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{q0}, @var{q0}, @var{q0}}\n+@item uint16x4_t vcle_u16 (uint16x4_t, uint16x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vcleq_u8 (uint8x16_t, uint8x16_t)\n-@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{q0}, @var{q0}, @var{q0}}\n+@item uint8x8_t vcle_u8 (uint8x8_t, uint8x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -1668,28 +1682,28 @@\n @end itemize\n \n \n-\n-\n-@subsubsection Comparison (greater-than)\n-\n @itemize @bullet\n-@item uint32x2_t vcgt_u32 (uint32x2_t, uint32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{d0}, @var{d0}, @var{d0}}\n+@item uint32x4_t vcleq_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u32 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vcgt_u16 (uint16x4_t, uint16x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{d0}, @var{d0}, @var{d0}}\n+@item uint16x8_t vcleq_u16 (uint16x8_t, uint16x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u16 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vcgt_u8 (uint8x8_t, uint8x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{d0}, @var{d0}, @var{d0}}\n+@item uint8x16_t vcleq_u8 (uint8x16_t, uint8x16_t)\n+@*@emph{Form of expected instruction(s):} @code{vcge.u8 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n+\n+\n+@subsubsection Comparison (greater-than)\n+\n @itemize @bullet\n @item uint32x2_t vcgt_s32 (int32x2_t, int32x2_t)\n @*@emph{Form of expected instruction(s):} @code{vcgt.s32 @var{d0}, @var{d0}, @var{d0}}\n@@ -1715,20 +1729,20 @@\n \n \n @itemize @bullet\n-@item uint32x4_t vcgtq_u32 (uint32x4_t, uint32x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{q0}, @var{q0}, @var{q0}}\n+@item uint32x2_t vcgt_u32 (uint32x2_t, uint32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vcgtq_u16 (uint16x8_t, uint16x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{q0}, @var{q0}, @var{q0}}\n+@item uint16x4_t vcgt_u16 (uint16x4_t, uint16x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vcgtq_u8 (uint8x16_t, uint8x16_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{q0}, @var{q0}, @var{q0}}\n+@item uint8x8_t vcgt_u8 (uint8x8_t, uint8x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -1756,28 +1770,28 @@\n @end itemize\n \n \n-\n-\n-@subsubsection Comparison (less-than)\n-\n @itemize @bullet\n-@item uint32x2_t vclt_u32 (uint32x2_t, uint32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{d0}, @var{d0}, @var{d0}}\n+@item uint32x4_t vcgtq_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vclt_u16 (uint16x4_t, uint16x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{d0}, @var{d0}, @var{d0}}\n+@item uint16x8_t vcgtq_u16 (uint16x8_t, uint16x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vclt_u8 (uint8x8_t, uint8x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{d0}, @var{d0}, @var{d0}}\n+@item uint8x16_t vcgtq_u8 (uint8x16_t, uint8x16_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{q0}, @var{q0}, @var{q0}}\n @end itemize\n \n \n+\n+\n+@subsubsection Comparison (less-than)\n+\n @itemize @bullet\n @item uint32x2_t vclt_s32 (int32x2_t, int32x2_t)\n @*@emph{Form of expected instruction(s):} @code{vcgt.s32 @var{d0}, @var{d0}, @var{d0}}\n@@ -1803,20 +1817,20 @@\n \n \n @itemize @bullet\n-@item uint32x4_t vcltq_u32 (uint32x4_t, uint32x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{q0}, @var{q0}, @var{q0}}\n+@item uint32x2_t vclt_u32 (uint32x2_t, uint32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vcltq_u16 (uint16x8_t, uint16x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{q0}, @var{q0}, @var{q0}}\n+@item uint16x4_t vclt_u16 (uint16x4_t, uint16x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vcltq_u8 (uint8x16_t, uint8x16_t)\n-@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{q0}, @var{q0}, @var{q0}}\n+@item uint8x8_t vclt_u8 (uint8x8_t, uint8x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -1844,6 +1858,24 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item uint32x4_t vcltq_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u32 @var{q0}, @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vcltq_u16 (uint16x8_t, uint16x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u16 @var{q0}, @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vcltq_u8 (uint8x16_t, uint8x16_t)\n+@*@emph{Form of expected instruction(s):} @code{vcgt.u8 @var{q0}, @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n \n \n @subsubsection Comparison (absolute greater-than-or-equal-to)\n@@ -4810,13 +4842,13 @@\n \n @itemize @bullet\n @item uint64_t vgetq_lane_u64 (uint64x2_t, const int)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{r0}, @var{r0}, @var{d0}}\n+@*@emph{Form of expected instruction(s):} @code{vmov @var{r0}, @var{r0}, @var{d0}} @emph{or} @code{fmrrd @var{r0}, @var{r0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64_t vgetq_lane_s64 (int64x2_t, const int)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{r0}, @var{r0}, @var{d0}}\n+@*@emph{Form of expected instruction(s):} @code{vmov @var{r0}, @var{r0}, @var{d0}} @emph{or} @code{fmrrd @var{r0}, @var{r0}, @var{d0}}\n @end itemize\n \n "}, {"sha": "f8c92306c1aa2b78d34cb7f955c4a310cbae5cdf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -11004,6 +11004,7 @@ of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n @samp{armv6}, @samp{armv6j},\n @samp{armv6t2}, @samp{armv6z}, @samp{armv6zk}, @samp{armv6-m},\n @samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m},\n+@samp{armv8-a},\n @samp{iwmmxt}, @samp{iwmmxt2}, @samp{ep9312}.\n \n @option{-march=native} causes the compiler to auto-detect the architecture\n@@ -11017,7 +11018,8 @@ This specifies what floating-point hardware (or hardware emulation) is\n available on the target.  Permissible names are: @samp{vfp}, @samp{vfpv3},\n @samp{vfpv3-fp16}, @samp{vfpv3-d16}, @samp{vfpv3-d16-fp16}, @samp{vfpv3xd},\n @samp{vfpv3xd-fp16}, @samp{neon}, @samp{neon-fp16}, @samp{vfpv4},\n-@samp{vfpv4-d16}, @samp{fpv4-sp-d16} and @samp{neon-vfpv4}.\n+@samp{vfpv4-d16}, @samp{fpv4-sp-d16}, @samp{neon-vfpv4},\n+@samp{fp-armv8}, @samp{neon-fp-armv8}, and @samp{crypto-neon-fp-armv8}.\n \n If @option{-msoft-float} is specified this specifies the format of\n floating-point values."}, {"sha": "45b6624f8cf0da1cf2844b38c0ffa2a1f825ed9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -1,3 +1,14 @@\n+2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+        * gcc.target/arm/ftest-armv8a-arm.c: New testcase.\n+        * gcc.target/arm/ftest-armv8a-thumb.c: Likewise.\n+        * gcc.target/arm/ftest-support-arm.h (feature_matrix): Add\n+        ARMv8-A row.\n+        * gcc.target/arm/ftest-support-thumb.h (feature_matrix):\n+        Likewise.\n+        * gcc.target/arm/ftest-support.h (architecture): Add ARMv8-A.\n+        * lib/target-supports.exp: Add ARMv8-A architecture expectation.\n+\n 2012-10-16  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.target/i386/l_fma_float_?.c: Update."}, {"sha": "1fab3c8a49793bb0135e1ec1532c39b8f938abb8", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv8a-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv8a-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv8a-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv8a-arm.c?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v8a_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v8a } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V8A);\n+}\n+"}, {"sha": "c57f4cec2b3db7d912f92359fe16d818021179ff", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv8a-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv8a-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv8a-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv8a-thumb.c?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v8a_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v8a } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V8A);\n+}\n+"}, {"sha": "2592074328226db54e763f336d6f599bb7b935cd", "filename": "gcc/testsuite/gcc.target/arm/ftest-support-arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-arm.h?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -26,4 +26,5 @@ int feature_matrix[ARCH_COUNT][NUM_FEATURES] =\n    {7, 1, 2, 'A', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7A.  */\n    {7, 1, 2, 'R', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7R.  */\n    {7, 0, 2, 'M', 1, 7,  1, 0, 0, 1, 1},  /* ARCH_V7M.  */\n-   {7, 0, 2, 'M', 1, 7,  1, 1, 0, 1, 1}}; /* ARCH_V7EM.  */\n+   {7, 0, 2, 'M', 1, 7,  1, 1, 0, 1, 1},  /* ARCH_V7EM.  */\n+   {8, 1, 2, 'A', 1, 15, 1, 1, 1, 1, 1}}; /* ARCH_V8A.  */"}, {"sha": "a587999687a352c6180b53b8372985e422791bb9", "filename": "gcc/testsuite/gcc.target/arm/ftest-support-thumb.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-thumb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-thumb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-thumb.h?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -26,4 +26,5 @@ int feature_matrix[ARCH_COUNT][NUM_FEATURES] =\n    {7, 1, 2, 'A', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7A.  */\n    {7, 1, 2, 'R', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7R.  */\n    {7, 0, 2, 'M', 1, 7,  1, 0, 0, 1, 1},  /* ARCH_V7M.  */\n-   {7, 0, 2, 'M', 1, 7,  1, 1, 1, 1, 1}}; /* ARCH_V7EM.  */\n+   {7, 0, 2, 'M', 1, 7,  1, 1, 1, 1, 1},  /* ARCH_V7EM.  */\n+   {8, 1, 2, 'A', 1, 15, 1, 1, 1, 1, 1}}; /* ARCH_V8A.  */"}, {"sha": "5983760ee1463a03a3cab3fa3972be6678a2b613", "filename": "gcc/testsuite/gcc.target/arm/ftest-support.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support.h?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -22,6 +22,7 @@ enum architecture {\n   ARCH_V7R,\n   ARCH_V7M,\n   ARCH_V7EM,\n+  ARCH_V8A,\n   ARCH_COUNT\n };\n "}, {"sha": "2ab630e4d5beb680fb214628d4b46e567678dd5d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -2246,7 +2246,8 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \t\t\t\t     v7a \"-march=armv7-a\" __ARM_ARCH_7A__\n \t\t\t\t     v7r \"-march=armv7-r\" __ARM_ARCH_7R__\n \t\t\t\t     v7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n-\t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__ } {\n+\t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__\n+\t\t\t\t     v8a \"-march=armv8-a\" __ARM_ARCH_8A__ } {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    if { [ string match \"*-marm*\" \"FLAG\" ] &&"}, {"sha": "b8d2af7835999252c0c4311fcf45f502661e878d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -1,3 +1,7 @@\n+2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+\t* config/arm/lib1funcs.S (__ARM_ARCH__): Define for ARMv8-A.\n+\n 2012-10-15  Matthias Klose  <doko@ubuntu.com>\n \n \t* config.host: Match arm*-*-linux-* for ARM Linux/GNU."}, {"sha": "ac3c995a85f20c6fca530ef40cfac6b76c1d344b", "filename": "libgcc/config/arm/lib1funcs.S", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595fefee5d18e9a08f2e7b1be156be4ace719a6f/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595fefee5d18e9a08f2e7b1be156be4ace719a6f/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flib1funcs.S?ref=595fefee5d18e9a08f2e7b1be156be4ace719a6f", "patch": "@@ -109,6 +109,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define __ARM_ARCH__ 7\n #endif\n \n+#if defined(__ARM_ARCH_8A__)\n+# define __ARM_ARCH__ 8\n+#endif\n+\n #ifndef __ARM_ARCH__\n #error Unable to determine architecture.\n #endif"}]}