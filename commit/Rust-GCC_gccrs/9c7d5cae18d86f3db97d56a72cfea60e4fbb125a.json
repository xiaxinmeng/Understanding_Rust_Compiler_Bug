{"sha": "9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3ZDVjYWUxOGQ4NmYzZGI5N2Q1NmE3MmNmZWE2MGU0ZmJiMTI1YQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-11-29T16:30:54Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-11-29T16:30:54Z"}, "message": "re PR c++/45383 (Implicit conversion to pointer does no longer automatically generate operator== and operator!=.)\n\nFix PR c++/45383\n\nReverting the fix for PR c++/42260 fixes c++/45383.\nThis reverts commit r155415.\n\ngcc/cp/\n\tReverted patch for PR c++/42260\n\t* cp-tree.h (lookup_conversions): Reverted \"Add new bool parameter to\n\tdeclarationE.\"\n\t* search.c (lookup_conversion): Reverted \"Use new bool parameter in\n\tdefinition\".\n\t* call.c (add_builtin_candidates): Reverted \"Don't lookup template\n          conversion\"\n\t(convert_class_to_reference, build_user_type_conversion_1,\n\t build_op_call): Reverted \"Adjust\".\n\t* cvt.c (build_expr_type_conversion): Reverted \"Likewise\".\n\ngcc/testsuite/\n\tReverted patch for PR c++/42260\n\t* conversion/cast2.C: Reverted New test.\n\nFrom-SVN: r167248", "tree": {"sha": "ac5e6bf206d5df6cf300a80924c9240f011cf8f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac5e6bf206d5df6cf300a80924c9240f011cf8f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/comments", "author": null, "committer": null, "parents": [{"sha": "3b8204d789565e2afb6b0d3fea63d69fd99a5a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8204d789565e2afb6b0d3fea63d69fd99a5a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8204d789565e2afb6b0d3fea63d69fd99a5a5d"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "feb9620bdcd7583ea37cd1d0dfd7ffbed074e9b9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "patch": "@@ -1,3 +1,17 @@\n+2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/45383\n+\tReverted patch for PR c++/42260\n+\t* cp-tree.h (lookup_conversions): Reverted \"Add new bool parameter to\n+\tdeclarationE.\"\n+\t* search.c (lookup_conversion): Reverted \"Use new bool parameter in\n+\tdefinition\".\n+\t* call.c (add_builtin_candidates): Reverted \"Don't lookup template\n+\tconversion\"\n+\t(convert_class_to_reference, build_user_type_conversion_1,\n+\t build_op_call): Reverted \"Adjust\".\n+\t* cvt.c (build_expr_type_conversion): Reverted \"Likewise\".\n+\n 2010-11-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* parser.c (cp_parser_objc_try_catch_finally_statement): Parse"}, {"sha": "d107a71747e6a7ef2fd60a32738c117c696d7145", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "patch": "@@ -1093,7 +1093,7 @@ convert_class_to_reference (tree reference_type, tree s, tree expr, int flags)\n   if (!expr)\n     return NULL;\n \n-  conversions = lookup_conversions (s, /*lookup_template_convs_p=*/true);\n+  conversions = lookup_conversions (s);\n   if (!conversions)\n     return NULL;\n \n@@ -2464,8 +2464,7 @@ add_builtin_candidates (struct z_candidate **candidates, enum tree_code code,\n \t  if (i == 0 && code == MODIFY_EXPR && code2 == NOP_EXPR)\n \t    return;\n \n-\t  convs = lookup_conversions (argtypes[i],\n-\t\t\t\t      /*lookup_template_convs_p=*/false);\n+\t  convs = lookup_conversions (argtypes[i]);\n \n \t  if (code == COND_EXPR)\n \t    {\n@@ -3028,8 +3027,7 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n \t     reference to it)...  */\n \t}\n       else\n-\tconv_fns = lookup_conversions (fromtype,\n-\t\t\t\t       /*lookup_template_convs_p=*/true);\n+\tconv_fns = lookup_conversions (fromtype);\n     }\n \n   candidates = 0;\n@@ -3585,7 +3583,7 @@ build_op_call (tree obj, VEC(tree,gc) **args, tsubst_flags_t complain)\n \t\t      LOOKUP_NORMAL, &candidates);\n     }\n \n-  convs = lookup_conversions (type, /*lookup_template_convs_p=*/true);\n+  convs = lookup_conversions (type);\n \n   for (; convs; convs = TREE_CHAIN (convs))\n     {"}, {"sha": "23f594c801b97884938d61c67374bcb1f35ad162", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "patch": "@@ -5161,7 +5161,7 @@ extern int at_function_scope_p\t\t\t(void);\n extern bool at_class_scope_p\t\t\t(void);\n extern bool at_namespace_scope_p\t\t(void);\n extern tree context_for_name_lookup\t\t(tree);\n-extern tree lookup_conversions\t\t\t(tree, bool);\n+extern tree lookup_conversions\t\t\t(tree);\n extern tree binfo_from_vbase\t\t\t(tree);\n extern tree binfo_for_vbase\t\t\t(tree, tree);\n extern tree look_for_overrides_here\t\t(tree, tree);"}, {"sha": "c6335a251d6d5107e9c05c1b4ffb2ce2522bed0f", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "patch": "@@ -1503,9 +1503,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n   if (!TYPE_HAS_CONVERSION (basetype))\n     return NULL_TREE;\n \n-  for (conv = lookup_conversions (basetype, /*lookup_template_convs_p=*/true);\n-       conv;\n-       conv = TREE_CHAIN (conv))\n+  for (conv = lookup_conversions (basetype); conv; conv = TREE_CHAIN (conv))\n     {\n       int win = 0;\n       tree candidate;"}, {"sha": "c02800cc2079794549cae9ce003361683a55f01c", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "patch": "@@ -2440,13 +2440,10 @@ lookup_conversions_r (tree binfo,\n    functions in this node were selected.  This function is effectively\n    performing a set of member lookups as lookup_fnfield does, but\n    using the type being converted to as the unique key, rather than the\n-   field name.\n-   If LOOKUP_TEMPLATE_CONVS_P is TRUE, the returned TREE_LIST contains\n-   the non-hidden user-defined template conversion functions too.  */\n+   field name.  */\n \n tree\n-lookup_conversions (tree type,\n-\t\t    bool lookup_template_convs_p)\n+lookup_conversions (tree type)\n {\n   tree convs, tpl_convs;\n   tree list = NULL_TREE;\n@@ -2473,9 +2470,6 @@ lookup_conversions (tree type,\n \t}\n     }\n \n-  if (lookup_template_convs_p == false)\n-    tpl_convs = NULL_TREE;\n-\n   for (; tpl_convs; tpl_convs = TREE_CHAIN (tpl_convs))\n     {\n       tree probe, next;"}, {"sha": "a1ebffbbaeb67684412cead89866da301318e99a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "patch": "@@ -1,3 +1,9 @@\n+2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/45383\n+\tReverted patch for PR c++/42260\n+\t* conversion/cast2.C: Reverted new test.\n+\n 2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/46101"}, {"sha": "3868d748c0eae624100208387b5a7c9bb282c626", "filename": "gcc/testsuite/g++.dg/conversion/cast2.C", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8204d789565e2afb6b0d3fea63d69fd99a5a5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8204d789565e2afb6b0d3fea63d69fd99a5a5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcast2.C?ref=3b8204d789565e2afb6b0d3fea63d69fd99a5a5d", "patch": "@@ -1,11 +0,0 @@\n-// Contributed by Dodji Seketeli <dodji@redhat.com>\n-// Origin: PR c++/42260\n-// { dg-do compile }\n-\n-struct A\n-{\n-      template<typename T> operator T*();\n-};\n-\n-int i = *A();// { dg-error \"no match\" }\n-"}]}