{"sha": "92007ba60738fabe2e3fb87796bcebe344062fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwMDdiYTYwNzM4ZmFiZTJlM2ZiODc3OTZiY2ViZTM0NDA2MmZiYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-27T07:09:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-27T07:09:51Z"}, "message": "re PR tree-optimization/85529 (wrong code at -O2 and -O3 on x86_64-linux-gnu)\n\n\tPR tree-optimization/85529\n\t* tree-ssa-reassoc.c (optimize_range_tests_var_bound): Add FIRST_BB\n\targument.  Don't call get_nonzero_bits if opcode is ERROR_MARK_NODE,\n\trhs2 def stmt's bb is dominated by first_bb and it isn't an obvious\n\tzero extension or masking of the MSB bit.\n\t(optimize_range_tests): Add FIRST_BB argument, pass it through\n\tto optimize_range_tests_var_bound.\n\t(maybe_optimize_range_tests, reassociate_bb): Adjust\n\toptimize_range_tests callers.\n\n\t* gcc.c-torture/execute/pr85529-1.c: New test.\n\t* gcc.c-torture/execute/pr85529-2.c: New test.\n\t* gcc.dg/pr85529.c: New test.\n\nFrom-SVN: r259696", "tree": {"sha": "74e2ce4905d4bbeed0e07c8c2392f9066d7a1b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74e2ce4905d4bbeed0e07c8c2392f9066d7a1b5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92007ba60738fabe2e3fb87796bcebe344062fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92007ba60738fabe2e3fb87796bcebe344062fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92007ba60738fabe2e3fb87796bcebe344062fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92007ba60738fabe2e3fb87796bcebe344062fbc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be876cc498129017fcb0d7cf93620da6e5ea832a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be876cc498129017fcb0d7cf93620da6e5ea832a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be876cc498129017fcb0d7cf93620da6e5ea832a"}], "stats": {"total": 167, "additions": 161, "deletions": 6}, "files": [{"sha": "723f85b179f299321dc28ebe8b6b8b92894c1c3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92007ba60738fabe2e3fb87796bcebe344062fbc", "patch": "@@ -1,3 +1,15 @@\n+2018-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/85529\n+\t* tree-ssa-reassoc.c (optimize_range_tests_var_bound): Add FIRST_BB\n+\targument.  Don't call get_nonzero_bits if opcode is ERROR_MARK_NODE,\n+\trhs2 def stmt's bb is dominated by first_bb and it isn't an obvious\n+\tzero extension or masking of the MSB bit.\n+\t(optimize_range_tests): Add FIRST_BB argument, pass it through\n+\tto optimize_range_tests_var_bound.\n+\t(maybe_optimize_range_tests, reassociate_bb): Adjust\n+\toptimize_range_tests callers.\n+\n 2018-04-26  Richard Biener  <rguenther@suse.de>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "fd713030a32a61f5136feaa09e58c505b3c9d790", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92007ba60738fabe2e3fb87796bcebe344062fbc", "patch": "@@ -1,3 +1,10 @@\n+2018-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/85529\n+\t* gcc.c-torture/execute/pr85529-1.c: New test.\n+\t* gcc.c-torture/execute/pr85529-2.c: New test.\n+\t* gcc.dg/pr85529.c: New test.\n+\n 2018-04-26  Maciej W. Rozycki  <macro@mips.com>\n \n \t* gcc.target/mips/data-sym-pool.c (dg-options): Match `ld' and"}, {"sha": "83d5cdd997ec784ed72c75a7cad76025f16922c8", "filename": "gcc/testsuite/gcc.c-torture/execute/pr85529-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85529-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85529-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85529-1.c?ref=92007ba60738fabe2e3fb87796bcebe344062fbc", "patch": "@@ -0,0 +1,28 @@\n+/* PR tree-optimization/85529 */\n+\n+struct S { int a; };\n+\n+int b, c = 1, d, e, f;\n+static int g;\n+volatile struct S s;\n+\n+signed char\n+foo (signed char i, int j)\n+{\n+  return i < 0 ? i : i << j;\n+}\n+\n+int\n+main ()\n+{\n+  signed char k = -83;\n+  if (!d)\n+    goto L;\n+  k = e || f;\n+L:\n+  for (; b < 1; b++)\n+    s.a != (k < foo (k, 2) && (c = k = g));\n+  if (c != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "5de30844c2f01870492e0279b94e263753001116", "filename": "gcc/testsuite/gcc.c-torture/execute/pr85529-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85529-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85529-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85529-2.c?ref=92007ba60738fabe2e3fb87796bcebe344062fbc", "patch": "@@ -0,0 +1,25 @@\n+/* PR tree-optimization/85529 */\n+\n+__attribute__((noipa)) int\n+foo (int x)\n+{\n+  x &= 63;\n+  x -= 50;\n+  x |= 1;\n+  if (x < 0)\n+    return 1;\n+  int y = x >> 2;\n+  if (x >= y)\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 63; i++)\n+    if (foo (i) != 1)\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0b732284749d69dc61d780b479afcf30406a4f37", "filename": "gcc/testsuite/gcc.dg/pr85529.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85529.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85529.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85529.c?ref=92007ba60738fabe2e3fb87796bcebe344062fbc", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/85529 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-ssa-phiopt\" } */\n+\n+__attribute__((noinline, noclone)) int\n+foo (int x)\n+{\n+  x &= 31;\n+  x -= 25;\n+  x *= 2;\n+  if (x < 0)\n+    return 1;\n+  int y = x >> 2;\n+  if (x >= y)\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 63; i++)\n+    if (foo (i) != 1)\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "38bae77ddbc70e9496913fe252e881b9da2f7a47", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92007ba60738fabe2e3fb87796bcebe344062fbc/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=92007ba60738fabe2e3fb87796bcebe344062fbc", "patch": "@@ -3035,7 +3035,8 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n static bool\n optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n \t\t\t\tvec<operand_entry *> *ops,\n-\t\t\t\tstruct range_entry *ranges)\n+\t\t\t\tstruct range_entry *ranges,\n+\t\t\t\tbasic_block first_bb)\n {\n   int i;\n   bool any_changes = false;\n@@ -3143,6 +3144,60 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n       if (idx == NULL)\n \tcontinue;\n \n+      /* maybe_optimize_range_tests allows statements without side-effects\n+\t in the basic blocks as long as they are consumed in the same bb.\n+\t Make sure rhs2's def stmt is not among them, otherwise we can't\n+\t use safely get_nonzero_bits on it.  E.g. in:\n+\t  # RANGE [-83, 1] NONZERO 173\n+\t  # k_32 = PHI <k_47(13), k_12(9)>\n+\t ...\n+\t  if (k_32 >= 0)\n+\t    goto <bb 5>; [26.46%]\n+\t  else\n+\t    goto <bb 9>; [73.54%]\n+\n+\t  <bb 5> [local count: 140323371]:\n+\t  # RANGE [0, 1] NONZERO 1\n+\t  _5 = (int) k_32;\n+\t  # RANGE [0, 4] NONZERO 4\n+\t  _21 = _5 << 2;\n+\t  # RANGE [0, 4] NONZERO 4\n+\t  iftmp.0_44 = (char) _21;\n+\t  if (k_32 < iftmp.0_44)\n+\t    goto <bb 6>; [84.48%]\n+\t  else\n+\t    goto <bb 9>; [15.52%]\n+\t the ranges on _5/_21/iftmp.0_44 are flow sensitive, assume that\n+\t k_32 >= 0.  If we'd optimize k_32 >= 0 to true and k_32 < iftmp.0_44\n+\t to (unsigned) k_32 < (unsigned) iftmp.0_44, then we would execute\n+\t those stmts even for negative k_32 and the value ranges would be no\n+\t longer guaranteed and so the optimization would be invalid.  */\n+      if (opcode == ERROR_MARK)\n+\t{\n+\t  gimple *g = SSA_NAME_DEF_STMT (rhs2);\n+\t  basic_block bb2 = gimple_bb (g);\n+\t  if (bb2\n+\t      && bb2 != first_bb\n+\t      && dominated_by_p (CDI_DOMINATORS, bb2, first_bb))\n+\t    {\n+\t      /* As an exception, handle a few common cases.  */\n+\t      if (gimple_assign_cast_p (g)\n+\t\t  && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (g)))\n+\t\t  && TYPE_UNSIGNED (TREE_TYPE (gimple_assign_rhs1 (g)))\n+\t\t  && (TYPE_PRECISION (TREE_TYPE (rhs2))\n+\t\t      > TYPE_PRECISION (TREE_TYPE (gimple_assign_rhs1 (g)))))\n+\t\t/* Zero-extension is always ok.  */ ;\n+\t      else if (is_gimple_assign (g)\n+\t\t       && gimple_assign_rhs_code (g) == BIT_AND_EXPR\n+\t\t       && TREE_CODE (gimple_assign_rhs2 (g)) == INTEGER_CST\n+\t\t       && !wi::neg_p (wi::to_wide (gimple_assign_rhs2 (g))))\n+\t\t/* Masking with INTEGER_CST with MSB clear is always ok\n+\t\t   too.  */ ;\n+\t      else\n+\t\tcontinue;\n+\t    }\n+\t}\n+\n       wide_int nz = get_nonzero_bits (rhs2);\n       if (wi::neg_p (nz))\n \tcontinue;\n@@ -3269,11 +3324,12 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n    maybe_optimize_range_tests for inter-bb range optimization.\n    In that case if oe->op is NULL, oe->id is bb->index whose\n    GIMPLE_COND is && or ||ed into the test, and oe->rank says\n-   the actual opcode.  */\n+   the actual opcode.\n+   FIRST_BB is the first basic block if OPCODE is ERROR_MARK.  */\n \n static bool\n optimize_range_tests (enum tree_code opcode,\n-\t\t      vec<operand_entry *> *ops)\n+\t\t      vec<operand_entry *> *ops, basic_block first_bb)\n {\n   unsigned int length = ops->length (), i, j, first;\n   operand_entry *oe;\n@@ -3353,7 +3409,7 @@ optimize_range_tests (enum tree_code opcode,\n   any_changes |= optimize_range_tests_cmp_bitwise (opcode, first, length,\n \t\t\t\t\t\t   ops, ranges);\n   any_changes |= optimize_range_tests_var_bound (opcode, first, length, ops,\n-\t\t\t\t\t\t ranges);\n+\t\t\t\t\t\t ranges, first_bb);\n \n   if (any_changes && opcode != ERROR_MARK)\n     {\n@@ -4100,7 +4156,7 @@ maybe_optimize_range_tests (gimple *stmt)\n \tbreak;\n     }\n   if (ops.length () > 1)\n-    any_changes = optimize_range_tests (ERROR_MARK, &ops);\n+    any_changes = optimize_range_tests (ERROR_MARK, &ops, first_bb);\n   if (any_changes)\n     {\n       unsigned int idx, max_idx = 0;\n@@ -5855,7 +5911,7 @@ reassociate_bb (basic_block bb)\n \t\t  if (is_vector)\n \t\t    optimize_vec_cond_expr (rhs_code, &ops);\n \t\t  else\n-\t\t    optimize_range_tests (rhs_code, &ops);\n+\t\t    optimize_range_tests (rhs_code, &ops, NULL);\n \t        }\n \n \t      if (rhs_code == MULT_EXPR && !is_vector)"}]}