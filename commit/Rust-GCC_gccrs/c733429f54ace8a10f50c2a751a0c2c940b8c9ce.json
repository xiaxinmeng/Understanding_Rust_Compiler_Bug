{"sha": "c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczMzQyOWY1NGFjZThhMTBmNTBjMmE3NTFhMGMyYzk0MGI4YzljZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T16:58:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T16:58:46Z"}, "message": "[multiple changes]\n\n2014-01-23  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnat_rm.texi: Minor editing.\n\n2014-01-23  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.adb (Set_Opt_Config_Switches): Reset SPARK mode for\n\twith'ed internal units.\n\t* sem.adb (Semantics): Save and restore SPARK_Mode[_Pragma].\n\n2014-01-23  Javier Miranda  <miranda@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): As part of processing the\n\t\"end-of-spec\" reference generate an extra reference to the first\n\tprivate entity of the package.\n\t* xr_tabls.adb (Add_Reference): No action needed for the extra\n\t'E' reference associated; similar to the processing of the\n\t'e' reference.\n\n2014-01-23  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Change \"--&pp off\" to \"--!pp off\".\n\n2014-01-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Is_Potentially_Unevaluated): new\n\tpredicate to implement rule given in 6.1.1 (20/3).\n\t* sem_attr.adb (Analyze_Attribute, case 'Old): Reject prefix of\n\t'Old in a postcondition, if it is potentially unevaluated and\n\tit is not an entity name.\n\nFrom-SVN: r206990", "tree": {"sha": "504fca99a9bcf9ba3be7e0ee603ba133db4c6a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/504fca99a9bcf9ba3be7e0ee603ba133db4c6a5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/comments", "author": null, "committer": null, "parents": [{"sha": "7e97e1742acd7bd89f44af38315ec93004b90207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e97e1742acd7bd89f44af38315ec93004b90207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e97e1742acd7bd89f44af38315ec93004b90207"}], "stats": {"total": 166, "additions": 150, "deletions": 16}, "files": [{"sha": "14be35157876ce38542e9a210eef11928faf0881", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -1,3 +1,34 @@\n+2014-01-23  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnat_rm.texi: Minor editing.\n+\n+2014-01-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.adb (Set_Opt_Config_Switches): Reset SPARK mode for\n+\twith'ed internal units.\n+\t* sem.adb (Semantics): Save and restore SPARK_Mode[_Pragma].\n+\n+2014-01-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): As part of processing the\n+\t\"end-of-spec\" reference generate an extra reference to the first\n+\tprivate entity of the package.\n+\t* xr_tabls.adb (Add_Reference): No action needed for the extra\n+\t'E' reference associated; similar to the processing of the\n+\t'e' reference.\n+\n+2014-01-23  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Change \"--&pp off\" to \"--!pp off\".\n+\n+2014-01-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Potentially_Unevaluated): new\n+\tpredicate to implement rule given in 6.1.1 (20/3).\n+\t* sem_attr.adb (Analyze_Attribute, case 'Old): Reject prefix of\n+\t'Old in a postcondition, if it is potentially unevaluated and\n+\tit is not an entity name.\n+\n 2014-01-23  Bob Duff  <duff@adacore.com>\n \n \t* gnat_ugn.texi: Document the new \"--&pp off\" feature of gnatpp."}, {"sha": "8ad73c59e21a3b8ec37f438214909f1090ec065d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -4249,7 +4249,7 @@ pragma Linker_Section (\n @end smallexample\n \n @noindent\n-@var{LOCAL_NAME} must refer to an object or a subprogram that is\n+@var{LOCAL_NAME} must refer to an object that is\n declared at the library level. This pragma specifies the name of the\n linker section for the given entity. It is equivalent to\n @code{__attribute__((section))} in GNU C and causes @var{LOCAL_NAME} to"}, {"sha": "ca9209cfe44399b0f22a6ffb08cfcbf0d0dfe3c8", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -14504,12 +14504,12 @@ Display usage, then exit disregarding all other options.\n @item --pp-off=@var{xxx}\n @cindex @option{--pp-off} @command{gnatpp}\n Use @code{--xxx} as the command to turn off pretty printing, instead\n-of the default @code{--&pp off}.\n+of the default @code{--!pp off}.\n \n @item --pp-on=@var{xxx}\n @cindex @option{--pp-on} @command{gnatpp}\n Use @code{--xxx} as the command to turn pretty printing back on, instead\n-of the default @code{--&pp on}.\n+of the default @code{--!pp on}.\n \n @item --pp-old\n @cindex @option{--pp-old} @command{gnatpp}\n@@ -14559,22 +14559,36 @@ They provide the detailed descriptions of the switches shown above.\n Pretty printing is highly heuristic in nature, and sometimes doesn't\n do exactly what you want. If you wish to format a certain region of\n code by hand, you can turn off pretty printing in that region by\n-surrounding it with the special comments @code{--&pp off} and\n-@code{--&pp on}. The text in that region will then be reproduced\n+surrounding it with special comments that start with @code{--!pp off}\n+and @code{--!pp on}. The text in that region will then be reproduced\n verbatim in the output with no formatting.\n \n-To disable pretty printing for the whole file, put @code{--&pp off} at\n-the top, with no following @code{--&pp on}.\n+To disable pretty printing for the whole file, put @code{--!pp off} at\n+the top, with no following @code{--!pp on}.\n \n The comments must appear on a line by themselves, with nothing\n-preceding except spaces, and they must appear exactly as shown (case\n-sensitive). For example, @code{--&pp off -- Turn off pp because ...}\n-will not be recognized as a valid @code{--&pp off} command.\n+preceding except spaces. The initial text of the comment must be\n+exactly @code{--!pp off} or @code{--!pp on} (case sensitive), but may\n+be followed by arbitrary additional text. For example:\n+\n+@smallexample @c ada\n+@cartouche\n+package Interrupts is\n+   --!pp off -- turn off pretty printing so \"Interrupt_Kind\" lines up\n+   type Interrupt_Kind is\n+     (Asynchronous_Interrupt_Kind,\n+       Synchronous_Interrupt_Kind,\n+             Green_Interrupt_Kind);\n+   --!pp on -- reenable pretty printing\n+\n+   ...\n+@end cartouche\n+@end smallexample\n \n You can specify different comment strings using the gnatpp\n @code{--pp-off} and @code{--pp-on} switches. For example, if you say\n @code{gnatpp --pp-off=' pp-' *.ad?} then gnatpp will recognize\n-comments of the form @code{-- pp-}, instead of @code{--&pp off} for\n+comments of the form @code{-- pp-} instead of @code{--!pp off} for\n disabling pretty printing. Note that the leading @code{--} of the\n comment is not included in the argument to these switches.\n "}, {"sha": "a01bbab6a3158fcae248cb492edddacf80f796fa", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -1069,6 +1069,27 @@ package body Lib.Xref is\n                 Ref_Scope => Empty,\n                 Ent_Scope => Empty),\n                Ent_Scope_File => No_Unit);\n+\n+            --  Generate reference to the first private entity\n+\n+            if Typ = 'e'\n+              and then Comes_From_Source (E)\n+              and then Nkind (Ent) = N_Defining_Identifier\n+              and then (Is_Package_Or_Generic_Package (Ent)\n+                         or else Is_Concurrent_Type (Ent))\n+              and then Present (First_Private_Entity (E))\n+              and then In_Extended_Main_Source_Unit (N)\n+            then\n+               Add_Entry\n+                 ((Ent       => Ent,\n+                   Loc       => Sloc (First_Private_Entity (E)),\n+                   Typ       => 'E',\n+                   Eun       => Get_Source_Unit (Def),\n+                   Lun       => Get_Source_Unit (Ref),\n+                   Ref_Scope => Empty,\n+                   Ent_Scope => Empty),\n+                  Ent_Scope_File => No_Unit);\n+            end if;\n          end if;\n       end if;\n    end Generate_Reference;"}, {"sha": "a0d5370d57521b0afd3562ad12f9e04c24cea33c", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -175,6 +175,7 @@ package Lib.Xref is\n    --              d = discriminant of type\n    --              D = object definition\n    --              e = end of spec\n+   --              E = first private entity\n    --              H = abstract type\n    --              i = implicit reference\n    --              k = implicit reference to parent unit in child unit"}, {"sha": "636829c5f0c9a2c3283584abf00d0915e2ab3dd1", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -167,20 +167,24 @@ package body Opt is\n          Persistent_BSS_Mode         := False;\n          Use_VADS_Size               := False;\n          Optimize_Alignment_Local    := True;\n-         SPARK_Mode                  := Auto;\n \n          --  For an internal unit, assertions/debug pragmas are off unless this\n          --  is the main unit and they were explicitly enabled. We also make\n-         --  sure we do not assume that values are necessarily valid.\n+         --  sure we do not assume that values are necessarily valid and that\n+         --  SPARK_Mode is set to its configuration value.\n \n          if Main_Unit then\n             Assertions_Enabled       := Assertions_Enabled_Config;\n             Assume_No_Invalid_Values := Assume_No_Invalid_Values_Config;\n             Check_Policy_List        := Check_Policy_List_Config;\n+            SPARK_Mode               := SPARK_Mode_Config;\n+            SPARK_Mode_Pragma        := SPARK_Mode_Pragma_Config;\n          else\n             Assertions_Enabled       := False;\n             Assume_No_Invalid_Values := False;\n             Check_Policy_List        := Empty;\n+            SPARK_Mode               := Off;\n+            SPARK_Mode_Pragma        := Empty;\n          end if;\n \n       --  Case of non-internal unit\n@@ -203,6 +207,7 @@ package body Opt is\n          Optimize_Alignment_Local    := False;\n          Persistent_BSS_Mode         := Persistent_BSS_Mode_Config;\n          SPARK_Mode                  := SPARK_Mode_Config;\n+         SPARK_Mode_Pragma           := SPARK_Mode_Pragma_Config;\n          Use_VADS_Size               := Use_VADS_Size_Config;\n \n          --  Update consistently the value of Init_Or_Norm_Scalars. The value"}, {"sha": "db462a4d9f2106fcc34819dfd19819f69a48df50", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -1311,6 +1311,8 @@ package body Sem is\n       S_Inside_A_Generic  : constant Boolean          := Inside_A_Generic;\n       S_Outer_Gen_Scope   : constant Entity_Id        := Outer_Generic_Scope;\n       S_Style_Check       : constant Boolean          := Style_Check;\n+      S_SPARK_Mode        : constant SPARK_Mode_Type  := SPARK_Mode;\n+      S_SPARK_Mode_Pragma : constant Node_Id          := SPARK_Mode_Pragma;\n \n       Generic_Main : constant Boolean :=\n                        Nkind (Unit (Cunit (Main_Unit)))\n@@ -1418,7 +1420,6 @@ package body Sem is\n       Inside_A_Generic   := False;\n       In_Assertion_Expr  := 0;\n       In_Spec_Expression := False;\n-\n       Set_Comes_From_Source_Default (False);\n \n       --  Save current config switches and reset then appropriately\n@@ -1511,6 +1512,8 @@ package body Sem is\n       Inside_A_Generic     := S_Inside_A_Generic;\n       Outer_Generic_Scope  := S_Outer_Gen_Scope;\n       Style_Check          := S_Style_Check;\n+      SPARK_Mode           := S_SPARK_Mode;\n+      SPARK_Mode_Pragma    := S_SPARK_Mode_Pragma;\n \n       Restore_Opt_Config_Switches (Save_Config_Switches);\n "}, {"sha": "413be90332ac13b086e3dabd22eb6cf026fb3ec8", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -4337,6 +4337,8 @@ package body Sem_Attr is\n          --  During pre-analysis, Prag is the enclosing pragma node if any\n \n       begin\n+         Prag := Empty;\n+\n          --  Find enclosing scopes, excluding loops\n \n          CS := Current_Scope;\n@@ -4515,6 +4517,18 @@ package body Sem_Attr is\n               (\"??attribute Old applied to constant has no effect\", P);\n          end if;\n \n+         --  Check that the prefix of 'Old is an entity, when it appears in\n+         --  a postcondition and may be potentially unevaluated (6.1.1 (27/3)).\n+\n+         if Present (Prag)\n+           and then Get_Pragma_Id (Prag) = Pragma_Postcondition\n+           and then Is_Potentially_Unevaluated (N)\n+           and then not Is_Entity_Name (P)\n+         then\n+            Error_Msg_N (\"prefix that is potentially unevaluated must \"\n+               & \"denote an entity\", N);\n+         end if;\n+\n          --  The attribute appears within a pre/postcondition, but refers to\n          --  an entity in the enclosing subprogram. If it is a component of\n          --  a formal its expansion might generate actual subtypes that may"}, {"sha": "a315e5d1709656234a679eac0ac67bc2a3feb370", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -10249,6 +10249,48 @@ package body Sem_Util is\n       end if;\n    end Is_Partially_Initialized_Type;\n \n+   --------------------------------\n+   -- Is_Potentially_Unevaluated --\n+   --------------------------------\n+\n+   function Is_Potentially_Unevaluated (N : Node_Id) return Boolean is\n+      Par  : Node_Id;\n+      Expr : Node_Id;\n+\n+   begin\n+      Expr := N;\n+      Par  := Parent (N);\n+      while not Nkind_In (Par, N_If_Expression,\n+                                N_Case_Expression,\n+                                N_And_Then,\n+                                N_Or_Else,\n+                                N_In,\n+                                N_Not_In)\n+      loop\n+         Expr := Par;\n+         Par  := Parent (Par);\n+         if Nkind (Par) not in N_Subexpr then\n+            return False;\n+         end if;\n+      end loop;\n+\n+      if Nkind (Par) = N_If_Expression then\n+         return Is_Elsif (Par) or else Expr /= First (Expressions (Par));\n+\n+      elsif Nkind (Par) = N_Case_Expression then\n+         return Expr /= Expression (Par);\n+\n+      elsif Nkind_In (Par, N_And_Then, N_Or_Else) then\n+         return Expr = Right_Opnd (Par);\n+\n+      elsif Nkind_In (Par, N_In, N_Not_In) then\n+         return Expr /= Left_Opnd (Par);\n+\n+      else\n+         return False;\n+      end if;\n+   end Is_Potentially_Unevaluated;\n+\n    ------------------------------------\n    -- Is_Potentially_Persistent_Type --\n    ------------------------------------"}, {"sha": "3fb9cdab6ef89648b5d1e800b614c79e5168e3ff", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -1116,6 +1116,9 @@ package Sem_Util is\n    --  if Include_Implicit is False, these cases do not count as making the\n    --  type be partially initialized.\n \n+   function Is_Potentially_Unevaluated (N : Node_Id) return Boolean;\n+   --  Predicate to implement definition given in RM 6.1.1 (20/3)\n+\n    function Is_Potentially_Persistent_Type (T : Entity_Id) return Boolean;\n    --  Determines if type T is a potentially persistent type. A potentially\n    --  persistent type is defined (recursively) as a scalar type, a non-tagged"}, {"sha": "4b82b035e991e59049705552d5dcd3ad7d766b18", "filename": "gcc/ada/xr_tabls.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fxr_tabls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c733429f54ace8a10f50c2a751a0c2c940b8c9ce/gcc%2Fada%2Fxr_tabls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxr_tabls.adb?ref=c733429f54ace8a10f50c2a751a0c2c940b8c9ce", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -431,7 +431,7 @@ package body Xr_Tabls is\n                  Decl_Type    => ' ',\n                  Is_Parameter => True);\n \n-         when 'e' | 'z' | 't' | 'p' | 'P' | 'k' | 'd' =>\n+         when 'e' | 'E' | 'z' | 't' | 'p' | 'P' | 'k' | 'd' =>\n             return;\n \n          when others    =>"}]}