{"sha": "97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhYThiYjZlMjA1NzlmMzgyMzU3ZmZhYThmNzIzMzEzM2ZjMWU3Yw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-04T23:09:41Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-04T23:09:41Z"}, "message": "diagnostic.c (diagnostic_color_init): New.\n\ngcc/ChangeLog:\n\n2014-12-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* diagnostic.c (diagnostic_color_init): New.\n\t* diagnostic.h: Declare.\n\t* gcc.c (driver::global_initializations): Use it.\n\t(driver_handle_option): Handle -fdiagnostics-color_.\n\t* toplev.c: Do not include diagnostic-color.h.\n\t(process_options): Do not initialize color diagnostics here.\n\t* common.opt (fdiagnostics-color=): Add Driver.\n\t* opts-global.c (init_options_once): Initialize color here.\n\t* opts.c (common_handle_option): Use diagnostics_color_init.\n\t* diagnostic-color.h: Fix comment.\n\nFrom-SVN: r218406", "tree": {"sha": "4ed8367e62b4ba4d6028e2ffb5d23560f80d3d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed8367e62b4ba4d6028e2ffb5d23560f80d3d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/comments", "author": null, "committer": null, "parents": [{"sha": "87aca3a6aed5f33bc3ead975e96ed8db80c45cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aca3a6aed5f33bc3ead975e96ed8db80c45cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87aca3a6aed5f33bc3ead975e96ed8db80c45cd6"}], "stats": {"total": 91, "additions": 58, "deletions": 33}, "files": [{"sha": "54500c5b5d23630a290b8e8fe5c2dceb9b19323d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -1,3 +1,16 @@\n+2014-12-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* diagnostic.c (diagnostic_color_init): New.\n+\t* diagnostic.h: Declare.\n+\t* gcc.c (driver::global_initializations): Use it.\n+\t(driver_handle_option): Handle -fdiagnostics-color_.\n+\t* toplev.c: Do not include diagnostic-color.h.\n+\t(process_options): Do not initialize color diagnostics here.\n+\t* common.opt (fdiagnostics-color=): Add Driver.\n+\t* opts-global.c (init_options_once): Initialize color here.\n+\t* opts.c (common_handle_option): Use diagnostics_color_init.\n+\t* diagnostic-color.h: Fix comment.\n+\n 2014-12-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* tree-pretty-print.c (INDENT): Rename \"buffer\" to \"pp\"."}, {"sha": "78b796b85570e5a858d991f14a27e9ae9ff4c41a", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -1096,7 +1096,7 @@ Common Alias(fdiagnostics-color=,always,never)\n ;\n \n fdiagnostics-color=\n-Common Joined RejectNegative Var(flag_diagnostics_show_color) Enum(diagnostic_color_rule) Init(DIAGNOSTICS_COLOR_NO)\n+Driver Common Joined RejectNegative Var(flag_diagnostics_show_color) Enum(diagnostic_color_rule) Init(DIAGNOSTICS_COLOR_NO)\n -fdiagnostics-color=[never|always|auto]\tColorize diagnostics\n \n ; Required for these enum values."}, {"sha": "d96e085f49c3a60ab78836e6d9d62840076a270b", "filename": "gcc/diagnostic-color.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fdiagnostic-color.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fdiagnostic-color.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-color.h?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -41,11 +41,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_DIAGNOSTIC_COLOR_H\n #define GCC_DIAGNOSTIC_COLOR_H\n \n-/* How often diagnostics are prefixed by their locations:\n-   o DIAGNOSTICS_SHOW_PREFIX_NEVER: never - not yet supported;\n-   o DIAGNOSTICS_SHOW_PREFIX_ONCE: emit only once;\n-   o DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE: emit each time a physical\n-   line is started.  */\n+/* Whether to add color to diagnostics:\n+   o DIAGNOSTICS_COLOR_NO: never\n+   o DIAGNOSTICS_COLOR_YES: always\n+   o DIAGNOSTICS_COLOR_AUTO: depending on the output stream.  */\n typedef enum\n {\n   DIAGNOSTICS_COLOR_NO       = 0,"}, {"sha": "07ce6020192a6df970de66ad8432c517363320ef", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -155,6 +155,34 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->inhibit_notes_p = false;\n }\n \n+/* Maybe initialize the color support. We require clients to do this\n+   explicitly, since most clients don't want color.  When called\n+   without a VALUE, it initializes with DIAGNOSTICS_COLOR_DEFAULT.  */\n+\n+void\n+diagnostic_color_init (diagnostic_context *context, int value /*= -1 */)\n+{\n+  /* value == -1 is the default value.  */\n+  if (value < 0)\n+    {\n+      /* If DIAGNOSTICS_COLOR_DEFAULT is -1, default to\n+\t -fdiagnostics-color=auto if GCC_COLORS is in the environment,\n+\t otherwise default to -fdiagnostics-color=never, for other\n+\t values default to that\n+\t -fdiagnostics-color={never,auto,always}.  */\n+      if (DIAGNOSTICS_COLOR_DEFAULT == -1)\n+\t{\n+\t  if (!getenv (\"GCC_COLORS\"))\n+\t    return;\n+\t  value = DIAGNOSTICS_COLOR_AUTO;\n+\t}\n+      else\n+\tvalue = DIAGNOSTICS_COLOR_DEFAULT;\n+    }\n+  pp_show_color (context->printer)\n+    = colorize_init ((diagnostic_color_rule_t) value);\n+}\n+\n /* Do any cleaning up required after the last diagnostic is emitted.  */\n \n void"}, {"sha": "81e59880169d72f718f0bf506ff95165e22c0fe1", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -266,6 +266,7 @@ extern diagnostic_context *global_dc;\n \n /* Diagnostic related functions.  */\n extern void diagnostic_initialize (diagnostic_context *, int);\n+extern void diagnostic_color_init (diagnostic_context *, int value = -1);\n extern void diagnostic_finish (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *, location_t);\n extern void diagnostic_show_locus (diagnostic_context *, const diagnostic_info *);"}, {"sha": "a5408a48e5a8d41663f29a8724cba2f30ebe724a", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -3608,6 +3608,10 @@ driver_handle_option (struct gcc_options *opts,\n       save_switch (compare_debug_replacement_opt, 0, NULL, validated, true);\n       return true;\n \n+    case OPT_fdiagnostics_color_:\n+      diagnostic_color_init (dc, value);\n+      break;\n+\n     case OPT_Wa_:\n       {\n \tint prev, j;\n@@ -6975,6 +6979,7 @@ driver::global_initializations ()\n   gcc_init_libintl ();\n \n   diagnostic_initialize (global_dc, 0);\n+  diagnostic_color_init (global_dc);\n \n #ifdef GCC_DRIVER_HOST_INITIALIZATION\n   /* Perform host dependent initialization when needed.  */"}, {"sha": "bb3898e1fe25d9d8987ac9c87d92df3cb3539214", "filename": "gcc/opts-global.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -261,6 +261,11 @@ init_options_once (void)\n   initial_lang_mask = lang_hooks.option_lang_mask ();\n \n   lang_hooks.initialize_diagnostics (global_dc);\n+  /* ??? Ideally, we should do this earlier and the FEs will override\n+     it if desired (none do it so far).  However, the way the FEs\n+     construct their pretty-printers means that all previous settings\n+     are overriden.  */\n+  diagnostic_color_init (global_dc);\n }\n \n /* Decode command-line options to an array, like"}, {"sha": "1b4f97e28d0d534524b91b18cf314d817fd548eb", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"params.h\"\n #include \"diagnostic.h\"\n-#include \"diagnostic-color.h\"\n #include \"opts-diagnostic.h\"\n #include \"insn-attr-common.h\"\n #include \"common/common-target.h\"\n@@ -1771,8 +1770,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fdiagnostics_color_:\n-      pp_show_color (dc->printer)\n-\t= colorize_init ((diagnostic_color_rule_t) value);\n+      diagnostic_color_init (dc, value);\n       break;\n \n     case OPT_fdiagnostics_show_option:"}, {"sha": "04f63df4983cd79cb464f5a185894b21fc4e805d", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aa8bb6e20579f382357ffaa8f7233133fc1e7c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=97aa8bb6e20579f382357ffaa8f7233133fc1e7c", "patch": "@@ -86,7 +86,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-expr.h\"\n #include \"gimple.h\"\n #include \"plugin.h\"\n-#include \"diagnostic-color.h\"\n #include \"context.h\"\n #include \"pass_manager.h\"\n #include \"auto-profile.h\"\n@@ -1268,29 +1267,6 @@ process_options (void)\n \n   maximum_field_alignment = initial_max_fld_align * BITS_PER_UNIT;\n \n-  /* If DIAGNOSTICS_COLOR_DEFAULT is -1, default to -fdiagnostics-color=auto\n-     if GCC_COLORS is in the environment, otherwise default to\n-     -fdiagnostics-color=never, for other values default to that\n-     -fdiagnostics-color={never,auto,always}.  */\n-  if (!global_options_set.x_flag_diagnostics_show_color)\n-    switch ((int) DIAGNOSTICS_COLOR_DEFAULT)\n-      {\n-      case -1:\n-\tif (!getenv (\"GCC_COLORS\"))\n-\t  break;\n-\t/* FALLTHRU */\n-      case DIAGNOSTICS_COLOR_AUTO:\n-\tpp_show_color (global_dc->printer)\n-\t  = colorize_init (DIAGNOSTICS_COLOR_AUTO);\n-\tbreak;\n-      case DIAGNOSTICS_COLOR_YES:\n-\tpp_show_color (global_dc->printer)\n-\t  = colorize_init (DIAGNOSTICS_COLOR_YES);\n-\tbreak;\n-      default:\n-\tbreak;\n-      }\n-\n   /* Allow the front end to perform consistency checks and do further\n      initialization based on the command line options.  This hook also\n      sets the original filename if appropriate (e.g. foo.i -> foo.c)"}]}