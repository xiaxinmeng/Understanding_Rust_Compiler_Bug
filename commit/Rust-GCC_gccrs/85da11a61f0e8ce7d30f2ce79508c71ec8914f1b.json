{"sha": "85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkYTExYTYxZjBlOGNlN2QzMGYyY2U3OTUwOGM3MWVjODkxNGYxYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-11-29T22:58:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-29T22:58:23Z"}, "message": "re PR middle-end/55321 (Ada bootstrap failure on armv5tel-linux-gnueabi)\n\n\tPR middle-end/55321\n\t* calls.c (emit_library_call_value_1): Mark as no-nonlocal if no-throw.\n\nFrom-SVN: r193973", "tree": {"sha": "65663b47ff72f52cbcb2aeb91f37bdce44a408c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65663b47ff72f52cbcb2aeb91f37bdce44a408c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/comments", "author": null, "committer": null, "parents": [{"sha": "74df1ad0fe925176b64af72f03a25d0beb33f5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74df1ad0fe925176b64af72f03a25d0beb33f5bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74df1ad0fe925176b64af72f03a25d0beb33f5bc"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "903a77cf4af1e15a85435a60ed985e0669e8116f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "patch": "@@ -1,3 +1,8 @@\n+2012-11-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/55321\n+\t* calls.c (emit_library_call_value_1): Mark as no-nonlocal if no-throw.\n+\n 2012-11-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/55456"}, {"sha": "574c247f0e50257fa3640db70c6f1b89f2bf6e71", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "patch": "@@ -4196,13 +4196,11 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n      that it should complain if nonvolatile values are live.  For\n      functions that cannot return, inform flow that control does not\n      fall through.  */\n-\n   if (flags & ECF_NORETURN)\n     {\n       /* The barrier note must be emitted\n \t immediately after the CALL_INSN.  Some ports emit more than\n \t just a CALL_INSN above, so we must search for it here.  */\n-\n       rtx last = get_last_insn ();\n       while (!CALL_P (last))\n \t{\n@@ -4214,6 +4212,21 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       emit_barrier_after (last);\n     }\n \n+  /* Consider that \"regular\" libcalls, i.e. all of them except for LCT_THROW\n+     and LCT_RETURNS_TWICE, cannot perform non-local gotos.  */\n+  if (flags & ECF_NOTHROW)\n+    {\n+      rtx last = get_last_insn ();\n+      while (!CALL_P (last))\n+\t{\n+\t  last = PREV_INSN (last);\n+\t  /* There was no CALL_INSN?  */\n+\t  gcc_assert (last != before_call);\n+\t}\n+\n+      make_reg_eh_region_note_nothrow_nononlocal (last);\n+    }\n+\n   /* Now restore inhibit_defer_pop to its actual original value.  */\n   OK_DEFER_POP;\n "}, {"sha": "54692e1d2ef017e3a9ac20e015bd6e75e9c505e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "patch": "@@ -1,3 +1,8 @@\n+2012-11-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* loop_optimization14.ad[sb]: New test.\n+\t* loop_optimization14_pkg.ads: New helper.\n+\n 2012-11-29  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/55073"}, {"sha": "c53c4840a71af1747e26f9752a5076d32f87705e", "filename": "gcc/testsuite/gnat.dg/loop_optimization14.adb", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14.adb?ref=85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "patch": "@@ -0,0 +1,29 @@\n+-- PR middle-end/55321\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+with Loop_Optimization14_Pkg; use Loop_Optimization14_Pkg;\n+\n+package body Loop_Optimization14 is\n+\n+   procedure Finalize_Pool (Pool : in out Rec) is\n+      Raised : Boolean := False;\n+   begin\n+      Pool.A := True;\n+\n+      while not Pool.B loop\n+\n+         begin\n+            Proc (Pool.B);\n+\n+         exception\n+            when others =>\n+               if not Raised then\n+                  Raised := True;\n+               end if;\n+         end;\n+      end loop;\n+\n+   end;\n+\n+end Loop_Optimization14;"}, {"sha": "ee99405069ee0e3845f7b333ee836b9e30116d5f", "filename": "gcc/testsuite/gnat.dg/loop_optimization14.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14.ads?ref=85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "patch": "@@ -0,0 +1,13 @@\n+package Loop_Optimization14 is\n+\n+   type Rec is record\n+      A : Boolean;\n+      pragma Atomic (A);\n+\n+      B : Boolean;\n+\n+   end record;\n+\n+   procedure Finalize_Pool (Pool : in out Rec);\n+\n+end Loop_Optimization14;"}, {"sha": "23b61eb555001c71d2096b3343896c437931b30c", "filename": "gcc/testsuite/gnat.dg/loop_optimization14_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85da11a61f0e8ce7d30f2ce79508c71ec8914f1b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization14_pkg.ads?ref=85da11a61f0e8ce7d30f2ce79508c71ec8914f1b", "patch": "@@ -0,0 +1,5 @@\n+package Loop_Optimization14_Pkg is\n+\n+   procedure Proc (B : in out Boolean);\n+\n+end Loop_Optimization14_Pkg;"}]}