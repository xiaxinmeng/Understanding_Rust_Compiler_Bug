{"sha": "7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlOTgyNmI4OTQ4MTA4ZWZlMDc3MzdmNWM0NGNjMzRlNWQ3YjVjMA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-25T19:36:53Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-25T19:36:53Z"}, "message": "acinclude.m4: Change C9X references to refer to C99.\n\n\t* acinclude.m4: Change C9X references to refer to C99.\n\t* aclocal.m4, configure: Regenerate.\n\t* config/os/gnu-linux/bits/os_defines.h, src/complex.cc,\n\ttestsuite/22_locale/codecvt_wchar_t_char.cc,\n\tinclude/bits/stl_config.h, include/c/bits/std_cwchar.h,\n\tlibmath/mathconf.h: Change C9X references to refer to C99.\n\nFrom-SVN: r37743", "tree": {"sha": "17caf37d53582f8f72eddcb258067ff9b4737442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17caf37d53582f8f72eddcb258067ff9b4737442"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a32f2771a5b1265435b332f15020b66bed552af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32f2771a5b1265435b332f15020b66bed552af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32f2771a5b1265435b332f15020b66bed552af4"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "a41e3b8efd393eed19af140db6cad4b9ada785a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -1,3 +1,12 @@\n+2000-11-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* acinclude.m4: Change C9X references to refer to C99.\n+\t* aclocal.m4, configure: Regenerate.\n+\t* config/os/gnu-linux/bits/os_defines.h, src/complex.cc,\n+\ttestsuite/22_locale/codecvt_wchar_t_char.cc,\n+\tinclude/bits/stl_config.h, include/c/bits/std_cwchar.h,\n+\tlibmath/mathconf.h: Change C9X references to refer to C99.\n+\n 2000-11-25  Benjamin Kosnik  <bkoz@redhat.com>\n             Richard Earnshaw  <rearnsha@arm.com> \n "}, {"sha": "2d323db78ea62d60e095686df16ef4fae3af5b83", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -956,11 +956,11 @@ dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   if test x$enable_c_mbchar != xno; then\n \n-    dnl Sanity check for existence of ISO C9X headers for extended encoding.\n+    dnl Sanity check for existence of ISO C99 headers for extended encoding.\n     AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n     AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n           \n-    dnl Only continue checking if the ISO C9X headers exist.\n+    dnl Only continue checking if the ISO C99 headers exist.\n     if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n   \n       dnl Test wchar.h for mbstate_t, which is needed for char_traits\n@@ -996,14 +996,14 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n       wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n   \n-      AC_MSG_CHECKING([for ISO C9X wchar_t support])\n+      AC_MSG_CHECKING([for ISO C99 wchar_t support])\n       if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n          && test x\"$ac_wfuncs\" = xyes; then\n-        ac_isoC9X_wchar_t=yes\n+        ac_isoC99_wchar_t=yes\n       else\n-        ac_isoC9X_wchar_t=no\n+        ac_isoC99_wchar_t=no\n       fi\n-      AC_MSG_RESULT($ac_isoC9X_wchar_t)\n+      AC_MSG_RESULT($ac_isoC99_wchar_t)\n   \n       dnl Use iconv for wchar_t to char conversions. As such, check for \n       dnl X/Open Portability Guide, version 2 features (XPG2).\n@@ -1032,7 +1032,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       dnl At the moment, only enable wchar_t specializations if all the\n       dnl above support is present.\n       AC_MSG_CHECKING([for enabled wchar_t specializations])\n-      if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+      if test x\"$ac_isoC99_wchar_t\" = xyes \\\n          && test x\"$ac_XPG2_wchar_t\" = xyes; then\n         libinst_wstring_la=\"libinst-wstring.la\"\n         AC_DEFINE(_GLIBCPP_USE_WCHAR_T)"}, {"sha": "e3580f27e29fb5354b95afbf7a0f21009dfe8a65", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -968,11 +968,11 @@ dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   if test x$enable_c_mbchar != xno; then\n \n-    dnl Sanity check for existence of ISO C9X headers for extended encoding.\n+    dnl Sanity check for existence of ISO C99 headers for extended encoding.\n     AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n     AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n           \n-    dnl Only continue checking if the ISO C9X headers exist.\n+    dnl Only continue checking if the ISO C99 headers exist.\n     if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n   \n       dnl Test wchar.h for mbstate_t, which is needed for char_traits\n@@ -1008,14 +1008,14 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n       wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n   \n-      AC_MSG_CHECKING([for ISO C9X wchar_t support])\n+      AC_MSG_CHECKING([for ISO C99 wchar_t support])\n       if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n          && test x\"$ac_wfuncs\" = xyes; then\n-        ac_isoC9X_wchar_t=yes\n+        ac_isoC99_wchar_t=yes\n       else\n-        ac_isoC9X_wchar_t=no\n+        ac_isoC99_wchar_t=no\n       fi\n-      AC_MSG_RESULT($ac_isoC9X_wchar_t)\n+      AC_MSG_RESULT($ac_isoC99_wchar_t)\n   \n       dnl Use iconv for wchar_t to char conversions. As such, check for \n       dnl X/Open Portability Guide, version 2 features (XPG2).\n@@ -1044,7 +1044,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       dnl At the moment, only enable wchar_t specializations if all the\n       dnl above support is present.\n       AC_MSG_CHECKING([for enabled wchar_t specializations])\n-      if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+      if test x\"$ac_isoC99_wchar_t\" = xyes \\\n          && test x\"$ac_XPG2_wchar_t\" = xyes; then\n         libinst_wstring_la=\"libinst-wstring.la\"\n         AC_DEFINE(_GLIBCPP_USE_WCHAR_T)"}, {"sha": "a74dbf43a596f952c682ca2c8163853acf1f03ff", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -34,7 +34,7 @@\n // By enabling this, all GNU extensions are enabled.\n #define _GNU_SOURCE 1\n \n-// By enabling this, all ISO C99, ISO C9X functionality is enabled.\n+// By enabling this, all ISO C99 functionality is enabled.\n #define _ISOC99_SOURCE 1\n \n // This keeps isanum, et al from being propagated as macros."}, {"sha": "514c937aa37bc1b826bb6f0590ee5652e851c343", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -17516,15 +17516,15 @@ fi\n done\n \n   \n-      echo $ac_n \"checking for ISO C9X wchar_t support\"\"... $ac_c\" 1>&6\n-echo \"configure:17521: checking for ISO C9X wchar_t support\" >&5\n+      echo $ac_n \"checking for ISO C99 wchar_t support\"\"... $ac_c\" 1>&6\n+echo \"configure:17521: checking for ISO C99 wchar_t support\" >&5\n       if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n          && test x\"$ac_wfuncs\" = xyes; then\n-        ac_isoC9X_wchar_t=yes\n+        ac_isoC99_wchar_t=yes\n       else\n-        ac_isoC9X_wchar_t=no\n+        ac_isoC99_wchar_t=no\n       fi\n-      echo \"$ac_t\"\"$ac_isoC9X_wchar_t\" 1>&6\n+      echo \"$ac_t\"\"$ac_isoC99_wchar_t\" 1>&6\n   \n                   ac_safe=`echo \"iconv.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for iconv.h\"\"... $ac_c\" 1>&6\n@@ -17710,7 +17710,7 @@ echo \"configure:17703: checking for XPG2 wchar_t support\" >&5\n   \n                   echo $ac_n \"checking for enabled wchar_t specializations\"\"... $ac_c\" 1>&6\n echo \"configure:17713: checking for enabled wchar_t specializations\" >&5\n-      if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+      if test x\"$ac_isoC99_wchar_t\" = xyes \\\n          && test x\"$ac_XPG2_wchar_t\" = xyes; then\n         libinst_wstring_la=\"libinst-wstring.la\"\n         cat >> confdefs.h <<\\EOF"}, {"sha": "d5301e2a5a312ca6c23afdfe02d1cecd9d7f2e0f", "filename": "libstdc++-v3/include/bits/stl_config.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -85,8 +85,8 @@\n //   synchronization.  UIthreads are similar to pthreads, but are based \n //   on an earlier version of the Posix threads standard.\n // * __STL_LONG_LONG if the compiler has long long and unsigned long long\n-//   types.  (They're not in the C++ standard, but they are expected to be \n-//   included in the forthcoming C9X standard.)\n+//   types.  (They're not in the C++ standard, but they are included\n+//   in the C99 standard.)\n // * __STL_THREADS is defined if thread safety is needed.\n // * __STL_VOLATILE is defined to be \"volatile\" if threads are being\n //   used, and the empty string otherwise."}, {"sha": "3a389e7f6f3855ffe492b2e6e6c0f5e14544e398", "filename": "libstdc++-v3/include/c/bits/std_cwchar.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -111,7 +111,7 @@ namespace std\n   extern \"C\" size_t wcsftime(wchar_t*, size_t, const wchar_t*, const struct tm*); \n \n #if 0\n-  // Full C9X listing\n+  // Full C99 listing\n   extern \"C\" long double wcstold(const wchar_t*, wchar_t**); \n   extern \"C\" long long int wcstoll(const wchar_t*, wchar_t**, int); \n   extern \"C\" unsigned long long int wcstoull(const wchar_t*, wchar_t**, int); "}, {"sha": "c6e66e2bf9c14e9f50f85183526118684a9c26cb", "filename": "libstdc++-v3/libmath/mathconf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -130,7 +130,7 @@ double nan (void);\n \n /* Test whether number is finite.  */\n #ifdef isfinite\n-/* This is an ISO C 9x function.  */\n+/* This is an ISO C99 function.  */\n # define FINITE_P(X) isfinite (X)\n # define FINITEF_P(X) isfinite (X)\n # define FINITEL_P(X) isfinite (X)\n@@ -175,7 +175,7 @@ double nan (void);\n \n /* Test whether number is infinite.  */\n #ifdef isinf\n-/* This is an ISO C 9x macro.  */\n+/* This is an ISO C99 macro.  */\n # define INFINITE_P(X) isinf (X)\n # define INFINITEF_P(X) isinf (X)\n # define INFINITEL_P(X) isinf (X)\n@@ -236,7 +236,7 @@ __complex__ double c_log (__complex__ double x);\n __complex__ float c_logf (__complex__ float x);\n __complex__ long double c_logl (__complex__ long double x);\n \n-/* signbit is a macro in ISO C 9x.  */\n+/* signbit is a macro in ISO C99.  */\n #ifndef signbit\n extern int __signbitf (float);\n extern int __signbit (double);"}, {"sha": "3dd4d7e05f1ca71e94162f38b02a3cdaf3b9e0a2", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -29,7 +29,7 @@\n \n #include <bits/std_complex.h>\n \n-// This is a ISO C 9X header.\n+// This is a ISO C99 header.\n #include <mathconf.h>\n #undef complex\n "}, {"sha": "8ea65743a1ff1e2e0cfda93435da2a4843f0184d", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_wchar_t_char.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_wchar_t_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee9826b8948108efe07737f5c44cc34e5d7b5c0/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_wchar_t_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_wchar_t_char.cc?ref=7ee9826b8948108efe07737f5c44cc34e5d7b5c0", "patch": "@@ -26,7 +26,7 @@\n \n \n // Need to explicitly set the state(mbstate_t) to zero.\n-// How to do this is not specified by the ISO C9X standard, so we\n+// How to do this is not specified by the ISO C99 standard, so we\n // might need to add some operators to make the intuiative case\n // work:\n //   w_codecvt::state_type state00;"}]}