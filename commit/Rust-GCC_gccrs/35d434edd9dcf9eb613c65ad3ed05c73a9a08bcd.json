{"sha": "35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkNDM0ZWRkOWRjZjllYjYxM2M2NWFkM2VkMDVjNzNhOWEwOGJjZA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc.ca", "date": "2003-01-04T21:13:45Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-01-04T21:13:45Z"}, "message": "config.gcc (hppa*64*-*-hpux11*): Define extra_parts.\n\n\t* config.gcc (hppa*64*-*-hpux11*): Define extra_parts.  Don't use\n\tcollect2.\n\t* pa-hpux11.h (LDD_SUFFIX, PARSE_LDD_OUTPUT): Undefine.\n\t(HAS_INIT_SECTION, LD_INIT_SWITCH, LD_FINI_SWITCH): Define.\n\t* pa64-hpux.h (HP_INIT_ARRAY_SECTION_ASM_OP,\n\tGNU_INIT_ARRAY_SECTION_ASM_OP, HP_FINI_ARRAY_SECTION_ASM_OP,\n\tGNU_FINI_ARRAY_SECTION_ASM_OP): Define.\n\t(CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Define when not using\n\telfos.h.\n\t(EH_FRAME_IN_DATA_SECTION): Delete define.\n\t(HAS_INIT_SECTION, LD_INIT_SWITCH, LD_FINI_SWITCH): Undefine.\n\t(STARTFILE_SPEC): Use crtbegin.o.\n\t(ENDFILE_SPEC): Use crtend.o.\n\t(INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP, CRT_CALL_STATIC_FUNCTION,\n\tSUPPORTS_INIT_PRIORITY, PA_CXA_FINALIZE_STUB, PA_INIT_FINI_HACK,\n\tPA_INIT_FRAME_DUMMY_ASM_OP, PA_JV_REGISTERCLASSES_STUB,\n\tDTOR_LIST_BEGIN): Define.\n\t* pa.c (TARGET_ASM_CONSTRUCTOR): Define.\n\t(pa_asm_out_constructor, pa_asm_out_destructor): New functions.\n\t* som.h (SUPPORTS_INIT_PRIORITY): Delete define.\n\nFrom-SVN: r60892", "tree": {"sha": "9c480a988710c414dca64ed2b9737871dd52015e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c480a988710c414dca64ed2b9737871dd52015e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/comments", "author": null, "committer": null, "parents": [{"sha": "7057154564514095e32b55937b971f6c34856abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7057154564514095e32b55937b971f6c34856abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7057154564514095e32b55937b971f6c34856abe"}], "stats": {"total": 295, "additions": 251, "deletions": 44}, "files": [{"sha": "4fe99f7ad0356ea8d9e340dff5c79b8ac1e11b6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "patch": "@@ -1,3 +1,26 @@\n+2002-01-04  John David Anglin  <dave.anglin@nrc.ca>\n+\n+\t* config.gcc (hppa*64*-*-hpux11*): Define extra_parts.  Don't use\n+\tcollect2.\n+\t* pa-hpux11.h (LDD_SUFFIX, PARSE_LDD_OUTPUT): Undefine.\n+\t(HAS_INIT_SECTION, LD_INIT_SWITCH, LD_FINI_SWITCH): Define.\n+\t* pa64-hpux.h (HP_INIT_ARRAY_SECTION_ASM_OP,\n+\tGNU_INIT_ARRAY_SECTION_ASM_OP, HP_FINI_ARRAY_SECTION_ASM_OP,\n+\tGNU_FINI_ARRAY_SECTION_ASM_OP): Define.\n+\t(CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Define when not using\n+\telfos.h.\n+\t(EH_FRAME_IN_DATA_SECTION): Delete define.\n+\t(HAS_INIT_SECTION, LD_INIT_SWITCH, LD_FINI_SWITCH): Undefine.\n+\t(STARTFILE_SPEC): Use crtbegin.o.\n+\t(ENDFILE_SPEC): Use crtend.o.\n+\t(INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP, CRT_CALL_STATIC_FUNCTION,\n+\tSUPPORTS_INIT_PRIORITY, PA_CXA_FINALIZE_STUB, PA_INIT_FINI_HACK,\n+\tPA_INIT_FRAME_DUMMY_ASM_OP, PA_JV_REGISTERCLASSES_STUB,\n+\tDTOR_LIST_BEGIN): Define.\n+\t* pa.c (TARGET_ASM_CONSTRUCTOR): Define.\n+\t(pa_asm_out_constructor, pa_asm_out_destructor): New functions.\n+\t* som.h (SUPPORTS_INIT_PRIORITY): Delete define.\n+\n 2002-12-31  Larin Hennessy  <larin@science.oregonstate.edu>\n \n \t* fixinc/fixinc.svr4: Remove references to i860, Sony NewsOS, and spur."}, {"sha": "f2d0e3510764f6d499a5a2c2789d65251d6747d5", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "patch": "@@ -921,7 +921,7 @@ hppa*64*-*-hpux11*)\n \ttmake_file=\"pa/t-pa64 pa/t-pa-hpux\"\n \txmake_file=\"pa/x-ada\"\n \ttarget_cpu_default=\"(MASK_PA_11|MASK_PA_20|MASK_GAS)\"\n-\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \tif test x$gnu_ld = xyes\n \tthen\n \t\ttarget_cpu_default=\"${target_cpu_default}|MASK_GNU_LD\"\n@@ -934,7 +934,6 @@ hppa*64*-*-hpux11*)\n #\t\ttmake_file=\"${tmake_file} pa/t-dce-thr\"\n #\tfi\n \tinstall_headers_dir=install-headers-cpio\n-\tuse_collect2=yes\n \t;;\n hppa1.1-*-hpux11* | hppa2*-*-hpux11*)\n \ttarget_cpu_default=\"MASK_PA_11\""}, {"sha": "3228ee06d0a9db497e56fd6c44df86b16ba6372a", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "patch": "@@ -117,3 +117,16 @@ Boston, MA 02111-1307, USA.  */\n \n #define SIZE_TYPE \"long unsigned int\"\n #define PTRDIFF_TYPE \"long int\"\n+\n+/* HP-UX 11.0 and above provides initialization and finalization function\n+   support from linker command line.  We don't need to invoke __main to run\n+   constructors.  We also don't need chatr to determine the dependencies of\n+   dynamically linked executables and shared libraries.  */\n+#undef LDD_SUFFIX\n+#undef PARSE_LDD_OUTPUT\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION 1\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"+init\"\n+#undef LD_FINI_SWITCH\n+#define LD_FINI_SWITCH \"+fini\""}, {"sha": "2821d463501ae6887e60df02535d06b37fb2643e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "patch": "@@ -124,6 +124,10 @@ static void pa_globalize_label PARAMS ((FILE *, const char *))\n      ATTRIBUTE_UNUSED;\n static void pa_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t    HOST_WIDE_INT, tree));\n+#if !defined(USE_COLLECT2)\n+static void pa_asm_out_constructor PARAMS ((rtx, int));\n+static void pa_asm_out_destructor PARAMS ((rtx, int));\n+#endif\n static void copy_fp_args PARAMS ((rtx)) ATTRIBUTE_UNUSED;\n static int length_fp_args PARAMS ((rtx)) ATTRIBUTE_UNUSED;\n static struct deferred_plabel *get_plabel PARAMS ((const char *))\n@@ -209,6 +213,13 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n+#if !defined(USE_COLLECT2)\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR pa_asm_out_constructor\n+#undef TARGET_ASM_DESTRUCTOR\n+#define TARGET_ASM_DESTRUCTOR pa_asm_out_destructor\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n@@ -6959,6 +6970,46 @@ fmpyaddoperands (operands)\n   return 1;\n }\n \n+#if !defined(USE_COLLECT2)\n+static void\n+pa_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  if (!function_label_operand (symbol, VOIDmode))\n+    hppa_encode_label (symbol);\n+\n+#ifdef CTORS_SECTION_ASM_OP\n+  default_ctor_section_asm_out_constructor (symbol, priority);\n+#else\n+# ifdef TARGET_ASM_NAMED_SECTION\n+  default_named_section_asm_out_constructor (symbol, priority);\n+# else\n+  default_stabs_asm_out_constructor (symbol, priority);\n+# endif\n+#endif\n+}\n+\n+static void\n+pa_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  if (!function_label_operand (symbol, VOIDmode))\n+    hppa_encode_label (symbol);\n+\n+#ifdef DTORS_SECTION_ASM_OP\n+  default_dtor_section_asm_out_destructor (symbol, priority);\n+#else\n+# ifdef TARGET_ASM_NAMED_SECTION\n+  default_named_section_asm_out_destructor (symbol, priority);\n+# else\n+  default_stabs_asm_out_destructor (symbol, priority);\n+# endif\n+#endif\n+}\n+#endif\n+\n /* Returns 1 if the 6 operands specified in OPERANDS are suitable for\n    use in fmpysub instructions.  */\n int"}, {"sha": "507f1609e5796cb2649da23f2b8bb97edaa3eecc", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 163, "deletions": 38, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "patch": "@@ -112,6 +112,11 @@ do {\t\t\t\t\t\t\t\t\\\n #define DATA_SECTION_ASM_OP\t\"\\t.data\"\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n \n+#define HP_INIT_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n+#define GNU_INIT_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.init_array\"\n+#define HP_FINI_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n+#define GNU_FINI_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.fini_array\"\n+\n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -220,55 +225,175 @@ do {\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #undef TEXT_SECTION_ASM_OP\n-#define TEXT_SECTION_ASM_OP \"\\t.SUBSPA $CODE$\\n\"\n+#define TEXT_SECTION_ASM_OP\t\t\"\\t.SUBSPA $CODE$\\n\"\n #undef READONLY_DATA_SECTION_ASM_OP\n-#define READONLY_DATA_SECTION_ASM_OP \"\\t.SUBSPA $LIT$\\n\"\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.SUBSPA $LIT$\\n\"\n #undef DATA_SECTION_ASM_OP\n-#define DATA_SECTION_ASM_OP \"\\t.SUBSPA $DATA$\\n\"\n+#define DATA_SECTION_ASM_OP\t\t\"\\t.SUBSPA $DATA$\\n\"\n #undef BSS_SECTION_ASM_OP\n-#define BSS_SECTION_ASM_OP \"\\t.SUBSPA $BSS$\\n\"\n+#define BSS_SECTION_ASM_OP\t\t\"\\t.SUBSPA $BSS$\\n\"\n+\n+/* We provide explicit defines for CTORS_SECTION_ASM_OP and\n+   DTORS_SECTION_ASM_OP since we don't yet have support for\n+   named sections with the HP assembler.  */\n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP \"\\t.SUBSPA \\\\.ctors,QUAD=1,ALIGN=8,ACCESS=31\"\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP \"\\t.SUBSPA \\\\.dtors,QUAD=1,ALIGN=8,ACCESS=31\"\n+\n+#define HP_INIT_ARRAY_SECTION_ASM_OP \\\n+  \"\\t.SUBSPA \\\\.init,QUAD=1,ALIGN=8,ACCESS=31\"\n+#define GNU_INIT_ARRAY_SECTION_ASM_OP \\\n+  \"\\t.SUBSPA \\\\.init_array,QUAD=1,ALIGN=8,ACCESS=31\"\n+#define HP_FINI_ARRAY_SECTION_ASM_OP \\\n+  \"\\t.SUBSPA \\\\.fini,QUAD=1,ALIGN=8,ACCESS=31\"\n+#define GNU_FINI_ARRAY_SECTION_ASM_OP \\\n+  \"\\t.SUBSPA \\\\.fini_array,QUAD=1,ALIGN=8,ACCESS=31\"\n \n #endif /* USING_ELFOS_H */\n \n-/* For the time being, we aren't using init sections.  `P' relocations\n-   are currently used for function references.  However, P relocations are\n-   treated as data references and data references are bound by dld.sl\n-   immediately at program startup.  This causes an abort due to undefined\n-   weak symbols in crtbegin.o (e.g., __register_frame_info).  Possibly\n-   Q relocations might avoid this problem but the GNU assembler doesn't\n-   support them.  */\n+/* The following defines, used to run constructors and destructors with\n+   the SOM linker under HP-UX 11, are not needed.  */\n+#undef HAS_INIT_SECTION\n+#undef LD_INIT_SWITCH\n+#undef LD_FINI_SWITCH\n+\n+/* The following STARTFILE_SPEC and ENDFILE_SPEC defines provide the\n+   magic needed to run initializers and finalizers.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: %{!symbolic: crt0.o%s}} %{static:crtbeginT.o%s} \\\n+   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{!shared:crtend.o%s} %{shared:crtendS.o%s}\"\n+\n+/* Since HP uses the .init and .fini sections for array initializers\n+   and finalizers, we need different defines for INIT_SECTION_ASM_OP\n+   and FINI_SECTION_ASM_OP.  With the implementation adopted below,\n+   the sections are not actually used.  However, we still must provide\n+   defines to select the proper code path.  */\n #undef INIT_SECTION_ASM_OP\n+#define INIT_SECTION_ASM_OP\n #undef FINI_SECTION_ASM_OP\n+#define FINI_SECTION_ASM_OP\n+\n+/* We are using array initializers and don't want calls in the INIT\n+   and FINI sections.  */\n+#undef CRT_CALL_STATIC_FUNCTION\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\n+\n+/* The init_priority attribute is not supported with HP ld.  This could be\n+   supported if collect2 was used with LD_INIT_SWITCH.  Unfortunately, this\n+   approach doesn't work with GNU ld since HP-UX doesn't support DT_INIT,\n+   and therefore the -init and -fini GNU ld switches.  */\n+#undef SUPPORTS_INIT_PRIORITY\n+#define SUPPORTS_INIT_PRIORITY (TARGET_GNU_LD ? 1 : 0)\n+\n+/* We use DTOR_LIST_BEGIN to carry a bunch of hacks to allow us to use\n+   the init and fini array sections with both the HP and GNU linkers.\n+   The linkers setup the required dynamic entries in the dynamic segment\n+   and the dynamic linker does the calls.  This approach avoids using\n+   collect2.\n+\n+   The first hack is to implement __do_global_ctors_aux in crtbegin as\n+   it needs to be the first entry in the init array so that it is called\n+   last.  HP got the order of the init array backwards.  The DT_INIT_ARRAY\n+   is supposed to be executed in the same order as the addresses appear in\n+   the array.  DT_FINI_ARRAY is supposed to be executed in the opposite\n+   order.\n+\n+   The second hack is stubs for __cxa_finalize and _Jv_RegisterClasses.\n+   The HP implementation of undefined weak symbols is broken.  The linker\n+   and dynamic loader both search for undefined weak symbols contrary the\n+   generic System V ABI.  An undefined weak symbol should resolve to a\n+   value of 0 rather than causing an error.  The prototypes for\n+   __cxa_finalize and _Jv_RegisterClasses in crtstuff.c are weak when\n+   weak is supported (GNU as), so in theory a strong define should override\n+   the stub functions provided here.\n+\n+   The final hack is a set of plabels to implement the effect of\n+   CRT_CALL_STATIC_FUNCTION.  HP-UX 11 only supports DI_INIT_ARRAY and\n+   DT_FINI_ARRAY and they put the arrays in .init and .fini, rather than\n+   in .init_array and .fini_array.  The standard defines for .init and\n+   .fini have the execute flag set.  So, the assembler has to be hacked\n+   to munge the standard flags for these sections to make them agree\n+   with what the HP linker expects.  With the GNU linker, we need to\n+   used the .init_array and .fini_array sections.  So, we set up for\n+   both just in case.  Once we have built the table, the linker does\n+   the rest of the work.\n+\n+   The order is significant.  Placing __do_global_ctors_aux first in\n+   the list, results in it being called last.  User specified initializers,\n+   either using the linker +init command or a plabel, run before the\n+   initializers specified here.  */\n+\n+/* We need a __cxa_finalize stub if CRTSTUFFS_O is defined.  */\n+#ifdef CRTSTUFFS_O\n+#define PA_CXA_FINALIZE_STUB \\\n+extern void __cxa_finalize (void *) TARGET_ATTRIBUTE_WEAK;\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__cxa_finalize (void *p __attribute__((unused))) {}\n+#else\n+#define PA_CXA_FINALIZE_STUB\n+#endif\n \n-#define EH_FRAME_IN_DATA_SECTION 1\n+/* We need a _Jv_RegisterClasses stub if JCR_SECTION_NAME is defined.  */\n+#ifdef JCR_SECTION_NAME\n+#define PA_JV_REGISTERCLASSES_STUB \\\n+void\t\t\t\t\t\t\t\t\t\\\n+_Jv_RegisterClasses (void *p __attribute__((unused))) {}\n+#else\n+#define PA_JV_REGISTERCLASSES_STUB\n+#endif\n \n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"\"\n+/* We need to add frame_dummy to the initializer list if USE_EH_FRAME_REGISTRY\n+   or JCR_SECTION_NAME is defined.  */\n+#if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n+#define PA_INIT_FRAME_DUMMY_ASM_OP \".dword P%frame_dummy\"\n+#else\n+#define PA_INIT_FRAME_DUMMY_ASM_OP \"\"\n+#endif\n \n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{!shared: %{!symbolic: crt0.o%s}}\"\n-\n-/* Since we are not yet using .init and .fini sections, we need to\n-   explicitly arrange to run the global constructors and destructors.\n-   We could use ldd for this but it depends on LD_LIBRARY_PATH being\n-   correctly set.  So, we use the ld init and fini switches. However,\n-   we need to support different switches for the GNU and HP linkers.\n-   We can't check TARGET_GNU_LD in collect2, so we need a different\n-   test.  The +Accept switch is always the first switch when we are\n-   using the HP linker (see define for LINK_SPEC).  Checking for it\n-   is a somewhat fragile as it depends on internal details of the\n-   collect2 program but it is better than testing ld_file_name.\n-\n-   FIXME: The GNU linker is broken.  The -init/-fini switches don't\n-   work and ldd can't determine the dynamic dependences of executables\n-   linked with GNU ld.  The init and fini routines are not executed\n-   although DT_INIT and DT_FINI appear ok.  As a result, defining\n-   LD_INIT_SWITCH and LD_FINI_SWITCH causes more harm than good when\n-   using GNU ld.  However, the definitions appear to work fine with\n-   the HP linker.  */\n-#if 0\n-#define LD_INIT_SWITCH (strcmp (\"+Accept\", ld2_argv[1]) ? \"-init\" : \"+init\")\n-#define LD_FINI_SWITCH (strcmp (\"+Accept\", ld2_argv[1]) ? \"-fini\" : \"+fini\")\n+#define PA_INIT_FINI_HACK \\\n+static void __attribute__((used))\t\t\t\t\t\\\n+__do_global_ctors_aux (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  func_ptr *p = __CTOR_LIST__;\t\t\t\t\t\t\\\n+  while (*(p + 1))\t\t\t\t\t\t\t\\\n+    p++;\t\t\t\t\t\t\t\t\\\n+  for (; *p != (func_ptr) -1; p--)\t\t\t\t\t\\\n+    (*p) ();\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+PA_CXA_FINALIZE_STUB\t\t\t\t\t\t\t\\\n+PA_JV_REGISTERCLASSES_STUB\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+asm (HP_INIT_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".dword P%__do_global_ctors_aux\");\t\t\t\t\t\\\n+asm (PA_INIT_FRAME_DUMMY_ASM_OP);\t\t\t\t\t\\\n+asm (GNU_INIT_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".dword P%__do_global_ctors_aux\");\t\t\t\t\t\\\n+asm (PA_INIT_FRAME_DUMMY_ASM_OP);\t\t\t\t\t\\\n+asm (HP_FINI_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".dword P%__do_global_dtors_aux\");\t\t\t\t\t\\\n+asm (GNU_FINI_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".dword P%__do_global_dtors_aux\")\n+\n+/* The following two variants of DTOR_LIST_BEGIN are identical to those\n+   in crtstuff.c except for the addition of the above init-fini hack.  */\n+#ifdef DTORS_SECTION_ASM_OP\n+#define DTOR_LIST_BEGIN \\\n+asm (DTORS_SECTION_ASM_OP);\t\t\t\t\t\t\\\n+STATIC func_ptr __DTOR_LIST__[1]\t\t\t\t\t\\\n+  __attribute__ ((aligned(sizeof(func_ptr))))\t\t\t\t\\\n+  = { (func_ptr) (-1) };\t\t\t\t\t\t\\\n+PA_INIT_FINI_HACK\n+#else\n+#define DTOR_LIST_BEGIN \\\n+STATIC func_ptr __DTOR_LIST__[1]\t\t\t\t\t\\\n+  __attribute__ ((section(\".dtors\"), aligned(sizeof(func_ptr))))\t\\\n+  = { (func_ptr) (-1) };\t\t\t\t\t\t\\\n+PA_INIT_FINI_HACK\n #endif\n \n /* If using HP ld do not call pxdb.  Use size as a program that does nothing"}, {"sha": "aa509bd08c76709063104317f16a0ecc9d17286f", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "patch": "@@ -362,10 +362,6 @@ do {\t\t\t\t\t\t\\\n /* The .align directive in the HP assembler allows up to a 32 alignment.  */\n #define MAX_OFILE_ALIGNMENT 32768\n \n-/* SOM does not support the init_priority C++ attribute.  */\n-#undef SUPPORTS_INIT_PRIORITY\n-#define SUPPORTS_INIT_PRIORITY 0\n-\n /* The SOM linker hardcodes paths into binaries.  As a result, dotdots\n    must be removed from library prefixes to prevent binaries from depending\n    on the location of the GCC tool directory.  The downside is GCC"}]}