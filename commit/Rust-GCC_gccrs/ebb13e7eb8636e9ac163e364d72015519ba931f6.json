{"sha": "ebb13e7eb8636e9ac163e364d72015519ba931f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiMTNlN2ViODYzNmU5YWMxNjNlMzY0ZDcyMDE1NTE5YmE5MzFmNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-10-20T19:17:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-10-20T19:17:41Z"}, "message": "gcse.c (set_hash_table_size): Now unsigned.\n\n\t* gcse.c (set_hash_table_size): Now unsigned.\n\t* sdbout.c (template_name_p): Add \"const\" to avoid warnings.\n\t(sdbout_record_type_name, plain_type_1, sdbout_symbol): Likewise.\n\t(sdbout_one_type, sdbout_parms, sdbout_reg_parms): Likewise.\n\t(sdbout_end_epilogue): Remove variable NAME.\n\t* system.h (getopt): Add default definition.\n\t* config/alpha/alpha.c (print_operand): Don't continue processing\n\tafter issuing error.\n\t(summarize_insn): Avoid use of UL in constant.\n\nFrom-SVN: r36974", "tree": {"sha": "94e75190b5307250343c628edde90128fa946240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e75190b5307250343c628edde90128fa946240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebb13e7eb8636e9ac163e364d72015519ba931f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb13e7eb8636e9ac163e364d72015519ba931f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb13e7eb8636e9ac163e364d72015519ba931f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb13e7eb8636e9ac163e364d72015519ba931f6/comments", "author": null, "committer": null, "parents": [{"sha": "1468899dc245d342fe730ebf13ba57fb9cfb64a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1468899dc245d342fe730ebf13ba57fb9cfb64a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1468899dc245d342fe730ebf13ba57fb9cfb64a5"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "21c3fd845a4031ad1b6ecd1e5cad633cdbed8dc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebb13e7eb8636e9ac163e364d72015519ba931f6", "patch": "@@ -1,5 +1,15 @@\n Fri Oct 20 13:33:16 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* gcse.c (set_hash_table_size): Now unsigned.\n+\t* sdbout.c (template_name_p): Add \"const\" to avoid warnings.\n+\t(sdbout_record_type_name, plain_type_1, sdbout_symbol): Likewise.\n+\t(sdbout_one_type, sdbout_parms, sdbout_reg_parms): Likewise.\n+\t(sdbout_end_epilogue): Remove variable NAME.\n+\t* system.h (getopt): Add default definition.\n+\t* config/alpha/alpha.c (print_operand): Don't continue processing\n+\tafter issuing error.\n+\t(summarize_insn): Avoid use of UL in constant.\n+\n \t* function.c (locate_and_pad_parm): Use host_integerp and tree_low_cst.\n \n \t* fold-const.c (force_fit_type): Unsigned values can overflow"}, {"sha": "1f0aa95ac7399ca0a6e1f8af1411af788d3b8d22", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ebb13e7eb8636e9ac163e364d72015519ba931f6", "patch": "@@ -372,7 +372,7 @@ static unsigned int expr_hash_table_size;\n static struct expr **expr_hash_table;\n \n /* Total size of the copy propagation hash table, in elements.  */\n-static int set_hash_table_size;\n+static unsigned int set_hash_table_size;\n \n /* The table itself.\n    This is an array of `set_hash_table_size' elements.  */"}, {"sha": "ae46e634eb4f4d2e72ecf6cb145ee61fc0bb304e", "filename": "gcc/sdbout.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=ebb13e7eb8636e9ac163e364d72015519ba931f6", "patch": "@@ -429,7 +429,7 @@ static int\n template_name_p (name)\n      tree name;\n {\n-  register char *ptr = IDENTIFIER_POINTER (name);\n+  register const char *ptr = IDENTIFIER_POINTER (name);\n   while (*ptr && *ptr != '<')\n     ptr++;\n \n@@ -440,7 +440,7 @@ static void\n sdbout_record_type_name (type)\n      tree type;\n {\n-  char *name = 0;\n+  const char *name = 0;\n   int no_name;\n \n   if (KNOWN_TYPE_TAG (type))\n@@ -516,7 +516,8 @@ plain_type_1 (type, level)\n \t    && DECL_NAME (TYPE_NAME (type)) != 0\n \t    && TREE_CODE (DECL_NAME (TYPE_NAME (type))) == IDENTIFIER_NODE)\n \t  {\n-\t    char *name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t    const char *name\n+\t      = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n \t    if (!strcmp (name, \"char\"))\n \t      return T_CHAR;\n@@ -709,7 +710,7 @@ sdbout_symbol (decl, local)\n   tree context = NULL_TREE;\n   rtx value;\n   int regno = -1;\n-  char *name;\n+  const char *name;\n \n   sdbout_one_type (type);\n \n@@ -1246,7 +1247,7 @@ sdbout_one_type (type)\n \t\t&& host_integerp (DECL_SIZE (tem), 1)\n \t\t&& host_integerp (bit_position (tem), 0))\n \t      {\n-\t\tchar *name;\n+\t\tconst char *name;\n \n \t\tCONTIN;\n \t\tname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (tem));\n@@ -1302,7 +1303,7 @@ sdbout_parms (parms)\n     if (DECL_NAME (parms))\n       {\n \tint current_sym_value = 0;\n-\tchar *name = IDENTIFIER_POINTER (DECL_NAME (parms));\n+\tconst char *name = IDENTIFIER_POINTER (DECL_NAME (parms));\n \n \tif (name == 0 || *name == 0)\n \t  name = gen_fake_label ();\n@@ -1433,7 +1434,7 @@ sdbout_reg_parms (parms)\n   for (; parms; parms = TREE_CHAIN (parms))\n     if (DECL_NAME (parms))\n       {\n-\tchar *name = IDENTIFIER_POINTER (DECL_NAME (parms));\n+\tconst char *name = IDENTIFIER_POINTER (DECL_NAME (parms));\n \n \t/* Report parms that live in registers during the function\n \t   but were passed in memory.  */\n@@ -1594,8 +1595,8 @@ sdbout_end_function (line)\n void\n sdbout_end_epilogue ()\n {\n-  char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n-  PUT_SDB_EPILOGUE_END (name);\n+  PUT_SDB_EPILOGUE_END\n+    (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)));\n }\n \n /* Output sdb info for the given label.  Called only if LABEL_NAME (insn)"}, {"sha": "0021a57b27a4fa13d7da41f81e2a3bc74c89eceb", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb13e7eb8636e9ac163e364d72015519ba931f6/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=ebb13e7eb8636e9ac163e364d72015519ba931f6", "patch": "@@ -396,6 +396,10 @@ extern char *getcwd PARAMS ((char *, size_t));\n extern char *getenv PARAMS ((const char *));\n #endif\n \n+#if defined (HAVE_DECL_GETOPT) && !HAVE_DECL_GETOPT\n+extern int getopt PARAMS ((int, char **, char *));\n+#endif\n+\n #if defined (HAVE_DECL_GETWD) && !HAVE_DECL_GETWD\n extern char *getwd PARAMS ((char *));\n #endif"}]}