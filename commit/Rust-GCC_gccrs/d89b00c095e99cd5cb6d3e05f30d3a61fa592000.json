{"sha": "d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5YjAwYzA5NWU5OWNkNWNiNmQzZTA1ZjMwZDNhNjFmYTU5MjAwMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-15T03:14:38Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-19T22:13:00Z"}, "message": "c++: ICE with USING_DECL redeclaration [PR98687]\n\nMy recent patch that introduced push_using_decl_bindings didn't\nhandle USING_DECL redeclaration, therefore things broke.  This patch\namends that by breaking out a part of finish_nonmember_using_decl\nout to a separate function, push_using_decl_bindings, and calling it.\nIt needs an overload, because name_lookup is only available inside\nof name-lookup.c.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98687\n\t* name-lookup.c (push_using_decl_bindings): New, broken out of...\n\t(finish_nonmember_using_decl): ...here.\n\t* name-lookup.h (push_using_decl_bindings): Update declaration.\n\t* pt.c (tsubst_expr): Update the call to push_using_decl_bindings.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98687\n\t* g++.dg/lookup/using64.C: New test.\n\t* g++.dg/lookup/using65.C: New test.", "tree": {"sha": "88c70d0ec39f9ee8978aea8ff133a4deed603301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c70d0ec39f9ee8978aea8ff133a4deed603301"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9693e255ee2536c6823640eba5d0163c2b401161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9693e255ee2536c6823640eba5d0163c2b401161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9693e255ee2536c6823640eba5d0163c2b401161"}], "stats": {"total": 194, "additions": 145, "deletions": 49}, "files": [{"sha": "843e5f305c0ef13c16a1a479fdc02c51c252c2f3", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 56, "deletions": 47, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "patch": "@@ -6279,6 +6279,61 @@ pushdecl_namespace_level (tree x, bool hiding)\n   return t;\n }\n \n+/* Wrapper around push_local_binding to push the bindings for\n+   a non-member USING_DECL with NAME and VALUE.  LOOKUP, if non-null,\n+   is the result of name lookup during template parsing.  */\n+\n+static void\n+push_using_decl_bindings (name_lookup *lookup, tree name, tree value)\n+{\n+  tree type = NULL_TREE;\n+\n+  cxx_binding *binding = find_local_binding (current_binding_level, name);\n+  if (binding)\n+    {\n+      value = binding->value;\n+      type = binding->type;\n+    }\n+\n+  /* DR 36 questions why using-decls at function scope may not be\n+     duplicates.  Disallow it, as C++11 claimed and PR 20420\n+     implemented.  */\n+  if (lookup)\n+    do_nonmember_using_decl (*lookup, true, true, &value, &type);\n+\n+  if (!value)\n+    ;\n+  else if (binding && value == binding->value)\n+    /* Redeclaration of this USING_DECL.  */;\n+  else if (binding && binding->value && TREE_CODE (value) == OVERLOAD)\n+    {\n+      /* We already have this binding, so replace it.  */\n+      update_local_overload (IDENTIFIER_BINDING (name), value);\n+      IDENTIFIER_BINDING (name)->value = value;\n+    }\n+  else\n+    /* Install the new binding.  */\n+    push_local_binding (name, value, /*using=*/true);\n+\n+  if (!type)\n+    ;\n+  else if (binding && type == binding->type)\n+    ;\n+  else\n+    {\n+      push_local_binding (name, type, /*using=*/true);\n+      set_identifier_type_value (name, type);\n+    }\n+}\n+\n+/* Overload for push_using_decl_bindings that doesn't take a name_lookup.  */\n+\n+void\n+push_using_decl_bindings (tree name, tree value)\n+{\n+  push_using_decl_bindings (nullptr, name, value);\n+}\n+\n /* Process a using declaration in non-class scope.  */\n \n void\n@@ -6395,43 +6450,7 @@ finish_nonmember_using_decl (tree scope, tree name)\n   else\n     {\n       add_decl_expr (using_decl);\n-\n-      cxx_binding *binding = find_local_binding (current_binding_level, name);\n-      tree value = NULL;\n-      tree type = NULL;\n-      if (binding)\n-\t{\n-\t  value = binding->value;\n-\t  type = binding->type;\n-\t}\n-\n-      /* DR 36 questions why using-decls at function scope may not be\n-\t duplicates.  Disallow it, as C++11 claimed and PR 20420\n-\t implemented.  */\n-      do_nonmember_using_decl (lookup, true, true, &value, &type);\n-\n-      if (!value)\n-\t;\n-      else if (binding && value == binding->value)\n-\t;\n-      else if (binding && binding->value && TREE_CODE (value) == OVERLOAD)\n-\t{\n-\t  update_local_overload (IDENTIFIER_BINDING (name), value);\n-\t  IDENTIFIER_BINDING (name)->value = value;\n-\t}\n-      else\n-\t/* Install the new binding.  */\n-\tpush_local_binding (name, value, true);\n-\n-      if (!type)\n-\t;\n-      else if (binding && type == binding->type)\n-\t;\n-      else\n-\t{\n-\t  push_local_binding (name, type, true);\n-\t  set_identifier_type_value (name, type);\n-\t}\n+      push_using_decl_bindings (&lookup, name, NULL_TREE);\n     }\n }\n \n@@ -9279,14 +9298,4 @@ push_operator_bindings ()\n \t}\n }\n \n-/* Wrapper around push_local_binding to push the bindings for\n-   a non-member USING_DECL DECL that was found during template parsing.  */\n-\n-void\n-push_using_decl_bindings (tree decl)\n-{\n-  push_local_binding (DECL_NAME (decl), USING_DECL_DECLS (decl),\n-\t\t      /*using*/true);\n-}\n-\n #include \"gt-cp-name-lookup.h\""}, {"sha": "75db5b38061d94d0e5b6853fa57ceb595279291c", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "patch": "@@ -478,7 +478,7 @@ extern void push_to_top_level (void);\n extern void pop_from_top_level (void);\n extern void maybe_save_operator_binding (tree);\n extern void push_operator_bindings (void);\n-extern void push_using_decl_bindings (tree);\n+extern void push_using_decl_bindings (tree, tree);\n extern void discard_operator_bindings (tree);\n \n /* Lower level interface for modules. */"}, {"sha": "12d084031b1c772ba3916e0b0b11e7b602d9e710", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "patch": "@@ -18136,7 +18136,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t\t\t == tsubst (scope, args, complain, in_decl));\n \t    /* We still need to push the bindings so that we can look up\n \t       this name later.  */\n-\t    push_using_decl_bindings (decl);\n+\t    push_using_decl_bindings (DECL_NAME (decl),\n+\t\t\t\t      USING_DECL_DECLS (decl));\n \t  }\n \telse if (is_capture_proxy (decl)\n \t\t && !DECL_TEMPLATE_INSTANTIATION (current_function_decl))"}, {"sha": "a50cd273c896c3d72fb79aa1737e99a602607f14", "filename": "gcc/testsuite/g++.dg/lookup/using64.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing64.C?ref=d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "patch": "@@ -0,0 +1,69 @@\n+// PR c++/98687\n+// { dg-do compile }\n+\n+struct S { };\n+\n+namespace N {\n+  template <typename T>\n+  bool operator==(T, int);\n+\n+  template <typename T>\n+  void X(T);\n+}\n+\n+namespace M {\n+  template <typename T>\n+  bool operator==(T, double);\n+}\n+\n+template<typename T>\n+bool fn1 (T t)\n+{\n+  using N::operator==;\n+  return t == 1;\n+}\n+\n+template<typename T>\n+bool fn2 (T t)\n+{\n+  // Redeclaration.\n+  using N::operator==;\n+  using N::operator==;\n+  return t == 1;\n+}\n+\n+template<typename T>\n+bool fn3 (T t)\n+{\n+  // Need update_local_overload.\n+  using N::operator==;\n+  using M::operator==;\n+  return t == 1;\n+}\n+\n+template<typename T>\n+void fn4 (T)\n+{\n+  struct X { };\n+  using N::X;\n+  X(1);\n+}\n+\n+template<typename T>\n+void fn5 (T)\n+{\n+  int S;\n+  using ::S;\n+  struct S s;\n+}\n+\n+void\n+g ()\n+{\n+  S s;\n+  fn1 (s);\n+  fn2 (s);\n+  fn3 (s);\n+  fn4 (s);\n+  fn5 (s);\n+}"}, {"sha": "bc6c086197f15d9a8cec6068a1e868be3fe30a63", "filename": "gcc/testsuite/g++.dg/lookup/using65.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b00c095e99cd5cb6d3e05f30d3a61fa592000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing65.C?ref=d89b00c095e99cd5cb6d3e05f30d3a61fa592000", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/98687\n+// { dg-do compile }\n+\n+extern \"C\" namespace std {\n+  double log1p(double);\n+}\n+namespace std_fallback {\n+  template <typename> void log1p();\n+}\n+template <typename> struct log1p_impl {\n+  static int run() {\n+    using std::log1p;\n+    using std_fallback::log1p;\n+    return 0;\n+  }\n+};\n+void log1p() { log1p_impl<int>::run(); }"}]}