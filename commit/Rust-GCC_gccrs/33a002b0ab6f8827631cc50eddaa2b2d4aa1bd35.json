{"sha": "33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNhMDAyYjBhYjZmODgyNzYzMWNjNTBlZGRhYTJiMmQ0YWExYmQzNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-11-24T15:22:34Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-11-24T15:22:34Z"}, "message": "[TER] PR target/48863 : Don't replace expressions across local register variable definitions\n\n\tPR target/48863\n\tPR inline-asm/70184\n\t* tree-ssa-ter.c (temp_expr_table): Add reg_vars_cnt field.\n\t(new_temp_expr_table): Initialise reg_vars_cnt.\n\t(free_temp_expr_table): Release reg_vars_cnt.\n\t(process_replaceable): Add reg_vars_cnt argument, set reg_vars_cnt\n\tfield of TAB.\n\t(find_replaceable_in_bb): Use the above to record register variable\n\twrite occurrences and cancel replacement across them.\n\n\t* gcc.target/arm/pr48863.c: New test.\n\nFrom-SVN: r242840", "tree": {"sha": "960f57941e1d68bf6fbaa417e6a1f47b87b5e2d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/960f57941e1d68bf6fbaa417e6a1f47b87b5e2d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4da41abf84cc6796aa8b3ae38402ff7544dfc8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da41abf84cc6796aa8b3ae38402ff7544dfc8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da41abf84cc6796aa8b3ae38402ff7544dfc8d3"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "a6641c1653b138af95dca1533ebf905dda2b0361", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "patch": "@@ -1,3 +1,15 @@\n+2016-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/48863\n+\tPR inline-asm/70184\n+\t* tree-ssa-ter.c (temp_expr_table): Add reg_vars_cnt field.\n+\t(new_temp_expr_table): Initialise reg_vars_cnt.\n+\t(free_temp_expr_table): Release reg_vars_cnt.\n+\t(process_replaceable): Add reg_vars_cnt argument, set reg_vars_cnt\n+\tfield of TAB.\n+\t(find_replaceable_in_bb): Use the above to record register variable\n+\twrite occurrences and cancel replacement across them.\n+\n 2016-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/78437"}, {"sha": "96c5957eebf9b28d608feb03933a4b716698b3de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "patch": "@@ -1,3 +1,9 @@\n+2016-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/48863\n+\tPR inline-asm/70184\n+\t* gcc.target/arm/pr48863.c: New test.\n+\n 2016-11-24  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/builtin-unreachable-6.c: Update test to not to scan"}, {"sha": "33bc7a4735168632c7a20b3eb6dab18751219d78", "filename": "gcc/testsuite/gcc.target/arm/pr48863.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48863.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48863.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48863.c?ref=33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/48863.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Check that Temporary Expression Replacement does not move a\n+  libcall-producing expression across a statement initialising a local\n+  register variable.  */\n+\n+static inline int\n+dosvc (int fd, unsigned long high, unsigned low)\n+{\n+  register int r0 asm(\"r0\") = fd;\n+  register int r2 asm(\"r2\") = high;\n+  register int r3 asm(\"r3\") = low;\n+\n+  asm volatile(\"\" : \"=r\"(r0) : \"0\"(r0), \"r\"(r2), \"r\"(r3));\n+  return r0;\n+}\n+\n+struct s\n+{\n+  int fd;\n+  long long length;\n+} s = { 2, 0 }, *p = &s;\n+\n+int\n+main (void)\n+{\n+  unsigned low = p->length & 0xffffffff;\n+  unsigned high = p->length / 23;\n+\n+  if (dosvc (p->fd, high, low) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "af5d91c5a1d455d56b57303aa10244abccafa4e0", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=33a002b0ab6f8827631cc50eddaa2b2d4aa1bd35", "patch": "@@ -169,6 +169,8 @@ struct temp_expr_table\n   bitmap new_replaceable_dependencies;\t/* Holding place for pending dep's.  */\n   int *num_in_part;\t\t\t/* # of ssa_names in a partition.  */\n   int *call_cnt;\t\t\t/* Call count at definition.  */\n+  int *reg_vars_cnt;\t\t\t/* Number of register variable\n+\t\t\t\t\t   definitions encountered.  */\n };\n \n /* Used to indicate a dependency on VDEFs.  */\n@@ -211,6 +213,7 @@ new_temp_expr_table (var_map map)\n         t->num_in_part[p]++;\n     }\n   t->call_cnt = XCNEWVEC (int, num_ssa_names + 1);\n+  t->reg_vars_cnt = XCNEWVEC (int, num_ssa_names + 1);\n \n   return t;\n }\n@@ -243,6 +246,7 @@ free_temp_expr_table (temp_expr_table *t)\n   free (t->partition_dependencies);\n   free (t->num_in_part);\n   free (t->call_cnt);\n+  free (t->reg_vars_cnt);\n \n   if (t->replaceable_expressions)\n     ret = t->replaceable_expressions;\n@@ -435,7 +439,8 @@ ter_is_replaceable_p (gimple *stmt)\n /* Create an expression entry for a replaceable expression.  */\n \n static void\n-process_replaceable (temp_expr_table *tab, gimple *stmt, int call_cnt)\n+process_replaceable (temp_expr_table *tab, gimple *stmt, int call_cnt,\n+\t\t     int reg_vars_cnt)\n {\n   tree var, def, basevar;\n   int version;\n@@ -477,6 +482,7 @@ process_replaceable (temp_expr_table *tab, gimple *stmt, int call_cnt)\n     }\n \n   tab->call_cnt[version] = call_cnt;\n+  tab->reg_vars_cnt[version] = reg_vars_cnt;\n }\n \n \n@@ -573,6 +579,7 @@ find_replaceable_in_bb (temp_expr_table *tab, basic_block bb)\n   ssa_op_iter iter;\n   bool stmt_replaceable;\n   int cur_call_cnt = 0;\n+  int cur_reg_vars_cnt = 0;\n \n   for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n     {\n@@ -649,11 +656,14 @@ find_replaceable_in_bb (temp_expr_table *tab, basic_block bb)\n \t      /* Mark expression as replaceable unless stmt is volatile, or the\n \t\t def variable has the same root variable as something in the\n \t\t substitution list, or the def and use span a call such that\n-\t\t we'll expand lifetimes across a call.  */\n+\t\t we'll expand lifetimes across a call.  We also don't want to\n+\t\t replace across these expressions that may call libcalls that\n+\t\t clobber the register involved.  See PR 70184.  */\n \t      if (gimple_has_volatile_ops (stmt) || same_root_var\n \t\t  || (tab->call_cnt[ver] != cur_call_cnt\n \t\t      && SINGLE_SSA_USE_OPERAND (SSA_NAME_DEF_STMT (use), SSA_OP_USE)\n-\t\t\t == NULL_USE_OPERAND_P))\n+\t\t\t == NULL_USE_OPERAND_P)\n+\t\t  || tab->reg_vars_cnt[ver] != cur_reg_vars_cnt)\n \t\tfinished_with_expr (tab, ver, true);\n \t      else\n \t\tmark_replaceable (tab, use, stmt_replaceable);\n@@ -676,9 +686,16 @@ find_replaceable_in_bb (temp_expr_table *tab, basic_block bb)\n \t       && DECL_BUILT_IN (fndecl)))\n \tcur_call_cnt++;\n \n+      /* Increment counter if this statement sets a local\n+\t register variable.  */\n+      if (gimple_assign_single_p (stmt)\n+\t  && (TREE_CODE (gimple_assign_lhs (stmt)) == VAR_DECL\n+\t  && DECL_HARD_REGISTER (gimple_assign_lhs (stmt))))\n+\tcur_reg_vars_cnt++;\n+\n       /* Now see if we are creating a new expression or not.  */\n       if (stmt_replaceable)\n-\tprocess_replaceable (tab, stmt, cur_call_cnt);\n+\tprocess_replaceable (tab, stmt, cur_call_cnt, cur_reg_vars_cnt);\n \n       /* Free any unused dependency lists.  */\n       bitmap_clear (tab->new_replaceable_dependencies);"}]}