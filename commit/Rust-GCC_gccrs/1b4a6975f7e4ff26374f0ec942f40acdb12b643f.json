{"sha": "1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0YTY5NzVmN2U0ZmYyNjM3NGYwZWM5NDJmNDBhY2RiMTJiNjQzZg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-20T00:51:37Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-20T00:51:37Z"}, "message": "Intro.3: More notes.\n\n2001-11-19  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/doxygen/Intro.3:  More notes.\n\t* docs/doxygen/style.css:  Update to default style from Doxygen 1.2.10.\n\t* include/bits/stl_algobase.h:  Add doxygen hooks for functions.\n\t* include/ext/hash_map:  Add @file hook.\n\t* include/ext/hash_set:  Likewise.\n\t* include/ext/rope:  Likewise.\n\t* include/ext/ropeimpl.h:  Likewise.\n\t* include/ext/slist:  Likewise.\n\t* include/ext/stl_hash_fun.h:  Likewise.\n\t* include/ext/stl_hashtable.h:  Likewise.\n\t* include/ext/stl_rope.h:  Likewise.\n\n\t* docs/html/17_intro/license.html:  Remove \"experimental\" sentence.\n\t* docs/html/19_diagnostics/howto.html:  Document new verbose\n\tterminate handler.\n\t* testsuite/27_io/filebuf.cc:  Fix comment, move tweakable parameter\n\tto more visible (closer to description) position.\n\n\t* libsupc++/eh_type.cc:  Formatting tweak.\n\t* libsupc++/exception:  Likewise.\n\t* src/vterminate.cc:  Likewise.\n\n\t* docs/html/17_intro/porting.html:  Regenerate.\n\t* docs/html/faq/index.txt:  Regenerate.\n\nFrom-SVN: r47193", "tree": {"sha": "c09ea194b64b4912fc54020b98174c0a8abf27bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c09ea194b64b4912fc54020b98174c0a8abf27bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/comments", "author": null, "committer": null, "parents": [{"sha": "b73f64948e86b6003bbfe5691b5c45ef6347eb00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73f64948e86b6003bbfe5691b5c45ef6347eb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73f64948e86b6003bbfe5691b5c45ef6347eb00"}], "stats": {"total": 356, "additions": 322, "deletions": 34}, "files": [{"sha": "42a766a9d98683e1dd71d93019eb602ec5dd6e3f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -1,3 +1,30 @@\n+2001-11-19  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/doxygen/Intro.3:  More notes.\n+\t* docs/doxygen/style.css:  Update to default style from Doxygen 1.2.10.\n+\t* include/bits/stl_algobase.h:  Add doxygen hooks for functions.\n+\t* include/ext/hash_map:  Add @file hook.\n+\t* include/ext/hash_set:  Likewise.\n+\t* include/ext/rope:  Likewise.\n+\t* include/ext/ropeimpl.h:  Likewise.\n+\t* include/ext/slist:  Likewise.\n+\t* include/ext/stl_hash_fun.h:  Likewise.\n+\t* include/ext/stl_hashtable.h:  Likewise.\n+\t* include/ext/stl_rope.h:  Likewise.\n+\n+\t* docs/html/17_intro/license.html:  Remove \"experimental\" sentence.\n+\t* docs/html/19_diagnostics/howto.html:  Document new verbose\n+\tterminate handler.\n+\t* testsuite/27_io/filebuf.cc:  Fix comment, move tweakable parameter\n+\tto more visible (closer to description) position.\n+\n+\t* libsupc++/eh_type.cc:  Formatting tweak.\n+\t* libsupc++/exception:  Likewise.\n+\t* src/vterminate.cc:  Likewise.\n+\n+\t* docs/html/17_intro/porting.html:  Regenerate.\n+\t* docs/html/faq/index.txt:  Regenerate.\n+\n 2001-11-18  Jason Merrill  <jason@redhat.com>\n \n \t* libsupc++/eh_personality.cc (__cxa_call_unexpected): Take void*."}, {"sha": "b54bd559dcc1937a122bc9991cba964a90e31736", "filename": "libstdc++-v3/docs/doxygen/Intro.3", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -15,7 +15,8 @@ All standard library entities are declared within\n and have manual entries beginning with \"std_\".  For example, to see\n documentation of the template class\n .I std::vector\n-one would use \"man std_vector\".\n+one would use \"man std_vector\".  Some entities do not have a separate man\n+page; for those see the main listing in \"man Namespace_Std\".\n .P\n All the man pages are automatically generated by Doxygen.  For more\n information on this tool, see the HTML counterpart to these man pages."}, {"sha": "5b03b6982915eb6936944bd2fd26c61ba63ac7dd", "filename": "libstdc++-v3/docs/doxygen/style.css", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fstyle.css", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fstyle.css", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fstyle.css?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -5,12 +5,15 @@ A.el { text-decoration: none; font-weight: bold }\n A.elRef { font-weight: bold }\n A.code { text-decoration: none; font-weight: normal; color: #4444ee }\n A.codeRef { font-weight: normal; color: #4444ee }\n+A:hover { text-decoration: none; background-color: #f2f2ff }\n DL.el { margin-left: -1cm }\n DIV.fragment { width: 100%; border: none; background-color: #eeeeee }\n-DIV.ah { background-color: black; margin-bottom: 3; margin-top: 3 }\n-TD.md { background-color: #f2f2ff }\n-DIV.groupHeader { margin-left: 16; margin-top: 12; margin-bottom: 6; font-weight: bold }\n-DIV.groupText { margin-left: 16; font-style: italic; font-size: smaller }\n+DIV.ah { background-color: black; font-weight: bold; color: #ffffff; margin-bottom: 3px; margin-top: 3px }\n+TD.md { background-color: #f2f2ff; font-weight: bold; }\n+TD.mdname1 { background-color: #f2f2ff; font-weight: bold; font-style: italic; }\n+TD.mdname { background-color: #f2f2ff; font-weight: bold; font-style: italic; width: 600px; }\n+DIV.groupHeader { margin-left: 16px; margin-top: 12px; margin-bottom: 6px; font-weight: bold }\n+DIV.groupText { margin-left: 16px; font-style: italic; font-size: smaller }\n FONT.keyword       { color: #008000 }\n FONT.keywordtype   { color: #604020 }\n FONT.keywordflow   { color: #e08000 }"}, {"sha": "c3449b1ff2f95197914e1ece2846a40e0223a4f8", "filename": "libstdc++-v3/docs/html/17_intro/license.html", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -13,9 +13,6 @@\n \n <h1 class=\"centered\"><a name=\"top\">Licenses for the Library</a></h1>\n \n-<p><strong>As long as this sentence is in place, this page isn't\n-official.  It is still experimental if you are reading this.</strong></p>\n-\n <p>There are two licenses affecting GNU libstdc++-v3:  one for the code, and\n    one for the documentation.  Here we will describe both of them, and try\n    to answer some of the widespread questions.  If you have more questions,"}, {"sha": "291393c60a92f2052334bf3e1e19c61cc2c95796", "filename": "libstdc++-v3/docs/html/17_intro/porting.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -115,8 +115,8 @@ <h1>Operating system</h1>\n case, getc()/ungetc() will be used at some key locations in the library\n implementation instead of fseek().  Currently, the code path to avoid\n fseek() is only enabled when the seek size is 1 character away from the\n-current stream position.  This is known to improve *-unknown-freebsd*\n-and sparc-sun-solaris2.*.\n+current stream position.  This is known to improve *-unknown-freebsd*,\n+sparc-sun-solaris2.* and *-*-mingw32*.\n \n <p>Finally, you should bracket the entire file in an include-guard, like\n this:"}, {"sha": "d30b5d97dab1413aeb2e3a7e892d13ccd31ee666", "filename": "libstdc++-v3/docs/html/19_diagnostics/howto.html", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -26,6 +26,7 @@ <h1>Contents</h1>\n    <li><a href=\"#1\">Adding data to exceptions</a>\n    <li><a href=\"#2\">Exception class hierarchy diagram</a>\n    <li><a href=\"#3\">Concept checkers -- <strong>new and improved!</strong></a>\n+   <li><a href=\"#4\">Verbose <code>terminate</code></a>\n </ul>\n \n <hr>\n@@ -101,7 +102,65 @@ <h2><a name=\"3\">Concept checkers -- <strong>new and improved!</strong></a></h2>\n    <p>Right now they are off by default.  More will be added once\n       GCC 3.0 is released and we have time to revisit this topic.\n    </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n+   <p>If you are having difficulty with uncaught exceptions and want a\n+      little bit of help debugging the causes of the core dumps, you can\n+      make use of a GNU extension in GCC 3.1 and later:\n+      <pre>\n+   #include &lt;exception&gt;\n+\n+   int main()\n+   {\n+       std::set_terminate (__gnu_cxx::verbose_terminate_handler);\n+       ...\n+       throw <em>anything</em>;\n+   }</pre>\n+   </p>\n+   <p>The <code> verbose_terminate_handler </code> function obtains the name\n+      of the current exception, attempts to demangle it, and prints it to\n+      stderr.  If the exception is derived from <code> std::exception </code>\n+      then the output from <code>what()</code> will be included.\n+   </p>\n+   <p>Any replacement termination function is required to kill the program\n+      without returning; this one calls abort.\n+   </p>\n+   <p>For example:\n+      <pre>\n+   #include &lt;exception&gt;\n+   #include &lt;stdexcept&gt;\n+\n+   struct BLARGH : std::runtime_error\n+   {\n+       BLARGH (const string&amp; whatarg)\n+           : std::runtime_error(whatarg) { }\n+   };\n \n+   int main (int argc)\n+   {\n+       std::set_terminate (__gnu_cxx::verbose_terminate_handler);\n+       if (argc &gt; 5)\n+           throw BLARGH(&quot;argc is greater than 5!&quot;);\n+       else\n+           throw argc;\n+   }</pre>\n+   </p>\n+   <p>In GCC 3.1 and later, this gives\n+      <pre>\n+   % ./a.out\n+   terminate called after throwing a `int'\n+   Aborted\n+   % ./a.out f f f f f f f f f f f\n+   terminate called after throwing a `BLARGH'\n+   what(): argc is greater than 5!\n+   Aborted\n+   %</pre>\n+      The 'Aborted' line comes from the call to abort(), of course.\n+   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>"}, {"sha": "4b7487b86dde43b1cca135fe6a768b2b53b62136", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -643,9 +643,10 @@ a\n \n    All library objects are safe to use in a multithreaded program as long\n    as each thread carefully locks out access by any other thread while it\n-   uses any object visible to another thread. This requirement includes\n-   both read and write access to objects; do not assume that two threads\n-   may read a shared standard container at the same time.\n+   uses any object visible to another thread. In general, this\n+   requirement includes both read and write access to objects; unless\n+   otherwise documented as safe, do not assume that two threads may\n+   access a shared standard library object at the same time.\n \n    See chapters [84]17 (library introduction), [85]23 (containers), and\n    [86]27 (I/O) for more information."}, {"sha": "b252eea426fb004a2a56a8ce2b260cafb470eaac", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -155,6 +155,16 @@ namespace std\n       if (__b < __a) return __b; return __a;\n     }\n \n+  /**\n+   *  @brief This does what you think it does.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @return   The greater of the parameters.\n+   *\n+   *  This is the simple classic generic implementation.  It will work on\n+   *  temporary expressions, since they are only evaluated once, unlike a\n+   *  preprocessor macro.\n+  */\n   template<typename _Tp>\n     inline const _Tp&\n     max(const _Tp& __a, const _Tp& __b) \n@@ -165,6 +175,16 @@ namespace std\n       if (__a < __b) return __b; return __a;\n     }\n \n+  /**\n+   *  @brief This does what you think it does.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @param  comp  A @link s20_3_3_comparisons comparison functor@endlink.\n+   *  @return   The lesser of the parameters.\n+   *\n+   *  This will work on temporary expressions, since they are only evaluated\n+   *  once, unlike a preprocessor macro.\n+  */\n   template<typename _Tp, typename _Compare>\n     inline const _Tp&\n     min(const _Tp& __a, const _Tp& __b, _Compare __comp)\n@@ -173,6 +193,16 @@ namespace std\n       if (__comp(__b, __a)) return __b; return __a;\n     }\n \n+  /**\n+   *  @brief This does what you think it does.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @param  comp  A @link s20_3_3_comparisons comparison functor@endlink.\n+   *  @return   The greater of the parameters.\n+   *\n+   *  This will work on temporary expressions, since they are only evaluated\n+   *  once, unlike a preprocessor macro.\n+  */\n   template<typename _Tp, typename _Compare>\n     inline const _Tp&\n     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n@@ -295,6 +325,19 @@ namespace std\n       return __copy_ni2(__first, __last, __result, __Normal());\n     }\n \n+  /**\n+   *  @brief Copies the range [first,last) into result.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  result An output iterator.\n+   *  @return   result + (first - last)\n+   *\n+   *  This inline function will boil down to a call to @c memmove whenever\n+   *  possible.  Failing that, if random access iterators are passed, then the\n+   *  loop count will be known (and therefore a candidate for compiler\n+   *  optimizations such as unrolling).  If the input range and the output\n+   *  range overlap, then the copy_backward function should be used instead.\n+  */\n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n     copy(_InputIter __first, _InputIter __last, _OutputIter __result)\n@@ -419,6 +462,20 @@ namespace std\n \t\t\t\t\t\t    __Normal());\n     }\n \n+  /**\n+   *  @brief Copies the range [first,last) into result.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  result An output iterator.\n+   *  @return   result - (first - last)\n+   *\n+   *  The function has the same effect as copy, but starts at the end of the\n+   *  range and works its way to the start, returning the start of the result.\n+   *  This inline function will boil down to a call to @c memmove whenever\n+   *  possible.  Failing that, if random access iterators are passed, then the\n+   *  loop count will be known (and therefore a candidate for compiler\n+   *  optimizations such as unrolling).\n+  */\n   template <typename _BI1, typename _BI2>\n     inline _BI2\n     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n@@ -462,6 +519,20 @@ namespace std\n       return pair<_RAIter, _OutputIter>(__last, copy(__first, __last, __result));\n     }\n \n+  /**\n+   *  @brief Copies the range [first,first+count) into [result,result+count).\n+   *  @param  first  An input iterator.\n+   *  @param  count  The number of elements to copy.\n+   *  @param  result An output iterator.\n+   *  @return   A std::pair composed of first+count and result+count.\n+   *\n+   *  This is an SGI extension.\n+   *  This inline function will boil down to a call to @c memmove whenever\n+   *  possible.  Failing that, if random access iterators are passed, then the\n+   *  loop count will be known (and therefore a candidate for compiler\n+   *  optimizations such as unrolling).\n+   *  @ingroup SGIextensions\n+  */\n   template<typename _InputIter, typename _Size, typename _OutputIter>\n     inline pair<_InputIter, _OutputIter>\n     copy_n(_InputIter __first, _Size __count, _OutputIter __result)\n@@ -478,6 +549,17 @@ namespace std\n   // fill and fill_n\n \n \n+  /**\n+   *  @brief Fills the range [first,last) with copies of value.\n+   *  @param  first  A forward iterator.\n+   *  @param  last   A forward iterator.\n+   *  @param  value  A reference-to-const of arbitrary type.\n+   *  @return   Nothing.\n+   *\n+   *  This function fills a range with copies of the same value.  For one-byte\n+   *  types filling contiguous areas of memory, this becomes an inline call to\n+   *  @c memset.\n+  */\n   template<typename _ForwardIter, typename _Tp>\n     void\n     fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)\n@@ -489,6 +571,17 @@ namespace std\n \t*__first = __value;\n     }\n \n+  /**\n+   *  @brief Fills the range [first,first+n) with copies of value.\n+   *  @param  first  An output iterator.\n+   *  @param  n      The count of copies to perform.\n+   *  @param  value  A reference-to-const of arbitrary type.\n+   *  @return   The iterator at first+n.\n+   *\n+   *  This function fills a range with copies of the same value.  For one-byte\n+   *  types filling contiguous areas of memory, this becomes an inline call to\n+   *  @c memset.\n+  */\n   template<typename _OutputIter, typename _Size, typename _Tp>\n     _OutputIter\n     fill_n(_OutputIter __first, _Size __n, const _Tp& __value)\n@@ -552,6 +645,18 @@ namespace std\n   //--------------------------------------------------\n   // equal and mismatch\n \n+  /**\n+   *  @brief Finds the places in ranges which don't match.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @return   A pair of iterators pointing to the first mismatch.\n+   *\n+   *  This compares the elements of two ranges using @c == and returns a pair\n+   *  of iterators.  The first iterator points into the first range, the\n+   *  second iterator points into the second range, and the elements pointed\n+   *  to by the iterators are not equal.\n+  */\n   template<typename _InputIter1, typename _InputIter2>\n     pair<_InputIter1, _InputIter2>\n     mismatch(_InputIter1 __first1, _InputIter1 __last1,\n@@ -572,6 +677,20 @@ namespace std\n       return pair<_InputIter1, _InputIter2>(__first1, __first2);\n     }\n \n+  /**\n+   *  @brief Finds the places in ranges which don't match.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @param  binary_pred  A binary predicate @link s20_3_1_base functor@endlink.\n+   *  @return   A pair of iterators pointing to the first mismatch.\n+   *\n+   *  This compares the elements of two ranges using the binary_pred\n+   *  parameter, and returns a pair\n+   *  of iterators.  The first iterator points into the first range, the\n+   *  second iterator points into the second range, and the elements pointed\n+   *  to by the iterators are not equal.\n+  */\n   template<typename _InputIter1, typename _InputIter2, typename _BinaryPredicate>\n     pair<_InputIter1, _InputIter2>\n     mismatch(_InputIter1 __first1, _InputIter1 __last1,\n@@ -589,6 +708,17 @@ namespace std\n       return pair<_InputIter1, _InputIter2>(__first1, __first2);\n     }\n \n+  /**\n+   *  @brief Tests a range for element-wise equality.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @return   A boolean true or false.\n+   *\n+   *  This compares the elements of two ranges using @c == and returns true or\n+   *  false depending on whether all of the corresponding elements of the\n+   *  ranges are equal.\n+  */\n   template<typename _InputIter1, typename _InputIter2>\n     inline bool\n     equal(_InputIter1 __first1, _InputIter1 __last1,\n@@ -607,6 +737,19 @@ namespace std\n       return true;\n     }\n \n+  /**\n+   *  @brief Tests a range for element-wise equality.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @param  binary_pred  A binary predicate @link s20_3_1_base functor@endlink.\n+   *  @return   A boolean true or false.\n+   *\n+   *  This compares the elements of two ranges using the binary_pred\n+   *  parameter, and returns true or\n+   *  false depending on whether all of the corresponding elements of the\n+   *  ranges are equal.\n+  */\n   template<typename _InputIter1, typename _InputIter2, typename _BinaryPredicate>\n     inline bool\n     equal(_InputIter1 __first1, _InputIter1 __last1,\n@@ -627,6 +770,20 @@ namespace std\n   // lexicographical_compare and lexicographical_compare_3way.\n   // (the latter is not part of the C++ standard.)\n \n+  /**\n+   *  @brief Performs \"dictionary\" comparison on ranges.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @param  last2   An input iterator.\n+   *  @return   A boolean true or false.\n+   *\n+   *  \"Returns true if the sequence of elements defined by the range\n+   *  [first1,last1) is lexicographically less than the sequence of elements\n+   *  defined by the range [first2,last2).  Returns false otherwise.\"\n+   *  (Quoted from [25.3.8]/1.)  If the iterators are all character pointers,\n+   *  then this is an inline call to @c memcmp.\n+  */\n   template<typename _InputIter1, typename _InputIter2>\n     bool\n     lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,\n@@ -650,6 +807,18 @@ namespace std\n       return __first1 == __last1 && __first2 != __last2;\n     }\n \n+  /**\n+   *  @brief Performs \"dictionary\" comparison on ranges.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @param  last2   An input iterator.\n+   *  @param  comp  A @link s20_3_3_comparisons comparison functor@endlink.\n+   *  @return   A boolean true or false.\n+   *\n+   *  The same as the four-parameter @c lexigraphical_compare, but uses the\n+   *  comp parameter instead of @c <.\n+  */\n   template<typename _InputIter1, typename _InputIter2, typename _Compare>\n     bool\n     lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,\n@@ -749,6 +918,20 @@ namespace std\n #endif\n   }\n \n+  /**\n+   *  @brief @c memcmp on steroids.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @param  last2   An input iterator.\n+   *  @return   An int, as with @c memcmp.\n+   *\n+   *  The return value will be less than zero if the first range is\n+   *  \"lexigraphically less than\" the second, greater than zero if the second\n+   *  range is \"lexigraphically less than\" the first, and zero otherwise.\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+  */\n   template<typename _InputIter1, typename _InputIter2>\n     int\n     lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,"}, {"sha": "228daba80c46d72209e7d20cab964ff4bf32baa7", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -53,8 +53,9 @@\n  *\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file hash_map\n+ *  This header file is an extension to the Standard C++ Library.  You should\n+ *  use the \"ext/\" path prefix in your @c #include statements.\n  */\n \n #ifndef __SGI_STL_INTERNAL_HASH_MAP_H"}, {"sha": "f5ff2f198d97b7078255fcee9360d6a168e4aabe", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -53,8 +53,9 @@\n  *\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file hash_set\n+ *  This header file is an extension to the Standard C++ Library.  You should\n+ *  use the \"ext/\" path prefix in your @c #include statements.\n  */\n \n #ifndef __SGI_STL_INTERNAL_HASH_SET_H"}, {"sha": "78bb7dc8570f21f3387ebfefc8b0c228f91d23bb", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -40,6 +40,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file rope\n+ *  This header file is an extension to the Standard C++ Library.  You should\n+ *  use the \"ext/\" path prefix in your @c #include statements.\n+ */\n+\n #ifndef __SGI_STL_ROPE\n #define __SGI_STL_ROPE\n "}, {"sha": "b8f45688a58f42d8e2aa48b5e434a50a1d005497", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -40,13 +40,14 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file ropeimpl.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #include <bits/std_cstdio.h>     \n #include <bits/std_iostream.h>\n-# include <bits/functexcept.h>\n+#include <bits/functexcept.h>\n \n namespace std\n {"}, {"sha": "7ed4c313625dc3e5c98bcebd2c40c96f32510707", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -41,8 +41,9 @@\n  *\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file slist\n+ *  This header file is an extension to the Standard C++ Library.  You should\n+ *  use the \"ext/\" path prefix in your @c #include statements.\n  */\n \n #ifndef __SGI_STL_INTERNAL_SLIST_H"}, {"sha": "4dba3292e6031e86396c92fd0cbff52a562d5a93", "filename": "libstdc++-v3/include/ext/stl_hash_fun.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -53,8 +53,9 @@\n  *\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_hash_fun.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_BITS_STL_HASH_FUN_H"}, {"sha": "1425bac776f5ad3ba74bd83208bdfa9a18586d81", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -53,8 +53,9 @@\n  *\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_hashtable.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_HASHTABLE_H"}, {"sha": "00db893c92378ffec6d8b942c7cc118261526183", "filename": "libstdc++-v3/include/ext/stl_rope.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -40,8 +40,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_rope.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n // rope<_CharT,_Alloc> is a sequence of _CharT."}, {"sha": "1c8afacf0673b797c2d09e43d6b37b4fa85e4756", "filename": "libstdc++-v3/libsupc++/eh_type.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -31,7 +31,8 @@\n #include <typeinfo>\n #include \"unwind-cxx.h\"\n \n-namespace __cxxabiv1 {\n+namespace __cxxabiv1\n+{\n \n // Returns the type_info for the currently handled exception [15.3/8], or\n // null if there is none."}, {"sha": "3e9fd9675546f27542d101de2bbb38d68801af22", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -95,7 +95,8 @@ namespace std\n   bool uncaught_exception() throw();\n } // namespace std\n \n-namespace __gnu_cxx {\n+namespace __gnu_cxx\n+{\n   /** A replacement for the standard terminate_handler which prints more\n       information about the terminating exception (if any) on stderr.  */\n   void verbose_terminate_handler ();"}, {"sha": "a56db74c3f25f31d069f93656f634edc4eaff51b", "filename": "libstdc++-v3/src/vterminate.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -36,7 +36,8 @@\n using namespace std;\n using namespace abi;\n \n-namespace __gnu_cxx {\n+namespace __gnu_cxx\n+{\n \n /** This is a replacement for the standard terminate_handler which prints\n     more information about the terminating exception (if any) on stderr.  */"}, {"sha": "5b7f086b45cecbce850282a76f6d18475e46fc39", "filename": "libstdc++-v3/testsuite/27_io/filebuf.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a6975f7e4ff26374f0ec942f40acdb12b643f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc?ref=1b4a6975f7e4ff26374f0ec942f40acdb12b643f", "patch": "@@ -19,12 +19,16 @@\n // USA.\n \n // NB: this test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of 8092, so that overflow/underflow can be\n+// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n // simulated a bit more readily.\n+// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n \n // @require@ %-*.tst %-*.txt\n // @diff@ %-*.tst %*.txt\n \n+const int buffer_size = 8192;\n+//const int buffer_size = 40;\n+\n #include <fstream>\n #include <iostream>\n #include <testsuite_hooks.h>\n@@ -46,8 +50,6 @@ derived_filebuf fb_01; // in\n derived_filebuf fb_02; // out\n derived_filebuf fb_03; // in | out\n \n-const int buffer_size = 8192;\n-\n \n // initialize filebufs to be the same size regardless of platform\n void test00()"}]}