{"sha": "988dd22ec6665117e8587389ac85389f1c321c45", "node_id": "C_kwDOANBUbNoAKDk4OGRkMjJlYzY2NjUxMTdlODU4NzM4OWFjODUzODlmMWMzMjFjNDU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-25T12:03:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-28T14:26:35Z"}, "message": "libstdc++: Fix allocator propagation in regex algorithms [PR107376]\n\nThe PR points out that we assume the match_results allocator is default\nconstuctible, which might not be true. We also have a related issue with\nunwanted propagation from an object that might have an unequal\nallocator.\n\nIdeally we use the same allocator type for _State_info::_M_match_queue\nbut that would be an ABI change now. We should investigate if that can\nbe done without breaking anything, which might be possible because the\n_Executor object is short-lived and never leaks out of the regex_match,\nregex_search, and regex_replace algorithms. If we change the mangled\nname for _Executor then there would be no ODR violations when mixing old\nand new definitions. This commit does not attempt that.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107376\n\t* include/bits/regex_executor.h (_Executor::_Executor): Use same\n\tallocator for _M_cur_results and _M_results.\n\t* include/bits/regex_executor.tcc (_Executor::_M_main_dispatch):\n\tPrevent possibly incorrect allocator propagating to\n\t_M_cur_results.\n\t* testsuite/28_regex/algorithms/regex_match/107376.cc: New test.", "tree": {"sha": "afdf2d0d8b3926d273b08300452e41133fb0d6b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afdf2d0d8b3926d273b08300452e41133fb0d6b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/988dd22ec6665117e8587389ac85389f1c321c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988dd22ec6665117e8587389ac85389f1c321c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988dd22ec6665117e8587389ac85389f1c321c45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988dd22ec6665117e8587389ac85389f1c321c45/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95decac3ce8c8c7c5302cd6fac005a10463de165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95decac3ce8c8c7c5302cd6fac005a10463de165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95decac3ce8c8c7c5302cd6fac005a10463de165"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "cdafcd5523d55ae3a935a59cb9eca6df4c0854fc", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988dd22ec6665117e8587389ac85389f1c321c45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988dd22ec6665117e8587389ac85389f1c321c45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=988dd22ec6665117e8587389ac85389f1c321c45", "patch": "@@ -71,14 +71,15 @@ namespace __detail\n \t\t_ResultsVec&    __results,\n \t\tconst _RegexT&  __re,\n \t\t_FlagT          __flags)\n-      : _M_begin(__begin),\n-      _M_end(__end),\n-      _M_re(__re),\n-      _M_nfa(*__re._M_automaton),\n-      _M_results(__results),\n-      _M_rep_count(_M_nfa.size()),\n-      _M_states(_M_nfa._M_start(), _M_nfa.size()),\n-      _M_flags(__flags)\n+      : _M_cur_results(__results.get_allocator()),\n+\t_M_begin(__begin),\n+\t_M_end(__end),\n+\t_M_re(__re),\n+\t_M_nfa(*__re._M_automaton),\n+\t_M_results(__results),\n+\t_M_rep_count(_M_nfa.size()),\n+\t_M_states(_M_nfa._M_start(), _M_nfa.size()),\n+\t_M_flags(__flags)\n       {\n \tusing namespace regex_constants;\n \tif (__flags & match_prev_avail) // ignore not_bol and not_bow"}, {"sha": "a5885ed34badd0da4c8779dd71b49eff191fb04f", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988dd22ec6665117e8587389ac85389f1c321c45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988dd22ec6665117e8587389ac85389f1c321c45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=988dd22ec6665117e8587389ac85389f1c321c45", "patch": "@@ -124,9 +124,10 @@ namespace __detail\n \t    break;\n \t  std::fill_n(_M_states._M_visited_states, _M_nfa.size(), false);\n \t  auto __old_queue = std::move(_M_states._M_match_queue);\n+\t  auto __alloc = _M_cur_results.get_allocator();\n \t  for (auto& __task : __old_queue)\n \t    {\n-\t      _M_cur_results = std::move(__task.second);\n+\t      _M_cur_results = _ResultsVec(std::move(__task.second), __alloc);\n \t      _M_dfs(__match_mode, __task.first);\n \t    }\n \t  if (__match_mode == _Match_mode::_Prefix)"}, {"sha": "da4f7ad0a23f5b35e9b6cc90f28cb69a20e9df6f", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/107376.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988dd22ec6665117e8587389ac85389f1c321c45/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2F107376.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988dd22ec6665117e8587389ac85389f1c321c45/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2F107376.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2F107376.cc?ref=988dd22ec6665117e8587389ac85389f1c321c45", "patch": "@@ -0,0 +1,76 @@\n+// { dg-do run { target c++11 } }\n+#include <regex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+template<typename T>\n+struct Alloc\n+{\n+  using value_type = T;\n+  explicit Alloc(int) { }\n+  template<typename U> Alloc(const Alloc&) { }\n+\n+  T* allocate(std::size_t n)\n+  { return std::allocator<T>().allocate(n); }\n+  void deallocate(T* ptr, std::size_t n)\n+  { std::allocator<T>().deallocate(ptr, n); }\n+\n+  bool operator==(const Alloc&) const { return true; }\n+  bool operator!=(const Alloc&) const { return false; }\n+};\n+\n+void\n+test_non_default_constructible()\n+{\n+  using sub_match = std::sub_match<const char*>;\n+  using alloc_type = Alloc<sub_match>;\n+  using match_results = std::match_results<const char*, alloc_type>;\n+  match_results res(alloc_type(1));\n+\n+  std::regex_match(\"x\", res, std::regex(\".\")); // PR libstdc++/107376\n+}\n+\n+template<typename T>\n+struct PropAlloc\n+{\n+  int id;\n+\n+  using value_type = T;\n+  explicit PropAlloc(int id) : id(id) { }\n+  template<typename U> PropAlloc(const PropAlloc& a) : id(a.id) { }\n+\n+  using propagate_on_container_move_assignment = std::true_type;\n+  using propagate_on_container_copy_assignment = std::true_type;\n+\n+  PropAlloc select_on_container_copy_construction() const\n+  { return PropAlloc(0); }\n+\n+  T* allocate(std::size_t n)\n+  { return std::allocator<T>().allocate(n); }\n+  void deallocate(T* ptr, std::size_t n)\n+  { std::allocator<T>().deallocate(ptr, n); }\n+\n+  bool operator==(const PropAlloc& a) const { return id == a.id; }\n+  bool operator!=(const PropAlloc& a) const { return id != a.id; }\n+};\n+\n+void\n+test_propagation()\n+{\n+  using sub_match = std::sub_match<const char*>;\n+  using alloc_type = PropAlloc<sub_match>;\n+  using match_results = std::match_results<const char*, alloc_type>;\n+  alloc_type alloc(107376);\n+  match_results res(alloc);\n+\n+  std::regex re(\"..\", std::regex_constants::__polynomial);\n+  std::regex_match(\"xx\", res, re);\n+\n+  VERIFY( res.get_allocator() == alloc );\n+}\n+\n+int main()\n+{\n+  test_non_default_constructible();\n+  test_propagation();\n+}"}]}