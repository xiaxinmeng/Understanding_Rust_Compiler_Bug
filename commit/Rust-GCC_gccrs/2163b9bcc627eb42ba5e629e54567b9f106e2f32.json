{"sha": "2163b9bcc627eb42ba5e629e54567b9f106e2f32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2M2I5YmNjNjI3ZWI0MmJhNWU2MjllNTQ1NjdiOWYxMDZlMmYzMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-06-08T17:28:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-06-08T17:28:19Z"}, "message": "re PR target/81015 (Bad codegen for __builtin_clz(unsigned short))\n\n\tPR target/81015\n\tRevert:\n\t2016-12-14  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/59874\n\t* config/i386/i386.md (*ctzhi2): New insn_and_split pattern.\n\t(*clzhi2): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/81015\n\t* gcc.target/i386/pr59874-1.c (foo): Call __builtin_ctzs.\n\t* gcc.target/i386/pr59874-2.c (foo): Call __builtin_clzs.\n\t* gcc.target/i386/pr81015.c: New test.\n\nFrom-SVN: r249028", "tree": {"sha": "938c57531bc5aee0732892fc3d3b276a8368af03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/938c57531bc5aee0732892fc3d3b276a8368af03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2163b9bcc627eb42ba5e629e54567b9f106e2f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2163b9bcc627eb42ba5e629e54567b9f106e2f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2163b9bcc627eb42ba5e629e54567b9f106e2f32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2163b9bcc627eb42ba5e629e54567b9f106e2f32/comments", "author": null, "committer": null, "parents": [{"sha": "73f49ad74377e14a9cf0886b3539eeace2111428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f49ad74377e14a9cf0886b3539eeace2111428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f49ad74377e14a9cf0886b3539eeace2111428"}], "stats": {"total": 186, "additions": 94, "deletions": 92}, "files": [{"sha": "d5b003ee86d034453e43427b914e4916fb03f7b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 52, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2163b9bcc627eb42ba5e629e54567b9f106e2f32", "patch": "@@ -1,3 +1,13 @@\n+2017-06-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/81015\n+\tRevert:\n+\t2016-12-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59874\n+\t* config/i386/i386.md (*ctzhi2): New insn_and_split pattern.\n+\t(*clzhi2): Ditto.\n+\n 2017-06-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* predict.c (unlikely_executed_edge_p): Move ahead.\n@@ -183,15 +193,15 @@\n \tbuilt-in functions was implemented as int not long long.  Fix sign\n \tof return value for the unsigned version of vec_mulo and vec_mule.\n \tvector unsigned long long vec_bperm (vector unsigned long long,\n-\t                                     vector unsigned char)\n+\t\t\t\t\t     vector unsigned char)\n \tvector signed long long vec_mule (vector signed int,\n-\t                                  vector signed int)\n+\t\t\t\t\t  vector signed int)\n \tvector unsigned long long vec_mule (vector unsigned int,\n-\t                                    vector unsigned int)\n+\t\t\t\t\t    vector unsigned int)\n \tvector signed long long vec_mulo (vector signed int,\n-\t                                  vector signed int)\n+\t\t\t\t\t  vector signed int)\n \tvector unsigned long long vec_mulo (vector unsigned int,\n-\t                                    vector unsigned int)\n+\t\t\t\t\t    vector unsigned int)\n \t* doc/extend.texi: Fix the documentation for the built-in\n \tfunctions.\n \n@@ -543,26 +553,26 @@\n \n 2017-06-06  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n \n-        * tree-ssa-loop-prefetch.c (struct mem_ref_group, struct mem_ref):\n-        New \"uid\" fields to hold pretty-print IDs of group and ref.\n-        Memory references are now identified as <group_id>:<ref_id>\n-        instead of using [random] addresses.\n-        (dump_mem_details): Simplify, no functional change.\n-        (dump_mem_ref): Simplify and make output more concise.\n-        Replace couple of fprintf's throughout code with calls to dump_mem_ref.\n-        (find_or_create_group): Initialize group uid.\n-        (record_ref): Initialize ref uid.  Improve debug output.\n-        (prune_group_by_reuse, should_issue_prefetch_p,)\n-        (should_issue_prefetch_p, schedule_prefetches, issue_prefetch_ref,)\n-        (mark_nontemporal_store, determine_loop_nest_reuse):\n-        Improve debug output.\n+\t* tree-ssa-loop-prefetch.c (struct mem_ref_group, struct mem_ref):\n+\tNew \"uid\" fields to hold pretty-print IDs of group and ref.\n+\tMemory references are now identified as <group_id>:<ref_id>\n+\tinstead of using [random] addresses.\n+\t(dump_mem_details): Simplify, no functional change.\n+\t(dump_mem_ref): Simplify and make output more concise.\n+\tReplace couple of fprintf's throughout code with calls to dump_mem_ref.\n+\t(find_or_create_group): Initialize group uid.\n+\t(record_ref): Initialize ref uid.  Improve debug output.\n+\t(prune_group_by_reuse, should_issue_prefetch_p,)\n+\t(should_issue_prefetch_p, schedule_prefetches, issue_prefetch_ref,)\n+\t(mark_nontemporal_store, determine_loop_nest_reuse):\n+\tImprove debug output.\n \n 2017-06-06  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n \n-        * dbgcnt.def (prefetch): New debug counter.\n-        * tree-ssa-loop-prefetch.c (dbgcnt.h): New include.\n-        (schedule_prefetches): Stop issueing prefetches if debug counter\n-        tripped.\n+\t* dbgcnt.def (prefetch): New debug counter.\n+\t* tree-ssa-loop-prefetch.c (dbgcnt.h): New include.\n+\t(schedule_prefetches): Stop issueing prefetches if debug counter\n+\ttripped.\n \n 2017-06-06  Tom de Vries  <tom@codesourcery.com>\n \n@@ -1233,9 +1243,9 @@\n 2017-05-31  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* config/i386/avx512fintrin.h (_mm_mask_max_sd)\n-        (_mm_maskz_max_sd, _mm_mask_max_ss, _mm_maskz_max_ss)\n-        (_mm_mask_min_sd, _mm_maskz_min_sd, _mm_mask_min_ss)\n-        (_mm_maskz_min_ss): New intrinsics.\n+\t(_mm_maskz_max_sd, _mm_mask_max_ss, _mm_maskz_max_ss)\n+\t(_mm_mask_min_sd, _mm_maskz_min_sd, _mm_mask_min_ss)\n+\t(_mm_maskz_min_ss): New intrinsics.\n \n 2017-05-31  Martin Liska  <mliska@suse.cz>\n \n@@ -2438,39 +2448,39 @@\n \n \t* config/rs6000/rs6000-c: Add support for built-in functions\n \tvector unsigned long long vec_bperm (vector unsigned long long,\n-\t                                     vector unsigned char)\n+\t\t\t\t\t     vector unsigned char)\n \tvector signed long long vec_mule (vector signed int,\n-\t                                  vector signed int)\n+\t\t\t\t\t  vector signed int)\n \tvector unsigned long long vec_mule (vector unsigned int,\n-\t                                    vector unsigned int)\n+\t\t\t\t\t    vector unsigned int)\n \tvector signed long long vec_mulo (vector signed int,\n-\t                                  vector signed int)\n+\t\t\t\t\t  vector signed int)\n \tvector unsigned long long vec_mulo (vector unsigned int,\n-\t                                    vector unsigned int)\n+\t\t\t\t\t    vector unsigned int)\n \tvector signed char vec_sldw (vector signed char,\n-\t                             vector signed char,\n-\t                             const int)\n+\t\t\t\t     vector signed char,\n+\t\t\t\t     const int)\n \tvector unsigned char vec_sldw (vector unsigned char,\n-\t                               vector unsigned char,\n-\t                               const int)\n+\t\t\t\t       vector unsigned char,\n+\t\t\t\t       const int)\n \tvector signed short vec_sldw (vector signed short,\n-\t                              vector signed short,\n-\t                              const int)\n+\t\t\t\t      vector signed short,\n+\t\t\t\t      const int)\n \tvector unsigned short vec_sldw (vector unsigned short,\n-\t                                vector unsigned short,\n-\t                                const int)\n+\t\t\t\t\tvector unsigned short,\n+\t\t\t\t\tconst int)\n \tvector signed int vec_sldw (vector signed int,\n-\t                            vector signed int,\n-\t                            const int)\n+\t\t\t\t    vector signed int,\n+\t\t\t\t    const int)\n \tvector unsigned int vec_sldw (vector unsigned int,\n-\t                              vector unsigned int,\n-\t                              const int)\n+\t\t\t\t      vector unsigned int,\n+\t\t\t\t      const int)\n \tvector signed long long vec_sldw (vector signed long long,\n-\t                                  vector signed long long,\n-\t                                  const int)\n+\t\t\t\t\t  vector signed long long,\n+\t\t\t\t\t  const int)\n \tvector unsigned long long vec_sldw (vector unsigned long long,\n-\t                                    vector unsigned long long,\n-\t                                    const int)\n+\t\t\t\t\t    vector unsigned long long,\n+\t\t\t\t\t    const int)\n \t* config/rs6000/rs6000-c: Add support for built-in functions\n \t* config/rs6000/rs6000-builtin.def: Add definition for SLDW.\n \t* config/rs6000/altivec.h: Add defintion for vec_sldw.\n@@ -3562,12 +3572,12 @@\n 2017-05-10  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c: Add support for built-in functions\n-\tvector signed char        vec_neg (vector signed char)\n-\tvector signed short int   vec_neg (vector short int)\n-\tvector signed int         vec_neg (vector signed int)\n-\tvector signed long long   vec_neg (vector signed long long)\n-\tvector float              vec_neg (vector float)\n-\tvector double             vec_neg (vector double)\n+\tvector signed char\tvec_neg (vector signed char)\n+\tvector signed short int\tvec_neg (vector short int)\n+\tvector signed int\tvec_neg (vector signed int)\n+\tvector signed long long\tvec_neg (vector signed long long)\n+\tvector float\t\tvec_neg (vector float)\n+\tvector double\t\tvec_neg (vector double)\n \t* config/rs6000/rs6000-builtin.def: Add definitions for NEG function\n \toverload.\n \t* config/rs6000/altivec.h: Add define for vec_neg"}, {"sha": "adc13a9afbcc083f99d1569ef070fe2f651f020e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2163b9bcc627eb42ba5e629e54567b9f106e2f32", "patch": "@@ -12762,24 +12762,6 @@\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"*ctzhi2\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(ctz:SI\n-\t  (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_BMI\n-   && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n-{\n-  rtx tmp = gen_reg_rtx (HImode);\n-\n-  emit_insn (gen_tzcnt_hi (tmp, operands[1]));\n-  emit_insn (gen_zero_extendhisi2 (operands[0], tmp));\n-  DONE;\n-})\n-\n (define_insn_and_split \"ctz<mode>2\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(ctz:SWI48\n@@ -12899,24 +12881,6 @@\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n })\n \n-(define_insn_and_split \"*clzhi2\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(clz:SI\n-\t  (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_LZCNT\n-   && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n-{\n-  rtx tmp = gen_reg_rtx (HImode);\n-\n-  emit_insn (gen_lzcnt_hi (tmp, operands[1]));\n-  emit_insn (gen_zero_extendhisi2 (operands[0], tmp));\n-  DONE;\n-})\n-\n (define_insn_and_split \"clz<mode>2_lzcnt\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(clz:SWI48"}, {"sha": "47081122b47cb36925efcaf166ab0ebe63a83ef2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2163b9bcc627eb42ba5e629e54567b9f106e2f32", "patch": "@@ -1,3 +1,10 @@\n+2017-06-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/81015\n+\t* gcc.target/i386/pr59874-1.c (foo): Call __builtin_ctzs.\n+\t* gcc.target/i386/pr59874-2.c (foo): Call __builtin_clzs.\n+\t* gcc.target/i386/pr81015.c: New test.\n+\n 2017-06-08  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.c-torture/compile/930506-2.c: Use dg-require-effective-target\n@@ -488,8 +495,8 @@\n 2017-05-31  Steven Munroe  <munroesj@gcc.gnu.org>\n \n \t* gcc.target/powerpc/bmi2-pdep32-1.c: Add -mcpu=power7 to\n-        dg-options.  Change dg-require-effective-target powerpc_vsx_ok\n-        to vsx_hw.  Add dg-skip-if directive to disable this test if\n+\tdg-options.  Change dg-require-effective-target powerpc_vsx_ok\n+\tto vsx_hw.  Add dg-skip-if directive to disable this test if\n \t-mcpu overridden.\n \t* gcc.target/powerpc/bmi2-pdep64-1.c: Likewise.\n \t* gcc.target/powerpc/bmi2-pext32-1.c: Likewise."}, {"sha": "862cba437579766ae66a8f49dcc0ce2887bbbe95", "filename": "gcc/testsuite/gcc.target/i386/pr59874-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59874-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59874-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59874-1.c?ref=2163b9bcc627eb42ba5e629e54567b9f106e2f32", "patch": "@@ -6,5 +6,5 @@\n unsigned int\n foo (unsigned short x)\n {\n-  return x ? __builtin_ctz (x) : 16U;\n+  return x ? __builtin_ctzs (x) : 16U;\n }"}, {"sha": "3b7679ff9f536850718f14c0196f2c87fc98eba5", "filename": "gcc/testsuite/gcc.target/i386/pr59874-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59874-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59874-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59874-2.c?ref=2163b9bcc627eb42ba5e629e54567b9f106e2f32", "patch": "@@ -6,5 +6,5 @@\n unsigned int\n foo (unsigned short x)\n {\n-  return x ? __builtin_clz (x) : 16U;\n+  return x ? __builtin_clzs (x) : 16U;\n }"}, {"sha": "92e53f1989f34af3a3eba565056bb2765c33899b", "filename": "gcc/testsuite/gcc.target/i386/pr81015.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81015.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2163b9bcc627eb42ba5e629e54567b9f106e2f32/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81015.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81015.c?ref=2163b9bcc627eb42ba5e629e54567b9f106e2f32", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+/* { dg-require-effective-target lzcnt } */\n+\n+#include \"lzcnt-check.h\"\n+\n+int\n+__attribute__ ((noinline, noclone))\n+foo (unsigned short a)\n+{\n+  return __builtin_clz (a);\n+}\n+\n+static void\n+lzcnt_test ()\n+{\n+  int res = foo (1);\n+\n+  if (res != 31)\n+    abort ();\n+}"}]}