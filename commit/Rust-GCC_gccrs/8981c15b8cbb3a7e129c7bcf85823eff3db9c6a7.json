{"sha": "8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk4MWMxNWI4Y2JiM2E3ZTEyOWM3YmNmODU4MjNlZmYzZGI5YzZhNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-06-11T16:03:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-06-11T16:03:18Z"}, "message": "config.gcc (all_defaults): Add arch_32 arch_64 cpu_32 cpu_64 tune_32 tune_64.\n\n\t* config.gcc (all_defaults): Add arch_32 arch_64 cpu_32 cpu_64\n\ttune_32 tune_64.\n\t(i[34567]86-*-* | x86_64-*-*): Add arch_32 arch_64 cpu_32 cpu_64\n\ttune_32 tune_64 to supported_defaults.  Allow values not\n\tsupporting 64-bit mode for arch_32, cpu_32 and tune_32 for\n\tx86_64.  Do not override cpu_32 or cpu_64 values from target name.\n\t(i[34567]86-*-linux*, i[34567]86-*-solaris2.1[0-9]*): Only default\n\twith_cpu_64 to generic for 64-bit-supporting configurations, not\n\twith_cpu.  Remove FIXMEs.\n\t* doc/install.texi (--with-cpu-32, --with-cpu-64, --with-arch-32,\n\t--with-arch-64, --with-tune-32, --with-tune-64): Document.\n\t* config/i386/i386.h (OPT_ARCH32, OPT_ARCH64): Define.\n\t(OPTION_DEFAULT_SPECS): Add tune_32, tune_64, cpu_32, cpu_64,\n\tarch_32 and arch_64.\n\nFrom-SVN: r136674", "tree": {"sha": "3f6d45862d032d393c9e2a942837e242074b217d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f6d45862d032d393c9e2a942837e242074b217d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056c8faea0671ac8b20504f688e2459386dc18c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056c8faea0671ac8b20504f688e2459386dc18c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056c8faea0671ac8b20504f688e2459386dc18c3"}], "stats": {"total": 89, "additions": 76, "deletions": 13}, "files": [{"sha": "b5c210ccae531a83d53c8360eda38ac97b1dd50b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "patch": "@@ -1,3 +1,20 @@\n+2008-06-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config.gcc (all_defaults): Add arch_32 arch_64 cpu_32 cpu_64\n+\ttune_32 tune_64.\n+\t(i[34567]86-*-* | x86_64-*-*): Add arch_32 arch_64 cpu_32 cpu_64\n+\ttune_32 tune_64 to supported_defaults.  Allow values not\n+\tsupporting 64-bit mode for arch_32, cpu_32 and tune_32 for\n+\tx86_64.  Do not override cpu_32 or cpu_64 values from target name.\n+\t(i[34567]86-*-linux*, i[34567]86-*-solaris2.1[0-9]*): Only default\n+\twith_cpu_64 to generic for 64-bit-supporting configurations, not\n+\twith_cpu.  Remove FIXMEs.\n+\t* doc/install.texi (--with-cpu-32, --with-cpu-64, --with-arch-32,\n+\t--with-arch-64, --with-tune-32, --with-tune-64): Document.\n+\t* config/i386/i386.h (OPT_ARCH32, OPT_ARCH64): Define.\n+\t(OPTION_DEFAULT_SPECS): Add tune_32, tune_64, cpu_32, cpu_64,\n+\tarch_32 and arch_64.\n+\n 2008-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n             Olivier Hainque  <hainque@adacore.com>\n "}, {"sha": "4e207d314b6d6592d480ef4cee4a91db87b6f768", "filename": "gcc/config.gcc", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "patch": "@@ -1081,13 +1081,13 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu)\n \t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-fprules-softfp64 soft-fp/t-softfp\"\n \t\t\tneed_64bit_hwint=yes\n-\t\t\t# FIXME: -m64 for i[34567]86-*-* should be allowed just\n-\t\t\t# like -m32 for x86_64-*-*.\n \t\t\tcase X\"${with_cpu}\" in\n \t\t\tXgeneric|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n \t\t\t\t;;\n \t\t\tX)\n-\t\t\t\twith_cpu=generic\n+\t\t\t\tif test x$with_cpu_64 = x; then\n+\t\t\t\t\twith_cpu_64=generic\n+\t\t\t\tfi\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n@@ -1192,13 +1192,13 @@ i[34567]86-*-solaris2*)\n \t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\ttmake_file=\"$tmake_file i386/t-crtstuff i386/t-sol2-10\"\n \t\tneed_64bit_hwint=yes\n-\t\t# FIXME: -m64 for i[34567]86-*-* should be allowed just\n-\t\t# like -m32 for x86_64-*-*.\n \t\tcase X\"${with_cpu}\" in\n \t\tXgeneric|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n \t\t\t;;\n \t\tX)\n-\t\t\twith_cpu=generic\n+\t\t\tif test x$with_cpu_64 = x; then\n+\t\t\t\twith_cpu_64=generic\n+\t\t\tfi\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n@@ -2537,6 +2537,23 @@ if test x$with_cpu = x ; then\n       with_cpu=\"`echo ${target} | sed 's/-.*$//'`\"\n       ;;\n   esac\n+\n+  # Avoid overriding --with-cpu-32 and --with-cpu-64 values.\n+  case ${target} in\n+    i[34567]86-*-*|x86_64-*-*)\n+      if test x$with_cpu != x; then\n+        if test x$with_cpu_32 != x || test x$with_cpu_64 != x; then\n+          if test x$with_cpu_32 = x; then\n+            with_cpu_32=$with_cpu\n+          fi\n+          if test x$with_cpu_64 = x; then\n+            with_cpu_64=$with_cpu\n+          fi\n+          with_cpu=\n+        fi\n+      fi\n+      ;;\n+  esac\n fi\n \n # Similarly for --with-schedule.\n@@ -2738,8 +2755,8 @@ case \"${target}\" in\n \t\t;;\n \n \ti[34567]86-*-* | x86_64-*-*)\n-\t\tsupported_defaults=\"arch cpu tune\"\n-\t\tfor which in arch cpu tune; do\n+\t\tsupported_defaults=\"arch arch_32 arch_64 cpu cpu_32 cpu_64 tune tune_32 tune_64\"\n+\t\tfor which in arch arch_32 arch_64 cpu cpu_32 cpu_64 tune tune_32 tune_64; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n \t\t\ti386 | i486 \\\n@@ -2750,8 +2767,14 @@ case \"${target}\" in\n \t\t\t| prescott | pentium-m | pentium4m | pentium3m)\n \t\t\t\tcase \"${target}\" in\n \t\t\t\t  x86_64-*-*)\n-\t\t\t\t      echo \"CPU given in --with-$which=$val doesn't support 64bit mode.\" 1>&2\n-\t\t\t\t      exit 1\n+\t\t\t\t      case \"x$which\" in\n+\t\t\t\t\t*_32)\n+\t\t\t\t\t\t;;\n+\t\t\t\t\t*)\n+\t\t\t\t\t\techo \"CPU given in --with-$which=$val doesn't support 64bit mode.\" 1>&2\n+\t\t\t\t\t\texit 1\n+\t\t\t\t\t\t;;\n+\t\t\t\t      esac\n \t\t\t\t      ;;\n \t\t\t\tesac\n \t\t\t\t# OK\n@@ -3059,7 +3082,7 @@ case ${target} in\n esac\n \n t=\n-all_defaults=\"abi cpu arch tune schedule float mode fpu divide llsc\"\n+all_defaults=\"abi cpu cpu_32 cpu_64 arch arch_32 arch_64 tune tune_32 tune_64 schedule float mode fpu divide llsc\"\n for option in $all_defaults\n do\n \teval \"val=\\$with_$option\""}, {"sha": "4c65b10d4f99549f5e736ab6c172f05400e9ef3d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "patch": "@@ -488,13 +488,27 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define HAVE_LOCAL_CPU_DETECT\n #endif\n \n+#if TARGET_64BIT_DEFAULT\n+#define OPT_ARCH64 \"!m32\"\n+#define OPT_ARCH32 \"m32\"\n+#else\n+#define OPT_ARCH64 \"m64\"\n+#define OPT_ARCH32 \"!m64\"\n+#endif\n+\n /* Support for configure-time defaults of some command line options.\n    The order here is important so that -march doesn't squash the\n    tune or cpu values.  */\n #define OPTION_DEFAULT_SPECS\t\t\t\t\t   \\\n   {\"tune\", \"%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}\" }, \\\n+  {\"tune_32\", \"%{\" OPT_ARCH32 \":%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}}\" }, \\\n+  {\"tune_64\", \"%{\" OPT_ARCH64 \":%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}}\" }, \\\n   {\"cpu\", \"%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}\" },  \\\n-  {\"arch\", \"%{!march=*:-march=%(VALUE)}\"}\n+  {\"cpu_32\", \"%{\" OPT_ARCH32 \":%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}}\" }, \\\n+  {\"cpu_64\", \"%{\" OPT_ARCH64 \":%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}}\" }, \\\n+  {\"arch\", \"%{!march=*:-march=%(VALUE)}\"},\t\t\t   \\\n+  {\"arch_32\", \"%{\" OPT_ARCH32 \":%{!march=*:-march=%(VALUE)}}\"},\t   \\\n+  {\"arch_64\", \"%{\" OPT_ARCH64 \":%{!march=*:-march=%(VALUE)}}\"},\n \n /* Specs for the compiler proper */\n "}, {"sha": "5d32c2bca8e7ce63471113c1dd811a7c2c46e071", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8981c15b8cbb3a7e129c7bcf85823eff3db9c6a7", "patch": "@@ -1014,14 +1014,23 @@ Specify that the target does not support TLS.\n This is an alias for @option{--enable-tls=no}.\n \n @item --with-cpu=@var{cpu}\n+@itemx --with-cpu-32=@var{cpu}\n+@itemx --with-cpu-64=@var{cpu}\n Specify which cpu variant the compiler should generate code for by default.\n @var{cpu} will be used as the default value of the @option{-mcpu=} switch.\n This option is only supported on some targets, including ARM, i386, M68k,\n-PowerPC, and SPARC@.\n+PowerPC, and SPARC@.  The @option{--with-cpu-32} and\n+@option{--with-cpu-64} options specify separate default CPUs for\n+32-bit and 64-bit modes; these options are only supported for i386 and\n+x86-64.\n \n @item --with-schedule=@var{cpu}\n @itemx --with-arch=@var{cpu}\n+@itemx --with-arch-32=@var{cpu}\n+@itemx --with-arch-64=@var{cpu}\n @itemx --with-tune=@var{cpu}\n+@itemx --with-tune-32=@var{cpu}\n+@itemx --with-tune-64=@var{cpu}\n @itemx --with-abi=@var{abi}\n @itemx --with-fpu=@var{type}\n @itemx --with-float=@var{type}"}]}