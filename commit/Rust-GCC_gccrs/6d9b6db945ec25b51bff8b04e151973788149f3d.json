{"sha": "6d9b6db945ec25b51bff8b04e151973788149f3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5YjZkYjk0NWVjMjViNTFiZmY4YjA0ZTE1MTk3Mzc4ODE0OWYzZA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-13T10:18:37Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-13T12:19:37Z"}, "message": "Added location storage for struct expr fields\n\nFixed typo in an enum expr field class", "tree": {"sha": "3e108b3b8727a01b008191d2eedeab6774b67025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e108b3b8727a01b008191d2eedeab6774b67025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d9b6db945ec25b51bff8b04e151973788149f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9b6db945ec25b51bff8b04e151973788149f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9b6db945ec25b51bff8b04e151973788149f3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9b6db945ec25b51bff8b04e151973788149f3d/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a697962166a9c72e568814e09658a896fc92fef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a697962166a9c72e568814e09658a896fc92fef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a697962166a9c72e568814e09658a896fc92fef5"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "cfffb3821ac697411d7e526c79d93a82de6c8037", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9b6db945ec25b51bff8b04e151973788149f3d/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9b6db945ec25b51bff8b04e151973788149f3d/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=6d9b6db945ec25b51bff8b04e151973788149f3d", "patch": "@@ -1566,6 +1566,8 @@ class StructExprField\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n+  virtual Location get_locus_slow () const = 0;\n+\n protected:\n   // pure virtual clone implementation\n   virtual StructExprField *clone_struct_expr_field_impl () const = 0;\n@@ -1575,15 +1577,18 @@ class StructExprField\n class StructExprFieldIdentifier : public StructExprField\n {\n   Identifier field_name;\n+  Location locus;\n \n-  // TODO: should this store location data?\n public:\n-  StructExprFieldIdentifier (Identifier field_identifier)\n-    : field_name (std::move (field_identifier))\n+  StructExprFieldIdentifier (Identifier field_identifier, Location locus)\n+    : field_name (std::move (field_identifier)), locus (locus)\n   {}\n \n   std::string as_string () const override { return field_name; }\n \n+  Location get_locus () const { return locus; }\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n protected:\n@@ -1638,13 +1643,13 @@ class StructExprFieldWithVal : public StructExprField\n class StructExprFieldIdentifierValue : public StructExprFieldWithVal\n {\n   Identifier field_name;\n+  Location locus;\n \n-  // TODO: should this store location data?\n public:\n   StructExprFieldIdentifierValue (Identifier field_identifier,\n-\t\t\t\t  std::unique_ptr<Expr> field_value)\n+\t\t\t\t  std::unique_ptr<Expr> field_value, Location locus)\n     : StructExprFieldWithVal (std::move (field_value)),\n-      field_name (std::move (field_identifier))\n+      field_name (std::move (field_identifier)), locus (locus)\n   {}\n \n   std::string as_string () const override;\n@@ -1653,6 +1658,9 @@ class StructExprFieldIdentifierValue : public StructExprFieldWithVal\n \n   std::string get_field_name () const { return field_name; }\n \n+  Location get_locus () const { return locus; }\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1666,12 +1674,12 @@ class StructExprFieldIdentifierValue : public StructExprFieldWithVal\n class StructExprFieldIndexValue : public StructExprFieldWithVal\n {\n   TupleIndex index;\n+  Location locus;\n \n-  // TODO: should this store location data?\n public:\n   StructExprFieldIndexValue (TupleIndex tuple_index,\n-\t\t\t     std::unique_ptr<Expr> field_value)\n-    : StructExprFieldWithVal (std::move (field_value)), index (tuple_index)\n+\t\t\t     std::unique_ptr<Expr> field_value, Location locus)\n+    : StructExprFieldWithVal (std::move (field_value)), index (tuple_index), locus (locus)\n   {}\n \n   std::string as_string () const override;\n@@ -1680,6 +1688,9 @@ class StructExprFieldIndexValue : public StructExprFieldWithVal\n \n   TupleIndex get_index () const { return index; }\n \n+  Location get_locus () const { return locus; }\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1947,6 +1958,8 @@ class EnumExprField\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n+  virtual Location get_locus_slow () const = 0;\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual EnumExprField *clone_enum_expr_field_impl () const = 0;\n@@ -1956,18 +1969,20 @@ class EnumExprField\n class EnumExprFieldIdentifier : public EnumExprField\n {\n   Identifier field_name;\n-\n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   EnumExprFieldIdentifier (Identifier field_identifier)\n-    : field_name (std::move (field_identifier))\n+    : field_name (std::move (field_identifier)), locus (locus)\n   {}\n \n   void accept_vis (ASTVisitor &vis) override;\n \n   std::string as_string () const override { return field_name; }\n \n+  Location get_locus () const { return locus; }\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1983,8 +1998,6 @@ class EnumExprFieldWithVal : public EnumExprField\n {\n   std::unique_ptr<Expr> value;\n \n-  // TODO: should this store location data?\n-\n protected:\n   EnumExprFieldWithVal (std::unique_ptr<Expr> field_value)\n     : value (std::move (field_value))\n@@ -2022,20 +2035,22 @@ class EnumExprFieldWithVal : public EnumExprField\n class EnumExprFieldIdentifierValue : public EnumExprFieldWithVal\n {\n   Identifier field_name;\n-\n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   EnumExprFieldIdentifierValue (Identifier field_name,\n-\t\t\t\tstd::unique_ptr<Expr> field_value)\n+\t\t\t\tstd::unique_ptr<Expr> field_value, Location locus)\n     : EnumExprFieldWithVal (std::move (field_value)),\n-      field_name (std::move (field_name))\n+      field_name (std::move (field_name)), locus (locus)\n   {}\n \n   std::string as_string () const override;\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Location get_locus () const { return locus; }\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -2051,18 +2066,21 @@ class EnumExprFieldIndexValue : public EnumExprFieldWithVal\n   TupleIndex index;\n   // TODO: implement \"with val\" as a template with EnumExprField as type param?\n \n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   EnumExprFieldIndexValue (TupleIndex field_index,\n-\t\t\t   std::unique_ptr<Expr> field_value)\n-    : EnumExprFieldWithVal (std::move (field_value)), index (field_index)\n+\t\t\t   std::unique_ptr<Expr> field_value, Location locus)\n+    : EnumExprFieldWithVal (std::move (field_value)), index (field_index), locus (locus)\n   {}\n \n   std::string as_string () const override;\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Location get_locus () const { return locus; }\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -2075,9 +2093,7 @@ class EnumExprFieldIndexValue : public EnumExprFieldWithVal\n // Struct-like syntax enum variant instance creation AST node\n class EnumExprStruct : public EnumVariantExpr\n {\n-  // std::vector<EnumExprField> fields;\n   std::vector<std::unique_ptr<EnumExprField> > fields;\n-\n   Location locus;\n \n public:"}, {"sha": "02c32b2d7aca976469f954df5d41508ed6aed2c2", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9b6db945ec25b51bff8b04e151973788149f3d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9b6db945ec25b51bff8b04e151973788149f3d/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=6d9b6db945ec25b51bff8b04e151973788149f3d", "patch": "@@ -11509,7 +11509,7 @@ Parser<ManagedTokenSource>::parse_struct_expr_field ()\n \n \t  return std::unique_ptr<AST::StructExprFieldIdentifierValue> (\n \t    new AST::StructExprFieldIdentifierValue (std::move (ident),\n-\t\t\t\t\t\t     std::move (expr)));\n+\t\t\t\t\t\t     std::move (expr), t->get_locus ()));\n \t}\n       else\n \t{\n@@ -11518,7 +11518,7 @@ Parser<ManagedTokenSource>::parse_struct_expr_field ()\n \t  lexer.skip_token ();\n \n \t  return std::unique_ptr<AST::StructExprFieldIdentifier> (\n-\t    new AST::StructExprFieldIdentifier (std::move (ident)));\n+\t    new AST::StructExprFieldIdentifier (std::move (ident), t->get_locus ()));\n \t}\n       case INT_LITERAL: {\n \t// parse tuple index field\n@@ -11542,7 +11542,7 @@ Parser<ManagedTokenSource>::parse_struct_expr_field ()\n \t  }\n \n \treturn std::unique_ptr<AST::StructExprFieldIndexValue> (\n-\t  new AST::StructExprFieldIndexValue (index, std::move (expr)));\n+\t  new AST::StructExprFieldIndexValue (index, std::move (expr), t->get_locus ()));\n       }\n     case DOT_DOT:\n       /* this is a struct base and can't be parsed here, so just return nothing\n@@ -11551,8 +11551,8 @@ Parser<ManagedTokenSource>::parse_struct_expr_field ()\n       return nullptr;\n     default:\n       rust_error_at (t->get_locus (),\n-\t\t     \"unrecognised token %qs as first token of struct expr \"\n-\t\t     \"field - expected identifier or int literal\",\n+\t\t     \"unrecognised token %qs as first token of struct expr field - \"\n+         \"expected identifier or int literal\",\n \t\t     t->get_token_description ());\n       return nullptr;\n     }"}]}