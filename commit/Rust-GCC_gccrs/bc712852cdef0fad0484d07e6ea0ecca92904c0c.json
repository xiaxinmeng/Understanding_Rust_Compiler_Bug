{"sha": "bc712852cdef0fad0484d07e6ea0ecca92904c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM3MTI4NTJjZGVmMGZhZDA0ODRkMDdlNmVhMGVjY2E5MjkwNGMwYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-07-02T18:13:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-07-02T18:13:47Z"}, "message": "tree.h (TYPE_ARTIFICIAL): New flag.\n\n\t* tree.h (TYPE_ARTIFICIAL): New flag.\n\t* dwarf2out.c (modified_type_die): Add a DW_AT_artificial attribute to\n\tthe DIE of the type if it is artificial.\n\t(gen_array_type_die): Likewise.\n\t(gen_enumeration_type_die): Likewise.\n\t(gen_struct_or_union_type_die): Likewise.\n\t* lto-streamer-in.c (unpack_ts_base_value_fields): Use TYPE_ARTIFICIAL.\n\t* lto-streamer-out.c (pack_ts_base_value_fields): Likewise.\nada/\n\t* gcc-interface/utils.c (record_builtin_type): Set TYPE_ARTIFICIAL on\n\tthe type according to the ARTIFICIAL_P parameter.\n\t(create_type_decl): Likewise.\n\t(create_type_stub_decl): Set TYPE_ARTIFICIAL on the type to 1.\n\nCo-Authored-By: Nicolas Setton <setton@adacore.com>\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r175781", "tree": {"sha": "d81811c5891ba2622e09eaca7ba4eb4907770a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d81811c5891ba2622e09eaca7ba4eb4907770a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc712852cdef0fad0484d07e6ea0ecca92904c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc712852cdef0fad0484d07e6ea0ecca92904c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc712852cdef0fad0484d07e6ea0ecca92904c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc712852cdef0fad0484d07e6ea0ecca92904c0c/comments", "author": null, "committer": null, "parents": [{"sha": "49860194e29e3cb2d571e9f9a413b1858967953e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49860194e29e3cb2d571e9f9a413b1858967953e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49860194e29e3cb2d571e9f9a413b1858967953e"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "63f2bd39eb8aeef4032eda089f168f79d67c246a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -1,3 +1,16 @@\n+2011-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\t    Nicolas Setton  <setton@adacore.com>\n+\n+\t* tree.h (TYPE_ARTIFICIAL): New flag.\n+\t* dwarf2out.c (modified_type_die): Add a DW_AT_artificial attribute to\n+\tthe DIE of the type if it is artificial.\n+\t(gen_array_type_die): Likewise.\n+\t(gen_enumeration_type_die): Likewise.\n+\t(gen_struct_or_union_type_die): Likewise.\n+\t* lto-streamer-in.c (unpack_ts_base_value_fields): Use TYPE_ARTIFICIAL.\n+\t* lto-streamer-out.c (pack_ts_base_value_fields): Likewise.\n+\n 2011-07-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-object-size.c (pass_through_call): Handle"}, {"sha": "9e778c102c52c3aadb18ba6fabd0b4089eae476e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -1,3 +1,12 @@\n+2011-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\t    Nicolas Setton  <setton@adacore.com>\n+\n+\t* gcc-interface/utils.c (record_builtin_type): Set TYPE_ARTIFICIAL on\n+\tthe type according to the ARTIFICIAL_P parameter.\n+\t(create_type_decl): Likewise.\n+\t(create_type_stub_decl): Set TYPE_ARTIFICIAL on the type to 1.\n+\n 2011-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Make-lang.in (gnat1): Prepend '+' to the command."}, {"sha": "9b6e7211bfe06943e043e38319f13c1c49c4084f", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -614,6 +614,7 @@ record_builtin_type (const char *name, tree type, bool artificial_p)\n   tree type_decl = build_decl (input_location,\n \t\t\t       TYPE_DECL, get_identifier (name), type);\n   DECL_ARTIFICIAL (type_decl) = artificial_p;\n+  TYPE_ARTIFICIAL (type) = artificial_p;\n   gnat_pushdecl (type_decl, Empty);\n \n   if (debug_hooks->type_decl)\n@@ -1297,6 +1298,7 @@ create_type_stub_decl (tree type_name, tree type)\n   tree type_decl = build_decl (input_location,\n \t\t\t       TYPE_DECL, type_name, type);\n   DECL_ARTIFICIAL (type_decl) = 1;\n+  TYPE_ARTIFICIAL (type) = 1;\n   return type_decl;\n }\n \n@@ -1329,6 +1331,7 @@ create_type_decl (tree type_name, tree type, struct attrib *attr_list,\n \t\t\t    TYPE_DECL, type_name, type);\n \n   DECL_ARTIFICIAL (type_decl) = artificial_p;\n+  TYPE_ARTIFICIAL (type) = artificial_p;\n \n   /* Add this decl to the current binding level.  */\n   gnat_pushdecl (type_decl, gnat_node);"}, {"sha": "a0714c45d26a5e5b688b4421302803b4f98aec50", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -13189,6 +13189,8 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n \tname = DECL_NAME (name);\n       add_name_attribute (mod_type_die, IDENTIFIER_POINTER (name));\n       add_gnat_descriptive_type_attribute (mod_type_die, type, context_die);\n+      if (TYPE_ARTIFICIAL (type))\n+\tadd_AT_flag (mod_type_die, DW_AT_artificial, 1);\n     }\n   /* This probably indicates a bug.  */\n   else if (mod_type_die && mod_type_die->die_tag == DW_TAG_base_type)\n@@ -19444,6 +19446,8 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n   array_die = new_die (DW_TAG_array_type, scope_die, type);\n   add_name_attribute (array_die, type_tag (type));\n   add_gnat_descriptive_type_attribute (array_die, type, context_die);\n+  if (TYPE_ARTIFICIAL (type))\n+    add_AT_flag (array_die, DW_AT_artificial, 1);\n   equate_type_number_to_die (type, array_die);\n \n   if (TREE_CODE (type) == VECTOR_TYPE)\n@@ -19747,6 +19751,8 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n       equate_type_number_to_die (type, type_die);\n       add_name_attribute (type_die, type_tag (type));\n       add_gnat_descriptive_type_attribute (type_die, type, context_die);\n+      if (TYPE_ARTIFICIAL (type))\n+\tadd_AT_flag (type_die, DW_AT_artificial, 1);\n       if (dwarf_version >= 4 || !dwarf_strict)\n \t{\n \t  if (ENUM_IS_SCOPED (type))\n@@ -21604,6 +21610,8 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n \t{\n \t  add_name_attribute (type_die, type_tag (type));\n \t  add_gnat_descriptive_type_attribute (type_die, type, context_die);\n+\t  if (TYPE_ARTIFICIAL (type))\n+\t    add_AT_flag (type_die, DW_AT_artificial, 1);\n \t}\n     }\n   else"}, {"sha": "7a4f7225bdc14ec58d8388a0a8b3de093b5abd14", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -1563,7 +1563,10 @@ unpack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n   else\n     bp_unpack_value (bp, 1);\n   TREE_ASM_WRITTEN (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  TREE_NO_WARNING (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  if (TYPE_P (expr))\n+    TYPE_ARTIFICIAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  else\n+    TREE_NO_WARNING (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TREE_USED (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TREE_NOTHROW (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TREE_STATIC (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "6345d83d2c999f5a98c2b9211f95007840bc887c", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -340,7 +340,10 @@ pack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n     bp_pack_value (bp, 0, 1);\n   /* We write debug info two times, do not confuse the second one.  */\n   bp_pack_value (bp, TYPE_P (expr) ? 0 : TREE_ASM_WRITTEN (expr), 1);\n-  bp_pack_value (bp, TREE_NO_WARNING (expr), 1);\n+  if (TYPE_P (expr))\n+    bp_pack_value (bp, TYPE_ARTIFICIAL (expr), 1);\n+  else\n+    bp_pack_value (bp, TREE_NO_WARNING (expr), 1);\n   bp_pack_value (bp, TREE_USED (expr), 1);\n   bp_pack_value (bp, TREE_NOTHROW (expr), 1);\n   bp_pack_value (bp, TREE_STATIC (expr), 1);"}, {"sha": "8460d89c91719a9ed86d6dcaf6038b63ac22ac28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -1,3 +1,7 @@\n+2011-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/debug1.ads: New test.\n+\n 2011-07-02  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/49562"}, {"sha": "30ccf2891c0b499ae22f0da0db9422097ad832bf", "filename": "gcc/testsuite/gnat.dg/specs/debug1.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdebug1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdebug1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdebug1.ads?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile { target *-*-linux* } }\n+-- { dg-options \"-gdwarf-2 -cargs -dA\" }\n+\n+package Debug1 is\n+\n+  function N return Integer;\n+  pragma Import (Ada, N);\n+\n+  type Arr is array (-N .. N) of Boolean;\n+  A : Arr;\n+\n+end Debug1;\n+\n+-- { dg-final { scan-assembler-times \"byte\\t0x1\\t# DW_AT_artificial\" 4 } }"}, {"sha": "ab0b6cc66c6183e0d9c1b0dc5438d5ca42309de9", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc712852cdef0fad0484d07e6ea0ecca92904c0c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bc712852cdef0fad0484d07e6ea0ecca92904c0c", "patch": "@@ -699,6 +699,9 @@ struct GTY(()) tree_common {\n            all expressions\n            all decls\n \n+       TYPE_ARTIFICIAL in\n+           all types\n+\n    default_def_flag:\n \n        TYPE_VECTOR_OPAQUE in\n@@ -1243,6 +1246,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    emitted.  */\n #define TREE_NO_WARNING(NODE) ((NODE)->base.nowarning_flag)\n \n+/* Used to indicate that this TYPE represents a compiler-generated entity.  */\n+#define TYPE_ARTIFICIAL(NODE) (TYPE_CHECK (NODE)->base.nowarning_flag)\n+\n /* In an IDENTIFIER_NODE, this means that assemble_name was called with\n    this string as an argument.  */\n #define TREE_SYMBOL_REFERENCED(NODE) \\"}]}