{"sha": "9b2641e72959a225967226e654988a90c281052f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyNjQxZTcyOTU5YTIyNTk2NzIyNmU2NTQ5ODhhOTBjMjgxMDUyZg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-09-14T20:46:45Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-09-14T20:46:45Z"}, "message": "Test for gcov output.\n\n\t* g77.dg/gcov: New directory.\n\t* g77.dg/gcov/gcov.exp: New file.\n\t* g77.dg/gcov/gcov-1.f: New test.\n\t* g77.dg/gcov/gcov-1.x: New file.\n\nFrom-SVN: r45610", "tree": {"sha": "25fd705a2889615ed8403d28f54b00a37111d441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25fd705a2889615ed8403d28f54b00a37111d441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2641e72959a225967226e654988a90c281052f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2641e72959a225967226e654988a90c281052f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2641e72959a225967226e654988a90c281052f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2641e72959a225967226e654988a90c281052f/comments", "author": null, "committer": null, "parents": [{"sha": "306220613d20aadf0586499d76fddb498e5742ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306220613d20aadf0586499d76fddb498e5742ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/306220613d20aadf0586499d76fddb498e5742ff"}], "stats": {"total": 427, "additions": 427, "deletions": 0}, "files": [{"sha": "d710483cedc4a311d54cbb3219e04158fa3dd87e", "filename": "gcc/testsuite/g77.dg/gcov/gcov-1.f", "status": "added", "additions": 427, "deletions": 0, "changes": 427, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2641e72959a225967226e654988a90c281052f/gcc%2Ftestsuite%2Fg77.dg%2Fgcov%2Fgcov-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2641e72959a225967226e654988a90c281052f/gcc%2Ftestsuite%2Fg77.dg%2Fgcov%2Fgcov-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.dg%2Fgcov%2Fgcov-1.f?ref=9b2641e72959a225967226e654988a90c281052f", "patch": "@@ -0,0 +1,427 @@\n+C { dg-options \"-fprofile-arcs -ftest-coverage\" }\n+C { dg-do run { target native } }\n+C\n+C Test gcov reports for line counts and branch and call return percentages\n+C for various Fortran 77 constructs to catch basic regressions in the\n+C functionality.\n+\n+      program gcov1\n+      implicit none\n+      integer i,j,k,n\n+      integer result\n+      integer lpall, ieall, gtall\n+      integer lpval, ieval, gtval\n+\n+\t\t\t\t\t! returns(100)\n+      lpval = lpall()\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      ieval = ieall()\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtall()\t\t\t! count(1)\n+\t\t\t\t\t! returns(end)\n+      if ((lpval .ne. 1) .or. (ieval .ne. 1) .or. (gtval .ne. 1)) then\n+         call abort\n+      end if\n+      \n+      end\n+\n+C Pass a value through a function to thwart optimization.\n+      integer function foo(i)\n+      implicit none\n+      integer i\n+      foo = i\t\t\t\t! count(18)\n+      end\n+\n+C Test various flavors of GOTO and compare results against expected values.\n+      integer function gtall()\n+      implicit none\n+      integer gt1, gt2, gt3, gt4, gt5\n+      integer gtval\n+\n+      gtall = 1\t\t\t\t! count(1)\n+      gtval = 0\t\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt1(0)\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt1(1)\t\t! count(1)\n+\t\t\t\t\t! returns(end)\n+\t\t\t\t\t! branch(0)\n+      if (gtval .ne. 3) then\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+         print *,\"gtall part 1:  \", gtval, 3\n+         gtall = 0\n+      end if\n+\n+      gtval = 0\t\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt2(9)\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt2(20)\t\t! count(1)\n+\t\t\t\t\t! returns(end)\n+\t\t\t\t\t! branch(0)\n+      if (gtval .ne. 12) then\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+         print *,\"gtall part 2:  \", gtval, 12\n+         gtall = 0\n+      end if\n+\n+      gtval = 0\t\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt3(0)\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt3(3)\t\t! count(1)\n+\t\t\t\t\t! returns(end)\n+\t\t\t\t\t! branch(0)\n+      if (gtval .ne. 48) then\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+\t\t\t\t\t! branch(end)\n+         print *,\"gtall part 3:  \", gtval, 48\n+         gtall = 0\n+      end if\n+\n+      gtval = 0\t\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt4(1)\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt4(2)\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt4(3)\t\t! count(1)\n+\t\t\t\t\t! returns(end)\n+\t\t\t\t\t! branch(0)\n+      if (gtval .ne. 14) then\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+         print *,\"gtall part 4:  \", gtval, 14\n+         gtall = 0\n+      end if\n+\n+      gtval = 0\t\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt5(0)\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt5(-1)\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      gtval = gtval + gt5(5)\t\t! count(1)\n+\t\t\t\t\t! returns(end)\n+\t\t\t\t\t! branch(0)\n+      if (gtval .ne. 14) then\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+         print *,\"gtall part 5:  \", gtval, 14\n+         gtall = 0\n+      end if\n+      end\n+\n+C Test simple GOTO.\n+      integer function gt1(f)\n+      implicit none\n+      integer f\n+\t\t\t\t\t! branch(50)\n+      if (f .ne. 0) goto 100\t\t! count(2)\n+\t\t\t\t\t! branch(end)\n+      gt1 = 1\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(100)\n+      goto 101\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+  100 gt1 = 2\t\t\t\t! count(1)\n+  101 continue\t\t\t\t! count(2)\n+      end\n+\n+C Test simple GOTO again, this time out of a DO loop.\n+      integer function gt2(f)\n+      implicit none\n+      integer f\n+      integer i\n+\t\t\t\t\t! branch(95)\n+      do i=1,10\n+\t\t\t\t\t! branch(end)\n+         if (i .eq. f) goto 100\t\t! count(19)\n+      end do\n+      gt2 = 4\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(100)\n+      goto 101\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+  100 gt2 = 8\t\t\t\t! count(1)\n+  101 continue\t\t\t\t! count(2)\n+      end\n+\n+C Test computed GOTO.\n+      integer function gt3(i)\n+      implicit none\n+      integer i\n+      goto (101, 102, 103, 104), i\t! count(2)\n+      gt3 = 8\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(100)\n+      goto 105\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+  101 gt3 = 1024\n+      goto 105\n+  102 gt3 = 2048\n+      goto 105\n+  103 gt3 = 16\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(100)\n+      goto 105\t\t\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+  104 gt3 = 4096\n+      goto 105\n+  105 gt3 = gt3 * 2\t\t\t! count(2)\n+      end\n+\n+C Test assigned GOTO.\n+      integer function gt4(i)\n+      implicit none\n+      integer i\n+      integer label\n+      assign 101 to label\t\t! count(3)\n+      if (i .eq. 2) assign 102 to label\t! count(3)\n+      if (i .eq. 3) assign 103 to label\t! count(3)\n+      goto label, (101, 102, 103)\t! count(3)\n+  101 gt4 = 1\t\t\t\t! count(1)\n+      goto 104\t\t\t\t! count(1)\n+  102 gt4 = 2\t\t\t\t! count(1)\n+      goto 104\t\t\t\t! count(1)\n+  103 gt4 = 4\t\t\t\t! count(1)\n+  104 gt4 = gt4 * 2\t\t\t! count(3)\n+      end\n+\n+C Test arithmetic IF (bundled with the GOTO variants).\n+      integer function gt5(i)\n+      implicit none\n+      integer i\n+      gt5 = 1\t\t\t\t! count(3)\n+\t\t\t\t\t! branch(67 50)\n+      if (i) 101, 102, 103\t\t! count(3)\n+\t\t\t\t\t! branch(end)\n+  101 gt5 = 2\t\t\t\t! count(1)\n+      goto 104\t\t\t\t! count(1)\n+  102 gt5 = 4\t\t\t\t! count(1)\n+      goto 104\t\t\t\t! count(1)\n+  103 gt5 = 8\t\t\t\t! count(1)\n+  104 continue\t\t\t\t! count(3)\n+      end\n+\n+C Run all of the loop tests and check results against expected values.\n+      integer function lpall()\n+      implicit none\n+      integer loop1, loop2\n+      integer loopval\n+\n+      lpall = 1\t\t\t\t! count(1)\n+      loopval = 0\t\t\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop1(1,0)\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop1(1,2)\t! count(1)\n+\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop1(1,7)\t! count(1)\n+\t\t\t\t\t! returns(end)\n+      if (loopval .ne. 12) then\t\t! count(1)\n+         print *,\"lpall part 1:  \", loopval, 12\n+         lpall = 0\n+      end if\n+\n+      loopval = 0\t\t\t\t! count(1)\n+\t\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop2(1,0,0,0)\t! count(1)\n+\t\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop2(1,1,0,0)\t! count(1)\n+\t\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop2(1,1,3,0)\t! count(1)\n+\t\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop2(1,1,3,1)\t! count(1)\n+\t\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop2(1,3,1,5)\t! count(1)\n+\t\t\t\t\t\t! returns(100)\n+      loopval = loopval + loop2(1,3,7,3)\t! count(1)\n+\t\t\t\t\t\t! returns(end)\n+      if (loopval .ne. 87) then\t\t\t! count(1)\n+         print *,\"lpall part 2:  \", loopval, 87\n+         lpall = 0\n+      end if\n+      end\n+\n+C Test a simple DO loop.\n+      integer function loop1(r,n)\n+      implicit none\n+      integer r,n,i\n+\n+      loop1 = r\t\t\t\t! count(3)\n+\t\t\t\t\t! branch(75)\n+      do i=1,n\n+\t\t\t\t\t! branch(end)\n+         loop1 = loop1 + 1\t\t! count(9)\n+      end do\n+      end\n+\n+C Test nested DO loops.\n+      integer function loop2(r, l, m, n)\n+      implicit none\n+      integer r,l,m,n\n+      integer i,j,k\n+      loop2 = r\t\t\t\t! count(6)\n+\t\t\t\t\t! branch(60)\n+      do i=1,l\n+\t\t\t\t\t! branch(77)\n+         do j=1,m\n+\t\t\t\t\t! branch(73)\n+            do k=1,n\n+\t\t\t\t\t! branch(end)\n+               loop2 = loop2 + 1\t! count(81)\n+            end do\n+         end do\n+      end do\n+      end\n+\n+C Test various combinations of IF-THEN-ELSE and check results against\n+C expected values.\n+      integer function ieall()\n+      implicit none\n+      integer ie1, ie2, ie3\n+      integer ieval\n+      ieall = 1\t\t\t\t! count(1)\n+      ieval = 0\t\t\t\t! count(1)\n+      \n+      ieval = ieval + ie1(0,2)\t\t! count(1)\n+      ieval = ieval + ie1(0,0)\t\t! count(1)\n+      ieval = ieval + ie1(1,2)\t\t! count(1)\n+      ieval = ieval + ie1(10,2)\t\t! count(1)\n+      ieval = ieval + ie1(11,11)\t! count(1)\n+      if (ieval .ne. 31) then\t\t! count(1)\n+         print *,\"ieall part 1:  \", ieval, 31\n+         ieall = 0\n+      end if\n+\n+      ieval = 0\t\n+      ieval = ieval + ie2(0)\t\t! count(1)\n+      ieval = ieval + ie2(2)\t\t! count(1)\n+      ieval = ieval + ie2(2)\t\t! count(1)\n+      ieval = ieval + ie2(2)\t\t! count(1)\n+      ieval = ieval + ie2(3)\t\t! count(1)\n+      ieval = ieval + ie2(3)\t\t! count(1)\n+      if (ieval .ne. 23) then\t\t! count(1)\n+         print *,\"ieall part 2:  \", ieval, 23\n+         ieall = 0\n+      end if\n+\n+      ieval = 0\n+      ieval = ieval + ie3(11,19)\t! count(1)\n+      ieval = ieval + ie3(25,27)\t! count(1)\n+      ieval = ieval + ie3(11,22)\t! count(1)\n+      ieval = ieval + ie3(11,10)\t! count(1)\n+      ieval = ieval + ie3(21,32)\t! count(1)\n+      ieval = ieval + ie3(21,20)\t! count(1)\n+      ieval = ieval + ie3(1,2)\t\t! count(1)\n+      ieval = ieval + ie3(32,31)\t! count(1)\n+      ieval = ieval + ie3(3,0)\t\t! count(1)\n+      ieval = ieval + ie3(0,47)\t\t! count(1)\n+      ieval = ieval + ie3(65,65)\t! count(1)\n+      if (ieval .ne. 246) then\t\t! count(1)\n+         print *,\"ieall part 3:  \", ieval, 246\n+         ieall = 0\n+      end if\n+      end\n+\n+C Test IF-THEN-ELSE.\n+      integer function ie1(i,j)\n+      implicit none\n+      integer i,j\n+      integer foo\n+\n+      ie1 = 0\t\t\t\t! count(5)\n+\t\t\t\t\t! branch(40)\n+      if (i .ne. 0) then\t\t! count(5)\n+\t\t\t\t\t! branch(0)\n+         if (j .ne. 0) then\t\t! count(3)\n+\t\t\t\t\t! branch(end)\n+            ie1 = foo(4)\t\t! count(3)\n+         else\n+            ie1 = foo(1024)\n+         end if\n+      else\n+\t\t\t\t\t! branch(50)\n+         if (j .ne. 0) then\t\t! count(2)\n+\t\t\t\t\t! branch(end)\n+            ie1 = foo(1)\t\t! count(1)\n+         else\n+            ie1 = foo(2)\t\t! count(1)\n+         end if\n+      end if\n+\t\t\t\t\t! branch(80)\n+      if (i .gt. j) then\t\t! count(5)\n+\t\t\t\t\t! branch(end)\n+         ie1 = foo(ie1*2)\n+      end if\n+\t\t\t\t\t! branch(80)\n+      if (i .gt. 10) then\t\t! count(5)\n+\t\t\t\t\t! branch(0)\n+         if (j .gt. 10) then\t\t! count(1)\n+\t\t\t\t\t! branch(end)\n+            ie1 = foo(ie1*4)\t\t! count(1)\n+         end if\n+      end if\n+      end\n+\n+C Test a series of simple IF-THEN statements.\n+      integer function ie2(i)\n+      implicit none\n+      integer i\n+      integer foo\n+      ie2 = 0\t\t\t\t! count(6)\n+\n+\t\t\t\t\t! branch(83)\n+      if (i .eq. 0) then\t\t! count(6)\n+\t\t\t\t\t! branch(end)\n+         ie2 = foo(1)\t\t\t! count(1)\n+      end if\n+\t\t\t\t\t! branch(100)\n+      if (i .eq. 1) then\t\t! count(6)\n+\t\t\t\t\t! branch(end)\n+         ie2 = foo(1024)\n+      end if\n+\t\t\t\t\t! branch(50)\n+      if (i .eq. 2) then\t\t! count(6)\n+\t\t\t\t\t! branch(end)\n+         ie2 = foo(2)\t\t\t! count(3)\n+      end if\n+\t\t\t\t\t! branch(67)\n+      if (i .eq. 3) then\t\t! count(6)\n+\t\t\t\t\t! branch(end)\n+         ie2 = foo(8)\t\t\t! count(2)\n+      end if\n+\t\t\t\t\t! branch(100)\n+      if (i .eq. 4) then\t\t! count(6)\n+\t\t\t\t\t! branch(end)\n+         ie2 = foo(2048)\n+      end if\n+\n+      end\n+\n+C Test nested IF statements and IF with compound expressions.\n+      integer function ie3(i,j)\n+      implicit none\n+      integer i,j\n+      integer foo\n+\n+      ie3 = 1\t\t\t\t! count(11)\n+\t\t\t\t\t! branch(27 50 75)\n+      if ((i .gt. 10) .and. (j .gt. i) .and. (j .lt. 20)) then ! count(11)\n+\t\t\t\t\t! branch(end)\n+         ie3 = foo(16)\t\t\t! count(1)\n+      end if\n+\t\t\t\t\t! branch(55)\n+      if (i .gt. 20) then\t\t! count(11)\n+\t\t\t\t\t! branch(60)\n+         if (j .gt. i) then\t\t! count(5)\n+\t\t\t\t\t! branch(50)\n+            if (j .lt. 30) then\t\t! count(2)\n+\t\t\t\t\t! branch(end)\n+               ie3 = foo(32)\t\t! count(1)\n+            end if\n+         end if\n+      end if\n+\t\t\t\t\t! branch(9 10 11)\n+      if ((i .eq. 3) .or. (j .eq. 47) .or. (i .eq.j)) then ! count(11)\n+\t\t\t\t\t! branch(end)\n+         ie3 = foo(64)\t\t\t! count(3)\n+      end if\n+      end\n+C\n+C { dg-final { run-gcov -b gcov-1.f } }"}]}