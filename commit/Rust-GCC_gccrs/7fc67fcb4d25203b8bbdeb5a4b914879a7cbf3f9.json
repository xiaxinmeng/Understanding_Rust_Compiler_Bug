{"sha": "7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjNjdmY2I0ZDI1MjAzYjhiYmRlYjVhNGI5MTQ4NzlhN2NiZjNmOQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2015-05-10T18:08:33Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2015-05-10T18:08:33Z"}, "message": "re PR fortran/66041 (Matmul ICE)\n\n2015-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/66041\n\t* frontend-passes.c (scalarized_expr): Set correct dimension and\n\tshape for the expression to be passed to lbound. Remove trailing\n\treferences after array refrence.\n\t(inline_matmul_assign):  Remove gfc_copy_expr from calls\n\tto scalarized_expr().\n\n2015-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/66041\n\t* gfortran.dg/inline_matmul_7.f90:  New test.\n\t* gfortran.dg/inline_matmul_8.f90:  New test.\n\t* gfortran.dg/inline_matmul_9.f90:  New test.\n\nFrom-SVN: r222982", "tree": {"sha": "307001763875eb162d6d6a94c11a79974b71aa4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/307001763875eb162d6d6a94c11a79974b71aa4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/comments", "author": null, "committer": null, "parents": [{"sha": "e3855ed21a54f4bdba7b9c69580f2e071cedc4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3855ed21a54f4bdba7b9c69580f2e071cedc4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3855ed21a54f4bdba7b9c69580f2e071cedc4d6"}], "stats": {"total": 160, "additions": 146, "deletions": 14}, "files": [{"sha": "4b1c84f0decbacb1e19f38963286118642dcb2aa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "patch": "@@ -1,9 +1,18 @@\n+2015-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/66041\n+\t* frontend-passes.c (scalarized_expr): Set correct dimension and\n+\tshape for the expression to be passed to lbound. Remove trailing\n+\treferences after array refrence.\n+\t(inline_matmul_assign):  Remove gfc_copy_expr from calls\n+\tto scalarized_expr().\n+\n 2015-05-10  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* simplify.c (simplify_bound_dim): Don't check for emptyness\n \tin the case of cobound simplification.  Factor lower/upper\n \tbound differenciation before the actual simplification.\n-\t(simplify_bound): Remove assumed shape specific simplification.  \n+\t(simplify_bound): Remove assumed shape specific simplification.\n \tDon't give up early for the lbound of an assumed shape.\n \n 2015-05-09  Mikael Morin  <mikael@gcc.gnu.org>"}, {"sha": "30085e8fd8e0f872cfda027d4548462722dfc277", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "patch": "@@ -2607,18 +2607,55 @@ scalarized_expr (gfc_expr *e_in, gfc_expr **index, int count_index)\n \t\t}\n \t      else\n \t\t{\n+\t\t  gfc_expr *lbound_e;\n+\t\t  gfc_ref *ref;\n+\n+\t\t  lbound_e = gfc_copy_expr (e_in);\n+\n+\t\t  for (ref = lbound_e->ref; ref; ref = ref->next)\n+\t\t    if (ref->type == REF_ARRAY\n+\t\t\t&& (ref->u.ar.type == AR_FULL\n+\t\t\t    || ref->u.ar.type == AR_SECTION))\n+\t\t      break;\n+\n+\t\t  if (ref->next)\n+\t\t    {\n+\t\t      gfc_free_ref_list (ref->next);\n+\t\t      ref->next = NULL;\n+\t\t    }\n+\n \t\t  if (!was_fullref)\n \t\t    {\n \t\t      /* Look at full individual sections, like a(:).  The first index\n \t\t\t is the lbound of a full ref.  */\n-\n+\t\t      int j;\n \t\t      gfc_array_ref *ar;\n \n-\t\t      ar = gfc_find_array_ref (e_in);\n+\t\t      ar = &ref->u.ar;\n \t\t      ar->type = AR_FULL;\n+\t\t      for (j = 0; j < ar->dimen; j++)\n+\t\t\t{\n+\t\t\t  gfc_free_expr (ar->start[j]);\n+\t\t\t  ar->start[j] = NULL;\n+\t\t\t  gfc_free_expr (ar->end[j]);\n+\t\t\t  ar->end[j] = NULL;\n+\t\t\t  gfc_free_expr (ar->stride[j]);\n+\t\t\t  ar->stride[j] = NULL;\n+\t\t\t}\n+\n+\t\t      /* We have to get rid of the shape, if there is one.  Do\n+\t\t\t so by freeing it and calling gfc_resolve to rebuild\n+\t\t\t it, if necessary.  */\n+\n+\t\t      if (lbound_e->shape)\n+\t\t\tgfc_free_shape (&(lbound_e->shape), lbound_e->rank);\n+\n+\t\t      lbound_e->rank = ar->dimen;\n+\t\t      gfc_resolve_expr (lbound_e);\n \t\t    }\n-\t\t  lbound = get_array_inq_function (GFC_ISYM_LBOUND, e_in,\n-\t\t\t\t\t\t   i_index + 1);\n+\t\t  lbound = get_array_inq_function (GFC_ISYM_LBOUND, lbound_e,\n+\t\t\t\t\t\t   i + 1);\n+\t\t  gfc_free_expr (lbound_e);\n \t\t}\n \t      \n \t      ar->dimen_type[i] = DIMEN_ELEMENT;\n@@ -2639,6 +2676,7 @@ scalarized_expr (gfc_expr *e_in, gfc_expr **index, int count_index)\n \t  i_index ++;\n \t}\n     }\n+\n   return e;\n }\n \n@@ -2929,15 +2967,15 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n \n       list[0] = var_3;\n       list[1] = var_1;\n-      cscalar = scalarized_expr (gfc_copy_expr (co->expr1), list, 2);\n+      cscalar = scalarized_expr (co->expr1, list, 2);\n \n       list[0] = var_3;\n       list[1] = var_2;\n-      ascalar = scalarized_expr (gfc_copy_expr (matrix_a), list, 2);\n+      ascalar = scalarized_expr (matrix_a, list, 2);\n \n       list[0] = var_2;\n       list[1] = var_1;\n-      bscalar = scalarized_expr (gfc_copy_expr (matrix_b), list, 2);\n+      bscalar = scalarized_expr (matrix_b, list, 2);\n \n       break;\n \n@@ -2955,14 +2993,14 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n       var_2 = do_2->ext.iterator->var;\n \n       list[0] = var_2;\n-      cscalar = scalarized_expr (gfc_copy_expr (co->expr1), list, 1);\n+      cscalar = scalarized_expr (co->expr1, list, 1);\n \n       list[0] = var_2;\n       list[1] = var_1;\n-      ascalar = scalarized_expr (gfc_copy_expr (matrix_a), list, 2);\n+      ascalar = scalarized_expr (matrix_a, list, 2);\n \n       list[0] = var_1;\n-      bscalar = scalarized_expr (gfc_copy_expr (matrix_b), list, 1);\n+      bscalar = scalarized_expr (matrix_b, list, 1);\n \n       break;\n \n@@ -2980,14 +3018,14 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n       var_2 = do_2->ext.iterator->var;\n \n       list[0] = var_1;\n-      cscalar = scalarized_expr (gfc_copy_expr (co->expr1), list, 1);\n+      cscalar = scalarized_expr (co->expr1, list, 1);\n \n       list[0] = var_2;\n-      ascalar = scalarized_expr (gfc_copy_expr (matrix_a), list, 1);\n+      ascalar = scalarized_expr (matrix_a, list, 1);\n \n       list[0] = var_2;\n       list[1] = var_1;\n-      bscalar = scalarized_expr (gfc_copy_expr (matrix_b), list, 2);\n+      bscalar = scalarized_expr (matrix_b, list, 2);\n \n       break;\n "}, {"sha": "9dda2942bb660caca08a8842252532f2f0353dac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "patch": "@@ -1,3 +1,10 @@\n+2015-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/66041\n+\t* gfortran.dg/inline_matmul_7.f90:  New test.\n+\t* gfortran.dg/inline_matmul_8.f90:  New test.\n+\t* gfortran.dg/inline_matmul_9.f90:  New test.\n+\n 2015-05-10  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* gfortran.dg/bound_simplification_5.f90: New."}, {"sha": "24f610a185095dae4b44184abf409323cb92805e", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_7.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_7.f90?ref=7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do  run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+\n+program main\n+  implicit none\n+  real(kind=8), ALLOCATABLE :: a(:,:), b(:,:), v1(:), v2(:)\n+  real(kind=8), dimension(3,3) :: v1res, v2res\n+  integer :: n, i\n+\n+  data v1res/ 442.d0,   -492.d0,   586.d0, &\n+            -4834.d0,   5694.d0, -7066.d0, &\n+            13042.d0, -15450.d0, 19306.d0 /\n+\n+  data v2res/ 5522.d0,  -6310.d0,   7754.d0, &\n+             -7794.d0,   8982.d0, -11034.d0, &\n+             10490.d0, -12160.d0,  14954.d0 /\n+  n = 3\n+\n+  ALLOCATE(a(N,N),b(N,N),v1(N), v2(N))\n+\n+  a = reshape([((-1)**i*(-i-5)*(i+3)+5,i=1,n**2)], shape(a))\n+  b = reshape([((-1)**i*(-i-1)*(i-2),i=1,n**2)], shape(a))\n+\n+  DO i=1,N\n+     v1 = MATMUL(a,b(:,i))\n+     if (any(abs(v1-v1res(:,i)) > 1e-10)) call abort\n+\n+     v2 = MATMUL(a,b(i,:))\n+     if (any(abs(v2-v2res(:,i)) > 1e-10)) call abort\n+\n+  ENDDO\n+\n+END program main\n+! { dg-final { scan-tree-dump-times \"_gfortran_matmul\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "f7d2846de58e667f43b052beb35a2eb908bd4c59", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_8.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_8.f90?ref=7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do  run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 66041 - this used to ICE with an incomplete fix for the PR.\n+program main\n+  implicit none\n+  real, dimension(1,-2:0) :: a1\n+  real, dimension(3,2) :: b1\n+  real, dimension(2) :: c1\n+\n+  data a1 /17., -23., 29./\n+  data b1 / 2.,  -3.,  5.,  -7., 11., -13./\n+\n+  c1 = matmul(a1(1,:), b1)\n+  if (any (c1-[248., -749.] /= 0.)) call abort\n+end program main\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_matmul\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "ae80b18a91c94234bfbe31bd51ece8404b016aa1", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_9.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_9.f90?ref=7fc67fcb4d25203b8bbdeb5a4b914879a7cbf3f9", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do  run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 66041 - this used to ICE with an incomplete fix for the PR.\n+program main\n+  implicit none\n+  type :: t\n+    real :: c\n+  end type t\n+  type(t), dimension(1,-2:0) :: a1\n+  real, dimension(3,2) :: b1\n+  real, dimension(2) :: c1\n+  real, dimension(1,2) :: c2\n+\n+  data a1%c /17., -23., 29./\n+  data b1 / 2.,  -3.,  5.,  -7., 11., -13./\n+\n+  c1 = matmul(a1(1,:)%c, b1)\n+  if (any (c1-[248., -749.] /= 0.)) call abort\n+\n+  c2 = matmul(a1%c, b1)\n+  if (any (c2-reshape([248., -749.],shape(c2)) /= 0.)) call abort\n+end program main\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_matmul\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}