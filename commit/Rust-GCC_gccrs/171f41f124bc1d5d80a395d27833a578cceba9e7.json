{"sha": "171f41f124bc1d5d80a395d27833a578cceba9e7", "node_id": "C_kwDOANBUbNoAKDE3MWY0MWYxMjRiYzFkNWQ4MGEzOTVkMjc4MzNhNTc4Y2NlYmE5ZTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-12T12:44:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T12:32:22Z"}, "message": "libstdc++: Improve doxygen docs for std::allocator\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/user.cfg.in (PREDEFINED): Define __allocator_base\n\tso that Doxygen shows the right base-class for std::allocator.\n\t* include/bits/alloc_traits.h: Improve doxygen docs.\n\t* include/bits/allocator.h: Likewise.\n\t* include/bits/new_allocator.h: Likewise.\n\t* include/ext/new_allocator.h: Likewise.", "tree": {"sha": "02ed9db6552ad49d30931fc2a5a2a8e3c72323e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02ed9db6552ad49d30931fc2a5a2a8e3c72323e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/171f41f124bc1d5d80a395d27833a578cceba9e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171f41f124bc1d5d80a395d27833a578cceba9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171f41f124bc1d5d80a395d27833a578cceba9e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171f41f124bc1d5d80a395d27833a578cceba9e7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b01963a4ea87607f5af6578a49006c8fee4d527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b01963a4ea87607f5af6578a49006c8fee4d527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b01963a4ea87607f5af6578a49006c8fee4d527"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "cfda7ab13c497c26fef5afb5a3958f11c2459f1b", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=171f41f124bc1d5d80a395d27833a578cceba9e7", "patch": "@@ -2405,6 +2405,7 @@ PREDEFINED             = __cplusplus=202002L \\\n                          _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED \\\n                          _GLIBCXX_HAVE_BUILTIN_LAUNDER \\\n \t\t\t \"_GLIBCXX_DOXYGEN_ONLY(X)=X \" \\\n+\t\t\t __allocator_base=std::__new_allocator \\\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"}, {"sha": "f9ca37fd7d6f9965db36143b0614c7ef0b75bb16", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=171f41f124bc1d5d80a395d27833a578cceba9e7", "patch": "@@ -661,6 +661,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __rhs; }\n     };\n \n+  /// @cond undocumented\n #if __cplusplus < 201703L\n   template<typename _Alloc>\n     inline void\n@@ -818,8 +819,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __a.deallocate(__a.allocate(1u), 1u);\n     };\n #endif\n+  /// @endcond\n #endif // C++11\n \n+  /// @cond undocumented\n+\n   /**\n    * Destroy a range of objects using the supplied allocator.  For\n    * non-default allocators we do not optimize away invocation of\n@@ -849,6 +853,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       _Destroy(__first, __last);\n     }\n+  /// @endcond\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "ee1121b080a793f817f7d06204eb0037219f3317", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=171f41f124bc1d5d80a395d27833a578cceba9e7", "patch": "@@ -67,7 +67,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // explicit specialization, with the historical ABI properties, but with\n   // the same members that are present in the primary template.\n \n-  /// allocator<void> specialization.\n+  /** std::allocator<void> specialization.\n+   *\n+   * @headerfile memory\n+   */\n   template<>\n     class allocator<void>\n     {\n@@ -119,6 +122,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  for further details.\n    *\n    *  @tparam  _Tp  Type of allocated object.\n+   *\n+   *  @headerfile memory\n    */\n   template<typename _Tp>\n     class allocator : public __allocator_base<_Tp>\n@@ -209,6 +214,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Inherit everything else.\n     };\n \n+  /** Equality comparison for std::allocator objects\n+   *\n+   * @return true, for all std::allocator objects.\n+   * @relates std::allocator\n+   */\n   template<typename _T1, typename _T2>\n     inline _GLIBCXX20_CONSTEXPR bool\n     operator==(const allocator<_T1>&, const allocator<_T2>&)\n@@ -223,6 +233,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return false; }\n #endif\n \n+  /// @cond undocumented\n+\n   // Invalid allocator<cv T> partial specializations.\n   // allocator_traits::rebind_alloc can be used to form a valid allocator type.\n   template<typename _Tp>\n@@ -325,6 +337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n #endif\n+  /// @endcond\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "1a5bc51b956430c0d49ab0721bd96751e7c75096", "filename": "libstdc++-v3/include/bits/new_allocator.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnew_allocator.h?ref=171f41f124bc1d5d80a395d27833a578cceba9e7", "patch": "@@ -43,14 +43,21 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   *  @brief  An allocator that uses global new, as per C++03 [20.4.1].\n-   *  @ingroup allocators\n+   * @brief  An allocator that uses global `new`, as per C++03 [20.4.1].\n+   * @ingroup allocators\n    *\n-   *  This is precisely the allocator defined in the C++ Standard.\n-   *    - all allocation calls operator new\n-   *    - all deallocation calls operator delete\n+   * This is precisely the allocator defined in the C++ Standard.\n+   *   - all allocation calls `operator new`\n+   *   - all deallocation calls `operator delete`\n    *\n-   *  @tparam  _Tp  Type of allocated object.\n+   * This is the default base-class implementation of `std::allocator`,\n+   * and is also the base-class of the `__gnu_cxx::new_allocator` extension.\n+   * You should use either `std::allocator` or `__gnu_cxx::new_allocator`\n+   * instead of using this directly.\n+   *\n+   * @tparam  _Tp  Type of allocated object.\n+   *\n+   * @headerfile memory\n    */\n   template<typename _Tp>\n     class __new_allocator"}, {"sha": "96e6523977a4f0d33637bfe155c22302c56dd1b9", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171f41f124bc1d5d80a395d27833a578cceba9e7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=171f41f124bc1d5d80a395d27833a578cceba9e7", "patch": "@@ -36,14 +36,20 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   *  @brief  An allocator that uses global new, as per C++03 [20.4.1].\n+   *  @brief  An allocator that uses global `new`, as per C++03 [20.4.1].\n    *  @ingroup allocators\n    *\n    *  This is precisely the allocator defined in the C++ Standard.\n-   *    - all allocation calls operator new\n-   *    - all deallocation calls operator delete\n+   *    - all allocation calls `operator new`\n+   *    - all deallocation calls `operator delete`\n+   *\n+   *  This is a non-standard extension that can be used to guarantee\n+   *  allocation from `new` even if the library has been configured to\n+   *  use a different implementation for `std::allocator`.\n    *\n    *  @tparam  _Tp  Type of allocated object.\n+   *\n+   *  @headerfile ext/new_allocator.h\n    */\n   template<typename _Tp>\n     class new_allocator : public std::__new_allocator<_Tp>"}]}