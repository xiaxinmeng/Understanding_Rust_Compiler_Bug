{"sha": "900c07da335df90d8660f87e75734fea30ad9f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwYzA3ZGEzMzVkZjkwZDg2NjBmODdlNzU3MzRmZWEzMGFkOWYyNw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2011-06-16T13:51:17Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2011-06-16T13:51:17Z"}, "message": "Revert r174940\n\nFix PR target/49398\n\nFrom-SVN: r175104", "tree": {"sha": "b78e4d31700e6f92ef5cb55fe2ad182f4b6b2ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b78e4d31700e6f92ef5cb55fe2ad182f4b6b2ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/900c07da335df90d8660f87e75734fea30ad9f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900c07da335df90d8660f87e75734fea30ad9f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/900c07da335df90d8660f87e75734fea30ad9f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900c07da335df90d8660f87e75734fea30ad9f27/comments", "author": null, "committer": null, "parents": [{"sha": "d5cc91810ebf8ece752df538e9adf482985d7b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cc91810ebf8ece752df538e9adf482985d7b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cc91810ebf8ece752df538e9adf482985d7b1d"}], "stats": {"total": 490, "additions": 42, "deletions": 448}, "files": [{"sha": "29d0f27ccabcedc1154d9b4de74bd72f03596f9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -1,3 +1,23 @@\n+2011-06-16  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR target/49398\n+\tRevert.\n+\t2011-06-10  Wei Guozhi  <carrot@google.com>\n+\n+\tPR target/45335\n+\t* config/arm/ldmstm.md (ldm2_ia, stm2_ia, ldm2_ib, stm2_ib, ldm2_da,\n+\tstm2_da, ldm2_db, stm2_db): Add condition !arm_arch7 to these insns.\n+\t(ldrd, ldrd_reg1, ldrd_reg2 and peephole2): New insn patterns and\n+\trelated peephole2.\n+\t(strd, strd_reg1, strd_reg2 and peephole2): New insn patterns and\n+\trelated peephole2.\n+\t* config/arm/arm-protos.h (arm_check_ldrd_operands): New prototype.\n+\t(arm_legitimate_ldrd_p): New prototype.\n+\t(arm_output_ldrd): New prototype.\n+\t* config/arm/arm.c (arm_check_ldrd_operands): New function.\n+\t(arm_legitimate_ldrd_p): New function.\n+\t(arm_output_ldrd): New function.\n+\n 2010-06-16  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR middle-end/46500"}, {"sha": "2fd75fb3bd625c983403b256f99828ed6312bd3c", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -154,9 +154,6 @@ extern const char *arm_output_memory_barrier (rtx *);\n extern const char *arm_output_sync_insn (rtx, rtx *);\n extern unsigned int arm_sync_loop_insns (rtx , rtx *);\n extern int arm_attr_length_push_multi(rtx, rtx);\n-extern bool arm_check_ldrd_operands (rtx, rtx, rtx, rtx);\n-extern bool arm_legitimate_ldrd_p (rtx, rtx, rtx, rtx, bool);\n-extern int arm_output_ldrd (rtx, rtx, rtx, rtx, rtx, bool);\n \n #if defined TREE_CODE\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "547acc8f926678e2b73b2cc9070d2c54f3dbe5d0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -23814,234 +23814,4 @@ arm_attr_length_push_multi(rtx parallel_op, rtx first_op)\n   return 4;\n }\n \n-/* Check the validity of operands in an ldrd/strd instruction.  */\n-bool\n-arm_check_ldrd_operands (rtx reg1, rtx reg2, rtx off1, rtx off2)\n-{\n-  HOST_WIDE_INT offset1 = 0;\n-  HOST_WIDE_INT offset2 = 0;\n-  int regno1 = REGNO (reg1);\n-  int regno2 = REGNO (reg2);\n-  HOST_WIDE_INT max_offset = 1020;\n-\n-  if (TARGET_ARM)\n-    max_offset = 255;\n-\n-  if (off1 != NULL_RTX)\n-    offset1 = INTVAL (off1);\n-  if (off2 != NULL_RTX)\n-    offset2 = INTVAL (off2);\n-\n-  /* The offset range of LDRD is [-max_offset, max_offset]. Here we check if\n-     both offsets lie in the range [-max_offset, max_offset+4]. If one of the\n-     offsets is max_offset+4, the following condition\n-\t((offset1 + 4) == offset2)\n-     will ensure offset1 to be max_offset, suitable for instruction LDRD.  */\n-  if ((offset1 > (max_offset + 4)) || (offset1 < -max_offset)\n-      || ((offset1 & 3) != 0))\n-    return false;\n-  if ((offset2 > (max_offset + 4)) || (offset2 < -max_offset)\n-      || ((offset2 & 3) != 0))\n-    return false;\n-\n-  if ((offset1 + 4) == offset2)\n-    {\n-      if (TARGET_THUMB2)\n-\treturn true;\n-\n-      /* TARGET_ARM  */\n-      if (((regno1 & 1) == 0) && ((regno1 + 1) == regno2))           /* ldrd  */\n-\treturn true;\n-\n-      if ((regno1 < regno2) && ((offset1 <= 4) && (offset1 >= -8)))  /* ldm  */\n-\treturn true;\n-    }\n-  if ((offset2 + 4) == offset1)\n-    {\n-      if (TARGET_THUMB2)\n-\treturn true;\n-\n-      /* TARGET_ARM  */\n-      if (((regno2 & 1) == 0) && ((regno2 + 1) == regno1))           /* ldrd  */\n-\treturn true;\n-\n-      if ((regno2 < regno1) && ((offset2 <= 4) && (offset2 >= -8)))  /* ldm  */\n-\treturn true;\n-    }\n-\n-  return false;\n-}\n-\n-/* Check if the two memory accesses can be merged to an ldrd/strd instruction.\n-   That is they use the same base register, and the gap between constant\n-   offsets should be 4.  */\n-bool\n-arm_legitimate_ldrd_p (rtx reg1, rtx reg2, rtx mem1, rtx mem2, bool ldrd)\n-{\n-  rtx base1, base2;\n-  rtx offset1 = NULL_RTX;\n-  rtx offset2 = NULL_RTX;\n-  rtx addr1 = XEXP (mem1, 0);\n-  rtx addr2 = XEXP (mem2, 0);\n-\n-  if (MEM_VOLATILE_P (mem1) || MEM_VOLATILE_P (mem2))\n-    return false;\n-\n-  if (REG_P (addr1))\n-    base1 = addr1;\n-  else if (GET_CODE (addr1) == PLUS)\n-    {\n-      base1 = XEXP (addr1, 0);\n-      offset1 = XEXP (addr1, 1);\n-      if (!REG_P (base1) || (GET_CODE (offset1) != CONST_INT))\n-\treturn false;\n-    }\n-  else\n-    return false;\n-\n-  if (REG_P (addr2))\n-    base2 = addr2;\n-  else if (GET_CODE (addr2) == PLUS)\n-    {\n-      base2 = XEXP (addr2, 0);\n-      offset2 = XEXP (addr2, 1);\n-      if (!REG_P (base2) || (GET_CODE (offset2) != CONST_INT))\n-\treturn false;\n-    }\n-  else\n-    return false;\n-\n-  if (base1 != base2)\n-    return false;\n-\n-  if (ldrd && ((reg1 == reg2) || (reg1 == base1)))\n-    return false;\n-\n-  return arm_check_ldrd_operands (reg1, reg2, offset1, offset2);\n-}\n-\n-/* Output instructions for ldrd and count the number of bytes has been\n-   outputted. Do not actually output instructions if EMIT_P is false.  */\n-int\n-arm_output_ldrd (rtx reg1, rtx reg2, rtx base, rtx off1, rtx off2, bool emit_p)\n-{\n-  int length = 0;\n-  rtx operands[5];\n-  HOST_WIDE_INT offset1 = 0;\n-  HOST_WIDE_INT offset2 = 0;\n-\n-  if (off1 != NULL_RTX)\n-    offset1 = INTVAL (off1);\n-  else\n-    off1 = GEN_INT (0);\n-  if (off2 != NULL_RTX)\n-    offset2 = INTVAL (off2);\n-  else\n-    off2 = GEN_INT (0);\n-  if (offset1 > offset2)\n-    {\n-      rtx tmp;\n-      HOST_WIDE_INT t = offset1;   offset1 = offset2;   offset2 = t;\n-      tmp = off1;   off1 = off2;   off2 = tmp;\n-      tmp = reg1;   reg1 = reg2;   reg2 = tmp;\n-    }\n-\n-  operands[0] = reg1;\n-  operands[1] = reg2;\n-  operands[2] = base;\n-  operands[3] = off1;\n-  operands[4] = off2;\n-\n-  if (TARGET_THUMB2)\n-    {\n-      if (fix_cm3_ldrd && (base == reg1))\n-\t{\n-\t  if (offset1 <= -256)\n-\t    {\n-\t      if (emit_p)\n-\t\toutput_asm_insn (\"sub\\t%2, %2, %n3\", operands);\n-\t      length = 4;\n-\n-\t      if (emit_p)\n-\t\toutput_asm_insn (\"ldr\\t%1, [%2, #4]\", operands);\n-\t      if (low_register_operand (reg2, SImode)\n-\t\t  && low_register_operand (base, SImode))\n-\t\tlength += 2;\n-\t      else\n-\t\tlength += 4;\n-\n-\t      if (emit_p)\n-\t\toutput_asm_insn (\"ldr\\t%0, [%2]\", operands);\n-\t      if (low_register_operand (base, SImode))\n-\t\tlength += 2;\n-\t      else\n-\t\tlength += 4;\n-\t    }\n-\t  else\n-\t    {\n-\t      if (emit_p)\n-\t\toutput_asm_insn (\"ldr\\t%1, [%2, %4]\", operands);\n-\t      if (low_register_operand (reg2, SImode) && (offset2 >= 0)\n-\t\t  && low_register_operand (base, SImode) && (offset2 < 128))\n-\t\tlength += 2;\n-\t      else\n-\t\tlength += 4;\n-\n-\t      if (emit_p)\n-\t\toutput_asm_insn (\"ldr\\t%0, [%2, %3]\", operands);\n-\t      if (low_register_operand (base, SImode)\n-\t\t  && (offset1 >= 0) && (offset1 < 128))\n-\t\tlength += 2;\n-\t      else\n-\t\tlength += 4;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  if (emit_p)\n-\t    output_asm_insn (\"ldrd\\t%0, %1, [%2, %3]\", operands);\n-\t  length = 4;\n-\t}\n-    }\n-  else    /* TARGET_ARM  */\n-    {\n-      if ((REGNO (reg2) == (REGNO (reg1) + 1)) && ((REGNO (reg1) & 1) == 0))\n-\t{\n-\t  if (emit_p)\n-\t    output_asm_insn (\"ldrd\\t%0, %1, [%2, %3]\", operands);\n-\t  length = 4;\n-\t}\n-      else\n-\t{\n-\t  if (emit_p)\n-\t    {\n-\t      switch (offset1)\n-\t\t{\n-\t\tcase -8:\n-\t\t  output_asm_insn (\"ldm%(db%)\\t%2, {%0, %1}\", operands);\n-\t\t  break;\n-\n-\t\tcase -4:\n-\t\t  output_asm_insn (\"ldm%(da%)\\t%2, {%0, %1}\", operands);\n-\t\t  break;\n-\n-\t\tcase 0:\n-\t\t  output_asm_insn (\"ldm%(ia%)\\t%2, {%0, %1}\", operands);\n-\t\t  break;\n-\n-\t\tcase 4:\n-\t\t  output_asm_insn (\"ldm%(ib%)\\t%2, {%0, %1}\", operands);\n-\t\t  break;\n-\n-\t\tdefault:\n-\t\t  gcc_unreachable ();\n-\t\t}\n-\t    }\n-\t  length = 4;\n-\t}\n-    }\n-\n-  return length;\n-}\n-\n #include \"gt-arm.h\""}, {"sha": "5db4a3269968b396e9ae811dc616e7e1adb3291d", "filename": "gcc/config/arm/ldmstm.md", "status": "modified", "additions": 8, "deletions": 212, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Fconfig%2Farm%2Fldmstm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Fconfig%2Farm%2Fldmstm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fldmstm.md?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -852,7 +852,7 @@\n      (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n-  \"TARGET_32BIT && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n   \"ldm%(ia%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -901,7 +901,7 @@\n           (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n           (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n-  \"TARGET_32BIT && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(ia%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -939,7 +939,7 @@\n      (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 8))))])]\n-  \"TARGET_ARM && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n   \"ldm%(ib%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -965,7 +965,7 @@\n           (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 8)))\n           (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n-  \"TARGET_ARM && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(ib%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -990,7 +990,7 @@\n                   (const_int -4))))\n      (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n           (mem:SI (match_dup 3)))])]\n-  \"TARGET_ARM && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n   \"ldm%(da%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -1015,7 +1015,7 @@\n           (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n      (set (mem:SI (match_dup 3))\n           (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n-  \"TARGET_ARM && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(da%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -1041,7 +1041,7 @@\n      (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int -4))))])]\n-  \"TARGET_32BIT && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n   \"ldm%(db%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -1067,7 +1067,7 @@\n           (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int -4)))\n           (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n-  \"TARGET_32BIT && !arm_arch7 && XVECLEN (operands[0], 0) == 2\"\n+  \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(db%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n@@ -1189,207 +1189,3 @@\n     FAIL;\n })\n \n-(define_insn \"*ldrd\"\n-  [(set (match_operand:SI 0 \"arm_hard_register_operand\" \"\")\n-\t(mem:SI (plus:SI (match_operand:SI 2 \"s_register_operand\" \"rk\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\"))))\n-   (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n-\t(mem:SI (plus:SI (match_dup 2)\n-\t\t\t (match_operand:SI 4 \"const_int_operand\" \"\"))))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_check_ldrd_operands (operands[0], operands[1],\n-\t\t\t       operands[3], operands[4])\"\n-  \"*\n-  arm_output_ldrd (operands[0], operands[1],\n-\t\t   operands[2], operands[3], operands[4], true);\n-  return \\\"\\\";\n-  \"\n-  [(set (attr \"length\")\n-\t(symbol_ref (\"arm_output_ldrd (operands[0], operands[1], operands[2],\n-\t\t\t\t       operands[3], operands[4], false)\")))]\n-)\n-\n-(define_insn \"*ldrd_reg1\"\n-  [(set (match_operand:SI 0 \"arm_hard_register_operand\" \"\")\n-\t(mem:SI (match_operand:SI 2 \"s_register_operand\" \"rk\")))\n-   (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n-\t(mem:SI (plus:SI (match_dup 2)\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\"))))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_check_ldrd_operands (operands[0], operands[1], NULL_RTX, operands[3])\"\n-  \"*\n-  arm_output_ldrd (operands[0], operands[1],\n-\t\t   operands[2], NULL_RTX, operands[3], true);\n-  return \\\"\\\";\n-  \"\n-  [(set (attr \"length\")\n-\t(symbol_ref (\"arm_output_ldrd (operands[0], operands[1], operands[2],\n-\t\t\t\t       NULL_RTX, operands[3], false)\")))]\n-)\n-\n-(define_insn \"*ldrd_reg2\"\n-  [(set (match_operand:SI 0 \"arm_hard_register_operand\" \"\")\n-\t(mem:SI (plus:SI (match_operand:SI 2 \"s_register_operand\" \"rk\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\"))))\n-   (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n-\t(mem:SI (match_dup 2)))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_check_ldrd_operands (operands[0], operands[1], operands[3], NULL_RTX)\"\n-  \"*\n-  arm_output_ldrd (operands[0], operands[1],\n-\t\t   operands[2], operands[3], NULL_RTX, true);\n-  return \\\"\\\";\n-  \"\n-  [(set (attr \"length\")\n-\t(symbol_ref (\"arm_output_ldrd (operands[0], operands[1], operands[2],\n-\t\t\t\t       operands[3], NULL_RTX, false)\")))]\n-)\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n-\t(match_operand:SI 2 \"memory_operand\" \"\"))\n-   (set (match_operand:SI 1 \"arm_general_register_operand\" \"\")\n-\t(match_operand:SI 3 \"memory_operand\" \"\"))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_legitimate_ldrd_p (operands[0], operands[1],\n-\t\t\t     operands[2], operands[3], true)\"\n-  [(parallel [(set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"memory_operand\" \"\"))\n-\t      (set (match_operand:SI 1 \"arm_general_register_operand\" \"\")\n-\t\t   (match_operand:SI 3 \"memory_operand\" \"\"))])]\n-  \"\"\n-)\n-\n-(define_insn \"*strd\"\n-  [(set (mem:SI (plus:SI (match_operand:SI 2 \"s_register_operand\" \"rk\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\")))\n-\t(match_operand:SI 0 \"arm_hard_register_operand\" \"\"))\n-   (set (mem:SI (plus:SI (match_dup 2)\n-\t\t\t (match_operand:SI 4 \"const_int_operand\" \"\")))\n-\t(match_operand:SI 1 \"arm_hard_register_operand\" \"\"))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_check_ldrd_operands (operands[0], operands[1],\n-\t\t\t       operands[3], operands[4])\"\n-  \"*\n-  {\n-    HOST_WIDE_INT offset1 = INTVAL (operands[3]);\n-    HOST_WIDE_INT offset2 = INTVAL (operands[4]);\n-    if (offset1 > offset2)\n-      {\n-\trtx tmp = operands[0];  operands[0] = operands[1];  operands[1] = tmp;\n-\ttmp = operands[3];  operands[3] = operands[4];  operands[4] = tmp;\n-\toffset1 = INTVAL (operands[3]);\n-\toffset2 = INTVAL (operands[4]);\n-      }\n-    if (TARGET_THUMB2)\n-      return \\\"strd\\\\t%0, %1, [%2, %3]\\\";\n-    else          /* TARGET_ARM  */\n-      {\n-\tif ((REGNO (operands[1]) == (REGNO (operands[0]) + 1))\n-\t    && ((REGNO (operands[0]) & 1) == 0))\n-\t  return \\\"strd\\\\t%0, %1, [%2, %3]\\\";\n-\telse if (offset1 == -8)\n-\t  return \\\"stm%(db%)\\\\t%2, {%0, %1}\\\";\n-\telse      /* offset1 == 4  */\n-\t  return \\\"stm%(ib%)\\\\t%2, {%0, %1}\\\";\n-      }\n-  }\"\n-  [(set_attr \"length\" \"4\")]\n-)\n-\n-(define_insn \"*strd_reg1\"\n-  [(set (mem:SI (match_operand:SI 2 \"s_register_operand\" \"rk\"))\n-\t(match_operand:SI 0 \"arm_hard_register_operand\" \"\"))\n-   (set (mem:SI (plus:SI (match_dup 2)\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\")))\n-\t(match_operand:SI 1 \"arm_hard_register_operand\" \"\"))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_check_ldrd_operands (operands[0], operands[1], NULL_RTX, operands[3])\"\n-  \"*\n-  {\n-    HOST_WIDE_INT offset2 = INTVAL (operands[3]);\n-    if (TARGET_THUMB2)\n-      {\n-\tif (offset2 == 4)\n-\t  return \\\"strd\\\\t%0, %1, [%2]\\\";\n-\telse\n-\t  return \\\"strd\\\\t%1, %0, [%2, %3]\\\";\n-      }\n-    else           /* TARGET_ARM  */\n-      {\n-\tif (offset2 == 4)\n-\t  {\n-\t    if ((REGNO (operands[1]) == (REGNO (operands[0]) + 1))\n-\t\t&& ((REGNO (operands[0]) & 1) == 0))\n-\t      return \\\"strd\\\\t%0, %1, [%2]\\\";\n-\t    else\n-\t      return \\\"stm%(ia%)\\\\t%2, {%0, %1}\\\";\n-\t  }\n-\telse      /* offset2 == -4  */\n-\t  {\n-\t    if ((REGNO (operands[0]) == (REGNO (operands[1]) + 1))\n-\t\t&& ((REGNO (operands[1]) & 1) == 0))\n-\t      return \\\"strd\\\\t%1, %0, [%2, %3]\\\";\n-\t    else\n-\t      return \\\"stm%(da%)\\\\t%2, {%1, %0}\\\";\n-\t  }\n-      }\n-  }\"\n-  [(set_attr \"length\" \"4\")]\n-)\n-\n-(define_insn \"*strd_reg2\"\n-  [(set (mem:SI (plus:SI (match_operand:SI 2 \"s_register_operand\" \"rk\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\")))\n-\t(match_operand:SI 0 \"arm_hard_register_operand\" \"\"))\n-   (set (mem:SI (match_dup 2))\n-\t(match_operand:SI 1 \"arm_hard_register_operand\" \"\"))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_check_ldrd_operands (operands[0], operands[1], operands[3], NULL_RTX)\"\n-  \"*\n-  {\n-    HOST_WIDE_INT offset1 = INTVAL (operands[3]);\n-    if (TARGET_THUMB2)\n-      {\n-\tif (offset1 == -4)\n-\t  return \\\"strd\\\\t%0, %1, [%2, %3]\\\";\n-\telse\n-\t  return \\\"strd\\\\t%1, %0, [%2]\\\";\n-      }\n-    else           /* TARGET_ARM  */\n-      {\n-\tif (offset1 == -4)\n-\t  {\n-\t    if ((REGNO (operands[1]) == (REGNO (operands[0]) + 1))\n-\t\t&& ((REGNO (operands[0]) & 1) == 0))\n-\t      return \\\"strd\\\\t%0, %1, [%2, %3]\\\";\n-\t    else\n-\t      return \\\"stm%(da%)\\\\t%2, {%0, %1}\\\";\n-\t  }\n-\telse\n-\t  {\n-\t    if ((REGNO (operands[0]) == (REGNO (operands[1]) + 1))\n-\t\t&& ((REGNO (operands[1]) & 1) == 0))\n-\t      return \\\"strd\\\\t%1, %0, [%2]\\\";\n-\t    else\n-\t      return \\\"stm%(ia%)\\\\t%2, {%1, %0}\\\";\n-\t  }\n-      }\n-  }\"\n-  [(set_attr \"length\" \"4\")]\n-)\n-\n-(define_peephole2\n-  [(set (match_operand:SI 2 \"memory_operand\" \"\")\n-\t(match_operand:SI 0 \"arm_general_register_operand\" \"\"))\n-   (set (match_operand:SI 3 \"memory_operand\" \"\")\n-\t(match_operand:SI 1 \"arm_general_register_operand\" \"\"))]\n-  \"TARGET_32BIT && arm_arch7\n-   && arm_legitimate_ldrd_p (operands[0], operands[1],\n-\t\t\t\toperands[2], operands[3], false)\"\n-  [(parallel [(set (match_operand:SI 2 \"memory_operand\" \"\")\n-\t\t   (match_operand:SI 0 \"arm_general_register_operand\" \"\"))\n-\t      (set (match_operand:SI 3 \"memory_operand\" \"\")\n-\t\t   (match_operand:SI 1 \"arm_general_register_operand\" \"\"))])]\n-  \"\"\n-)"}, {"sha": "c54e761d720fd1ecdc6bd2b0c5e353ab084cc825", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -1,3 +1,16 @@\n+2011-06-16  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tRevert \n+\t2011-06-10  Wei Guozhi  <carrot@google.com>\n+\n+\tPR target/45335\n+\t* gcc.target/arm/pr45335.c: New test.\n+\t* gcc.target/arm/pr45335-2.c: New test.\n+\t* gcc.target/arm/pr45335-3.c: New test.\n+\t* gcc.target/arm/pr40457-1.c: Add another possible output \"ldrd\".\n+\t* gcc.target/arm/pr40457-2.c: Changed to store 3 words.\n+\t* gcc.target/arm/pr40457-3.c: Changed to store 3 words.\n+\n 2011-06-16  Ira Rosen  <ira.rosen@linaro.org>\n \n \t* gcc.dg/vect/vect-widen-mult-half-u8.c: New test."}, {"sha": "815fd38f097549168d9c808b53917e7fade9ddb0", "filename": "gcc/testsuite/gcc.target/arm/pr40457-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-1.c?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -7,4 +7,4 @@ int bar(int* p)\n   return x;\n }\n \n-/* { dg-final { scan-assembler \"ldm|ldrd\" } } */\n+/* { dg-final { scan-assembler \"ldm\" } } */"}, {"sha": "187f7bf7f844f2816978d3c61473f7359053caa3", "filename": "gcc/testsuite/gcc.target/arm/pr40457-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-2.c?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -5,7 +5,6 @@ void foo(int* p)\n {\n   p[0] = 1;\n   p[1] = 0;\n-  p[2] = 2;\n }\n \n /* { dg-final { scan-assembler \"stm\" } } */"}, {"sha": "9bd5a17befeb2257d48b2a87b4c8d4cdf4c57ddd", "filename": "gcc/testsuite/gcc.target/arm/pr40457-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900c07da335df90d8660f87e75734fea30ad9f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40457-3.c?ref=900c07da335df90d8660f87e75734fea30ad9f27", "patch": "@@ -5,7 +5,6 @@ void foo(int* p)\n {\n   p[0] = 1;\n   p[1] = 0;\n-  p[2] = 2;\n }\n \n /* { dg-final { scan-assembler \"stm\" } } */"}]}