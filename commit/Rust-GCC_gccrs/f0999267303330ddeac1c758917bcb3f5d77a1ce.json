{"sha": "f0999267303330ddeac1c758917bcb3f5d77a1ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5OTkyNjczMDMzMzBkZGVhYzFjNzU4OTE3YmNiM2Y1ZDc3YTFjZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-05-05T19:53:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-05-05T19:53:11Z"}, "message": "29134.cc: Adjust for profile-mode too.\n\n2010-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Adjust\n\tfor profile-mode too.\n\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc:\n\tLikewise.\n\n2010-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/profile/unordered_map (unordered_map<>::insert(_InputIter,\n\t_InputIter), unordered_multimap<>::insert(_InputIter, _InputIter)):\n\tFix typo, don't call base() on __first and __last.\n\n2010-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tFix profile-mode vs -std=c++0x\n\t* include/profile/impl/profiler_trace.h: Do not include the\n\twhole <algorithm>, include <bits/stl_heap.h> (additionally\n\tto <bits/stl_algobase.h>).\n\t(__write_cost_factors): Replace std::for_each with open-coding.\n\t(__set_cost_factors): Likewise.\n\t(__report): Likewise; use std::make_heap / std::sort_heap\n\tinstead of std::sort.\n\t(__report_cost_factors): Replace std::remove with open-coding.\n\t(__warn, __cost_factor_writer, __cost_factor_setter): Remove.\n\nFrom-SVN: r159082", "tree": {"sha": "66e73a2280bb19bdebdd44a5c8c780d1386d50a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66e73a2280bb19bdebdd44a5c8c780d1386d50a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0999267303330ddeac1c758917bcb3f5d77a1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0999267303330ddeac1c758917bcb3f5d77a1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0999267303330ddeac1c758917bcb3f5d77a1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0999267303330ddeac1c758917bcb3f5d77a1ce/comments", "author": null, "committer": null, "parents": [{"sha": "0f559c16ead64e7e85f21a6e99a50d8785b7f63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f559c16ead64e7e85f21a6e99a50d8785b7f63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f559c16ead64e7e85f21a6e99a50d8785b7f63b"}], "stats": {"total": 216, "additions": 118, "deletions": 98}, "files": [{"sha": "c508008260778cb43fb2055b5d83a255dc6a9d87", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f0999267303330ddeac1c758917bcb3f5d77a1ce", "patch": "@@ -1,3 +1,29 @@\n+2010-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Adjust\n+\tfor profile-mode too.\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc:\n+\tLikewise.\n+\n+2010-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/profile/unordered_map (unordered_map<>::insert(_InputIter,\n+\t_InputIter), unordered_multimap<>::insert(_InputIter, _InputIter)):\n+\tFix typo, don't call base() on __first and __last.\n+\n+2010-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tFix profile-mode vs -std=c++0x\n+\t* include/profile/impl/profiler_trace.h: Do not include the\n+\twhole <algorithm>, include <bits/stl_heap.h> (additionally\n+\tto <bits/stl_algobase.h>).\n+\t(__write_cost_factors): Replace std::for_each with open-coding.\n+\t(__set_cost_factors): Likewise.\n+\t(__report): Likewise; use std::make_heap / std::sort_heap\n+\tinstead of std::sort.\n+\t(__report_cost_factors): Replace std::remove with open-coding.\n+\t(__warn, __cost_factor_writer, __cost_factor_setter): Remove.\n+\n 2010-05-04  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR other/43620"}, {"sha": "ba486a57d934307a661cf0d536d4223406a1cbf7", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 78, "deletions": 88, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=f0999267303330ddeac1c758917bcb3f5d77a1ce", "patch": "@@ -53,10 +53,10 @@\n #define _GLIBCXX_IMPL_UNORDERED_MAP std::tr1::unordered_map\n #endif\n \n-#include <algorithm>\n #include <fstream>\n #include <string>\n #include <utility>\n+#include <bits/stl_heap.h> // for std::make_heap, std::sort_heap\n \n #if (defined _GLIBCXX_PROFILE_THREADS) && !(defined _GLIBCXX_HAVE_TLS)\n #error You do not seem to have TLS support, which is required by the profile \\\n@@ -98,29 +98,20 @@ struct __warning_data\n   __stack_t __context;\n   const char* __warning_id;\n   const char* __warning_message;\n-  __warning_data();\n-  __warning_data(float __m, __stack_t __c, const char* __id, \n-                 const char* __msg);\n-  bool operator>(const struct __warning_data& other) const;\n-};\n \n-inline __warning_data::__warning_data()\n-    : __magnitude(0.0), __context(NULL), __warning_id(NULL),\n-      __warning_message(NULL)\n-{\n-}\n+  __warning_data()\n+  : __magnitude(0.0), __context(NULL), __warning_id(NULL),\n+    __warning_message(NULL) { }\n \n-inline __warning_data::__warning_data(float __m, __stack_t __c, \n-                                      const char* __id, const char* __msg)\n-    : __magnitude(__m), __context(__c), __warning_id(__id),\n-      __warning_message(__msg)\n-{\n-}\n+  __warning_data(float __m, __stack_t __c, const char* __id, \n+                 const char* __msg)\n+  : __magnitude(__m), __context(__c), __warning_id(__id),\n+    __warning_message(__msg) { }\n \n-inline bool __warning_data::operator>(const struct __warning_data& other) const\n-{\n-  return __magnitude > other.__magnitude;\n-}\n+  bool\n+  operator>(const struct __warning_data& __other) const\n+  { return __magnitude > __other.__magnitude; }\n+};\n \n typedef std::_GLIBCXX_STD_PR::vector<__warning_data> __warning_vector_t;\n \n@@ -433,23 +424,6 @@ inline int __log_magnitude(float f)\n   return sign * result;\n }\n \n-struct __warn\n-{\n-  FILE* __file;\n-  __warn(FILE* __f) { __file = __f; }\n-  void operator() (const __warning_data& __info)\n-  {\n-    fprintf(__file,  __info.__warning_id);\n-    fprintf(__file, \": improvement = %d\", __log_magnitude(__info.__magnitude));\n-    fprintf(__file, \": call stack = \");\n-    __gnu_profile::__write(__file, __info.__context);\n-    fprintf(__file, \": advice = %s\\n\", __info.__warning_message);\n-    free(\n-        const_cast<void*>(\n-            reinterpret_cast<const void*>(__info.__warning_message)));\n-  }\n-};\n-\n inline FILE* __open_output_file(const char* extension)\n {\n   // The path is made of _S_trace_file_name + \".\" + extension.\n@@ -496,12 +470,27 @@ inline void __report(void)\n   size_t __cutoff = __min(_GLIBCXX_PROFILE_DATA(_S_max_warn_count),\n                           __warnings.size());\n \n-  std::sort(__warnings.begin(), __warnings.end(),\n-            std::greater<__warning_vector_t::value_type>());\n+  std::make_heap(__warnings.begin(), __warnings.end(),\n+\t\t std::greater<__warning_vector_t::value_type>());\n+  std::sort_heap(__warnings.begin(), __warnings.end(),\n+\t\t std::greater<__warning_vector_t::value_type>());\n   __warnings.resize(__cutoff);\n \n   FILE* __warn_file = __open_output_file(\"txt\");\n-  std::for_each(__warnings.begin(), __warnings.end(), __warn(__warn_file));\n+\n+  for (__warning_vector_t::iterator __it = __warnings.begin();\n+       __it != __warnings.end(); ++__it)\n+    {\n+      fprintf(__warn_file,  __it->__warning_id);\n+      fprintf(__warn_file, \": improvement = %d\",\n+\t      __log_magnitude(__it->__magnitude));\n+      fprintf(__warn_file, \": call stack = \");\n+      __gnu_profile::__write(__warn_file, __it->__context);\n+      fprintf(__warn_file, \": advice = %s\\n\", __it->__warning_message);\n+      free(const_cast<void*>(reinterpret_cast<const void*>\n+\t\t\t     (__it->__warning_message)));\n+    }\n+\n   fclose(__warn_file);\n \n   __unlock(_GLIBCXX_PROFILE_DATA(__global_lock));\n@@ -537,59 +526,56 @@ inline void __read_cost_factors()\n \n   std::ifstream __conf_file(__conf_file_name.c_str());\n \n-  if (__conf_file.is_open()) {\n-    std::string __line;\n-\n-    while (getline(__conf_file, __line)) {\n-      std::string::size_type __i = __line.find_first_not_of(\" \\t\\n\\v\");\n-\n-      if (__line.length() <= 0 || __line[__i] == '#') {\n-        // Skip empty lines or comments.\n-        continue;\n-      }\n-\n-      // Trim.\n-      __line.erase(std::remove(__line.begin(), __line.end(), ' '), \n-                   __line.end());\n-      std::string::size_type __pos = __line.find(\"=\");\n-      std::string __factor_name = __line.substr(0, __pos);\n-      std::string::size_type __end = __line.find_first_of(\";\\n\");\n-      std::string __factor_value = __line.substr(__pos + 1, __end - __pos);\n-\n-      setenv(__factor_name.c_str(), __factor_value.c_str(), 0);\n+  if (__conf_file.is_open())\n+    {\n+      std::string __line;\n+\n+      while (getline(__conf_file, __line))\n+\t{\n+\t  std::string::size_type __i = __line.find_first_not_of(\" \\t\\n\\v\");\n+\n+\t  if (__line.length() <= 0 || __line[__i] == '#') {\n+\t    // Skip empty lines or comments.\n+\t    continue;\n+\t  }\n+\n+\t  // Trim.\n+\t  if (__line.begin() != __line.end())\n+\t    {\n+\t      // A simple remove operation.\n+\t      std::string::iterator __first = __line.begin();\n+\t      std::string::iterator __result = __first;\n+\t      ++__first;\n+\t      for(; __first != __line.end(); ++__first)\n+\t\tif(!(*__first == ' '))\n+\t\t  {\n+\t\t    *__result = *__first;\n+\t\t    ++__result;\n+\t\t  }\n+\t      __line.erase(__result, __line.end());\n+\t    }\n+\t  std::string::size_type __pos = __line.find(\"=\");\n+\t  std::string __factor_name = __line.substr(0, __pos);\n+\t  std::string::size_type __end = __line.find_first_of(\";\\n\");\n+\t  std::string __factor_value = __line.substr(__pos + 1, __end - __pos);\n+\n+\t  setenv(__factor_name.c_str(), __factor_value.c_str(), 0);\n+\t}\n     }\n-  } \n }\n \n-struct __cost_factor_writer\n-{\n-  FILE* __file;\n-  __cost_factor_writer(FILE* __f) : __file(__f) {}\n-  void operator() (const __cost_factor* __factor)\n-  {\n-    fprintf(__file, \"%s = %f\\n\", __factor->__env_var, __factor->__value);\n-  }\n-};\n-\n inline void __write_cost_factors()\n {\n   FILE* __file = __open_output_file(\"conf.out\");\n-  std::for_each(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin(),\n-                _GLIBCXX_PROFILE_DATA(__cost_factors)->end(),\n-                __cost_factor_writer(__file));\n+\n+  for (__decltype(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin()) __it\n+\t = _GLIBCXX_PROFILE_DATA(__cost_factors)->begin();\n+       __it != _GLIBCXX_PROFILE_DATA(__cost_factors)->end(); ++__it)\n+    fprintf(__file, \"%s = %f\\n\", (*__it)->__env_var, (*__it)->__value);\n+\n   fclose(__file);\n }\n \n-struct __cost_factor_setter\n-{\n-  void operator() (__cost_factor* __factor)\n-  {\n-    char* __env_cost_factor;\n-    if (__env_cost_factor = getenv(__factor->__env_var))\n-      __factor->__value = atof(__env_cost_factor);\n-  }\n-};\n-\n inline void __set_cost_factors()\n {\n   _GLIBCXX_PROFILE_DATA(__cost_factors) = new __cost_factor_vector;\n@@ -621,9 +607,13 @@ inline void __set_cost_factors()\n       &_GLIBCXX_PROFILE_DATA(__umap_find_cost_factor));\n   _GLIBCXX_PROFILE_DATA(__cost_factors)->push_back(\n       &_GLIBCXX_PROFILE_DATA(__umap_iterate_cost_factor));\n-  std::for_each(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin(),\n-                _GLIBCXX_PROFILE_DATA(__cost_factors)->end(),\n-                __cost_factor_setter());\n+\n+  \n+  for (__decltype(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin()) __it\n+\t = _GLIBCXX_PROFILE_DATA(__cost_factors)->begin();\n+       __it != _GLIBCXX_PROFILE_DATA(__cost_factors)->end(); ++__it)\n+    if (char* __env_cost_factor = getenv((*__it)->__env_var))\n+      (*__it)->__value = atof(__env_cost_factor);\n }\n \n inline void __profcxx_init_unconditional()"}, {"sha": "6e832c807352d5de4a1a72fbc56d83ae53265ec6", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=f0999267303330ddeac1c758917bcb3f5d77a1ce", "patch": "@@ -196,7 +196,7 @@ namespace __profile\n         insert(_InputIter __first, _InputIter __last)\n         {\n \t  size_type __old_size = _Base::bucket_count(); \n-\t  _Base::insert(__first.base(), __last.base());\n+\t  _Base::insert(__first, __last);\n \t  _M_profile_resize(__old_size, _Base::bucket_count()); \n \t}\n \n@@ -430,7 +430,7 @@ namespace __profile\n         insert(_InputIter __first, _InputIter __last)\n         {\n \t  size_type __old_size = _Base::bucket_count(); \n-\t  _Base::insert(__first.base(), __last.base());\n+\t  _Base::insert(__first, __last);\n \t  _M_profile_resize(__old_size, _Base::bucket_count()); \n \t}\n "}, {"sha": "4b45d79fc1cd152f558c6894f907df6cea3632ec", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/capacity/29134.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc?ref=f0999267303330ddeac1c758917bcb3f5d77a1ce", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,10 +29,12 @@ void test01()\n   using std::vector;\n   using std::numeric_limits;\n \n-#ifndef _GLIBCXX_DEBUG\n-  using std::_S_word_bit;\n-#else\n+#ifdef _GLIBCXX_DEBUG\n   using std::_GLIBCXX_STD_D::_S_word_bit;\n+#elif defined(_GLIBCXX_PROFILE)\n+  using std::_GLIBCXX_STD_PR::_S_word_bit;\n+#else\n+  using std::_S_word_bit;\n #endif\n \n   // Actually, vector<bool> is special, see libstdc++/31370."}, {"sha": "40d09dbf752ba3b5f24b3c4f0d150d5b2d23e95a", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/modifiers/insert/31370.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0999267303330ddeac1c758917bcb3f5d77a1ce/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc?ref=f0999267303330ddeac1c758917bcb3f5d77a1ce", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,10 +23,12 @@\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n-#ifndef _GLIBCXX_DEBUG\n-  using std::_S_word_bit;\n-#else\n+#ifdef _GLIBCXX_DEBUG\n   using std::_GLIBCXX_STD_D::_S_word_bit;\n+#elif defined(_GLIBCXX_PROFILE)\n+  using std::_GLIBCXX_STD_PR::_S_word_bit;\n+#else\n+  using std::_S_word_bit;\n #endif\n \n inline void"}]}