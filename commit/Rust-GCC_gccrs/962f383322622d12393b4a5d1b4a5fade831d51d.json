{"sha": "962f383322622d12393b4a5d1b4a5fade831d51d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyZjM4MzMyMjYyMmQxMjM5M2I0YTVkMWI0YTVmYWRlODMxZDUxZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-03-02T17:49:58Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-02T17:49:58Z"}, "message": "expr.h (promoted_input_arg): Remove decl.\n\n        * expr.h (promoted_input_arg): Remove decl.\n        * function.c (promoted_input_arg): Merge into ...\n        * combine.c (setup_incoming_promotions): ... only caller.\n        Rearrange to avoid double loop.\n\nFrom-SVN: r122479", "tree": {"sha": "837c31d1173819855617bf6c6639209cf7954025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/837c31d1173819855617bf6c6639209cf7954025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962f383322622d12393b4a5d1b4a5fade831d51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962f383322622d12393b4a5d1b4a5fade831d51d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962f383322622d12393b4a5d1b4a5fade831d51d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962f383322622d12393b4a5d1b4a5fade831d51d/comments", "author": null, "committer": null, "parents": [{"sha": "1769232d2607e9219b1932090c1036a6ed334152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769232d2607e9219b1932090c1036a6ed334152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1769232d2607e9219b1932090c1036a6ed334152"}], "stats": {"total": 91, "additions": 35, "deletions": 56}, "files": [{"sha": "63d305f5a7f77896ae524cce8549195142ac29c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=962f383322622d12393b4a5d1b4a5fade831d51d", "patch": "@@ -1,3 +1,10 @@\n+2007-03-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.h (promoted_input_arg): Remove decl.\n+\t* function.c (promoted_input_arg): Merge into ...\n+\t* combine.c (setup_incoming_promotions): ... only caller.\n+\tRearrange to avoid double loop.\n+\n 2007-03-02  Ben Elliston  <bje@au.ibm.com>\n \t    Peter Bergner  <bergner@vnet.ibm.com>\n \t    Janis Johnson  <janis187@us.ibm.com>"}, {"sha": "99da26da349e85c54d003b01d50ff276f5ac0984", "filename": "gcc/combine.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=962f383322622d12393b4a5d1b4a5fade831d51d", "patch": "@@ -1014,27 +1014,36 @@ init_reg_last (void)\n static void\n setup_incoming_promotions (void)\n {\n-  unsigned int regno;\n-  rtx reg;\n-  enum machine_mode mode;\n-  int unsignedp;\n-  rtx first = get_insns ();\n+  rtx first;\n+  tree arg;\n+\n+  if (!targetm.calls.promote_function_args (TREE_TYPE (cfun->decl)))\n+    return;\n \n-  if (targetm.calls.promote_function_args (TREE_TYPE (cfun->decl)))\n+  first = get_insns ();\n+\n+  for (arg = DECL_ARGUMENTS (current_function_decl); arg;\n+       arg = TREE_CHAIN (arg))\n     {\n-      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t/* Check whether this register can hold an incoming pointer\n-\t   argument.  FUNCTION_ARG_REGNO_P tests outgoing register\n-\t   numbers, so translate if necessary due to register windows.  */\n-\tif (FUNCTION_ARG_REGNO_P (OUTGOING_REGNO (regno))\n-\t    && (reg = promoted_input_arg (regno, &mode, &unsignedp)) != 0)\n-\t  {\n-\t    record_value_for_reg\n-\t      (reg, first, gen_rtx_fmt_e ((unsignedp ? ZERO_EXTEND\n-\t\t\t\t\t   : SIGN_EXTEND),\n-\t\t\t\t\t  GET_MODE (reg),\n-\t\t\t\t\t  gen_rtx_CLOBBER (mode, const0_rtx)));\n-\t  }\n+      rtx reg = DECL_INCOMING_RTL (arg);\n+\n+      if (!REG_P (reg))\n+\tcontinue;\n+\n+      if (TYPE_MODE (DECL_ARG_TYPE (arg)) == TYPE_MODE (TREE_TYPE (arg)))\n+\t{\n+\t  enum machine_mode mode = TYPE_MODE (TREE_TYPE (arg));\n+\t  int uns = TYPE_UNSIGNED (TREE_TYPE (arg));\n+\n+\t  mode = promote_mode (TREE_TYPE (arg), mode, &uns, 1);\n+\t  if (mode == GET_MODE (reg) && mode != DECL_MODE (arg))\n+\t    {\n+\t      rtx x;\n+\t      x = gen_rtx_CLOBBER (DECL_MODE (arg), const0_rtx);\n+\t      x = gen_rtx_fmt_e ((uns ? ZERO_EXTEND : SIGN_EXTEND), mode, x);\n+\t      record_value_for_reg (reg, first, x);\n+\t    }\n+\t}\n     }\n }\n \f"}, {"sha": "13c732159601fc3979ed8efe5a94763d38a9f474", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=962f383322622d12393b4a5d1b4a5fade831d51d", "patch": "@@ -597,9 +597,6 @@ extern rtx label_rtx (tree);\n    if how is not obvious).  */\n extern rtx force_label_rtx (tree);\n \n-/* Indicate how an input argument register was promoted.  */\n-extern rtx promoted_input_arg (unsigned int, enum machine_mode *, int *);\n-\n /* Return an rtx like arg but sans any constant terms.\n    Returns the original rtx if it has no constant terms.\n    The constant terms are added and stored via a second arg.  */"}, {"sha": "1d48f5b33a24e631cd8b606ef081609b8d780531", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962f383322622d12393b4a5d1b4a5fade831d51d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=962f383322622d12393b4a5d1b4a5fade831d51d", "patch": "@@ -3228,40 +3228,6 @@ gimplify_parameters (void)\n \n   return stmts;\n }\n-\f\n-/* Indicate whether REGNO is an incoming argument to the current function\n-   that was promoted to a wider mode.  If so, return the RTX for the\n-   register (to get its mode).  PMODE and PUNSIGNEDP are set to the mode\n-   that REGNO is promoted from and whether the promotion was signed or\n-   unsigned.  */\n-\n-rtx\n-promoted_input_arg (unsigned int regno, enum machine_mode *pmode, int *punsignedp)\n-{\n-  tree arg;\n-\n-  for (arg = DECL_ARGUMENTS (current_function_decl); arg;\n-       arg = TREE_CHAIN (arg))\n-    if (REG_P (DECL_INCOMING_RTL (arg))\n-\t&& REGNO (DECL_INCOMING_RTL (arg)) == regno\n-\t&& TYPE_MODE (DECL_ARG_TYPE (arg)) == TYPE_MODE (TREE_TYPE (arg)))\n-      {\n-\tenum machine_mode mode = TYPE_MODE (TREE_TYPE (arg));\n-\tint unsignedp = TYPE_UNSIGNED (TREE_TYPE (arg));\n-\n-\tmode = promote_mode (TREE_TYPE (arg), mode, &unsignedp, 1);\n-\tif (mode == GET_MODE (DECL_INCOMING_RTL (arg))\n-\t    && mode != DECL_MODE (arg))\n-\t  {\n-\t    *pmode = DECL_MODE (arg);\n-\t    *punsignedp = unsignedp;\n-\t    return DECL_INCOMING_RTL (arg);\n-\t  }\n-      }\n-\n-  return 0;\n-}\n-\n \f\n /* Compute the size and offset from the start of the stacked arguments for a\n    parm passed in mode PASSED_MODE and with type TYPE."}]}