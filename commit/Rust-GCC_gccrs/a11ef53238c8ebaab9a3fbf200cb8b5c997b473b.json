{"sha": "a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExZWY1MzIzOGM4ZWJhYWI5YTNmYmYyMDBjYjhiNWM5OTdiNDczYg==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-02-09T18:09:19Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-02-09T18:24:22Z"}, "message": "aarch64: fix vector multiplication costs\n\nThis patch introduces a vect.mul RTX cost and decouples the vector\nmultiplication costing from the scalar one.\n\ngcc/ChangeLog:\n2021-02-09  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/aarch64/aarch64-cost-tables.h: Add entries for vect.mul.\n\t* config/aarch64/aarch64.c (aarch64_rtx_mult_cost): Use vect.mul for\n\tvector multiplies and vect.alu for SSRA.\n\t* config/arm/aarch-common-protos.h (struct vector_cost_table): Define\n\tvect.mul cost field.\n\t* config/arm/aarch-cost-tables.h: Add entries for vect.mul.\n\t* config/arm/arm.c: Likewise.\n\ngcc/testsuite/ChangeLog:\n2021-02-09  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/aarch64/asimd-mul-to-shl-sub.c: New test.", "tree": {"sha": "e393fec2a59117a3b3c43f37c9b50275ab865b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e393fec2a59117a3b3c43f37c9b50275ab865b1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e52926b6c5f02fb3f34706b4afb2d8bcd86638"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "dd2e7e7cbb13d24f0b51092270cd7e2d75fabf29", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "patch": "@@ -123,7 +123,8 @@ const struct cpu_cost_table qdf24xx_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)  /* alu.  */\n+    COSTS_N_INSNS (1),  /* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n \n@@ -227,7 +228,8 @@ const struct cpu_cost_table thunderx_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1),\t/* Alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n \n@@ -330,7 +332,8 @@ const struct cpu_cost_table thunderx2t99_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1),\t/* Alu.  */\n+    COSTS_N_INSNS (4)\t/* Mult.  */\n   }\n };\n \n@@ -433,7 +436,8 @@ const struct cpu_cost_table thunderx3t110_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1),\t/* Alu.  */\n+    COSTS_N_INSNS (4)\t/* Mult.  */\n   }\n };\n \n@@ -537,7 +541,8 @@ const struct cpu_cost_table tsv110_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)  /* alu.  */\n+    COSTS_N_INSNS (1),  /* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n \n@@ -640,7 +645,8 @@ const struct cpu_cost_table a64fx_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)  /* alu.  */\n+    COSTS_N_INSNS (1),  /* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n "}, {"sha": "146ed8c1b693d7204a754bc4e6d17025e0af544b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "patch": "@@ -11568,7 +11568,6 @@ aarch64_rtx_mult_cost (rtx x, enum rtx_code code, int outer, bool speed)\n   if (VECTOR_MODE_P (mode))\n     {\n       unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n-      mode = GET_MODE_INNER (mode);\n       if (vec_flags & VEC_ADVSIMD)\n \t{\n \t  /* The by-element versions of the instruction have the same costs as\n@@ -11582,6 +11581,17 @@ aarch64_rtx_mult_cost (rtx x, enum rtx_code code, int outer, bool speed)\n \t  else if (GET_CODE (op1) == VEC_DUPLICATE)\n \t    op1 = XEXP (op1, 0);\n \t}\n+      cost += rtx_cost (op0, mode, MULT, 0, speed);\n+      cost += rtx_cost (op1, mode, MULT, 1, speed);\n+      if (speed)\n+\t{\n+\t  if (GET_CODE (x) == MULT)\n+\t    cost += extra_cost->vect.mult;\n+\t  /* This is to catch the SSRA costing currently flowing here.  */\n+\t  else\n+\t    cost += extra_cost->vect.alu;\n+\t}\n+      return cost;\n     }\n \n   /* Integer multiply/fma.  */"}, {"sha": "7a9cf3d324c103de74af741abe9ef30b76fea5ce", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "patch": "@@ -132,6 +132,7 @@ struct fp_cost_table\n struct vector_cost_table\n {\n   const int alu;\n+  const int mult;\n };\n \n struct cpu_cost_table"}, {"sha": "25ff702f01fab50d749b9a7b7b072c2be2504562", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "patch": "@@ -121,7 +121,8 @@ const struct cpu_cost_table generic_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n \n@@ -224,7 +225,8 @@ const struct cpu_cost_table cortexa53_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n \n@@ -327,7 +329,8 @@ const struct cpu_cost_table cortexa57_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)  /* alu.  */\n+    COSTS_N_INSNS (1),  /* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n \n@@ -430,7 +433,8 @@ const struct cpu_cost_table cortexa76_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)  /* alu.  */\n+    COSTS_N_INSNS (1),  /* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n \n@@ -533,7 +537,8 @@ const struct cpu_cost_table exynosm1_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (0)  /* alu.  */\n+    COSTS_N_INSNS (0),  /* alu.  */\n+    COSTS_N_INSNS (4)   /* mult.  */\n   }\n };\n \n@@ -636,7 +641,8 @@ const struct cpu_cost_table xgene1_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (2)  /* alu.  */\n+    COSTS_N_INSNS (2),  /* alu.  */\n+    COSTS_N_INSNS (8)   /* mult.  */\n   }\n };\n "}, {"sha": "d254f417541b4f69a52a026c0342cf7e62d2db4d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "patch": "@@ -1192,7 +1192,8 @@ const struct cpu_cost_table cortexa9_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n \n@@ -1295,7 +1296,8 @@ const struct cpu_cost_table cortexa8_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n \n@@ -1399,7 +1401,8 @@ const struct cpu_cost_table cortexa5_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n \n@@ -1504,7 +1507,8 @@ const struct cpu_cost_table cortexa7_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n \n@@ -1607,7 +1611,8 @@ const struct cpu_cost_table cortexa12_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n \n@@ -1710,7 +1715,8 @@ const struct cpu_cost_table cortexa15_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n \n@@ -1813,7 +1819,8 @@ const struct cpu_cost_table v7m_extra_costs =\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* alu.  */\n+    COSTS_N_INSNS (1),\t/* alu.  */\n+    COSTS_N_INSNS (4)\t/* mult.  */\n   }\n };\n "}, {"sha": "d7c5e5f341b2c56e9c2853859b786e1fe524eb59", "filename": "gcc/testsuite/gcc.target/aarch64/asimd-mul-to-shl-sub.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasimd-mul-to-shl-sub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasimd-mul-to-shl-sub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasimd-mul-to-shl-sub.c?ref=a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-options \"-Ofast\" } */\n+\n+/*\n+**foo:\n+**\tshl\tv1.4s, v0.4s, 16\n+**\tsub\tv0.4s, v1.4s, v0.4s\n+**\tret\n+*/\n+#include <arm_neon.h>\n+uint32x4_t foo (uint32x4_t a)\n+{\n+  return a * 65535;\n+}\n+\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */"}]}