{"sha": "3dd55b2f9fdbf102dad43fca46578f4054174d45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkNTViMmY5ZmRiZjEwMmRhZDQzZmNhNDY1NzhmNDA1NDE3NGQ0NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-06-18T22:20:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-18T22:20:10Z"}, "message": "re PR c++/53211 (range-based 'for' expression of type 'const int []' has incomplete type)\n\n/cp\n2013-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53211\n\t* pt.c (type_dependent_expression_p): Handle an array of unknown\n\tbound depending on a variadic parameter.\n\t* parser.c (cp_parser_range_for): Revert PR56794 changes.\n\n/testsuite\n2013-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53211\n\t* g++.dg/cpp0x/decltype55.C: New.\n\nFrom-SVN: r200178", "tree": {"sha": "27ef82e87b2d387554a2aeeb7e01bb6eaa32823f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ef82e87b2d387554a2aeeb7e01bb6eaa32823f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd55b2f9fdbf102dad43fca46578f4054174d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd55b2f9fdbf102dad43fca46578f4054174d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd55b2f9fdbf102dad43fca46578f4054174d45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd55b2f9fdbf102dad43fca46578f4054174d45/comments", "author": null, "committer": null, "parents": [{"sha": "299a5f6a095479accf70497650752faaae9ed859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299a5f6a095479accf70497650752faaae9ed859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299a5f6a095479accf70497650752faaae9ed859"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "7e25e5253745b0881d96bb067eaaf88521b9525e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3dd55b2f9fdbf102dad43fca46578f4054174d45", "patch": "@@ -1,3 +1,10 @@\n+2013-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53211\n+\t* pt.c (type_dependent_expression_p): Handle an array of unknown\n+\tbound depending on a variadic parameter.\n+\t* parser.c (cp_parser_range_for): Revert PR56794 changes.\n+\n 2013-06-17  Richard Biener  <rguenther@suse.de>\n \n \t* cp-tree.h (ANON_AGGRNAME_FORMAT, ANON_AGGRNAME_P): Move to tree.h."}, {"sha": "904ae0b8003406077f352e989be950e13b95b879", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3dd55b2f9fdbf102dad43fca46578f4054174d45", "patch": "@@ -9750,10 +9750,7 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl)\n \trange_expr = error_mark_node;\n       stmt = begin_range_for_stmt (scope, init);\n       finish_range_for_decl (stmt, range_decl, range_expr);\n-      if (range_expr != error_mark_node\n-\t  && !type_dependent_expression_p (range_expr)\n-\t  /* The length of an array might be dependent.  */\n-\t  && COMPLETE_TYPE_P (complete_type (TREE_TYPE (range_expr)))\n+      if (!type_dependent_expression_p (range_expr)\n \t  /* do_auto_deduction doesn't mess with template init-lists.  */\n \t  && !BRACE_ENCLOSED_INITIALIZER_P (range_expr))\n \tdo_range_for_auto_deduction (range_decl, range_expr);"}, {"sha": "25cbf3100cf1172df557c1f1ce2e0c79e1c519f3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3dd55b2f9fdbf102dad43fca46578f4054174d45", "patch": "@@ -20079,6 +20079,29 @@ type_dependent_expression_p (tree expression)\n       && VAR_HAD_UNKNOWN_BOUND (expression))\n     return true;\n \n+  /* An array of unknown bound depending on a variadic parameter, eg:\n+\n+     template<typename... Args>\n+       void foo (Args... args)\n+       {\n+         int arr[] = { args... };\n+       }\n+\n+     template<int... vals>\n+       void bar ()\n+       {\n+         int arr[] = { vals... };\n+       }\n+\n+     If the array has no length and has an initializer, it must be that\n+     we couldn't determine its length in cp_complete_array_type because\n+     it is dependent.  */\n+  if (VAR_P (expression)\n+      && TREE_CODE (TREE_TYPE (expression)) == ARRAY_TYPE\n+      && !TYPE_DOMAIN (TREE_TYPE (expression))\n+      && DECL_INITIAL (expression))\n+   return true;\n+\n   if (TREE_TYPE (expression) == unknown_type_node)\n     {\n       if (TREE_CODE (expression) == ADDR_EXPR)"}, {"sha": "53b844f62da99f55b2b353f628ad57c9125c0f9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3dd55b2f9fdbf102dad43fca46578f4054174d45", "patch": "@@ -1,3 +1,8 @@\n+2013-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53211\n+\t* g++.dg/cpp0x/decltype55.C: New.\n+\n 2013-06-18  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/c90-fordecl-1.c: Adjust expected message.\n@@ -7,11 +12,11 @@\n \t* c-c++-common/cilk-plus/AN/sec_reduce_ind_same_value.c: New test.\n \n 2013-06-17  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n-\t\n+\n \t* c-c++-common/cilk-plus/AN/array_test1.c: Make this an execution test.\n \tAlso changed the returns from error as distinct values so that it is\n \teasier to debug.\n-\t\n+\n 2013-06-17  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* gcc.target/aarch64/scalar_intrinsics.c: Update."}, {"sha": "95427fc0018e6677a5e32a23d65b6fd3a5effda2", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype55.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd55b2f9fdbf102dad43fca46578f4054174d45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype55.C?ref=3dd55b2f9fdbf102dad43fca46578f4054174d45", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/53211\n+// { dg-do compile { target c++11 } }\n+\n+template<typename A, typename B>\n+  struct is_same { static const bool value = false; };\n+\n+template<typename A>\n+  struct is_same<A, A> { static const bool value = true; };\n+\n+template<typename... Args>\n+void func(Args... args)\n+{\n+  int arr[] = { args... };\n+  static_assert (is_same<decltype(arr), int[sizeof...(Args)]>::value, \"\");\n+}\n+\n+int main()\n+{\n+  func(1, 2, 3, 4);\n+}"}]}