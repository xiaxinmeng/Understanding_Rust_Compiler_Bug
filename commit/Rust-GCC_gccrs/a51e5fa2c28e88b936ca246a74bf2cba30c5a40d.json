{"sha": "a51e5fa2c28e88b936ca246a74bf2cba30c5a40d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxZTVmYTJjMjhlODhiOTM2Y2EyNDZhNzRiZjJjYmEzMGM1YTQwZA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2012-04-20T11:46:58Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2012-04-20T11:46:58Z"}, "message": "rs6000.c (rs6000_emit_savres_rtx): Formatting.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_savres_rtx): Formatting.\n\t(rs6000_emit_prologue, rs6000_emit_epilogue): Likewise.  Rename\n\tsp_offset to frame_off.  Move world save code earlier.\n\nFrom-SVN: r186621", "tree": {"sha": "8d1c4217ebbd549b1765bbaad15845fd60e9f3f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1c4217ebbd549b1765bbaad15845fd60e9f3f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cbc836ed7d6a17696e1bebfeca37582b199ce41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbc836ed7d6a17696e1bebfeca37582b199ce41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbc836ed7d6a17696e1bebfeca37582b199ce41"}], "stats": {"total": 360, "additions": 183, "deletions": 177}, "files": [{"sha": "33ef4a77f669bc4de52774ba1432b795f85f9cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a51e5fa2c28e88b936ca246a74bf2cba30c5a40d", "patch": "@@ -1,3 +1,9 @@\n+2012-04-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_savres_rtx): Formatting.\n+\t(rs6000_emit_prologue, rs6000_emit_epilogue): Likewise.  Rename\n+\tsp_offset to frame_off.  Move world save code earlier.\n+\n 2012-04-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53050"}, {"sha": "29749d20041195b00b485937e26f13798c02a8ba", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51e5fa2c28e88b936ca246a74bf2cba30c5a40d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a51e5fa2c28e88b936ca246a74bf2cba30c5a40d", "patch": "@@ -19213,9 +19213,9 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n \n   sym = rs6000_savres_routine_sym (info, savep, gpr, lr);\n   RTVEC_ELT (p, offset++) = gen_rtx_USE (VOIDmode, sym);\n-  use_reg = DEFAULT_ABI == ABI_AIX ? (gpr && !lr ? 12 : 1)\n-\t\t\t\t   : DEFAULT_ABI == ABI_DARWIN && !gpr ? 1\n-\t\t\t\t\t\t\t\t       : 11;\n+  use_reg = (DEFAULT_ABI == ABI_AIX ? (gpr && !lr ? 12 : 1)\n+\t     : DEFAULT_ABI == ABI_DARWIN && !gpr ? 1\n+\t     : 11);\n   RTVEC_ELT (p, offset++)\n     = gen_rtx_USE (VOIDmode,\n \t\t   gen_rtx_REG (Pmode, use_reg));\n@@ -19225,7 +19225,7 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n       rtx addr, reg, mem;\n       reg = gen_rtx_REG (reg_mode, start_reg + i);\n       addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t   GEN_INT (save_area_offset + reg_size*i));\n+\t\t\t   GEN_INT (save_area_offset + reg_size * i));\n       mem = gen_frame_mem (reg_mode, addr);\n \n       RTVEC_ELT (p, i + offset) = gen_rtx_SET (VOIDmode,\n@@ -19294,9 +19294,9 @@ rs6000_emit_prologue (void)\n   int saving_GPRs_inline;\n   int using_store_multiple;\n   int using_static_chain_p = (cfun->static_chain_decl != NULL_TREE\n-                              && df_regs_ever_live_p (STATIC_CHAIN_REGNUM)\n+\t\t\t      && df_regs_ever_live_p (STATIC_CHAIN_REGNUM)\n \t\t\t      && call_used_regs[STATIC_CHAIN_REGNUM]);\n-  HOST_WIDE_INT sp_offset = 0;\n+  HOST_WIDE_INT frame_off = 0;\n \n   if (flag_stack_usage_info)\n     current_function_static_stack_size = info->total_size;\n@@ -19324,52 +19324,6 @@ rs6000_emit_prologue (void)\n       reg_size = 8;\n     }\n \n-  strategy = info->savres_strategy;\n-  using_store_multiple = strategy & SAVRES_MULTIPLE;\n-  saving_FPRs_inline = strategy & SAVE_INLINE_FPRS;\n-  saving_GPRs_inline = strategy & SAVE_INLINE_GPRS;\n-\n-  /* For V.4, update stack before we do any saving and set back pointer.  */\n-  if (! WORLD_SAVE_P (info)\n-      && info->push_p\n-      && (DEFAULT_ABI == ABI_V4\n-\t  || crtl->calls_eh_return))\n-    {\n-      bool need_r11 = (TARGET_SPE\n-\t\t       ? (!saving_GPRs_inline\n-\t\t\t  && info->spe_64bit_regs_used == 0)\n-\t\t       : (!saving_FPRs_inline || !saving_GPRs_inline));\n-      rtx copy_reg = need_r11 ? gen_rtx_REG (Pmode, 11) : NULL;\n-\n-      if (info->total_size < 32767)\n-\tsp_offset = info->total_size;\n-      else if (need_r11)\n-\tframe_reg_rtx = copy_reg;\n-      else if (info->cr_save_p\n-\t       || info->lr_save_p\n-\t       || info->first_fp_reg_save < 64\n-\t       || info->first_gp_reg_save < 32\n-\t       || info->altivec_size != 0\n-\t       || info->vrsave_mask != 0\n-\t       || crtl->calls_eh_return)\n-\t{\n-\t  copy_reg = frame_ptr_rtx;\n-\t  frame_reg_rtx = copy_reg;\n-\t}\n-      else\n-\t{\n-\t  /* The prologue won't be saving any regs so there is no need\n-\t     to set up a frame register to access any frame save area.\n-\t     We also won't be using sp_offset anywhere below, but set\n-\t     the correct value anyway to protect against future\n-\t     changes to this function.  */\n-\t  sp_offset = info->total_size;\n-\t}\n-      rs6000_emit_allocate_stack (info->total_size, copy_reg);\n-      if (frame_reg_rtx != sp_reg_rtx)\n-\trs6000_emit_stack_tie (frame_reg_rtx, false);\n-    }\n-\n   /* Handle world saves specially here.  */\n   if (WORLD_SAVE_P (info))\n     {\n@@ -19397,7 +19351,7 @@ rs6000_emit_prologue (void)\n \t\t  && info->push_p\n \t\t  && info->lr_save_p\n \t\t  && (!crtl->calls_eh_return\n-\t\t       || info->ehrd_offset == -432)\n+\t\t      || info->ehrd_offset == -432)\n \t\t  && info->vrsave_save_offset == -224\n \t\t  && info->altivec_save_offset == -416);\n \n@@ -19424,14 +19378,14 @@ rs6000_emit_prologue (void)\n \t properly.  */\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n \t{\n- \t  rtx reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t   ? DFmode : SFmode), \n-\t\t\t         info->first_fp_reg_save + i);\n+\t  rtx reg = gen_rtx_REG ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+\t\t\t\t  ? DFmode : SFmode),\n+\t\t\t\t info->first_fp_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n-\t\t\t\t\t    + sp_offset + 8 * i));\n- \t  rtx mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t     ? DFmode : SFmode), addr);\n+\t\t\t\t\t    + frame_off + 8 * i));\n+\t  rtx mem = gen_frame_mem ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+\t\t\t\t    ? DFmode : SFmode), addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -19440,7 +19394,7 @@ rs6000_emit_prologue (void)\n \t  rtx reg = gen_rtx_REG (V4SImode, info->first_altivec_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->altivec_save_offset\n-\t\t\t\t\t    + sp_offset + 16 * i));\n+\t\t\t\t\t    + frame_off + 16 * i));\n \t  rtx mem = gen_frame_mem (V4SImode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n@@ -19450,7 +19404,7 @@ rs6000_emit_prologue (void)\n \t  rtx reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->gp_save_offset\n-\t\t\t\t\t    + sp_offset + reg_size * i));\n+\t\t\t\t\t    + frame_off + reg_size * i));\n \t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n@@ -19461,7 +19415,7 @@ rs6000_emit_prologue (void)\n \trtx reg = gen_rtx_REG (reg_mode, CR2_REGNO);\n \trtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t GEN_INT (info->cr_save_offset\n-\t\t\t\t\t  + sp_offset));\n+\t\t\t\t\t  + frame_off));\n \trtx mem = gen_frame_mem (reg_mode, addr);\n \n \tRTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n@@ -19471,7 +19425,7 @@ rs6000_emit_prologue (void)\n \t{\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->lr_save_offset\n-\t\t\t\t\t    + sp_offset));\n+\t\t\t\t\t    + frame_off));\n \t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg0);\n@@ -19485,7 +19439,53 @@ rs6000_emit_prologue (void)\n       insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n       rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n \t\t\t    treg, GEN_INT (-info->total_size));\n-      sp_offset = info->total_size;\n+      frame_off = info->total_size;\n+    }\n+\n+  strategy = info->savres_strategy;\n+  using_store_multiple = strategy & SAVRES_MULTIPLE;\n+  saving_FPRs_inline = strategy & SAVE_INLINE_FPRS;\n+  saving_GPRs_inline = strategy & SAVE_INLINE_GPRS;\n+\n+  /* For V.4, update stack before we do any saving and set back pointer.  */\n+  if (! WORLD_SAVE_P (info)\n+      && info->push_p\n+      && (DEFAULT_ABI == ABI_V4\n+\t  || crtl->calls_eh_return))\n+    {\n+      bool need_r11 = (TARGET_SPE\n+\t\t       ? (!saving_GPRs_inline\n+\t\t\t  && info->spe_64bit_regs_used == 0)\n+\t\t       : (!saving_FPRs_inline || !saving_GPRs_inline));\n+      rtx copy_reg = need_r11 ? gen_rtx_REG (Pmode, 11) : NULL;\n+\n+      if (info->total_size < 32767)\n+\tframe_off = info->total_size;\n+      else if (need_r11)\n+\tframe_reg_rtx = copy_reg;\n+      else if (info->cr_save_p\n+\t       || info->lr_save_p\n+\t       || info->first_fp_reg_save < 64\n+\t       || info->first_gp_reg_save < 32\n+\t       || info->altivec_size != 0\n+\t       || info->vrsave_mask != 0\n+\t       || crtl->calls_eh_return)\n+\t{\n+\t  copy_reg = frame_ptr_rtx;\n+\t  frame_reg_rtx = copy_reg;\n+\t}\n+      else\n+\t{\n+\t  /* The prologue won't be saving any regs so there is no need\n+\t     to set up a frame register to access any frame save area.\n+\t     We also won't be using frame_off anywhere below, but set\n+\t     the correct value anyway to protect against future\n+\t     changes to this function.  */\n+\t  frame_off = info->total_size;\n+\t}\n+      rs6000_emit_allocate_stack (info->total_size, copy_reg);\n+      if (frame_reg_rtx != sp_reg_rtx)\n+\trs6000_emit_stack_tie (frame_reg_rtx, false);\n     }\n \n   /* If we use the link register, get it into r0.  */\n@@ -19501,7 +19501,7 @@ rs6000_emit_prologue (void)\n \t\t\t| SAVE_NOINLINE_FPRS_SAVES_LR)))\n \t{\n \t  addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t       GEN_INT (info->lr_save_offset + sp_offset));\n+\t\t\t       GEN_INT (info->lr_save_offset + frame_off));\n \t  reg = gen_rtx_REG (Pmode, 0);\n \t  mem = gen_rtx_MEM (Pmode, addr);\n \t  /* This should not be of rs6000_sr_alias_set, because of\n@@ -19514,7 +19514,9 @@ rs6000_emit_prologue (void)\n     }\n \n   /* If we need to save CR, put it into r12 or r11.  */\n-  if (!WORLD_SAVE_P (info) && info->cr_save_p && frame_reg_rtx != frame_ptr_rtx)\n+  if (!WORLD_SAVE_P (info)\n+      && info->cr_save_p\n+      && frame_reg_rtx != frame_ptr_rtx)\n     {\n       rtx set;\n \n@@ -19540,19 +19542,19 @@ rs6000_emit_prologue (void)\n     {\n       int i;\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n-\tif ((df_regs_ever_live_p (info->first_fp_reg_save+i)\n-\t     && ! call_used_regs[info->first_fp_reg_save+i]))\n-\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, \n-\t\t\t   (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t    ? DFmode : SFmode,\n+\tif (df_regs_ever_live_p (info->first_fp_reg_save + i)\n+\t    && ! call_used_regs[info->first_fp_reg_save + i])\n+\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx,\n+\t\t\t   (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+\t\t\t    ? DFmode : SFmode),\n \t\t\t   info->first_fp_reg_save + i,\n-\t\t\t   info->fp_save_offset + sp_offset + 8 * i,\n+\t\t\t   info->fp_save_offset + frame_off + 8 * i,\n \t\t\t   info->total_size);\n     }\n   else if (!WORLD_SAVE_P (info) && info->first_fp_reg_save != 64)\n     {\n       insn = rs6000_emit_savres_rtx (info, frame_reg_rtx,\n-\t\t\t\t     info->fp_save_offset + sp_offset,\n+\t\t\t\t     info->fp_save_offset + frame_off,\n \t\t\t\t     DFmode,\n \t\t\t\t     /*savep=*/true, /*gpr=*/false,\n \t\t\t\t     /*lr=*/((strategy\n@@ -19578,16 +19580,16 @@ rs6000_emit_prologue (void)\n \t to be saved with an offset from frame_reg_rtx that fits in\n \t the small const field for SPE memory instructions.  */\n       int spe_regs_addressable\n-\t= (SPE_CONST_OFFSET_OK (info->spe_gp_save_offset + sp_offset\n+\t= (SPE_CONST_OFFSET_OK (info->spe_gp_save_offset + frame_off\n \t\t\t\t+ reg_size * (32 - info->first_gp_reg_save - 1))\n \t   && saving_GPRs_inline);\n       int spe_offset;\n \n       if (spe_regs_addressable)\n \t{\n \t  spe_save_area_ptr = frame_reg_rtx;\n-\t  save_ptr_to_sp = info->total_size - sp_offset;\n-\t  spe_offset = info->spe_gp_save_offset + sp_offset;\n+\t  save_ptr_to_sp = info->total_size - frame_off;\n+\t  spe_offset = info->spe_gp_save_offset + frame_off;\n \t}\n       else\n \t{\n@@ -19599,9 +19601,9 @@ rs6000_emit_prologue (void)\n \t  if (!saving_GPRs_inline)\n \t    ool_adjust = 8 * (info->first_gp_reg_save\n \t\t\t      - (FIRST_SAVRES_REGISTER + 1));\n-\t  offset = info->spe_gp_save_offset + sp_offset - ool_adjust;\n+\t  offset = info->spe_gp_save_offset + frame_off - ool_adjust;\n \t  spe_save_area_ptr = gen_rtx_REG (Pmode, 11);\n-\t  save_ptr_to_sp = info->total_size - sp_offset + offset;\n+\t  save_ptr_to_sp = info->total_size - frame_off + offset;\n \t  spe_offset = 0;\n \n \t  if (using_static_chain_p)\n@@ -19614,7 +19616,7 @@ rs6000_emit_prologue (void)\n \t  emit_insn (gen_addsi3 (spe_save_area_ptr,\n \t\t\t\t frame_reg_rtx, GEN_INT (offset)));\n \t  if (REGNO (frame_reg_rtx) == 11)\n-\t    sp_offset = -info->spe_gp_save_offset + ool_adjust;\n+\t    frame_off = -info->spe_gp_save_offset + ool_adjust;\n \t}\n \n       if (saving_GPRs_inline)\n@@ -19635,8 +19637,7 @@ rs6000_emit_prologue (void)\n \n \t\tinsn = emit_move_insn (mem, reg);\n \n-\t\trs6000_frame_related (insn,\n-\t\t\t\t      spe_save_area_ptr, save_ptr_to_sp,\n+\t\trs6000_frame_related (insn, spe_save_area_ptr, save_ptr_to_sp,\n \t\t\t\t      NULL_RTX, NULL_RTX);\n \t      }\n \t}\n@@ -19669,10 +19670,10 @@ rs6000_emit_prologue (void)\n \t  else\n \t    {\n \t      int save_off = 8 * (64 - info->first_fp_reg_save);\n-\t      rtx offset = GEN_INT (sp_offset - save_off);\n+\t      rtx offset = GEN_INT (frame_off - save_off);\n \n \t      if (REGNO (dest_reg) == REGNO (frame_reg_rtx))\n-\t\tsp_offset = save_off;\n+\t\tframe_off = save_off;\n \t      emit_insn (gen_add3_insn (dest_reg, frame_reg_rtx, offset));\n \t    }\n \t}\n@@ -19681,15 +19682,15 @@ rs6000_emit_prologue (void)\n \t{\n \t  rtx dest_reg = gen_rtx_REG (Pmode, DEFAULT_ABI == ABI_AIX ? 12 : 11);\n \t  int save_off = 8 * (64 - info->first_fp_reg_save);\n-\t  rtx offset = GEN_INT (sp_offset - save_off);\n+\t  rtx offset = GEN_INT (frame_off - save_off);\n \n \t  if (REGNO (dest_reg) == REGNO (frame_reg_rtx))\n-\t    sp_offset = save_off;\n+\t    frame_off = save_off;\n \t  emit_insn (gen_add3_insn (dest_reg, frame_reg_rtx, offset));\n \t}\n \n       insn = rs6000_emit_savres_rtx (info, frame_reg_rtx,\n-\t\t\t\t     info->gp_save_offset + sp_offset,\n+\t\t\t\t     info->gp_save_offset + frame_off,\n \t\t\t\t     reg_mode,\n \t\t\t\t     /*savep=*/true, /*gpr=*/true,\n \t\t\t\t     /*lr=*/((strategy\n@@ -19709,7 +19710,7 @@ rs6000_emit_prologue (void)\n \t  reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n \t  addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->gp_save_offset\n-\t\t\t\t\t+ sp_offset\n+\t\t\t\t\t+ frame_off\n \t\t\t\t\t+ reg_size * i));\n \t  mem = gen_frame_mem (reg_mode, addr);\n \n@@ -19724,20 +19725,20 @@ rs6000_emit_prologue (void)\n       int i;\n       for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n \tif (rs6000_reg_live_or_pic_offset_p (info->first_gp_reg_save + i))\n-          {\n-            rtx addr, reg, mem;\n-            reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n-\n-            addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-                                 GEN_INT (info->gp_save_offset\n-                                          + sp_offset\n-                                          + reg_size * i));\n-            mem = gen_frame_mem (reg_mode, addr);\n-\n-            insn = emit_move_insn (mem, reg);\n-            rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n-                                  NULL_RTX, NULL_RTX);\n-          }\n+\t  {\n+\t    rtx addr, reg, mem;\n+\t    reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n+\n+\t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n+\t\t\t\t GEN_INT (info->gp_save_offset\n+\t\t\t\t\t  + frame_off\n+\t\t\t\t\t  + reg_size * i));\n+\t    mem = gen_frame_mem (reg_mode, addr);\n+\n+\t    insn = emit_move_insn (mem, reg);\n+\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t\t\t\t  NULL_RTX, NULL_RTX);\n+\t  }\n     }\n \n   /* ??? There's no need to emit actual instructions here, but it's the\n@@ -19753,8 +19754,7 @@ rs6000_emit_prologue (void)\n \t    break;\n \n \t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode, regno,\n-\t\t\t   info->ehrd_offset + sp_offset\n-\t\t\t   + reg_size * (int) i,\n+\t\t\t   info->ehrd_offset + frame_off + reg_size * (int) i,\n \t\t\t   info->total_size);\n \t}\n     }\n@@ -19799,7 +19799,7 @@ rs6000_emit_prologue (void)\n       LABEL_NUSES (toc_save_done) += 1;\n \n       save_insn = emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode,\n-\t\t\t\t   TOC_REGNUM, sp_offset + 5 * reg_size,\n+\t\t\t\t   TOC_REGNUM, frame_off + 5 * reg_size,\n \t\t\t\t   info->total_size);\n \n       emit_label (toc_save_done);\n@@ -19829,7 +19829,7 @@ rs6000_emit_prologue (void)\n   if (!WORLD_SAVE_P (info) && info->cr_save_p)\n     {\n       rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t       GEN_INT (info->cr_save_offset + sp_offset));\n+\t\t\t       GEN_INT (info->cr_save_offset + frame_off));\n       rtx mem = gen_frame_mem (SImode, addr);\n       /* See the large comment above about why CR2_REGNO is used.  */\n       rtx magic_eh_cr_reg = gen_rtx_REG (SImode, CR2_REGNO);\n@@ -19860,15 +19860,15 @@ rs6000_emit_prologue (void)\n       rtx copy_reg = NULL;\n \n       if (info->total_size < 32767)\n-\tsp_offset = info->total_size;\n+\tframe_off = info->total_size;\n       else if (info->altivec_size != 0\n \t       || info->vrsave_mask != 0)\n \t{\n \t  copy_reg = frame_ptr_rtx;\n \t  frame_reg_rtx = copy_reg;\n \t}\n       else\n-\tsp_offset = info->total_size;\n+\tframe_off = info->total_size;\n       rs6000_emit_allocate_stack (info->total_size, copy_reg);\n       if (frame_reg_rtx != sp_reg_rtx)\n \trs6000_emit_stack_tie (frame_reg_rtx, false);\n@@ -19889,30 +19889,30 @@ rs6000_emit_prologue (void)\n       int i;\n \n       /* There should be a non inline version of this, for when we\n-         are saving lots of vector registers.  */\n+\t are saving lots of vector registers.  */\n       for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n-        if (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n-          {\n-            rtx areg, savereg, mem;\n-            int offset;\n+\tif (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n+\t  {\n+\t    rtx areg, savereg, mem;\n+\t    int offset;\n \n-            offset = info->altivec_save_offset + sp_offset\n-              + 16 * (i - info->first_altivec_reg_save);\n+\t    offset = (info->altivec_save_offset + frame_off\n+\t\t      + 16 * (i - info->first_altivec_reg_save));\n \n-            savereg = gen_rtx_REG (V4SImode, i);\n+\t    savereg = gen_rtx_REG (V4SImode, i);\n \n-            areg = gen_rtx_REG (Pmode, 0);\n-            emit_move_insn (areg, GEN_INT (offset));\n+\t    areg = gen_rtx_REG (Pmode, 0);\n+\t    emit_move_insn (areg, GEN_INT (offset));\n \n-            /* AltiVec addressing mode is [reg+reg].  */\n-            mem = gen_frame_mem (V4SImode,\n-                                 gen_rtx_PLUS (Pmode, frame_reg_rtx, areg));\n+\t    /* AltiVec addressing mode is [reg+reg].  */\n+\t    mem = gen_frame_mem (V4SImode,\n+\t\t\t\t gen_rtx_PLUS (Pmode, frame_reg_rtx, areg));\n \n-            insn = emit_move_insn (mem, savereg);\n+\t    insn = emit_move_insn (mem, savereg);\n \n-            rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n-                                  areg, GEN_INT (offset));\n-          }\n+\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t\t\t\t  areg, GEN_INT (offset));\n+\t  }\n     }\n \n   /* VRSAVE is a bit vector representing which AltiVec registers\n@@ -19931,19 +19931,19 @@ rs6000_emit_prologue (void)\n       int offset;\n \n       /* Get VRSAVE onto a GPR.  Note that ABI_V4 might be using r12\n-         as frame_reg_rtx and r11 as the static chain pointer for\n-         nested functions.  */\n+\t as frame_reg_rtx and r11 as the static chain pointer for\n+\t nested functions.  */\n       reg = gen_rtx_REG (SImode, 0);\n       vrsave = gen_rtx_REG (SImode, VRSAVE_REGNO);\n       if (TARGET_MACHO)\n-        emit_insn (gen_get_vrsave_internal (reg));\n+\temit_insn (gen_get_vrsave_internal (reg));\n       else\n-        emit_insn (gen_rtx_SET (VOIDmode, reg, vrsave));\n+\temit_insn (gen_rtx_SET (VOIDmode, reg, vrsave));\n \n       /* Save VRSAVE.  */\n-      offset = info->vrsave_save_offset + sp_offset;\n+      offset = info->vrsave_save_offset + frame_off;\n       mem = gen_frame_mem (SImode,\n-\t\t\t   gen_rtx_PLUS (Pmode, frame_reg_rtx, \n+\t\t\t   gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t\t GEN_INT (offset)));\n       insn = emit_move_insn (mem, reg);\n \n@@ -20022,7 +20022,7 @@ rs6000_emit_prologue (void)\n      both in terms of the size of DWARF info and the time taken in the\n      unwinder to interpret it.  R2 changes, apart from the\n      calls_eh_return case earlier in this function, are handled by\n-     linux-unwind.h frob_update_context.  */ \n+     linux-unwind.h frob_update_context.  */\n   if (rs6000_save_toc_in_prologue_p ())\n     {\n       rtx addr = gen_rtx_PLUS (Pmode, sp_reg_rtx, GEN_INT (5 * reg_size));\n@@ -20170,7 +20170,7 @@ rs6000_emit_epilogue (int sibcall)\n   int use_backchain_to_restore_sp;\n   int restore_lr;\n   int strategy;\n-  int sp_offset = 0;\n+  int frame_off = 0;\n   rtx sp_reg_rtx = gen_rtx_REG (Pmode, 1);\n   rtx frame_reg_rtx = sp_reg_rtx;\n   rtx cfa_restores = NULL_RTX;\n@@ -20290,14 +20290,14 @@ rs6000_emit_epilogue (int sibcall)\n \t}\n       for (i = 0; info->first_fp_reg_save + i <= 63; i++)\n \t{\n- \t  rtx reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t   ? DFmode : SFmode), \n- \t\t\t         info->first_fp_reg_save + i);\n+\t  rtx reg = gen_rtx_REG ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+\t\t\t\t  ? DFmode : SFmode),\n+\t\t\t\t info->first_fp_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n \t\t\t\t\t    + 8 * i));\n- \t  rtx mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t     ? DFmode : SFmode), addr);\n+\t  rtx mem = gen_frame_mem ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+\t\t\t\t    ? DFmode : SFmode), addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, reg, mem);\n \t  if (flag_shrink_wrap)\n@@ -20324,9 +20324,9 @@ rs6000_emit_epilogue (int sibcall)\n       return;\n     }\n \n-  /* frame_reg_rtx + sp_offset points to the top of this stack frame.  */\n+  /* frame_reg_rtx + frame_off points to the top of this stack frame.  */\n   if (info->push_p)\n-    sp_offset = info->total_size;\n+    frame_off = info->total_size;\n \n   /* Restore AltiVec registers if we must do so before adjusting the\n      stack.  */\n@@ -20343,7 +20343,7 @@ rs6000_emit_epilogue (int sibcall)\n \t  frame_reg_rtx = gen_rtx_REG (Pmode, 11);\n \t  emit_move_insn (frame_reg_rtx,\n \t\t\t  gen_rtx_MEM (Pmode, sp_reg_rtx));\n-\t  sp_offset = 0;\n+\t  frame_off = 0;\n \t}\n       else if (frame_pointer_needed)\n \tframe_reg_rtx = hard_frame_pointer_rtx;\n@@ -20356,7 +20356,7 @@ rs6000_emit_epilogue (int sibcall)\n \t    areg = gen_rtx_REG (Pmode, 0);\n \t    emit_move_insn\n \t      (areg, GEN_INT (info->altivec_save_offset\n-\t\t\t      + sp_offset\n+\t\t\t      + frame_off\n \t\t\t      + 16 * (i - info->first_altivec_reg_save)));\n \n \t    /* AltiVec addressing mode is [reg+reg].  */\n@@ -20391,14 +20391,14 @@ rs6000_emit_epilogue (int sibcall)\n \t      frame_reg_rtx = gen_rtx_REG (Pmode, 11);\n \t      emit_move_insn (frame_reg_rtx,\n \t\t\t      gen_rtx_MEM (Pmode, sp_reg_rtx));\n-\t      sp_offset = 0;\n+\t      frame_off = 0;\n \t    }\n \t  else if (frame_pointer_needed)\n \t    frame_reg_rtx = hard_frame_pointer_rtx;\n \t}\n \n       addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t   GEN_INT (info->vrsave_save_offset + sp_offset));\n+\t\t\t   GEN_INT (info->vrsave_save_offset + frame_off));\n       mem = gen_frame_mem (SImode, addr);\n       reg = gen_rtx_REG (SImode, 12);\n       emit_move_insn (reg, mem);\n@@ -20420,7 +20420,7 @@ rs6000_emit_epilogue (int sibcall)\n \n \t  insn = emit_move_insn (frame_reg_rtx,\n \t\t\t\t gen_rtx_MEM (Pmode, sp_reg_rtx));\n-\t  sp_offset = 0;\n+\t  frame_off = 0;\n \t}\n       else if (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n \t       && DEFAULT_ABI == ABI_V4)\n@@ -20446,7 +20446,7 @@ rs6000_emit_epilogue (int sibcall)\n \n       insn = emit_insn (gen_add3_insn (frame_reg_rtx, hard_frame_pointer_rtx,\n \t\t\t\t       GEN_INT (info->total_size)));\n-      sp_offset = 0;\n+      frame_off = 0;\n     }\n   else if (info->push_p\n \t   && DEFAULT_ABI != ABI_V4\n@@ -20458,7 +20458,7 @@ rs6000_emit_epilogue (int sibcall)\n \trs6000_emit_stack_tie (frame_reg_rtx, false);\n       insn = emit_insn (gen_add3_insn (sp_reg_rtx, sp_reg_rtx,\n \t\t\t\t       GEN_INT (info->total_size)));\n-      sp_offset = 0;\n+      frame_off = 0;\n     }\n   if (insn && frame_reg_rtx == sp_reg_rtx)\n     {\n@@ -20488,7 +20488,7 @@ rs6000_emit_epilogue (int sibcall)\n \t    areg = gen_rtx_REG (Pmode, 0);\n \t    emit_move_insn\n \t      (areg, GEN_INT (info->altivec_save_offset\n-\t\t\t      + sp_offset\n+\t\t\t      + frame_off\n \t\t\t      + 16 * (i - info->first_altivec_reg_save)));\n \n \t    /* AltiVec addressing mode is [reg+reg].  */\n@@ -20514,7 +20514,7 @@ rs6000_emit_epilogue (int sibcall)\n       rtx addr, mem, reg;\n \n       addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t   GEN_INT (info->vrsave_save_offset + sp_offset));\n+\t\t\t   GEN_INT (info->vrsave_save_offset + frame_off));\n       mem = gen_frame_mem (SImode, addr);\n       reg = gen_rtx_REG (SImode, 12);\n       emit_move_insn (reg, mem);\n@@ -20527,7 +20527,7 @@ rs6000_emit_epilogue (int sibcall)\n   if (restore_lr && restoring_GPRs_inline)\n     {\n       rtx mem = gen_frame_mem_offset (Pmode, frame_reg_rtx,\n-\t\t\t\t      info->lr_save_offset + sp_offset);\n+\t\t\t\t      info->lr_save_offset + frame_off);\n \n       emit_move_insn (gen_rtx_REG (Pmode, 0), mem);\n     }\n@@ -20536,7 +20536,7 @@ rs6000_emit_epilogue (int sibcall)\n   if (info->cr_save_p)\n     {\n       rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t       GEN_INT (info->cr_save_offset + sp_offset));\n+\t\t\t       GEN_INT (info->cr_save_offset + frame_off));\n       rtx mem = gen_frame_mem (SImode, addr);\n \n       cr_save_reg = gen_rtx_REG (SImode,\n@@ -20560,7 +20560,7 @@ rs6000_emit_epilogue (int sibcall)\n       if (TARGET_AIX)\n \t{\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t\t   GEN_INT (sp_offset + 5 * reg_size));\n+\t\t\t\t   GEN_INT (frame_off + 5 * reg_size));\n \t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  emit_move_insn (gen_rtx_REG (reg_mode, 2), mem);\n@@ -20575,7 +20575,7 @@ rs6000_emit_epilogue (int sibcall)\n \t    break;\n \n \t  mem = gen_frame_mem_offset (reg_mode, frame_reg_rtx,\n-\t\t\t\t      info->ehrd_offset + sp_offset\n+\t\t\t\t      info->ehrd_offset + frame_off\n \t\t\t\t      + reg_size * (int) i);\n \n \t  emit_move_insn (gen_rtx_REG (reg_mode, regno), mem);\n@@ -20592,14 +20592,14 @@ rs6000_emit_epilogue (int sibcall)\n \t to be saved with an offset from frame_reg_rtx that fits in\n \t the small const field for SPE memory instructions.  */\n       int spe_regs_addressable\n-\t= (SPE_CONST_OFFSET_OK (info->spe_gp_save_offset + sp_offset\n+\t= (SPE_CONST_OFFSET_OK (info->spe_gp_save_offset + frame_off\n \t\t\t\t+ reg_size * (32 - info->first_gp_reg_save - 1))\n \t   && restoring_GPRs_inline);\n       int spe_offset;\n       int ool_adjust = 0;\n \n       if (spe_regs_addressable)\n-\tspe_offset = info->spe_gp_save_offset + sp_offset;\n+\tspe_offset = info->spe_gp_save_offset + frame_off;\n       else\n \t{\n \t  rtx old_frame_reg_rtx = frame_reg_rtx;\n@@ -20614,11 +20614,11 @@ rs6000_emit_epilogue (int sibcall)\n \t  frame_reg_rtx = gen_rtx_REG (Pmode, 11);\n \t  emit_insn (gen_addsi3 (frame_reg_rtx, old_frame_reg_rtx,\n \t\t\t\t GEN_INT (info->spe_gp_save_offset\n-\t\t\t\t\t  + sp_offset\n+\t\t\t\t\t  + frame_off\n \t\t\t\t\t  - ool_adjust)));\n-\t  /* Keep the invariant that frame_reg_rtx + sp_offset points\n+\t  /* Keep the invariant that frame_reg_rtx + frame_off points\n \t     at the top of the stack frame.  */\n-\t  sp_offset = -info->spe_gp_save_offset + ool_adjust;\n+\t  frame_off = -info->spe_gp_save_offset + ool_adjust;\n \n \t  spe_offset = 0;\n \t}\n@@ -20657,7 +20657,7 @@ rs6000_emit_epilogue (int sibcall)\n       if (can_use_exit)\n \t{\n \t  rs6000_emit_stack_reset (info, sp_reg_rtx, frame_reg_rtx,\n-\t\t\t\t   sp_offset, can_use_exit);\n+\t\t\t\t   frame_off, can_use_exit);\n \t  if (DEFAULT_ABI == ABI_DARWIN)\n \t    /* we only need a copy, no fprs were saved.  */\n \t    emit_move_insn (gen_rtx_REG (Pmode, 11), frame_reg_rtx);\n@@ -20670,9 +20670,9 @@ rs6000_emit_epilogue (int sibcall)\n \t  rtx src_reg = gen_rtx_REG (Pmode, DEFAULT_ABI == ABI_AIX ? 12 : 11);\n \n \t  emit_insn (gen_add3_insn (src_reg, frame_reg_rtx,\n-\t\t\t\t    GEN_INT (sp_offset - info->fp_size)));\n+\t\t\t\t    GEN_INT (frame_off - info->fp_size)));\n \t  if (REGNO (frame_reg_rtx) == REGNO (src_reg))\n-\t    sp_offset = info->fp_size;\n+\t    frame_off = info->fp_size;\n \t}\n \n       rs6000_emit_savres_rtx (info, frame_reg_rtx,\n@@ -20688,7 +20688,7 @@ rs6000_emit_epilogue (int sibcall)\n \t{\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->gp_save_offset\n-\t\t\t\t\t    + sp_offset\n+\t\t\t\t\t    + frame_off\n \t\t\t\t\t    + reg_size * i));\n \t  rtx mem = gen_frame_mem (reg_mode, addr);\n \t  rtx reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n@@ -20700,17 +20700,17 @@ rs6000_emit_epilogue (int sibcall)\n   else\n     {\n       for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n-        if (rs6000_reg_live_or_pic_offset_p (info->first_gp_reg_save + i))\n+\tif (rs6000_reg_live_or_pic_offset_p (info->first_gp_reg_save + i))\n \t  {\n-            rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-                                     GEN_INT (info->gp_save_offset\n-                                              + sp_offset\n-                                              + reg_size * i));\n-            rtx mem = gen_frame_mem (reg_mode, addr);\n+\t    rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n+\t\t\t\t     GEN_INT (info->gp_save_offset\n+\t\t\t\t\t      + frame_off\n+\t\t\t\t\t      + reg_size * i));\n+\t    rtx mem = gen_frame_mem (reg_mode, addr);\n \t    rtx reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n \n \t    emit_move_insn (reg, mem);\n-          }\n+\t  }\n     }\n \n   if (DEFAULT_ABI == ABI_V4 || flag_shrink_wrap)\n@@ -20725,7 +20725,7 @@ rs6000_emit_epilogue (int sibcall)\n \t{\n \t  insn = get_last_insn ();\n \t  add_reg_note (insn, REG_CFA_DEF_CFA,\n-\t\t\tplus_constant (frame_reg_rtx, sp_offset));\n+\t\t\tplus_constant (frame_reg_rtx, frame_off));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n \n@@ -20776,7 +20776,7 @@ rs6000_emit_epilogue (int sibcall)\n   if (restore_lr && !restoring_GPRs_inline)\n     {\n       rtx mem = gen_frame_mem_offset (Pmode, frame_reg_rtx,\n-\t\t\t\t     info->lr_save_offset + sp_offset);\n+\t\t\t\t      info->lr_save_offset + frame_off);\n \n       emit_move_insn (gen_rtx_REG (Pmode, 0), mem);\n       emit_move_insn (gen_rtx_REG (Pmode, LR_REGNO),\n@@ -20792,15 +20792,15 @@ rs6000_emit_epilogue (int sibcall)\n \t  rtx addr, mem, reg;\n \t  addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->fp_save_offset\n-\t\t\t\t\t+ sp_offset\n+\t\t\t\t\t+ frame_off\n \t\t\t\t\t+ 8 * i));\n-\t  mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t ? DFmode : SFmode), addr);\n-\t  reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t       ? DFmode : SFmode),\n+\t  mem = gen_frame_mem ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+\t\t\t\t? DFmode : SFmode), addr);\n+\t  reg = gen_rtx_REG ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+\t\t\t      ? DFmode : SFmode),\n \t\t\t     info->first_fp_reg_save + i);\n \n- \t  emit_move_insn (reg, mem);\n+\t  emit_move_insn (reg, mem);\n \t  if (DEFAULT_ABI == ABI_V4 || flag_shrink_wrap)\n \t    cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg, cfa_restores);\n \t}\n@@ -20812,7 +20812,7 @@ rs6000_emit_epilogue (int sibcall)\n   /* If this is V.4, unwind the stack pointer after all of the loads\n      have been done.  */\n   insn = rs6000_emit_stack_reset (info, sp_reg_rtx, frame_reg_rtx,\n-\t\t\t\t  sp_offset, !restoring_FPRs_inline);\n+\t\t\t\t  frame_off, !restoring_FPRs_inline);\n   if (insn)\n     {\n       if (cfa_restores)"}]}