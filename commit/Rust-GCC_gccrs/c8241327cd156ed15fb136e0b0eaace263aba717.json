{"sha": "c8241327cd156ed15fb136e0b0eaace263aba717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgyNDEzMjdjZDE1NmVkMTVmYjEzNmUwYjBlYWFjZTI2M2FiYTcxNw==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2019-10-02T14:26:09Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@gcc.gnu.org", "date": "2019-10-02T14:26:09Z"}, "message": "rs6000-protos.h (expand_block_move): Change prototype.\n\n2019-10-02  Aaron Sawdey <acsawdey@linux.ibm.com>\n\n\t* config/rs6000/rs6000-protos.h (expand_block_move): Change prototype.\n\t* config/rs6000/rs6000-string.c (expand_block_move): Add\n\tmight_overlap parm.\n\t* config/rs6000/rs6000.md (movmemsi): Add new pattern.\n\t(cpymemsi): Add might_overlap parm to expand_block_move() call.\n\nFrom-SVN: r276462", "tree": {"sha": "077e7990fb39b4ec5c3e90f8be904e43270bc957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/077e7990fb39b4ec5c3e90f8be904e43270bc957"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8241327cd156ed15fb136e0b0eaace263aba717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8241327cd156ed15fb136e0b0eaace263aba717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8241327cd156ed15fb136e0b0eaace263aba717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8241327cd156ed15fb136e0b0eaace263aba717/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03a9b90aa6df28dde083efd17e8b7ae76b943fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a9b90aa6df28dde083efd17e8b7ae76b943fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a9b90aa6df28dde083efd17e8b7ae76b943fe7"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "5dc53312b671db3021bb76d8f757b77fd0700419", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8241327cd156ed15fb136e0b0eaace263aba717", "patch": "@@ -1,3 +1,11 @@\n+2019-10-02  Aaron Sawdey <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-protos.h (expand_block_move): Change prototype.\n+\t* config/rs6000/rs6000-string.c (expand_block_move): Add\n+\tmight_overlap parm.\n+\t* config/rs6000/rs6000.md (movmemsi): Add new pattern.\n+\t(cpymemsi): Add might_overlap parm to expand_block_move() call.\n+\n 2019-10-02  Aaron Sawdey <acsawdey@linux.ibm.com>\n \n \t* builtins.c (expand_builtin_memory_copy_args): Add might_overlap parm."}, {"sha": "08dd88c3e4d6ca40a33d82cc15bc97a07dd8d9dd", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=c8241327cd156ed15fb136e0b0eaace263aba717", "patch": "@@ -69,7 +69,7 @@ extern void rs6000_generate_float2_code (bool, rtx, rtx, rtx);\n extern void rs6000_generate_float2_double_code (rtx, rtx, rtx);\n extern void rs6000_generate_vsigned2_code (bool, rtx, rtx, rtx);\n extern int expand_block_clear (rtx[]);\n-extern int expand_block_move (rtx[]);\n+extern int expand_block_move (rtx[], bool);\n extern bool expand_block_compare (rtx[]);\n extern bool expand_strn_compare (rtx[], int);\n extern bool rs6000_is_valid_mask (rtx, int *, int *, machine_mode);"}, {"sha": "3bc359e33cc62e38879f34a6e9c4c6cfd87c47e2", "filename": "gcc/config/rs6000/rs6000-string.c", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-string.c?ref=c8241327cd156ed15fb136e0b0eaace263aba717", "patch": "@@ -2719,7 +2719,7 @@ gen_lvx_v4si_move (rtx dest, rtx src)\n #define MAX_MOVE_REG 4\n \n int\n-expand_block_move (rtx operands[])\n+expand_block_move (rtx operands[], bool might_overlap)\n {\n   rtx orig_dest = operands[0];\n   rtx orig_src\t= operands[1];\n@@ -2730,6 +2730,7 @@ expand_block_move (rtx operands[])\n   int bytes;\n   int offset;\n   int move_bytes;\n+  rtx loads[MAX_MOVE_REG];\n   rtx stores[MAX_MOVE_REG];\n   int num_reg = 0;\n \n@@ -2817,47 +2818,35 @@ expand_block_move (rtx operands[])\n \t  gen_func.mov = gen_movqi;\n \t}\n \n+      /* Mode is always set to something other than BLKmode by one of the \n+\t cases of the if statement above.  */\n+      gcc_assert (mode != BLKmode);\n+\n       src = adjust_address (orig_src, mode, offset);\n       dest = adjust_address (orig_dest, mode, offset);\n \n-      if (mode != BLKmode)\n-\t{\n-\t  rtx tmp_reg = gen_reg_rtx (mode);\n+      rtx tmp_reg = gen_reg_rtx (mode);\n+      \n+      loads[num_reg]    = (*gen_func.mov) (tmp_reg, src);\n+      stores[num_reg++] = (*gen_func.mov) (dest, tmp_reg);\n \n-\t  emit_insn ((*gen_func.mov) (tmp_reg, src));\n-\t  stores[num_reg++] = (*gen_func.mov) (dest, tmp_reg);\n-\t}\n+      /* If we didn't succeed in doing it in one pass, we can't do it in the \n+\t might_overlap case.  Bail out and return failure.  */\n+      if (might_overlap && num_reg >= MAX_MOVE_REG\n+\t  && bytes > move_bytes)\n+\treturn 0;\n \n-      if (mode == BLKmode || num_reg >= MAX_MOVE_REG || bytes == move_bytes)\n+      /* Emit loads and stores saved up.  */\n+      if (num_reg >= MAX_MOVE_REG || bytes == move_bytes)\n \t{\n \t  int i;\n+\t  for (i = 0; i < num_reg; i++)\n+\t    emit_insn (loads[i]);\n \t  for (i = 0; i < num_reg; i++)\n \t    emit_insn (stores[i]);\n \t  num_reg = 0;\n \t}\n-\n-      if (mode == BLKmode)\n-\t{\n-\t  /* Move the address into scratch registers.  The movmemsi\n-\t     patterns require zero offset.  */\n-\t  if (!REG_P (XEXP (src, 0)))\n-\t    {\n-\t      rtx src_reg = copy_addr_to_reg (XEXP (src, 0));\n-\t      src = replace_equiv_address (src, src_reg);\n-\t    }\n-\t  set_mem_size (src, move_bytes);\n-\n-\t  if (!REG_P (XEXP (dest, 0)))\n-\t    {\n-\t      rtx dest_reg = copy_addr_to_reg (XEXP (dest, 0));\n-\t      dest = replace_equiv_address (dest, dest_reg);\n-\t    }\n-\t  set_mem_size (dest, move_bytes);\n-\n-\t  emit_insn ((*gen_func.movmemsi) (dest, src,\n-\t\t\t\t\t   GEN_INT (move_bytes & 31),\n-\t\t\t\t\t   align_rtx));\n-\t}\n+\t\n     }\n \n   return 1;"}, {"sha": "2dca269744f77c18d11687e9751c8e3903c4b369", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8241327cd156ed15fb136e0b0eaace263aba717/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c8241327cd156ed15fb136e0b0eaace263aba717", "patch": "@@ -9107,7 +9107,7 @@\n     FAIL;\n })\n \n-;; String/block move insn.\n+;; String/block copy insn (source and destination must not overlap).\n ;; Argument 0 is the destination\n ;; Argument 1 is the source\n ;; Argument 2 is the length\n@@ -9120,11 +9120,31 @@\n \t      (use (match_operand:SI 3 \"\"))])]\n   \"\"\n {\n-  if (expand_block_move (operands))\n+  if (expand_block_move (operands, false))\n     DONE;\n   else\n     FAIL;\n })\n+\n+;; String/block move insn (source and destination may overlap).\n+;; Argument 0 is the destination\n+;; Argument 1 is the source\n+;; Argument 2 is the length\n+;; Argument 3 is the alignment\n+\n+(define_expand \"movmemsi\"\n+  [(parallel [(set (match_operand:BLK 0 \"\")\n+\t\t   (match_operand:BLK 1 \"\"))\n+\t      (use (match_operand:SI 2 \"\"))\n+\t      (use (match_operand:SI 3 \"\"))])]\n+  \"\"\n+{\n+  if (expand_block_move (operands, true))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n \f\n ;; Define insns that do load or store with update.  Some of these we can\n ;; get by using pre-decrement or pre-increment, but the hardware can also"}]}