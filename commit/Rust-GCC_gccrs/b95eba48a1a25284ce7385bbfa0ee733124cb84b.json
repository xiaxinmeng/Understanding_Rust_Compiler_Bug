{"sha": "b95eba48a1a25284ce7385bbfa0ee733124cb84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1ZWJhNDhhMWEyNTI4NGNlNzM4NWJiZmEwZWU3MzMxMjRjYjg0Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-22T19:00:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-27T20:13:32Z"}, "message": "c++: Name as_base type\n\nThe as-base type never got a name.  For modules I needed to give it a\nname to serialize properly, and it's useful when debugging the\ncompiler, so we may as well have it on trunk.  There's also a bug\nwhere its fields can have NSDMIs from the main class.  This happens to\nbe silent on trunk, but can be a GC leak where we retain a deferred\nparse node there. (On modules it blows up, because we're not prepared\nto serialize deferred parse nodes, as they should never survive\nparsing.\n\n\tgcc/cp/\n\t* cp-tree.h (enum cp_tree_index): Add CPTI_AS_BASE_IDENTIFIER.\n\t(as_base_identifier): Define.\n\t* decl.c (initialize_predifined_identifiers): Initialize as_base\n\tidentifier.\n\t* class.c (layout_class_type): Name the as-base type.  Zap\n\tNSDMI its fields may have.", "tree": {"sha": "4c1b9723d3886d37b903f94928dc2ac40c7ba65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c1b9723d3886d37b903f94928dc2ac40c7ba65e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b95eba48a1a25284ce7385bbfa0ee733124cb84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95eba48a1a25284ce7385bbfa0ee733124cb84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b95eba48a1a25284ce7385bbfa0ee733124cb84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95eba48a1a25284ce7385bbfa0ee733124cb84b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "ba96113bc8856acd258677a0e649be4e7c3d8892", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95eba48a1a25284ce7385bbfa0ee733124cb84b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95eba48a1a25284ce7385bbfa0ee733124cb84b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b95eba48a1a25284ce7385bbfa0ee733124cb84b", "patch": "@@ -6715,6 +6715,10 @@ layout_class_type (tree t, tree *virtuals_p)\n       /* T needs a different layout as a base (eliding virtual bases\n \t or whatever).  Create that version.  */\n       tree base_t = make_node (TREE_CODE (t));\n+      tree base_d = create_implicit_typedef (as_base_identifier, base_t);\n+\n+      TYPE_CONTEXT (base_t) = t;\n+      DECL_CONTEXT (base_d) = t;\n \n       /* If the ABI version is not at least two, and the last\n \t field was a bit-field, RLI may not be on a byte\n@@ -6751,6 +6755,9 @@ layout_class_type (tree t, tree *virtuals_p)\n \tif (TREE_CODE (field) == FIELD_DECL)\n \t  {\n \t    *next_field = copy_node (field);\n+\t    /* Zap any NSDMI, it's not needed and might be a deferred\n+\t       parse.  */\n+\t    DECL_INITIAL (*next_field) = NULL_TREE;\n \t    DECL_CONTEXT (*next_field) = base_t;\n \t    next_field = &DECL_CHAIN (*next_field);\n \t  }\n@@ -6760,8 +6767,6 @@ layout_class_type (tree t, tree *virtuals_p)\n \t needs a mode.  */\n       compute_record_mode (base_t);\n \n-      TYPE_CONTEXT (base_t) = t;\n-\n       /* Record the base version of the type.  */\n       CLASSTYPE_AS_BASE (t) = base_t;\n     }"}, {"sha": "2377fc052bbe31a2c58c8bd83669ee1e34397ad2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95eba48a1a25284ce7385bbfa0ee733124cb84b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95eba48a1a25284ce7385bbfa0ee733124cb84b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b95eba48a1a25284ce7385bbfa0ee733124cb84b", "patch": "@@ -148,6 +148,7 @@ enum cp_tree_index\n     CPTI_DELTA_IDENTIFIER,\n     CPTI_IN_CHARGE_IDENTIFIER,\n     CPTI_VTT_PARM_IDENTIFIER,\n+    CPTI_AS_BASE_IDENTIFIER,\n     CPTI_THIS_IDENTIFIER,\n     CPTI_PFN_IDENTIFIER,\n     CPTI_VPTR_IDENTIFIER,\n@@ -289,6 +290,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n /* The name of the parameter that contains a pointer to the VTT to use\n    for this subobject constructor or destructor.  */\n #define vtt_parm_identifier\t\tcp_global_trees[CPTI_VTT_PARM_IDENTIFIER]\n+#define as_base_identifier\t\tcp_global_trees[CPTI_AS_BASE_IDENTIFIER]\n #define this_identifier\t\t\tcp_global_trees[CPTI_THIS_IDENTIFIER]\n #define pfn_identifier\t\t\tcp_global_trees[CPTI_PFN_IDENTIFIER]\n #define vptr_identifier\t\t\tcp_global_trees[CPTI_VPTR_IDENTIFIER]"}, {"sha": "385b1f3a0c4ee86a4b68f8fd4402e06ca2a0e963", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95eba48a1a25284ce7385bbfa0ee733124cb84b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95eba48a1a25284ce7385bbfa0ee733124cb84b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b95eba48a1a25284ce7385bbfa0ee733124cb84b", "patch": "@@ -4202,6 +4202,7 @@ initialize_predefined_identifiers (void)\n     {\"__dt_del \", &deleting_dtor_identifier, cik_dtor},\n     {\"__conv_op \", &conv_op_identifier, cik_conv_op},\n     {\"__in_chrg\", &in_charge_identifier, cik_normal},\n+    {\"__as_base \", &as_base_identifier, cik_normal},\n     {\"this\", &this_identifier, cik_normal},\n     {\"__delta\", &delta_identifier, cik_normal},\n     {\"__pfn\", &pfn_identifier, cik_normal},"}]}