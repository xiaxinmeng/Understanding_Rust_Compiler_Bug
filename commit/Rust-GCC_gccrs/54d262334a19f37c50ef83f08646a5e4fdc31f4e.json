{"sha": "54d262334a19f37c50ef83f08646a5e4fdc31f4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkMjYyMzM0YTE5ZjM3YzUwZWY4M2YwODY0NmE1ZTRmZGMzMWY0ZQ==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:43:08Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:43:08Z"}, "message": "\ufffd\nIn gcc/:\n\t* i386.h (RTX_COSTS): Insert braces around nested if.\n\t(ADDITIONAL_REGISTER_NAMES): Insert braces around structured\n\telements.\n\t* gcc.c (default_compilers): Properly put brackets around array elements in\n\tinitializer.\n\t* getopt.c (_getopt_internal): Add explicit braces around nested if;\n\treformatted.\n\t* reg-stack.c (record_asm_reg_life): Add explicit braces around nested if's.\n\t(record_reg_life_pat): Add explicit parens around && and || in expression.\n\t(stack_reg_life_analysis): Add parens around assignment used as expression.\n\t(convert_regs): Likewise.\nIn gcc/cp/:\n\t* lang-specs.h: Properly put brackets around array elements in initializer.\n\t* typeck.c (build_binary_op_nodefault): Correctly place parens around\n\t&& and || in expression.\nIn gcc/f/:\n\t* lang-specs.h: Properly put brackets around array elements in initializer.\n\nFrom-SVN: r18499", "tree": {"sha": "729f2e83597408b8a01c6df6bf9cb1474f0e1d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/729f2e83597408b8a01c6df6bf9cb1474f0e1d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54d262334a19f37c50ef83f08646a5e4fdc31f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d262334a19f37c50ef83f08646a5e4fdc31f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d262334a19f37c50ef83f08646a5e4fdc31f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d262334a19f37c50ef83f08646a5e4fdc31f4e/comments", "author": null, "committer": null, "parents": [{"sha": "56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c5d8bf107a7317b7a8542875cfd2b6b84590e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c5d8bf107a7317b7a8542875cfd2b6b84590e1"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "53c08b03b197df23c5410e5d64cea18de6274eca", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d262334a19f37c50ef83f08646a5e4fdc31f4e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d262334a19f37c50ef83f08646a5e4fdc31f4e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=54d262334a19f37c50ef83f08646a5e4fdc31f4e", "patch": "@@ -1924,10 +1924,11 @@ while (0)\n     if (GET_MODE (XEXP (X, 0)) == DImode)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\\\n-\t  if (INTVAL (XEXP (X, 1)) > 32)\t\t\t\t\t\\\n-\t    return COSTS_N_INSNS(ix86_cost->shift_const + 2);\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    if (INTVAL (XEXP (X, 1)) > 32)\t\t\t\t\\\n+\t      return COSTS_N_INSNS(ix86_cost->shift_const + 2);\t\t\\\n \t    return COSTS_N_INSNS(ix86_cost->shift_const * 2);\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n \treturn ((GET_CODE (XEXP (X, 1)) == AND\t\t\t\t\\\n \t\t ? COSTS_N_INSNS(ix86_cost->shift_var * 2)\t\t\\\n \t\t : COSTS_N_INSNS(ix86_cost->shift_var * 6 + 2))\t\t\\\n@@ -2332,10 +2333,10 @@ extern struct rtx_def *(*i386_compare_gen)(), *(*i386_compare_gen_eq)();\n /* Table of additional register names to use in user input.  */\n \n #define ADDITIONAL_REGISTER_NAMES \\\n-{ \"eax\", 0, \"edx\", 1, \"ecx\", 2, \"ebx\", 3,\t\\\n-  \"esi\", 4, \"edi\", 5, \"ebp\", 6, \"esp\", 7,\t\\\n-  \"al\", 0, \"dl\", 1, \"cl\", 2, \"bl\", 3,\t\t\\\n-  \"ah\", 0, \"dh\", 1, \"ch\", 2, \"bh\", 3 }\n+{ { \"eax\", 0 }, { \"edx\", 1 }, { \"ecx\", 2 }, { \"ebx\", 3 },\t\\\n+  { \"esi\", 4 }, { \"edi\", 5 }, { \"ebp\", 6 }, { \"esp\", 7 },\t\\\n+  { \"al\", 0 }, { \"dl\", 1 }, { \"cl\", 2 }, { \"bl\", 3 },\t\t\\\n+  { \"ah\", 0 }, { \"dh\", 1 }, { \"ch\", 2 }, { \"bh\", 3 } }\n \n /* Note we are omitting these since currently I don't know how\n to get gcc to use these, since they want the same but different"}]}