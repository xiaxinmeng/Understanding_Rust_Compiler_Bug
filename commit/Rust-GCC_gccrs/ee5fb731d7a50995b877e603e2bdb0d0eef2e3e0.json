{"sha": "ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1ZmI3MzFkN2E1MDk5NWI4NzdlNjAzZTJiZGIwZDBlZWYyZTNlMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:26:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:26:07Z"}, "message": "(INLINE_REGNO_{RTX,POINTER_FLAG,POINTER_ALIGN}): New macros.\n\n(gen_inline_header): Add three new parms.\n\nFrom-SVN: r10874", "tree": {"sha": "cf3b85aeae3a51912d2b73bf0c8b53b16dc08f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf3b85aeae3a51912d2b73bf0c8b53b16dc08f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0/comments", "author": null, "committer": null, "parents": [{"sha": "8c87f107ff50fd839521ae057ee4f09d1f87feba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c87f107ff50fd839521ae057ee4f09d1f87feba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c87f107ff50fd839521ae057ee4f09d1f87feba"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "0f1bed9abd976aaf0bab05ed7b3ac1bca882be8e", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ee5fb731d7a50995b877e603e2bdb0d0eef2e3e0", "patch": "@@ -604,6 +604,8 @@ extern char *note_insn_name[];\n     for the function arguments.\n    ORIGINAL_DECL_INITIAL is a pointer to the original DECL_INITIAL for the\n     function.\n+   INLINE_REGNO_REG_RTX, INLINE_REGNO_POINTER_FLAG, and\n+    INLINE_REGNO_POINTER_ALIGN are pointers to the corresponding arrays.\n \n    We want this to lay down like an INSN.  The PREV_INSN field\n    is always NULL.  The NEXT_INSN field always points to the\n@@ -623,6 +625,9 @@ extern char *note_insn_name[];\n #define OUTGOING_ARGS_SIZE(RTX) ((RTX)->fld[13].rtint)\n #define ORIGINAL_ARG_VECTOR(RTX) ((RTX)->fld[14].rtvec)\n #define ORIGINAL_DECL_INITIAL(RTX) ((RTX)->fld[15].rtx)\n+#define INLINE_REGNO_REG_RTX(RTX) ((RTX)->fld[16].rtvec)\n+#define INLINE_REGNO_POINTER_FLAG(RTX) ((RTX)->fld[16].rtstr)\n+#define INLINE_REGNO_POINTER_ALIGN(RTX) ((RTX)->fld[17].rtstr)\n \n /* In FUNCTION_FLAGS we save some variables computed when emitting the code\n    for the function and which must be `or'ed into the current flag values when\n@@ -720,7 +725,8 @@ extern rtx gen_reg_rtx\t\t\tPROTO((enum machine_mode));\n extern rtx gen_label_rtx\t\tPROTO((void));\n extern rtx gen_inline_header_rtx\tPROTO((rtx, rtx, int, int, int, int,\n \t\t\t\t\t       int, int, rtx, rtx, int, int,\n-\t\t\t\t\t       rtvec, rtx));\n+\t\t\t\t\t       rtvec, rtx,\n+\t\t\t\t\t       rtvec, char *, char *));\n extern rtx gen_lowpart_common\t\tPROTO((enum machine_mode, rtx));\n extern rtx gen_lowpart\t\t\tPROTO((enum machine_mode, rtx));\n extern rtx gen_lowpart_if_possible\tPROTO((enum machine_mode, rtx));"}]}