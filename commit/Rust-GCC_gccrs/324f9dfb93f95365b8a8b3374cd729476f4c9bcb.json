{"sha": "324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0ZjlkZmI5M2Y5NTM2NWI4YThiMzM3NGNkNzI5NDc2ZjRjOWJjYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-05-31T08:42:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-05-31T08:42:32Z"}, "message": "call.c, [...]: Fix comment formatting.\n\n\t* call.c, class.c, cp-tree.def, decl2.c, name-lookup.c, pt.c,\n\ttypeck.c: Fix comment formatting.\n\nFrom-SVN: r82476", "tree": {"sha": "246e00ed65a681768dc99c00e62d426524c3acf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/246e00ed65a681768dc99c00e62d426524c3acf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/comments", "author": null, "committer": null, "parents": [{"sha": "1999435c8a37723b3da50cdb9a1bb594d1cc280c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1999435c8a37723b3da50cdb9a1bb594d1cc280c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1999435c8a37723b3da50cdb9a1bb594d1cc280c"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "5aa85f3ad55841f39456b91574e0f9016c0c7702", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -1,3 +1,8 @@\n+2004-05-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* call.c, class.c, cp-tree.def, decl2.c, name-lookup.c, pt.c,\n+\ttypeck.c: Fix comment formatting.\n+\n 2004-05-30  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* cp-lang.c (cp_expand_decl): Remove."}, {"sha": "d65f0eeb23adb46ed223a079e01f26a596f7e6c5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -3174,7 +3174,7 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)\n \n          We must avoid calling force_rvalue for expressions of type\n \t \"void\" because it will complain that their value is being\n-\t used.   */\n+\t used.  */\n       if (TREE_CODE (arg2) == THROW_EXPR \n \t  && TREE_CODE (arg3) != THROW_EXPR)\n \t{\n@@ -6470,7 +6470,7 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n \t     TARGET_EXPR here.  It is important that EXPR be a\n \t     TARGET_EXPR below since otherwise the INIT_EXPR will\n \t     attempt to make a bitwise copy of EXPR to initialize\n-\t     VAR. */\n+\t     VAR.  */\n \t  if (TREE_CODE (expr) != TARGET_EXPR)\n \t    expr = get_target_expr (expr);\n \t  /* Create the INIT_EXPR that will initialize the temporary"}, {"sha": "055c68deabfeefa835bf6b1994af19fb8ec4f0a0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -3012,7 +3012,7 @@ check_field_decls (tree t, tree *access_decls,\n \t  /* [class.union]\n \n \t     If a union contains a static data member, or a member of\n-\t     reference type, the program is ill-formed. */\n+\t     reference type, the program is ill-formed.  */\n \t  if (TREE_CODE (x) == VAR_DECL)\n \t    {\n \t      cp_error_at (\"`%D' may not be static because it is a member of a union\", x);"}, {"sha": "3b4c6e6eb5afccae91e7a2ed5aa40b7cf0f28dca", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -103,7 +103,7 @@ DEFTREECODE (ALIAS_DECL, \"alias_decl\", 'd', 0)\n    A BASELINK is an expression; the TREE_TYPE of the BASELINK gives\n    the type of the expression.  This type is either a FUNCTION_TYPE,\n    METHOD_TYPE, or `unknown_type_node' indicating that the function is\n-   overloaded. */\n+   overloaded.  */\n DEFTREECODE (BASELINK, \"baselink\", 'x', 0)\n \n /* Template definition.  The following fields have the specified uses,\n@@ -197,10 +197,10 @@ DEFTREECODE (TYPEOF_TYPE, \"typeof_type\", 't', 0)\n /* A using declaration.  DECL_INITIAL contains the specified scope.  \n    This is not an alias, but is later expanded into multiple aliases.\n    The decl will have a NULL_TYPE iff the scope is a dependent scope,\n-   otherwise it will have a void type. */\n+   otherwise it will have a void type.  */\n DEFTREECODE (USING_DECL, \"using_decl\", 'd', 0)\n \n-/* A using directive. The operand is USING_STMT_NAMESPACE. */     \n+/* A using directive. The operand is USING_STMT_NAMESPACE.  */     \n DEFTREECODE (USING_STMT, \"using_directive\", 'e', 1)\n \n /* An un-parsed default argument.  Looks like an IDENTIFIER_NODE.  */\n@@ -237,7 +237,7 @@ DEFTREECODE (PSEUDO_DTOR_EXPR, \"pseudo_dtor_expr\", 'e', 3)\n    that expression if it appeared in a template argument list.  In\n    that situation, we create a NON_DEPENDENT_EXPR to take the place of\n    the original expression.  The expression is the only operand -- it\n-   is only needed for diagnostics.   */\n+   is only needed for diagnostics.  */\n DEFTREECODE (NON_DEPENDENT_EXPR, \"non_dependent_expr\", 'e', 1)\n \n /* CTOR_INITIALIZER is a placeholder in template code for a call to"}, {"sha": "0b93a5815de2814943ceb54334283e46a1b3343d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -1422,7 +1422,7 @@ comdat_linkage (tree decl)\n    linkonce sections, so that they will be merged with implicit\n    instantiations; otherwise we get duplicate symbol errors.  \n    For Darwin we do not want explicit instantiations to be \n-   linkonce. */\n+   linkonce.  */\n \n void\n maybe_make_one_only (tree decl)"}, {"sha": "195070a8033492ffef490fd7f02b312247a1d591", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -552,7 +552,7 @@ add_decl_to_level (tree decl, cxx_scope *b)\n       /* If appropriate, add decl to separate list of statics.  We\n \t include extern variables because they might turn out to be \n \t static later.  It's OK for this list to contain a few false\n-\t positives. */\n+\t positives.  */\n       if (b->kind == sk_namespace)\n \tif ((TREE_CODE (decl) == VAR_DECL\n \t     && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))"}, {"sha": "09f1e9263f5a929a6074c0868485860eba3b95ed", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -9543,7 +9543,7 @@ template_decl_level (tree decl)\n \n /* Decide whether ARG can be unified with PARM, considering only the\n    cv-qualifiers of each type, given STRICT as documented for unify.\n-   Returns nonzero iff the unification is OK on that basis. */\n+   Returns nonzero iff the unification is OK on that basis.  */\n \n static int\n check_cv_quals_for_unify (int strict, tree arg, tree parm)\n@@ -10792,7 +10792,7 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n        a static archive's TOC.  The problematic case is if we're doing\n        a non-extern explicit instantiation of an extern template: we\n        have to put member functions in the TOC in that case, or we'll\n-       get unresolved symbols at link time. */\n+       get unresolved symbols at link time.  */\n \n     explicitly_instantiate_members =\n       TARGET_EXPLICIT_INSTANTIATIONS_ONE_ONLY"}, {"sha": "b8e48b420d843c1a484aebf1c46e6759a41a6259", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324f9dfb93f95365b8a8b3374cd729476f4c9bcb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=324f9dfb93f95365b8a8b3374cd729476f4c9bcb", "patch": "@@ -1026,7 +1026,7 @@ comptypes (tree t1, tree t2, int strict)\n       if (!comptypes (TYPE_OFFSET_BASETYPE (t1), TYPE_OFFSET_BASETYPE (t2),\n \t\t      strict & ~COMPARE_REDECLARATION))\n \treturn false;\n-      /* Fall through. */\n+      /* Fall through.  */\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n@@ -5994,7 +5994,7 @@ check_return_expr (tree retval)\n      returned expression uses the chosen variable somehow.  And people expect\n      this restriction, anyway.  (jason 2000-11-19)\n \n-     See finish_function and finalize_nrv for the rest of this optimization. */\n+     See finish_function and finalize_nrv for the rest of this optimization.  */\n \n   if (fn_returns_value_p && flag_elide_constructors)\n     {"}]}