{"sha": "62a67c94b776e5d07acd247e8a68f60f2a824024", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhNjdjOTRiNzc2ZTVkMDdhY2QyNDdlOGE2OGY2MGYyYTgyNDAyNA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-05-03T19:14:06Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-05-03T19:14:06Z"}, "message": "flags.h (extra_warnings): Delete.\n\n2009-05-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* flags.h (extra_warnings): Delete.\n\t* toplev.c (process_options): Handle Wuninitialized here.\n\t* opts.c (extra_warnings): Delete.\n\t(set_Wextra): Delete.\n\t(common_handle_option): -Wextra can be handled automatically.\n\t* c-opts.c (c_common_handle_option): Delete obsolete code.\n\t(c_common_post_options): Simplify comment.\n\t* common.opt (W): Add Var.\n\t(Wextra): Add Var.\n\t(Wuninitialized): Initialize to -1.\n\nFrom-SVN: r147080", "tree": {"sha": "6bbb72911fd2765093c16f58a6efa88fc9c6ed0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bbb72911fd2765093c16f58a6efa88fc9c6ed0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62a67c94b776e5d07acd247e8a68f60f2a824024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a67c94b776e5d07acd247e8a68f60f2a824024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a67c94b776e5d07acd247e8a68f60f2a824024", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a67c94b776e5d07acd247e8a68f60f2a824024/comments", "author": null, "committer": null, "parents": [{"sha": "8c7926c4c73c20a4097710c4ffd92d30a839c0fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7926c4c73c20a4097710c4ffd92d30a839c0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7926c4c73c20a4097710c4ffd92d30a839c0fc"}], "stats": {"total": 69, "additions": 23, "deletions": 46}, "files": [{"sha": "6c0bd511220b9bf19c70ee47ed62022c04829b19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62a67c94b776e5d07acd247e8a68f60f2a824024", "patch": "@@ -1,3 +1,16 @@\n+2009-05-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* flags.h (extra_warnings): Delete.\n+\t* toplev.c (process_options): Handle Wuninitialized here.\n+\t* opts.c (extra_warnings): Delete.\n+\t(set_Wextra): Delete.\n+\t(common_handle_option): -Wextra can be handled automatically.\n+\t* c-opts.c (c_common_handle_option): Delete obsolete code.\n+\t(c_common_post_options): Simplify comment.\n+\t* common.opt (W): Add Var.\n+\t(Wextra): Add Var.\n+\t(Wuninitialized): Initialize to -1.\n+\n 2009-05-03  Adam Nemet  <anemet@caviumnetworks.com>\n \t    Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "967be5200a7798dcd4dbe273263e6ce679d7269e", "filename": "gcc/c-opts.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=62a67c94b776e5d07acd247e8a68f60f2a824024", "patch": "@@ -400,11 +400,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \t headers.  */\n       warn_unknown_pragmas = value;\n \n-      /* We save the value of warn_uninitialized, since if they put\n-\t -Wuninitialized on the command line, we need to generate a\n-\t warning about not using it without also specifying -O.  */\n-      if (warn_uninitialized != 1)\n-\twarn_uninitialized = (value ? 2 : 0);\n+      warn_uninitialized = value;\n \n       if (!c_dialect_cxx ())\n \t{\n@@ -1057,11 +1053,8 @@ c_common_post_options (const char **pfilename)\n   if (flag_objc_exceptions && !flag_objc_sjlj_exceptions)\n     flag_exceptions = 1;\n \n-  /* -Wextra implies -Wtype-limits, -Wclobbered, \n-     -Wempty-body, -Wsign-compare, \n-     -Wmissing-field-initializers, -Wmissing-parameter-type\n-     -Wold-style-declaration, -Woverride-init and -Wignored-qualifiers\n-     but not if explicitly overridden.  */\n+  /* -Wextra implies the following flags\n+     unless explicitly overridden.  */\n   if (warn_type_limits == -1)\n     warn_type_limits = extra_warnings;\n   if (warn_clobbered == -1)"}, {"sha": "2d372e7ebd4251692a169deb3545604328b3d671", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=62a67c94b776e5d07acd247e8a68f60f2a824024", "patch": "@@ -70,7 +70,7 @@ Common Optimization\n Optimize for space rather than speed\n \n W\n-Common RejectNegative\n+Common RejectNegative Var(extra_warnings) Warning\n This switch is deprecated; use -Wextra instead\n \n Waggregate-return\n@@ -106,7 +106,7 @@ Common Joined\n Treat specified warning as error\n \n Wextra\n-Common Warning\n+Common Var(extra_warnings) Warning\n Print extra (possibly unwanted) warnings\n \n Wfatal-errors\n@@ -197,7 +197,7 @@ Common Var(warn_type_limits) Init(-1) Warning\n Warn if a comparison is always true or always false due to the limited range of the data type\n \n Wuninitialized\n-Common Var(warn_uninitialized) Warning\n+Common Var(warn_uninitialized) Init(-1) Warning\n Warn about uninitialized automatic variables\n \n Wunreachable-code"}, {"sha": "42158de0015e4d02159e8f7ff3f605306305e3a0", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=62a67c94b776e5d07acd247e8a68f60f2a824024", "patch": "@@ -111,11 +111,6 @@ extern int optimize;\n \n extern int optimize_size;\n \n-/* Do print extra warnings (such as for uninitialized variables).\n-   -W/-Wextra.  */\n-\n-extern bool extra_warnings;\n-\n /* Used to set the level of -Wstrict-aliasing, when no level is specified.  \n    The external way to set the default level is to use\n    -Wstrict-aliasing=level.  "}, {"sha": "1170967b949b9760083525381f29b595f112835d", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=62a67c94b776e5d07acd247e8a68f60f2a824024", "patch": "@@ -54,9 +54,6 @@ bool sel_sched_switch_set;\n /* True if we should exit after parsing options.  */\n bool exit_after_options;\n \n-/* Print various extra warnings.  -W/-Wextra.  */\n-bool extra_warnings;\n-\n /* True to warn about any objects definitions whose size is larger\n    than N bytes.  Also want about function definitions whose returned\n    values are larger than N bytes, where N is `larger_than_size'.  */\n@@ -372,7 +369,6 @@ unsigned num_in_fnames;\n static int common_handle_option (size_t scode, const char *arg, int value,\n \t\t\t\t unsigned int lang_mask);\n static void handle_param (const char *);\n-static void set_Wextra (int);\n static unsigned int handle_option (const char **argv, unsigned int lang_mask);\n static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n@@ -1572,19 +1568,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       /* Currently handled in a prescan.  */\n       break;\n \n-    case OPT_W:\n-      /* For backward compatibility, -W is the same as -Wextra.  */\n-      set_Wextra (value);\n-      break;\n-\n     case OPT_Werror_:\n       enable_warning_as_error (arg, value, lang_mask);\n       break;\n \n-    case OPT_Wextra:\n-      set_Wextra (value);\n-      break;\n-\n     case OPT_Wlarger_than_:\n       /* This form corresponds to -Wlarger-than-.  \n \t Kept for backward compatibility. \n@@ -2101,21 +2088,6 @@ handle_param (const char *carg)\n   free (arg);\n }\n \n-/* Handle -W and -Wextra.  */\n-static void\n-set_Wextra (int setting)\n-{\n-  extra_warnings = setting;\n-\n-  /* We save the value of warn_uninitialized, since if they put\n-     -Wuninitialized on the command line, we need to generate a\n-     warning about not using it without also specifying -O.  */\n-  if (setting == 0)\n-    warn_uninitialized = 0;\n-  else if (warn_uninitialized != 1)\n-    warn_uninitialized = 2;\n-}\n-\n /* Used to set the level of strict aliasing warnings, \n    when no level is specified (i.e., when -Wstrict-aliasing, and not\n    -Wstrict-aliasing=level was given)."}, {"sha": "952029995ac29e4acf188248f7420345a56edd98", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a67c94b776e5d07acd247e8a68f60f2a824024/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=62a67c94b776e5d07acd247e8a68f60f2a824024", "patch": "@@ -1688,6 +1688,10 @@ process_options (void)\n   if (warn_unused_value == -1)\n     warn_unused_value = warn_unused;\n \n+  /* This replaces set_Wextra.  */\n+  if (warn_uninitialized == -1)\n+    warn_uninitialized = extra_warnings;\n+\n   /* Allow the front end to perform consistency checks and do further\n      initialization based on the command line options.  This hook also\n      sets the original filename if appropriate (e.g. foo.i -> foo.c)"}]}