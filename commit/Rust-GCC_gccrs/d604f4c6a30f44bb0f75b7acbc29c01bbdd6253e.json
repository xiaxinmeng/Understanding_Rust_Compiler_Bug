{"sha": "d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwNGY0YzZhMzBmNDRiYjBmNzViN2FjYmMyOWMwMWJiZGQ2MjUzZQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@rtl.cygnus.com", "date": "1997-09-27T04:07:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-27T04:07:00Z"}, "message": "libio changes from Ulrich to help \"old linux\" systems.\n\nlibio changes from Ulrich to help \"old linux\" systems.  See ChangeLog\nfor details.\n\nFrom-SVN: r15741", "tree": {"sha": "c804a39f2f0e78941efa5280aa004f05f08478c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c804a39f2f0e78941efa5280aa004f05f08478c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/comments", "author": null, "committer": null, "parents": [{"sha": "a7cc7f29f45db5f76aac040f4e3ef62109fd1341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7cc7f29f45db5f76aac040f4e3ef62109fd1341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7cc7f29f45db5f76aac040f4e3ef62109fd1341"}], "stats": {"total": 168, "additions": 115, "deletions": 53}, "files": [{"sha": "d3a5eff74e0eef31483db125091eff23d9c5d9c5", "filename": "libio/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FChangeLog?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -1,3 +1,43 @@\n+Fri Sep 26 20:56:41 1997  Ulrich Drepper  <drepper@rtl.cygnus.com>\n+\n+\tBased on a patch by H.J. Lu  (hjl@gnu.ai.mit.edu).\n+\n+\t* Makefile.in (STDIO_OBJECTS): New. Defined as stdfiles.o.\n+\t(LIBIO_OBJECTS): Add $(STDIO_OBJECTS).\n+\t(PICFLAG): New, empty.  moved to here from config.shared.\n+\n+\t* config.shared (DISTCLEAN): Add target-mkfrag.\n+\t(PICFLAG): Removed.\n+\n+\t* configure.in (*-linux-gnulibc1): Remove warning.\n+\t(*-linux-gnu): Use linux.mt mtsafe.mt.\n+\t(alpha-*-linux*): Use mh-elfalphapic.\n+\n+\t* gen-params (_G_ullong): Also check unsigned long long int.\n+\t(_G_llong): Also check long long int.\n+\n+\t* libio.h (_IO_lock_t): Add support for the Linux libc 5.\n+\t(_IO_peekc): Defined as _IO_peekc_unlocked if _IO_MTSAFE_IO\n+\tis not defined.\n+\n+\t* iostream.cc (__cvt_double): Fix a typo in declaration.\n+\t(info): Use expr != 0 to initialize the bit fields. Don't\n+\tinitialize \"extra\" for the Linux libc 5.\n+\n+\t* streambuf.h (_G_NEED_STDARG_H): Changed from _IO_NEED_STDARG_H.\n+\n+\t* config/linux.mt (STDIO_OBJECTS): New, empty.\n+\t(MT_CFLAGS): Removed.\n+\n+\t* config/linuxlibc1.mt: Rewrite.  it's identical to linux.mt but\n+\tIO_OBJECTS mentions files not in early libc5 versions.\n+\n+\t* config/mtsafe.mt: New.\n+\n+\t* dbz/Makefile.in (check): Support make -j.\n+\n+\t* tests/tFile.cc (tempfile): Fix a typo.\n+\n Fri Sep 19 11:52:25 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* Makefile.in (LIBIO_OBJECTS): Depend on _G_CONFIG_H."}, {"sha": "e460569886907616a229b0358da1dde303fe14dd", "filename": "libio/Makefile.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FMakefile.in?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -32,6 +32,8 @@ IO_OBJECTS = filedoalloc.o floatconv.o genops.o fileops.o \\\n   outfloat.o strops.o iofclose.o iopopen.o ioungetc.o peekc.o iogetc.o \\\n   ioputc.o iofeof.o ioferror.o\n \n+STDIO_OBJECTS = stdfiles.o\n+\n # These emulate stdio functionality, but with a different name (_IO_ungetc\n # instead of ungetc), and using _IO_FILE instead of FILE.\n # They are not needed for C++ iostream, nor stdio, though some stdio\n@@ -56,13 +58,16 @@ IOSTREAM_OBJECTS = builtinbuf.o filebuf.o fstream.o \\\n OSPRIM_OBJECTS = ioprims.o iostrerror.o cleanup.o\n \n LIBIOSTREAM_OBJECTS = $(IO_OBJECTS) $(IOSTREAM_OBJECTS) $(OSPRIM_OBJECTS)\n-LIBIO_OBJECTS = $(IO_OBJECTS) $(STDIO_WRAP_OBJECTS) $(OSPRIM_OBJECTS) stdfiles.o\n+LIBIO_OBJECTS = $(IO_OBJECTS) $(STDIO_WRAP_OBJECTS) $(OSPRIM_OBJECTS) \\\n+\t\t$(STDIO_OBJECTS)\n \n LIBIOSTREAM_DEP = $(LIBIOSTREAM_OBJECTS)\n LIBIOSTREAM_USE = $(LIBIOSTREAM_OBJECTS)\n \n USER_INCLUDES = *.h\n \n+PICFLAG =\n+\n #### package, host, target, and site dependent Makefile fragments come in here.\n ##\n "}, {"sha": "0be43612fa661d29e5faba7a9616352c54b5dfe9", "filename": "libio/config.shared", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfig.shared", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfig.shared", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fconfig.shared?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -140,7 +140,6 @@ echo 'CFLAGS = -g'\n echo 'CXXFLAGS = -g -O'\n echo 'LIBCFLAGS = $(CFLAGS)'\n echo 'LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates'\n-echo 'PICFLAG ='\n if [ \"${LIBDIR}\" = \"yes\" ]; then\n   echo 'PICDIR = stamp-picdir'\n else\n@@ -395,7 +394,7 @@ echo '# clean rules'\n \n MOSTLYCLEAN=\"${MOSTLYCLEAN-*.o pic stamp-picdir core ${EXTRA_MOSTLYCLEAN}} `if test -n \"${TOUCH_ON_COMPILE}\"; then echo stamp; else true; fi`\"\n CLEAN=\"${CLEAN-${TARGETPROG} ${TARGETLIB}}\"\n-DISTCLEAN=\"${DISTCLEAN-config.status Makefile *~ Make.pack multilib.out ${EXTRA_DISTCLEAN-}}\"\n+DISTCLEAN=\"${DISTCLEAN-config.status Makefile *~ Make.pack target-mkfrag multilib.out ${EXTRA_DISTCLEAN-}}\"\n REALCLEAN=\"${REALCLEAN-depend *.info*}\"\n \n "}, {"sha": "ad1dc51f316fd9a0d6a9593f9196a8ec9680825d", "filename": "libio/config/linux.mt", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfig%2Flinux.mt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfig%2Flinux.mt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fconfig%2Flinux.mt?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -19,12 +19,10 @@ LIBIO_INCLUDE=\n IO_OBJECTS=\n STDIO_WRAP_OBJECTS=\n OSPRIM_OBJECTS=\n+STDIO_OBJECTS=\n \n # We have the rest in /usr/include.\n USER_INCLUDES=PlotFile.h SFile.h builtinbuf.h editbuf.h fstream.h \\\n \tindstream.h iomanip.h iostream.h istream.h ostream.h \\\n \tparsestream.h pfstream.h procbuf.h stdiostream.h stream.h \\\n \tstreambuf.h strfile.h strstream.h\n-\n-# tell we want the mt-safe version\n-MT_CFLAGS = -D_IO_MTSAFE_IO"}, {"sha": "1f22b4a0dc844e502c7ee93a6fb4b02227784865", "filename": "libio/config/linuxlibc1.mt", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfig%2Flinuxlibc1.mt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfig%2Flinuxlibc1.mt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fconfig%2Flinuxlibc1.mt?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -1,26 +1,28 @@\n-# Since the Linux C library has libio, we have to be very careful.\n+# Use the libio which comes with the local libc.\n \n-# By default, we build libio and use it.  If someone wants to not\n-# build it, let them go to extra work.  The reason is that the user\n-# may want a newer, bug fixed libio, also on a linux 1.0.8 system\n-# things just won't build with the bottom section uncommented.\n+# That is where we keep the g++ header files.\n+gxx_includedir =$(prefix)/include/g++\n \n # Comment this out to avoid including the stdio functions in libiostream.a:\n-LIBIOSTREAM_OBJECTS = $(IO_OBJECTS) $(IOSTREAM_OBJECTS) $(STDIO_WRAP_OBJECTS) $(OSPRIM_OBJECTS)\n-LIBIOSTREAM_DEP = $(LIBIOSTREAM_OBJECTS) stmp-stdio\n-LIBIOSTREAM_USE = $(LIBIOSTREAM_OBJECTS) `cat stdio.list`\n+# LIBIOSTREAM_OBJECTS = $(IO_OBJECTS) $(IOSTREAM_OBJECTS) $(STDIO_WRAP_OBJECTS) $(OSPRIM_OBJECTS)\n+# LIBIOSTREAM_DEP = $(LIBIOSTREAM_OBJECTS) stdio.list\n+# LIBIOSTREAM_USE = $(LIBIOSTREAM_OBJECTS) `cat stdio.list`\n \n # Comment the above and uncomment the below to use the code in the Linux libc:\n # We have _G_config.h in /usr/include.\n-# _G_CONFIG_H=\n+_G_CONFIG_H=\n+\n+# We must not see the libio.h file from this library.\n+LIBIO_INCLUDE=\n \n # We have those in libc.a.\n-# IO_OBJECTS=\n-# STDIO_WRAP_OBJECTS=\n-# OSPRIM_OBJECTS=\n+IO_OBJECTS=iogetc.o ioputc.o iofeof.o ioferror.o\n+STDIO_WRAP_OBJECTS=\n+OSPRIM_OBJECTS=\n+STDIO_OBJECTS=\n \n # We have the rest in /usr/include.\n-# USER_INCLUDES=PlotFile.h SFile.h builtinbuf.h editbuf.h fstream.h \\\n-# \tindstream.h iomanip.h iostream.h istream.h ostream.h \\\n-# \tparsestream.h pfstream.h procbuf.h stdiostream.h stream.h \\\n-# \tstreambuf.h strfile.h strstream.h\n+USER_INCLUDES=PlotFile.h SFile.h builtinbuf.h editbuf.h fstream.h \\\n+\tindstream.h iomanip.h iostream.h istream.h ostream.h \\\n+\tparsestream.h pfstream.h procbuf.h stdiostream.h stream.h \\\n+\tstreambuf.h strfile.h strstream.h"}, {"sha": "ac94747f563dfc49dcc5a60498c0468a2b6bfae5", "filename": "libio/configure.in", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fconfigure.in?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -17,12 +17,8 @@ frags=\n case \"${target}\" in\n   *-hpux*)       frags=hpux.mt ;;\n   *-linux-gnulibc1)\n-\techo \"WARNING:  The I/O implementation in FSF libg++ 2.8.x is not\"\n-\techo \"  compatible with Linux libc through 5.2.x.\"\n-\techo \"  See libg++/README for more information.\"\n-\techo \"  YOU ARE ON YOUR OWN!\"\n \t\t frags=linuxlibc1.mt ;;\n-  *-linux-gnu)   frags=linux.mt ;;\n+  *-linux-gnu)   frags=\"linux.mt mtsafe.mt\" ;;\n   *-sco3.2v[45]*)   frags=sco4.mt ;;\n   *-isc*)        frags=isc.mt ;;\n   *-netware*)    frags=netware.mt ;;\n@@ -40,6 +36,8 @@ if [ \"${shared}\" = \"yes\" ]; then\n   case \"${target}\" in\n     hppa*-*)\t frags=\"${frags} ../../config/mh-papic\" ;;\n     i[3456]86-*) frags=\"${frags} ../../config/mh-x86pic\" ;;\n+    alpha-*-linux*)\n+\t\t frags=\"${frags} ../../config/mh-elfalphapic\" ;;\n     *)\t         frags=\"${frags} ../../config/mh-${target_cpu}pic\" ;;\n   esac\n fi"}, {"sha": "6d6dc2874855fcb361ed4617beb80a7aa2f531bc", "filename": "libio/dbz/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fdbz%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fdbz%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fdbz%2FMakefile.in?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -37,7 +37,8 @@ install:\n install-info:\n info:\n \n-check: r rclean\n+check: r\n+\t$(MAKE) rclean\n \n bininstall:\tdbz\n \tcp dbz $(NEWSBIN)"}, {"sha": "ef417e73544faf16a511eb2bee5e96d4976bb503", "filename": "libio/gen-params", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fgen-params", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fgen-params", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fgen-params?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -288,6 +288,8 @@ for TYPE in dev_t clock_t fpos_t gid_t ino_t mode_t nlink_t off_t pid_t ptrdiff_\n \tfor iteration in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; do\n \t    # Search dummy.out for a typedef for X*$t.\n \t    sed_script=\"\n+\t\ts/unsigned long long int/_G_ullong/g\n+\t\ts/long long int/_G_llong/g\n \t\ts/unsigned long long/_G_ullong/g\n \t\ts/long long/_G_llong/g\n \t\t/.*typedef  *\\\\(.*[^ ]\\\\)  *X*$t *;.*/{s||\\1|;p;q;}"}, {"sha": "383d46560910bda3e0afd018ac87f630eb5031db", "filename": "libio/iostream.cc", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fiostream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fiostream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fiostream.cc?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -44,7 +44,7 @@ extern \"C\" int __printf_fp (_IO_FILE *, const struct printf_info *,\n #include \"floatio.h\"\n # ifndef _IO_USE_DTOA\n int __cvt_double(double number, register int prec, int flags, int *signp,\n-                 int fmtch, char *startp, char *endp)\n+                 int fmtch, char *startp, char *endp);\n # endif\n #endif\n \n@@ -623,14 +623,17 @@ ostream& ostream::operator<<(double n)\n \t\t\t\t      is_long_double: 0,\n \t\t\t\t      is_short: 0,\n \t\t\t\t      is_long: 0,\n-\t\t\t\t      alt: flags() & ios::showpoint,\n+\t\t\t\t      alt: (flags() & ios::showpoint) != 0,\n \t\t\t\t      space: 0,\n-\t\t\t\t      left: ios::left,\n-\t\t\t\t      showsign: flags() & ios::showpos,\n+\t\t\t\t      left: (flags() & ios::left) != 0,\n+\t\t\t\t      showsign: (flags() & ios::showpos) != 0,\n \t\t\t\t      group: 0,\n-\t\t\t\t      pad: fill(),\n-\t\t\t\t      extra: 0};\n-\t  const void *ptr = &n;\n+\t\t\t\t      pad: fill()\n+#if defined __GLIBC__ && __GLIBC__ >= 2\n+\t\t\t\t      , extra: 0\n+#endif\n+\t  };\n+\t  const void *ptr = (const void *) &n;\n \t  if (__printf_fp (rdbuf(), &info, &ptr) < 0)\n \t    set(ios::badbit|ios::failbit);\n \t}\n@@ -723,15 +726,18 @@ ostream& ostream::operator<<(long double n)\n \t\t\t\t  is_long_double: 1,\n \t\t\t\t  is_short: 0,\n \t\t\t\t  is_long: 0,\n-\t\t\t\t  alt: flags() & ios::showpoint,\n+\t\t\t\t  alt: (flags() & ios::showpoint) != 0,\n \t\t\t\t  space: 0,\n-\t\t\t\t  left: ios::left,\n-\t\t\t\t  showsign: flags() & ios::showpos,\n+\t\t\t\t  left: (flags() & ios::left) != 0,\n+\t\t\t\t  showsign: (flags() & ios::showpos) != 0,\n \t\t\t\t  group: 0,\n-\t\t\t\t  pad: fill(),\n-\t\t\t\t  extra: 0};\n+\t\t\t\t  pad: fill()\n+#if defined __GLIBC__ && __GLIBC__ >= 2\n+\t\t\t\t  , extra: 0\n+#endif\n+      };\n \n-      const void *ptr = &n;\n+      const void *ptr = (const void *) &n;\n \n       if (__printf_fp (rdbuf(), &info, &ptr) < 0)\n \tset (ios::badbit|ios::failbit);"}, {"sha": "d5e20f53bbe4e1d61a23f12347bd51c40da2d981", "filename": "libio/libio.h", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Flibio.h?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -75,12 +75,6 @@\n # define _IO_USE_DTOA 1\n #endif\n \n-#if 0\n-# ifdef _IO_NEED_STDARG_H\n-#  include <stdarg.h>\n-# endif\n-#endif\n-\n #ifndef EOF\n # define EOF (-1)\n #endif\n@@ -155,9 +149,24 @@ struct _IO_jump_t;  struct _IO_FILE;\n \n /* Handle lock.  */\n #ifdef _IO_MTSAFE_IO\n-# include <bits/stdio-lock.h>\n+# if defined __GLIBC__ && __GLIBC__ >= 2\n+#  include <bits/stdio-lock.h>\n+#  define _IO_LOCK_T _IO_lock_t *\n+# else\n+/*# include <comthread.h>*/\n+# endif\n #else\n+/* XXX This will go away as soon as comthread is finished.  */\n+# ifdef __linux__\n+struct _IO_lock_t {\n+  void *ptr;\n+  short int field1;\n+  short int field2;\n+};\n+#  define _IO_LOCK_T struct _IO_lock_t\n+# else\n typedef void _IO_lock_t;\n+# endif\n #endif\n \n \n@@ -217,7 +226,7 @@ struct _IO_FILE {\n \n   /*  char* _save_gptr;  char* _save_egptr; */\n \n-  _IO_lock_t *_lock;\n+  _IO_LOCK_T _lock;\n };\n \n #ifndef __cplusplus\n@@ -289,15 +298,17 @@ extern void _IO_flockfile __P ((_IO_FILE *));\n extern void _IO_funlockfile __P ((_IO_FILE *));\n extern int _IO_ftrylockfile __P ((_IO_FILE *));\n \n-#ifndef _IO_MTSAFE_IO\n+#ifdef _IO_MTSAFE_IO\n+# define _IO_peekc(_fp) _IO_peekc_locked (_fp)\n+#else\n+# define _IO_peekc(_fp) _IO_peekc_unlocked (_fp)\n # define _IO_flockfile(_fp) /**/\n # define _IO_funlockfile(_fp) /**/\n # define _IO_ftrylockfile(_fp) /**/\n # define _IO_cleanup_region_start(_fct, _fp) /**/\n # define _IO_cleanup_region_end(_Doit) /**/\n #endif /* !_IO_MTSAFE_IO */\n \n-#define _IO_peekc(_fp) _IO_peekc_locked (_fp)\n \n extern int _IO_vfscanf __P ((_IO_FILE *, const char *, _IO_va_list, int *));\n extern int _IO_vfprintf __P ((_IO_FILE *, const char *, _IO_va_list));"}, {"sha": "dfee0984a643417b83b911d3dea25fd250174b9d", "filename": "libio/streambuf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstreambuf.h?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -36,7 +36,7 @@ extern \"C\" {\n #include <libio.h>\n }\n //#include <_G_config.h>\n-#ifdef _IO_NEED_STDARG_H\n+#ifdef _G_NEED_STDARG_H\n #include <stdarg.h>\n #endif\n #ifndef _IO_va_list"}, {"sha": "f5b8a6f7760cf216b00be94c30c4874371cbd6a4", "filename": "libio/tests/tFile.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Ftests%2FtFile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e/libio%2Ftests%2FtFile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Ftests%2FtFile.cc?ref=d604f4c6a30f44bb0f75b7acbc29c01bbdd6253e", "patch": "@@ -225,7 +225,7 @@ void t4()\n   tf.remove();\n #else\n   tf.close();\n-  unlink(\"tempfile\");\n+  unlink(tempfile);\n #endif\n   assert(!tf.is_open());\n }"}]}