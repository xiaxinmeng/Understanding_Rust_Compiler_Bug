{"sha": "e76c715735e2472429ef7927137a57edc69f98b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc2YzcxNTczNWUyNDcyNDI5ZWY3OTI3MTM3YTU3ZWRjNjlmOThiMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-01T08:20:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-01T08:20:41Z"}, "message": "function.h (struct function): Remove cilk_frame_decl, is_cilk_function and calls_cilk_spawn fields.\n\n\t* function.h (struct function): Remove cilk_frame_decl,\n\tis_cilk_function and calls_cilk_spawn fields.\n\t* tree-inline.h (struct copy_body_data): Remove remap_var_for_cilk\n\tfield.\n\t* omp-simd-clone.c (simd_clone_clauses_extract): Don't clear\n\tcilk_elemental field.\n\t* cgraph.h (struct cgraph_simd_clone): Remove cilk_elemental field.\n\t* target.def: Adjust comment.\n\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n\tDon't test cilk_elemental.\nc-family/\n\t* c-attribs.c (c_common_attribute_table): Remove \"cilk simd function\"\n\tattribute.\n\t(handle_simd_attribute): Don't check for \"cilk simd function\"\n\tattribute.  Reindent, formatting changes.\ncp/\n\t* parser.c (cp_parser_new): Don't clear cilk_simd_fn_info.\n\t(parsing_nsdmi): Adjust comment.\n\t(cp_parser_omp_for_loop_init): Likewise.\n\t* parser.h (struct cp_omp_declare_simd_data): Adjust comment.\n\t(struct cp_parser): Remove cilk_simd_fn_info field.\n\t* cp-tree.h (cilk_valid_spawn): Remove.\n\nFrom-SVN: r255300", "tree": {"sha": "165ae147d8776f10fdfe2abc6df4c7b5be2a73ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/165ae147d8776f10fdfe2abc6df4c7b5be2a73ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e76c715735e2472429ef7927137a57edc69f98b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76c715735e2472429ef7927137a57edc69f98b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76c715735e2472429ef7927137a57edc69f98b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76c715735e2472429ef7927137a57edc69f98b3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bebadeca367500cf692d550ff0b464ff732ee808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebadeca367500cf692d550ff0b464ff732ee808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebadeca367500cf692d550ff0b464ff732ee808"}], "stats": {"total": 135, "additions": 56, "deletions": 79}, "files": [{"sha": "09fd188aecf2b3594b022d469935e5909bfb43af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -1,5 +1,16 @@\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* function.h (struct function): Remove cilk_frame_decl,\n+\tis_cilk_function and calls_cilk_spawn fields.\n+\t* tree-inline.h (struct copy_body_data): Remove remap_var_for_cilk\n+\tfield.\n+\t* omp-simd-clone.c (simd_clone_clauses_extract): Don't clear\n+\tcilk_elemental field.\n+\t* cgraph.h (struct cgraph_simd_clone): Remove cilk_elemental field.\n+\t* target.def: Adjust comment.\n+\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n+\tDon't test cilk_elemental.\n+\n \tPR tree-optimization/83233\n \t* gimple-ssa-store-merging.c (nop_stats, bswap_stats): Use\n \tbswap_stat name for the struct."}, {"sha": "8b619adaada3971cf1120e455078f9638d0803eb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -1,3 +1,10 @@\n+2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-attribs.c (c_common_attribute_table): Remove \"cilk simd function\"\n+\tattribute.\n+\t(handle_simd_attribute): Don't check for \"cilk simd function\"\n+\tattribute.  Reindent, formatting changes.\n+\n 2017-11-30  Julia Koval  <julia.koval@intel.com>\n \n \t* c-common.h (inv_list): Remove."}, {"sha": "cff5b44e26aa1e478332898889bb89b085ee1e6b", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 26, "deletions": 41, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -343,8 +343,6 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_returns_nonnull_attribute, false },\n   { \"omp declare simd\",       0, -1, true,  false, false,\n \t\t\t      handle_omp_declare_simd_attribute, false },\n-  { \"cilk simd function\",     0, -1, true,  false, false,\n-\t\t\t      handle_omp_declare_simd_attribute, false },\n   { \"simd\",\t\t      0, 1, true,  false, false,\n \t\t\t      handle_simd_attribute, false },\n   { \"omp declare target\",     0, 0, true, false, false,\n@@ -2435,50 +2433,37 @@ handle_simd_attribute (tree *node, tree name, tree args, int, bool *no_add_attrs\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     {\n-      if (lookup_attribute (\"cilk simd function\",\n-\t\t\t    DECL_ATTRIBUTES (*node)) != NULL)\n-\t{\n-\t  error_at (DECL_SOURCE_LOCATION (*node),\n-\t\t    \"%<__simd__%> attribute cannot be used in the same \"\n-\t\t    \"function marked as a Cilk Plus SIMD-enabled function\");\n-\t  *no_add_attrs = true;\n-\t}\n-      else\n+      tree t = get_identifier (\"omp declare simd\");\n+      tree attr = NULL_TREE;\n+      if (args)\n \t{\n-\t  tree t = get_identifier (\"omp declare simd\");\n-\t  tree attr = NULL_TREE;\n-\t  if (args)\n+\t  tree id = TREE_VALUE (args);\n+\n+\t  if (TREE_CODE (id) != STRING_CST)\n \t    {\n-\t      tree id = TREE_VALUE (args);\n-\n-\t      if (TREE_CODE (id) != STRING_CST)\n-\t\t{\n-\t\t  error (\"attribute %qE argument not a string\", name);\n-\t\t  *no_add_attrs = true;\n-\t\t  return NULL_TREE;\n-\t\t}\n-\n-\t      if (strcmp (TREE_STRING_POINTER (id), \"notinbranch\") == 0)\n-\t\tattr = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n-\t\t\t\t\t OMP_CLAUSE_NOTINBRANCH);\n-\t      else\n-\t\tif (strcmp (TREE_STRING_POINTER (id), \"inbranch\") == 0)\n-\t\t  attr = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n-\t\t\t\t\t   OMP_CLAUSE_INBRANCH);\n-\t\telse\n-\t\t{\n-\t\t  error (\"only %<inbranch%> and %<notinbranch%> flags are \"\n-\t\t\t \"allowed for %<__simd__%> attribute\");\n-\t\t  *no_add_attrs = true;\n-\t\t  return NULL_TREE;\n-\t\t}\n+\t      error (\"attribute %qE argument not a string\", name);\n+\t      *no_add_attrs = true;\n+\t      return NULL_TREE;\n \t    }\n \n-\t  DECL_ATTRIBUTES (*node) = tree_cons (t,\n-\t\t\t\t\t       build_tree_list (NULL_TREE,\n-\t\t\t\t\t\t\t\tattr),\n-\t\t\t\t\t       DECL_ATTRIBUTES (*node));\n+\t  if (strcmp (TREE_STRING_POINTER (id), \"notinbranch\") == 0)\n+\t    attr = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n+\t\t\t\t     OMP_CLAUSE_NOTINBRANCH);\n+\t  else if (strcmp (TREE_STRING_POINTER (id), \"inbranch\") == 0)\n+\t    attr = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n+\t\t\t\t     OMP_CLAUSE_INBRANCH);\n+\t  else\n+\t    {\n+\t      error (\"only %<inbranch%> and %<notinbranch%> flags are \"\n+\t\t     \"allowed for %<__simd__%> attribute\");\n+\t      *no_add_attrs = true;\n+\t      return NULL_TREE;\n+\t    }\n \t}\n+\n+      DECL_ATTRIBUTES (*node)\n+\t= tree_cons (t, build_tree_list (NULL_TREE, attr),\n+\t\t     DECL_ATTRIBUTES (*node));\n     }\n   else\n     {"}, {"sha": "4d74fb9f9b6d756c04c943cad4803b88e30430a4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -823,9 +823,6 @@ struct GTY(()) cgraph_simd_clone {\n      otherwise false.  */\n   unsigned int inbranch : 1;\n \n-  /* True if this is a Cilk Plus variant.  */\n-  unsigned int cilk_elemental : 1;\n-\n   /* Doubly linked list of SIMD clones.  */\n   cgraph_node *prev_clone, *next_clone;\n "}, {"sha": "57c09c43ec9cc9d8e01649d088a684fe7147d9c5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -49290,12 +49290,7 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n \treturn 0;\n       }\n \n-  if (clonei->cilk_elemental)\n-    {\n-      /* Parse here processor clause.  If not present, default to 'b'.  */\n-      clonei->vecsize_mangle = 'b';\n-    }\n-  else if (!TREE_PUBLIC (node->decl))\n+  if (!TREE_PUBLIC (node->decl))\n     {\n       /* If the function isn't exported, we can pick up just one ISA\n \t for the clones.  */"}, {"sha": "71f6f3a3ca3a0214e9b52c42768f9085e716e63c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -1,5 +1,12 @@\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* parser.c (cp_parser_new): Don't clear cilk_simd_fn_info.\n+\t(parsing_nsdmi): Adjust comment.\n+\t(cp_parser_omp_for_loop_init): Likewise.\n+\t* parser.h (struct cp_omp_declare_simd_data): Adjust comment.\n+\t(struct cp_parser): Remove cilk_simd_fn_info field.\n+\t* cp-tree.h (cilk_valid_spawn): Remove.\n+\n \tPR c/79153\n \t* cp-gimplify.c (genericize_switch_stmt): Emit LABEL_EXPR for the\n \tbreak label into SWITCH_BODY instead of after it and set"}, {"sha": "e77241f3d97783df50f8b21b26fc0b5472b1f57c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -7402,9 +7402,6 @@ extern vec<tree> cx_error_context               (void);\n extern tree fold_sizeof_expr\t\t\t(tree);\n extern void clear_cv_and_fold_caches\t\t(void);\n \n-/* In c-family/cilk.c */\n-extern bool cilk_valid_spawn                    (tree);\n-\n /* In cp-ubsan.c */\n extern void cp_ubsan_maybe_instrument_member_call (tree);\n extern void cp_ubsan_instrument_member_accesses (tree *);"}, {"sha": "b469d1c176062202855d91d2225fe9540dde180c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -3915,7 +3915,6 @@ cp_parser_new (void)\n \n   /* Special parsing data structures.  */\n   parser->omp_declare_simd = NULL;\n-  parser->cilk_simd_fn_info = NULL;\n   parser->oacc_routine = NULL;\n \n   /* Not declaring an implicit function template.  */\n@@ -20675,8 +20674,7 @@ parsing_nsdmi (void)\n    Returns the type indicated by the type-id.\n \n    In addition to this, parse any queued up #pragma omp declare simd\n-   clauses, Cilk Plus SIMD-enabled functions' vector attributes, and\n-   #pragma acc routine clauses.\n+   clauses, and #pragma acc routine clauses.\n \n    QUALS is either a bitmask of cv_qualifiers or -1 for a non-member\n    function.  */\n@@ -34536,8 +34534,7 @@ cp_parser_omp_for_incr (cp_parser *parser, tree decl)\n   return build2 (MODIFY_EXPR, TREE_TYPE (decl), decl, rhs);\n }\n \n-/* Parse the initialization statement of either an OpenMP for loop or\n-   a Cilk Plus for loop.\n+/* Parse the initialization statement of an OpenMP for loop.\n \n    Return true if the resulting construct should have an\n    OMP_CLAUSE_PRIVATE added to it.  */"}, {"sha": "ec97a7d3426cfbff2a5b5838d873952f1a720aa6", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -199,8 +199,7 @@ struct GTY (()) cp_parser_context {\n };\n \n \n-/* Helper data structure for parsing #pragma omp declare simd, and Cilk Plus\n-   SIMD-enabled functions' vector attribute.  */\n+/* Helper data structure for parsing #pragma omp declare simd.  */\n struct cp_omp_declare_simd_data {\n   bool error_seen; /* Set if error has been reported.  */\n   bool fndecl_seen; /* Set if one fn decl/definition has been seen already.  */\n@@ -369,10 +368,6 @@ struct GTY(()) cp_parser {\n      helper data structure.  */\n   cp_omp_declare_simd_data * GTY((skip)) omp_declare_simd;\n \n-  /* When parsing Cilk Plus SIMD-enabled functions' vector attributes,\n-     this is a pointer to a helper data structure.  */\n-  cp_omp_declare_simd_data * GTY((skip)) cilk_simd_fn_info;\n-\n   /* When parsing #pragma acc routine, this is a pointer to a helper data\n      structure.  */\n   cp_oacc_routine_data * GTY((skip)) oacc_routine;"}, {"sha": "971ab667e1a4f81a22339d5f0c386ecd5dc880cf", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -262,9 +262,6 @@ struct GTY(()) function {\n   /* Vector of function local variables, functions, types and constants.  */\n   vec<tree, va_gc> *local_decls;\n \n-  /* In a Cilk function, the VAR_DECL for the frame descriptor. */\n-  tree cilk_frame_decl;\n-\n   /* For md files.  */\n \n   /* tm.h can use this to store whatever it likes.  */\n@@ -323,12 +320,6 @@ struct GTY(()) function {\n      either as a subroutine or builtin.  */\n   unsigned int calls_alloca : 1;\n \n-  /* This will indicate whether a function is a cilk function */\n-  unsigned int is_cilk_function : 1;\n-\n-  /* Nonzero if this is a Cilk function that spawns. */\n-  unsigned int calls_cilk_spawn : 1;\n-  \n   /* Nonzero if function being compiled receives nonlocal gotos\n      from nested functions.  */\n   unsigned int has_nonlocal_label : 1;"}, {"sha": "f6a7a270d49e8fd052a278943ec588b740653743", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -116,7 +116,6 @@ simd_clone_clauses_extract (struct cgraph_node *node, tree clauses,\n      clone which will require a mask argument.  */\n   struct cgraph_simd_clone *clone_info = simd_clone_struct_alloc (n + 1);\n   clone_info->nargs = n;\n-  clone_info->cilk_elemental = false;\n \n   if (!clauses)\n     goto out;"}, {"sha": "b9b45991000c253cf0420004ec080db60191038b", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -1637,7 +1637,7 @@ void, (rtx_insn *insn, int max_pri, int *fusion_pri, int *pri), NULL)\n \n HOOK_VECTOR_END (sched)\n \n-/* Functions relating to OpenMP and Cilk Plus SIMD clones.  */\n+/* Functions relating to OpenMP SIMD and __attribute__((simd)) clones.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_SIMD_CLONE_\"\n HOOK_VECTOR (TARGET_SIMD_CLONE, simd_clone)"}, {"sha": "257a6101ad67a45c5bbc5b293314900c46742b25", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76c715735e2472429ef7927137a57edc69f98b3/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=e76c715735e2472429ef7927137a57edc69f98b3", "patch": "@@ -149,10 +149,6 @@ struct copy_body_data\n      when inlining a call within an OpenMP SIMD-on-SIMT loop.  */\n   vec<tree> *dst_simt_vars;\n \n-  /* Cilk keywords currently need to replace some variables that\n-     ordinary nested functions do not.  */\n-  bool remap_var_for_cilk;\n-\n   /* Do not create new declarations when within type remapping.  */\n   bool prevent_decl_creation_for_types;\n };"}]}