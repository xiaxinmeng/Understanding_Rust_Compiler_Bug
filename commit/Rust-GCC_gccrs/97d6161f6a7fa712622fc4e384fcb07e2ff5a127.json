{"sha": "97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdkNjE2MWY2YTdmYTcxMjYyMmZjNGUzODRmY2IwN2UyZmY1YTEyNw==", "commit": {"author": {"name": "Cassio Neri", "email": "cassio.neri@gmail.com", "date": "2021-02-24T17:33:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-24T17:58:48Z"}, "message": "libstdc++: More efficient days from date\n\nThis patch reimplements std::chrono::year_month_day::_M_days_since_epoch()\nwhich calculates the number of elapsed days since 1970/01/01.  The new\nimplementation is based on Proposition 6.2 of Neri and Schneider, \"Euclidean\nAffine Functions and Applications to Calendar Algorithms\" available at\nhttps://arxiv.org/abs/2102.06959.\n\nThe aforementioned paper benchmarks the implementation against several\ncounterparts, including libc++'s (which is identical to the current\nimplementation).  The results, shown in Figure 3, indicate the new algorithm is\n1.7 times faster than the current one.\n\nThe patch adds a test which loops through all dates in [-32767/01/01,\n32767/12/31], and for each of them, gets the number of days and compares the\nresult against its expected value. The latter is calculated using a much\nsimpler and easy to understand algorithm but which is also much slower.\n\nThe dates used in the test covers the full range of possible values\n[time.cal.year.members].  Despite its completeness the test runs in matter of\nseconds.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (year_month_day::_M_days_since_epoch):\n\tNew implementation.\n\t* testsuite/std/time/year_month_day/4.cc: New test.", "tree": {"sha": "ef1b09dd948e42cf1beb296c922b6ca4610477ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef1b09dd948e42cf1beb296c922b6ca4610477ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d6161f6a7fa712622fc4e384fcb07e2ff5a127/comments", "author": {"login": "cassioneri", "id": 2662854, "node_id": "MDQ6VXNlcjI2NjI4NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2662854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassioneri", "html_url": "https://github.com/cassioneri", "followers_url": "https://api.github.com/users/cassioneri/followers", "following_url": "https://api.github.com/users/cassioneri/following{/other_user}", "gists_url": "https://api.github.com/users/cassioneri/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassioneri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassioneri/subscriptions", "organizations_url": "https://api.github.com/users/cassioneri/orgs", "repos_url": "https://api.github.com/users/cassioneri/repos", "events_url": "https://api.github.com/users/cassioneri/events{/privacy}", "received_events_url": "https://api.github.com/users/cassioneri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dfd5493cf9798d46dd24ac32becc54d5074271e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfd5493cf9798d46dd24ac32becc54d5074271e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfd5493cf9798d46dd24ac32becc54d5074271e"}], "stats": {"total": 109, "additions": 94, "deletions": 15}, "files": [{"sha": "b03167863cd9f8a0e324e7a021aa677671826f8d", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d6161f6a7fa712622fc4e384fcb07e2ff5a127/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d6161f6a7fa712622fc4e384fcb07e2ff5a127/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "patch": "@@ -2466,26 +2466,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const auto __d1 = __d0 + 1;\n \n       return year_month_day{chrono::year{__y1 + __z2}, chrono::month{__m1},\n-\t\t\t    chrono::day{__d1}\n-      };\n+\t\t\t    chrono::day{__d1}};\n     }\n \n-    // Days since 1970/01/01. Magic.\n+    // Days since 1970/01/01.\n+    // Proposition 6.2 of Neri and Schneider,\n+    // \"Euclidean Affine Functions and Applications to Calendar Algorithms\".\n+    // https://arxiv.org/abs/2102.06959\n     constexpr days\n     year_month_day::_M_days_since_epoch() const noexcept\n     {\n-      const auto __y = static_cast<int>(_M_y) - (_M_m <= February);\n-      const auto __m = static_cast<unsigned>(_M_m);\n-      const auto __d = static_cast<unsigned>(_M_d);\n-      const auto __era = (__y >= 0 ? __y : __y - 399) / 400;\n-      // Year of \"era\" [0, 399].\n-      const auto __yoe = static_cast<unsigned>(__y - __era * 400);\n-      // Day of year [0, 365].\n-      const auto __doy = (153 * (__m > 2 ? __m - 3 : __m + 9) + 2) / 5 + __d - 1;\n-      // Day of \"era\" [0, 146096].\n-      const auto __doe = __yoe * 365 + __yoe / 4 - __yoe / 100 + __doy;\n-      const auto __days = __era * 146097 + static_cast<int>(__doe) - 719468;\n-      return days{__days};\n+      auto constexpr __z2    = static_cast<uint32_t>(-1468000);\n+      auto constexpr __r2_e3 = static_cast<uint32_t>(536895458);\n+\n+      const auto __y1 = static_cast<uint32_t>(static_cast<int>(_M_y)) - __z2;\n+      const auto __m1 = static_cast<uint32_t>(_M_m);\n+      const auto __d1 = static_cast<uint32_t>(_M_d);\n+\n+      const auto __j  = static_cast<uint32_t>(__m1 < 3);\n+      const auto __y0 = __y1 - __j;\n+      const auto __m0 = __j ? __m1 + 12 : __m1;\n+      const auto __d0 = __d1 - 1;\n+\n+      const auto __q1 = __y0 / 100;\n+      const auto __yc = 1461 * __y0 / 4 - __q1 + __q1 / 4;\n+      const auto __mc = (979 *__m0 - 2919) / 32;\n+      const auto __dc = __d0;\n+\n+      return days{static_cast<int32_t>(__yc + __mc + __dc - __r2_e3)};\n     }\n \n     // YEAR_MONTH_DAY_LAST"}, {"sha": "c8a6768ad08d8752e1d6fbccd4a8027975890b09", "filename": "libstdc++-v3/testsuite/std/time/year_month_day/4.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d6161f6a7fa712622fc4e384fcb07e2ff5a127/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d6161f6a7fa712622fc4e384fcb07e2ff5a127/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F4.cc?ref=97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class year_month_day [time.cal.year_month_day]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// Slow but very clear way of advancing one day.\n+constexpr void\n+advance(std::chrono::year_month_day& ymd) noexcept {\n+\n+  using namespace std::chrono;\n+\n+  auto y = ymd.year();\n+  auto m = ymd.month();\n+  auto d = ymd.day();\n+\n+  if (d != year_month_day_last{year{y}, month_day_last{m}}.day())\n+    ++d;\n+  else {\n+    d = day{1};\n+    if (m != December)\n+      ++m;\n+    else {\n+      m = January;\n+      ++y;\n+    }\n+  }\n+  ymd = year_month_day{y, m, d};\n+}\n+\n+void test01()\n+{\n+  using namespace std::chrono;\n+\n+  // [-32767y/January/1d, 32767y/December/31d] maps to [-12687428, 11248737]\n+\n+  auto n   = days{-12687428};\n+  auto ymd = -32767y/January/1d;\n+  while (ymd < 32767y/December/31d) {\n+    VERIFY( static_cast<sys_days>(ymd) == sys_days{n} );\n+    ++n;\n+    advance(ymd);\n+  }\n+  // One more for ymd = 32767y/December/31d and n = 11248737.\n+  VERIFY( sys_days{days{11248737}} == static_cast<sys_days>(32767y/December/31d) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}