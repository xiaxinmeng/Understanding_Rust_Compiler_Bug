{"sha": "07c5a154bb3d23948235bd9481fecca779b1f62d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjNWExNTRiYjNkMjM5NDgyMzViZDk0ODFmZWNjYTc3OWIxZjYyZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-08-08T17:39:46Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-08-08T17:39:46Z"}, "message": "re PR middle-end/54146 (Very slow compile with attribute((flatten)))\n\n\tPR middle-end/54146\n\t* gimpify.c (gimplify_body): Only verify_gimple_in_seq with\n\tchecking enabled.\n\t* tree-ssa-loop-manip.c (add_exit_phis_var): Assert that var is\n\ta gimple_reg if checking is enabled.\n\t(find_uses_to_rename_stmt): Only look at non-virtual USE operands.\n\t* tree-into-ssa (compute_global_livein): Change the worklist\n\ttype from an array to a VEC.\n\nFrom-SVN: r190235", "tree": {"sha": "b760397677133adc286f0671661422a803af861f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b760397677133adc286f0671661422a803af861f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c5a154bb3d23948235bd9481fecca779b1f62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c5a154bb3d23948235bd9481fecca779b1f62d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c5a154bb3d23948235bd9481fecca779b1f62d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c5a154bb3d23948235bd9481fecca779b1f62d/comments", "author": null, "committer": null, "parents": [{"sha": "a471762f68f0315df2d3c772596c45f38f45fb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a471762f68f0315df2d3c772596c45f38f45fb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a471762f68f0315df2d3c772596c45f38f45fb7c"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "4bd66d6d0bfe11c2d7270f988d3e04bda38af37b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07c5a154bb3d23948235bd9481fecca779b1f62d", "patch": "@@ -1,3 +1,14 @@\n+2012-08-08  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR middle-end/54146\n+\t* gimpify.c (gimplify_body): Only verify_gimple_in_seq with\n+\tchecking enabled.\n+\t* tree-ssa-loop-manip.c (add_exit_phis_var): Assert that var is\n+\ta gimple_reg if checking is enabled.\n+\t(find_uses_to_rename_stmt): Only look at non-virtual USE operands.\n+\t* tree-into-ssa (compute_global_livein): Change the worklist\n+\ttype from an array to a VEC.\n+\n 2012-08-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-operands.h (virtual_operand_p): Declare.\n@@ -36,7 +47,7 @@\n \t* combine.c (gen_lowpart_for_combine): Don't return identity\n \tfor CONST or symbolic reference.\n \n-2012-08-08 Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n+2012-08-08  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_ADX_SET): New.\n \t(OPTION_MASK_ISA_ADX_UNSET): Likewise."}, {"sha": "03f7c9ece8218fdbe6bf19fd827a18ce7bf6a34f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=07c5a154bb3d23948235bd9481fecca779b1f62d", "patch": "@@ -8200,8 +8200,10 @@ gimplify_body (tree fndecl, bool do_parms)\n   pop_gimplify_context (outer_bind);\n   gcc_assert (gimplify_ctxp == NULL);\n \n+#ifdef ENABLE_CHECKING\n   if (!seen_error ())\n     verify_gimple_in_seq (gimple_bind_body (outer_bind));\n+#endif\n \n   timevar_pop (TV_TREE_GIMPLIFY);\n   input_location = saved_location;"}, {"sha": "52f0bdc71a918df5f4e7b6274e6def4972147d88", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=07c5a154bb3d23948235bd9481fecca779b1f62d", "patch": "@@ -408,26 +408,28 @@ set_current_def (tree var, tree def)\n    for LIVEIN).  */\n \n void\n-compute_global_livein (bitmap livein ATTRIBUTE_UNUSED, bitmap def_blocks ATTRIBUTE_UNUSED)\n+compute_global_livein (bitmap livein, bitmap def_blocks)\n {\n-  basic_block bb, *worklist, *tos;\n   unsigned i;\n   bitmap_iterator bi;\n+  VEC (basic_block, heap) *worklist;\n \n-  tos = worklist\n-    = (basic_block *) xmalloc (sizeof (basic_block) * (last_basic_block + 1));\n+  /* Normally the work list size is bounded by the number of basic\n+     blocks in the largest loop.  We don't know this number, but we\n+     can be fairly sure that it will be relatively small.  */\n+  worklist = VEC_alloc (basic_block, heap, MAX (8, n_basic_blocks / 128));\n \n   EXECUTE_IF_SET_IN_BITMAP (livein, 0, i, bi)\n-    *tos++ = BASIC_BLOCK (i);\n+    VEC_safe_push (basic_block, heap, worklist, BASIC_BLOCK (i));\n \n   /* Iterate until the worklist is empty.  */\n-  while (tos != worklist)\n+  while (! VEC_empty (basic_block, worklist))\n     {\n       edge e;\n       edge_iterator ei;\n \n       /* Pull a block off the worklist.  */\n-      bb = *--tos;\n+      basic_block bb = VEC_pop (basic_block, worklist);\n \n       /* For each predecessor block.  */\n       FOR_EACH_EDGE (e, ei, bb->preds)\n@@ -437,16 +439,15 @@ compute_global_livein (bitmap livein ATTRIBUTE_UNUSED, bitmap def_blocks ATTRIBU\n \n \t  /* None of this is necessary for the entry block.  */\n \t  if (pred != ENTRY_BLOCK_PTR\n-\t      && ! bitmap_bit_p (livein, pred_index)\n-\t      && ! bitmap_bit_p (def_blocks, pred_index))\n+\t      && ! bitmap_bit_p (def_blocks, pred_index)\n+\t      && bitmap_set_bit (livein, pred_index))\n \t    {\n-\t      *tos++ = pred;\n-\t      bitmap_set_bit (livein, pred_index);\n+\t      VEC_safe_push (basic_block, heap, worklist, pred);\n \t    }\n \t}\n     }\n \n-  free (worklist);\n+  VEC_free (basic_block, heap, worklist);\n }\n \n "}, {"sha": "19a8eca268e65191a3fd513191f013a883a137be", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5a154bb3d23948235bd9481fecca779b1f62d/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=07c5a154bb3d23948235bd9481fecca779b1f62d", "patch": "@@ -160,10 +160,8 @@ add_exit_phis_var (tree var, bitmap livein, bitmap exits)\n   basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (var));\n   bitmap_iterator bi;\n \n-  if (is_gimple_reg (var))\n-    bitmap_clear_bit (livein, def_bb->index);\n-  else\n-    bitmap_set_bit (livein, def_bb->index);\n+  gcc_checking_assert (is_gimple_reg (var));\n+  bitmap_clear_bit (livein, def_bb->index);\n \n   def = BITMAP_ALLOC (NULL);\n   bitmap_set_bit (def, def_bb->index);\n@@ -272,7 +270,7 @@ find_uses_to_rename_stmt (gimple stmt, bitmap *use_blocks, bitmap need_phis)\n   if (is_gimple_debug (stmt))\n     return;\n \n-  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_ALL_USES)\n+  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n     find_uses_to_rename_use (bb, var, use_blocks, need_phis);\n }\n "}]}