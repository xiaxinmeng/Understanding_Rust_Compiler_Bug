{"sha": "6f0398bb141c3c8d8d7de2a50756a469dccac958", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYwMzk4YmIxNDFjM2M4ZDhkN2RlMmE1MDc1NmE0NjlkY2NhYzk1OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-07-16T12:41:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-07-16T12:41:03Z"}, "message": "istream.tcc (basic_istream<>::operator>>(short&), [...]): Implement resolution of DR 696, [Ready] in Frankfurt.\n\n2009-07-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/istream.tcc (basic_istream<>::operator>>(short&),\n\tbasic_istream<>::operator>>(int&)): Implement resolution of DR 696,\n\t[Ready] in Frankfurt.\n\t* include/tr1_impl/regex (regex_traits<>::value): Adjust.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/dr696.cc:\n\tNew.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/dr696.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc:\n\tAdjust.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/13.cc:\n\tLikewise.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 696.\n\n\t* include/bits/istream.tcc: Minor clean-up to the initializers of the\n\t__err locals.\n\t* include/bits/ostream.tcc: Likewise.\n\t* src/compatibility.cc: Likewise.\n\t* src/istream.cc: Likewise.\n\nFrom-SVN: r149704", "tree": {"sha": "99493d7b042cda0bed6ffcc2a12b4622e1518acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99493d7b042cda0bed6ffcc2a12b4622e1518acc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f0398bb141c3c8d8d7de2a50756a469dccac958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f0398bb141c3c8d8d7de2a50756a469dccac958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f0398bb141c3c8d8d7de2a50756a469dccac958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f0398bb141c3c8d8d7de2a50756a469dccac958/comments", "author": null, "committer": null, "parents": [{"sha": "ba0c638e22ebcfe54e45f43463a4c89392659695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0c638e22ebcfe54e45f43463a4c89392659695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0c638e22ebcfe54e45f43463a4c89392659695"}], "stats": {"total": 400, "additions": 340, "deletions": 60}, "files": [{"sha": "346349d4212c2234825713088c3918053c7c1d25", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -1,3 +1,25 @@\n+2009-07-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/istream.tcc (basic_istream<>::operator>>(short&),\n+\tbasic_istream<>::operator>>(int&)): Implement resolution of DR 696,\n+\t[Ready] in Frankfurt.\n+\t* include/tr1_impl/regex (regex_traits<>::value): Adjust.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/dr696.cc:\n+\tNew.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/dr696.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc:\n+\tAdjust.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/13.cc:\n+\tLikewise.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 696.\n+\n+\t* include/bits/istream.tcc: Minor clean-up to the initializers of the\n+\t__err locals.\n+\t* include/bits/ostream.tcc: Likewise.\n+\t* src/compatibility.cc: Likewise.\n+\t* src/istream.cc: Likewise.\n+\n 2009-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/type_traits (common_type): Remove workaround for"}, {"sha": "45a7c6bda4f7a4a36434af138133f2102372be46", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -736,6 +736,12 @@ requirements of the license of GCC.\n     <listitem><para>Make the member functions table and classic_table public.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#696\">696</ulink>:\n+        <emphasis>istream::operator&gt;&gt;(int&) broken</emphasis>\n+    </term>\n+    <listitem><para>Implement the straightforward resolution.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#761\">761</ulink>:\n         <emphasis>unordered_map needs an at() member function</emphasis>\n     </term>"}, {"sha": "d005f736f03d9b4e831bb2e2aa72684bf1f62258", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 89, "deletions": 39, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -46,7 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     basic_istream<_CharT, _Traits>::sentry::\n     sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)\n     {\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       if (__in.good())\n \t{\n \t  if (__in.tie())\n@@ -89,15 +89,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tsentry __cerb(*this, false);\n \tif (__cerb)\n \t  {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n \t      {\n \t\tconst __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t\t__ng.get(*this, 0, *this, __err, __v);\n \t      }\n \t    __catch(__cxxabiv1::__forced_unwind&)\n \t      {\n-\t\tthis->_M_setstate(ios_base::badbit);\t\t\n+\t\tthis->_M_setstate(ios_base::badbit);\n \t\t__throw_exception_again;\n \t      }\n \t    __catch(...)\n@@ -115,35 +115,85 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 118. basic_istream uses nonexistent num_get member functions.\n-      long __l;\n-      _M_extract(__l);\n-      if (!this->fail())\n+      sentry __cerb(*this, false);\n+      if (__cerb)\n \t{\n-\t  if (__gnu_cxx::__numeric_traits<short>::__min <= __l\n-\t      && __l <= __gnu_cxx::__numeric_traits<short>::__max)\n-\t    __n = short(__l);\n-\t  else\n-\t    this->setstate(ios_base::failbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n+\t  __try\n+\t    {\n+\t      long __l;\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __l);\n+\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 696. istream::operator>>(int&) broken.\n+\t      if (__l < __gnu_cxx::__numeric_traits<short>::__min)\n+\t\t{\n+\t\t  __err |= ios_base::failbit;\n+\t\t  __n = __gnu_cxx::__numeric_traits<short>::__min;\n+\t\t}\n+\t      else if (__l > __gnu_cxx::__numeric_traits<short>::__max)\n+\t\t{\n+\t\t  __err |= ios_base::failbit;\n+\t\t  __n = __gnu_cxx::__numeric_traits<short>::__max;\n+\t\t}\n+\t      else\n+\t\t__n = short(__l);\n+\t    }\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n+\t    {\n+\t      this->_M_setstate(ios_base::badbit);\n+\t      __throw_exception_again;\n+\t    }\n+\t  __catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n \t}\n       return *this;\n     }\n-    \n+\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>&\n     basic_istream<_CharT, _Traits>::\n     operator>>(int& __n)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 118. basic_istream uses nonexistent num_get member functions.\n-      long __l;\n-      _M_extract(__l);\n-      if (!this->fail())\n+      sentry __cerb(*this, false);\n+      if (__cerb)\n \t{\n-\t  if (__gnu_cxx::__numeric_traits<int>::__min <= __l\n-\t      && __l <= __gnu_cxx::__numeric_traits<int>::__max)\n-\t    __n = int(__l);\n-\t  else\n-\t    this->setstate(ios_base::failbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n+\t  __try\n+\t    {\n+\t      long __l;\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __l);\n+\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 696. istream::operator>>(int&) broken.\n+\t      if (__l < __gnu_cxx::__numeric_traits<int>::__min)\n+\t\t{\n+\t\t  __err |= ios_base::failbit;\n+\t\t  __n = __gnu_cxx::__numeric_traits<int>::__min;\n+\t\t}\n+\t      else if (__l > __gnu_cxx::__numeric_traits<int>::__max)\n+\t\t{\n+\t\t  __err |= ios_base::failbit;\t      \n+\t\t  __n = __gnu_cxx::__numeric_traits<int>::__max;\n+\t\t}\n+\t      else\n+\t\t__n = int(__l);\n+\t    }\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n+\t    {\n+\t      this->_M_setstate(ios_base::badbit);\n+\t      __throw_exception_again;\n+\t    }\n+\t  __catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -153,7 +203,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     basic_istream<_CharT, _Traits>::\n     operator>>(__streambuf_type* __sbout)\n     {\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, false);\n       if (__cerb && __sbout)\n \t{\n@@ -188,7 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const int_type __eof = traits_type::eof();\n       int_type __c = __eof;\n       _M_gcount = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n@@ -222,7 +272,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     get(char_type& __c)\n     {\n       _M_gcount = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n@@ -259,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     get(char_type* __s, streamsize __n, char_type __delim)\n     {\n       _M_gcount = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n@@ -306,7 +356,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     get(__streambuf_type& __sb, char_type __delim)\n     {\n       _M_gcount = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n@@ -350,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     getline(char_type* __s, streamsize __n, char_type __delim)\n     {\n       _M_gcount = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n       if (__cerb)\n         {\n@@ -413,7 +463,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n@@ -446,7 +496,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n         {\n-          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+          ios_base::iostate __err = ios_base::goodbit;\n           __try\n             {\n               const int_type __eof = traits_type::eof();\n@@ -508,7 +558,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n         {\n-          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+          ios_base::iostate __err = ios_base::goodbit;\n           __try\n             {\n               const int_type __eof = traits_type::eof();\n@@ -574,7 +624,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      __c = this->rdbuf()->sgetc();\n@@ -603,7 +653,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      _M_gcount = this->rdbuf()->sgetn(__s, __n);\n@@ -632,7 +682,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      // Cannot compare int_type with streamsize generically.\n@@ -666,7 +716,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n@@ -699,7 +749,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n@@ -732,7 +782,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      __streambuf_type* __sb = this->rdbuf();\n@@ -788,7 +838,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __try\n \t{\n \t  if (!this->fail())\n@@ -821,7 +871,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __try\n \t{\n \t  if (!this->fail())\n@@ -858,7 +908,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const __int_type __cb = __in.rdbuf()->sbumpc();\n@@ -891,7 +941,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef ctype<_CharT>\t\t\t\t__ctype_type;\n \n       streamsize __extracted = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{"}, {"sha": "1147212aa14648682aa053bf5389a4b8cd759fba", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -66,7 +66,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tsentry __cerb(*this);\n \tif (__cerb)\n \t  {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n \t      {\n \t\tconst __num_put_type& __np = __check_facet(this->_M_num_put);\n@@ -119,7 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     basic_ostream<_CharT, _Traits>::\n     operator<<(__streambuf_type* __sbin)\n     {\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this);\n       if (__cerb && __sbin)\n \t{\n@@ -157,7 +157,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this);\n       if (__cerb)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const int_type __put = this->rdbuf()->sputc(__c);\n@@ -213,7 +213,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 60. What is a formatted input function?\n       // basic_ostream::flush() is *not* an unformatted output function.\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __try\n \t{\n \t  if (this->rdbuf() && this->rdbuf()->pubsync() == -1)\n@@ -257,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     basic_ostream<_CharT, _Traits>::\n     seekp(pos_type __pos)\n     {\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __try\n \t{\n \t  if (!this->fail())\n@@ -289,7 +289,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     basic_ostream<_CharT, _Traits>::\n     seekp(off_type __off, ios_base::seekdir __dir)\n     {\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __try\n \t{\n \t  if (!this->fail())"}, {"sha": "6f76a98141962a15f2debebc6760b51053147eee", "filename": "libstdc++-v3/include/tr1_impl/regex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -688,13 +688,13 @@ namespace regex_constants\n     value(_Ch_type __ch, int __radix) const\n     {\n       std::basic_istringstream<_Ch_type> __is(string_type(1, __ch));\n-      int __v = -1;\n+      int __v;\n       if (__radix == 8)\n \t__is >> std::oct;\n       else if (__radix == 16)\n \t__is >> std::hex;\n       __is >> __v;\n-      return __v;\n+      return __is.fail() ? -1 : __v;\n     }\n \n   // [7.8] Class basic_regex"}, {"sha": "73432681ecffa8cca5042006894eb8160b3aa9f7", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n@@ -136,7 +136,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();"}, {"sha": "7b7f0bf927871eb08c857155d833633c702a2338", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -37,7 +37,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     getline(char_type* __s, streamsize __n, char_type __delim)\n     {\n       _M_gcount = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n@@ -118,7 +118,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n@@ -203,7 +203,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef __istream_type::__ctype_type\t__ctype_type;\n \n       streamsize __extracted = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n@@ -286,7 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef __string_type::size_type\t\t__size_type;\n \n       __size_type __extracted = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n@@ -368,7 +368,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       __size_type __extracted = 0;\n       const __size_type __n = __str.max_size();\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n \t{\n@@ -444,7 +444,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     getline(char_type* __s, streamsize __n, char_type __delim)\n     {\n       _M_gcount = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n@@ -525,7 +525,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n \t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n \t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n@@ -614,7 +614,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       __size_type __extracted = 0;\n       const __size_type __n = __str.max_size();\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n \t{"}, {"sha": "ac5533a496e5ed5deadfbbc0cbd96d907f993272", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -58,8 +58,8 @@ void test13()\n   i = 0;\n   iss2.str(digits);\n   iss2.clear();\n-  iss2 >> i; \n-  VERIFY( i == 0 );\n+  iss2 >> i;\n+  VERIFY( i == numeric_limits<int>::max() );\n   VERIFY( iss2.fail() );\n }\n "}, {"sha": "a1a71cc571f4e41cb746e7076362b19f7fba7dec", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/dr696.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fdr696.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fdr696.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fdr696.cc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -0,0 +1,101 @@\n+// 2009-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// DR 696.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  short s1 = 0;\n+  ostringstream oss1;\n+  oss1 << numeric_limits<short>::max();\n+  istringstream iss1(oss1.str());\n+  iss1 >> s1;\n+  VERIFY( s1 == numeric_limits<short>::max() );\n+  VERIFY( !iss1.fail() && iss1.eof() );\n+\n+  short s2 = 0;\n+  ostringstream oss2;\n+  oss2 << static_cast<long long>(numeric_limits<short>::max()) + 1;\n+  istringstream iss2(oss2.str());\n+  iss2 >> s2;\n+  VERIFY( s2 == numeric_limits<short>::max() );\n+  VERIFY( iss2.fail() && iss2.eof() );\n+\n+  short s3 = 0;\n+  ostringstream oss3;\n+  oss3 << numeric_limits<short>::min();\n+  istringstream iss3(oss3.str());\n+  iss3 >> s3;\n+  VERIFY( s3 == numeric_limits<short>::min() );\n+  VERIFY( !iss3.fail() && iss3.eof() );\n+\n+  short s4 = 0;\n+  ostringstream oss4;\n+  oss4 << static_cast<long long>(numeric_limits<short>::min()) - 1;\n+  istringstream iss4(oss4.str());\n+  iss4 >> s4;\n+  VERIFY( s4 == numeric_limits<short>::min() );\n+  VERIFY( iss4.fail() && iss4.eof() );\n+\n+  int i1 = 0;\n+  ostringstream oss5;\n+  oss5 << numeric_limits<int>::max();\n+  istringstream iss5(oss5.str());\n+  iss5 >> i1;\n+  VERIFY( i1 == numeric_limits<int>::max() );\n+  VERIFY( !iss5.fail() && iss5.eof() );\n+\n+  int i2 = 0;\n+  ostringstream oss6;\n+  oss6 << static_cast<long long>(numeric_limits<int>::max()) + 1;\n+  istringstream iss6(oss6.str());\n+  iss6 >> i2;\n+  VERIFY( i1 == numeric_limits<int>::max() );\n+  VERIFY( iss6.fail() && iss6.eof() );\n+\n+  int i3 = 0;\n+  ostringstream oss7;\n+  oss7 << numeric_limits<int>::min();\n+  istringstream iss7(oss7.str());\n+  iss7 >> i3;\n+  VERIFY( i3 == numeric_limits<int>::min() );\n+  VERIFY( !iss7.fail() && iss7.eof() );\n+\n+  int i4 = 0;\n+  ostringstream oss8;\n+  oss8 << static_cast<long long>(numeric_limits<int>::min()) - 1;\n+  istringstream iss8(oss8.str());\n+  iss8 >> i4;\n+  VERIFY( i4 == numeric_limits<int>::min() );\n+  VERIFY( iss8.fail() && iss8.eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0a44b1ffb09476be9a9f82aa4676e9f5dd342719", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/13.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -56,7 +56,7 @@ void test13()\n   iss2.str(digits);\n   iss2.clear();\n   iss2 >> i;\n-  VERIFY( i == 0 );\n+  VERIFY( i == numeric_limits<int>::max() );\n   VERIFY( iss2.fail() );\n }\n "}, {"sha": "2ed5b309b0e2569442279979b47953b34cc244a4", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/dr696.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fdr696.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0398bb141c3c8d8d7de2a50756a469dccac958/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fdr696.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fdr696.cc?ref=6f0398bb141c3c8d8d7de2a50756a469dccac958", "patch": "@@ -0,0 +1,101 @@\n+// 2009-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// DR 696.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  short s1 = 0;\n+  wostringstream oss1;\n+  oss1 << numeric_limits<short>::max();\n+  wistringstream iss1(oss1.str());\n+  iss1 >> s1;\n+  VERIFY( s1 == numeric_limits<short>::max() );\n+  VERIFY( !iss1.fail() && iss1.eof() );\n+\n+  short s2 = 0;\n+  wostringstream oss2;\n+  oss2 << static_cast<long long>(numeric_limits<short>::max()) + 1;\n+  wistringstream iss2(oss2.str());\n+  iss2 >> s2;\n+  VERIFY( s2 == numeric_limits<short>::max() );\n+  VERIFY( iss2.fail() && iss2.eof() );\n+\n+  short s3 = 0;\n+  wostringstream oss3;\n+  oss3 << numeric_limits<short>::min();\n+  wistringstream iss3(oss3.str());\n+  iss3 >> s3;\n+  VERIFY( s3 == numeric_limits<short>::min() );\n+  VERIFY( !iss3.fail() && iss3.eof() );\n+\n+  short s4 = 0;\n+  wostringstream oss4;\n+  oss4 << static_cast<long long>(numeric_limits<short>::min()) - 1;\n+  wistringstream iss4(oss4.str());\n+  iss4 >> s4;\n+  VERIFY( s4 == numeric_limits<short>::min() );\n+  VERIFY( iss4.fail() && iss4.eof() );\n+\n+  int i1 = 0;\n+  wostringstream oss5;\n+  oss5 << numeric_limits<int>::max();\n+  wistringstream iss5(oss5.str());\n+  iss5 >> i1;\n+  VERIFY( i1 == numeric_limits<int>::max() );\n+  VERIFY( !iss5.fail() && iss5.eof() );\n+\n+  int i2 = 0;\n+  wostringstream oss6;\n+  oss6 << static_cast<long long>(numeric_limits<int>::max()) + 1;\n+  wistringstream iss6(oss6.str());\n+  iss6 >> i2;\n+  VERIFY( i1 == numeric_limits<int>::max() );\n+  VERIFY( iss6.fail() && iss6.eof() );\n+\n+  int i3 = 0;\n+  wostringstream oss7;\n+  oss7 << numeric_limits<int>::min();\n+  wistringstream iss7(oss7.str());\n+  iss7 >> i3;\n+  VERIFY( i3 == numeric_limits<int>::min() );\n+  VERIFY( !iss7.fail() && iss7.eof() );\n+\n+  int i4 = 0;\n+  wostringstream oss8;\n+  oss8 << static_cast<long long>(numeric_limits<int>::min()) - 1;\n+  wistringstream iss8(oss8.str());\n+  iss8 >> i4;\n+  VERIFY( i4 == numeric_limits<int>::min() );\n+  VERIFY( iss8.fail() && iss8.eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}