{"sha": "746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ2YTllZmE4MGQ5ZDNmYmE4YmVlOTQ4MmRhN2I3ZTBlM2Q0MjhlNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-04-07T04:56:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-04-07T04:56:45Z"}, "message": "pa.h (MACHINE_DEPENDENT_REORG): Define.\n\n\t* pa.h (MACHINE_DEPENDENT_REORG): Define.\n\t* pa.md (switch_jump): New pattern for jumps which implement\n\ta switch table.\n\t* pa.c (pa_reorg): New function to explode jump tables.\n\t(pa_adjust_insn_length): Account for jumps in switch tables with\n\tunfilled delay slots.\n\nFrom-SVN: r9318", "tree": {"sha": "fef5d8989af0d030e69b3664f98cc129251e55ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fef5d8989af0d030e69b3664f98cc129251e55ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5/comments", "author": null, "committer": null, "parents": [{"sha": "605a99f6be7cd0d2c31d382b0aea37cae9aa03bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "6d6a165d302e577fe038aff735b7de530d4e4ae9", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "patch": "@@ -2759,6 +2759,12 @@ pa_adjust_insn_length (insn, length)\n       else\n \treturn 0;\n     }\n+  /* Jumps inside switch tables which have unfilled delay slots \n+     also need adjustment.  */\n+  else if (GET_CODE (insn) == JUMP_INSN\n+\t   && simplejump_p (insn)\n+\t   && GET_MODE (PATTERN (insn)) == DImode)\n+    return 4;\n   /* Millicode insn with an unfilled delay slot.  */\n   else if (GET_CODE (insn) == INSN\n \t   && GET_CODE (pat) != SEQUENCE\n@@ -4392,3 +4398,77 @@ jump_in_call_delay (insn)\n   else\n     return 0;\n }\n+\n+\n+/* We use this hook to perform a PA specific optimization which is difficult\n+   to do in earlier passes.\n+\n+   We want the delay slots of branches within jump tables to be filled.\n+   None of the compiler passes at the moment even has the notion that a\n+   PA jump table doesn't contain addresses, but instead contains actual\n+   instructions!\n+\n+   Because we actually jump into the table, the addresses of each entry\n+   must stay contant in relation to the beginning of the table (which\n+   itself must stay constant relative to the instruction to jump into\n+   it).  I don't believe we can guarantee earlier passes of the compiler\n+   will adhere to those rules.\n+\n+   So, late in the compilation process we find all the jump tables, and\n+   expand them into real code -- eg each entry in the jump table vector\n+   will get an appropriate label followed by a jump to the final target.\n+\n+   Reorg and the final jump pass can then optimize these branches and\n+   fill their delay slots.  We end up with smaller, more efficient code.\n+\n+   The jump instructions within the table are special; we must be able \n+   to identify them during assembly output (if the jumps don't get filled\n+   we need to emit a nop rather than nullifying the delay slot)).  We\n+   identify jumps in switch tables by marking the SET with DImode.  */\n+\n+pa_reorg (insns)\n+     rtx insns;\n+{\n+  rtx insn;\n+\n+  /* This is fairly cheap, so always run it if optimizing.  */\n+  if (optimize > 0)\n+    {\n+      /* Find and explode all ADDR_VEC insns.  */\n+      insns = get_insns ();\n+      for (insn = insns; insn; insn = NEXT_INSN (insn))\n+\t{\n+\t  rtx pattern, tmp, location;\n+\t  unsigned int length, i;\n+\n+\t  /* Find an ADDR_VEC insn to explode.  */\n+\t  if (GET_CODE (insn) != JUMP_INSN\n+\t      || GET_CODE (PATTERN (insn)) != ADDR_VEC)\n+\t    continue;\n+\n+\t  pattern = PATTERN (insn);\n+\t  location = PREV_INSN (insn);\n+          length = XVECLEN (pattern, 0);\n+\t  for (i = 0; i < length; i++)\n+\t    {\n+\t      /* Emit the jump itself.  */\n+\t      tmp = gen_switch_jump (XEXP (XVECEXP (pattern, 0, i), 0));\n+\t      tmp = emit_jump_insn_after (tmp, location);\n+\t      JUMP_LABEL (tmp) = XEXP (XVECEXP (pattern, 0, i), 0);\n+\n+\t      /* Emit a BARRIER after the jump.  */\n+\t      location = NEXT_INSN (location);\n+\t      emit_barrier_after (location);\n+\n+\t      /* Put a CODE_LABEL before each so jump.c does not optimize\n+\t\t the jumps away.  */\n+\t      location = NEXT_INSN (location);\n+\t      tmp = gen_label_rtx ();\n+\t      LABEL_NUSES (tmp) = 1;\n+\t      emit_label_after (tmp, location);\n+\t      location = NEXT_INSN (location);\n+\t    }\n+\t  /* Delete the ADDR_VEC.  */\n+\t  delete_insn (insn);\n+\t}\n+    }"}, {"sha": "f6d8c8394cb5831b4e0cb81cc6aa8e74e3382fe7", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "patch": "@@ -239,6 +239,9 @@ extern int target_flags;\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n+/* Machine dependent reorg pass.  */\n+#define MACHINE_DEPENDENT_REORG(X) pa_reorg(X)\n+\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -D_HPUX_SOURCE -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Asystem(unix) -Asystem(bsd) -Acpu(hppa) -Amachine(hppa)\""}, {"sha": "ff80e618ce017c52fca6a1302d31bf08801d81c2", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "patch": "@@ -3405,6 +3405,13 @@\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n+(define_insn \"switch_jump\"\n+  [(set:DI (pc) (label_ref (match_operand 0 \"\" \"\")))]\n+  \"\"\n+  \"bl %l0,0%#\"\n+  [(set_attr \"type\" \"uncond_branch\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\""}]}