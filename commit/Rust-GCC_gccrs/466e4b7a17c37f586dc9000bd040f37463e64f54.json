{"sha": "466e4b7a17c37f586dc9000bd040f37463e64f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2ZTRiN2ExN2MzN2Y1ODZkYzkwMDBiZDA0MGYzNzQ2M2U2NGY1NA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-12-10T05:42:02Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-12-10T05:42:02Z"}, "message": "genopinit.c: Include tm_p.h in generated file.\n\n\t* genopinit.c: Include tm_p.h in generated file.\n\n\t* config/arm/neon.md (vec_set<mode>_internal): Use INTVAL\n\tto extract the integer from operands[2].\n\t(vec_setv2di_internal): Likewise.\n\n\t* config/arm/arm.c (arm_size_return_regs): Make return type\n\tunsigned.\n\t(arm_init_neon_builtins): Move code after declarations.\n\nFrom-SVN: r130736", "tree": {"sha": "7514c354622716ccfcebc69facff422e3a6c96e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7514c354622716ccfcebc69facff422e3a6c96e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/466e4b7a17c37f586dc9000bd040f37463e64f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466e4b7a17c37f586dc9000bd040f37463e64f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466e4b7a17c37f586dc9000bd040f37463e64f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466e4b7a17c37f586dc9000bd040f37463e64f54/comments", "author": null, "committer": null, "parents": [{"sha": "7fb446a36d03d6a772a7606c864259c0dbb55507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb446a36d03d6a772a7606c864259c0dbb55507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb446a36d03d6a772a7606c864259c0dbb55507"}], "stats": {"total": 103, "additions": 58, "deletions": 45}, "files": [{"sha": "157907fdd5a1b4ad13d324f82af139e18cece2ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=466e4b7a17c37f586dc9000bd040f37463e64f54", "patch": "@@ -1,3 +1,15 @@\n+2007-12-10  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* genopinit.c: Include tm_p.h in generated file.\n+\n+\t* config/arm/neon.md (vec_set<mode>_internal): Use INTVAL\n+\tto extract the integer from operands[2].\n+\t(vec_setv2di_internal): Likewise.\n+\n+\t* config/arm/arm.c (arm_size_return_regs): Make return type\n+\tunsigned.\n+\t(arm_init_neon_builtins): Move code after declarations.\n+\n 2007-12-10  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* reload.c (find_reloads_address_1): To properly mark as an"}, {"sha": "5b3b7035c15d8fe68b97a89495bbcb3be0ec74a7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=466e4b7a17c37f586dc9000bd040f37463e64f54", "patch": "@@ -77,7 +77,7 @@ static bool thumb_force_lr_save (void);\n static unsigned long thumb1_compute_save_reg_mask (void);\n static int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n static rtx emit_sfm (int, int);\n-static int arm_size_return_regs (void);\n+static unsigned arm_size_return_regs (void);\n static bool arm_assemble_integer (rtx, unsigned int, int);\n static const char *fp_const_from_val (REAL_VALUE_TYPE *);\n static arm_cc get_arm_condition_code (rtx);\n@@ -11801,7 +11801,7 @@ emit_multi_reg_push (unsigned long mask)\n }\n \n /* Calculate the size of the return value that is passed in registers.  */\n-static int\n+static unsigned\n arm_size_return_regs (void)\n {\n   enum machine_mode mode;\n@@ -14839,27 +14839,6 @@ arm_init_neon_builtins (void)\n   tree neon_intSI_type_node = make_signed_type (GET_MODE_PRECISION (SImode));\n   tree neon_intDI_type_node = make_signed_type (GET_MODE_PRECISION (DImode));\n   tree neon_float_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (neon_float_type_node) = FLOAT_TYPE_SIZE;\n-  layout_type (neon_float_type_node);\n-\n-  /* Define typedefs which exactly correspond to the modes we are basing vector\n-     types on.  If you change these names you'll need to change\n-     the table used by arm_mangle_type too.  */\n-  (*lang_hooks.types.register_builtin_type) (neon_intQI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_qi\");\n-  (*lang_hooks.types.register_builtin_type) (neon_intHI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_hi\");\n-  (*lang_hooks.types.register_builtin_type) (neon_intSI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_si\");\n-  (*lang_hooks.types.register_builtin_type) (neon_float_type_node,\n-\t\t\t\t\t     \"__builtin_neon_sf\");\n-  (*lang_hooks.types.register_builtin_type) (neon_intDI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_di\");\n-\n-  (*lang_hooks.types.register_builtin_type) (neon_polyQI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_poly8\");\n-  (*lang_hooks.types.register_builtin_type) (neon_polyHI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_poly16\");\n \n   tree intQI_pointer_node = build_pointer_type (neon_intQI_type_node);\n   tree intHI_pointer_node = build_pointer_type (neon_intHI_type_node);\n@@ -14913,32 +14892,12 @@ arm_init_neon_builtins (void)\n   tree intUSI_type_node = make_unsigned_type (GET_MODE_PRECISION (SImode));\n   tree intUDI_type_node = make_unsigned_type (GET_MODE_PRECISION (DImode));\n \n-  (*lang_hooks.types.register_builtin_type) (intUQI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_uqi\");\n-  (*lang_hooks.types.register_builtin_type) (intUHI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_uhi\");\n-  (*lang_hooks.types.register_builtin_type) (intUSI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_usi\");\n-  (*lang_hooks.types.register_builtin_type) (intUDI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_udi\");\n-\n   /* Opaque integer types for structures of vectors.  */\n   tree intEI_type_node = make_signed_type (GET_MODE_PRECISION (EImode));\n   tree intOI_type_node = make_signed_type (GET_MODE_PRECISION (OImode));\n   tree intCI_type_node = make_signed_type (GET_MODE_PRECISION (CImode));\n   tree intXI_type_node = make_signed_type (GET_MODE_PRECISION (XImode));\n \n-  (*lang_hooks.types.register_builtin_type) (intTI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_ti\");\n-  (*lang_hooks.types.register_builtin_type) (intEI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_ei\");\n-  (*lang_hooks.types.register_builtin_type) (intOI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_oi\");\n-  (*lang_hooks.types.register_builtin_type) (intCI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_ci\");\n-  (*lang_hooks.types.register_builtin_type) (intXI_type_node,\n-\t\t\t\t\t     \"__builtin_neon_xi\");\n-\n   /* Pointers to vector types.  */\n   tree V8QI_pointer_node = build_pointer_type (V8QI_type_node);\n   tree V4HI_pointer_node = build_pointer_type (V4HI_type_node);\n@@ -14986,6 +14945,47 @@ arm_init_neon_builtins (void)\n   tree reinterp_ftype_qreg[5][5];\n   tree dreg_types[5], qreg_types[5];\n \n+  TYPE_PRECISION (neon_float_type_node) = FLOAT_TYPE_SIZE;\n+  layout_type (neon_float_type_node);\n+\n+  /* Define typedefs which exactly correspond to the modes we are basing vector\n+     types on.  If you change these names you'll need to change\n+     the table used by arm_mangle_type too.  */\n+  (*lang_hooks.types.register_builtin_type) (neon_intQI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_qi\");\n+  (*lang_hooks.types.register_builtin_type) (neon_intHI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_hi\");\n+  (*lang_hooks.types.register_builtin_type) (neon_intSI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_si\");\n+  (*lang_hooks.types.register_builtin_type) (neon_float_type_node,\n+\t\t\t\t\t     \"__builtin_neon_sf\");\n+  (*lang_hooks.types.register_builtin_type) (neon_intDI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_di\");\n+\n+  (*lang_hooks.types.register_builtin_type) (neon_polyQI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_poly8\");\n+  (*lang_hooks.types.register_builtin_type) (neon_polyHI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_poly16\");\n+  (*lang_hooks.types.register_builtin_type) (intUQI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_uqi\");\n+  (*lang_hooks.types.register_builtin_type) (intUHI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_uhi\");\n+  (*lang_hooks.types.register_builtin_type) (intUSI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_usi\");\n+  (*lang_hooks.types.register_builtin_type) (intUDI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_udi\");\n+\n+  (*lang_hooks.types.register_builtin_type) (intTI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_ti\");\n+  (*lang_hooks.types.register_builtin_type) (intEI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_ei\");\n+  (*lang_hooks.types.register_builtin_type) (intOI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_oi\");\n+  (*lang_hooks.types.register_builtin_type) (intCI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_ci\");\n+  (*lang_hooks.types.register_builtin_type) (intXI_type_node,\n+\t\t\t\t\t     \"__builtin_neon_xi\");\n+\n   dreg_types[0] = V8QI_type_node;\n   dreg_types[1] = V4HI_type_node;\n   dreg_types[2] = V2SI_type_node;"}, {"sha": "0c312e7c336809561ac1851894fb9ce939e2ca1c", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=466e4b7a17c37f586dc9000bd040f37463e64f54", "patch": "@@ -751,7 +751,7 @@\n           (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_NEON\"\n {\n-  HOST_WIDE_INT elem = ffs (operands[2]) - 1;\n+  HOST_WIDE_INT elem = ffs ((int) INTVAL (operands[2])) - 1;\n   int half_elts = GET_MODE_NUNITS (<MODE>mode) / 2;\n   int elt = elem % half_elts;\n   int hi = (elem / half_elts) * 2;\n@@ -775,7 +775,7 @@\n           (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_NEON\"\n {\n-  HOST_WIDE_INT elem = ffs (operands[2]) - 1;\n+  HOST_WIDE_INT elem = ffs ((int) INTVAL (operands[2])) - 1;\n   int regno = REGNO (operands[0]) + 2 * elem;\n \n   operands[0] = gen_rtx_REG (DImode, regno);"}, {"sha": "a497eb881b18097eb92bf80156424d5bad73af27", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466e4b7a17c37f586dc9000bd040f37463e64f54/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=466e4b7a17c37f586dc9000bd040f37463e64f54", "patch": "@@ -480,6 +480,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"coretypes.h\\\"\\n\");\n   printf (\"#include \\\"tm.h\\\"\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\");\n+  printf (\"#include \\\"tm_p.h\\\"\\n\");\n   printf (\"#include \\\"flags.h\\\"\\n\");\n   printf (\"#include \\\"insn-config.h\\\"\\n\");\n   printf (\"#include \\\"recog.h\\\"\\n\");"}]}