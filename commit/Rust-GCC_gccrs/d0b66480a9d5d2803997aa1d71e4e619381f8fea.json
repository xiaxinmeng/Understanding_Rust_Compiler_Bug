{"sha": "d0b66480a9d5d2803997aa1d71e4e619381f8fea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiNjY0ODBhOWQ1ZDI4MDM5OTdhYTFkNzFlNGU2MTkzODFmOGZlYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-26T13:02:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-26T13:02:39Z"}, "message": "cgraph.c (cgraph_speculative_call_info): Fix parameter order and formating; add sanity check.\n\n\t* cgraph.c (cgraph_speculative_call_info): Fix parameter order and formating;\n\tadd sanity check.\n\t(cgraph_resolve_speculation): Add FIXME about scaling profiles.\n\t(cgraph_redirect_edge_call_stmt_to_callee): Fix ICE in debug dump.\n\t* ipa-inline.c (heap_edge_removal_hook): Reset node growth cache.\n\t(resolve_noninline_speculation): Update callee keys, too.\n\nFrom-SVN: r201996", "tree": {"sha": "fb9a26e728b4bd4cd574a058f51148c74eb20e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb9a26e728b4bd4cd574a058f51148c74eb20e25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b66480a9d5d2803997aa1d71e4e619381f8fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b66480a9d5d2803997aa1d71e4e619381f8fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b66480a9d5d2803997aa1d71e4e619381f8fea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b66480a9d5d2803997aa1d71e4e619381f8fea/comments", "author": null, "committer": null, "parents": [{"sha": "0f9aaac79ed0b5348ea80cd325a04406bbf4ca7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9aaac79ed0b5348ea80cd325a04406bbf4ca7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9aaac79ed0b5348ea80cd325a04406bbf4ca7d"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "d004d5496a8ec1b8f9922835158d3ce746a84e24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b66480a9d5d2803997aa1d71e4e619381f8fea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b66480a9d5d2803997aa1d71e4e619381f8fea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b66480a9d5d2803997aa1d71e4e619381f8fea", "patch": "@@ -1,3 +1,12 @@\n+2013-08-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_speculative_call_info): Fix parameter order and formating;\n+\tadd sanity check.\n+\t(cgraph_resolve_speculation): Add FIXME about scaling profiles.\n+\t(cgraph_redirect_edge_call_stmt_to_callee): Fix ICE in debug dump.\n+\t* ipa-inline.c (heap_edge_removal_hook): Reset node growth cache.\n+\t(resolve_noninline_speculation): Update callee keys, too.\n+\n 2013-08-26  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.h (tree_decl_with_vis): Add cxx_constructor, cxx_destructor."}, {"sha": "dc4e7b994b6f390efb7dafdba9f2fa2f455dd5af", "filename": "gcc/cgraph.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b66480a9d5d2803997aa1d71e4e619381f8fea/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b66480a9d5d2803997aa1d71e4e619381f8fea/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=d0b66480a9d5d2803997aa1d71e4e619381f8fea", "patch": "@@ -1113,8 +1113,8 @@ cgraph_turn_edge_to_speculative (struct cgraph_edge *e,\n \n void\n cgraph_speculative_call_info (struct cgraph_edge *e,\n-\t\t\t      struct cgraph_edge *&indirect,\n \t\t\t      struct cgraph_edge *&direct,\n+\t\t\t      struct cgraph_edge *&indirect,\n \t\t\t      struct ipa_ref *&reference)\n {\n   struct ipa_ref *ref;\n@@ -1137,23 +1137,30 @@ cgraph_speculative_call_info (struct cgraph_edge *e,\n \t}\n       else\n \tfor (e = e->caller->callees; \n-\t     e2->call_stmt != e->call_stmt || e2->lto_stmt_uid != e->lto_stmt_uid;\n+\t     e2->call_stmt != e->call_stmt\n+\t     || e2->lto_stmt_uid != e->lto_stmt_uid;\n \t     e = e->next_callee)\n \t  ;\n     }\n   gcc_assert (e->speculative && e2->speculative);\n-  indirect = e;\n-  direct = e2;\n+  direct = e;\n+  indirect = e2;\n \n   reference = NULL;\n-  for (i = 0; ipa_ref_list_reference_iterate (&e->caller->symbol.ref_list, i, ref); i++)\n+  for (i = 0; ipa_ref_list_reference_iterate (&e->caller->symbol.ref_list,\n+\t\t\t\t\t      i, ref); i++)\n     if (ref->speculative\n \t&& ((ref->stmt && ref->stmt == e->call_stmt)\n \t    || (ref->lto_stmt_uid == e->lto_stmt_uid)))\n       {\n \treference = ref;\n \tbreak;\n       }\n+\n+  /* Speculative edge always consist of all three components - direct edge,\n+     indirect and reference.  */\n+  \n+  gcc_assert (e && e2 && ref);\n }\n \n /* Redirect callee of E to N.  The function does not update underlying\n@@ -1209,6 +1216,8 @@ cgraph_resolve_speculation (struct cgraph_edge *edge, tree callee_decl)\n         fprintf (dump_file, \"Speculative call turned into direct call.\\n\");\n       edge = e2;\n       e2 = tmp;\n+      /* FIXME:  If EDGE is inlined, we should scale up the frequencies and counts\n+         in the functions inlined through it.  */\n     }\n   edge->count += e2->count;\n   edge->frequency += e2->frequency;\n@@ -1305,12 +1314,12 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n       else if (!gimple_check_call_matching_types (e->call_stmt, e->callee->symbol.decl,\n \t\t\t\t\t\t  true))\n \t{\n-\t  e = cgraph_resolve_speculation (e, NULL);\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not expanding speculative call of %s/%i -> %s/%i\\n\"\n \t\t     \"Type mismatch.\\n\",\n \t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->symbol.order,\n \t\t     xstrdup (cgraph_node_name (e->callee)), e->callee->symbol.order);\n+\t  e = cgraph_resolve_speculation (e, NULL);\n \t}\n       /* Expand speculation into GIMPLE code.  */\n       else"}, {"sha": "2cdf87519c50cd4917491cea5d1e2314f1c366ca", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b66480a9d5d2803997aa1d71e4e619381f8fea/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b66480a9d5d2803997aa1d71e4e619381f8fea/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=d0b66480a9d5d2803997aa1d71e4e619381f8fea", "patch": "@@ -1397,6 +1397,8 @@ add_new_edges_to_heap (fibheap_t heap, vec<cgraph_edge_p> new_edges)\n static void\n heap_edge_removal_hook (struct cgraph_edge *e, void *data)\n {\n+  if (e->callee)\n+    reset_node_growth_cache (e->callee);\n   if (e->aux)\n     {\n       fibheap_delete_node ((fibheap_t)data, (fibnode_t)e->aux);\n@@ -1467,12 +1469,12 @@ resolve_noninline_speculation (fibheap_t edge_heap, struct cgraph_edge *edge)\n       bitmap updated_nodes = BITMAP_ALLOC (NULL);\n \n       cgraph_resolve_speculation (edge, NULL);\n-      reset_node_growth_cache (where);\n       reset_edge_caches (where);\n       inline_update_overall_summary (where);\n       update_caller_keys (edge_heap, where,\n \t\t\t  updated_nodes, NULL);\n-      reset_node_growth_cache (where);\n+      update_callee_keys (edge_heap, where,\n+\t\t\t  updated_nodes);\n       BITMAP_FREE (updated_nodes);\n     }\n }"}]}