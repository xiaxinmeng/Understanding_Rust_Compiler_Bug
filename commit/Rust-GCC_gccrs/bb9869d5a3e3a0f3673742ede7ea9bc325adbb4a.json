{"sha": "bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI5ODY5ZDVhM2UzYTBmMzY3Mzc0MmVkZTdlYTliYzMyNWFkYmI0YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-01-17T17:51:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-01-17T17:51:25Z"}, "message": "C++: Fix crash in warn_for_memset within templates (PR c++/83814)\n\ngcc/c-family/ChangeLog:\n\tPR c++/83814\n\t* c-common.c (fold_for_warn): Move to c/c-fold.c and cp/expr.c.\n\ngcc/c/ChangeLog:\n\tPR c++/83814\n\t* c-fold.c (fold_for_warn): Move from c-common.c, reducing to just\n\tthe C part.\n\ngcc/cp/ChangeLog:\n\tPR c++/83814\n\t* expr.c (fold_for_warn): Move from c-common.c, reducing to just\n\tthe C++ part.  If processing a template, call\n\tfold_non_dependent_expr rather than fully folding.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/83814\n\tPR c++/83902\n\t* g++.dg/wrappers/pr83814.C: New test case.\n\t* g++.dg/wrappers/pr83902.C: New test case.\n\nFrom-SVN: r256804", "tree": {"sha": "4ad7e64ad7b745b5bef09ce376f20f5235b2d803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad7e64ad7b745b5bef09ce376f20f5235b2d803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2edcd7083601bc08789787331399624b85b843b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2edcd7083601bc08789787331399624b85b843b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2edcd7083601bc08789787331399624b85b843b"}], "stats": {"total": 142, "additions": 129, "deletions": 13}, "files": [{"sha": "d5012e251b4a7675a88a6c2d40d9d5169ae68208", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -1,3 +1,8 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/83814\n+\t* c-common.c (fold_for_warn): Move to c/c-fold.c and cp/expr.c.\n+\n 2018-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (dump_number): Add FLOAT_P parameter."}, {"sha": "858ed68f2d1c76a035319aba9893d60a748970eb", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -868,19 +868,6 @@ c_get_substring_location (const substring_loc &substr_loc,\n }\n \n \f\n-/* Fold X for consideration by one of the warning functions when checking\n-   whether an expression has a constant value.  */\n-\n-tree\n-fold_for_warn (tree x)\n-{\n-  if (c_dialect_cxx ())\n-    return c_fully_fold (x, /*for_init*/false, /*maybe_constp*/NULL);\n-  else\n-    /* The C front-end has already folded X appropriately.  */\n-    return x;\n-}\n-\n /* Return true iff T is a boolean promoted to int.  */\n \n bool"}, {"sha": "52ed9f05e4c7245eb1078a9fea568548e4076ecb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -1,3 +1,9 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/83814\n+\t* c-fold.c (fold_for_warn): Move from c-common.c, reducing to just\n+\tthe C part.\n+\n 2018-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/83801"}, {"sha": "480e34ce4f417783c7f1dbc218f15305bdc0a959", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -676,3 +676,13 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n     }\n   return ret;\n }\n+\n+/* Fold X for consideration by one of the warning functions when checking\n+   whether an expression has a constant value.  */\n+\n+tree\n+fold_for_warn (tree x)\n+{\n+  /* The C front-end has already folded X appropriately.  */\n+  return x;\n+}"}, {"sha": "49cf0c05a5cba1d5d476d4e38a6263feb39bc5ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -1,3 +1,10 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/83814\n+\t* expr.c (fold_for_warn): Move from c-common.c, reducing to just\n+\tthe C++ part.  If processing a template, call\n+\tfold_non_dependent_expr rather than fully folding.\n+\n 2018-01-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/81067 - redundant NULL warning."}, {"sha": "49a17a62424ec2422c3f6c7edf4dc3cc10954be8", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -315,3 +315,18 @@ mark_exp_read (tree exp)\n     }\n }\n \n+/* Fold X for consideration by one of the warning functions when checking\n+   whether an expression has a constant value.  */\n+\n+tree\n+fold_for_warn (tree x)\n+{\n+  /* C++ implementation.  */\n+\n+  /* It's not generally safe to fully fold inside of a template, so\n+     call fold_non_dependent_expr instead.  */\n+  if (processing_template_decl)\n+    return fold_non_dependent_expr (x);\n+\n+  return c_fully_fold (x, /*for_init*/false, /*maybe_constp*/NULL);\n+}"}, {"sha": "d6c744e60de46ed0985a5f3d3601ab7becb13216", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -1,3 +1,10 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/83814\n+\tPR c++/83902\n+\t* g++.dg/wrappers/pr83814.C: New test case.\n+\t* g++.dg/wrappers/pr83902.C: New test case.\n+\n 2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR lto/83121"}, {"sha": "b9f8faad92ff749f4049b431a1d26d6f12bc9cc0", "filename": "gcc/testsuite/g++.dg/wrappers/pr83814.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83814.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83814.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83814.C?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -0,0 +1,70 @@\n+/* Verify that our memset warnings don't crash when folding\n+   arguments within a template (PR c++/83814).  */\n+\n+// { dg-options \"-Wno-int-to-pointer-cast -Wmemset-transposed-args -Wmemset-elt-size\" }\n+\n+template <class>\n+void test_1()\n+{\n+  __builtin_memset (int() - char(), 0, 0);\n+}\n+\n+template <class>\n+void test_2()\n+{\n+  __builtin_memset (0, 0, int() - char());\n+}\n+\n+template <class>\n+void test_3 (unsigned a, int c)\n+{\n+  __builtin_memset((char *)c + a, 0, a);\n+}\n+\n+template <class>\n+void test_4 (unsigned a, int c)\n+{\n+  __builtin_memset(0, 0, (char *)c + a);\n+}\n+\n+/* Verify that we warn for -Wmemset-transposed-args inside\n+   a template.  */\n+\n+char buf[1024];\n+\n+template <class>\n+void test_5 ()\n+{\n+  __builtin_memset (buf, sizeof buf, 0); // { dg-warning \"transposed parameters\" }\n+}\n+\n+/* Adapted from c-c++-common/memset-array.c; verify that \n+   -Wmemset-elt-size works within a template.  */\n+\n+enum a {\n+  a_1,\n+  a_2,\n+  a_n\n+};\n+int t1[20];\n+int t2[a_n];\n+\n+struct s\n+{\n+  int t[20];\n+};\n+\n+template<class>\n+void foo (struct s *s)\n+{\n+  __builtin_memset (t1, 0, 20); // { dg-warning \"element size\" }\n+\n+  // This case requires reading through an enum value:\n+  __builtin_memset (t2, 0, a_n); // { dg-warning \"element size\" }\n+\n+  __builtin_memset (s->t, 0, 20); // { dg-warning \"element size\" }\n+\n+  // These cases require folding of arg2 within a template:\n+  __builtin_memset (t2, 0, a_n + 0); // { dg-warning \"element size\" }\n+  __builtin_memset (t2, 0, a_n * 1); // { dg-warning \"element size\" }\n+}"}, {"sha": "3d334e768d61c18024e44446d3db91c0312c7c5d", "filename": "gcc/testsuite/g++.dg/wrappers/pr83902.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83902.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83902.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83902.C?ref=bb9869d5a3e3a0f3673742ede7ea9bc325adbb4a", "patch": "@@ -0,0 +1,9 @@\n+extern \"C\" void *memset (void *, int, __SIZE_TYPE__);\n+void *p;\n+\n+template <int T>\n+struct B\n+{\n+  void foo () { memset (p, 0, 4 * T * sizeof(float)); }\n+};\n+"}]}