{"sha": "36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmZjlkZmJiZWMwNmFmYzY5YzY0MmZmNDYwYWJiZDRjYmJkNzhlMQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-05-01T18:54:17Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-05-01T18:54:17Z"}, "message": "re PR target/57091 (ICE: in assign_by_spills, at lra-assigns.c:1268 with -mcmodel=large and indirect call)\n\n2013-05-01  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/57091\n\t* lra-constraints.c (best_small_class_operands_num): Remove.\n\t(process_alt_operands): Remove small_class_operands_num.  Take\n\tsmall classes operands into losers and only if the operand is not\n\tmatched.  Modify debugging output.\n\t(curr_insn_transform): Remove best_small_class_operands_num.\n\tPrint insn name.\n\n2013-05-01  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/57091\n\t* gcc.target/i386/pr57091.c: New test.\n\nFrom-SVN: r198503", "tree": {"sha": "3d964bfc9cbd6407c7cc9bddcdd01cfca4d2daf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d964bfc9cbd6407c7cc9bddcdd01cfca4d2daf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "97f21c09b5d564640c1539760e94008bdedc40c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "patch": "@@ -1,3 +1,13 @@\n+2013-05-01  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/57091\n+\t* lra-constraints.c (best_small_class_operands_num): Remove.\n+\t(process_alt_operands): Remove small_class_operands_num.  Take\n+\tsmall classes operands into losers and only if the operand is not\n+\tmatched.  Modify debugging output.\n+\t(curr_insn_transform): Remove best_small_class_operands_num.\n+\tPrint insn name.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "94f965bd7e92f08c008308aa39d937c19a467245", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "patch": "@@ -1048,9 +1048,6 @@ static int goal_alt_number;\n /* Number of necessary reloads and overall cost reflecting the\n    previous value and other unpleasantness of the best alternative.  */\n static int best_losers, best_overall;\n-/* Number of small register classes used for operands of the best\n-   alternative.\t */\n-static int best_small_class_operands_num;\n /* Overall number hard registers used for reloads.  For example, on\n    some targets we need 2 general registers to reload DFmode and only\n    one floating point register.\t */\n@@ -1326,7 +1323,7 @@ static bool\n process_alt_operands (int only_alternative)\n {\n   bool ok_p = false;\n-  int nop, small_class_operands_num, overall, nalt;\n+  int nop, overall, nalt;\n   int n_alternatives = curr_static_id->n_alternatives;\n   int n_operands = curr_static_id->n_operands;\n   /* LOSERS counts the operands that don't fit this alternative and\n@@ -1405,6 +1402,7 @@ process_alt_operands (int only_alternative)\n       if (only_alternative >= 0 && nalt != only_alternative)\n \tcontinue;\n \n+            \n       overall = losers = reject = reload_nregs = reload_sum = 0;\n       for (nop = 0; nop < n_operands; nop++)\n \treject += (curr_static_id\n@@ -2006,6 +2004,9 @@ process_alt_operands (int only_alternative)\n \t\t  if (! no_regs_p)\n \t\t    reload_nregs\n \t\t      += ira_reg_class_max_nregs[this_alternative][mode];\n+\n+\t\t  if (SMALL_REGISTER_CLASS_P (this_alternative))\n+\t\t    reject += LRA_LOSER_COST_FACTOR / 2;\n \t\t}\n \n \t      /* We are trying to spill pseudo into memory.  It is\n@@ -2033,6 +2034,7 @@ process_alt_operands (int only_alternative)\n \t\t reloads.  */\n \t      if (!REG_P (op) || curr_static_id->operand[nop].type != OP_IN)\n \t\treject++;\n+\n \t    }\n \n \t  if (early_clobber_p)\n@@ -2178,15 +2180,9 @@ process_alt_operands (int only_alternative)\n \t      overall += LRA_LOSER_COST_FACTOR - 1;\n \t    }\n \t}\n-      small_class_operands_num = 0;\n-      for (nop = 0; nop < n_operands; nop++)\n-\tsmall_class_operands_num\n-\t  += SMALL_REGISTER_CLASS_P (curr_alt[nop]) ? 1 : 0;\n-\n       if (lra_dump_file != NULL)\n-\tfprintf (lra_dump_file, \"          alt=%d,overall=%d,losers=%d,\"\n-\t\t \"small_class_ops=%d,rld_nregs=%d\\n\",\n-\t\t nalt, overall, losers, small_class_operands_num, reload_nregs);\n+\tfprintf (lra_dump_file, \"          alt=%d,overall=%d,losers=%d,rld_nregs=%d\\n\",\n+\t\t nalt, overall, losers, reload_nregs);\n \n       /* If this alternative can be made to work by reloading, and it\n \t needs less reloading than the others checked so far, record\n@@ -2198,17 +2194,10 @@ process_alt_operands (int only_alternative)\n \t\t  || (best_overall == overall\n \t\t      /* If the cost of the reloads is the same,\n \t\t\t prefer alternative which requires minimal\n-\t\t\t number of small register classes for the\n-\t\t\t operands.  This improves chances of reloads\n-\t\t\t for insn requiring small register\n-\t\t\t classes.  */\n-\t\t      && (small_class_operands_num\n-\t\t\t  < best_small_class_operands_num\n-\t\t\t  || (small_class_operands_num\n-\t\t\t      == best_small_class_operands_num\n-\t\t\t      && (reload_nregs < best_reload_nregs\n-\t\t\t\t  || (reload_nregs == best_reload_nregs\n-\t\t\t\t      && best_reload_sum < reload_sum))))))))\n+\t\t\t number of reload regs.  */\n+\t\t      && (reload_nregs < best_reload_nregs\n+\t\t\t  || (reload_nregs == best_reload_nregs\n+\t\t\t      && best_reload_sum < reload_sum))))))\n \t{\n \t  for (nop = 0; nop < n_operands; nop++)\n \t    {\n@@ -2224,7 +2213,6 @@ process_alt_operands (int only_alternative)\n \t  goal_alt_swapped = curr_swapped;\n \t  best_overall = overall;\n \t  best_losers = losers;\n-\t  best_small_class_operands_num = small_class_operands_num;\n \t  best_reload_nregs = reload_nregs;\n \t  best_reload_sum = reload_sum;\n \t  goal_alt_number = nalt;\n@@ -2826,7 +2814,7 @@ curr_insn_transform (void)\n      operands together against the register constraints.  */\n \n   best_losers = best_overall = INT_MAX;\n-  best_small_class_operands_num = best_reload_sum = 0;\n+  best_reload_sum = 0;\n \n   curr_swapped = false;\n   goal_alt_swapped = false;\n@@ -3033,7 +3021,10 @@ curr_insn_transform (void)\n \t  for (; *p != '\\0' && *p != ',' && *p != '#'; p++)\n \t    fputc (*p, lra_dump_file);\n \t}\n-      fprintf (lra_dump_file, \"\\n\");\n+      if (INSN_CODE (curr_insn) >= 0\n+          && (p = get_insn_name (INSN_CODE (curr_insn))) != NULL)\n+        fprintf (lra_dump_file, \" {%s}\", p);\n+       fprintf (lra_dump_file, \"\\n\");\n     }\n \n   /* Right now, for any pair of operands I and J that are required to"}, {"sha": "939d4596b6d760c53fe6a87ea5ed362f8de7ae8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "patch": "@@ -1,3 +1,8 @@\n+2013-05-01  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/57091\n+\t* gcc.target/i386/pr57091.c: New test.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/vect-vaddv.c: New."}, {"sha": "4fc7ed769ba80f2ce32965836a0a8e109c74d12b", "filename": "gcc/testsuite/gcc.target/i386/pr57091.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57091.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ff9dfbbec06afc69c642ff460abbd4cbbd78e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57091.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57091.c?ref=36ff9dfbbec06afc69c642ff460abbd4cbbd78e1", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mcmodel=large\"  { target lp64 } } */\n+void (*bar)();\n+\n+void foo (void)\n+{\n+  bar ();\n+}"}]}