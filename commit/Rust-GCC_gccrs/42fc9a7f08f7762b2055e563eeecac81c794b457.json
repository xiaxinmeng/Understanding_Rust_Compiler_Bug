{"sha": "42fc9a7f08f7762b2055e563eeecac81c794b457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmYzlhN2YwOGY3NzYyYjIwNTVlNTYzZWVlY2FjODFjNzk0YjQ1Nw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2012-12-05T10:34:31Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2012-12-05T10:34:31Z"}, "message": "[AARCH64] Add support for vectorizable standard math patterns.\n\ngcc/\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_builtin_vectorized_function): New.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_builtin_vectorized_function): Declare.\n\t* config/aarch64/aarch64-simd-builtins.def (frintz, frintp): Add.\n\t(frintm, frinti, frintx, frinta, fcvtzs, fcvtzu): Likewise.\n\t(fcvtas, fcvtau, fcvtps, fcvtpu, fcvtms, fcvtmu): Likewise.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_frint_<frint_suffix><mode>): New.\n\t(<frint_pattern><mode>2): Likewise.\n\t(aarch64_fcvt<frint_suffix><su><mode>): Likewise.\n\t(l<fcvt_pattern><su_optab><fcvt_target><VDQF:mode>2): Likewise.\n\t* config/aarch64/aarch64.c (TARGET_VECTORIZE_BUILTINS): Define.\n\t(TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION): Likewise.\n\t* config/aarch64/aarch64.md\n\t(btrunc<mode>2, ceil<mode>2, floor<mode>2)\n\t(round<mode>2, rint<mode>2, nearbyint<mode>2): Consolidate as...\n\t(<frint_pattern><mode>2): ...this.\n\t(lceil<su_optab><mode><mode>2, lfloor<su_optab><mode><mode>2)\n\t(lround<su_optab><mode><mode>2)\n\t(lrint<su_optab><mode><mode>2): Consolidate as...\n\t(l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2): ... this.\n\t* config/aarch64/iterators.md (fcvt_target): New.\n\t(FCVT_TARGET): Likewise.\n\t(FRINT): Likewise.\n\t(FCVT): Likewise.\n\t(frint_pattern): Likewise.\n\t(frint_suffix): Likewise.\n\t(fcvt_pattern): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.dg/vect/vect-rounding-btrunc.c: New test.\n\t* gcc.dg/vect/vect-rounding-btruncf.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-ceil.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-ceilf.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-floor.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-floorf.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-lceil.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-lfloor.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-nearbyint.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-nearbyintf.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-round.c: Likewise.\n\t* gcc.dg/vect/vect-rounding-roundf.c: Likewise.\n\t* target-supports.exp\n\t(check_effective_target_vect_call_btrunc): New.\n\t(check_effective_target_vect_call_btruncf): Likewise.\n\t(check_effective_target_vect_call_ceil): Likewise.\n\t(check_effective_target_vect_call_ceilf): Likewise.\n\t(check_effective_target_vect_call_floor): Likewise.\n\t(check_effective_target_vect_call_floorf): Likewise.\n\t(check_effective_target_vect_call_lceil): Likewise.\n\t(check_effective_target_vect_call_lfloor): Likewise.\n\t(check_effective_target_vect_call_nearbyint): Likewise.\n\t(check_effective_target_vect_call_nearbyintf): Likewise.\n\t(check_effective_target_vect_call_round): Likewise.\n\t(check_effective_target_vect_call_roundf): Likewise.\n\nFrom-SVN: r194197", "tree": {"sha": "7add6443c2ec20e9136161c82953fe3d054b8ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7add6443c2ec20e9136161c82953fe3d054b8ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42fc9a7f08f7762b2055e563eeecac81c794b457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fc9a7f08f7762b2055e563eeecac81c794b457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42fc9a7f08f7762b2055e563eeecac81c794b457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fc9a7f08f7762b2055e563eeecac81c794b457/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be4c5193199667c1e167ad558f4c8a9504eeeda6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4c5193199667c1e167ad558f4c8a9504eeeda6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be4c5193199667c1e167ad558f4c8a9504eeeda6"}], "stats": {"total": 756, "additions": 654, "deletions": 102}, "files": [{"sha": "aa10fd35db8e5b75b929be2efe297b156281cf52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -1,3 +1,35 @@\n+2012-12-05  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_builtin_vectorized_function): New.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_builtin_vectorized_function): Declare.\n+\t* config/aarch64/aarch64-simd-builtins.def (frintz, frintp): Add.\n+\t(frintm, frinti, frintx, frinta, fcvtzs, fcvtzu): Likewise.\n+\t(fcvtas, fcvtau, fcvtps, fcvtpu, fcvtms, fcvtmu): Likewise.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_frint_<frint_suffix><mode>): New.\n+\t(<frint_pattern><mode>2): Likewise.\n+\t(aarch64_fcvt<frint_suffix><su><mode>): Likewise.\n+\t(l<fcvt_pattern><su_optab><fcvt_target><VDQF:mode>2): Likewise.\n+\t* config/aarch64/aarch64.c (TARGET_VECTORIZE_BUILTINS): Define.\n+\t(TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION): Likewise.\n+\t* config/aarch64/aarch64.md\n+\t(btrunc<mode>2, ceil<mode>2, floor<mode>2)\n+\t(round<mode>2, rint<mode>2, nearbyint<mode>2): Consolidate as...\n+\t(<frint_pattern><mode>2): ...this.\n+\t(lceil<su_optab><mode><mode>2, lfloor<su_optab><mode><mode>2)\n+\t(lround<su_optab><mode><mode>2)\n+\t(lrint<su_optab><mode><mode>2): Consolidate as...\n+\t(l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2): ... this.\n+\t* config/aarch64/iterators.md (fcvt_target): New.\n+\t(FCVT_TARGET): Likewise.\n+\t(FRINT): Likewise.\n+\t(FCVT): Likewise.\n+\t(frint_pattern): Likewise.\n+\t(frint_suffix): Likewise.\n+\t(fcvt_pattern): Likewise.\n+\n 2012-12-05  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* passes.c (pass_init_dump_file): Only open a clean graph dump file if"}, {"sha": "a683afd0bb6afee3663194342e1396b009019f78", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -1221,3 +1221,70 @@ aarch64_expand_builtin (tree exp,\n \n   return NULL_RTX;\n }\n+\n+tree\n+aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n+{\n+  enum machine_mode in_mode, out_mode;\n+  int in_n, out_n;\n+\n+  if (TREE_CODE (type_out) != VECTOR_TYPE\n+      || TREE_CODE (type_in) != VECTOR_TYPE)\n+    return NULL_TREE;\n+\n+  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  out_n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+\n+#undef AARCH64_CHECK_BUILTIN_MODE\n+#define AARCH64_CHECK_BUILTIN_MODE(C, N) 1\n+#define AARCH64_FIND_FRINT_VARIANT(N) \\\n+  (AARCH64_CHECK_BUILTIN_MODE (2, D) \\\n+    ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_##N##v2df] \\\n+    : (AARCH64_CHECK_BUILTIN_MODE (4, S) \\\n+\t? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_##N##v4sf] \\\n+\t: (AARCH64_CHECK_BUILTIN_MODE (2, S) \\\n+\t   ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_##N##v2sf] \\\n+\t   : NULL_TREE)))\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    {\n+      enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n+      switch (fn)\n+\t{\n+#undef AARCH64_CHECK_BUILTIN_MODE\n+#define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n+  (out_mode == N##Fmode && out_n == C \\\n+   && in_mode == N##Fmode && in_n == C)\n+\tcase BUILT_IN_FLOOR:\n+\tcase BUILT_IN_FLOORF:\n+\t  return AARCH64_FIND_FRINT_VARIANT (frintm);\n+\tcase BUILT_IN_CEIL:\n+\tcase BUILT_IN_CEILF:\n+\t  return AARCH64_FIND_FRINT_VARIANT (frintp);\n+\tcase BUILT_IN_TRUNC:\n+\tcase BUILT_IN_TRUNCF:\n+\t  return AARCH64_FIND_FRINT_VARIANT (frintz);\n+\tcase BUILT_IN_ROUND:\n+\tcase BUILT_IN_ROUNDF:\n+\t  return AARCH64_FIND_FRINT_VARIANT (frinta);\n+\tcase BUILT_IN_NEARBYINT:\n+\tcase BUILT_IN_NEARBYINTF:\n+\t  return AARCH64_FIND_FRINT_VARIANT (frinti);\n+#undef AARCH64_CHECK_BUILTIN_MODE\n+#define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n+  (out_mode == N##Imode && out_n == C \\\n+   && in_mode == N##Fmode && in_n == C)\n+\tcase BUILT_IN_LFLOOR:\n+\t  return AARCH64_FIND_FRINT_VARIANT (fcvtms);\n+\tcase BUILT_IN_LCEIL:\n+\t  return AARCH64_FIND_FRINT_VARIANT (fcvtps);\n+\tdefault:\n+\t  return NULL_TREE;\n+      }\n+    }\n+\n+  return NULL_TREE;\n+}\n+#undef AARCH64_CHECK_BUILTIN_MODE\n+#undef AARCH64_FIND_FRINT_VARIANT"}, {"sha": "2110970c3588b06c92e49355c8f74390e59b3bcd", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -236,4 +236,9 @@ rtx aarch64_expand_builtin (tree exp,\n \t\t\t    int ignore ATTRIBUTE_UNUSED);\n tree aarch64_builtin_decl (unsigned, bool ATTRIBUTE_UNUSED);\n \n+tree\n+aarch64_builtin_vectorized_function (tree fndecl,\n+\t\t\t\t     tree type_out,\n+\t\t\t\t     tree type_in);\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "b344120ae90ce16b4512fbf3b96246a2a3d378fe", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -206,3 +206,21 @@\n   BUILTIN_VDQ_BHSI (BINOP, smin)\n   BUILTIN_VDQ_BHSI (BINOP, umax)\n   BUILTIN_VDQ_BHSI (BINOP, umin)\n+\n+  /* Implemented by aarch64_frint<frint_suffix><mode>.  */\n+  BUILTIN_VDQF (UNOP, frintz)\n+  BUILTIN_VDQF (UNOP, frintp)\n+  BUILTIN_VDQF (UNOP, frintm)\n+  BUILTIN_VDQF (UNOP, frinti)\n+  BUILTIN_VDQF (UNOP, frintx)\n+  BUILTIN_VDQF (UNOP, frinta)\n+\n+  /* Implemented by aarch64_fcvt<frint_suffix><su><mode>.  */\n+  BUILTIN_VDQF (UNOP, fcvtzs)\n+  BUILTIN_VDQF (UNOP, fcvtzu)\n+  BUILTIN_VDQF (UNOP, fcvtas)\n+  BUILTIN_VDQF (UNOP, fcvtau)\n+  BUILTIN_VDQF (UNOP, fcvtps)\n+  BUILTIN_VDQF (UNOP, fcvtpu)\n+  BUILTIN_VDQF (UNOP, fcvtms)\n+  BUILTIN_VDQF (UNOP, fcvtmu)"}, {"sha": "8c9ceaca7e2dbf473ab319d1a2acdf4d9f152062", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -1240,6 +1240,46 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n+(define_insn \"aarch64_frint<frint_suffix><mode>\"\n+  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n+\t\t      FRINT))]\n+  \"TARGET_SIMD\"\n+  \"frint<frint_suffix>\\\\t%0.<Vtype>, %1.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_frint\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+;; Vector versions of the floating-point frint patterns.\n+;; Expands to btrunc, ceil, floor, nearbyint, rint, round.\n+(define_expand \"<frint_pattern><mode>2\"\n+  [(set (match_operand:VDQF 0 \"register_operand\")\n+\t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\")]\n+\t\t      FRINT))]\n+  \"TARGET_SIMD\"\n+  {})\n+\n+(define_insn \"aarch64_fcvt<frint_suffix><su><mode>\"\n+  [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\" \"=w\")\n+\t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>\n+\t\t\t       [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n+\t\t\t       FCVT)))]\n+  \"TARGET_SIMD\"\n+  \"fcvt<frint_suffix><su>\\\\t%0.<Vtype>, %1.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_fcvti\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+;; Vector versions of the fcvt standard patterns.\n+;; Expands to lbtrunc, lround, lceil, lfloor\n+(define_expand \"l<fcvt_pattern><su_optab><fcvt_target><VDQF:mode>2\"\n+  [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\")\n+\t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>\n+\t\t\t       [(match_operand:VDQF 1 \"register_operand\")]\n+\t\t\t       FCVT)))]\n+  \"TARGET_SIMD\"\n+  {})\n+\n (define_insn \"aarch64_vmls<mode>\"\n   [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n        (minus:VDQF (match_operand:VDQF 1 \"register_operand\" \"0\")"}, {"sha": "971e71f1ef4ea3bd2749854b473a821f12274d92", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -6879,6 +6879,13 @@ aarch64_c_mode_for_suffix (char suffix)\n #undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n #define TARGET_VECTORIZE_PREFERRED_SIMD_MODE aarch64_preferred_simd_mode\n \n+#undef TARGET_VECTORIZE_BUILTINS\n+#define TARGET_VECTORIZE_BUILTINS\n+\n+#undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n+#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n+  aarch64_builtin_vectorized_function\n+\n /* Section anchor support.  */\n \n #undef TARGET_MIN_ANCHOR_OFFSET"}, {"sha": "b59d53df86ac4de7056ac86eeec66c0f24442513", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 12, "deletions": 102, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -2325,117 +2325,27 @@\n ;; Floating-point intrinsics\n ;; -------------------------------------------------------------------\n \n-;; trunc - nothrow\n+;; frint floating-point round to integral standard patterns.\n+;; Expands to btrunc, ceil, floor, nearbyint, rint, round.\n \n-(define_insn \"btrunc<mode>2\"\n+(define_insn \"<frint_pattern><mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t UNSPEC_FRINTZ))]\n+\t(unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n+\t FRINT))]\n   \"TARGET_FLOAT\"\n-  \"frintz\\\\t%<s>0, %<s>1\"\n+  \"frint<frint_suffix>\\\\t%<s>0, %<s>1\"\n   [(set_attr \"v8type\" \"frint\")\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n-(define_insn \"*lbtrunc<su_optab><GPF:mode><GPI:mode>2\"\n+;; frcvt floating-point round to integer and convert standard patterns.\n+;; Expands to lbtrunc, lceil, lfloor, lround.\n+(define_insn \"l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-        (FIXUORS:GPI (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t\t      UNSPEC_FRINTZ)))]\n+\t(FIXUORS:GPI (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n+\t\t      FCVT)))]\n   \"TARGET_FLOAT\"\n-  \"fcvtz<su>\\\\t%<GPI:w>0, %<GPF:s>1\"\n-  [(set_attr \"v8type\" \"fcvtf2i\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n-)\n-\n-;; ceil - nothrow\n-\n-(define_insn \"ceil<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t UNSPEC_FRINTP))]\n-  \"TARGET_FLOAT\"\n-  \"frintp\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"v8type\" \"frint\")\n-   (set_attr \"mode\" \"<MODE>\")]\n-)\n-\n-(define_insn \"lceil<su_optab><GPF:mode><GPI:mode>2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-        (FIXUORS:GPI (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t\t      UNSPEC_FRINTP)))]\n-  \"TARGET_FLOAT\"\n-  \"fcvtp<su>\\\\t%<GPI:w>0, %<GPF:s>1\"\n-  [(set_attr \"v8type\" \"fcvtf2i\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n-)\n-\n-;; floor - nothrow\n-\n-(define_insn \"floor<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t UNSPEC_FRINTM))]\n-  \"TARGET_FLOAT\"\n-  \"frintm\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"v8type\" \"frint\")\n-   (set_attr \"mode\" \"<MODE>\")]\n-)\n-\n-(define_insn \"lfloor<su_optab><GPF:mode><GPI:mode>2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-        (FIXUORS:GPI (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t\t      UNSPEC_FRINTM)))]\n-  \"TARGET_FLOAT\"\n-  \"fcvtm<su>\\\\t%<GPI:w>0, %<GPF:s>1\"\n-  [(set_attr \"v8type\" \"fcvtf2i\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n-)\n-\n-;; nearbyint - nothrow\n-\n-(define_insn \"nearbyint<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t UNSPEC_FRINTI))]\n-  \"TARGET_FLOAT\"\n-  \"frinti\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"v8type\" \"frint\")\n-   (set_attr \"mode\" \"<MODE>\")]\n-)\n-\n-;; rint\n-\n-(define_insn \"rint<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t UNSPEC_FRINTX))]\n-  \"TARGET_FLOAT\"\n-  \"frintx\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"v8type\" \"frint\")\n-   (set_attr \"mode\" \"<MODE>\")]\n-)\n-\n-;; round - nothrow\n-\n-(define_insn \"round<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t UNSPEC_FRINTA))]\n-  \"TARGET_FLOAT\"\n-  \"frinta\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"v8type\" \"frint\")\n-   (set_attr \"mode\" \"<MODE>\")]\n-)\n-\n-(define_insn \"lround<su_optab><GPF:mode><GPI:mode>2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-        (FIXUORS:GPI (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t\t      UNSPEC_FRINTA)))]\n-  \"TARGET_FLOAT\"\n-  \"fcvta<su>\\\\t%<GPI:w>0, %<GPF:s>1\"\n+  \"fcvt<frint_suffix><su>\\\\t%<GPI:w>0, %<GPF:s>1\"\n   [(set_attr \"v8type\" \"fcvtf2i\")\n    (set_attr \"mode\" \"<GPF:MODE>\")\n    (set_attr \"mode2\" \"<GPI:MODE>\")]"}, {"sha": "31bc97748fdb59b7e84546932cb324a987cecc19", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -453,6 +453,9 @@\n (define_mode_attr atomic_sfx\n   [(QI \"b\") (HI \"h\") (SI \"\") (DI \"\")])\n \n+(define_mode_attr fcvt_target [(V2DF \"v2di\") (V4SF \"v4si\") (V2SF \"v2si\")])\n+(define_mode_attr FCVT_TARGET [(V2DF \"V2DI\") (V4SF \"V4SI\") (V2SF \"V2SI\")])\n+\n ;; -------------------------------------------------------------------\n ;; Code Iterators\n ;; -------------------------------------------------------------------\n@@ -647,6 +650,12 @@\n (define_int_iterator VCMP_U [UNSPEC_CMHS UNSPEC_CMHI UNSPEC_CMTST])\n \n \n+(define_int_iterator FRINT [UNSPEC_FRINTZ UNSPEC_FRINTP UNSPEC_FRINTM\n+\t\t\t     UNSPEC_FRINTI UNSPEC_FRINTX UNSPEC_FRINTA])\n+\n+(define_int_iterator FCVT [UNSPEC_FRINTZ UNSPEC_FRINTP UNSPEC_FRINTM\n+\t\t\t    UNSPEC_FRINTA])\n+\n ;; -------------------------------------------------------------------\n ;; Int Iterators Attributes.\n ;; -------------------------------------------------------------------\n@@ -729,3 +738,19 @@\n (define_int_attr offsetlr [(UNSPEC_SSLI\t\"1\") (UNSPEC_USLI \"1\")\n \t\t\t   (UNSPEC_SSRI\t\"0\") (UNSPEC_USRI \"0\")])\n \n+;; Standard pattern names for floating-point rounding instructions.\n+(define_int_attr frint_pattern [(UNSPEC_FRINTZ \"btrunc\")\n+\t\t\t\t(UNSPEC_FRINTP \"ceil\")\n+\t\t\t\t(UNSPEC_FRINTM \"floor\")\n+\t\t\t\t(UNSPEC_FRINTI \"nearbyint\")\n+\t\t\t\t(UNSPEC_FRINTX \"rint\")\n+\t\t\t\t(UNSPEC_FRINTA \"round\")])\n+\n+;; frint suffix for floating-point rounding instructions.\n+(define_int_attr frint_suffix [(UNSPEC_FRINTZ \"z\") (UNSPEC_FRINTP \"p\")\n+\t\t\t       (UNSPEC_FRINTM \"m\") (UNSPEC_FRINTI \"i\")\n+\t\t\t       (UNSPEC_FRINTX \"x\") (UNSPEC_FRINTA \"a\")])\n+\n+(define_int_attr fcvt_pattern [(UNSPEC_FRINTZ \"btrunc\") (UNSPEC_FRINTA \"round\")\n+\t\t\t       (UNSPEC_FRINTP \"ceil\") (UNSPEC_FRINTM \"floor\")])\n+"}, {"sha": "0bba403e0c5ec23bbc26d70bd3aa8d7ddeb2189d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -1,3 +1,31 @@\n+2012-12-05  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.dg/vect/vect-rounding-btrunc.c: New test.\n+\t* gcc.dg/vect/vect-rounding-btruncf.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-ceil.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-ceilf.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-floor.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-floorf.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-lceil.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-lfloor.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-nearbyint.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-nearbyintf.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-round.c: Likewise.\n+\t* gcc.dg/vect/vect-rounding-roundf.c: Likewise.\n+\t* target-supports.exp\n+\t(check_effective_target_vect_call_btrunc): New.\n+\t(check_effective_target_vect_call_btruncf): Likewise.\n+\t(check_effective_target_vect_call_ceil): Likewise.\n+\t(check_effective_target_vect_call_ceilf): Likewise.\n+\t(check_effective_target_vect_call_floor): Likewise.\n+\t(check_effective_target_vect_call_floorf): Likewise.\n+\t(check_effective_target_vect_call_lceil): Likewise.\n+\t(check_effective_target_vect_call_lfloor): Likewise.\n+\t(check_effective_target_vect_call_nearbyint): Likewise.\n+\t(check_effective_target_vect_call_nearbyintf): Likewise.\n+\t(check_effective_target_vect_call_round): Likewise.\n+\t(check_effective_target_vect_call_roundf): Likewise.\n+\n 2012-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/51238"}, {"sha": "7432fe76f5a6550f33e54ae0c2642490a6c112cd", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-btrunc.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-btrunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-btrunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-btrunc.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_call_btrunc } */\n+\n+#define N 32\n+\n+void\n+foo (double *output, double *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_trunc (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_btrunc } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0835e1b0f978d735422ba6e8695cea46fd1b89c5", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-btruncf.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-btruncf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-btruncf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-btruncf.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_call_btruncf } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_truncf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_btruncf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a430690f55894c531c6e466eb16f548f2b01862e", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-ceil.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-ceil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-ceil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-ceil.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_call_ceil } */\n+\n+#define N 32\n+\n+void\n+foo (double *output, double *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_ceil (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_ceil } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4d00924d30a9df07888a77fb9393fa24916a7f0e", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-ceilf.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-ceilf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-ceilf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-ceilf.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_call_ceilf } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_ceilf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_ceilf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8f1c9ecc48532b0fde76474e0659e5ba34addf86", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-floor.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-floor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-floor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-floor.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_call_floor } */\n+\n+#define N 32\n+\n+void\n+foo (double *output, double *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_floor (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_floor } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a68c2ec0a9f6fc3ecd20671ae2a1680e31b13750", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-floorf.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-floorf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-floorf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-floorf.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_call_floorf } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_floorf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_floorf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b4ed236e418e80392fd756fcf7b89af1f0c1eac1", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-lceil.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-lceil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-lceil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-lceil.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_call_lceil } */\n+\n+#define N 32\n+\n+void\n+foo (long *output, double *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_lceil (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_lceil } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5a366318387698bdf1624b2111c6f6477f1ef934", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-lfloor.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-lfloor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-lfloor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-lfloor.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_call_lfloor } */\n+\n+#define N 32\n+\n+void\n+foo (long *output, double *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_lfloor (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_lfloor } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "572dbd3b68fc0685936b29330fe083f967a8e54d", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-nearbyint.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-nearbyint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-nearbyint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-nearbyint.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_call_nearbyint } */\n+\n+#define N 32\n+\n+void\n+foo (double *output, double *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_nearbyint (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_nearbyint } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "73ca7deb059e257782951b23e7a443171dc71630", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-nearbyintf.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-nearbyintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-nearbyintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-nearbyintf.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_call_nearbyintf } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_nearbyintf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_nearbyintf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c298bbbfcd13d289dca1ef0cddc06fbb83451421", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-round.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-round.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-round.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-round.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_call_round } */\n+\n+#define N 32\n+\n+void\n+foo (double *output, double *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_round (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_round } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "362b9d655dc3e9f580ac2f34e0f71e5f84756026", "filename": "gcc/testsuite/gcc.dg/vect/vect-rounding-roundf.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-roundf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-roundf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-rounding-roundf.c?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_call_roundf } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_roundf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_roundf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "59d854f1d6c4a0a0f04112ddabe5e07d39df2959", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fc9a7f08f7762b2055e563eeecac81c794b457/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=42fc9a7f08f7762b2055e563eeecac81c794b457", "patch": "@@ -3925,6 +3925,222 @@ proc check_effective_target_vect_call_lrint { } {\n     return $et_vect_call_lrint\n }\n \n+# Return 1 if the target supports vector btrunc calls.\n+\n+proc check_effective_target_vect_call_btrunc { } {\n+    global et_vect_call_btrunc_saved\n+\n+    if [info exists et_vect_call_btrunc_saved] {\n+\tverbose \"check_effective_target_vect_call_btrunc: using cached result\" 2\n+    } else {\n+\tset et_vect_call_btrunc_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_btrunc_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_btrunc: returning $et_vect_call_btrunc_saved\" 2\n+    return $et_vect_call_btrunc_saved\n+}\n+\n+# Return 1 if the target supports vector btruncf calls.\n+\n+proc check_effective_target_vect_call_btruncf { } {\n+    global et_vect_call_btruncf_saved\n+\n+    if [info exists et_vect_call_btruncf_saved] {\n+\tverbose \"check_effective_target_vect_call_btruncf: using cached result\" 2\n+    } else {\n+\tset et_vect_call_btruncf_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_btruncf_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_btruncf: returning $et_vect_call_btruncf_saved\" 2\n+    return $et_vect_call_btruncf_saved\n+}\n+\n+# Return 1 if the target supports vector ceil calls.\n+\n+proc check_effective_target_vect_call_ceil { } {\n+    global et_vect_call_ceil_saved\n+\n+    if [info exists et_vect_call_ceil_saved] {\n+\tverbose \"check_effective_target_vect_call_ceil: using cached result\" 2\n+    } else {\n+\tset et_vect_call_ceil_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_ceil_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_ceil: returning $et_vect_call_ceil_saved\" 2\n+    return $et_vect_call_ceil_saved\n+}\n+\n+# Return 1 if the target supports vector ceilf calls.\n+\n+proc check_effective_target_vect_call_ceilf { } {\n+    global et_vect_call_ceilf_saved\n+\n+    if [info exists et_vect_call_ceilf_saved] {\n+\tverbose \"check_effective_target_vect_call_ceilf: using cached result\" 2\n+    } else {\n+\tset et_vect_call_ceilf_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_ceilf_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_ceilf: returning $et_vect_call_ceilf_saved\" 2\n+    return $et_vect_call_ceilf_saved\n+}\n+\n+# Return 1 if the target supports vector floor calls.\n+\n+proc check_effective_target_vect_call_floor { } {\n+    global et_vect_call_floor_saved\n+\n+    if [info exists et_vect_call_floor_saved] {\n+\tverbose \"check_effective_target_vect_call_floor: using cached result\" 2\n+    } else {\n+\tset et_vect_call_floor_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_floor_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_floor: returning $et_vect_call_floor_saved\" 2\n+    return $et_vect_call_floor_saved\n+}\n+\n+# Return 1 if the target supports vector floorf calls.\n+\n+proc check_effective_target_vect_call_floorf { } {\n+    global et_vect_call_floorf_saved\n+\n+    if [info exists et_vect_call_floorf_saved] {\n+\tverbose \"check_effective_target_vect_call_floorf: using cached result\" 2\n+    } else {\n+\tset et_vect_call_floorf_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_floorf_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_floorf: returning $et_vect_call_floorf_saved\" 2\n+    return $et_vect_call_floorf_saved\n+}\n+\n+# Return 1 if the target supports vector lceil calls.\n+\n+proc check_effective_target_vect_call_lceil { } {\n+    global et_vect_call_lceil_saved\n+\n+    if [info exists et_vect_call_lceil_saved] {\n+\tverbose \"check_effective_target_vect_call_lceil: using cached result\" 2\n+    } else {\n+\tset et_vect_call_lceil_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_lceil_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_lceil: returning $et_vect_call_lceil_saved\" 2\n+    return $et_vect_call_lceil_saved\n+}\n+\n+# Return 1 if the target supports vector lfloor calls.\n+\n+proc check_effective_target_vect_call_lfloor { } {\n+    global et_vect_call_lfloor_saved\n+\n+    if [info exists et_vect_call_lfloor_saved] {\n+\tverbose \"check_effective_target_vect_call_lfloor: using cached result\" 2\n+    } else {\n+\tset et_vect_call_lfloor_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_lfloor_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_lfloor: returning $et_vect_call_lfloor_saved\" 2\n+    return $et_vect_call_lfloor_saved\n+}\n+\n+# Return 1 if the target supports vector nearbyint calls.\n+\n+proc check_effective_target_vect_call_nearbyint { } {\n+    global et_vect_call_nearbyint_saved\n+\n+    if [info exists et_vect_call_nearbyint_saved] {\n+\tverbose \"check_effective_target_vect_call_nearbyint: using cached result\" 2\n+    } else {\n+\tset et_vect_call_nearbyint_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_nearbyint_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_nearbyint: returning $et_vect_call_nearbyint_saved\" 2\n+    return $et_vect_call_nearbyint_saved\n+}\n+\n+# Return 1 if the target supports vector nearbyintf calls.\n+\n+proc check_effective_target_vect_call_nearbyintf { } {\n+    global et_vect_call_nearbyintf_saved\n+\n+    if [info exists et_vect_call_nearbyintf_saved] {\n+\tverbose \"check_effective_target_vect_call_nearbyintf: using cached result\" 2\n+    } else {\n+\tset et_vect_call_nearbyintf_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_nearbyintf_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_nearbyintf: returning $et_vect_call_nearbyintf_saved\" 2\n+    return $et_vect_call_nearbyintf_saved\n+}\n+\n+# Return 1 if the target supports vector round calls.\n+\n+proc check_effective_target_vect_call_round { } {\n+    global et_vect_call_round_saved\n+\n+    if [info exists et_vect_call_round_saved] {\n+\tverbose \"check_effective_target_vect_call_round: using cached result\" 2\n+    } else {\n+\tset et_vect_call_round_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_round_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_round: returning $et_vect_call_round_saved\" 2\n+    return $et_vect_call_round_saved\n+}\n+\n+# Return 1 if the target supports vector roundf calls.\n+\n+proc check_effective_target_vect_call_roundf { } {\n+    global et_vect_call_roundf_saved\n+\n+    if [info exists et_vect_call_roundf_saved] {\n+\tverbose \"check_effective_target_vect_call_roundf: using cached result\" 2\n+    } else {\n+\tset et_vect_call_roundf_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t  set et_vect_call_roundf_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_call_roundf: returning $et_vect_call_roundf_saved\" 2\n+    return $et_vect_call_roundf_saved\n+}\n+\n # Return 1 if the target supports section-anchors\n \n proc check_effective_target_section_anchors { } {"}]}