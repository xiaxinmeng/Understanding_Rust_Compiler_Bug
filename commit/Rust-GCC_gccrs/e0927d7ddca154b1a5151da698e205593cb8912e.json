{"sha": "e0927d7ddca154b1a5151da698e205593cb8912e", "node_id": "C_kwDOANBUbNoAKGUwOTI3ZDdkZGNhMTU0YjFhNTE1MWRhNjk4ZTIwNTU5M2NiODkxMmU", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-10-21T22:46:13Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-10-22T07:23:02Z"}, "message": "xtensa: Make register A0 allocable for the CALL0 ABI\n\nThis patch offers an additional allocable register by RA for the CALL0\nABI.\n\n> Register a0 holds the return address upon entry to a function, but\n> unlike the windowed register ABI, it is not reserved for this purpose\n> and may hold other values after the return address has been saved.\n  - Xtensa ISA Reference Manual,\n                   8.1.2 \"CALL0 Register Usage and Stack Layout\" [p.589]\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa.cc (xtensa_conditional_register_usage):\n\tRemove register A0 from FIXED_REGS if the CALL0 ABI.\n\t(xtensa_expand_epilogue): Change to emit '(use (reg:SI A0_REG))'\n\tunconditionally after restoring callee-saved registers for\n\tsibling-call functions, in order to prevent misleading that\n\tregister A0 is free to use.", "tree": {"sha": "3d3ed9ce0c0c552d6c5899acc81d698840f7ecdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d3ed9ce0c0c552d6c5899acc81d698840f7ecdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0927d7ddca154b1a5151da698e205593cb8912e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0927d7ddca154b1a5151da698e205593cb8912e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0927d7ddca154b1a5151da698e205593cb8912e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0927d7ddca154b1a5151da698e205593cb8912e/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1043971957af092e265cc4553b2382398d7308ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1043971957af092e265cc4553b2382398d7308ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1043971957af092e265cc4553b2382398d7308ae"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "94a98c25f8c965e7c9a9d7d2abc3ad45692748ed", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0927d7ddca154b1a5151da698e205593cb8912e/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0927d7ddca154b1a5151da698e205593cb8912e/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=e0927d7ddca154b1a5151da698e205593cb8912e", "patch": "@@ -3471,15 +3471,14 @@ xtensa_expand_epilogue (bool sibcall_p)\n \t  if (xtensa_call_save_reg(regno))\n \t    {\n \t      rtx x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));\n-\t      rtx reg;\n \n \t      offset -= UNITS_PER_WORD;\n-\t      emit_move_insn (reg = gen_rtx_REG (SImode, regno),\n+\t      emit_move_insn (gen_rtx_REG (SImode, regno),\n \t\t\t      gen_frame_mem (SImode, x));\n-\t      if (regno == A0_REG && sibcall_p)\n-\t\temit_use (reg);\n \t    }\n \t}\n+      if (sibcall_p)\n+\temit_use (gen_rtx_REG (SImode, A0_REG));\n \n       if (cfun->machine->current_frame_size > 0)\n \t{\n@@ -4970,6 +4969,13 @@ xtensa_conditional_register_usage (void)\n   /* Remove hard FP register from the preferred reload registers set.  */\n   CLEAR_HARD_REG_BIT (reg_class_contents[(int)RL_REGS],\n \t\t      HARD_FRAME_POINTER_REGNUM);\n+\n+  /* Register A0 holds the return address upon entry to a function\n+     for the CALL0 ABI, but unlike the windowed register ABI, it is\n+     not reserved for this purpose and may hold other values after\n+     the return address has been saved.  */\n+  if (!TARGET_WINDOWED_ABI)\n+    fixed_regs[A0_REG] = 0;\n }\n \n /* Map hard register number to register class */"}]}