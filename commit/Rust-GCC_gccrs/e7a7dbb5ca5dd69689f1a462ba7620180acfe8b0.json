{"sha": "e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0", "node_id": "C_kwDOANBUbNoAKGU3YTdkYmI1Y2E1ZGQ2OTY4OWYxYTQ2MmJhNzYyMDE4MGFjZmU4YjA", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-20T03:13:38Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-01-07T15:09:05Z"}, "message": "Allow propagations from inner loop to outer loop.\n\nNULL is considered as an outer loop of any other loop.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/103750\n\t* fwprop.c (forward_propagate_into): Allow propagations from\n\tinner loop to outer loop.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/pr103750-fwprop-1.C: New test.", "tree": {"sha": "d1bbc118d8fb30d373851b30482656bd5aaa484f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1bbc118d8fb30d373851b30482656bd5aaa484f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659f8161f61d3f75c3a47cf646147e8f7b4dcb34"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "build.log", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0/build.log", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0/build.log", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/build.log?ref=e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0"}, {"sha": "3acb552f62f7e9102bd71cb2170da0a293399e6d", "filename": "gcc/fwprop.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0", "patch": "@@ -866,10 +866,13 @@ forward_propagate_into (use_info *use, bool reg_prop_only = false)\n   rtx src = SET_SRC (def_set);\n \n   /* Allow propagations into a loop only for reg-to-reg copies, since\n-     replacing one register by another shouldn't increase the cost.  */\n+     replacing one register by another shouldn't increase the cost.\n+     Propagations from inner loop to outer loop should also be ok.  */\n   struct loop *def_loop = def_insn->bb ()->cfg_bb ()->loop_father;\n   struct loop *use_loop = use->bb ()->cfg_bb ()->loop_father;\n-  if ((reg_prop_only || def_loop != use_loop)\n+  if ((reg_prop_only\n+       || (def_loop != use_loop\n+\t   && !flow_loop_nested_p (use_loop, def_loop)))\n       && (!reg_single_def_p (dest) || !reg_single_def_p (src)))\n     return false;\n "}, {"sha": "26987d307aa654ff17c412a1ad828cf376168bc7", "filename": "gcc/testsuite/g++.target/i386/pr103750-fwprop-1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103750-fwprop-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103750-fwprop-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103750-fwprop-1.C?ref=e7a7dbb5ca5dd69689f1a462ba7620180acfe8b0", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/103750.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++1y -march=cannonlake -fdump-rtl-fwprop1\" } */\n+/* { dg-final { scan-rtl-dump-not \"subreg:HI\\[ \\\\\\(\\]*reg:SI\\[^\\n]*\\n\\[^\\n]*UNSPEC_TZCNT\" \"fwprop1\" } } */\n+\n+#include<immintrin.h>\n+const char16_t *qustrchr(char16_t *n, char16_t *e, char16_t c) noexcept\n+{\n+  __m256i mch256 = _mm256_set1_epi16(c);\n+  for ( ; n < e; n += 32) {\n+    __m256i data1 = _mm256_loadu_si256(reinterpret_cast<const __m256i *>(n));\n+    __m256i data2 = _mm256_loadu_si256(reinterpret_cast<const __m256i *>(n) + 1);\n+    __mmask16 mask1 = _mm256_cmpeq_epu16_mask(data1, mch256);\n+    __mmask16 mask2 = _mm256_cmpeq_epu16_mask(data2, mch256);\n+    if (_kortestz_mask16_u8(mask1, mask2))\n+      continue;\n+\n+    unsigned idx = _tzcnt_u32(mask1);\n+    if (mask1 == 0) {\n+      idx = __tzcnt_u16(mask2);\n+      n += 16;\n+    }\n+    return n + idx;\n+  }\n+  return e;\n+}"}]}