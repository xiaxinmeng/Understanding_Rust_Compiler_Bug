{"sha": "a5b4ebc217afe6c31334e017d1fead4a6b8e53b2", "node_id": "C_kwDOANBUbNoAKGE1YjRlYmMyMTdhZmU2YzMxMzM0ZTAxN2QxZmVhZDRhNmI4ZTUzYjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-15T09:25:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-15T09:25:53Z"}, "message": "libstdc++: Poor man's case insensitive comparisons in time_get [PR71557]\n\nThis patch uses the same not completely correct case insensitive comparisons\nas used elsewhere in the same header.  Proper comparisons that would handle\neven multi-byte characters would be harder, but I don't see them implemented\nin __ctype's methods.\n\n2021-12-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/71557\n\t* include/bits/locale_facets_nonio.tcc (_M_extract_via_format):\n\tCompare characters other than format specifiers and whitespace\n\tcase insensitively.\n\t(_M_extract_name): Compare characters case insensitively.\n\t* testsuite/22_locale/time_get/get/char/71557.cc: New test.\n\t* testsuite/22_locale/time_get/get/wchar_t/71557.cc: New test.", "tree": {"sha": "9873099fcd6aeaa5053b69ab180b7aaca7f2405b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9873099fcd6aeaa5053b69ab180b7aaca7f2405b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f9fea41a767f6ad8cf3d521031048a2491f98b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9fea41a767f6ad8cf3d521031048a2491f98b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9fea41a767f6ad8cf3d521031048a2491f98b1"}], "stats": {"total": 266, "additions": 239, "deletions": 27}, "files": [{"sha": "3af810d43b49f6d4654d2bcd47754be74d12ec06", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=a5b4ebc217afe6c31334e017d1fead4a6b8e53b2", "patch": "@@ -910,7 +910,9 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t  else\n \t    {\n \t      // Verify format and input match, extract and discard.\n-\t      if (__format[__i] == *__beg)\n+\t      // TODO real case-insensitive comparison\n+\t      if (__ctype.tolower(__format[__i]) == __ctype.tolower(*__beg)\n+\t\t  || __ctype.toupper(__format[__i]) == __ctype.toupper(*__beg))\n \t\t++__beg;\n \t      else\n \t\t__tmperr |= ios_base::failbit;\n@@ -988,15 +990,15 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       bool __begupdated = false;\n \n       // Look for initial matches.\n-      // NB: Some of the locale data is in the form of all lowercase\n-      // names, and some is in the form of initially-capitalized\n-      // names. Look for both.\n       if (__beg != __end)\n \t{\n \t  const char_type __c = *__beg;\n+\t  // TODO real case-insensitive comparison\n+\t  const char_type __cl = __ctype.tolower(__c);\n+\t  const char_type __cu = __ctype.toupper(__c);\n \t  for (size_t __i1 = 0; __i1 < __indexlen; ++__i1)\n-\t    if (__c == __names[__i1][0]\n-\t\t|| __c == __ctype.toupper(__names[__i1][0]))\n+\t    if (__cl == __ctype.tolower(__names[__i1][0])\n+\t\t|| __cu == __ctype.toupper(__names[__i1][0]))\n \t      {\n \t\t__lengths[__nmatches]\n \t\t  = __traits_type::length(__names[__i1]);\n@@ -1023,15 +1025,22 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t      bool __match_longer = false;\n \n \t      if (__beg != __end)\n-\t\tfor (size_t __i3 = 0; __i3 < __nmatches; ++__i3)\n-\t\t  {\n-\t\t    __name = __names[__matches[__i3]];\n-\t\t    if (__lengths[__i3] > __pos && (__name[__pos] == *__beg))\n-\t\t      {\n-\t\t\t__match_longer = true;\n-\t\t\tbreak;\n-\t\t      }\n-\t\t  }\n+\t\t{\n+\t\t  // TODO real case-insensitive comparison\n+\t\t  const char_type __cl = __ctype.tolower(*__beg);\n+\t\t  const char_type __cu = __ctype.toupper(*__beg);\n+\t\t  for (size_t __i3 = 0; __i3 < __nmatches; ++__i3)\n+\t\t    {\n+\t\t      __name = __names[__matches[__i3]];\n+\t\t      if (__lengths[__i3] > __pos\n+\t\t\t  && (__ctype.tolower(__name[__pos]) == __cl\n+\t\t\t      || __ctype.toupper(__name[__pos]) == __cu))\n+\t\t\t{\n+\t\t\t  __match_longer = true;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n \t      for (size_t __i4 = 0; __i4 < __nmatches;)\n \t\tif (__match_longer == (__lengths[__i4] == __pos))\n \t\t  {\n@@ -1069,17 +1078,23 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t\t}\n \t    }\n \t  if (__pos < __minlen && __beg != __end)\n-\t    for (size_t __i6 = 0; __i6 < __nmatches;)\n-\t      {\n-\t\t__name = __names[__matches[__i6]];\n-\t\tif (!(__name[__pos] == *__beg))\n-\t\t  {\n-\t\t    __matches[__i6] = __matches[--__nmatches];\n-\t\t    __lengths[__i6] = __lengths[__nmatches];\n-\t\t  }\n-\t\telse\n-\t\t  ++__i6;\n-\t      }\n+\t    {\n+\t      // TODO real case-insensitive comparison\n+\t      const char_type __cl = __ctype.tolower(*__beg);\n+\t      const char_type __cu = __ctype.toupper(*__beg);\n+\t      for (size_t __i6 = 0; __i6 < __nmatches;)\n+\t\t{\n+\t\t  __name = __names[__matches[__i6]];\n+\t\t  if (__ctype.tolower(__name[__pos]) != __cl\n+\t\t      && __ctype.toupper(__name[__pos]) != __cu)\n+\t\t    {\n+\t\t      __matches[__i6] = __matches[--__nmatches];\n+\t\t      __lengths[__i6] = __lengths[__nmatches];\n+\t\t    }\n+\t\t  else\n+\t\t    ++__i6;\n+\t\t}\n+\t    }\n \t  else\n \t    break;\n \t}\n@@ -1094,7 +1109,12 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t    }\n \t  __name = __names[__matches[0]];\n \t  const size_t __len = __lengths[0];\n-\t  while (__pos < __len && __beg != __end && __name[__pos] == *__beg)\n+\t  while (__pos < __len\n+\t\t && __beg != __end\n+\t\t // TODO real case-insensitive comparison\n+\t\t && (__ctype.tolower(__name[__pos]) == __ctype.tolower(*__beg)\n+\t\t     || (__ctype.toupper(__name[__pos])\n+\t\t\t == __ctype.toupper(*__beg))))\n \t    ++__beg, (void)++__pos;\n \n \t  if (__len == __pos)"}, {"sha": "a0214c27b69b4ae2bee8873b3032232c05084420", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/char/71557.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F71557.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F71557.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F71557.cc?ref=a5b4ebc217afe6c31334e017d1fead4a6b8e53b2", "patch": "@@ -0,0 +1,96 @@\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  locale loc_c = locale::classic();\n+\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tget = use_facet<time_get<char>>(iss.getloc());\n+  typedef istreambuf_iterator<char> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  iss.str(\"20:48:01 MAR 31 2016\");\n+  string format = \"%H:%M:%S %b %d %Y\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t      format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2016 - 1900 );\n+  VERIFY( time.tm_mon == 2 );\n+  VERIFY( time.tm_mday == 31 );\n+  VERIFY( time.tm_hour == 20 );\n+  VERIFY( time.tm_min == 48 );\n+  VERIFY( time.tm_sec == 01 );\n+\n+  iss.str(\"21:38:11 apr 30 2017\");\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2017 - 1900 );\n+  VERIFY( time.tm_mon == 3 );\n+  VERIFY( time.tm_mday == 30 );\n+  VERIFY( time.tm_hour == 21 );\n+  VERIFY( time.tm_min == 38 );\n+  VERIFY( time.tm_sec == 11 );\n+\n+  iss.str(\"22:28:21 mAy 29 2018\");\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2018 - 1900 );\n+  VERIFY( time.tm_mon == 4 );\n+  VERIFY( time.tm_mday == 29 );\n+  VERIFY( time.tm_hour == 22 );\n+  VERIFY( time.tm_min == 28 );\n+  VERIFY( time.tm_sec == 21 );\n+\n+  iss.str(\"23:18:31 JuN 28 2019\");\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2019 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 28 );\n+  VERIFY( time.tm_hour == 23 );\n+  VERIFY( time.tm_min == 18 );\n+  VERIFY( time.tm_sec == 31 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ed6af0510b6c648890a1e5760edbe2b75d116736", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/wchar_t/71557.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F71557.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b4ebc217afe6c31334e017d1fead4a6b8e53b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F71557.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F71557.cc?ref=a5b4ebc217afe6c31334e017d1fead4a6b8e53b2", "patch": "@@ -0,0 +1,96 @@\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  locale loc_c = locale::classic();\n+\n+  wistringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<wchar_t>& tget = use_facet<time_get<wchar_t>>(iss.getloc());\n+  typedef istreambuf_iterator<wchar_t> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  iss.str(L\"20:48:01 MAR 31 2016\");\n+  wstring format = L\"%H:%M:%S %b %d %Y\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t      format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2016 - 1900 );\n+  VERIFY( time.tm_mon == 2 );\n+  VERIFY( time.tm_mday == 31 );\n+  VERIFY( time.tm_hour == 20 );\n+  VERIFY( time.tm_min == 48 );\n+  VERIFY( time.tm_sec == 01 );\n+\n+  iss.str(L\"21:38:11 apr 30 2017\");\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2017 - 1900 );\n+  VERIFY( time.tm_mon == 3 );\n+  VERIFY( time.tm_mday == 30 );\n+  VERIFY( time.tm_hour == 21 );\n+  VERIFY( time.tm_min == 38 );\n+  VERIFY( time.tm_sec == 11 );\n+\n+  iss.str(L\"22:28:21 mAy 29 2018\");\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2018 - 1900 );\n+  VERIFY( time.tm_mon == 4 );\n+  VERIFY( time.tm_mday == 29 );\n+  VERIFY( time.tm_hour == 22 );\n+  VERIFY( time.tm_min == 28 );\n+  VERIFY( time.tm_sec == 21 );\n+\n+  iss.str(L\"23:18:31 JuN 28 2019\");\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2019 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 28 );\n+  VERIFY( time.tm_hour == 23 );\n+  VERIFY( time.tm_min == 18 );\n+  VERIFY( time.tm_sec == 31 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}