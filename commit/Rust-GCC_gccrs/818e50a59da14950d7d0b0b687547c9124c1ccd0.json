{"sha": "818e50a59da14950d7d0b0b687547c9124c1ccd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4ZTUwYTU5ZGExNDk1MGQ3ZDBiMGI2ODc1NDdjOTEyNGMxY2NkMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-03-01T16:46:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-03-01T16:46:44Z"}, "message": "c-parse.in (undeclared variable error): Tweak error message to be clearer.\n\n        * c-parse.in (undeclared variable error): Tweak error message to\n        be clearer.\n\nFrom-SVN: r18341", "tree": {"sha": "10c12ac4a7afff38b2a5baad67abe35dfc1f27cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10c12ac4a7afff38b2a5baad67abe35dfc1f27cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818e50a59da14950d7d0b0b687547c9124c1ccd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818e50a59da14950d7d0b0b687547c9124c1ccd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818e50a59da14950d7d0b0b687547c9124c1ccd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818e50a59da14950d7d0b0b687547c9124c1ccd0/comments", "author": null, "committer": null, "parents": [{"sha": "c93dc3ace649e14fd8a71cf85023ad38eb3446fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93dc3ace649e14fd8a71cf85023ad38eb3446fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93dc3ace649e14fd8a71cf85023ad38eb3446fb"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "dddba35e4ae49727776c3c151be14ea5f8d053f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818e50a59da14950d7d0b0b687547c9124c1ccd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818e50a59da14950d7d0b0b687547c9124c1ccd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=818e50a59da14950d7d0b0b687547c9124c1ccd0", "patch": "@@ -1,3 +1,8 @@\n+Sun Mar  1 17:48:46 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* c-parse.in (undeclared variable error): Tweak error message to\n+\tbe clearer.\n+\n Sun Mar 1 10:22:36 PST 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "47a3e29a536fbe2ec1c6c1f8db9f1d6261d409e5", "filename": "gcc/c-parse.in", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818e50a59da14950d7d0b0b687547c9124c1ccd0/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818e50a59da14950d7d0b0b687547c9124c1ccd0/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=818e50a59da14950d7d0b0b687547c9124c1ccd0", "patch": "@@ -58,11 +58,12 @@ State 434 contains 2 shift/reduce conflicts.  (Four ways to parse this.)  */\n end ifc\n \n %{\n+#include \"config.h\"\n+\n #include <stdio.h>\n #include <errno.h>\n #include <setjmp.h>\n \n-#include \"config.h\"\n #include \"tree.h\"\n #include \"input.h\"\n #include \"c-lex.h\"\n@@ -232,9 +233,11 @@ ifobjc\n end ifobjc\n \f\n %{\n-/* Number of statements (loosely speaking) seen so far.  */\n+/* Number of statements (loosely speaking) and compound statements \n+   seen so far.  */\n static int stmt_count;\n-\n+static int compstmt_count;\n+  \n /* Input file and line number of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n static char *if_stmt_file;\n@@ -487,7 +490,7 @@ unary_expr:\n \t| sizeof unary_expr  %prec UNARY\n \t\t{ skip_evaluation--;\n \t\t  if (TREE_CODE ($2) == COMPONENT_REF\n-\t\t      && DECL_BIT_FIELD (TREE_OPERAND ($2, 1)))\n+\t\t      && DECL_C_BIT_FIELD (TREE_OPERAND ($2, 1)))\n \t\t    error (\"`sizeof' applied to a bit-field\");\n \t\t  $$ = c_sizeof (TREE_TYPE ($2)); }\n \t| sizeof '(' typename ')'  %prec HYPERUNARY\n@@ -679,7 +682,7 @@ end ifobjc\n \t\t\t      if (IDENTIFIER_GLOBAL_VALUE ($1) != error_mark_node\n \t\t\t\t  || IDENTIFIER_ERROR_LOCUS ($1) != current_function_decl)\n \t\t\t\t{\n-\t\t\t\t  error (\"`%s' undeclared (first use this function)\",\n+\t\t\t\t  error (\"`%s' undeclared (first use in this function)\",\n \t\t\t\t\t IDENTIFIER_POINTER ($1));\n \n \t\t\t\t  if (! undeclared_variable_notice)\n@@ -1735,25 +1738,27 @@ compstmt_or_error:\n \t| error compstmt\n \t;\n \n-compstmt: '{' '}'\n+compstmt_start: '{' { compstmt_count++; }\n+\n+compstmt: compstmt_start '}'\n \t\t{ $$ = convert (void_type_node, integer_zero_node); }\n-\t| '{' pushlevel maybe_label_decls decls xstmts '}'\n+\t| compstmt_start pushlevel maybe_label_decls decls xstmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), 1, 0);\n \t\t  $$ = poplevel (1, 1, 0);\n \t\t  if (yychar == CONSTANT || yychar == STRING)\n \t\t    pop_momentary_nofree ();\n \t\t  else\n \t\t    pop_momentary (); }\n-\t| '{' pushlevel maybe_label_decls error '}'\n+\t| compstmt_start pushlevel maybe_label_decls error '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n \t\t  $$ = poplevel (kept_level_p (), 0, 0);\n \t\t  if (yychar == CONSTANT || yychar == STRING)\n \t\t    pop_momentary_nofree ();\n \t\t  else\n \t\t    pop_momentary (); }\n-\t| '{' pushlevel maybe_label_decls stmts '}'\n+\t| compstmt_start pushlevel maybe_label_decls stmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n \t\t  $$ = poplevel (kept_level_p (), 0, 0);\n@@ -1766,16 +1771,17 @@ compstmt: '{' '}'\n /* Value is number of statements counted as of the closeparen.  */\n simple_if:\n \t  if_prefix lineno_labeled_stmt\n-/* Make sure expand_end_cond is run once\n-   for each call to expand_start_cond.\n+/* Make sure c_expand_end_cond is run once\n+   for each call to c_expand_start_cond.\n    Otherwise a crash is likely.  */\n \t| if_prefix error\n \t;\n \n if_prefix:\n \t  IF '(' expr ')'\n \t\t{ emit_line_note ($<filename>-1, $<lineno>0);\n-\t\t  expand_start_cond (truthvalue_conversion ($3), 0);\n+\t\t  c_expand_start_cond (truthvalue_conversion ($3), 0, \n+\t\t\t\t       compstmt_count);\n \t\t  $<itype>$ = stmt_count;\n \t\t  if_stmt_file = $<filename>-1;\n \t\t  if_stmt_line = $<lineno>0;\n@@ -1788,6 +1794,7 @@ if_prefix:\n do_stmt_start:\n \t  DO\n \t\t{ stmt_count++;\n+\t\t  compstmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n \t\t  /* See comment in `while' alternative, above.  */\n \t\t  emit_nop ();\n@@ -1850,27 +1857,27 @@ stmt:\n \t\t  iterator_expand ($1);\n \t\t  clear_momentary (); }\n \t| simple_if ELSE\n-\t\t{ expand_start_else ();\n+\t\t{ c_expand_start_else ();\n \t\t  $<itype>1 = stmt_count;\n \t\t  position_after_white_space (); }\n \t  lineno_labeled_stmt\n-\t\t{ expand_end_cond ();\n+\t\t{ c_expand_end_cond ();\n \t\t  if (extra_warnings && stmt_count == $<itype>1)\n \t\t    warning (\"empty body in an else-statement\"); }\n \t| simple_if %prec IF\n-\t\t{ expand_end_cond ();\n+\t\t{ c_expand_end_cond ();\n \t\t  /* This warning is here instead of in simple_if, because we\n \t\t     do not want a warning if an empty if is followed by an\n \t\t     else statement.  Increment stmt_count so we don't\n \t\t     give a second error if this is a nested `if'.  */\n \t\t  if (extra_warnings && stmt_count++ == $<itype>1)\n \t\t    warning_with_file_and_line (if_stmt_file, if_stmt_line,\n \t\t\t\t\t\t\"empty body in an if-statement\"); }\n-/* Make sure expand_end_cond is run once\n-   for each call to expand_start_cond.\n+/* Make sure c_expand_end_cond is run once\n+   for each call to c_expand_start_cond.\n    Otherwise a crash is likely.  */\n \t| simple_if ELSE error\n-\t\t{ expand_end_cond (); }\n+\t\t{ c_expand_end_cond (); }\n \t| WHILE\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);"}]}