{"sha": "77633f4cd05047cd8b46887e4708086deb58cd7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2MzNmNGNkMDUwNDdjZDhiNDY4ODdlNDcwODA4NmRlYjU4Y2Q3Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-11-11T20:10:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-11T20:10:20Z"}, "message": "re PR libstdc++/24799 (std::tr1::hash missing inheritance)\n\n2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/24799\n\t* include/tr1/functional (hash): Inherit from std::unary_function.\n\t* testsuite/tr1/6_containers/unordered/hash/24799.cc: New.\n\n\tPR libstdc++/24805\n\t* include/tr1/boost_shared_ptr.h (swap(shared_ptr<>&, shared_ptr<>&),\n\tswap(weak_ptr<>&, weak_ptr<>&)): Move inside namespace tr1.\n\t* testsuite/tr1/2_general_utilities/memory/shared_ptr/modifiers/\n\t24805.cc: New.\n\n\tPR libstdc++/24809\n\t* include/tr1/type_traits (__is_polymorhpic_helper): Adjust destructor.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/\n\t24809.cc: New.\n\nFrom-SVN: r106796", "tree": {"sha": "66be469ca67cbc445b69264429468ad6ce65ffb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66be469ca67cbc445b69264429468ad6ce65ffb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77633f4cd05047cd8b46887e4708086deb58cd7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77633f4cd05047cd8b46887e4708086deb58cd7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77633f4cd05047cd8b46887e4708086deb58cd7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77633f4cd05047cd8b46887e4708086deb58cd7c/comments", "author": null, "committer": null, "parents": [{"sha": "a7f4ccb197fe07510a29c3408eff1ed838fff4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f4ccb197fe07510a29c3408eff1ed838fff4fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f4ccb197fe07510a29c3408eff1ed838fff4fa"}], "stats": {"total": 195, "additions": 169, "deletions": 26}, "files": [{"sha": "7e7f137a474e20ac789f88c9693e49247c5c5ec9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=77633f4cd05047cd8b46887e4708086deb58cd7c", "patch": "@@ -1,3 +1,20 @@\n+2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/24799\n+\t* include/tr1/functional (hash): Inherit from std::unary_function.\n+\t* testsuite/tr1/6_containers/unordered/hash/24799.cc: New.\n+\n+\tPR libstdc++/24805\n+\t* include/tr1/boost_shared_ptr.h (swap(shared_ptr<>&, shared_ptr<>&),\n+\tswap(weak_ptr<>&, weak_ptr<>&)): Move inside namespace tr1.\n+\t* testsuite/tr1/2_general_utilities/memory/shared_ptr/modifiers/\n+\t24805.cc: New.\n+\n+\tPR libstdc++/24809\n+\t* include/tr1/type_traits (__is_polymorhpic_helper): Adjust destructor.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/\n+\t24809.cc: New.\n+\n 2005-11-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/tr1/2_general_utilities/memory/"}, {"sha": "ec940a9c25f91741e30203ba073a767e5d18afdc", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=77633f4cd05047cd8b46887e4708086deb58cd7c", "patch": "@@ -705,8 +705,13 @@ template<typename _Tp>\n     shared_count _M_refcount;    // reference counter\n   };  // shared_ptr\n \n-// 2.2.3.9 shared_ptr casts\n+// 2.2.3.8 shared_ptr specialized algorithms.\n+template<typename _Tp>\n+  inline void\n+  swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b)\n+  { __a.swap(__b); }\n \n+// 2.2.3.9 shared_ptr casts\n /** @warning The seemingly equivalent\n  *           <code>shared_ptr<T>(static_cast<T*>(r.get()))</code>\n  *           will eventually result in undefined behaviour,\n@@ -902,6 +907,12 @@ template<typename _Tp>\n \n   };  // weak_ptr\n \n+// 2.2.4.7 weak_ptr specialized algorithms.\n+template<typename _Tp>\n+  void\n+  swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b)\n+  { __a.swap(__b); }\n+\n \n template<typename _Tp>\n   class enable_shared_from_this\n@@ -957,29 +968,6 @@ template<typename _Tp>\n   };\n \n } // namespace tr1\n-\n-/**\n- *  @brief   std::swap() specialisation for shared_ptr.\n- *  @relates shared_ptr.\n- */\n-template<typename _Tp>\n-  inline void\n-  swap(tr1::shared_ptr<_Tp>& __a, tr1::shared_ptr<_Tp>& __b)\n-  {\n-    __a.swap(__b);\n-  }\n-\n-/**\n- *  @brief   std::swap() specialisation for weak_ptr.\n- *  @relates weak_ptr.\n- */\n-template<typename _Tp>\n-  void\n-  swap(tr1::weak_ptr<_Tp>& __a, tr1::weak_ptr<_Tp>& __b)\n-  {\n-    __a.swap(__b);\n-  }\n-\n } // namespace std\n \n #endif"}, {"sha": "9672da8fe7cf9deba16f19d41b82abf51f8d423f", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=77633f4cd05047cd8b46887e4708086deb58cd7c", "patch": "@@ -1103,6 +1103,7 @@ namespace tr1\n #define tr1_hashtable_define_trivial_hash(T)            \\\n   template<>                                            \\\n     struct hash<T>                                      \\\n+    : public std::unary_function<T, std::size_t>        \\\n     {                                                   \\\n       std::size_t                                       \\\n       operator()(T val) const                           \\\n@@ -1125,6 +1126,7 @@ namespace tr1\n \n   template<typename T>\n     struct hash<T*>\n+    : public std::unary_function<T*, std::size_t>\n     {\n       std::size_t\n       operator()(T* p) const\n@@ -1185,7 +1187,8 @@ namespace tr1\n   // for TR1 .cc files, these should go in one.\n   template<>\n     struct hash<std::string>\n-    {\n+    : public std::unary_function<std::string, std::size_t>\n+    {      \n       std::size_t\n       operator()(const std::string& s) const\n       { return Fnv_hash<>::hash(s.data(), s.length()); }\n@@ -1194,6 +1197,7 @@ namespace tr1\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     struct hash<std::wstring>\n+    : public std::unary_function<std::wstring, std::size_t>\n     {\n       std::size_t\n       operator()(const std::wstring& s) const\n@@ -1206,6 +1210,7 @@ namespace tr1\n \n   template<>\n     struct hash<float>\n+    : public std::unary_function<float, std::size_t>\n     {\n       std::size_t\n       operator()(float fval) const\n@@ -1222,6 +1227,7 @@ namespace tr1\n \n   template<>\n     struct hash<double>\n+    : public std::unary_function<double, std::size_t>\n     {\n       std::size_t\n       operator()(double dval) const\n@@ -1240,6 +1246,7 @@ namespace tr1\n   // 10 bytes -> 12 bytes) and resort to frexp.\n   template<>\n     struct hash<long double>\n+    : public std::unary_function<long double, std::size_t>\n     {\n       std::size_t\n       operator()(long double ldval) const"}, {"sha": "c89bb8eae78c3c0eda3513e8e133856bbe8f88b6", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=77633f4cd05047cd8b46887e4708086deb58cd7c", "patch": "@@ -321,7 +321,7 @@ namespace tr1\n         : public _Up\n \t{ \n \t  virtual void __dummy();\n-\t  virtual ~__second();\n+\t  virtual ~__second() throw();\n \t};\n \n     public:"}, {"sha": "94824f6167d3ec774204aa10da2ee95648688edd", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/modifiers/24805.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fmodifiers%2F24805.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fmodifiers%2F24805.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fmodifiers%2F24805.cc?ref=77633f4cd05047cd8b46887e4708086deb58cd7c", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// TR1 2.2.2 Template class shared_ptr [tr.util.smartptr.shared]\n+\n+#include <tr1/memory>\n+\n+// 2.2.3.4 shared_ptr modifiers [tr.util.smartptr.shared.mod]\n+\n+// swap\n+\n+// libstdc++/24805\n+using std::tr1::swap;"}, {"sha": "0b8ab0f7167c35c505738f46845b8f060d52717c", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/24809.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2F24809.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2F24809.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2F24809.cc?ref=77633f4cd05047cd8b46887e4708086deb58cd7c", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <exception>\n+\n+// libstdc++/24809\n+static const bool b = std::tr1::is_polymorphic<std::exception>::value;"}, {"sha": "90a336bdf2ea99795dcc5b887afa606109b12704", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/hash/24799.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhash%2F24799.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77633f4cd05047cd8b46887e4708086deb58cd7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhash%2F24799.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhash%2F24799.cc?ref=77633f4cd05047cd8b46887e4708086deb58cd7c", "patch": "@@ -0,0 +1,74 @@\n+// 2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.3 Class template hash\n+\n+#include <tr1/functional>\n+#include <string>\n+#include <tr1/type_traits>\n+#include <testsuite_tr1.h>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void\n+  do_test()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    using std::tr1::is_same;\n+    using __gnu_test::test_relationship;\n+    \n+    typedef typename std::tr1::hash<T>::argument_type  argument_type;\n+    typedef typename std::tr1::hash<T>::result_type    result_type;\n+    \n+    VERIFY( (test_relationship<is_same, argument_type, T>(true)) );\n+    VERIFY( (test_relationship<is_same, result_type, std::size_t>(true)) );\n+  }\n+  \n+// libstdc++/24799\n+void test01()\n+{\n+  do_test<bool>();\n+  do_test<char>();\n+  do_test<signed char>();\n+  do_test<unsigned char>();\n+  do_test<short>();\n+  do_test<int>();\n+  do_test<long>();\n+  do_test<unsigned short>();\n+  do_test<unsigned int>();\n+  do_test<unsigned long>();\n+  do_test<int*>();\n+  do_test<std::string>();\n+  do_test<float>();\n+  do_test<double>();\n+  do_test<long double>();\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  do_test<wchar_t>();\n+  do_test<std::wstring>();\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}