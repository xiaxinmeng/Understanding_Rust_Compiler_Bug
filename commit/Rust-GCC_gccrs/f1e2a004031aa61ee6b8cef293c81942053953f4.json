{"sha": "f1e2a004031aa61ee6b8cef293c81942053953f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlMmEwMDQwMzFhYTYxZWU2YjhjZWYyOTNjODE5NDIwNTM5NTNmNA==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-10-10T17:41:02Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-10-10T17:41:02Z"}, "message": "fold-vec-cmp-char.c: New.\n\n[testsuite]\n\n2017-10-10  Will Schmidt <will_schmidt@vnet.ibm.com>\n\t* gcc.target/powerpc/fold-vec-cmp-char.c: New.\n\t* gcc.target/powerpc/fold-vec-cmp-double.c: New.\n\t* gcc.target/powerpc/fold-vec-cmp-float.c: New.\n\t* gcc.target/powerpc/fold-vec-cmp-int.c: New.\n\t* gcc.target/powerpc/fold-vec-cmp-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-cmp-short.c: New.\n\nFrom-SVN: r253597", "tree": {"sha": "2c930319c2d0d3b2b007a1bd14ad9ab843bff3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c930319c2d0d3b2b007a1bd14ad9ab843bff3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e2a004031aa61ee6b8cef293c81942053953f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e2a004031aa61ee6b8cef293c81942053953f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e2a004031aa61ee6b8cef293c81942053953f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e2a004031aa61ee6b8cef293c81942053953f4/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e6cdc90d41633e09a3a34bb8c6f71cf246101b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6cdc90d41633e09a3a34bb8c6f71cf246101b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6cdc90d41633e09a3a34bb8c6f71cf246101b2"}], "stats": {"total": 453, "additions": 453, "deletions": 0}, "files": [{"sha": "c2e064c7ff7201857701e6b92264a43c4c4f1298", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1e2a004031aa61ee6b8cef293c81942053953f4", "patch": "@@ -1,3 +1,9 @@\n+2017-10-10  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-splat-16.c: New\n+\t* gcc.target/powerpc/fold-vec-splat-32.c: New.\n+\t* gcc.target/powerpc/fold-vec-splat-8.c: New.\n+\n 2017-10-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/82233"}, {"sha": "3a1aa60cbff0795580a6c63cbbef29f9be8657eb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cmp-char.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-char.c?ref=f1e2a004031aa61ee6b8cef293c81942053953f4", "patch": "@@ -0,0 +1,86 @@\n+/* Verify that overloaded built-ins for vec_cmp{eq,ge,gt,le,lt,ne} with\n+   char inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+test3_eq (vector signed char x, vector signed char y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool char\n+test6_eq (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool char\n+test3_ge (vector signed char x, vector signed char y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool char\n+test6_ge (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool char\n+test3_gt (vector signed char x, vector signed char y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool char\n+test6_gt (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool char\n+test3_le (vector signed char x, vector signed char y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool char\n+test6_le (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool char\n+test3_lt (vector signed char x, vector signed char y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool char\n+test6_lt (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool char\n+test3_ne (vector signed char x, vector signed char y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+vector bool char\n+test6_ne (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcmpequb\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsb\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtub\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n+"}, {"sha": "9d56862b2eafc120330f9168752a2a282db0f7ce", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cmp-double.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-double.c?ref=f1e2a004031aa61ee6b8cef293c81942053953f4", "patch": "@@ -0,0 +1,51 @@\n+/* Verify that overloaded built-ins for vec_cmp with\n+   double inputs for VSX produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+test2_eq (vector double x, vector double y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool long long\n+test2_ge (vector double x, vector double y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool long long\n+test2_gt (vector double x, vector double y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool long long\n+test2_le (vector double x, vector double y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool long long\n+test2_lt (vector double x, vector double y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+\tvector bool long long\n+test2_ne (vector double x, vector double y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xvcmpeqdp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgtdp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpnedp\" 0 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgedp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmpu\" 0 } } */\n+"}, {"sha": "b75250a7a3a2aa8c48fce20407bf63f2b97b998a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cmp-float.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-float.c?ref=f1e2a004031aa61ee6b8cef293c81942053953f4", "patch": "@@ -0,0 +1,51 @@\n+/* Verify that overloaded built-ins for vec_cmp with float\n+   inputs for VSX produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+test1_eq (vector float x, vector float y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool int\n+test1_ge (vector float x, vector float y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool int\n+test1_gt (vector float x, vector float y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool int\n+test1_le (vector float x, vector float y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool int\n+test1_lt (vector float x, vector float y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool int\n+test1_ne (vector float x, vector float y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xvcmpeqsp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgtsp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpnesp\" 0 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgesp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmpu\" 0 } } */\n+"}, {"sha": "d53994d3ac8a5867260c071978829058ed33a9f4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cmp-int.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-int.c?ref=f1e2a004031aa61ee6b8cef293c81942053953f4", "patch": "@@ -0,0 +1,86 @@\n+/* Verify that overloaded built-ins for vec_cmp with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+test3_eq (vector signed int x, vector signed int y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool int\n+test6_eq (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool int\n+test3_ge (vector signed int x, vector signed int y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool int\n+test6_ge (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool int\n+test3_gt (vector signed int x, vector signed int y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool int\n+test6_gt (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool int\n+test3_le (vector signed int x, vector signed int y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool int\n+test6_le (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool int\n+test3_lt (vector signed int x, vector signed int y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool int\n+test6_lt (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool int\n+test3_ne (vector signed int x, vector signed int y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+vector bool int\n+test6_ne (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcmpequw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtuw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n+"}, {"sha": "536ee75a8546685203a002d5a77802f65fa65d6a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cmp-longlong.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-longlong.c?ref=f1e2a004031aa61ee6b8cef293c81942053953f4", "patch": "@@ -0,0 +1,86 @@\n+/* Verify that overloaded built-ins for vec_cmp with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+test3_eq (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool long long\n+test6_eq (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool long long\n+test3_ge (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool long long\n+test6_ge (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool long long\n+test3_gt (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool long long\n+test6_gt (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool long long\n+test3_le (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool long long\n+test6_le (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool long long\n+test3_lt (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool long long\n+test6_lt (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool long long\n+test3_ne (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+vector bool long long\n+test6_ne (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcmpequd\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsd\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n+"}, {"sha": "60676691efe47dc4b8424dbe42be87ce96a1252f", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cmp-short.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2a004031aa61ee6b8cef293c81942053953f4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cmp-short.c?ref=f1e2a004031aa61ee6b8cef293c81942053953f4", "patch": "@@ -0,0 +1,87 @@\n+/* Verify that overloaded built-ins for vec_cmp with short\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+test3_eq (vector signed short x, vector signed short y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool short\n+test6_eq (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmpeq (x, y);\n+}\n+\n+vector bool short\n+test3_ge (vector signed short x, vector signed short y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool short\n+test6_ge (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool short\n+test3_gt (vector signed short x, vector signed short y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool short\n+test6_gt (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+\n+vector bool short\n+test3_le (vector signed short x, vector signed short y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool short\n+test6_le (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool short\n+test3_lt (vector signed short x, vector signed short y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool short\n+test6_lt (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool short\n+test3_ne (vector signed short x, vector signed short y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+vector bool short\n+test6_ne (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmpne (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcmpequh\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsh\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtuh\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n+"}]}