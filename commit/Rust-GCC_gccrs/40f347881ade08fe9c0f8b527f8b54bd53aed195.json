{"sha": "40f347881ade08fe9c0f8b527f8b54bd53aed195", "node_id": "C_kwDOANBUbNoAKDQwZjM0Nzg4MWFkZTA4ZmU5YzBmOGI1MjdmOGI1NGJkNTNhZWQxOTU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-30T08:31:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-31T11:03:43Z"}, "message": "tree-optimization/65244 - include asserts in predicates for uninit\n\nWhen uninit computes the actual predicates from the control dependence\nedges it currently skips those that are assert-like (where one edge\nleads to a block which ends in a noreturn call).  That leads to\nbogus uninit diagnostics when applied on the USE side.\n\n\tPR tree-optimization/65244\n\t* gimple-predicate-analysis.h (predicate::init_from_control_deps):\n\tAdd argument to specify whether the predicate is for the USE.\n\t* gimple-predicate-analysis.cc (predicate::init_from_control_deps):\n\tAlso include predicates effective fallthru control edges when\n\tthe predicate is for the USE.\n\n\t* gcc.dg/uninit-pr65244-2.c: New testcase.", "tree": {"sha": "1644e196990772e357966bfdbb326179d9baf750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1644e196990772e357966bfdbb326179d9baf750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f347881ade08fe9c0f8b527f8b54bd53aed195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f347881ade08fe9c0f8b527f8b54bd53aed195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f347881ade08fe9c0f8b527f8b54bd53aed195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f347881ade08fe9c0f8b527f8b54bd53aed195/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf736575286f841f6144bd58b981c269652b82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf736575286f841f6144bd58b981c269652b82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf736575286f841f6144bd58b981c269652b82e"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "49500b77832872ff29b18ab223be82386be057b7", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f347881ade08fe9c0f8b527f8b54bd53aed195/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f347881ade08fe9c0f8b527f8b54bd53aed195/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=40f347881ade08fe9c0f8b527f8b54bd53aed195", "patch": "@@ -1666,7 +1666,7 @@ predicate::normalize (gimple *use_or_def, bool is_use)\n \n void\n predicate::init_from_control_deps (const vec<edge> *dep_chains,\n-\t\t\t\t   unsigned num_chains)\n+\t\t\t\t   unsigned num_chains, bool is_use)\n {\n   gcc_assert (is_empty ());\n \n@@ -1675,7 +1675,8 @@ predicate::init_from_control_deps (const vec<edge> *dep_chains,\n     return;\n \n   if (DEBUG_PREDICATE_ANALYZER && dump_file)\n-    fprintf (dump_file, \"init_from_control_deps {%s}:\\n\",\n+    fprintf (dump_file, \"init_from_control_deps [%s] {%s}:\\n\",\n+\t     is_use ? \"USE\" : \"DEF\",\n \t     format_edge_vecs (dep_chains, num_chains).c_str ());\n \n   /* Convert the control dependency chain into a set of predicates.  */\n@@ -1711,8 +1712,12 @@ predicate::init_from_control_deps (const vec<edge> *dep_chains,\n \t  if (is_gimple_call (cond_stmt) && EDGE_COUNT (e->src->succs) >= 2)\n \t    /* Ignore EH edge.  Can add assertion on the other edge's flag.  */\n \t    continue;\n-\t  /* Skip if there is essentially one succesor.  */\n-\t  if (EDGE_COUNT (e->src->succs) == 2)\n+\t  /* Skip this edge if it is bypassing an abort - when the\n+\t     condition is not satisfied we are neither reaching the\n+\t     definition nor the use so it isn't meaningful.  Note if\n+\t     we are processing the use predicate the condition is\n+\t     meaningful.  See PR65244.  */\n+\t  if (!is_use && EDGE_COUNT (e->src->succs) == 2)\n \t    {\n \t      edge e1;\n \t      edge_iterator ei1;\n@@ -1941,7 +1946,7 @@ uninit_analysis::init_use_preds (predicate &use_preds, basic_block def_bb,\n      condition under which the definition in DEF_BB is used in USE_BB.\n      Each OR subexpression is represented by one element of DEP_CHAINS,\n      where each element consists of a series of AND subexpressions.  */\n-  use_preds.init_from_control_deps (dep_chains, num_chains);\n+  use_preds.init_from_control_deps (dep_chains, num_chains, true);\n   return !use_preds.is_empty ();\n }\n \n@@ -2050,7 +2055,7 @@ uninit_analysis::init_from_phi_def (gphi *phi)\n   /* Convert control dependence chains to the predicate in *THIS under\n      which the PHI operands are defined to values for which M_EVAL is\n      false.  */\n-  m_phi_def_preds.init_from_control_deps (dep_chains, num_chains);\n+  m_phi_def_preds.init_from_control_deps (dep_chains, num_chains, false);\n   return !m_phi_def_preds.is_empty ();\n }\n "}, {"sha": "bc0248d7a93686f8eb46773883a4841fe1892b1c", "filename": "gcc/gimple-predicate-analysis.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f347881ade08fe9c0f8b527f8b54bd53aed195/gcc%2Fgimple-predicate-analysis.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f347881ade08fe9c0f8b527f8b54bd53aed195/gcc%2Fgimple-predicate-analysis.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.h?ref=40f347881ade08fe9c0f8b527f8b54bd53aed195", "patch": "@@ -65,7 +65,7 @@ class predicate\n     return m_preds;\n   }\n \n-  void init_from_control_deps (const vec<edge> *, unsigned);\n+  void init_from_control_deps (const vec<edge> *, unsigned, bool);\n \n   void dump (gimple *, const char *) const;\n "}, {"sha": "a28893cdcb599bfb78f7ba94f0fd60466259deba", "filename": "gcc/testsuite/gcc.dg/uninit-pr65244-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f347881ade08fe9c0f8b527f8b54bd53aed195/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr65244-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f347881ade08fe9c0f8b527f8b54bd53aed195/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr65244-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr65244-2.c?ref=40f347881ade08fe9c0f8b527f8b54bd53aed195", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -Wuninitialized -ftree-bit-ccp -fno-thread-jumps -fdump-tree-uninit2\" } */\n+\n+void exit(int __status) __attribute__ ((__noreturn__));\n+int posix_memalign(void **__memptr, __SIZE_TYPE__ __alignment,\n+\t\t   __SIZE_TYPE__ __size);\n+\n+void *f(void)\n+{\n+  void *ptr;\n+\n+  if (posix_memalign(&ptr, 16, 256) != 0)\n+    exit(1);\n+\n+  return ptr; /* { dg-bogus \"uninitialized\" } */\n+}\n+\n+/* Make sure the uninit pass has something to do, add to the set of\n+   disabled optimizations if not.  */\n+/* { dg-final { scan-tree-dump \"# ptr_. = PHI\" \"uninit2\" } } */"}]}