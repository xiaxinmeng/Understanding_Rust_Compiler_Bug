{"sha": "53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiOGE3MTA3ZTZjNmE3NzRkNWU2OWI4ZmQ1Y2U0NmU5NGMzNWFkYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-24T09:42:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-24T09:42:19Z"}, "message": "re PR tree-optimization/84013 (wrong __restrict clique with inline asm operand)\n\n2018-10-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84013\n\t* tree-ssa-structalias.c (struct msdi_data): New struct for\n\tmarshalling data to walk_stmt_load_store_ops.\n\t(maybe_set_dependence_info): Refactor as callback for\n\twalk_stmt_load_store_ops.\n\t(compute_dependence_clique): Set restrict info on all stmt kinds.\n\n\t* gcc.dg/tree-ssa/restrict-9.c: New testcase.\n\nFrom-SVN: r265455", "tree": {"sha": "a6c33cf124e89ded62f6b09d7aec6f6204cb4599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6c33cf124e89ded62f6b09d7aec6f6204cb4599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19b5595858162b8a77b84db93b21b39a48dc2d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b5595858162b8a77b84db93b21b39a48dc2d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b5595858162b8a77b84db93b21b39a48dc2d0e"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "92402775ca4827a3cac93dc85a6fcf8c1448c635", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "patch": "@@ -1,3 +1,12 @@\n+2018-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84013\n+\t* tree-ssa-structalias.c (struct msdi_data): New struct for\n+\tmarshalling data to walk_stmt_load_store_ops.\n+\t(maybe_set_dependence_info): Refactor as callback for\n+\twalk_stmt_load_store_ops.\n+\t(compute_dependence_clique): Set restrict info on all stmt kinds.\n+\n 2018-10-24  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.c (cgraph_node::dump):"}, {"sha": "c17488a87c0e7c54a0456c08acfcf57339d8e683", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "patch": "@@ -1,3 +1,8 @@\n+2018-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84013\n+\t* gcc.dg/tree-ssa/restrict-9.c: New testcase.\n+\n 2018-10-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87665"}, {"sha": "bc7f63512d05d11c8b4edef2de7f3f5274d4305f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/restrict-9.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-9.c?ref=53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized-alias\" } */\n+\n+int *abc(int** __restrict a, int** __restrict b)\n+{\n+  *a = 0;                     // clique 1 base 1\n+  asm volatile(\"\":\"+m\"(*b));  // clique 0 base 0 (wrong)\n+  *a = 0;                     // clique 1 base 1\n+  return *b;                  // clique 1 base 2 (what it should be)\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"clique 1 base \\[12\\]\" 5 \"optimized\" } } */\n+/* On RTL we can DSE one of the stores of zero, on the GIMPLE level we\n+   do not bother to do disambiguation against asms.  */\n+/* { dg-final { scan-tree-dump-times \" = 0;\" 1 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"mov\\[^\\n\\r\\]*0\" 1 { target { x86_64-*-* i?86-*-* } } } } */"}, {"sha": "fc85e9ded5e83ed9ff9d5f277e868fc7252f960b", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=53b8a7107e6c6a774d5e69b8fd5ce46e94c35adb", "patch": "@@ -7466,33 +7466,40 @@ visit_loadstore (gimple *, tree base, tree ref, void *data)\n   return false;\n }\n \n-/* If REF is a MEM_REF then assign a clique, base pair to it, updating\n-   CLIQUE, *RESTRICT_VAR and LAST_RUID.  Return whether dependence info\n-   was assigned to REF.  */\n+struct msdi_data {\n+  tree ptr;\n+  unsigned short *clique;\n+  unsigned short *last_ruid;\n+  varinfo_t restrict_var;\n+};\n+\n+/* If BASE is a MEM_REF then assign a clique, base pair to it, updating\n+   CLIQUE, *RESTRICT_VAR and LAST_RUID as passed via DATA.\n+   Return whether dependence info was assigned to BASE.  */\n \n static bool\n-maybe_set_dependence_info (tree ref, tree ptr,\n-\t\t\t   unsigned short &clique, varinfo_t restrict_var,\n-\t\t\t   unsigned short &last_ruid)\n+maybe_set_dependence_info (gimple *, tree base, tree, void *data)\n {\n-  while (handled_component_p (ref))\n-    ref = TREE_OPERAND (ref, 0);\n-  if ((TREE_CODE (ref) == MEM_REF\n-       || TREE_CODE (ref) == TARGET_MEM_REF)\n-      && TREE_OPERAND (ref, 0) == ptr)\n+  tree ptr = ((msdi_data *)data)->ptr;\n+  unsigned short &clique = *((msdi_data *)data)->clique;\n+  unsigned short &last_ruid = *((msdi_data *)data)->last_ruid;\n+  varinfo_t restrict_var = ((msdi_data *)data)->restrict_var;\n+  if ((TREE_CODE (base) == MEM_REF\n+       || TREE_CODE (base) == TARGET_MEM_REF)\n+      && TREE_OPERAND (base, 0) == ptr)\n     {\n       /* Do not overwrite existing cliques.  This avoids overwriting dependence\n \t info inlined from a function with restrict parameters inlined\n \t into a function with restrict parameters.  This usually means we\n \t prefer to be precise in innermost loops.  */\n-      if (MR_DEPENDENCE_CLIQUE (ref) == 0)\n+      if (MR_DEPENDENCE_CLIQUE (base) == 0)\n \t{\n \t  if (clique == 0)\n \t    clique = ++cfun->last_clique;\n \t  if (restrict_var->ruid == 0)\n \t    restrict_var->ruid = ++last_ruid;\n-\t  MR_DEPENDENCE_CLIQUE (ref) = clique;\n-\t  MR_DEPENDENCE_BASE (ref) = restrict_var->ruid;\n+\t  MR_DEPENDENCE_CLIQUE (base) = clique;\n+\t  MR_DEPENDENCE_BASE (base) = restrict_var->ruid;\n \t  return true;\n \t}\n     }\n@@ -7565,18 +7572,11 @@ compute_dependence_clique (void)\n \t  imm_use_iterator ui;\n \t  gimple *use_stmt;\n \t  bool used = false;\n+\t  msdi_data data = { ptr, &clique, &last_ruid, restrict_var };\n \t  FOR_EACH_IMM_USE_STMT (use_stmt, ui, ptr)\n-\t    {\n-\t      /* ???  Calls and asms.  */\n-\t      if (!gimple_assign_single_p (use_stmt))\n-\t\tcontinue;\n-\t      used |= maybe_set_dependence_info (gimple_assign_lhs (use_stmt),\n-\t\t\t\t\t\t ptr, clique, restrict_var,\n-\t\t\t\t\t\t last_ruid);\n-\t      used |= maybe_set_dependence_info (gimple_assign_rhs1 (use_stmt),\n-\t\t\t\t\t\t ptr, clique, restrict_var,\n-\t\t\t\t\t\t last_ruid);\n-\t    }\n+\t    used |= walk_stmt_load_store_ops (use_stmt, &data,\n+\t\t\t\t\t      maybe_set_dependence_info,\n+\t\t\t\t\t      maybe_set_dependence_info);\n \t  if (used)\n \t    {\n \t      bitmap_set_bit (rvars, restrict_var->id);"}]}