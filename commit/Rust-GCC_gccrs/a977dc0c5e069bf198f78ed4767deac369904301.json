{"sha": "a977dc0c5e069bf198f78ed4767deac369904301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk3N2RjMGM1ZTA2OWJmMTk4Zjc4ZWQ0NzY3ZGVhYzM2OTkwNDMwMQ==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@arm.com", "date": "2017-06-27T17:29:06Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2017-06-27T17:29:06Z"}, "message": "aarch64-simd.md (aarch64_combine<mode>): Directly call aarch64_split_simd_combine.\n\n2017-06-19  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_combine<mode>): Directly\n\tcall aarch64_split_simd_combine.\n\t* (aarch64_combine_internal<mode>): Delete pattern.\n\t* config/aarch64/aarch64.c (aarch64_split_simd_combine):\n\tAllow register and subreg operands.\n\nFrom-SVN: r249702", "tree": {"sha": "d2c67ece96c2f1b064a22e78535d657cf2fde21e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2c67ece96c2f1b064a22e78535d657cf2fde21e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a977dc0c5e069bf198f78ed4767deac369904301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a977dc0c5e069bf198f78ed4767deac369904301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a977dc0c5e069bf198f78ed4767deac369904301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a977dc0c5e069bf198f78ed4767deac369904301/comments", "author": null, "committer": null, "parents": [{"sha": "b2cf76f3a58d065122d2ae94bf55510551ff27f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2cf76f3a58d065122d2ae94bf55510551ff27f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2cf76f3a58d065122d2ae94bf55510551ff27f4"}], "stats": {"total": 102, "additions": 41, "deletions": 61}, "files": [{"sha": "9f7e593121725b2abe4b7ab03b550f273f91ba5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a977dc0c5e069bf198f78ed4767deac369904301/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a977dc0c5e069bf198f78ed4767deac369904301/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a977dc0c5e069bf198f78ed4767deac369904301", "patch": "@@ -1,3 +1,11 @@\n+2017-06-27  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_combine<mode>): Directly\n+\tcall aarch64_split_simd_combine.\n+\t* (aarch64_combine_internal<mode>): Delete pattern.\n+\t* config/aarch64/aarch64.c (aarch64_split_simd_combine):\n+\tAllow register and subreg operands.\n+\n 2017-06-27  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* config/i386/vxworks.h (ASM_SPEC): Remove definition. No target"}, {"sha": "1cb6eeb318716aadacb84a44aa2062d486e0186b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a977dc0c5e069bf198f78ed4767deac369904301/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a977dc0c5e069bf198f78ed4767deac369904301/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=a977dc0c5e069bf198f78ed4767deac369904301", "patch": "@@ -2809,38 +2809,10 @@\n    (match_operand:VDC 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n-  rtx op1, op2;\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      op1 = operands[2];\n-      op2 = operands[1];\n-    }\n-  else\n-    {\n-      op1 = operands[1];\n-      op2 = operands[2];\n-    }\n-  emit_insn (gen_aarch64_combine_internal<mode> (operands[0], op1, op2));\n-  DONE;\n-}\n-)\n+  aarch64_split_simd_combine (operands[0], operands[1], operands[2]);\n \n-(define_insn_and_split \"aarch64_combine_internal<mode>\"\n-  [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n-        (vec_concat:<VDBL> (match_operand:VDC 1 \"register_operand\" \"w\")\n-\t\t\t   (match_operand:VDC 2 \"register_operand\" \"w\")))]\n-  \"TARGET_SIMD\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    aarch64_split_simd_combine (operands[0], operands[2], operands[1]);\n-  else\n-    aarch64_split_simd_combine (operands[0], operands[1], operands[2]);\n   DONE;\n }\n-[(set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"aarch64_simd_combine<mode>\""}, {"sha": "6bff74c86a69b2c9525cec3aaa5eff5f9af5ea82", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a977dc0c5e069bf198f78ed4767deac369904301/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a977dc0c5e069bf198f78ed4767deac369904301/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a977dc0c5e069bf198f78ed4767deac369904301", "patch": "@@ -1732,41 +1732,41 @@ aarch64_split_simd_combine (rtx dst, rtx src1, rtx src2)\n   machine_mode dst_mode = GET_MODE (dst);\n \n   gcc_assert (VECTOR_MODE_P (dst_mode));\n+  gcc_assert (register_operand (dst, dst_mode)\n+\t      && register_operand (src1, src_mode)\n+\t      && register_operand (src2, src_mode));\n \n-  if (REG_P (dst) && REG_P (src1) && REG_P (src2))\n-    {\n-      rtx (*gen) (rtx, rtx, rtx);\n-\n-      switch (src_mode)\n-\t{\n-\tcase V8QImode:\n-\t  gen = gen_aarch64_simd_combinev8qi;\n-\t  break;\n-\tcase V4HImode:\n-\t  gen = gen_aarch64_simd_combinev4hi;\n-\t  break;\n-\tcase V2SImode:\n-\t  gen = gen_aarch64_simd_combinev2si;\n-\t  break;\n-\tcase V4HFmode:\n-\t  gen = gen_aarch64_simd_combinev4hf;\n-\t  break;\n-\tcase V2SFmode:\n-\t  gen = gen_aarch64_simd_combinev2sf;\n-\t  break;\n-\tcase DImode:\n-\t  gen = gen_aarch64_simd_combinedi;\n-\t  break;\n-\tcase DFmode:\n-\t  gen = gen_aarch64_simd_combinedf;\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+  rtx (*gen) (rtx, rtx, rtx);\n \n-      emit_insn (gen (dst, src1, src2));\n-      return;\n+  switch (src_mode)\n+    {\n+    case V8QImode:\n+      gen = gen_aarch64_simd_combinev8qi;\n+      break;\n+    case V4HImode:\n+      gen = gen_aarch64_simd_combinev4hi;\n+      break;\n+    case V2SImode:\n+      gen = gen_aarch64_simd_combinev2si;\n+      break;\n+    case V4HFmode:\n+      gen = gen_aarch64_simd_combinev4hf;\n+      break;\n+    case V2SFmode:\n+      gen = gen_aarch64_simd_combinev2sf;\n+      break;\n+    case DImode:\n+      gen = gen_aarch64_simd_combinedi;\n+      break;\n+    case DFmode:\n+      gen = gen_aarch64_simd_combinedf;\n+      break;\n+    default:\n+      gcc_unreachable ();\n     }\n+\n+  emit_insn (gen (dst, src1, src2));\n+  return;\n }\n \n /* Split a complex SIMD move.  */"}]}