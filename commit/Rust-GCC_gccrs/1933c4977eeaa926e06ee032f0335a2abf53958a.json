{"sha": "1933c4977eeaa926e06ee032f0335a2abf53958a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzM2M0OTc3ZWVhYTkyNmUwNmVlMDMyZjAzMzVhMmFiZjUzOTU4YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T13:56:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T13:56:09Z"}, "message": "[multiple changes]\n\n2009-04-29  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_aggr.adb (Valid_Limited_Ancestor): Add test for the name of a\n\tfunction entity, to cover the case of a parameterless function call\n\tthat has not been resolved.\n\n2009-04-29  Robert Dewar  <dewar@adacore.com>\n\n\t* err_vars.ads, prj-part.adb, scans.ads, exp_tss.adb: Minor\n\treformatting and comment updates.\n\nFrom-SVN: r146970", "tree": {"sha": "eb388303113b155d67982b4825459cec23534365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb388303113b155d67982b4825459cec23534365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1933c4977eeaa926e06ee032f0335a2abf53958a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1933c4977eeaa926e06ee032f0335a2abf53958a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1933c4977eeaa926e06ee032f0335a2abf53958a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1933c4977eeaa926e06ee032f0335a2abf53958a/comments", "author": null, "committer": null, "parents": [{"sha": "51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb"}], "stats": {"total": 78, "additions": 56, "deletions": 22}, "files": [{"sha": "38819f6a8b3912ae85b11c5e412de07978011256", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1933c4977eeaa926e06ee032f0335a2abf53958a", "patch": "@@ -1,3 +1,14 @@\n+2009-04-29  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_aggr.adb (Valid_Limited_Ancestor): Add test for the name of a\n+\tfunction entity, to cover the case of a parameterless function call\n+\tthat has not been resolved.\n+\n+2009-04-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* err_vars.ads, prj-part.adb, scans.ads, exp_tss.adb: Minor\n+\treformatting and comment updates.\n+\n 2009-04-29  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_ugn.texi: Update some documentation about interfacing with C++"}, {"sha": "c4c28dafc365fc549b6da6841dcda43f222356c4", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=1933c4977eeaa926e06ee032f0335a2abf53958a", "patch": "@@ -32,9 +32,11 @@ with Uintp; use Uintp;\n \n package Err_Vars is\n \n-   --  Some variables are initialized so that some tools (such as gprbuild)\n-   --  can be built with -gnatVa and pragma Initialized_Scalars without\n-   --  problems.\n+   --  All of these variables are set when needed, so they do not need to be\n+   --  initialized. However, there is code that saves and restores existing\n+   --  values, which may malfunction in -gnatVa mode if the variable has never\n+   --  been iniitalized, so we initialize some variables to avoid exceptions\n+   --  from invalid values in such cases.\n \n    ------------------\n    -- Error Counts --\n@@ -44,16 +46,17 @@ package Err_Vars is\n    --  This is a count of errors that are serious enough to stop expansion,\n    --  and hence to prevent generation of an object file even if the\n    --  switch -gnatQ is set. Initialized to zero at the start of compilation.\n+   --  Initialized for -gnatVa use, see comment above.\n \n    Total_Errors_Detected : Nat := 0;\n    --  Number of errors detected so far. Includes count of serious errors and\n    --  non-serious errors, so this value is always greater than or equal to the\n    --  Serious_Errors_Detected value. Initialized to zero at the start of\n-   --  compilation.\n+   --  compilation. Initialized for -gnatVa use, see comment above.\n \n    Warnings_Detected : Nat := 0;\n    --  Number of warnings detected. Initialized to zero at the start of\n-   --  compilation.\n+   --  compilation. Initialized for -gnatVa use, see comment above.\n \n    ----------------------------------\n    -- Error Message Mode Variables --\n@@ -71,7 +74,7 @@ package Err_Vars is\n    --  note get reset by any Error_Msg call, so the caller is responsible\n    --  for resetting it.\n \n-   Warn_On_Instance : Boolean;\n+   Warn_On_Instance : Boolean := False;\n    --  Normally if a warning is generated in a generic template from the\n    --  analysis of the template, then the warning really belongs in the\n    --  template, and the default value of False for this Boolean achieves\n@@ -86,6 +89,7 @@ package Err_Vars is\n    --  resulting from illegalities, and also for substitution of more\n    --  appropriate error messages from higher semantic levels. It is\n    --  a counter so that the increment/decrement protocol nests neatly.\n+   --  Initialized for -gnatVa use, see comment above.\n \n    Error_Msg_Exception : exception;\n    --  Exception raised if Raise_Exception_On_Error is true"}, {"sha": "902d4e7b593382fecb47f8a4ff3b9d8e07fc38e1", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=1933c4977eeaa926e06ee032f0335a2abf53958a", "patch": "@@ -216,9 +216,10 @@ package body Exp_Tss is\n                --  default constructor and hence we must skip non-default\n                --  constructors (if any)\n \n-               elsif No (Next\n-                         (First\n-                          (Parameter_Specifications (Parent (Node (Elmt))))))\n+               elsif\n+                 No (Next\n+                      (First\n+                        (Parameter_Specifications (Parent (Node (Elmt))))))\n                then\n                   return Node (Elmt);\n                end if;\n@@ -240,7 +241,6 @@ package body Exp_Tss is\n             if Is_Init_Proc (Node (Elmt)) then\n                E1 := Next_Formal (First_Formal (Node (Elmt)));\n                E2 := First_Formal (Ref);\n-\n                while Present (E1) and then Present (E2) loop\n                   if Chars (E1) /= Chars (E2)\n                     or else Ekind (E1) /= Ekind (E2)"}, {"sha": "0608e028d208f001577b2b0127b9b7012635fdd6", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=1933c4977eeaa926e06ee032f0335a2abf53958a", "patch": "@@ -1099,6 +1099,13 @@ package body Prj.Part is\n                               A_Project_Name_And_Node.Node;\n \n                   begin\n+                     --  Loop through extending projects to find the ultimate\n+                     --  extending project, that is the one that is not\n+                     --  extended. But don't attempt to find an extending\n+                     --  project if the initial project is an abstract project,\n+                     --  as it may have been extended several time, so it\n+                     --  cannot have a single extending project.\n+\n                      while\n                        Extending_Project_Of (Decl, In_Tree) /= Empty_Node\n                      loop"}, {"sha": "6f9bcb8c727f3e6da451503db45ec35f9b651e1b", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=1933c4977eeaa926e06ee032f0335a2abf53958a", "patch": "@@ -344,40 +344,44 @@ package Scans is\n \n    --  Note: these variables can only be referenced during the parsing of a\n    --  file. Reference to any of them from Sem or the expander is wrong.\n-   --  Some of these variables are initialized so that some tools (such as\n-   --  gprbuild) can be built with -gnatVa and pragma Initialized_Scalars\n-   --  without problems.\n \n-   Scan_Ptr : Source_Ptr := No_Location;\n+   --  These variables are initialized as required by Scn.Initialize_Scanner,\n+   --  and should not be referenced before such a call. However, there are\n+   --  situations in which these variables are saved and restored, and this\n+   --  may happen before the first Initialize_Scanner call, resulting in the\n+   --  assignment of invalid values. To avoid this, and allow building with\n+   --  the -gnatVa switch, we initialize some variables to known valid values.\n+\n+   Scan_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Current scan pointer location. After a call to Scan, this points\n    --  just past the end of the token just scanned.\n \n-   Token : Token_Type := No_Token;\n+   Token : Token_Type := No_Token; -- init for -gnatVa\n    --  Type of current token\n \n-   Token_Ptr : Source_Ptr := No_Location;\n+   Token_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Pointer to first character of current token\n \n-   Current_Line_Start : Source_Ptr := No_Location;\n-   --  Pointer to first character of line containing current token\n+   Current_Line_Start : Source_Ptr := No_Location; -- init for -gnatVa\n+   --  Pointer to first character of line containing current token.\n \n-   Start_Column : Column_Number := No_Column_Number;\n+   Start_Column : Column_Number := No_Column_Number; -- init for -gnatVa\n    --  Starting column number (zero origin) of the first non-blank character\n    --  on the line containing the current token. This is used for error\n    --  recovery circuits which depend on looking at the column line up.\n \n-   Type_Token_Location : Source_Ptr := No_Location;\n+   Type_Token_Location : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Within a type declaration, gives the location of the TYPE keyword that\n    --  opened the type declaration. Used in checking the end column of a record\n    --  declaration, which can line up either with the TYPE keyword, or with the\n    --  start of the line containing the RECORD keyword.\n \n-   Checksum : Word := 0;\n+   Checksum : Word := 0; -- init for -gnatVa\n    --  Used to accumulate a CRC representing the tokens in the source\n    --  file being compiled. This CRC includes only program tokens, and\n    --  excludes comments.\n \n-   First_Non_Blank_Location : Source_Ptr := No_Location;\n+   First_Non_Blank_Location : Source_Ptr := No_Location; -- init for -gnatVa\n    --  Location of first non-blank character on the line containing the\n    --  current token (i.e. the location of the character whose column number\n    --  is stored in Start_Column)."}, {"sha": "e5d8cdc5e1f0538d2c843fbd666d7a593c5ec838", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933c4977eeaa926e06ee032f0335a2abf53958a/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=1933c4977eeaa926e06ee032f0335a2abf53958a", "patch": "@@ -2147,6 +2147,14 @@ package body Sem_Aggr is\n          elsif Nkind_In (Anc, N_Aggregate, N_Function_Call) then\n             return True;\n \n+         --  Check for a function name, to cover the case of a parameterless\n+         --  function call which hasn't been resolved yet.\n+\n+         elsif Is_Entity_Name (Anc)\n+           and then Ekind (Entity (Anc)) = E_Function\n+         then\n+            return True;\n+\n          elsif Nkind (Anc) = N_Attribute_Reference\n            and then Attribute_Name (Anc) = Name_Input\n          then"}]}