{"sha": "f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMDQ0MGY1NGM0ZDFjNzljYzhlMTY1Y2ZkMjRmZjAyZDlmNmI1Mg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-05T21:32:11Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-05T21:32:11Z"}, "message": "m68hc11.h (PAD_VARARGS_DOWN): Define and return according to va_arg type.\n\n\t* config/m68hc11/m68hc11.h (PAD_VARARGS_DOWN): Define and return\n\taccording to va_arg type.\n\t(EXPAND_BUILTIN_VA_ARG): Remove.\n\t* config/m68hc11/m68hc11.c (m68hc11_va_arg): Remove.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_va_arg): Remove.\n\nFrom-SVN: r63859", "tree": {"sha": "71963bc4c2e893384766d3bd5a23ff7cc46fb244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71963bc4c2e893384766d3bd5a23ff7cc46fb244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/comments", "author": null, "committer": null, "parents": [{"sha": "1c442892b378ded74a8c2207adba332f62a85471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c442892b378ded74a8c2207adba332f62a85471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c442892b378ded74a8c2207adba332f62a85471"}], "stats": {"total": 63, "additions": 12, "deletions": 51}, "files": [{"sha": "6e4ebbabe0d374a8ed112b90b3b2b901806273dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "patch": "@@ -1,3 +1,11 @@\n+2003-03-05  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.h (PAD_VARARGS_DOWN): Define and return\n+\taccording to va_arg type.\n+\t(EXPAND_BUILTIN_VA_ARG): Remove.\n+\t* config/m68hc11/m68hc11.c (m68hc11_va_arg): Remove.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_va_arg): Remove.\n+\n 2003-03-05  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_variable_issue): Remove unnecessary"}, {"sha": "dda14692b3111a4bfe764a0a714d044cb2dc162c", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "patch": "@@ -138,8 +138,6 @@ extern int m68hc11_function_arg_pass_by_reference PARAMS((const CUMULATIVE_ARGS*\n                                                           int));\n extern int m68hc11_function_arg_padding PARAMS((enum machine_mode, tree));\n \n-extern rtx m68hc11_va_arg PARAMS((tree,tree));\n-\n extern void m68hc11_function_epilogue PARAMS((FILE*,int));\n \n #endif /* TREE_CODE */"}, {"sha": "46d28a090855e1aee06c85514479bc634a52e0eb", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "patch": "@@ -1471,51 +1471,6 @@ m68hc11_function_arg (cum, mode, type, named)\n   return NULL_RTX;\n }\n \n-rtx\n-m68hc11_va_arg (valist, type)\n-     tree valist;\n-     tree type;\n-{\n-  tree addr_tree, t;\n-  HOST_WIDE_INT align;\n-  HOST_WIDE_INT rounded_size;\n-  rtx addr;\n-  int pad_direction;\n-\n-  /* Compute the rounded size of the type.  */\n-  align = PARM_BOUNDARY / BITS_PER_UNIT;\n-  rounded_size = (((int_size_in_bytes (type) + align - 1) / align) * align);\n-\n-  /* Get AP.  */\n-  addr_tree = valist;\n-  pad_direction = m68hc11_function_arg_padding (TYPE_MODE (type), type);\n-\n-  if (pad_direction == downward)\n-    {\n-      /* Small args are padded downward.  */\n-\n-      HOST_WIDE_INT adj;\n-      adj = TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT;\n-      if (rounded_size > align)\n-\tadj = rounded_size;\n-\n-      addr_tree = build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n-\t\t\t build_int_2 (rounded_size - adj, 0));\n-    }\n-\n-  addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n-  addr = copy_to_reg (addr);\n-\n-  /* Compute new value for AP.  */\n-  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t     build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t    build_int_2 (rounded_size, 0)));\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\n-  return addr;\n-}\n-\n /* If defined, a C expression which determines whether, and in which direction,\n    to pad out an argument with extra space.  The value should be of type\n    `enum direction': either `upward' to pad above the argument,"}, {"sha": "93253023660feef245d37894b688a79a91f193a3", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=f2d0440f54c4d1c79cc8e165cfd24ff02d9f6b52", "patch": "@@ -1047,6 +1047,10 @@ typedef struct m68hc11_args\n #define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n   m68hc11_function_arg_padding ((MODE), (TYPE))\n \n+#undef PAD_VARARGS_DOWN\n+#define PAD_VARARGS_DOWN \\\n+  (m68hc11_function_arg_padding (TYPE_MODE (type), type) == downward)\n+\n /* A C expression that indicates when it is the called function's\n    responsibility to make a copy of arguments passed by invisible\n    reference.  Normally, the caller makes a copy and passes the\n@@ -1093,10 +1097,6 @@ typedef struct m68hc11_args\n    caller saving results in spill failure.  */\n #define CALLER_SAVE_PROFITABLE(REFS,CALLS) 0\n \n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n-  m68hc11_va_arg (valist, type)\n-\n /* For an arg passed partly in registers and partly in memory,\n    this is the number of registers used.\n    For args passed entirely in registers or entirely in memory, zero."}]}