{"sha": "2d546ff69455f7deadab65309de89d19380a8864", "node_id": "C_kwDOANBUbNoAKDJkNTQ2ZmY2OTQ1NWY3ZGVhZGFiNjUzMDlkZTg5ZDE5MzgwYTg4NjQ", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-01-18T00:18:56Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-06-01T22:19:59Z"}, "message": "libgcc: Align __EH_FRAME_BEGIN__ to pointer size\n\nAligne __EH_FRAME_BEGIN__ to pointer size since gcc/unwind-dw2-fde.h has\n\n/* The first few fields of a CIE.  The CIE_id field is 0 for a CIE,\n   to distinguish it from a valid FDE.  FDEs are aligned to an addressing\n   unit boundary, but the fields within are unaligned.  */\nstruct dwarf_cie\n{\n  uword length;\n  sword CIE_id;\n  ubyte version;\n  unsigned char augmentation[];\n} __attribute__ ((packed, aligned (__alignof__ (void *))));\n\n/* The first few fields of an FDE.  */\nstruct dwarf_fde\n{\n  uword length;\n  sword CIE_delta;\n  unsigned char pc_begin[];\n} __attribute__ ((packed, aligned (__alignof__ (void *))));\n\nwhich indicates that CIE/FDE should be aligned at the pointer size.\n\n\tPR libgcc/27576\n\t* crtstuff.c (__EH_FRAME_BEGIN__): Aligned to pointer size.", "tree": {"sha": "1dfe6729a845805c0e26de262a85629a28ae83b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfe6729a845805c0e26de262a85629a28ae83b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d546ff69455f7deadab65309de89d19380a8864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d546ff69455f7deadab65309de89d19380a8864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d546ff69455f7deadab65309de89d19380a8864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d546ff69455f7deadab65309de89d19380a8864/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c3cd5ca5fe13724253d4270dc643fbc6b7f557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c3cd5ca5fe13724253d4270dc643fbc6b7f557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c3cd5ca5fe13724253d4270dc643fbc6b7f557"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "b0d0062ad5b97d7a09c6769ed6c82268b8f18337", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d546ff69455f7deadab65309de89d19380a8864/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d546ff69455f7deadab65309de89d19380a8864/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=2d546ff69455f7deadab65309de89d19380a8864", "patch": "@@ -261,7 +261,8 @@ STATIC func_ptr __DTOR_LIST__[1]\n /* Stick a label at the beginning of the frame unwind info so we can register\n    and deregister it with the exception handling library code.  */\n STATIC EH_FRAME_SECTION_CONST char __EH_FRAME_BEGIN__[]\n-     __attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n+     __attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__),\n+\t\t    aligned(__alignof__ (void *))))\n      = { };\n #endif /* USE_EH_FRAME_REGISTRY */\n "}]}