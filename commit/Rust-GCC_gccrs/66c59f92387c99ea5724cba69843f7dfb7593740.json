{"sha": "66c59f92387c99ea5724cba69843f7dfb7593740", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjNTlmOTIzODdjOTllYTU3MjRjYmE2OTg0M2Y3ZGZiNzU5Mzc0MA==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2015-09-03T11:29:59Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2015-09-03T11:29:59Z"}, "message": "[gomp] Thread pool management\n\nlibgomp/ChangeLog\n\n\t* config/posix/pool.h: New.\n\t* config/rtems/pool.h: Likewise.\n\t* config/rtems/proc.c: Likewise.\n\t* libgomp.h (gomp_thread_destructor): Declare.\n\t* team.c: Include configuration provided \"pool.h\".\n\t(gomp_get_thread_pool): Define in configuration.\n\t(gomp_team_end): Call configuration defined\n\tgomp_release_thread_pool().\n\nFrom-SVN: r227441", "tree": {"sha": "28616f3c911c89d9490c31eed99f4fed03829f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28616f3c911c89d9490c31eed99f4fed03829f54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c59f92387c99ea5724cba69843f7dfb7593740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c59f92387c99ea5724cba69843f7dfb7593740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c59f92387c99ea5724cba69843f7dfb7593740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c59f92387c99ea5724cba69843f7dfb7593740/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13c41b2e3e0cf6996ea2d49e0557814607fe2f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c41b2e3e0cf6996ea2d49e0557814607fe2f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c41b2e3e0cf6996ea2d49e0557814607fe2f59"}], "stats": {"total": 368, "additions": 348, "deletions": 20}, "files": [{"sha": "e64155ca7e415fc198f1a718108e904858cfe681", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=66c59f92387c99ea5724cba69843f7dfb7593740", "patch": "@@ -1,3 +1,14 @@\n+2015-09-03  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/posix/pool.h: New.\n+\t* config/rtems/pool.h: Likewise.\n+\t* config/rtems/proc.c: Likewise.\n+\t* libgomp.h (gomp_thread_destructor): Declare.\n+\t* team.c: Include configuration provided \"pool.h\".\n+\t(gomp_get_thread_pool): Define in configuration.\n+\t(gomp_team_end): Call configuration defined\n+\tgomp_release_thread_pool().\n+\n 2015-09-03  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rtems/bar.c: New."}, {"sha": "6c4dc15690689cfc028bf1b4cf725bc72d449605", "filename": "libgomp/config/posix/pool.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fconfig%2Fposix%2Fpool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fconfig%2Fposix%2Fpool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fposix%2Fpool.h?ref=66c59f92387c99ea5724cba69843f7dfb7593740", "patch": "@@ -0,0 +1,60 @@\n+/* Copyright (C) 2005-2015 Free Software Foundation, Inc.\n+   Contributed by Sebastian Huber <sebastian.huber@embedded-brains.de>.\n+\n+   This file is part of the GNU Offloading and Multi Processing Library\n+   (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This is the default implementation of the thread pool management\n+   for libgomp.  This type is private to the library.  */\n+\n+#ifndef GOMP_POOL_H\n+#define GOMP_POOL_H 1\n+\n+#include \"libgomp.h\"\n+\n+/* Get the thread pool, allocate and initialize it on demand.  */\n+\n+static inline struct gomp_thread_pool *\n+gomp_get_thread_pool (struct gomp_thread *thr, unsigned nthreads)\n+{\n+  struct gomp_thread_pool *pool = thr->thread_pool;\n+  if (__builtin_expect (pool == NULL, 0))\n+    {\n+      pool = gomp_malloc (sizeof (*pool));\n+      pool->threads = NULL;\n+      pool->threads_size = 0;\n+      pool->threads_used = 0;\n+      pool->last_team = NULL;\n+      pool->threads_busy = nthreads;\n+      thr->thread_pool = pool;\n+      pthread_setspecific (gomp_thread_destructor, thr);\n+    }\n+  return pool;\n+}\n+\n+static inline void\n+gomp_release_thread_pool (struct gomp_thread_pool *pool)\n+{\n+  /* Do nothing in the default implementation.  */\n+}\n+\n+#endif /* GOMP_POOL_H */"}, {"sha": "0ab68d949f2b26f630e06b19cd16fbf4fced63b0", "filename": "libgomp/config/rtems/pool.h", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fconfig%2Frtems%2Fpool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fconfig%2Frtems%2Fpool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Frtems%2Fpool.h?ref=66c59f92387c99ea5724cba69843f7dfb7593740", "patch": "@@ -0,0 +1,128 @@\n+/* Copyright (C) 2015 Free Software Foundation, Inc.\n+   Contributed by Sebastian Huber <sebastian.huber@embedded-brains.de>.\n+\n+   This file is part of the GNU Offloading and Multi Processing Library\n+   (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This is the RTEMS implementation of the thread pool management\n+   for libgomp.  This type is private to the library.  */\n+\n+#ifndef GOMP_POOL_H\n+#define GOMP_POOL_H 1\n+\n+#include \"libgomp.h\"\n+#include <sys/lock.h>\n+#include <string.h>\n+\n+/* For each scheduler instance there may be a thread pool reservoir\n+   to limit the number of thread pools used by the OpenMP master threads of this\n+   scheduler instance.  The reservoirs are configured via the\n+   GOMP_RTEMS_THREAD_POOLS environment variable.  */\n+struct gomp_thread_pool_reservoir {\n+  gomp_sem_t available;\n+  gomp_mutex_t lock;\n+  size_t index;\n+  struct gomp_thread_pool *pools[];\n+};\n+\n+struct gomp_tls_rtems_data {\n+  struct gomp_thread_pool_reservoir *thread_pool_reservoir;\n+};\n+\n+extern struct gomp_thread_pool_reservoir **gomp_thread_pool_reservoirs;\n+\n+extern __thread struct gomp_tls_rtems_data gomp_tls_rtems_data;\n+\n+static inline struct gomp_thread_pool_reservoir *\n+gomp_get_thread_pool_reservoir (void)\n+{\n+  struct gomp_thread_pool_reservoir *res =\n+    gomp_tls_rtems_data.thread_pool_reservoir;\n+\n+  if (res == NULL && gomp_thread_pool_reservoirs != NULL)\n+    {\n+      struct gomp_thread *thr = gomp_thread ();\n+      thr->thread_pool = gomp_malloc_cleared (sizeof (*thr->thread_pool));\n+      res = gomp_thread_pool_reservoirs[_Sched_Index ()];\n+      gomp_tls_rtems_data.thread_pool_reservoir = res;\n+    }\n+\n+  return res;\n+}\n+\n+static inline struct gomp_thread_pool *\n+gomp_get_own_thread_pool (struct gomp_thread *thr, unsigned nthreads)\n+{\n+  struct gomp_thread_pool *pool = thr->thread_pool;\n+  if (__builtin_expect (pool == NULL, 0))\n+    {\n+      pool = gomp_malloc_cleared (sizeof (*pool));\n+      pool->threads_busy = nthreads;\n+      thr->thread_pool = pool;\n+    }\n+  return pool;\n+}\n+\n+static inline struct gomp_thread_pool *\n+gomp_get_thread_pool (struct gomp_thread *thr, unsigned nthreads)\n+{\n+  struct gomp_thread_pool *pool;\n+\n+  if (__builtin_expect (thr->thread_pool == NULL, 0))\n+    pthread_setspecific (gomp_thread_destructor, thr);\n+\n+  if (nthreads != 1)\n+    {\n+      struct gomp_thread_pool_reservoir *res =\n+\tgomp_get_thread_pool_reservoir ();\n+      if (res != NULL)\n+\t{\n+\t  gomp_sem_wait (&res->available);\n+\t  gomp_mutex_lock (&res->lock);\n+\t  pool = res->pools[--res->index];\n+\t  gomp_mutex_unlock (&res->lock);\n+\t  pool->threads_busy = nthreads;\n+\t  thr->thread_pool = pool;\n+\t}\n+      else\n+\tpool = gomp_get_own_thread_pool (thr, nthreads);\n+    }\n+  else\n+    pool = NULL;\n+  return pool;\n+}\n+\n+static inline void\n+gomp_release_thread_pool (struct gomp_thread_pool *pool)\n+{\n+  struct gomp_thread_pool_reservoir *res =\n+    gomp_tls_rtems_data.thread_pool_reservoir;\n+  if (res != NULL)\n+    {\n+      gomp_mutex_lock (&res->lock);\n+      res->pools[res->index++] = pool;\n+      gomp_mutex_unlock (&res->lock);\n+      gomp_sem_post (&res->available);\n+    }\n+}\n+\n+#endif /* GOMP_POOL_H */"}, {"sha": "e879a9d41bb1ac34c70146e835a225faa902b1fe", "filename": "libgomp/config/rtems/proc.c", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fconfig%2Frtems%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fconfig%2Frtems%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Frtems%2Fproc.c?ref=66c59f92387c99ea5724cba69843f7dfb7593740", "patch": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2015 Free Software Foundation, Inc.\n+   Contributed by Sebastian Huber <sebastian.huber@embedded-brains.de>.\n+\n+   This file is part of the GNU Offloading and Multi Processing Library\n+   (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This file contains RTEMS specific routines related to counting\n+   online processors and dynamic load balancing.  */\n+\n+#include \"libgomp.h\"\n+#include \"pool.h\"\n+#include <errno.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+struct gomp_thread_pool_reservoir **gomp_thread_pool_reservoirs;\n+\n+__thread struct gomp_tls_rtems_data gomp_tls_rtems_data;\n+\n+static void\n+allocate_thread_pool_reservoirs (void)\n+{\n+  struct gomp_thread_pool_reservoir **reservoirs;\n+  size_t size = _Sched_Count () * sizeof (*reservoirs);\n+  reservoirs = gomp_malloc (size);\n+  gomp_thread_pool_reservoirs = reservoirs;\n+  memset (reservoirs, 0, size);\n+}\n+\n+static void\n+allocate_thread_pool_reservoir (unsigned long count, unsigned long scheduler)\n+{\n+  struct gomp_thread_pool_reservoir *res;\n+  struct gomp_thread_pool *pools;\n+  unsigned long i;\n+  size_t size;\n+\n+  res = gomp_thread_pool_reservoirs[scheduler];\n+  if (res != NULL)\n+    gomp_fatal (\"Multiple thread pool reservoir initialization\");\n+  size = sizeof (*res) + count * (sizeof(pools) + sizeof(*pools));\n+  pools = gomp_malloc (size);\n+  memset (pools, 0, size);\n+  res = (struct gomp_thread_pool_reservoir *) (pools + count);\n+  res->index = count;\n+  gomp_sem_init (&res->available, count);\n+  gomp_mutex_init (&res->lock);\n+  for (i = 0; i < count; ++i)\n+    res->pools[i] = &pools[i];\n+  gomp_thread_pool_reservoirs[scheduler] = res;\n+}\n+\n+static char *\n+parse_thread_pools (char *env, unsigned long *count, unsigned long *scheduler)\n+{\n+  size_t len;\n+  int i;\n+\n+  if (*env == ':')\n+    ++env;\n+\n+  errno = 0;\n+  *count = strtoul (env, &env, 10);\n+  if (errno != 0)\n+    gomp_fatal (\"Invalid thread pool count\");\n+\n+  if (*env != '@')\n+    gomp_fatal (\"Invalid thread pool scheduler prefix\");\n+  ++env;\n+\n+  len = 0;\n+  while (env[len] != '\\0' && env[len] != ':')\n+    ++len;\n+  i = _Sched_Name_to_index (env, len);\n+  if (i < 0)\n+    gomp_fatal (\"Invalid thread pool scheduler\");\n+  *scheduler = i;\n+  env += len;\n+\n+  return env;\n+}\n+\n+static void\n+init_thread_pool_reservoirs (void)\n+{\n+  char *env = getenv (\"GOMP_RTEMS_THREAD_POOLS\");\n+  if (env != NULL)\n+    {\n+      allocate_thread_pool_reservoirs ();\n+      while (*env != '\\0')\n+\t{\n+\t  unsigned long count;\n+\t  unsigned long scheduler;\n+\t  env = parse_thread_pools (env, &count, &scheduler);\n+\t  allocate_thread_pool_reservoir (count, scheduler);\n+\t}\n+    }\n+}\n+\n+void\n+gomp_init_num_threads (void)\n+{\n+  gomp_global_icv.nthreads_var = omp_get_num_procs();\n+  init_thread_pool_reservoirs ();\n+}\n+\n+unsigned\n+gomp_dynamic_max_threads (void)\n+{\n+  unsigned n_onln = (unsigned) omp_get_num_procs();\n+  unsigned nthreads_var = gomp_icv (false)->nthreads_var;\n+\n+  if (n_onln > nthreads_var)\n+    return nthreads_var;\n+  else\n+    return n_onln;\n+}\n+\n+int\n+omp_get_num_procs (void)\n+{\n+  return sysconf (_SC_NPROCESSORS_ONLN);\n+}\n+\n+ialias (omp_get_num_procs)"}, {"sha": "2ea1c5d857bca713726a6f01f6436e651ea7dcfc", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=66c59f92387c99ea5724cba69843f7dfb7593740", "patch": "@@ -513,6 +513,8 @@ static inline struct gomp_task_icv *gomp_icv (bool write)\n /* The attributes to be used during thread creation.  */\n extern pthread_attr_t gomp_thread_attr;\n \n+extern pthread_key_t gomp_thread_destructor;\n+\n /* Function prototypes.  */\n \n /* affinity.c */"}, {"sha": "274f3ed8a66fbb1ff027364cbc776735b55bd82b", "filename": "libgomp/team.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c59f92387c99ea5724cba69843f7dfb7593740/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=66c59f92387c99ea5724cba69843f7dfb7593740", "patch": "@@ -27,6 +27,7 @@\n    creation and termination.  */\n \n #include \"libgomp.h\"\n+#include \"pool.h\"\n #include <stdlib.h>\n #include <string.h>\n \n@@ -134,26 +135,6 @@ gomp_thread_start (void *xdata)\n   return NULL;\n }\n \n-/* Get the thread pool, allocate and initialize it on demand.  */\n-\n-static inline struct gomp_thread_pool *\n-gomp_get_thread_pool (struct gomp_thread *thr, unsigned nthreads)\n-{\n-  struct gomp_thread_pool *pool = thr->thread_pool;\n-  if (__builtin_expect (pool == NULL, 0))\n-    {\n-      pool = gomp_malloc (sizeof (*pool));\n-      pool->threads = NULL;\n-      pool->threads_size = 0;\n-      pool->threads_used = 0;\n-      pool->last_team = NULL;\n-      pool->threads_busy = nthreads;\n-      thr->thread_pool = pool;\n-      pthread_setspecific (gomp_thread_destructor, thr);\n-    }\n-  return pool;\n-}\n-\n static inline struct gomp_team *\n get_last_team (unsigned nthreads)\n {\n@@ -930,6 +911,7 @@ gomp_team_end (void)\n       if (pool->last_team)\n \tfree_team (pool->last_team);\n       pool->last_team = team;\n+      gomp_release_thread_pool (pool);\n     }\n }\n "}]}