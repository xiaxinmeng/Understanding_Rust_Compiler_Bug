{"sha": "0230277c253fc21548b8f50caa1d09f70e67e4ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzMDI3N2MyNTNmYzIxNTQ4YjhmNTBjYWExZDA5ZjcwZTY3ZTRjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-11-23T10:44:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-11-23T10:44:17Z"}, "message": "tree-dfa.c (get_ref_base_and_extent): Adjust maximum access size for DECL bases.\n\n2009-11-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-dfa.c (get_ref_base_and_extent): Adjust maximum access\n\tsize for DECL bases.\n\nFrom-SVN: r154433", "tree": {"sha": "637ba7d1df531640fbd33c390dfb5b4ddadb9987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/637ba7d1df531640fbd33c390dfb5b4ddadb9987"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0230277c253fc21548b8f50caa1d09f70e67e4ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0230277c253fc21548b8f50caa1d09f70e67e4ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0230277c253fc21548b8f50caa1d09f70e67e4ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0230277c253fc21548b8f50caa1d09f70e67e4ca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5120dc389fd149dda37c77d84ffb743e03d285ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5120dc389fd149dda37c77d84ffb743e03d285ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5120dc389fd149dda37c77d84ffb743e03d285ab"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "a00e858faeb469d38f5baa73e49d6b98fe4ec562", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0230277c253fc21548b8f50caa1d09f70e67e4ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0230277c253fc21548b8f50caa1d09f70e67e4ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0230277c253fc21548b8f50caa1d09f70e67e4ca", "patch": "@@ -1,3 +1,8 @@\n+2009-11-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (get_ref_base_and_extent): Adjust maximum access\n+\tsize for DECL bases.\n+\n 2009-11-22  Richard Henderson  <rth@redhat.com>\n \n \t* i386.c (avx_vpermilp_parallel): New function."}, {"sha": "20bdad2cbddd004eb709c69986b93a044bd7dd0c", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0230277c253fc21548b8f50caa1d09f70e67e4ca/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0230277c253fc21548b8f50caa1d09f70e67e4ca/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=0230277c253fc21548b8f50caa1d09f70e67e4ca", "patch": "@@ -914,13 +914,23 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n      the array.  The simplest way to conservatively deal with this\n      is to punt in the case that offset + maxsize reaches the\n      base type boundary.  This needs to include possible trailing padding\n-     that is there for alignment purposes.  */\n+     that is there for alignment purposes.\n \n-  if (seen_variable_array_ref\n-      && maxsize != -1\n-      && (!host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n-\t  || (bit_offset + maxsize\n-\t      == (signed) TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))))))\n+     That is of course only true if the base object is not a decl.  */\n+\n+  if (DECL_P (exp))\n+    {\n+      /* If maxsize is unknown adjust it according to the size of the\n+         base decl.  */\n+      if (maxsize == -1\n+\t  && host_integerp (DECL_SIZE (exp), 1))\n+\tmaxsize = TREE_INT_CST_LOW (DECL_SIZE (exp)) - bit_offset;\n+    }\n+  else if (seen_variable_array_ref\n+\t   && maxsize != -1\n+\t   && (!host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n+\t       || (bit_offset + maxsize\n+\t\t   == (signed) TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))))))\n     maxsize = -1;\n \n   /* ???  Due to negative offsets in ARRAY_REF we can end up with"}]}