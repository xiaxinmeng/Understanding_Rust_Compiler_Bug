{"sha": "82ce2a94d9c0782c0e88fabe924e90a050f56ac8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJjZTJhOTRkOWMwNzgyYzBlODhmYWJlOTI0ZTkwYTA1MGY1NmFjOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-02-15T23:29:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-02-15T23:29:52Z"}, "message": "re PR libstdc++/19955 (Second std::ctype<char>::narrow() does not call std::ctype<char>::do_narrow())\n\n2005-02-15  Paolo Carlini  <pcarlini@suse.de>\n\t    Jon Grimm  <jgrimm2@us.ibm.com>\n\n\tPR libstdc++/19955\n\t* include/bits/locale_facets.h (ctype<char>::_M_narrow_init()):\n\tFix the logic setting _M_narrow_ok: first check whether the\n\ttransformation is trivial with a dflt == 0, then deal with the\n\tspecial case of zero.\n\t* testsuite/22_locale/ctype/narrow/char/19955.cc: New.\n\n\t* include/bits/locale_facets.h (ctype<char>::_M_widen_init()):\n\tTweak consistently to use memcmp; minor formatting fixes.\n\nCo-Authored-By: Jon Grimm <jgrimm2@us.ibm.com>\n\nFrom-SVN: r95082", "tree": {"sha": "36ecbbfafa6758d85faee24364c6147bffcc899a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36ecbbfafa6758d85faee24364c6147bffcc899a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82ce2a94d9c0782c0e88fabe924e90a050f56ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ce2a94d9c0782c0e88fabe924e90a050f56ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ce2a94d9c0782c0e88fabe924e90a050f56ac8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ce2a94d9c0782c0e88fabe924e90a050f56ac8/comments", "author": null, "committer": null, "parents": [{"sha": "fd9850d552e8140111aed9c1aaa7c14d4fcb443b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9850d552e8140111aed9c1aaa7c14d4fcb443b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9850d552e8140111aed9c1aaa7c14d4fcb443b"}], "stats": {"total": 172, "additions": 143, "deletions": 29}, "files": [{"sha": "0d5155bc367c4314bc09d24883ff285cb165b31e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ce2a94d9c0782c0e88fabe924e90a050f56ac8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ce2a94d9c0782c0e88fabe924e90a050f56ac8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82ce2a94d9c0782c0e88fabe924e90a050f56ac8", "patch": "@@ -1,3 +1,16 @@\n+2005-02-15  Paolo Carlini  <pcarlini@suse.de>\n+\t    Jon Grimm  <jgrimm2@us.ibm.com>\n+\t\n+\tPR libstdc++/19955\n+\t* include/bits/locale_facets.h (ctype<char>::_M_narrow_init()):\n+\tFix the logic setting _M_narrow_ok: first check whether the\n+\ttransformation is trivial with a dflt == 0, then deal with the\n+\tspecial case of zero.\n+\t* testsuite/22_locale/ctype/narrow/char/19955.cc: New.\n+\n+\t* include/bits/locale_facets.h (ctype<char>::_M_widen_init()):\n+\tTweak consistently to use memcmp; minor formatting fixes.\n+\n 2005-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/19946"}, {"sha": "152170eb0a6c5be450d057e80d6e542c98d1f2e9", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ce2a94d9c0782c0e88fabe924e90a050f56ac8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ce2a94d9c0782c0e88fabe924e90a050f56ac8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=82ce2a94d9c0782c0e88fabe924e90a050f56ac8", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -690,7 +690,7 @@ namespace std\n       mutable char\t\t_M_widen[1 + static_cast<unsigned char>(-1)];\n       mutable char\t\t_M_narrow[1 + static_cast<unsigned char>(-1)];\n       mutable char\t\t_M_narrow_ok;\t// 0 uninitialized, 1 init,\n-\t\t\t\t\t\t// 2 non-consecutive\n+\t\t\t\t\t\t// 2 memcpy can't be used\n \n     public:\n       /// The facet id for ctype<char>\n@@ -865,7 +865,8 @@ namespace std\n       char_type\n       widen(char __c) const\n       {\n-\tif (_M_widen_ok) return _M_widen[static_cast<unsigned char>(__c)];\n+\tif (_M_widen_ok)\n+\t  return _M_widen[static_cast<unsigned char>(__c)];\n \tthis->_M_widen_init();\n \treturn this->do_widen(__c);\n       }\n@@ -896,7 +897,8 @@ namespace std\n \t    memcpy(__to, __lo, __hi - __lo);\n \t    return __hi;\n \t  }\n-\tif (!_M_widen_ok) _M_widen_init();\n+\tif (!_M_widen_ok)\n+\t  _M_widen_init();\n \treturn this->do_widen(__lo, __hi, __to);\n       }\n \n@@ -924,7 +926,8 @@ namespace std\n \tif (_M_narrow[static_cast<unsigned char>(__c)])\n \t  return _M_narrow[static_cast<unsigned char>(__c)];\n \tconst char __t = do_narrow(__c, __dfault);\n-\tif (__t != __dfault) _M_narrow[static_cast<unsigned char>(__c)] = __t;\n+\tif (__t != __dfault)\n+\t  _M_narrow[static_cast<unsigned char>(__c)] = __t;\n \treturn __t;\n       }\n \n@@ -954,7 +957,7 @@ namespace std\n       narrow(const char_type* __lo, const char_type* __hi,\n \t     char __dfault, char *__to) const\n       {\n-\tif (__builtin_expect(_M_narrow_ok == 1,true))\n+\tif (__builtin_expect(_M_narrow_ok == 1, true))\n \t  {\n \t    memcpy(__to, __lo, __hi - __lo);\n \t    return __hi;\n@@ -1161,39 +1164,32 @@ namespace std\n \n \t_M_widen_ok = 1;\n \t// Set _M_widen_ok to 2 if memcpy can't be used.\n-\tfor (size_t __j = 0; __j < sizeof(_M_widen); ++__j)\n-\t  if (__tmp[__j] != _M_widen[__j])\n-\t    {\n-\t      _M_widen_ok = 2;\n-\t      break;\n-\t    }\n+\tif (memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n+\t  _M_widen_ok = 2;\n       }\n \n       // Fill in the narrowing cache and flag whether all values are\n-      // valid or not.  _M_narrow_ok is set to 1 if the whole table is\n-      // narrowed, 2 if only some values could be narrowed.\n+      // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n+      // be used.\n       void _M_narrow_init() const\n       {\n \tchar __tmp[sizeof(_M_narrow)];\n \tfor (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n \t  __tmp[__i] = __i;\n \tdo_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n \n-\t// Check if any default values were created.  Do this by\n-\t// renarrowing with a different default value and comparing.\n-\tbool __consecutive = true;\n-\tfor (size_t __j = 0; __j < sizeof(_M_narrow); ++__j)\n-\t  if (!_M_narrow[__j])\n-\t    {\n-\t      char __c;\n-\t      do_narrow(__tmp + __j, __tmp + __j + 1, 1, &__c);\n-\t      if (__c == 1)\n-\t\t{\n-\t\t  __consecutive = false;\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t_M_narrow_ok = __consecutive ? 1 : 2;\n+\t_M_narrow_ok = 1;\n+\tif (memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n+\t  _M_narrow_ok = 2;\n+\telse\n+\t  {\n+\t    // Deal with the special case of zero: renarrow with a\n+\t    // different default and compare.\n+\t    char __c;\n+\t    do_narrow(__tmp, __tmp + 1, 1, &__c);\n+\t    if (__c == 1)\n+\t      _M_narrow_ok = 2;\n+\t  }\n       }\n     };\n "}, {"sha": "4ce1da33f01af16f5099921efb1ac298a8035e92", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/19955.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ce2a94d9c0782c0e88fabe924e90a050f56ac8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F19955.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ce2a94d9c0782c0e88fabe924e90a050f56ac8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F19955.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F19955.cc?ref=82ce2a94d9c0782c0e88fabe924e90a050f56ac8", "patch": "@@ -0,0 +1,105 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class Ctype1\n+: public std::ctype<char> \n+{\n+protected:\n+  const char*\n+  do_narrow(const char* lo, const char* hi,\n+\t    char dflt, char* to) const \n+  {\n+    for (int i = 0; lo != hi; ++lo, ++to, ++i)\n+      *to = *lo + i;\n+    return hi;\n+  }\n+};\n+\n+class Ctype2\n+: public std::ctype<char> \n+{\n+protected:\n+  const char*\n+  do_narrow(const char* lo, const char* hi,\n+\t    char dflt, char* to) const \n+  {\n+    for (int i = 0; lo != hi; ++lo, ++to, ++i)\n+      if (*lo == '\\000')\n+\t*to = dflt;\n+      else\n+\t*to = *lo;\n+    return hi;\n+  }\n+};\n+\n+// libstdc++/19955\n+void test01() \n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const char src[] = \"abcd\";\n+\n+  locale mylocale1(locale::classic(), new Ctype1);\n+  const ctype<char>& mc1 = use_facet<ctype<char> >(mylocale1);\n+\n+  char dst1[sizeof(src)];\n+  memset(dst1, 0, sizeof(src));\n+  char dst2[sizeof(src)];\n+  memset(dst2, 0, sizeof(src));\n+  \n+  mc1.narrow(src, src + sizeof(src), '*', dst1);\n+  mc1.narrow(src, src + sizeof(src), '*', dst2);\n+\n+  VERIFY( !memcmp(dst1, \"aceg\\004\", 5) );\n+  VERIFY( !memcmp(dst1, dst2, 5) );\n+\n+  locale mylocale2(locale::classic(), new Ctype2);\n+  const ctype<char>& mc2 = use_facet<ctype<char> >(mylocale2);\n+\n+  char dst3[sizeof(src)];\n+  memset(dst3, 0, sizeof(src));\n+  char dst4[sizeof(src)];\n+  memset(dst4, 0, sizeof(src));\n+  \n+  mc2.narrow(src, src + sizeof(src), '*', dst3);\n+  mc2.narrow(src, src + sizeof(src), '*', dst4);\n+\n+  VERIFY( !memcmp(dst3, \"abcd*\", 5) );\n+  VERIFY( !memcmp(dst3, dst4, 5) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}