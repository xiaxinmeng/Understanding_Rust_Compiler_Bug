{"sha": "5d369d583699112c7339f1f5555bd592f6fed70c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzNjlkNTgzNjk5MTEyYzczMzlmMWY1NTU1YmQ1OTJmNmZlZDcwYw==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2011-03-26T11:40:51Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2011-03-26T11:40:51Z"}, "message": "re PR rtl-optimization/48144 (ICE: in code_motion_path_driver, at sel-sched.c:6575 with -fselective-scheduling2 and custom flags)\n\n    PR rtl-optimization/48144\n    * sel-sched-ir.c (merge_history_vect): Factor out from ...\n    (merge_expr_data): ... here.\n    (av_set_intersect): Rename to av_set_code_motion_filter.\n    Update all callers.  Call merge_history_vect when an expression\n    is found in both sets.\n    * sel-sched-ir.h (av_set_code_motion_filter): Add prototype.\n\n    gcc/testsuite\n    PR rtl-optimization/48144\n    * gcc.dg/pr48144.c: New test.\n\nFrom-SVN: r171555", "tree": {"sha": "e2cf568813894a52b11c45de3a130c1125d79816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2cf568813894a52b11c45de3a130c1125d79816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d369d583699112c7339f1f5555bd592f6fed70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d369d583699112c7339f1f5555bd592f6fed70c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d369d583699112c7339f1f5555bd592f6fed70c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d369d583699112c7339f1f5555bd592f6fed70c/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51c7954daf0d223599ad0aeea64b63816ee1e354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c7954daf0d223599ad0aeea64b63816ee1e354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c7954daf0d223599ad0aeea64b63816ee1e354"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "181caf7d3d8595c9a6dfda30d58fd56fa710120b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d369d583699112c7339f1f5555bd592f6fed70c", "patch": "@@ -1,3 +1,13 @@\n+2011-03-26  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/48144\n+\t* sel-sched-ir.c (merge_history_vect): Factor out from ...\n+\t(merge_expr_data): ... here.\n+\t(av_set_intersect): Rename to av_set_code_motion_filter.\n+\tUpdate all callers.  Call merge_history_vect when an expression\n+\tis found in both sets.\n+\t* sel-sched-ir.h (av_set_code_motion_filter): Add prototype.\n+\n 2011-03-26  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/predicates.md (word_offset_memref_op): Handle"}, {"sha": "61f3ffba40d3d9ccf77b78ca81020da0aea3efe3", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=5d369d583699112c7339f1f5555bd592f6fed70c", "patch": "@@ -1564,6 +1564,20 @@ free_history_vect (VEC (expr_history_def, heap) **pvect)\n   *pvect = NULL;\n }\n \n+/* Merge vector FROM to PVECT.  */\n+static void\n+merge_history_vect (VEC (expr_history_def, heap) **pvect,\n+\t\t    VEC (expr_history_def, heap) *from)\n+{\n+  expr_history_def *phist;\n+  int i;\n+\n+  /* We keep this vector sorted.  */\n+  for (i = 0; VEC_iterate (expr_history_def, from, i, phist); i++)\n+    insert_in_history_vect (pvect, phist->uid, phist->type,\n+                            phist->old_expr_vinsn, phist->new_expr_vinsn,\n+                            phist->spec_ds);\n+}\n \n /* Compare two vinsns as rhses if possible and as vinsns otherwise.  */\n bool\n@@ -1796,9 +1810,6 @@ update_speculative_bits (expr_t to, expr_t from, insn_t split_point)\n void\n merge_expr_data (expr_t to, expr_t from, insn_t split_point)\n {\n-  int i;\n-  expr_history_def *phist;\n-\n   /* For now, we just set the spec of resulting expr to be minimum of the specs\n      of merged exprs.  */\n   if (EXPR_SPEC (to) > EXPR_SPEC (from))\n@@ -1822,20 +1833,12 @@ merge_expr_data (expr_t to, expr_t from, insn_t split_point)\n   EXPR_ORIG_SCHED_CYCLE (to) = MIN (EXPR_ORIG_SCHED_CYCLE (to),\n                                     EXPR_ORIG_SCHED_CYCLE (from));\n \n-  /* We keep this vector sorted.  */\n-  for (i = 0;\n-       VEC_iterate (expr_history_def, EXPR_HISTORY_OF_CHANGES (from),\n-                    i, phist);\n-       i++)\n-    insert_in_history_vect (&EXPR_HISTORY_OF_CHANGES (to),\n-                            phist->uid, phist->type,\n-                            phist->old_expr_vinsn, phist->new_expr_vinsn,\n-                            phist->spec_ds);\n-\n   EXPR_WAS_SUBSTITUTED (to) |= EXPR_WAS_SUBSTITUTED (from);\n   EXPR_WAS_RENAMED (to) |= EXPR_WAS_RENAMED (from);\n   EXPR_CANT_MOVE (to) |= EXPR_CANT_MOVE (from);\n \n+  merge_history_vect (&EXPR_HISTORY_OF_CHANGES (to),\n+\t\t      EXPR_HISTORY_OF_CHANGES (from));\n   update_target_availability (to, from, split_point);\n   update_speculative_bits (to, from, split_point);\n }\n@@ -2328,16 +2331,24 @@ av_set_split_usefulness (av_set_t av, int prob, int all_prob)\n }\n \n /* Leave in AVP only those expressions, which are present in AV,\n-   and return it.  */\n+   and return it, merging history expressions.  */\n void\n-av_set_intersect (av_set_t *avp, av_set_t av)\n+av_set_code_motion_filter (av_set_t *avp, av_set_t av)\n {\n   av_set_iterator i;\n-  expr_t expr;\n+  expr_t expr, expr2;\n \n   FOR_EACH_EXPR_1 (expr, i, avp)\n-    if (av_set_lookup (av, EXPR_VINSN (expr)) == NULL)\n+    if ((expr2 = av_set_lookup (av, EXPR_VINSN (expr))) == NULL)\n       av_set_iter_remove (&i);\n+    else\n+      /* When updating av sets in bookkeeping blocks, we can add more insns\n+\t there which will be transformed but the upper av sets will not\n+\t reflect those transformations.  We then fail to undo those\n+\t when searching for such insns.  So merge the history saved\n+\t in the av set of the block we are processing.  */\n+      merge_history_vect (&EXPR_HISTORY_OF_CHANGES (expr),\n+\t\t\t  EXPR_HISTORY_OF_CHANGES (expr2));\n }\n \n \f"}, {"sha": "5516da9391f1555052ef9e865b7264c8289e27d3", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=5d369d583699112c7339f1f5555bd592f6fed70c", "patch": "@@ -1565,7 +1565,7 @@ extern void av_set_leave_one_nonspec (av_set_t *);\n extern expr_t av_set_element (av_set_t, int);\n extern void av_set_substract_cond_branches (av_set_t *);\n extern void av_set_split_usefulness (av_set_t, int, int);\n-extern void av_set_intersect (av_set_t *, av_set_t);\n+extern void av_set_code_motion_filter (av_set_t *, av_set_t);\n \n extern void sel_save_haifa_priorities (void);\n "}, {"sha": "9179249ab1a22dc8a30d84554dcac2c883fe0f1c", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=5d369d583699112c7339f1f5555bd592f6fed70c", "patch": "@@ -6481,7 +6481,7 @@ code_motion_path_driver (insn_t insn, av_set_t orig_ops, ilist_t path,\n \n   /* Filter the orig_ops set.  */\n   if (AV_SET_VALID_P (insn))\n-    av_set_intersect (&orig_ops, AV_SET (insn));\n+    av_set_code_motion_filter (&orig_ops, AV_SET (insn));\n \n   /* If no more original ops, return immediately.  */\n   if (!orig_ops)"}, {"sha": "e8f0e3477dbd339fde55ac14b3cdc1180a95dae4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d369d583699112c7339f1f5555bd592f6fed70c", "patch": "@@ -1,3 +1,8 @@\n+2011-03-26  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/48144\n+\t* gcc.dg/pr48144.c: New test.\n+\n 2011-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/discr27.ad[sb]: New test."}, {"sha": "030202d064bb92e932d7379ad00994491624f714", "filename": "gcc/testsuite/gcc.dg/pr48144.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48144.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d369d583699112c7339f1f5555bd592f6fed70c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48144.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48144.c?ref=5d369d583699112c7339f1f5555bd592f6fed70c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O -frerun-cse-after-loop -fschedule-insns2 -fselective-scheduling2 -fno-tree-ch -funroll-loops --param=max-sched-extend-regions-iters=2 --param=max-sched-region-blocks=15\" } */\n+extern void *memcpy(void *dest, const void *src, __SIZE_TYPE__ n);\n+\n+void bar (void *, void *, void *);\n+\n+void foo\n+  (void *p, char *data, unsigned data_len)\n+{\n+  int buffer[8];\n+  int buf2[8];\n+  unsigned i;\n+  for (i = 0; i + 8 <= data_len; i += 8)\n+    bar (p, buffer, data + i);\n+  memcpy (buf2, data + i, data_len);\n+}"}]}