{"sha": "892a371f3b8c8ce79f59540908a8660cfc07f880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyYTM3MWYzYjhjOGNlNzlmNTk1NDA5MDhhODY2MGNmYzA3Zjg4MA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-08-28T20:14:46Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-08-28T20:14:46Z"}, "message": "Fix the use of linemap_add and remove unnecessary kludge\n\nlibcpp/\n\n\t* line-map.c (linemap_add): Assert that reason must not be\n\tLC_RENAME when called for the first time on a \"main input file\".\n\nc-family/\n\n\t* c-pch.c (c_common_read_pch): Call linemap_add with LC_ENTER as it's\n\tthe first time it's being called on this main TU.\n\ngcc/lto/\n\n\t* lto-lang.c (lto_init): Likewise.  Also, avoid calling\n\tlinemap_add twice.\n\ngcc/fortran/\n\n\t* scanner.c (load_file): Don't abuse LC_RENAME reason while\n\t(indirectly) calling linemap_add.\n\nFrom-SVN: r178146", "tree": {"sha": "eceb7d4375de4bb00babcce955c7e39bab611ff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eceb7d4375de4bb00babcce955c7e39bab611ff1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892a371f3b8c8ce79f59540908a8660cfc07f880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892a371f3b8c8ce79f59540908a8660cfc07f880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892a371f3b8c8ce79f59540908a8660cfc07f880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892a371f3b8c8ce79f59540908a8660cfc07f880/comments", "author": null, "committer": null, "parents": [{"sha": "e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "44eae0810111c9df8f9a3f3cb1d92f391ae355c1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -1,3 +1,8 @@\n+2011-08-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* c-pch.c (c_common_read_pch): Call linemap_add with LC_ENTER as\n+\tit's the first time it's being called on this main TU.\n+\n 2011-08-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/49396"}, {"sha": "7a289d622a853c24f56a7dcf3c14fe4a9f81000b", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -446,7 +446,7 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n   fclose (f);\n \n   line_table->trace_includes = saved_trace_includes;\n-  linemap_add (line_table, LC_RENAME, 0, saved_loc.file, saved_loc.line);\n+  linemap_add (line_table, LC_ENTER, 0, saved_loc.file, saved_loc.line);\n \n   /* Give the front end a chance to take action after a PCH file has\n      been loaded.  */"}, {"sha": "a9b85b29bd91e79fa24d8467e6cb297660fee984", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -1,3 +1,8 @@\n+2011-08-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* scanner.c (load_file): Don't abuse LC_RENAME reason while\n+    \t(indirectly) calling linemap_add.\n+\n 2011-08-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* trans-decl.c (get_proc_pointer_decl): Set DECL_TLS_MODEL"}, {"sha": "120d55022b82ad4f66e243b05aaaac5914aefcdc", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -1887,6 +1887,11 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n   int len, line_len;\n   bool first_line;\n   const char *filename;\n+  /* If realfilename and displayedname are different and non-null then\n+     surely realfilename is the preprocessed form of\n+     displayedname.  */\n+  bool preprocessed_p = (realfilename && displayedname\n+\t\t\t && strcmp (realfilename, displayedname));\n \n   filename = displayedname ? displayedname : realfilename;\n \n@@ -1925,9 +1930,24 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n \t}\n     }\n \n-  /* Load the file.  */\n+  /* Load the file.\n \n-  f = get_file (filename, initial ? LC_RENAME : LC_ENTER);\n+     A \"non-initial\" file means a file that is being included.  In\n+     that case we are creating an LC_ENTER map.\n+\n+     An \"initial\" file means a main file; one that is not included.\n+     That file has already got at least one (surely more) line map(s)\n+     created by gfc_init.  So the subsequent map created in that case\n+     must have LC_RENAME reason.\n+\n+     This latter case is not true for a preprocessed file.  In that\n+     case, although the file is \"initial\", the line maps created by\n+     gfc_init was used during the preprocessing of the file.  Now that\n+     the preprocessing is over and we are being fed the result of that\n+     preprocessing, we need to create a brand new line map for the\n+     preprocessed file, so the reason is going to be LC_ENTER.  */\n+\n+  f = get_file (filename, (initial && !preprocessed_p) ? LC_RENAME : LC_ENTER);\n   if (!initial)\n     add_file_change (f->filename, f->inclusion_line);\n   current_file = f;"}, {"sha": "6e1e187e0c4a25cd4468fbef60942fbde3131de4", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -1,3 +1,8 @@\n+2011-08-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* lto-lang.c (lto_init): Likewise.  Also, avoid calling\n+\tlinemap_add twice.\n+\n 2011-08-11  Martin Jambor  <mjambor@suse.cz>\n \n \t* lto.c (uniquify_nodes): Use main variant's BINFO too."}, {"sha": "d469fb93b6a1cfee6fd55a2579aa39ea4d394fb9", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -1081,8 +1081,7 @@ lto_init (void)\n   flag_generate_lto = flag_wpa;\n \n   /* Initialize libcpp line maps for gcc_assert to work.  */\n-  linemap_add (line_table, LC_RENAME, 0, NULL, 0);\n-  linemap_add (line_table, LC_RENAME, 0, NULL, 0);\n+  linemap_add (line_table, LC_ENTER, 0, NULL, 0);\n \n   /* Create the basic integer types.  */\n   build_common_tree_nodes (flag_signed_char, /*short_double=*/false);"}, {"sha": "4ecda03cfec4536728e2af6a09e75a9ae0c738bd", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -1,3 +1,8 @@\n+2011-08-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* line-map.c (linemap_add): Assert that reason must not be\n+\tLC_RENAME when called for the first time on a \"main input file\".\n+\n 2011-08-22  Gabriel Charette  <gchare@google.com>\n \n \t* init.c (cpp_create_reader): Inititalize forced_token_location_p."}, {"sha": "2a0749aad2e2ec86a36ed91c2c29ff45b90ec666", "filename": "libcpp/line-map.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a371f3b8c8ce79f59540908a8660cfc07f880/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a371f3b8c8ce79f59540908a8660cfc07f880/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=892a371f3b8c8ce79f59540908a8660cfc07f880", "patch": "@@ -114,11 +114,10 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n   if (reason == LC_RENAME_VERBATIM)\n     reason = LC_RENAME;\n \n-  /* If we don't keep our line maps consistent, we can easily\n-     segfault.  Don't rely on the client to do it for us.  */\n-  if (set->depth == 0)\n-    reason = LC_ENTER;\n-  else if (reason == LC_LEAVE)\n+  if (set->depth == 0 && reason == LC_RENAME)\n+    abort ();\n+\n+  if (reason == LC_LEAVE)\n     {\n       struct line_map *from;\n       bool error;"}]}