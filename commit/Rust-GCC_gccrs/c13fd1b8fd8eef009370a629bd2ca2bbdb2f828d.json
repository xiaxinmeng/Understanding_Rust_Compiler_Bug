{"sha": "c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "node_id": "C_kwDOANBUbNoAKGMxM2ZkMWI4ZmQ4ZWVmMDA5MzcwYTYyOWJkMmNhMmJiZGIyZjgyOGQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-03-14T08:57:48Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-04-29T08:44:18Z"}, "message": "Remove various deprecated methods in class irange.\n\nThis patch cleans up some irange methods in preparation for other\ncleanups later in the cycle.\n\nFirst, we prefer the reference overloads for union and intersect as\nthe pointer versions have been deprecated for a couple releases.\n\nAlso, I've renamed the legacy union/intersect whose only function was\nto provide additional verbosity for VRP into\nlegacy_verbose_{union,intersect}.  This is a temporary rename to serve\nas a visual reminder of which of the methods are bound for the chopping\nblock when the legacy code gets removed later this cycle.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-fold.cc (size_must_be_zero_p): Use reference\n\tinstead of pointer\n\t* gimple-ssa-evrp-analyze.cc\n\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Rename\n\tintersect to legacy_verbose_intersect.\n\t* ipa-cp.cc (ipcp_vr_lattice::meet_with_1): Use reference instead\n\tof pointer.\n\t* tree-ssa-dom.cc (dom_jt_simplifier::simplify): Use value_range\n\tinstead of value_range_equiv.\n\t* tree-vrp.cc (extract_range_from_plus_minus_expr): Use reference\n\tinstead of pointer.\n\t(find_case_label_range): Same.\n\t* value-range-equiv.cc (value_range_equiv::intersect): Rename to...\n\t(value_range_equiv::legacy_verbose_intersect): ...this.\n\t(value_range_equiv::union_): Rename to...\n\t(value_range_equiv::legacy_verbose_union_): ...this.\n\t* value-range-equiv.h (class value_range_equiv): Rename union and\n\tintersect to legacy_verbose_{intersect,union}.\n\t* value-range.cc (irange::union_): Rename to...\n\t(irange::legacy_verbose_union_): ...this.\n\t(irange::intersect): Rename to...\n\t(irange::legacy_verbose_intersect): ...this.\n\t* value-range.h (irange::union_): Rename union_ to\n\tlegacy_verbose_union.\n\t(irange::intersect): Rename intersect to legacy_verbose_intersect.\n\t* vr-values.cc (vr_values::update_value_range): Same.\n\t(vr_values::extract_range_for_var_from_comparison_expr): Same.\n\t(vr_values::extract_range_from_cond_expr): Rename union_ to\n\tlegacy_verbose_union.\n\t(vr_values::extract_range_from_phi_node): Same.", "tree": {"sha": "a20eeb9d5e8c053a7edcd8e776b62344285a452d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a20eeb9d5e8c053a7edcd8e776b62344285a452d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "7baec119ba35cc95cca5e05e591bb390769dc403", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -883,7 +883,7 @@ size_must_be_zero_p (tree size)\n     get_global_range_query ()->range_of_expr (vr, size);\n   if (vr.undefined_p ())\n     vr.set_varying (TREE_TYPE (size));\n-  vr.intersect (&valid_range);\n+  vr.intersect (valid_range);\n   return vr.zero_p ();\n }\n "}, {"sha": "fec6e87ba80d6f7dbf6d04ba848dd53d3e4d4574", "filename": "gcc/gimple-ssa-evrp-analyze.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fgimple-ssa-evrp-analyze.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fgimple-ssa-evrp-analyze.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -207,7 +207,7 @@ evrp_range_analyzer::record_ranges_from_incoming_edge (basic_block bb)\n \t      const value_range_equiv *old_vr\n \t\t= get_value_range (vrs[i].first);\n \t      value_range tem (*old_vr);\n-\t      tem.intersect (vrs[i].second);\n+\t      tem.legacy_verbose_intersect (vrs[i].second);\n \t      if (tem.equal_p (*old_vr))\n \t\t{\n \t\t  free_value_range (vrs[i].second);"}, {"sha": "11f4a327b99fbc1de3f6634ea9a8149019894c29", "filename": "gcc/ipa-cp.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fipa-cp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fipa-cp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -1018,7 +1018,7 @@ ipcp_vr_lattice::meet_with_1 (const value_range *other_vr)\n     return set_to_bottom ();\n \n   value_range save (m_vr);\n-  m_vr.union_ (other_vr);\n+  m_vr.union_ (*other_vr);\n   return !m_vr.equal_p (save);\n }\n "}, {"sha": "4a0cf2ef54c8f5b855237feb821b1802c72e4041", "filename": "gcc/tree-ssa-dom.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Ftree-ssa-dom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Ftree-ssa-dom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -694,7 +694,7 @@ dom_jt_simplifier::simplify (gimple *stmt, gimple *within_stmt,\n       if (TREE_CODE (op) != SSA_NAME)\n \treturn NULL_TREE;\n \n-      const value_range_equiv *vr = m_vr_values->get_value_range (op);\n+      const value_range *vr = m_vr_values->get_value_range (op);\n       return find_case_label_range (switch_stmt, vr);\n     }\n   if (gassign *assign_stmt = dyn_cast <gassign *> (stmt))"}, {"sha": "0cbd9d369ca7ee35f005c9f8c15fa4b5c6ecce71", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -768,7 +768,7 @@ extract_range_from_plus_minus_expr (value_range *vr,\n \t  value_range vrres;\n \t  extract_range_from_plus_minus_expr (&vrres, code, expr_type,\n \t\t\t\t\t      &vrtem1, vr1_);\n-\t  vr->union_ (&vrres);\n+\t  vr->union_ (vrres);\n \t}\n       return;\n     }\n@@ -782,7 +782,7 @@ extract_range_from_plus_minus_expr (value_range *vr,\n \t  value_range vrres;\n \t  extract_range_from_plus_minus_expr (&vrres, code, expr_type,\n \t\t\t\t\t      vr0_, &vrtem1);\n-\t  vr->union_ (&vrres);\n+\t  vr->union_ (vrres);\n \t}\n       return;\n     }\n@@ -2470,7 +2470,7 @@ find_case_label_range (gswitch *switch_stmt, const irange *range_of_op)\n       int_range_max label_range (CASE_LOW (label), case_high);\n       if (!types_compatible_p (label_range.type (), range_of_op->type ()))\n \trange_cast (label_range, range_of_op->type ());\n-      label_range.intersect (range_of_op);\n+      label_range.intersect (*range_of_op);\n       if (label_range == *range_of_op)\n \treturn label;\n     }\n@@ -2494,7 +2494,7 @@ find_case_label_range (gswitch *switch_stmt, const irange *range_of_op)\n       int_range_max label_range (CASE_LOW (min_label), case_high);\n       if (!types_compatible_p (label_range.type (), range_of_op->type ()))\n \trange_cast (label_range, range_of_op->type ());\n-      label_range.intersect (range_of_op);\n+      label_range.intersect (*range_of_op);\n       if (label_range.undefined_p ())\n \treturn gimple_switch_label (switch_stmt, 0);\n     }"}, {"sha": "77c6f5ca99d73cf197f16045e611815f71367e85", "filename": "gcc/value-range-equiv.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range-equiv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range-equiv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-equiv.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -188,7 +188,7 @@ value_range_equiv::equiv_add (const_tree var,\n }\n \n void\n-value_range_equiv::intersect (const value_range_equiv *other)\n+value_range_equiv::legacy_verbose_intersect (const value_range_equiv *other)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -238,7 +238,7 @@ value_range_equiv::intersect (const value_range_equiv *other)\n }\n \n void\n-value_range_equiv::union_ (const value_range_equiv *other)\n+value_range_equiv::legacy_verbose_union_ (const value_range_equiv *other)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}, {"sha": "0aa1069cb6151ff3755829b57d3cb657a674dcf0", "filename": "gcc/value-range-equiv.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range-equiv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range-equiv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-equiv.h?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -48,8 +48,8 @@ class GTY((user)) value_range_equiv : public value_range\n \n   bool operator== (const value_range_equiv &) const /* = delete */;\n   bool operator!= (const value_range_equiv &) const /* = delete */;\n-  void intersect (const value_range_equiv *);\n-  void union_ (const value_range_equiv *);\n+  void legacy_verbose_intersect (const value_range_equiv *);\n+  void legacy_verbose_union_ (const value_range_equiv *);\n   bool equal_p (const value_range_equiv &, bool ignore_equivs) const;\n \n   /* Types of value ranges.  */"}, {"sha": "94301b32c377d9e483b28f2bce77ceb0ca21cd9a", "filename": "gcc/value-range.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -1442,7 +1442,7 @@ irange::legacy_union (irange *vr0, const irange *vr1)\n    may not be the smallest possible such range.  */\n \n void\n-irange::union_ (const irange *other)\n+irange::legacy_verbose_union_ (const irange *other)\n {\n   if (legacy_mode_p ())\n     {\n@@ -1482,7 +1482,7 @@ irange::union_ (const irange *other)\n }\n \n void\n-irange::intersect (const irange *other)\n+irange::legacy_verbose_intersect (const irange *other)\n {\n   if (legacy_mode_p ())\n     {"}, {"sha": "90a395f4d73a1d32fb55889e9d52133eaa96481b", "filename": "gcc/value-range.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -96,8 +96,8 @@ class GTY((user)) irange\n   bool may_contain_p (tree) const;\t\t// DEPRECATED\n   void set (tree);\t\t\t\t// DEPRECATED\n   bool equal_p (const irange &) const;\t\t// DEPRECATED\n-  void union_ (const class irange *);\t\t// DEPRECATED\n-  void intersect (const irange *);\t\t// DEPRECATED\n+  void legacy_verbose_union_ (const class irange *);\t// DEPRECATED\n+  void legacy_verbose_intersect (const irange *);\t// DEPRECATED\n \n protected:\n   irange (tree *, unsigned);\n@@ -549,7 +549,7 @@ irange::union_ (const irange &r)\n {\n   dump_flags_t m_flags = dump_flags;\n   dump_flags &= ~TDF_DETAILS;\n-  irange::union_ (&r);\n+  irange::legacy_verbose_union_ (&r);\n   dump_flags = m_flags;\n }\n \n@@ -558,7 +558,7 @@ irange::intersect (const irange &r)\n {\n   dump_flags_t m_flags = dump_flags;\n   dump_flags &= ~TDF_DETAILS;\n-  irange::intersect (&r);\n+  irange::legacy_verbose_intersect (&r);\n   dump_flags = m_flags;\n }\n "}, {"sha": "301996d213474c7d42a78512614a4f87707a5832", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=c13fd1b8fd8eef009370a629bd2ca2bbdb2f828d", "patch": "@@ -266,7 +266,7 @@ vr_values::update_value_range (const_tree var, value_range_equiv *new_vr)\n       value_range_equiv nr;\n       get_global_range_query ()->range_of_expr (nr, const_cast <tree> (var));\n       if (!nr.undefined_p ())\n-\tnew_vr->intersect (&nr);\n+\tnew_vr->legacy_verbose_intersect (&nr);\n     }\n \n   /* Update the value range, if necessary.  If we cannot allocate a lattice\n@@ -750,7 +750,7 @@ vr_values::extract_range_for_var_from_comparison_expr (tree var,\n     gcc_unreachable ();\n \n   /* Finally intersect the new range with what we already know about var.  */\n-  vr_p->intersect (get_value_range (var));\n+  vr_p->legacy_verbose_intersect (get_value_range (var));\n }\n \n /* Extract value range information from an ASSERT_EXPR EXPR and store\n@@ -1014,7 +1014,7 @@ vr_values::extract_range_from_cond_expr (value_range_equiv *vr, gassign *stmt)\n \n   /* The resulting value range is the union of the operand ranges */\n   vr->deep_copy (vr0);\n-  vr->union_ (vr1);\n+  vr->legacy_verbose_union_ (vr1);\n }\n \n \n@@ -2300,10 +2300,10 @@ simplify_using_ranges::vrp_evaluate_conditional_warnv_with_ops\n \t     for previously LE_ or LT_EXPR and GT_EXPR otherwise, but\n \t     the comments next to the enclosing if suggest it's not\n \t     generally profitable to do so.  */\n-\t  vro.intersect (vr0);\n+\t  vro.legacy_verbose_intersect (vr0);\n \t  if (vro.undefined_p ())\n \t    return boolean_false_node;\n-\t  vri.intersect (vr0);\n+\t  vri.legacy_verbose_intersect (vr0);\n \t  if (vri.undefined_p ())\n \t    return boolean_true_node;\n \t}\n@@ -2803,7 +2803,7 @@ vr_values::extract_range_from_phi_node (gphi *phi,\n \t  if (first)\n \t    vr_result->deep_copy (vr_arg);\n \t  else\n-\t    vr_result->union_ (vr_arg);\n+\t    vr_result->legacy_verbose_union_ (vr_arg);\n \t  first = false;\n \n \t  if (vr_result->varying_p ())"}]}