{"sha": "0020b823d6c3280e7e0a2081a36798a80b17bf7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyMGI4MjNkNmMzMjgwZTdlMGEyMDgxYTM2Nzk4YTgwYjE3YmY3ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-02-08T18:46:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-02-08T18:46:46Z"}, "message": "sparc.c (function_arg_record_value_3): Fix calculation of the number of integer registers required.\n\n        * config/sparc/sparc.c (function_arg_record_value_3): Fix\n        calculation of the number of integer registers required.\n        (function_arg_record_value): Likewise.\n\nFrom-SVN: r39544", "tree": {"sha": "997e1d404634811e2cd006b41c5b57927b5f2a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/997e1d404634811e2cd006b41c5b57927b5f2a8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0020b823d6c3280e7e0a2081a36798a80b17bf7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0020b823d6c3280e7e0a2081a36798a80b17bf7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0020b823d6c3280e7e0a2081a36798a80b17bf7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0020b823d6c3280e7e0a2081a36798a80b17bf7d/comments", "author": null, "committer": null, "parents": [{"sha": "33c4f1746c89572fc7a7a843cc6aa59302a2756c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c4f1746c89572fc7a7a843cc6aa59302a2756c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c4f1746c89572fc7a7a843cc6aa59302a2756c"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "b2d50401335f400a0e4a45d703e56800bd13fcbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0020b823d6c3280e7e0a2081a36798a80b17bf7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0020b823d6c3280e7e0a2081a36798a80b17bf7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0020b823d6c3280e7e0a2081a36798a80b17bf7d", "patch": "@@ -1,3 +1,9 @@\n+2001-02-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sparc.c (function_arg_record_value_3): Fix\n+\tcalculation of the number of integer registers required.\n+\t(function_arg_record_value): Likewise.\n+\n 2001-02-08  Jason Merrill  <jason@redhat.com>\n \n \t* diagnostic.c (internal_error): Say \"confused\" after 1 error, not"}, {"sha": "0d194f1b28a7127225cbb26f338a94b01611c62c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0020b823d6c3280e7e0a2081a36798a80b17bf7d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0020b823d6c3280e7e0a2081a36798a80b17bf7d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=0020b823d6c3280e7e0a2081a36798a80b17bf7d", "patch": "@@ -4057,6 +4057,9 @@ static void function_arg_record_value_1\n static rtx function_arg_record_value\n \tPARAMS ((tree, enum machine_mode, int, int, int));\n \n+/* A subroutine of function_arg_record_value.  Traverse the structure\n+   recusively and determine how many registers will be required.  */\n+\n static void\n function_arg_record_value_1 (type, startbitpos, parms)\n      tree type;\n@@ -4131,7 +4134,8 @@ function_arg_record_value_1 (type, startbitpos, parms)\n     }\n }\n \n-/* Handle recursive structure field register assignment.  */\n+/* A subroutine of function_arg_record_value.  Assign the bits of the\n+   structure between parms->intoffset and bitpos to integer registers.  */\n \n static void \n function_arg_record_value_3 (bitpos, parms)\n@@ -4140,6 +4144,7 @@ function_arg_record_value_3 (bitpos, parms)\n {\n   enum machine_mode mode;\n   unsigned int regno;\n+  unsigned int startbit, endbit;\n   int this_slotno, intslots, intoffset;\n   rtx reg;\n \n@@ -4149,7 +4154,9 @@ function_arg_record_value_3 (bitpos, parms)\n   intoffset = parms->intoffset;\n   parms->intoffset = -1;\n \n-  intslots = (bitpos - intoffset + BITS_PER_WORD - 1) / BITS_PER_WORD;\n+  startbit = intoffset & -BITS_PER_WORD;\n+  endbit = (bitpos + BITS_PER_WORD - 1) & -BITS_PER_WORD;\n+  intslots = (endbit - startbit) / BITS_PER_WORD;\n   this_slotno = parms->slotno + intoffset / BITS_PER_WORD;\n \n   intslots = MIN (intslots, SPARC_INT_ARG_MAX - this_slotno);\n@@ -4183,6 +4190,11 @@ function_arg_record_value_3 (bitpos, parms)\n   while (intslots > 0);\n }\n \n+/* A subroutine of function_arg_record_value.  Traverse the structure\n+   recursively and assign bits to floating point registers.  Track which\n+   bits in between need integer registers; invoke function_arg_record_value_3\n+   to make that happen.  */\n+\n static void\n function_arg_record_value_2 (type, startbitpos, parms)\n      tree type;\n@@ -4243,6 +4255,9 @@ function_arg_record_value_2 (type, startbitpos, parms)\n     }\n }\n \n+/* Used by function_arg and function_value to implement the complex\n+   Sparc64 structure calling conventions.  */\n+\n static rtx\n function_arg_record_value (type, mode, slotno, named, regbase)\n      tree type;\n@@ -4265,10 +4280,12 @@ function_arg_record_value (type, mode, slotno, named, regbase)\n \n   if (parms.intoffset != -1)\n     {\n+      unsigned int startbit, endbit;\n       int intslots, this_slotno;\n \n-      intslots = (typesize*BITS_PER_UNIT - parms.intoffset + BITS_PER_WORD - 1)\n-\t/ BITS_PER_WORD;\n+      startbit = parms.intoffset & -BITS_PER_WORD;\n+      endbit = (typesize*BITS_PER_UNIT + BITS_PER_WORD - 1) & -BITS_PER_WORD;\n+      intslots = (endbit - startbit) / BITS_PER_WORD;\n       this_slotno = slotno + parms.intoffset / BITS_PER_WORD;\n \n       intslots = MIN (intslots, SPARC_INT_ARG_MAX - this_slotno);"}]}