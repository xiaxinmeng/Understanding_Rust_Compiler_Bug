{"sha": "863a2c7ecc08465b437e66e730bb185474552688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzYTJjN2VjYzA4NDY1YjQzN2U2NmU3MzBiYjE4NTQ3NDU1MjY4OA==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2014-07-13T11:07:44Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2014-07-13T11:07:44Z"}, "message": "random: Add uniform_on_sphere_distribution definition.\n\n2014-07-12  Ulrich Drepper  <drepper@gmail.com>\n\n\t* include/ext/random: Add uniform_on_sphere_distribution definition.\n\t* include/ext/random.tcc: Add out-of-band member function definitions\n\tfor uniform_on_sphere_distribution.\n\t* testsuite/ext/random/uniform_on_sphere_distribution/\n\tcons/default.cc: New file.\n\t* testsuite/ext/random/uniform_on_sphere_distribution/\n\toperators/equal.cc: New file.\n\t* testsuite/ext/random/uniform_on_sphere_distribution/\n\toperators/inequal.cc: New file.\n\t* testsuite/ext/random/uniform_on_sphere_distribution/\n\toperators/serialize.cc: New file.\n\nFrom-SVN: r212492", "tree": {"sha": "6060be981e0cc6735706e38e216907078f220b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6060be981e0cc6735706e38e216907078f220b14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/863a2c7ecc08465b437e66e730bb185474552688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863a2c7ecc08465b437e66e730bb185474552688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863a2c7ecc08465b437e66e730bb185474552688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863a2c7ecc08465b437e66e730bb185474552688/comments", "author": null, "committer": null, "parents": [{"sha": "4a05a9a8d264103cbcccdd62c6fcd3a3059c0efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a05a9a8d264103cbcccdd62c6fcd3a3059c0efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a05a9a8d264103cbcccdd62c6fcd3a3059c0efd"}], "stats": {"total": 469, "additions": 457, "deletions": 12}, "files": [{"sha": "4b798c0f125142fb0a89e7ae14a840a6b04621d8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=863a2c7ecc08465b437e66e730bb185474552688", "patch": "@@ -1,3 +1,17 @@\n+2014-07-12  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* include/ext/random: Add uniform_on_sphere_distribution definition.\n+\t* include/ext/random.tcc: Add out-of-band member function definitions\n+\tfor uniform_on_sphere_distribution.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/\n+\tcons/default.cc: New file.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/\n+\toperators/equal.cc: New file.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/\n+\toperators/inequal.cc: New file.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/\n+\toperators/serialize.cc: New file.\n+\n 2014-07-11  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tAdd the logistic_distribution as an extension.\n@@ -94,7 +108,7 @@\n \n \tRevert:\n \t2014-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n-\t    \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR libstdc++/61536\n \t* config/abi/pre/gnu.ver: Adjust for out of line comparisons.\n@@ -159,7 +173,7 @@\n \t* include/std/chrono (_Checked_integral_constant): Allow zero.\n \t* testsuite/20_util/duration/literals/values.cc: Test non-positive\n \tvalues and digit separators.\n-\t* include/experimental/any \n+\t* include/experimental/any\n \n \tPR libstdc++/61532\n \t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Do not\n@@ -541,10 +555,10 @@\n \n 2014-05-20  Cesar Philippidis  <cesar@codesourcery.com>\n \n-\t* scripts/testsuite_flags.in (cxxflags): Remove @CXXFLAGS@ since \n+\t* scripts/testsuite_flags.in (cxxflags): Remove @CXXFLAGS@ since\n \tlibstdc++.exp imports those flags via getenv.\n-\t* testsuite/lib/libstdc++.exp (libstdc++_init): Ensure that \n-\tCXXFLAGS contains a '-O' flag. \n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Ensure that\n+\tCXXFLAGS contains a '-O' flag.\n \n 2014-05-20  Alexey Merzlyakov  <alexey.merzlyakov@samsung.com>\n "}, {"sha": "e6d5ca0dba4d3f5a451af7bbe6b0ca9b1e0a6ffd", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 197, "deletions": 6, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=863a2c7ecc08465b437e66e730bb185474552688", "patch": "@@ -36,6 +36,7 @@\n #else\n \n #include <random>\n+#include <algorithm>\n #include <array>\n #include <ext/cmath>\n #ifdef __SSE2__\n@@ -2962,7 +2963,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tusing _IntType = typename std::make_signed<result_type>::type;\n \treturn static_cast<result_type>(std::max(static_cast<_IntType>(0),\n-\t\t  \t\tstatic_cast<_IntType>(this->total_draws()\n+\t\t\t\tstatic_cast<_IntType>(this->total_draws()\n \t\t\t\t\t\t- this->unsuccessful_size())));\n       }\n \n@@ -3033,7 +3034,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend std::basic_ostream<_CharT, _Traits>&\n \toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t\t   const __gnu_cxx::hypergeometric_distribution<_UIntType1>&\n-                   __x);\n+\t\t   __x);\n \n       /**\n        * @brief Extracts a %hypergeometric_distribution random number\n@@ -3127,7 +3128,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a\n-              && __p1._M_b == __p2._M_b; }\n+\t      && __p1._M_b == __p2._M_b; }\n \n       private:\n \tvoid _M_initialize();\n@@ -3238,10 +3239,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *        be generated are equal.\n        */\n       template<typename _RealType1>\n-        friend bool\n-        operator==(const logistic_distribution<_RealType1>& __d1,\n+\tfriend bool\n+\toperator==(const logistic_distribution<_RealType1>& __d1,\n \t\t   const logistic_distribution<_RealType1>& __d2)\n-        { return __d1.param() == __d2.param(); }\n+\t{ return __d1.param() == __d2.param(); }\n \n       /**\n        * @brief Inserts a %logistic_distribution random number distribution\n@@ -3293,6 +3294,196 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const logistic_distribution<_RealType1>& __d2)\n     { return !(__d1 == __d2); }\n \n+\n+  /**\n+   * @brief A distribution for random coordinates on a unit sphere.\n+   *\n+   * The method used in the generation function is attributed by Donald Knuth\n+   * to G. W. Brown, Modern Mathematics for the Engineer (1956).\n+   */\n+  template<std::size_t _Dimen, typename _RealType = double>\n+    class uniform_on_sphere_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+      static_assert(_Dimen != 0, \"dimension is zero\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef std::array<_RealType, _Dimen> result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\texplicit\n+\tparam_type()\n+\t{ }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return true; }\n+      };\n+\n+      /**\n+       * @brief Constructs a uniform on sphere distribution.\n+       */\n+      explicit\n+      uniform_on_sphere_distribution()\n+      : _M_param(), _M_n(_RealType(0), _RealType(1))\n+      { }\n+\n+      explicit\n+      uniform_on_sphere_distribution(const param_type& __p)\n+      : _M_param(__p), _M_n(_RealType(0), _RealType(1))\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       * This function makes no sense for this distribution.\n+       */\n+      result_type\n+      min() const\n+      {\n+\tresult_type __res;\n+\t__res.fill(0);\n+\treturn __res;\n+      }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       * This function makes no sense for this distribution.\n+       */\n+      result_type\n+      max() const\n+      {\n+\tresult_type __res;\n+\t__res.fill(0);\n+\treturn __res;\n+      }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, _M_param); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two uniform on sphere distributions have\n+       *        the same parameters and the sequences that would be\n+       *        generated are equal.\n+       */\n+      friend bool\n+      operator==(const uniform_on_sphere_distribution& __d1,\n+\t\t const uniform_on_sphere_distribution& __d2)\n+      { return true; }\n+\n+      /**\n+       * @brief Inserts a %uniform_on_sphere_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %uniform_on_sphere_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<size_t _Dimen1, typename _RealType1, typename _CharT,\n+\t       typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const __gnu_cxx::uniform_on_sphere_distribution<_Dimen1,\n+\t\t\t\t\t\t\t\t   _RealType1>&\n+\t\t   __x);\n+\n+      /**\n+       * @brief Extracts a %uniform_on_sphere_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %uniform_on_sphere_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<std::size_t _Dimen1, typename _RealType1, typename _CharT,\n+\t       typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::uniform_on_sphere_distribution<_Dimen1,\n+\t\t\t\t\t\t\t     _RealType1>& __x);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+      std::normal_distribution<_RealType> _M_n;\n+    };\n+\n+  /**\n+   * @brief Return true if two uniform on sphere distributions are different.\n+   */\n+  template<std::size_t _Dimen, typename _RealType>\n+    inline bool\n+    operator!=(const __gnu_cxx::uniform_on_sphere_distribution<_Dimen,\n+\t       _RealType>& __d1,\n+\t       const __gnu_cxx::uniform_on_sphere_distribution<_Dimen,\n+\t       _RealType>& __d2)\n+   { return false; }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "c836b211cae86027f2af3b5106f6a47951056e59", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=863a2c7ecc08465b437e66e730bb185474552688", "patch": "@@ -1362,7 +1362,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tresult_type __b = __param.total_size();\n \tresult_type __k = 0;\n \n-\tif (__param.total_draws() < __param.total_size() / 2) \n+\tif (__param.total_draws() < __param.total_size() / 2)\n \t  {\n \t    for (result_type __i = 0; __i < __param.total_draws(); ++__i)\n \t      {\n@@ -1539,6 +1539,65 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename uniform_on_sphere_distribution<_Dimen, _RealType>::result_type\n+      uniform_on_sphere_distribution<_Dimen, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\tresult_type __ret;\n+\t_RealType __sum = _RealType(0);\n+\n+\tstd::generate(__ret.begin(), __ret.end(),\n+\t\t      [&__urng, &__sum, this](){ _RealType __t = _M_n(__urng);\n+\t\t\t\t\t\t __sum += __t * __t;\n+\t\t\t\t\t\t return __t; });\n+\tauto __norm = std::sqrt(__sum);\n+\tstd::transform(__ret.begin(), __ret.end(), __ret.begin(),\n+\t\t       [__norm](_RealType __val){ return __val / __norm; });\n+\n+\treturn __ret;\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      uniform_on_sphere_distribution<_Dimen, _RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType, typename _CharT,\n+\t   typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::uniform_on_sphere_distribution<_Dimen,\n+\t\t\t\t\t\t\t       _RealType>& __x)\n+    {\n+      // The distribution has no state, nothing to save.\n+      return __os;\n+    }\n+\n+  template<std::size_t _Dimen, typename _RealType, typename _CharT,\n+\t   typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::uniform_on_sphere_distribution<_Dimen,\n+\t\t\t\t\t\t\t _RealType>& __x)\n+    {\n+      // The distribution has no state, nothing to restore.\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "fb48fe23ab5a8a9706faceccaec4be6f3a588688", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Fcons%2Fdefault.cc?ref=863a2c7ecc08465b437e66e730bb185474552688", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-04-15  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template uniform_in_sphere [rand.dist.ext.uniform_on_sphere]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::uniform_on_sphere_distribution<2> u2;\n+  __gnu_cxx::uniform_on_sphere_distribution<3> u3;\n+  __gnu_cxx::uniform_on_sphere_distribution<4, double> u4;\n+  __gnu_cxx::uniform_on_sphere_distribution<5, float> u5;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "35a024ee9a5b3b9883a7f7f14b8971b7ab7f53f3", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fequal.cc?ref=863a2c7ecc08465b437e66e730bb185474552688", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-04-15  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::uniform_on_sphere_distribution<3> u, v;\n+\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9f8e8c81720ad9fb4ab4150e9110fc80cf33ef01", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Finequal.cc?ref=863a2c7ecc08465b437e66e730bb185474552688", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-04-15  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::uniform_on_sphere_distribution<3> u, v;\n+\n+  VERIFY( !(u != v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "80264ff82942e0f33268137a0fa3074c97074c45", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/operators/serialize.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863a2c7ecc08465b437e66e730bb185474552688/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fserialize.cc?ref=863a2c7ecc08465b437e66e730bb185474552688", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-04-15  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::uniform_on_sphere_distribution<3> u, v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}