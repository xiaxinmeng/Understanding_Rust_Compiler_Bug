{"sha": "569efc34ebc4f0a01d435dc11c3146b5442132cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5ZWZjMzRlYmM0ZjBhMDFkNDM1ZGMxMWMzMTQ2YjU0NDIxMzJjZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-19T12:34:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-19T12:34:45Z"}, "message": "re PR rtl-optimization/68955 (wrong code at -O3 on x86-64-linux-gnu in 32-bit mode)\n\n\tPR rtl-optimization/68955\n\tPR rtl-optimization/64557\n\t* dse.c (record_store, check_mem_read_rtx): Don't call get_addr\n\there.  Fix up formatting.\n\t* alias.c (get_addr): Handle VALUE +/- CONST_SCALAR_INT_P.\n\n\t* gcc.dg/torture/pr68955.c: New test.\n\nFrom-SVN: r232554", "tree": {"sha": "75a7d1ce1a175bc96655f4cf67f8ea84e0f07f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a7d1ce1a175bc96655f4cf67f8ea84e0f07f16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/569efc34ebc4f0a01d435dc11c3146b5442132cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569efc34ebc4f0a01d435dc11c3146b5442132cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569efc34ebc4f0a01d435dc11c3146b5442132cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569efc34ebc4f0a01d435dc11c3146b5442132cd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e49d321f033c35d907d9d3eb339efaa6a8ba1e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49d321f033c35d907d9d3eb339efaa6a8ba1e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49d321f033c35d907d9d3eb339efaa6a8ba1e52"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "372b25dca8b777c7ac8f50afa8525cc4944e8692", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=569efc34ebc4f0a01d435dc11c3146b5442132cd", "patch": "@@ -1,3 +1,11 @@\n+2016-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/68955\n+\tPR rtl-optimization/64557\n+\t* dse.c (record_store, check_mem_read_rtx): Don't call get_addr\n+\there.  Fix up formatting.\n+\t* alias.c (get_addr): Handle VALUE +/- CONST_SCALAR_INT_P.\n+\n 2016-01-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/69133"}, {"sha": "d3273e8e85230f83fdddf7537ebf57c783a5c194", "filename": "gcc/alias.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=569efc34ebc4f0a01d435dc11c3146b5442132cd", "patch": "@@ -2193,8 +2193,8 @@ refs_newer_value_p (const_rtx expr, rtx v)\n }\n \n /* Convert the address X into something we can use.  This is done by returning\n-   it unchanged unless it is a value; in the latter case we call cselib to get\n-   a more useful rtx.  */\n+   it unchanged unless it is a VALUE or VALUE +/- constant; for VALUE\n+   we call cselib to get a more useful rtx.  */\n \n rtx\n get_addr (rtx x)\n@@ -2203,7 +2203,23 @@ get_addr (rtx x)\n   struct elt_loc_list *l;\n \n   if (GET_CODE (x) != VALUE)\n-    return x;\n+    {\n+      if ((GET_CODE (x) == PLUS || GET_CODE (x) == MINUS)\n+\t  && GET_CODE (XEXP (x, 0)) == VALUE\n+\t  && CONST_SCALAR_INT_P (XEXP (x, 1)))\n+\t{\n+\t  rtx op0 = get_addr (XEXP (x, 0));\n+\t  if (op0 != XEXP (x, 0))\n+\t    {\n+\t      if (GET_CODE (x) == PLUS\n+\t\t  && GET_CODE (XEXP (x, 1)) == CONST_INT)\n+\t\treturn plus_constant (GET_MODE (x), op0, INTVAL (XEXP (x, 1)));\n+\t      return simplify_gen_binary (GET_CODE (x), GET_MODE (x),\n+\t\t\t\t\t  op0, XEXP (x, 1));\n+\t    }\n+\t}\n+      return x;\n+    }\n   v = CSELIB_VAL_PTR (x);\n   if (v)\n     {"}, {"sha": "99f23cab413a553612d889da51f747e26e8f93a1", "filename": "gcc/dse.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=569efc34ebc4f0a01d435dc11c3146b5442132cd", "patch": "@@ -1515,14 +1515,9 @@ record_store (rtx body, bb_info_t bb_info)\n \tmem_addr = base->val_rtx;\n       else\n \t{\n-\t  group_info *group\n-\t    = rtx_group_vec[group_id];\n+\t  group_info *group = rtx_group_vec[group_id];\n \t  mem_addr = group->canon_base_addr;\n \t}\n-      /* get_addr can only handle VALUE but cannot handle expr like:\n-\t VALUE + OFFSET, so call get_addr to get original addr for\n-\t mem_addr before plus_constant.  */\n-      mem_addr = get_addr (mem_addr);\n       if (offset)\n \tmem_addr = plus_constant (get_address_mode (mem), mem_addr, offset);\n     }\n@@ -2128,14 +2123,9 @@ check_mem_read_rtx (rtx *loc, bb_info_t bb_info)\n \tmem_addr = base->val_rtx;\n       else\n \t{\n-\t  group_info *group\n-\t    = rtx_group_vec[group_id];\n+\t  group_info *group = rtx_group_vec[group_id];\n \t  mem_addr = group->canon_base_addr;\n \t}\n-      /* get_addr can only handle VALUE but cannot handle expr like:\n-\t VALUE + OFFSET, so call get_addr to get original addr for\n-\t mem_addr before plus_constant.  */\n-      mem_addr = get_addr (mem_addr);\n       if (offset)\n \tmem_addr = plus_constant (get_address_mode (mem), mem_addr, offset);\n     }"}, {"sha": "b9365f0207e0f340c7181a81e86bcdea683d46b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=569efc34ebc4f0a01d435dc11c3146b5442132cd", "patch": "@@ -1,3 +1,9 @@\n+2016-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/68955\n+\tPR rtl-optimization/64557\n+\t* gcc.dg/torture/pr68955.c: New test.\n+\n 2016-01-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/69136"}, {"sha": "e9da003f475f2cae8d271bcd6542518389172d73", "filename": "gcc/testsuite/gcc.dg/torture/pr68955.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68955.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569efc34ebc4f0a01d435dc11c3146b5442132cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68955.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68955.c?ref=569efc34ebc4f0a01d435dc11c3146b5442132cd", "patch": "@@ -0,0 +1,41 @@\n+/* PR rtl-optimization/68955 */\n+/* { dg-do run } */\n+/* { dg-output \"ONE1ONE\" } */\n+\n+int a, b, c, d, g, m;\n+int i[7][7][5] = { { { 5 } }, { { 5 } },\n+\t\t   { { 5 }, { 5 }, { 5 }, { 5 }, { 5 }, { -1 } } };\n+static int j = 11;\n+short e, f, h, k, l;\n+\n+static void\n+foo ()\n+{\n+  for (; e < 5; e++)\n+    for (h = 3; h; h--)\n+      {\n+\tfor (g = 1; g < 6; g++)\n+\t  {\n+\t    m = c == 0 ? b : b / c;\n+\t    i[e][1][e] = i[1][1][1] | (m & l) && f;\n+\t  }\n+\tfor (k = 0; k < 6; k++)\n+\t  {\n+\t    for (d = 0; d < 6; d++)\n+\t      i[1][e][h] = i[h][k][e] >= l;\n+\t    i[e + 2][h + 3][e] = 6 & l;\n+\t    i[2][1][2] = a;\n+\t    for (; j < 5;)\n+\t      for (;;)\n+\t\t;\n+\t  }\n+      }\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  __builtin_printf (\"ONE%dONE\\n\", i[1][0][2]);\n+  return 0;\n+}"}]}