{"sha": "91669e7ee545db170cc25c4b2b81867d85120fef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE2NjllN2VlNTQ1ZGIxNzBjYzI1YzRiMmI4MTg2N2Q4NTEyMGZlZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-07T11:13:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-07T11:13:15Z"}, "message": "[multiple changes]\n\n2015-01-07  Bob Duff  <duff@adacore.com>\n\n\t* usage.adb (Usage): Document -gnatw.f switch.\n\n2015-01-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb: Code clean up and minor reformatting.\n\n2015-01-07  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Add guard for\n\tRaise_Accessibility_Error call.\n\t* s-valllu.ads (Scan_Raw_Long_Long_Unsigned): Add documentation\n\ton handling of invalid digits in based constants.\n\t* s-fatgen.ads: Minor reformatting.\n\t* sem_attr.adb (Analyze_Attribute, case Unrestricted_Access):\n\tAvoid noting bogus modification for Valid test.\n\t* snames.ads-tmpl (Name_Attr_Long_Float): New Name.\n\t* einfo.ads: Minor reformatting.\n\t* sem_warn.adb: Minor comment clarification.\n\t* sem_ch12.adb: Minor reformatting.\n\nFrom-SVN: r219296", "tree": {"sha": "7e29f04a9f5e7c2488ad2c344c01a8bcdefe2514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e29f04a9f5e7c2488ad2c344c01a8bcdefe2514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91669e7ee545db170cc25c4b2b81867d85120fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91669e7ee545db170cc25c4b2b81867d85120fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91669e7ee545db170cc25c4b2b81867d85120fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91669e7ee545db170cc25c4b2b81867d85120fef/comments", "author": null, "committer": null, "parents": [{"sha": "bdeea27b01e2d1444f0868b83427ebaf59b014d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdeea27b01e2d1444f0868b83427ebaf59b014d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdeea27b01e2d1444f0868b83427ebaf59b014d6"}], "stats": {"total": 114, "additions": 91, "deletions": 23}, "files": [{"sha": "5b95b206a8fea8bc3496f74fceb2f72494c00150", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -1,3 +1,25 @@\n+2015-01-07  Bob Duff  <duff@adacore.com>\n+\n+\t* usage.adb (Usage): Document -gnatw.f switch.\n+\n+2015-01-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb: Code clean up and minor reformatting.\n+\n+2015-01-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Add guard for\n+\tRaise_Accessibility_Error call.\n+\t* s-valllu.ads (Scan_Raw_Long_Long_Unsigned): Add documentation\n+\ton handling of invalid digits in based constants.\n+\t* s-fatgen.ads: Minor reformatting.\n+\t* sem_attr.adb (Analyze_Attribute, case Unrestricted_Access):\n+\tAvoid noting bogus modification for Valid test.\n+\t* snames.ads-tmpl (Name_Attr_Long_Float): New Name.\n+\t* einfo.ads: Minor reformatting.\n+\t* sem_warn.adb: Minor comment clarification.\n+\t* sem_ch12.adb: Minor reformatting.\n+\n 2015-01-07  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch5.adb (Expand_Predicated_Loop): Handle properly loops"}, {"sha": "7d19e15f557f9f41eddcb60fdd18d266edbcf35d", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -320,7 +320,7 @@ package Einfo is\n --  Other attributes are noted as applying to the [implementation base type\n --  only].  These are representation attributes which must always apply to a\n --  full non-private type, and where the attributes are always on the full\n---  type.  The attribute can be referenced on a subtype (and automatically\n+--  type. The attribute can be referenced on a subtype (and automatically\n --  retries the value from the implementation base type). However, it is an\n --  error to try to set the attribute on other than the implementation base\n --  type, and if assertions are enabled, an attempt to set the attribute on a"}, {"sha": "0e1b7ff9034f0cabbfb610f03909069b2560519a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -9982,7 +9982,9 @@ package body Exp_Ch4 is\n       procedure Raise_Accessibility_Error;\n       --  Called when we know that an accessibility check will fail. Rewrites\n       --  node N to an appropriate raise statement and outputs warning msgs.\n-      --  The Etype of the raise node is set to Target_Type.\n+      --  The Etype of the raise node is set to Target_Type. Note that in this\n+      --  case the rest of the processing should be skipped (i.e. the call to\n+      --  this procedure will be followed by \"goto Done\").\n \n       procedure Real_Range_Check;\n       --  Handles generation of range check for real target value\n@@ -10518,6 +10520,7 @@ package body Exp_Ch4 is\n              Type_Access_Level (Operand_Type) > Type_Access_Level (Target_Type)\n          then\n             Raise_Accessibility_Error;\n+            goto Done;\n \n          --  When the operand is a selected access discriminant the check needs\n          --  to be made against the level of the object denoted by the prefix"}, {"sha": "88f641b5f7fd9e592fe78f7641d03c9b9f908bd1", "filename": "gcc/ada/s-fatgen.ads", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fs-fatgen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fs-fatgen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.ads?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -88,13 +88,12 @@ package System.Fat_Gen is\n    function Unbiased_Rounding (X : T)                       return T;\n \n    function Valid (X : not null access T) return Boolean;\n-   --  This function checks if the object of type T referenced by X\n-   --  is valid, and returns True/False accordingly. The parameter is\n-   --  passed by reference (access) here, as the object of type T may\n-   --  be an abnormal value that cannot be passed in a floating-point\n-   --  register, and the whole point of 'Valid is to prevent exceptions.\n-   --  Note that the object of type T must have the natural alignment\n-   --  for type T.\n+   --  This function checks if the object of type T referenced by X is valid,\n+   --  and returns True/False accordingly. The parameter is passed by reference\n+   --  (access) here, as the object of type T may be an abnormal value that\n+   --  cannot be passed in a floating-point register, and the whole point of\n+   --  'Valid is to prevent exceptions. Note that the object of type T must\n+   --  have the natural alignment for type T.\n \n    type S is new String (1 .. T'Size / Character'Size);\n    type P is access all S with Storage_Size => 0;"}, {"sha": "993ea8b0dd8f88600c8ccb7d6ca794aebd4da7f0", "filename": "gcc/ada/s-valllu.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fs-valllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fs-valllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.ads?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -61,7 +61,17 @@ package System.Val_LLU is\n    --  Constraint_Error is raised.\n    --\n    --  Note: these rules correspond to the requirements for leaving the pointer\n-   --  positioned in Text_IO.Get\n+   --  positioned in Text_IO.Get. Note that the rules as stated in the RM would\n+   --  seem to imply that for a case like\n+   --\n+   --    8#12345670009#\n+\n+   --  the pointer should be left at the first # having scanned out the longest\n+   --  valid integer literal (8), but in fact in this case the pointer points\n+   --  to the invalid based digit (9 in this case). Not only would the strict\n+   --  reading of the RM require unlimited backup, which is unreasonable, but\n+   --  in addition, the intepretation as given here is the one expected and\n+   --  enforced by the ACATS tests.\n    --\n    --  Note: if Str is empty, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence"}, {"sha": "8eb85dc5e01dcb974c2f1dc3972cca6267d1e1bc", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -9853,8 +9853,38 @@ package body Sem_Attr is\n \n          Access_Attribute :\n          begin\n+            --  Note possible modification if we have a variable\n+\n             if Is_Variable (P) then\n-               Note_Possible_Modification (P, Sure => False);\n+               declare\n+                  PN : constant Node_Id := Parent (N);\n+                  Nm : Node_Id;\n+\n+                  Note : Boolean := True;\n+                  --  Skip this for the case of Unrestricted_Access occuring in\n+                  --  the context of a Valid check, since this otherwise leads\n+                  --  to a missed warning (the Valid check does not really\n+                  --  modify!) If this case, Note will be reset to False.\n+\n+               begin\n+                  if Attr_Id = Attribute_Unrestricted_Access\n+                    and then Nkind (PN) = N_Function_Call\n+                  then\n+                     Nm := Name (PN);\n+\n+                     if Nkind (Nm) = N_Expanded_Name\n+                       and then Chars (Nm) = Name_Valid\n+                       and then Nkind (Prefix (Nm)) = N_Identifier\n+                       and then Chars (Prefix (Nm)) = Name_Attr_Long_Float\n+                     then\n+                        Note := False;\n+                     end if;\n+                  end if;\n+\n+                  if Note then\n+                     Note_Possible_Modification (P, Sure => False);\n+                  end if;\n+               end;\n             end if;\n \n             --  The following comes from a query concerning improper use of"}, {"sha": "311161ed6604d487c67137642915dcfc9bda2735", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -3706,9 +3706,7 @@ package body Sem_Ch12 is\n               and then not Is_Child_Unit (Gen_Unit)\n             then\n                Scop := Scope (Gen_Unit);\n-               while Present (Scop)\n-                 and then Scop /= Standard_Standard\n-               loop\n+               while Present (Scop) and then Scop /= Standard_Standard loop\n                   if Unit_Requires_Body (Scop) then\n                      Enclosing_Body_Present := True;\n                      exit;\n@@ -7678,7 +7676,6 @@ package body Sem_Ch12 is\n          while Present (T) loop\n             if In_Open_Scopes (Scope (T)) then\n                return T;\n-\n             elsif Is_Generic_Actual_Type (T) then\n                return T;\n             end if;\n@@ -9546,8 +9543,7 @@ package body Sem_Ch12 is\n                    Name                 =>\n                      New_Occurrence_Of\n                        (Get_Instance_Of (Gen_Parent), Sloc (Actual)),\n-                   Generic_Associations =>\n-                     Generic_Associations (Formal)));\n+                   Generic_Associations => Generic_Associations (Formal)));\n             end;\n          end if;\n \n@@ -10057,20 +10053,23 @@ package body Sem_Ch12 is\n       else\n          --  The instantiation of a generic formal in-parameter is constant\n          --  declaration. The actual is the expression for that declaration.\n+         --  Its type is a full copy of the type of the formal. This may be\n+         --  an access to subprogram, for which we need to generate entities\n+         --  for the formals in the new signature.\n \n          if Present (Actual) then\n             if Present (Subt_Mark) then\n-               Def := Subt_Mark;\n+               Def := New_Copy_Tree (Subt_Mark);\n             else pragma Assert (Present (Acc_Def));\n-               Def := Acc_Def;\n+               Def := Copy_Separate_Tree (Acc_Def);\n             end if;\n \n             Decl_Node :=\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier    => New_Copy (Gen_Obj),\n                 Constant_Present       => True,\n                 Null_Exclusion_Present => Null_Exclusion_Present (Formal),\n-                Object_Definition      => New_Copy_Tree (Def),\n+                Object_Definition      => Def,\n                 Expression             => Actual);\n \n             Set_Corresponding_Generic_Association (Decl_Node, Act_Assoc);\n@@ -10148,8 +10147,10 @@ package body Sem_Ch12 is\n \n                --  If formal is an anonymous access, copy access definition of\n                --  formal for object declaration.\n+               --  In the case of an access to subprogram we need to\n+               --  generate new formals for the signature of the default.\n \n-               Def := New_Copy_Tree (Acc_Def);\n+               Def := Copy_Separate_Tree (Acc_Def);\n             end if;\n \n             Decl_Node :="}, {"sha": "ec3eb07c577c6d74335f45c39bd3553863ac4acc", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -898,7 +898,7 @@ package body Sem_Warn is\n \n       procedure Output_Reference_Error (M : String) is\n       begin\n-         --  Never issue messages for internal names, nor for renamings\n+         --  Never issue messages for internal names or renamings\n \n          if Is_Internal_Name (Chars (E1))\n            or else Nkind (Parent (E1)) = N_Object_Renaming_Declaration"}, {"sha": "fec0545ad98ae867cf04c63fd2ce7fe592fa7d6c", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -676,11 +676,12 @@ package Snames is\n    Name_DLL                            : constant Name_Id := N + $;\n    Name_Win32                          : constant Name_Id := N + $;\n \n-   --  Other special names used in processing pragmas\n+   --  Other special names used in processing attributes and pragmas\n \n    Name_Allow                          : constant Name_Id := N + $;\n    Name_Amount                         : constant Name_Id := N + $;\n    Name_As_Is                          : constant Name_Id := N + $;\n+   Name_Attr_Long_Float                : constant Name_Id := N + $;\n    Name_Assertion                      : constant Name_Id := N + $;\n    Name_Assertions                     : constant Name_Id := N + $;\n    Name_Attribute_Name                 : constant Name_Id := N + $;"}, {"sha": "15d8ecbf3bea512e047bdcb8455c61d0fa394d8d", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91669e7ee545db170cc25c4b2b81867d85120fef/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=91669e7ee545db170cc25c4b2b81867d85120fef", "patch": "@@ -501,6 +501,8 @@ begin\n                                                   \"(no exceptions)\");\n    Write_Line (\"        f+   turn on warnings for unreferenced formal\");\n    Write_Line (\"        F*   turn off warnings for unreferenced formal\");\n+   Write_Line (\"        .f   turn on warnings for suspicious Subp'Access\");\n+   Write_Line (\"        .F   turn off warnings for suspicious Subp'Access\");\n    Write_Line (\"        g*+  turn on warnings for unrecognized pragma\");\n    Write_Line (\"        G    turn off warnings for unrecognized pragma\");\n    Write_Line (\"        .g   turn on GNAT warnings\");"}]}