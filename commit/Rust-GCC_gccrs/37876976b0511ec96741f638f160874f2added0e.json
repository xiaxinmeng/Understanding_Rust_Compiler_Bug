{"sha": "37876976b0511ec96741f638f160874f2added0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4NzY5NzZiMDUxMWVjOTY3NDFmNjM4ZjE2MDg3NGYyYWRkZWQwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-05T09:39:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-05T09:39:03Z"}, "message": "i386: Fix up TARGET_QIMODE_MATH for many AMD CPU tunings [PR98957]\n\nAs written in the PR, TARGET_QIMODE_MATH was meant to be set for all\ntunings and it was the case for GCC <= 7, but as the number of\nPROCESSOR_* enumerators grew, some AMD tunings (which are at the end\nof the list) over time got enumerators with values >= 32 and\nTARGET_QIMODE_MATH became disabled for them, in GCC 8 for 2\ntunings, in GCC 9 for 7 tunings, in GCC 10 for 8 tunings, and\non the trunk for 11 tunings.\n\nThe following patch fixes it by using uhwis rather than uints\nand gives them also symbolic names.\n\n2021-02-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/98957\n\t* config/i386/i386-options.c (m_NONE, m_ALL): Define.\n\t* config/i386/x86-tune.def (X86_TUNE_BRANCH_PREDICTION_HINTS,\n\tX86_TUNE_PROMOTE_QI_REGS): Use m_NONE instead of 0U.\n\t(X86_TUNE_QIMODE_MATH): Use m_ALL instead of ~0U.", "tree": {"sha": "75a96acb28e6ccb10feb80d1e0875725efc5c927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a96acb28e6ccb10feb80d1e0875725efc5c927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37876976b0511ec96741f638f160874f2added0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37876976b0511ec96741f638f160874f2added0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37876976b0511ec96741f638f160874f2added0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37876976b0511ec96741f638f160874f2added0e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b229baa75ce4627d1bd38f2d3dcd91af1a7071db"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "cdeabbfca4b539b79e7a9ba91fb212af98479dd5", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37876976b0511ec96741f638f160874f2added0e/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37876976b0511ec96741f638f160874f2added0e/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=37876976b0511ec96741f638f160874f2added0e", "patch": "@@ -98,6 +98,8 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* Processor feature/optimization bitmasks.  */\n+#define m_NONE HOST_WIDE_INT_0U\n+#define m_ALL (~HOST_WIDE_INT_0U)\n #define m_386 (HOST_WIDE_INT_1U<<PROCESSOR_I386)\n #define m_486 (HOST_WIDE_INT_1U<<PROCESSOR_I486)\n #define m_PENT (HOST_WIDE_INT_1U<<PROCESSOR_PENTIUM)"}, {"sha": "140ccb3d92156ef461e00d4b03c9b3acc49f7683", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37876976b0511ec96741f638f160874f2added0e/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37876976b0511ec96741f638f160874f2added0e/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=37876976b0511ec96741f638f160874f2added0e", "patch": "@@ -580,15 +580,15 @@ DEF_TUNE (X86_TUNE_AVOID_VECTOR_DECODE, \"avoid_vector_decode\",\n    on simulation result. But after P4 was made, no performance benefit\n    was observed with branch hints.  It also increases the code size.\n    As a result, icc never generates branch hints.  */\n-DEF_TUNE (X86_TUNE_BRANCH_PREDICTION_HINTS, \"branch_prediction_hints\", 0U)\n+DEF_TUNE (X86_TUNE_BRANCH_PREDICTION_HINTS, \"branch_prediction_hints\", m_NONE)\n \n /* X86_TUNE_QIMODE_MATH: Enable use of 8bit arithmetic.  */\n-DEF_TUNE (X86_TUNE_QIMODE_MATH, \"qimode_math\", ~0U)\n+DEF_TUNE (X86_TUNE_QIMODE_MATH, \"qimode_math\", m_ALL)\n \n /* X86_TUNE_PROMOTE_QI_REGS: This enables generic code that promotes all 8bit\n    arithmetic to 32bit via PROMOTE_MODE macro.  This code generation scheme\n    is usually used for RISC targets.  */\n-DEF_TUNE (X86_TUNE_PROMOTE_QI_REGS, \"promote_qi_regs\", 0U)\n+DEF_TUNE (X86_TUNE_PROMOTE_QI_REGS, \"promote_qi_regs\", m_NONE)\n \n /* X86_TUNE_EMIT_VZEROUPPER: This enables vzeroupper instruction insertion\n    before a transfer of control flow out of the function.  */"}]}