{"sha": "c24a4dcffae67ad72dbf83ee872abe34acaa725e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0YTRkY2ZmYWU2N2FkNzJkYmY4M2VlODcyYWJlMzRhY2FhNzI1ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-29T14:05:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-29T14:05:43Z"}, "message": "tree-phinodes.c (make_phi_node, [...]): Don't zero the whole PHI node.\n\n\t* tree-phinodes.c (make_phi_node, resize_phi_node): Don't zero\n\tthe whole PHI node.\n\t* tree.h (tree_phi_node): Tell the garbage collector to chase\n\tnum_args arguments.\n\nFrom-SVN: r89844", "tree": {"sha": "f850779f7e0847588424ea3a7b14bd3e933cc19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f850779f7e0847588424ea3a7b14bd3e933cc19d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c24a4dcffae67ad72dbf83ee872abe34acaa725e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24a4dcffae67ad72dbf83ee872abe34acaa725e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24a4dcffae67ad72dbf83ee872abe34acaa725e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24a4dcffae67ad72dbf83ee872abe34acaa725e/comments", "author": null, "committer": null, "parents": [{"sha": "fe94b6534a05d437259a17ba37e3fa50f649fe84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe94b6534a05d437259a17ba37e3fa50f649fe84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe94b6534a05d437259a17ba37e3fa50f649fe84"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "fb4b35c51f28331bbdf3e2d20764c2aa4820a4cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a4dcffae67ad72dbf83ee872abe34acaa725e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a4dcffae67ad72dbf83ee872abe34acaa725e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c24a4dcffae67ad72dbf83ee872abe34acaa725e", "patch": "@@ -1,3 +1,10 @@\n+2004-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-phinodes.c (make_phi_node, resize_phi_node): Don't zero\n+\tthe whole PHI node.\n+\t* tree.h (tree_phi_node): Tell the garbage collector to chase\n+\tnum_args arguments.\n+\n 2004-10-29  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* opts.c (decode_options): Lower the crossjump threshold for -Os."}, {"sha": "f45479e1708d7fcfdd6d1dc98795c15b3b344673", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a4dcffae67ad72dbf83ee872abe34acaa725e/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a4dcffae67ad72dbf83ee872abe34acaa725e/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=c24a4dcffae67ad72dbf83ee872abe34acaa725e", "patch": "@@ -199,7 +199,12 @@ make_phi_node (tree var, int len)\n \n     }\n \n-  memset (phi, 0, size);\n+  /* We do not have to clear a part of the PHI node that stores PHI\n+     arguments, which is safe because we tell the garbage collector to\n+     scan up to num_args elements in the array of PHI arguments.  In\n+     other words, the garbage collector will not follow garbage\n+     pointers in the unused portion of the array.  */\n+  memset (phi, 0, sizeof (struct tree_phi_node) - sizeof (struct phi_arg_d));\n   TREE_SET_CODE (phi, PHI_NODE);\n   PHI_ARG_CAPACITY (phi) = len;\n   TREE_TYPE (phi) = TREE_TYPE (var);\n@@ -234,7 +239,7 @@ resize_phi_node (tree *phi, int len)\n {\n   int size, old_size;\n   tree new_phi;\n-  int i, old_len, bucket = NUM_BUCKETS - 2;\n+  int bucket = NUM_BUCKETS - 2;\n \n   gcc_assert (len >= PHI_ARG_CAPACITY (*phi));\n \n@@ -271,16 +276,8 @@ resize_phi_node (tree *phi, int len)\n \n   memcpy (new_phi, *phi, old_size);\n \n-  old_len = PHI_ARG_CAPACITY (new_phi);\n   PHI_ARG_CAPACITY (new_phi) = len;\n \n-  for (i = old_len; i < len; i++)\n-    {\n-      SET_PHI_ARG_DEF (new_phi, i, NULL_TREE);\n-      PHI_ARG_EDGE (new_phi, i) = NULL;\n-      PHI_ARG_NONZERO (new_phi, i) = false;\n-    }\n-\n   *phi = new_phi;\n }\n "}, {"sha": "001c967178e48a88c5187a384e843e28b1e0f111", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a4dcffae67ad72dbf83ee872abe34acaa725e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a4dcffae67ad72dbf83ee872abe34acaa725e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c24a4dcffae67ad72dbf83ee872abe34acaa725e", "patch": "@@ -1405,7 +1405,7 @@ struct tree_phi_node GTY(())\n   /* Dataflow information.  */\n   struct dataflow_d *df;\n \n-  struct phi_arg_d GTY ((length (\"((tree)&%h)->phi.capacity\"))) a[1];\n+  struct phi_arg_d GTY ((length (\"((tree)&%h)->phi.num_args\"))) a[1];\n };\n \f\n "}]}