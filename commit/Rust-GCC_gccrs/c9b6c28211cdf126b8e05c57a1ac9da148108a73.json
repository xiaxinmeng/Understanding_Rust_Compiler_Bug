{"sha": "c9b6c28211cdf126b8e05c57a1ac9da148108a73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliNmMyODIxMWNkZjEyNmI4ZTA1YzU3YTFhYzlkYTE0ODEwOGE3Mw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-17T22:58:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-17T22:58:19Z"}, "message": "stl_tree.h: Overload operators == and != to be able to handle the case...\n\n\n2000-11-17  Theodore Papadopoulo  <Theodore.Papadopoulo@sophia.inria.fr>\n\n\t* include/bits/stl_tree.h: Overload operators == and != to be able\n\tto handle the case (const_iterator,iterator) and\n\t(iterator,const_iterator), thus fixing libstdc++/737 and the like.\n\nFrom-SVN: r37531", "tree": {"sha": "56f38e8ab4c8308f8fc6aa0aff3fb02145f0d0a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56f38e8ab4c8308f8fc6aa0aff3fb02145f0d0a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9b6c28211cdf126b8e05c57a1ac9da148108a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b6c28211cdf126b8e05c57a1ac9da148108a73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b6c28211cdf126b8e05c57a1ac9da148108a73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b6c28211cdf126b8e05c57a1ac9da148108a73/comments", "author": null, "committer": null, "parents": [{"sha": "8e2d9424bf801bdf62d43b9d4449b840bb050734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2d9424bf801bdf62d43b9d4449b840bb050734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2d9424bf801bdf62d43b9d4449b840bb050734"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "af4c6975f50032a3d6496c647a7f1a338c811967", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b6c28211cdf126b8e05c57a1ac9da148108a73/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b6c28211cdf126b8e05c57a1ac9da148108a73/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c9b6c28211cdf126b8e05c57a1ac9da148108a73", "patch": "@@ -1,3 +1,9 @@\n+2000-11-17  Theodore Papadopoulo  <Theodore.Papadopoulo@sophia.inria.fr>\n+\n+\t* include/bits/stl_tree.h: Overload operators == and != to be able\n+\tto handle the case (const_iterator,iterator) and\n+\t(iterator,const_iterator), thus fixing libstdc++/737 and the like.\n+\n 2000-11-17  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Correct last patch\n@@ -52,7 +58,7 @@\n \n \t* config/c_io_stdio.h: Include libio.h.\n \n-Wed Nov 15 18:39:34 2000  Mark P Mitchell  <mark@codesourcery.com>\n+2000-11-15  Mark P Mitchell  <mark@codesourcery.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Substitute libio_la.\n \t* src/Makefile.am (libstdc___la_LIBADD): Use it."}, {"sha": "f82f21c3c07eae4374ed5cdbf58f9ff3e099f8b6", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b6c28211cdf126b8e05c57a1ac9da148108a73/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b6c28211cdf126b8e05c57a1ac9da148108a73/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=c9b6c28211cdf126b8e05c57a1ac9da148108a73", "patch": "@@ -190,12 +190,36 @@ inline bool operator==(const _Rb_tree_iterator<_Value, _Ref, _Ptr>& __x,\n   return __x._M_node == __y._M_node;\n }\n \n+template <class _Value>\n+inline bool operator==(const _Rb_tree_iterator<_Value, const _Value&, const _Value*>& __x,\n+\t\t       const _Rb_tree_iterator<_Value, _Value&, _Value*>& __y) {\n+  return __x._M_node == __y._M_node;\n+}\n+\n+template <class _Value>\n+inline bool operator==(const _Rb_tree_iterator<_Value, _Value&, _Value*>& __x,\n+\t\t       const _Rb_tree_iterator<_Value, const _Value&, const _Value*>& __y) {\n+  return __x._M_node == __y._M_node;\n+}\n+\n template <class _Value, class _Ref, class _Ptr>\n inline bool operator!=(const _Rb_tree_iterator<_Value, _Ref, _Ptr>& __x,\n \t\t       const _Rb_tree_iterator<_Value, _Ref, _Ptr>& __y) {\n   return __x._M_node != __y._M_node;\n }\n \n+template <class _Value>\n+inline bool operator!=(const _Rb_tree_iterator<_Value, const _Value&, const _Value*>& __x,\n+\t\t       const _Rb_tree_iterator<_Value, _Value&, _Value*>& __y) {\n+  return __x._M_node != __y._M_node;\n+}\n+\n+template <class _Value>\n+inline bool operator!=(const _Rb_tree_iterator<_Value, _Value&, _Value*>& __x,\n+\t\t       const _Rb_tree_iterator<_Value, const _Value&, const _Value*>& __y) {\n+  return __x._M_node != __y._M_node;\n+}\n+\n #ifndef __STL_CLASS_PARTIAL_SPECIALIZATION\n \n inline bidirectional_iterator_tag"}]}