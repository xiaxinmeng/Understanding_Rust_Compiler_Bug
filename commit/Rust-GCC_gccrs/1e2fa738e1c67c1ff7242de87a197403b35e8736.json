{"sha": "1e2fa738e1c67c1ff7242de87a197403b35e8736", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyZmE3MzhlMWM2N2MxZmY3MjQyZGU4N2ExOTc0MDNiMzVlODczNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-10-29T21:06:21Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-10-29T21:06:21Z"}, "message": "PR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.\n\nAfter r269667 which introduced joust_maybe_elide_copy, in C++17 we can elide\na constructor if it uses a conversion function that returns a prvalue, and\nuse the conversion function in its stead.\n\nThis eliding means that if we have a candidate that previously didn't have\n->second_conv, it can have it after the elision.  This confused the\n-Wconversion warning because it was assuming that if cand1->second_conv is\nnon-null, so is cand2->second_conv.  Here cand1->second_conv was non-null\nbut cand2->second_conv remained null, so it crashed in compare_ics.\n\nI checked with clang that both compilers call A::operator B() in C++17 and\nB::B(A const &) otherwise.\n\n\t* call.c (joust): Don't attempt to warn if ->second_conv is null.\n\n\t* g++.dg/cpp0x/overload-conv-4.C: New test.\n\nFrom-SVN: r277593", "tree": {"sha": "c0e634fb0bcde252aea627dff3c222a59d4a373f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0e634fb0bcde252aea627dff3c222a59d4a373f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2fa738e1c67c1ff7242de87a197403b35e8736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2fa738e1c67c1ff7242de87a197403b35e8736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2fa738e1c67c1ff7242de87a197403b35e8736", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2fa738e1c67c1ff7242de87a197403b35e8736/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6835f8a04a062c3d3276a4a723a9237b1eaf835b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6835f8a04a062c3d3276a4a723a9237b1eaf835b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6835f8a04a062c3d3276a4a723a9237b1eaf835b"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "6b1937557fff6c386b4b0f6e11cb35bd2e46b150", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e2fa738e1c67c1ff7242de87a197403b35e8736", "patch": "@@ -1,3 +1,8 @@\n+2019-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.\n+\t* call.c (joust): Don't attempt to warn if ->second_conv is null.\n+\n 2019-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92201"}, {"sha": "b0c6370107ddf3a36f7ebcd765431db28ca41a45", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1e2fa738e1c67c1ff7242de87a197403b35e8736", "patch": "@@ -10870,7 +10870,9 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n      either between a constructor and a conversion op, or between two\n      conversion ops.  */\n   if ((complain & tf_warning)\n-      && winner && warn_conversion && cand1->second_conv\n+      /* In C++17, the constructor might have been elided, which means that\n+\t an originally null ->second_conv could become non-null.  */\n+      && winner && warn_conversion && cand1->second_conv && cand2->second_conv\n       && (!DECL_CONSTRUCTOR_P (cand1->fn) || !DECL_CONSTRUCTOR_P (cand2->fn))\n       && winner != compare_ics (cand1->second_conv, cand2->second_conv))\n     {"}, {"sha": "db443f717290ebf22b4125c9f4706c0a1dbaa569", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e2fa738e1c67c1ff7242de87a197403b35e8736", "patch": "@@ -1,3 +1,8 @@\n+2019-10-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.\n+\t* g++.dg/cpp0x/overload-conv-4.C: New test.\n+\n 2019-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92201"}, {"sha": "6fcdbbaa6a4b6f1fcfc9a83a86e00b297e40d45b", "filename": "gcc/testsuite/g++.dg/cpp0x/overload-conv-4.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fa738e1c67c1ff7242de87a197403b35e8736/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-4.C?ref=1e2fa738e1c67c1ff7242de87a197403b35e8736", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wconversion\" }\n+\n+struct B;\n+\n+struct A {\n+    operator B();\n+};\n+\n+struct B {\n+    B(A const &rs);\n+    B(B const &rs);\n+};\n+\n+B\n+f (A x)\n+{\n+  // C++14: we call B::B(A const &)\n+  // C++17: we call A::operator B()\n+  return B(x); // { dg-warning \"choosing .A::operator B\\\\(\\\\). over .B::B\\\\(const A&\\\\)\" \"\" { target c++17 } }\n+  // { dg-warning \"for conversion from .A. to .B.\" \"\" { target c++17 } .-1 }\n+}"}]}