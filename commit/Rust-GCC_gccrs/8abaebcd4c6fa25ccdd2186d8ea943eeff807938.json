{"sha": "8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiYWViY2Q0YzZmYTI1Y2NkZDIxODZkOGVhOTQzZWVmZjgwNzkzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-17T16:24:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-17T16:24:54Z"}, "message": "re PR target/55981 (std::atomic store is split in two smaller stores)\n\n\tPR target/55981\n\t* config/i386/sync.md (atomic_store<mode>): Always generate SWImode\n\tstore through atomic_store<mode>_1.\n\t(atomic_store<mode>_1): Macroize insn using SWI mode iterator.\n\ntestsuite/ChangeLog:\n\n\tPR target/55981\n\t* gcc.target/pr55981.c: New test.\n\nFrom-SVN: r195273", "tree": {"sha": "b7898c195d3c06960e76ef62961462135d90f289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7898c195d3c06960e76ef62961462135d90f289"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/comments", "author": null, "committer": null, "parents": [{"sha": "3f5da2852e82e525acc94944754e59ab4c6c4732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5da2852e82e525acc94944754e59ab4c6c4732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5da2852e82e525acc94944754e59ab4c6c4732"}], "stats": {"total": 84, "additions": 73, "deletions": 11}, "files": [{"sha": "1bf9288ee9b8da37ec73dcf3b71a50735ac8c9ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "patch": "@@ -1,3 +1,10 @@\n+2012-01-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/55981\n+\t* config/i386/sync.md (atomic_store<mode>): Always generate SWImode\n+\tstore through atomic_store<mode>_1.\n+\t(atomic_store<mode>_1): Macroize insn using SWI mode iterator.\n+\n 2013-01-17  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimizations/55264\n@@ -39,8 +46,7 @@\n \t* tree-loop-distribution.c (update_phis_for_loop_copy): Remove.\n \t(copy_loop_before): Adjust and delete update-ssa status.\n \t* tree-vect-loop-manip.c (rename_variables_in_bb): Make static.\n-\t(rename_variables_in_bb): Likewise.  Properly walk over\n-\tpredecessors.\n+\t(rename_variables_in_bb): Likewise.  Properly walk over predecessors.\n \t(rename_variables_in_loop): Remove.\n \t(slpeel_update_phis_for_duplicate_loop): Likewise.\n \t(slpeel_tree_duplicate_loop_to_edge_cfg): Handle nested loops,"}, {"sha": "9e5835662e1c690e25bd6f7c0ff6a3077e280c9d", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "patch": "@@ -225,11 +225,8 @@\n \t}\n \n       /* Otherwise use a store.  */\n-      if (INTVAL (operands[2]) & IX86_HLE_RELEASE)\n-\temit_insn (gen_atomic_store<mode>_1 (operands[0], operands[1],\n-\t\t\t\t\t     operands[2]));\n-      else\n-\temit_move_insn (operands[0], operands[1]);\n+      emit_insn (gen_atomic_store<mode>_1 (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n     }\n   /* ... followed by an MFENCE, if required.  */\n   if (model == MEMMODEL_SEQ_CST)\n@@ -238,10 +235,10 @@\n })\n \n (define_insn \"atomic_store<mode>_1\"\n-  [(set (match_operand:ATOMIC 0 \"memory_operand\" \"=m\")\n-\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"<nonmemory_operand>\" \"<r><i>\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\")]\n-\t\t       UNSPEC_MOVA))]\n+  [(set (match_operand:SWI 0 \"memory_operand\" \"=m\")\n+\t(unspec:SWI [(match_operand:SWI 1 \"<nonmemory_operand>\" \"<r><i>\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\")]\n+\t\t    UNSPEC_MOVA))]\n   \"\"\n   \"%K2mov{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n "}, {"sha": "dc25943f8cdecc1fdc3851534fb16ae823b2b0af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "patch": "@@ -1,3 +1,8 @@\n+2012-01-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/55981\n+\t* gcc.target/pr55981.c: New test.\n+\n 2013-01-17  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.target/arm/pr40887.c: Require at least armv5."}, {"sha": "36498d63cfe86d827963c685c10ea66ed29d84d3", "filename": "gcc/testsuite/gcc.target/i386/pr55981.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55981.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8abaebcd4c6fa25ccdd2186d8ea943eeff807938/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55981.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55981.c?ref=8abaebcd4c6fa25ccdd2186d8ea943eeff807938", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile  { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2\" } */\n+\n+volatile int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;\n+\n+volatile long long y;\n+\n+void\n+test ()\n+{\n+  int a_ = a;\n+  int b_ = b;\n+  int c_ = c;\n+  int d_ = d;\n+  int e_ = e;\n+  int f_ = f;\n+  int g_ = g;\n+  int h_ = h;\n+  int i_ = i;\n+  int j_ = j;\n+  int k_ = k;\n+  int l_ = l;\n+  int m_ = m;\n+  int n_ = n;\n+  int o_ = o;\n+  int p_ = p;\n+\n+  int z;\n+\n+  for (z = 0; z < 1000; z++)\n+    {\n+      __atomic_store_n (&y, 0x100000002ll, __ATOMIC_SEQ_CST);\n+      __atomic_store_n (&y, 0x300000004ll, __ATOMIC_SEQ_CST);\n+    }\n+\n+  a = a_;\n+  b = b_;\n+  c = c_;\n+  d = d_;\n+  e = e_;\n+  f = f_;\n+  g = g_;\n+  h = h_;\n+  i = i_;\n+  j = j_;\n+  k = k_;\n+  l = l_;\n+  m = m_;\n+  n = n_;\n+  o = o_;\n+  p = p_;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movabs\" 2 } } */"}]}