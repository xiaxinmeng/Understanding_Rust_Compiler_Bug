{"sha": "0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxNmE0MmExZmE1ZjNmYTk5ZDU3NTZiMzVjOWU3YTk0Y2JkYjg2ZQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-07-07T14:16:44Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-07-07T14:16:44Z"}, "message": "tree-ssa-forwprop.c (truth_valued_ssa_name): New function.\n\n2011-07-07  Kai Tietz  <ktietz@redhat.com>\n\n        * tree-ssa-forwprop.c (truth_valued_ssa_name): New function.\n        (lookup_logical_inverted_value): Likewise.\n        (simplify_bitwise_binary_1): Likewise.\n        (simplify_bitwise_binary): Use simplify_bitwise_binary_1.\n\n2011-07-07  Kai Tietz  <ktietz@redhat.com>\n\n        * gcc.dg/binop-notxor1.c: New test.\n        * gcc.dg/binop-notand4a.c: New test.\n        * gcc.dg/binop-notxor2.c: New test.\n        * gcc.dg/binop-notand3a.c: New test.\n        * gcc.dg/binop-notand2a.c: New test.\n        * gcc.dg/binop-notand6a.c: New test.\n        * gcc.dg/binop-notor1.c: New test.\n        * gcc.dg/binop-notand1a.c: New test.\n        * gcc.dg/binop-notand5a.c: New test.\n        * gcc.dg/binop-notor2.c: New test.\n\nFrom-SVN: r175974", "tree": {"sha": "7bc664a5934aa6a5a337a99baf2ba93884b114ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bc664a5934aa6a5a337a99baf2ba93884b114ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/comments", "author": null, "committer": null, "parents": [{"sha": "3ce9f090550e4bae93cd81d0ebebfad932c938af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce9f090550e4bae93cd81d0ebebfad932c938af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce9f090550e4bae93cd81d0ebebfad932c938af"}], "stats": {"total": 266, "additions": 266, "deletions": 0}, "files": [{"sha": "09a817a1e94f6b125fe59e5edd818f3429b1f91c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -1,3 +1,10 @@\n+2011-07-07  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* tree-ssa-forwprop.c (truth_valued_ssa_name): New function.\n+\t(lookup_logical_inverted_value): Likewise.\n+\t(simplify_bitwise_binary_1): Likewise.\n+\t(simplify_bitwise_binary): Use simplify_bitwise_binary_1.\n+\n 2011-07-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.c (%[Spec]): Don't document."}, {"sha": "e73b5ea428a17450016255911c2a316f0a1cd33c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -1,3 +1,16 @@\n+2011-07-07  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.dg/binop-notxor1.c: New test.\n+\t* gcc.dg/binop-notand4a.c: New test.\n+\t* gcc.dg/binop-notxor2.c: New test.\n+\t* gcc.dg/binop-notand3a.c: New test.\n+\t* gcc.dg/binop-notand2a.c: New test.\n+\t* gcc.dg/binop-notand6a.c: New test.\n+\t* gcc.dg/binop-notor1.c: New test.\n+\t* gcc.dg/binop-notand1a.c: New test.\n+\t* gcc.dg/binop-notand5a.c: New test.\n+\t* gcc.dg/binop-notor2.c: New test.\n+\n 2011-07-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/49640"}, {"sha": "2d8202a0c13370dccd9a0b866d928b3cb8b16681", "filename": "gcc/testsuite/gcc.dg/binop-notand1a.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand1a.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (char a, unsigned short b)\n+{\n+  return (a & !a) | (b & !b);\n+}\n+\n+/* As long as comparisons aren't boolified and casts from boolean-types\n+   aren't preserved, the folding of  X & !X to zero fails.  */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "0076d4be7a1679ac223f476d9b2ca18656be4445", "filename": "gcc/testsuite/gcc.dg/binop-notand2a.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand2a.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int a)\n+{\n+  return (!a & 1) != (a == 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "40e8038a78dd8320ed87c460fbd29e3b62be0605", "filename": "gcc/testsuite/gcc.dg/binop-notand3a.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand3a.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (short a)\n+{\n+  return (!a & 1) != ((a == 0) & 1);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "1178cf78826a3ce550a08b1fa03b7c534d92a2ca", "filename": "gcc/testsuite/gcc.dg/binop-notand4a.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand4a.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (unsigned char a, _Bool b)\n+{\n+  return (!a & a) | (b & !b);\n+}\n+\n+/* As long as comparisons aren't boolified and casts from boolean-types\n+   aren't preserved, the folding of  X & !X to zero fails.  */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "289abcb6b8532de5aa2868111baf6a1e35e64a0c", "filename": "gcc/testsuite/gcc.dg/binop-notand5a.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand5a.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (long a, unsigned long b)\n+{\n+  return (a & (a == 0)) | (b & !b);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b9fe4052d58e244f0c50cb30c17e651bb622a0ad", "filename": "gcc/testsuite/gcc.dg/binop-notand6a.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notand6a.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (unsigned long a, long b)\n+{\n+  return (a & !a) | (b & (b == 0));\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "a2cb6a3277f114c526bf1f064e4d43573e8ff6c7", "filename": "gcc/testsuite/gcc.dg/binop-notor1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notor1.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (_Bool a, _Bool b)\n+{\n+  return (a | !a) | (!b | b);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "ab8d70e4b5a6aa4296511fc0bd7daa1d6a703c5b", "filename": "gcc/testsuite/gcc.dg/binop-notor2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notor2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notor2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notor2.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (_Bool a, _Bool b)\n+{\n+  return (a | (a == 0)) | ((b ^ 1) | b);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "39c258dcd7599b662d568b78522448c6ea77d955", "filename": "gcc/testsuite/gcc.dg/binop-notxor1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notxor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notxor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notxor1.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (_Bool a, _Bool b)\n+{\n+  return (a ^ !a) | (!b ^ b);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "9f34cf284f470997b56ac80131a0c1bf23d66a35", "filename": "gcc/testsuite/gcc.dg/binop-notxor2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notxor2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notxor2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-notxor2.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (_Bool a, _Bool b)\n+{\n+  return (a ^ (a == 0)) | ((b == 0) ^ b);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8e6b7040af0aaa12dc59ad99ceb2adf9e427782e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "patch": "@@ -1602,6 +1602,129 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n   return false;\n }\n \n+/* Checks if expression has type of one-bit precision, or is a known\n+   truth-valued expression.  */\n+static bool\n+truth_valued_ssa_name (tree name)\n+{\n+  gimple def;\n+  tree type = TREE_TYPE (name);\n+\n+  if (!INTEGRAL_TYPE_P (type))\n+    return false;\n+  /* Don't check here for BOOLEAN_TYPE as the precision isn't\n+     necessarily one and so ~X is not equal to !X.  */\n+  if (TYPE_PRECISION (type) == 1)\n+    return true;\n+  def = SSA_NAME_DEF_STMT (name);\n+  if (is_gimple_assign (def))\n+    return truth_value_p (gimple_assign_rhs_code (def));\n+  return false;\n+}\n+\n+/* Helper routine for simplify_bitwise_binary_1 function.\n+   Return for the SSA name NAME the expression X if it mets condition\n+   NAME = !X. Otherwise return NULL_TREE.\n+   Detected patterns for NAME = !X are:\n+     !X and X == 0 for X with integral type.\n+     X ^ 1, X != 1,or ~X for X with integral type with precision of one.  */\n+static tree\n+lookup_logical_inverted_value (tree name)\n+{\n+  tree op1, op2;\n+  enum tree_code code;\n+  gimple def;\n+\n+  /* If name has none-intergal type, or isn't a SSA_NAME, then\n+     return.  */\n+  if (TREE_CODE (name) != SSA_NAME\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (name)))\n+    return NULL_TREE;\n+  def = SSA_NAME_DEF_STMT (name);\n+  if (!is_gimple_assign (def))\n+    return NULL_TREE;\n+\n+  code = gimple_assign_rhs_code (def);\n+  op1 = gimple_assign_rhs1 (def);\n+  op2 = NULL_TREE;\n+\n+  /* Get for EQ_EXPR or BIT_XOR_EXPR operation the second operand.\n+     If CODE isn't an EQ_EXPR, BIT_XOR_EXPR, TRUTH_NOT_EXPR,\n+     or BIT_NOT_EXPR, then return.  */\n+  if (code == EQ_EXPR || code == NE_EXPR\n+      || code == BIT_XOR_EXPR)\n+    op2 = gimple_assign_rhs2 (def);\n+\n+  switch (code)\n+    {\n+    case TRUTH_NOT_EXPR:\n+      return op1;\n+    case BIT_NOT_EXPR:\n+      if (truth_valued_ssa_name (name))\n+\treturn op1;\n+      break;\n+    case EQ_EXPR:\n+      /* Check if we have X == 0 and X has an integral type.  */\n+      if (!INTEGRAL_TYPE_P (TREE_TYPE (op1)))\n+\tbreak;\n+      if (integer_zerop (op2))\n+\treturn op1;\n+      break;\n+    case NE_EXPR:\n+      /* Check if we have X != 1 and X is a truth-valued.  */\n+      if (!INTEGRAL_TYPE_P (TREE_TYPE (op1)))\n+\tbreak;\n+      if (integer_onep (op2) && truth_valued_ssa_name (op1))\n+\treturn op1;\n+      break;\n+    case BIT_XOR_EXPR:\n+      /* Check if we have X ^ 1 and X is truth valued.  */\n+      if (integer_onep (op2) && truth_valued_ssa_name (op1))\n+\treturn op1;\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Optimize ARG1 CODE ARG2 to a constant for bitwise binary\n+   operations CODE, if one operand has the logically inverted\n+   value of the other.  */\n+static tree\n+simplify_bitwise_binary_1 (enum tree_code code, tree type,\n+\t\t\t   tree arg1, tree arg2)\n+{\n+  tree anot;\n+\n+  /* If CODE isn't a bitwise binary operation, return NULL_TREE.  */\n+  if (code != BIT_AND_EXPR && code != BIT_IOR_EXPR\n+      && code != BIT_XOR_EXPR)\n+    return NULL_TREE;\n+\n+  /* First check if operands ARG1 and ARG2 are equal.  If so\n+     return NULL_TREE as this optimization is handled fold_stmt.  */\n+  if (arg1 == arg2)\n+    return NULL_TREE;\n+  /* See if we have in arguments logical-not patterns.  */\n+  if (((anot = lookup_logical_inverted_value (arg1)) == NULL_TREE\n+       || anot != arg2)\n+      && ((anot = lookup_logical_inverted_value (arg2)) == NULL_TREE\n+\t  || anot != arg1))\n+    return NULL_TREE;\n+\n+  /* X & !X -> 0.  */\n+  if (code == BIT_AND_EXPR)\n+    return fold_convert (type, integer_zero_node);\n+  /* X | !X -> 1 and X ^ !X -> 1, if X is truth-valued.  */\n+  if (truth_valued_ssa_name (anot))\n+    return fold_convert (type, integer_one_node);\n+\n+  /* ??? Otherwise result is (X != 0 ? X : 1).  not handled.  */\n+  return NULL_TREE;\n+}\n+\n /* Simplify bitwise binary operations.\n    Return true if a transformation applied, otherwise return false.  */\n \n@@ -1769,6 +1892,15 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n       return true;\n     }\n \n+  /* Try simple folding for X op !X, and X op X.  */\n+  res = simplify_bitwise_binary_1 (code, TREE_TYPE (arg1), arg1, arg2);\n+  if (res != NULL_TREE)\n+    {\n+      gimple_assign_set_rhs_from_tree (gsi, res);\n+      update_stmt (gsi_stmt (*gsi));\n+      return true;\n+    }\n+\n   return false;\n }\n "}]}