{"sha": "11a675992afb01354e8d8331087177c25e97a7a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhNjc1OTkyYWZiMDEzNTRlOGQ4MzMxMDg3MTc3YzI1ZTk3YTdhNg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2007-03-26T21:07:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2007-03-26T21:07:27Z"}, "message": "gengtype.c: Don't include gtyp-gen.h.\n\n\t* gengtype.c: Don't include gtyp-gen.h.\n\t(srcdir): Declare here.\n\t(base_files, lang_dir_names): Allocate dynamically.\n\t(gt_files, num_gt_files, num_lang_dirs): New globals.\n\t(measure_input_list, read_input_line, read_input_list)\n\t(set_lang_bitmap): New functions.\n\t(get_base_file_bitmap): Rename get_lang_bitmap and drastically\n\tsimplify, relying on read_input_list to set up the bitmaps.\n\t(main): Arguments are no longer unused.  Check for correct number\n\tof command line arguments, set srcdir and srcdir_len, then call\n\tread_input_list, before doing anything else.  No need to worry\n\tabout duplicates in main loop.\n\t* configure.ac: Simplify the calculation of all_gtfiles.\n\tPut language tags in there.  Don't set or substitute\n\tall_gtfiles_files_langs or all_gtfiles_files_frags.\n\t* Makefile.in: Revamp the way gengtype is invoked, now that it\n\ttakes a file on its command line with a much simpler format.\n\tRemove or replace with gtyp-input.list all references to gtyp-gen.h.\n\t(GTFILES): Remove duplicates and C source files.\n\t* c-config-lang.in, cp/config-lang.in, objc/config-lang.in\n\t* objcp/config-lang.in: Add c-pragma.h to gtfiles.\n\t* configure: Regenerate.\n\nFrom-SVN: r123234", "tree": {"sha": "194b565efb539d208f63cc21e757c0f303b1a775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/194b565efb539d208f63cc21e757c0f303b1a775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11a675992afb01354e8d8331087177c25e97a7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a675992afb01354e8d8331087177c25e97a7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a675992afb01354e8d8331087177c25e97a7a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a675992afb01354e8d8331087177c25e97a7a6/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "065ae6117579cc9a089c238207b42f5a1470423a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065ae6117579cc9a089c238207b42f5a1470423a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/065ae6117579cc9a089c238207b42f5a1470423a"}], "stats": {"total": 7321, "additions": 4148, "deletions": 3173}, "files": [{"sha": "6708ee0f4c85101bf257ae063257f5028f8d1859", "filename": "configure", "status": "modified", "additions": 3779, "deletions": 2981, "changes": 6760, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=11a675992afb01354e8d8331087177c25e97a7a6"}, {"sha": "05c173677a08022562bae6aa8d6786dd28c3a18a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -1,5 +1,28 @@\n 2007-03-26  Zack Weinberg  <zackw@panix.com>\n \n+\t* gengtype.c: Don't include gtyp-gen.h.\n+\t(srcdir): Declare here.\n+\t(base_files, lang_dir_names): Allocate dynamically.\n+\t(gt_files, num_gt_files, num_lang_dirs): New globals.\n+\t(measure_input_list, read_input_line, read_input_list)\n+\t(set_lang_bitmap): New functions.\n+\t(get_base_file_bitmap): Rename get_lang_bitmap and drastically\n+\tsimplify, relying on read_input_list to set up the bitmaps.\n+\t(main): Arguments are no longer unused.  Check for correct number\n+\tof command line arguments, set srcdir and srcdir_len, then call\n+\tread_input_list, before doing anything else.  No need to worry\n+\tabout duplicates in main loop.\n+\t* configure.ac: Simplify the calculation of all_gtfiles.\n+\tPut language tags in there.  Don't set or substitute\n+\tall_gtfiles_files_langs or all_gtfiles_files_frags.\n+\t* Makefile.in: Revamp the way gengtype is invoked, now that it\n+\ttakes a file on its command line with a much simpler format.\n+\tRemove or replace with gtyp-input.list all references to gtyp-gen.h.\n+\t(GTFILES): Remove duplicates and C source files.\n+\t* c-config-lang.in, cp/config-lang.in, objc/config-lang.in\n+\t* objcp/config-lang.in: Add c-pragma.h to gtfiles.\n+\t* configure: Regenerate.\n+\n \t* gengtype.h: Remove all type definitions to gengtype.c; leave\n \tonly definitions of options_p, type_p, and pair_p as opaque\n \tpointers.  Update prototypes."}, {"sha": "2236f3bfd4c4efc0abf88098deed3a74b005bb54", "filename": "gcc/Makefile.in", "status": "modified", "additions": 33, "deletions": 65, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -1189,7 +1189,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  insn-attr.h insn-attrtab.c insn-opinit.c insn-preds.c insn-constants.h \\\n  tm-preds.h tm-constrs.h \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n- genrtl.c genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-gen.h \\\n+ genrtl.c genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) cc1*-dummy$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n@@ -2988,11 +2988,11 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n   $(srcdir)/ipa-reference.h $(srcdir)/output.h \\\n   $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/cgraph.h \\\n-  $(srcdir)/c-common.h $(srcdir)/c-tree.h $(srcdir)/reload.h \\\n+  $(srcdir)/reload.h \\\n   $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\\n   $(srcdir)/ipa-prop.c $(srcdir)/ipa-cp.c $(srcdir)/ipa-inline.c \\\n   $(srcdir)/dbxout.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\\n-  $(srcdir)/dojump.c $(srcdir)/tree-profile.c \\\n+  $(srcdir)/dojump.c \\\n   $(srcdir)/emit-rtl.c $(srcdir)/except.c $(srcdir)/explow.c $(srcdir)/expr.c \\\n   $(srcdir)/function.c $(srcdir)/except.h \\\n   $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \\\n@@ -3001,7 +3001,6 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h \\\n-  $(srcdir)/c-objc-common.c $(srcdir)/c-common.c $(srcdir)/c-parser.c \\\n   $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \\\n   $(srcdir)/tree-phinodes.c $(srcdir)/tree-cfg.c \\\n   $(srcdir)/tree-dfa.c $(srcdir)/tree-ssa-propagate.c \\\n@@ -3011,69 +3010,38 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-profile.c $(srcdir)/tree-nested.c \\\n   $(srcdir)/ipa-reference.c $(srcdir)/tree-ssa-structalias.h \\\n   $(srcdir)/tree-ssa-structalias.c \\\n-  $(srcdir)/c-pragma.h $(srcdir)/omp-low.c $(srcdir)/varpool.c \\\n-  $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c\\\n+  $(srcdir)/omp-low.c $(srcdir)/varpool.c \\\n+  $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c \\\n   @all_gtfiles@\n \n-GTFILES_FILES_LANGS = @all_gtfiles_files_langs@\n-GTFILES_FILES_FILES = @all_gtfiles_files_files@\n-GTFILES_LANG_DIR_NAMES = @subdirs@\n-GTFILES_SRCDIR = @srcdir@\n-\n-GTFILES_FILES_FILES_C = $(subst $(srcdir)/,, \\\n-\t$(filter %.c, $(GTFILES_FILES_FILES)))\n-GTFILES_FILES_FILES_H = $(addprefix gt-, \\\n-\t$(subst /,-,$(GTFILES_FILES_FILES_C:.c=.h)))\n-GTFILES_LANG_DIR_NAMES_H = $(foreach d,$(GTFILES_LANG_DIR_NAMES), gtype-$(d).h)\n-ALL_GTFILES_H := $(sort $(GTFILES_FILES_FILES_H) $(GTFILES_LANG_DIR_NAMES_H))\n-\n-$(ALL_GTFILES_H) : s-gtype ; @true\n-\n-\n-gt-cgraph.h gt-coverage.h gtype-desc.h gtype-desc.c gt-except.h \\\n-gt-function.h gt-integrate.h gt-tree.h gt-varasm.h \\\n-gt-emit-rtl.h gt-explow.h gt-stor-layout.h gt-regclass.h \\\n-gt-lists.h gt-alias.h gt-cselib.h gt-gcse.h \\\n-gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h gt-dojump.h \\\n-gt-dwarf2out.h gt-dwarf2asm.h \\\n-gt-dbxout.h \\\n-gtype-c.h gt-cfglayout.h \\\n-gt-tree-mudflap.h gt-tree-vect-generic.h \\\n-gt-tree-profile.h gt-tree-ssa-address.h \\\n-gt-tree-iterator.h gt-gimplify.h \\\n-gt-tree-phinodes.h gt-tree-nested.h \\\n-gt-tree-ssa-propagate.h gt-varpool.h \\\n-gt-tree-ssa-structalias.h gt-ipa-inline.h gt-passes.h \\\n-gt-stringpool.h gt-targhooks.h gt-omp-low.h : s-gtype ; @true\n-\n-define echo_quoted_to_gtyp\n- echo \"\\\"$(gtyp)\\\", \" >> tmp-gtyp.h\n+GTFILES_H = $(subst /,-, $(subst $(srcdir)/,gt-, $(subst .c,.h, \\\n+\t\t  $(filter %.c, $(GTFILES)))))\n+\n+GTFILES_LANG_H = $(patsubst [%], gtype-%.h, $(filter [%], $(GTFILES)))\n+ALL_GTFILES_H := $(sort $(GTFILES_H) $(GTFILES_LANG_H))\n+\n+# $(GTFILES) may be too long to put on a command line, so we have to\n+# write it out to a file (taking care not to do that in a way that\n+# overflows a command line!) and then have gengtype read the file in.\n+# The extra blank line in this definition is crucial: it makes the\n+# $(foreach ...) below expand to many lines instead of one.\n+\n+define echo_to_gi.list\n+echo '$(gtyp)' >> tmp-gi.list\n \n endef\n \n-gtyp-gen.h: s-gtyp-gen ; @true\n-s-gtyp-gen: Makefile\n-\techo \"/* This file is machine generated.  Do not edit.  */\" > tmp-gtyp.h\n-\techo \"static const char *const srcdir = \"  >> tmp-gtyp.h\n-\techo \"\\\"$(GTFILES_SRCDIR)\\\"\" >> tmp-gtyp.h\n-\techo \";\" >> tmp-gtyp.h\n-\techo \"static const char *const lang_files[] = {\" >> tmp-gtyp.h\n-\t$(foreach gtyp,$(GTFILES_FILES_FILES),$(echo_quoted_to_gtyp))\n-\techo \"NULL};\" >> tmp-gtyp.h\n-\techo \"static const char *const langs_for_lang_files[] = {\" >> tmp-gtyp.h\n-\t$(foreach gtyp,$(GTFILES_FILES_LANGS),$(echo_quoted_to_gtyp))\n-\techo \"NULL};\" >> tmp-gtyp.h\n-\techo \"static const char *const all_files[] = {\" >> tmp-gtyp.h\n-\t$(foreach gtyp,$(GTFILES),$(echo_quoted_to_gtyp))\n-\techo \" NULL};\" >> tmp-gtyp.h\n-\techo \"static const char *const lang_dir_names[] = { \\\"c\\\", \" >> tmp-gtyp.h\n-\t$(foreach gtyp,$(GTFILES_LANG_DIR_NAMES),$(echo_quoted_to_gtyp))\n-\techo \"NULL};\" >> tmp-gtyp.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-gtyp.h gtyp-gen.h\n-\t$(STAMP) s-gtyp-gen\n-\n-s-gtype: build/gengtype$(build_exeext) $(GTFILES)\n-\t$(RUN_GEN) build/gengtype$(build_exeext)\n+$(ALL_GTFILES_H) gtype-desc.c gtype-desc.h : s-gtype ; @true\n+\n+gtyp-input.list: s-gtyp-input ; @true\n+s-gtyp-input: Makefile\n+\t$(foreach gtyp, $(GTFILES), $(echo_to_gi.list))\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-gi.list gtyp-input.list\n+\t$(STAMP) s-gtyp-input\n+\n+s-gtype: build/gengtype$(build_exeext) $(filter-out [%], $(GTFILES)) \\\n+\t gtyp-input.list\n+\t$(RUN_GEN) build/gengtype$(build_exeext) $(srcdir) gtyp-input.list\n \t$(STAMP) s-gtype\n \n #\f\n@@ -3142,7 +3110,7 @@ build/gengtype-lex.o : gengtype-lex.c gengtype.h gengtype-yacc.h\t\\\n build/gengtype-yacc.o : gengtype-yacc.c gengtype.h $(BCONFIG_H)\t\t\\\n   $(SYSTEM_H)\n build/gengtype.o : gengtype.c $(BCONFIG_H) $(SYSTEM_H) gengtype.h \t\\\n-  gtyp-gen.h rtl.def insn-notes.def errors.h\n+  rtl.def insn-notes.def errors.h\n build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(GTM_H) $(RTL_BASE_H) errors.h gensupport.h\n build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h\t\t\\\n@@ -3761,8 +3729,8 @@ mostlyclean: lang.mostlyclean\n \t-rm -f gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns\n # Delete core dumps.\n \t-rm -f core */core\n-# Delete file generated for gengtype.c\n-\t-rm -f gtyp-gen.h\n+# Delete file generated for gengtype\n+\t-rm -f gtyp-input.list\n # Delete files generated by gengtype.c\n \t-rm -f gtype-*\n \t-rm -f gt-*"}, {"sha": "33f82b6d420412e3ebd68ef43766c3e6725ebad3", "filename": "gcc/c-config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fc-config-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fc-config-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-config-lang.in?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -23,4 +23,4 @@\n # files used by C that have garbage collection GTY macros in them\n # which therefore need to be scanned by gengtype.c.\n \n-gtfiles=\"\\$(srcdir)/c-lang.c \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-parser.c\"\n+gtfiles=\"\\$(srcdir)/c-lang.c \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.h \\$(srcdir)/c-pragma.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-parser.c\""}, {"sha": "45cbf97d9103054e25ebcacfabe3b89fcfc3f0d0", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -3532,11 +3532,8 @@ all_outputs='Makefile gccbug libada-mk'\n all_lang_makefrags=\n # List of language subdirectory makefiles.  Deprecated.\n all_lang_makefiles=\n-# Files for gengtype\n+# Additional files for gengtype\n all_gtfiles=\"$target_gtfiles\"\n-# Files for gengtype with language\n-all_gtfiles_files_langs=\n-all_gtfiles_files_files=\n \n # These are the languages that are set in --enable-languages,\n # and are available in the GCC tree.\n@@ -3613,24 +3610,13 @@ changequote([,])dnl\n \tall_languages=\"$all_languages $language\"\n \tall_compilers=\"$all_compilers $compilers\"\n \tall_outputs=\"$all_outputs $outputs\"\n-\tall_gtfiles=\"$all_gtfiles $gtfiles\"\n-\tfor f in $gtfiles\n-\tdo\n-\t\tall_gtfiles_files_langs=\"$all_gtfiles_files_langs ${subdir} \"\n-\t\tall_gtfiles_files_files=\"$all_gtfiles_files_files ${f} \"\n-\tdone\n+\tall_gtfiles=\"$all_gtfiles [[$subdir]] $gtfiles\"\n done\n \n # Pick up gtfiles for c\n gtfiles=\n-subdir=\"c\"\n . ${srcdir}/c-config-lang.in\n-all_gtfiles=\"$all_gtfiles $gtfiles\"\n-for f in $gtfiles\n-do\n-        all_gtfiles_files_langs=\"$all_gtfiles_files_langs ${subdir} \"\n-        all_gtfiles_files_files=\"$all_gtfiles_files_files ${f} \"\n-done\n+all_gtfiles=\"$all_gtfiles [[c]] $gtfiles\"\n \n check_languages=\n for language in $all_selected_languages\n@@ -3762,8 +3748,6 @@ AC_SUBST(subdirs)\n AC_SUBST(srcdir)\n AC_SUBST(all_compilers)\n AC_SUBST(all_gtfiles)\n-AC_SUBST(all_gtfiles_files_langs)\n-AC_SUBST(all_gtfiles_files_files)\n AC_SUBST(all_lang_makefrags)\n AC_SUBST(all_lang_makefiles)\n AC_SUBST(all_languages)"}, {"sha": "5c223c1499eb1334c64180bc3c4c537da3c7123b", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -31,4 +31,4 @@ compilers=\"cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3\"\n \n-gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c\"\n+gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.h \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c\""}, {"sha": "ce34d0016f6a2e57dd93a09253385380001ff2a8", "filename": "gcc/gengtype.c", "status": "modified", "additions": 306, "deletions": 104, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -133,13 +133,6 @@ extern outf_p get_output_file_with_visibility\n    (const char *input_file);\n const char *get_output_file_name (const char *);\n \n-#include \"gtyp-gen.h\"\n-\n-/* A bitmap that specifies which of BASE_FILES should be used to\n-   output a definition that is different for each language and must be\n-   defined once in each language that uses INPUT_FILE.  */\n-static lang_bitmap get_base_file_bitmap (const char *input_file);\n-\n /* Print, like fprintf, to O.  */\n static void oprintf (outf_p o, const char *S, ...)\n      ATTRIBUTE_PRINTF_2;\n@@ -151,20 +144,12 @@ static outf_p output_files;\n    source file.  */\n static outf_p header_file;\n \n-/* Number of files specified in gtfiles.  */\n-#define NUM_GT_FILES (ARRAY_SIZE (all_files) - 1)\n-\n-/* Number of files in the language files array.  */\n-#define NUM_LANG_FILES (ARRAY_SIZE (lang_files) - 1)\n+/* Source directory.  */\n+static const char *srcdir;\n \n /* Length of srcdir name.  */\n static int srcdir_len = 0;\n \n-/* A list of output files suitable for definitions.  There is one\n-   BASE_FILES entry for each language.  */\n-#define NUM_BASE_FILES (ARRAY_SIZE (lang_dir_names) - 1)\n-static outf_p base_files[NUM_BASE_FILES];\n-\n static outf_p create_file (const char *, const char *);\n static const char * get_file_basename (const char *);\n \n@@ -210,7 +195,285 @@ xasprintf (const char *format, ...)\n \n   return result;\n }\n+\f\n+/* Input file handling. */\n+\n+/* Table of all input files.  */\n+static const char **gt_files;\n+static size_t num_gt_files;\n+\n+/* Vector of per-language directories.  */\n+static const char **lang_dir_names;\n+static size_t num_lang_dirs;\n+\n+/* An array of output files suitable for definitions.  There is one\n+   BASE_FILES entry for each language.  */\n+static outf_p *base_files;\n+\n+/* Return a bitmap which has bit `1 << BASE_FILE_<lang>' set iff\n+   INPUT_FILE is used by <lang>.\n+\n+   This function should be written to assume that a file _is_ used\n+   if the situation is unclear.  If it wrongly assumes a file _is_ used,\n+   a linker error will result.  If it wrongly assumes a file _is not_ used,\n+   some GC roots may be missed, which is a much harder-to-debug problem.\n+\n+   The relevant bitmap is stored immediately before the file's name in the\n+   buffer set up by read_input_list.  It may be unaligned, so we have to\n+   read it byte-by-byte.  */\n \n+static lang_bitmap\n+get_lang_bitmap (const char *gtfile)\n+{\n+  lang_bitmap n = 0;\n+  int i;\n+  for (i = -(int) sizeof (lang_bitmap); i < 0; i++)\n+    n = (n << CHAR_BIT) + (unsigned char)gtfile[i];\n+  return n;\n+}\n+\n+/* Set the bitmap returned by get_lang_bitmap.  The only legitimate\n+   caller of this function is read_input_list.  */\n+static void\n+set_lang_bitmap (char *gtfile, lang_bitmap n)\n+{\n+  int i;\n+  for (i = -1; i >= -(int) sizeof (lang_bitmap); i--)\n+    {\n+      gtfile[i] = n & ((1U << CHAR_BIT)-1);\n+      n >>= CHAR_BIT;\n+    }\n+}\n+\n+/* Scan the input file, LIST, and determine how much space we need to\n+   store strings in.  Also, count the number of language directories\n+   and files.  The numbers returned are overestimates as they does not\n+   consider repeated files.  */\n+static size_t\n+measure_input_list (FILE *list)\n+{\n+  size_t n = 0;\n+  int c;\n+  bool atbol = true;\n+  num_lang_dirs = 0;\n+  num_gt_files = 0;\n+  while ((c = getc (list)) != EOF)\n+    {\n+      n++;\n+      if (atbol)\n+\t{\n+\t  if (c == '[')\n+\t    num_lang_dirs++;\n+\t  else\n+\t    {\n+\t      /* Add space for a lang_bitmap before the input file name.  */\n+\t      n += sizeof (lang_bitmap);\n+\t      num_gt_files++;\n+\t    }\n+\t  atbol = false;\n+\t}\n+\n+      if (c == '\\n')\n+\tatbol = true;\n+    }\n+\n+  rewind (list);\n+  return n;\n+}\n+\n+/* Read one input line from LIST to HEREP (which is updated).  A\n+   pointer to the string is returned via LINEP.  If it was a language\n+   subdirectory in square brackets, strip off the square brackets and\n+   return true.  Otherwise, leave space before the string for a\n+   lang_bitmap, and return false.  At EOF, returns false, does not\n+   touch *HEREP, and sets *LINEP to NULL.  POS is used for\n+   diagnostics.  */\n+static bool\n+read_input_line (FILE *list, char **herep, char **linep,\n+\t\t struct fileloc *pos)\n+{\n+  char *here = *herep;\n+  char *line;\n+  int c = getc (list);\n+\n+  if (c == EOF)\n+    {\n+      *linep = 0;\n+      return false;\n+    }\n+  else if (c == '[')\n+    {\n+      /* No space for a lang_bitmap is necessary.  Discard the '['. */\n+      c = getc (list);\n+      line = here;\n+      while (c != ']' && c != '\\n' && c != EOF)\n+\t{\n+\t  *here++ = c;\n+\t  c = getc (list);\n+\t}\n+      *here++ = '\\0';\n+\n+      if (c == ']')\n+\t{\n+\t  c = getc (list);  /* eat what should be a newline */\n+\t  if (c != '\\n' && c != EOF)\n+\t    error_at_line (pos, \"junk on line after language tag [%s]\", line);\n+\t}\n+      else\n+\terror_at_line (pos, \"missing close bracket for language tag [%s\", line);\n+\n+      *herep = here;\n+      *linep = line;\n+      return true;\n+    }\n+  else\n+    {\n+      /* Leave space for a lang_bitmap.  */\n+      memset (here, 0, sizeof (lang_bitmap));\n+      here += sizeof (lang_bitmap);\n+      line = here;\n+      do\n+\t{\n+\t  *here++ = c;\n+\t  c = getc (list);\n+\t}\n+      while (c != EOF && c != '\\n');\n+      *here++ = '\\0';\n+      *herep = here;\n+      *linep = line;\n+      return false;\n+    }\n+}\n+\n+/* Read the list of input files from LIST and compute all of the\n+   relevant tables.  There is one file per line of the list.  At\n+   first, all the files on the list are language-generic, but\n+   eventually a line will appear which is the name of a language\n+   subdirectory in square brackets, like this: [cp].  All subsequent\n+   files are specific to that language, until another language\n+   subdirectory tag appears.  Files can appear more than once, if\n+   they apply to more than one language.  */\n+static void\n+read_input_list (const char *listname)\n+{\n+  FILE *list = fopen (listname, \"r\");\n+  if (!list)\n+    fatal (\"cannot open %s: %s\", listname, strerror (errno));\n+  else\n+    {\n+      struct fileloc epos;\n+      size_t bufsz = measure_input_list (list);\n+      char *buf = XNEWVEC (char, bufsz);\n+      char *here = buf;\n+      char *committed = buf;\n+      char *limit = buf + bufsz;\n+      char *line;\n+      bool is_language;\n+      size_t langno = 0;\n+      size_t nfiles = 0;\n+      lang_bitmap curlangs = (1 << num_lang_dirs) - 1;\n+\n+      epos.file = listname;\n+      epos.line = 0;\n+\n+      lang_dir_names = XNEWVEC (const char *, num_lang_dirs);\n+      gt_files = XNEWVEC (const char *, num_gt_files);\n+\n+      for (;;)\n+\t{\n+\tnext_line:\n+\t  epos.line++;\n+\t  committed = here;\n+\t  is_language = read_input_line (list, &here, &line, &epos);\n+\t  gcc_assert (here <= limit);\n+\t  if (line == 0)\n+\t    break;\n+\t  else if (is_language)\n+\t    {\n+\t      size_t i;\n+\t      gcc_assert (langno <= num_lang_dirs);\n+\t      for (i = 0; i < langno; i++)\n+\t\tif (strcmp (lang_dir_names[i], line) == 0)\n+\t\t  {\n+\t\t    error_at_line (&epos, \"duplicate language tag [%s]\", line);\n+\t\t    curlangs = 1 << i;\n+\t\t    here = committed;\n+\t\t    goto next_line;\n+\t\t  }\n+\n+\t      curlangs = 1 << langno;\n+\t      lang_dir_names[langno++] = line;\n+\t    }\n+\t  else\n+\t    {\n+\t      size_t i;\n+\t      gcc_assert (nfiles <= num_gt_files);\n+\t      for (i = 0; i < nfiles; i++)\n+\t\tif (strcmp (gt_files[i], line) == 0)\n+\t\t  {\n+\t\t    /* Throw away the string we just read, and add the\n+\t\t       current language to the existing string's bitmap.  */\n+\t\t    lang_bitmap bmap = get_lang_bitmap (gt_files[i]);\n+\t\t    if (bmap & curlangs)\n+\t\t      error_at_line (&epos, \"file %s specified more than once \"\n+\t\t\t\t     \"for language %s\", line, langno == 0\n+\t\t\t\t     ? \"(all)\"\n+\t\t\t\t     : lang_dir_names[langno - 1]);\n+\n+\t\t    bmap |= curlangs;\n+\t\t    set_lang_bitmap ((char *)gt_files[i], bmap);\n+\t\t    here = committed;\n+\t\t    goto next_line;\n+\t\t  }\n+\n+\t      set_lang_bitmap (line, curlangs);\n+\t      gt_files[nfiles++] = line;\n+\t    }\n+\t}\n+      /* Update the global counts now that we know accurately how many\n+\t things there are.  (We do not bother resizing the arrays down.)  */\n+      num_lang_dirs = langno;\n+      num_gt_files = nfiles;\n+    }\n+\n+  /* Sanity check: any file that resides in a language subdirectory\n+     (e.g. 'cp') ought to belong to the corresponding language.\n+     ??? Still true if for instance ObjC++ is enabled and C++ isn't?\n+     (Can you even do that?  Should you be allowed to?)  */\n+  {\n+    size_t f;\n+    for (f = 0; f < num_gt_files; f++)\n+      {\n+\tlang_bitmap bitmap = get_lang_bitmap (gt_files[f]);\n+\tconst char *basename = get_file_basename (gt_files[f]);\n+\tconst char *slashpos = strchr (basename, '/');\n+\n+\tif (slashpos)\n+\t  {\n+\t    size_t l;\n+\t    for (l = 0; l < num_lang_dirs; l++)\n+\t      if ((size_t)(slashpos - basename) == strlen (lang_dir_names [l])\n+\t\t  && memcmp (basename, lang_dir_names[l],\n+\t\t\t     strlen (lang_dir_names[l])) == 0)\n+\t\t{\n+\t\t  if (!(bitmap & (1 << l)))\n+\t\t    error (\"%s is in language directory '%s' but is not \"\n+\t\t\t   \"tagged for that language\",\n+\t\t\t   basename, lang_dir_names[l]);\n+\t\t  break;\n+\t\t}\n+          }\n+      }\n+  }\n+\n+  if (ferror (list))\n+    fatal (\"error reading %s: %s\", listname, strerror (errno));\n+\n+  fclose (list);\n+}\n+\n+\n+\f\n /* The one and only TYPE_STRING.  */\n \n static struct type string_type = {\n@@ -297,7 +560,7 @@ new_structure (const char *name, int isunion, struct fileloc *pos,\n {\n   type_p si;\n   type_p s = NULL;\n-  lang_bitmap bitmap = get_base_file_bitmap (pos->file);\n+  lang_bitmap bitmap = get_lang_bitmap (pos->file);\n \n   for (si = structures; si != NULL; si = si->next)\n     if (strcmp (name, si->u.s.tag) == 0\n@@ -1202,7 +1465,9 @@ open_base_files (void)\n \n   header_file = create_file (\"GCC\", \"gtype-desc.h\");\n \n-  for (i = 0; i < NUM_BASE_FILES; i++)\n+  base_files = XNEWVEC (outf_p, num_lang_dirs);\n+\n+  for (i = 0; i < num_lang_dirs; i++)\n     base_files[i] = create_file (lang_dir_names[i],\n \t\t\t\t xasprintf (\"gtype-%s.h\", lang_dir_names[i]));\n \n@@ -1242,7 +1507,7 @@ get_file_basename (const char *f)\n \n   basename++;\n \n-  for (i = 1; i < NUM_BASE_FILES; i++)\n+  for (i = 0; i < num_lang_dirs; i++)\n     {\n       const char * s1;\n       const char * s2;\n@@ -1264,63 +1529,6 @@ get_file_basename (const char *f)\n   return basename;\n }\n \n-/* Return a bitmap which has bit `1 << BASE_FILE_<lang>' set iff\n-   INPUT_FILE is used by <lang>.\n-\n-   This function should be written to assume that a file _is_ used\n-   if the situation is unclear.  If it wrongly assumes a file _is_ used,\n-   a linker error will result.  If it wrongly assumes a file _is not_ used,\n-   some GC roots may be missed, which is a much harder-to-debug problem.  */\n-\n-unsigned\n-get_base_file_bitmap (const char *input_file)\n-{\n-  const char *basename = get_file_basename (input_file);\n-  const char *slashpos = strchr (basename, '/');\n-  unsigned j;\n-  unsigned k;\n-  unsigned bitmap;\n-\n-  /* If the file resides in a language subdirectory (e.g., 'cp'), assume that\n-     it belongs to the corresponding language.  The file may belong to other\n-     languages as well (which is checked for below).  */\n-\n-  if (slashpos)\n-    {\n-      size_t i;\n-      for (i = 1; i < NUM_BASE_FILES; i++)\n-\tif ((size_t)(slashpos - basename) == strlen (lang_dir_names [i])\n-\t    && memcmp (basename, lang_dir_names[i], strlen (lang_dir_names[i])) == 0)\n-          {\n-            /* It's in a language directory, set that language.  */\n-            bitmap = 1 << i;\n-          }\n-    }\n-\n-  /* If it's in any config-lang.in, then set for the languages\n-     specified.  */\n-\n-  bitmap = 0;\n-\n-  for (j = 0; j < NUM_LANG_FILES; j++)\n-    {\n-      if (!strcmp(input_file, lang_files[j]))\n-        {\n-          for (k = 0; k < NUM_BASE_FILES; k++)\n-            {\n-              if (!strcmp(lang_dir_names[k], langs_for_lang_files[j]))\n-                bitmap |= (1 << k);\n-            }\n-        }\n-    }\n-\n-  /* Otherwise, set all languages.  */\n-  if (!bitmap)\n-    bitmap = (1 << NUM_BASE_FILES) - 1;\n-\n-  return bitmap;\n-}\n-\n /* An output file, suitable for definitions, that can see declarations\n    made in INPUT_FILE and is linked into every language that uses\n    INPUT_FILE.  */\n@@ -1382,7 +1590,7 @@ get_output_file_with_visibility (const char *input_file)\n     {\n       size_t i;\n \n-      for (i = 0; i < NUM_BASE_FILES; i++)\n+      for (i = 0; i < num_lang_dirs; i++)\n \tif (memcmp (basename, lang_dir_names[i], strlen (lang_dir_names[i])) == 0\n \t    && basename[strlen(lang_dir_names[i])] == '/')\n \t  return base_files[i];\n@@ -2644,7 +2852,7 @@ finish_root_table (struct flist *flp, const char *pfx, const char *lastname,\n   for (fli2 = flp; fli2; fli2 = fli2->next)\n     if (fli2->started_p)\n       {\n-\tlang_bitmap bitmap = get_base_file_bitmap (fli2->name);\n+\tlang_bitmap bitmap = get_lang_bitmap (fli2->name);\n \tint fnum;\n \n \tfor (fnum = 0; bitmap != 0; fnum++, bitmap >>= 1)\n@@ -2660,7 +2868,7 @@ finish_root_table (struct flist *flp, const char *pfx, const char *lastname,\n \n   {\n     size_t fnum;\n-    for (fnum = 0; fnum < NUM_BASE_FILES; fnum++)\n+    for (fnum = 0; fnum < num_lang_dirs; fnum++)\n       oprintf (base_files [fnum],\n \t       \"const struct %s * const %s[] = {\\n\",\n \t       tname, name);\n@@ -2670,7 +2878,7 @@ finish_root_table (struct flist *flp, const char *pfx, const char *lastname,\n   for (fli2 = flp; fli2; fli2 = fli2->next)\n     if (fli2->started_p)\n       {\n-\tlang_bitmap bitmap = get_base_file_bitmap (fli2->name);\n+\tlang_bitmap bitmap = get_lang_bitmap (fli2->name);\n \tint fnum;\n \n \tfli2->started_p = 0;\n@@ -2686,7 +2894,7 @@ finish_root_table (struct flist *flp, const char *pfx, const char *lastname,\n \n   {\n     size_t fnum;\n-    for (fnum = 0; fnum < NUM_BASE_FILES; fnum++)\n+    for (fnum = 0; fnum < num_lang_dirs; fnum++)\n       {\n \toprintf (base_files[fnum], \"  NULL\\n\");\n \toprintf (base_files[fnum], \"};\\n\");\n@@ -2870,7 +3078,7 @@ write_array (outf_p f, pair_p v, const struct write_types_data *wtd)\n   d.indent = 2;\n   d.line = &v->line;\n   d.opt = v->opt;\n-  d.bitmap = get_base_file_bitmap (v->line.file);\n+  d.bitmap = get_lang_bitmap (v->line.file);\n   d.param = NULL;\n \n   d.prev_val[3] = prevval3 = xasprintf (\"&%s\", v->name);\n@@ -3213,22 +3421,27 @@ note_def_vec_alloc (const char *type, const char *astrat, struct fileloc *pos)\n }\n \n \f\n-extern int main (int argc, char **argv);\n int\n-main (int ARG_UNUSED (argc), char ** ARG_UNUSED (argv))\n+main (int argc, char **argv)\n {\n-  unsigned i;\n+  size_t i;\n   static struct fileloc pos = { __FILE__, __LINE__ };\n-  unsigned j;\n \n+  /* fatal uses this */\n+  progname = \"gengtype\";\n+\n+  if (argc != 3)\n+    fatal (\"usage: gengtype srcdir input-list\");\n+\n+  srcdir = argv[1];\n   srcdir_len = strlen (srcdir);\n \n+  read_input_list (argv[2]);\n+  if (hit_error)\n+    return 1;\n+\n   scalar_char.u.scalar_is_char = true;\n   scalar_nonchar.u.scalar_is_char = false;\n-\n-  /* fatal uses this */\n-  progname = \"gengtype\";\n-\n   gen_rtx_next ();\n \n   do_scalar_typedef (\"CUMULATIVE_ARGS\", &pos);\n@@ -3247,20 +3460,9 @@ main (int ARG_UNUSED (argc), char ** ARG_UNUSED (argv))\n \n   do_typedef (\"HARD_REG_SET\", create_array (&scalar_nonchar, \"2\"), &pos);\n \n-  for (i = 0; i < NUM_GT_FILES; i++)\n+  for (i = 0; i < num_gt_files; i++)\n     {\n-      int dupflag = 0;\n-      /* Omit if already seen.  */\n-      for (j = 0; j < i; j++)\n-        {\n-          if (!strcmp (all_files[i], all_files[j]))\n-            {\n-              dupflag = 1;\n-              break;\n-            }\n-        }\n-      if (!dupflag)\n-        parse_file (all_files[i]);\n+      parse_file (gt_files[i]);\n #ifndef USE_MAPPED_LOCATION\n       /* temporary kludge - gengtype doesn't handle conditionals.\n \t Manually add source_locus *after* we've processed input.h.  */"}, {"sha": "2a3d1361e85bdda6dd64a53d3436ab214b0549f5", "filename": "gcc/objc/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fobjc%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fobjc%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fconfig-lang.in?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -34,4 +34,4 @@ target_libs=target-libobjc\n # Most of the object files for cc1obj actually come from C.\n lang_requires=\"c\"\n \n-gtfiles=\"\\$(srcdir)/objc/objc-act.h \\$(srcdir)/c-parser.c \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/objc/objc-act.c\"\n+gtfiles=\"\\$(srcdir)/objc/objc-act.h \\$(srcdir)/c-parser.c \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.h \\$(srcdir)/c-pragma.c \\$(srcdir)/objc/objc-act.c\""}, {"sha": "62b743f4c8f28832f9f02b17ea562236ea3991d6", "filename": "gcc/objcp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fobjcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a675992afb01354e8d8331087177c25e97a7a6/gcc%2Fobjcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fconfig-lang.in?ref=11a675992afb01354e8d8331087177c25e97a7a6", "patch": "@@ -38,4 +38,4 @@ build_by_default=\"no\"\n lang_requires=\"objc c++\"\n subdir_requires=\"objc cp\"\n \n-gtfiles=\"\\$(srcdir)/objcp/objcp-decl.c \\$(srcdir)/objc/objc-act.c \\$(srcdir)/objc/objc-act.h \\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/cp-objcp-common.c\"\n+gtfiles=\"\\$(srcdir)/objcp/objcp-decl.c \\$(srcdir)/objc/objc-act.c \\$(srcdir)/objc/objc-act.h \\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.h \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/cp-objcp-common.c\""}]}