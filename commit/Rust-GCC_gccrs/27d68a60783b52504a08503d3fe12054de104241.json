{"sha": "27d68a60783b52504a08503d3fe12054de104241", "node_id": "C_kwDOANBUbNoAKDI3ZDY4YTYwNzgzYjUyNTA0YTA4NTAzZDNmZTEyMDU0ZGUxMDQyNDE", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-07-04T12:17:47Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-08-16T15:34:20Z"}, "message": "RISC-V: Support _Float16 type.\n\nRISC-V decide use _Float16 as primary IEEE half precision type, and this\nalready become part of psABI, this patch has added folloing support for\n_Float16:\n\n- Soft-float support for _Float16.\n- Make sure _Float16 available on C++ mode.\n- Name mangling for _Float16 on C++ mode.\n\ngcc/ChangeLog\n\n\t* config/riscv/riscv-builtins.cc: include stringpool.h\n\t(riscv_float16_type_node): New.\n\t(riscv_init_builtin_types): Ditto.\n\t(riscv_init_builtins): Call riscv_init_builtin_types.\n\t* config/riscv/riscv-modes.def (HF): New.\n\t* config/riscv/riscv.cc (riscv_output_move): Handle HFmode.\n\t(riscv_mangle_type): New.\n\t(riscv_scalar_mode_supported_p): Ditto.\n\t(riscv_libgcc_floating_mode_supported_p): Ditto.\n\t(riscv_excess_precision): Ditto.\n\t(riscv_floatn_mode): Ditto.\n\t(riscv_init_libfuncs): Ditto.\n\t(TARGET_MANGLE_TYPE): Ditto.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Ditto.\n\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Ditto.\n\t(TARGET_INIT_LIBFUNCS): Ditto.\n\t(TARGET_C_EXCESS_PRECISION): Ditto.\n\t(TARGET_FLOATN_MODE): Ditto.\n\t* config/riscv/riscv.md (mode): Add HF.\n\t(softload): Add HF.\n\t(softstore): Ditto.\n\t(fmt): Ditto.\n\t(UNITMODE): Ditto.\n\t(movhf): New.\n\t(*movhf_softfloat): New.\n\nlibgcc/ChangeLog:\n\n\t* config/riscv/sfp-machine.h (_FP_NANFRAC_H): New.\n\t(_FP_NANFRAC_H): Ditto.\n\t(_FP_NANSIGN_H): Ditto.\n\t* config/riscv/t-softfp32 (softfp_extensions): Add HF related\n\troutines.\n\t(softfp_truncations): Ditto.\n\t(softfp_extras): Ditto.\n\t* config/riscv/t-softfp64 (softfp_extras): Add HF related routines.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/_Float16.C: New.\n\t* gcc.target/riscv/_Float16-soft-1.c: Ditto.\n\t* gcc.target/riscv/_Float16-soft-2.c: Ditto.\n\t* gcc.target/riscv/_Float16-soft-3.c: Ditto.\n\t* gcc.target/riscv/_Float16-soft-4.c: Ditto.\n\t* gcc.target/riscv/_Float16.c: Ditto.", "tree": {"sha": "1dfae8996fc876b3030172e481b3d0943e529b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfae8996fc876b3030172e481b3d0943e529b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d68a60783b52504a08503d3fe12054de104241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d68a60783b52504a08503d3fe12054de104241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d68a60783b52504a08503d3fe12054de104241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d68a60783b52504a08503d3fe12054de104241/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e230261073950e554319f56716d2b17c09a28658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e230261073950e554319f56716d2b17c09a28658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e230261073950e554319f56716d2b17c09a28658"}], "stats": {"total": 318, "additions": 300, "deletions": 18}, "files": [{"sha": "3009311604d5071320f3a2431ebab82e56f23685", "filename": "gcc/config/riscv/riscv-builtins.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n #include \"stor-layout.h\"\n+#include \"stringpool.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n \n@@ -160,6 +161,8 @@ static GTY(()) int riscv_builtin_decl_index[NUM_INSN_CODES];\n #define GET_BUILTIN_DECL(CODE) \\\n   riscv_builtin_decls[riscv_builtin_decl_index[(CODE)]]\n \n+tree riscv_float16_type_node = NULL_TREE;\n+\n /* Return the function type associated with function prototype TYPE.  */\n \n static tree\n@@ -185,11 +188,32 @@ riscv_build_function_type (enum riscv_function_type type)\n   return types[(int) type];\n }\n \n+static void\n+riscv_init_builtin_types (void)\n+{\n+  /* Provide the _Float16 type and float16_type_node if needed.  */\n+  if (!float16_type_node)\n+    {\n+      riscv_float16_type_node = make_node (REAL_TYPE);\n+      TYPE_PRECISION (riscv_float16_type_node) = 16;\n+      SET_TYPE_MODE (riscv_float16_type_node, HFmode);\n+      layout_type (riscv_float16_type_node);\n+    }\n+  else\n+    riscv_float16_type_node = float16_type_node;\n+\n+  if (!maybe_get_identifier (\"_Float16\"))\n+    lang_hooks.types.register_builtin_type (riscv_float16_type_node,\n+\t\t\t\t\t    \"_Float16\");\n+}\n+\n /* Implement TARGET_INIT_BUILTINS.  */\n \n void\n riscv_init_builtins (void)\n {\n+  riscv_init_builtin_types ();\n+\n   for (size_t i = 0; i < ARRAY_SIZE (riscv_builtins); i++)\n     {\n       const struct riscv_builtin_description *d = &riscv_builtins[i];"}, {"sha": "5cf2fc8e9e6f563353772c2877f6a0f518834680", "filename": "gcc/config/riscv/riscv-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-modes.def?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -19,4 +19,5 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+FLOAT_MODE (HF, 2, ieee_half_format);\n FLOAT_MODE (TF, 16, ieee_quad_format);"}, {"sha": "47e6110767c4275486e6c3c051e51c9f5a860c56", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 158, "deletions": 13, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -2296,22 +2296,33 @@ riscv_output_move (rtx dest, rtx src)\n   enum rtx_code dest_code, src_code;\n   machine_mode mode;\n   bool dbl_p;\n+  unsigned width;\n \n   dest_code = GET_CODE (dest);\n   src_code = GET_CODE (src);\n   mode = GET_MODE (dest);\n   dbl_p = (GET_MODE_SIZE (mode) == 8);\n+  width = GET_MODE_SIZE (mode);\n \n   if (dbl_p && riscv_split_64bit_move_p (dest, src))\n     return \"#\";\n \n   if (dest_code == REG && GP_REG_P (REGNO (dest)))\n     {\n       if (src_code == REG && FP_REG_P (REGNO (src)))\n-\treturn dbl_p ? \"fmv.x.d\\t%0,%1\" : \"fmv.x.w\\t%0,%1\";\n+\tswitch (width)\n+\t  {\n+\t  case 2:\n+\t    /* Using fmv.x.s + sign-extend to emulate fmv.x.h.  */\n+\t    return \"fmv.x.s\\t%0,%1;slli\\t%0,%0,16;srai\\t%0,%0,16\";\n+\t  case 4:\n+\t    return \"fmv.x.s\\t%0,%1\";\n+\t  case 8:\n+\t    return \"fmv.x.d\\t%0,%1\";\n+\t  }\n \n       if (src_code == MEM)\n-\tswitch (GET_MODE_SIZE (mode))\n+\tswitch (width)\n \t  {\n \t  case 1: return \"lbu\\t%0,%1\";\n \t  case 2: return \"lhu\\t%0,%1\";\n@@ -2353,18 +2364,24 @@ riscv_output_move (rtx dest, rtx src)\n \t    return \"mv\\t%0,%z1\";\n \n \t  if (FP_REG_P (REGNO (dest)))\n-\t    {\n-\t      if (!dbl_p)\n-\t\treturn \"fmv.w.x\\t%0,%z1\";\n-\t      if (TARGET_64BIT)\n-\t\treturn \"fmv.d.x\\t%0,%z1\";\n-\t      /* in RV32, we can emulate fmv.d.x %0, x0 using fcvt.d.w */\n-\t      gcc_assert (src == CONST0_RTX (mode));\n-\t      return \"fcvt.d.w\\t%0,x0\";\n-\t    }\n+\t    switch (width)\n+\t      {\n+\t      case 2:\n+\t\t/* High 16 bits should be all-1, otherwise HW will treated\n+\t\t   as a n-bit canonical NaN, but isn't matter for softfloat.  */\n+\t\treturn \"fmv.s.x\\t%0,%1\";\n+\t      case 4:\n+\t\treturn \"fmv.s.x\\t%0,%z1\";\n+\t      case 8:\n+\t\tif (TARGET_64BIT)\n+\t\t  return \"fmv.d.x\\t%0,%z1\";\n+\t\t/* in RV32, we can emulate fmv.d.x %0, x0 using fcvt.d.w */\n+\t\tgcc_assert (src == CONST0_RTX (mode));\n+\t\treturn \"fcvt.d.w\\t%0,x0\";\n+\t      }\n \t}\n       if (dest_code == MEM)\n-\tswitch (GET_MODE_SIZE (mode))\n+\tswitch (width)\n \t  {\n \t  case 1: return \"sb\\t%z1,%0\";\n \t  case 2: return \"sh\\t%z1,%0\";\n@@ -2375,7 +2392,15 @@ riscv_output_move (rtx dest, rtx src)\n   if (src_code == REG && FP_REG_P (REGNO (src)))\n     {\n       if (dest_code == REG && FP_REG_P (REGNO (dest)))\n-\treturn dbl_p ? \"fmv.d\\t%0,%1\" : \"fmv.s\\t%0,%1\";\n+\tswitch (width)\n+\t  {\n+\t  case 2:\n+\t    return \"fmv.s\\t%0,%1\";\n+\t  case 4:\n+\t    return \"fmv.s\\t%0,%1\";\n+\t  case 8:\n+\t    return \"fmv.d\\t%0,%1\";\n+\t  }\n \n       if (dest_code == MEM)\n \treturn dbl_p ? \"fsd\\t%1,%0\" : \"fsw\\t%1,%0\";\n@@ -5638,6 +5663,107 @@ riscv_asan_shadow_offset (void)\n   return TARGET_64BIT ? (HOST_WIDE_INT_1 << 29) : 0;\n }\n \n+/* Implement TARGET_MANGLE_TYPE.  */\n+\n+static const char *\n+riscv_mangle_type (const_tree type)\n+{\n+  /* Half-precision float, _Float16 is \"DF16_\".  */\n+  if (TREE_CODE (type) == REAL_TYPE && TYPE_PRECISION (type) == 16)\n+    return \"DF16_\";\n+\n+  /* Use the default mangling.  */\n+  return NULL;\n+}\n+\n+/* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n+\n+static bool\n+riscv_scalar_mode_supported_p (scalar_mode mode)\n+{\n+  if (mode == HFmode)\n+    return true;\n+  else\n+    return default_scalar_mode_supported_p (mode);\n+}\n+\n+/* Implement TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P - return TRUE\n+   if MODE is HFmode, and punt to the generic implementation otherwise.  */\n+\n+static bool\n+riscv_libgcc_floating_mode_supported_p (scalar_float_mode mode)\n+{\n+  if (mode == HFmode)\n+    return true;\n+  else\n+    return default_libgcc_floating_mode_supported_p (mode);\n+}\n+\n+/* Set the value of FLT_EVAL_METHOD.\n+   ISO/IEC TS 18661-3 defines two values that we'd like to make use of:\n+\n+    0: evaluate all operations and constants, whose semantic type has at\n+       most the range and precision of type float, to the range and\n+       precision of float; evaluate all other operations and constants to\n+       the range and precision of the semantic type;\n+\n+    N, where _FloatN is a supported interchange floating type\n+       evaluate all operations and constants, whose semantic type has at\n+       most the range and precision of _FloatN type, to the range and\n+       precision of the _FloatN type; evaluate all other operations and\n+       constants to the range and precision of the semantic type;\n+\n+   If we have the zfh extensions then we support _Float16 in native\n+   precision, so we should set this to 16.  */\n+static enum flt_eval_method\n+riscv_excess_precision (enum excess_precision_type type)\n+{\n+  switch (type)\n+    {\n+    case EXCESS_PRECISION_TYPE_FAST:\n+    case EXCESS_PRECISION_TYPE_STANDARD:\n+      return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+    case EXCESS_PRECISION_TYPE_IMPLICIT:\n+      return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+}\n+\n+/* Implement TARGET_FLOATN_MODE.  */\n+static opt_scalar_float_mode\n+riscv_floatn_mode (int n, bool extended)\n+{\n+  if (!extended && n == 16)\n+    return HFmode;\n+\n+  return default_floatn_mode (n, extended);\n+}\n+\n+static void\n+riscv_init_libfuncs (void)\n+{\n+  /* Half-precision float operations.  The compiler handles all operations\n+     with NULL libfuncs by converting to SFmode.  */\n+\n+  /* Arithmetic.  */\n+  set_optab_libfunc (add_optab, HFmode, NULL);\n+  set_optab_libfunc (sdiv_optab, HFmode, NULL);\n+  set_optab_libfunc (smul_optab, HFmode, NULL);\n+  set_optab_libfunc (neg_optab, HFmode, NULL);\n+  set_optab_libfunc (sub_optab, HFmode, NULL);\n+\n+  /* Comparisons.  */\n+  set_optab_libfunc (eq_optab, HFmode, NULL);\n+  set_optab_libfunc (ne_optab, HFmode, NULL);\n+  set_optab_libfunc (lt_optab, HFmode, NULL);\n+  set_optab_libfunc (le_optab, HFmode, NULL);\n+  set_optab_libfunc (ge_optab, HFmode, NULL);\n+  set_optab_libfunc (gt_optab, HFmode, NULL);\n+  set_optab_libfunc (unord_optab, HFmode, NULL);\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -5821,6 +5947,25 @@ riscv_asan_shadow_offset (void)\n #undef TARGET_NEW_ADDRESS_PROFITABLE_P\n #define TARGET_NEW_ADDRESS_PROFITABLE_P riscv_new_address_profitable_p\n \n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE riscv_mangle_type\n+\n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P riscv_scalar_mode_supported_p\n+\n+#undef TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P\n+#define TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P                                \\\n+  riscv_libgcc_floating_mode_supported_p\n+\n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS riscv_init_libfuncs\n+\n+#undef TARGET_C_EXCESS_PRECISION\n+#define TARGET_C_EXCESS_PRECISION riscv_excess_precision\n+\n+#undef TARGET_FLOATN_MODE\n+#define TARGET_FLOATN_MODE riscv_floatn_mode\n+\n #undef TARGET_ASAN_SHADOW_OFFSET\n #define TARGET_ASAN_SHADOW_OFFSET riscv_asan_shadow_offset\n "}, {"sha": "7af5c90e0f3f62d9b476b08fa88086c92671f3fd", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -134,7 +134,7 @@\n   (const_string \"unknown\"))\n \n ;; Main data type used by the insn\n-(define_attr \"mode\" \"unknown,none,QI,HI,SI,DI,TI,SF,DF,TF\"\n+(define_attr \"mode\" \"unknown,none,QI,HI,SI,DI,TI,HF,SF,DF,TF\"\n   (const_string \"unknown\"))\n \n ;; True if the main data type is twice the size of a word.\n@@ -324,20 +324,20 @@\n (define_mode_attr default_load [(QI \"lbu\") (HI \"lhu\") (SI \"lw\") (DI \"ld\")])\n \n ;; Mode attribute for FP loads into integer registers.\n-(define_mode_attr softload [(SF \"lw\") (DF \"ld\")])\n+(define_mode_attr softload [(HF \"lh\") (SF \"lw\") (DF \"ld\")])\n \n ;; Instruction names for stores.\n (define_mode_attr store [(QI \"sb\") (HI \"sh\") (SI \"sw\") (DI \"sd\") (SF \"fsw\") (DF \"fsd\")])\n \n ;; Instruction names for FP stores from integer registers.\n-(define_mode_attr softstore [(SF \"sw\") (DF \"sd\")])\n+(define_mode_attr softstore [(HF \"sh\") (SF \"sw\") (DF \"sd\")])\n \n ;; This attribute gives the best constraint to use for registers of\n ;; a given mode.\n (define_mode_attr reg [(SI \"d\") (DI \"d\") (CC \"d\")])\n \n ;; This attribute gives the format suffix for floating-point operations.\n-(define_mode_attr fmt [(SF \"s\") (DF \"d\")])\n+(define_mode_attr fmt [(HF \"h\") (SF \"s\") (DF \"d\")])\n \n ;; This attribute gives the integer suffix for floating-point conversions.\n (define_mode_attr ifmt [(SI \"w\") (DI \"l\")])\n@@ -347,7 +347,7 @@\n \n ;; This attribute gives the upper-case mode name for one unit of a\n ;; floating-point mode.\n-(define_mode_attr UNITMODE [(SF \"SF\") (DF \"DF\")])\n+(define_mode_attr UNITMODE [(HF \"HF\") (SF \"SF\") (DF \"DF\")])\n \n ;; This attribute gives the integer mode that has half the size of\n ;; the controlling mode.\n@@ -1450,6 +1450,26 @@\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"DF\")])\n \n+;; 16-bit floating point moves\n+(define_expand \"movhf\"\n+  [(set (match_operand:HF 0 \"\")\n+\t(match_operand:HF 1 \"\"))]\n+  \"\"\n+{\n+  if (riscv_legitimize_move (HFmode, operands[0], operands[1]))\n+    DONE;\n+})\n+\n+\n+(define_insn \"*movhf_softfloat\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=f, r,r,m,*f,*r\")\n+\t(match_operand:HF 1 \"move_operand\"         \" f,Gr,m,r,*r,*f\"))]\n+  \"(register_operand (operands[0], HFmode)\n+    || reg_or_0_operand (operands[1], HFmode))\"\n+  { return riscv_output_move (operands[0], operands[1]); }\n+  [(set_attr \"move_type\" \"fmove,move,load,store,mtc,mfc\")\n+   (set_attr \"mode\" \"HF\")])\n+\n ;;\n ;;  ....................\n ;;"}, {"sha": "b97d1fbcf1ceba833dcaad28f7661d2a1d66a170", "filename": "gcc/testsuite/g++.target/riscv/_Float16.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2F_Float16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2F_Float16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2F_Float16.C?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+_Float16 x;\n+\n+_Float16 foo1 (_Float16 a, _Float16 b)\n+{\n+    return a + b;\n+}\n+\n+_Float16 foo2 (_Float16 a, _Float16 b)\n+{\n+    return a * b;\n+}\n+\n+int foo3 (_Float16 a, _Float16 b)\n+{\n+    return a > b;\n+}"}, {"sha": "0622588fdb93c6890b0b1503eba4cbe7d80b18fb", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-soft-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-1.c?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if -mabi=lp64f -O\" } */\n+\n+_Float16 test_soft_move (_Float16 a, _Float16 b)\n+{\n+    return b;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fmv.h\" } } */"}, {"sha": "3d37823fa4d1844ac5c7187f98dadff41fd28f5e", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-soft-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-2.c?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if -mabi=lp64f -O\" } */\n+\n+_Float16 test_soft_add (_Float16 a, _Float16 b)\n+{\n+    /* Make sure __addhf3 not invoked here. */\n+    /* { dg-final { scan-assembler-times \"call\\t__extendhfsf2\" 2 } } */\n+    return a + b;\n+    /* { dg-final { scan-assembler-not \"call\\t__addhf3\" } } */\n+    /* { dg-final { scan-assembler-times \"fadd.s\" 1 } } */\n+    /* { dg-final { scan-assembler-times \"call\\t__truncsfhf2\" 1 } } */\n+}\n+"}, {"sha": "ecce364e3107007b1b7acdd5c25a33fddb7e6047", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-soft-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-3.c?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if -mabi=lp64f -O\" } */\n+\n+int test_soft_compare (_Float16 a, _Float16 b)\n+{\n+    /* Make sure __gthf2 not invoked here. */\n+    /* { dg-final { scan-assembler-times \"call\\t__extendhfsf2\" 2 } } */\n+    return a > b;\n+    /* { dg-final { scan-assembler-not \"call\\t__gthf2\" } } */\n+    /* { dg-final { scan-assembler-times \"fgt.s\" 1 } } */\n+}\n+"}, {"sha": "ce4bc7a6a5d92b0b05a842e5b24c34f459d86edf", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-soft-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-soft-4.c?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64i -mabi=lp64 -O\" } */\n+\n+int test_soft_compare (_Float16 a, _Float16 b)\n+{\n+    /* Make sure __gthf2 not invoked here. */\n+    /* { dg-final { scan-assembler-times \"call\\t__extendhfsf2\" 2 } } */\n+    return a > b;\n+    /* { dg-final { scan-assembler-not \"call\\t__gthf2\" } } */\n+    /* { dg-final { scan-assembler-times \"call\\t__gtsf2\" 1 } } */\n+}\n+"}, {"sha": "cc131fd3e2cc6de4ab107357213c759462b1389a", "filename": "gcc/testsuite/gcc.target/riscv/_Float16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16.c?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+_Float16 x;\n+\n+_Float16 foo1 (_Float16 a, _Float16 b)\n+{\n+    return a + b;\n+}\n+\n+_Float16 foo2 (_Float16 a, _Float16 b)\n+{\n+    return a * b;\n+}\n+\n+int foo3 (_Float16 a, _Float16 b)\n+{\n+    return a > b;\n+}"}, {"sha": "b2901f0b1fd850a0e777da5528676e998ab01879", "filename": "libgcc/config/riscv/sfp-machine.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/libgcc%2Fconfig%2Friscv%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/libgcc%2Fconfig%2Friscv%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fsfp-machine.h?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -41,6 +41,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n #define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n \n+#define _FP_NANFRAC_H\t\t_FP_QNANBIT_H\n #define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n #define _FP_NANFRAC_D\t\t_FP_QNANBIT_D, 0\n #define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0, 0, 0\n@@ -63,6 +64,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_1_udiv_norm(D,R,X,Y)\n #define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n \n+#define _FP_NANFRAC_H\t\t_FP_QNANBIT_H\n #define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n #define _FP_NANFRAC_D\t\t_FP_QNANBIT_D\n #define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0\n@@ -80,6 +82,7 @@ typedef unsigned int UTItype __attribute__ ((mode (TI)));\n typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define CMPtype __gcc_CMPtype\n \n+#define _FP_NANSIGN_H\t\t0\n #define _FP_NANSIGN_S\t\t0\n #define _FP_NANSIGN_D\t\t0\n #define _FP_NANSIGN_Q\t\t0"}, {"sha": "55261f98383174f748d7cda1b27155b36da6bc9a", "filename": "libgcc/config/riscv/t-softfp32", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/libgcc%2Fconfig%2Friscv%2Ft-softfp32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/libgcc%2Fconfig%2Friscv%2Ft-softfp32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Ft-softfp32?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -41,3 +41,8 @@ else\n softfp_extras := divsf3 divdf3 divtf3\n \n endif\n+\n+softfp_extensions += hfsf hfdf hftf\n+softfp_truncations += tfhf dfhf sfhf\n+softfp_extras += fixhfsi fixhfdi fixunshfsi fixunshfdi \\\n+                 floatsihf floatdihf floatunsihf floatundihf"}, {"sha": "c87d242d5c3a13b7be35592cec8fd1d1ab767517", "filename": "libgcc/config/riscv/t-softfp64", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d68a60783b52504a08503d3fe12054de104241/libgcc%2Fconfig%2Friscv%2Ft-softfp64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d68a60783b52504a08503d3fe12054de104241/libgcc%2Fconfig%2Friscv%2Ft-softfp64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Ft-softfp64?ref=27d68a60783b52504a08503d3fe12054de104241", "patch": "@@ -1,3 +1,4 @@\n include $(srcdir)/config/riscv/t-softfp32\n \n softfp_int_modes += ti\n+softfp_extras += fixhfti fixunshfti floattihf floatuntihf"}]}