{"sha": "290d8971e6e3b784a88b5c4b6b91b8d77552cb3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwZDg5NzFlNmUzYjc4NGE4OGI1YzRiNmI5MWI4ZDc3NTUyY2IzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-31T15:37:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-31T15:37:03Z"}, "message": "dwarf2out.c (size_of_die): For -gdwarf-4 use uleb128 size instead of fixed 1 or 2 for dw_val_class_loc and...\n\n\t* dwarf2out.c (size_of_die): For -gdwarf-4 use\n\tuleb128 size instead of fixed 1 or 2 for dw_val_class_loc\n\tand 0 instead of 1 for dw_val_class_flag.\n\t(value_format): For -gdwarf-4 use DW_FORM_sec_offset for\n\tdw_val_class_range_list, dw_val_class_loc_list,\n\tdw_val_class_lineptr and dw_val_class_macptr, use\n\tDW_FORM_flag_present for dw_val_class_flag and\n\tDW_FORM_exprloc for dw_val_class_loc.\n\t(output_die): For -gdwarf-4 print dw_val_class_loc\n\tsize as uleb128 instead of 1 or 2 bytes and don't print\n\tanything for dw_val_class_flag.\n\nFrom-SVN: r157871", "tree": {"sha": "d92c2f3ed1dfcbb58f769df2fba83d1db975f4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d92c2f3ed1dfcbb58f769df2fba83d1db975f4bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "109f4af30fe82f245ee1acdebc656d3f185eeebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109f4af30fe82f245ee1acdebc656d3f185eeebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109f4af30fe82f245ee1acdebc656d3f185eeebb"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "d14790c553f10ca3b59b0dad6743ef2801482fb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=290d8971e6e3b784a88b5c4b6b91b8d77552cb3a", "patch": "@@ -1,5 +1,17 @@\n 2010-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (size_of_die): For -gdwarf-4 use\n+\tuleb128 size instead of fixed 1 or 2 for dw_val_class_loc\n+\tand 0 instead of 1 for dw_val_class_flag.\n+\t(value_format): For -gdwarf-4 use DW_FORM_sec_offset for\n+\tdw_val_class_range_list, dw_val_class_loc_list,\n+\tdw_val_class_lineptr and dw_val_class_macptr, use\n+\tDW_FORM_flag_present for dw_val_class_flag and\n+\tDW_FORM_exprloc for dw_val_class_loc.\n+\t(output_die): For -gdwarf-4 print dw_val_class_loc\n+\tsize as uleb128 instead of 1 or 2 bytes and don't print\n+\tanything for dw_val_class_flag.\n+\n \t* var-tracking.c (vt_init_cfa_base): Use cselib_lookup_from_insn\n \tinstead of cselib_lookup following by tweaking locs->setting_insn.\n "}, {"sha": "86ae89b6964854a945a0e19b3290fbcb3739fff7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290d8971e6e3b784a88b5c4b6b91b8d77552cb3a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=290d8971e6e3b784a88b5c4b6b91b8d77552cb3a", "patch": "@@ -9920,7 +9920,10 @@ size_of_die (dw_die_ref die)\n \t    unsigned long lsize = size_of_locs (AT_loc (a));\n \n \t    /* Block length.  */\n-\t    size += constant_size (lsize);\n+\t    if (dwarf_version >= 4)\n+\t      size += size_of_uleb128 (lsize);\n+\t    else\n+\t      size += constant_size (lsize);\n \t    size += lsize;\n \t  }\n \t  break;\n@@ -9948,7 +9951,16 @@ size_of_die (dw_die_ref die)\n \t\t    * a->dw_attr_val.v.val_vec.elt_size; /* block */\n \t  break;\n \tcase dw_val_class_flag:\n-\t  size += 1;\n+\t  if (dwarf_version >= 4)\n+\t    /* Currently all add_AT_flag calls pass in 1 as last argument,\n+\t       so DW_FORM_flag_present can be used.  If that ever changes,\n+\t       we'll need to use DW_FORM_flag and have some optimization\n+\t       in build_abbrev_table that will change those to\n+\t       DW_FORM_flag_present if it is set to 1 in all DIEs using\n+\t       the same abbrev entry.  */\n+\t    gcc_assert (a->dw_attr_val.v.val_flag == 1);\n+\t  else\n+\t    size += 1;\n \t  break;\n \tcase dw_val_class_die_ref:\n \t  if (AT_ref_external (a))\n@@ -10142,8 +10154,11 @@ value_format (dw_attr_ref a)\n \t  gcc_unreachable ();\n \t}\n     case dw_val_class_range_list:\n-    case dw_val_class_offset:\n     case dw_val_class_loc_list:\n+      if (dwarf_version >= 4)\n+\treturn DW_FORM_sec_offset;\n+      /* FALLTHRU */\n+    case dw_val_class_offset:\n       switch (DWARF_OFFSET_SIZE)\n \t{\n \tcase 4:\n@@ -10154,6 +10169,8 @@ value_format (dw_attr_ref a)\n \t  gcc_unreachable ();\n \t}\n     case dw_val_class_loc:\n+      if (dwarf_version >= 4)\n+\treturn DW_FORM_exprloc;\n       switch (constant_size (size_of_locs (AT_loc (a))))\n \t{\n \tcase 1:\n@@ -10206,6 +10223,17 @@ value_format (dw_attr_ref a)\n \t  gcc_unreachable ();\n \t}\n     case dw_val_class_flag:\n+      if (dwarf_version >= 4)\n+\t{\n+\t  /* Currently all add_AT_flag calls pass in 1 as last argument,\n+\t     so DW_FORM_flag_present can be used.  If that ever changes,\n+\t     we'll need to use DW_FORM_flag and have some optimization\n+\t     in build_abbrev_table that will change those to\n+\t     DW_FORM_flag_present if it is set to 1 in all DIEs using\n+\t     the same abbrev entry.  */\n+\t  gcc_assert (a->dw_attr_val.v.val_flag == 1);\n+\t  return DW_FORM_flag_present;\n+\t}\n       return DW_FORM_flag;\n     case dw_val_class_die_ref:\n       if (AT_ref_external (a))\n@@ -10218,7 +10246,7 @@ value_format (dw_attr_ref a)\n       return DW_FORM_addr;\n     case dw_val_class_lineptr:\n     case dw_val_class_macptr:\n-      return DW_FORM_data;\n+      return dwarf_version >= 4 ? DW_FORM_sec_offset : DW_FORM_data;\n     case dw_val_class_str:\n       return AT_string_form (a);\n     case dw_val_class_file:\n@@ -10450,7 +10478,10 @@ output_die (dw_die_ref die)\n \t  size = size_of_locs (AT_loc (a));\n \n \t  /* Output the block length for this list of location operations.  */\n-\t  dw2_asm_output_data (constant_size (size), size, \"%s\", name);\n+\t  if (dwarf_version >= 4)\n+\t    dw2_asm_output_data_uleb128 (size, \"%s\", name);\n+\t  else\n+\t    dw2_asm_output_data (constant_size (size), size, \"%s\", name);\n \n \t  output_loc_sequence (AT_loc (a));\n \t  break;\n@@ -10518,6 +10549,20 @@ output_die (dw_die_ref die)\n \t  }\n \n \tcase dw_val_class_flag:\n+\t  if (dwarf_version >= 4)\n+\t    {\n+\t      /* Currently all add_AT_flag calls pass in 1 as last argument,\n+\t\t so DW_FORM_flag_present can be used.  If that ever changes,\n+\t\t we'll need to use DW_FORM_flag and have some optimization\n+\t\t in build_abbrev_table that will change those to\n+\t\t DW_FORM_flag_present if it is set to 1 in all DIEs using\n+\t\t the same abbrev entry.  */\n+\t      gcc_assert (AT_flag (a) == 1);\n+\t      if (flag_debug_asm)\n+\t\tfprintf (asm_out_file, \"\\t\\t\\t%s %s\\n\",\n+\t\t\t ASM_COMMENT_START, name);\n+\t      break;\n+\t    }\n \t  dw2_asm_output_data (1, AT_flag (a), \"%s\", name);\n \t  break;\n "}]}