{"sha": "28002f1ad17bb0c19c5371ecf2de364303eff0d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgwMDJmMWFkMTdiYjBjMTljNTM3MWVjZjJkZTM2NDMwM2VmZjBkMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-02-09T11:51:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-02-09T11:51:05Z"}, "message": "re PR tree-optimization/54000 (Performance breakdown for gcc-4.{6,7} vs. gcc-4.5 using std::vector in matrix vector multiplication (IVopts / inliner))\n\n2015-02-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/54000\n\t* tree-ssa-looo-ivopts.c: Include tree-vectorizer.h.\n\t(struct ivopts_data): Add loop_loc member.\n\t(tree_ssa_iv_optimize_loop): Dump loop location.\n\t(create_new_ivs): Likewise, also dump number of IVs generated.\n\n\t* g++.dg/tree-ssa/ivopts-3.C: New testcase.\n\nFrom-SVN: r220536", "tree": {"sha": "f193ea4343a7a901db1e91508978c01605179767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f193ea4343a7a901db1e91508978c01605179767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28002f1ad17bb0c19c5371ecf2de364303eff0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28002f1ad17bb0c19c5371ecf2de364303eff0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28002f1ad17bb0c19c5371ecf2de364303eff0d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28002f1ad17bb0c19c5371ecf2de364303eff0d3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8adc78f494c920da7786b4639f827d2422d3215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8adc78f494c920da7786b4639f827d2422d3215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8adc78f494c920da7786b4639f827d2422d3215"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "b0be734df6578ac66305ca13c9aca2a5d89301ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28002f1ad17bb0c19c5371ecf2de364303eff0d3", "patch": "@@ -1,3 +1,11 @@\n+2015-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54000\n+\t* tree-ssa-looo-ivopts.c: Include tree-vectorizer.h.\n+\t(struct ivopts_data): Add loop_loc member.\n+\t(tree_ssa_iv_optimize_loop): Dump loop location.\n+\t(create_new_ivs): Likewise, also dump number of IVs generated.\n+\n 2015-02-09  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sem_item_optimizer::register_hooks): Register hooks"}, {"sha": "7a8734b97e3441ddb208b5dd71c2365e3606a2d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28002f1ad17bb0c19c5371ecf2de364303eff0d3", "patch": "@@ -1,3 +1,8 @@\n+2015-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54000\n+\t* g++.dg/tree-ssa/ivopts-3.C: New testcase.\n+\n 2015-02-09  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/graphite/scop-19.c: Fix scan-tree-dump for fpic."}, {"sha": "d0178b32986acf0d4dbeecf507ecdbd7bc84f36f", "filename": "gcc/testsuite/g++.dg/tree-ssa/ivopts-3.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C?ref=28002f1ad17bb0c19c5371ecf2de364303eff0d3", "patch": "@@ -0,0 +1,76 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-tree-ivopts-details\" }\n+\n+class MinimalVec3\n+{\n+protected:\n+  double coords[3];\n+\n+public:\n+\n+  MinimalVec3( ) {\n+    for ( int i = 0; i < 3; ++i )\n+      coords[i] = 0.;\n+  }\n+\n+  inline const double& operator[] ( int I ) const {\n+    return coords[I];\n+  }\n+};\n+\n+class MinimalVector\n+{\n+protected:\n+  double *_pData;\n+  double stuff;\n+\n+public:\n+  explicit MinimalVector ( int length ) {\n+    _pData = new double[length];\n+    for (int i = 0; i < length; ++i) _pData[i] = 0.;\n+  }\n+\n+  inline double& operator[] ( int I ) {\n+    return _pData[I];\n+  }\n+\n+  inline const double& operator[] ( int I ) const {\n+    return _pData[I];\n+  }\n+};\n+\n+\n+int main ( int , char** ) {\n+    int w = ( 1 << 7 )+1;\n+    int wsqr = w*w;\n+    int wcub = w*w*w;\n+\n+    MinimalVec3 * rows[9];\n+    for ( int i = 0; i < 9; ++i ) {\n+      rows[i] = new MinimalVec3[wcub];\n+    }\n+\n+    MinimalVector img ( wcub ), res ( wcub );\n+\n+    for ( int c = 0; c < 1000; ++c ) {\n+\n+      for ( int i = 1; i < w-1; ++i )\n+        for ( int j = 0; j < 3; ++j ) {\n+\n+          for ( int k = 1; k < w - 1; ++k )\n+            for ( int l = 0; l < 3; ++l ) {\n+\n+              for ( int m = 1; m < w - 1; ++m )\n+                for ( int n = 0; n < 3; ++n )\n+                  res[i*wsqr + k*w + m] += img[( i + j - 1 ) *wsqr + ( k + l - 1 ) *w + m + n - 1] * rows[j*3 + l][i*wsqr + k*w + m][n];\n+\n+            }\n+        }\n+    }\n+    return 0;\n+}\n+\n+// Verify that on x86_64 and i?86 we use a single IV for the innermost loop\n+\n+// { dg-final { scan-tree-dump \"Selected IV set for loop \\[0-9\\]* at \\[^ \\]*:64, 1 IVs\" \"ivopts\" { target x86_64-*-* i?86-*-* } } }\n+// { dg-final { cleanup-tree-dump \"ivopts\" } }"}, {"sha": "438ff96785221343d2a5912c629875da6cdfd6bc", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28002f1ad17bb0c19c5371ecf2de364303eff0d3/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=28002f1ad17bb0c19c5371ecf2de364303eff0d3", "patch": "@@ -138,6 +138,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"tree-ssa-address.h\"\n #include \"builtins.h\"\n+#include \"tree-vectorizer.h\"\n \n /* FIXME: Expressions are expanded to RTL in this pass to determine the\n    cost of different addressing modes.  This should be moved to a TBD\n@@ -318,6 +319,7 @@ struct ivopts_data\n {\n   /* The currently optimized loop.  */\n   struct loop *current_loop;\n+  source_location loop_loc;\n \n   /* Numbers of iterations for all exits of the current loop.  */\n   hash_map<edge, tree_niter_desc *> *niters;\n@@ -6340,7 +6342,12 @@ create_new_ivs (struct ivopts_data *data, struct iv_ca *set)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      fprintf (dump_file, \"\\nSelected IV set: \\n\");\n+      fprintf (dump_file, \"Selected IV set for loop %d\",\n+\t       data->current_loop->num);\n+      if (data->loop_loc != UNKNOWN_LOCATION)\n+\tfprintf (dump_file, \" at %s:%d\", LOCATION_FILE (data->loop_loc),\n+\t\t LOCATION_LINE (data->loop_loc));\n+      fprintf (dump_file, \", %lu IVs:\\n\", bitmap_count_bits (set->cands));\n       EXECUTE_IF_SET_IN_BITMAP (set->cands, 0, i, bi)\n         {\n           cand = iv_cand (data, i);\n@@ -6943,11 +6950,16 @@ tree_ssa_iv_optimize_loop (struct ivopts_data *data, struct loop *loop)\n \n   gcc_assert (!data->niters);\n   data->current_loop = loop;\n+  data->loop_loc = find_loop_location (loop);\n   data->speed = optimize_loop_for_speed_p (loop);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      fprintf (dump_file, \"Processing loop %d\\n\", loop->num);\n+      fprintf (dump_file, \"Processing loop %d\", loop->num);\n+      if (data->loop_loc != UNKNOWN_LOCATION)\n+\tfprintf (dump_file, \" at %s:%d\", LOCATION_FILE (data->loop_loc),\n+\t\t LOCATION_LINE (data->loop_loc));\n+      fprintf (dump_file, \"\\n\");\n \n       if (exit)\n \t{"}]}