{"sha": "66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1OTJlOTVkYjQxMjE2ZTZmYjFkNzZhODMxZjhlZmE2YmNmMGQ2Zg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-08-17T22:41:22Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-08-17T22:41:22Z"}, "message": "[RELOAD] Don't assume subreg mem address is ok\n\nThis patch fixes a case where reload blindly assumes a subreg mem is\nOK if its address has been partially reloaded by legitimize_reload_address.\n\n\tPR rtl-optimization/72771\n\t* reload.c (find_reloads): Don't assume that a subreg mem is OK\n\twhen find_reloads_toplev returns address_reloaded==-1.\n\t(alternative_allows_const_pool_ref): Update comment.\ntestsuite/\n\t* gcc.c-torture/compile/pr72771.c: New.\n\nFrom-SVN: r239549", "tree": {"sha": "f81e4c1cdce3465669f486e5c83c18bd770bc7ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f81e4c1cdce3465669f486e5c83c18bd770bc7ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fbf26cc575cd5d50acc63a0d935744399230435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbf26cc575cd5d50acc63a0d935744399230435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fbf26cc575cd5d50acc63a0d935744399230435"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "e09cdeafe6b3290445017ce81e43a3b6cdc2a72b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "patch": "@@ -1,3 +1,10 @@\n+2016-08-18  Alan Modra  <amodra@gmail.com>\n+\n+\tPR rtl-optimization/72771\n+\t* reload.c (find_reloads): Don't assume that a subreg mem is OK\n+\twhen find_reloads_toplev returns address_reloaded==-1.\n+\t(alternative_allows_const_pool_ref): Update comment.\n+\n 2015-08-17  Alan Hayward <alan.hayward@arm.com>\n \n \tPR tree-optimization/71752"}, {"sha": "cd0d661e2246b75f030b187bd1284e7b54466657", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "patch": "@@ -3961,7 +3961,7 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \t       there will be no reload needed at all.  */\n \t    if (plus == NULL_RTX\n \t\t&& subreg == NULL_RTX\n-\t\t&& alternative_allows_const_pool_ref (this_address_reloaded == 0\n+\t\t&& alternative_allows_const_pool_ref (this_address_reloaded != 1\n \t\t\t\t\t\t      ? substed_operand[i]\n \t\t\t\t\t\t      : NULL,\n \t\t\t\t\t\t      recog_data.constraints[i],\n@@ -4606,8 +4606,8 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \n /* Return true if alternative number ALTNUM in constraint-string\n    CONSTRAINT is guaranteed to accept a reloaded constant-pool reference.\n-   MEM gives the reference if it didn't need any reloads, otherwise it\n-   is null.  */\n+   MEM gives the reference if its address hasn't been fully reloaded,\n+   otherwise it is NULL.  */\n \n static bool\n alternative_allows_const_pool_ref (rtx mem ATTRIBUTE_UNUSED,"}, {"sha": "4c7e6091a49e9571ff0df0dbd60aa6da5ad2d44d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "patch": "@@ -1,3 +1,7 @@\n+2016-08-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.c-torture/compile/pr72771.c: New.\n+\n 2016-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/67496"}, {"sha": "1cc13e3d4628a4056c7d5c18f0d730713b2bde48", "filename": "gcc/testsuite/gcc.c-torture/compile/pr72771.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr72771.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66592e95db41216e6fb1d76a831f8efa6bcf0d6f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr72771.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr72771.c?ref=66592e95db41216e6fb1d76a831f8efa6bcf0d6f", "patch": "@@ -0,0 +1,29 @@\n+void fn2(void);\n+void fn3(unsigned long);\n+\n+signed char a;\n+int b, c, e, f;\n+float *d;\n+\n+void fn1(void) {\n+        unsigned short g = 0;\n+lbl_986:\n+        for (;;) {\n+                c = 0;\n+                for (; c <= 2;) {\n+                        *d = g;\n+                        fn2();\n+                        if (e)\n+                                goto lbl_986;\n+                }\n+                g = 2;\n+                for (; (short) g >= 0; g--) {\n+                        for (; b;) {\n+                                fn3(45360);\n+                                f = 0;\n+                                for (; a >= 0; a--)\n+                                        ;\n+                        }\n+                }\n+        }\n+}"}]}