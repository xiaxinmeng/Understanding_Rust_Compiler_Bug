{"sha": "1568430fae5e11fe4496dcc194c9771f6e088bf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU2ODQzMGZhZTVlMTFmZTQ0OTZkY2MxOTRjOTc3MWY2ZTA4OGJmMQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-07-02T23:40:19Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-07-02T23:40:19Z"}, "message": "configure.ac: Set ABI_TWEAKS_SRCDIR.\n\n\t* configure.ac: Set ABI_TWEAKS_SRCDIR.\n\t* configure.host: Set abi_tweaks_dir.  Check for atomicity.h when\n\tsetting atomicity_dir.  Override type_cpu for arm based targets.\n\t* include/Makefile.am (host_headers): Add cxxabi_tweaks.h.\n\t* libsupc++/cxxabi.h: Include bits/cxxabi.h. Don't declare __guard.\n\t* libsupc++/guard.cc: Use definitions from cxxabi_tweaks.h.\n\t* libsupc++/vec.cc: Ditto.\n\t* config/cpu/arm/cxxabi_tweaks.h: New file.\n\t* config/cpu/generic/cxxabi_tweaks.h: New file.\n\t* */Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r84032", "tree": {"sha": "4ee3482f74ebfac6d6e99562f108ef088befc592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee3482f74ebfac6d6e99562f108ef088befc592"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1568430fae5e11fe4496dcc194c9771f6e088bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1568430fae5e11fe4496dcc194c9771f6e088bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1568430fae5e11fe4496dcc194c9771f6e088bf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1568430fae5e11fe4496dcc194c9771f6e088bf1/comments", "author": null, "committer": null, "parents": [{"sha": "954a465fb252e5ae6de7ed2347f349ae00ee0510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954a465fb252e5ae6de7ed2347f349ae00ee0510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954a465fb252e5ae6de7ed2347f349ae00ee0510"}], "stats": {"total": 95, "additions": 60, "deletions": 35}, "files": [{"sha": "9272f153ad929849726e3c670134dc480bff98ec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -1,3 +1,17 @@\n+2004-07-03  Paul Brook  <paul@codesourcery.com>\n+\n+\t* configure.ac: Set ABI_TWEAKS_SRCDIR.\n+\t* configure.host: Set abi_tweaks_dir.  Check for atomicity.h when\n+\tsetting atomicity_dir.  Override type_cpu for arm based targets.\n+\t* include/Makefile.am (host_headers): Add cxxabi_tweaks.h.\n+\t* libsupc++/cxxabi.h: Include bits/cxxabi.h. Don't declare __guard.\n+\t* libsupc++/guard.cc: Use definitions from cxxabi_tweaks.h.\n+\t* libsupc++/vec.cc: Ditto.\n+\t* config/cpu/arm/cxxabi_tweaks.h: New file.\n+\t* config/cpu/generic/cxxabi_tweaks.h: New file.\n+\t* */Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2004-07-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/type_traits.h (_Is_normal_iterator): Move..."}, {"sha": "e99995f0ea465624c57118a1000a8d995be24b49", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -87,6 +87,7 @@ DIST_ARCHIVES = $(distdir).tar.gz\n GZIP_ENV = --best\n distuninstallcheck_listfiles = find . -type f -print\n distcleancheck_listfiles = find . -type f -print\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n ALLOCATOR_NAME = @ALLOCATOR_NAME@"}, {"sha": "db528aace8256b0d0128532fda24cc77a45c5d7e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -1005,7 +1005,7 @@ esac\n     else\n       echo \"$as_me: WARNING: no configuration information is in $ac_dir\" >&2\n     fi\n-    cd $ac_popdir\n+    cd \"$ac_popdir\"\n   done\n fi\n \n@@ -4382,7 +4382,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4385 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4375 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -4996,7 +4996,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 4999 \"configure\"\n+#line 4988 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -72707,6 +72707,8 @@ done\n ATOMICITY_SRCDIR=config/${atomicity_dir}\n ATOMIC_WORD_SRCDIR=config/${atomic_word_dir}\n OS_INC_SRCDIR=config/${os_include_dir}\n+ABI_TWEAKS_SRCDIR=config/${abi_tweaks_dir}\n+\n \n \n \n@@ -73856,6 +73858,7 @@ s,@GLIBCXX_TEST_ABI_TRUE@,$GLIBCXX_TEST_ABI_TRUE,;t t\n s,@GLIBCXX_TEST_ABI_FALSE@,$GLIBCXX_TEST_ABI_FALSE,;t t\n s,@ATOMICITY_SRCDIR@,$ATOMICITY_SRCDIR,;t t\n s,@ATOMIC_WORD_SRCDIR@,$ATOMIC_WORD_SRCDIR,;t t\n+s,@ABI_TWEAKS_SRCDIR@,$ABI_TWEAKS_SRCDIR,;t t\n s,@OS_INC_SRCDIR@,$OS_INC_SRCDIR,;t t\n s,@glibcxx_prefixdir@,$glibcxx_prefixdir,;t t\n s,@gxx_include_dir@,$gxx_include_dir,;t t\n@@ -74034,11 +74037,6 @@ esac\n   *) ac_INSTALL=$ac_top_builddir$INSTALL ;;\n   esac\n \n-  if test x\"$ac_file\" != x-; then\n-    { echo \"$as_me:$LINENO: creating $ac_file\" >&5\n-echo \"$as_me: creating $ac_file\" >&6;}\n-    rm -f \"$ac_file\"\n-  fi\n   # Let's still pretend it is `configure' which instantiates (i.e., don't\n   # use $as_me), people would be surprised to read:\n   #    /* config.h.  Generated by config.status.  */\n@@ -74077,6 +74075,12 @@ echo \"$as_me: error: cannot find input file: $f\" >&2;}\n \t fi;;\n       esac\n     done` || { (exit 1); exit 1; }\n+\n+  if test x\"$ac_file\" != x-; then\n+    { echo \"$as_me:$LINENO: creating $ac_file\" >&5\n+echo \"$as_me: creating $ac_file\" >&6;}\n+    rm -f \"$ac_file\"\n+  fi\n _ACEOF\n cat >>$CONFIG_STATUS <<_ACEOF\n   sed \"$ac_vpsub"}, {"sha": "a8fdcff593947aca4ec669937da6566fddc17c14", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -272,8 +272,10 @@ GLIBCXX_CONFIGURE_TESTSUITE\n ATOMICITY_SRCDIR=config/${atomicity_dir}\n ATOMIC_WORD_SRCDIR=config/${atomic_word_dir}\n OS_INC_SRCDIR=config/${os_include_dir}\n+ABI_TWEAKS_SRCDIR=config/${abi_tweaks_dir}\n AC_SUBST(ATOMICITY_SRCDIR)\n AC_SUBST(ATOMIC_WORD_SRCDIR)\n+AC_SUBST(ABI_TWEAKS_SRCDIR)\n AC_SUBST(OS_INC_SRCDIR)\n \n # Determine cross-compile flags and AM_CONDITIONALs."}, {"sha": "d63e58a21a2c3aa3aa4ea6c71f5c94d7eb09e8a8", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -97,8 +97,11 @@ case \"${host_cpu}\" in\n   sparc* | ultrasparc)\n     try_cpu=sparc\n     ;;\n+  arm* | xscale | ep9312)\n+    try_cpu=arm\n+    ;;\n   *)\n-    if test -f ${glibcxx_srcdir}/config/cpu/${host_cpu}/atomicity.h; then\n+    if test -d ${glibcxx_srcdir}/config/cpu/${host_cpu}; then\n       try_cpu=${host_cpu}\n     else\n       try_cpu=generic\n@@ -121,9 +124,19 @@ esac\n # default choices for those if they haven't been explicitly set\n # already.  \n cpu_include_dir=\"cpu/${try_cpu}\"\n-atomicity_dir=$cpu_include_dir\n abi_baseline_pair=${try_cpu}-${host_os}\n \n+if test -f ${glibcxx_srcdir}/config/${cpu_include_dir}/atomicity.h ; then\n+  atomicity_dir=$cpu_include_dir\n+else\n+  atomicity_dir=\"cpu/generic\"\n+fi\n+\n+if test -f ${glibcxx_srcdir}/config/${cpu_include_dir}/cxxabi_tweaks.h ; then\n+  abi_tweaks_dir=$cpu_include_dir\n+else\n+  abi_tweaks_dir=\"cpu/generic\"\n+fi\n \n # Set any OS-dependent bits.\n # Set the os_include_dir."}, {"sha": "5ff38983d235d52ce61b17810da9df5bfbf956f5", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -340,7 +340,8 @@ host_headers = \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \n+\t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \\\n+\t${glibcxx_srcdir}/$(ABI_TWEAKS_SRCDIR)/cxxabi_tweaks.h\n \n # Non-installed host_header files.\n host_headers_noinst = \\"}, {"sha": "8ff8fc747aa544e2188adb5c9bca6871ed11ff08", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -54,6 +54,7 @@ am__depfiles_maybe =\n SOURCES =\n DIST_SOURCES =\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n ALLOCATOR_NAME = @ALLOCATOR_NAME@\n@@ -549,7 +550,8 @@ host_headers = \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \n+\t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \\\n+\t${glibcxx_srcdir}/$(ABI_TWEAKS_SRCDIR)/cxxabi_tweaks.h\n \n \n # Non-installed host_header files."}, {"sha": "b18e09bc483e4da02af24c95d24239e9c296eb38", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -71,6 +71,7 @@ DIST_SOURCES = $(libmath_la_SOURCES)\n ETAGS = etags\n CTAGS = ctags\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n ALLOCATOR_NAME = @ALLOCATOR_NAME@"}, {"sha": "b95b029784346f85019cb5bf818c2d1cd728e17e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -89,6 +89,7 @@ HEADERS = $(glibcxxinstall_HEADERS)\n ETAGS = etags\n CTAGS = ctags\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n ALLOCATOR_NAME = @ALLOCATOR_NAME@"}, {"sha": "f1f74e7fcd9ac1cf1bffdc0650f28e2f990dbf94", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -43,6 +43,7 @@\n #define _CXXABI_H 1\n \n #include <stddef.h>\n+#include <bits/cxxabi_tweaks.h>\n  \n #ifdef __cplusplus\n namespace __cxxabiv1\n@@ -104,14 +105,6 @@ namespace __cxxabiv1\n \t\t    size_t __padding_size, void (*__destructor) (void*),\n \t\t    void (*__dealloc) (void*, size_t));\n \n-#ifdef __ARM_EABI__\n-  // The ARM EABI says this is a 32-bit type.\n-  typedef int __guard;\n-#else\n-  // The ABI requires a 64-bit type.\n-  __extension__ typedef int __guard __attribute__((mode (__DI__)));\n-#endif\n-\n   int \n   __cxa_guard_acquire(__guard*);\n "}, {"sha": "4d76c308f4a1d9153d6200896c29268f49aee4d5", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -38,21 +38,13 @@ namespace __cxxabiv1\n   extern \"C\"\n   int __cxa_guard_acquire (__guard *g) \n   {\n-#ifdef __ARM_EABI__\n-    return !(*g & 1);\n-#else\n-    return !*(char *)(g);\n-#endif\n+    return _GLIBCXX_GUARD_ACQUIRE (g);\n   }\n \n   extern \"C\"\n   void __cxa_guard_release (__guard *g)\n   {\n-#ifdef __ARM_EABI__\n-    *g = 1;\n-#else\n-    *(char *)g = 1;\n-#endif\n+    _GLIBCXX_GUARD_RELEASE (g);\n   }\n \n   extern \"C\""}, {"sha": "7681acc77292d00c4831de974b3fb23f9dfdba92", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -96,8 +96,7 @@ namespace __cxxabiv1\n       {\n \tbase += padding_size;\n \treinterpret_cast <std::size_t *> (base)[-1] = element_count;\n-#ifdef __ARM_EABI__\n-\t// ARM EABI array cookies also contain the element size.\n+#ifdef _GLIBCXX_ELTSIZE_IN_COOKIE\n \treinterpret_cast <std::size_t *> (base)[-2] = element_size;\n #endif\n       }\n@@ -135,8 +134,7 @@ namespace __cxxabiv1\n       {\n \tbase += padding_size;\n \treinterpret_cast<std::size_t *>(base)[-1] = element_count;\n-#ifdef __ARM_EABI__\n-\t// ARM EABI array cookies also contain the element size.\n+#ifdef _GLIBCXX_ELTSIZE_IN_COOKIE\n \treinterpret_cast <std::size_t *> (base)[-2] = element_size;\n #endif\n       }"}, {"sha": "23bdade4f242a271f4b2e98487fc5f215da06d78", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -54,6 +54,7 @@ am__depfiles_maybe =\n SOURCES =\n DIST_SOURCES =\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n ALLOCATOR_NAME = @ALLOCATOR_NAME@"}, {"sha": "43f71b026162b0ebd14f0ad7b83fa8658c40d759", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -82,6 +82,7 @@ ETAGS = etags\n CTAGS = ctags\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n VPATH = $(top_srcdir)/src:$(top_srcdir)\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n ALLOCATOR_NAME = @ALLOCATOR_NAME@"}, {"sha": "5e0a4ca48ae54c13817a56e12c621b25be7717ad", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568430fae5e11fe4496dcc194c9771f6e088bf1/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=1568430fae5e11fe4496dcc194c9771f6e088bf1", "patch": "@@ -83,6 +83,7 @@ RUNTESTDEFAULTFLAGS = --tool $$tool --srcdir $$srcdir\n EXPECT = expect\n RUNTEST = runtest\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n ALLOCATOR_NAME = @ALLOCATOR_NAME@"}]}