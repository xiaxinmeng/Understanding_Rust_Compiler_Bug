{"sha": "ba6aa38e3d6bece9171dfab434d0821690eade53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2YWEzOGUzZDZiZWNlOTE3MWRmYWI0MzRkMDgyMTY5MGVhZGU1Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-27T11:03:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-27T11:03:46Z"}, "message": "(deps_output): Don't generate overly long output lines.\n\nDo not invoke self recursively with spacer == 0; this simplifies the code a\nbit.\n\nFrom-SVN: r9501", "tree": {"sha": "021691bcfb519d069829ad2334cd43931dd8fd6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021691bcfb519d069829ad2334cd43931dd8fd6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6aa38e3d6bece9171dfab434d0821690eade53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6aa38e3d6bece9171dfab434d0821690eade53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6aa38e3d6bece9171dfab434d0821690eade53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6aa38e3d6bece9171dfab434d0821690eade53/comments", "author": null, "committer": null, "parents": [{"sha": "4cb8c14b60e9026068bafe4f4f9c95da525684e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb8c14b60e9026068bafe4f4f9c95da525684e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb8c14b60e9026068bafe4f4f9c95da525684e7"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "a7949872d971c168182f8a58c0761a4ca00c2772", "filename": "gcc/cccp.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6aa38e3d6bece9171dfab434d0821690eade53/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6aa38e3d6bece9171dfab434d0821690eade53/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=ba6aa38e3d6bece9171dfab434d0821690eade53", "patch": "@@ -9890,8 +9890,7 @@ append_include_chain (first, last)\n \f\n /* Add output to `deps_buffer' for the -M switch.\n    STRING points to the text to be output.\n-   SPACER is ':' for targets, ' ' for dependencies, zero for text\n-   to be inserted literally.  */\n+   SPACER is ':' for targets, ' ' for dependencies.  */\n \n static void\n deps_output (string, spacer)\n@@ -9906,25 +9905,30 @@ deps_output (string, spacer)\n #ifndef MAX_OUTPUT_COLUMNS\n #define MAX_OUTPUT_COLUMNS 72\n #endif\n-  if (spacer\n-      && deps_column > 0\n-      && (deps_column + size) > MAX_OUTPUT_COLUMNS)\n-  {\n-    deps_output (\" \\\\\\n  \", 0);\n-    deps_column = 0;\n+  if (MAX_OUTPUT_COLUMNS - 1 /*spacer*/ - 2 /*` \\'*/ < deps_column + size\n+      && 1 < deps_column) {\n+    bcopy (\" \\\\\\n \", &deps_buffer[deps_size], 4);\n+    deps_size += 4;\n+    deps_column = 1;\n+    if (spacer == ' ')\n+      spacer = 0;\n   }\n \n   if (deps_size + size + 8 > deps_allocated_size) {\n     deps_allocated_size = (deps_size + size + 50) * 2;\n     deps_buffer = xrealloc (deps_buffer, deps_allocated_size);\n   }\n-  if (spacer == ' ' && deps_column > 0)\n+  if (spacer == ' ') {\n     deps_buffer[deps_size++] = ' ';\n+    deps_column++;\n+  }\n   bcopy (string, &deps_buffer[deps_size], size);\n   deps_size += size;\n   deps_column += size;\n-  if (spacer == ':')\n+  if (spacer == ':') {\n     deps_buffer[deps_size++] = ':';\n+    deps_column++;\n+  }\n   deps_buffer[deps_size] = 0;\n }\n \f"}]}