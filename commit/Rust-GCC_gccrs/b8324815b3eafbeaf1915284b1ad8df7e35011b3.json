{"sha": "b8324815b3eafbeaf1915284b1ad8df7e35011b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzMjQ4MTViM2VhZmJlYWYxOTE1Mjg0YjFhZDhkZjdlMzUwMTFiMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-23T08:32:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-23T08:32:23Z"}, "message": "tree-data-ref.c (dr_analyze_indices): Add comments, handle REALPART_EXPR and IMAGPART_EXPR similar to ARRAY_REFs.\n\n2011-08-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-data-ref.c (dr_analyze_indices): Add comments, handle\n\tREALPART_EXPR and IMAGPART_EXPR similar to ARRAY_REFs.\n\t(create_data_ref): Also dump access functions for the created\n\tdata-ref.\n\nFrom-SVN: r177983", "tree": {"sha": "fda34241eac31e050c6c452c79708996806eac17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fda34241eac31e050c6c452c79708996806eac17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8324815b3eafbeaf1915284b1ad8df7e35011b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8324815b3eafbeaf1915284b1ad8df7e35011b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8324815b3eafbeaf1915284b1ad8df7e35011b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8324815b3eafbeaf1915284b1ad8df7e35011b3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f0c8ad2f909566b20408d88ecbd0ae6bde8ef2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0c8ad2f909566b20408d88ecbd0ae6bde8ef2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0c8ad2f909566b20408d88ecbd0ae6bde8ef2e"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "3913dbf7bef67bc406f6d9bade375d8d183b8889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8324815b3eafbeaf1915284b1ad8df7e35011b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8324815b3eafbeaf1915284b1ad8df7e35011b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8324815b3eafbeaf1915284b1ad8df7e35011b3", "patch": "@@ -1,3 +1,10 @@\n+2011-08-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-data-ref.c (dr_analyze_indices): Add comments, handle\n+\tREALPART_EXPR and IMAGPART_EXPR similar to ARRAY_REFs.\n+\t(create_data_ref): Also dump access functions for the created\n+\tdata-ref.\n+\n 2011-08-22  Uros Bizjak  <ubizjak@gmail.com>\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n "}, {"sha": "e57489e11d6546079c8c86a39414d3c9415c8c46", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8324815b3eafbeaf1915284b1ad8df7e35011b3/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8324815b3eafbeaf1915284b1ad8df7e35011b3/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=b8324815b3eafbeaf1915284b1ad8df7e35011b3", "patch": "@@ -844,20 +844,35 @@ dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n   if (nest)\n     before_loop = block_before_loop (nest);\n \n+  /* Analyze access functions of dimensions we know to be independent.  */\n   while (handled_component_p (aref))\n     {\n+      /* For ARRAY_REFs the base is the reference with the index replaced\n+\t by zero.  */\n       if (TREE_CODE (aref) == ARRAY_REF)\n \t{\n \t  op = TREE_OPERAND (aref, 1);\n \t  if (nest)\n \t    {\n-  \t      access_fn = analyze_scalar_evolution (loop, op);\n+\t      access_fn = analyze_scalar_evolution (loop, op);\n \t      access_fn = instantiate_scev (before_loop, loop, access_fn);\n \t      VEC_safe_push (tree, heap, access_fns, access_fn);\n \t    }\n-\n \t  TREE_OPERAND (aref, 1) = build_int_cst (TREE_TYPE (op), 0);\n \t}\n+      /* REALPART_EXPR and IMAGPART_EXPR can be handled like accesses\n+\t into a two element array with a constant index.  The base is\n+\t then just the immediate underlying object.  */\n+      else if (TREE_CODE (aref) == REALPART_EXPR)\n+\t{\n+\t  ref = TREE_OPERAND (ref, 0);\n+\t  VEC_safe_push (tree, heap, access_fns, integer_zero_node);\n+\t}\n+      else if (TREE_CODE (aref) == IMAGPART_EXPR)\n+\t{\n+\t  ref = TREE_OPERAND (ref, 0);\n+\t  VEC_safe_push (tree, heap, access_fns, integer_one_node);\n+\t}\n \n       aref = TREE_OPERAND (aref, 0);\n     }\n@@ -956,6 +971,7 @@ create_data_ref (loop_p nest, loop_p loop, tree memref, gimple stmt,\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n+      unsigned i;\n       fprintf (dump_file, \"\\tbase_address: \");\n       print_generic_expr (dump_file, DR_BASE_ADDRESS (dr), TDF_SLIM);\n       fprintf (dump_file, \"\\n\\toffset from base address: \");\n@@ -969,6 +985,11 @@ create_data_ref (loop_p nest, loop_p loop, tree memref, gimple stmt,\n       fprintf (dump_file, \"\\n\\tbase_object: \");\n       print_generic_expr (dump_file, DR_BASE_OBJECT (dr), TDF_SLIM);\n       fprintf (dump_file, \"\\n\");\n+      for (i = 0; i < DR_NUM_DIMENSIONS (dr); i++)\n+\t{\n+\t  fprintf (dump_file, \"\\tAccess function %d: \", i);\n+\t  print_generic_stmt (dump_file, DR_ACCESS_FN (dr, i), TDF_SLIM);\n+\t}\n     }\n \n   return dr;"}]}