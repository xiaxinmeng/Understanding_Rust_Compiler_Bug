{"sha": "43dc123f52541ec779e4b56541203cec16c18d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkYzEyM2Y1MjU0MWVjNzc5ZTRiNTY1NDEyMDNjZWMxNmMxOGQ4MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-08-25T15:47:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-08-25T15:47:43Z"}, "message": "re PR target/8795 ([PPC] Altivec related bugs concerning gcc 3.3 and mainline)\n\n\tPR c++/8795\n\t* tree.h (build_method_type_directly): Declare.\n\t* c-common.c (handle_vector_size_attributes): Handle METHOD_TYPEs.\n\t(vector_size_helper): Likewise.\n\t* tree.c (build_method_type_directly): New function.\n\t(build_method_type): Use it.\n\n\tPR c++/8795\n\t* cp-tree.h (build_cplus_method_type): Remove.\n\t* call.c (standard_conversion): Use build_method_type_directly\n\tinstead of build_cplus_method_type.\n\t* class.c (build_clone): Likewise.\n\t(adjust_clone_args): Likewise.\n\t* decl.c (build_ptrmem_type): Likewise.\n\t(grokdeclarator): Likewise.\n\t(check_function_type): Likewise.\n\t* decl2.c (grok_method_quals): Likewise.\n\t(maybe_retrofit_in_chrg): Likewise.\n\t* pt.c (copy_default_args_to_explicit_spec): Likewise.\n\t(tsubst_function_type): Likewise.\n\t(tsubst): Likewise.\n\t* tree.c (build_cplus_method_type): Remove.\n\t* typeck.c (merge_types): Use build_method_type_directly.\n\n\tPR c++/8795\n\t* g++.dg/ext/altivec-1.C: New test.\n\nFrom-SVN: r70773", "tree": {"sha": "c70318c3104fdbdeeae37e278eef3a2220c321b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c70318c3104fdbdeeae37e278eef3a2220c321b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43dc123f52541ec779e4b56541203cec16c18d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43dc123f52541ec779e4b56541203cec16c18d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43dc123f52541ec779e4b56541203cec16c18d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43dc123f52541ec779e4b56541203cec16c18d80/comments", "author": null, "committer": null, "parents": [{"sha": "a30b6839178e57250791bd821f332151afaffba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30b6839178e57250791bd821f332151afaffba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30b6839178e57250791bd821f332151afaffba5"}], "stats": {"total": 179, "additions": 102, "deletions": 77}, "files": [{"sha": "8563818e949bda60b18db0e76407ccf6bafa9452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -1,3 +1,12 @@\n+2003-08-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8795\n+\t* tree.h (build_method_type_directly): Declare.\n+\t* c-common.c (handle_vector_size_attributes): Handle METHOD_TYPEs.\n+\t(vector_size_helper): Likewise.\n+\t* tree.c (build_method_type_directly): New function.\n+\t(build_method_type): Use it.\n+\n 2003-08-24  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386.i386.c (ix86_return_in_memory): Reformat.  Return true"}, {"sha": "b4151faf7657c5dcf842a1bfcb499042a7ca333a", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -5086,6 +5086,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n   while (POINTER_TYPE_P (type)\n \t || TREE_CODE (type) == FUNCTION_TYPE\n+\t || TREE_CODE (type) == METHOD_TYPE\n \t || TREE_CODE (type) == ARRAY_TYPE)\n     type = TREE_TYPE (type);\n \n@@ -5216,12 +5217,19 @@ vector_size_helper (tree type, tree bottom)\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n       inner = vector_size_helper (TREE_TYPE (type), bottom);\n-      outer = build_array_type (inner, TYPE_VALUES (type));\n+      outer = build_array_type (inner, TYPE_DOMAIN (type));\n     }\n   else if (TREE_CODE (type) == FUNCTION_TYPE)\n     {\n       inner = vector_size_helper (TREE_TYPE (type), bottom);\n-      outer = build_function_type (inner, TYPE_VALUES (type));\n+      outer = build_function_type (inner, TYPE_ARG_TYPES (type));\n+    }\n+  else if (TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      inner = vector_size_helper (TREE_TYPE (type), bottom);\n+      outer = build_method_type_directly (TYPE_METHOD_BASETYPE (type),\n+\t\t\t\t\t  inner, \n+\t\t\t\t\t  TYPE_ARG_TYPES (type));\n     }\n   else\n     return bottom;"}, {"sha": "fc987c82631e711b633bb2d8edfab1a648c22392", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -1,3 +1,22 @@\n+2003-08-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8795\n+\t* cp-tree.h (build_cplus_method_type): Remove.\n+\t* call.c (standard_conversion): Use build_method_type_directly\n+\tinstead of build_cplus_method_type.\n+\t* class.c (build_clone): Likewise.\n+\t(adjust_clone_args): Likewise.\n+\t* decl.c (build_ptrmem_type): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(check_function_type): Likewise.\n+\t* decl2.c (grok_method_quals): Likewise.\n+\t(maybe_retrofit_in_chrg): Likewise.\n+\t* pt.c (copy_default_args_to_explicit_spec): Likewise.\n+\t(tsubst_function_type): Likewise.\n+\t(tsubst): Likewise.\n+\t* tree.c (build_cplus_method_type): Remove.\n+\t* typeck.c (merge_types): Use build_method_type_directly.\n+\n 2003-08-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/3765"}, {"sha": "8440344689ab86d4330146d1f673c9884c49434e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -758,8 +758,9 @@ standard_conversion (tree to, tree from, tree expr)\n \treturn 0;\n \n       from = cp_build_qualified_type (tbase, cp_type_quals (fbase));\n-      from = build_cplus_method_type (from, TREE_TYPE (fromfn),\n-\t\t\t\t      TREE_CHAIN (TYPE_ARG_TYPES (fromfn)));\n+      from = build_method_type_directly (from, \n+\t\t\t\t\t TREE_TYPE (fromfn),\n+\t\t\t\t\t TREE_CHAIN (TYPE_ARG_TYPES (fromfn)));\n       from = build_ptrmemfunc_type (build_pointer_type (from));\n       conv = build_conv (PMEM_CONV, from, conv);\n     }"}, {"sha": "3cf161b1e30109c96fefe0a95235ded2563c8f3f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -3833,9 +3833,9 @@ build_clone (tree fn, tree name)\n        /* If this is subobject constructor or destructor, add the vtt\n \t parameter.  */\n       TREE_TYPE (clone) \n-\t= build_cplus_method_type (basetype,\n-\t\t\t\t   TREE_TYPE (TREE_TYPE (clone)),\n-\t\t\t\t   parmtypes);\n+\t= build_method_type_directly (basetype,\n+\t\t\t\t      TREE_TYPE (TREE_TYPE (clone)),\n+\t\t\t\t      parmtypes);\n       if (exceptions)\n \tTREE_TYPE (clone) = build_exception_variant (TREE_TYPE (clone),\n \t\t\t\t\t\t     exceptions);\n@@ -4012,9 +4012,9 @@ adjust_clone_args (tree decl)\n \t\t\t\t\t   clone_parms);\n \t\t  TREE_TYPE (clone_parms) = TREE_TYPE (orig_clone_parms);\n \t\t}\n-\t      type = build_cplus_method_type (basetype,\n-\t\t\t\t\t      TREE_TYPE (TREE_TYPE (clone)),\n-\t\t\t\t\t      clone_parms);\n+\t      type = build_method_type_directly (basetype,\n+\t\t\t\t\t\t TREE_TYPE (TREE_TYPE (clone)),\n+\t\t\t\t\t\t clone_parms);\n \t      if (exceptions)\n \t\ttype = build_exception_variant (type, exceptions);\n \t      TREE_TYPE (clone) = type;"}, {"sha": "e1ad9df35e775f1abf358b64328e28fba6e5665d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -4170,7 +4170,6 @@ extern tree build_min\t\t\t\t(enum tree_code, tree,\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_cplus_new\t\t\t(tree, tree);\n extern tree get_target_expr\t\t\t(tree);\n-extern tree build_cplus_method_type\t\t(tree, tree, tree);\n extern tree build_cplus_staticfn_type\t\t(tree, tree, tree);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);"}, {"sha": "d89ec9161c65d181c2bf0a6c34c089616f210337", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -9259,9 +9259,9 @@ build_ptrmem_type (tree class_type, tree member_type)\n \t\t    (class_type,\n \t\t     cp_type_quals (TREE_TYPE (TREE_VALUE (arg_types)))));\n       member_type \n-\t= build_cplus_method_type (class_type, \n-\t\t\t\t   TREE_TYPE (member_type),\n-\t\t\t\t   TREE_CHAIN (arg_types));\n+\t= build_method_type_directly (class_type, \n+\t\t\t\t      TREE_TYPE (member_type),\n+\t\t\t\t      TREE_CHAIN (arg_types));\n       return build_ptrmemfunc_type (build_pointer_type (member_type));\n     }\n   else\n@@ -10933,7 +10933,9 @@ grokdeclarator (tree declarator,\n \t\telse if (TREE_CODE (type) == FUNCTION_TYPE)\n \t\t  {\n \t\t    if (current_class_type == NULL_TREE || friendp)\n-\t\t      type = build_cplus_method_type (ctype, TREE_TYPE (type),\n+\t\t      type \n+\t\t\t= build_method_type_directly (ctype, \n+\t\t\t\t\t\t      TREE_TYPE (type),\n \t\t\t\t\t\t      TYPE_ARG_TYPES (type));\n \t\t    else\n \t\t      {\n@@ -10975,8 +10977,9 @@ grokdeclarator (tree declarator,\n \t\t  /* In this case, we will deal with it later.  */\n \t\t  ;\n \t\telse if (TREE_CODE (type) == FUNCTION_TYPE)\n-\t\t  type = build_cplus_method_type (ctype, TREE_TYPE (type),\n-\t\t\t\t\t\t  TYPE_ARG_TYPES (type));\n+\t\t  type = build_method_type_directly (ctype, \n+\t\t\t\t\t\t     TREE_TYPE (type),\n+\t\t\t\t\t\t     TYPE_ARG_TYPES (type));\n \t      }\n \t  }\n \t  break;\n@@ -11412,8 +11415,9 @@ grokdeclarator (tree declarator,\n \t\t      }\n \t\t  }\n \t\telse if (staticp < 2)\n-\t\t  type = build_cplus_method_type (ctype, TREE_TYPE (type),\n-\t\t\t\t\t\t  TYPE_ARG_TYPES (type));\n+\t\t  type = build_method_type_directly (ctype, \n+\t\t\t\t\t\t     TREE_TYPE (type),\n+\t\t\t\t\t\t     TYPE_ARG_TYPES (type));\n \t      }\n \n \t    /* Tell grokfndecl if it needs to set TREE_PUBLIC on the node.  */\n@@ -11649,8 +11653,9 @@ grokdeclarator (tree declarator,\n \t      }\n \t  }\n \telse if (TREE_CODE (type) == FUNCTION_TYPE && staticp < 2)\n-\t  type = build_cplus_method_type (ctype, TREE_TYPE (type),\n-\t\t\t\t\t  TYPE_ARG_TYPES (type));\n+\t  type = build_method_type_directly (ctype, \n+\t\t\t\t\t     TREE_TYPE (type),\n+\t\t\t\t\t     TYPE_ARG_TYPES (type));\n \n \t/* Record presence of `static'.  */\n \tpublicp = (ctype != NULL_TREE\n@@ -13317,9 +13322,9 @@ check_function_type (tree decl, tree current_function_parms)\n \t{\n \t  tree ctype = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fntype)));\n \t  TREE_TYPE (decl)\n-\t    = build_cplus_method_type (ctype,\n-\t\t\t\t       void_type_node,\n-\t\t\t\t       FUNCTION_ARG_CHAIN (decl));\n+\t    = build_method_type_directly (ctype,\n+\t\t\t\t\t  void_type_node,\n+\t\t\t\t\t  FUNCTION_ARG_CHAIN (decl));\n \t}\n       else\n \tTREE_TYPE (decl)"}, {"sha": "d74f2907424eeaa8db7c14ddf188bd1dcab1d6b4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -154,10 +154,10 @@ grok_method_quals (tree ctype, tree function, tree quals)\n \t      ? \"member function\" : \"type\");\n \n   ctype = cp_build_qualified_type (ctype, type_quals);\n-  fntype = build_cplus_method_type (ctype, TREE_TYPE (fntype),\n-\t\t\t\t    (TREE_CODE (fntype) == METHOD_TYPE\n-\t\t\t\t     ? TREE_CHAIN (TYPE_ARG_TYPES (fntype))\n-\t\t\t\t     : TYPE_ARG_TYPES (fntype)));\n+  fntype = build_method_type_directly (ctype, TREE_TYPE (fntype),\n+\t\t\t\t       (TREE_CODE (fntype) == METHOD_TYPE\n+\t\t\t\t\t? TREE_CHAIN (TYPE_ARG_TYPES (fntype))\n+\t\t\t\t\t: TYPE_ARG_TYPES (fntype)));\n   if (raises)\n     fntype = build_exception_variant (fntype, raises);\n \n@@ -309,8 +309,8 @@ maybe_retrofit_in_chrg (tree fn)\n   TREE_CHAIN (DECL_ARGUMENTS (fn)) = parms;\n \n   /* And rebuild the function type.  */\n-  fntype = build_cplus_method_type (basetype, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t\t    arg_types);\n+  fntype = build_method_type_directly (basetype, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t\t\t       arg_types);\n   if (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)))\n     fntype = build_exception_variant (fntype,\n \t\t\t\t      TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)));"}, {"sha": "45bec17520c3b901cf2865ee1d33b36ce10b16ab", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -1382,9 +1382,9 @@ copy_default_args_to_explicit_spec (tree decl)\n \t\t\t  \t         TREE_VALUE (in_charge),\n \t\t\t\t         new_spec_types);\n \n-      new_type = build_cplus_method_type (object_type,\n-\t\t\t\t\t  TREE_TYPE (old_type),\n-\t\t\t\t\t  new_spec_types);\n+      new_type = build_method_type_directly (object_type,\n+\t\t\t\t\t     TREE_TYPE (old_type),\n+\t\t\t\t\t     new_spec_types);\n     }\n   else\n     new_type = build_function_type (TREE_TYPE (old_type),\n@@ -6293,8 +6293,8 @@ tsubst_function_type (tree t,\n \t  return error_mark_node;\n \t}\n       \n-      fntype = build_cplus_method_type (r, return_type, TREE_CHAIN\n-\t\t\t\t\t(arg_types));\n+      fntype = build_method_type_directly (r, return_type, \n+\t\t\t\t\t   TREE_CHAIN (arg_types));\n     }\n   fntype = cp_build_qualified_type_real (fntype, TYPE_QUALS (t), complain);\n   fntype = build_type_attribute_variant (fntype, TYPE_ATTRIBUTES (t));\n@@ -6761,9 +6761,9 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t*/\n \t    tree method_type;\n \n-\t    method_type = build_cplus_method_type (TYPE_MAIN_VARIANT (r),\n-\t\t\t\t\t\t   TREE_TYPE (type),\n-\t\t\t\t\t\t   TYPE_ARG_TYPES (type));\n+\t    method_type = build_method_type_directly (TYPE_MAIN_VARIANT (r),\n+\t\t\t\t\t\t      TREE_TYPE (type),\n+\t\t\t\t\t\t      TYPE_ARG_TYPES (type));\n \t    return build_ptrmemfunc_type (build_pointer_type (method_type));\n \t  }\n \telse"}, {"sha": "532d8b978371ae5efa0f8dc358e90c3049924d06", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -373,43 +373,6 @@ get_target_expr (tree init)\n }\n \n \f\n-/* Construct, lay out and return the type of methods belonging to class\n-   BASETYPE and whose arguments are described by ARGTYPES and whose values\n-   are described by RETTYPE.  If each type exists already, reuse it.  */\n-\n-tree\n-build_cplus_method_type (tree basetype, tree rettype, tree argtypes)\n-{\n-  register tree t;\n-  tree ptype;\n-  int hashcode;\n-\n-  /* Make a node of the sort we want.  */\n-  t = make_node (METHOD_TYPE);\n-\n-  TYPE_METHOD_BASETYPE (t) = TYPE_MAIN_VARIANT (basetype);\n-  TREE_TYPE (t) = rettype;\n-  ptype = build_pointer_type (basetype);\n-\n-  /* The actual arglist for this function includes a \"hidden\" argument\n-     which is \"this\".  Put it into the list of argument types.  */\n-  argtypes = tree_cons (NULL_TREE, ptype, argtypes);\n-  TYPE_ARG_TYPES (t) = argtypes;\n-  TREE_SIDE_EFFECTS (argtypes) = 1;  /* Mark first argtype as \"artificial\".  */\n-\n-  /* If we already have such a type, use the old one and free this one.\n-     Note that it also frees up the above cons cell if found.  */\n-  hashcode = TYPE_HASH (basetype) + TYPE_HASH (rettype) +\n-    type_hash_list (argtypes);\n-\n-  t = type_hash_canon (hashcode, t);\n-\n-  if (!COMPLETE_TYPE_P (t))\n-    layout_type (t);\n-\n-  return t;\n-}\n-\n static tree\n build_cplus_array_type_1 (tree elt_type, tree index_type)\n {"}, {"sha": "65ce8a06c6bd54b9c5edbf45b64551003d6ce0f0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -708,8 +708,8 @@ merge_types (tree t1, tree t2)\n \tt2 = build_function_type (TREE_TYPE (t2),\n \t\t\t\t  TREE_CHAIN (TYPE_ARG_TYPES (t2)));\n \tt3 = merge_types (t1, t2);\n-\tt3 = build_cplus_method_type (basetype, TREE_TYPE (t3),\n-\t\t\t\t      TYPE_ARG_TYPES (t3));\n+\tt3 = build_method_type_directly (basetype, TREE_TYPE (t3),\n+\t\t\t\t\t TYPE_ARG_TYPES (t3));\n \tt1 = build_exception_variant (t3, raises);\n \tbreak;\n       }"}, {"sha": "1a6f848121e18b2bfe3496587ce8d35dbe6145a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -1,3 +1,8 @@\n+2003-08-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8795\n+\t* g++.dg/ext/altivec-1.C: New test.\n+\n 2003-08-24  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/eh/simd-2.C: Add -w for x86."}, {"sha": "b7e3af3000996f8c2ee7fdf35d6518118e50bb68", "filename": "gcc/testsuite/g++.dg/ext/altivec-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-1.C?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target powerpc-*-* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+ \n+int main()\n+{\n+  return 0;\n+}\n+\n+class F32vec4 {\n+public:\n+  vector float val;\n+  vector float operator++(void) { return val;}\n+};"}, {"sha": "6bceb7cc1d40cb560983f2802b5697efe15af504", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43dc123f52541ec779e4b56541203cec16c18d80/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=43dc123f52541ec779e4b56541203cec16c18d80", "patch": "@@ -2107,6 +2107,7 @@ extern tree build_index_2_type (tree, tree);\n extern tree build_array_type (tree, tree);\n extern tree build_function_type (tree, tree);\n extern tree build_function_type_list (tree, ...);\n+extern tree build_method_type_directly (tree, tree, tree);\n extern tree build_method_type (tree, tree);\n extern tree build_offset_type (tree, tree);\n extern tree build_complex_type (tree);"}]}