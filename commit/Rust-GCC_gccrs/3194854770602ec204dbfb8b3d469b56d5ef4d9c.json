{"sha": "3194854770602ec204dbfb8b3d469b56d5ef4d9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5NDg1NDc3MDYwMmVjMjA0ZGJmYjhiM2Q0NjliNTZkNWVmNGQ5Yw==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2000-01-29T18:59:40Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2000-01-29T18:59:40Z"}, "message": "Adjust variable names, comments, help strings to c99.\n\nFrom-SVN: r31689", "tree": {"sha": "e93db4a12bbae12f8654d3ebe3b73a3c32c6088a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93db4a12bbae12f8654d3ebe3b73a3c32c6088a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3194854770602ec204dbfb8b3d469b56d5ef4d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3194854770602ec204dbfb8b3d469b56d5ef4d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3194854770602ec204dbfb8b3d469b56d5ef4d9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3194854770602ec204dbfb8b3d469b56d5ef4d9c/comments", "author": null, "committer": null, "parents": [{"sha": "10b52f46188f1e93b43a435c6d2f589a974555fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b52f46188f1e93b43a435c6d2f589a974555fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b52f46188f1e93b43a435c6d2f589a974555fe"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "1cfb7657a51253ce5c75603708c87d68ad6088e9", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3194854770602ec204dbfb8b3d469b56d5ef4d9c", "patch": "@@ -271,7 +271,7 @@ declare_function_name ()\n   declare_hidden_char_array (\"__FUNCTION__\", name);\n   declare_hidden_char_array (\"__PRETTY_FUNCTION__\", printable_name);\n   /* The ISO C people \"of course\" couldn't use __FUNCTION__ in the\n-     ISO C 9x standard; instead a new variable is invented.  */\n+     ISO C 99 standard; instead a new variable is invented.  */\n   declare_hidden_char_array (\"__func__\", name);\n }\n \n@@ -1775,7 +1775,7 @@ check_format_info (info, params)\n \t  else if (*format_chars == 'Z' || *format_chars == 'z')\n \t    {\n \t      length_char = *format_chars++;\n-\t      if (pedantic && (length_char == 'Z' || !flag_isoc9x))\n+\t      if (pedantic && (length_char == 'Z' || !flag_isoc99))\n \t\twarning (\"ANSI C does not support the `%c' length modifier\",\n \t\t\t length_char);\n \t    }\n@@ -1784,13 +1784,13 @@ check_format_info (info, params)\n \t  if (length_char == 'l' && *format_chars == 'l')\n \t    {\n \t      length_char = 'q', format_chars++;\n-\t      if (pedantic && !flag_isoc9x)\n+\t      if (pedantic && !flag_isoc99)\n \t\twarning (\"ANSI C does not support the `ll' length modifier\");\n \t    }\n \t  else if (length_char == 'h' && *format_chars == 'h')\n \t    {\n \t      length_char = 'H', format_chars++;\n-\t      if (pedantic && !flag_isoc9x)\n+\t      if (pedantic && !flag_isoc99)\n \t\twarning (\"ANSI C does not support the `hh' length modifier\");\n \t    }\n \t  if (*format_chars == 'a' && info->format_type == scanf_format_type)\n@@ -1820,7 +1820,7 @@ check_format_info (info, params)\n       /* The a and A formats are C99 extensions.  */\n       if (pedantic && info->format_type != strftime_format_type\n \t  && (format_char == 'a' || format_char == 'A')\n-\t  && !flag_isoc9x)\n+\t  && !flag_isoc99)\n \twarning (\"ANSI C does not support the `%c' format\", format_char);\n       format_chars++;\n       switch (info->format_type)"}, {"sha": "1d271b0e954e6f248ecb85f5ed06f51e5ad774e1", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=3194854770602ec204dbfb8b3d469b56d5ef4d9c", "patch": "@@ -340,7 +340,7 @@ init_lex ()\n       UNSET_RESERVED_WORD (\"iterator\");\n       UNSET_RESERVED_WORD (\"complex\");\n     }\n-  else if (!flag_isoc9x)\n+  else if (!flag_isoc99)\n     UNSET_RESERVED_WORD (\"restrict\");\n \n   if (flag_no_asm)"}, {"sha": "33dd371d74a728155cb2509756d17959346680a6", "filename": "gcc/c-parse.y", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=3194854770602ec204dbfb8b3d469b56d5ef4d9c", "patch": "@@ -474,7 +474,7 @@ cast_expr:\n \t\t  tree type = $2;\n \t\t  finish_init ();\n \n-\t\t  if (pedantic && ! flag_isoc9x)\n+\t\t  if (pedantic && ! flag_isoc99)\n \t\t    pedwarn (\"ANSI C forbids constructor expressions\");\n \t\t  if (TYPE_NAME (type) != 0)\n \t\t    {\n@@ -1229,8 +1229,8 @@ parm_declarator:\n \t\t  poplevel (0, 0, 0); }  */\n \t| parm_declarator '[' '*' ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, NULL_TREE);\n-\t\t  if (! flag_isoc9x)\n-\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n+\t\t  if (! flag_isoc99)\n+\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 99\");\n \t\t}\n \t| parm_declarator '[' expr ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, $3); }\n@@ -1263,8 +1263,8 @@ notype_declarator:\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| notype_declarator '[' '*' ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, NULL_TREE);\n-\t\t  if (! flag_isoc9x)\n-\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n+\t\t  if (! flag_isoc99)\n+\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 99\");\n \t\t}\n \t| notype_declarator '[' expr ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, $3); }\n@@ -1346,7 +1346,7 @@ maybecomma:\n maybecomma_warn:\n \t  /* empty */\n \t| ','\n-\t\t{ if (pedantic && ! flag_isoc9x)\n+\t\t{ if (pedantic && ! flag_isoc99)\n \t\t    pedwarn (\"comma at end of enumerator list\"); }\n \t;\n "}, {"sha": "67013e3d8ae8bf0e2601f80483abafbb47dc1ae4", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=3194854770602ec204dbfb8b3d469b56d5ef4d9c", "patch": "@@ -403,9 +403,9 @@ extern int warn_main;\n \n extern int flag_traditional;\n \n-/* Nonzero means use the ISO C9x dialect of C.  */\n+/* Nonzero means use the ISO C99 dialect of C.  */\n \n-extern int flag_isoc9x;\n+extern int flag_isoc99;\n \n /* Nonzero means to allow single precision math even if we're generally\n    being traditional. */"}, {"sha": "301122b8a03645bbecb9e5316ed74f597e28317a", "filename": "gcc/cccp.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=3194854770602ec204dbfb8b3d469b56d5ef4d9c", "patch": "@@ -256,9 +256,9 @@ int traditional;\n \n int c89;\n \n-/* Nonzero for the 199x C Standard.  */\n+/* Nonzero for the 1999 C Standard.  */\n \n-int c9x;\n+int c99;\n \n /* Nonzero causes output not to be done,\n    but directives such as #define that have side effects\n@@ -581,7 +581,7 @@ static char rest_extension[] = \"...\";\n #define REST_EXTENSION_LENGTH\t(sizeof (rest_extension) - 1)\n \n /* This is the implicit parameter name when using variable number of\n-   parameters for macros using the ISO C 9x extension.  */\n+   parameters for macros using the ISO C 99 extension.  */\n static char va_args_name[] = \"__VA_ARGS__\";\n #define VA_ARGS_NAME_LENGTH\t(sizeof (va_args_name) - 1)\n \n@@ -1128,8 +1128,8 @@ print_help ()\n   printf (\"  -lang-fortran\t       Assume that the input sources are in Fortran\\n\");\n   printf (\"  -lang-chill               Assume that the input sources are in Chill\\n\");\n   printf (\"  -std=<std name>           Specify the conformance standard; one of:\\n\");\n-  printf (\"                            gnu89, gnu9x, c89, c9x, iso9899:1990,\\n\");\n-  printf (\"                            iso9899:199409, iso9899:199x\\n\");\n+  printf (\"                            gnu89, gnu99, c89, c99, iso9899:1990,\\n\");\n+  printf (\"                            iso9899:199409, iso9899:1999\\n\");\n   printf (\"  -+                        Allow parsing of C++ style features\\n\");\n   printf (\"  -w                        Inhibit warning messages\\n\");\n   printf (\"  -Wtrigraphs               Warn if trigraphs are encountered\\n\");\n@@ -1445,19 +1445,19 @@ main (argc, argv)\n \n       case 'l':\n \tif (! strcmp (argv[i], \"-lang-c\"))\n-\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c99 = 1, objc = 0;\n \telse if (! strcmp (argv[i], \"-lang-c89\"))\n \t  {\n-\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c99 = 0, objc = 0;\n \t    no_trigraphs = 0;\n \t    pend_defs[2*i] = \"__STRICT_ANSI__\";\n \t  }\n \telse if (! strcmp (argv[i], \"-lang-c++\"))\n-\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, c9x = 0, objc = 0;\n+\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, c99 = 0, objc = 0;\n \telse if (! strcmp (argv[i], \"-lang-objc\"))\n-\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 0, objc = 1;\n+\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c99 = 0, objc = 1;\n \telse if (! strcmp (argv[i], \"-lang-objc++\"))\n-\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, c9x = 0, objc = 1;\n+\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, c99 = 0, objc = 1;\n  \telse if (! strcmp (argv[i], \"-lang-asm\"))\n  \t  lang_asm = 1;\n \telse if (! strcmp (argv[i], \"-lang-fortran\"))\n@@ -1473,24 +1473,24 @@ main (argc, argv)\n       case 's':\n \tif (!strcmp (argv[i], \"-std=gnu89\"))\n \t  {\n-\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c99 = 0, objc = 0;\n \t  }\n \telse if (!strcmp (argv[i], \"-std=gnu9x\")\n \t\t || !strcmp (argv[i], \"-std=gnu99\"))\n \t  {\n-\t    cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\t    cplusplus = 0, cplusplus_comments = 1, c89 = 0, c99 = 1, objc = 0;\n \t    pend_defs[2*i+1] = \"__STDC_VERSION__=199901L\";\n \t  }\n \telse if (!strcmp (argv[i], \"-std=iso9899:1990\")\n \t\t || !strcmp (argv[i], \"-std=c89\"))\n \t  {\n-\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c99 = 0, objc = 0;\n \t    no_trigraphs = 0;\n \t    pend_defs[2*i] = \"__STRICT_ANSI__\";\n \t  }\n \telse if (!strcmp (argv[i], \"-std=iso9899:199409\"))\n \t  {\n-\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c99 = 0, objc = 0;\n \t    no_trigraphs = 0;\n \t    pend_defs[2*i] = \"__STRICT_ANSI__\";\n \t    pend_defs[2*i+1] = \"__STDC_VERSION__=199409L\";\n@@ -1500,7 +1500,7 @@ main (argc, argv)\n \t\t || !strcmp (argv[i], \"-std=c9x\")\n \t\t || !strcmp (argv[i], \"-std=c99\"))\n \t  {\n-\t    cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\t    cplusplus = 0, cplusplus_comments = 1, c89 = 0, c99 = 1, objc = 0;\n \t    no_trigraphs = 0;\n \t    pend_defs[2*i] = \"__STRICT_ANSI__\";\n \t    pend_defs[2*i+1] = \"__STDC_VERSION__=199901L\";\n@@ -5845,10 +5845,10 @@ create_definition (buf, limit, op)\n \n       if (!is_idstart[*bp])\n \t{\n-\t  if (c9x && limit - bp > (long) REST_EXTENSION_LENGTH\n+\t  if (c99 && limit - bp > (long) REST_EXTENSION_LENGTH\n \t      && bcmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0)\n \t    {\n-\t      /* This is the ISO C 9x way to write macros with variable\n+\t      /* This is the ISO C 99 way to write macros with variable\n \t\t number of arguments.  */\n \t      rest_args = 1;\n \t      temp->rest_args = 1;\n@@ -5872,7 +5872,7 @@ create_definition (buf, limit, op)\n       }\n       if (bp == temp->name && rest_args == 1)\n \t{\n-\t  /* This is the ISO C 9x style.  */\n+\t  /* This is the ISO C 99 style.  */\n \t  temp->name = (U_CHAR *) va_args_name;\n \t  temp->length = VA_ARGS_NAME_LENGTH;\n \t}\n@@ -5891,7 +5891,7 @@ create_definition (buf, limit, op)\n \tSKIP_WHITE_SPACE (bp);\n \t/* A comma at this point can only be followed by an identifier.  */\n \tif (!is_idstart[*bp]\n-\t    && !(c9x && limit - bp > (long) REST_EXTENSION_LENGTH\n+\t    && !(c99 && limit - bp > (long) REST_EXTENSION_LENGTH\n \t\t&&  bcmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0)) {\n \t  error (\"badly punctuated parameter list in `#define'\");\n \t  goto nope;"}, {"sha": "882f46237f9cc9602b5e41e1ea99fc1c3240e82d", "filename": "gcc/cpplib.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3194854770602ec204dbfb8b3d469b56d5ef4d9c/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=3194854770602ec204dbfb8b3d469b56d5ef4d9c", "patch": "@@ -114,7 +114,7 @@ struct cpp_buffer\n   parse_underflow_t underflow;\n   parse_cleanup_t cleanup;\n   void *data;\n-  \n+\n   /* Value of if_stack at start of this file.\n      Used to prohibit unmatched #endif (etc) in an include file.  */\n   struct if_stack *if_stack;\n@@ -185,7 +185,7 @@ struct cpp_reader\n   /* Hash table of macros and assertions.  See cpphash.c */\n #define HASHSIZE 1403\n   struct hashnode **hashtab;\n-  \n+\n   /* Hash table of other included files.  See cppfiles.c */\n #define ALL_INCLUDE_HASHSIZE 71\n   struct include_hash *all_include_files[ALL_INCLUDE_HASHSIZE];\n@@ -465,9 +465,9 @@ struct cpp_options {\n   /* Nonzero for the 1989 C Standard, including corrigenda and amendments.  */\n   char c89;\n \n-  /* Nonzero for the 199x C Standard, including corrigenda and amendments.  */\n-  char c9x;\n-  \n+  /* Nonzero for the 1999 C Standard, including corrigenda and amendments.  */\n+  char c99;\n+\n   /* Nonzero means give all the error messages the ANSI standard requires.  */\n   char pedantic;\n \n@@ -801,9 +801,8 @@ extern struct include_hash *include_hash PARAMS ((cpp_reader *, const char *, in\n #define INCLUDE_LEN_FUDGE 0\n #endif\n \n-    \n+\n #ifdef __cplusplus\n }\n #endif\n #endif /* __GCC_CPPLIB__ */\n-"}]}