{"sha": "5858fcd99780a24bafc7f3fad958155a667031db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1OGZjZDk5NzgwYTI0YmFmYzdmM2ZhZDk1ODE1NWE2NjcwMzFkYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-12-06T22:05:21Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-12-06T22:05:21Z"}, "message": "re PR middle-end/55597 (internal compiler error: in plus_constant, at explow.c:88)\n\n\tPR target/55597\n\t* config/i386/i386.c (legitimize_tls_address): Zero-extend x to Pmode,\n\tbefore using it as insn or call equivalent.\n\ntestsuite/ChangeLog:\n\n\tPR target/55597\n\t* gcc.target/i386/pr55597.c: New test.\n\nFrom-SVN: r194274", "tree": {"sha": "a0189f2be5348849ecb518ec4dfb1e45a4db0c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0189f2be5348849ecb518ec4dfb1e45a4db0c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5858fcd99780a24bafc7f3fad958155a667031db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5858fcd99780a24bafc7f3fad958155a667031db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5858fcd99780a24bafc7f3fad958155a667031db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5858fcd99780a24bafc7f3fad958155a667031db/comments", "author": null, "committer": null, "parents": [{"sha": "957fee09af67c6ae6095a91d349cc00df137d707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957fee09af67c6ae6095a91d349cc00df137d707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957fee09af67c6ae6095a91d349cc00df137d707"}], "stats": {"total": 109, "additions": 73, "deletions": 36}, "files": [{"sha": "b377cd261c921499441e855f179e98814e680984", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5858fcd99780a24bafc7f3fad958155a667031db", "patch": "@@ -1,3 +1,10 @@\n+2012-12-06  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/55597\n+\t* config/i386/i386.c (legitimize_tls_address): Zero-extend x to Pmode,\n+\tbefore using it as insn or call equivalent.\n+\n 2012-12-06  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* config/rs6000/sysv4.h (TARGET_ASAN_SHADOW_OFFSET): Define.\n@@ -14,14 +21,14 @@\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Set\n \tdefault loop peeling limits.\n-\t\t\n+\n 2012-12-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/55032\n \t* tree.c (build_array_type_1): Re-layout if we found it in the\n \thash table.\n \n-2012-12-06  Jack Howarth <howarth@bromo.med.uc.edu>\n+2012-12-06  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR 55599/sanitizer\n         * config/darwin.h (LINK_COMMAND_SPEC_A): Remove static libasan support.\n@@ -41,8 +48,7 @@\n \n 2012-12-06  Richard Biener  <rguenther@suse.de>\n \n-\t* gimple-fold.c (fold_stmt_1): Remove code handling folding\n-\tstmts away.\n+\t* gimple-fold.c (fold_stmt_1): Remove code handling folding stmts away.\n \n 2012-12-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n@@ -59,7 +65,7 @@\n \t* config/arm/arm.md (\"unspec\"): Move to unspecs.md.\n \t* config/arm/iterators.md (NEON_VRINT): New int iterator.\n \t(nvrint_variant): New int attribute.\n-\t* config/arm/neon.md \n+\t* config/arm/neon.md\n \t(neon_vrint<NEON_VRINT:nvrint_variant><VCVTF:mode>): New pattern.\n \t(\"unspec\"): Move to unspecs.md.\n \t* config/arm/iwmmxt2.md (\"unspec\"): Move to unspecs.md.\n@@ -338,12 +344,10 @@\n \tPR middle-end/55401\n \t* trans-mem.c (get_tm_region_blocks): Exclude uninstrumented\n \tblocks from vector if requested.\n-\t(collect_bb2reg): Pass new argument to\n-\tget_tm_region_blocks.\n+\t(collect_bb2reg): Pass new argument to get_tm_region_blocks.\n \t(get_bb_regions_instrumented): Add INCLUDE_UNINSTRUMENTED_P\n \targument, and pass it to expand_regions.\n-\t(execute_tm_mark): Pass new argument to\n-\tget_bb_regions_instrumented.\n+\t(execute_tm_mark): Pass new argument to get_bb_regions_instrumented.\n \t(execute_tm_edges): Same.\n \n 2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n@@ -396,7 +400,7 @@\n 2012-12-03  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_build_constant): Update prototype.\n-\tCall emit_move_insn\tinstead of printing movi/movn/movz instructions.\n+\tCall emit_move_insn instead of printing movi/movn/movz instructions.\n \tCall gen_insv_immdi instead of printing movk instruction.\n \t(aarch64_add_constant): Update prototype.\n \tGenerate RTL instead of printing add/sub instructions.\n@@ -466,8 +470,9 @@\n \n 2012-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n-\t* stor-layout.c (bit_field_mode_iterator::bit_field_mode_iterator): Deal\n-\twith degenerate cases where the bitsize isn't positive.  Rework comment.\n+\t* stor-layout.c (bit_field_mode_iterator::bit_field_mode_iterator):\n+\tDeal with degenerate cases where the bitsize isn't positive.\n+\tRework comment.\n \n 2012-11-30  David Edelsohn  <dje.gcc@gmail.com>\n \n@@ -504,8 +509,7 @@\n \t(input_profile_summary): Stream in sum_all and histogram.\n \t(merge_profile_summaries): Merge sum_all and histogram, and\n \tchange to use RDIV.\n-\t(input_symtab): Call compute_working_sets after merging\n-\tsummaries.\n+\t(input_symtab): Call compute_working_sets after merging summaries.\n \t* gcov-io.c (gcov_histo_index): Make extern for compiler.\n \t* gcov-io.h (gcov_histo_index): Ditto.\n \t* profile.c (compute_working_sets): Remove static keyword.\n@@ -566,8 +570,7 @@\n \n 2012-11-30  Richard Biener  <rguenther@suse.de>\n \n-\t* tree-ssa-pre.c (get_expr_value_id): Do not allocate value-ids\n-\there.\n+\t* tree-ssa-pre.c (get_expr_value_id): Do not allocate value-ids here.\n \n 2012-11-30  Richard Biener  <rguenther@suse.de>\n \n@@ -627,8 +630,7 @@\n 2012-11-30  Kai Tietz  <ktietz@redhat.com>\n \n \t* config/i386/host-mingw32.c (va_granularity): Make none-const.\n-\t(mingw32_gt_pch_alloc_granularity): Return OS' allocation\n-\tgranularity.\n+\t(mingw32_gt_pch_alloc_granularity): Return OS' allocation granularity.\n \t(mingw32_gt_pch_use_address): Retry mapping of used address\n \tas multiple instances might interfer.\n \n@@ -658,9 +660,8 @@\n 2012-11-29  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/55073\n-\t* arm/neon.md (neon_vtrn<mode>_internal): Split into expand\n-\tand insn patterns.  Re-order insn arguments to tie inputs to\n-\toutputs.\n+\t* config/arm/neon.md (neon_vtrn<mode>_internal): Split into expand\n+\tand insn patterns.  Re-order insn arguments to tie inputs to outputs.\n \t(neon_vzip<mode>_internal): Likewise.\n \t(neon_vuzp<mode>_internal): Likewise.\n \n@@ -711,7 +712,7 @@\n 2012-11-29  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/55171\n-\t* i386.c (get_scratch_register_on_entry): Handle\n+\t* config/i386/i386.c (get_scratch_register_on_entry): Handle\n \tthiscall-convention.\n \t(split_stack_prologue_scratch_regno): Likewise.\n \t(ix86_static_chain): Likewise.\n@@ -770,7 +771,7 @@\n \t* varasm.c (use_blocks_for_decl_p): Apply hook as final condition.\n \t* doc/tm.texi.in (USE_BLOCKS_FOR_DECL_P): New description.\n \t* doc/tm.texi: Regenerated.\n-\t\n+\n 2012-11-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR middle-end/55438\n@@ -790,8 +791,7 @@\n \tPR rtl-optimization/55512\n \t* lra-assigns.c (assign_by_spills): Assigned arbitrary hard regs\n \tto failed reload pseudos instead of changing asm pattern.\n-\t* lra-constraints.c (MAX_CONSTRAINT_ITERATION_NUMBER): Increase\n-\tvalue.\n+\t* lra-constraints.c (MAX_CONSTRAINT_ITERATION_NUMBER): Increase value.\n \n 2012-11-28  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n@@ -815,9 +815,9 @@\n \t* config/epiphany/epiphgany.md (attribute type): Add v2fp.\n \t(attribute fp_mode): Test for v2fp.\n \t(<float_operation:insn_opname>v2sf3_i): Change type to v2fp.\n-\t* config/epiphany/epiphgany-sched.md (fp_arith_nearest, fp_arith_trunc):\n-\tCombine to ..\n-\t(fp_arith): .. this. \n+\t* config/epiphany/epiphgany-sched.md (fp_arith_nearest,\n+\tfp_arith_trunc): Combine to ..\n+\t(fp_arith): .. this.\n \t(v2fp_arith): New insn reservation.\n \n \t* config/epiphany/epiphgany.md (maddsi_combine): Fix output pattern.\n@@ -829,15 +829,17 @@\n 2012-11-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/epiphany/epiphany.h (HARD_REGNO_RENAME_OK): Define.\n-\t* config/epiphany/epiphany-protos.h (epiphany_regno_rename_ok): Declare.\n+\t* config/epiphany/epiphany-protos.h (epiphany_regno_rename_ok):\n+\tDeclare.\n \t* config/epiphany/epiphany.c (epiphany_regno_rename_ok): New function.\n \n \t* config/epiphany/epiphany.md (mov<mode>, *mov<mode>_insn): Check\n \tfor misaligned memory operands.\n \t* config/epiphany/predicates.md (misaligned_operand): New predicate.\n \n \t* config/epiphany/epiphany.opt (-may-round-for-trunc): New option.\n-\t* config/epiphany/epiphany.md (*fix_truncsfsi2_i): Take it into account.\n+\t* config/epiphany/epiphany.md (*fix_truncsfsi2_i): Take it\n+\tinto account.\n \n 2012-11-28  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "8b53f94fe05ce464d21dd437edd037e6f7f948c9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5858fcd99780a24bafc7f3fad958155a667031db", "patch": "@@ -12785,6 +12785,9 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t  tp = get_thread_pointer (Pmode, true);\n \t  dest = force_reg (Pmode, gen_rtx_PLUS (Pmode, tp, dest));\n \n+\t  if (GET_MODE (x) != Pmode)\n+\t    x = gen_rtx_ZERO_EXTEND (Pmode, x);\n+\n \t  set_unique_reg_note (get_last_insn (), REG_EQUAL, x);\n \t}\n       else\n@@ -12793,15 +12796,20 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n \t  if (TARGET_64BIT)\n \t    {\n-\t      rtx rax = gen_rtx_REG (Pmode, AX_REG), insns;\n+\t      rtx rax = gen_rtx_REG (Pmode, AX_REG);\n+\t      rtx insns;\n \n \t      start_sequence ();\n-\t      emit_call_insn (ix86_gen_tls_global_dynamic_64 (rax, x,\n-\t\t\t\t\t\t\t      caddr));\n+\t      emit_call_insn\n+\t\t(ix86_gen_tls_global_dynamic_64 (rax, x, caddr));\n \t      insns = get_insns ();\n \t      end_sequence ();\n \n \t      RTL_CONST_CALL_P (insns) = 1;\n+\n+\t      if (GET_MODE (x) != Pmode)\n+\t\tx = gen_rtx_ZERO_EXTEND (Pmode, x);\n+\n \t      emit_libcall_block (insns, dest, rax, x);\n \t    }\n \t  else\n@@ -12842,11 +12850,12 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n \t  if (TARGET_64BIT)\n \t    {\n-\t      rtx rax = gen_rtx_REG (Pmode, AX_REG), insns, eqv;\n+\t      rtx rax = gen_rtx_REG (Pmode, AX_REG);\n+\t      rtx insns, eqv;\n \n \t      start_sequence ();\n-\t      emit_call_insn (ix86_gen_tls_local_dynamic_base_64 (rax,\n-\t\t\t\t\t\t\t\t  caddr));\n+\t      emit_call_insn\n+\t\t(ix86_gen_tls_local_dynamic_base_64 (rax, caddr));\n \t      insns = get_insns ();\n \t      end_sequence ();\n \n@@ -12871,6 +12880,9 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  dest = force_reg (Pmode, gen_rtx_PLUS (Pmode, dest, tp));\n \n+\t  if (GET_MODE (x) != Pmode)\n+\t    x = gen_rtx_ZERO_EXTEND (Pmode, x);\n+\n \t  set_unique_reg_note (get_last_insn (), REG_EQUAL, x);\n \t}\n       break;"}, {"sha": "8ecda6afe98c847b5a3d378581e8a94d33371653", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5858fcd99780a24bafc7f3fad958155a667031db", "patch": "@@ -1,3 +1,8 @@\n+2012-12-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/55597\n+\t* gcc.target/i386/pr55597.c: New test.\n+\n 2012-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/54207"}, {"sha": "0ed7a3a2eac25f831990a432870f5f2d20d65c20", "filename": "gcc/testsuite/gcc.target/i386/pr55597.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55597.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5858fcd99780a24bafc7f3fad958155a667031db/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55597.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55597.c?ref=5858fcd99780a24bafc7f3fad958155a667031db", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fPIC -mx32 -maddress-mode=long\" } */\n+\n+struct initial_sp\n+{\n+  void *sp;\n+  int mask;\n+};\n+\n+__thread struct initial_sp __morestack_initial_sp;\n+\n+void foo (int *);\n+\n+void __morestack_release_segments (void)\n+{\n+  foo (&__morestack_initial_sp.mask);\n+}"}]}