{"sha": "751d1520c31199d7a67e8c3caaed4e4af90fcb75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUxZDE1MjBjMzExOTlkN2E2N2U4YzNjYWFlZDRlNGFmOTBmY2I3NQ==", "commit": {"author": {"name": "Tomas Bily", "email": "tbily@suse.cz", "date": "2008-05-12T14:20:35Z"}, "committer": {"name": "Tomas Bily", "email": "tomby@gcc.gnu.org", "date": "2008-05-12T14:20:35Z"}, "message": "* utils2.c (known_alignment, contains_save_expr_p)\n        (gnat_mark_addressable): Use CASE_CONVERT.\n\n        * decl.c (annotate_value): Likewise.\n\n        * trans.c (maybe_stabilize_reference): Likewise.\n\n        * utils2.c (build_binary_op): Use CONVERT_EXPR_P.\n\n        * utils.c (rest_of_record_type_compilation): Likewise.\n\n        * trans.c (protect_multiple_eval, Attribute_to_gnu)\n        (protect_multiple_eval): Likewise.\n\nFrom-SVN: r135215", "tree": {"sha": "4f9197dd372e807b35158d95c6870719d2c538c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f9197dd372e807b35158d95c6870719d2c538c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/751d1520c31199d7a67e8c3caaed4e4af90fcb75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751d1520c31199d7a67e8c3caaed4e4af90fcb75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/751d1520c31199d7a67e8c3caaed4e4af90fcb75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751d1520c31199d7a67e8c3caaed4e4af90fcb75/comments", "author": null, "committer": null, "parents": [{"sha": "63a906f02b620920f146512e2c5572b2ae5314f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a906f02b620920f146512e2c5572b2ae5314f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a906f02b620920f146512e2c5572b2ae5314f8"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "6431d93c4a83119084f4612bbef2efbb0b9e68ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=751d1520c31199d7a67e8c3caaed4e4af90fcb75", "patch": "@@ -1,3 +1,14 @@\n+2008-05-12  Tomas Bily  <tbily@suse.cz>\n+\n+        * utils2.c (known_alignment, contains_save_expr_p)\n+        (gnat_mark_addressable): Use CASE_CONVERT.\n+        * decl.c (annotate_value): Likewise.\n+        * trans.c (maybe_stabilize_reference): Likewise.\n+        * utils2.c (build_binary_op): Use CONVERT_EXPR_P.\n+        * utils.c (rest_of_record_type_compilation): Likewise.\n+        * trans.c (protect_multiple_eval, Attribute_to_gnu)\n+        (protect_multiple_eval): Likewise.\n+\n 2008-05-08  Andreas Schwab  <schwab@suse.de>\n \n \t* utils.c (handle_pure_attribute, init_gigi_decls): Rename"}, {"sha": "8565305c2d5ff6c4dd36feedd0675d80796c13bf", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=751d1520c31199d7a67e8c3caaed4e4af90fcb75", "patch": "@@ -6622,7 +6622,7 @@ annotate_value (tree gnu_size)\n       else\n \treturn No_Uint;\n \n-    case NOP_EXPR:  case CONVERT_EXPR:   case NON_LVALUE_EXPR:\n+    CASE_CONVERT:   case NON_LVALUE_EXPR:\n       return annotate_value (TREE_OPERAND (gnu_size, 0));\n \n       /* Now just list the operations we handle.  */"}, {"sha": "122857a9bbd79d5ba9a6c21b86b98694946c23af", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=751d1520c31199d7a67e8c3caaed4e4af90fcb75", "patch": "@@ -916,8 +916,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       if (attribute == Attr_Code_Address)\n \t{\n \t  for (gnu_expr = gnu_result;\n-\t       TREE_CODE (gnu_expr) == NOP_EXPR\n-\t       || TREE_CODE (gnu_expr) == CONVERT_EXPR;\n+\t       CONVERT_EXPR_P (gnu_expr);\n \t       gnu_expr = TREE_OPERAND (gnu_expr, 0))\n \t    TREE_CONSTANT (gnu_expr) = 1;\n \n@@ -931,8 +930,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       else if (TREE_CODE (TREE_TYPE (gnu_prefix)) == FUNCTION_TYPE)\n \t{\n \t  for (gnu_expr = gnu_result;\n-\t       TREE_CODE (gnu_expr) == NOP_EXPR\n-\t       || TREE_CODE (gnu_expr) == CONVERT_EXPR;\n+\t       CONVERT_EXPR_P (gnu_expr);\n \t       gnu_expr = TREE_OPERAND (gnu_expr, 0))\n \t    ;\n \n@@ -6567,7 +6565,7 @@ protect_multiple_eval (tree exp)\n      actually need to protect the address since the data itself can't\n      change in these situations.  */\n   else if (TREE_CODE (exp) == NON_LVALUE_EXPR\n-\t   || TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR\n+\t   || CONVERT_EXPR_P (exp)\n \t   || TREE_CODE (exp) == VIEW_CONVERT_EXPR\n \t   || TREE_CODE (exp) == INDIRECT_REF\n \t   || TREE_CODE (exp) == UNCONSTRAINED_ARRAY_REF)\n@@ -6613,8 +6611,7 @@ maybe_stabilize_reference (tree ref, bool force, bool *success)\n       return ref;\n \n     case ADDR_EXPR:\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n     case VIEW_CONVERT_EXPR:"}, {"sha": "202818db345ca2a43b7ea58ea9a416621cb1c116", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=751d1520c31199d7a67e8c3caaed4e4af90fcb75", "patch": "@@ -1096,8 +1096,7 @@ rest_of_record_type_compilation (tree record_type)\n \n \t      /* Strip off any conversions.  */\n \t      while (TREE_CODE (offset) == NON_LVALUE_EXPR\n-\t\t     || TREE_CODE (offset) == NOP_EXPR\n-\t\t     || TREE_CODE (offset) == CONVERT_EXPR)\n+\t\t     || CONVERT_EXPR_P (offset))\n \t\toffset = TREE_OPERAND (offset, 0);\n \n \t      /* An offset which is a bitwise AND with a negative power of 2\n@@ -3788,7 +3787,7 @@ remove_conversions (tree exp, bool true_address)\n       break;\n \n     case VIEW_CONVERT_EXPR:  case NON_LVALUE_EXPR:\n-    case NOP_EXPR:  case CONVERT_EXPR:\n+    CASE_CONVERT:\n       return remove_conversions (TREE_OPERAND (exp, 0), true_address);\n \n     default:"}, {"sha": "891463ce49ca38dcb092860c29fbcfc60bdc2633", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751d1520c31199d7a67e8c3caaed4e4af90fcb75/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=751d1520c31199d7a67e8c3caaed4e4af90fcb75", "patch": "@@ -156,9 +156,8 @@ known_alignment (tree exp)\n \n   switch (TREE_CODE (exp))\n     {\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n-    case NOP_EXPR:\n     case NON_LVALUE_EXPR:\n       /* Conversions between pointers and integers don't change the alignment\n \t of the underlying object.  */\n@@ -293,7 +292,7 @@ contains_save_expr_p (tree exp)\n \n     case ADDR_EXPR:  case INDIRECT_REF:\n     case COMPONENT_REF:\n-    case NOP_EXPR:  case CONVERT_EXPR: case VIEW_CONVERT_EXPR:\n+    CASE_CONVERT: case VIEW_CONVERT_EXPR:\n       return contains_save_expr_p (TREE_OPERAND (exp, 0));\n \n     case CONSTRUCTOR:\n@@ -659,8 +658,7 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t conversions between array and record types, except for justified\n \t modular types.  But don't do this if the right operand is not\n \t BLKmode (for packed arrays) unless we are not changing the mode.  */\n-      while ((TREE_CODE (left_operand) == CONVERT_EXPR\n-\t      || TREE_CODE (left_operand) == NOP_EXPR\n+      while ((CONVERT_EXPR_P (left_operand)\n \t      || TREE_CODE (left_operand) == VIEW_CONVERT_EXPR)\n \t     && (((INTEGRAL_TYPE_P (left_type)\n \t\t   || POINTER_TYPE_P (left_type))\n@@ -742,8 +740,7 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t      result = TREE_OPERAND (result, 0);\n \t  else if (TREE_CODE (result) == REALPART_EXPR\n \t\t   || TREE_CODE (result) == IMAGPART_EXPR\n-\t\t   || ((TREE_CODE (result) == NOP_EXPR\n-\t\t\t|| TREE_CODE (result) == CONVERT_EXPR)\n+\t\t   || (CONVERT_EXPR_P (result)\n \t\t       && (((TREE_CODE (restype)\n \t\t\t     == TREE_CODE (TREE_TYPE\n \t\t\t\t\t   (TREE_OPERAND (result, 0))))\n@@ -2190,9 +2187,8 @@ gnat_mark_addressable (tree expr_node)\n       case REALPART_EXPR:\n       case IMAGPART_EXPR:\n       case VIEW_CONVERT_EXPR:\n-      case CONVERT_EXPR:\n       case NON_LVALUE_EXPR:\n-      case NOP_EXPR:\n+      CASE_CONVERT:\n \texpr_node = TREE_OPERAND (expr_node, 0);\n \tbreak;\n "}]}