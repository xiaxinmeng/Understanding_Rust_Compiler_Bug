{"sha": "2e5ea57959183bd5bd0356739bb5167417401a31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1ZWE1Nzk1OTE4M2JkNWJkMDM1NjczOWJiNTE2NzQxNzQwMWEzMQ==", "commit": {"author": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2020-01-29T09:19:50Z"}, "committer": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2020-01-29T10:54:56Z"}, "message": "Add OpenACC acc_get_property support for AMD GCN\n\nAdd full support for the OpenACC 2.6 acc_get_property and\nacc_get_property_string functions to the libgomp GCN plugin.\n\nlibgomp/\n\t* plugin-gcn.c (struct agent_info): Add fields \"name\" and\n\t\"vendor_name\" ...\n\t(GOMP_OFFLOAD_init_device): ... and init from here.\n\t(struct hsa_context_info): Add field \"driver_version_s\" ...\n\t(init_hsa_contest): ... and init from here.\n\t(GOMP_OFFLOAD_openacc_get_property): Replace stub with a proper\n\timplementation.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_get_property.c:\n\tEnable test execution for amdgcn and host offloading targets.\n\t* testsuite/libgomp.oacc-fortran/acc_get_property.f90: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_get_property-aux.c\n\t(expect_device_properties): Split function into ...\n\t(expect_device_string_properties): ... this new function ...\n\t(expect_device_memory): ... and this new function.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_get_property-gcn.c:\n\tAdd test.", "tree": {"sha": "f491075db14d24fde5d83ad025913e63456a3c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f491075db14d24fde5d83ad025913e63456a3c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e5ea57959183bd5bd0356739bb5167417401a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5ea57959183bd5bd0356739bb5167417401a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5ea57959183bd5bd0356739bb5167417401a31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5ea57959183bd5bd0356739bb5167417401a31/comments", "author": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57ccb55cdaeabd099618622b6ddee3d03cc4fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57ccb55cdaeabd099618622b6ddee3d03cc4fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57ccb55cdaeabd099618622b6ddee3d03cc4fbf"}], "stats": {"total": 311, "additions": 264, "deletions": 47}, "files": [{"sha": "7316db71a1ccc02f9ac92b11f5777b1481706f50", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2e5ea57959183bd5bd0356739bb5167417401a31", "patch": "@@ -1,3 +1,23 @@\n+\n+2020-01-29  Frederik Harwath  <frederik@codesourcery.com>\n+\n+\t* plugin-gcn.c (struct agent_info): Add fields \"name\" and\n+\t\"vendor_name\" ...\n+\t(GOMP_OFFLOAD_init_device): ... and init from here.\n+\t(struct hsa_context_info): Add field \"driver_version_s\" ...\n+\t(init_hsa_contest): ... and init from here.\n+\t(GOMP_OFFLOAD_openacc_get_property): Replace stub with a proper\n+\timplementation.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_get_property.c:\n+\tEnable test execution for amdgcn and host offloading targets.\n+\t* testsuite/libgomp.oacc-fortran/acc_get_property.f90: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_get_property-aux.c\n+\t(expect_device_properties): Split function into ...\n+\t(expect_device_string_properties): ... this new function ...\n+\t(expect_device_memory): ... and this new function.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_get_property-gcn.c:\n+\tAdd test.\n+\n 2020-01-28  Julian Brown  <julian@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-fortran/deep-copy-2.f90: Remove test from here."}, {"sha": "22676b45efb73ff72efdff9a26ec53e38c0f4ee9", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 63, "deletions": 10, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=2e5ea57959183bd5bd0356739bb5167417401a31", "patch": "@@ -425,7 +425,10 @@ struct agent_info\n \n   /* The instruction set architecture of the device. */\n   gcn_isa device_isa;\n-\n+  /* Name of the agent. */\n+  char name[64];\n+  /* Name of the vendor of the agent. */\n+  char vendor_name[64];\n   /* Command queues of the agent.  */\n   hsa_queue_t *sync_queue;\n   struct goacc_asyncqueue *async_queues, *omp_async_queue;\n@@ -544,6 +547,8 @@ struct hsa_context_info\n   int agent_count;\n   /* Array of agent_info structures describing the individual HSA agents.  */\n   struct agent_info *agents;\n+  /* Driver version string. */\n+  char driver_version_s[30];\n };\n \n /* Format of the on-device heap.\n@@ -1513,6 +1518,25 @@ init_hsa_context (void)\n \tGOMP_PLUGIN_error (\"Failed to list all HSA runtime agents\");\n     }\n \n+  uint16_t minor, major;\n+  status = hsa_fns.hsa_system_get_info_fn (HSA_SYSTEM_INFO_VERSION_MINOR,\n+\t\t\t\t\t   &minor);\n+  if (status != HSA_STATUS_SUCCESS)\n+    GOMP_PLUGIN_error (\"Failed to obtain HSA runtime minor version\");\n+  status = hsa_fns.hsa_system_get_info_fn (HSA_SYSTEM_INFO_VERSION_MAJOR,\n+\t\t\t\t\t   &major);\n+  if (status != HSA_STATUS_SUCCESS)\n+    GOMP_PLUGIN_error (\"Failed to obtain HSA runtime major version\");\n+\n+  size_t len = sizeof hsa_context.driver_version_s;\n+  int printed = snprintf (hsa_context.driver_version_s, len,\n+\t\t\t  \"HSA Runtime %hu.%hu\", (unsigned short int)major,\n+\t\t\t  (unsigned short int)minor);\n+  if (printed >= len)\n+    GCN_WARNING (\"HSA runtime version string was truncated.\"\n+\t\t \"Version %hu.%hu is too long.\", (unsigned short int)major,\n+\t\t (unsigned short int)minor);\n+\n   hsa_context.initialized = true;\n   return true;\n }\n@@ -3410,15 +3434,19 @@ GOMP_OFFLOAD_init_device (int n)\n     return hsa_error (\"Error requesting maximum queue size of the GCN agent\",\n \t\t      status);\n \n-  char buf[64];\n   status = hsa_fns.hsa_agent_get_info_fn (agent->id, HSA_AGENT_INFO_NAME,\n-\t\t\t\t\t  &buf);\n+\t\t\t\t\t  &agent->name);\n   if (status != HSA_STATUS_SUCCESS)\n     return hsa_error (\"Error querying the name of the agent\", status);\n \n-  agent->device_isa = isa_code (buf);\n+  agent->device_isa = isa_code (agent->name);\n   if (agent->device_isa < 0)\n-    return hsa_error (\"Unknown GCN agent architecture.\", HSA_STATUS_ERROR);\n+    return hsa_error (\"Unknown GCN agent architecture\", HSA_STATUS_ERROR);\n+\n+  status = hsa_fns.hsa_agent_get_info_fn (agent->id, HSA_AGENT_INFO_VENDOR_NAME,\n+\t\t\t\t\t  &agent->vendor_name);\n+  if (status != HSA_STATUS_SUCCESS)\n+    return hsa_error (\"Error querying the vendor name of the agent\", status);\n \n   status = hsa_fns.hsa_queue_create_fn (agent->id, queue_size,\n \t\t\t\t\tHSA_QUEUE_TYPE_MULTI,\n@@ -4115,12 +4143,37 @@ GOMP_OFFLOAD_openacc_async_dev2host (int device, void *dst, const void *src,\n union goacc_property_value\n GOMP_OFFLOAD_openacc_get_property (int device, enum goacc_property prop)\n {\n-  /* Stub. Check device and return default value for unsupported properties. */\n-  /* TODO: Implement this function. */\n-  get_agent_info (device);\n+  struct agent_info *agent = get_agent_info (device);\n+\n+  union goacc_property_value propval = { .val = 0 };\n+\n+  switch (prop)\n+    {\n+    case GOACC_PROPERTY_FREE_MEMORY:\n+      /* Not supported. */\n+      break;\n+    case GOACC_PROPERTY_MEMORY:\n+      {\n+\tsize_t size;\n+\thsa_region_t region = agent->data_region;\n+\thsa_status_t status =\n+\t  hsa_fns.hsa_region_get_info_fn (region, HSA_REGION_INFO_SIZE, &size);\n+\tif (status == HSA_STATUS_SUCCESS)\n+\t  propval.val = size;\n+\tbreak;\n+      }\n+    case GOACC_PROPERTY_NAME:\n+      propval.ptr = agent->name;\n+      break;\n+    case GOACC_PROPERTY_VENDOR:\n+      propval.ptr = agent->vendor_name;\n+      break;\n+    case GOACC_PROPERTY_DRIVER:\n+      propval.ptr = hsa_context.driver_version_s;\n+      break;\n+    }\n \n-  union goacc_property_value nullval = { .val = 0 };\n-  return nullval;\n+  return propval;\n }\n \n /* Set up plugin-specific thread-local-data (host-side).  */"}, {"sha": "f43f75b364abef899286712018261e42a376a65a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property-aux.c", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-aux.c?ref=2e5ea57959183bd5bd0356739bb5167417401a31", "patch": "@@ -6,39 +6,20 @@\n #include <stdio.h>\n #include <string.h>\n \n-void expect_device_properties\n-(acc_device_t dev_type, int dev_num,\n- size_t expected_memory, const char* expected_vendor,\n- const char* expected_name, const char* expected_driver)\n-{\n-  const char *vendor = acc_get_property_string (dev_num, dev_type,\n-\t\t\t\t\t\tacc_property_vendor);\n-  if (strcmp (vendor, expected_vendor))\n-    {\n-      fprintf (stderr, \"Expected acc_property_vendor to equal \\\"%s\\\", \"\n-\t       \"but was \\\"%s\\\".\\n\", expected_vendor, vendor);\n-      abort ();\n-    }\n-\n-  size_t total_mem = acc_get_property (dev_num, dev_type,\n-\t\t\t\t       acc_property_memory);\n-  if (total_mem != expected_memory)\n-    {\n-      fprintf (stderr, \"Expected acc_property_memory to equal %zu, \"\n-\t       \"but was %zu.\\n\", expected_memory, total_mem);\n-      abort ();\n-\n-    }\n \n-  size_t free_mem = acc_get_property (dev_num, dev_type,\n-\t\t\t\t   acc_property_free_memory);\n-  if (free_mem > total_mem)\n-    {\n-      fprintf (stderr, \"Expected acc_property_free_memory <= acc_property_memory\"\n-\t       \", but free memory was %zu and total memory was %zu.\\n\",\n-\t       free_mem, total_mem);\n-      abort ();\n-    }\n+void expect_device_string_properties (acc_device_t dev_type, int dev_num,\n+\t\t\t\t      const char* expected_vendor,\n+\t\t\t\t      const char* expected_name,\n+\t\t\t\t      const char* expected_driver)\n+{\n+const char *vendor = acc_get_property_string (dev_num, dev_type,\n+\t\t\t\t\t    acc_property_vendor);\n+if (strcmp (vendor, expected_vendor))\n+{\n+    fprintf (stderr, \"Expected acc_property_vendor to equal \\\"%s\\\", \"\n+\t    \"but was \\\"%s\\\".\\n\", expected_vendor, vendor);\n+    abort ();\n+}\n \n   const char *name = acc_get_property_string (dev_num, dev_type,\n \t\t\t\t\t      acc_property_name);\n@@ -75,6 +56,40 @@ void expect_device_properties\n \t       \"but was %s.\\n\", s);\n       abort ();\n     }\n+}\n+\n+void expect_device_memory (acc_device_t dev_type, int dev_num,\n+\t\t\t   size_t expected_total_memory)\n+{\n+\n+  size_t total_mem = acc_get_property (dev_num, dev_type,\n+\t\t\t\t       acc_property_memory);\n+\n+  if (total_mem != expected_total_memory)\n+    {\n+      fprintf (stderr, \"Expected acc_property_memory to equal %zu, \"\n+\t       \"but was %zu.\\n\", expected_total_memory, total_mem);\n+      abort ();\n+    }\n \n+  size_t free_mem = acc_get_property (dev_num, dev_type,\n+\t\t\t\t      acc_property_free_memory);\n+  if (free_mem > total_mem)\n+    {\n+      fprintf (stderr, \"Expected acc_property_free_memory <= acc_property_memory\"\n+\t       \", but free memory was %zu and total memory was %zu.\\n\",\n+\t       free_mem, total_mem);\n+      abort ();\n+    }\n+}\n \n+void expect_device_properties (acc_device_t dev_type, int dev_num,\n+\t\t\t       size_t expected_total_memory,\n+\t\t\t       const char* expected_vendor,\n+\t\t\t       const char* expected_name,\n+\t\t\t       const char* expected_driver)\n+{\n+  expect_device_string_properties (dev_type, dev_num, expected_vendor,\n+\t\t\t\t   expected_name, expected_driver);\n+  expect_device_memory (dev_type, dev_num, expected_total_memory);\n }"}, {"sha": "059b503bbf66e475f1836d28314f3610b15169d7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property-gcn.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c?ref=2e5ea57959183bd5bd0356739bb5167417401a31", "patch": "@@ -0,0 +1,132 @@\n+/* Test the `acc_get_property' and `acc_get_property_string' library\n+   functions on amdgcn devices by comparing property values with\n+   those obtained through the HSA API. */\n+/* { dg-additional-sources acc_get_property-aux.c } */\n+/* { dg-additional-options \"-ldl\" } */\n+/* { dg-do run { target openacc_amdgcn_accel_selected } } */\n+\n+#include <dlfcn.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <openacc.h>\n+\n+#ifndef __cplusplus\n+typedef int bool;\n+#endif\n+#include <hsa.h>\n+\n+\n+void expect_device_string_properties (acc_device_t dev_type, int dev_num,\n+\t\t\t\t      const char* expected_vendor,\n+\t\t\t\t      const char* expected_name,\n+\t\t\t\t      const char* expected_driver);\n+\n+hsa_status_t (*hsa_agent_get_info_fn) (hsa_agent_t agent,\n+\t\t\t\t       hsa_agent_info_t attribute,\n+\t\t\t\t       void *value);\n+hsa_status_t (*hsa_system_get_info_fn) (hsa_system_info_t attribute,\n+\t\t\t\t\tvoid *value);\n+hsa_status_t (*hsa_iterate_agents_fn)\n+(hsa_status_t (*callback)(hsa_agent_t agent, void *data), void *data);\n+hsa_status_t (*hsa_init_fn) (void);\n+\n+char* support_cpu_devices;\n+\n+void test_setup ()\n+{\n+  char* env_runtime;\n+  char* hsa_runtime_lib;\n+  void *handle;\n+\n+#define DLSYM_FN(function)\t\t\t\t\t\t\\\n+  function##_fn = (typeof(function##_fn))dlsym (handle, #function);\t\\\n+  if (function##_fn == NULL)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (stderr, \"Could not get symbol \" #function \".\\n\");\t\\\n+      abort (); \t\t\t\t\t\t\t\\\n+    }\n+\n+  env_runtime = getenv (\"HSA_RUNTIME_LIB\");\n+  hsa_runtime_lib = env_runtime ? env_runtime : (char*)\"libhsa-runtime64.so\";\n+\n+  handle = dlopen (hsa_runtime_lib, RTLD_LAZY);\n+  if (!handle)\n+    {\n+      fprintf (stderr, \"Could not load %s.\\n\", hsa_runtime_lib);\n+      abort ();\n+    }\n+\n+  DLSYM_FN (hsa_agent_get_info)\n+  DLSYM_FN (hsa_system_get_info)\n+  DLSYM_FN (hsa_iterate_agents)\n+  DLSYM_FN (hsa_init)\n+\n+  hsa_init_fn ();\n+\n+  support_cpu_devices = getenv (\"GCN_SUPPORT_CPU_DEVICES\");\n+}\n+\n+static hsa_status_t check_agent_properties (hsa_agent_t agent, void *dev_num_arg)\n+{\n+\n+  char name[64];\n+  char vendor_name[64];\n+  uint16_t minor;\n+  uint16_t major;\n+  char driver[60];\n+\n+  hsa_status_t status;\n+  hsa_device_type_t device_type;\n+  int* dev_num = (int*)dev_num_arg;\n+\n+#define AGENT_GET_INFO(info_type, val)\t\t\t\t\\\n+  status = hsa_agent_get_info_fn (agent, info_type, &val);\t\\\n+  if (status != HSA_STATUS_SUCCESS)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (stderr, \"Failed to obtain \" #info_type \".\\n\");\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+    }\n+#define SYSTEM_GET_INFO(info_type, val)\t\t\t\t\\\n+  status = hsa_system_get_info_fn (info_type, &val);\t\t\\\n+  if (status != HSA_STATUS_SUCCESS)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (stderr, \"Failed to obtain \" #info_type \".\\n\");\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+    }\n+\n+  AGENT_GET_INFO (HSA_AGENT_INFO_DEVICE, device_type)\n+\n+    /* Skip unsupported device types.  Mimic the GCN plugin's behavior. */\n+    if (!(device_type == HSA_DEVICE_TYPE_GPU\n+\t  || (support_cpu_devices && device_type == HSA_DEVICE_TYPE_CPU)))\n+      return HSA_STATUS_SUCCESS;\n+\n+  AGENT_GET_INFO (HSA_AGENT_INFO_NAME, name)\n+  AGENT_GET_INFO (HSA_AGENT_INFO_VENDOR_NAME, vendor_name)\n+\n+  SYSTEM_GET_INFO (HSA_SYSTEM_INFO_VERSION_MINOR, minor)\n+  SYSTEM_GET_INFO (HSA_SYSTEM_INFO_VERSION_MAJOR, major)\n+\n+  snprintf (driver, sizeof driver, \"HSA Runtime %hu.%hu\",\n+\t    (unsigned short int)major, (unsigned short int)minor);\n+\n+  expect_device_string_properties(acc_device_radeon, *dev_num,\n+\t\t\t\t  vendor_name, name, driver);\n+\n+  (*dev_num)++;\n+\n+  return status;\n+}\n+\n+int main ()\n+{\n+  int dev_num = 0;\n+  test_setup ();\n+\n+  hsa_status_t status =\n+    hsa_iterate_agents_fn (&check_agent_properties, &dev_num);\n+\n+  return status;\n+}"}, {"sha": "1984ad3a28d459cb9b80cab38bca0e09583beb97", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property.c?ref=2e5ea57959183bd5bd0356739bb5167417401a31", "patch": "@@ -3,8 +3,7 @@\n    of all device types mentioned in the OpenACC standard.\n \n    See also acc_get_property.f90. */\n-/* { dg-do run { target { { ! { openacc_host_selected } } && { ! { openacc_amdgcn_accel_selected } } } } } */\n-/* FIXME: This test does not work with the GCN implementation stub yet.  */\n+/* { dg-do run } */\n \n #include <openacc.h>\n #include <stdlib.h>\n@@ -20,7 +19,7 @@ print_device_properties(acc_device_t type)\n   const char *s;\n   size_t v;\n \n-  int dev_count = acc_get_num_devices(type);\n+  int dev_count = acc_get_num_devices (type);\n \n   for (int i = 0; i < dev_count; ++i)\n     {"}, {"sha": "80ae292f41fcdb912c5e67ab9d82eb747a1ef5fa", "filename": "libgomp/testsuite/libgomp.oacc-fortran/acc_get_property.f90", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_get_property.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5ea57959183bd5bd0356739bb5167417401a31/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_get_property.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_get_property.f90?ref=2e5ea57959183bd5bd0356739bb5167417401a31", "patch": "@@ -3,8 +3,6 @@\n ! of all device types mentioned in the OpenACC standard.\n !\n ! See also acc_get_property.c\n-! { dg-do run { target { { ! { openacc_host_selected } } && { ! { openacc_amdgcn_accel_selected } } } } }\n-! FIXME: This test does not work with the GCN implementation stub yet.\n \n program test\n   use openacc"}]}