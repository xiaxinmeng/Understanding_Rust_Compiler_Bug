{"sha": "3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QzZmEzYTE2YzM4ZWJkYmM5MmQ0OTUzODQ5YjE2NTVhOGY4YmMxOQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-07-06T19:55:06Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-07-06T19:55:06Z"}, "message": "tree-ssa-pre.c (reference_node_pool): New pool.\n\n2004-07-06  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-pre.c (reference_node_pool): New pool.\n\t(find_or_generate_expression): Class 'r' is okay too.\n\t(create_value_expr_from): Ditto.\n\t(add_to_sets): LHS should not include vuses.\n\t(eliminate): Ditto.\n\t(compute_avail): Reverse ordering of tests.\n\tValuize INDIRECT_REF as well.\n\nFrom-SVN: r84164", "tree": {"sha": "abfdff55f6c17748177ed9ad6bf0d6ac2a162756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abfdff55f6c17748177ed9ad6bf0d6ac2a162756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60e20b9079b630a17b18d19bffd01097454061de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e20b9079b630a17b18d19bffd01097454061de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e20b9079b630a17b18d19bffd01097454061de"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "5de6388521aaec7e8116c69f68bc2f9d618a24cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19", "patch": "@@ -1,3 +1,13 @@\n+2004-07-06  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\t* tree-ssa-pre.c (reference_node_pool): New pool.\n+\t(find_or_generate_expression): Class 'r' is okay too.\n+\t(create_value_expr_from): Ditto.\n+\t(add_to_sets): LHS should not include vuses.\n+\t(eliminate): Ditto.\n+\t(compute_avail): Reverse ordering of tests.\n+\tValuize INDIRECT_REF as well.\n+\t\n 2004-07-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR rtl-optimization/16380"}, {"sha": "848bd6a3941e30d9aaf5c5901c709ab20eceb8de", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3d3fa3a16c38ebdbc92d4953849b1655a8f8bc19", "patch": "@@ -305,6 +305,7 @@ static alloc_pool bitmap_set_pool;\n static alloc_pool value_set_node_pool;\n static alloc_pool binary_node_pool;\n static alloc_pool unary_node_pool;\n+static alloc_pool reference_node_pool;\n \n /* The phi_translate_table caches phi translations for a given\n    expression and predecessor.  */\n@@ -1294,7 +1295,8 @@ find_or_generate_expression (basic_block block, tree expr, tree stmts)\n     {\n       genop = VALUE_HANDLE_EXPR_SET (expr)->head->expr;\n       if (TREE_CODE_CLASS (TREE_CODE (genop)) != '1'\n-\t  && TREE_CODE_CLASS (TREE_CODE (genop)) != '2')\n+\t  && TREE_CODE_CLASS (TREE_CODE (genop)) != '2'\n+\t  && TREE_CODE_CLASS (TREE_CODE (genop)) != 'r')\n \tabort ();\n       genop = create_expression_by_pieces (block, genop, stmts);\n     }\n@@ -1640,7 +1642,7 @@ add_to_sets (tree var, tree expr, vuse_optype vuses, bitmap_set_t s1,\n      statements that make aliased stores).  In those cases, we are\n      only interested in making VAR available as its own value.  */\n   if (var != expr)\n-    vn_add (var, val, vuses);\n+    vn_add (var, val, NULL);\n \n   bitmap_insert_into_set (s1, var);\n   bitmap_value_insert_into_set (s2, var);\n@@ -1664,12 +1666,15 @@ create_value_expr_from (tree expr, basic_block block, vuse_optype vuses)\n \n #if defined ENABLE_CHECKING\n   if (TREE_CODE_CLASS (code) != '1'\n-      && TREE_CODE_CLASS (code) != '2')\n+      && TREE_CODE_CLASS (code) != '2'\n+      && TREE_CODE_CLASS (code) != 'r')\n     abort ();\n #endif\n \n   if (TREE_CODE_CLASS (code) == '1')\n     vexpr = pool_alloc (unary_node_pool);\n+  else if (TREE_CODE_CLASS (code) == 'r')\n+    vexpr = pool_alloc (reference_node_pool);\n   else\n     vexpr = pool_alloc (binary_node_pool);\n \n@@ -1770,9 +1775,23 @@ compute_avail (basic_block block)\n \t      vuse_optype vuses = STMT_VUSE_OPS (stmt);\n \n \t      STRIP_USELESS_TYPE_CONVERSION (rhs);\n-\n-\t      if (TREE_CODE_CLASS (TREE_CODE (rhs)) == '1'\n-\t\t  || TREE_CODE_CLASS (TREE_CODE (rhs)) == '2')\n+\t      if (TREE_CODE (rhs) == SSA_NAME\n+\t\t  || is_gimple_min_invariant (rhs))\n+\t\t{\n+\t\t  /* Compute a value number for the RHS of the statement\n+\t\t     and add its value to the AVAIL_OUT set for the block.\n+\t\t     Add the LHS to TMP_GEN.  */\n+\t\t  add_to_sets (lhs, rhs, vuses, TMP_GEN (block), \n+\t\t\t       AVAIL_OUT (block));\n+\t\t  \n+\t\t  if (TREE_CODE (rhs) == SSA_NAME\n+\t\t      && !is_undefined_value (rhs))\n+\t\t    value_insert_into_set (EXP_GEN (block), rhs);\n+\t\t  continue;\n+\t\t}\t   \n+\t      else if (TREE_CODE_CLASS (TREE_CODE (rhs)) == '1'\n+\t\t       || TREE_CODE_CLASS (TREE_CODE (rhs)) == '2'\n+\t\t       || TREE_CODE (rhs) == INDIRECT_REF)\n \t\t{\n \t\t  /* For binary, unary, and reference expressions,\n \t\t     create a duplicate expression with the operands\n@@ -1784,20 +1803,6 @@ compute_avail (basic_block block)\n \t\t  value_insert_into_set (EXP_GEN (block), newt);\n \t\t  continue;\n \t\t}\n-\t      else if (TREE_CODE (rhs) == SSA_NAME\n-\t\t       || is_gimple_min_invariant (rhs))\n-\t\t{\n-\t\t  /* Compute a value number for the RHS of the statement\n-\t\t    and add its value to the AVAIL_OUT set for the block.\n-\t\t    Add the LHS to TMP_GEN.  */\n-\t\t  add_to_sets (lhs, rhs, vuses, TMP_GEN (block), \n-\t\t\t       AVAIL_OUT (block));\n-\n-\t\t  if (TREE_CODE (rhs) == SSA_NAME\n-\t\t      && !is_undefined_value (rhs))\n-\t\t    value_insert_into_set (EXP_GEN (block), rhs);\n-\t\t  continue;\n-\t\t}\n \t    }\n \n \t  /* For any other statement that we don't recognize, simply\n@@ -1854,9 +1859,9 @@ eliminate (void)\n \t      tree lhs = TREE_OPERAND (stmt, 0);\n \t      tree *rhs_p = &TREE_OPERAND (stmt, 1);\n \t      tree sprime;\n-\t      vuse_optype vuses = STMT_VUSE_OPS (stmt);\n \n-\t      sprime = bitmap_find_leader (AVAIL_OUT (b), vn_lookup (lhs, vuses));\n+\t      sprime = bitmap_find_leader (AVAIL_OUT (b),\n+\t\t\t\t\t   vn_lookup (lhs, NULL));\n \t      if (sprime \n \t\t  && sprime != lhs\n \t\t  && (TREE_CODE (*rhs_p) != SSA_NAME\n@@ -1911,7 +1916,8 @@ init_pre (void)\n   binary_node_pool = create_alloc_pool (\"Binary tree nodes\", tsize, 30);\n   tsize = tree_size (build1 (NEGATE_EXPR, void_type_node, NULL_TREE));\n   unary_node_pool = create_alloc_pool (\"Unary tree nodes\", tsize, 30);\n-\n+  tsize = tree_size (build (COMPONENT_REF, void_type_node, NULL_TREE, NULL_TREE, NULL_TREE));\n+  reference_node_pool = create_alloc_pool (\"Reference tree nodes\", tsize, 30);\n   FOR_ALL_BB (bb)\n     {\n       EXP_GEN (bb) = set_new (true);\n@@ -1933,6 +1939,7 @@ fini_pre (void)\n   free_alloc_pool (bitmap_set_pool);\n   free_alloc_pool (value_set_node_pool);\n   free_alloc_pool (binary_node_pool);\n+  free_alloc_pool (reference_node_pool);\n   free_alloc_pool (unary_node_pool);\n   htab_delete (phi_translate_table);\n   "}]}