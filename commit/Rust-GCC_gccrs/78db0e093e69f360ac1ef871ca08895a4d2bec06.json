{"sha": "78db0e093e69f360ac1ef871ca08895a4d2bec06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhkYjBlMDkzZTY5ZjM2MGFjMWVmODcxY2EwODg5NWE0ZDJiZWMwNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-13T12:09:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-13T15:19:38Z"}, "message": "add vectype parameter to add_stmt_cost hook\n\nThis adds a vectype parameter to add_stmt_cost which avoids the need\nto pass down a (wrong) stmt_info just to carry this information.\nUseful for invariants which do not have a stmt_info associated.\n\n2020-05-13  Richard Biener  <rguenther@suse.de>\n\n\t* target.def (add_stmt_cost): Add new vectype parameter.\n\t* targhooks.c (default_add_stmt_cost): Adjust.\n\t* targhooks.h (default_add_stmt_cost): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_add_stmt_cost): Take new\n\tvectype parameter.\n\t* config/arm/arm.c (arm_add_stmt_cost): Likewise.\n\t* config/i386/i386.c (ix86_add_stmt_cost): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_add_stmt_cost): Likewise.\n\n\t* tree-vectorizer.h (stmt_info_for_cost::vectype): Add.\n\t(dump_stmt_cost): Add new vectype parameter.\n\t(add_stmt_cost): Likewise.\n\t(record_stmt_cost): Likewise.\n\t(record_stmt_cost): Add overload with old signature.\n\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n\tAdjust.\n\t(vect_get_known_peeling_cost): Likewise.\n\t(vect_estimate_min_profitable_iters): Likewise.\n\t* tree-vectorizer.c (dump_stmt_cost): Add new vectype parameter.\n\t* tree-vect-stmts.c (record_stmt_cost): Likewise.\n\t(vect_prologue_cost_for_slp_op): Remove stmt_vec_info parameter\n\tand pass down correct vectype and NULL stmt_info.\n\t(vect_model_simple_cost): Adjust.\n\t(vect_model_store_cost): Likewise.", "tree": {"sha": "0947d6f76ea1b64662ee13ecf46033c789754221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0947d6f76ea1b64662ee13ecf46033c789754221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78db0e093e69f360ac1ef871ca08895a4d2bec06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78db0e093e69f360ac1ef871ca08895a4d2bec06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78db0e093e69f360ac1ef871ca08895a4d2bec06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78db0e093e69f360ac1ef871ca08895a4d2bec06/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f98e59a7f6663f31b671c44998190079097f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f98e59a7f6663f31b671c44998190079097f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f98e59a7f6663f31b671c44998190079097f97"}], "stats": {"total": 156, "additions": 95, "deletions": 61}, "files": [{"sha": "798b746885ee526c9e7e1cbd07b796342ff92207", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -1,3 +1,30 @@\n+2020-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* target.def (add_stmt_cost): Add new vectype parameter.\n+\t* targhooks.c (default_add_stmt_cost): Adjust.\n+\t* targhooks.h (default_add_stmt_cost): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_add_stmt_cost): Take new\n+\tvectype parameter.\n+\t* config/arm/arm.c (arm_add_stmt_cost): Likewise.\n+\t* config/i386/i386.c (ix86_add_stmt_cost): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_add_stmt_cost): Likewise.\n+\n+\t* tree-vectorizer.h (stmt_info_for_cost::vectype): Add.\n+\t(dump_stmt_cost): Add new vectype parameter.\n+\t(add_stmt_cost): Likewise.\n+\t(record_stmt_cost): Likewise.\n+\t(record_stmt_cost): Add overload with old signature.\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n+\tAdjust.\n+\t(vect_get_known_peeling_cost): Likewise.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t* tree-vectorizer.c (dump_stmt_cost): Add new vectype parameter.\n+\t* tree-vect-stmts.c (record_stmt_cost): Likewise.\n+\t(vect_prologue_cost_for_slp_op): Remove stmt_vec_info parameter\n+\tand pass down correct vectype and NULL stmt_info.\n+\t(vect_model_simple_cost): Adjust.\n+\t(vect_model_store_cost): Likewise.\n+\n 2020-05-13  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (SLP_INSTANCE_GROUP_SIZE): Remove."}, {"sha": "70aa2f752b543cde62041d2e2c1f7870f7f7b65b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -13753,15 +13753,14 @@ aarch64_sve_adjust_stmt_cost (class vec_info *vinfo, vect_cost_for_stmt kind,\n static unsigned\n aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t\t       enum vect_cost_for_stmt kind,\n-\t\t       struct _stmt_vec_info *stmt_info, int misalign,\n-\t\t       enum vect_cost_model_location where)\n+\t\t       struct _stmt_vec_info *stmt_info, tree vectype,\n+\t\t       int misalign, enum vect_cost_model_location where)\n {\n   unsigned *cost = (unsigned *) data;\n   unsigned retval = 0;\n \n   if (flag_vect_cost_model)\n     {\n-      tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n       int stmt_cost =\n \t    aarch64_builtin_vectorization_cost (kind, vectype, misalign);\n "}, {"sha": "56d6be029960582006898a70fdb0b668280ec039", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -309,7 +309,7 @@ static int arm_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n static unsigned arm_add_stmt_cost (vec_info *vinfo, void *data, int count,\n \t\t\t\t   enum vect_cost_for_stmt kind,\n \t\t\t\t   struct _stmt_vec_info *stmt_info,\n-\t\t\t\t   int misalign,\n+\t\t\t\t   tree vectype, int misalign,\n \t\t\t\t   enum vect_cost_model_location where);\n \n static void arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n@@ -12133,15 +12133,14 @@ arm_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n static unsigned\n arm_add_stmt_cost (vec_info *vinfo, void *data, int count,\n \t\t   enum vect_cost_for_stmt kind,\n-\t\t   struct _stmt_vec_info *stmt_info, int misalign,\n-\t\t   enum vect_cost_model_location where)\n+\t\t   struct _stmt_vec_info *stmt_info, tree vectype,\n+\t\t   int misalign, enum vect_cost_model_location where)\n {\n   unsigned *cost = (unsigned *) data;\n   unsigned retval = 0;\n \n   if (flag_vect_cost_model)\n     {\n-      tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n       int stmt_cost = arm_builtin_vectorization_cost (kind, vectype, misalign);\n \n       /* Statements in an inner loop relative to the loop being"}, {"sha": "060e2df62ea0b9ce9735e7c11e2d19ed0d90b90c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -21886,15 +21886,14 @@ ix86_init_cost (class loop *)\n static unsigned\n ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t\t    enum vect_cost_for_stmt kind,\n-\t\t    class _stmt_vec_info *stmt_info, int misalign,\n+\t\t    class _stmt_vec_info *stmt_info, tree vectype,\n+\t\t    int misalign,\n \t\t    enum vect_cost_model_location where)\n {\n   unsigned *cost = (unsigned *) data;\n   unsigned retval = 0;\n   bool scalar_p\n     = (kind == scalar_stmt || kind == scalar_load || kind == scalar_store);\n-\n-  tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n   int stmt_cost = - 1;\n \n   bool fp = false;"}, {"sha": "8435bc15d72ca5452bcea83f1d3c4d01fd4c13b1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -5049,15 +5049,14 @@ adjust_vectorization_cost (enum vect_cost_for_stmt kind,\n static unsigned\n rs6000_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t\t      enum vect_cost_for_stmt kind,\n-\t\t      struct _stmt_vec_info *stmt_info, int misalign,\n-\t\t      enum vect_cost_model_location where)\n+\t\t      struct _stmt_vec_info *stmt_info, tree vectype,\n+\t\t      int misalign, enum vect_cost_model_location where)\n {\n   rs6000_cost_data *cost_data = (rs6000_cost_data*) data;\n   unsigned retval = 0;\n \n   if (flag_vect_cost_model)\n     {\n-      tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n       int stmt_cost = rs6000_builtin_vectorization_cost (kind, vectype,\n \t\t\t\t\t\t\t misalign);\n       stmt_cost += adjust_vectorization_cost (kind, stmt_info);"}, {"sha": "6e7d9dc54a9aecaea5a804cf1bca3eb74f27ea79", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -6094,7 +6094,7 @@ all zeros.  GCC can then try to branch around the instruction instead.\n This hook should initialize target-specific data structures in preparation for modeling the costs of vectorizing a loop or basic block.  The default allocates three unsigned integers for accumulating costs for the prologue, body, and epilogue of the loop or basic block.  If @var{loop_info} is non-NULL, it identifies the loop being vectorized; otherwise a single block is being vectorized.\n @end deftypefn\n \n-@deftypefn {Target Hook} unsigned TARGET_VECTORIZE_ADD_STMT_COST (class vec_info *@var{}, void *@var{data}, int @var{count}, enum vect_cost_for_stmt @var{kind}, class _stmt_vec_info *@var{stmt_info}, int @var{misalign}, enum vect_cost_model_location @var{where})\n+@deftypefn {Target Hook} unsigned TARGET_VECTORIZE_ADD_STMT_COST (class vec_info *@var{}, void *@var{data}, int @var{count}, enum vect_cost_for_stmt @var{kind}, class _stmt_vec_info *@var{stmt_info}, tree @var{vectype}, int @var{misalign}, enum vect_cost_model_location @var{where})\n This hook should update the target-specific @var{data} in response to adding @var{count} copies of the given @var{kind} of statement to a loop or basic block.  The default adds the builtin vectorizer cost for the copies of the statement to the accumulator specified by @var{where}, (the prologue, body, or epilogue) and returns the amount added.  The return value should be viewed as a tentative cost that may later be revised.\n @end deftypefn\n "}, {"sha": "07059a87caf7cc0237d583124b476ee45ea41ed5", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -2031,7 +2031,7 @@ DEFHOOK\n  \"revised.\",\n  unsigned,\n  (class vec_info *, void *data, int count, enum vect_cost_for_stmt kind,\n-  class _stmt_vec_info *stmt_info, int misalign,\n+  class _stmt_vec_info *stmt_info, tree vectype, int misalign,\n   enum vect_cost_model_location where),\n  default_add_stmt_cost)\n "}, {"sha": "0113c7b0ce2359a59709402b6942e9eebb4adfb9", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -1350,13 +1350,12 @@ default_init_cost (class loop *loop_info ATTRIBUTE_UNUSED)\n unsigned\n default_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t\t       enum vect_cost_for_stmt kind,\n-\t\t       class _stmt_vec_info *stmt_info, int misalign,\n+\t\t       class _stmt_vec_info *stmt_info, tree vectype,\n+\t\t       int misalign,\n \t\t       enum vect_cost_model_location where)\n {\n   unsigned *cost = (unsigned *) data;\n   unsigned retval = 0;\n-\n-  tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n   int stmt_cost = targetm.vectorize.builtin_vectorization_cost (kind, vectype,\n \t\t\t\t\t\t\t\tmisalign);\n    /* Statements in an inner loop relative to the loop being"}, {"sha": "b572a36e8cf0147714fd14ec9096198c7d4e1a6d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -120,7 +120,7 @@ extern bool default_empty_mask_is_expensive (unsigned);\n extern void *default_init_cost (class loop *);\n extern unsigned default_add_stmt_cost (class vec_info *, void *, int,\n \t\t\t\t       enum vect_cost_for_stmt,\n-\t\t\t\t       class _stmt_vec_info *, int,\n+\t\t\t\t       class _stmt_vec_info *, tree, int,\n \t\t\t\t       enum vect_cost_model_location);\n extern void default_finish_cost (void *, unsigned *, unsigned *, unsigned *);\n extern void default_destroy_cost_data (void *);"}, {"sha": "f065acc12f502bf21065661b9dbdce9e4c973a06", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -1124,8 +1124,8 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n   FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n \t\t    j, si)\n     (void) add_stmt_cost (loop_vinfo, target_cost_data, si->count,\n-\t\t\t  si->kind, si->stmt_info, si->misalign,\n-\t\t\t  vect_body);\n+\t\t\t  si->kind, si->stmt_info, si->vectype,\n+\t\t\t  si->misalign, vect_body);\n   unsigned dummy, body_cost = 0;\n   finish_cost (target_cost_data, &dummy, &body_cost, &dummy);\n   destroy_cost_data (target_cost_data);\n@@ -3324,9 +3324,9 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n       /* If peeled iterations are known but number of scalar loop\n          iterations are unknown, count a taken branch per peeled loop.  */\n       retval = record_stmt_cost (prologue_cost_vec, 1, cond_branch_taken,\n-\t\t\t\t NULL, 0, vect_prologue);\n+\t\t\t\t NULL, NULL_TREE, 0, vect_prologue);\n       retval += record_stmt_cost (epilogue_cost_vec, 1, cond_branch_taken,\n-\t\t\t\t  NULL, 0, vect_epilogue);\n+\t\t\t\t  NULL, NULL_TREE, 0, vect_epilogue);\n     }\n   else\n     {\n@@ -3407,7 +3407,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       unsigned len = LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo).length ();\n       (void) add_stmt_cost (loop_vinfo, target_cost_data, len, vector_stmt,\n-\t\t\t    NULL, 0, vect_prologue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE,\n \t\t     \"cost model: Adding cost of checks for loop \"\n@@ -3420,12 +3420,12 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       unsigned len = LOOP_VINFO_COMP_ALIAS_DDRS (loop_vinfo).length ();\n       (void) add_stmt_cost (loop_vinfo, target_cost_data, len, vector_stmt,\n-\t\t\t    NULL, 0, vect_prologue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n       len = LOOP_VINFO_CHECK_UNEQUAL_ADDRS (loop_vinfo).length ();\n       if (len)\n \t/* Count LEN - 1 ANDs and LEN comparisons.  */\n \t(void) add_stmt_cost (loop_vinfo, target_cost_data, len * 2 - 1,\n-\t\t\t      scalar_stmt, NULL, 0, vect_prologue);\n+\t\t\t      scalar_stmt, NULL, NULL_TREE, 0, vect_prologue);\n       len = LOOP_VINFO_LOWER_BOUNDS (loop_vinfo).length ();\n       if (len)\n \t{\n@@ -3436,7 +3436,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t    if (!LOOP_VINFO_LOWER_BOUNDS (loop_vinfo)[i].unsigned_p)\n \t      nstmts += 1;\n \t  (void) add_stmt_cost (loop_vinfo, target_cost_data, nstmts,\n-\t\t\t\tscalar_stmt, NULL, 0, vect_prologue);\n+\t\t\t\tscalar_stmt, NULL, NULL_TREE, 0, vect_prologue);\n \t}\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE,\n@@ -3449,7 +3449,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n     {\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       (void) add_stmt_cost (loop_vinfo, target_cost_data, 1, vector_stmt,\n-\t\t\t    NULL, 0, vect_prologue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE,\n \t\t     \"cost model: Adding cost of checks for loop \"\n@@ -3458,7 +3458,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \n   if (LOOP_REQUIRES_VERSIONING (loop_vinfo))\n     (void) add_stmt_cost (loop_vinfo, target_cost_data, 1, cond_branch_taken,\n-\t\t\t  NULL, 0, vect_prologue);\n+\t\t\t  NULL, NULL_TREE, 0, vect_prologue);\n \n   /* Count statements in scalar loop.  Using this as scalar cost for a single\n      iteration for now.\n@@ -3494,8 +3494,8 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t  FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n \t\t\t    j, si)\n \t    (void) add_stmt_cost (loop_vinfo, target_cost_data, si->count,\n-\t\t\t\t  si->kind, si->stmt_info, si->misalign,\n-\t\t\t\t  vect_epilogue);\n+\t\t\t\t  si->kind, si->stmt_info, si->vectype,\n+\t\t\t\t  si->misalign, vect_epilogue);\n \t}\n \n       /* Calculate how many masks we need to generate.  */\n@@ -3521,10 +3521,10 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t probably better not to vectorize.  */\n       (void) add_stmt_cost (loop_vinfo,\n \t\t\t    target_cost_data, num_masks, vector_stmt,\n-\t\t\t    NULL, 0, vect_prologue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n       (void) add_stmt_cost (loop_vinfo,\n \t\t\t    target_cost_data, num_masks - 1, vector_stmt,\n-\t\t\t    NULL, 0, vect_body);\n+\t\t\t    NULL, NULL_TREE, 0, vect_body);\n     }\n   else if (npeel < 0)\n     {\n@@ -3546,26 +3546,28 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n          vector iterations are not known since peeled prologue iterations are\n          not known. Hence guards remain the same.  */\n       (void) add_stmt_cost (loop_vinfo, target_cost_data, 1, cond_branch_taken,\n-\t\t\t    NULL, 0, vect_prologue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n       (void) add_stmt_cost (loop_vinfo,\n \t\t\t    target_cost_data, 1, cond_branch_not_taken,\n-\t\t\t    NULL, 0, vect_prologue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n       (void) add_stmt_cost (loop_vinfo, target_cost_data, 1, cond_branch_taken,\n-\t\t\t    NULL, 0, vect_epilogue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_epilogue);\n       (void) add_stmt_cost (loop_vinfo,\n \t\t\t    target_cost_data, 1, cond_branch_not_taken,\n-\t\t\t    NULL, 0, vect_epilogue);\n+\t\t\t    NULL, NULL_TREE, 0, vect_epilogue);\n       stmt_info_for_cost *si;\n       int j;\n       FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo), j, si)\n \t{\n \t  (void) add_stmt_cost (loop_vinfo, target_cost_data,\n \t\t\t\tsi->count * peel_iters_prologue,\n-\t\t\t\tsi->kind, si->stmt_info, si->misalign,\n+\t\t\t\tsi->kind, si->stmt_info, si->vectype,\n+\t\t\t\tsi->misalign,\n \t\t\t\tvect_prologue);\n \t  (void) add_stmt_cost (loop_vinfo, target_cost_data,\n \t\t\t\tsi->count * peel_iters_epilogue,\n-\t\t\t\tsi->kind, si->stmt_info, si->misalign,\n+\t\t\t\tsi->kind, si->stmt_info, si->vectype,\n+\t\t\t\tsi->misalign,\n \t\t\t\tvect_epilogue);\n \t}\n     }\n@@ -3590,12 +3592,12 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       FOR_EACH_VEC_ELT (prologue_cost_vec, j, si)\n \t(void) add_stmt_cost (loop_vinfo,\n \t\t\t      data, si->count, si->kind, si->stmt_info,\n-\t\t\t      si->misalign, vect_prologue);\n+\t\t\t      si->vectype, si->misalign, vect_prologue);\n \n       FOR_EACH_VEC_ELT (epilogue_cost_vec, j, si)\n \t(void) add_stmt_cost (loop_vinfo,\n \t\t\t      data, si->count, si->kind, si->stmt_info,\n-\t\t\t      si->misalign, vect_epilogue);\n+\t\t\t      si->vectype, si->misalign, vect_epilogue);\n \n       prologue_cost_vec.release ();\n       epilogue_cost_vec.release ();"}, {"sha": "b735c04061f70a1c54c30c26677294b4f5e35ded", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -92,19 +92,19 @@ stmt_in_inner_loop_p (vec_info *vinfo, class _stmt_vec_info *stmt_info)\n unsigned\n record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n \t\t  enum vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n-\t\t  int misalign, enum vect_cost_model_location where)\n+\t\t  tree vectype, int misalign,\n+\t\t  enum vect_cost_model_location where)\n {\n   if ((kind == vector_load || kind == unaligned_load)\n-      && STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n+      && (stmt_info && STMT_VINFO_GATHER_SCATTER_P (stmt_info)))\n     kind = vector_gather_load;\n   if ((kind == vector_store || kind == unaligned_store)\n-      && STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n+      && (stmt_info && STMT_VINFO_GATHER_SCATTER_P (stmt_info)))\n     kind = vector_scatter_store;\n \n-  stmt_info_for_cost si = { count, kind, where, stmt_info, misalign };\n+  stmt_info_for_cost si = { count, kind, where, stmt_info, vectype, misalign };\n   body_cost_vec->safe_push (si);\n \n-  tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n   return (unsigned)\n       (builtin_vectorization_cost (kind, vectype, misalign) * count);\n }\n@@ -790,7 +790,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo, bool *fatal)\n \n static unsigned\n vect_prologue_cost_for_slp_op (vec_info *vinfo,\n-\t\t\t       slp_tree node, stmt_vec_info stmt_info,\n+\t\t\t       slp_tree node,\n \t\t\t       unsigned opno, enum vect_def_type dt,\n \t\t\t       stmt_vector_for_cost *cost_vec)\n {\n@@ -836,14 +836,11 @@ vect_prologue_cost_for_slp_op (vec_info *vinfo,\n       nelt++;\n       if (nelt == nelt_limit)\n \t{\n-\t  /* ???  We need to pass down stmt_info for a vector type\n-\t     even if it points to the wrong stmt.  */\n \t  prologue_cost += record_stmt_cost\n \t      (cost_vec, 1,\n \t       dt == vect_external_def\n-\t       ? (elt ? scalar_to_vec : vec_construct)\n-\t       : vector_load,\n-\t       stmt_info, 0, vect_prologue);\n+\t       ? (elt ? scalar_to_vec : vec_construct) : vector_load,\n+\t       NULL, vectype, 0, vect_prologue);\n \t  nelt = 0;\n \t}\n     }\n@@ -890,7 +887,6 @@ vect_model_simple_cost (vec_info *vinfo,\n \t  if (vect_is_simple_use (op, vinfo, &dt)\n \t      && (dt == vect_constant_def || dt == vect_external_def))\n \t    prologue_cost += vect_prologue_cost_for_slp_op (vinfo, node,\n-\t\t\t\t\t\t\t    stmt_info,\n \t\t\t\t\t\t\t    i, dt, cost_vec);\n \t}\n     }\n@@ -1012,7 +1008,6 @@ vect_model_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n     {\n       if (slp_node)\n \tprologue_cost += vect_prologue_cost_for_slp_op (vinfo, slp_node,\n-\t\t\t\t\t\t\tstmt_info,\n \t\t\t\t\t\t\t1, dt, cost_vec);\n       else\n \tprologue_cost += record_stmt_cost (cost_vec, 1, scalar_to_vec,"}, {"sha": "584f13095ab11fb6568b7e18d30a11b53ae4e052", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -99,7 +99,7 @@ auto_purge_vect_location::~auto_purge_vect_location ()\n \n void\n dump_stmt_cost (FILE *f, void *data, int count, enum vect_cost_for_stmt kind,\n-\t\tstmt_vec_info stmt_info, int misalign, unsigned cost,\n+\t\tstmt_vec_info stmt_info, tree, int misalign, unsigned cost,\n \t\tenum vect_cost_model_location where)\n {\n   fprintf (f, \"%p \", data);"}, {"sha": "9b2cbe6d7156db46a75034902d86a1d92ac5a05c", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db0e093e69f360ac1ef871ca08895a4d2bec06/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=78db0e093e69f360ac1ef871ca08895a4d2bec06", "patch": "@@ -99,6 +99,7 @@ struct stmt_info_for_cost {\n   enum vect_cost_for_stmt kind;\n   enum vect_cost_model_location where;\n   stmt_vec_info stmt_info;\n+  tree vectype;\n   int misalign;\n };\n \n@@ -1355,21 +1356,22 @@ init_cost (class loop *loop_info)\n }\n \n extern void dump_stmt_cost (FILE *, void *, int, enum vect_cost_for_stmt,\n-\t\t\t    stmt_vec_info, int, unsigned,\n+\t\t\t    stmt_vec_info, tree, int, unsigned,\n \t\t\t    enum vect_cost_model_location);\n \n /* Alias targetm.vectorize.add_stmt_cost.  */\n \n static inline unsigned\n add_stmt_cost (vec_info *vinfo, void *data, int count,\n \t       enum vect_cost_for_stmt kind,\n-\t       stmt_vec_info stmt_info, int misalign,\n+\t       stmt_vec_info stmt_info, tree vectype, int misalign,\n \t       enum vect_cost_model_location where)\n {\n   unsigned cost = targetm.vectorize.add_stmt_cost (vinfo, data, count, kind,\n-\t\t\t\t\t\t   stmt_info, misalign, where);\n+\t\t\t\t\t\t   stmt_info, vectype,\n+\t\t\t\t\t\t   misalign, where);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    dump_stmt_cost (dump_file, data, count, kind, stmt_info, misalign,\n+    dump_stmt_cost (dump_file, data, count, kind, stmt_info, vectype, misalign,\n \t\t    cost, where);\n   return cost;\n }\n@@ -1398,7 +1400,7 @@ add_stmt_costs (vec_info *vinfo, void *data, stmt_vector_for_cost *cost_vec)\n   unsigned i;\n   FOR_EACH_VEC_ELT (*cost_vec, i, cost)\n     add_stmt_cost (vinfo, data, cost->count, cost->kind, cost->stmt_info,\n-\t\t   cost->misalign, cost->where);\n+\t\t   cost->vectype, cost->misalign, cost->where);\n }\n \n /*-----------------------------------------------------------------*/\n@@ -1699,9 +1701,22 @@ extern bool supportable_widening_operation (vec_info *,\n extern bool supportable_narrowing_operation (enum tree_code, tree, tree,\n \t\t\t\t\t     enum tree_code *, int *,\n \t\t\t\t\t     vec<tree> *);\n+\n extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n \t\t\t\t  enum vect_cost_for_stmt, stmt_vec_info,\n-\t\t\t\t  int, enum vect_cost_model_location);\n+\t\t\t\t  tree, int, enum vect_cost_model_location);\n+\n+/* Overload of record_stmt_cost with VECTYPE derived from STMT_INFO.  */\n+\n+static inline unsigned\n+record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n+\t\t  enum vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n+\t\t  int misalign, enum vect_cost_model_location where)\n+{\n+  return record_stmt_cost (body_cost_vec, count, kind, stmt_info,\n+\t\t\t   STMT_VINFO_VECTYPE (stmt_info), misalign, where);\n+}\n+\n extern stmt_vec_info vect_finish_replace_stmt (vec_info *,\n \t\t\t\t\t       stmt_vec_info, gimple *);\n extern stmt_vec_info vect_finish_stmt_generation (vec_info *,"}]}