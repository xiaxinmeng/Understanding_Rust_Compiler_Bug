{"sha": "7db774d2f125228cca469f45e3c485fb93dde9f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiNzc0ZDJmMTI1MjI4Y2NhNDY5ZjQ1ZTNjNDg1ZmI5M2RkZTlmMg==", "commit": {"author": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1999-04-12T07:11:20Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1999-04-12T07:11:20Z"}, "message": "1. the file name lists ought to be restricted to \"*.h\" anyway 2. C++ files may be named .../[a-z]++/...\n\n1.  the file name lists ought to be restricted to \"*.h\" anyway\n2.  C++ files may be named .../[a-z]++/... also\n3.  the original egrep pattern was not finding \"__MIPSEL\".\n    I am not enough of a regexp person to know why.\n4.  Adding copyright year and attribution to output\n5.  Add copyright date and attribution\n6.  Clarify a bunch of comments\n7.  Remove dead template text\n8.  Correct the counting of regular expressions\n\nFrom-SVN: r26363", "tree": {"sha": "f1f235dc6f37b7d3a9cae6ef2fcdcc529fe13aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1f235dc6f37b7d3a9cae6ef2fcdcc529fe13aef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7db774d2f125228cca469f45e3c485fb93dde9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db774d2f125228cca469f45e3c485fb93dde9f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db774d2f125228cca469f45e3c485fb93dde9f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db774d2f125228cca469f45e3c485fb93dde9f2/comments", "author": null, "committer": null, "parents": [{"sha": "96043e7e1c32c6d82aab98b95ec36b7628bd6a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96043e7e1c32c6d82aab98b95ec36b7628bd6a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96043e7e1c32c6d82aab98b95ec36b7628bd6a0e"}], "stats": {"total": 118, "additions": 70, "deletions": 48}, "files": [{"sha": "d5d6b6448a74386e321dcf90c095098a6711e26c", "filename": "gcc/fixinc/fixincl.tpl", "status": "modified", "additions": 51, "deletions": 32, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db774d2f125228cca469f45e3c485fb93dde9f2/gcc%2Ffixinc%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db774d2f125228cca469f45e3c485fb93dde9f2/gcc%2Ffixinc%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.tpl?ref=7db774d2f125228cca469f45e3c485fb93dde9f2", "patch": "@@ -7,13 +7,15 @@ x =]\n  * files which are fixed to work correctly with ANSI C and placed in a\n  * directory that GNU C will search.\n  *\n- * This script contains [=_eval fix _count =] fixup scripts.\n+ * This file contains [=_eval fix _count =] fixup descriptions.\n  *\n  * See README-fixinc for more information.\n  *\n+ *  inclhack copyright (c) [=_eval \"date +%Y\" _shell\n+                                =] The Free Software Foundation, Inc.\n+ *\n [=_eval inclhack \"# *  \" _gpl=]\n- *[=\n-\n+ *[=_EVAL \"re_ct=0\" _shell=][=\n \n _FOR fix =]\n  *\n@@ -52,7 +54,9 @@ tSCC* apz[=hackname _cap=]Machs[] = {[=\n   _IF exesel _exist=]\n \n /*\n- *  content selection pattern\n+ *  content selection pattern - do fix if pattern found\n+ *  This is a special pattern that not all egrep commands\n+ *  are capable of coping with.  We use the GNU library, tho :)\n  */[=\n     _FOR exesel =]\n tSCC z[=hackname _cap=]Select[=_eval _index=][] =\n@@ -62,7 +66,7 @@ tSCC z[=hackname _cap=]Select[=_eval _index=][] =\n   _ELIF select _exist=]\n \n /*\n- *  content selection pattern\n+ *  content selection pattern - do fix if pattern found\n  */[=\n     _FOR select =]\n tSCC z[=hackname _cap=]Select[=_eval _index=][] =\n@@ -73,7 +77,7 @@ tSCC z[=hackname _cap=]Select[=_eval _index=][] =\n   _IF bypass _exist=]\n \n /*\n- *  content bypass pattern\n+ *  content bypass pattern - skip fix if pattern found\n  */[=\n     _FOR bypass =]\n tSCC z[=hackname _cap=]Bypass[=_eval _index=][] =\n@@ -84,49 +88,69 @@ tSCC z[=hackname _cap=]Bypass[=_eval _index=][] =\n   _IF test _exist=]\n \n /*\n- *  content test pattern.  A shell will deal with it later.\n+ *  perform the 'test' shell command - do fix on success\n  */[=\n     _FOR test =]\n tSCC z[=hackname _cap=]Test[=_eval _index=][] =\n        [=test _str=];[=\n     /test =][=\n   _ENDIF =][=\n \n-  _IF exesel _exist select _exist bypass _exist test _exist | | |\n+\n+#  Build the array of test descriptions for this fix: =][=\n+\n+  _IF exesel       _exist\n+      select       _exist |\n+      bypass       _exist |\n+      test         _exist |\n =]\n \n #define    [=hackname _up =]_TEST_CT  [=\n     _IF exesel _exist =][=\n-       _eval test _count bypass _count exesel _count + + =][=\n+       _eval exesel       _count\n+      \t     bypass       _count +\n+      \t     test         _count + =][=\n+    _ELSE =][=\n+       _eval select       _count\n+      \t     bypass       _count +\n+      \t     test         _count + =][=\n+    _ENDIF =]\n+#define    [=hackname _up =]_RE_CT    [=\n+    _IF exesel _exist =][=\n+       _eval exesel _count bypass _count\n+             \"#2$ct=`expr %d + %d` ; re_ct=`expr $ct + $re_ct` ; echo $ct\"\n+             _printf _shell =][=\n     _ELSE =][=\n-       _eval test _count bypass _count select _count + + =][=\n+       _eval select _count bypass _count\n+             \"#2$ct=`expr %d + %d` ; re_ct=`expr $ct + $re_ct` ; echo $ct\"\n+             _printf _shell =][=\n     _ENDIF =]\n tTestDesc a[=hackname _cap=]Tests[] = {[=\n \n-    _IF test _exist =][=\n-      _FOR test=]\n-    { TT_TEST,   z[=hackname _cap=]Test[=_eval _index=], 0 /* unused */ },[=\n-      /test =][=\n-    _ENDIF =][=\n+    _FOR test =]\n+  { TT_TEST,   z[=hackname _cap=]Test[=_eval _index=],     0 /* unused */ },[=\n+    /test =][=\n \n-    _IF bypass _exist =][=\n-      _FOR bypass=]\n-    { TT_NEGREP, z[=hackname _cap=]Bypass[=_eval _index=], (regex_t*)NULL },[=\n-      /bypass =][=\n-    _ENDIF =][=\n+    _FOR bypass =]\n+  { TT_NEGREP, z[=hackname _cap=]Bypass[=_eval _index=],   (regex_t*)NULL },[=\n+    /bypass =][=\n \n+    #  IF there is an exesel, then use that (those) selection\n+          expressions, instead of the regular select expressions\n+    =][=\n     _IF exesel _exist =][=\n-      _FOR exesel ,=]\n-    { TT_EGREP,  z[=hackname _cap=]Select[=_eval _index=], (regex_t*)NULL }[=\n+      _FOR exesel =]\n+  { TT_EGREP,  z[=hackname _cap=]Select[=_eval _index=],   (regex_t*)NULL },[=\n       /exesel =][=\n \n-    _ELIF select _exist =][=\n-      _FOR select ,=]\n-    { TT_EGREP,  z[=hackname _cap=]Select[=_eval _index=], (regex_t*)NULL }[=\n+    _ELSE =][=\n+      _FOR select =]\n+  { TT_EGREP,  z[=hackname _cap=]Select[=_eval _index=],   (regex_t*)NULL },[=\n       /select =][=\n     _ENDIF =] };[=\n   _ELSE =]\n #define [=hackname _up=]_TEST_CT  0\n+#define [=hackname _up=]_RE_CT    0\n #define a[=hackname _cap=]Tests   (tTestDesc*)NULL[=\n   _ENDIF =]\n \n@@ -136,12 +160,8 @@ tTestDesc a[=hackname _cap=]Tests[] = {[=\n const char* apz[=hackname _cap=]Patch[] = {[=\n     _IF   sed         _exist =] \"sed\"[=_FOR sed=],\n     \"-e\", [=sed _str=][=/sed=][=\n-    _ELIF replacement _exist =] \"sed\",\n-    \"s@[=select[]=]@[=replacement=]@\"[=\n     _ELIF shell       _exist =] \"sh\", \"-c\",\n     [=shell _str=][=\n-    _ELSE =][=_ERROR hackname _get \"Error:  %s has two fixup specifications\"\n-                 _printf =][=\n     _ENDIF=],\n     (char*)NULL };\n \n@@ -150,10 +170,9 @@ const char* apz[=hackname _cap=]Patch[] = {[=\n  *\n  *  List of all fixes\n  */\n-#define  REGEX_COUNT  [=_eval fix.select _count\n-                              fix.bypass _count + =]\n+#define  REGEX_COUNT  [=_eval \"echo $re_ct\" _shell =]\n #define  FIX_COUNT    [=_eval fix _count =]\n-tFixDesc fixDescList[ [=_eval fix _count =] ] = {[=\n+tFixDesc fixDescList[ FIX_COUNT ] = {[=\n \n \n _FOR fix \",\\n\" =]"}, {"sha": "e38eb7a16eb14e76bd2b96a147269399856e9bbf", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db774d2f125228cca469f45e3c485fb93dde9f2/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db774d2f125228cca469f45e3c485fb93dde9f2/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=7db774d2f125228cca469f45e3c485fb93dde9f2", "patch": "@@ -328,11 +328,13 @@ fix = {\n fix = {\n     hackname = no_double_slash;\n     /*\n-     *  Test that the file-to-fix does not look like a C++ file\n+     *  Test that the file-to-fix does not from a C++ directory\n+     *  Also, only accept double slashes that are not part of URL's\n+     *  and are not the end of a quoted string.\n      */\n-    test     = '-z \"`echo ${file}|egrep \\'(cxx/|\\+\\+$|\\.hh$|\\.H$|\\.hxx$)\\'`\"';\n-    select = '//[^\"*]';\n-    sed    = '/\\/\\/[^\"*]/' \"s|//.*$||g\";\n+    test   = '-z `echo ${file} | egrep \\'(cxx|\\+\\+)/\\' `';\n+    select = '(^|[^:])//[^\"*]';\n+    sed    = '/\\(^|[^:]\\)\\/\\/[^\"*]/' \"s|//.*$||g\";\n };\n \n \n@@ -827,14 +829,12 @@ fix = {\n     exesel = \"^#[ \\t]*(if|elif).*[^a-zA-Z0-9_]\"\n              \"(\"\n                   \"M32\"\n-                 \"|_*(\"\n-                       \"MIPSE[LB]\"\n-                      \"|SYSTYPE_[A-Z0-9]\"\n-                      \"|[Rr][34]000\"\n-                      \"|host_mips\"\n-                      \"|i386\"\n-                      \"|mips\"\n-                    \")($|[^a-zA-Z0-9_])\"\n+                 \"|_*MIPSE[LB]\"\n+                 \"|_*SYSTYPE_[A-Z0-9]\"\n+                 \"|_*[Rr][34]000\"\n+                 \"|_*host_mips\"\n+                 \"|_*i386\"\n+                 \"|_*mips\"\n                  \"|bsd4\"\n                  \"|is68k\"\n                  \"|m[68]8k\""}, {"sha": "b221ee56855a332eb02f896f7bceea757ee8b90a", "filename": "gcc/fixinc/inclhack.tpl", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db774d2f125228cca469f45e3c485fb93dde9f2/gcc%2Ffixinc%2Finclhack.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db774d2f125228cca469f45e3c485fb93dde9f2/gcc%2Ffixinc%2Finclhack.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.tpl?ref=7db774d2f125228cca469f45e3c485fb93dde9f2", "patch": "@@ -15,6 +15,9 @@ sh\n #\n # See README-fixinc for more information.\n #\n+#  fixincludes copyright (c) [=_eval \"date +%Y\" _shell\n+                                =] The Free Software Foundation, Inc.\n+#\n [=_eval fixincludes \"## \" _gpl=]\n #\n # # # # # # # # # # # # # # # # # # # # #\n@@ -334,9 +337,9 @@ while [ $# != 0 ]; do\n   cd ${INPUT}[=\n _IF PROGRAM _env ! =]\n   files=`if $LINKS; then\n-    find ${FIND_BASE}/. \\( -type f -o \\( -type l -exec test ! -d {} \\; \\) \\) -print\n+    find ${FIND_BASE}/. -name '*.h' \\( -type f -o -type l \\) -print\n   else\n-    find ${FIND_BASE}/. -type f -print\n+    find ${FIND_BASE}/. -name '*.h' -type f -print\n   fi | \\\n     sed -e 's;/\\./;/;g' -e 's;//*;/;g' `\n [=\n@@ -347,9 +350,9 @@ _IF PROGRAM _env ! =]\n \n =]\n   required=\"$required `if $LINKS; then\n-    find ${FIND_BASE}/. \\( -type f -o -type l \\) -print\n+    find ${FIND_BASE}/. -name '*.h' \\( -type f -o -type l \\) -print\n   else\n-    find ${FIND_BASE}/. -type f -print\n+    find ${FIND_BASE}/. -name '*.h' -type f -print\n   fi | \\\n     sed -e 's;/\\./;/;g' -e 's;//*;/;g' | \\\n     ${FIXINCL}`\"[="}]}