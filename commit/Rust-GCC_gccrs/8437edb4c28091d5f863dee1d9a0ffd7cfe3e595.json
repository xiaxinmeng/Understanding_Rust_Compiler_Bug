{"sha": "8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzN2VkYjRjMjgwOTFkNWY4NjNkZWUxZDlhMGZmZDdjZmUzZTU5NQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2017-09-08T14:36:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T14:36:54Z"}, "message": "sem_aux.adb, [...] (Get_Called_Entity): New function to return the entity associated with the call.\n\n2017-09-08  Yannick Moy  <moy@adacore.com>\n\n\t* sem_aux.adb, sem_aux.ads (Get_Called_Entity): New function to\n\treturn the entity associated with the call.\n\t* sem_util.adb, sem_util.ads (Check_Function_Writable_Actuals):\n\tReplace the internal Get_Function_Id with the new\n\tSem_Aux.Get_Called_Entity.\n\t(Iterate_Call_Parameters): New\n\tprocedure to iterate on formals and actuals at the same time.\n\t* sem_ch12.adb (Analyze_Subprogram_Instantiation):\n\tSet SPARK_Mode from spec when set, for analysis\n\tof instance. Restore after analysis of instance.\n\t(Instantiate_Subprogram_Body): Set SPARK_Mode from body when\n\tset, for analysis of body instance. Restored automatically at\n\tthe end of the subprogram.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set\n\tCheck_Validity_Of_Parameters to False in GNATprove mode.\n\t* opt.ads (Check_Validity_Of_Parameters): Document switch to\n\tset option.\n\nFrom-SVN: r251900", "tree": {"sha": "122a15be5c7b06e888641abfa05a1c93d0750b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/122a15be5c7b06e888641abfa05a1c93d0750b1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "139e8d2aacb2d4221ca94d8c413acd824820040e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139e8d2aacb2d4221ca94d8c413acd824820040e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139e8d2aacb2d4221ca94d8c413acd824820040e"}], "stats": {"total": 145, "additions": 111, "deletions": 34}, "files": [{"sha": "113cbca5df3fca1e45d91bce65f8780a336db752", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "patch": "@@ -1,3 +1,23 @@\n+2017-09-08  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_aux.adb, sem_aux.ads (Get_Called_Entity): New function to\n+\treturn the entity associated with the call.\n+\t* sem_util.adb, sem_util.ads (Check_Function_Writable_Actuals):\n+\tReplace the internal Get_Function_Id with the new\n+\tSem_Aux.Get_Called_Entity.\n+\t(Iterate_Call_Parameters): New\n+\tprocedure to iterate on formals and actuals at the same time.\n+\t* sem_ch12.adb (Analyze_Subprogram_Instantiation):\n+\tSet SPARK_Mode from spec when set, for analysis\n+\tof instance. Restore after analysis of instance.\n+\t(Instantiate_Subprogram_Body): Set SPARK_Mode from body when\n+\tset, for analysis of body instance. Restored automatically at\n+\tthe end of the subprogram.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set\n+\tCheck_Validity_Of_Parameters to False in GNATprove mode.\n+\t* opt.ads (Check_Validity_Of_Parameters): Document switch to\n+\tset option.\n+\n 2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_util.adb (NCT_Tables_In_Use): Move to library level from..."}, {"sha": "4f60f41e12206a2b6e58daa9ca974052da3ff747", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "patch": "@@ -459,6 +459,32 @@ package body Sem_Aux is\n       end case;\n    end Get_Binary_Nkind;\n \n+   -----------------------\n+   -- Get_Called_Entity --\n+   -----------------------\n+\n+   function Get_Called_Entity (Call : Node_Id) return Entity_Id is\n+      Nam : constant Node_Id := Name (Call);\n+      Id  : Entity_Id;\n+\n+   begin\n+      if Nkind (Nam) = N_Explicit_Dereference then\n+         Id := Etype (Nam);\n+         pragma Assert (Ekind (Id) = E_Subprogram_Type);\n+\n+      elsif Nkind (Nam) = N_Selected_Component then\n+         Id := Entity (Selector_Name (Nam));\n+\n+      elsif Nkind (Nam) = N_Indexed_Component then\n+         Id := Entity (Selector_Name (Prefix (Nam)));\n+\n+      else\n+         Id := Entity (Nam);\n+      end if;\n+\n+      return Id;\n+   end Get_Called_Entity;\n+\n    -------------------\n    -- Get_Low_Bound --\n    -------------------"}, {"sha": "a1e38ee0fd446189282db0558e1d53490a2f366a", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -161,8 +161,11 @@ package Sem_Aux is\n    --  referencing this entity. It is an error to call this function if Ekind\n    --  (Op) /= E_Operator.\n \n+   function Get_Called_Entity (Call : Node_Id) return Entity_Id;\n+   --  Returns the entity associated with the call\n+\n    function Get_Low_Bound (E : Entity_Id) return Node_Id;\n-   --  For an index subtype or string literal subtype, return its low bound\n+   --  For an index subtype or string literal subtype, returns its low bound\n \n    function Get_Unary_Nkind (Op : Entity_Id) return Node_Kind;\n    --  Op must be an entity with an Ekind of E_Operator. This function returns"}, {"sha": "86d2808c1709a650434d69c9572c3d70d083e021", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "patch": "@@ -5445,8 +5445,30 @@ package body Sem_Ch12 is\n             Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n          end if;\n \n+         --  If the context of an instance is not subject to SPARK_Mode \"off\",\n+         --  and the generic spec is subject to an explicit SPARK_Mode pragma,\n+         --  the latter should be the one applicable to the instance.\n+\n+         if not Ignore_SPARK_Mode_Pragmas_In_Instance\n+           and then Saved_SM /= Off\n+           and then Present (SPARK_Pragma (Gen_Unit))\n+         then\n+            Set_SPARK_Mode (Gen_Unit);\n+         end if;\n+\n          Analyze_Instance_And_Renamings;\n \n+         --  Restore SPARK_Mode from the context after analysis of the package\n+         --  declaration, so that the SPARK_Mode on the generic spec does not\n+         --  apply to the pending instance for the instance body.\n+\n+         if not Ignore_SPARK_Mode_Pragmas_In_Instance\n+           and then Saved_SM /= Off\n+           and then Present (SPARK_Pragma (Gen_Unit))\n+         then\n+            Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+         end if;\n+\n          --  If the generic is marked Import (Intrinsic), then so is the\n          --  instance. This indicates that there is no body to instantiate. If\n          --  generic is marked inline, so it the instance, and the anonymous\n@@ -11511,7 +11533,9 @@ package body Sem_Ch12 is\n       Opt.Ada_Version_Pragma   := Body_Info.Version_Pragma;\n       Restore_Warnings (Body_Info.Warnings);\n \n-      --  Install the SPARK mode which applies to the subprogram body\n+      --  Install the SPARK mode which applies to the subprogram body from the\n+      --  instantiation context. This may be refined further if an explicit\n+      --  SPARK_Mode pragma applies to the generic body.\n \n       Install_SPARK_Mode (Body_Info.SPARK_Mode, Body_Info.SPARK_Mode_Pragma);\n \n@@ -11573,6 +11597,17 @@ package body Sem_Ch12 is\n             Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n          end if;\n \n+         --  If the context of an instance is not subject to SPARK_Mode \"off\",\n+         --  and the generic body is subject to an explicit SPARK_Mode pragma,\n+         --  the latter should be the one applicable to the instance.\n+\n+         if not Ignore_SPARK_Mode_Pragmas_In_Instance\n+           and then SPARK_Mode /= Off\n+           and then Present (SPARK_Pragma (Gen_Body_Id))\n+         then\n+            Set_SPARK_Mode (Gen_Body_Id);\n+         end if;\n+\n          Current_Sem_Unit := Body_Info.Current_Sem_Unit;\n          Create_Instantiation_Source\n            (Inst_Node,"}, {"sha": "fcb9453c8189b098f929813d15832629f80cab06", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "patch": "@@ -2122,9 +2122,6 @@ package body Sem_Util is\n       --  second occurrence, the error is reported, and the tree traversal\n       --  is abandoned.\n \n-      function Get_Function_Id (Call : Node_Id) return Entity_Id;\n-      --  Return the entity associated with the function call\n-\n       procedure Preanalyze_Without_Errors (N : Node_Id);\n       --  Preanalyze N without reporting errors. Very dubious, you can't just\n       --  go analyzing things more than once???\n@@ -2212,7 +2209,7 @@ package body Sem_Util is\n                      Formal : Node_Id;\n \n                   begin\n-                     Id := Get_Function_Id (Call);\n+                     Id := Get_Called_Entity (Call);\n \n                      --  In case of previous error, no check is possible\n \n@@ -2358,32 +2355,6 @@ package body Sem_Util is\n          Do_Traversal (N);\n       end Collect_Identifiers;\n \n-      ---------------------\n-      -- Get_Function_Id --\n-      ---------------------\n-\n-      function Get_Function_Id (Call : Node_Id) return Entity_Id is\n-         Nam : constant Node_Id := Name (Call);\n-         Id  : Entity_Id;\n-\n-      begin\n-         if Nkind (Nam) = N_Explicit_Dereference then\n-            Id := Etype (Nam);\n-            pragma Assert (Ekind (Id) = E_Subprogram_Type);\n-\n-         elsif Nkind (Nam) = N_Selected_Component then\n-            Id := Entity (Selector_Name (Nam));\n-\n-         elsif Nkind (Nam) = N_Indexed_Component then\n-            Id := Entity (Selector_Name (Prefix (Nam)));\n-\n-         else\n-            Id := Entity (Nam);\n-         end if;\n-\n-         return Id;\n-      end Get_Function_Id;\n-\n       -------------------------------\n       -- Preanalyze_Without_Errors --\n       -------------------------------\n@@ -2523,7 +2494,7 @@ package body Sem_Util is\n             | N_Subprogram_Call\n          =>\n             declare\n-               Id     : constant Entity_Id := Get_Function_Id (N);\n+               Id     : constant Entity_Id := Get_Called_Entity (N);\n                Formal : Node_Id;\n                Actual : Node_Id;\n \n@@ -16391,6 +16362,22 @@ package body Sem_Util is\n       end if;\n    end Is_Volatile_Object;\n \n+   -----------------------------\n+   -- Iterate_Call_Parameters --\n+   -----------------------------\n+\n+   procedure Iterate_Call_Parameters (Call : Node_Id) is\n+      Formal : Entity_Id := First_Formal (Get_Called_Entity (Call));\n+      Actual : Node_Id   := First_Actual (Call);\n+\n+   begin\n+      while Present (Formal) and then Present (Actual) loop\n+         Handle_Parameter (Formal, Actual);\n+         Formal := Next_Formal (Formal);\n+         Actual := Next_Actual (Actual);\n+      end loop;\n+   end Iterate_Call_Parameters;\n+\n    ---------------------------\n    -- Itype_Has_Declaration --\n    ---------------------------"}, {"sha": "40325bf2a8c7ceb786fea139d2650b862017bba9", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437edb4c28091d5f863dee1d9a0ffd7cfe3e595/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=8437edb4c28091d5f863dee1d9a0ffd7cfe3e595", "patch": "@@ -1943,6 +1943,12 @@ package Sem_Util is\n    --  for something actually declared as volatile, not for an object that gets\n    --  treated as volatile (see Einfo.Treat_As_Volatile).\n \n+   generic\n+      with procedure Handle_Parameter (Formal : Entity_Id; Actual : Node_Id);\n+   procedure Iterate_Call_Parameters (Call : Node_Id);\n+   --  Calls Handle_Parameter for each pair of formal and actual parameters of\n+   --  a function, procedure, or entry call.\n+\n    function Itype_Has_Declaration (Id : Entity_Id) return Boolean;\n    --  Applies to Itypes. True if the Itype is attached to a declaration for\n    --  the type through its Parent field, which may or not be present in the"}]}