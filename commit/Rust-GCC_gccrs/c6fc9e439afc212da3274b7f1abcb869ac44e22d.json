{"sha": "c6fc9e439afc212da3274b7f1abcb869ac44e22d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmYzllNDM5YWZjMjEyZGEzMjc0YjdmMWFiY2I4NjlhYzQ0ZTIyZA==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2012-12-05T11:08:43Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2012-12-05T11:08:43Z"}, "message": "aarch64.c (aarch64_simd_mangle_map_entry): New typedef.\n\ngcc/\n\n2012-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_simd_mangle_map_entry): New\n\ttypedef.\n\t(aarch64_simd_mangle_map): New table.\n\t(aarch64_mangle_type): Locate and return the mangled name for\n\ta given AdvSIMD vector type.\n\ngcc/testsuite/\n\n2012-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* g++.dg/abi/mangle-neon-aarch64.C: New test.\n\nFrom-SVN: r194208", "tree": {"sha": "25846377b521670e3d5e706f7ae63091a4360747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25846377b521670e3d5e706f7ae63091a4360747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6fc9e439afc212da3274b7f1abcb869ac44e22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6fc9e439afc212da3274b7f1abcb869ac44e22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6fc9e439afc212da3274b7f1abcb869ac44e22d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6fc9e439afc212da3274b7f1abcb869ac44e22d/comments", "author": null, "committer": null, "parents": [{"sha": "18a2ad5d461c4ff929c10ce9cfdbc98d1f35d42a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a2ad5d461c4ff929c10ce9cfdbc98d1f35d42a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a2ad5d461c4ff929c10ce9cfdbc98d1f35d42a"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "16bcc2dc04e3f4ff5b03b14ea4a39c99385dbf86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6fc9e439afc212da3274b7f1abcb869ac44e22d", "patch": "@@ -1,3 +1,11 @@\n+2012-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_mangle_map_entry): New\n+\ttypedef.\n+\t(aarch64_simd_mangle_map): New table.\n+\t(aarch64_mangle_type): Locate and return the mangled name for\n+\ta given AdvSIMD vector type.\n+\n 2012-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_mangle_type): New function."}, {"sha": "3fa4375d17dc850a51b4a452d650104e22ab79c5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c6fc9e439afc212da3274b7f1abcb869ac44e22d", "patch": "@@ -5862,6 +5862,50 @@ aarch64_preferred_simd_mode (enum machine_mode mode)\n   return word_mode;\n }\n \n+/* A table to help perform AArch64-specific name mangling for AdvSIMD\n+   vector types in order to conform to the AAPCS64 (see \"Procedure\n+   Call Standard for the ARM 64-bit Architecture\", Appendix A).  To\n+   qualify for emission with the mangled names defined in that document,\n+   a vector type must not only be of the correct mode but also be\n+   composed of AdvSIMD vector element types (e.g.\n+   _builtin_aarch64_simd_qi); these types are registered by\n+   aarch64_init_simd_builtins ().  In other words, vector types defined\n+   in other ways e.g. via vector_size attribute will get default\n+   mangled names.  */\n+typedef struct\n+{\n+  enum machine_mode mode;\n+  const char *element_type_name;\n+  const char *mangled_name;\n+} aarch64_simd_mangle_map_entry;\n+\n+static aarch64_simd_mangle_map_entry aarch64_simd_mangle_map[] = {\n+  /* 64-bit containerized types.  */\n+  { V8QImode,  \"__builtin_aarch64_simd_qi\",     \"10__Int8x8_t\" },\n+  { V8QImode,  \"__builtin_aarch64_simd_uqi\",    \"11__Uint8x8_t\" },\n+  { V4HImode,  \"__builtin_aarch64_simd_hi\",     \"11__Int16x4_t\" },\n+  { V4HImode,  \"__builtin_aarch64_simd_uhi\",    \"12__Uint16x4_t\" },\n+  { V2SImode,  \"__builtin_aarch64_simd_si\",     \"11__Int32x2_t\" },\n+  { V2SImode,  \"__builtin_aarch64_simd_usi\",    \"12__Uint32x2_t\" },\n+  { V2SFmode,  \"__builtin_aarch64_simd_sf\",     \"13__Float32x2_t\" },\n+  { V8QImode,  \"__builtin_aarch64_simd_poly8\",  \"11__Poly8x8_t\" },\n+  { V4HImode,  \"__builtin_aarch64_simd_poly16\", \"12__Poly16x4_t\" },\n+  /* 128-bit containerized types.  */\n+  { V16QImode, \"__builtin_aarch64_simd_qi\",     \"11__Int8x16_t\" },\n+  { V16QImode, \"__builtin_aarch64_simd_uqi\",    \"12__Uint8x16_t\" },\n+  { V8HImode,  \"__builtin_aarch64_simd_hi\",     \"11__Int16x8_t\" },\n+  { V8HImode,  \"__builtin_aarch64_simd_uhi\",    \"12__Uint16x8_t\" },\n+  { V4SImode,  \"__builtin_aarch64_simd_si\",     \"11__Int32x4_t\" },\n+  { V4SImode,  \"__builtin_aarch64_simd_usi\",    \"12__Uint32x4_t\" },\n+  { V2DImode,  \"__builtin_aarch64_simd_di\",     \"11__Int64x2_t\" },\n+  { V2DImode,  \"__builtin_aarch64_simd_udi\",    \"12__Uint64x2_t\" },\n+  { V4SFmode,  \"__builtin_aarch64_simd_sf\",     \"13__Float32x4_t\" },\n+  { V2DFmode,  \"__builtin_aarch64_simd_df\",     \"13__Float64x2_t\" },\n+  { V16QImode, \"__builtin_aarch64_simd_poly8\",  \"12__Poly8x16_t\" },\n+  { V8HImode,  \"__builtin_aarch64_simd_poly16\", \"12__Poly16x8_t\" },\n+  { VOIDmode, NULL, NULL }\n+};\n+\n /* Implement TARGET_MANGLE_TYPE.  */\n \n const char *\n@@ -5872,6 +5916,26 @@ aarch64_mangle_type (const_tree type)\n   if (lang_hooks.types_compatible_p (CONST_CAST_TREE (type), va_list_type))\n     return \"St9__va_list\";\n \n+  /* Check the mode of the vector type, and the name of the vector\n+     element type, against the table.  */\n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    {\n+      aarch64_simd_mangle_map_entry *pos = aarch64_simd_mangle_map;\n+\n+      while (pos->mode != VOIDmode)\n+\t{\n+\t  tree elt_type = TREE_TYPE (type);\n+\n+\t  if (pos->mode == TYPE_MODE (type)\n+\t      && TREE_CODE (TYPE_NAME (elt_type)) == TYPE_DECL\n+\t      && !strcmp (IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (elt_type))),\n+\t\t\t  pos->element_type_name))\n+\t    return pos->mangled_name;\n+\n+\t  pos++;\n+\t}\n+    }\n+\n   /* Use the default mangling.  */\n   return NULL;\n }"}, {"sha": "65c2ae327827f25c283d4c98ddaf86972c91cb22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6fc9e439afc212da3274b7f1abcb869ac44e22d", "patch": "@@ -1,3 +1,7 @@\n+2012-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* g++.dg/abi/mangle-neon-aarch64.C: New test.\n+\n 2012-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* g++.dg/abi/arm_va_list.C: Also test on aarch64*-*-*."}, {"sha": "09540e84144bb937ebb0a0611c891c9e593669cf", "filename": "gcc/testsuite/g++.dg/abi/mangle-neon-aarch64.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-neon-aarch64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fc9e439afc212da3274b7f1abcb869ac44e22d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-neon-aarch64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-neon-aarch64.C?ref=c6fc9e439afc212da3274b7f1abcb869ac44e22d", "patch": "@@ -0,0 +1,55 @@\n+// Test that AArch64 AdvSIMD (NEON) vector types have their names mangled\n+// correctly.\n+\n+// { dg-do compile { target { aarch64*-*-* } } }\n+\n+#include <arm_neon.h>\n+\n+void f0 (int8x8_t a) {}\n+void f1 (int16x4_t a) {}\n+void f2 (int32x2_t a) {}\n+void f3 (uint8x8_t a) {}\n+void f4 (uint16x4_t a) {}\n+void f5 (uint32x2_t a) {}\n+void f6 (float32x2_t a) {}\n+void f7 (poly8x8_t a) {}\n+void f8 (poly16x4_t a) {}\n+\n+void f9 (int8x16_t a) {}\n+void f10 (int16x8_t a) {}\n+void f11 (int32x4_t a) {}\n+void f12 (int64x2_t a) {}\n+void f13 (uint8x16_t a) {}\n+void f14 (uint16x8_t a) {}\n+void f15 (uint32x4_t a) {}\n+void f16 (uint64x2_t a) {}\n+void f17 (float32x4_t a) {}\n+void f18 (float64x2_t a) {}\n+void f19 (poly8x16_t a) {}\n+void f20 (poly16x8_t a) {}\n+\n+void f21 (int8x16_t, int8x16_t) {}\n+\n+\n+// { dg-final { scan-assembler \"_Z2f010__Int8x8_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f111__Int16x4_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f211__Int32x2_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f311__Uint8x8_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f412__Uint16x4_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f512__Uint32x2_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f613__Float32x2_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f711__Poly8x8_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f812__Poly16x4_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f911__Int8x16_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1011__Int16x8_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1111__Int32x4_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1211__Int64x2_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1312__Uint8x16_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1412__Uint16x8_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1512__Uint32x4_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1612__Uint64x2_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1713__Float32x4_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1813__Float64x2_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f1912__Poly8x16_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f2012__Poly16x8_t:\" } }\n+// { dg-final { scan-assembler \"_Z3f2111__Int8x16_tS_:\" } }"}]}