{"sha": "d8e91994bad073b713f2b47bc6171f3a4e422562", "node_id": "C_kwDOANBUbNoAKGQ4ZTkxOTk0YmFkMDczYjcxM2YyYjQ3YmM2MTcxZjNhNGU0MjI1NjI", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-28T08:55:49Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-30T06:58:00Z"}, "message": "options: Improve 'LangEnabledBy' option property diagnostics\n\nNo changes in generated files.\n\n\tgcc/\n\t* opt-functions.awk (n_args): New function.\n\t(lang_enabled_by): Merge function into...\n\t* optc-gen.awk <END>: ... sole user here.\n\tImprove diagnostics.", "tree": {"sha": "e054b7de1c3c6ca5a13d30d17e6779569758cf62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e054b7de1c3c6ca5a13d30d17e6779569758cf62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e91994bad073b713f2b47bc6171f3a4e422562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e91994bad073b713f2b47bc6171f3a4e422562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e91994bad073b713f2b47bc6171f3a4e422562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e91994bad073b713f2b47bc6171f3a4e422562/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0087f3600be51167f6bcaf2d887b0ac8a320ede2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0087f3600be51167f6bcaf2d887b0ac8a320ede2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0087f3600be51167f6bcaf2d887b0ac8a320ede2"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "2aee0b9f1c3505969e4f8cd382890a8e2a1abf8d", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e91994bad073b713f2b47bc6171f3a4e422562/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e91994bad073b713f2b47bc6171f3a4e422562/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=d8e91994bad073b713f2b47bc6171f3a4e422562", "patch": "@@ -82,6 +82,17 @@ function opt_args_non_empty(name, flags, description)\n \treturn args\n }\n \n+# Return the number of comma-separated element of S.\n+function n_args(s)\n+{\n+\tn = 1\n+\twhile (s ~ \",\") {\n+\t\tn++\n+\t\tsub(\"[^,]*, *\", \"\", s)\n+\t}\n+\treturn n\n+}\n+\n # Return the Nth comma-separated element of S.  Return the empty string\n # if S does not contain N elements.\n function nth_arg(n, s)\n@@ -376,39 +387,3 @@ function integer_range_info(range_option, init, option, uinteger_used)\n     else\n         return \"-1, -1\"\n }\n-\n-# Handle LangEnabledBy(ENABLED_BY_LANGS, ENABLEDBY_NAME, ENABLEDBY_POSARG,\n-# ENABLEDBY_NEGARG). This function does not return anything.\n-function lang_enabled_by(enabledby_langs, enabledby_name, enabledby_posarg, enabledby_negarg)\n-{\n-    n_enabledby_arg_langs = split(enabledby_langs, enabledby_arg_langs, \" \");\n-    if (enabledby_posarg != \"\" && enabledby_negarg != \"\") {\n-        with_args = \",\" enabledby_posarg \",\" enabledby_negarg\n-    } else if (enabledby_posarg == \"\" && enabledby_negarg == \"\") {\n-        with_args = \"\"\n-    } else {\n-        print \"#error \" opts[i] \" LangEnabledBy(\"enabledby_langs\",\"enabledby_name\", \" \\\n-            enabledby_posarg\", \" enabledby_negarg \\\n-            \") with three arguments, it should have either 2 or 4\"\n-    }\n-\n-    n_enabledby_array = split(enabledby_name, enabledby_array, \" \\\\|\\\\| \");\n-    for (k = 1; k <= n_enabledby_array; k++) {\n-        enabledby_index = opt_numbers[enabledby_array[k]];\n-        if (enabledby_index == \"\") {\n-             print \"#error \" opts[i] \" LangEnabledBy(\"enabledby_langs\",\"enabledby_name\", \" \\\n-                 enabledby_posarg\", \" enabledby_negarg\"), unknown option '\" enabledby_name \"'\"\n-        } else {\n-            for (j = 1; j <= n_enabledby_arg_langs; j++) {\n-                 lang_name = lang_sanitized_name(enabledby_arg_langs[j]);\n-                 lang_index = lang_numbers[enabledby_arg_langs[j]];\n-                 if (enables[lang_name,enabledby_array[k]] == \"\") {\n-                     enabledby[lang_name,n_enabledby_lang[lang_index]] = enabledby_array[k];\n-                     n_enabledby_lang[lang_index]++;\n-                 }\n-                 enables[lang_name,enabledby_array[k]] \\\n-                     = enables[lang_name,enabledby_array[k]] opts[i] with_args \";\";\n-            }\n-        }\n-    }\n-}"}, {"sha": "f2198b253ad6ddfed979a0ca5fe9fafdf8c8eb53", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e91994bad073b713f2b47bc6171f3a4e422562/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e91994bad073b713f2b47bc6171f3a4e422562/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=d8e91994bad073b713f2b47bc6171f3a4e422562", "patch": "@@ -98,11 +98,57 @@ for (i = 0; i < n_opts; i++) {\n \n     enabledby_arg = opt_args(\"LangEnabledBy\", flags[i]);\n     if (enabledby_arg != \"\") {\n-        enabledby_langs = nth_arg(0, enabledby_arg);\n-        enabledby_name = nth_arg(1, enabledby_arg);\n-        enabledby_posarg = nth_arg(2, enabledby_arg);\n-\tenabledby_negarg = nth_arg(3, enabledby_arg);\n-        lang_enabled_by(enabledby_langs, enabledby_name, enabledby_posarg, enabledby_negarg);\n+\tenabledby_n_args = n_args(enabledby_arg)\n+\tif (enabledby_n_args != 2 \\\n+\t    && enabledby_n_args != 4) {\n+\t    print \"#error \" opts[i] \" LangEnabledBy(\" enabledby_arg \") must specify two or four arguments\"\n+\t}\n+\n+\tenabledby_langs = nth_arg(0, enabledby_arg);\n+\tif (enabledby_langs == \"\")\n+\t    print \"#error \" opts[i] \" LangEnabledBy(\" enabledby_arg \") must specify LANGUAGE\"\n+\tenabledby_opt = nth_arg(1, enabledby_arg);\n+\tif (enabledby_opt == \"\")\n+\t    print \"#error \" opts[i] \" LangEnabledBy(\" enabledby_arg \") must specify OPT\"\n+\n+\tenabledby_posarg_negarg = \"\"\n+\tif (enabledby_n_args == 4) {\n+\t    enabledby_posarg = nth_arg(2, enabledby_arg);\n+\t    enabledby_negarg = nth_arg(3, enabledby_arg);\n+\t    if (enabledby_posarg == \"\" \\\n+\t\t|| enabledby_negarg == \"\")\n+\t\tprint \"#error \" opts[i] \" LangEnabledBy(\" enabledby_arg \") with four arguments must specify POSARG and NEGARG\"\n+\t    else\n+\t\tenabledby_posarg_negarg = \",\" enabledby_posarg \",\" enabledby_negarg\n+\t}\n+\n+\tn_enabledby_arg_langs = split(enabledby_langs, enabledby_arg_langs, \" \");\n+\tn_enabledby_array = split(enabledby_opt, enabledby_array, \" \\\\|\\\\| \");\n+\tfor (k = 1; k <= n_enabledby_array; k++) {\n+\t    enabledby_index = opt_numbers[enabledby_array[k]];\n+\t    if (enabledby_index == \"\") {\n+\t\tprint \"#error \" opts[i] \" LangEnabledBy(\" enabledby_arg \"), unknown option '\" enabledby_opt \"'\"\n+\t\tcontinue\n+\t    }\n+\n+\t    for (j = 1; j <= n_enabledby_arg_langs; j++) {\n+\t\tlang_name = enabledby_arg_langs[j]\n+\t\tlang_index = lang_numbers[lang_name];\n+\t\tif (lang_index == \"\") {\n+\t\t    print \"#error \" opts[i] \" LangEnabledBy(\" enabledby_arg \"), unknown language '\" lang_name \"'\"\n+\t\t    continue\n+\t\t}\n+\n+\t\tlang_name = lang_sanitized_name(lang_name);\n+\n+\t\tif (enables[lang_name,enabledby_array[k]] == \"\") {\n+\t\t    enabledby[lang_name,n_enabledby_lang[lang_index]] = enabledby_array[k];\n+\t\t    n_enabledby_lang[lang_index]++;\n+\t\t}\n+\t\tenables[lang_name,enabledby_array[k]] \\\n+\t\t    = enables[lang_name,enabledby_array[k]] opts[i] enabledby_posarg_negarg \";\";\n+\t    }\n+\t}\n     }\n \n     if (flag_set_p(\"Param\", flags[i]) && !(opts[i] ~ \"^-param=\"))"}]}