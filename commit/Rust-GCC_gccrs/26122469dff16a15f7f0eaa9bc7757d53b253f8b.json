{"sha": "26122469dff16a15f7f0eaa9bc7757d53b253f8b", "node_id": "C_kwDOANBUbNoAKDI2MTIyNDY5ZGZmMTZhMTVmN2YwZWFhOWJjNzc1N2Q1M2IyNTNmOGI", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-12T17:33:00Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-12T17:33:00Z"}, "message": "aarch64: Remove vectype from latency tests\n\nThis patch gets the scalar mode of a reduction operation from the\ngimple stmt rather than the vectype.  This makes it more suitable\nfor use in scalar costs.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_sve_in_loop_reduction_latency):\n\tRemove vectype parameter and get floatness from the type of the\n\tstmt lhs instead.\n\t(arch64_in_loop_reduction_latency): Likewise.\n\t(aarch64_detect_vector_stmt_subtype): Update caller.\n\t(aarch64_vector_costs::count_ops): Likewise.", "tree": {"sha": "f9a8529c662b276beff01e2d2d343493f64b143e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9a8529c662b276beff01e2d2d343493f64b143e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26122469dff16a15f7f0eaa9bc7757d53b253f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26122469dff16a15f7f0eaa9bc7757d53b253f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26122469dff16a15f7f0eaa9bc7757d53b253f8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26122469dff16a15f7f0eaa9bc7757d53b253f8b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15aba5a67c61a005497ddad766377889d2442df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15aba5a67c61a005497ddad766377889d2442df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15aba5a67c61a005497ddad766377889d2442df6"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "416362beefd8fe06ce4fcb986b803eb1a2741654", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26122469dff16a15f7f0eaa9bc7757d53b253f8b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26122469dff16a15f7f0eaa9bc7757d53b253f8b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=26122469dff16a15f7f0eaa9bc7757d53b253f8b", "patch": "@@ -15220,14 +15220,13 @@ aarch64_sve_only_stmt_p (stmt_vec_info stmt_info, tree vectype)\n   return false;\n }\n \n-/* We are considering implementing STMT_INFO using SVE vector type VECTYPE.\n-   If STMT_INFO is an in-loop reduction that SVE supports directly, return\n-   its latency in cycles, otherwise return zero.  SVE_COSTS specifies the\n-   latencies of the relevant instructions.  */\n+/* We are considering implementing STMT_INFO using SVE.  If STMT_INFO is an\n+   in-loop reduction that SVE supports directly, return its latency in cycles,\n+   otherwise return zero.  SVE_COSTS specifies the latencies of the relevant\n+   instructions.  */\n static unsigned int\n aarch64_sve_in_loop_reduction_latency (vec_info *vinfo,\n \t\t\t\t       stmt_vec_info stmt_info,\n-\t\t\t\t       tree vectype,\n \t\t\t\t       const sve_vec_cost *sve_costs)\n {\n   switch (vect_reduc_type (vinfo, stmt_info))\n@@ -15236,7 +15235,7 @@ aarch64_sve_in_loop_reduction_latency (vec_info *vinfo,\n       return sve_costs->clast_cost;\n \n     case FOLD_LEFT_REDUCTION:\n-      switch (GET_MODE_INNER (TYPE_MODE (vectype)))\n+      switch (TYPE_MODE (TREE_TYPE (gimple_get_lhs (stmt_info->stmt))))\n \t{\n \tcase E_HFmode:\n \tcase E_BFmode:\n@@ -15268,14 +15267,10 @@ aarch64_sve_in_loop_reduction_latency (vec_info *vinfo,\n      Advanced SIMD implementation.\n \n    - If VEC_FLAGS & VEC_ANY_SVE, return the loop carry latency of the\n-     SVE implementation.\n-\n-   VECTYPE is the type of vector that the vectorizer is considering using\n-   for STMT_INFO, which might be different from the type of vector described\n-   by VEC_FLAGS.  */\n+     SVE implementation.  */\n static unsigned int\n aarch64_in_loop_reduction_latency (vec_info *vinfo, stmt_vec_info stmt_info,\n-\t\t\t\t   tree vectype, unsigned int vec_flags)\n+\t\t\t\t   unsigned int vec_flags)\n {\n   const cpu_vector_cost *vec_costs = aarch64_tune_params.vec_costs;\n   const sve_vec_cost *sve_costs = nullptr;\n@@ -15287,16 +15282,16 @@ aarch64_in_loop_reduction_latency (vec_info *vinfo, stmt_vec_info stmt_info,\n   if (sve_costs)\n     {\n       unsigned int latency\n-\t= aarch64_sve_in_loop_reduction_latency (vinfo, stmt_info, vectype,\n-\t\t\t\t\t\t sve_costs);\n+\t= aarch64_sve_in_loop_reduction_latency (vinfo, stmt_info, sve_costs);\n       if (latency)\n \treturn latency;\n     }\n \n   /* Handle scalar costs.  */\n+  bool is_float = FLOAT_TYPE_P (TREE_TYPE (gimple_get_lhs (stmt_info->stmt)));\n   if (vec_flags == 0)\n     {\n-      if (FLOAT_TYPE_P (vectype))\n+      if (is_float)\n \treturn vec_costs->scalar_fp_stmt_cost;\n       return vec_costs->scalar_int_stmt_cost;\n     }\n@@ -15305,7 +15300,7 @@ aarch64_in_loop_reduction_latency (vec_info *vinfo, stmt_vec_info stmt_info,\n      with a vector reduction outside the loop.  */\n   const simd_vec_cost *simd_costs\n     = aarch64_simd_vec_costs_for_flags (vec_flags);\n-  if (FLOAT_TYPE_P (vectype))\n+  if (is_float)\n     return simd_costs->fp_stmt_cost;\n   return simd_costs->int_stmt_cost;\n }\n@@ -15382,8 +15377,7 @@ aarch64_detect_vector_stmt_subtype (vec_info *vinfo, vect_cost_for_stmt kind,\n       && sve_costs)\n     {\n       unsigned int latency\n-\t= aarch64_sve_in_loop_reduction_latency (vinfo, stmt_info, vectype,\n-\t\t\t\t\t\t sve_costs);\n+\t= aarch64_sve_in_loop_reduction_latency (vinfo, stmt_info, sve_costs);\n       if (latency)\n \treturn latency;\n     }\n@@ -15570,8 +15564,7 @@ aarch64_vector_costs::count_ops (unsigned int count, vect_cost_for_stmt kind,\n       && vect_is_reduction (stmt_info))\n     {\n       unsigned int base\n-\t= aarch64_in_loop_reduction_latency (m_vinfo, stmt_info, vectype,\n-\t\t\t\t\t     vec_flags);\n+\t= aarch64_in_loop_reduction_latency (m_vinfo, stmt_info, vec_flags);\n       if (vect_reduc_type (m_vinfo, stmt_info) == FOLD_LEFT_REDUCTION)\n \t{\n \t  if (aarch64_sve_mode_p (TYPE_MODE (vectype)))"}]}