{"sha": "a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5NDU3MzBlNTQyZjA4ZDNhNTc1Y2I2YzczZmUzYzZiYzQ4ZmQwMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-07-09T21:14:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-07-09T21:14:11Z"}, "message": "re PR middle-end/66633 (ICE on valid \"verify_gimple failed\" with OpenMP)\n\n\tPR middle-end/66633\n\t* tree-nested.c (get_static_chain): Or in a flag into\n\tinfo->static_chain_added.\n\t(get_frame_field, get_nonlocal_debug_decl): Likewise.\n\t(convert_nonlocal_omp_clauses, convert_local_omp_clauses): Revert\n\t2015-07-01 changes.\n\t(convert_tramp_reference_stmt): If a frame_decl or chain_decl\n\tis needed newly inside of GIMPLE_OMP_{PARALLEL,TASK,TARGET} body,\n\tadd it to clauses.\n\n\t* gcc.dg/gomp/pr66633-1.c: New test.\n\t* gcc.dg/gomp/pr66633-2.c: New test.\n\t* gcc.dg/gomp/pr66633-3.c: New test.\n\t* gcc.dg/gomp/pr66633-4.c: New test.\n\nFrom-SVN: r225638", "tree": {"sha": "ad4e5ec5d126191f3c267cfc9089da8e3515f025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad4e5ec5d126191f3c267cfc9089da8e3515f025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17b658af6686e89568ef734aca6ff46248203a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b658af6686e89568ef734aca6ff46248203a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b658af6686e89568ef734aca6ff46248203a81"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "5bc2f6ac78e4e1056789cfd79eb56b3ce17159a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "patch": "@@ -1,5 +1,15 @@\n 2015-07-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/66633\n+\t* tree-nested.c (get_static_chain): Or in a flag into\n+\tinfo->static_chain_added.\n+\t(get_frame_field, get_nonlocal_debug_decl): Likewise.\n+\t(convert_nonlocal_omp_clauses, convert_local_omp_clauses): Revert\n+\t2015-07-01 changes.\n+\t(convert_tramp_reference_stmt): If a frame_decl or chain_decl\n+\tis needed newly inside of GIMPLE_OMP_{PARALLEL,TASK,TARGET} body,\n+\tadd it to clauses.\n+\n \tPR tree-optimization/66718\n \t* tree-vect-stmts.c (struct simd_call_arg_info): Add simd_lane_linear\n \tfield."}, {"sha": "df74648deff2a7c13ebd51b92389741f25159f27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "patch": "@@ -1,3 +1,11 @@\n+2015-07-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66633\n+\t* gcc.dg/gomp/pr66633-1.c: New test.\n+\t* gcc.dg/gomp/pr66633-2.c: New test.\n+\t* gcc.dg/gomp/pr66633-3.c: New test.\n+\t* gcc.dg/gomp/pr66633-4.c: New test.\n+\n 2015-07-09  John Marino  <gnugcc@marino.st>\n \n \t* lib/target-supports.exp (check_effective_target_pie):"}, {"sha": "3260ac7d52ecad96ccdc62ae364a80b8f70e8410", "filename": "gcc/testsuite/gcc.dg/gomp/pr66633-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-1.c?ref=a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "patch": "@@ -0,0 +1,14 @@\n+/* PR middle-end/66633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -O1\" } */\n+\n+void baz (int (*) ());\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  auto int bar (void) { return i; }\n+  #pragma omp parallel\n+    baz (bar);\n+}"}, {"sha": "bc6c7c54c9ee5ee87a0cca9934976360a9ae0b47", "filename": "gcc/testsuite/gcc.dg/gomp/pr66633-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-2.c?ref=a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "patch": "@@ -0,0 +1,5 @@\n+/* PR middle-end/66633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -O0\" } */\n+\n+#include \"pr66633-1.c\""}, {"sha": "eaa3b0d8b95f2b86dbe35046d627286d23db4f38", "filename": "gcc/testsuite/gcc.dg/gomp/pr66633-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-3.c?ref=a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/66633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -O1\" } */\n+\n+void baz (int (*) ());\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  auto int bar (void) { return i; }\n+  auto void bar2 (void)\n+  {\n+    #pragma omp parallel\n+      baz (bar);\n+  }\n+  bar2 ();\n+}"}, {"sha": "93cdcc2b9d65fad88702ad4a31b0625f14d8931a", "filename": "gcc/testsuite/gcc.dg/gomp/pr66633-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr66633-4.c?ref=a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "patch": "@@ -0,0 +1,5 @@\n+/* PR middle-end/66633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -O0\" } */\n+\n+#include \"pr66633-3.c\""}, {"sha": "27986f6440118e8b3c43fab79b0693e6ff34abc3", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0945730e542f08d3a575cb6c73fe3c6bc48fd03/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=a0945730e542f08d3a575cb6c73fe3c6bc48fd03", "patch": "@@ -767,10 +767,12 @@ get_static_chain (struct nesting_info *info, tree target_context,\n   if (info->context == target_context)\n     {\n       x = build_addr (info->frame_decl, target_context);\n+      info->static_chain_added |= 1;\n     }\n   else\n     {\n       x = get_chain_decl (info);\n+      info->static_chain_added |= 2;\n \n       for (i = info->outer; i->context != target_context; i = i->outer)\n \t{\n@@ -802,10 +804,12 @@ get_frame_field (struct nesting_info *info, tree target_context,\n       /* Make sure frame_decl gets created.  */\n       (void) get_frame_type (info);\n       x = info->frame_decl;\n+      info->static_chain_added |= 1;\n     }\n   else\n     {\n       x = get_chain_decl (info);\n+      info->static_chain_added |= 2;\n \n       for (i = info->outer; i->context != target_context; i = i->outer)\n \t{\n@@ -851,10 +855,12 @@ get_nonlocal_debug_decl (struct nesting_info *info, tree decl)\n       (void) get_frame_type (info);\n       x = info->frame_decl;\n       i = info;\n+      info->static_chain_added |= 1;\n     }\n   else\n     {\n       x = get_chain_decl (info);\n+      info->static_chain_added |= 2;\n       for (i = info->outer; i->context != target_context; i = i->outer)\n \t{\n \t  field = get_chain_field (i);\n@@ -1061,9 +1067,7 @@ static bool\n convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n {\n   struct nesting_info *const info = (struct nesting_info *) wi->info;\n-  /* If not optimizing, we will force the creation of the CHAIN object in\n-     convert_all_function_calls, so we need to take it into account here.  */\n-  bool need_chain = info->outer && !optimize, need_stmts = false;\n+  bool need_chain = false, need_stmts = false;\n   tree clause, decl;\n   int dummy;\n   bitmap new_suppress;\n@@ -1691,9 +1695,7 @@ static bool\n convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n {\n   struct nesting_info *const info = (struct nesting_info *) wi->info;\n-  /* If not optimizing, we will force the creation of the FRAME object in\n-     convert_all_function_calls, so we need to take it into account here.  */\n-  bool need_frame = info->inner && !optimize, need_stmts = false;\n+  bool need_frame = false, need_stmts = false;\n   tree clause, decl;\n   int dummy;\n   bitmap new_suppress;\n@@ -2292,17 +2294,55 @@ convert_tramp_reference_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n     case GIMPLE_OMP_PARALLEL:\n     case GIMPLE_OMP_TASK:\n       {\n-\ttree save_local_var_chain;\n+\ttree save_local_var_chain = info->new_local_var_chain;\n         walk_gimple_op (stmt, convert_tramp_reference_op, wi);\n-\tsave_local_var_chain = info->new_local_var_chain;\n \tinfo->new_local_var_chain = NULL;\n+\tchar save_static_chain_added = info->static_chain_added;\n+\tinfo->static_chain_added = 0;\n         walk_body (convert_tramp_reference_stmt, convert_tramp_reference_op,\n \t\t   info, gimple_omp_body_ptr (stmt));\n \tif (info->new_local_var_chain)\n \t  declare_vars (info->new_local_var_chain,\n \t\t\tgimple_seq_first_stmt (gimple_omp_body (stmt)),\n \t\t\tfalse);\n+\tfor (int i = 0; i < 2; i++)\n+\t  {\n+\t    tree c, decl;\n+\t    if ((info->static_chain_added & (1 << i)) == 0)\n+\t      continue;\n+\t    decl = i ? get_chain_decl (info) : info->frame_decl;\n+\t    /* Don't add CHAIN.* or FRAME.* twice.  */\n+\t    for (c = gimple_omp_taskreg_clauses (stmt);\n+\t\t c;\n+\t\t c = OMP_CLAUSE_CHAIN (c))\n+\t      if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE\n+\t\t   || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED)\n+\t\t  && OMP_CLAUSE_DECL (c) == decl)\n+\t\tbreak;\n+\t      if (c == NULL && gimple_code (stmt) != GIMPLE_OMP_TARGET)\n+\t\t{\n+\t\t  c = build_omp_clause (gimple_location (stmt),\n+\t\t\t\t\ti ? OMP_CLAUSE_FIRSTPRIVATE\n+\t\t\t\t\t  : OMP_CLAUSE_SHARED);\n+\t\t  OMP_CLAUSE_DECL (c) = decl;\n+\t\t  OMP_CLAUSE_CHAIN (c) = gimple_omp_taskreg_clauses (stmt);\n+\t\t  gimple_omp_taskreg_set_clauses (stmt, c);\n+\t\t}\n+\t      else if (c == NULL)\n+\t\t{\n+\t\t  c = build_omp_clause (gimple_location (stmt),\n+\t\t\t\t\tOMP_CLAUSE_MAP);\n+\t\t  OMP_CLAUSE_DECL (c) = decl;\n+\t\t  OMP_CLAUSE_SET_MAP_KIND (c,\n+\t\t\t\t\t   i ? GOMP_MAP_TO : GOMP_MAP_TOFROM);\n+\t\t  OMP_CLAUSE_SIZE (c) = DECL_SIZE_UNIT (decl);\n+\t\t  OMP_CLAUSE_CHAIN (c) = gimple_omp_target_clauses (stmt);\n+\t\t  gimple_omp_target_set_clauses (as_a <gomp_target *> (stmt),\n+\t\t\t\t\t\t c);\n+\t\t}\n+\t  }\n \tinfo->new_local_var_chain = save_local_var_chain;\n+\tinfo->static_chain_added |= save_static_chain_added;\n       }\n       break;\n "}]}