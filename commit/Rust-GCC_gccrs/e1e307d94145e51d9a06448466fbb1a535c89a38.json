{"sha": "e1e307d94145e51d9a06448466fbb1a535c89a38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFlMzA3ZDk0MTQ1ZTUxZDlhMDY0NDg0NjZmYmIxYTUzNWM4OWEzOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:43:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:43:47Z"}, "message": "[multiple changes]\n\n2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Package_Instantiation):\n\tTreat a missing SPARK_Mode annotation as having mode \"Off\".\n\t(Analyze_Subprogram_Instantiation): Treat a missing SPARK_Mode\n\tannotation as having mode \"Off\".\n\t(Instantiate_Package_Body): Code\n\treformatting. Treat a missing SPARK_Mode annotation as having mode\n\t\"Off\".\n\t(Instantiate_Subprogram_Body): Code reformatting. Treat\n\ta missing SPARK_Mode annotation as having mode \"Off\".\n\n2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb: Code clean up.\n\t* sem_ch13.adb: Minor fix in comment.\n\n2015-10-16  Bob Duff  <duff@adacore.com>\n\n\t* a-exexda.adb: Change format of Exception_Information to be\n\tmore like what we print for unhandled exceptions.\n\t* a-exstat.adb: Parse new format.\n\t* a-except-2005.adb, a-except.adb: Document new format.\n\nFrom-SVN: r228907", "tree": {"sha": "878351a2d7f4b8c94292a8e3be61dec52b071006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/878351a2d7f4b8c94292a8e3be61dec52b071006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1e307d94145e51d9a06448466fbb1a535c89a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e307d94145e51d9a06448466fbb1a535c89a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e307d94145e51d9a06448466fbb1a535c89a38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e307d94145e51d9a06448466fbb1a535c89a38/comments", "author": null, "committer": null, "parents": [{"sha": "7f37fff1a17d12538973f68be49ba3d6030a495d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f37fff1a17d12538973f68be49ba3d6030a495d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f37fff1a17d12538973f68be49ba3d6030a495d"}], "stats": {"total": 285, "additions": 173, "deletions": 112}, "files": [{"sha": "751cbf7df2e352738b1d9da96165b9cc17655c90", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -1,3 +1,27 @@\n+2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Package_Instantiation):\n+\tTreat a missing SPARK_Mode annotation as having mode \"Off\".\n+\t(Analyze_Subprogram_Instantiation): Treat a missing SPARK_Mode\n+\tannotation as having mode \"Off\".\n+\t(Instantiate_Package_Body): Code\n+\treformatting. Treat a missing SPARK_Mode annotation as having mode\n+\t\"Off\".\n+\t(Instantiate_Subprogram_Body): Code reformatting. Treat\n+\ta missing SPARK_Mode annotation as having mode \"Off\".\n+\n+2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb: Code clean up.\n+\t* sem_ch13.adb: Minor fix in comment.\n+\n+2015-10-16  Bob Duff  <duff@adacore.com>\n+\n+\t* a-exexda.adb: Change format of Exception_Information to be\n+\tmore like what we print for unhandled exceptions.\n+\t* a-exstat.adb: Parse new format.\n+\t* a-except-2005.adb, a-except.adb: Document new format.\n+\n 2015-10-16  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch5.adb (Analyze_Iterator_Specification): Associate a"}, {"sha": "e792917806176510dfc63b4548d8bdc1bc78a7f2", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -152,8 +152,8 @@ package body Ada.Exceptions is\n       --\n       --  The format of the string is as follows:\n       --\n-      --    Exception_Name: <exception name> (as in Exception_Name)\n-      --    Message: <message> (only if Exception_Message is empty)\n+      --    raised <exception name> : <message>\n+      --    (\" : <message>\" is present only if Exception_Message is not empty)\n       --    PID=nnnn (only if nonzero)\n       --    Call stack traceback locations:  (only if at least one location)\n       --    <0xyyyyyyyy 0xyyyyyyyy ...>      (is recorded)"}, {"sha": "a228a8395fe50e545b348a8a06682028a31fd796", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -117,8 +117,8 @@ package body Ada.Exceptions is\n       --\n       --  The format of the string is as follows:\n       --\n-      --    Exception_Name: <exception name> (as in Exception_Name)\n-      --    Message: <message> (only if Exception_Message is empty)\n+      --    raised <exception name> : <message>\n+      --    (\" : <message>\" is present only if Exception_Message is not empty)\n       --    PID=nnnn (only if nonzero)\n       --    Call stack traceback locations:  (only if at least one location)\n       --    <0xyyyyyyyy 0xyyyyyyyy ...>      (is recorded)"}, {"sha": "2a5ffbcf20ed1d8c729cae434ba2e914e924cc3a", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -248,11 +248,11 @@ package body Exception_Data is\n    -- Append_Info_Basic_Exception_Information --\n    ---------------------------------------------\n \n-   --  To ease the maximum length computation, we define and pull out a couple\n-   --  of string constants:\n+   --  To ease the maximum length computation, we define and pull out some\n+   --  string constants:\n \n-   BEI_Name_Header : constant String := \"Exception name: \";\n-   BEI_Msg_Header  : constant String := \"Message: \";\n+   BEI_Name_Header : constant String := \"raised \";\n+   BEI_Msg_Header  : constant String := \" : \";\n    BEI_PID_Header  : constant String := \"PID: \";\n \n    procedure Append_Info_Basic_Exception_Information\n@@ -275,13 +275,13 @@ package body Exception_Data is\n       if Name (Name'First) /= '_' then\n          Append_Info_String (BEI_Name_Header, Info, Ptr);\n          Append_Info_String (Name, Info, Ptr);\n-         Append_Info_NL (Info, Ptr);\n \n          if Exception_Message_Length (X) /= 0 then\n             Append_Info_String (BEI_Msg_Header, Info, Ptr);\n             Append_Info_Exception_Message  (X, Info, Ptr);\n-            Append_Info_NL (Info, Ptr);\n          end if;\n+\n+         Append_Info_NL (Info, Ptr);\n       end if;\n \n       --  Output PID line if nonzero\n@@ -498,7 +498,7 @@ package body Exception_Data is\n    is\n    begin\n       return\n-        BEI_Name_Header'Length + Exception_Name_Length (X) + 1\n+        BEI_Name_Header'Length + Exception_Name_Length (X)\n         + BEI_Msg_Header'Length + Exception_Message_Length (X) + 1\n         + BEI_PID_Header'Length + 15;\n    end Basic_Exception_Info_Maxlength;"}, {"sha": "1ff9481eb144330f05a01417ebe89e1f81b11cfc", "filename": "gcc/ada/a-exstat.adb", "status": "modified", "additions": 89, "deletions": 81, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-exstat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fa-exstat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exstat.adb?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -142,117 +142,125 @@ package body Stream_Attributes is\n    begin\n       if S = \"\" then\n          return Null_Occurrence;\n+      end if;\n \n-      else\n-         To := S'First - 2;\n-         Next_String;\n+      To := S'First - 2;\n+      Next_String;\n \n-         if S (From .. From + 15) /= \"Exception name: \" then\n-            Bad_EO;\n-         end if;\n-\n-         X.Id := Exception_Id (Internal_Exception (S (From + 16 .. To)));\n+      if S (From .. From + 6) /= \"raised \" then\n+         Bad_EO;\n+      end if;\n \n-         Next_String;\n+      declare\n+         Name_Start : constant Positive := From + 7;\n+      begin\n+         From := Name_Start + 1;\n \n-         if From <= To and then S (From) = 'M' then\n-            if S (From .. From + 8) /= \"Message: \" then\n-               Bad_EO;\n-            end if;\n+         while From < To and then S (From) /= ' ' loop\n+            From := From + 1;\n+         end loop;\n \n-            X.Msg_Length := To - From - 8;\n-            X.Msg (1 .. X.Msg_Length) := S (From + 9 .. To);\n-            Next_String;\n+         X.Id :=\n+           Exception_Id (Internal_Exception (S (Name_Start .. From - 1)));\n+      end;\n \n-         else\n-            X.Msg_Length := 0;\n+      if From <= To then\n+         if S (From .. From + 2) /= \" : \" then\n+            Bad_EO;\n          end if;\n \n-         X.Pid := 0;\n-\n-         if From <= To and then S (From) = 'P' then\n-            if S (From .. From + 3) /= \"PID:\" then\n-               Bad_EO;\n-            end if;\n+         X.Msg_Length := To - From - 2;\n+         X.Msg (1 .. X.Msg_Length) := S (From + 3 .. To);\n \n-            From := From + 5; -- skip past PID: space\n+      else\n+         X.Msg_Length := 0;\n+      end if;\n \n-            while From <= To loop\n-               X.Pid := X.Pid * 10 +\n-                          (Character'Pos (S (From)) - Character'Pos ('0'));\n-               From := From + 1;\n-            end loop;\n+      Next_String;\n+      X.Pid := 0;\n \n-            Next_String;\n+      if From <= To and then S (From) = 'P' then\n+         if S (From .. From + 3) /= \"PID:\" then\n+            Bad_EO;\n          end if;\n \n-         X.Num_Tracebacks := 0;\n-\n-         if From <= To then\n-            if S (From .. To) /= \"Call stack traceback locations:\" then\n-               Bad_EO;\n-            end if;\n+         From := From + 5; -- skip past PID: space\n \n-            Next_String;\n-            loop\n-               exit when From > To;\n+         while From <= To loop\n+            X.Pid := X.Pid * 10 +\n+                       (Character'Pos (S (From)) - Character'Pos ('0'));\n+            From := From + 1;\n+         end loop;\n \n-               declare\n-                  Ch : Character;\n-                  C  : Integer_Address;\n-                  N  : Integer_Address;\n-\n-               begin\n-                  if S (From) /= '0'\n-                    or else S (From + 1) /= 'x'\n-                  then\n-                     Bad_EO;\n-                  else\n-                     From := From + 2;\n-                  end if;\n+         Next_String;\n+      end if;\n \n-                  C := 0;\n-                  while From <= To loop\n-                     Ch := S (From);\n+      X.Num_Tracebacks := 0;\n \n-                     if Ch in '0' .. '9' then\n-                        N :=\n-                          Character'Pos (S (From)) - Character'Pos ('0');\n+      if From <= To then\n+         if S (From .. To) /= \"Call stack traceback locations:\" then\n+            Bad_EO;\n+         end if;\n \n-                     elsif Ch in 'a' .. 'f' then\n-                        N :=\n-                          Character'Pos (S (From)) - Character'Pos ('a') + 10;\n+         Next_String;\n+         loop\n+            exit when From > To;\n+\n+            declare\n+               Ch : Character;\n+               C  : Integer_Address;\n+               N  : Integer_Address;\n+\n+            begin\n+               if S (From) /= '0'\n+                 or else S (From + 1) /= 'x'\n+               then\n+                  Bad_EO;\n+               else\n+                  From := From + 2;\n+               end if;\n \n-                     elsif Ch = ' ' then\n-                        From := From + 1;\n-                        exit;\n+               C := 0;\n+               while From <= To loop\n+                  Ch := S (From);\n \n-                     else\n-                        Bad_EO;\n-                     end if;\n+                  if Ch in '0' .. '9' then\n+                     N :=\n+                       Character'Pos (S (From)) - Character'Pos ('0');\n \n-                     C := C * 16 + N;\n+                  elsif Ch in 'a' .. 'f' then\n+                     N :=\n+                       Character'Pos (S (From)) - Character'Pos ('a') + 10;\n \n+                  elsif Ch = ' ' then\n                      From := From + 1;\n-                  end loop;\n+                     exit;\n \n-                  if X.Num_Tracebacks = Max_Tracebacks then\n+                  else\n                      Bad_EO;\n                   end if;\n \n-                  X.Num_Tracebacks := X.Num_Tracebacks + 1;\n-                  X.Tracebacks (X.Num_Tracebacks) :=\n-                    TBE.TB_Entry_For (To_Address (C));\n-               end;\n-            end loop;\n-         end if;\n+                  C := C * 16 + N;\n \n-         --  If an exception was converted to a string, it must have\n-         --  already been raised, so flag it accordingly and we are done.\n+                  From := From + 1;\n+               end loop;\n \n-         X.Exception_Raised := True;\n-         return X;\n+               if X.Num_Tracebacks = Max_Tracebacks then\n+                  Bad_EO;\n+               end if;\n+\n+               X.Num_Tracebacks := X.Num_Tracebacks + 1;\n+               X.Tracebacks (X.Num_Tracebacks) :=\n+                 TBE.TB_Entry_For (To_Address (C));\n+            end;\n+         end loop;\n       end if;\n+\n+      --  If an exception was converted to a string, it must have\n+      --  already been raised, so flag it accordingly and we are done.\n+\n+      X.Exception_Raised := True;\n+      return X;\n    end String_To_EO;\n \n end Stream_Attributes;"}, {"sha": "8a90b6c1fb7d6dae1a670732f69f02b8123cdd20", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -2956,6 +2956,10 @@ package body Exp_Ch5 is\n \n          Prepend (Elmt_Ref, Stats);\n \n+         --  The element is assignable in the expanded code.\n+\n+         Set_Assignment_OK (Name (Elmt_Ref));\n+\n          --  The loop is rewritten as a block, to hold the element declaration\n \n          New_Loop :=\n@@ -2981,7 +2985,6 @@ package body Exp_Ch5 is\n \n       Analyze (Elmt_Decl);\n       Set_Ekind (Defining_Identifier (Elmt_Decl), E_Loop_Parameter);\n-      Set_Assignment_OK (Name (Elmt_Ref));\n \n       Analyze (N);\n    end Expand_Formal_Container_Element_Loop;"}, {"sha": "6bcecf4b8dabf3b1149bf054e38c97cf0a18f16a", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -3723,11 +3723,12 @@ package body Sem_Ch12 is\n          goto Leave;\n \n       else\n-         --  If the context of the instance is subject to SPARK_Mode \"off\",\n-         --  set the global flag which signals Analyze_Pragma to ignore all\n-         --  SPARK_Mode pragmas within the instance.\n+         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n+         --  the annotation is altogether missing, set the global flag which\n+         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n+         --  the instance.\n \n-         if SPARK_Mode = Off then\n+         if SPARK_Mode /= On then\n             Ignore_Pragma_SPARK_Mode := True;\n          end if;\n \n@@ -5098,11 +5099,12 @@ package body Sem_Ch12 is\n          Error_Msg_NE (\"instantiation of & within itself\", N, Gen_Unit);\n \n       else\n-         --  If the context of the instance is subject to SPARK_Mode \"off\",\n-         --  set the global flag which signals Analyze_Pragma to ignore all\n-         --  SPARK_Mode pragmas within the instance.\n+         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n+         --  the annotation is altogether missing, set the global flag which\n+         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n+         --  the instance.\n \n-         if SPARK_Mode = Off then\n+         if SPARK_Mode /= On then\n             Ignore_Pragma_SPARK_Mode := True;\n          end if;\n \n@@ -10632,17 +10634,18 @@ package body Sem_Ch12 is\n       Act_Spec    : constant Node_Id    := Specification (Act_Decl);\n       Act_Decl_Id : constant Entity_Id  := Defining_Entity (Act_Spec);\n \n+      Save_IPSM        : constant Boolean := Ignore_Pragma_SPARK_Mode;\n+      Save_Style_Check : constant Boolean := Style_Check;\n+\n+      Act_Body      : Node_Id;\n+      Act_Body_Id   : Entity_Id;\n       Act_Body_Name : Node_Id;\n       Gen_Body      : Node_Id;\n       Gen_Body_Id   : Node_Id;\n-      Act_Body      : Node_Id;\n-      Act_Body_Id   : Entity_Id;\n+      Par_Ent       : Entity_Id := Empty;\n+      Par_Vis       : Boolean   := False;\n \n       Parent_Installed : Boolean := False;\n-      Save_Style_Check : constant Boolean := Style_Check;\n-\n-      Par_Ent : Entity_Id := Empty;\n-      Par_Vis : Boolean   := False;\n \n       Vis_Prims_List : Elist_Id := No_Elist;\n       --  List of primitives made temporarily visible in the instantiation\n@@ -10783,8 +10786,17 @@ package body Sem_Ch12 is\n       if Present (Gen_Body_Id) then\n          Save_Env (Gen_Unit, Act_Decl_Id);\n          Style_Check := False;\n-         Current_Sem_Unit := Body_Info.Current_Sem_Unit;\n \n+         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n+         --  the annotation is altogether missing, set the global flag which\n+         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n+         --  the instance.\n+\n+         if SPARK_Mode /= On then\n+            Ignore_Pragma_SPARK_Mode := True;\n+         end if;\n+\n+         Current_Sem_Unit := Body_Info.Current_Sem_Unit;\n          Gen_Body := Unit_Declaration_Node (Gen_Body_Id);\n \n          Create_Instantiation_Source\n@@ -10943,6 +10955,7 @@ package body Sem_Ch12 is\n          end if;\n \n          Restore_Env;\n+         Ignore_Pragma_SPARK_Mode := Save_IPSM;\n          Style_Check := Save_Style_Check;\n \n       --  If we have no body, and the unit requires a body, then complain. This\n@@ -11019,6 +11032,7 @@ package body Sem_Ch12 is\n       Pack_Id     : constant Entity_Id  :=\n                       Defining_Unit_Name (Parent (Act_Decl));\n \n+      Saved_IPSM        : constant Boolean        := Ignore_Pragma_SPARK_Mode;\n       Saved_Style_Check : constant Boolean        := Style_Check;\n       Saved_Warnings    : constant Warning_Record := Save_Warnings;\n \n@@ -11104,6 +11118,16 @@ package body Sem_Ch12 is\n \n          Save_Env (Gen_Unit, Anon_Id);\n          Style_Check := False;\n+\n+         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n+         --  the annotation is altogether missing, set the global flag which\n+         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n+         --  the instance.\n+\n+         if SPARK_Mode /= On then\n+            Ignore_Pragma_SPARK_Mode := True;\n+         end if;\n+\n          Current_Sem_Unit := Body_Info.Current_Sem_Unit;\n          Create_Instantiation_Source\n            (Inst_Node,\n@@ -11203,6 +11227,7 @@ package body Sem_Ch12 is\n          end if;\n \n          Restore_Env;\n+         Ignore_Pragma_SPARK_Mode := Saved_IPSM;\n          Style_Check := Saved_Style_Check;\n          Restore_Warnings (Saved_Warnings);\n \n@@ -11268,9 +11293,10 @@ package body Sem_Ch12 is\n                           (Make_Simple_Return_Statement (Loc, Ret_Expr))));\n          end if;\n \n-         Pack_Body := Make_Package_Body (Loc,\n-           Defining_Unit_Name => New_Copy (Pack_Id),\n-           Declarations       => New_List (Act_Body));\n+         Pack_Body :=\n+           Make_Package_Body (Loc,\n+             Defining_Unit_Name => New_Copy (Pack_Id),\n+             Declarations       => New_List (Act_Body));\n \n          Insert_After (Inst_Node, Pack_Body);\n          Set_Corresponding_Spec (Pack_Body, Pack_Id);"}, {"sha": "40d4d357528005ee9fbfd37d8a4a290092502321", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e307d94145e51d9a06448466fbb1a535c89a38/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e1e307d94145e51d9a06448466fbb1a535c89a38", "patch": "@@ -122,7 +122,7 @@ package body Sem_Ch13 is\n    --  to generate appropriate semantic checks that are delayed until this\n    --  point (they had to be delayed this long for cases of delayed aspects,\n    --  e.g. analysis of statically predicated subtypes in choices, for which\n-   --  we have to be sure the subtypes in question are frozen before checking.\n+   --  we have to be sure the subtypes in question are frozen before checking).\n \n    function Get_Alignment_Value (Expr : Node_Id) return Uint;\n    --  Given the expression for an alignment value, returns the corresponding"}]}