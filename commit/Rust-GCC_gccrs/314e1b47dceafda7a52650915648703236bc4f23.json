{"sha": "314e1b47dceafda7a52650915648703236bc4f23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0ZTFiNDdkY2VhZmRhN2E1MjY1MDkxNTY0ODcwMzIzNmJjNGYyMw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-12-20T16:17:27Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-12-20T16:17:27Z"}, "message": "[Patch] Turn -fexcess-precision=fast on when in -ffast-math\n\n\t* common.opt (excess_precision): Tag as SetByCombined.\n\t* opts.c (set_fast_math_flags): Also set\n\tflag_excess_precision_cmdline.\n\t(fast_math_flags_set_p): Also check flag_excess_precision_cmdline.\n\t* doc/invoke.texi (-fexcess-precision): Drop text saying the\n\toption has no effect under -ffast-math, make it clear that\n\t-ffast-math will cause -fexcess-precision=fast by default even for\n\tstandards compliant modes.\n\t(-ffast-math): Document that this sets -fexcess-precision=fast.\n\nFrom-SVN: r243824", "tree": {"sha": "b7b1211e081da6609886060d597693664c100be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7b1211e081da6609886060d597693664c100be5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/314e1b47dceafda7a52650915648703236bc4f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314e1b47dceafda7a52650915648703236bc4f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314e1b47dceafda7a52650915648703236bc4f23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314e1b47dceafda7a52650915648703236bc4f23/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa90531ea4cfe2ceb9150943f601b67907b27811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa90531ea4cfe2ceb9150943f601b67907b27811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa90531ea4cfe2ceb9150943f601b67907b27811"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "156408f2f10f29628802cce00357b0bada6fc4b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e1b47dceafda7a52650915648703236bc4f23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e1b47dceafda7a52650915648703236bc4f23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=314e1b47dceafda7a52650915648703236bc4f23", "patch": "@@ -1,3 +1,15 @@\n+2016-12-20  James Greenhalgh  <james.greenhalghj@arm.com>\n+\n+\t* common.opt (excess_precision): Tag as SetByCombined.\n+\t* opts.c (set_fast_math_flags): Also set\n+\tflag_excess_precision_cmdline.\n+\t(fast_math_flags_set_p): Also check flag_excess_precision_cmdline.\n+\t* doc/invoke.texi (-fexcess-precision): Drop text saying the\n+\toption has no effect under -ffast-math, make it clear that\n+\t-ffast-math will cause -fexcess-precision=fast by default even for\n+\tstandards compliant modes.\n+\t(-ffast-math): Document that this sets -fexcess-precision=fast.\n+\n 2016-12-20  Richard Biener  <rguenther@suse.de>\n \n \t* passes.c (execute_one_pass): Handle going out of SSA w/o"}, {"sha": "6ebaf9ca6728b7a00a2dc8fa35c3434bee3327fb", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e1b47dceafda7a52650915648703236bc4f23/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e1b47dceafda7a52650915648703236bc4f23/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=314e1b47dceafda7a52650915648703236bc4f23", "patch": "@@ -1317,7 +1317,7 @@ Common Report Var(flag_expensive_optimizations) Optimization\n Perform a number of minor, expensive optimizations.\n \n fexcess-precision=\n-Common Joined RejectNegative Enum(excess_precision) Var(flag_excess_precision_cmdline) Init(EXCESS_PRECISION_DEFAULT)\n+Common Joined RejectNegative Enum(excess_precision) Var(flag_excess_precision_cmdline) Init(EXCESS_PRECISION_DEFAULT) SetByCombined\n -fexcess-precision=[fast|standard]\tSpecify handling of excess floating-point precision.\n \n Enum"}, {"sha": "5c92fe69335cae0b5657bff37ac79f86cb88a906", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e1b47dceafda7a52650915648703236bc4f23/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e1b47dceafda7a52650915648703236bc4f23/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=314e1b47dceafda7a52650915648703236bc4f23", "patch": "@@ -9109,12 +9109,12 @@ both casts and assignments cause values to be rounded to their\n semantic types (whereas @option{-ffloat-store} only affects\n assignments).  This option is enabled by default for C if a strict\n conformance option such as @option{-std=c99} is used.\n+@option{-ffast-math} enables @option{-fexcess-precision=fast} by default\n+regardless of whether a strict conformance option is used.\n \n @opindex mfpmath\n @option{-fexcess-precision=standard} is not implemented for languages\n-other than C, and has no effect if\n-@option{-funsafe-math-optimizations} or @option{-ffast-math} is\n-specified.  On the x86, it also has no effect if @option{-mfpmath=sse}\n+other than C.  On the x86, it has no effect if @option{-mfpmath=sse}\n or @option{-mfpmath=sse+387} is specified; in the former case, IEEE\n semantics apply without excess precision, and in the latter, rounding\n is unpredictable.\n@@ -9123,7 +9123,8 @@ is unpredictable.\n @opindex ffast-math\n Sets the options @option{-fno-math-errno}, @option{-funsafe-math-optimizations},\n @option{-ffinite-math-only}, @option{-fno-rounding-math},\n-@option{-fno-signaling-nans} and @option{-fcx-limited-range}.\n+@option{-fno-signaling-nans}, @option{-fcx-limited-range} and\n+@option{-fexcess-precision=fast}.\n \n This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n "}, {"sha": "58441908d110385381a5c78a26a50bd690917e2f", "filename": "gcc/opts.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e1b47dceafda7a52650915648703236bc4f23/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e1b47dceafda7a52650915648703236bc4f23/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=314e1b47dceafda7a52650915648703236bc4f23", "patch": "@@ -2342,6 +2342,10 @@ set_fast_math_flags (struct gcc_options *opts, int set)\n     opts->x_flag_errno_math = !set;\n   if (set)\n     {\n+      if (opts->frontend_set_flag_excess_precision_cmdline\n+\t  == EXCESS_PRECISION_DEFAULT)\n+\topts->x_flag_excess_precision_cmdline\n+\t  = set ? EXCESS_PRECISION_FAST : EXCESS_PRECISION_DEFAULT;\n       if (!opts->frontend_set_flag_signaling_nans)\n \topts->x_flag_signaling_nans = 0;\n       if (!opts->frontend_set_flag_rounding_math)\n@@ -2374,7 +2378,9 @@ fast_math_flags_set_p (const struct gcc_options *opts)\n \t  && opts->x_flag_unsafe_math_optimizations\n \t  && opts->x_flag_finite_math_only\n \t  && !opts->x_flag_signed_zeros\n-\t  && !opts->x_flag_errno_math);\n+\t  && !opts->x_flag_errno_math\n+\t  && opts->x_flag_excess_precision_cmdline\n+\t     == EXCESS_PRECISION_FAST);\n }\n \n /* Return true iff flags are set as if -ffast-math but using the flags stored"}]}