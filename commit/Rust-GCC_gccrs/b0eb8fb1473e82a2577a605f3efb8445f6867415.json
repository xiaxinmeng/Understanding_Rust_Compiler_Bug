{"sha": "b0eb8fb1473e82a2577a605f3efb8445f6867415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBlYjhmYjE0NzNlODJhMjU3N2E2MDVmM2VmYjg0NDVmNjg2NzQxNQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-06-20T14:20:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:17Z"}, "message": "Added FRV target hook (or at least provisional one)", "tree": {"sha": "2aad34c3e9c730532e34a6ac4013534024edcfd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aad34c3e9c730532e34a6ac4013534024edcfd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0eb8fb1473e82a2577a605f3efb8445f6867415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0eb8fb1473e82a2577a605f3efb8445f6867415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0eb8fb1473e82a2577a605f3efb8445f6867415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0eb8fb1473e82a2577a605f3efb8445f6867415/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3faf45fcf6ced5dc0ec5c532abb96fd31916de69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3faf45fcf6ced5dc0ec5c532abb96fd31916de69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3faf45fcf6ced5dc0ec5c532abb96fd31916de69"}], "stats": {"total": 123, "additions": 122, "deletions": 1}, "files": [{"sha": "46beda43fe53919aa2abe341c2577dfb884ba2e8", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b0eb8fb1473e82a2577a605f3efb8445f6867415", "patch": "@@ -381,6 +381,7 @@ bpf-*-*)\n \t;;\n frv*)\tcpu_type=frv\n \textra_options=\"${extra_options} g.opt\"\n+\trust_target_objs=\"frv-rust.o\"\n \t;;\n ft32*)\tcpu_type=ft32\n \ttarget_has_targetm_common=no"}, {"sha": "19df9ced023c5529e9618f1f6454f171a0309bc4", "filename": "gcc/config/epiphany/epiphany-rust.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Fepiphany%2Fepiphany-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Fepiphany%2Fepiphany-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-rust.c?ref=b0eb8fb1473e82a2577a605f3efb8445f6867415", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Implement TARGET_RUST_CPU_INFO for Adapteva Epiphany targets.  */\n \n-void cris_rust_target_cpu_info(void) {\n+void epiphany_rust_target_cpu_info(void) {\n     rust_add_target_info(\"target_arch\", \"epiphany\");\n \n     // llvm seems to have no support for sky (nor historical support), so names are made up by me"}, {"sha": "9cc19cb524208e089d6ea9bb83dd2e21d70bf0e3", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=b0eb8fb1473e82a2577a605f3efb8445f6867415", "patch": "@@ -26,6 +26,9 @@ extern void frv_debug_stack\t\t\t(frv_stack_t *);\n extern int frv_initial_elimination_offset\t(int, int);\n extern void frv_ifcvt_machdep_init\t\t(void *);\n \n+/* Defined in frv-rust.c  */\n+extern void frv_rust_target_cpu_info (void);\n+\n #ifdef RTX_CODE\n extern int frv_legitimate_address_p_1\t\t(machine_mode, rtx,\n \t\t\t\t\t\t int, int, int);"}, {"sha": "3dc7dc81c2040452e76a406b6f745f41346bad1b", "filename": "gcc/config/frv/frv-rust.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ffrv-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ffrv-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-rust.c?ref=b0eb8fb1473e82a2577a605f3efb8445f6867415", "patch": "@@ -0,0 +1,112 @@\n+/* Subroutines for the Rust front end for the FRV architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for FRV targets.  */\n+\n+void frv_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"frv\");\n+\n+    // llvm seems to have no support for sky (nor historical support), so names are made up by me\n+    // TODO: very subject to change\n+    // TODO maybe put in sub-arches as features? idk. might be useful in this case \n+    if (TARGET_ACC_4)\n+        rust_add_target_info(\"target_feature\", \"acc-4\");\n+    if (TARGET_ACC_8)\n+        rust_add_target_info(\"target_feature\", \"acc-8\");\n+    if (TARGET_ALIGN_LABELS)\n+        rust_add_target_info(\"target_feature\", \"align-labels\");\n+    if (TARGET_ALLOC_CC)\n+        rust_add_target_info(\"target_feature\", \"alloc-cc\");\n+    // TODO: maybe option on branch cost, but wouldn't work well as \"define only\" option\n+    if (TARGET_COND_EXEC)\n+        rust_add_target_info(\"target_feature\", \"cond-exec\");\n+    /* TODO: maybe option on cond-exec-insns, but wouldn't work well as \"define-only\" option. \n+     * also cond-exec-temps, sched-lookahead */\n+    if (TARGET_COND_MOVE)\n+        rust_add_target_info(\"target_feature\", \"cond-move\");\n+    if (TARGET_DEBUG)\n+        rust_add_target_info(\"target_feature\", \"debug\");\n+    if (TARGET_DEBUG_ARG)\n+        rust_add_target_info(\"target_feature\", \"debug-arg\");\n+    if (TARGET_DEBUG_ADDR)\n+        rust_add_target_info(\"target_feature\", \"debug-addr\");\n+    if (TARGET_DEBUG_COND_EXEC)\n+        rust_add_target_info(\"target_feature\", \"debug-cond-exec\");\n+    if (TARGET_DEBUG_LOC)\n+        rust_add_target_info(\"target_feature\", \"debug-loc\");\n+    if (TARGET_DEBUG_STACK)\n+        rust_add_target_info(\"target_feature\", \"debug-stack\");\n+    if (TARGET_DOUBLE)\n+        rust_add_target_info(\"target_feature\", \"double\");\n+    if (TARGET_DWORD)\n+        rust_add_target_info(\"target_feature\", \"dword\");\n+    if (TARGET_FDPIC)\n+        rust_add_target_info(\"target_feature\", \"fdpic\");\n+    if (TARGET_FIXED_CC)\n+        rust_add_target_info(\"target_feature\", \"fixed-cc\");\n+    if (TARGET_FPR_32)\n+        rust_add_target_info(\"target_feature\", \"fpr-32\");\n+    if (TARGET_FPR_64)\n+        rust_add_target_info(\"target_feature\", \"fpr-64\");\n+    if (TARGET_GPR_32)\n+        rust_add_target_info(\"target_feature\", \"gpr-32\");\n+    if (TARGET_GPR_64)\n+        rust_add_target_info(\"target_feature\", \"gpr-64\");\n+    if (TARGET_GPREL_RO)\n+        rust_add_target_info(\"target_feature\", \"gprel-ro\");\n+    if (TARGET_HARD_FLOAT)\n+        rust_add_target_info(\"target_feature\", \"hard-float\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"soft-float\");\n+    if (TARGET_INLINE_PLT)\n+        rust_add_target_info(\"target_feature\", \"inline-plt\");\n+    if (TARGET_LIBPIC)\n+        rust_add_target_info(\"target_feature\", \"library-pic\");\n+    if (TARGET_LINKED_FP)\n+        rust_add_target_info(\"target_feature\", \"linked-fp\");\n+    if (TARGET_LONG_CALLS)\n+        rust_add_target_info(\"target_feature\", \"long-calls\");\n+    if (TARGET_MEDIA)\n+        rust_add_target_info(\"target_feature\", \"media\");\n+    if (TARGET_MULADD)\n+        rust_add_target_info(\"target_feature\", \"muladd\");\n+    if (TARGET_MULTI_CE)\n+        rust_add_target_info(\"target_feature\", \"multi-cond-exec\");\n+    if (TARGET_NESTED_CE)\n+        rust_add_target_info(\"target_feature\", \"nested-cond-exec\");\n+    // TODO: maybe something with no-eflags if possible? tomcat-stats? multilib-library-pic?\n+    if (TARGET_OPTIMIZE_MEMBAR)\n+        rust_add_target_info(\"target_feature\", \"optimize-membar\");\n+    if (TARGET_PACK)\n+        rust_add_target_info(\"target_feature\", \"pack\");\n+    if (TARGET_SCC)\n+        rust_add_target_info(\"target_feature\", \"scc\");\n+    if (TARGET_BIG_TLS)\n+        rust_add_target_info(\"target_feature\", \"large-tls\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"small-tls\");\n+    if (TARGET_VLIW_BRANCH)\n+        rust_add_target_info(\"target_feature\", \"vliw-branch\");\n+}"}, {"sha": "64bd5f93249c2ed97df4f7033bfa7f993792bf6a", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=b0eb8fb1473e82a2577a605f3efb8445f6867415", "patch": "@@ -188,6 +188,7 @@\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_CPU_INFO frv_rust_target_cpu_info\n \f\n #define TARGET_HAS_FPRS\t\t(TARGET_HARD_FLOAT || TARGET_MEDIA)\n "}, {"sha": "428ee1c22749d52d9b161eecc9b47e8c039bd213", "filename": "gcc/config/frv/t-frv", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ft-frv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb8fb1473e82a2577a605f3efb8445f6867415/gcc%2Fconfig%2Ffrv%2Ft-frv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ft-frv?ref=b0eb8fb1473e82a2577a605f3efb8445f6867415", "patch": "@@ -34,3 +34,7 @@ MULTILIB_MATCHES\t= mcpu?simple=mcpu?fr300 \\\n MULTILIB_EXCEPTIONS\t= mcpu=frv/mno-pack* mcpu=simple/mno-pack*\n \n EXTRA_HEADERS = $(srcdir)/config/frv/frv-asm.h\n+\n+frv-rust.o: $(srcdir)/config/frv/frv-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}