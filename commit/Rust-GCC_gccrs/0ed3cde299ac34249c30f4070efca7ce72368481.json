{"sha": "0ed3cde299ac34249c30f4070efca7ce72368481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkM2NkZTI5OWFjMzQyNDljMzBmNDA3MGVmY2E3Y2U3MjM2ODQ4MQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2010-04-27T08:56:01Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-04-27T08:56:01Z"}, "message": "pr32207.c: Fix typo in expected warning messages.\n\n        * gcc.dg/pr32207.c: Fix typo in expected warning messages.\n        * gcc.dg/misc-column.c: Likewise.\n        * gcc.dg/Walways-true-1.c: Likewise.\n        * gcc.dg/Walways-true-2.c: Likewise.\n        * gcc.dg/warn-addr-cmp.c: Likewise.\n\nFrom-SVN: r158769", "tree": {"sha": "ec2aae5e1713255ac4686f2aaa3447be83f35d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec2aae5e1713255ac4686f2aaa3447be83f35d88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ed3cde299ac34249c30f4070efca7ce72368481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed3cde299ac34249c30f4070efca7ce72368481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed3cde299ac34249c30f4070efca7ce72368481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed3cde299ac34249c30f4070efca7ce72368481/comments", "author": null, "committer": null, "parents": [{"sha": "f33beee9f9213d102fc0b396657e857be3f852b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33beee9f9213d102fc0b396657e857be3f852b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33beee9f9213d102fc0b396657e857be3f852b0"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "21640d68b03e8c4932075bc3dddd9b71733fb720", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ed3cde299ac34249c30f4070efca7ce72368481", "patch": "@@ -1,3 +1,11 @@\n+2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n+\t\n+\t* gcc.dg/pr32207.c: Fix typo in expected warning messages.\n+\t* gcc.dg/misc-column.c: Likewise.\n+\t* gcc.dg/Walways-true-1.c: Likewise.\n+\t* gcc.dg/Walways-true-2.c: Likewise.\n+\t* gcc.dg/warn-addr-cmp.c: Likewise.\n+\n 2010-04-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "e4e4596cb44be8e483ad1872733ab01dbf5493be", "filename": "gcc/testsuite/gcc.dg/Walways-true-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c?ref=0ed3cde299ac34249c30f4070efca7ce72368481", "patch": "@@ -26,32 +26,32 @@ bar (int a)\n     foo (5);\n   if (&&lab)\t/* { dg-warning \"7:always evaluate as\" \"correct warning\" } */\n     foo (6);\n-  if (foo == 0)\t/* { dg-warning \"11:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (foo == 0)\t/* { dg-warning \"11:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (7);\n   if (foo (1) == 0)\n     foo (8);\n-  if (&i == 0)\t/* { dg-warning \"10:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (&i == 0)\t/* { dg-warning \"10:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (9);\n   if (i == 0)\n     foo (10);\n-  if (&a == 0)\t/* { dg-warning \"10:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (&a == 0)\t/* { dg-warning \"10:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (11);\n   if (a == 0)\n     foo (12);\n-  if (&&lab == 0) /* { dg-warning \"13:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (&&lab == 0) /* { dg-warning \"13:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (13);\n-  if (0 == foo)\t/* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (0 == foo)\t/* { dg-warning \"9:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (14);\n   if (0 == foo (1))\n     foo (15);\n-  if (0 == &i)\t/* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (0 == &i)\t/* { dg-warning \"9:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (16);\n   if (0 == i)\n     foo (17);\n-  if (0 == &a)\t/* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (0 == &a)\t/* { dg-warning \"9:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (18);\n   if (0 == a)\n     foo (19);\n-  if (0 == &&lab) /* { dg-warning \"9:the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (0 == &&lab) /* { dg-warning \"9:the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (20);\n }"}, {"sha": "af40ba65a5ac98e8c0127dea636ed37d925cb180", "filename": "gcc/testsuite/gcc.dg/Walways-true-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c?ref=0ed3cde299ac34249c30f4070efca7ce72368481", "patch": "@@ -37,11 +37,11 @@ bar (int a)\n     foo (9);\n   if (i == 0)\n     foo (10);\n-  if (&a == 0)\t/* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (&a == 0)\t/* { dg-warning \"the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (11);\n   if (a == 0)\n     foo (12);\n-  if (&&lab == 0) /* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (&&lab == 0) /* { dg-warning \"the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (13);\n   if (0 == foo)\n     foo (14);\n@@ -51,10 +51,10 @@ bar (int a)\n     foo (16);\n   if (0 == i)\n     foo (17);\n-  if (0 == &a)\t/* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (0 == &a)\t/* { dg-warning \"the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (18);\n   if (0 == a)\n     foo (19);\n-  if (0 == &&lab) /* { dg-warning \"the comparison will always evaluate to 'false'\" \"correct warning\" } */\n+  if (0 == &&lab) /* { dg-warning \"the comparison will always evaluate as 'false'\" \"correct warning\" } */\n     foo (20);\n }"}, {"sha": "e68300bfc2901da21279520a8323e568257a9bd2", "filename": "gcc/testsuite/gcc.dg/misc-column.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2Fmisc-column.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2Fmisc-column.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmisc-column.c?ref=0ed3cde299ac34249c30f4070efca7ce72368481", "patch": "@@ -19,7 +19,7 @@ void foo (void)\n   if (p < q) /* { dg-warning \"9:comparison of distinct pointer types\" } */\n     bar ();\n \n-  if (&p == 0) /* { dg-warning \"10:comparison will always evaluate to 'false'\" } */\n+  if (&p == 0) /* { dg-warning \"10:comparison will always evaluate as 'false'\" } */\n     bar();\n \n   if (p == 4) /* { dg-warning \"9:comparison between pointer and integer\" } */"}, {"sha": "cf9bef8099a29fd588b868669aa6115ae9b80368", "filename": "gcc/testsuite/gcc.dg/pr32207.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32207.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32207.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32207.c?ref=0ed3cde299ac34249c30f4070efca7ce72368481", "patch": "@@ -5,5 +5,5 @@\n extern void z();\n \n void f() { if ( z ) z(); } /* { dg-warning \"always evaluate as\" } */\n-void g() { if ( z != 0 ) z(); } /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n-void h() { if ( z != (void*)0 ) z(); } /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n+void g() { if ( z != 0 ) z(); } /* { dg-warning \"the comparison will always evaluate as 'true'\" } */\n+void h() { if ( z != (void*)0 ) z(); } /* { dg-warning \"the comparison will always evaluate as 'true'\" } */"}, {"sha": "07491d1bb98f47a876a8b5581603571a3b6cb674", "filename": "gcc/testsuite/gcc.dg/warn-addr-cmp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3cde299ac34249c30f4070efca7ce72368481/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c?ref=0ed3cde299ac34249c30f4070efca7ce72368481", "patch": "@@ -36,13 +36,13 @@ test_func_cmp (void)\n int\n test_func_cmp_rhs_zero (void)\n {\n-  if (func == 0)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n+  if (func == 0)     /* { dg-warning \"the comparison will always evaluate as 'false'\" } */\n     return 1;\n-  if (func != 0)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n+  if (func != 0)     /* { dg-warning \"the comparison will always evaluate as 'true'\" } */\n     return 1;\n-  if (&var == 0)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n+  if (&var == 0)     /* { dg-warning \"the comparison will always evaluate as 'false'\" } */\n     return 1;\n-  if (&var != 0)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n+  if (&var != 0)     /* { dg-warning \"the comparison will always evaluate as 'true'\" } */\n     return 1;\n   if (weak_func == 0)\n     return 1;\n@@ -59,13 +59,13 @@ test_func_cmp_rhs_zero (void)\n int\n test_func_cmp_lhs_zero (void)\n {\n-  if (0 == func)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n+  if (0 == func)     /* { dg-warning \"the comparison will always evaluate as 'false'\" } */\n     return 1;\n-  if (0 != func)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n+  if (0 != func)     /* { dg-warning \"the comparison will always evaluate as 'true'\" } */\n     return 1;\n-  if (0 == &var)     /* { dg-warning \"the comparison will always evaluate to 'false'\" } */\n+  if (0 == &var)     /* { dg-warning \"the comparison will always evaluate as 'false'\" } */\n     return 1;\n-  if (0 != &var)     /* { dg-warning \"the comparison will always evaluate to 'true'\" } */\n+  if (0 != &var)     /* { dg-warning \"the comparison will always evaluate as 'true'\" } */\n     return 1;\n   if (0 == weak_func)\n     return 1;"}]}