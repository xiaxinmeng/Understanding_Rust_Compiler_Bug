{"sha": "79a1a01cbd0e4a491d7078783131e3f88ca7158d", "node_id": "C_kwDOANBUbNoAKDc5YTFhMDFjYmQwZTRhNDkxZDcwNzg3ODMxMzFlM2Y4OGNhNzE1OGQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-29T21:03:41Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-04T16:01:31Z"}, "message": "c++: parse error with >= in template argument list [PR105436]\n\nThis patch fixes an oversight whereby we treated >= as the end of\na template argument.  This causes problems in C++14, because in\ncp_parser_template_argument we go different ways for C++14 and C++17:\n\n  /* It must be a non-type argument.  In C++17 any constant-expression is\n     allowed.  */\n  if (cxx_dialect > cxx14)\n    goto general_expr;\n\nso in this testcase in C++14 we get \"N\" as the template argument but in\nC++17 it is the whole \"N >= 5\" expression.  So in C++14 the remaining\n\">= 5\" triggered the newly-added diagnostic.\n\n\tPR c++/105436\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_next_token_ends_template_argument_p): Don't\n\treturn true for CPP_GREATER_EQ.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/parse/template31.C: New test.", "tree": {"sha": "6d83fea4116ee364d53020afcccf14a24aef68d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d83fea4116ee364d53020afcccf14a24aef68d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79a1a01cbd0e4a491d7078783131e3f88ca7158d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a1a01cbd0e4a491d7078783131e3f88ca7158d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a1a01cbd0e4a491d7078783131e3f88ca7158d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a1a01cbd0e4a491d7078783131e3f88ca7158d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22399ad6edcd4a2903b05196b59eec3159ceaa38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22399ad6edcd4a2903b05196b59eec3159ceaa38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22399ad6edcd4a2903b05196b59eec3159ceaa38"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "5fa743b5a8edbe877938fe61708187e565e574d6", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a1a01cbd0e4a491d7078783131e3f88ca7158d/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a1a01cbd0e4a491d7078783131e3f88ca7158d/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=79a1a01cbd0e4a491d7078783131e3f88ca7158d", "patch": "@@ -33224,7 +33224,6 @@ cp_parser_next_token_ends_template_argument_p (cp_parser *parser)\n \t  || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT)\n \t  /* For better diagnostics, treat >>= like that too, that\n \t     shouldn't appear non-nested in template arguments.  */\n-\t  || token->type == CPP_GREATER_EQ\n \t  || token->type == CPP_RSHIFT_EQ);\n }\n "}, {"sha": "a5693e851f7953f8c792fd2e95ade1974b8b26af", "filename": "gcc/testsuite/g++.dg/parse/template31.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a1a01cbd0e4a491d7078783131e3f88ca7158d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a1a01cbd0e4a491d7078783131e3f88ca7158d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate31.C?ref=79a1a01cbd0e4a491d7078783131e3f88ca7158d", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/105436\n+\n+template<bool> struct A;\n+template<int N> A<N >= 5> f();"}]}