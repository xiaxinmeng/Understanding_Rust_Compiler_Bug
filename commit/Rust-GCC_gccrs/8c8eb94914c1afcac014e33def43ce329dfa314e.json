{"sha": "8c8eb94914c1afcac014e33def43ce329dfa314e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM4ZWI5NDkxNGMxYWZjYWMwMTRlMzNkZWY0M2NlMzI5ZGZhMzE0ZQ==", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2020-04-13T06:53:32Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2020-06-15T10:35:50Z"}, "message": "gcc: xtensa: add -mabi option for call0/windowed ABI\n\n2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\ngcc/\n\t* config/xtensa/elf.h (ASM_SPEC, LINK_SPEC): Pass ABI switch to\n\tassembler/linker.\n\t* config/xtensa/linux.h (ASM_SPEC, LINK_SPEC): Ditto.\n\t* config/xtensa/uclinux.h (ASM_SPEC, LINK_SPEC): Ditto.\n\t* config/xtensa/xtensa.c (xtensa_option_override): Initialize\n\txtensa_windowed_abi if needed.\n\t* config/xtensa/xtensa.h (TARGET_WINDOWED_ABI_DEFAULT): New\n\tmacro.\n\t(TARGET_WINDOWED_ABI): Redefine to xtensa_windowed_abi.\n\t* config/xtensa/xtensa.opt (xtensa_windowed_abi): New target\n\toption variable.\n\t(mabi=call0, mabi=windowed): New options.\n\t* doc/invoke.texi: Document new -mabi= Xtensa-specific options.\n\ngcc/testsuite/\n\t* gcc.target/xtensa/mabi-call0.c: New test.\n\t* gcc.target/xtensa/mabi-windowed.c: New test.\n\nlibgcc/\n\t* configure: Regenerate.\n\t* configure.ac: Use AC_COMPILE_IFELSE instead of manual\n\tpreprocessor invocation to check for __XTENSA_CALL0_ABI__.", "tree": {"sha": "247b0573a9dc63fa160111995e68501bc19b9986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247b0573a9dc63fa160111995e68501bc19b9986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c8eb94914c1afcac014e33def43ce329dfa314e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8eb94914c1afcac014e33def43ce329dfa314e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8eb94914c1afcac014e33def43ce329dfa314e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8eb94914c1afcac014e33def43ce329dfa314e/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50c32fa7ab4d3bb8b8091c6d38186799b81093b"}], "stats": {"total": 132, "additions": 103, "deletions": 29}, "files": [{"sha": "48e2590e9b69f06069a90d9ba0b4c7fd69bbae6b", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -47,7 +47,9 @@ along with GCC; see the file COPYING3.  If not see\n   %{mlongcalls:--longcalls} \\\n   %{mno-longcalls:--no-longcalls} \\\n   %{mauto-litpools:--auto-litpools} \\\n-  %{mno-auto-litpools:--no-auto-litpools}\"\n+  %{mno-auto-litpools:--no-auto-litpools} \\\n+  %{mabi=windowed:--abi-windowed} \\\n+  %{mabi=call0:--abi-call0}\"\n \n #undef LIB_SPEC\n #define LIB_SPEC \"-lc -lsim -lc -lhandlers-sim -lhal\"\n@@ -65,7 +67,9 @@ along with GCC; see the file COPYING3.  If not see\n   %{!shared: \\\n     %{!static: \\\n       %{rdynamic:-export-dynamic} \\\n-    %{static:-static}}}\"\n+    %{static:-static}}} \\\n+  %{mabi=windowed:--abi-windowed} \\\n+  %{mabi=call0:--abi-call0}\"\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX\t\".\""}, {"sha": "bd20595c32438fa531537e9830d28090bd078ac5", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -44,7 +44,9 @@ along with GCC; see the file COPYING3.  If not see\n   %{mlongcalls:--longcalls} \\\n   %{mno-longcalls:--no-longcalls} \\\n   %{mauto-litpools:--auto-litpools} \\\n-  %{mno-auto-litpools:--no-auto-litpools}\"\n+  %{mno-auto-litpools:--no-auto-litpools} \\\n+  %{mabi=windowed:--abi-windowed} \\\n+  %{mabi=call0:--abi-call0}\"\n \n #define GLIBC_DYNAMIC_LINKER \"/lib/ld.so.1\"\n \n@@ -55,7 +57,9 @@ along with GCC; see the file COPYING3.  If not see\n     %{!static: \\\n       %{rdynamic:-export-dynamic} \\\n       -dynamic-linker \" GNU_USER_DYNAMIC_LINKER \"} \\\n-    %{static:-static}}\"\n+    %{static:-static}} \\\n+  %{mabi=windowed:--abi-windowed} \\\n+  %{mabi=call0:--abi-call0}\"\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX\t\".\""}, {"sha": "374d2947a0ddb21b906eb658bf05e6374e84dc12", "filename": "gcc/config/xtensa/uclinux.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fuclinux.h?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -51,10 +51,15 @@ along with GCC; see the file COPYING3.  If not see\n   %{mlongcalls:--longcalls} \\\n   %{mno-longcalls:--no-longcalls} \\\n   %{mauto-litpools:--auto-litpools} \\\n-  %{mno-auto-litpools:--no-auto-litpools}\"\n+  %{mno-auto-litpools:--no-auto-litpools} \\\n+  %{mabi=windowed:--abi-windowed} \\\n+  %{mabi=call0:--abi-call0}\"\n \n #undef LINK_SPEC\n-#define LINK_SPEC \"%{!no-elf2flt:%{!elf2flt*:-elf2flt}}\"\n+#define LINK_SPEC \\\n+ \"%{!no-elf2flt:%{!elf2flt*:-elf2flt}} \\\n+  %{mabi=windowed:--abi-windowed} \\\n+  %{mabi=call0:--abi-call0}\"\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX\t\".\""}, {"sha": "e370aa4623c12adfea2b7d7ea57638fa17159b88", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -2219,6 +2219,9 @@ xtensa_option_override (void)\n   int regno;\n   machine_mode mode;\n \n+  if (xtensa_windowed_abi == -1)\n+    xtensa_windowed_abi = TARGET_WINDOWED_ABI_DEFAULT;\n+\n   /* Use CONST16 in the absence of L32R.\n      Set it in the TARGET_OPTION_OVERRIDE to avoid dependency on xtensa\n      configuration in the xtensa-common.c  */"}, {"sha": "33bfe45a6e1126856ff0a8b53386a9a4bd8c4835", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -64,7 +64,8 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_ABSOLUTE_LITERALS XSHAL_USE_ABSOLUTE_LITERALS\n #define TARGET_THREADPTR\tXCHAL_HAVE_THREADPTR\n #define TARGET_LOOPS\t        XCHAL_HAVE_LOOPS\n-#define TARGET_WINDOWED_ABI\t(XSHAL_ABI == XTHAL_ABI_WINDOWED)\n+#define TARGET_WINDOWED_ABI_DEFAULT (XSHAL_ABI == XTHAL_ABI_WINDOWED)\n+#define TARGET_WINDOWED_ABI\txtensa_windowed_abi\n #define TARGET_DEBUG\t\tXCHAL_HAVE_DEBUG\n #define TARGET_L32R\t\tXCHAL_HAVE_L32R\n "}, {"sha": "0c4aa921effea418d4f4acf0319b001753c43993", "filename": "gcc/config/xtensa/xtensa.opt", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -45,3 +45,14 @@ Relax literals in assembler and place them automatically in the text section.\n mserialize-volatile\n Target Report Mask(SERIALIZE_VOLATILE)\n -mno-serialize-volatile\tDo not serialize volatile memory references with MEMW instructions.\n+\n+TargetVariable\n+int xtensa_windowed_abi = -1\n+\n+mabi=call0\n+Target Report RejectNegative Var(xtensa_windowed_abi, 0)\n+Use call0 ABI.\n+\n+mabi=windowed\n+Target Report RejectNegative Var(xtensa_windowed_abi, 1)\n+Use windowed registers ABI."}, {"sha": "74ab149a0359b57cca6ad3fcbd0b5000f35d6a74", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -1386,7 +1386,8 @@ See RS/6000 and PowerPC Options.\n -mtext-section-literals  -mno-text-section-literals @gol\n -mauto-litpools  -mno-auto-litpools @gol\n -mtarget-align  -mno-target-align @gol\n--mlongcalls  -mno-longcalls}\n+-mlongcalls  -mno-longcalls @gol\n+-mabi=@var{abi-type}}\n \n @emph{zSeries Options}\n See S/390 and zSeries Options.\n@@ -30780,6 +30781,29 @@ assembly code generated by GCC still shows direct call\n instructions---look at the disassembled object code to see the actual\n instructions.  Note that the assembler uses an indirect call for\n every cross-file call, not just those that really are out of range.\n+\n+@item -mabi=@var{name}\n+@opindex mabi\n+Generate code for the specified ABI@.  Permissible values are: @samp{call0},\n+@samp{windowed}.  Default ABI is chosen by the Xtensa core configuration.\n+\n+@item -mabi=call0\n+@opindex mabi=call0\n+When this option is enabled function parameters are passed in registers\n+@code{a2} through @code{a7}, registers @code{a12} through @code{a15} are\n+caller-saved, and register @code{a15} may be used as a frame pointer.\n+When this version of the ABI is enabled the C preprocessor symbol\n+@code{__XTENSA_CALL0_ABI__} is defined.\n+\n+@item -mabi=windowed\n+@opindex mabi=windowed\n+When this option is enabled function parameters are passed in registers\n+@code{a10} through @code{a15}, and called function rotates register window\n+by 8 registers on entry so that its arguments are found in registers\n+@code{a2} through @code{a7}.  Register @code{a7} may be used as a frame\n+pointer.  Register window is rotated 8 registers back upon return.\n+When this version of the ABI is enabled the C preprocessor symbol\n+@code{__XTENSA_WINDOWED_ABI__} is defined.\n @end table\n \n @node zSeries Options"}, {"sha": "65d72952810609182f0fad5a9bd4f25dc8023523", "filename": "gcc/testsuite/gcc.target/xtensa/mabi-call0.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fmabi-call0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fmabi-call0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fmabi-call0.c?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=call0\" } */\n+\n+#ifndef __XTENSA_CALL0_ABI__\n+#error\n+#endif\n+\n+void foo(void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \"entry\" } } */\n+/* { dg-final { scan-assembler-not \"retw\" } } */"}, {"sha": "aaddf41d78d6b3f2b65c50e3eb29cce677c3530c", "filename": "gcc/testsuite/gcc.target/xtensa/mabi-windowed.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fmabi-windowed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fmabi-windowed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fmabi-windowed.c?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=windowed\" } */\n+\n+#ifndef __XTENSA_WINDOWED_ABI__\n+#error\n+#endif\n+\n+void foo(void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"entry\" } } */\n+/* { dg-final { scan-assembler \"retw\" } } */"}, {"sha": "284e4db0cddf678ea0823947169326337876d06b", "filename": "libgcc/configure", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -5330,19 +5330,17 @@ esac\n # This is after config.host so we can augment tmake_file.\n case ${host} in\n xtensa*-*)\n-  cat > conftest.c <<EOF\n-\t#ifdef __XTENSA_CALL0_ABI__\n-\t#error\n-\t#endif\n-EOF\n-  if { ac_try='${CC-cc} -E -o conftest.i conftest.c 1>&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }; then\n-      tmake_file=\"${tmake_file} xtensa/t-windowed\"\n-  fi\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#ifdef __XTENSA_CALL0_ABI__\n+\t\t      #error\n+\t\t      #endif\n+\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  tmake_file=\"${tmake_file} xtensa/t-windowed\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n   ;;\n esac\n "}, {"sha": "ef0d79975e164e1e58fe0da06aa693b92e3c1472", "filename": "libgcc/configure.ac", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8eb94914c1afcac014e33def43ce329dfa314e/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8eb94914c1afcac014e33def43ce329dfa314e/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=8c8eb94914c1afcac014e33def43ce329dfa314e", "patch": "@@ -515,14 +515,12 @@ AC_SUBST(solaris_ld_v2_maps)\n # This is after config.host so we can augment tmake_file.\n case ${host} in\n xtensa*-*)\n-  cat > conftest.c <<EOF\n-\t#ifdef __XTENSA_CALL0_ABI__\n-\t#error\n-\t#endif\n-EOF\n-  if AC_TRY_COMMAND(${CC-cc} -E -o conftest.i conftest.c 1>&AS_MESSAGE_LOG_FD); then\n-      tmake_file=\"${tmake_file} xtensa/t-windowed\"\n-  fi\n+  AC_COMPILE_IFELSE([AC_LANG_SOURCE(\n+\t\t     [#ifdef __XTENSA_CALL0_ABI__\n+\t\t      #error\n+\t\t      #endif\n+\t\t      ])],\n+\t\t      [tmake_file=\"${tmake_file} xtensa/t-windowed\"])\n   ;;\n esac\n "}]}