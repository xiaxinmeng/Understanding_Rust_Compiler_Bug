{"sha": "1732457d7f4e10944f15e4fe7c5943818d81a006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczMjQ1N2Q3ZjRlMTA5NDRmMTVlNGZlN2M1OTQzODE4ZDgxYTAwNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-04-01T11:23:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-04-01T11:23:54Z"}, "message": "re PR target/31388 (ICE building libiberty multilib for mips16 multilibs)\n\ngcc/\n\tPR target/31388\n\t* config/mips/mips.md (load_const_gp): New insn.\n\t* config/mips/mips.c (mips_split_symbol): Avoid using or creating\n\tthe MIPS16 GP pseudo register if no_new_pseudos.\n\t(mips16_gp_pseudo_reg): Use gen_load_const_gp.\n\nFrom-SVN: r123398", "tree": {"sha": "f3beda1fc6d7a4561745b16ef9bd5a83fdaf23a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3beda1fc6d7a4561745b16ef9bd5a83fdaf23a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1732457d7f4e10944f15e4fe7c5943818d81a006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1732457d7f4e10944f15e4fe7c5943818d81a006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1732457d7f4e10944f15e4fe7c5943818d81a006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1732457d7f4e10944f15e4fe7c5943818d81a006/comments", "author": null, "committer": null, "parents": [{"sha": "4719fc489ca9ce82d20ac68c9e7d82ca5116693b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4719fc489ca9ce82d20ac68c9e7d82ca5116693b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4719fc489ca9ce82d20ac68c9e7d82ca5116693b"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "7d8f39bb7d9d2a4deaaac5fc5930faf6b22d2ca7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732457d7f4e10944f15e4fe7c5943818d81a006/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732457d7f4e10944f15e4fe7c5943818d81a006/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1732457d7f4e10944f15e4fe7c5943818d81a006", "patch": "@@ -1,3 +1,11 @@\n+2007-04-01  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/31388\n+\t* config/mips/mips.md (load_const_gp): New insn.\n+\t* config/mips/mips.c (mips_split_symbol): Avoid using or creating\n+\tthe MIPS16 GP pseudo register if no_new_pseudos.\n+\t(mips16_gp_pseudo_reg): Use gen_load_const_gp.\n+\n 2007-03-31  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR target/31364"}, {"sha": "4c0ce09a36d161c162f1f59c026ff42f7c66142f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732457d7f4e10944f15e4fe7c5943818d81a006/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732457d7f4e10944f15e4fe7c5943818d81a006/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1732457d7f4e10944f15e4fe7c5943818d81a006", "patch": "@@ -1888,10 +1888,15 @@ mips_split_symbol (rtx temp, rtx addr)\n {\n   rtx high;\n \n-  if (TARGET_MIPS16)\n-    high = mips16_gp_pseudo_reg ();\n-  else\n+  if (!TARGET_MIPS16)\n     high = mips_force_temporary (temp, gen_rtx_HIGH (Pmode, copy_rtx (addr)));\n+  else if (no_new_pseudos)\n+    {\n+      emit_insn (gen_load_const_gp (copy_rtx (temp)));\n+      high = temp;\n+    }\n+  else\n+    high = mips16_gp_pseudo_reg ();\n   return gen_rtx_LO_SUM (Pmode, high, addr);\n }\n \n@@ -7808,19 +7813,13 @@ mips16_gp_pseudo_reg (void)\n {\n   if (cfun->machine->mips16_gp_pseudo_rtx == NULL_RTX)\n     {\n-      rtx unspec;\n       rtx insn, scan;\n \n       cfun->machine->mips16_gp_pseudo_rtx = gen_reg_rtx (Pmode);\n \n       /* We want to initialize this to a value which gcc will believe\n          is constant.  */\n-      start_sequence ();\n-      unspec = gen_rtx_UNSPEC (VOIDmode, gen_rtvec (1, const0_rtx), UNSPEC_GP);\n-      emit_move_insn (cfun->machine->mips16_gp_pseudo_rtx,\n-\t\t      gen_rtx_CONST (Pmode, unspec));\n-      insn = get_insns ();\n-      end_sequence ();\n+      insn = gen_load_const_gp (cfun->machine->mips16_gp_pseudo_rtx);\n \n       push_topmost_sequence ();\n       /* We need to emit the initialization after the FUNCTION_BEG"}, {"sha": "cfe7150d49596dc1ba0e406a1df1559f183f909d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732457d7f4e10944f15e4fe7c5943818d81a006/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732457d7f4e10944f15e4fe7c5943818d81a006/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=1732457d7f4e10944f15e4fe7c5943818d81a006", "patch": "@@ -4074,6 +4074,11 @@\n   [(set_attr \"type\"\t\"mfc\")\n    (set_attr \"mode\"\t\"SF\")])\n \n+;; Move a constant that satisfies CONST_GP_P into operand 0.\n+(define_expand \"load_const_gp\"\n+  [(set (match_operand 0 \"register_operand\" \"=d\")\n+\t(const (unspec [(const_int 0)] UNSPEC_GP)))])\n+\n ;; Insn to initialize $gp for n32/n64 abicalls.  Operand 0 is the offset\n ;; of _gp from the start of this function.  Operand 1 is the incoming\n ;; function address."}]}