{"sha": "d912240d907b6b595e27fc8c3cf027dfc10dd359", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxMjI0MGQ5MDdiNmI1OTVlMjdmYzhjM2NmMDI3ZGZjMTBkZDM1OQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-03-24T20:19:51Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-03-24T20:19:51Z"}, "message": "re PR fortran/30655 (Undue out-of-bounds warning)\n\n\tPR fortran/30655\n\n\t* expr.c (check_dimension): Fix logic of comparisons.\n\n\t* gfortran.dg/bounds_check_6.f90: New test.\n\nFrom-SVN: r123187", "tree": {"sha": "4e436b9650956b3743ada17633b4b415416f5ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e436b9650956b3743ada17633b4b415416f5ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d912240d907b6b595e27fc8c3cf027dfc10dd359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d912240d907b6b595e27fc8c3cf027dfc10dd359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d912240d907b6b595e27fc8c3cf027dfc10dd359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d912240d907b6b595e27fc8c3cf027dfc10dd359/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f703423a3b5cc31172d60f2d5e91ad04d9c91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f703423a3b5cc31172d60f2d5e91ad04d9c91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f703423a3b5cc31172d60f2d5e91ad04d9c91b"}], "stats": {"total": 89, "additions": 56, "deletions": 33}, "files": [{"sha": "d99b31f567ac0bd3758250daf968bc2652bd0086", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d912240d907b6b595e27fc8c3cf027dfc10dd359", "patch": "@@ -1,3 +1,8 @@\n+2007-03-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30655\n+\t* expr.c (check_dimension): Fix logic of comparisons.\n+\n 2007-03-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31215"}, {"sha": "164a0cb9020addf605fb772295f2917fe0d68938", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d912240d907b6b595e27fc8c3cf027dfc10dd359", "patch": "@@ -2507,48 +2507,53 @@ check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)\n       break;\n \n     case AR_SECTION:\n-      if (compare_bound_int (ar->stride[i], 0) == CMP_EQ)\n-\t{\n-\t  gfc_error (\"Illegal stride of zero at %L\", &ar->c_where[i]);\n-\t  return FAILURE;\n-\t}\n-\n+      {\n #define AR_START (ar->start[i] ? ar->start[i] : as->lower[i])\n #define AR_END (ar->end[i] ? ar->end[i] : as->upper[i])\n \n-      if (compare_bound (AR_START, AR_END) == CMP_EQ\n-\t  && (compare_bound (AR_START, as->lower[i]) == CMP_LT\n-\t      || compare_bound (AR_START, as->upper[i]) == CMP_GT))\n-\tgoto bound;\n+\tcomparison comp_start_end = compare_bound (AR_START, AR_END);\n \n-      if (((compare_bound_int (ar->stride[i], 0) == CMP_GT\n-\t    || ar->stride[i] == NULL)\n-\t   && compare_bound (AR_START, AR_END) != CMP_GT)\n-\t  || (compare_bound_int (ar->stride[i], 0) == CMP_LT\n-\t      && compare_bound (AR_START, AR_END) != CMP_LT))\n-\t{\n-\t  if (compare_bound (AR_START, as->lower[i]) == CMP_LT)\n-\t    goto bound;\n-\t  if (compare_bound (AR_START, as->upper[i]) == CMP_GT)\n-\t    goto bound;\n-\t}\n+\t/* Check for zero stride, which is not allowed.  */\n+\tif (compare_bound_int (ar->stride[i], 0) == CMP_EQ)\n+\t  {\n+\t    gfc_error (\"Illegal stride of zero at %L\", &ar->c_where[i]);\n+\t    return FAILURE;\n+\t  }\n \n-      mpz_init (last_value);\n-      if (compute_last_value_for_triplet (AR_START, AR_END, ar->stride[i],\n-\t\t\t\t\t  last_value))\n-\t{\n-\t  if (compare_bound_mpz_t (as->lower[i], last_value) == CMP_GT\n-\t      || compare_bound_mpz_t (as->upper[i], last_value) == CMP_LT)\n-\t    {\n-\t      mpz_clear (last_value);\n+\t/* if start == len || (stride > 0 && start < len)\n+\t\t\t   || (stride < 0 && start > len),\n+\t   then the array section contains at least one element.  In this\n+\t   case, there is an out-of-bounds access if\n+\t   (start < lower || start > upper).  */\n+\tif (compare_bound (AR_START, AR_END) == CMP_EQ\n+\t    || ((compare_bound_int (ar->stride[i], 0) == CMP_GT\n+\t\t || ar->stride[i] == NULL) && comp_start_end == CMP_LT)\n+\t    || (compare_bound_int (ar->stride[i], 0) == CMP_LT\n+\t        && comp_start_end == CMP_GT))\n+\t  {\n+\t    if (compare_bound (AR_START, as->lower[i]) == CMP_LT\n+\t\t|| compare_bound (AR_START, as->upper[i]) == CMP_GT)\n \t      goto bound;\n-\t    }\n-\t}\n-      mpz_clear (last_value);\n+\t  }\n+\n+\t/* If we can compute the highest index of the array section,\n+\t   then it also has to be between lower and upper.  */\n+\tmpz_init (last_value);\n+\tif (compute_last_value_for_triplet (AR_START, AR_END, ar->stride[i],\n+\t\t\t\t\t    last_value))\n+\t  {\n+\t    if (compare_bound_mpz_t (as->lower[i], last_value) == CMP_GT\n+\t        || compare_bound_mpz_t (as->upper[i], last_value) == CMP_LT)\n+\t      {\n+\t        mpz_clear (last_value);\n+\t        goto bound;\n+\t      }\n+\t  }\n+\tmpz_clear (last_value);\n \n #undef AR_START\n #undef AR_END\n-\n+      }\n       break;\n \n     default:"}, {"sha": "e8650e49b7989a8e910fe852261c84be80da31cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d912240d907b6b595e27fc8c3cf027dfc10dd359", "patch": "@@ -1,3 +1,8 @@\n+2007-03-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30655\n+\t* gfortran.dg/bounds_check_6.f90: New test.\n+\n 2007-03-23  Michael Meissner  <michael.meissner@amd.com>\n \n \t* gcc.dg/dfp/convert-dfp.c: Wrap __STDC_WANT_DEC_FP__ with"}, {"sha": "6535db76005220a44106008a3c8b3ad572761585", "filename": "gcc/testsuite/gfortran.dg/bounds_check_6.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d912240d907b6b595e27fc8c3cf027dfc10dd359/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_6.f90?ref=d912240d907b6b595e27fc8c3cf027dfc10dd359", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+!\n+! Testcase for PR30655, we used to issue a compile-time warning\n+  integer i(12), j\n+  j = -1\n+  i(0:j) = 42\n+  end"}]}