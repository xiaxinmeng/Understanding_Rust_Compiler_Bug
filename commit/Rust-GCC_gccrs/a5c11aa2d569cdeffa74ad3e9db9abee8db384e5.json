{"sha": "a5c11aa2d569cdeffa74ad3e9db9abee8db384e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVjMTFhYTJkNTY5Y2RlZmZhNzRhZDNlOWRiOWFiZWU4ZGIzODRlNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-04-17T18:07:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:22Z"}, "message": "[Ada] Additional legality rule for indexing operation for derived type\n\n2020-06-17  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb: (Check_Inherited_Indexing): Check that a type\n\tderived from an indexable container type cannot specify an\n\tindexing aspect if the same aspect is not specified for the\n\tparent type (RM 4.1.6 (6/5), AI12-160). Add a check that a\n\tspecified indexing aspect for a derived type is confirming.", "tree": {"sha": "2dbf937696ec632115db8e8d92a1de230fe868d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dbf937696ec632115db8e8d92a1de230fe868d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5c11aa2d569cdeffa74ad3e9db9abee8db384e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c11aa2d569cdeffa74ad3e9db9abee8db384e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c11aa2d569cdeffa74ad3e9db9abee8db384e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c11aa2d569cdeffa74ad3e9db9abee8db384e5/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d9bab0aa00d6968621ec5db2ca36862ed6a64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d9bab0aa00d6968621ec5db2ca36862ed6a64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d9bab0aa00d6968621ec5db2ca36862ed6a64c"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "3a0a4b2331dd8c4366b39cd1f7cf49252225eeb4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c11aa2d569cdeffa74ad3e9db9abee8db384e5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c11aa2d569cdeffa74ad3e9db9abee8db384e5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a5c11aa2d569cdeffa74ad3e9db9abee8db384e5", "patch": "@@ -5172,6 +5172,8 @@ package body Sem_Ch13 is\n          procedure Check_Inherited_Indexing;\n          --  For a derived type, check that no indexing aspect is specified\n          --  for the type if it is also inherited\n+         --  AI12-0160: verify that an indexing cannot be specified for\n+         --  a derived type unless it is specified for the parent.\n \n          procedure Check_One_Function (Subp : Entity_Id);\n          --  Check one possible interpretation. Sets Indexing_Found True if a\n@@ -5186,15 +5188,21 @@ package body Sem_Ch13 is\n          ------------------------------\n \n          procedure Check_Inherited_Indexing is\n-            Inherited : Node_Id;\n+            Inherited      : Node_Id;\n+            Other_Indexing : Node_Id;\n \n          begin\n             if Attr = Name_Constant_Indexing then\n                Inherited :=\n                  Find_Aspect (Etype (Ent), Aspect_Constant_Indexing);\n+               Other_Indexing :=\n+                 Find_Aspect (Etype (Ent), Aspect_Variable_Indexing);\n+\n             else pragma Assert (Attr = Name_Variable_Indexing);\n                Inherited :=\n                   Find_Aspect (Etype (Ent), Aspect_Variable_Indexing);\n+               Other_Indexing :=\n+                 Find_Aspect (Etype (Ent), Aspect_Constant_Indexing);\n             end if;\n \n             if Present (Inherited) then\n@@ -5207,6 +5215,16 @@ package body Sem_Ch13 is\n                elsif Aspect_Rep_Item (Inherited) = N then\n                   null;\n \n+               --  Check if this is a confirming specification. The name\n+               --  may be overloaded between the parent operation and the\n+               --  inherited one, so we check that the Chars fields match.\n+\n+               elsif Is_Entity_Name (Expression (Inherited))\n+                 and then Chars (Entity (Expression (Inherited))) =\n+                    Chars (Entity (Expression (N)))\n+               then\n+                  Indexing_Found := True;\n+\n                --  Indicate the operation that must be overridden, rather than\n                --  redefining the indexing aspect.\n \n@@ -5217,6 +5235,15 @@ package body Sem_Ch13 is\n                     (\"!override & instead\",\n                      N, Entity (Expression (Inherited)));\n                end if;\n+\n+            --  If not inherited and the parent has another indexing function\n+            --  this is illegal, because it leads to inconsistent results in\n+            --  class-wide calls.\n+\n+            elsif Present (Other_Indexing) then\n+               Error_Msg_N\n+                 (\"cannot specify indexing operation on derived type\"\n+                   & \" if not specified for parent\", N);\n             end if;\n          end Check_Inherited_Indexing;\n \n@@ -5239,7 +5266,12 @@ package body Sem_Ch13 is\n                   --  Indexing function can't be declared elsewhere\n \n                   Illegal_Indexing\n-                    (\"indexing function must be declared in scope of type&\");\n+                    (\"indexing function must be declared\"\n+                      & \" in scope of type&\");\n+               end if;\n+\n+               if Is_Derived_Type (Ent) then\n+                  Check_Inherited_Indexing;\n                end if;\n \n                return;"}]}