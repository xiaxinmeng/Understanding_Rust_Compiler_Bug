{"sha": "b38ab29fe979d03b6eeb24308177f20cd028815e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4YWIyOWZlOTc5ZDAzYjZlZWIyNDMwODE3N2YyMGNkMDI4ODE1ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-30T22:13:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-30T22:13:36Z"}, "message": "mmx.md (EMMS): New int iterator.\n\n\t* config/i386/mmx.md (EMMS): New int iterator.\n\t(emms): New int attribute.\n\t(mmx_<emms>): Macroize insn from *mmx_emms and *mmx_femms using\n\tEMMS int iterator.  Explicitly declare clobbers.\n\t(mmx_emms): Remove expander.\n\t(mmx_femms): Ditto.\n\t* config/i386/predicates.md (emms_operation): Remove predicate.\n\t(vzeroall_pattern): New predicate.\n\t(vzeroupper_pattern): Rename from vzeroupper_operation.\n\t* config/i386/i386.c (ix86_avx_u128_mode_after): Use\n\tvzeroupper_pattern and vzeroall_pattern predicates.\n\nFrom-SVN: r264727", "tree": {"sha": "6f5d025b3469f76204ec05b1d8229e8f79ab75b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5d025b3469f76204ec05b1d8229e8f79ab75b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b38ab29fe979d03b6eeb24308177f20cd028815e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38ab29fe979d03b6eeb24308177f20cd028815e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38ab29fe979d03b6eeb24308177f20cd028815e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38ab29fe979d03b6eeb24308177f20cd028815e/comments", "author": null, "committer": null, "parents": [{"sha": "0df92803a9f297fd8af6f23b224f15e1cf12f12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df92803a9f297fd8af6f23b224f15e1cf12f12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df92803a9f297fd8af6f23b224f15e1cf12f12a"}], "stats": {"total": 168, "additions": 62, "deletions": 106}, "files": [{"sha": "54f3e9bc9970ecc142c2251cef8d36027413864f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b38ab29fe979d03b6eeb24308177f20cd028815e", "patch": "@@ -1,3 +1,17 @@\n+2018-09-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (EMMS): New int iterator.\n+\t(emms): New int attribute.\n+\t(mmx_<emms>): Macroize insn from *mmx_emms and *mmx_femms using\n+\tEMMS int iterator.  Explicitly declare clobbers.\n+\t(mmx_emms): Remove expander.\n+\t(mmx_femms): Ditto.\n+\t* config/i386/predicates.md (emms_operation): Remove predicate.\n+\t(vzeroall_pattern): New predicate.\n+\t(vzeroupper_pattern): Rename from vzeroupper_operation.\n+\t* config/i386/i386.c (ix86_avx_u128_mode_after): Use\n+\tvzeroupper_pattern and vzeroall_pattern predicates.\n+\n 2018-09-30  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR rtl-optimization/86939\n@@ -94,7 +108,7 @@\n \t* configure: Regenerate.\n \n 2018-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n-            Pierre-Marie de Rodat  <derodat@adacore.com>\n+\t    Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* calls.c (expand_call): Try to do a tail call for thunks at -O0 too.\n \t* cgraph.h (struct cgraph_thunk_info): Add indirect_offset.\n@@ -268,7 +282,7 @@\n \tto subblocks.\n \n 2018-09-27  Andrew Stubbs  <ams@codesourcery.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \tPR 82089\n \n@@ -428,7 +442,7 @@\n 2018-09-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c/87387\n-        * builtins.c (unterminated_array): Simplify.\n+\t* builtins.c (unterminated_array): Simplify.\n \t* expr.c (string_constant): Handle SSA_NAME.  Add more exceptions\n \twhere pointer arithmetic is safe.\n \n@@ -629,7 +643,7 @@\n \n \t* genattrtab.c (mk_attr_alt): Use alternative_mask.\n \t(attr_rtx_1): Adjust caching to match the new EQ_ATTR_ALT field\n-        types.\n+\ttypes.\n \t(check_attr_test): Use alternative_mask.\n \t(get_attr_value): Likewise.\n \t(compute_alternative_mask): Use alternative_mask and XWINT.\n@@ -639,11 +653,11 @@\n \t(attr_alt_intersection): Use alternative_mask and XWINT.\n \t(attr_alt_union): Likewise.\n \t(attr_alt_complement): Use HOST_WIDE_INT and XWINT.\n-        (mk_attr_alt): Use alternative_mask and HOST_WIDE_INT.\n+\t(mk_attr_alt): Use alternative_mask and HOST_WIDE_INT.\n \t(simplify_test_exp): Use alternative_mask and XWINT.\n \t(write_test_expr): Use alternative_mask and XWINT, adjust bit\n-        number calculation to support 64 bits.  Generate code that\n-        checks 64-bit masks.\n+\tnumber calculation to support 64 bits.  Generate code that\n+\tchecks 64-bit masks.\n \t(main): Use alternative_mask.\n \t* rtl.def (EQ_ATTR_ALT): Change field types from ii to ww.\n \n@@ -730,7 +744,7 @@\n 2018-09-23   Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (regclass_map): Declare integer REX registers\n-        as GENERAL_REGS.\n+\tas GENERAL_REGS.\n \n 2018-09-23  Gerald Pfeifer  <gerald@pfeifer.com>\n \n@@ -818,7 +832,7 @@\n \t* config.gcc: Prepend vxworks-dummy.h to tm_file for powerpc*\n \n 2018-09-21  Shaokun Zhang  <zhangshaokun@hisilicon.com>\n-            Bo Zhou  <zbo.zhou@hisilicon.com>\n+\t    Bo Zhou  <zbo.zhou@hisilicon.com>\n \n \t* config/aarch64/aarch64-cores.def (tsv110): New CPU.\n \t* config/aarch64/aarch64-tune.md: Regenerated.\n@@ -1549,7 +1563,7 @@\n \t* cfgexpand.c (expand_gimple_cond): Likewise.\n \n 2018-09-09  Cesar Philippidis  <cesar@codesourcery.com>\n-            Julian Brown  <julian@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n \n \tPR middle-end/86336\n \t* gimplify.c (gimplify_scan_omp_clauses): Set"}, {"sha": "55bf18b171cd75e7bd95bc7201dbb9de221f02d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b38ab29fe979d03b6eeb24308177f20cd028815e", "patch": "@@ -18957,8 +18957,8 @@ ix86_avx_u128_mode_after (int mode, rtx_insn *insn)\n {\n   rtx pat = PATTERN (insn);\n \n-  if (vzeroupper_operation (pat, VOIDmode)\n-      || vzeroall_operation (pat, VOIDmode))\n+  if (vzeroupper_pattern (pat, VOIDmode)\n+      || vzeroall_pattern (pat, VOIDmode))\n     return AVX_U128_CLEAN;\n \n   /* We know that state is clean after CALL insn if there are no"}, {"sha": "b1496f5405bf1f42967c79f0ba13e0ea0b91f9e3", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 28, "deletions": 62, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=b38ab29fe979d03b6eeb24308177f20cd028815e", "patch": "@@ -1570,68 +1570,34 @@\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_expand \"mmx_emms\"\n-  [(match_par_dup 0 [(const_int 0)])]\n-  \"TARGET_MMX\"\n-{\n-  int regno;\n-\n-  operands[0] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (17));\n-\n-  XVECEXP (operands[0], 0, 0)\n-    = gen_rtx_UNSPEC_VOLATILE (VOIDmode, gen_rtvec (1, const0_rtx),\n-\t\t\t       UNSPECV_EMMS);\n-\n-  for (regno = 0; regno < 8; regno++)\n-    {\n-      XVECEXP (operands[0], 0, regno + 1)\n-\t= gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t   gen_rtx_REG (XFmode, FIRST_STACK_REG + regno));\n-\n-      XVECEXP (operands[0], 0, regno + 9)\n-\t= gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t   gen_rtx_REG (DImode, FIRST_MMX_REG + regno));\n-    }\n-})\n-\n-(define_insn \"*mmx_emms\"\n-  [(match_parallel 0 \"emms_operation\"\n-    [(unspec_volatile [(const_int 0)] UNSPECV_EMMS)])]\n-  \"TARGET_MMX\"\n-  \"emms\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"memory\" \"none\")])\n-\n-(define_expand \"mmx_femms\"\n-  [(match_par_dup 0 [(const_int 0)])]\n-  \"TARGET_3DNOW\"\n-{\n-  int regno;\n-\n-  operands[0] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (17));\n-\n-  XVECEXP (operands[0], 0, 0)\n-    = gen_rtx_UNSPEC_VOLATILE (VOIDmode, gen_rtvec (1, const0_rtx),\n-\t\t\t       UNSPECV_FEMMS);\n-\n-  for (regno = 0; regno < 8; regno++)\n-    {\n-      XVECEXP (operands[0], 0, regno + 1)\n-\t= gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t   gen_rtx_REG (XFmode, FIRST_STACK_REG + regno));\n-\n-      XVECEXP (operands[0], 0, regno + 9)\n-\t= gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t   gen_rtx_REG (DImode, FIRST_MMX_REG + regno));\n-    }\n-})\n-\n-(define_insn \"*mmx_femms\"\n-  [(match_parallel 0 \"emms_operation\"\n-    [(unspec_volatile [(const_int 0)] UNSPECV_FEMMS)])]\n-  \"TARGET_3DNOW\"\n-  \"femms\"\n+(define_int_iterator EMMS\n+  [(UNSPECV_EMMS \"TARGET_MMX\")\n+   (UNSPECV_FEMMS \"TARGET_3DNOW\")])\n+\n+(define_int_attr emms\n+  [(UNSPECV_EMMS \"emms\")\n+   (UNSPECV_FEMMS \"femms\")])\n+\n+(define_insn \"mmx_<emms>\"\n+  [(unspec_volatile [(const_int 0)] EMMS)\n+   (clobber (reg:XF ST0_REG))\n+   (clobber (reg:XF ST1_REG))\n+   (clobber (reg:XF ST2_REG))\n+   (clobber (reg:XF ST3_REG))\n+   (clobber (reg:XF ST4_REG))\n+   (clobber (reg:XF ST5_REG))\n+   (clobber (reg:XF ST6_REG))\n+   (clobber (reg:XF ST7_REG))\n+   (clobber (reg:DI MM0_REG))\n+   (clobber (reg:DI MM1_REG))\n+   (clobber (reg:DI MM2_REG))\n+   (clobber (reg:DI MM3_REG))\n+   (clobber (reg:DI MM4_REG))\n+   (clobber (reg:DI MM5_REG))\n+   (clobber (reg:DI MM6_REG))\n+   (clobber (reg:DI MM7_REG))]\n+  \"\"\n+  \"<emms>\"\n   [(set_attr \"type\" \"mmx\")\n    (set_attr \"modrm\" \"0\")\n    (set_attr \"memory\" \"none\")])"}, {"sha": "221053f96b6d9883331706e48d469d5ed1299ab0", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38ab29fe979d03b6eeb24308177f20cd028815e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=b38ab29fe979d03b6eeb24308177f20cd028815e", "patch": "@@ -1406,36 +1406,6 @@\n   (and (match_code \"mem\")\n        (match_test \"MEM_ALIGN (op) < GET_MODE_BITSIZE (mode)\")))\n \n-;; Return true if OP is a emms operation, known to be a PARALLEL.\n-(define_predicate \"emms_operation\"\n-  (match_code \"parallel\")\n-{\n-  unsigned i;\n-\n-  if (XVECLEN (op, 0) != 17)\n-    return false;\n-\n-  for (i = 0; i < 8; i++)\n-    {\n-      rtx elt = XVECEXP (op, 0, i+1);\n-\n-      if (GET_CODE (elt) != CLOBBER\n-\t  || GET_CODE (SET_DEST (elt)) != REG\n-\t  || GET_MODE (SET_DEST (elt)) != XFmode\n-\t  || REGNO (SET_DEST (elt)) != FIRST_STACK_REG + i)\n-        return false;\n-\n-      elt = XVECEXP (op, 0, i+9);\n-\n-      if (GET_CODE (elt) != CLOBBER\n-\t  || GET_CODE (SET_DEST (elt)) != REG\n-\t  || GET_MODE (SET_DEST (elt)) != DImode\n-\t  || REGNO (SET_DEST (elt)) != FIRST_MMX_REG + i)\n-\treturn false;\n-    }\n-  return true;\n-})\n-\n ;; Return true if OP is a vzeroall operation, known to be a PARALLEL.\n (define_predicate \"vzeroall_operation\"\n   (match_code \"parallel\")\n@@ -1459,8 +1429,14 @@\n   return true;\n })\n \n-;; return true if OP is a vzeroupper operation.\n-(define_predicate \"vzeroupper_operation\"\n+;; return true if OP is a vzeroall pattern.\n+(define_predicate \"vzeroall_pattern\"\n+  (and (match_code \"parallel\")\n+       (match_code \"unspec_volatile\" \"a\")\n+       (match_test \"XINT (XVECEXP (op, 0, 0), 1) == UNSPECV_VZEROALL\")))\n+\n+;; return true if OP is a vzeroupper pattern.\n+(define_predicate \"vzeroupper_pattern\"\n   (and (match_code \"unspec_volatile\")\n        (match_test \"XINT (op, 1) == UNSPECV_VZEROUPPER\")))\n "}]}