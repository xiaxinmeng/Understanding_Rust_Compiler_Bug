{"sha": "db6b9a9ddb7855f348ea978c392d8ebc258199af", "node_id": "C_kwDOANBUbNoAKGRiNmI5YTlkZGI3ODU1ZjM0OGVhOTc4YzM5MmQ4ZWJjMjU4MTk5YWY", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-04-07T09:51:56Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-23T10:45:28Z"}, "message": "[PATCH 12/15] arm: implement bti injection\n\nHi all,\n\nthis patch enables Branch Target Identification Armv8.1-M Mechanism\n[1].\n\nThis is achieved by using the bti pass made common with Aarch64.\n\nThe pass iterates through the instructions and adds the necessary BTI\ninstructions at the beginning of every function and at every landing\npads targeted by indirect jumps.\n\nBest Regards\n\n  Andrea\n\n[1]\n<https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/armv8-1-m-pointer-authentication-and-branch-target-identification-extension>\n\ngcc/ChangeLog\n\n2022-04-07  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* config.gcc (arm*-*-*): Add 'aarch-bti-insert.o' object.\n\t* config/arm/arm-protos.h: Update.\n\t* config/arm/aarch-common-protos.h: Declare\n\t'aarch_bti_arch_check'.\n\t* config/arm/arm.cc (aarch_bti_enabled) Update.\n\t(aarch_bti_j_insn_p, aarch_pac_insn_p, aarch_gen_bti_c)\n\t(aarch_gen_bti_j, aarch_bti_arch_check): New functions.\n\t* config/arm/arm.md (bti_nop): New insn.\n\t* config/arm/t-arm (PASSES_EXTRA): Add 'arm-passes.def'.\n\t(aarch-bti-insert.o): New target.\n\t* config/arm/unspecs.md (VUNSPEC_BTI_NOP): New unspec.\n\t* config/arm/aarch-bti-insert.cc (rest_of_insert_bti): Verify arch\n\tcompatibility.\n\t(gate): Make use of 'aarch_bti_arch_check'.\n\t* config/arm/arm-passes.def: New file.\n\t* config/aarch64/aarch64.cc (aarch_bti_arch_check): New function.\n\ngcc/testsuite/ChangeLog\n\n2022-04-07  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* gcc.target/arm/bti-1.c: New testcase.\n\t* gcc.target/arm/bti-2.c: Likewise.", "tree": {"sha": "c3e3b4f52eda158fc050d729506387af17f06c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e3b4f52eda158fc050d729506387af17f06c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db6b9a9ddb7855f348ea978c392d8ebc258199af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6b9a9ddb7855f348ea978c392d8ebc258199af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6b9a9ddb7855f348ea978c392d8ebc258199af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6b9a9ddb7855f348ea978c392d8ebc258199af/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7ad35a3ff369e10a6db6098439ca346b9e668de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ad35a3ff369e10a6db6098439ca346b9e668de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ad35a3ff369e10a6db6098439ca346b9e668de"}], "stats": {"total": 185, "additions": 181, "deletions": 4}, "files": [{"sha": "a5b0cbc7b418a2a612ac984b858faae09ce23c76", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -362,7 +362,7 @@ arc*-*-*)\n \t;;\n arm*-*-*)\n \tcpu_type=arm\n-\textra_objs=\"arm-builtins.o arm-mve-builtins.o aarch-common.o\"\n+\textra_objs=\"arm-builtins.o arm-mve-builtins.o aarch-common.o aarch-bti-insert.o\"\n \textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h arm_cmse.h arm_bf16.h arm_mve_types.h arm_mve.h arm_cde.h\"\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\""}, {"sha": "089c1c8584550588807276fc551b77f22e1a3a5d", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -8933,6 +8933,10 @@ aarch64_return_address_signing_enabled (void)\n \t      && known_ge (cfun->machine->frame.reg_offset[LR_REGNUM], 0)));\n }\n \n+/* Only used by the arm backend.  */\n+void aarch_bti_arch_check (void)\n+{}\n+\n /* Return TRUE if Branch Target Identification Mechanism is enabled.  */\n bool\n aarch_bti_enabled (void)"}, {"sha": "71a77e29406e7c65f707ee4ab65b69c81b40181f", "filename": "gcc/config/arm/aarch-bti-insert.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Faarch-bti-insert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Faarch-bti-insert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-bti-insert.cc?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -190,7 +190,12 @@ class pass_insert_bti : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return aarch_bti_enabled ();\n+      if (aarch_bti_enabled ())\n+        {\n+          aarch_bti_arch_check ();\n+          return true;\n+        }\n+      return false;\n     }\n \n   virtual unsigned int execute (function *)"}, {"sha": "f8cb656209602be63f6dcc9297f2b2561e9ab424", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -42,6 +42,7 @@ extern int arm_no_early_alu_shift_value_dep (rtx, rtx);\n extern int arm_no_early_mul_dep (rtx, rtx);\n extern int arm_no_early_store_addr_dep (rtx, rtx);\n extern bool arm_rtx_shift_left_p (rtx);\n+extern void aarch_bti_arch_check (void);\n extern bool aarch_bti_enabled (void);\n extern bool aarch_bti_j_insn_p (rtx_insn *);\n extern bool aarch_pac_insn_p (rtx);"}, {"sha": "71d6b56364002b8635d9d68df7ac02ae9bc4d02f", "filename": "gcc/config/arm/arm-passes.def", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-passes.def?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -0,0 +1,21 @@\n+/* Arm-specific passes declarations.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+   Contributed by Arm Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+INSERT_PASS_BEFORE (pass_shorten_branches, 1, pass_insert_bti);"}, {"sha": "aea472bfbb9deaa8e925756963c7c5cc6fdc0d09", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -24,6 +24,8 @@\n \n #include \"sbitmap.h\"\n \n+rtl_opt_pass *make_pass_insert_bti (gcc::context *ctxt);\n+\n extern enum unwind_info_type arm_except_unwind_info (struct gcc_options *);\n extern int use_return_insn (int, rtx);\n extern bool use_simple_return_p (void);"}, {"sha": "fb52048860a472f3fd75497484e2bf0fe11b6b49", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -33122,13 +33122,69 @@ arm_current_function_pac_enabled_p (void)\n               && !crtl->is_leaf));\n }\n \n+/* Raise an error if the current target arch is not bti compatible.  */\n+void aarch_bti_arch_check (void)\n+{\n+  if (!arm_arch8m_main)\n+    error (\"This architecture does not support branch protection instructions\");\n+}\n+\n /* Return TRUE if Branch Target Identification Mechanism is enabled.  */\n-static bool\n-aarch_bti_enabled ()\n+bool\n+aarch_bti_enabled (void)\n+{\n+  return aarch_enable_bti != 0;\n+}\n+\n+/* Check if INSN is a BTI J insn.  */\n+bool\n+aarch_bti_j_insn_p (rtx_insn *insn)\n+{\n+  if (!insn || !INSN_P (insn))\n+    return false;\n+\n+  rtx pat = PATTERN (insn);\n+  return GET_CODE (pat) == UNSPEC_VOLATILE && XINT (pat, 1) == VUNSPEC_BTI_NOP;\n+}\n+\n+/* Check if X (or any sub-rtx of X) is a PACIASP/PACIBSP instruction.  */\n+bool\n+aarch_pac_insn_p (rtx x)\n {\n+  if (!x || !INSN_P (x))\n+    return false;\n+\n+  rtx pat = PATTERN (x);\n+\n+  if (GET_CODE (pat) == SET)\n+    {\n+      rtx tmp = XEXP (pat, 1);\n+      if (tmp\n+\t  && ((GET_CODE (tmp) == UNSPEC\n+               && XINT (tmp, 1) == UNSPEC_PAC_NOP)\n+              || (GET_CODE (tmp) == UNSPEC_VOLATILE\n+                  && XINT (tmp, 1) == VUNSPEC_PACBTI_NOP)))\n+\treturn true;\n+    }\n+\n   return false;\n }\n \n+ /* Target specific mapping for aarch_gen_bti_c and aarch_gen_bti_j.\n+    For Arm, both of these map to a simple BTI instruction.  */\n+\n+rtx\n+aarch_gen_bti_c (void)\n+{\n+  return gen_bti_nop ();\n+}\n+\n+rtx\n+aarch_gen_bti_j (void)\n+{\n+  return gen_bti_nop ();\n+}\n+\n /* Implement TARGET_SCHED_CAN_SPECULATE_INSN.  Return true if INSN can be\n    scheduled for speculative execution.  Reject the long-running division\n    and square-root instructions.  */"}, {"sha": "3b95f47cc0a9d3f1feade6e739856b3d88ff6ede", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -13009,6 +13009,13 @@\n   \"aut\\t%|ip, %|lr, %|sp\"\n   [(set_attr \"conds\" \"unconditional\")])\n \n+(define_insn \"bti_nop\"\n+  [(unspec_volatile [(const_int 0)] VUNSPEC_BTI_NOP)]\n+  \"arm_arch8m_main\"\n+  \"bti\"\n+  [(set_attr \"conds\" \"unconditional\")\n+   (set_attr \"type\" \"nop\")])\n+\n ;; Vector bits common to IWMMXT, Neon and MVE\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "637e72af5bb7761536e5abee77c69561c2026376", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -175,3 +175,13 @@ arm-d.o: $(srcdir)/config/arm/arm-d.cc\n arm-common.o: arm-cpu-cdata.h\n \n driver-arm.o: arm-native.h\n+\n+PASSES_EXTRA += $(srcdir)/config/arm/arm-passes.def\n+\n+aarch-bti-insert.o: $(srcdir)/config/arm/aarch-bti-insert.cc \\\n+    $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(REGS_H) insn-config.h $(RTL_BASE_H) \\\n+    dominance.h cfg.h cfganal.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(RECOG_H) \\\n+    output.h hash-map.h $(DF_H) $(OBSTACK_H) $(TARGET_H) $(RTL_H) \\\n+    $(CONTEXT_H) $(TREE_PASS_H) regrename.h\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/arm/aarch-bti-insert.cc"}, {"sha": "50e1ac79acff1d9c11365f67169326146fd60966", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -257,6 +257,7 @@\n \t\t\t; instruction.\n   VUNSPEC_PACBTI_NOP\t; Represents PAC signing LR + valid landing pad\n   VUNSPEC_AUT_NOP\t; Represents PAC verifying LR\n+  VUNSPEC_BTI_NOP\t; Represent BTI\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "79dd8010d2dab4dc07b1eed0cbe514f239eeacfe", "filename": "gcc/testsuite/gcc.target/arm/bti-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbti-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbti-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbti-1.c?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -0,0 +1,12 @@\n+/* Check that GCC does bti instruction.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -mthumb -mfloat-abi=softfp -mbranch-protection=bti --save-temps\" } */\n+\n+int\n+main (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"bti\" } } */"}, {"sha": "33910563849a4f1355f441e1a258cae5f826d54d", "filename": "gcc/testsuite/gcc.target/arm/bti-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbti-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6b9a9ddb7855f348ea978c392d8ebc258199af/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbti-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbti-2.c?ref=db6b9a9ddb7855f348ea978c392d8ebc258199af", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* -Os to create jump table.  */\n+/* { dg-options \"-Os\" } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -mthumb -mfloat-abi=softfp -mbranch-protection=bti --save-temps\" } */\n+\n+extern int f1 (void);\n+extern int f2 (void);\n+extern int f3 (void);\n+extern int f4 (void);\n+extern int f5 (void);\n+extern int f6 (void);\n+extern int f7 (void);\n+extern int f8 (void);\n+extern int f9 (void);\n+extern int f10 (void);\n+\n+int (*ptr) (void);\n+\n+int\n+f_jump_table (int y, int n)\n+{\n+  int i;\n+  for (i = 0; i < n ;i ++)\n+  {\n+    switch (y)\n+      {\n+      case 0 : ptr = f1; break;\n+      case 1 : ptr = f2; break;\n+      case 2 : ptr = f3; break;\n+      case 3 : ptr = f4; break;\n+      case 4 : ptr = f5; break;\n+      case 5 : ptr = f6; break;\n+      case 6 : ptr = f7; break;\n+      case 7 : ptr = f8; break;\n+      case 8 : ptr = f9; break;\n+      case 9 : ptr = f10; break;\n+      default: break;\n+      }\n+    y += ptr ();\n+  }\n+  return (y == 0)? y+1:4;\n+}\n+\n+int\n+f_label_address ()\n+{\n+  static void * addr = &&lab1;\n+  goto *addr;\n+lab1:\n+  addr = &&lab2;\n+  return 1;\n+lab2:\n+  addr = &&lab1;\n+  return 2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bti\" 15 } } */"}]}