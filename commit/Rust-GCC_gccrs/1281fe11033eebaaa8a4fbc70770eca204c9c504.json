{"sha": "1281fe11033eebaaa8a4fbc70770eca204c9c504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4MWZlMTEwMzNlZWJhYWE4YTRmYmM3MDc3MGVjYTIwNGM5YzUwNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-08-25T16:58:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-08-25T16:58:31Z"}, "message": "re PR target/8795 ([PPC] Altivec related bugs concerning gcc 3.3 and mainline)\n\n\tPR c++/8795\n\t* tree.h (build_method_type_directly): Declare.\n\t* c-common.c (handle_vector_size_attributes): Handle METHOD_TYPEs.\n\t(vector_size_helper): Likewise.\n\t* tree.c (build_method_type_directly): New function.\n\t(build_method_type): Use it.\n\nFrom-SVN: r70774", "tree": {"sha": "47ae12295f5ab583fc99e8676bc65561081e359a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47ae12295f5ab583fc99e8676bc65561081e359a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1281fe11033eebaaa8a4fbc70770eca204c9c504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1281fe11033eebaaa8a4fbc70770eca204c9c504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1281fe11033eebaaa8a4fbc70770eca204c9c504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1281fe11033eebaaa8a4fbc70770eca204c9c504/comments", "author": null, "committer": null, "parents": [{"sha": "43dc123f52541ec779e4b56541203cec16c18d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43dc123f52541ec779e4b56541203cec16c18d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43dc123f52541ec779e4b56541203cec16c18d80"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "a12df1cb9f0dfe578f68559301ed0e0bcb0de67c", "filename": "gcc/tree.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1281fe11033eebaaa8a4fbc70770eca204c9c504/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1281fe11033eebaaa8a4fbc70770eca204c9c504/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1281fe11033eebaaa8a4fbc70770eca204c9c504", "patch": "@@ -3850,35 +3850,37 @@ build_function_type_list (tree return_type, ...)\n   return args;\n }\n \n-/* Construct, lay out and return the type of methods belonging to class\n-   BASETYPE and whose arguments and values are described by TYPE.\n-   If that type exists already, reuse it.\n-   TYPE must be a FUNCTION_TYPE node.  */\n+/* Build a METHOD_TYPE for a member of BASETYPE.  The RETTYPE (a TYPE)\n+   and ARGTYPES (a TREE_LIST) are the return type and arguments types\n+   for the method.  An implicit additional parameter (of type\n+   pointer-to-BASETYPE) is added to the ARGTYPES.  */\n \n tree\n-build_method_type (tree basetype, tree type)\n+build_method_type_directly (tree basetype,\n+\t\t\t    tree rettype,\n+\t\t\t    tree argtypes)\n {\n   tree t;\n-  unsigned int hashcode;\n+  tree ptype;\n+  int hashcode;\n \n   /* Make a node of the sort we want.  */\n   t = make_node (METHOD_TYPE);\n \n-  if (TREE_CODE (type) != FUNCTION_TYPE)\n-    abort ();\n-\n   TYPE_METHOD_BASETYPE (t) = TYPE_MAIN_VARIANT (basetype);\n-  TREE_TYPE (t) = TREE_TYPE (type);\n+  TREE_TYPE (t) = rettype;\n+  ptype = build_pointer_type (basetype);\n \n   /* The actual arglist for this function includes a \"hidden\" argument\n      which is \"this\".  Put it into the list of argument types.  */\n+  argtypes = tree_cons (NULL_TREE, ptype, argtypes);\n+  TYPE_ARG_TYPES (t) = argtypes;\n \n-  TYPE_ARG_TYPES (t)\n-    = tree_cons (NULL_TREE,\n-\t\t build_pointer_type (basetype), TYPE_ARG_TYPES (type));\n+  /* If we already have such a type, use the old one and free this one.\n+     Note that it also frees up the above cons cell if found.  */\n+  hashcode = TYPE_HASH (basetype) + TYPE_HASH (rettype) +\n+    type_hash_list (argtypes);\n \n-  /* If we already have such a type, use the old one and free this one.  */\n-  hashcode = TYPE_HASH (basetype) + TYPE_HASH (type);\n   t = type_hash_canon (hashcode, t);\n \n   if (!COMPLETE_TYPE_P (t))\n@@ -3887,6 +3889,22 @@ build_method_type (tree basetype, tree type)\n   return t;\n }\n \n+/* Construct, lay out and return the type of methods belonging to class\n+   BASETYPE and whose arguments and values are described by TYPE.\n+   If that type exists already, reuse it.\n+   TYPE must be a FUNCTION_TYPE node.  */\n+\n+tree\n+build_method_type (tree basetype, tree type)\n+{\n+  if (TREE_CODE (type) != FUNCTION_TYPE)\n+    abort ();\n+\n+  return build_method_type_directly (basetype, \n+\t\t\t\t     TREE_TYPE (type),\n+\t\t\t\t     TYPE_ARG_TYPES (type));\n+}\n+\n /* Construct, lay out and return the type of offsets to a value\n    of type TYPE, within an object of type BASETYPE.\n    If a suitable offset type exists already, reuse it.  */"}]}