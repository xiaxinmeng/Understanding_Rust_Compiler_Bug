{"sha": "a55e2541cb4481e72c8e52564ad541b577489641", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU1ZTI1NDFjYjQ0ODFlNzJjOGU1MjU2NGFkNTQxYjU3NzQ4OTY0MQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-09-26T10:34:08Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-09-26T10:34:08Z"}, "message": "S/390: Add FP vec_pack/unpack\n\ngcc/ChangeLog:\n\n2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/vector.md (\"vec_unpacks_lo_v4sf\")\n\t(\"vec_unpacks_hi_v4sf\", \"vec_unpacks_lo_v2df\")\n\t(\"vec_unpacks_hi_v2df\", \"vec_pack_trunc_v2df\"): New expanders.\n\nFrom-SVN: r253194", "tree": {"sha": "35d3343b1b017964c4d64e734999e2a512c25c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d3343b1b017964c4d64e734999e2a512c25c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a55e2541cb4481e72c8e52564ad541b577489641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55e2541cb4481e72c8e52564ad541b577489641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55e2541cb4481e72c8e52564ad541b577489641", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55e2541cb4481e72c8e52564ad541b577489641/comments", "author": null, "committer": null, "parents": [{"sha": "252c6f56386b674a6fb9329d928269858a2cfe35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c6f56386b674a6fb9329d928269858a2cfe35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252c6f56386b674a6fb9329d928269858a2cfe35"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "1de13a1b34dd1675f8f681455ba443bfe2fb484e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55e2541cb4481e72c8e52564ad541b577489641/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55e2541cb4481e72c8e52564ad541b577489641/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a55e2541cb4481e72c8e52564ad541b577489641", "patch": "@@ -1,3 +1,9 @@\n+2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/vector.md (\"vec_unpacks_lo_v4sf\")\n+\t(\"vec_unpacks_hi_v4sf\", \"vec_unpacks_lo_v2df\")\n+\t(\"vec_unpacks_hi_v2df\", \"vec_pack_trunc_v2df\"): New expanders.\n+\n 2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/predicates.md (\"const_shift_by_byte_operand\"): New"}, {"sha": "c15d81d1fd49324e71f79f33d1e05efec875ca18", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55e2541cb4481e72c8e52564ad541b577489641/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55e2541cb4481e72c8e52564ad541b577489641/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=a55e2541cb4481e72c8e52564ad541b577489641", "patch": "@@ -1781,7 +1781,7 @@\n \n ;; vector load lengthened\n \n-; vflls\n+; vflls float -> double\n (define_insn \"*vec_extendv4sf\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n \t(float_extend:V2DF\n@@ -1792,6 +1792,34 @@\n   \"vldeb\\t%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+(define_expand \"vec_unpacks_lo_v4sf\"\n+  [(set (match_dup 2)\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t      (match_dup 1)]\n+\t\t     UNSPEC_VEC_MERGEL))\n+   (set (match_operand:V2DF               0 \"register_operand\" \"=v\")\n+\t(float_extend:V2DF\n+\t (vec_select:V2SF\n+\t  (match_dup 2)\n+\t  (parallel [(const_int 0) (const_int 2)]))))]\n+  \"TARGET_VX\"\n+{ operands[2] = gen_reg_rtx(V4SFmode); })\n+\n+(define_expand \"vec_unpacks_hi_v4sf\"\n+  [(set (match_dup 2)\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t      (match_dup 1)]\n+\t\t     UNSPEC_VEC_MERGEH))\n+   (set (match_operand:V2DF               0 \"register_operand\" \"=v\")\n+\t(float_extend:V2DF\n+\t (vec_select:V2SF\n+\t  (match_dup 2)\n+\t  (parallel [(const_int 0) (const_int 2)]))))]\n+  \"TARGET_VX\"\n+{ operands[2] = gen_reg_rtx(V4SFmode); })\n+\n+\n+; double -> long double\n (define_insn \"*vec_extendv2df\"\n   [(set (match_operand:V1TF 0 \"register_operand\" \"=v\")\n \t(float_extend:V1TF\n@@ -1802,6 +1830,72 @@\n   \"wflld\\t%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+(define_expand \"vec_unpacks_lo_v2df\"\n+  [(set (match_dup 2)\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"v\")\n+\t\t      (match_dup 1)]\n+\t\t     UNSPEC_VEC_MERGEL))\n+   (set (match_operand:V1TF               0 \"register_operand\" \"=v\")\n+\t(float_extend:V1TF\n+\t (vec_select:V1DF\n+\t  (match_dup 2)\n+\t  (parallel [(const_int 0)]))))]\n+  \"TARGET_VXE\"\n+{ operands[2] = gen_reg_rtx (V2DFmode); })\n+\n+(define_expand \"vec_unpacks_hi_v2df\"\n+  [(set (match_dup 2)\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"v\")\n+\t\t      (match_dup 1)]\n+\t\t     UNSPEC_VEC_MERGEH))\n+   (set (match_operand:V1TF               0 \"register_operand\" \"=v\")\n+\t(float_extend:V1TF\n+\t (vec_select:V1DF\n+\t  (match_dup 2)\n+\t  (parallel [(const_int 0)]))))]\n+  \"TARGET_VXE\"\n+{ operands[2] = gen_reg_rtx (V2DFmode); })\n+\n+\n+; 2 x v2df -> 1 x v4sf\n+(define_expand \"vec_pack_trunc_v2df\"\n+  [(set (match_dup 3)\n+\t(unspec:V4SF [(match_operand:V2DF 1 \"register_operand\" \"\")\n+\t\t      (const_int VEC_INEXACT)\n+\t\t      (const_int VEC_RND_CURRENT)]\n+\t\t     UNSPEC_VEC_VFLR))\n+   (set (match_dup 4)\n+\t(unspec:V4SF [(match_operand:V2DF 2 \"register_operand\" \"\")\n+\t\t      (const_int VEC_INEXACT)\n+\t\t      (const_int VEC_RND_CURRENT)]\n+\t\t     UNSPEC_VEC_VFLR))\n+   (set (match_dup 6)\n+\t(unspec:V16QI [(subreg:V16QI (match_dup 3) 0)\n+\t\t       (subreg:V16QI (match_dup 4) 0)\n+\t\t       (match_dup 5)]\n+\t\t      UNSPEC_VEC_PERM))\n+   (set (match_operand:V4SF 0 \"register_operand\" \"\")\n+\t(subreg:V4SF (match_dup 6) 0))]\n+  \"TARGET_VX\"\n+{\n+  rtx constv, perm[16];\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      perm[i] = GEN_INT (i);\n+      perm[i + 4] = GEN_INT (i + 8);\n+      perm[i + 8] = GEN_INT (i + 16);\n+      perm[i + 12] = GEN_INT (i + 24);\n+    }\n+  constv = gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm));\n+\n+  operands[3] = gen_reg_rtx (V4SFmode);\n+  operands[4] = gen_reg_rtx (V4SFmode);\n+  operands[5] = force_reg (V16QImode, constv);\n+  operands[6] = gen_reg_rtx (V16QImode);\n+})\n+\n ; reduc_smin\n ; reduc_smax\n ; reduc_umin"}]}