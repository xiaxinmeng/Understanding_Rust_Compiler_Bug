{"sha": "b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkMjE2ZjZlMjA2ZGFiNGMzN2Q4MGJmYjkxYjc2ZTI3NzZjYjllZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-30T15:57:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-30T15:57:59Z"}, "message": "compiler: Add pkgpath symbol information to export data.\n\nThis adds the pkgpath symbol to the export data whenever it is\nneeded--whenever the pkgpath symbol is not the obvious\ntransformation of the pkgpath.  This lets us determine the\ncorrect symbol name for indirectly imported packages compiled\nwith -fgo-prefix.\n\nFrom-SVN: r220291", "tree": {"sha": "23cbad06be89198e0535231e1b38ab8482b41903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23cbad06be89198e0535231e1b38ab8482b41903"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/comments", "author": null, "committer": null, "parents": [{"sha": "622599c6d2359ad2f43445754be185b0b177430a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/622599c6d2359ad2f43445754be185b0b177430a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/622599c6d2359ad2f43445754be185b0b177430a"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "5c0094d8795a210e5d915f1850de25799fa40483", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "patch": "@@ -94,6 +94,7 @@ Export::export_globals(const std::string& package_name,\n \t\t       const std::string& prefix,\n \t\t       const std::string& pkgpath,\n \t\t       int package_priority,\n+\t\t       const std::map<std::string, Package*>& packages,\n \t\t       const std::map<std::string, Package*>& imports,\n \t\t       const std::string& import_init_fn,\n \t\t       const std::set<Import_init>& imported_init_fns,\n@@ -160,6 +161,8 @@ Export::export_globals(const std::string& package_name,\n   snprintf(buf, sizeof buf, \"priority %d;\\n\", package_priority);\n   this->write_c_string(buf);\n \n+  this->write_packages(packages);\n+\n   this->write_imports(imports);\n \n   this->write_imported_init_fns(package_name, package_priority, import_init_fn,\n@@ -190,6 +193,48 @@ Export::export_globals(const std::string& package_name,\n   this->stream_->write_checksum(s);\n }\n \n+// Sort packages.\n+\n+static bool\n+packages_compare(const Package* a, const Package* b)\n+{\n+  return a->package_name() < b->package_name();\n+}\n+\n+// Write out all the known packages whose pkgpath symbol is not a\n+// simple transformation of the pkgpath, so that the importing code\n+// can reliably know it.\n+\n+void\n+Export::write_packages(const std::map<std::string, Package*>& packages)\n+{\n+  // Sort for consistent output.\n+  std::vector<Package*> out;\n+  for (std::map<std::string, Package*>::const_iterator p = packages.begin();\n+       p != packages.end();\n+       ++p)\n+    {\n+      if (p->second->pkgpath_symbol()\n+\t  != Gogo::pkgpath_for_symbol(p->second->pkgpath()))\n+\tout.push_back(p->second);\n+    }\n+\n+  std::sort(out.begin(), out.end(), packages_compare);\n+\n+  for (std::vector<Package*>::const_iterator p = out.begin();\n+       p != out.end();\n+       ++p)\n+    {\n+      this->write_c_string(\"package \");\n+      this->write_string((*p)->package_name());\n+      this->write_c_string(\" \");\n+      this->write_string((*p)->pkgpath());\n+      this->write_c_string(\" \");\n+      this->write_string((*p)->pkgpath_symbol());\n+      this->write_c_string(\";\\n\");\n+    }\n+}\n+\n // Sort imported packages.\n \n static bool"}, {"sha": "0526e9a3f6defe86d4b8060b1f7f8e9374abf176", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "patch": "@@ -120,6 +120,7 @@ class Export : public String_dump\n   // PREFIX is the package prefix.  PKGPATH is the package path.\n   // Only one of PREFIX and PKGPATH will be non-empty.\n   // PACKAGE_PRIORITY is the priority to use for this package.\n+  // PACKAGES is all the packages we have seen.\n   // IMPORTS is the explicitly imported packages.\n   // IMPORT_INIT_FN is the name of the import initialization function\n   // for this package; it will be empty if none is needed.\n@@ -130,6 +131,7 @@ class Export : public String_dump\n \t\t const std::string& prefix,\n \t\t const std::string& pkgpath,\n \t\t int package_priority,\n+\t\t const std::map<std::string, Package*>& packages,\n \t\t const std::map<std::string, Package*>& imports,\n \t\t const std::string& import_init_fn,\n \t\t const std::set<Import_init>& imported_init_fns,\n@@ -163,6 +165,10 @@ class Export : public String_dump\n   Export(const Export&);\n   Export& operator=(const Export&);\n \n+  // Write out all known packages.\n+  void\n+  write_packages(const std::map<std::string, Package*>& packages);\n+\n   // Write out the imported packages.\n   void\n   write_imports(const std::map<std::string, Package*>& imports);"}, {"sha": "6196f03ae2c9597962a5d89d5b715859cebb709f", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "patch": "@@ -4364,6 +4364,7 @@ Gogo::do_exports()\n \t\t     prefix,\n \t\t     pkgpath,\n \t\t     this->package_priority(),\n+\t\t     this->packages_,\n \t\t     this->imports_,\n \t\t     (this->need_init_fn_ && !this->is_main_package()\n \t\t      ? this->get_init_fn_name()\n@@ -7537,12 +7538,7 @@ std::string\n Package::pkgpath_symbol() const\n {\n   if (this->pkgpath_symbol_.empty())\n-    {\n-      // In the general case, this is wrong, because the package might\n-      // have been compiled with -fprefix.  However, it is what we\n-      // used to do, so it is no more wrong than we were before.\n-      return Gogo::pkgpath_for_symbol(this->pkgpath_);\n-    }\n+    return Gogo::pkgpath_for_symbol(this->pkgpath_);\n   return this->pkgpath_symbol_;\n }\n "}, {"sha": "e1fba78818fb1b0021f799e10fdec1841119b73c", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "patch": "@@ -338,6 +338,9 @@ Import::import(Gogo* gogo, const std::string& local_name,\n       this->package_->set_priority(prio);\n       this->require_c_string(\";\\n\");\n \n+      while (stream->match_c_string(\"package\"))\n+\tthis->read_one_package();\n+\n       while (stream->match_c_string(\"import\"))\n \tthis->read_one_import();\n \n@@ -381,6 +384,25 @@ Import::import(Gogo* gogo, const std::string& local_name,\n   return this->package_;\n }\n \n+// Read a package line.  This let us reliably determine the pkgpath\n+// symbol, even if the package was compiled with a -fgo-prefix option.\n+\n+void\n+Import::read_one_package()\n+{\n+  this->require_c_string(\"package \");\n+  std::string package_name = this->read_identifier();\n+  this->require_c_string(\" \");\n+  std::string pkgpath = this->read_identifier();\n+  this->require_c_string(\" \");\n+  std::string pkgpath_symbol = this->read_identifier();\n+  this->require_c_string(\";\\n\");\n+\n+  Package* p = this->gogo_->register_package(pkgpath, pkgpath_symbol,\n+\t\t\t\t\t     Linemap::unknown_location());\n+  p->set_package_name(package_name, this->location());\n+}\n+\n // Read an import line.  We don't actually care about these.\n \n void"}, {"sha": "2a9ac80e7e227fc74ff7660310bbe885412e0c11", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d216f6e206dab4c37d80bfb91b76e2776cb9ef/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=b4d216f6e206dab4c37d80bfb91b76e2776cb9ef", "patch": "@@ -220,6 +220,10 @@ class Import\n   find_archive_export_data(const std::string& filename, int fd,\n \t\t\t   Location);\n \n+  // Read a package line.\n+  void\n+  read_one_package();\n+\n   // Read an import line.\n   void\n   read_one_import();"}]}