{"sha": "001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxYzc3ODNjNDY3YjU4ZDYxMDdiNmNmNWU0ZDliMTAxYzRkODBkYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T12:51:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T12:51:24Z"}, "message": "[multiple changes]\n\n2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util (Is_VMS_Operator): New predicate to determine whether an\n\toperator is an intrinsic operator declared in the DEC system extension.\n\t* sem_res.adb (Resolve_Logical_Op): operation is legal on signed types\n\tif the operator is a VMS intrinsic.\n\t* sem_eval.adb (Eval_Logical_Op): Operation is legal and be\n\tconstant-folded if the operands are signed and the operator is a VMS\n\tintrinsic.\n\n2010-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* g-socket.adb, gnatcmd.adb: Minor reformatting\n\nFrom-SVN: r160734", "tree": {"sha": "572b42099456bca62d54cc5fb472058475deca85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/572b42099456bca62d54cc5fb472058475deca85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/comments", "author": null, "committer": null, "parents": [{"sha": "ee81cbe97718536484b0b623ff875d4a3fabbce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee81cbe97718536484b0b623ff875d4a3fabbce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee81cbe97718536484b0b623ff875d4a3fabbce0"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "0b6bcc3a1356a2a20d17fae12b7ec248fd08c8dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "patch": "@@ -1,3 +1,17 @@\n+2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util (Is_VMS_Operator): New predicate to determine whether an\n+\toperator is an intrinsic operator declared in the DEC system extension.\n+\t* sem_res.adb (Resolve_Logical_Op): operation is legal on signed types\n+\tif the operator is a VMS intrinsic.\n+\t* sem_eval.adb (Eval_Logical_Op): Operation is legal and be\n+\tconstant-folded if the operands are signed and the operator is a VMS\n+\tintrinsic.\n+\n+2010-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-socket.adb, gnatcmd.adb: Minor reformatting\n+\n 2010-06-14  Pascal Obry  <obry@adacore.com>\n \n \t* s-finimp.adb: Fix typo."}, {"sha": "a364cb2b95e01472095a28f2a429b080d80e306c", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "patch": "@@ -900,6 +900,7 @@ package body GNAT.Sockets is\n \n    begin\n       Netdb_Lock;\n+\n       if C_Gethostbyaddr (HA'Address, HA'Size / 8, SOSC.AF_INET,\n                              Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n       then\n@@ -935,6 +936,7 @@ package body GNAT.Sockets is\n \n       begin\n          Netdb_Lock;\n+\n          if C_Gethostbyname\n            (HN, Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n          then\n@@ -986,6 +988,7 @@ package body GNAT.Sockets is\n \n    begin\n       Netdb_Lock;\n+\n       if C_Getservbyname (SN, SP, Res'Access, Buf'Address, Buflen) /= 0 then\n          Netdb_Unlock;\n          raise Service_Error with \"Service not found\";\n@@ -1015,6 +1018,7 @@ package body GNAT.Sockets is\n \n    begin\n       Netdb_Lock;\n+\n       if C_Getservbyport\n         (C.int (Short_To_Network (C.unsigned_short (Port))), SP,\n          Res'Access, Buf'Address, Buflen) /= 0"}, {"sha": "041c82aee7fa33ad31f727d9de4d7cdc56a53373", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "patch": "@@ -900,7 +900,6 @@ procedure GNATCmd is\n \n    function Mapping_File return Path_Name_Type is\n       Result : Path_Name_Type;\n-\n    begin\n       Prj.Env.Create_Mapping_File\n         (Project  => Project,"}, {"sha": "13751d21d755b835aa5c01c1180a3c7ea1c4449d", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "patch": "@@ -2069,7 +2069,12 @@ package body Sem_Eval is\n          Right_Int : constant Uint := Expr_Value (Right);\n \n       begin\n-         if Is_Modular_Integer_Type (Etype (N)) then\n+\n+         --  VMS includes bitwise operations on signed types.\n+\n+         if Is_Modular_Integer_Type (Etype (N))\n+           or else Is_VMS_Operator (Entity (N))\n+         then\n             declare\n                Left_Bits  : Bits (0 .. UI_To_Int (Esize (Etype (N))) - 1);\n                Right_Bits : Bits (0 .. UI_To_Int (Esize (Etype (N))) - 1);"}, {"sha": "feee853d3ecce940df58bdca9bb6c07ba960de04", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "patch": "@@ -4769,12 +4769,15 @@ package body Sem_Res is\n       --  Returns True if the subprogram entity S is the same as E or else\n       --  S is an alias of E.\n \n+      ---------------------------------\n+      -- Same_Or_Aliased_Subprograms --\n+      ---------------------------------\n+\n       function Same_Or_Aliased_Subprograms\n         (S : Entity_Id;\n          E : Entity_Id) return Boolean\n       is\n          Subp_Alias : constant Entity_Id := Alias (S);\n-\n       begin\n          return S = E\n            or else (Present (Subp_Alias) and then Subp_Alias = E);\n@@ -6762,13 +6765,18 @@ package body Sem_Res is\n          B_Typ := Base_Type (Typ);\n       end if;\n \n+      --  OK if this is a VMS-specific intrinsic operation\n+\n+      if Is_VMS_Operator (Entity (N)) then\n+         null;\n+\n       --  The following test is required because the operands of the operation\n       --  may be literals, in which case the resulting type appears to be\n       --  compatible with a signed integer type, when in fact it is compatible\n       --  only with modular types. If the context itself is universal, the\n       --  operation is illegal.\n \n-      if not Valid_Boolean_Arg (Typ) then\n+      elsif not Valid_Boolean_Arg (Typ) then\n          Error_Msg_N (\"invalid context for logical operation\", N);\n          Set_Etype (N, Any_Type);\n          return;\n@@ -7312,9 +7320,12 @@ package body Sem_Res is\n          B_Typ := Base_Type (Typ);\n       end if;\n \n+      if Is_VMS_Operator (Entity (N)) then\n+         null;\n+\n       --  Straightforward case of incorrect arguments\n \n-      if not Valid_Boolean_Arg (Typ) then\n+      elsif not Valid_Boolean_Arg (Typ) then\n          Error_Msg_N (\"invalid operand type for operator&\", N);\n          Set_Etype (N, Any_Type);\n          return;"}, {"sha": "1cfa423eadd45e8e978825e3907989779300cb35", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "patch": "@@ -7045,6 +7045,17 @@ package body Sem_Util is\n         and then Get_Name_String (Chars (T)) = \"valuetype\";\n    end Is_Value_Type;\n \n+   ---------------------\n+   -- Is_VMS_Operator --\n+   ---------------------\n+\n+   function Is_VMS_Operator (Op : Entity_Id) return Boolean is\n+   begin\n+      return Ekind (Op) = E_Function\n+        and then Is_Intrinsic_Subprogram (Op)\n+        and then Scope (Op) = System_Aux_Id;\n+   end Is_VMS_Operator;\n+\n    -----------------\n    -- Is_Delegate --\n    -----------------"}, {"sha": "9e74357882930bff32e14bc87568c5cedb9d3b5d", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001c7783c467b58d6107b6cf5e4d9b101c4d80dc/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "patch": "@@ -800,6 +800,10 @@ package Sem_Util is\n    --  object that is accessed directly, as opposed to the other CIL objects\n    --  that are accessed through managed pointers.\n \n+   function Is_VMS_Operator (Op : Entity_Id) return Boolean;\n+   --  Determine whether an operator is one of the intrinsics defined\n+   --  in the DEC system extension.\n+\n    function Is_Delegate (T : Entity_Id) return Boolean;\n    --  Returns true if type T represents a delegate. A Delegate is the CIL\n    --  object used to represent access-to-subprogram types. This is only"}]}