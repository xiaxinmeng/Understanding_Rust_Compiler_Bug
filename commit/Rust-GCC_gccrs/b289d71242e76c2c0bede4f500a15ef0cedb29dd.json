{"sha": "b289d71242e76c2c0bede4f500a15ef0cedb29dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI4OWQ3MTI0MmU3NmMyYzBiZWRlNGY1MDBhMTVlZjBjZWRiMjlkZA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-12-31T11:34:58Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-31T11:34:58Z"}, "message": "avx512cd-check.h: New file.\n\ntestsuite/\n\n\t* gcc.target/i386/avx512cd-check.h: New file.\n\t* gcc.target/i386/avx512cd-vpbroadcastmb2q-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vpbroadcastmb2q-2.c: Ditto.\n\t* gcc.target/i386/avx512cd-vpbroadcastmw2d-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vpbroadcastmw2d-2.c: Ditto.\n\t* gcc.target/i386/avx512cd-vpconflictd-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vpconflictd-2.c: Ditto.\n\t* gcc.target/i386/avx512cd-vpconflictq-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vpconflictq-2.c: Ditto.\n\t* gcc.target/i386/avx512cd-vplzcntd-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vplzcntd-2.c: Ditto.\n\t* gcc.target/i386/avx512cd-vplzcntq-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vplzcntq-2.c: Ditto.\n\t* gcc.target/i386/avx512cd-vptestnmd-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vptestnmd-2.c: Ditto.\n\t* gcc.target/i386/avx512cd-vptestnmq-1.c: Ditto.\n\t* gcc.target/i386/avx512cd-vptestnmq-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vexp2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vexp2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vexp2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vexp2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28pd-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28pd-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28ps-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28ps-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28pd-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28pd-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28ps-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-broadcast-gpr-1.c: Ditto.\n\t* gcc.target/i386/avx512f-broadcast-gpr-2.c: Ditto.\n\t* gcc.target/i386/avx512f-ceil-sfix-vec-1.c: Ditto.\n\t* gcc.target/i386/avx512f-ceil-sfix-vec-2.c: Ditto.\n\t* gcc.target/i386/avx512f-dummy.c: Ditto.\n\t* gcc.target/i386/avx512f-floor-sfix-vec-1.c: Ditto.\n\t* gcc.target/i386/avx512f-floor-sfix-vec-2.c: Ditto.\n\t* gcc.target/i386/avx512f-gather-1.c: Ditto.\n\t* gcc.target/i386/avx512f-gather-2.c: Ditto.\n\t* gcc.target/i386/avx512f-gather-3.c: Ditto.\n\t* gcc.target/i386/avx512f-gather-4.c: Ditto.\n\t* gcc.target/i386/avx512f-gather-5.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherpd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherpd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherps512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherps512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32gatherq512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterpd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterpd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterps512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterps512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i32scatterq512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherpd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherpd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherps512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherps512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64gatherq512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterpd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterpd512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterps512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterps512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-i64scatterq512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-inline-asm.c: Ditto.\n\t* gcc.target/i386/avx512f-kandnw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kandw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-klogic-2.c: Ditto.\n\t* gcc.target/i386/avx512f-knotw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kortestw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kortestw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-korw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kunpckbw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kxnorw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kxorw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-rounding.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16sf-1.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16sf-2.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16sf-3.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16sf-4.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16sf-5.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16si-1.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16si-2.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16si-3.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16si-4.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v16si-5.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8df-1.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8df-2.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8df-3.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8df-4.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8df-5.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8di-1.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8di-2.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8di-3.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8di-4.c: Ditto.\n\t* gcc.target/i386/avx512f-set-v8di-5.c: Ditto.\n\t* gcc.target/i386/avx512f-setzero-pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-setzero-ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-setzero-si512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vaddss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-valignd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-valignd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-valignq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-valignq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vblendmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vblendmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vblendmps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vblendmps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastf32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastf32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastf64x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastf64x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcasti32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcasti32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcasti64x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcasti64x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vbroadcastss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmppd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmppd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmpps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmpps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmpsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmpsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmpss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmpss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcomisd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcomiss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcompresspd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcompresspd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcompressps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcompressps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtdq2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtdq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtdq2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtdq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtph2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtph2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2ph-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2ph-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2si-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2si64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2usi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2usi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2usi64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2usi64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsi2sd64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsi2ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsi2ss64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2sd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2si-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2si64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2usi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2usi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2usi64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2usi64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttpd2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttpd2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttpd2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttpd2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttps2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttps2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttps2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttps2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2si-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2si-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2si64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2si64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2usi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2usi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2usi64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttsd2usi64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2si-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2si-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2si64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2si64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2usi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2usi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2usi64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttss2usi64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtudq2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtudq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtudq2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtudq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2sd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2sd64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2sd64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2ss64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtusi2ss64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vec-init.c: Ditto.\n\t* gcc.target/i386/avx512f-vec-unpack.c: Ditto.\n\t* gcc.target/i386/avx512f-vexpandpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vexpandpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vexpandps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vexpandps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vextractf32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vextractf32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vextractf64x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vextractf64x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vextracti32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vextracti32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vextracti64x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vextracti64x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfixupimmss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddsubXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddsubXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddsubXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddsubXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubaddXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubaddXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubaddXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubaddXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexppd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexppd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vinsertf32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vinsertf32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vinsertf64x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vinsertf64x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vinserti32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vinserti32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vinserti64x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vinserti64x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vminpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vminpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vminps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vminps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vminsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vminsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vminss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vminss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovapd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovapd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovaps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovaps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovddup-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovddup-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqa32-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqa32-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqa64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqa64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu32-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu32-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu64-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovntdq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovntdq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovntpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovntpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovntps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovntps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovshdup-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovshdup-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovsldup-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovsldup-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovupd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovupd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovups-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovups-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpabsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpabsd512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpabsq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpabsq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpaddd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpaddd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpaddq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpaddq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandnd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandnd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandnq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandnq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpblendmd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpblendmd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpblendmq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpblendmq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpbroadcastd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpbroadcastd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpbroadcastq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpbroadcastq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpeqd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpeqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpeqq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpeqq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpud-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpuq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcompressd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcompressd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcompressq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcompressq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2d-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2d-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2q-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermi2q-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilpdi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilpdi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilpsi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilpsi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermpdi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermpdi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermq-imm-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermq-imm-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermq-var-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermq-var-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2d-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2d-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2q-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermt2q-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpexpandd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpexpandd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpexpandq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpexpandq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxsq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxsq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxud-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxuq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmaxuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminsq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminsq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminud-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminuq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpminuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovdb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovdb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovdw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovdw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsdb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsdb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsdw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsdw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxbd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxbd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxbq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxbq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxdq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxdq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxwd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxwd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxwq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsxwq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusdb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusdb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusdw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusdw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxbd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxbd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxbq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxbq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxdq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxdq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxwd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxwd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxwq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovzxwq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmuldq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmuldq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmulld-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmulld-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmuludq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmuludq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpord-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpord-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vporq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vporq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprold-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprold-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprolq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprolq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprolvd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprolvd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprolvq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprolvq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprord-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprord-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprorq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprorq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprorvd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprorvd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vprorvq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vprorvq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpshufd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpshufd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpslld-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpslld-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpslldi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpslldi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllqi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllqi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllvd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllvd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllvq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllvq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllvq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsllvq512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrad-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrad-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsradi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsradi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsraq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsraq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsraqi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsraqi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsravd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsravd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsravq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsravq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsravq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsravq512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrld-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrld-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrldi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrldi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlqi-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlqi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlvd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlvd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlvq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlvq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlvq512-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrlvq512-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsubd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsubd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsubq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsubq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpternlogd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpternlogd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpternlogq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpternlogq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vptestmd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vptestmd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vptestmq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vptestmq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpckhdq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpckhdq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpckhqdq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpckhqdq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpckldq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpckldq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpcklqdq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpunpcklqdq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpxord-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpxord-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpxorq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpxorq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14pd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalepd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalepd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaleps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaleps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalesd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalesd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaless-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaless-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14pd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14pd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14ps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14sd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshuff32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vshuff32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshuff64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vshuff64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufi32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufi32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufi64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufi64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vucomisd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vucomiss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpckhpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpckhpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpckhps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpckhps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpcklpd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpcklpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpcklps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vunpcklps-2.c: Ditto.\n\t* gcc.target/i386/avx512f_cond_move.c: Ditto.\n\t* gcc.target/i386/avx512f_evex_reg_asm-1.c: Ditto.\n\t* gcc.target/i386/avx512f_evex_reg_asm-2.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf0dps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf0qps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1dps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1qps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf0dps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf0qps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf1dps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf1qps-1.c: Ditto.\n\t* gcc.target/i386/sse-12.c: Updated options.\n\t* gcc.target/i386/sse-13.c: Updated options, added defines for\n\t__builtin_ia32_addpd512_mask, __builtin_ia32_addps512_mask,\n\t__builtin_ia32_addsd_mask, __builtin_ia32_addss_mask,\n\t__builtin_ia32_alignd512_mask, __builtin_ia32_alignq512_mask,\n\t__builtin_ia32_cmpd512_mask, __builtin_ia32_cmppd512_mask,\n\t__builtin_ia32_cmpps512_mask, __builtin_ia32_cmpq512_mask,\n\t__builtin_ia32_cmpsd_mask, __builtin_ia32_cmpss_mask,\n\t__builtin_ia32_cvtdq2ps512_mask, __builtin_ia32_cvtpd2dq512_mask,\n\t__builtin_ia32_cvtpd2ps512_mask, __builtin_ia32_cvtpd2udq512_mask,\n\t__builtin_ia32_cvtps2dq512_mask, __builtin_ia32_cvtps2pd512_mask,\n\t__builtin_ia32_cvtps2udq512_mask, __builtin_ia32_cvtsd2ss_mask,\n\t__builtin_ia32_cvtsi2sd64, __builtin_ia32_cvtsi2ss32,\n\t__builtin_ia32_cvtsi2ss64, __builtin_ia32_cvtss2sd_mask,\n\t__builtin_ia32_cvttpd2dq512_mask, __builtin_ia32_cvttpd2udq512_mask,\n\t__builtin_ia32_cvttps2dq512_mask, __builtin_ia32_cvttps2udq512_mask,\n\t__builtin_ia32_cvtudq2ps512_mask, __builtin_ia32_cvtusi2sd64,\n\t__builtin_ia32_cvtusi2ss32, __builtin_ia32_cvtusi2ss64,\n\t__builtin_ia32_divpd512_mask, __builtin_ia32_divps512_mask,\n\t__builtin_ia32_divsd_mask, __builtin_ia32_divss_mask,\n\t__builtin_ia32_extractf32x4_mask, __builtin_ia32_extractf64x4_mask,\n\t__builtin_ia32_extracti32x4_mask, __builtin_ia32_extracti64x4_mask,\n\t__builtin_ia32_fixupimmpd512_mask, __builtin_ia32_fixupimmpd512_maskz,\n\t__builtin_ia32_fixupimmps512_mask, __builtin_ia32_fixupimmps512_maskz,\n\t__builtin_ia32_fixupimmsd_mask, __builtin_ia32_fixupimmsd_maskz,\n\t__builtin_ia32_fixupimmss_mask, __builtin_ia32_fixupimmss_maskz,\n\t__builtin_ia32_gatherdiv8df, __builtin_ia32_gatherdiv8di,\n\t__builtin_ia32_gatherdiv16sf, __builtin_ia32_gatherdiv16si,\n\t__builtin_ia32_gathersiv16sf, __builtin_ia32_gathersiv16si,\n\t__builtin_ia32_gathersiv8df, __builtin_ia32_gathersiv8di,\n\t__builtin_ia32_getexppd512_mask, __builtin_ia32_getexpps512_mask,\n\t__builtin_ia32_getexpsd128_mask, __builtin_ia32_getexpss128_mask,\n\t__builtin_ia32_getmantpd512_mask, __builtin_ia32_getmantps512_mask,\n\t__builtin_ia32_getmantsd_mask, __builtin_ia32_getmantss_mask,\n\t__builtin_ia32_insertf32x4_mask, __builtin_ia32_insertf64x4_mask,\n\t__builtin_ia32_inserti32x4_mask, __builtin_ia32_inserti64x4_mask,\n\t__builtin_ia32_maxpd512_mask, __builtin_ia32_maxps512_mask,\n\t__builtin_ia32_maxsd_mask, __builtin_ia32_maxss_mask,\n\t__builtin_ia32_minpd512_mask, __builtin_ia32_minps512_mask,\n\t__builtin_ia32_minsd_mask, __builtin_ia32_minss_mask,\n\t__builtin_ia32_mulpd512_mask, __builtin_ia32_mulps512_mask,\n\t__builtin_ia32_mulsd_mask, __builtin_ia32_mulss_mask,\n\t__builtin_ia32_permdf512_mask, __builtin_ia32_permdi512_mask,\n\t__builtin_ia32_prold512_mask, __builtin_ia32_prolq512_mask,\n\t__builtin_ia32_prord512_mask, __builtin_ia32_prorq512_mask,\n\t__builtin_ia32_pshufd512_mask, __builtin_ia32_pslldi512_mask,\n\t__builtin_ia32_psllqi512_mask, __builtin_ia32_psradi512_mask,\n\t__builtin_ia32_psraqi512_mask, __builtin_ia32_psrldi512_mask,\n\t__builtin_ia32_psrlqi512_mask, __builtin_ia32_pternlogd512_mask,\n\t__builtin_ia32_pternlogd512_maskz, __builtin_ia32_pternlogq512_mask,\n\t__builtin_ia32_pternlogq512_maskz, __builtin_ia32_rndscalepd_mask,\n\t__builtin_ia32_rndscaleps_mask, __builtin_ia32_rndscalesd_mask,\n\t__builtin_ia32_rndscaless_mask, __builtin_ia32_scalefpd512_mask,\n\t__builtin_ia32_scalefps512_mask, __builtin_ia32_scalefsd_mask,\n\t__builtin_ia32_scalefss_mask, __builtin_ia32_scatterdiv8df,\n\t__builtin_ia32_scatterdiv8di, __builtin_ia32_scatterdiv16sf,\n\t__builtin_ia32_scatterdiv16si, __builtin_ia32_scattersiv16sf,\n\t__builtin_ia32_scattersiv16si, __builtin_ia32_scattersiv8df,\n\t__builtin_ia32_scattersiv8di, __builtin_ia32_shuf_f32x4_mask,\n\t__builtin_ia32_shuf_f64x2_mask, __builtin_ia32_shuf_i32x4_mask,\n\t__builtin_ia32_shuf_i64x2_mask, __builtin_ia32_shufpd512_mask,\n\t__builtin_ia32_shufps512_mask, __builtin_ia32_sqrtpd512_mask,\n\t__builtin_ia32_sqrtps512_mask, __builtin_ia32_sqrtsd_mask,\n\t__builtin_ia32_sqrtss_mask, __builtin_ia32_subpd512_mask,\n\t__builtin_ia32_subps512_mask, __builtin_ia32_subsd_mask,\n\t__builtin_ia32_subss_mask, __builtin_ia32_ucmpd512_mask,\n\t__builtin_ia32_ucmpq512_mask, __builtin_ia32_vcomisd,\n\t__builtin_ia32_vcomiss, __builtin_ia32_vcvtph2ps512_mask,\n\t__builtin_ia32_vcvtps2ph512_mask, __builtin_ia32_vcvtsd2si32,\n\t__builtin_ia32_vcvtsd2si64, __builtin_ia32_vcvtsd2usi32,\n\t__builtin_ia32_vcvtsd2usi64, __builtin_ia32_vcvtss2si32,\n\t__builtin_ia32_vcvtss2si64, __builtin_ia32_vcvtss2usi32,\n\t__builtin_ia32_vcvtss2usi64, __builtin_ia32_vcvttsd2si32,\n\t__builtin_ia32_vcvttsd2si64, __builtin_ia32_vcvttsd2usi32,\n\t__builtin_ia32_vcvttsd2usi64, __builtin_ia32_vcvttss2si32,\n\t__builtin_ia32_vcvttss2si64, __builtin_ia32_vcvttss2usi32,\n\t__builtin_ia32_vcvttss2usi64, __builtin_ia32_vfmaddpd512_mask,\n\t__builtin_ia32_vfmaddpd512_mask3, __builtin_ia32_vfmaddpd512_maskz,\n\t__builtin_ia32_vfmaddps512_mask, __builtin_ia32_vfmaddps512_mask3,\n\t__builtin_ia32_vfmaddps512_maskz, __builtin_ia32_vfmaddsd3_mask,\n\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n\t__builtin_ia32_vfmaddss3_mask, __builtin_ia32_vfmaddss3_mask3,\n\t__builtin_ia32_vfmaddss3_maskz, __builtin_ia32_vfmaddsubpd512_mask,\n\t__builtin_ia32_vfmaddsubpd512_mask3,\n\t__builtin_ia32_vfmaddsubpd512_maskz,\n\t__builtin_ia32_vfmaddsubps512_mask,\n\t__builtin_ia32_vfmaddsubps512_mask3,\n\t__builtin_ia32_vfmaddsubps512_maskz,\n\t__builtin_ia32_vfmsubaddpd512_mask3,\n\t__builtin_ia32_vfmsubaddps512_mask3, __builtin_ia32_vfmsubpd512_mask3,\n\t__builtin_ia32_vfmsubps512_mask3, __builtin_ia32_vfmsubsd3_mask3,\n\t__builtin_ia32_vfmsubss3_mask3, __builtin_ia32_vfnmaddpd512_mask,\n\t__builtin_ia32_vfnmaddps512_mask, __builtin_ia32_vfnmsubpd512_mask,\n\t__builtin_ia32_vfnmsubpd512_mask3, __builtin_ia32_vfnmsubps512_mask,\n\t__builtin_ia32_vfnmsubps512_mask3, __builtin_ia32_vpermilpd512_mask,\n\t__builtin_ia32_vpermilps512_mask, __builtin_ia32_exp2ps_mask,\n\t__builtin_ia32_exp2pd_mask, __builtin_ia32_exp2ps_mask,\n\t__builtin_ia32_exp2pd_mask, __builtin_ia32_rsqrt28ps_mask,\n\t__builtin_ia32_rsqrt28pd_mask, __builtin_ia32_gatherpfdps,\n\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdps,\n\t__builtin_ia32_scatterpfqps, __builtin_ia32_addpd512_mask,\n\t__builtin_ia32_addps512_mask, __builtin_ia32_addsd_mask,\n\t__builtin_ia32_addss_mask, __builtin_ia32_alignd512_mask,\n\t__builtin_ia32_alignq512_mask, __builtin_ia32_cmpd512_mask,\n\t__builtin_ia32_cmppd512_mask, __builtin_ia32_cmpps512_mask,\n\t__builtin_ia32_cmpq512_mask, __builtin_ia32_cmpsd_mask,\n\t__builtin_ia32_cmpss_mask, __builtin_ia32_cvtdq2ps512_mask,\n\t__builtin_ia32_cvtpd2dq512_mask, __builtin_ia32_cvtpd2ps512_mask,\n\t__builtin_ia32_cvtpd2udq512_mask, __builtin_ia32_cvtps2dq512_mask,\n\t__builtin_ia32_cvtps2pd512_mask, __builtin_ia32_cvtps2udq512_mask,\n\t__builtin_ia32_cvtsd2ss_mask, __builtin_ia32_cvtsi2sd64,\n\t__builtin_ia32_cvtsi2ss32, __builtin_ia32_cvtsi2ss64,\n\t__builtin_ia32_cvtss2sd_mask, __builtin_ia32_cvttpd2dq512_mask,\n\t__builtin_ia32_cvttpd2udq512_mask, __builtin_ia32_cvttps2dq512_mask,\n\t__builtin_ia32_cvttps2udq512_mask, __builtin_ia32_cvtudq2ps512_mask,\n\t__builtin_ia32_cvtusi2sd64, __builtin_ia32_cvtusi2ss32,\n\t__builtin_ia32_cvtusi2ss64, __builtin_ia32_divpd512_mask,\n\t__builtin_ia32_divps512_mask, __builtin_ia32_divsd_mask,\n\t__builtin_ia32_divss_mask, __builtin_ia32_extractf32x4_mask,\n\t__builtin_ia32_extractf64x4_mask, __builtin_ia32_extracti32x4_mask,\n\t__builtin_ia32_extracti64x4_mask, __builtin_ia32_fixupimmpd512_mask,\n\t__builtin_ia32_fixupimmpd512_maskz, __builtin_ia32_fixupimmps512_mask,\n\t__builtin_ia32_fixupimmps512_maskz, __builtin_ia32_fixupimmsd_mask,\n\t__builtin_ia32_fixupimmsd_maskz, __builtin_ia32_fixupimmss_mask,\n\t__builtin_ia32_fixupimmss_maskz, __builtin_ia32_gatherdiv8df,\n\t__builtin_ia32_gatherdiv8di, __builtin_ia32_gatherdiv16sf,\n\t__builtin_ia32_gatherdiv16si, __builtin_ia32_gathersiv16sf,\n\t__builtin_ia32_gathersiv16si, __builtin_ia32_gathersiv8df,\n\t__builtin_ia32_gathersiv8di, __builtin_ia32_getexppd512_mask,\n\t__builtin_ia32_getexpps512_mask, __builtin_ia32_getexpsd128_mask,\n\t__builtin_ia32_getexpss128_mask, __builtin_ia32_getmantpd512_mask,\n\t__builtin_ia32_getmantps512_mask, __builtin_ia32_getmantsd_mask,\n\t__builtin_ia32_getmantss_mask, __builtin_ia32_insertf32x4_mask,\n\t__builtin_ia32_insertf64x4_mask, __builtin_ia32_inserti32x4_mask,\n\t__builtin_ia32_inserti64x4_mask, __builtin_ia32_maxpd512_mask,\n\t__builtin_ia32_maxps512_mask, __builtin_ia32_maxsd_mask,\n\t__builtin_ia32_maxss_mask, __builtin_ia32_minpd512_mask,\n\t__builtin_ia32_minps512_mask, __builtin_ia32_minsd_mask,\n\t__builtin_ia32_minss_mask, __builtin_ia32_mulpd512_mask,\n\t__builtin_ia32_mulps512_mask, __builtin_ia32_mulsd_mask,\n\t__builtin_ia32_mulss_mask, __builtin_ia32_permdf512_mask,\n\t__builtin_ia32_permdi512_mask, __builtin_ia32_prold512_mask,\n\t__builtin_ia32_prolq512_mask, __builtin_ia32_prord512_mask,\n\t__builtin_ia32_prorq512_mask, __builtin_ia32_pshufd512_mask,\n\t__builtin_ia32_pslldi512_mask, __builtin_ia32_psllqi512_mask,\n\t__builtin_ia32_psradi512_mask, __builtin_ia32_psraqi512_mask,\n\t__builtin_ia32_psrldi512_mask, __builtin_ia32_psrlqi512_mask,\n\t__builtin_ia32_pternlogd512_mask, __builtin_ia32_pternlogd512_maskz,\n\t__builtin_ia32_pternlogq512_mask, __builtin_ia32_pternlogq512_maskz,\n\t__builtin_ia32_rndscalepd_mask, __builtin_ia32_rndscaleps_mask,\n\t__builtin_ia32_rndscalesd_mask, __builtin_ia32_rndscaless_mask,\n\t__builtin_ia32_scalefpd512_mask, __builtin_ia32_scalefps512_mask,\n\t__builtin_ia32_scalefsd_mask, __builtin_ia32_scalefss_mask,\n\t__builtin_ia32_scatterdiv8df, __builtin_ia32_scatterdiv8di,\n\t__builtin_ia32_scatterdiv16sf, __builtin_ia32_scatterdiv16si,\n\t__builtin_ia32_scattersiv16sf, __builtin_ia32_scattersiv16si,\n\t__builtin_ia32_scattersiv8df, __builtin_ia32_scattersiv8di,\n\t__builtin_ia32_shuf_f32x4_mask, __builtin_ia32_shuf_f64x2_mask,\n\t__builtin_ia32_shuf_i32x4_mask, __builtin_ia32_shuf_i64x2_mask,\n\t__builtin_ia32_shufpd512_mask, __builtin_ia32_shufps512_mask,\n\t__builtin_ia32_sqrtpd512_mask, __builtin_ia32_sqrtps512_mask,\n\t__builtin_ia32_sqrtsd_mask, __builtin_ia32_sqrtss_mask,\n\t__builtin_ia32_subpd512_mask, __builtin_ia32_subps512_mask,\n\t__builtin_ia32_subsd_mask, __builtin_ia32_subss_mask,\n\t__builtin_ia32_ucmpd512_mask, __builtin_ia32_ucmpq512_mask,\n\t__builtin_ia32_vcomisd, __builtin_ia32_vcomiss,\n\t__builtin_ia32_vcvtph2ps512_mask, __builtin_ia32_vcvtps2ph512_mask,\n\t__builtin_ia32_vcvtsd2si32, __builtin_ia32_vcvtsd2si64,\n\t__builtin_ia32_vcvtsd2usi32, __builtin_ia32_vcvtsd2usi64,\n\t__builtin_ia32_vcvtss2si32, __builtin_ia32_vcvtss2si64,\n\t__builtin_ia32_vcvtss2usi32, __builtin_ia32_vcvtss2usi64,\n\t__builtin_ia32_vcvttsd2si32, __builtin_ia32_vcvttsd2si64,\n\t__builtin_ia32_vcvttsd2usi32, __builtin_ia32_vcvttsd2usi64,\n\t__builtin_ia32_vcvttss2si32, __builtin_ia32_vcvttss2si64,\n\t__builtin_ia32_vcvttss2usi32, __builtin_ia32_vcvttss2usi64,\n\t__builtin_ia32_vfmaddpd512_mask, __builtin_ia32_vfmaddpd512_mask3,\n\t__builtin_ia32_vfmaddpd512_maskz, __builtin_ia32_vfmaddps512_mask,\n\t__builtin_ia32_vfmaddps512_mask3, __builtin_ia32_vfmaddps512_maskz,\n\t__builtin_ia32_vfmaddsd3_mask, __builtin_ia32_vfmaddsd3_mask3,\n\t__builtin_ia32_vfmaddsd3_maskz, __builtin_ia32_vfmaddss3_mask,\n\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n\t__builtin_ia32_vfmaddsubpd512_mask,\n\t__builtin_ia32_vfmaddsubpd512_mask3,\n\t__builtin_ia32_vfmaddsubpd512_maskz,\n\t__builtin_ia32_vfmaddsubps512_mask,\n\t__builtin_ia32_vfmaddsubps512_mask3,\n\t__builtin_ia32_vfmaddsubps512_maskz,\n\t__builtin_ia32_vfmsubaddpd512_mask3,\n\t__builtin_ia32_vfmsubaddps512_mask3, __builtin_ia32_vfmsubpd512_mask3,\n\t__builtin_ia32_vfmsubps512_mask3, __builtin_ia32_vfmsubsd3_mask3,\n\t__builtin_ia32_vfmsubss3_mask3, __builtin_ia32_vfnmaddpd512_mask,\n\t__builtin_ia32_vfnmaddps512_mask, __builtin_ia32_vfnmsubpd512_mask,\n\t__builtin_ia32_vfnmsubpd512_mask3, __builtin_ia32_vfnmsubps512_mask,\n\t__builtin_ia32_vfnmsubps512_mask3, __builtin_ia32_vpermilpd512_mask,\n\t__builtin_ia32_vpermilps512_mask, __builtin_ia32_gatherpfdps,\n\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdps,\n\t__builtin_ia32_scatterpfqps, __builtin_ia32_exp2pd_mask,\n\t__builtin_ia32_exp2ps_mask, __builtin_ia32_rcp28pd_mask,\n\t__builtin_ia32_rcp28ps_mask, __builtin_ia32_rsqrt28pd_mask,\n\t__builtin_ia32_rsqrt28ps_mask.\n\t* gcc.target/i386/sse-14.c (test_1y): New.\n\t(test_2y): Ditto.\n\t(test_2vx): Ditto.\n\t(test_3x): Ditto.\n\t(test_3v): Ditto.\n\t(test_3vx): Ditto.\n\t(test_4x): Ditto.\n\t(test_4y): Ditto.\n\t(test_4v): Ditto.\n\t(pragma GCC target): Add avx512f, avx512er, avx512cd, avx512pf.\n\t(tests): Add  _mm512_cvt_roundepi32_ps, _mm512_cvt_roundepu32_ps,\n\t_mm512_cvt_roundpd_epi32, _mm512_cvt_roundpd_epu32,\n\t_mm512_cvt_roundpd_ps, _mm512_cvt_roundph_ps,\n\t_mm512_cvt_roundps_epi32, _mm512_cvt_roundps_epu32,\n\t_mm512_cvt_roundps_pd, _mm512_cvtps_ph, _mm512_cvtt_roundpd_epi32,\n\t_mm512_cvtt_roundpd_epu32, _mm512_cvtt_roundps_epi32,\n\t_mm512_cvtt_roundps_epu32, _mm512_extractf32x4_ps,\n\t_mm512_extractf64x4_pd, _mm512_extracti32x4_epi32,\n\t_mm512_extracti64x4_epi64, _mm512_getexp_round_pd,\n\t_mm512_getexp_round_ps, _mm512_getmant_round_pd,\n\t_mm512_getmant_round_ps, _mm512_permute_pd, _mm512_permute_ps,\n\t_mm512_permutex_epi64, _mm512_permutex_pd, _mm512_rol_epi32,\n\t_mm512_rol_epi64, _mm512_ror_epi32, _mm512_ror_epi64,\n\t_mm512_shuffle_epi32, _mm512_slli_epi32, _mm512_slli_epi64,\n\t_mm512_sqrt_round_pd, _mm512_sqrt_round_ps, _mm512_srai_epi32,\n\t_mm512_srai_epi64, _mm512_srli_epi32, _mm512_srli_epi64,\n\t_mm_cvt_roundsd_i32, _mm_cvt_roundsd_u32, _mm_cvt_roundss_i32,\n\t_mm_cvt_roundss_u32, _mm_cvtt_roundsd_i32, _mm_cvtt_roundsd_u32,\n\t_mm_cvtt_roundss_i32, _mm_cvtt_roundss_u32, _mm512_getmant_pd,\n\t_mm512_getmant_ps, _mm_cvt_roundi32_ss, _mm512_add_round_pd,\n\t_mm512_add_round_ps, _mm512_alignr_epi32, _mm512_alignr_epi64,\n\t_mm512_cmp_epi32_mask, _mm512_cmp_epi64_mask, _mm512_cmp_epu32_mask,\n\t_mm512_cmp_epu64_mask, _mm512_cmp_pd_mask, _mm512_cmp_ps_mask,\n\t_mm512_div_round_pd, _mm512_div_round_ps, _mm512_i32gather_epi32,\n\t_mm512_i32gather_epi64, _mm512_i32gather_pd, _mm512_i32gather_ps,\n\t_mm512_i64gather_epi32, _mm512_i64gather_epi64, _mm512_i64gather_pd,\n\t_mm512_i64gather_ps, _mm512_insertf32x4, _mm512_insertf64x4,\n\t_mm512_inserti32x4, _mm512_inserti64x4,\n\t_mm512_maskz_cvt_roundepi32_ps, _mm512_maskz_cvt_roundepu32_ps,\n\t_mm512_maskz_cvt_roundpd_epi32, _mm512_maskz_cvt_roundpd_epu32,\n\t_mm512_maskz_cvt_roundpd_ps, _mm512_maskz_cvt_roundph_ps,\n\t_mm512_maskz_cvt_roundps_epi32, _mm512_maskz_cvt_roundps_epu32,\n\t_mm512_maskz_cvt_roundps_pd, _mm512_maskz_cvtps_ph,\n\t_mm512_maskz_cvtt_roundpd_epi32, _mm512_maskz_cvtt_roundpd_epu32,\n\t_mm512_maskz_cvtt_roundps_epi32, _mm512_maskz_cvtt_roundps_epu32,\n\t_mm512_maskz_extractf32x4_ps, _mm512_maskz_extractf64x4_pd,\n\t_mm512_maskz_extracti32x4_epi32, _mm512_maskz_extracti64x4_epi64,\n\t_mm512_maskz_getexp_round_pd, _mm512_maskz_getexp_round_ps,\n\t_mm512_maskz_getmant_round_pd, _mm512_maskz_getmant_round_ps,\n\t_mm512_maskz_permute_pd, _mm512_maskz_permute_ps,\n\t_mm512_maskz_permutex_epi64, _mm512_maskz_permutex_pd,\n\t_mm512_maskz_rol_epi32, _mm512_maskz_rol_epi64,\n\t_mm512_maskz_ror_epi32, _mm512_maskz_ror_epi64,\n\t_mm512_maskz_shuffle_epi32, _mm512_maskz_slli_epi32,\n\t_mm512_maskz_slli_epi64, _mm512_maskz_sqrt_round_pd,\n\t_mm512_maskz_sqrt_round_ps, _mm512_maskz_srai_epi32,\n\t_mm512_maskz_srai_epi64, _mm512_maskz_srli_epi32,\n\t_mm512_maskz_srli_epi64, _mm512_max_round_pd, _mm512_max_round_ps,\n\t_mm512_min_round_pd, _mm512_min_round_ps, _mm512_mul_round_pd,\n\t_mm512_mul_round_ps, _mm512_scalef_round_pd, _mm512_scalef_round_ps,\n\t_mm512_shuffle_f32x4, _mm512_shuffle_f64x2, _mm512_shuffle_i32x4,\n\t_mm512_shuffle_i64x2, _mm512_shuffle_pd, _mm512_shuffle_ps,\n\t_mm512_sub_round_pd, _mm512_sub_round_ps, _mm_add_round_sd,\n\t_mm_add_round_ss, _mm_cmp_sd_mask, _mm_cmp_ss_mask,\n\t_mm_cvt_roundi64_sd, _mm_cvt_roundi64_ss, _mm_cvt_roundsd_ss,\n\t_mm_cvt_roundss_sd, _mm_cvt_roundu32_ss, _mm_cvt_roundu64_sd,\n\t_mm_cvt_roundu64_ss, _mm_div_round_sd, _mm_div_round_ss,\n\t_mm_getexp_round_sd, _mm_getexp_round_ss, _mm_getmant_round_sd,\n\t_mm_getmant_round_ss, _mm_mul_round_sd, _mm_mul_round_ss,\n\t_mm_scalef_round_sd, _mm_scalef_round_ss, _mm_sqrt_round_sd,\n\t_mm_sqrt_round_ss, _mm_sub_round_sd, _mm_sub_round_ss,\n\t_mm512_cmp_round_pd_mask, _mm512_cmp_round_ps_mask,\n\t_mm512_maskz_roundscale_round_pd, _mm512_maskz_roundscale_round_ps,\n\t_mm_cmp_round_sd_mask, _mm_cmp_round_ss_mask, _mm_comi_round_sd,\n\t_mm_comi_round_ss, _mm_roundscale_round_sd, _mm_roundscale_round_ss,\n\t_mm512_fmadd_round_pd, _mm512_fmadd_round_ps,\n\t_mm512_fmaddsub_round_pd, _mm512_fmaddsub_round_ps,\n\t_mm512_fmsub_round_pd, _mm512_fmsub_round_ps,\n\t_mm512_fmsubadd_round_pd, _mm512_fmsubadd_round_ps,\n\t_mm512_fnmadd_round_pd, _mm512_fnmadd_round_ps,\n\t_mm512_fnmsub_round_pd, _mm512_fnmsub_round_ps,\n\t_mm512_mask_cmp_epi32_mask, _mm512_mask_cmp_epi64_mask,\n\t_mm512_mask_cmp_epu32_mask, _mm512_mask_cmp_epu64_mask,\n\t_mm512_mask_cmp_pd_mask, _mm512_mask_cmp_ps_mask,\n\t_mm512_mask_cvt_roundepi32_ps, _mm512_mask_cvt_roundepu32_ps,\n\t_mm512_mask_cvt_roundpd_epi32, _mm512_mask_cvt_roundpd_epu32,\n\t_mm512_mask_cvt_roundpd_ps, _mm512_mask_cvt_roundph_ps,\n\t_mm512_mask_cvt_roundps_epi32, _mm512_mask_cvt_roundps_epu32,\n\t_mm512_mask_cvt_roundps_pd, _mm512_mask_cvtps_ph,\n\t_mm512_mask_cvtt_roundpd_epi32, _mm512_mask_cvtt_roundpd_epu32,\n\t_mm512_mask_cvtt_roundps_epi32, _mm512_mask_cvtt_roundps_epu32,\n\t_mm512_mask_extractf32x4_ps, _mm512_mask_extractf64x4_pd,\n\t_mm512_mask_extracti32x4_epi32, _mm512_mask_extracti64x4_epi64,\n\t_mm512_mask_getexp_round_pd, _mm512_mask_getexp_round_ps,\n\t_mm512_mask_getmant_round_pd, _mm512_mask_getmant_round_ps,\n\t_mm512_mask_permute_pd, _mm512_mask_permute_ps,\n\t_mm512_mask_permutex_epi64, _mm512_mask_permutex_pd,\n\t_mm512_mask_rol_epi32, _mm512_mask_rol_epi64, _mm512_mask_ror_epi32,\n\t_mm512_mask_ror_epi64, _mm512_mask_shuffle_epi32,\n\t_mm512_mask_slli_epi32, _mm512_mask_slli_epi64,\n\t_mm512_mask_sqrt_round_pd, _mm512_mask_sqrt_round_ps,\n\t_mm512_mask_srai_epi32, _mm512_mask_srai_epi64,\n\t_mm512_mask_srli_epi32, _mm512_mask_srli_epi64,\n\t_mm512_maskz_add_round_pd, _mm512_maskz_add_round_ps,\n\t_mm512_maskz_alignr_epi32, _mm512_maskz_alignr_epi64,\n\t_mm512_maskz_div_round_pd, _mm512_maskz_div_round_ps,\n\t_mm512_maskz_insertf32x4, _mm512_maskz_insertf64x4,\n\t_mm512_maskz_inserti32x4, _mm512_maskz_inserti64x4,\n\t_mm512_maskz_max_round_pd, _mm512_maskz_max_round_ps,\n\t_mm512_maskz_min_round_pd, _mm512_maskz_min_round_ps,\n\t_mm512_maskz_mul_round_pd, _mm512_maskz_mul_round_ps,\n\t_mm512_maskz_scalef_round_pd, _mm512_maskz_scalef_round_ps,\n\t_mm512_maskz_shuffle_f32x4, _mm512_maskz_shuffle_f64x2,\n\t_mm512_maskz_shuffle_i32x4, _mm512_maskz_shuffle_i64x2,\n\t_mm512_maskz_shuffle_pd, _mm512_maskz_shuffle_ps,\n\t_mm512_maskz_sub_round_pd, _mm512_maskz_sub_round_ps,\n\t_mm512_ternarylogic_epi32, _mm512_ternarylogic_epi64,\n\t_mm_fmadd_round_sd, _mm_fmadd_round_ss, _mm_fmsub_round_sd,\n\t_mm_fmsub_round_ss, _mm_fnmadd_round_sd, _mm_fnmadd_round_ss,\n\t_mm_fnmsub_round_sd, _mm_fnmsub_round_ss, _mm_mask_cmp_sd_mask,\n\t_mm_mask_cmp_ss_mask, _mm_maskz_add_round_sd, _mm_maskz_add_round_ss,\n\t_mm_maskz_cvt_roundsd_ss, _mm_maskz_cvt_roundss_sd,\n\t_mm_maskz_div_round_sd, _mm_maskz_div_round_ss,\n\t_mm_maskz_getexp_round_sd, _mm_maskz_getexp_round_ss,\n\t_mm_maskz_getmant_round_sd, _mm_maskz_getmant_round_ss,\n\t_mm_maskz_mul_round_sd, _mm_maskz_mul_round_ss,\n\t_mm_maskz_scalef_round_sd, _mm_maskz_scalef_round_ss,\n\t_mm_maskz_sqrt_round_sd, _mm_maskz_sqrt_round_ss,\n\t_mm_maskz_sub_round_sd, _mm_maskz_sub_round_ss,\n\t_mm512_i32scatter_epi32, _mm512_i32scatter_epi64,\n\t_mm512_i32scatter_pd, _mm512_i32scatter_ps, _mm512_i64scatter_epi32,\n\t_mm512_i64scatter_epi64, _mm512_i64scatter_pd, _mm512_i64scatter_ps,\n\t_mm512_mask_roundscale_round_pd, _mm512_mask_roundscale_round_ps,\n\t_mm512_mask_cmp_round_pd_mask, _mm512_mask_cmp_round_ps_mask,\n\t_mm_fixupimm_round_sd, _mm_fixupimm_round_ss,\n\t_mm_mask_cmp_round_sd_mask, _mm_mask_cmp_round_ss_mask,\n\t_mm_maskz_roundscale_round_sd, _mm_maskz_roundscale_round_ss,\n\t_mm512_mask3_fmadd_round_pd, _mm512_mask3_fmadd_round_ps,\n\t_mm512_mask3_fmaddsub_round_pd, _mm512_mask3_fmaddsub_round_ps,\n\t_mm512_mask3_fmsub_round_pd, _mm512_mask3_fmsub_round_ps,\n\t_mm512_mask3_fmsubadd_round_pd, _mm512_mask3_fmsubadd_round_ps,\n\t_mm512_mask3_fnmadd_round_pd, _mm512_mask3_fnmadd_round_ps,\n\t_mm512_mask3_fnmsub_round_pd, _mm512_mask3_fnmsub_round_ps,\n\t_mm512_mask_add_round_pd, _mm512_mask_add_round_ps,\n\t_mm512_mask_alignr_epi32, _mm512_mask_alignr_epi64,\n\t_mm512_mask_div_round_pd, _mm512_mask_div_round_ps,\n\t_mm512_mask_fmadd_round_pd, _mm512_mask_fmadd_round_ps,\n\t_mm512_mask_fmaddsub_round_pd, _mm512_mask_fmaddsub_round_ps,\n\t_mm512_mask_fmsub_round_pd, _mm512_mask_fmsub_round_ps,\n\t_mm512_mask_fmsubadd_round_pd, _mm512_mask_fmsubadd_round_ps,\n\t_mm512_mask_fnmadd_round_pd, _mm512_mask_fnmadd_round_ps,\n\t_mm512_mask_fnmsub_round_pd, _mm512_mask_fnmsub_round_ps,\n\t_mm512_mask_i32gather_epi32, _mm512_mask_i32gather_epi64,\n\t_mm512_mask_i32gather_pd, _mm512_mask_i32gather_ps,\n\t_mm512_mask_i64gather_epi32, _mm512_mask_i64gather_epi64,\n\t_mm512_mask_i64gather_pd, _mm512_mask_i64gather_ps,\n\t_mm512_mask_insertf32x4, _mm512_mask_insertf64x4,\n\t_mm512_mask_inserti32x4, _mm512_mask_inserti64x4,\n\t_mm512_mask_max_round_pd, _mm512_mask_max_round_ps,\n\t_mm512_mask_min_round_pd, _mm512_mask_min_round_ps,\n\t_mm512_mask_mul_round_pd, _mm512_mask_mul_round_ps,\n\t_mm512_mask_scalef_round_pd, _mm512_mask_scalef_round_ps,\n\t_mm512_mask_shuffle_f32x4, _mm512_mask_shuffle_f64x2,\n\t_mm512_mask_shuffle_i32x4, _mm512_mask_shuffle_i64x2,\n\t_mm512_mask_shuffle_pd, _mm512_mask_shuffle_ps,\n\t_mm512_mask_sub_round_pd, _mm512_mask_sub_round_ps,\n\t_mm512_mask_ternarylogic_epi32, _mm512_mask_ternarylogic_epi64,\n\t_mm512_maskz_fmadd_round_pd, _mm512_maskz_fmadd_round_ps,\n\t_mm512_maskz_fmaddsub_round_pd, _mm512_maskz_fmaddsub_round_ps,\n\t_mm512_maskz_fmsub_round_pd, _mm512_maskz_fmsub_round_ps,\n\t_mm512_maskz_fmsubadd_round_pd, _mm512_maskz_fmsubadd_round_ps,\n\t_mm512_maskz_fnmadd_round_pd, _mm512_maskz_fnmadd_round_ps,\n\t_mm512_maskz_fnmsub_round_pd, _mm512_maskz_fnmsub_round_ps,\n\t_mm512_maskz_ternarylogic_epi32, _mm512_maskz_ternarylogic_epi64,\n\t_mm_mask3_fmadd_round_sd, _mm_mask3_fmadd_round_ss,\n\t_mm_mask3_fmsub_round_sd, _mm_mask3_fmsub_round_ss,\n\t_mm_mask3_fnmadd_round_sd, _mm_mask3_fnmadd_round_ss,\n\t_mm_mask3_fnmsub_round_sd, _mm_mask3_fnmsub_round_ss,\n\t_mm_mask_add_round_sd, _mm_mask_add_round_ss, _mm_mask_cvt_roundsd_ss,\n\t_mm_mask_cvt_roundss_sd, _mm_mask_div_round_sd, _mm_mask_div_round_ss,\n\t_mm_mask_fmadd_round_sd, _mm_mask_fmadd_round_ss,\n\t_mm_mask_fmsub_round_sd, _mm_mask_fmsub_round_ss,\n\t_mm_mask_fnmadd_round_sd, _mm_mask_fnmadd_round_ss,\n\t_mm_mask_fnmsub_round_sd, _mm_mask_fnmsub_round_ss,\n\t_mm_mask_getexp_round_sd, _mm_mask_getexp_round_ss,\n\t_mm_mask_getmant_round_sd, _mm_mask_getmant_round_ss,\n\t_mm_mask_mul_round_sd, _mm_mask_mul_round_ss,\n\t_mm_mask_scalef_round_sd, _mm_mask_scalef_round_ss,\n\t_mm_mask_sqrt_round_sd, _mm_mask_sqrt_round_ss, _mm_mask_sub_round_sd,\n\t_mm_mask_sub_round_ss, _mm_maskz_fmadd_round_sd,\n\t_mm_maskz_fmadd_round_ss, _mm_maskz_fmsub_round_sd,\n\t_mm_maskz_fmsub_round_ss, _mm_maskz_fnmadd_round_sd,\n\t_mm_maskz_fnmadd_round_ss, _mm_maskz_fnmsub_round_sd,\n\t_mm_maskz_fnmsub_round_ss, _mm512_mask_i32scatter_epi32,\n\t_mm512_mask_i32scatter_epi64, _mm512_mask_i32scatter_pd,\n\t_mm512_mask_i32scatter_ps, _mm512_mask_i64scatter_epi32,\n\t_mm512_mask_i64scatter_epi64, _mm512_mask_i64scatter_pd,\n\t_mm512_mask_i64scatter_ps, _mm_mask_getmant_sd, _mm_mask_getmant_ss,\n\t_mm_mask_roundscale_round_sd, _mm_mask_roundscale_round_ss,\n\t_mm512_mask_fixupimm_round_pd, _mm512_mask_fixupimm_round_ps,\n\t_mm512_maskz_fixupimm_round_pd, _mm512_maskz_fixupimm_round_ps,\n\t_mm_mask_fixupimm_round_sd, _mm_mask_fixupimm_round_ss,\n\t_mm_maskz_fixupimm_round_sd, _mm_maskz_fixupimm_round_ss,\n\t_mm512_mask_prefetch_i32gather_ps, _mm512_mask_prefetch_i32scatter_ps,\n\t_mm512_mask_prefetch_i64gather_ps, _mm512_mask_prefetch_i64scatter_ps,\n\t_mm512_exp2a23_round_pd, _mm512_exp2a23_round_ps,\n\t_mm512_rcp28_round_pd, _mm512_rcp28_round_ps, _mm512_rsqrt28_round_pd,\n\t_mm512_rsqrt28_round_ps, _mm512_maskz_exp2a23_round_pd,\n\t_mm512_maskz_exp2a23_round_ps, _mm512_maskz_rcp28_round_pd,\n\t_mm512_maskz_rcp28_round_ps, _mm512_maskz_rsqrt28_round_pd,\n\t_mm512_maskz_rsqrt28_round_ps, _mm512_mask_exp2a23_round_pd,\n\t_mm512_mask_exp2a23_round_ps, _mm512_mask_rcp28_round_pd,\n\t_mm512_mask_rcp28_round_ps, _mm512_mask_rsqrt28_round_pd,\n\t_mm512_mask_rsqrt28_round_ps.\n\t* gcc.target/i386/testimm-10.c: New file.\n\t* gcc.target/i386/testround-1.c: Ditto.\n\t* gcc.target/i386/testround-2.c: Ditto.\n\t* gcc.target/x86_64/abi/avx512f/test_m512_returning.c: Ditto.\n\t* gcc.target/x86_64/abi/avx512f/test_passing_m512.c: Ditto.\n\t* gcc.target/x86_64/abi/avx512f/test_passing_structs.c: Ditto.\n\t* gcc.target/x86_64/abi/avx512f/test_passing_unions.c: Ditto.\n\t* gcc.target/i386/avx512cd-check.h: Ditto.\n\t* gcc.target/i386/avx512er-check.h: Ditto.\n\t* gcc.target/i386/avx512f-check.h: Ditto.\n\t* gcc.target/i386/avx512f-helper.h: Ditto.\n\t* gcc.target/i386/avx512f-mask-type.h: Ditto.\n\t* gcc.target/i386/avx512f-os-support.h: Ditto.\n\t* gcc.target/i386/i386.exp (check_effective_target_avx512f): New.\n\t(check_effective_target_avx512cd): Ditto.\n\t(check_effective_target_avx512er): Ditto.\n\t* gcc.target/i386/m128-check.h (CHECK_FP_EXP): Ditto.\n\t* gcc.target/i386/m512-check.h: Ditto.\n\t* gcc.target/x86_64/abi/avx512f/abi-avx512f.exp: New file.\n\t* gcc.target/x86_64/abi/avx512f/args.h: Ditto.\n\t* gcc.target/x86_64/abi/avx512f/asm-support.S: Ditto.\n\t* gcc.target/x86_64/abi/avx512f/avx512f-check.h: Ditto.\n\t* lib/target-supports.exp (check_effective_target_avx512f): New.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r206262", "tree": {"sha": "093446dd1de95d580a101512f1c2163c44611884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/093446dd1de95d580a101512f1c2163c44611884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b289d71242e76c2c0bede4f500a15ef0cedb29dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b289d71242e76c2c0bede4f500a15ef0cedb29dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b289d71242e76c2c0bede4f500a15ef0cedb29dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b289d71242e76c2c0bede4f500a15ef0cedb29dd/comments", "author": null, "committer": null, "parents": [{"sha": "756c585702ca72cc01388f51a960777a3d13d486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756c585702ca72cc01388f51a960777a3d13d486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756c585702ca72cc01388f51a960777a3d13d486"}], "stats": {"total": 27795, "additions": 27789, "deletions": 6}, "files": [{"sha": "c76c3c2dc92adfbff826707f163feaab60bddb09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1148, "deletions": 0, "changes": 1148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -1,3 +1,1151 @@\n+2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/avx512cd-check.h: New file.\n+\t* gcc.target/i386/avx512cd-vpbroadcastmb2q-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vpbroadcastmb2q-2.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vpbroadcastmw2d-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vpbroadcastmw2d-2.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vpconflictd-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vpconflictd-2.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vpconflictq-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vpconflictq-2.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vplzcntd-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vplzcntd-2.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vplzcntq-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vplzcntq-2.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vptestnmd-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vptestnmd-2.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vptestnmq-1.c: Ditto.\n+\t* gcc.target/i386/avx512cd-vptestnmq-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vexp2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vexp2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vexp2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vexp2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-broadcast-gpr-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-broadcast-gpr-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-ceil-sfix-vec-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-ceil-sfix-vec-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-dummy.c: Ditto.\n+\t* gcc.target/i386/avx512f-floor-sfix-vec-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-floor-sfix-vec-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-gather-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-gather-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-gather-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-gather-4.c: Ditto.\n+\t* gcc.target/i386/avx512f-gather-5.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherpd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherpd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherps512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherps512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32gatherq512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterpd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterpd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterps512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterps512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i32scatterq512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherpd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherpd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherps512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherps512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64gatherq512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterpd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterpd512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterps512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterps512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-i64scatterq512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-inline-asm.c: Ditto.\n+\t* gcc.target/i386/avx512f-kandnw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kandw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-klogic-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-knotw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kortestw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kortestw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-korw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kunpckbw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kxnorw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kxorw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-rounding.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16sf-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16sf-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16sf-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16sf-4.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16sf-5.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16si-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16si-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16si-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16si-4.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v16si-5.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8df-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8df-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8df-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8df-4.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8df-5.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8di-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8di-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8di-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8di-4.c: Ditto.\n+\t* gcc.target/i386/avx512f-set-v8di-5.c: Ditto.\n+\t* gcc.target/i386/avx512f-setzero-pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-setzero-ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-setzero-si512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vaddss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-valignd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-valignd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-valignq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-valignq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vblendmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vblendmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vblendmps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vblendmps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastf32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastf32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastf64x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastf64x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcasti32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcasti32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcasti64x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcasti64x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vbroadcastss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmppd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmppd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmpps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmpps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmpsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmpsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmpss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmpss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcomisd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcomiss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcompresspd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcompresspd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcompressps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcompressps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtdq2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtdq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtdq2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtdq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtph2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtph2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2ph-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2ph-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2si-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2si64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2usi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2usi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2usi64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2usi64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsi2sd64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsi2ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsi2ss64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2si-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2si64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2usi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2usi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2usi64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2usi64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttpd2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttpd2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttpd2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttpd2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttps2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttps2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttps2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttps2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2si-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2si-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2si64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2si64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2usi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2usi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2usi64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttsd2usi64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2si-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2si-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2si64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2si64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2usi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2usi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2usi64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttss2usi64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtudq2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtudq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtudq2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtudq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2sd64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2sd64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2ss64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtusi2ss64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vec-init.c: Ditto.\n+\t* gcc.target/i386/avx512f-vec-unpack.c: Ditto.\n+\t* gcc.target/i386/avx512f-vexpandpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vexpandpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vexpandps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vexpandps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextractf32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextractf32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextractf64x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextractf64x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextracti32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextracti32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextracti64x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextracti64x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfixupimmss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddsubXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddsubXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddsubXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddsubXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubaddXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubaddXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubaddXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubaddXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexppd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexppd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinsertf32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinsertf32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinsertf64x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinsertf64x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinserti32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinserti32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinserti64x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vinserti64x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovapd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovapd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovaps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovaps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovddup-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovddup-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqa32-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqa32-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqa64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqa64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu32-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu32-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu64-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovshdup-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovshdup-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovsldup-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovsldup-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovupd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovupd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovups-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovups-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpabsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpabsd512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpabsq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpabsq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpaddd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpaddd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpaddq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpaddq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandnd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandnd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandnq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandnq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpblendmd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpblendmd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpblendmq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpblendmq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpbroadcastd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpbroadcastd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpbroadcastq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpbroadcastq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpeqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpeqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpeqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpeqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcompressd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcompressd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcompressq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcompressq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2d-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2d-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2q-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermi2q-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilpdi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilpdi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilpsi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilpsi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermpdi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermpdi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermq-imm-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermq-imm-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermq-var-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermq-var-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2d-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2d-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2q-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermt2q-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpexpandd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpexpandd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpexpandq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpexpandq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxsq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxsq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmaxuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminsq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminsq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpminuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxbd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxbd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxbq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxbq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxwq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsxwq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxbd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxbd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxbq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxbq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxwq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovzxwq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmuldq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmuldq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmulld-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmulld-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmuludq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmuludq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpord-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpord-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vporq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vporq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprold-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprold-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprolq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprolq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprolvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprolvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprolvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprolvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprord-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprord-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprorq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprorq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprorvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprorvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprorvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vprorvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshufd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshufd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpslld-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpslld-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpslldi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpslldi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllqi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllqi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllvq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsllvq512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrad-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrad-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsradi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsradi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsraq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsraq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsraqi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsraqi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsravd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsravd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsravq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsravq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsravq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsravq512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrld-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrld-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrldi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrldi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlqi-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlqi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlvq512-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrlvq512-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsubd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsubd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsubq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsubq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpternlogd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpternlogd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpternlogq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpternlogq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vptestmd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vptestmd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vptestmq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vptestmq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpckhdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpckhdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpckhqdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpckhqdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpckldq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpckldq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpcklqdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpunpcklqdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpxord-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpxord-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpxorq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpxorq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalepd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaleps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaleps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalesd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalesd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaless-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaless-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshuff32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshuff32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshuff64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshuff64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufi32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufi32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufi64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufi64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vucomisd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vucomiss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpckhpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpckhpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpckhps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpckhps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpcklpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpcklpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpcklps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vunpcklps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f_cond_move.c: Ditto.\n+\t* gcc.target/i386/avx512f_evex_reg_asm-1.c: Ditto.\n+\t* gcc.target/i386/avx512f_evex_reg_asm-2.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf0dps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf0qps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1dps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1qps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf0dps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf0qps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf1dps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf1qps-1.c: Ditto.\n+\t* gcc.target/i386/sse-12.c: Updated options.\n+\t* gcc.target/i386/sse-13.c: Updated options, added defines for\n+\t__builtin_ia32_addpd512_mask, __builtin_ia32_addps512_mask,\n+\t__builtin_ia32_addsd_mask, __builtin_ia32_addss_mask,\n+\t__builtin_ia32_alignd512_mask, __builtin_ia32_alignq512_mask,\n+\t__builtin_ia32_cmpd512_mask, __builtin_ia32_cmppd512_mask,\n+\t__builtin_ia32_cmpps512_mask, __builtin_ia32_cmpq512_mask,\n+\t__builtin_ia32_cmpsd_mask, __builtin_ia32_cmpss_mask,\n+\t__builtin_ia32_cvtdq2ps512_mask, __builtin_ia32_cvtpd2dq512_mask,\n+\t__builtin_ia32_cvtpd2ps512_mask, __builtin_ia32_cvtpd2udq512_mask,\n+\t__builtin_ia32_cvtps2dq512_mask, __builtin_ia32_cvtps2pd512_mask,\n+\t__builtin_ia32_cvtps2udq512_mask, __builtin_ia32_cvtsd2ss_mask,\n+\t__builtin_ia32_cvtsi2sd64, __builtin_ia32_cvtsi2ss32,\n+\t__builtin_ia32_cvtsi2ss64, __builtin_ia32_cvtss2sd_mask,\n+\t__builtin_ia32_cvttpd2dq512_mask, __builtin_ia32_cvttpd2udq512_mask,\n+\t__builtin_ia32_cvttps2dq512_mask, __builtin_ia32_cvttps2udq512_mask,\n+\t__builtin_ia32_cvtudq2ps512_mask, __builtin_ia32_cvtusi2sd64,\n+\t__builtin_ia32_cvtusi2ss32, __builtin_ia32_cvtusi2ss64,\n+\t__builtin_ia32_divpd512_mask, __builtin_ia32_divps512_mask,\n+\t__builtin_ia32_divsd_mask, __builtin_ia32_divss_mask,\n+\t__builtin_ia32_extractf32x4_mask, __builtin_ia32_extractf64x4_mask,\n+\t__builtin_ia32_extracti32x4_mask, __builtin_ia32_extracti64x4_mask,\n+\t__builtin_ia32_fixupimmpd512_mask, __builtin_ia32_fixupimmpd512_maskz,\n+\t__builtin_ia32_fixupimmps512_mask, __builtin_ia32_fixupimmps512_maskz,\n+\t__builtin_ia32_fixupimmsd_mask, __builtin_ia32_fixupimmsd_maskz,\n+\t__builtin_ia32_fixupimmss_mask, __builtin_ia32_fixupimmss_maskz,\n+\t__builtin_ia32_gatherdiv8df, __builtin_ia32_gatherdiv8di,\n+\t__builtin_ia32_gatherdiv16sf, __builtin_ia32_gatherdiv16si,\n+\t__builtin_ia32_gathersiv16sf, __builtin_ia32_gathersiv16si,\n+\t__builtin_ia32_gathersiv8df, __builtin_ia32_gathersiv8di,\n+\t__builtin_ia32_getexppd512_mask, __builtin_ia32_getexpps512_mask,\n+\t__builtin_ia32_getexpsd128_mask, __builtin_ia32_getexpss128_mask,\n+\t__builtin_ia32_getmantpd512_mask, __builtin_ia32_getmantps512_mask,\n+\t__builtin_ia32_getmantsd_mask, __builtin_ia32_getmantss_mask,\n+\t__builtin_ia32_insertf32x4_mask, __builtin_ia32_insertf64x4_mask,\n+\t__builtin_ia32_inserti32x4_mask, __builtin_ia32_inserti64x4_mask,\n+\t__builtin_ia32_maxpd512_mask, __builtin_ia32_maxps512_mask,\n+\t__builtin_ia32_maxsd_mask, __builtin_ia32_maxss_mask,\n+\t__builtin_ia32_minpd512_mask, __builtin_ia32_minps512_mask,\n+\t__builtin_ia32_minsd_mask, __builtin_ia32_minss_mask,\n+\t__builtin_ia32_mulpd512_mask, __builtin_ia32_mulps512_mask,\n+\t__builtin_ia32_mulsd_mask, __builtin_ia32_mulss_mask,\n+\t__builtin_ia32_permdf512_mask, __builtin_ia32_permdi512_mask,\n+\t__builtin_ia32_prold512_mask, __builtin_ia32_prolq512_mask,\n+\t__builtin_ia32_prord512_mask, __builtin_ia32_prorq512_mask,\n+\t__builtin_ia32_pshufd512_mask, __builtin_ia32_pslldi512_mask,\n+\t__builtin_ia32_psllqi512_mask, __builtin_ia32_psradi512_mask,\n+\t__builtin_ia32_psraqi512_mask, __builtin_ia32_psrldi512_mask,\n+\t__builtin_ia32_psrlqi512_mask, __builtin_ia32_pternlogd512_mask,\n+\t__builtin_ia32_pternlogd512_maskz, __builtin_ia32_pternlogq512_mask,\n+\t__builtin_ia32_pternlogq512_maskz, __builtin_ia32_rndscalepd_mask,\n+\t__builtin_ia32_rndscaleps_mask, __builtin_ia32_rndscalesd_mask,\n+\t__builtin_ia32_rndscaless_mask, __builtin_ia32_scalefpd512_mask,\n+\t__builtin_ia32_scalefps512_mask, __builtin_ia32_scalefsd_mask,\n+\t__builtin_ia32_scalefss_mask, __builtin_ia32_scatterdiv8df,\n+\t__builtin_ia32_scatterdiv8di, __builtin_ia32_scatterdiv16sf,\n+\t__builtin_ia32_scatterdiv16si, __builtin_ia32_scattersiv16sf,\n+\t__builtin_ia32_scattersiv16si, __builtin_ia32_scattersiv8df,\n+\t__builtin_ia32_scattersiv8di, __builtin_ia32_shuf_f32x4_mask,\n+\t__builtin_ia32_shuf_f64x2_mask, __builtin_ia32_shuf_i32x4_mask,\n+\t__builtin_ia32_shuf_i64x2_mask, __builtin_ia32_shufpd512_mask,\n+\t__builtin_ia32_shufps512_mask, __builtin_ia32_sqrtpd512_mask,\n+\t__builtin_ia32_sqrtps512_mask, __builtin_ia32_sqrtsd_mask,\n+\t__builtin_ia32_sqrtss_mask, __builtin_ia32_subpd512_mask,\n+\t__builtin_ia32_subps512_mask, __builtin_ia32_subsd_mask,\n+\t__builtin_ia32_subss_mask, __builtin_ia32_ucmpd512_mask,\n+\t__builtin_ia32_ucmpq512_mask, __builtin_ia32_vcomisd,\n+\t__builtin_ia32_vcomiss, __builtin_ia32_vcvtph2ps512_mask,\n+\t__builtin_ia32_vcvtps2ph512_mask, __builtin_ia32_vcvtsd2si32,\n+\t__builtin_ia32_vcvtsd2si64, __builtin_ia32_vcvtsd2usi32,\n+\t__builtin_ia32_vcvtsd2usi64, __builtin_ia32_vcvtss2si32,\n+\t__builtin_ia32_vcvtss2si64, __builtin_ia32_vcvtss2usi32,\n+\t__builtin_ia32_vcvtss2usi64, __builtin_ia32_vcvttsd2si32,\n+\t__builtin_ia32_vcvttsd2si64, __builtin_ia32_vcvttsd2usi32,\n+\t__builtin_ia32_vcvttsd2usi64, __builtin_ia32_vcvttss2si32,\n+\t__builtin_ia32_vcvttss2si64, __builtin_ia32_vcvttss2usi32,\n+\t__builtin_ia32_vcvttss2usi64, __builtin_ia32_vfmaddpd512_mask,\n+\t__builtin_ia32_vfmaddpd512_mask3, __builtin_ia32_vfmaddpd512_maskz,\n+\t__builtin_ia32_vfmaddps512_mask, __builtin_ia32_vfmaddps512_mask3,\n+\t__builtin_ia32_vfmaddps512_maskz, __builtin_ia32_vfmaddsd3_mask,\n+\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n+\t__builtin_ia32_vfmaddss3_mask, __builtin_ia32_vfmaddss3_mask3,\n+\t__builtin_ia32_vfmaddss3_maskz, __builtin_ia32_vfmaddsubpd512_mask,\n+\t__builtin_ia32_vfmaddsubpd512_mask3,\n+\t__builtin_ia32_vfmaddsubpd512_maskz,\n+\t__builtin_ia32_vfmaddsubps512_mask,\n+\t__builtin_ia32_vfmaddsubps512_mask3,\n+\t__builtin_ia32_vfmaddsubps512_maskz,\n+\t__builtin_ia32_vfmsubaddpd512_mask3,\n+\t__builtin_ia32_vfmsubaddps512_mask3, __builtin_ia32_vfmsubpd512_mask3,\n+\t__builtin_ia32_vfmsubps512_mask3, __builtin_ia32_vfmsubsd3_mask3,\n+\t__builtin_ia32_vfmsubss3_mask3, __builtin_ia32_vfnmaddpd512_mask,\n+\t__builtin_ia32_vfnmaddps512_mask, __builtin_ia32_vfnmsubpd512_mask,\n+\t__builtin_ia32_vfnmsubpd512_mask3, __builtin_ia32_vfnmsubps512_mask,\n+\t__builtin_ia32_vfnmsubps512_mask3, __builtin_ia32_vpermilpd512_mask,\n+\t__builtin_ia32_vpermilps512_mask, __builtin_ia32_exp2ps_mask,\n+\t__builtin_ia32_exp2pd_mask, __builtin_ia32_exp2ps_mask,\n+\t__builtin_ia32_exp2pd_mask, __builtin_ia32_rsqrt28ps_mask,\n+\t__builtin_ia32_rsqrt28pd_mask, __builtin_ia32_gatherpfdps,\n+\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdps,\n+\t__builtin_ia32_scatterpfqps, __builtin_ia32_addpd512_mask,\n+\t__builtin_ia32_addps512_mask, __builtin_ia32_addsd_mask,\n+\t__builtin_ia32_addss_mask, __builtin_ia32_alignd512_mask,\n+\t__builtin_ia32_alignq512_mask, __builtin_ia32_cmpd512_mask,\n+\t__builtin_ia32_cmppd512_mask, __builtin_ia32_cmpps512_mask,\n+\t__builtin_ia32_cmpq512_mask, __builtin_ia32_cmpsd_mask,\n+\t__builtin_ia32_cmpss_mask, __builtin_ia32_cvtdq2ps512_mask,\n+\t__builtin_ia32_cvtpd2dq512_mask, __builtin_ia32_cvtpd2ps512_mask,\n+\t__builtin_ia32_cvtpd2udq512_mask, __builtin_ia32_cvtps2dq512_mask,\n+\t__builtin_ia32_cvtps2pd512_mask, __builtin_ia32_cvtps2udq512_mask,\n+\t__builtin_ia32_cvtsd2ss_mask, __builtin_ia32_cvtsi2sd64,\n+\t__builtin_ia32_cvtsi2ss32, __builtin_ia32_cvtsi2ss64,\n+\t__builtin_ia32_cvtss2sd_mask, __builtin_ia32_cvttpd2dq512_mask,\n+\t__builtin_ia32_cvttpd2udq512_mask, __builtin_ia32_cvttps2dq512_mask,\n+\t__builtin_ia32_cvttps2udq512_mask, __builtin_ia32_cvtudq2ps512_mask,\n+\t__builtin_ia32_cvtusi2sd64, __builtin_ia32_cvtusi2ss32,\n+\t__builtin_ia32_cvtusi2ss64, __builtin_ia32_divpd512_mask,\n+\t__builtin_ia32_divps512_mask, __builtin_ia32_divsd_mask,\n+\t__builtin_ia32_divss_mask, __builtin_ia32_extractf32x4_mask,\n+\t__builtin_ia32_extractf64x4_mask, __builtin_ia32_extracti32x4_mask,\n+\t__builtin_ia32_extracti64x4_mask, __builtin_ia32_fixupimmpd512_mask,\n+\t__builtin_ia32_fixupimmpd512_maskz, __builtin_ia32_fixupimmps512_mask,\n+\t__builtin_ia32_fixupimmps512_maskz, __builtin_ia32_fixupimmsd_mask,\n+\t__builtin_ia32_fixupimmsd_maskz, __builtin_ia32_fixupimmss_mask,\n+\t__builtin_ia32_fixupimmss_maskz, __builtin_ia32_gatherdiv8df,\n+\t__builtin_ia32_gatherdiv8di, __builtin_ia32_gatherdiv16sf,\n+\t__builtin_ia32_gatherdiv16si, __builtin_ia32_gathersiv16sf,\n+\t__builtin_ia32_gathersiv16si, __builtin_ia32_gathersiv8df,\n+\t__builtin_ia32_gathersiv8di, __builtin_ia32_getexppd512_mask,\n+\t__builtin_ia32_getexpps512_mask, __builtin_ia32_getexpsd128_mask,\n+\t__builtin_ia32_getexpss128_mask, __builtin_ia32_getmantpd512_mask,\n+\t__builtin_ia32_getmantps512_mask, __builtin_ia32_getmantsd_mask,\n+\t__builtin_ia32_getmantss_mask, __builtin_ia32_insertf32x4_mask,\n+\t__builtin_ia32_insertf64x4_mask, __builtin_ia32_inserti32x4_mask,\n+\t__builtin_ia32_inserti64x4_mask, __builtin_ia32_maxpd512_mask,\n+\t__builtin_ia32_maxps512_mask, __builtin_ia32_maxsd_mask,\n+\t__builtin_ia32_maxss_mask, __builtin_ia32_minpd512_mask,\n+\t__builtin_ia32_minps512_mask, __builtin_ia32_minsd_mask,\n+\t__builtin_ia32_minss_mask, __builtin_ia32_mulpd512_mask,\n+\t__builtin_ia32_mulps512_mask, __builtin_ia32_mulsd_mask,\n+\t__builtin_ia32_mulss_mask, __builtin_ia32_permdf512_mask,\n+\t__builtin_ia32_permdi512_mask, __builtin_ia32_prold512_mask,\n+\t__builtin_ia32_prolq512_mask, __builtin_ia32_prord512_mask,\n+\t__builtin_ia32_prorq512_mask, __builtin_ia32_pshufd512_mask,\n+\t__builtin_ia32_pslldi512_mask, __builtin_ia32_psllqi512_mask,\n+\t__builtin_ia32_psradi512_mask, __builtin_ia32_psraqi512_mask,\n+\t__builtin_ia32_psrldi512_mask, __builtin_ia32_psrlqi512_mask,\n+\t__builtin_ia32_pternlogd512_mask, __builtin_ia32_pternlogd512_maskz,\n+\t__builtin_ia32_pternlogq512_mask, __builtin_ia32_pternlogq512_maskz,\n+\t__builtin_ia32_rndscalepd_mask, __builtin_ia32_rndscaleps_mask,\n+\t__builtin_ia32_rndscalesd_mask, __builtin_ia32_rndscaless_mask,\n+\t__builtin_ia32_scalefpd512_mask, __builtin_ia32_scalefps512_mask,\n+\t__builtin_ia32_scalefsd_mask, __builtin_ia32_scalefss_mask,\n+\t__builtin_ia32_scatterdiv8df, __builtin_ia32_scatterdiv8di,\n+\t__builtin_ia32_scatterdiv16sf, __builtin_ia32_scatterdiv16si,\n+\t__builtin_ia32_scattersiv16sf, __builtin_ia32_scattersiv16si,\n+\t__builtin_ia32_scattersiv8df, __builtin_ia32_scattersiv8di,\n+\t__builtin_ia32_shuf_f32x4_mask, __builtin_ia32_shuf_f64x2_mask,\n+\t__builtin_ia32_shuf_i32x4_mask, __builtin_ia32_shuf_i64x2_mask,\n+\t__builtin_ia32_shufpd512_mask, __builtin_ia32_shufps512_mask,\n+\t__builtin_ia32_sqrtpd512_mask, __builtin_ia32_sqrtps512_mask,\n+\t__builtin_ia32_sqrtsd_mask, __builtin_ia32_sqrtss_mask,\n+\t__builtin_ia32_subpd512_mask, __builtin_ia32_subps512_mask,\n+\t__builtin_ia32_subsd_mask, __builtin_ia32_subss_mask,\n+\t__builtin_ia32_ucmpd512_mask, __builtin_ia32_ucmpq512_mask,\n+\t__builtin_ia32_vcomisd, __builtin_ia32_vcomiss,\n+\t__builtin_ia32_vcvtph2ps512_mask, __builtin_ia32_vcvtps2ph512_mask,\n+\t__builtin_ia32_vcvtsd2si32, __builtin_ia32_vcvtsd2si64,\n+\t__builtin_ia32_vcvtsd2usi32, __builtin_ia32_vcvtsd2usi64,\n+\t__builtin_ia32_vcvtss2si32, __builtin_ia32_vcvtss2si64,\n+\t__builtin_ia32_vcvtss2usi32, __builtin_ia32_vcvtss2usi64,\n+\t__builtin_ia32_vcvttsd2si32, __builtin_ia32_vcvttsd2si64,\n+\t__builtin_ia32_vcvttsd2usi32, __builtin_ia32_vcvttsd2usi64,\n+\t__builtin_ia32_vcvttss2si32, __builtin_ia32_vcvttss2si64,\n+\t__builtin_ia32_vcvttss2usi32, __builtin_ia32_vcvttss2usi64,\n+\t__builtin_ia32_vfmaddpd512_mask, __builtin_ia32_vfmaddpd512_mask3,\n+\t__builtin_ia32_vfmaddpd512_maskz, __builtin_ia32_vfmaddps512_mask,\n+\t__builtin_ia32_vfmaddps512_mask3, __builtin_ia32_vfmaddps512_maskz,\n+\t__builtin_ia32_vfmaddsd3_mask, __builtin_ia32_vfmaddsd3_mask3,\n+\t__builtin_ia32_vfmaddsd3_maskz, __builtin_ia32_vfmaddss3_mask,\n+\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n+\t__builtin_ia32_vfmaddsubpd512_mask,\n+\t__builtin_ia32_vfmaddsubpd512_mask3,\n+\t__builtin_ia32_vfmaddsubpd512_maskz,\n+\t__builtin_ia32_vfmaddsubps512_mask,\n+\t__builtin_ia32_vfmaddsubps512_mask3,\n+\t__builtin_ia32_vfmaddsubps512_maskz,\n+\t__builtin_ia32_vfmsubaddpd512_mask3,\n+\t__builtin_ia32_vfmsubaddps512_mask3, __builtin_ia32_vfmsubpd512_mask3,\n+\t__builtin_ia32_vfmsubps512_mask3, __builtin_ia32_vfmsubsd3_mask3,\n+\t__builtin_ia32_vfmsubss3_mask3, __builtin_ia32_vfnmaddpd512_mask,\n+\t__builtin_ia32_vfnmaddps512_mask, __builtin_ia32_vfnmsubpd512_mask,\n+\t__builtin_ia32_vfnmsubpd512_mask3, __builtin_ia32_vfnmsubps512_mask,\n+\t__builtin_ia32_vfnmsubps512_mask3, __builtin_ia32_vpermilpd512_mask,\n+\t__builtin_ia32_vpermilps512_mask, __builtin_ia32_gatherpfdps,\n+\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdps,\n+\t__builtin_ia32_scatterpfqps, __builtin_ia32_exp2pd_mask,\n+\t__builtin_ia32_exp2ps_mask, __builtin_ia32_rcp28pd_mask,\n+\t__builtin_ia32_rcp28ps_mask, __builtin_ia32_rsqrt28pd_mask,\n+\t__builtin_ia32_rsqrt28ps_mask.\n+\t* gcc.target/i386/sse-14.c (test_1y): New.\n+\t(test_2y): Ditto.\n+\t(test_2vx): Ditto.\n+\t(test_3x): Ditto.\n+\t(test_3v): Ditto.\n+\t(test_3vx): Ditto.\n+\t(test_4x): Ditto.\n+\t(test_4y): Ditto.\n+\t(test_4v): Ditto.\n+\t(pragma GCC target): Add avx512f, avx512er, avx512cd, avx512pf.\n+\t(tests): Add  _mm512_cvt_roundepi32_ps, _mm512_cvt_roundepu32_ps,\n+\t_mm512_cvt_roundpd_epi32, _mm512_cvt_roundpd_epu32,\n+\t_mm512_cvt_roundpd_ps, _mm512_cvt_roundph_ps,\n+\t_mm512_cvt_roundps_epi32, _mm512_cvt_roundps_epu32,\n+\t_mm512_cvt_roundps_pd, _mm512_cvtps_ph, _mm512_cvtt_roundpd_epi32,\n+\t_mm512_cvtt_roundpd_epu32, _mm512_cvtt_roundps_epi32,\n+\t_mm512_cvtt_roundps_epu32, _mm512_extractf32x4_ps,\n+\t_mm512_extractf64x4_pd, _mm512_extracti32x4_epi32,\n+\t_mm512_extracti64x4_epi64, _mm512_getexp_round_pd,\n+\t_mm512_getexp_round_ps, _mm512_getmant_round_pd,\n+\t_mm512_getmant_round_ps, _mm512_permute_pd, _mm512_permute_ps,\n+\t_mm512_permutex_epi64, _mm512_permutex_pd, _mm512_rol_epi32,\n+\t_mm512_rol_epi64, _mm512_ror_epi32, _mm512_ror_epi64,\n+\t_mm512_shuffle_epi32, _mm512_slli_epi32, _mm512_slli_epi64,\n+\t_mm512_sqrt_round_pd, _mm512_sqrt_round_ps, _mm512_srai_epi32,\n+\t_mm512_srai_epi64, _mm512_srli_epi32, _mm512_srli_epi64,\n+\t_mm_cvt_roundsd_i32, _mm_cvt_roundsd_u32, _mm_cvt_roundss_i32,\n+\t_mm_cvt_roundss_u32, _mm_cvtt_roundsd_i32, _mm_cvtt_roundsd_u32,\n+\t_mm_cvtt_roundss_i32, _mm_cvtt_roundss_u32, _mm512_getmant_pd,\n+\t_mm512_getmant_ps, _mm_cvt_roundi32_ss, _mm512_add_round_pd,\n+\t_mm512_add_round_ps, _mm512_alignr_epi32, _mm512_alignr_epi64,\n+\t_mm512_cmp_epi32_mask, _mm512_cmp_epi64_mask, _mm512_cmp_epu32_mask,\n+\t_mm512_cmp_epu64_mask, _mm512_cmp_pd_mask, _mm512_cmp_ps_mask,\n+\t_mm512_div_round_pd, _mm512_div_round_ps, _mm512_i32gather_epi32,\n+\t_mm512_i32gather_epi64, _mm512_i32gather_pd, _mm512_i32gather_ps,\n+\t_mm512_i64gather_epi32, _mm512_i64gather_epi64, _mm512_i64gather_pd,\n+\t_mm512_i64gather_ps, _mm512_insertf32x4, _mm512_insertf64x4,\n+\t_mm512_inserti32x4, _mm512_inserti64x4,\n+\t_mm512_maskz_cvt_roundepi32_ps, _mm512_maskz_cvt_roundepu32_ps,\n+\t_mm512_maskz_cvt_roundpd_epi32, _mm512_maskz_cvt_roundpd_epu32,\n+\t_mm512_maskz_cvt_roundpd_ps, _mm512_maskz_cvt_roundph_ps,\n+\t_mm512_maskz_cvt_roundps_epi32, _mm512_maskz_cvt_roundps_epu32,\n+\t_mm512_maskz_cvt_roundps_pd, _mm512_maskz_cvtps_ph,\n+\t_mm512_maskz_cvtt_roundpd_epi32, _mm512_maskz_cvtt_roundpd_epu32,\n+\t_mm512_maskz_cvtt_roundps_epi32, _mm512_maskz_cvtt_roundps_epu32,\n+\t_mm512_maskz_extractf32x4_ps, _mm512_maskz_extractf64x4_pd,\n+\t_mm512_maskz_extracti32x4_epi32, _mm512_maskz_extracti64x4_epi64,\n+\t_mm512_maskz_getexp_round_pd, _mm512_maskz_getexp_round_ps,\n+\t_mm512_maskz_getmant_round_pd, _mm512_maskz_getmant_round_ps,\n+\t_mm512_maskz_permute_pd, _mm512_maskz_permute_ps,\n+\t_mm512_maskz_permutex_epi64, _mm512_maskz_permutex_pd,\n+\t_mm512_maskz_rol_epi32, _mm512_maskz_rol_epi64,\n+\t_mm512_maskz_ror_epi32, _mm512_maskz_ror_epi64,\n+\t_mm512_maskz_shuffle_epi32, _mm512_maskz_slli_epi32,\n+\t_mm512_maskz_slli_epi64, _mm512_maskz_sqrt_round_pd,\n+\t_mm512_maskz_sqrt_round_ps, _mm512_maskz_srai_epi32,\n+\t_mm512_maskz_srai_epi64, _mm512_maskz_srli_epi32,\n+\t_mm512_maskz_srli_epi64, _mm512_max_round_pd, _mm512_max_round_ps,\n+\t_mm512_min_round_pd, _mm512_min_round_ps, _mm512_mul_round_pd,\n+\t_mm512_mul_round_ps, _mm512_scalef_round_pd, _mm512_scalef_round_ps,\n+\t_mm512_shuffle_f32x4, _mm512_shuffle_f64x2, _mm512_shuffle_i32x4,\n+\t_mm512_shuffle_i64x2, _mm512_shuffle_pd, _mm512_shuffle_ps,\n+\t_mm512_sub_round_pd, _mm512_sub_round_ps, _mm_add_round_sd,\n+\t_mm_add_round_ss, _mm_cmp_sd_mask, _mm_cmp_ss_mask,\n+\t_mm_cvt_roundi64_sd, _mm_cvt_roundi64_ss, _mm_cvt_roundsd_ss,\n+\t_mm_cvt_roundss_sd, _mm_cvt_roundu32_ss, _mm_cvt_roundu64_sd,\n+\t_mm_cvt_roundu64_ss, _mm_div_round_sd, _mm_div_round_ss,\n+\t_mm_getexp_round_sd, _mm_getexp_round_ss, _mm_getmant_round_sd,\n+\t_mm_getmant_round_ss, _mm_mul_round_sd, _mm_mul_round_ss,\n+\t_mm_scalef_round_sd, _mm_scalef_round_ss, _mm_sqrt_round_sd,\n+\t_mm_sqrt_round_ss, _mm_sub_round_sd, _mm_sub_round_ss,\n+\t_mm512_cmp_round_pd_mask, _mm512_cmp_round_ps_mask,\n+\t_mm512_maskz_roundscale_round_pd, _mm512_maskz_roundscale_round_ps,\n+\t_mm_cmp_round_sd_mask, _mm_cmp_round_ss_mask, _mm_comi_round_sd,\n+\t_mm_comi_round_ss, _mm_roundscale_round_sd, _mm_roundscale_round_ss,\n+\t_mm512_fmadd_round_pd, _mm512_fmadd_round_ps,\n+\t_mm512_fmaddsub_round_pd, _mm512_fmaddsub_round_ps,\n+\t_mm512_fmsub_round_pd, _mm512_fmsub_round_ps,\n+\t_mm512_fmsubadd_round_pd, _mm512_fmsubadd_round_ps,\n+\t_mm512_fnmadd_round_pd, _mm512_fnmadd_round_ps,\n+\t_mm512_fnmsub_round_pd, _mm512_fnmsub_round_ps,\n+\t_mm512_mask_cmp_epi32_mask, _mm512_mask_cmp_epi64_mask,\n+\t_mm512_mask_cmp_epu32_mask, _mm512_mask_cmp_epu64_mask,\n+\t_mm512_mask_cmp_pd_mask, _mm512_mask_cmp_ps_mask,\n+\t_mm512_mask_cvt_roundepi32_ps, _mm512_mask_cvt_roundepu32_ps,\n+\t_mm512_mask_cvt_roundpd_epi32, _mm512_mask_cvt_roundpd_epu32,\n+\t_mm512_mask_cvt_roundpd_ps, _mm512_mask_cvt_roundph_ps,\n+\t_mm512_mask_cvt_roundps_epi32, _mm512_mask_cvt_roundps_epu32,\n+\t_mm512_mask_cvt_roundps_pd, _mm512_mask_cvtps_ph,\n+\t_mm512_mask_cvtt_roundpd_epi32, _mm512_mask_cvtt_roundpd_epu32,\n+\t_mm512_mask_cvtt_roundps_epi32, _mm512_mask_cvtt_roundps_epu32,\n+\t_mm512_mask_extractf32x4_ps, _mm512_mask_extractf64x4_pd,\n+\t_mm512_mask_extracti32x4_epi32, _mm512_mask_extracti64x4_epi64,\n+\t_mm512_mask_getexp_round_pd, _mm512_mask_getexp_round_ps,\n+\t_mm512_mask_getmant_round_pd, _mm512_mask_getmant_round_ps,\n+\t_mm512_mask_permute_pd, _mm512_mask_permute_ps,\n+\t_mm512_mask_permutex_epi64, _mm512_mask_permutex_pd,\n+\t_mm512_mask_rol_epi32, _mm512_mask_rol_epi64, _mm512_mask_ror_epi32,\n+\t_mm512_mask_ror_epi64, _mm512_mask_shuffle_epi32,\n+\t_mm512_mask_slli_epi32, _mm512_mask_slli_epi64,\n+\t_mm512_mask_sqrt_round_pd, _mm512_mask_sqrt_round_ps,\n+\t_mm512_mask_srai_epi32, _mm512_mask_srai_epi64,\n+\t_mm512_mask_srli_epi32, _mm512_mask_srli_epi64,\n+\t_mm512_maskz_add_round_pd, _mm512_maskz_add_round_ps,\n+\t_mm512_maskz_alignr_epi32, _mm512_maskz_alignr_epi64,\n+\t_mm512_maskz_div_round_pd, _mm512_maskz_div_round_ps,\n+\t_mm512_maskz_insertf32x4, _mm512_maskz_insertf64x4,\n+\t_mm512_maskz_inserti32x4, _mm512_maskz_inserti64x4,\n+\t_mm512_maskz_max_round_pd, _mm512_maskz_max_round_ps,\n+\t_mm512_maskz_min_round_pd, _mm512_maskz_min_round_ps,\n+\t_mm512_maskz_mul_round_pd, _mm512_maskz_mul_round_ps,\n+\t_mm512_maskz_scalef_round_pd, _mm512_maskz_scalef_round_ps,\n+\t_mm512_maskz_shuffle_f32x4, _mm512_maskz_shuffle_f64x2,\n+\t_mm512_maskz_shuffle_i32x4, _mm512_maskz_shuffle_i64x2,\n+\t_mm512_maskz_shuffle_pd, _mm512_maskz_shuffle_ps,\n+\t_mm512_maskz_sub_round_pd, _mm512_maskz_sub_round_ps,\n+\t_mm512_ternarylogic_epi32, _mm512_ternarylogic_epi64,\n+\t_mm_fmadd_round_sd, _mm_fmadd_round_ss, _mm_fmsub_round_sd,\n+\t_mm_fmsub_round_ss, _mm_fnmadd_round_sd, _mm_fnmadd_round_ss,\n+\t_mm_fnmsub_round_sd, _mm_fnmsub_round_ss, _mm_mask_cmp_sd_mask,\n+\t_mm_mask_cmp_ss_mask, _mm_maskz_add_round_sd, _mm_maskz_add_round_ss,\n+\t_mm_maskz_cvt_roundsd_ss, _mm_maskz_cvt_roundss_sd,\n+\t_mm_maskz_div_round_sd, _mm_maskz_div_round_ss,\n+\t_mm_maskz_getexp_round_sd, _mm_maskz_getexp_round_ss,\n+\t_mm_maskz_getmant_round_sd, _mm_maskz_getmant_round_ss,\n+\t_mm_maskz_mul_round_sd, _mm_maskz_mul_round_ss,\n+\t_mm_maskz_scalef_round_sd, _mm_maskz_scalef_round_ss,\n+\t_mm_maskz_sqrt_round_sd, _mm_maskz_sqrt_round_ss,\n+\t_mm_maskz_sub_round_sd, _mm_maskz_sub_round_ss,\n+\t_mm512_i32scatter_epi32, _mm512_i32scatter_epi64,\n+\t_mm512_i32scatter_pd, _mm512_i32scatter_ps, _mm512_i64scatter_epi32,\n+\t_mm512_i64scatter_epi64, _mm512_i64scatter_pd, _mm512_i64scatter_ps,\n+\t_mm512_mask_roundscale_round_pd, _mm512_mask_roundscale_round_ps,\n+\t_mm512_mask_cmp_round_pd_mask, _mm512_mask_cmp_round_ps_mask,\n+\t_mm_fixupimm_round_sd, _mm_fixupimm_round_ss,\n+\t_mm_mask_cmp_round_sd_mask, _mm_mask_cmp_round_ss_mask,\n+\t_mm_maskz_roundscale_round_sd, _mm_maskz_roundscale_round_ss,\n+\t_mm512_mask3_fmadd_round_pd, _mm512_mask3_fmadd_round_ps,\n+\t_mm512_mask3_fmaddsub_round_pd, _mm512_mask3_fmaddsub_round_ps,\n+\t_mm512_mask3_fmsub_round_pd, _mm512_mask3_fmsub_round_ps,\n+\t_mm512_mask3_fmsubadd_round_pd, _mm512_mask3_fmsubadd_round_ps,\n+\t_mm512_mask3_fnmadd_round_pd, _mm512_mask3_fnmadd_round_ps,\n+\t_mm512_mask3_fnmsub_round_pd, _mm512_mask3_fnmsub_round_ps,\n+\t_mm512_mask_add_round_pd, _mm512_mask_add_round_ps,\n+\t_mm512_mask_alignr_epi32, _mm512_mask_alignr_epi64,\n+\t_mm512_mask_div_round_pd, _mm512_mask_div_round_ps,\n+\t_mm512_mask_fmadd_round_pd, _mm512_mask_fmadd_round_ps,\n+\t_mm512_mask_fmaddsub_round_pd, _mm512_mask_fmaddsub_round_ps,\n+\t_mm512_mask_fmsub_round_pd, _mm512_mask_fmsub_round_ps,\n+\t_mm512_mask_fmsubadd_round_pd, _mm512_mask_fmsubadd_round_ps,\n+\t_mm512_mask_fnmadd_round_pd, _mm512_mask_fnmadd_round_ps,\n+\t_mm512_mask_fnmsub_round_pd, _mm512_mask_fnmsub_round_ps,\n+\t_mm512_mask_i32gather_epi32, _mm512_mask_i32gather_epi64,\n+\t_mm512_mask_i32gather_pd, _mm512_mask_i32gather_ps,\n+\t_mm512_mask_i64gather_epi32, _mm512_mask_i64gather_epi64,\n+\t_mm512_mask_i64gather_pd, _mm512_mask_i64gather_ps,\n+\t_mm512_mask_insertf32x4, _mm512_mask_insertf64x4,\n+\t_mm512_mask_inserti32x4, _mm512_mask_inserti64x4,\n+\t_mm512_mask_max_round_pd, _mm512_mask_max_round_ps,\n+\t_mm512_mask_min_round_pd, _mm512_mask_min_round_ps,\n+\t_mm512_mask_mul_round_pd, _mm512_mask_mul_round_ps,\n+\t_mm512_mask_scalef_round_pd, _mm512_mask_scalef_round_ps,\n+\t_mm512_mask_shuffle_f32x4, _mm512_mask_shuffle_f64x2,\n+\t_mm512_mask_shuffle_i32x4, _mm512_mask_shuffle_i64x2,\n+\t_mm512_mask_shuffle_pd, _mm512_mask_shuffle_ps,\n+\t_mm512_mask_sub_round_pd, _mm512_mask_sub_round_ps,\n+\t_mm512_mask_ternarylogic_epi32, _mm512_mask_ternarylogic_epi64,\n+\t_mm512_maskz_fmadd_round_pd, _mm512_maskz_fmadd_round_ps,\n+\t_mm512_maskz_fmaddsub_round_pd, _mm512_maskz_fmaddsub_round_ps,\n+\t_mm512_maskz_fmsub_round_pd, _mm512_maskz_fmsub_round_ps,\n+\t_mm512_maskz_fmsubadd_round_pd, _mm512_maskz_fmsubadd_round_ps,\n+\t_mm512_maskz_fnmadd_round_pd, _mm512_maskz_fnmadd_round_ps,\n+\t_mm512_maskz_fnmsub_round_pd, _mm512_maskz_fnmsub_round_ps,\n+\t_mm512_maskz_ternarylogic_epi32, _mm512_maskz_ternarylogic_epi64,\n+\t_mm_mask3_fmadd_round_sd, _mm_mask3_fmadd_round_ss,\n+\t_mm_mask3_fmsub_round_sd, _mm_mask3_fmsub_round_ss,\n+\t_mm_mask3_fnmadd_round_sd, _mm_mask3_fnmadd_round_ss,\n+\t_mm_mask3_fnmsub_round_sd, _mm_mask3_fnmsub_round_ss,\n+\t_mm_mask_add_round_sd, _mm_mask_add_round_ss, _mm_mask_cvt_roundsd_ss,\n+\t_mm_mask_cvt_roundss_sd, _mm_mask_div_round_sd, _mm_mask_div_round_ss,\n+\t_mm_mask_fmadd_round_sd, _mm_mask_fmadd_round_ss,\n+\t_mm_mask_fmsub_round_sd, _mm_mask_fmsub_round_ss,\n+\t_mm_mask_fnmadd_round_sd, _mm_mask_fnmadd_round_ss,\n+\t_mm_mask_fnmsub_round_sd, _mm_mask_fnmsub_round_ss,\n+\t_mm_mask_getexp_round_sd, _mm_mask_getexp_round_ss,\n+\t_mm_mask_getmant_round_sd, _mm_mask_getmant_round_ss,\n+\t_mm_mask_mul_round_sd, _mm_mask_mul_round_ss,\n+\t_mm_mask_scalef_round_sd, _mm_mask_scalef_round_ss,\n+\t_mm_mask_sqrt_round_sd, _mm_mask_sqrt_round_ss, _mm_mask_sub_round_sd,\n+\t_mm_mask_sub_round_ss, _mm_maskz_fmadd_round_sd,\n+\t_mm_maskz_fmadd_round_ss, _mm_maskz_fmsub_round_sd,\n+\t_mm_maskz_fmsub_round_ss, _mm_maskz_fnmadd_round_sd,\n+\t_mm_maskz_fnmadd_round_ss, _mm_maskz_fnmsub_round_sd,\n+\t_mm_maskz_fnmsub_round_ss, _mm512_mask_i32scatter_epi32,\n+\t_mm512_mask_i32scatter_epi64, _mm512_mask_i32scatter_pd,\n+\t_mm512_mask_i32scatter_ps, _mm512_mask_i64scatter_epi32,\n+\t_mm512_mask_i64scatter_epi64, _mm512_mask_i64scatter_pd,\n+\t_mm512_mask_i64scatter_ps, _mm_mask_getmant_sd, _mm_mask_getmant_ss,\n+\t_mm_mask_roundscale_round_sd, _mm_mask_roundscale_round_ss,\n+\t_mm512_mask_fixupimm_round_pd, _mm512_mask_fixupimm_round_ps,\n+\t_mm512_maskz_fixupimm_round_pd, _mm512_maskz_fixupimm_round_ps,\n+\t_mm_mask_fixupimm_round_sd, _mm_mask_fixupimm_round_ss,\n+\t_mm_maskz_fixupimm_round_sd, _mm_maskz_fixupimm_round_ss,\n+\t_mm512_mask_prefetch_i32gather_ps, _mm512_mask_prefetch_i32scatter_ps,\n+\t_mm512_mask_prefetch_i64gather_ps, _mm512_mask_prefetch_i64scatter_ps,\n+\t_mm512_exp2a23_round_pd, _mm512_exp2a23_round_ps,\n+\t_mm512_rcp28_round_pd, _mm512_rcp28_round_ps, _mm512_rsqrt28_round_pd,\n+\t_mm512_rsqrt28_round_ps, _mm512_maskz_exp2a23_round_pd,\n+\t_mm512_maskz_exp2a23_round_ps, _mm512_maskz_rcp28_round_pd,\n+\t_mm512_maskz_rcp28_round_ps, _mm512_maskz_rsqrt28_round_pd,\n+\t_mm512_maskz_rsqrt28_round_ps, _mm512_mask_exp2a23_round_pd,\n+\t_mm512_mask_exp2a23_round_ps, _mm512_mask_rcp28_round_pd,\n+\t_mm512_mask_rcp28_round_ps, _mm512_mask_rsqrt28_round_pd,\n+\t_mm512_mask_rsqrt28_round_ps.\n+\t* gcc.target/i386/testimm-10.c: New file.\n+\t* gcc.target/i386/testround-1.c: Ditto.\n+\t* gcc.target/i386/testround-2.c: Ditto.\n+\t* gcc.target/x86_64/abi/avx512f/test_m512_returning.c: Ditto.\n+\t* gcc.target/x86_64/abi/avx512f/test_passing_m512.c: Ditto.\n+\t* gcc.target/x86_64/abi/avx512f/test_passing_structs.c: Ditto.\n+\t* gcc.target/x86_64/abi/avx512f/test_passing_unions.c: Ditto.\n+\t* gcc.target/i386/avx512cd-check.h: Ditto.\n+\t* gcc.target/i386/avx512er-check.h: Ditto.\n+\t* gcc.target/i386/avx512f-check.h: Ditto.\n+\t* gcc.target/i386/avx512f-helper.h: Ditto.\n+\t* gcc.target/i386/avx512f-mask-type.h: Ditto.\n+\t* gcc.target/i386/avx512f-os-support.h: Ditto.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx512f): New.\n+\t(check_effective_target_avx512cd): Ditto.\n+\t(check_effective_target_avx512er): Ditto.\n+\t* gcc.target/i386/m128-check.h (CHECK_FP_EXP): Ditto.\n+\t* gcc.target/i386/m512-check.h: Ditto.\n+\t* gcc.target/x86_64/abi/avx512f/abi-avx512f.exp: New file.\n+\t* gcc.target/x86_64/abi/avx512f/args.h: Ditto.\n+\t* gcc.target/x86_64/abi/avx512f/asm-support.S: Ditto.\n+\t* gcc.target/x86_64/abi/avx512f/avx512f-check.h: Ditto.\n+\t* lib/target-supports.exp (check_effective_target_avx512f): New.\n+\n 2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "73729eb61d11015c610f52cde21ce3c40a0e9de4", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "f73d8d7738101ae3e87c9e0aa8dae5409d4d4d55", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "bccf8b48e06e9b53f0ed20548deb8dbb4f14502a", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-check.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-check.h?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,46 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512cd_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512cd_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ebx & (bit_AVX512CD)) == (bit_AVX512CD)))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "036031b7659fd930134e94958c7d660e8e452767", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpbroadcastmb2q-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmb2q-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmb2q-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmb2q-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastmb2q\\[ \\\\t\\]+\\[^\\n\\]*k\\[1-7\\]\\[^\\n\\]*%zmm\\[0-7\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcastmb_epi64 (m8);\n+}"}, {"sha": "05f4bfc4252ec768a812f3d5110db11a13636d2d", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpbroadcastmb2q-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmb2q-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmb2q-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmb2q-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define HAVE_512\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+\n+CALC (long long *res, __mmask8 src)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    res[i] = src;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res;\n+  long long res_ref[SIZE];\n+  __mmask8 src;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res.a[i] = -1;\n+    }\n+\n+  res.x = INTRINSIC (_broadcastmb_epi64) (src);\n+\n+  CALC (res_ref, src);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res, res_ref))\n+    abort ();\n+}"}, {"sha": "36abb5e7bc196411efdcd5f2adcce896f85345e2", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpbroadcastmw2d-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmw2d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmw2d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmw2d-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastmw2d\\[ \\\\t\\]+\\[^\\n\\]*k\\[1-7\\]\\[^\\n\\]*%zmm\\[0-7\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcastmw_epi32 (m16);\n+}"}, {"sha": "7282110ab371630ba19b01681f2762f1d556ec0e", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpbroadcastmw2d-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmw2d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmw2d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpbroadcastmw2d-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define HAVE_512\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+\n+CALC (int *res, __mmask16 src)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    res[i] = src;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res;\n+  int res_ref[SIZE];\n+  __mmask16 src;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res.a[i] = -1;\n+    }\n+\n+  res.x = INTRINSIC (_broadcastmw_epi32) (src);\n+\n+  CALC (res_ref, src);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res, res_ref))\n+    abort ();\n+}"}, {"sha": "d3f2a258dbf4c2c03c83b8f7170bb4f68bced665", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpconflictd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpconflictd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpconflictd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpconflictd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s;\n+volatile __m512i res;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_conflict_epi32 (s);\n+  res = _mm512_mask_conflict_epi32 (res, 2, s);\n+  res = _mm512_maskz_conflict_epi32 (2, s);\n+}"}, {"sha": "16597fbafb0c36f42da028367ef83ce35c80af27", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpconflictd-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define HAVE_512\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *s, int *r)\n+{\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = 0;\n+      for (j = 0; j < i; j++)\n+\t{\n+\t  r[i] |= s[j] == s[i] ? 1 << j : 0;\n+\t}\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s, res1, res2, res3;\n+  int res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 1234 * (i % 5);\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_conflict_epi32) (s.x);\n+  res2.x = INTRINSIC (_mask_conflict_epi32) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_conflict_epi32) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "795fa6add481c6c0a99b34610918d3794fc1169c", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpconflictq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpconflictq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpconflictq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpconflictq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s;\n+volatile __m512i res;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_conflict_epi64 (s);\n+  res = _mm512_mask_conflict_epi64 (res, 2, s);\n+  res = _mm512_maskz_conflict_epi64 (2, s);\n+}"}, {"sha": "a2695195c48c1f8a9159b8b44b0f4ed8400c6fcc", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vpconflictq-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vpconflictq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define HAVE_512\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (long long *s, long long *r)\n+{\n+  int i, j;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = 0;\n+      for (j = 0; j < i; j++)\n+\t{\n+\t  r[i] |= s[i] == s[j] ? 1 << j : 0;\n+\t}\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s, res1, res2, res3;\n+  long long res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 12345678 * (i % 5);\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_conflict_epi64) (s.x);\n+  res2.x = INTRINSIC (_mask_conflict_epi64) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_conflict_epi64) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "65a2a32751ab8424c1aec0f3a23eaef050adea79", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vplzcntd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler-times \"vplzcntd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vplzcntd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1} } */\n+/* { dg-final { scan-assembler-times \"vplzcntd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s;\n+volatile __m512i res;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_lzcnt_epi32 (s);\n+  res = _mm512_mask_lzcnt_epi32 (res, 2, s);\n+  res = _mm512_maskz_lzcnt_epi32 (2, s);\n+}"}, {"sha": "0a357b69fa60d70220c9921958a1b7b2f9767672", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vplzcntd-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define HAVE_512\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include <strings.h>\n+\n+static void\n+CALC (int *s, int *r)\n+{\n+  int i, res;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res = 0;\n+      while ((res < 32) && (((s[i] >> (31 - res)) & 1) == 0))\n+\t++res;\n+      r[i] = res;\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s, res1, res2, res3;\n+  int res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 12345678 * (i % 5);\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_lzcnt_epi32) (s.x);\n+  res2.x = INTRINSIC (_mask_lzcnt_epi32) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_lzcnt_epi32) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "0324cd0c2be60bcbe0b7eda07a39d3f0eaabc9cc", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vplzcntq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler-times \"vplzcntq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vplzcntq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vplzcntq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s;\n+volatile __m512i res;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_lzcnt_epi64 (s);\n+  res = _mm512_maskz_lzcnt_epi64 (2, s);\n+  res = _mm512_mask_lzcnt_epi64 (res, 2, s);\n+}"}, {"sha": "f0cc40304c9ded54c255b4b544948338f6575244", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vplzcntq-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vplzcntq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define HAVE_512\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#include <strings.h>\n+\n+static void\n+CALC (long long *s, long long *r)\n+{\n+  int i, res;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res = 0;\n+      while ((res < 64) && (((s[i] >> (63 - res)) & 1) == 0))\n+\t++res;\n+      r[i] = res;\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s, res1, res2, res3;\n+  long long res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 12345678 * (i % 5);\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_lzcnt_epi64) (s.x);\n+  res2.x = INTRINSIC (_mask_lzcnt_epi64) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_lzcnt_epi64) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "39797a8fca4fe9401247bb5beb35d7e6fad4237f", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vptestnmd-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler-times \"vptestnmd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vptestnmd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*k\\[1-7\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512cd_test (void)\n+{\n+  m16 = _mm512_testn_epi32_mask (x, x);\n+  m16 = _mm512_mask_testn_epi32_mask (3, x, x);\n+}"}, {"sha": "567e164044c50860150609f19153a64957755b43", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vptestnmd-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *res, int *src1, int *src2)\n+{\n+  int i;\n+  *res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (!(src1[i] & src2[i]))\n+      *res = *res | one << i;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i, sign = 1;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i * sign;\n+      src2.a[i] = i + 20;\n+      sign = -sign;\n+    }\n+\n+  res1 = INTRINSIC (_testn_epi32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_testn_epi32_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "dd68612ad432973e6218b12e12dfad612c702df0", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vptestnmq-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512cd -O2\" } */\n+/* { dg-final { scan-assembler-times \"vptestnmq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vptestnmq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*k\\[1-7\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512cd_test (void)\n+{\n+  m8 = _mm512_testn_epi64_mask (x, x);\n+  m8 = _mm512_mask_testn_epi64_mask (3, x, x);\n+}"}, {"sha": "ff9f011427ee1a455ac6cb300d5b7ee4f8be7998", "filename": "gcc/testsuite/gcc.target/i386/avx512cd-vptestnmq-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512cd-vptestnmq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512cd\" } */\n+/* { dg-require-effective-target avx512cd } */\n+\n+#define AVX512CD\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (MASK_TYPE *res, long long *src1, long long *src2)\n+{\n+  int i;\n+  *res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (!(src1[i] & src2[i]))\n+      *res = *res | one << i;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i, sign = 1;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i * sign;\n+      src2.a[i] = i + 20;\n+      sign = -sign;\n+    }\n+\n+  res1 = INTRINSIC (_testn_epi64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_testn_epi64_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "34440d346b214dda276f24bc5f0446e136f31f8d", "filename": "gcc/testsuite/gcc.target/i386/avx512er-check.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-check.h?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,46 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512er_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512er_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ebx & bit_AVX512ER) == bit_AVX512ER))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "9fb87cfb8eca9c9de57c2f8b8c004cfaccd0a429", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vexp2pd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm512_exp2a23_pd (x);\n+  x = _mm512_mask_exp2a23_pd (x, m, x);\n+  x = _mm512_maskz_exp2a23_pd (m, x);\n+  x = _mm512_exp2a23_round_pd (x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_exp2a23_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF);\n+  x = _mm512_maskz_exp2a23_round_pd (m, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "ce4e86c1f95676c8ccbe8216da5d29e02d0ab671", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vexp2pd-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+compute_vexp2pd (double *s, double *r)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    r[i] = pow (2.0, s[i]);\n+}\n+\n+void static\n+avx512er_test (void)\n+{\n+  union512d src, res1, res2, res3;\n+  __mmask8 mask = MASK_VALUE;\n+  double res_ref[8];\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm512_exp2a23_pd (src.x);\n+  res2.x = _mm512_mask_exp2a23_pd (res2.x, mask, src.x);\n+  res3.x = _mm512_maskz_exp2a23_pd (mask, src.x);\n+\n+  compute_vexp2pd (src.a, res_ref);\n+\n+  if (check_rough_union512d (res1, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 8);\n+  if (check_rough_union512d (res2, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 8);\n+  if (check_rough_union512d (res3, res_ref, 0.0001))\n+    abort ();\n+}"}, {"sha": "a7e7009ec01fe30aaeb9f6068a5af3836269e2e1", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vexp2ps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm512_exp2a23_ps (x);\n+  x = _mm512_mask_exp2a23_ps (x, m, x);\n+  x = _mm512_maskz_exp2a23_ps (m, x);\n+  x = _mm512_exp2a23_round_ps (x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_exp2a23_round_ps (x, m, x, _MM_FROUND_TO_POS_INF);\n+  x = _mm512_maskz_exp2a23_round_ps (m, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "06ef68c3d2a01b770d025ef92f486a69d2b0d7e1", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vexp2ps-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+compute_vexp2ps (float *s, float *r)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    r[i] = pow (2.0, s[i]);\n+}\n+\n+void static\n+avx512er_test (void)\n+{\n+  union512 src, res1, res2, res3;\n+  __mmask16 mask = MASK_VALUE;\n+  float res_ref[16];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm512_exp2a23_ps (src.x);\n+  res2.x = _mm512_mask_exp2a23_ps (res2.x, mask, src.x);\n+  res3.x = _mm512_maskz_exp2a23_ps (mask, src.x);\n+\n+  compute_vexp2ps (src.a, res_ref);\n+\n+  if (check_rough_union512 (res1, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, 16);\n+  if (check_rough_union512 (res2, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, 16);\n+  if (check_rough_union512 (res3, res_ref, 0.0001))\n+    abort ();\n+}"}, {"sha": "06b61609f1447058b23a8aaf31f96d3744fb5993", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28pd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm512_rcp28_pd (x);\n+  x = _mm512_mask_rcp28_pd (x, m, x);\n+  x = _mm512_maskz_rcp28_pd (m, x);\n+  x = _mm512_rcp28_round_pd (x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_rcp28_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF);\n+  x = _mm512_maskz_rcp28_round_pd (m, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "609aeaa31c699f3acc0409da4a84683600c41142", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28pd-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+void static\n+compute_vrcp28pd (double *s, double *r)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    r[i] = 1.0 / s[i];\n+}\n+\n+void static\n+avx512er_test (void)\n+{\n+  union512d src, res1, res2, res3;\n+  __mmask8 mask = MASK_VALUE;\n+  double res_ref[8];\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm512_rcp28_pd (src.x);\n+  res2.x = _mm512_mask_rcp28_pd (res2.x, mask, src.x);\n+  res3.x = _mm512_maskz_rcp28_pd (mask, src.x);\n+\n+  compute_vrcp28pd (src.a, res_ref);\n+\n+  if (check_rough_union512d (res1, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 8);\n+  if (check_rough_union512d (res2, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 8);\n+  if (check_rough_union512d (res3, res_ref, 0.0001))\n+    abort ();\n+}"}, {"sha": "023d6b2f5193af760c2cd602adc7f8e7ebbc75b6", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm512_rcp28_ps (x);\n+  x = _mm512_mask_rcp28_ps (x, m, x);\n+  x = _mm512_maskz_rcp28_ps (m, x);\n+  x = _mm512_rcp28_round_ps (x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_rcp28_round_ps (x, m, x, _MM_FROUND_TO_POS_INF);\n+  x = _mm512_maskz_rcp28_round_ps (m, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "4059e0e7f522ca6402311e4776eb805dd96974a8", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ps-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+void static\n+compute_vrcp28ps (float *s, float *r)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    r[i] = 1.0 / s[i];\n+}\n+\n+void static\n+avx512er_test (void)\n+{\n+  union512 src, res1, res2, res3;\n+  __mmask16 mask = MASK_VALUE;\n+  float res_ref[16];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm512_rcp28_ps (src.x);\n+  res2.x = _mm512_mask_rcp28_ps (res2.x, mask, src.x);\n+  res3.x = _mm512_maskz_rcp28_ps (mask, src.x);\n+\n+  compute_vrcp28ps (src.a, res_ref);\n+\n+  if (check_rough_union512 (res1, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, 16);\n+  if (check_rough_union512 (res2, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, 16);\n+  if (check_rough_union512 (res3, res_ref, 0.0001))\n+    abort ();\n+}"}, {"sha": "dfb95b2bf305d49721e4da565551af6ef83889ef", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28pd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm512_rsqrt28_pd (x);\n+  x = _mm512_mask_rsqrt28_pd (x, m, x);\n+  x = _mm512_maskz_rsqrt28_pd (m, x);\n+  x = _mm512_rsqrt28_round_pd (x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_rsqrt28_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF);\n+  x = _mm512_maskz_rsqrt28_round_pd (m, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "84a66addd5561e042a726aa37626a6a4110931e4", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28pd-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+compute_vrsqrt28pd (double *s, double *r)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    r[i] = 1.0 / sqrt (s[i]);\n+}\n+\n+void static\n+avx512er_test (void)\n+{\n+  union512d src, res1, res2, res3;\n+  __mmask8 mask = MASK_VALUE;\n+  double res_ref[8];\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm512_rsqrt28_pd (src.x);\n+  res2.x = _mm512_mask_rsqrt28_pd (res2.x, mask, src.x);\n+  res3.x = _mm512_maskz_rsqrt28_pd (mask, src.x);\n+\n+  compute_vrsqrt28pd (src.a, res_ref);\n+\n+  if (check_rough_union512d (res1, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 8);\n+  if (check_rough_union512d (res2, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 8);\n+  if (check_rough_union512d (res3, res_ref, 0.0001))\n+    abort ();\n+}"}, {"sha": "ecd3a6fbf124052a295bcf4ec06c68f536660fb0", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm512_rsqrt28_ps (x);\n+  x = _mm512_mask_rsqrt28_ps (x, m, x);\n+  x = _mm512_maskz_rsqrt28_ps (m, x);\n+  x = _mm512_rsqrt28_round_ps (x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_rsqrt28_round_ps (x, m, x, _MM_FROUND_TO_POS_INF);\n+  x = _mm512_maskz_rsqrt28_round_ps (m, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "a92472e61917b6503c24cae5fc761fdbfd1fcf8d", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ps-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+compute_vrsqrt28ps (float *s, float *r)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    r[i] = 1.0 / sqrt (s[i]);\n+}\n+\n+void static\n+avx512er_test (void)\n+{\n+  union512 src, res1, res2, res3;\n+  __mmask16 mask = MASK_VALUE;\n+  float res_ref[16];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm512_rsqrt28_ps (src.x);\n+  res2.x = _mm512_mask_rsqrt28_ps (res2.x, mask, src.x);\n+  res3.x = _mm512_maskz_rsqrt28_ps (mask, src.x);\n+\n+  compute_vrsqrt28ps (src.a, res_ref);\n+\n+  if (check_rough_union512 (res1, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, 16);\n+  if (check_rough_union512 (res2, res_ref, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, 16);\n+  if (check_rough_union512 (res3, res_ref, 0.0001))\n+    abort ();\n+}"}, {"sha": "f550e22471b17d9a57165f35ac84af1065137652", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-gpr-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-gpr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-gpr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-gpr-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[ \\\\t\\]+%r\\[^\\n\\]+%zmm\\[0-9\\]\\[^\\{\\]\" 1 { target { ! { ia32 } } } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[ \\\\t\\]+%e\\[^\\n\\]+%zmm\\[0-9\\]\\[^\\{\\]\" 1 { target { ! { ia32 } } } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[ \\\\t\\]+\\[^\\n\\]+%zmm\\[0-9\\]\\[^\\{\\]\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[ \\\\t\\]+\\[^\\n\\]+%zmm\\[0-9\\]\\[^\\{\\]\" 1 { target ia32 } } } */\n+\n+#include <x86intrin.h>\n+\n+__m512i\n+foo_1 (long long y)\n+{\n+  return __extension__ (__m512i)(__v8di){ y, y, y, y, y, y, y, y };\n+}\n+\n+__m512i\n+foo_2 (int y)\n+{\n+  return __extension__ (__m512i)(__v16si){ y, y, y, y, y, y, y, y, y,\n+\t\t\t\t      y, y, y, y, y, y, y };\n+}"}, {"sha": "91665b299adfd53e0fcadcc457170e423a59cf48", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-gpr-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-gpr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-gpr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-gpr-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-broadcast-gpr-1.c\"\n+\n+void\n+avx512f_test (void)\n+{\n+  union512i_q q;\n+  union512i_d d;\n+  int i;\n+\n+  q.x = foo_1 (3);\n+  d.x = foo_2 (5);\n+\n+  for (i = 0; i < 8; i++)\n+  {\n+    if (q.a[i] != 3)\n+      abort ();\n+  }\n+\n+  for (i = 0; i < 16; i++)\n+  {\n+    if (d.a[i] != 5)\n+      abort ();\n+  }\n+}"}, {"sha": "038d25e35823f678902d9fd7360b7f96a1f58ead", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceil-sfix-vec-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-sfix-vec-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+extern double ceil (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) ceil (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) ceil (a[i]))\n+      abort();\n+}"}, {"sha": "8dafb1bf8151513f53e0f684d9661ee4f416e550", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceil-sfix-vec-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-sfix-vec-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-ceil-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler \"vrndscalepd\\[^\\n\\]*zmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vcvttpd2dq\\[^\\n\\]*zmm\\[0-9\\]\" } } */"}, {"sha": "9e01367205cabf51f8b91e5f2de99ef8875717dd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-check.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-check.h?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,47 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512f_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512f_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX512F test only if host has AVX512F support.  */\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ebx & bit_AVX512F) == bit_AVX512F))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "84b062789b9b63a23d559db9230a741e009fbb9b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-dummy.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-dummy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-dummy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-dummy.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union512i_q u, s1, s2;\n+  long long e[8];\n+  volatile int tst = check_union512i_q (u, e);\n+}"}, {"sha": "fab7e6528ae579e8d17e3663e1c79ae471bd1b13", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floor-sfix-vec-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-sfix-vec-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+extern double floor (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) floor (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) floor (a[i]))\n+      abort();\n+}"}, {"sha": "90e625abcd570552ce2eb3bfc85e6c7ff9ad3d50", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floor-sfix-vec-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-sfix-vec-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-floor-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler \"vrndscalepd\\[^\\n\\]*zmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vcvttpd2dq\\[^\\n\\]*zmm\\[0-9\\]\" } } */"}, {"sha": "5ccb03a1f49e7cf8e113e3de849769220c3754d2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gather-1.c", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,217 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O3 -mavx512f\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define N 1024\n+float vf1[N+16], vf2[N];\n+double vd1[N+16], vd2[N];\n+int vi1[N+16], vi2[N], k[N];\n+long long vl1[N+16], vl2[N];\n+long l[N];\n+\n+__attribute__((noinline, noclone)) void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vf2[i] = vf1[k[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vi2[i] = vi1[k[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vf2[i] = vf1[k[i] + x];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vi2[i] = vi1[k[i] + x];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vd2[i] = vd1[k[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f6 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vl2[i] = vl1[k[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f7 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vd2[i] = vd1[k[i] + x];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f8 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vl2[i] = vl1[k[i] + x];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f9 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vf2[i] = vf1[l[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f10 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vi2[i] = vi1[l[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f11 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vf2[i] = vf1[l[i] + x];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f12 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vi2[i] = vi1[l[i] + x];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f13 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vd2[i] = vd1[l[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f14 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vl2[i] = vl1[l[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f15 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vd2[i] = vd1[l[i] + x];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f16 (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    vl2[i] = vl1[l[i] + x];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N + 16; i++)\n+    {\n+      asm (\"\");\n+      vf1[i] = 17.0f + i;\n+      vd1[i] = 19.0 + i;\n+      vi1[i] = 21 + i;\n+      vl1[i] = 23L + i;\n+    }\n+  for (i = 0; i < N; i++)\n+    {\n+      asm (\"\");\n+      k[i] = (i * 731) & (N - 1);\n+      l[i] = (i * 657) & (N - 1);\n+    }\n+\n+  f1 ();\n+  f2 ();\n+  for (i = 0; i < N; i++)\n+    if (vf2[i] != ((i * 731) & (N - 1)) + 17\n+\t|| vi2[i] != ((i * 731) & (N - 1)) + 21)\n+      abort ();\n+\n+  f3 (12);\n+  f4 (14);\n+  for (i = 0; i < N; i++)\n+    if (vf2[i] != ((i * 731) & (N - 1)) + 17 + 12\n+\t|| vi2[i] != ((i * 731) & (N - 1)) + 21 + 14)\n+      abort ();\n+\n+  f5 ();\n+  f6 ();\n+  for (i = 0; i < N; i++)\n+    if (vd2[i] != ((i * 731) & (N - 1)) + 19\n+\t|| vl2[i] != ((i * 731) & (N - 1)) + 23)\n+      abort ();\n+\n+  f7 (6);\n+  f8 (3);\n+  for (i = 0; i < N; i++)\n+    if (vd2[i] != ((i * 731) & (N - 1)) + 19 + 6\n+\t|| vl2[i] != ((i * 731) & (N - 1)) + 23 + 3)\n+      abort ();\n+\n+  f9 ();\n+  f10 ();\n+  for (i = 0; i < N; i++)\n+    if (vf2[i] != ((i * 657) & (N - 1)) + 17\n+\t|| vi2[i] != ((i * 657) & (N - 1)) + 21)\n+      abort ();\n+\n+  f11 (7);\n+  f12 (9);\n+  for (i = 0; i < N; i++)\n+    if (vf2[i] != ((i * 657) & (N - 1)) + 17 + 7\n+\t|| vi2[i] != ((i * 657) & (N - 1)) + 21 + 9)\n+      abort ();\n+\n+  f13 ();\n+  f14 ();\n+  for (i = 0; i < N; i++)\n+    if (vd2[i] != ((i * 657) & (N - 1)) + 19\n+\t|| vl2[i] != ((i * 657) & (N - 1)) + 23)\n+      abort ();\n+\n+  f15 (2);\n+  f16 (12);\n+  for (i = 0; i < N; i++)\n+    if (vd2[i] != ((i * 657) & (N - 1)) + 19 + 2\n+\t|| vl2[i] != ((i * 657) & (N - 1)) + 23 + 12)\n+      abort ();\n+}"}, {"sha": "86641926149e3333139903d6193e08a4d839d41a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gather-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */ /* PR59617 */\n+/* { dg-options \"-O3 -mavx512f -fdump-tree-vect-details\" } */\n+\n+#include \"avx512f-gather-1.c\"\n+\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*ymm\\[^\\n\\]*ymm\" { xfail { *-*-* } } } } */  /* PR59617 */\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*xmm\\[^\\n\\]*ymm\" { xfail { *-*-* } } } } */  /* PR59617 */\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*ymm\\[^\\n\\]*xmm\" { xfail { *-*-* } } } } */  /* PR59617 */\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*xmm\\[^\\n\\]*xmm\" { xfail { lp64 } } } } */  /* PR59617 */\n+/* { dg-final { scan-tree-dump-times \"note: vectorized 1 loops in function\" 16 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5e20dd8898a13f44a7734ce20a5bad1daa5aaa62", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gather-3.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-3.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,169 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O3 -mavx512f -ffast-math\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define N 1024\n+float f[N];\n+double d[N];\n+int k[N];\n+float *l[N];\n+double *n[N];\n+int **m[N];\n+long q[N];\n+long long **o[N];\n+long long t[N];\n+long long *r[N];\n+int *s[N];\n+\n+__attribute__((noinline, noclone)) float\n+f1 (void)\n+{\n+  int i;\n+  float g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += f[k[i]];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) float\n+f2 (float *p)\n+{\n+  int i;\n+  float g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += p[k[i]];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) float\n+f3 (void)\n+{\n+  int i;\n+  float g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += *l[i];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f4 (void)\n+{\n+  int i;\n+  int g = 0;\n+  for (i = 0; i < N / 2; i++)\n+    g += **m[i];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) double\n+f5 (void)\n+{\n+  int i;\n+  double g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += d[k[i]];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) double\n+f6 (double *p)\n+{\n+  int i;\n+  double g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += p[k[i]];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) double\n+f7 (void)\n+{\n+  int i;\n+  double g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += *n[i];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f8 (void)\n+{\n+  int i;\n+  int g = 0;\n+  for (i = 0; i < N / 2; i++)\n+    g += **o[i];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) float\n+f9 (void)\n+{\n+  int i;\n+  float g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += f[q[i]];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) float\n+f10 (float *p)\n+{\n+  int i;\n+  float g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += p[q[i]];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) double\n+f11 (void)\n+{\n+  int i;\n+  double g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += d[q[i]];\n+  return g;\n+}\n+\n+__attribute__((noinline, noclone)) double\n+f12 (double *p)\n+{\n+  int i;\n+  double g = 0.0;\n+  for (i = 0; i < N / 2; i++)\n+    g += p[q[i]];\n+  return g;\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      asm (\"\");\n+      f[i] = -256.0f + i;\n+      d[i] = -258.0 + i;\n+      k[i] = (i * 731) & (N - 1);\n+      q[i] = (i * 657) & (N - 1);\n+      t[i] = (i * 657) & (N - 1);\n+      l[i] = &f[(i * 239) & (N - 1)];\n+      n[i] = &d[(i * 271) & (N - 1)];\n+      r[i] = &t[(i * 323) & (N - 1)];\n+      s[i] = &k[(i * 565) & (N - 1)];\n+      m[i] = &s[(i * 13) & (N - 1)];\n+      o[i] = &r[(i * 19) & (N - 1)];\n+    }\n+\n+  if (f1 () != 136448.0f || f2 (f) != 136448.0f || f3 () != 130304.0)\n+    abort ();\n+  if (f4 () != 261376 || f5 () != 135424.0 || f6 (d) != 135424.0)\n+    abort ();\n+  if (f7 () != 129280.0 || f8 () != 259840L || f9 () != 130816.0f)\n+    abort ();\n+  if (f10 (f) != 130816.0f || f11 () != 129792.0 || f12 (d) != 129792.0)\n+    abort ();\n+}"}, {"sha": "bea8c24b8cd7c0fecbdcf5175f37d7145c543345", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gather-4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-4.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O3 -mavx512f\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define N 1024\n+int a[N], b[N], c[N], d[N];\n+\n+__attribute__((noinline, noclone)) void\n+foo (float *__restrict p, float *__restrict q, float *__restrict r,\n+     int s1, int s2, int s3)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    p[i] = q[a[i] * s1 + b[i] * s2 + s3] * r[c[i] * s1 + d[i] * s2 + s3];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  float e[N], f[N], g[N];\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = (i * 7) & (N / 8 - 1);\n+      b[i] = (i * 13) & (N / 8 - 1);\n+      c[i] = (i * 23) & (N / 8 - 1);\n+      d[i] = (i * 5) & (N / 8 - 1);\n+      e[i] = 16.5 + i;\n+      f[i] = 127.5 - i;\n+    }\n+  foo (g, e, f, 3, 2, 4);\n+  for (i = 0; i < N; i++)\n+    if (g[i] != (float) ((20.5 + a[i] * 3 + b[i] * 2)\n+\t\t\t * (123.5 - c[i] * 3 - d[i] * 2)))\n+      abort ();\n+}"}, {"sha": "5edd446cb73b3d7f44bd80ec90d50495e408cb0c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gather-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gather-5.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512f\" } */\n+\n+#include \"avx512f-gather-4.c\"\n+\n+/* { dg-final { scan-assembler \"gather\\[^\\n\\]*zmm\" { xfail { *-*-* } } } } */ /* PR59617 */\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*ymm\\[^\\n\\]*ymm\" { xfail { *-*-* } } } } */ /* PR59617 */\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*xmm\\[^\\n\\]*ymm\" } } */\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*ymm\\[^\\n\\]*xmm\" } } */\n+/* { dg-final { scan-assembler-not \"gather\\[^\\n\\]*xmm\\[^\\n\\]*xmm\" } } */"}, {"sha": "61b2e90d197c599ccb04af5fa825d80228863acd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-helper.h", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,96 @@\n+/* This file is used to reduce a number of runtime tests for AVX512F\n+   instructions.  Idea is to create one file per instruction -\n+   avx512f-insn-2.c - using defines from this file instead of intrinsic\n+   name, vector length etc.  Then dg-options are set with appropriate\n+   -Dwhatever options in that .c file producing tests for specific\n+   length.  */\n+\n+#if defined (AVX512F)\n+#include \"avx512f-check.h\"\n+#elif defined (AVX512ER)\n+#include \"avx512er-check.h\"\n+#elif defined (AVX512CD)\n+#include \"avx512cd-check.h\"\n+#endif\n+\n+/* Macros expansion.  */\n+#define CONCAT(a,b,c) a ## b ## c\n+#define EVAL(a,b,c) CONCAT(a,b,c)\n+\n+/* Value to be written into destination.\n+   We have one value for all types so it must be small enough\n+   to fit into signed char.  */\n+#define DEFAULT_VALUE 117\n+\n+#define MAKE_MASK_MERGE(NAME, TYPE)\t\t\t\t      \\\n+static void\t\t\t\t\t\t\t      \\\n+__attribute__((noinline, unused))\t\t\t\t      \\\n+merge_masking_##NAME (TYPE *arr, unsigned long long mask, int size)   \\\n+{\t\t\t\t\t\t\t\t      \\\n+  int i;\t\t\t\t\t\t\t      \\\n+  for (i = 0; i < size; i++)\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t      \\\n+      arr[i] = (mask & (1LL << i)) ? arr[i] : DEFAULT_VALUE;\t      \\\n+    }\t\t\t\t\t\t\t\t      \\\n+}\n+\n+MAKE_MASK_MERGE(i_b, char)\n+MAKE_MASK_MERGE(i_w, short)\n+MAKE_MASK_MERGE(i_d, int)\n+MAKE_MASK_MERGE(i_q, long long)\n+MAKE_MASK_MERGE(, float)\n+MAKE_MASK_MERGE(d, double)\n+\n+#define MASK_MERGE(TYPE) merge_masking_##TYPE\n+\n+#define MAKE_MASK_ZERO(NAME, TYPE)\t\t\t\t      \\\n+static void\t\t\t\t\t\t\t      \\\n+__attribute__((noinline, unused))\t\t\t\t      \\\n+zero_masking_##NAME (TYPE *arr, unsigned long long mask, int size)    \\\n+{\t\t\t\t\t\t\t\t      \\\n+  int i;\t\t\t\t\t\t\t      \\\n+  for (i = 0; i < size; i++)\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t      \\\n+      arr[i] = (mask & (1LL << i)) ? arr[i] : 0;\t\t      \\\n+    }\t\t\t\t\t\t\t\t      \\\n+}\n+\n+MAKE_MASK_ZERO(i_b, char)\n+MAKE_MASK_ZERO(i_w, short)\n+MAKE_MASK_ZERO(i_d, int)\n+MAKE_MASK_ZERO(i_q, long long)\n+MAKE_MASK_ZERO(, float)\n+MAKE_MASK_ZERO(d, double)\n+\n+#define MASK_ZERO(TYPE) zero_masking_##TYPE\n+\n+/* Intrinsic being tested.  */\n+#define INTRINSIC(NAME) EVAL(_mm, AVX512F_LEN, NAME)\n+/* Unions used for testing (for example union512d, union256d etc.).  */\n+#define UNION_TYPE(SIZE, NAME) EVAL(union, SIZE, NAME)\n+/* Corresponding union check.  */\n+#define UNION_CHECK(SIZE, NAME) EVAL(check_union, SIZE, NAME)\n+/* Corresponding fp union check.  */\n+#define UNION_FP_CHECK(SIZE, NAME) EVAL(check_fp_union, SIZE, NAME)\n+/* Corresponding rough union check.  */\n+#define UNION_ROUGH_CHECK(SIZE, NAME) \\\n+  EVAL(check_rough_union, SIZE, NAME)\n+/* Function which tests intrinsic for given length.  */\n+#define TEST EVAL(test_, AVX512F_LEN,)\n+/* Function which calculates result.  */\n+#define CALC EVAL(calc_, AVX512F_LEN,)\n+\n+#define AVX512F_LEN 512\n+#define AVX512F_LEN_HALF 256\n+static void test_512 ();\n+\n+#if defined (AVX512F)\n+void\n+avx512f_test (void) { test_512 (); }\n+#elif defined (AVX512CD)\n+void\n+avx512cd_test (void) { test_512 (); }\n+#elif defined (AVX512ER)\n+void\n+avx512er_test (void) { test_512 (); }\n+#endif"}, {"sha": "7a0ee9978fd9a10a30ec7a47292ca09dcb05f7de", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherd512-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpgatherdd\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x, idx;\n+volatile __mmask16 m16;\n+int *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i32gather_epi32 (idx, base, 8);\n+  x = _mm512_mask_i32gather_epi32 (x, m16, idx, base, 8);\n+}"}, {"sha": "d89ef048d82eb8243b1f2b7b163ba6987922827a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherd512-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherdd (int *res, __mmask16 m16, int *idx,\n+\t\t  int *src, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (m16 & (1 << i))\n+\tr[i] = *(int *) (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512i_d idx, res;\n+  int src[16];\n+  int res_ref[16];\n+  __mmask16 m16 = 0xBC5D;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i32gather_epi32 (res.x, m16, idx.x, src, SCALE);\n+  compute_gatherdd (res.a, m16, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512i_d (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i32gather_epi32 (idx.x, src, SCALE);\n+  compute_gatherdd (res.a, 0xFFFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "88b9ae62455fa97a71afa691ab67e9151c3b63a1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherpd512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherpd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherpd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherpd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherdpd\\[ \\\\t\\]+\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+double *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i32gather_pd (idx, base, 8);\n+  x = _mm512_mask_i32gather_pd (x, m8, idx, base, 8);\n+}"}, {"sha": "3af491548ba490a8b034bd81acc6ae60a9cad70a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherpd512-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherpd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherpd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherpd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherdpd (double *res, __mmask8 m8, int *idx,\n+\t\t   double *src, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\tr[i] = *(double *) (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512d res;\n+  union256i_d idx;\n+  double src[8];\n+  double res_ref[8];\n+  __mmask8 m8 = 0xC5;\n+\n+  res.x = _mm512_setzero_pd();\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i32gather_pd (res.x, m8, idx.x, src, SCALE);\n+  compute_gatherdpd (res.a, m8, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512d (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i32gather_pd (idx.x, src, SCALE);\n+  compute_gatherdpd (res.a, 0xFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "6abc2301d575cecb5696c8f7c3f8c38609d0ae56", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherps512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherps512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherps512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherps512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherdps\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m512i idx;\n+volatile __mmask16 m16;\n+float *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i32gather_ps (idx, base, 8);\n+  x = _mm512_mask_i32gather_ps (x, m16, idx, base, 8);\n+}"}, {"sha": "691413ab2eae3f5331802f507b2b127303e1ed04", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherps512-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherps512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherps512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherps512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherdps (float *res, __mmask16 m16, int *idx,\n+\t\t   float *src, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (m16 & (1 << i))\n+\tr[i] = *(float *) (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512 res;\n+  union512i_d idx;\n+  float src[16];\n+  float res_ref[16];\n+  __mmask16 m16 = 0xBC5D;\n+\n+  res.x = _mm512_setzero_ps();\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i32gather_ps (res.x, m16, idx.x, src, SCALE);\n+  compute_gatherdps (res.a, m16, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512 (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i32gather_ps (idx.x, src, SCALE);\n+  compute_gatherdps (res.a, 0xFFFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512 (res, res_ref))\n+    abort ();\n+}"}, {"sha": "ee4491eb1dbbd69279705c23e561f96820168741", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherq512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherq512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherq512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherq512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpgatherdq\\[ \\\\t\\]+\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+long long *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i32gather_epi64 (idx, base, 8);\n+  x = _mm512_mask_i32gather_epi64 (x, m8, idx, base, 8);\n+}"}, {"sha": "4d472faa2ab5f0230edcb5881944bdfa7d2cd135", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32gatherq512-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherq512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherq512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32gatherq512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherdq (long long *res, __mmask8 m8, int *idx,\n+\t\t  long long *src, int scale, long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\tr[i] = *(long long *)\n+\t  (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union256i_d idx;\n+  union512i_q res;\n+  long long src[8];\n+  long long res_ref[8];\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i32gather_epi64 (res.x, m8, idx.x, src, SCALE);\n+  compute_gatherdq (res.a, m8, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512i_q (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i32gather_epi64 (idx.x, src, SCALE);\n+  compute_gatherdq (res.a, 0xFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "7a5c311661e61556a3d72d87b64c9aecf2ac8ebd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterd512-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpscatterdd\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i src, idx;\n+volatile __mmask16 m16;\n+int *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i32scatter_epi32 (addr, idx, src, 8);\n+  _mm512_mask_i32scatter_epi32 (addr, m16, idx, src, 8);\n+}"}, {"sha": "569690021ae60de287b508481b109f929e3312cd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterd512-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterdd (__mmask16 m16, int *idx,\n+\t\t   int *src, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (m16 & (1 << i))\n+\t*(int *) (((unsigned char *) r) + idx[i] * scale) = src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512i_d src, idx;\n+  int res[16] = { 0 };\n+  int res_ref[16] = { 0 };\n+  __mmask16 m16 = 0xBC5D;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src.a[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 4) >> 1;\n+    }\n+\n+  _mm512_mask_i32scatter_epi32 (res, m16, idx.x, src.x, SCALE);\n+  compute_scatterdd (m16, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVi (res, res_ref, 16))\n+    abort ();\n+\n+  _mm512_i32scatter_epi32 (res, idx.x, src.x, SCALE);\n+  compute_scatterdd (0xFFFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVi (res, res_ref, 16))\n+    abort ();\n+}"}, {"sha": "6c5ddc0a9c832235a1609cbe3344ef3329e957e0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterpd512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterpd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterpd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterpd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterdpd\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d src;\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+double *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i32scatter_pd (addr, idx, src, 8);\n+  _mm512_mask_i32scatter_pd (addr, m8, idx, src, 8);\n+}"}, {"sha": "987b3f437f018f899cf0f86e5bd491f9beb405ee", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterpd512-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterpd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterpd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterpd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterdpd (__mmask8 m8, int *idx, double *src,\n+\t\t    int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\t*(double *) (((unsigned char *) r) + idx[i] * scale) = src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512d src;\n+  union256i_d idx;\n+  double res[8] = { 0.0 };\n+  double res_ref[8] = { 0.0 };\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  _mm512_mask_i32scatter_pd (res, m8, idx.x, src.x, SCALE);\n+  compute_scatterdpd (m8, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVd (res, res_ref, 8))\n+    abort ();\n+\n+  _mm512_i32scatter_pd (res, idx.x, src.x, SCALE);\n+  compute_scatterdpd (0xFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVd (res, res_ref, 8))\n+    abort ();\n+}"}, {"sha": "c24344a28d6d928d65458a8e606c1fc8f9f6c2f3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterps512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterps512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterps512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterps512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterdps\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 src;\n+volatile __m512i idx;\n+volatile __mmask16 m16;\n+float *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i32scatter_ps (addr, idx, src, 8);\n+  _mm512_mask_i32scatter_ps (addr, m16, idx, src, 8);\n+}"}, {"sha": "8604c8d5c1cc6679699539ab6bec0f179ad0d75f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterps512-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterps512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterps512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterps512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterdps (__mmask16 m16, int *idx,\n+\t\t    float *src, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (m16 & (1 << i))\n+\t*(float *) (((unsigned char *) r) + idx[i] * scale) = src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512 src;\n+  union512i_d idx;\n+  float res[16] = { 0.0 };\n+  float res_ref[16] = { 0.0 };\n+  __mmask16 m16 = 0xBC5D;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src.a[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 4) >> 1;\n+    }\n+\n+  _mm512_mask_i32scatter_ps (res, m16, idx.x, src.x, SCALE);\n+  compute_scatterdps (m16, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVf (res, res_ref, 16))\n+    abort ();\n+\n+  _mm512_i32scatter_ps (res, idx.x, src.x, SCALE);\n+  compute_scatterdps (0xFFFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVf (res, res_ref, 16))\n+    abort ();\n+}"}, {"sha": "5b28175465a3302a5a069cef29a45df5f9be86a8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterq512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterq512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterq512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterq512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpscatterdq\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i src;\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+long long *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i32scatter_epi64 (addr, idx, src, 8);\n+  _mm512_mask_i32scatter_epi64 (addr, m8, idx, src, 8);\n+}"}, {"sha": "fe5c3ade1a9e806b571c2c0e75cf97094e89107b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i32scatterq512-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterq512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterq512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i32scatterq512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterdq (__mmask8 m8, int *idx, long long *src,\n+\t\t   int scale, long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\t*(long long *) (((unsigned char *) r) + idx[i] * scale) =\n+\t  src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union256i_d idx;\n+  union512i_q src;\n+  long long res[8] = { 0 };\n+  long long res_ref[8] = { 0 };\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  _mm512_mask_i32scatter_epi64 (res, m8, idx.x, src.x, SCALE);\n+  compute_scatterdq (m8, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVl (res, res_ref, 8))\n+    abort ();\n+\n+  _mm512_i32scatter_epi64 (res, idx.x, src.x, SCALE);\n+  compute_scatterdq (0xFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVl (res, res_ref, 8))\n+    abort ();\n+}"}, {"sha": "66dcf6f60c4d41b81a5fa7a5f5afc37a520fba59", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherd512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpgatherqd\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+int *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i64gather_epi32 (idx, base, 8);\n+  x = _mm512_mask_i64gather_epi32 (x, m8, idx, base, 8);\n+}"}, {"sha": "dff818db4eac5d98b9da731e6374373e7c0a00f6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherd512-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherqd (int *res, __mmask8 m8, long long *idx,\n+\t\t  int *src, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\tr[i] = *(int *) (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union256i_d res;\n+  union512i_q idx;\n+  int src[8];\n+  int res_ref[8];\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i64gather_epi32 (res.x, m8, idx.x, src, SCALE);\n+  compute_gatherqd (res.a, m8, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union256i_d (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i64gather_epi32 (idx.x, src, SCALE);\n+  compute_gatherqd (res.a, 0xFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union256i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "4a3df89049701c63ddbbe8dfc53731e269aac7e4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherpd512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherpd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherpd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherpd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherqpd\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+double *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i64gather_pd (idx, base, 8);\n+  x = _mm512_mask_i64gather_pd (x, m8, idx, base, 8);\n+}"}, {"sha": "7cb6d82eb00c05e118407bb7f63646b092bf42e7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherpd512-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherpd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherpd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherpd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherqpd (double *res, __mmask8 m8, long long *idx,\n+\t\t   double *src, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\tr[i] = *(double *) (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512d res;\n+  union512i_q idx;\n+  double src[8];\n+  double res_ref[8];\n+  __mmask8 m8 = 0xC5;\n+\n+  res.x = _mm512_setzero_pd();\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i64gather_pd (res.x, m8, idx.x, src, SCALE);\n+  compute_gatherqpd (res.a, m8, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512d (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i64gather_pd (idx.x, src, SCALE);\n+  compute_gatherqpd (res.a, 0xFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "4caee0569ba55b2e8444b4a8cbc890e49902b140", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherps512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherps512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherps512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherps512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherqps\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256 x;\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+float *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i64gather_ps (idx, base, 8);\n+  x = _mm512_mask_i64gather_ps (x, m8, idx, base, 8);\n+}"}, {"sha": "8ed0fcef4095f33e08f1c15f3ad08a12e097b350", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherps512-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherps512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherps512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherps512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherqps (float *res, __mmask8 m8, long long *idx,\n+\t\t   float *src, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\tr[i] = *(float *) (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union256 res;\n+  union512i_q idx;\n+  float src[8];\n+  float res_ref[8];\n+  __mmask8 m8 = 0xC5;\n+\n+  res.x = _mm256_setzero_ps();\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i64gather_ps (res.x, m8, idx.x, src, SCALE);\n+  compute_gatherqps (res.a, m8, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union256 (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i64gather_ps (idx.x, src, SCALE);\n+  compute_gatherqps (res.a, 0xFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union256 (res, res_ref))\n+    abort ();\n+}"}, {"sha": "20d39e74849edad86e70c4bff19cc3839668b093", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherq512-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherq512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherq512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherq512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpgatherqq\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x, idx;\n+volatile __mmask8 m8;\n+long long *base;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_i64gather_epi64 (idx, base, 8);\n+  x = _mm512_mask_i64gather_epi64 (x, m8, idx, base, 8);\n+}"}, {"sha": "134fd18b82d55c43c15fb2bc9521155a6865d248", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64gatherq512-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherq512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherq512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64gatherq512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_gatherqq (long long *res, __mmask8 m8, long long *idx,\n+\t\t  long long *src, int scale, long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\tr[i] = *(long long *)\n+\t  (((unsigned char *) src) + idx[i] * scale);\n+      else\n+\tr[i] = res[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512i_q idx, res;\n+  long long src[8];\n+  long long res_ref[8];\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm512_mask_i64gather_epi64 (res.x, m8, idx.x, src, SCALE);\n+  compute_gatherqq (res.a, m8, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512i_q (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_i64gather_epi64 (idx.x, src, SCALE);\n+  compute_gatherqq (res.a, 0xFF, idx.a, src, SCALE, res_ref);\n+\n+  if (check_union512i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "a2f5275d67ea2d870ba976b068c2aadc02acfbd9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterd512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpscatterqd\\[ \\\\t\\]+\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i src;\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+int *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i64scatter_epi32 (addr, idx, src, 8);\n+  _mm512_mask_i64scatter_epi32 (addr, m8, idx, src, 8);\n+}"}, {"sha": "877ef906205f09590980fafdb320af8f16ba4ab6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterd512-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterqd (__mmask8 m8, long long *idx,\n+\t\t   int *src, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\t*(int *) (((unsigned char *) r) + idx[i] * scale) = src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union256i_d src;\n+  union512i_q idx;\n+  int res[8] = { 0 };\n+  int res_ref[8] = { 0 };\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  _mm512_mask_i64scatter_epi32 (res, m8, idx.x, src.x, SCALE);\n+  compute_scatterqd (m8, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVi (res, res_ref, 8))\n+    abort ();\n+\n+  _mm512_i64scatter_epi32 (res, idx.x, src.x, SCALE);\n+  compute_scatterqd (0xFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVi (res, res_ref, 8))\n+    abort ();\n+}"}, {"sha": "288a2183b0c1b1816f8cdaae2dd7b6fe44740d3c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterpd512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterpd512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterpd512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterpd512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterqpd\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d src;\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+double *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i64scatter_pd (addr, idx, src, 8);\n+  _mm512_mask_i64scatter_pd (addr, m8, idx, src, 8);\n+}"}, {"sha": "2ded7bc7628bc0410f5ebe63ab360915c2a4f255", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterpd512-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterpd512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterpd512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterpd512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterqpd (__mmask8 m8, long long *idx, double *src,\n+\t\t    int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\t*(double *) (((unsigned char *) r) + idx[i] * scale) = src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512d src;\n+  union512i_q idx;\n+  double res[8] = { 0.0 };\n+  double res_ref[8] = { 0.0 };\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  _mm512_mask_i64scatter_pd (res, m8, idx.x, src.x, SCALE);\n+  compute_scatterqpd (m8, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVd (res, res_ref, 8))\n+    abort ();\n+\n+  _mm512_i64scatter_pd (res, idx.x, src.x, SCALE);\n+  compute_scatterqpd (0xFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVd (res, res_ref, 8))\n+    abort ();\n+}"}, {"sha": "6a0b05d799787b73a21428a3a7a4431b4d66cf9d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterps512-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterps512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterps512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterps512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterqps\\[ \\\\t\\]+\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256 src;\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+float *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i64scatter_ps (addr, idx, src, 8);\n+  _mm512_mask_i64scatter_ps (addr, m8, idx, src, 8);\n+}"}, {"sha": "4a74d4667ba2a3ef773f0539f586ca317ab0d819", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterps512-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterps512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterps512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterps512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterqps (__mmask8 m8, long long *idx,\n+\t\t    float *src, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\t*(float *) (((unsigned char *) r) + idx[i] * scale) = src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union256 src;\n+  union512i_q idx;\n+  float res[8] = { 0.0 };\n+  float res_ref[8] = { 0.0 };\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+\t divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  _mm512_mask_i64scatter_ps (res, m8, idx.x, src.x, SCALE);\n+  compute_scatterqps (m8, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVf (res, res_ref, 8))\n+    abort ();\n+\n+  _mm512_i64scatter_ps (res, idx.x, src.x, SCALE);\n+  compute_scatterqps (0xFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVf (res, res_ref, 8))\n+    abort ();\n+}"}, {"sha": "10a7a4be6f4832004571ad8620927edcbfa942a9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterq512-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterq512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterq512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterq512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpscatterqq\\[ \\\\t\\]+\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i src, idx;\n+volatile __mmask8 m8;\n+long long *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i64scatter_epi64 (addr, idx, src, 8);\n+  _mm512_mask_i64scatter_epi64 (addr, m8, idx, src, 8);\n+}"}, {"sha": "975973f34f9f0460c9a7a39106089adfb164c608", "filename": "gcc/testsuite/gcc.target/i386/avx512f-i64scatterq512-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterq512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterq512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-i64scatterq512-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#define SCALE 2\n+\n+static void\n+compute_scatterqq (__mmask8 m8, long long *idx, long long *src,\n+\t\t   int scale, long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (m8 & (1 << i))\n+\t*(long long *) (((unsigned char *) r) + idx[i] * scale) =\n+\t  src[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  union512i_q src, idx;\n+  long long res[8] = { 0 };\n+  long long res_ref[8] = { 0 };\n+  __mmask8 m8 = 0xC5;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (64 - (i + 1) * 8) >> 1;\n+    }\n+\n+  _mm512_mask_i64scatter_epi64 (res, m8, idx.x, src.x, SCALE);\n+  compute_scatterqq (m8, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVl (res, res_ref, 8))\n+    abort ();\n+\n+  _mm512_i64scatter_epi64 (res, idx.x, src.x, SCALE);\n+  compute_scatterqq (0xFF, idx.a, src.a, SCALE, res_ref);\n+\n+  if (checkVl (res, res_ref, 8))\n+    abort ();\n+}"}, {"sha": "4e675e09618840980ef9a19cd39e0937931e03b6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-inline-asm.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-inline-asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-inline-asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-inline-asm.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+init_vpadd_mask (int* dst, int *src1, int *src2, int seed)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      dst[i] = -1;\n+      src1[i] = seed * 2 * i + 1;\n+      src2[i] = seed * 2 * i;\n+    }\n+}\n+\n+static inline void\n+calc_vpadd_mask_zeroed (int *dst, __mmask16 m, int *src1, int *src2)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (m & (1 << i))\n+\tdst[i] = src1[i] + src2[i];\n+      else\n+\tdst[i] = 0;\n+    }\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  /* Checking mask arithmetic instruction */\n+\n+  __mmask16 msk_dst, msk_src1, msk_src2, msk_dst_ref;\n+\n+  msk_src1 = 0x0FFB;\n+  msk_src2 = 0x0F0F;\n+\n+  asm (\"kandw\\t%2, %1, %0\"\n+       : \"=Yk\" (msk_dst)\n+       : \"Yk\" (msk_src1), \"Yk\" (msk_src2));\n+\n+  msk_dst_ref =  _mm512_kand (msk_src1, msk_src2);\n+  if (msk_dst != msk_dst_ref)\n+    abort ();\n+\n+\n+  /* Checking zero-masked vector instruction */\n+  union512i_d dst, src1, src2;\n+  int dst_ref[16];\n+\n+  init_vpadd_mask (dst.a,   src1.a, src2.a, 1);\n+  init_vpadd_mask (dst_ref, src1.a, src2.a, 1);\n+\n+  asm (\"vpaddd\\t%2, %1, %0 %{%3%}%{z%}\"\n+       : \"=x\" (dst.x)\n+       : \"x\" (src1.x), \"x\" (src2.x), \"k\" (msk_dst));\n+\n+  calc_vpadd_mask_zeroed (dst_ref, msk_dst, src1.a, src2.a);\n+\n+  if (check_union512i_d (dst, dst_ref))\n+    abort ();\n+}"}, {"sha": "3d777c830151f0aac59907f1d5804e849d6bbf10", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kandnw-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandnw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandnw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandnw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandnw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2, k3;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kandn (k1, k2);\n+  x = _mm512_mask_add_ps (x, k3, x, x);\n+}"}, {"sha": "19a3cf4dbc320f495e514af9831eafb04bdb61e9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kandw-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2, k3;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kand (k1, k2);\n+  x = _mm512_mask_add_ps (x, k3, x, x);\n+}"}, {"sha": "df7fc9b7b7d8b435c64cd920f2963c53d88df9d6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-klogic-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-klogic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-klogic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-klogic-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void\n+avx512f_test (void)\n+{\n+  __mmask16 dst, src1, src2, dst_ref;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (src1) : \"r\" (0x0FFF) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (src2) : \"r\" (0x0F0F) );\n+\n+  dst = _mm512_kand (src1, src2);\n+  x = _mm512_mask_add_ps (x, dst, x, x);\n+  dst_ref = src1 & src2;\n+  if (dst != dst_ref)\n+    abort ();\n+\n+  dst = _mm512_kandn (src1, src2);\n+  x = _mm512_mask_add_ps (x, dst, x, x);\n+  dst_ref = ~src1 & src2;\n+  if (dst != dst_ref)\n+    abort ();\n+\n+  dst = _mm512_kor (src1, src2);\n+  x = _mm512_mask_add_ps (x, dst, x, x);\n+  dst_ref = src1 | src2;\n+  if (dst != dst_ref)\n+    abort ();\n+\n+  dst = _mm512_kxnor (src1, src2);\n+  x = _mm512_mask_add_ps (x, dst, x, x);\n+  dst_ref = ~(src1 ^ src2);\n+  if (dst != dst_ref)\n+    abort ();\n+\n+  dst = _mm512_kxor (src1, src2);\n+  x = _mm512_mask_add_ps (x, dst, x, x);\n+  dst_ref = src1 ^ src2;\n+  if (dst != dst_ref)\n+    abort ();\n+\n+  dst = _mm512_knot (src1);\n+  x = _mm512_mask_add_ps (x, dst, x, x);\n+  dst_ref = ~src1;\n+  if (dst != dst_ref)\n+    abort ();\n+\n+  dst = _mm512_kunpackb (src1, src2);\n+  x = _mm512_mask_add_ps (x, dst, x, x);\n+  dst_ref = 0xFF0F;\n+\n+  if (dst != dst_ref)\n+    abort ();\n+}"}, {"sha": "a8f8f10b6be5cb40bd1a99cd44c1134db2e648bf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-knotw-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-knotw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-knotw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-knotw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"knotw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (45) );\n+\n+  k2 = _mm512_knot (k1);\n+\n+  x = _mm512_mask_add_ps (x, k1, x, x);\n+  x = _mm512_mask_add_ps (x, k2, x, x);\n+}"}, {"sha": "a3cdd4a1ab7f0fc57888461e2283d1233c2807d2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kortestw-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"kortestw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[0-7\\]\" 4 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test () {\n+  volatile __mmask16 k1;\n+  __mmask16 k2;\n+  volatile __mmask8 k3;\n+  __mmask8 k4;\n+\n+  volatile short r;\n+\n+  /* Check that appropriate insn sequence is generated at -O0.  */\n+  r = _mm512_kortestc (k1, k2);\n+  r = _mm512_kortestz (k1, k2);\n+\n+  r = _mm512_kortestc (k3, k4);\n+  r = _mm512_kortestz (k3, k4);\n+}"}, {"sha": "4b9cadcc2d1d9f29f43dbd9b21a3860d146e8ae1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kortestw-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kortestw-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void\n+avx512f_test () {\n+  volatile __mmask16 k1;\n+  __mmask16 k2;\n+  volatile short r = 0;\n+\n+  /* Test kortestc.  */\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (45) );\n+\n+  r += _mm512_kortestc (k1, k2);\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (0) );\n+\n+  r += _mm512_kortestc (k1, k2);\n+  if (r)\n+    abort ();\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (-1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (0) );\n+\n+  r += _mm512_kortestc (k1, k2);\n+  if (!r)\n+    abort ();\n+\n+  r = 0;\n+  /* Test kortestz.  */\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (45) );\n+\n+  r += _mm512_kortestz (k1, k2);\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (-1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (0) );\n+\n+  r += _mm512_kortestz (k1, k2);\n+  if (r)\n+    abort ();\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (0) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (0) );\n+\n+  r += _mm512_kortestz (k1, k2);\n+  if (!r)\n+    abort ();\n+}"}, {"sha": "96f837b96b0c4775ee99f2ac9768c8eb67d4fd28", "filename": "gcc/testsuite/gcc.target/i386/avx512f-korw-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-korw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-korw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-korw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"korw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2, k3;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kor (k1, k2);\n+  x = _mm512_mask_add_ps (x, k3, x, x);\n+}"}, {"sha": "bc55f8b301ce2a7de121c56058e98033e59c9e7e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kunpckbw-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kunpckbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kunpckbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kunpckbw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kunpckbw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test () {\n+  __mmask16 k1, k2, k3;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kunpackb (k1, k2);\n+  x = _mm512_mask_add_ps (x, k3, x, x);\n+}"}, {"sha": "8b12b2ac896c7f07c3f1f35eb41bb685af1e803a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kxnorw-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kxnorw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kxnorw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kxnorw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxnorw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2, k3;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kxnor (k1, k2);\n+  x = _mm512_mask_add_ps (x, k3, x, x);\n+}"}, {"sha": "7ae1bc462048a065b0295afa55719790e3c49b15", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kxorw-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kxorw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kxorw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kxorw-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxorw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2, k3;\n+  volatile __m512 x;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kxor (k1, k2);\n+  x = _mm512_mask_add_ps (x, k3, x, x);\n+}"}, {"sha": "53c439e24d153a71a7529be69a1d4801934e27a1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-mask-type.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,8 @@\n+/* Type of mask.  */\n+#if SIZE <= 8\n+#define MASK_TYPE __mmask8\n+#define MASK_VALUE 0xB9\n+#elif SIZE <= 16\n+#define MASK_TYPE __mmask16\n+#define MASK_VALUE 0xA6BA\n+#endif"}, {"sha": "deefa5e1105d720e8eea00b416632072a9f33ddf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-os-support.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-os-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-os-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-os-support.h?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,10 @@\n+/* Check if the OS supports executing AVX512F instructions.  */\n+\n+static int\n+avx512f_os_support (void)\n+{\n+  unsigned int eax, edx;\n+\n+  __asm__ (\"xgetbv\" : \"=a\" (eax), \"=d\" (edx) : \"c\" (0));\n+  return (eax & 230) == 230;\n+}"}, {"sha": "254e3a418f1c1ea47d5991d4bbfd5f1522d23fac", "filename": "gcc/testsuite/gcc.target/i386/avx512f-rounding.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rounding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rounding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rounding.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512f\" } */\n+\n+#include <x86intrin.h>\n+\n+int\n+test_rounding (__m128d x, int r)\n+{\n+  return _mm_cvt_roundsd_i32 (x, r); /* { dg-error \"incorrect rounding operand.\" } */\n+}"}, {"sha": "0ae82bc4138607b24963dccb196ce1bce29b4eed", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16sf-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo (float *v)\n+{\n+  return _mm512_set_ps (v[15], v[14], v[13], v[12],\n+\t\t\tv[11], v[10], v[9], v[8],\n+\t\t\tv[7], v[6], v[5], v[4],\n+\t\t\tv[3], v[2], v[1], v[0]);\n+}\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo_r (float *v)\n+{\n+  return _mm512_setr_ps (v[0], v[1], v[2], v[3],\n+\t\t\t v[4], v[5], v[6], v[7],\n+\t\t\t v[8], v[9], v[10], v[11],\n+\t\t\t v[12], v[13], v[14], v[15]);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  float v[16] = { -3.3, 2.6, 1.48, 9.104, -23.9, 17, -13.48, 4,\n+\t\t  69.78, 0.33, 81, 0.4, -8.9, -173.37, 0.8, 68 };\n+  union512 res;\n+\n+  res.x = foo (v);\n+\n+  if (check_union512 (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_ps ();\n+\n+  res.x = foo_r (v);\n+\n+  if (check_union512 (res, v))\n+    abort ();\n+}"}, {"sha": "1884c2f334f89654e0428d6c3d5805769c0e3309", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16sf-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo (float x1, float x2, float x3, float x4,\n+     float x5, float x6, float x7, float x8,\n+     float x9, float x10, float x11, float x12,\n+     float x13, float x14, float x15, float x16)\n+{\n+  return _mm512_set_ps (x1, x2, x3, x4, x5, x6, x7, x8,\n+\t\t\tx9, x10, x11, x12, x13, x14, x15, x16);\n+}\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo_r (float x1, float x2, float x3, float x4,\n+       float x5, float x6, float x7, float x8,\n+       float x9, float x10, float x11, float x12,\n+       float x13, float x14, float x15, float x16)\n+{\n+  return _mm512_setr_ps (x16, x15, x14, x13, x12, x11, x10, x9,\n+\t\t\t x8, x7, x6, x5, x4, x3, x2, x1);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  float v[16] = { -3.3, 2.6, 1.48, 9.104, -23.9, 17, -13.48, 4,\n+\t\t  69.78, 0.33, 81, 0.4, -8.9, -173.37, 0.8, 68 };\n+  union512 res;\n+\n+  res.x = foo (v[15], v[14], v[13], v[12], v[11], v[10], v[9], v[8],\n+\t       v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512 (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_ps ();\n+\n+  res.x = foo_r (v[15], v[14], v[13], v[12], v[11], v[10], v[9], v[8],\n+\t\t v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512 (res, v))\n+    abort ();\n+}"}, {"sha": "7ec166a588650a88336afc924ea3abd1de1724f1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16sf-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-3.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo (float x)\n+{\n+  return _mm512_set_ps (x, x, x, x, x, x, x, x,\n+\t\t\tx, x, x, x, x, x, x, x);\n+}\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo_r (float x)\n+{\n+  return _mm512_setr_ps (x, x, x, x, x, x, x, x,\n+\t\t\t x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  float e = 34.5;\n+  float v[16];\n+  union512 res;\n+\n+  for (i = 0; i < 16; i++)\n+    v[i] = e;\n+\n+  res.x = foo (e);\n+\n+  if (check_union512 (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_ps ();\n+\n+  res.x = foo_r (e);\n+\n+  if (check_union512 (res, v))\n+    abort ();\n+}"}, {"sha": "cd37e00645066175ddd03585b2955a3665c51f44", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16sf-4.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-4.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo (float x, int i)\n+{\n+  switch (i)\n+    {\n+    case 15:\n+      return _mm512_set_ps (x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 14:\n+      return _mm512_set_ps (0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 13:\n+      return _mm512_set_ps (0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 12:\n+      return _mm512_set_ps (0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 11:\n+      return _mm512_set_ps (0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 10:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 9:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 8:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 7:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm512_set_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo_r (float x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_ps (x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 1:\n+      return _mm512_setr_ps (0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 2:\n+      return _mm512_setr_ps (0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_setr_ps (0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_setr_ps (0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 7:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 8:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0);\n+    case 9:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0);\n+    case 10:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0);\n+    case 11:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0);\n+    case 12:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0);\n+    case 13:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0);\n+    case 14:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0);\n+    case 15:\n+      return _mm512_setr_ps (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  float e = -3.234;\n+  float v[16];\n+  union512 res;\n+  int i, j;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512 (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_ps ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512 (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "dec7fd40a7ea6137ed61fca7114736b65957fe6f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16sf-5.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16sf-5.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo (float x, int i)\n+{\n+  switch (i)\n+    {\n+    case 15:\n+      return _mm512_set_ps (x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 14:\n+      return _mm512_set_ps (1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 13:\n+      return _mm512_set_ps (1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 12:\n+      return _mm512_set_ps (1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 11:\n+      return _mm512_set_ps (1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 10:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 9:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 8:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 7:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm512_set_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512\n+__attribute__ ((noinline))\n+foo_r (float x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_ps (x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 1:\n+      return _mm512_setr_ps (1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 2:\n+      return _mm512_setr_ps (1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_setr_ps (1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_setr_ps (1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 7:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 8:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1);\n+    case 9:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1);\n+    case 10:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1);\n+    case 11:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1);\n+    case 12:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1);\n+    case 13:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1);\n+    case 14:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1);\n+    case 15:\n+      return _mm512_setr_ps (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  float e = -3.234;\n+  float v[16];\n+  union512 res;\n+  int i, j;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512 (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_ps ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512 (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "ebd0486999f2e4677709cdbd57d062f61db337f5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16si-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (int *v)\n+{\n+  return _mm512_set_epi32 (v[15], v[14], v[13], v[12],\n+\t\t\t   v[11], v[10], v[9], v[8],\n+\t\t\t   v[7], v[6], v[5], v[4],\n+\t\t\t   v[3], v[2], v[1], v[0]);\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (int *v)\n+{\n+  return _mm512_setr_epi32 (v[0], v[1], v[2], v[3],\n+\t\t\t    v[4], v[5], v[6], v[7],\n+\t\t\t    v[8], v[9], v[10], v[11],\n+\t\t\t    v[12], v[13], v[14], v[15]);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int v[16] = { 19832468, 2134, 6576856, 6678,\n+\t\t8723467, 54646, 234566, 12314,\n+\t\t786784, 77575, 645245, 234555,\n+\t\t9487733, 411244, 12344, 86533 };\n+  union512i_d res;\n+\n+  res.x = foo (v);\n+\n+  if (check_union512i_d (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_si512 ();\n+\n+  res.x = foo_r (v);\n+\n+  if (check_union512i_d (res, v))\n+    abort ();\n+}"}, {"sha": "3090a2de66cfa66d51b33fc41d14c6e0b8da54b3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16si-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (int x1, int x2, int x3, int x4,\n+     int x5, int x6, int x7, int x8,\n+     int x9, int x10, int x11, int x12,\n+     int x13, int x14, int x15, int x16)\n+{\n+  return _mm512_set_epi32 (x1, x2, x3, x4, x5, x6, x7, x8,\n+\t\t\t   x9, x10, x11, x12, x13, x14, x15, x16);\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (int x1, int x2, int x3, int x4,\n+       int x5, int x6, int x7, int x8,\n+       int x9, int x10, int x11, int x12,\n+       int x13, int x14, int x15, int x16)\n+{\n+  return _mm512_setr_epi32 (x16, x15, x14, x13, x12, x11, x10, x9,\n+\t\t\t    x8, x7, x6, x5, x4, x3, x2, x1);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int v[16] = { -3, -453, 2, -231, 1, -111, 9, -145,\n+\t\t23, 671, -173, 166, -13, 714, 69, 123 };\n+  union512i_d res;\n+\n+  res.x = foo (v[15], v[14], v[13], v[12], v[11], v[10], v[9], v[8],\n+\t       v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512i_d (res, v))\n+     abort ();\n+\n+  res.x = _mm512_setzero_si512 ();\n+\n+  res.x = foo_r (v[15], v[14], v[13], v[12], v[11], v[10], v[9], v[8],\n+\t\t v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512i_d (res, v))\n+     abort ();\n+}"}, {"sha": "c02838ec349841a27c250d8fe7272e9c64888983", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16si-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-3.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (int x)\n+{\n+  return _mm512_set_epi32 (x, x, x, x, x, x, x, x,\n+\t\t\t   x, x, x, x, x, x, x, x);\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (int x)\n+{\n+  return _mm512_setr_epi32 (x, x, x, x, x, x, x, x,\n+\t\t\t    x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  int e = 0xabadbeef;\n+  int v[16];\n+  union512i_d res;\n+\n+  for (i = 0; i < 16; i++)\n+    v[i] = e;\n+\n+  res.x = foo (e);\n+\n+  if (check_union512i_d (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_si512 ();\n+\n+  res.x = foo_r (e);\n+\n+  if (check_union512i_d (res, v))\n+    abort ();\n+}"}, {"sha": "a16f6f06852d8dfe6ca3641ddcc777751d0a1495", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16si-4.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-4.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (int x, int i)\n+{\n+  switch (i)\n+    {\n+    case 15:\n+      return _mm512_set_epi32 (x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 14:\n+      return _mm512_set_epi32 (0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 13:\n+      return _mm512_set_epi32 (0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 12:\n+      return _mm512_set_epi32 (0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 11:\n+      return _mm512_set_epi32 (0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 10:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 9:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 8:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 7:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (int x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_epi32 (x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 1:\n+      return _mm512_setr_epi32 (0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 2:\n+      return _mm512_setr_epi32 (0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_setr_epi32 (0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 7:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 8:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0);\n+    case 9:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0);\n+    case 10:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0);\n+    case 11:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0);\n+    case 12:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0);\n+    case 13:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0);\n+    case 14:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0);\n+    case 15:\n+      return _mm512_setr_epi32 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int e = 0xabadbeef;\n+  int v[16];\n+  union512i_d res;\n+  int i, j;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512i_d (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_si512 ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512i_d (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "948d4ed42f1daa92280638ec7117b6ebedfcd6c2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v16si-5.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v16si-5.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (int x, int i)\n+{\n+  switch (i)\n+    {\n+    case 15:\n+      return _mm512_set_epi32 (x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 14:\n+      return _mm512_set_epi32 (1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 13:\n+      return _mm512_set_epi32 (1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 12:\n+      return _mm512_set_epi32 (1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 11:\n+      return _mm512_set_epi32 (1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 10:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 9:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 8:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 7:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm512_set_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (int x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_epi32 (x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 1:\n+      return _mm512_setr_epi32 (1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 2:\n+      return _mm512_setr_epi32 (1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_setr_epi32 (1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 7:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 8:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1);\n+    case 9:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1);\n+    case 10:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1);\n+    case 11:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1);\n+    case 12:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1);\n+    case 13:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1);\n+    case 14:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1);\n+    case 15:\n+      return _mm512_setr_epi32 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int e = 0xabadbeef;\n+  int v[16];\n+  union512i_d res;\n+  int i, j;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512i_d (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_si512 ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512i_d (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "a3514ef727122c81477147715603bdacee03d107", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8df-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo (double *v)\n+{\n+  return _mm512_set_pd (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+}\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo_r (double *v)\n+{\n+  return _mm512_setr_pd (v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  double v[8] = { -3.3, 2.6, 1.48, 9.104, -23.9, -173.37, -13.48, 69.78 };\n+  union512d res;\n+\n+  res.x = foo (v);\n+\n+  if (check_union512d (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_pd ();\n+\n+  res.x = foo_r (v);\n+\n+  if (check_union512d (res, v))\n+    abort ();\n+}"}, {"sha": "a412de582073ce3a4995e74968105b68603d9f96", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8df-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo (double x1, double x2, double x3, double x4,\n+     double x5, double x6, double x7, double x8)\n+{\n+  return _mm512_set_pd (x1, x2, x3, x4, x5, x6, x7, x8);\n+}\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo_r (double x1, double x2, double x3, double x4,\n+       double x5, double x6, double x7, double x8)\n+{\n+  return _mm512_setr_pd (x8, x7, x6, x5, x4, x3, x2, x1);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  double v[8] = { -3.3, 2.6, 1.48, 9.104, -23.9, -173.37, -13.48, 69.78 };\n+  union512d res;\n+\n+  res.x = foo (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512d (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_pd ();\n+\n+  res.x = foo_r (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512d (res, v))\n+    abort ();\n+}"}, {"sha": "751af67037889b33e4ef331c68e96b833f11a0d4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8df-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-3.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo (double x)\n+{\n+  return _mm512_set_pd (x, x, x, x, x, x, x, x);\n+}\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo_r (double x)\n+{\n+  return _mm512_setr_pd (x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  double e = 34.5;\n+  double v[8];\n+  union512d res;\n+\n+  for (i = 0; i < 8; i++)\n+    v[i] = e;\n+\n+  res.x = foo (e);\n+\n+  if (check_union512d (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_pd ();\n+\n+  res.x = foo_r (e);\n+\n+  if (check_union512d (res, v))\n+    abort ();\n+}"}, {"sha": "f62bb5fa065816257a359b9d6fca1b826ca404c4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8df-4.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-4.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo (double x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm512_set_pd (x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm512_set_pd (0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm512_set_pd (0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_set_pd (0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_set_pd (0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm512_set_pd (0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm512_set_pd (0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm512_set_pd (0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo_r (double x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_pd (x, 0, 0, 0, 0, 0, 0, 0);\n+    case 1:\n+      return _mm512_setr_pd (0, x, 0, 0, 0, 0, 0, 0);\n+    case 2:\n+      return _mm512_setr_pd (0, 0, x, 0, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_setr_pd (0, 0, 0, x, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_setr_pd (0, 0, 0, 0, x, 0, 0, 0);\n+    case 5:\n+      return _mm512_setr_pd (0, 0, 0, 0, 0, x, 0, 0);\n+    case 6:\n+      return _mm512_setr_pd (0, 0, 0, 0, 0, 0, x, 0);\n+    case 7:\n+      return _mm512_setr_pd (0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  double e = -3.234;\n+  double v[8];\n+  union512d res;\n+  int i, j;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512d (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_pd ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512d (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "c6abd82da04bddde988d2514c6fbfc5a13d520f0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8df-5.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8df-5.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo (double x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm512_set_pd (x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm512_set_pd (1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm512_set_pd (1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_set_pd (1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_set_pd (1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm512_set_pd (1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm512_set_pd (1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm512_set_pd (1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512d\n+__attribute__ ((noinline))\n+foo_r (double x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_pd (x, 1, 1, 1, 1, 1, 1, 1);\n+    case 1:\n+      return _mm512_setr_pd (1, x, 1, 1, 1, 1, 1, 1);\n+    case 2:\n+      return _mm512_setr_pd (1, 1, x, 1, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_setr_pd (1, 1, 1, x, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_setr_pd (1, 1, 1, 1, x, 1, 1, 1);\n+    case 5:\n+      return _mm512_setr_pd (1, 1, 1, 1, 1, x, 1, 1);\n+    case 6:\n+      return _mm512_setr_pd (1, 1, 1, 1, 1, 1, x, 1);\n+    case 7:\n+      return _mm512_setr_pd (1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  double e = -3.234;\n+  double v[8];\n+  union512d res;\n+  int i, j;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512d (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_pd ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512d (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "8cb1f8f61b2c79dc64c9372d00594f22b5b6da57", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8di-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (long long *v)\n+{\n+  return _mm512_set_epi64 (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (long long *v)\n+{\n+  return _mm512_setr_epi64 (v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  long long v[8] = { 0x12e9e94645ad8LL, 0x851c0b39446LL, 2134, 6678,\n+\t\t     0x786784645245LL, 0x9487731234LL, 41124, 86530 };\n+  union512i_q res;\n+\n+  res.x = foo (v);\n+\n+  if (check_union512i_q (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_si512 ();\n+\n+  res.x = foo_r (v);\n+\n+  if (check_union512i_q (res, v))\n+    abort ();\n+}"}, {"sha": "fd033ce24e0584145e1ba36001b947708c15e48f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8di-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (long long x1, long long x2, long long x3, long long x4,\n+     long long x5, long long x6, long long x7, long long x8)\n+{\n+  return _mm512_set_epi64 (x1, x2, x3, x4, x5, x6, x7, x8);\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (long long x1, long long x2, long long x3, long long x4,\n+       long long x5, long long x6, long long x7, long long x8)\n+{\n+  return _mm512_setr_epi64 (x8, x7, x6, x5, x4, x3, x2, x1);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  long long v[8] = { 0x12e9e94645ad8LL, 0x851c0b39446LL, 2134, 6678,\n+\t\t     0x786784645245LL, 0x9487731234LL, 41124, 86530 };\n+  union512i_q res;\n+\n+  res.x = foo (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512i_q (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_si512 ();\n+\n+  res.x = foo_r (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union512i_q (res, v))\n+    abort ();\n+}"}, {"sha": "16e12c7f1a97aca7523f72d86a9ba187aef500c8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8di-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-3.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (long long x)\n+{\n+  return _mm512_set_epi64 (x, x, x, x, x, x, x, x);\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (long long x)\n+{\n+  return _mm512_setr_epi64 (x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i;\n+  long long e = 0xfed178ab134badf1LL;\n+  long long v[8];\n+  union512i_q res;\n+\n+  for (i = 0; i < 8; i++)\n+    v[i] = e;\n+\n+  res.x = foo (e);\n+\n+  if (check_union512i_q (res, v))\n+    abort ();\n+\n+  res.x = _mm512_setzero_si512 ();\n+\n+  res.x = foo_r (e);\n+\n+  if (check_union512i_q (res, v))\n+    abort ();\n+}"}, {"sha": "ea6421fcc035d4bd103fdc180c38107a2a927010", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8di-4.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-4.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm512_set_epi64 (x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm512_set_epi64 (0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm512_set_epi64 (0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_set_epi64 (0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_set_epi64 (0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm512_set_epi64 (0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm512_set_epi64 (0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm512_set_epi64 (0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_epi64 (x, 0, 0, 0, 0, 0, 0, 0);\n+    case 1:\n+      return _mm512_setr_epi64 (0, x, 0, 0, 0, 0, 0, 0);\n+    case 2:\n+      return _mm512_setr_epi64 (0, 0, x, 0, 0, 0, 0, 0);\n+    case 3:\n+      return _mm512_setr_epi64 (0, 0, 0, x, 0, 0, 0, 0);\n+    case 4:\n+      return _mm512_setr_epi64 (0, 0, 0, 0, x, 0, 0, 0);\n+    case 5:\n+      return _mm512_setr_epi64 (0, 0, 0, 0, 0, x, 0, 0);\n+    case 6:\n+      return _mm512_setr_epi64 (0, 0, 0, 0, 0, 0, x, 0);\n+    case 7:\n+      return _mm512_setr_epi64 (0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  long long e = 0xabadbeef01234567LL;\n+  long long v[8];\n+  union512i_q res;\n+  int i, j;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512i_q (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_si512 ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512i_q (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "76ec4438897629c3c25bc80701ba411e74abe625", "filename": "gcc/testsuite/gcc.target/i386/avx512f-set-v8di-5.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-set-v8di-5.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo (long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm512_set_epi64 (x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm512_set_epi64 (1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm512_set_epi64 (1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_set_epi64 (1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_set_epi64 (1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm512_set_epi64 (1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm512_set_epi64 (1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm512_set_epi64 (1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static __m512i\n+__attribute__ ((noinline))\n+foo_r (long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0:\n+      return _mm512_setr_epi64 (x, 1, 1, 1, 1, 1, 1, 1);\n+    case 1:\n+      return _mm512_setr_epi64 (1, x, 1, 1, 1, 1, 1, 1);\n+    case 2:\n+      return _mm512_setr_epi64 (1, 1, x, 1, 1, 1, 1, 1);\n+    case 3:\n+      return _mm512_setr_epi64 (1, 1, 1, x, 1, 1, 1, 1);\n+    case 4:\n+      return _mm512_setr_epi64 (1, 1, 1, 1, x, 1, 1, 1);\n+    case 5:\n+      return _mm512_setr_epi64 (1, 1, 1, 1, 1, x, 1, 1);\n+    case 6:\n+      return _mm512_setr_epi64 (1, 1, 1, 1, 1, 1, x, 1);\n+    case 7:\n+      return _mm512_setr_epi64 (1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  long long e = 0xabadbeef01234567LL;\n+  long long v[8];\n+  union512i_q res;\n+  int i, j;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+\n+      res.x = foo (e, i);\n+\n+      if (check_union512i_q (res, v))\n+\tabort ();\n+\n+      res.x = _mm512_setzero_si512 ();\n+\n+      res.x = foo_r (e, i);\n+\n+      if (check_union512i_q (res, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "f0589bd18a3acdba84316188504b339079a0282c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-setzero-pd-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-pd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  int i;\n+  union512d res;\n+  double res_ref[8];\n+\n+  res.x = _mm512_setzero_pd ();\n+\n+  for (i = 0; i < 8; i++)\n+    res_ref[i] = 0.0;\n+\n+  if (check_union512d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "5b1ee29e340eca2302fdffdd39c49d2449850036", "filename": "gcc/testsuite/gcc.target/i386/avx512f-setzero-ps-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  int i;\n+  union512 res;\n+  float res_ref[16];\n+\n+  res.x = _mm512_setzero_ps ();\n+\n+  for (i = 0; i < 16; i++)\n+    res_ref[i] = 0.0;\n+\n+  if (check_union512 (res, res_ref))\n+    abort ();\n+}"}, {"sha": "1c60489b4fbd6463bd2d6825ee2a6fa0925de551", "filename": "gcc/testsuite/gcc.target/i386/avx512f-setzero-si512-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-si512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-si512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-setzero-si512-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  int i;\n+  union512i_q res;\n+  long long res_ref[8];\n+\n+  res.x = _mm512_setzero_si512 ();\n+\n+  for (i = 0; i < 8; i++)\n+    res_ref[i] = 0;\n+\n+  if (check_union512i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "8e37fec8e3dfe5004dca67fc5f704551935a0290", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddpd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vaddpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vaddpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddpd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddpd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddpd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_add_pd (x, x);\n+  x = _mm512_mask_add_pd (x, m, x, x);\n+  x = _mm512_maskz_add_pd (m, x, x);\n+  x = _mm512_add_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_add_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF);\n+  x = _mm512_maskz_add_round_pd (m, x, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "ce6918ed66ee1ce2250716992d3c053f4faa498d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddpd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (double *r, double *s1, double *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] + s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_add_pd) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_add_pd) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_add_pd) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "648fe486888b43990b9d404836a6d93939c96a8b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vaddps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vaddps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_add_ps (x, x);\n+  x = _mm512_mask_add_ps (x, m, x, x);\n+  x = _mm512_maskz_add_ps (m, x, x);\n+  x = _mm512_add_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_add_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF);\n+  x = _mm512_maskz_add_round_ps (m, x, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "6c982bcaffc62cde941fd1f70add292fdf902e88", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddps-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (float *r, float *s1, float *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] + s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_add_ps) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_add_ps) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_add_ps) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "693adb0577f5be8f705c7aeeb1f71889b9116274", "filename": "gcc/testsuite/gcc.target/i386/avx512f-valignd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"valignd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"valignd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"valignd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __mmask16 m1;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  z = _mm512_alignr_epi32 (z, z, 3);\n+  z = _mm512_mask_alignr_epi32 (z, m1, z, z, 3);\n+  z = _mm512_maskz_alignr_epi32 (m1, z, z, 3);\n+}"}, {"sha": "3d2a71ca1c8a6b63413fbfee16238099e9d2c99e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-valignd-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+#define N (SIZE / 2)\n+\n+static void\n+CALC (int *s1, int *s2, int *r)\n+{\n+  int i;\n+  int s[2 * SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s[i] = s2[i];\n+      s[i + SIZE] = s1[i];\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = s[i + N];\n+}\n+\n+void static\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, s1, s2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 2 * i;\n+      s2.a[i] = i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_alignr_epi32) (s1.x, s2.x, N);\n+  res2.x = INTRINSIC (_mask_alignr_epi32) (res2.x, mask, s1.x, s2.x, N);\n+  res3.x = INTRINSIC (_maskz_alignr_epi32) (mask, s1.x, s2.x, N);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+      abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+      abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+      abort ();\n+}"}, {"sha": "a72946837a0ee76ecd13f055a24bec1734b405b7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-valignq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"valignq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"valignq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"valignq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __mmask8 m1;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  z = _mm512_alignr_epi64 (z, z, 3);\n+  z = _mm512_mask_alignr_epi64 (z, m1, z, z, 3);\n+  z = _mm512_maskz_alignr_epi64 (m1, z, z, 3);\n+}"}, {"sha": "b3c09c7b1a3a6f5986595de30a6da323e53d5732", "filename": "gcc/testsuite/gcc.target/i386/avx512f-valignq-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-valignq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+#define N (SIZE / 2)\n+\n+static void\n+CALC (long long *s1, long long *s2, long long *r)\n+{\n+  int i;\n+  long long s[2 * SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s[i] = s2[i];\n+      s[i + SIZE] = s1[i];\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = s[i + N];\n+}\n+\n+void static\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3, s1, s2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 2 * i;\n+      s2.a[i] = i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_alignr_epi64) (s1.x, s2.x, N);\n+  res2.x = INTRINSIC (_mask_alignr_epi64) (res2.x, mask, s1.x, s2.x, N);\n+  res3.x = INTRINSIC (_maskz_alignr_epi64) (mask, s1.x, s2.x, N);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+      abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+      abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+      abort ();\n+}"}, {"sha": "cb0e4c2504f4619d65f83a7f1d979d4ad8dd133a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vblendmpd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler \"(vblendmpd|vmovapd)\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_blend_pd (m, x, x);\n+}"}, {"sha": "1fe4cb61605d7298c8831cbd1a520d638d935599", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vblendmpd-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (double *r, double *s1, double *s2, MASK_TYPE mask)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (mask & (1LL << i)) ? s2[i] : s1[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_blend_pd) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "faee9955b64d3c44f699829e61e25fbbd35f639b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vblendmps-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler \"(vblendmps|vmovaps)\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_blend_ps (m, x, x);\n+}"}, {"sha": "e92c70c37e5e64584bf83f6fc2da5f57085e0139", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vblendmps-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vblendmps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (float *r, float *s1, float *s2, MASK_TYPE mask)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (mask & (1 << i)) ? s2[i] : s1[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_blend_ps) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "2af23f11dbd5e28e856e7540566d2b4793f097f1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastf32x4-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf32x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf32x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf32x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshuff32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshuff32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshuff32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m128 y;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcast_f32x4 (y);\n+  x = _mm512_mask_broadcast_f32x4 (x, m, y);\n+  x = _mm512_maskz_broadcast_f32x4 (m, y);\n+}"}, {"sha": "79abcdc0d27b29711f5de1800341a35cb543eeae", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastf32x4-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf32x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf32x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf32x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (float *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 4];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3;\n+  UNION_TYPE (128,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 4; i++)\n+    {\n+      src.a[i] = 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_f32x4) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_f32x4) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_f32x4) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "dbc3967ccba4eac6da2623f9794e1fac30ae68b9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastf64x4-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf64x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf64x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf64x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m256d y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcast_f64x4 (y);\n+  x = _mm512_mask_broadcast_f64x4 (x, m, y);\n+  x = _mm512_maskz_broadcast_f64x4 (m, y);\n+}"}, {"sha": "bc5f6a1cc6f4bbdc8ad4febe0ab3c829b1b763a3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastf64x4-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf64x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf64x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastf64x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (double *r, double *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 4];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  UNION_TYPE (256, d) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 2; i++)\n+    {\n+      src.a[i] = 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_f64x4) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_f64x4) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_f64x4) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "743e1cbcc878e817584d2ff2e1a01337c47f1250", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcasti32x4-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti32x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti32x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti32x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshufi32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshufi32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshufi32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m128i y;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcast_i32x4 (y);\n+  x = _mm512_mask_broadcast_i32x4 (x, m, y);\n+  x = _mm512_maskz_broadcast_i32x4 (m, y);\n+}"}, {"sha": "61dccc227a1ebdea4f31e012eb0c4ec37dd17a8f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcasti32x4-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti32x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti32x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti32x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (int *r, int *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 4];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (128, i_d) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 4; i++)\n+    {\n+      src.a[i] = 34 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_i32x4) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_i32x4) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_i32x4) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "28a50ed8ccd051da71889c6e5c01e46d9a7e61fe", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcasti64x4-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti64x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti64x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti64x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcast_i64x4 (y);\n+  x = _mm512_mask_broadcast_i64x4 (x, m, y);\n+  x = _mm512_maskz_broadcast_i64x4 (m, y);\n+}"}, {"sha": "6286fca81784d7fc7e4ea1bef08ee0b4331da788", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcasti64x4-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti64x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti64x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcasti64x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (long long *r, long long *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 4];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  UNION_TYPE (256, i_q) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 2; i++)\n+    {\n+      src.a[i] = 34 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_i64x4) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_i64x4) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_i64x4) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "3d261afea7515e63e9046bd86122bffcceaa9def", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastsd-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastsd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastsd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastsd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastsd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m128d y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcastsd_pd (y);\n+  x = _mm512_mask_broadcastsd_pd (x, m, y);\n+  x = _mm512_maskz_broadcastsd_pd (m, y);\n+}"}, {"sha": "3ecc1a7c588f9620130f4545fa01924f0a2a686f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastsd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastsd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (double *r, double *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[0];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  UNION_TYPE (128, d) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 2; i++)\n+    {\n+      src.a[i] = 1.5 + 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcastsd_pd) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcastsd_pd) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcastsd_pd) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "4cc8cb787143ffb4684c3d6aed00a65b61fb2160", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastss-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastss-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m128 y;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_broadcastss_ps (y);\n+  x = _mm512_mask_broadcastss_ps (x, m, y);\n+  x = _mm512_maskz_broadcastss_ps (m, y);\n+}"}, {"sha": "f3f339825bdc55b593175d1687bad2bf963f55b9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vbroadcastss-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vbroadcastss-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (float *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[0];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3;\n+  UNION_TYPE (128,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 4; i++)\n+    {\n+      src.a[i] = 1.5 + 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcastss_ps) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcastss_ps) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcastss_ps) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "fa3655610c79d640a91f8f3b1c00d686aea56eea", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmppd-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler \"vcmppd\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmppd\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vcmppd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmppd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmp_pd_mask (x, x, _CMP_FALSE_OQ);\n+  m = _mm512_mask_cmp_pd_mask (m, x, x, _CMP_FALSE_OQ);\n+  m = _mm512_cmp_round_pd_mask (x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+  m = _mm512_mask_cmp_round_pd_mask (m, x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "333a83576b2a21e50334f97c8d592e62e217759b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmppd-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+#if AVX512F_LEN == 512\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 8; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm512_loadu_pd(s1);\t\t\t\\\n+    source2.x = _mm512_loadu_pd(s2);\t\t\t\\\n+    dst1 = _mm512_cmp_pd_mask(source1.x, source2.x, imm);\\\n+    dst2 = _mm512_mask_cmp_pd_mask(mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((dst_ref & mask) != dst2) abort();\n+#endif\n+\n+static void\n+TEST ()\n+{\n+    UNION_TYPE (AVX512F_LEN, d) source1, source2;\n+    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE mask = MASK_VALUE;\n+    int i;\n+    double s1[8]={2134.3343, 6678.346, 453.345635, 54646.464,\n+\t\t  231.23311, 5674.455, 111.111111, 23241.152};\n+    double s2[8]={41124.234, 6678.346, 8653.65635, 856.43576,\n+\t\t  231.23311, 4646.123, 111.111111, 124.12455};\n+\n+    CMP(_CMP_EQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_US, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_US, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[i], s2[i]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_US, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_US, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[i], s2[i]));\n+    CMP(_CMP_EQ_US, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_US, 1)\n+}"}, {"sha": "b90be8c726affc48062deeb5262a9917918eea87", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpps-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler \"vcmpps\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmpps\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vcmpps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmpps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmp_ps_mask (x, x, _CMP_FALSE_OQ);\n+  m = _mm512_mask_cmp_ps_mask (m, x, x, _CMP_FALSE_OQ);\n+  m = _mm512_cmp_round_ps_mask (x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+  m = _mm512_mask_cmp_round_ps_mask (m, x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "5ffd470dbe2fd64d902941c629dde7dfd9bd3478", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpps-2.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+#if AVX512F_LEN == 512\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 16; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm512_loadu_ps(s1);\t\t\t\\\n+    source2.x = _mm512_loadu_ps(s2);\t\t\t\\\n+    dst1 = _mm512_cmp_ps_mask(source1.x, source2.x, imm);\\\n+    dst2 = _mm512_mask_cmp_ps_mask(mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((dst_ref & mask) != dst2) abort();\n+#endif\n+\n+static void\n+TEST ()\n+{\n+    UNION_TYPE (AVX512F_LEN,) source1, source2;\n+    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE mask = MASK_VALUE;\n+    int i;\n+    float s1[16] = {2134.3343, 6678.346, 453.345635, 54646.464,\n+\t\t    231.23311, 5674.455, 111.111111, 23241.152,\n+\t\t    123.14811, 1245.124, 244.151353, 53454.141,\n+\t\t    926.16717, 3733.261, 643.161644, 23514.633};\n+    float s2[16] = {41124.234, 6678.346, 8653.65635, 856.43576,\n+\t\t    231.23311, 4646.123, 111.111111, 124.12455,\n+\t\t    123.14811, 1245.124, 244.151353, 53454.141,\n+\t\t    2134.3343, 6678.346, 453.345635, 54646.464};\n+\n+    CMP(_CMP_EQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_US, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_US, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[i], s2[i]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_US, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_US, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[i], s2[i]));\n+    CMP(_CMP_EQ_US, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_US, 1)\n+}"}, {"sha": "7f92fbea386ef9493a3b49b540bc25d74439f209", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpsd-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpsd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler \"vcmpsd\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmpsd\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vcmpsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmpsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm_cmp_sd_mask (x, x, _CMP_FALSE_OQ);\n+  m = _mm_mask_cmp_sd_mask (m, x, x, _CMP_FALSE_OQ);\n+  m = _mm_cmp_round_sd_mask (x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+  m = _mm_mask_cmp_round_sd_mask (m, x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "3e4729e4aac8491cfdd5af5071a7805e3144a05a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpsd-2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpsd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target c99_runtime } */\n+/* { dg-options \"-O2 -mavx512f -std=c99\" } */\n+\n+#include \"avx512f-check.h\"\n+#include <math.h>\n+\n+double s1[2] = {2134.3343, 6678.346};\n+double s2[2] = {1485.1288, 6678.346};\n+\n+__mmask8 dst_ref;\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    dst_ref = ((int) rel) | dst_ref;\t\t\t\\\n+    source1 = _mm_loadu_pd(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_pd(s2);\t\t\t\t\\\n+    dst = _mm_cmp_sd_mask(source1, source2, imm);\t\\\n+    dst2 = _mm_mask_cmp_sd_mask(mask, source1, source2, imm);\\\n+    if (dst_ref != dst) abort();\t\t\t\\\n+    if ((dst_ref & mask) != dst2) abort();\n+\n+static void\n+avx512f_test ()\n+{\n+    __m128d source1, source2;\n+    __mmask8 dst, dst2, mask;\n+    mask = 1;\n+    int i;\n+\n+    CMP(_CMP_EQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_US, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_US, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[0], s2[0]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_US, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_US, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[0], s2[0]));\n+    CMP(_CMP_EQ_US, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_US, 1)\n+}"}, {"sha": "9f370cb0e1e9a920f7d04fe85b9b7f0479c6c5b1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpss-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpss-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler \"vcmpss\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmpss\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\}\\]%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vcmpss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vcmpss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm_cmp_ss_mask (x, x, _CMP_FALSE_OQ);\n+  m = _mm_mask_cmp_ss_mask (m, x, x, _CMP_FALSE_OQ);\n+  m = _mm_cmp_round_ss_mask (x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+  m = _mm_mask_cmp_round_ss_mask (m, x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "7343cb05cdbe853cf201add1a0065ecda5d7ffe7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpss-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpss-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target c99_runtime } */\n+/* { dg-options \"-O2 -mavx512f -std=c99\" } */\n+\n+#include \"avx512f-check.h\"\n+#include <math.h>\n+\n+float s1[4] = {2134.3343, 6678.346, 453.345635, 54646.464};\n+float s2[4] = {1485.1288, 6678.346, 8653.65635, 856.43576};\n+\n+__mmask8 dst_ref;\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    dst_ref = ((int) rel) | dst_ref;\t\t\t\\\n+    source1 = _mm_loadu_ps(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_ps(s2);\t\t\t\t\\\n+    dst = _mm_cmp_ss_mask(source1, source2, imm);\t\\\n+    dst2 = _mm_mask_cmp_ss_mask(mask, source1, source2, imm);\\\n+    if (dst_ref != dst) abort();\t\t\t\\\n+    if ((dst_ref & mask)!= dst2) abort();\n+\n+static void\n+avx512f_test ()\n+{\n+    __m128 source1, source2;\n+    __mmask8 dst, dst2, mask;\n+    int i;\n+\n+    mask = 1;\n+\n+    CMP(_CMP_EQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_US, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_US, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[0], s2[0]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_US, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_US, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[0], s2[0]));\n+    CMP(_CMP_EQ_US, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_US, 1)\n+}"}, {"sha": "7b5aff4e34b15b6460402bf388a3f36b14d3273b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcomisd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcomisd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcomisd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcomisd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler \"vcomisd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\"  } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile int res;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_comi_round_sd (x, x, _CMP_LT_OS, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "bc504190487f6f4490af38b9c69dfe6686354a35", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcomiss-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcomiss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcomiss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcomiss-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcomiss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcomiss\\[ \\\\t\\]+\\[^{}\\n\\]*%xmm\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile int res;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_comi_round_ss (x, x, _CMP_LT_OS, _MM_FROUND_NO_EXC);\n+}\n+\n+void extern\n+avx512f_test_2 (void)\n+{\n+  res = _mm_comi_round_ss (x, x, _CMP_LT_OS, _MM_FROUND_CUR_DIRECTION);\n+}"}, {"sha": "3f2cdff9c14d8dcad8905753c76210df0094faf0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcompresspd-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompresspd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompresspd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompresspd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcompresspd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcompresspd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcompresspd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+double *p;\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_compress_pd (x, m, x);\n+  x = _mm512_maskz_compress_pd (m, x);\n+\n+  _mm512_mask_compressstoreu_pd (p, m, x);\n+}"}, {"sha": "4acbadbe729a296a797becd74ea9b34184715af4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcompresspd-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompresspd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompresspd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompresspd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#define MASK ((1 << SIZE) - 1)\n+#include <x86intrin.h>\n+\n+static void\n+CALC (double *s, double *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & (1 << i))\n+\tr[k++] = s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s, res1, res2;\n+  double res3[SIZE];\n+  MASK_TYPE compressed_mask, mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i, mask_bit_count, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 12345 * (i + 200) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_compress_pd) (res1.x, mask, s.x);\n+  res2.x = INTRINSIC (_maskz_compress_pd) (mask, s.x);\n+  INTRINSIC (_mask_compressstoreu_pd) (res3, mask, s.x);\n+\n+  mask_bit_count = __popcntd (mask & MASK);\n+  compressed_mask = (1 << mask_bit_count) - 1;\n+  CALC (s.a, res_ref, mask);\n+\n+  MASK_MERGE (d) (res_ref, compressed_mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, compressed_mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, compressed_mask, SIZE);\n+  if (checkVd (res3, res_ref, SIZE))\n+    abort ();\n+}"}, {"sha": "ab715c6fc090fe1277dbc8339f7789f61c6ddd5d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcompressps-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompressps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompressps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompressps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcompressps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcompressps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcompressps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+float *p;\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_compress_ps (x, m, x);\n+  x = _mm512_maskz_compress_ps (m, x);\n+\n+  _mm512_mask_compressstoreu_ps (p, m, x);\n+}"}, {"sha": "f996452b0917d9c465187c14ea45ffee4e982faa", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcompressps-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompressps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompressps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcompressps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#define MASK ((1 << SIZE) - 1)\n+#include <x86intrin.h>\n+\n+static void\n+CALC (float *s, float *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & (1 << i))\n+\tr[k++] = s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s, res1, res2;\n+  float res3[SIZE];\n+  MASK_TYPE compressed_mask, mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i, mask_bit_count, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 12345 * (i + 200) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_compress_ps) (res1.x, mask, s.x);\n+  res2.x = INTRINSIC (_maskz_compress_ps) (mask, s.x);\n+  INTRINSIC (_mask_compressstoreu_ps) (res3, mask, s.x);\n+\n+  mask_bit_count = __popcntd (mask & MASK);\n+  compressed_mask = (1 << mask_bit_count) - 1;\n+  CALC (s.a, res_ref, mask);\n+\n+  MASK_MERGE () (res_ref, compressed_mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, compressed_mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, compressed_mask, SIZE);\n+  if (checkVf (res3, res_ref, SIZE))\n+    abort ();\n+}"}, {"sha": "d2c616b08b5cfcc1c1b3cd44b5c6d5f45a97dc7a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtdq2pd-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2pd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i s;\n+volatile __m512d res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepi32_pd (s);\n+  res = _mm512_mask_cvtepi32_pd (res, m, s);\n+  res = _mm512_maskz_cvtepi32_pd (m, s);\n+}"}, {"sha": "77cdbab0eea7313f12064a26b94d320b3b7a8e0e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtdq2pd-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2pd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE ((AVX512F_LEN_HALF) / 32)\n+#include \"avx512f-mask-type.h\"\n+#define DST_SIZE ((AVX512F_LEN) / 64)\n+\n+static void\n+CALC (int *s, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      r[i] = (double) s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN_HALF, i_d) s;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[DST_SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 123456 * (i + 2000) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvtepi32_pd) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepi32_pd) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepi32_pd) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "58e727d28142421ca3ff8398473aee8d88b092d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtdq2ps-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s;\n+volatile __m512 res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepi32_ps (s);\n+  res = _mm512_mask_cvtepi32_ps (res, m, s);\n+  res = _mm512_maskz_cvtepi32_ps (m, s);\n+  res = _mm512_cvt_roundepi32_ps (s, _MM_FROUND_TO_NEAREST_INT);\n+  res = _mm512_mask_cvt_roundepi32_ps (res, m, s, _MM_FROUND_TO_POS_INF);\n+  res = _mm512_maskz_cvt_roundepi32_ps (m, s, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "4a3e3aa4baf212c7a4ddc8cdcbfe665f7e1164ef", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtdq2ps-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *s, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (float) s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s;\n+  UNION_TYPE (AVX512F_LEN, ) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123456 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtepi32_ps) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepi32_ps) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepi32_ps) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "964878f92ae887f949402b0bda17daf074e194e7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2dq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s;\n+volatile __m256i res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtpd_epi32 (s);\n+  res = _mm512_mask_cvtpd_epi32 (res, m, s);\n+  res = _mm512_maskz_cvtpd_epi32 (m, s);\n+  res = _mm512_cvt_roundpd_epi32 (s, _MM_FROUND_TO_NEAREST_INT);\n+  res = _mm512_mask_cvt_roundpd_epi32 (res, m, s, _MM_FROUND_TO_POS_INF);\n+  res = _mm512_maskz_cvt_roundpd_epi32 (m, s, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "5ecb640aec5bd75f372fc5a77ee2ec182eecd7d9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2dq-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE ((AVX512F_LEN) / 64)\n+#include \"avx512f-mask-type.h\"\n+#define DST_SIZE ((AVX512F_LEN_HALF) / 32)\n+\n+static void\n+CALC (double *s, unsigned *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      r[i] = (s[i] >= 0) ? (int) (s[i] + 0.5)\n+\t\t\t : (int) (s[i] - 0.5);\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[DST_SIZE] = { 0 };\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvtpd_epi32) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtpd_epi32) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtpd_epi32) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "457bb07700fffa409cd888e3ed351a2270f7a1ec", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2ps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%ymm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m256 y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_cvtpd_ps (x);\n+  y = _mm512_mask_cvtpd_ps (y, 4, x);\n+  y = _mm512_maskz_cvtpd_ps (6, x);\n+  y = _mm512_cvt_roundpd_ps (x, _MM_FROUND_TO_NEAREST_INT);\n+  y = _mm512_mask_cvt_roundpd_ps (y, 4, x, _MM_FROUND_TO_NEG_INF);\n+  y = _mm512_maskz_cvt_roundpd_ps (6, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "fa17ef9aa4c9734e56bb90b55f81b57d0a570258", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2ps-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void static\n+CALC (float *e, UNION_TYPE (AVX512F_LEN, d) s1)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    e[i] = (float) s1.a[i];\n+}\n+\n+void static\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1;\n+  UNION_TYPE (AVX512F_LEN_HALF,) u1, u2, u3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float e[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 0.12 * (i + 37.09);\n+      u1.a[i] = DEFAULT_VALUE;\n+      u2.a[i] = DEFAULT_VALUE;\n+      u3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  u1.x = INTRINSIC (_cvtpd_ps) (s1.x);\n+  u2.x = INTRINSIC (_mask_cvtpd_ps) (u2.x, mask, s1.x);\n+  u3.x = INTRINSIC (_maskz_cvtpd_ps) (mask, s1.x);\n+\n+  CALC (e, s1);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (u1, e))\n+    abort ();\n+\n+  MASK_MERGE ()(e, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (u2, e))\n+    abort ();\n+\n+  MASK_ZERO ()(e, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (u3, e))\n+    abort ();\n+}"}, {"sha": "28bfb17aa99f53025c3c64ddfd60aec520aec212", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2udq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s;\n+volatile __m256i res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtpd_epu32 (s);\n+  res = _mm512_mask_cvtpd_epu32 (res, m, s);\n+  res = _mm512_maskz_cvtpd_epu32 (m, s);\n+  res = _mm512_cvt_roundpd_epu32 (s, _MM_FROUND_TO_NEAREST_INT);\n+  res = _mm512_mask_cvt_roundpd_epu32 (res, m, s, _MM_FROUND_TO_POS_INF);\n+  res = _mm512_maskz_cvt_roundpd_epu32 (m, s, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "24788d97a441af1ce845d5d8a3a4a701b6ff4720", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2udq-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE ((AVX512F_LEN) / 64)\n+#include \"avx512f-mask-type.h\"\n+#define DST_SIZE ((AVX512F_LEN_HALF) / 32)\n+\n+static void\n+CALC (double *s, unsigned *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      r[i] = (unsigned) (s[i] + 0.5);\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned res_ref[DST_SIZE] = { 0 };\n+  int i;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000);\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvtpd_epu32) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtpd_epu32) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtpd_epu32) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "b22a950dd662c07f9da9b412381a4fb5414f39d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtph2ps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+volatile __m512 y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_cvtph_ps (x);\n+  y = _mm512_mask_cvtph_ps (y, 4, x);\n+  y = _mm512_maskz_cvtph_ps (6, x);\n+  y = _mm512_cvt_roundph_ps (x, _MM_FROUND_NO_EXC);\n+  y = _mm512_mask_cvt_roundph_ps (y, 4, x, _MM_FROUND_NO_EXC);\n+  y = _mm512_maskz_cvt_roundph_ps (6, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "725e1e87bb763be960eb6ce5db6004d2a1c8e73f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtph2ps-2.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN_HALF, i_w) val;\n+  UNION_TYPE (AVX512F_LEN,) res1,res2,res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float exp[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  exp[0] = 1;\n+  exp[1] = 2;\n+  exp[2] = 4;\n+  exp[3] = 8;\n+#if AVX512F_LEN > 128\n+  exp[4] = -1;\n+  exp[5] = -2;\n+  exp[6] = -4;\n+  exp[7] = -8;\n+#endif\n+#if AVX512F_LEN > 256\n+  exp[8] = 1;\n+  exp[9] = 2;\n+  exp[10] = 4;\n+  exp[11] = 8;\n+  exp[12] = -1;\n+  exp[13] = -2;\n+  exp[14] = -4;\n+  exp[15] = -8;\n+#endif\n+\n+  val.a[0] = 0x3c00;\n+  val.a[1] = 0x4000;\n+  val.a[2] = 0x4400;\n+  val.a[3] = 0x4800;\n+#if AVX512F_LEN > 128\n+  val.a[4] = 0xbc00;\n+  val.a[5] = 0xc000;\n+  val.a[6] = 0xc400;\n+  val.a[7] = 0xc800;\n+#endif\n+#if AVX512F_LEN > 256\n+  val.a[8] = 0x3c00;\n+  val.a[9] = 0x4000;\n+  val.a[10] = 0x4400;\n+  val.a[11] = 0x4800;\n+  val.a[12] = 0xbc00;\n+  val.a[13] = 0xc000;\n+  val.a[14] = 0xc400;\n+  val.a[15] = 0xc800;\n+#endif\n+\n+  res1.x = _mm512_cvtph_ps (val.x);\n+  res2.x = _mm512_mask_cvtph_ps (res2.x, mask, val.x);\n+  res3.x = _mm512_maskz_cvtph_ps (mask, val.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, exp))\n+    abort ();\n+\n+  MASK_MERGE () (exp, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, exp))\n+    abort ();\n+\n+  MASK_ZERO () (exp, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, exp))\n+    abort ();\n+}"}, {"sha": "2db36e9c13540e120236a87acc6cff99a97d1f3f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2dq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 s;\n+volatile __m512i res;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtps_epi32 (s);\n+  res = _mm512_mask_cvtps_epi32 (res, m, s);\n+  res = _mm512_maskz_cvtps_epi32 (m, s);\n+  res = _mm512_cvt_roundps_epi32 (s, _MM_FROUND_TO_NEAREST_INT);\n+  res = _mm512_mask_cvt_roundps_epi32 (res, m, s, _MM_FROUND_TO_POS_INF);\n+  res = _mm512_maskz_cvt_roundps_epi32 (m, s, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "a35c2ad02dd19a944aa9641db7d67e7a4919a9de", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2dq-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (int *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (s[i] >= 0) ? (int) (s[i] + 0.5) : (int) (s[i] - 0.5);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      src.a[i] = 1.5 + 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtps_epi32) (src.x);\n+  res2.x = INTRINSIC (_mask_cvtps_epi32) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvtps_epi32) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "c6fc473372020f03b55affc8e26697e1865c0a76", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2pd-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2pd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256 s;\n+volatile __m512d res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtps_pd (s);\n+  res = _mm512_mask_cvtps_pd (res, m, s);\n+  res = _mm512_maskz_cvtps_pd (m, s);\n+  res = _mm512_cvt_roundps_pd (s, _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvt_roundps_pd (res, m, s, _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvt_roundps_pd (m, s, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "5bed4f33fc9153351bc825cf7811e6a422cd558e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2pd-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2pd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE ((AVX512F_LEN_HALF) / 32)\n+#include \"avx512f-mask-type.h\"\n+#define DST_SIZE ((AVX512F_LEN) / 64)\n+\n+static void\n+CALC (float *s, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      r[i] = (double) s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN_HALF, ) s;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[DST_SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvtps_pd) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtps_pd) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtps_pd) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "daf701484a6f57e070e90adc0baed9d2f96235cb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2ph-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m256i y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_cvtps_ph (x, 0);\n+  y = _mm512_maskz_cvtps_ph (4, x, 0);\n+  y = _mm512_mask_cvtps_ph (y, 2, x, 0);\n+}"}, {"sha": "6fe9effd6a031be7f53b0e872b4a71a7c798df93", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2ph-2.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) val;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_w) res1,res2,res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short exp[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  val.a[0] = 1;\n+  val.a[1] = 2;\n+  val.a[2] = 4;\n+  val.a[3] = 8;\n+#if AVX512F_LEN > 128\n+  val.a[4] = -1;\n+  val.a[5] = -2;\n+  val.a[6] = -4;\n+  val.a[7] = -8;\n+#endif\n+#if AVX512F_LEN > 256\n+  val.a[8] = 1;\n+  val.a[9] = 2;\n+  val.a[10] = 4;\n+  val.a[11] = 8;\n+  val.a[12] = -1;\n+  val.a[13] = -2;\n+  val.a[14] = -4;\n+  val.a[15] = -8;\n+#endif\n+\n+  exp[0] = 0x3c00;\n+  exp[1] = 0x4000;\n+  exp[2] = 0x4400;\n+  exp[3] = 0x4800;\n+#if AVX512F_LEN > 128\n+  exp[4] = 0xbc00;\n+  exp[5] = 0xc000;\n+  exp[6] = 0xc400;\n+  exp[7] = 0xc800;\n+#endif\n+#if AVX512F_LEN > 256\n+  exp[8] = 0x3c00;\n+  exp[9] = 0x4000;\n+  exp[10] = 0x4400;\n+  exp[11] = 0x4800;\n+  exp[12] = 0xbc00;\n+  exp[13] = 0xc000;\n+  exp[14] = 0xc400;\n+  exp[15] = 0xc800;\n+#endif\n+\n+  res1.x = _mm512_cvtps_ph (val.x, 0);\n+  res2.x = _mm512_mask_cvtps_ph (res2.x, mask, val.x, 0);\n+  res3.x = _mm512_maskz_cvtps_ph (mask, val.x, 0);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res1, exp))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (exp, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res2, exp))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (exp, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res3, exp))\n+    abort ();\n+}"}, {"sha": "dfc08ab10d47a754a710acefd3293b0fbeb134a5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2udq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 s;\n+volatile __m512i res;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtps_epu32 (s);\n+  res = _mm512_mask_cvtps_epu32 (res, m, s);\n+  res = _mm512_maskz_cvtps_epu32 (m, s);\n+  res = _mm512_cvt_roundps_epu32 (s, _MM_FROUND_TO_NEAREST_INT);\n+  res = _mm512_mask_cvt_roundps_epu32 (res, m, s, _MM_FROUND_TO_NEG_INF);\n+  res = _mm512_maskz_cvt_roundps_epu32 (m, s, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "7826e2d795c0fd07af6f323099a79f87b973d9e1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2udq-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (unsigned *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (unsigned) (s[i] + 0.5);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 1.5 + 34.67 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtps_epu32) (src.x);\n+  res2.x = INTRINSIC (_mask_cvtps_epu32) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvtps_epu32) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "84a10da4b6eba53c06ca778a0695ef57dcdb8837", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2si-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2si\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvt_roundsd_i32 (x, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "ca2ff58b3b7a96721f9c3d99f0455ae5a5866007", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2si64-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2siq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvt_roundsd_i64 (x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "c5e80aed47d667d70ac08ffada7458711a3410ac", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2usi-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvtsd_u32 (x);\n+  y = _mm_cvt_roundsd_u32 (x, _MM_FROUND_TO_NEG_INF);\n+}"}, {"sha": "e53012446e016b9c41ed0d9ad35f370577af6ac1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2usi-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128d s1;\n+  unsigned int d;\n+  unsigned int e;\n+\n+  s1.x = _mm_set_pd (24.43, 68.346);\n+  d =  _mm_cvtsd_u32 (s1.x);\n+  e = (unsigned int)(s1.a[0] + 0.5);\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "9edecd31d8f006c14b30bc1a530229cdbe8b768b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2usi64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvtsd_u64 (x);\n+  y = _mm_cvt_roundsd_u64 (x, _MM_FROUND_TO_POS_INF);\n+}"}, {"sha": "92843d9e361da6de65b09ebc855582d19e9ee3cd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2usi64-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128d s1;\n+  unsigned long long d;\n+  unsigned long long e;\n+\n+  s1.x = _mm_set_pd (24.43, 68.346);\n+  d =  _mm_cvtsd_u64 (s1.x);\n+  e = (unsigned long long)(s1.a[0] + 0.5);\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "2d49094131e43b174144b8ee5169098e57df4520", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2sd64-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2sdq\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile long long n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvt_roundi64_sd (x, n, _MM_FROUND_TO_POS_INF);\n+}"}, {"sha": "9768a570169e1e91da2ea4b5962883f81bf74398", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2ss-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile int n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvt_roundi32_ss (x, n, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "c9d2daf363f755913ff7cf2d4e2c2515f5be4a61", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2ss64-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2ssq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile long long n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvt_roundi64_ss (x, n, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "1e52fea6396c8ff6af5ad60755c2008a06aac279", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2si-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtss2si\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvt_roundss_i32 (x, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "bc3e301e2314889d0f0f5093d2a937312ab9c46a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2si64-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtss2siq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvt_roundss_i64 (x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "70fcfe82c39575c1eda9faf5e688c3e612515e85", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2usi-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtss2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvtss_u32 (x);\n+  y = _mm_cvt_roundss_u32 (x, _MM_FROUND_TO_NEG_INF);\n+}"}, {"sha": "bdfab830956cf4d42dc67e1072e2b1fb94e9195a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2usi-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128 s1;\n+  unsigned int d;\n+  unsigned int e;\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 35.7765, 34508.51);\n+  d =  _mm_cvtss_u32 (s1.x);\n+  e = (unsigned int)(s1.a[0] + 0.5);\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "0dd46cd934796d5bf423599d7c7b9adaa920b99f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2usi64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvtss2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2  } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvtss_u64 (x);\n+  y = _mm_cvt_roundss_u64 (x, _MM_FROUND_TO_POS_INF);\n+}"}, {"sha": "d19da31719cc275b59cf2a236c46aee8cfd01cbb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2usi64-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128 s1;\n+  unsigned long long d;\n+  unsigned long long e;\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 12.34, 80.67);\n+  d =  _mm_cvtss_u64 (s1.x);\n+  e = (unsigned long long)(s1.a[0] + 0.5);\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "5fad1e354c98fe57e8c749a1584cf8f307f24aec", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttpd2dq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2dq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s;\n+volatile __m256i res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttpd_epi32 (s);\n+  res = _mm512_mask_cvttpd_epi32 (res, m, s);\n+  res = _mm512_maskz_cvttpd_epi32 (m, s);\n+  res = _mm512_cvtt_roundpd_epi32 (s, _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvtt_roundpd_epi32 (res, m, s, _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvtt_roundpd_epi32 (m, s, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "f73c5c3c9f8a4b7e18014a2a10130385c57bd829", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttpd2dq-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2dq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2dq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2dq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE ((AVX512F_LEN) / 64)\n+#include \"avx512f-mask-type.h\"\n+#define DST_SIZE ((AVX512F_LEN_HALF) / 32)\n+\n+static void\n+CALC (double *s, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      r[i] = (int) s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[DST_SIZE] = { 0 };\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvttpd_epi32) (s.x);\n+  res2.x = INTRINSIC (_mask_cvttpd_epi32) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvttpd_epi32) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "36f2e40c59bde21e8dff54b536404af30f50a907", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttpd2udq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s;\n+volatile __m256i res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttpd_epu32 (s);\n+  res = _mm512_mask_cvttpd_epu32 (res, m, s);\n+  res = _mm512_maskz_cvttpd_epu32 (m, s);\n+  res = _mm512_cvtt_roundpd_epu32 (s, _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvtt_roundpd_epu32 (res, m, s, _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvtt_roundpd_epu32 (m, s, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "a8d3adc8d46dce5dbb7257bbf60d78f79073094e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttpd2udq-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE ((AVX512F_LEN) / 64)\n+#include \"avx512f-mask-type.h\"\n+#define DST_SIZE ((AVX512F_LEN_HALF) / 32)\n+\n+static void\n+CALC (double *s, unsigned *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      r[i] = (unsigned) s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned res_ref[DST_SIZE] = { 0 };\n+  int i;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000);\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvttpd_epu32) (s.x);\n+  res2.x = INTRINSIC (_mask_cvttpd_epu32) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvttpd_epu32) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SRC_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a156dbee9f18dbef03b6684a55c8862ea35e8e31", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttps2dq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2dq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 s;\n+volatile __m512i res;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttps_epi32 (s);\n+  res = _mm512_mask_cvttps_epi32 (res, m, s);\n+  res = _mm512_maskz_cvttps_epi32 (m, s);\n+  res = _mm512_cvtt_roundps_epi32 (s, _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvtt_roundps_epi32 (res, m, s, _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvtt_roundps_epi32 (m, s, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "f2cb5c708d269a4b1f20af61ae39adbcb3413735", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttps2dq-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2dq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2dq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2dq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (int *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (int) s[i];\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      src.a[i] = 1.5 + 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_cvttps_epi32) (src.x);\n+  res2.x = INTRINSIC (_mask_cvttps_epi32) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvttps_epi32) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "ffbfdfca328e3a2e5e0595e8f2441ecf20befb72", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttps2udq-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2udq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2udq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2udq-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttps2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2udq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2udq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 s;\n+volatile __m512i res;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvttps_epu32 (s);\n+  res = _mm512_mask_cvttps_epu32 (res, m, s);\n+  res = _mm512_maskz_cvttps_epu32 (m, s);\n+  res = _mm512_cvtt_roundps_epu32 (s, _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvtt_roundps_epu32 (res, m, s, _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvtt_roundps_epu32 (m, s, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "2b0212e1c549336f4af0de7f3ca94472d837d7a3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttps2udq-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2udq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2udq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttps2udq-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (unsigned *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (unsigned) s[i];\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 1.5 + 34.67 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvttps_epu32) (src.x);\n+  res2.x = INTRINSIC (_mask_cvttps_epu32) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvttps_epu32) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "e813a24a0a198c24c2f305bef97918bbffadb719", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2si-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2si\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2si\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttsd_i32 (x);\n+  y = _mm_cvtt_roundsd_i32 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "a447a873421859c29e9226ee22afe1217f68d24e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2si-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+static int\n+__attribute__ ((noinline, unused))\n+test (__m128d x)\n+{\n+  return _mm_cvttsd_i32 (x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128d s1;\n+  int res, res_ref;\n+\n+  s1.x = _mm_set_pd (123.321, 456.987);\n+  res = test (s1.x);\n+  res_ref = (int) s1.a[0];\n+\n+  if (res != res_ref)\n+    abort ();\n+}"}, {"sha": "a3b870c1004db3cc9ac950961188d6be21088449", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2si64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2siq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2siq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttsd_i64 (x);\n+  y = _mm_cvtt_roundsd_i64 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "7b759c1fa9ea38e18221940a10f8ddacf3ccf0a9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2si64-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2si64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+static int\n+__attribute__ ((noinline, unused))\n+test (__m128d x)\n+{\n+  return _mm_cvttsd_i64 (x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128d s1;\n+  long long res, res_ref;\n+\n+  s1.x = _mm_set_pd (123.321, 456.987);\n+  res = test (s1.x);\n+  res_ref = (long long) s1.a[0];\n+\n+  if (res != res_ref)\n+    abort ();\n+}"}, {"sha": "3a88517a738b5dacab1b7edd277dc8c05598fe9e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2usi-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttsd_u32 (x);\n+  y = _mm_cvtt_roundsd_u32 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "00f7eb6e5d617ce2f089302d685cec6024e1f316", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2usi-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static unsigned int\n+__attribute__((noinline, unused))\n+test (union128d s1)\n+{\n+  return _mm_cvttsd_u32 (s1.x);\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128d s1;\n+  unsigned int d;\n+  unsigned int e;\n+\n+  s1.x = _mm_set_pd (24.43, 68.346);\n+  d =  test (s1);\n+  e = (unsigned int)s1.a[0];\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "87bbcb7be6e067eb86d27c0bfaa42bd88fd1ee71", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2usi64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttsd_u64 (x);\n+  y = _mm_cvtt_roundsd_u64 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "4aa45ef8264503568e4fab92a1f8ef69a9049d67", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttsd2usi64-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttsd2usi64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static unsigned long long\n+__attribute__((noinline, unused))\n+test (union128d s1)\n+{\n+  return _mm_cvttsd_u64 (s1.x);\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128d s1;\n+  unsigned long long d;\n+  unsigned long long e;\n+\n+  s1.x = _mm_set_pd (24.43, 68.346);\n+  d =  test (s1);\n+  e = (unsigned long long)s1.a[0];\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "7669a1729a281e3fb245390513c2d0f8446005c8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2si-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttss2si\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttss2si\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttss_i32 (x);\n+  y = _mm_cvtt_roundss_i32 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "2aa62c07140b8d1b8e2a5b8e9f5030a21ea5d8c6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2si-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+static int\n+__attribute__ ((noinline, unused))\n+test (__m128 x)\n+{\n+  return _mm_cvttss_i32 (x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 s1;\n+  int res, res_ref;\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  res = test (s1.x);\n+  res_ref = (int) s1.a[0];\n+\n+  if (res != res_ref)\n+    abort ();\n+}"}, {"sha": "4888d6d1d9a55e73e02f34fe36a3f51178eff724", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2si64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttss2siq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2  } } */\n+/* { dg-final { scan-assembler-times \"vcvttss2siq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttss_i64 (x);\n+  y = _mm_cvtt_roundss_i64 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "cf33b997a8ea919c36ceedadd3f3d2d7f17216d8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2si64-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2si64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+static int\n+__attribute__ ((noinline, unused))\n+test (__m128 x)\n+{\n+  return _mm_cvttss_i64 (x);\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 s1;\n+  long long res, res_ref;\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  res = test (s1.x);\n+  res_ref = (long long) s1.a[0];\n+\n+  if (res != res_ref)\n+    abort ();\n+}"}, {"sha": "b270276352c992bc4b7efb57030699dc96a0f084", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2usi-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttss2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttss2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttss_u32 (x);\n+  y = _mm_cvtt_roundss_u32 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "4d19104776b7f14e777dc00e299a090772c7366e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2usi-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static unsigned int\n+__attribute__((noinline, unused))\n+test (union128 s1)\n+{\n+  return _mm_cvttss_u32 (s1.x);\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128 s1;\n+  unsigned int d;\n+  unsigned int e;\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 45.12, 90.97);\n+  d =  test (s1);\n+  e = (unsigned int)s1.a[0];\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "7c3b473c3b701c4f3ab9424d97560d44340c4f93", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2usi64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vcvttss2usi\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2  } } */\n+/* { dg-final { scan-assembler-times \"vcvttss2usi\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned long long y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm_cvttss_u64 (x);\n+  y = _mm_cvtt_roundss_u64 (x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "85f55d6cd7d95fa2c5417a8edd09fe8a2ed67bf5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttss2usi64-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttss2usi64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static unsigned long long\n+__attribute__((noinline, unused))\n+test (union128 s1)\n+{\n+  return _mm_cvttss_u64 (s1.x);\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128 s1;\n+  unsigned long long d;\n+  unsigned long long e;\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 10.756, 89.145);\n+  d =  test (s1);\n+  e = (unsigned long long)s1.a[0];\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "933e785e8668dc3ddd4e4c85f506c89df63946ae", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtudq2pd-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2pd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i s;\n+volatile __m512d res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepu32_pd (s);\n+  res = _mm512_mask_cvtepu32_pd (res, m, s);\n+  res = _mm512_maskz_cvtepu32_pd (m, s);\n+}"}, {"sha": "814a7b769c2250e6da1157b93d8b0b8c95e2e77f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtudq2pd-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2pd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE ((AVX512F_LEN_HALF) / 32)\n+#include \"avx512f-mask-type.h\"\n+#define DST_SIZE ((AVX512F_LEN) / 64)\n+\n+static void\n+CALC (unsigned *s, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      r[i] = (double) s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN_HALF, i_d) s;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[DST_SIZE];\n+  int i;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 123456 * (i + 2000);\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvtepu32_pd) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepu32_pd) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepu32_pd) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a42a58890a24fbd86ad11567726a6a47afeb2a50", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtudq2ps-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s;\n+volatile __m512 res;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepu32_ps (s);\n+  res = _mm512_mask_cvtepu32_ps (res, m, s);\n+  res = _mm512_maskz_cvtepu32_ps (m, s);\n+  res = _mm512_cvt_roundepu32_ps (s, _MM_FROUND_TO_NEAREST_INT);\n+  res = _mm512_mask_cvt_roundepu32_ps (res, m, s, _MM_FROUND_TO_NEG_INF);\n+  res = _mm512_maskz_cvt_roundepu32_ps (m, s, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "c43df063abc4480329f2867d34549d0bd6b9821f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtudq2ps-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (unsigned *s, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (float) s[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s;\n+  UNION_TYPE (AVX512F_LEN, ) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123456 * (i + 2000);\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtepu32_ps) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepu32_ps) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepu32_ps) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "b00c321c5000a120a0dd2586fae2f44ed2472de5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2sd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler \"vcvtusi2sd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvtu32_sd (x, n);\n+}"}, {"sha": "2100cbeb42385ac77af5dc34e943263ed2d7f475", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2sd-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+  __attribute__ ((noinline, unused))\n+compute_vcvtusi2sd (double *s1, unsigned s2, double *r)\n+{\n+  r[0] = (double) s2;\n+  r[1] = s1[1];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128d s1, res;\n+  unsigned s2;\n+  double res_ref[2];\n+\n+  s1.x = _mm_set_pd (-24.43, -43.35);\n+  s2 = 0xFEDCA987;\n+\n+  res.x = _mm_cvtu32_sd (s1.x, s2);\n+\n+  compute_vcvtusi2sd (s1.a, s2, res_ref);\n+\n+  if (check_union128d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "097cfa27b51a1c0268c51608819a40c670aaf429", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2sd64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2sd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2sd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile unsigned long long n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvtu64_sd (x, n);\n+  x = _mm_cvt_roundu64_sd (x, n, _MM_FROUND_TO_POS_INF);\n+}"}, {"sha": "997e21bb54d70f761ca3ef07c0f83a62f8c36c3c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2sd64-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+  __attribute__ ((noinline, unused))\n+compute_vcvtusi2sd (double *s1, unsigned long long s2, double *r)\n+{\n+  r[0] = (double) s2;\n+  r[1] = s1[1];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128d s1, res;\n+  unsigned long long s2;\n+  double res_ref[4];\n+\n+  s1.x = _mm_set_pd (-24.43, -43.35);\n+  s2 = 0xFEDCBA9876543210;\n+\n+  res.x = _mm_cvtu64_sd (s1.x, s2);\n+\n+  compute_vcvtusi2sd (s1.a, s2, res_ref);\n+\n+  if (check_union128d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "93b53fd543e6d8fc9b197cd78cf4bf79065eb6fb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2ss-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2ss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvtu32_ss (x, n);\n+  x = _mm_cvt_roundu32_ss (x, n, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "b5f67dd0ba0c1b04c488c8cd05e5b98eef59d29e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2ss-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+  __attribute__ ((noinline, unused))\n+compute_vcvtusi2ss (float *s1, unsigned s2, float *r)\n+{\n+  r[0] = (float) s2;\n+  r[1] = s1[1];\n+  r[2] = s1[2];\n+  r[3] = s1[3];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 s1, res;\n+  unsigned s2;\n+  float res_ref[4];\n+\n+  s1.x = _mm_set_ps (-24.43, 68.346, -43.35, 546.46);\n+  s2 = 0xFEDCA987;\n+\n+  res.x = _mm_cvtu32_ss (s1.x, s2);\n+\n+  compute_vcvtusi2ss (s1.a, s2, res_ref);\n+\n+  if (check_union128 (res, res_ref))\n+    abort ();\n+}"}, {"sha": "f1f691e88d8e529905ab0f0d88f9dc147e827d0d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2ss64-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2ss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile unsigned long long n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvtu64_ss (x, n);\n+  x = _mm_cvt_roundu64_ss (x, n, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "eeb499aac9f0a32e6675985a85e45343182fee37", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2ss64-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target { ! { ia32 } } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+static void\n+  __attribute__ ((noinline, unused))\n+compute_vcvtusi2ss (float *s1, unsigned long long s2, float *r)\n+{\n+  r[0] = (float) s2;\n+  r[1] = s1[1];\n+  r[2] = s1[2];\n+  r[3] = s1[3];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 s1, res;\n+  unsigned long long s2;\n+  float res_ref[4];\n+\n+  s1.x = _mm_set_ps (-24.43, 68.346, -43.35, 546.46);\n+  s2 = 0xFEDCBA9876543210;\n+\n+  res.x = _mm_cvtu64_ss (s1.x, s2);\n+\n+  compute_vcvtusi2ss (s1.a, s2, res_ref);\n+\n+  if (check_union128 (res, res_ref))\n+    abort ();\n+}"}, {"sha": "660c95663422c6feabc2f198b5187d19b328cc61", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivpd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vdivpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vdivpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdivpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdivpd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivpd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivpd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_div_pd (x, x);\n+  x = _mm512_mask_div_pd (x, m, x, x);\n+  x = _mm512_maskz_div_pd (m, x, x);\n+  x = _mm512_div_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_div_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF);\n+  x = _mm512_maskz_div_round_pd (m, x, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "761ee20f8981dffd853b73560952c2bf4bb3a997", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivpd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (double *r, double *s1, double *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] / s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_div_pd) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_div_pd) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_div_pd) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "8274440f7eac43ab2ce3720ca42d07fd52a733f6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vdivps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vdivps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdivps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdivps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_div_ps (x, x);\n+  x = _mm512_mask_div_ps (x, m, x, x);\n+  x = _mm512_maskz_div_ps (m, x, x);\n+  x = _mm512_div_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm512_mask_div_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF);\n+  x = _mm512_maskz_div_round_ps (m, x, x, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "5249bbdf4d2fe8a07ec088073cc1d64866fdd3ac", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivps-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (float *r, float *s1, float *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] / s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_div_ps) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_div_ps) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_div_ps) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "acbd34f3f36bee31014595a0dc52e6fbfe37f50a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vec-init.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-init.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,121 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+%zmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastsd\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+typedef char __v64qi __attribute__ ((vector_size (64)));\n+typedef short __v32hi __attribute__ ((vector_size (64)));\n+\n+__v64qi foo_1 (char c)\n+{\n+  __v64qi v1 = {\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v32hi foo_2 (short c)\n+{\n+  __v32hi v1 = {\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v16si foo_3 (int c)\n+{\n+  __v16si v1 = {\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v8di foo_4 (long long c)\n+{\n+  __v8di v1 = {\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v32qi foo_5 (char c)\n+{\n+  __v32qi v1 = {\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v16hi foo_6 (short c)\n+{\n+  __v16hi v1 = {\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v8si foo_7 (int c)\n+{\n+  __v8si v1 = {\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v4di foo_8 (long long c)\n+{\n+  __v4di v1 = {\n+      c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+\n+__v16qi foo_9 (char c)\n+{\n+  __v16qi v1 = {\n+      c, c, c, c, c, c, c, c,\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}\n+\n+__v8hi foo_10(short c)\n+{\n+  __v8hi v1 = {\n+      c, c, c, c, c, c, c, c\n+  };\n+\n+  return v1;\n+}"}, {"sha": "8dcdac7b06309b6b607a54c6eb1e14ed22be3dab", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vec-unpack.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-unpack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-unpack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-unpack.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,127 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512f\" } */\n+\n+long long *D;\n+int *S;\n+short *H;\n+char *Q;\n+\n+long long foo_unpack_1 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    D[i] *= S[i];\n+\n+  return D[ind];\n+}\n+\n+long long foo_unpack_2 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    D[i] *= H[i];\n+\n+  return D[ind];\n+}\n+\n+long long foo_unpack_3 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    D[i] *= Q[i];\n+\n+  return D[ind];\n+}\n+\n+int foo_unpack_4 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    S[i] *= H[i];\n+\n+  return S[ind];\n+}\n+\n+int foo_unpack_5 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    S[i] *= Q[i];\n+\n+  return S[ind];\n+}\n+\n+short foo_unpack_6 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    H[i] *= Q[i];\n+\n+  return H[ind];\n+}\n+\n+int foo_expand_1 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    S[i] *= D[i];\n+\n+  return S[ind];\n+}\n+\n+short foo_expand_2 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    H[i] *= D[i];\n+\n+  return H[ind];\n+}\n+\n+char foo_expand_3 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    Q[i] *= D[i];\n+\n+  return Q[ind];\n+}\n+\n+short foo_expand_4 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    H[i] *= S[i];\n+\n+  return H[ind];\n+}\n+\n+char foo_expand_5 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    Q[i] *= S[i];\n+\n+  return Q[ind];\n+}\n+\n+char foo_expand_6 (int low, int high, int ind)\n+{\n+  int i;\n+\n+  for (i = low; i <= high; i++)\n+    Q[i] *= H[i];\n+\n+  return Q[ind];\n+}"}, {"sha": "fc121656f206cd1d97a573deac9a1684b650d2a7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandpd-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+double *p;\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_expand_pd (x, m, x);\n+  x = _mm512_maskz_expand_pd (m, x);\n+\n+  x = _mm512_mask_expandloadu_pd (x, m, p);\n+  x = _mm512_maskz_expandloadu_pd (m, p);\n+}"}, {"sha": "088a2dd02e113301826a2c3f137cc6f9882e5ca2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandpd-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s, double *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & (1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double s2[SIZE];\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 123.456 * (i + 200) * sign;\n+      s2[i] = 789.012 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_expand_pd) (res1.x, mask, s1.x);\n+  res2.x = INTRINSIC (_maskz_expand_pd) (mask, s1.x);\n+  res3.x = INTRINSIC (_mask_expandloadu_pd) (res3.x, mask, s2);\n+  res4.x = INTRINSIC (_maskz_expandloadu_pd) (mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref2))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res4, res_ref2))\n+    abort ();\n+}"}, {"sha": "fcf87642b403f91605cfcda653038c49b5986225", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandps-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+float *p;\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_expand_ps (x, m, x);\n+  x = _mm512_maskz_expand_ps (m, x);\n+\n+  x = _mm512_mask_expandloadu_ps (x, m, p);\n+  x = _mm512_maskz_expandloadu_ps (m, p);\n+}"}, {"sha": "1faf3dfe917261aaf6390bc8a9799326c53378ae", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandps-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s, float *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & (1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float s2[SIZE];\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 123.456 * (i + 200) * sign;\n+      s2[i] = 789.012 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_expand_ps) (res1.x, mask, s1.x);\n+  res2.x = INTRINSIC (_maskz_expand_ps) (mask, s1.x);\n+  res3.x = INTRINSIC (_mask_expandloadu_ps) (res3.x, mask, s2);\n+  res4.x = INTRINSIC (_maskz_expandloadu_ps) (mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref2))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res4, res_ref2))\n+    abort ();\n+}"}, {"sha": "b32d161ba9aea356906dd3f67f1ef02f0ba2952b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextractf32x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf32x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf32x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf32x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextractf32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextractf32x4\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextractf32x4\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m128 y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_extractf32x4_ps (x, 1);\n+  y = _mm512_mask_extractf32x4_ps (y, 2, x, 1);\n+  y = _mm512_maskz_extractf32x4_ps (2, x, 1);\n+}"}, {"sha": "6259ac80624f73b9a784ef693800bc6cd4bdd1b7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextractf64x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf64x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf64x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf64x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextractf64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextractf64x4\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextractf64x4\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m256d y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_extractf64x4_pd (x, 1);\n+  y = _mm512_maskz_extractf64x4_pd (2, x, 1);\n+  y = _mm512_mask_extractf64x4_pd (y, 2, x, 1);\n+}"}, {"sha": "b73044917b514a8e6b78205d264edb2cda506180", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextractf64x4-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf64x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf64x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf64x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include <string.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union512d s1;\n+  union256d res1, res2, res3;\n+  __mmask8 mask = 0xBA;\n+  double res_ref[4];\n+  int j;\n+\n+  for (j = 0; j < 8; j++)\n+    {\n+      s1.a[j] = j * j / 4.56;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    {\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm512_extractf64x4_pd (s1.x, 0);\n+  res2.x = _mm512_mask_extractf64x4_pd (res2.x, mask, s1.x, 0);\n+  res3.x = _mm512_maskz_extractf64x4_pd (mask, s1.x, 0);\n+\n+  memset (res_ref, 0, 32);\n+  memcpy (res_ref, s1.a, 32);\n+\n+  if (check_union256d (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 4);\n+  if (check_union256d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 4);\n+  if (check_union256d (res3, res_ref))\n+    abort ();\n+\n+  res1.x = _mm512_extractf64x4_pd (s1.x, 1);\n+  res2.x = _mm512_mask_extractf64x4_pd (res2.x, mask, s1.x, 1);\n+  res3.x = _mm512_maskz_extractf64x4_pd (mask, s1.x, 1);\n+\n+  memset (res_ref, 0, 32);\n+  memcpy (res_ref, s1.a + 4, 32);\n+\n+  if (check_union256d (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 4);\n+  if (check_union256d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 4);\n+  if (check_union256d (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "87c92f7b5d884f7c9e8963db8cb3b8158bc9cf83", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextracti32x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti32x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti32x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti32x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m128i y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_extracti32x4_epi32 (x, 1);\n+  y = _mm512_mask_extracti32x4_epi32 (y, 2, x, 1);\n+  y = _mm512_maskz_extracti32x4_epi32 (2, x, 1);\n+}"}, {"sha": "71268bcbe5212f8ea5c17d80a456f90d5a9e3dcf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextracti64x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti64x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti64x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti64x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextracti64x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextracti64x4\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextracti64x4\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_extracti64x4_epi64 (x, 1);\n+  y = _mm512_mask_extracti64x4_epi64 (y, 2, x, 1);\n+  y = _mm512_maskz_extracti64x4_epi64 (2, x, 1);\n+}"}, {"sha": "9753d2461f008c27aa307534b559ea09e50bc6a1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextracti64x4-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti64x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti64x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti64x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include <string.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union512i_q s1;\n+  union256i_q res1, res2, res3;\n+  __mmask8 mask = 0xBA;\n+  long long int res_ref[4];\n+  int j;\n+\n+  for (j = 0; j < 8; j++)\n+    s1.a[j] = j * j;\n+\n+  for (j = 0; j < 4; j++)\n+    {\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+  res1.x = _mm512_extracti64x4_epi64 (s1.x, 0);\n+  res2.x = _mm512_mask_extracti64x4_epi64 (res2.x, mask, s1.x, 0);\n+  res3.x = _mm512_maskz_extracti64x4_epi64 (mask, s1.x, 0);\n+\n+  memset (res_ref, 0, 32);\n+  memcpy (res_ref, s1.a, 32);\n+\n+  if (check_union256i_q (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, 4);\n+  if (check_union256i_q (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, 4);\n+  if (check_union256i_q (res3, res_ref))\n+    abort ();\n+\n+  res1.x = _mm512_extracti64x4_epi64 (s1.x, 1);\n+  res2.x = _mm512_mask_extracti64x4_epi64 (res2.x, mask, s1.x, 1);\n+  res3.x = _mm512_maskz_extracti64x4_epi64 (mask, s1.x, 1);\n+\n+  memset (res_ref, 0, 32);\n+  memcpy (res_ref, s1.a + 4, 32);\n+\n+  if (check_union256i_q (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, 4);\n+  if (check_union256i_q (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, 4);\n+  if (check_union256i_q (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "e452ebcffd0182e273b3e5b727ab197ddd944b90", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmpd-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vfixupimmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1, x2;\n+volatile __m512i y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fixupimm_pd (x1, x2, y, 3);\n+  x1 = _mm512_mask_fixupimm_pd (x1, m, x2, y, 3);\n+  x1 = _mm512_maskz_fixupimm_pd (m, x1, x2, y, 3);\n+  x1 = _mm512_fixupimm_round_pd (x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fixupimm_round_pd (x1, m, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fixupimm_round_pd (m, x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "263fecd5f71bcc122c078d2535069eae70c0f389", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmpd-2.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#include \"math.h\"\n+#include \"values.h\"\n+\n+static void\n+CALC (double *r, double src, long long tbl)\n+{\n+  switch (tbl & 0xf)\n+    {\n+    case 0:\n+      *r = src;\n+      break;\n+    case 1:\n+      *r = src;\n+      break;\n+    case 2:\n+      *r = signbit (src) ? -NAN : NAN;\n+      break;\n+    case 3:\n+      *r = -NAN;\n+      break;\n+    case 4:\n+      *r = -INFINITY;\n+      break;\n+    case 5:\n+      *r = INFINITY;\n+      break;\n+    case 6:\n+      *r = signbit (src) ? -INFINITY : INFINITY;\n+      break;\n+    case 7:\n+      *r = 1.0 / -INFINITY;\n+      break;\n+    case 8:\n+      *r = 0.0;\n+      break;\n+    case 9:\n+      *r = -1.0;\n+      break;\n+    case 10:\n+      *r = 1.0;\n+      break;\n+    case 11:\n+      *r = 1.0 / 2.0;\n+      break;\n+    case 12:\n+      *r = 90.0;\n+      break;\n+    case 13:\n+      *r = M_PI_2;\n+      break;\n+    case 14:\n+      *r = MAXDOUBLE;\n+      break;\n+    case 15:\n+      *r = -MAXDOUBLE;\n+      break;\n+    default:\n+      abort ();\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, j, k;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, s1;\n+  UNION_TYPE (AVX512F_LEN, i_q) s2;\n+  double res_ref[SIZE];\n+\n+\n+  float vals[2] = { -10, 10 };\n+  int controls[8] = {0x11111111, 0x77777777, 0x77777777, 0x88888888,\n+    0x99999999, 0xaaaaaaaa, 0xbbbbbbbb, 0xcccccccc};\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      for (j = 0; j < SIZE; j++)\n+\t{\n+\t  s1.a[j] = vals[i];\n+\t  s2.a[j] = controls[j];\n+\t  res1.a[j] = DEFAULT_VALUE;\n+\t  res2.a[j] = DEFAULT_VALUE;\n+\t  res3.a[j] = DEFAULT_VALUE;\n+\n+\t  CALC (&res_ref[j], s1.a[j], s2.a[j]);\n+\t}\n+\n+      res1.x = INTRINSIC (_fixupimm_pd) (res1.x, s1.x, s2.x, 0);\n+      res2.x = INTRINSIC (_mask_fixupimm_pd) (res2.x, mask, s1.x, s2.x, 0);\n+      res3.x = INTRINSIC (_maskz_fixupimm_pd) (mask, res3.x, s1.x, s2.x, 0);\n+\n+      if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+\tabort ();\n+\n+      MASK_MERGE(d) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+\tabort ();\n+      MASK_ZERO(d) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+\tabort ();\n+    }\n+}\n+"}, {"sha": "5cf045df34209e53aea8185d2069c3da6735d377", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmps-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vfixupimmps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x1, x2;\n+volatile __m512i y;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fixupimm_ps (x1, x2, y, 3);\n+  x1 = _mm512_mask_fixupimm_ps (x1, m, x2, y, 3);\n+  x1 = _mm512_maskz_fixupimm_ps (m, x1, x2, y, 3);\n+  x1 = _mm512_fixupimm_round_ps (x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fixupimm_round_ps (x1, m, x2, y, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fixupimm_round_ps (m, x1, x2, y, 3, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "9fca53705de00d9813acfb8e349b2f4bc1153cb7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmps-2.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,121 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"math.h\"\n+#include \"values.h\"\n+\n+static void\n+CALC (float *r, float src, int tbl)\n+{\n+  switch (tbl & 0xf)\n+    {\n+    case 0:\n+      *r = src;\n+      break;\n+    case 1:\n+      *r = src;\n+      break;\n+    case 2:\n+      *r = signbit (src) ? -NAN : NAN;\n+      break;\n+    case 3:\n+      *r = -NAN;\n+      break;\n+    case 4:\n+      *r = -INFINITY;\n+      break;\n+    case 5:\n+      *r = INFINITY;\n+      break;\n+    case 6:\n+      *r = signbit (src) ? -INFINITY : INFINITY;\n+      break;\n+    case 7:\n+      *r = 1.0 / -INFINITY;\n+      break;\n+    case 8:\n+      *r = 0.0;\n+      break;\n+    case 9:\n+      *r = -1.0;\n+      break;\n+    case 10:\n+      *r = 1.0;\n+      break;\n+    case 11:\n+      *r = 1.0 / 2.0;\n+      break;\n+    case 12:\n+      *r = 90.0;\n+      break;\n+    case 13:\n+      *r = M_PI_2;\n+      break;\n+    case 14:\n+      *r = MAXFLOAT;\n+      break;\n+    case 15:\n+      *r = -MAXFLOAT;\n+      break;\n+    default:\n+      abort ();\n+    }\n+}\n+\n+\n+void static\n+TEST (void)\n+{\n+  int i, j, k;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3, s1;\n+  UNION_TYPE (AVX512F_LEN, i_d) s2;\n+  float res_ref[SIZE];\n+\n+\n+  float vals[2] = { -10, 10 };\n+  int controls[16] = { 0x11111111,\n+    0x77777777, 0x88888888, 0x99999999,\n+    0xaaaaaaaa, 0xbbbbbbbb, 0xcccccccc,\n+    0x77777777, 0x88888888, 0x99999999,\n+    0xaaaaaaaa, 0xbbbbbbbb, 0xcccccccc,\n+    0xdddddddd, 0xeeeeeeee, 0xffffffff\n+  };\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      for (j = 0; j < SIZE; j++)\n+\t{\n+\t  s1.a[j] = vals[i];\n+\t  s2.a[j] = controls[j];\n+\t  res1.a[j] = DEFAULT_VALUE;\n+\t  res2.a[j] = DEFAULT_VALUE;\n+\t  res3.a[j] = DEFAULT_VALUE;\n+\n+\t  CALC (&res_ref[j], s1.a[j], s2.a[j]);\n+\t}\n+\n+      res1.x = INTRINSIC (_fixupimm_ps) (res1.x, s1.x, s2.x, 0);\n+      res2.x = INTRINSIC (_mask_fixupimm_ps) (res2.x, mask, s1.x, s2.x, 0);\n+      res3.x = INTRINSIC (_maskz_fixupimm_ps) (mask, res3.x, s1.x, s2.x, 0);\n+\n+      if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+\tabort ();\n+\n+      MASK_MERGE() (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+\tabort ();\n+      MASK_ZERO() (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+\tabort ();\n+    }\n+}\n+"}, {"sha": "76676afef82c10c76b58a365add3a9fa91a3fb41", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmsd-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vfixupimmsd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmsd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmsd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile __m128i y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_fixupimm_sd (x, x, y, 3);\n+  x = _mm_mask_fixupimm_sd (x, m, x, y, 3);\n+  x = _mm_maskz_fixupimm_sd (m, x, x, y, 3);\n+  x = _mm_fixupimm_round_sd (x, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_fixupimm_round_sd (x, m, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_fixupimm_round_sd (m, x, x, y, 3, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "ebd288ed26861c93a573c09b37fb4335bc5bcbef", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmsd-2.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmsd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+#include <values.h>\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+compute_fixupimmpd (double *r, double src, long long tbl)\n+{\n+  switch (tbl & 0xf)\n+    {\n+    case 0:\n+      *r = src;\n+      break;\n+    case 1:\n+      *r = src;\n+      break;\n+    case 2:\n+      *r = signbit (src) ? -NAN : NAN;\n+      break;\n+    case 3:\n+      *r = -NAN;\n+      break;\n+    case 4:\n+      *r = -INFINITY;\n+      break;\n+    case 5:\n+      *r = INFINITY;\n+      break;\n+    case 6:\n+      *r = signbit (src) ? -INFINITY : INFINITY;\n+      break;\n+    case 7:\n+      *r = 1.0 / -INFINITY;\n+      break;\n+    case 8:\n+      *r = 0.0;\n+      break;\n+    case 9:\n+      *r = -1.0;\n+      break;\n+    case 10:\n+      *r = 1.0;\n+      break;\n+    case 11:\n+      *r = 1.0 / 2.0;\n+      break;\n+    case 12:\n+      *r = 90.0;\n+      break;\n+    case 13:\n+      *r = M_PI_2;\n+      break;\n+    case 14:\n+      *r = MAXDOUBLE;\n+      break;\n+    case 15:\n+      *r = -MAXDOUBLE;\n+      break;\n+    default:\n+      abort ();\n+    }\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128d s1, res1, res2, res3;\n+  union128i_q s2;\n+  double res_ref[2];\n+  int i, j, k;\n+\n+  float vals[2] = { -10, 10 };\n+  int controls[10] = { 0x11111111,\n+    0x77777777, 0x88888888, 0x99999999,\n+    0xaaaaaaaa, 0xbbbbbbbb, 0xcccccccc,\n+    0xdddddddd, 0xeeeeeeee, 0xffffffff\n+  };\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      s1.a[0] = vals[i];\n+      s1.a[1] = 1.0;\n+      s2.a[1] = 1.0;\n+\n+      res_ref[0] = 1.0;\n+      res_ref[1] = 1.0;\n+      res1.a[0] = res2.a[0] = res3.a[0] = DEFAULT_VALUE;\n+      res1.a[1] = res2.a[1] = res3.a[1] = DEFAULT_VALUE;\n+\n+      for (j = 0; j < 10; j++)\n+\t{\n+\t  s2.a[0] = controls[j];\n+\t  compute_fixupimmpd (&res_ref[0], s1.a[0], s2.a[0]);\n+\n+\t  res1.x = _mm_fixupimm_sd (res1.x, s1.x, s2.x, 0);\n+\t  res2.x = _mm_mask_fixupimm_sd (res2.x, mask, s1.x, s2.x, 0);\n+\t  res3.x = _mm_maskz_fixupimm_sd (mask, res3.x, s1.x, s2.x, 0);\n+\n+\t  if (check_union128d (res1, res_ref))\n+\t    abort ();\n+\n+\t  MASK_MERGE (d) (res_ref, mask, 1);\n+\t  if (check_union128d (res2, res_ref))\n+\t    abort ();\n+\n+\t  MASK_ZERO (d) (res_ref, mask, 1);\n+\t  if (check_union128d (res3, res_ref))\n+\t    abort ();\n+\t}\n+    }\n+}"}, {"sha": "435befbfa6f073d42a8341f4ed405ce5bccf0a44", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmss-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vfixupimmss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfixupimmss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+volatile __m128i y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_fixupimm_ss (x, x, y, 3);\n+  x = _mm_mask_fixupimm_ss (x, m, x, y, 3);\n+  x = _mm_maskz_fixupimm_ss (m, x, x, y, 3);\n+  x = _mm_fixupimm_round_ss (x, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_fixupimm_round_ss (x, m, x, y, 3, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_fixupimm_round_ss (m, x, x, y, 3, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "50830b8bd365df17bff4858976cd37d226fbc3a5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfixupimmss-2.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfixupimmss-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+#include <values.h>\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+compute_fixupimmps (float *r, float src, int tbl)\n+{\n+  switch (tbl & 0xf)\n+    {\n+    case 0:\n+      *r = src;\n+      break;\n+    case 1:\n+      *r = src;\n+      break;\n+    case 2:\n+      *r = signbit (src) ? -NAN : NAN;\n+      break;\n+    case 3:\n+      *r = -NAN;\n+      break;\n+    case 4:\n+      *r = -INFINITY;\n+      break;\n+    case 5:\n+      *r = INFINITY;\n+      break;\n+    case 6:\n+      *r = signbit (src) ? -INFINITY : INFINITY;\n+      break;\n+    case 7:\n+      *r = 1.0 / -INFINITY;\n+      break;\n+    case 8:\n+      *r = 0.0;\n+      break;\n+    case 9:\n+      *r = -1.0;\n+      break;\n+    case 10:\n+      *r = 1.0;\n+      break;\n+    case 11:\n+      *r = 1.0 / 2.0;\n+      break;\n+    case 12:\n+      *r = 90.0;\n+      break;\n+    case 13:\n+      *r = M_PI_2;\n+      break;\n+    case 14:\n+      *r = MAXFLOAT;\n+      break;\n+    case 15:\n+      *r = -MAXFLOAT;\n+      break;\n+    default:\n+      abort ();\n+    }\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128 s1, res1, res2, res3;\n+  union128i_d s2;\n+  float res_ref[4];\n+  int i, j, k;\n+\n+  float vals[2] = { -10, 10 };\n+  int controls[10] = { 0x11111111,\n+    0x77777777, 0x88888888, 0x99999999,\n+    0xaaaaaaaa, 0xbbbbbbbb, 0xcccccccc,\n+    0xdddddddd, 0xeeeeeeee, 0xffffffff\n+  };\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      s1.a[0] = vals[i];\n+      res1.a[0] = res2.a[0] = res3.a[0] = DEFAULT_VALUE;\n+      for (k = 1; k < 4; k++)\n+\t{\n+\t  s1.a[k] = k;\n+\t  s2.a[k] = k;\n+\t  res_ref[k] = k;\n+\t  res1.a[k] = res2.a[k] = res3.a[k] = DEFAULT_VALUE;\n+\t}\n+\n+      for (j = 0; j < 10; j++)\n+\t{\n+\t  s2.a[0] = controls[j];\n+\t  compute_fixupimmps (&res_ref[0], s1.a[0], s2.a[0]);\n+\n+\t  res1.x = _mm_fixupimm_ss (res1.x, s1.x, s2.x, 0);\n+\t  res2.x = _mm_mask_fixupimm_ss (res2.x, mask, s1.x, s2.x, 0);\n+\t  res3.x = _mm_maskz_fixupimm_ss (mask, res3.x, s1.x, s2.x, 0);\n+\n+\t  if (check_union128 (res1, res_ref))\n+\t    abort ();\n+\n+\t  MASK_MERGE () (res_ref, mask, 1);\n+\t  if (check_union128 (res2, res_ref))\n+\t    abort ();\n+\n+\t  MASK_ZERO () (res_ref, mask, 1);\n+\t  if (check_union128 (res3, res_ref))\n+\t    abort ();\n+\t}\n+    }\n+}"}, {"sha": "c45930c6b20df80f397073780a6396de32ff2236", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXpd-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231pd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1, x2, x3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmadd_pd (x1, x2, x3);\n+  x1 = _mm512_mask_fmadd_pd (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmadd_pd (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmadd_pd (m, x1, x2, x3);\n+  x1 = _mm512_fmadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "797363008699e5405cd146e551f7c793d9bf8c03", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXpd-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s1, double *s2, double *s3, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] * s2[i] + s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmadd_pd) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmadd_pd) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmadd_pd) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmadd_pd) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "ddeddb21b67bc621bd8850742b9e20325c0b7924", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x1, x2, x3;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmadd_ps (x1, x2, x3);\n+  x1 = _mm512_mask_fmadd_ps (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmadd_ps (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmadd_ps (m, x1, x2, x3);\n+  x1 = _mm512_fmadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "6883b77d7fbe0b26361b6b2f119d23a67d941392", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXps-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s1, float *s2, float *s3, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] * s2[i] + s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmadd_ps) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmadd_ps) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmadd_ps) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmadd_ps) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "7f4ab7bdd1cce3fad9cb08214e8c7fe9fc85f91e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddsubXXXpd-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub231pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub231pd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1, x2, x3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmaddsub_pd (x1, x2, x3);\n+  x1 = _mm512_mask_fmaddsub_pd (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmaddsub_pd (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmaddsub_pd (m, x1, x2, x3);\n+  x1 = _mm512_fmaddsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmaddsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmaddsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmaddsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "c546520335fa15da5f8af6dcc777991cfff920b1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddsubXXXpd-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s1, double *s2, double *s3, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      if (i % 2)\n+\tr[i] = s1[i] * s2[i] + s3[i];\n+      else\n+\tr[i] = s1[i] * s2[i] - s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmaddsub_pd) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmaddsub_pd) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmaddsub_pd) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmaddsub_pd) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "73936c71caa36e6ea6c7ac9f1dc873f9ca67963e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddsubXXXps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub231ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub231ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x1, x2, x3;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmaddsub_ps (x1, x2, x3);\n+  x1 = _mm512_mask_fmaddsub_ps (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmaddsub_ps (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmaddsub_ps (m, x1, x2, x3);\n+  x1 = _mm512_fmaddsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmaddsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmaddsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmaddsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "2e27ffb46be89db3ccee35f5549766be18602a66", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddsubXXXps-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s1, float *s2, float *s3, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      if (i % 2)\n+\tr[i] = s1[i] * s2[i] + s3[i];\n+      else\n+\tr[i] = s1[i] * s2[i] - s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmaddsub_ps) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmaddsub_ps) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmaddsub_ps) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmaddsub_ps) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "2ad155732903d9a2d55b60d03759cda8c65ad21d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXpd-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231pd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1, x2, x3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmsub_pd (x1, x2, x3);\n+  x1 = _mm512_mask_fmsub_pd (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmsub_pd (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmsub_pd (m, x1, x2, x3);\n+  x1 = _mm512_fmsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "caebada6d183c97800a21f1c549defe7dbe4a3f2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXpd-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s1, double *s2, double *s3, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] * s2[i] - s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmsub_pd) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmsub_pd) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmsub_pd) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmsub_pd) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "81afaf59092567c8d4a8b538b0e550ac89367365", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x1, x2, x3;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmsub_ps (x1, x2, x3);\n+  x1 = _mm512_mask_fmsub_ps (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmsub_ps (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmsub_ps (m, x1, x2, x3);\n+  x1 = _mm512_fmsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "da8908f33cab48889b6fb08a55ddc9d2f1c375b8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXps-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s1, float *s2, float *s3, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] * s2[i] - s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmsub_ps) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmsub_ps) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmsub_ps) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmsub_ps) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "1ff3f2b75363744d8baaae865868231bc1844a30", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubaddXXXpd-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd231pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd231pd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1, x2, x3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmsubadd_pd (x1, x2, x3);\n+  x1 = _mm512_mask_fmsubadd_pd (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmsubadd_pd (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmsubadd_pd (m, x1, x2, x3);\n+  x1 = _mm512_fmsubadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmsubadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmsubadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmsubadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "537948b1c4bc72ff5896df51c80e3c0675523557", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubaddXXXpd-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s1, double *s2, double *s3, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      if (i % 2)\n+\tr[i] = s1[i] * s2[i] - s3[i];\n+      else\n+\tr[i] = s1[i] * s2[i] + s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmsubadd_pd) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmsubadd_pd) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmsubadd_pd) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmsubadd_pd) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "283c0af19f6a492e13b1367c803c4d70ee76d4a4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubaddXXXps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd231ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd231ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x1, x2, x3;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmsubadd_ps (x1, x2, x3);\n+  x1 = _mm512_mask_fmsubadd_ps (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmsubadd_ps (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmsubadd_ps (m, x1, x2, x3);\n+  x1 = _mm512_fmsubadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fmsubadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fmsubadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fmsubadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "85be77ccb12b8145bd5f7bde5a8e17672cf77dd9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubaddXXXps-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s1, float *s2, float *s3, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      if (i % 2)\n+\tr[i] = s1[i] * s2[i] - s3[i];\n+      else\n+\tr[i] = s1[i] * s2[i] + s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fmsubadd_ps) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fmsubadd_ps) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fmsubadd_ps) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fmsubadd_ps) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "b08d7e18891410619c37a32e791bd320baddac14", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXpd-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231pd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1, x2, x3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fnmadd_pd (x1, x2, x3);\n+  x1 = _mm512_mask_fnmadd_pd (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fnmadd_pd (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fnmadd_pd (m, x1, x2, x3);\n+  x1 = _mm512_fnmadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fnmadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fnmadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fnmadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "71939a5628b0b173e29b984890a4fdc9a392a396", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXpd-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s1, double *s2, double *s3, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = -s1[i] * s2[i] + s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fnmadd_pd) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fnmadd_pd) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fnmadd_pd) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fnmadd_pd) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "8b4447c832fb38f0193c7c1e553c2b8bcf169f29", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x1, x2, x3;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fnmadd_ps (x1, x2, x3);\n+  x1 = _mm512_mask_fnmadd_ps (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fnmadd_ps (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fnmadd_ps (m, x1, x2, x3);\n+  x1 = _mm512_fnmadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fnmadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fnmadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fnmadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "b591d23aaa9c38710ce7918ce294e07fdfa1d96f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXps-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s1, float *s2, float *s3, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = -s1[i] * s2[i] + s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fnmadd_ps) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fnmadd_ps) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fnmadd_ps) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fnmadd_ps) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "a0776430d581a5e76c860753e626588455047d45", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXpd-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231pd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1, x2, x3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fnmsub_pd (x1, x2, x3);\n+  x1 = _mm512_mask_fnmsub_pd (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fnmsub_pd (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fnmsub_pd (m, x1, x2, x3);\n+  x1 = _mm512_fnmsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fnmsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fnmsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fnmsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "177ea73062a045b0b5dbd6c8ccc87f7f2503fab3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXpd-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s1, double *s2, double *s3, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = -s1[i] * s2[i] - s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fnmsub_pd) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fnmsub_pd) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fnmsub_pd) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fnmsub_pd) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, d) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "b863fb1bbd1b3606d05aa214f93c4767dbceb94e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x1, x2, x3;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fnmsub_ps (x1, x2, x3);\n+  x1 = _mm512_mask_fnmsub_ps (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fnmsub_ps (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fnmsub_ps (m, x1, x2, x3);\n+  x1 = _mm512_fnmsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm512_mask_fnmsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n+  x3 = _mm512_mask3_fnmsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n+  x1 = _mm512_maskz_fnmsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+}"}, {"sha": "379708b464a0aaa729aa2ea641e603691699238f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXps-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s1, float *s2, float *s3, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = -s1[i] * s2[i] - s3[i];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, s3, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = DEFAULT_VALUE;\n+      s2.a[i] = 56.78 * (i + 1) * sign;\n+      s3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_fnmsub_ps) (s1.x, s2.x, s3.x);\n+#endif\n+  res2.x = INTRINSIC (_mask_fnmsub_ps) (s1.x, mask, s2.x, s3.x);\n+  res3.x = INTRINSIC (_mask3_fnmsub_ps) (s2.x, s3.x, s1.x, mask);\n+  res4.x = INTRINSIC (_maskz_fnmsub_ps) (mask, s1.x, s2.x, s3.x);\n+\n+  CALC (s1.a, s2.a, s3.a, res_ref1);\n+  CALC (s2.a, s3.a, s1.a, res_ref2);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res1, res_ref1, 0.0001))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res2, res_ref1, 0.0001))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res3, res_ref2, 0.0001))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, SIZE);\n+  if (UNION_ROUGH_CHECK (AVX512F_LEN, ) (res4, res_ref1, 0.0001))\n+    abort ();\n+}"}, {"sha": "3d899ea2b613be59362d5b1cd8052f72356bd198", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexppd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexppd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexppd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexppd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgetexppd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6} } */\n+/* { dg-final { scan-assembler-times \"vgetexppd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2} } */\n+/* { dg-final { scan-assembler-times \"vgetexppd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2} } */\n+/* { dg-final { scan-assembler-times \"vgetexppd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3} } */\n+/* { dg-final { scan-assembler-times \"vgetexppd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1} } */\n+/* { dg-final { scan-assembler-times \"vgetexppd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1} } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_getexp_pd (x);\n+  x = _mm512_mask_getexp_pd (x, m, x);\n+  x = _mm512_maskz_getexp_pd (m, x);\n+  x = _mm512_getexp_round_pd (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_getexp_round_pd (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_getexp_round_pd (m, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "ec9321aa8948c88a64ea965bf38c941c0acdf8df", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexppd-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexppd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexppd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexppd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#include \"math.h\"\n+\n+static void\n+CALC (double *s, double *r)\n+{\n+  int i = 0;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = floor (log (s[i]) / log (2));\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int j;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, s;\n+  double res_ref[SIZE];\n+  double res_ref_mask[SIZE];\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s.a[j] = j * (j + 12.0231);\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_getexp_pd) (s.x);\n+  res2.x = INTRINSIC (_mask_getexp_pd) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_getexp_pd) (mask, s.x);\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE(d) (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO(d) (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+\n+}\n+"}, {"sha": "fb5674d702bddd2452b3e0b0df081eca1451199a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgetexpps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6} } */\n+/* { dg-final { scan-assembler-times \"vgetexpps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2} } */\n+/* { dg-final { scan-assembler-times \"vgetexpps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2} } */\n+/* { dg-final { scan-assembler-times \"vgetexpps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3} } */\n+/* { dg-final { scan-assembler-times \"vgetexpps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1} } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_getexp_ps (x);\n+  x = _mm512_mask_getexp_ps (x, m, x);\n+  x = _mm512_maskz_getexp_ps (m, x);\n+  x = _mm512_getexp_round_ps (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_getexp_round_ps (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_getexp_round_ps (m, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "56f4eaa15fe4ce763a94105a4ca12774b5c9cdb2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpps-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"math.h\"\n+\n+static void\n+CALC (float *s, float *r)\n+{\n+  int i = 0;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = floor (log (s[i]) / log (2));\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int j;\n+  UNION_TYPE (AVX512F_LEN, ) res1,res2,res3,s;\n+  float res_ref[SIZE];\n+  float res_ref_mask[SIZE];\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s.a[j] = j * (j + 12.0231);\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_getexp_ps) (s.x);\n+  res2.x = INTRINSIC (_mask_getexp_ps) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_getexp_ps) (mask, s.x);\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE() (res_ref,mask,SIZE );\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO() (res_ref,mask,SIZE );\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+\n+}\n+"}, {"sha": "b19846d17e5138eb20533a2b3a0a73ea909abbf1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantpd-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x, y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_getmant_pd (y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x =\n+    _mm512_mask_getmant_pd (x, m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+  x =\n+    _mm512_maskz_getmant_pd (m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src);\n+  x = _mm512_getmant_round_pd (y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src,\n+\t\t\t       _MM_FROUND_NO_EXC);\n+  x =\n+    _mm512_mask_getmant_round_pd (x, m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x =\n+    _mm512_maskz_getmant_round_pd (m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "473466b1e53a3fb572e642c8d48549b2abe53287", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantpd-2.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#include <math.h>\n+\n+#ifndef GET_NORM_MANT\n+#define GET_NORM_MANT\n+\n+union fp_int_t\n+{\n+  long long int int_val;\n+  double fp_val;\n+};\n+\n+double\n+get_norm_mant (double source, int signctrl, int interv)\n+{\n+  long long src, sign, exp, fraction;\n+  union fp_int_t bin_conv;\n+\n+  bin_conv.fp_val = source;\n+  src = bin_conv.int_val;\n+  sign = (signctrl & 0x1) ? 0 : (src >> 63);\n+  exp = (src & 0x7ff0000000000000) >> 52;\n+  fraction = (src & 0xfffffffffffff);\n+\n+  if (isnan (source))\n+    return signbit (source) ? -NAN : NAN;\n+  if (source == 0.0 || source == -0.0 || isinf (source))\n+    return sign ? -1.0 : 1.0;\n+  if (signbit (source) && (signctrl & 0x2))\n+    return -NAN;\n+  if (!isnormal (source))\n+    {\n+      src = (src & 0xfff7ffffffffffff);\n+      exp = 0x3ff;\n+      while (!(src & 0x8000000000000))\n+\t{\n+\t  src += fraction & 0x8000000000000;\n+\t  fraction = fraction << 1;\n+\t  exp--;\n+\t}\n+    }\n+\n+  switch (interv)\n+    {\n+    case 0:\n+      exp = 0x3ff;\n+      break;\n+    case 1:\n+      exp = ((exp - 0x3ff) & 0x1) ? 0x3fe : 0x3ff;\n+      break;\n+    case 2:\n+      exp = 0x3fe;\n+      break;\n+    case 3:\n+      exp = (fraction & 0x8000000000000) ? 0x3fe : 0x3ff;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  bin_conv.int_val = (sign << 63) | (exp << 52) | fraction;\n+  return bin_conv.fp_val;\n+}\n+#endif\n+\n+CALC (double *r, double *s, int interv, int signctrl)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = get_norm_mant (s[i], signctrl, interv);\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int interv = _MM_MANT_NORM_p5_1;\n+  int signctrl = _MM_MANT_SIGN_src;\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_getmant_pd) (src.x, interv, signctrl);\n+  res2.x =\n+    INTRINSIC (_mask_getmant_pd) (res2.x, mask, src.x, interv,\n+\t\t\t\t  signctrl);\n+  res3.x =\n+    INTRINSIC (_maskz_getmant_pd) (mask, src.x, interv, signctrl);\n+\n+  CALC (res_ref, src.a, interv, signctrl);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a3ce09e97c03d1e8fd2faed4e8785ea24b51a2b4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantps-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x, y;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_getmant_ps (y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x =\n+    _mm512_mask_getmant_ps (x, m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+  x =\n+    _mm512_maskz_getmant_ps (m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src);\n+  x = _mm512_getmant_round_ps (y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src,\n+\t\t\t _MM_FROUND_NO_EXC);\n+  x =\n+    _mm512_mask_getmant_round_ps (x, m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x =\n+    _mm512_maskz_getmant_round_ps (m, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "b8ea24d891b86f27fca5c6516d1c5de46a733732", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantps-2.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include <math.h>\n+\n+#ifndef GET_NORM_MANT\n+#define GET_NORM_MANT\n+\n+union fp_int_t\n+{\n+  int int_val;\n+  float fp_val;\n+};\n+\n+float\n+get_norm_mant (float source, int signctrl, int interv)\n+{\n+  int src, sign, exp, fraction;\n+  union fp_int_t bin_conv;\n+\n+  bin_conv.fp_val = source;\n+  src = bin_conv.int_val;\n+  sign = (signctrl & 0x1) ? 0 : (src >> 31);\n+  exp = (src & 0x7f800000) >> 23;\n+  fraction = (src & 0x7fffff);\n+\n+  if (isnan (source))\n+    return signbit (source) ? -NAN : NAN;\n+  if (source == 0.0 || source == -0.0 || isinf (source))\n+    return sign ? -1.0 : 1.0;\n+  if (signbit (source) && (signctrl & 0x2))\n+    return -NAN;\n+  if (!isnormal (source))\n+    {\n+      src = (src & 0xffbfffff);\n+      exp = 0x7f;\n+      while (!(src & 0x400000))\n+\t{\n+\t  src += fraction & 0x400000;\n+\t  fraction = fraction << 1;\n+\t  exp--;\n+\t}\n+    }\n+\n+  switch (interv)\n+    {\n+    case 0:\n+      exp = 0x7f;\n+      break;\n+    case 1:\n+      exp = ((exp - 0x7f) & 0x1) ? 0x7e : 0x7f;\n+      break;\n+    case 2:\n+      exp = 0x7e;\n+      break;\n+    case 3:\n+      exp = (fraction & 0x400000) ? 0x7e : 0x7f;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  bin_conv.int_val = (sign << 31) | (exp << 23) | fraction;\n+  \n+  return bin_conv.fp_val;\n+}\n+#endif\n+\n+CALC (float *r, float *s, int interv, int signctrl)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = get_norm_mant (s[i], signctrl, interv);\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3, src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int interv = _MM_MANT_NORM_p5_1;\n+  int signctrl = _MM_MANT_SIGN_src;\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_getmant_ps) (src.x, interv, signctrl);\n+  res2.x =\n+    INTRINSIC (_mask_getmant_ps) (res2.x, mask, src.x, interv,\n+\t\t\t\t  signctrl);\n+  res3.x =\n+    INTRINSIC (_maskz_getmant_ps) (mask, src.x, interv, signctrl);\n+\n+  CALC (res_ref, src.a, interv, signctrl);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "b2caa53246cd924cec519e8359bdfba28ed87942", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinsertf32x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x4\\[^\\n\\]*zmm\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x4\\[^\\n\\]*\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x4\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+__m128 y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_insertf32x4 (x, y, 1);\n+  x = _mm512_maskz_insertf32x4 (6, x, y, 1);\n+  x = _mm512_mask_insertf32x4 (x, 2, x, y, 1);\n+}"}, {"sha": "9231163c32767f1f991d91c075ce43c0bfaaf775", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinsertf32x4-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void static\n+CALC (UNION_TYPE (AVX512F_LEN,) s1, union128 s2, float *res_ref, int imm)\n+{\n+  memcpy (res_ref, s1.a, SIZE * sizeof (float));\n+  memcpy (res_ref + imm * 4, s2.a, 16);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) s1, res1, res2, res3;\n+  union128 s2;\n+  float res_ref[SIZE];\n+  int j;\n+\n+  MASK_TYPE mask = 6 ^ (0xffd >> SIZE);\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j / 10.2;\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    s2.a[j] = j * j * j / 2.03;\n+\n+  res1.x = INTRINSIC (_insertf32x4) (s1.x, s2.x, 1);\n+  res2.x = INTRINSIC (_mask_insertf32x4) (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = INTRINSIC (_maskz_insertf32x4) (mask, s1.x, s2.x, 1);\n+\n+  CALC (s1, s2, res_ref, 1);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a4c74fd4863ff0aae35434df0a37f08ca80c25a4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinsertf64x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf64x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf64x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf64x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x4\\[ \\\\t\\]+\\[^\\n\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x4\\[ \\\\t\\]+\\[^\\n\\]+\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x4\\[ \\\\t\\]+\\[^\\n\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m256d y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_insertf64x4 (x, y, 1);\n+  x = _mm512_mask_insertf64x4 (x, 2, x, y, 1);\n+  x = _mm512_maskz_insertf64x4 (2, x, y, 1);\n+}"}, {"sha": "17871b854932b6d5e4839b017e69d220ccc835a9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinsertf64x4-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf64x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf64x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf64x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#define SIZE (512 / 64)\n+#include \"avx512f-mask-type.h\"\n+#include <string.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union512d s1, res, res2, res3;\n+  union256d s2;\n+  double res_ref[8];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < 8; j++)\n+    {\n+      s1.a[j] = j * j + 1.6;\n+      res2.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    s2.a[j] = j * j * j / 2.7;\n+\n+  res.x = _mm512_insertf64x4 (s1.x, s2.x, 0);\n+  res2.x = _mm512_mask_insertf64x4 (res2.x, mask, s1.x, s2.x, 0);\n+  res3.x = _mm512_maskz_insertf64x4 (mask, s1.x, s2.x, 0);\n+\n+  memcpy (res_ref, s1.a, 64);\n+  memcpy (res_ref, s2.a, 32);\n+\n+  if (check_union512d (res, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (check_union512d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (check_union512d (res3, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_insertf64x4 (s1.x, s2.x, 1);\n+  res2.x = _mm512_mask_insertf64x4 (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = _mm512_maskz_insertf64x4 (mask, s1.x, s2.x, 1);\n+\n+  memcpy (res_ref, s1.a, 64);\n+  memcpy (res_ref + 4, s2.a, 32);\n+\n+  if (check_union512d (res, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (check_union512d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (check_union512d (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "44c083137a5f55e4b82dc0487a66f0176c6d1e1c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinserti32x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\]*xmm\\[^\\n\\]*zmm\\[^\\n\\]*zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\]*\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x,a;\n+volatile __m128i y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_maskz_inserti32x4 (6, x, y, 1);\n+  x = _mm512_mask_inserti32x4 (a, 6, x, y, 1);\n+  x = _mm512_inserti32x4 (x, y, 1);\n+}"}, {"sha": "c0cce565b4be97f8a3bc993c5c19d40958156786", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinserti32x4-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void static\n+CALC (UNION_TYPE (AVX512F_LEN, i_d) s1, union128i_d s2, int *res_ref, int imm)\n+{\n+  memcpy (res_ref, s1.a, SIZE * sizeof (int));\n+  memcpy (res_ref + imm * 4, s2.a, 16);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s1, res1, res2, res3;\n+  union128i_d s2;\n+  int res_ref[SIZE];\n+  int j;\n+\n+  MASK_TYPE mask = 6 ^ (0xffd >> SIZE);\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j;\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    s2.a[j] = j * j * j;\n+\n+  res1.x = INTRINSIC (_inserti32x4) (s1.x, s2.x, 1);\n+  res2.x = INTRINSIC (_mask_inserti32x4) (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = INTRINSIC (_maskz_inserti32x4) (mask, s1.x, s2.x, 1);\n+\n+  CALC (s1, s2, res_ref, 1);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "f5b7eff096df561b4afd971b45a3e5fee271f4a2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinserti64x4-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti64x4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti64x4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti64x4-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinserti64x4\\[ \\\\t\\]+\\[^\\n\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x4\\[ \\\\t\\]+\\[^\\n\\]+\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x4\\[ \\\\t\\]+\\[^\\n\\]+\\[^\\n\\]\" 3 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_inserti64x4 (x, y, 1);\n+  x = _mm512_mask_inserti64x4 (x, 2, x, y, 1);\n+  x = _mm512_maskz_inserti64x4 (2, x, y, 1);\n+}"}, {"sha": "58993ad5ed0c23388ced64bb68284e26c74ca9f9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinserti64x4-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti64x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti64x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti64x4-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#define SIZE (512 / 64)\n+#include \"avx512f-mask-type.h\"\n+#include <string.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union512i_q s1, res, res2, res3;\n+  union256i_q s2;\n+  long long int res_ref[8];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < 8; j++)\n+    {\n+      s1.a[j] = j * j;\n+      res2.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    s2.a[j] = j * j * j;\n+\n+  res.x = _mm512_inserti64x4 (s1.x, s2.x, 0);\n+  res2.x = _mm512_mask_inserti64x4 (res2.x, mask, s1.x, s2.x, 0);\n+  res3.x = _mm512_maskz_inserti64x4 (mask, s1.x, s2.x, 0);\n+\n+  memcpy (res_ref, s1.a, 64);\n+  memcpy (res_ref, s2.a, 32);\n+\n+  if (check_union512i_q (res, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (check_union512i_q (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (check_union512i_q (res3, res_ref))\n+    abort ();\n+\n+  res.x = _mm512_inserti64x4 (s1.x, s2.x, 1);\n+  res2.x = _mm512_mask_inserti64x4 (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = _mm512_maskz_inserti64x4 (mask, s1.x, s2.x, 1);\n+\n+  memcpy (res_ref, s1.a, 64);\n+  memcpy (res_ref + 4, s2.a, 32);\n+\n+  if (check_union512i_q (res, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (check_union512i_q (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (check_union512i_q (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "085a7e5e0c640094009cd19f680d53aa762ea937", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxpd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vmaxpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vmaxpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmaxpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmaxpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmaxpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_max_pd (x, x);\n+  x = _mm512_mask_max_pd (x, m, x, x);\n+  x = _mm512_maskz_max_pd (m, x, x);\n+  x = _mm512_max_round_pd (x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_max_round_pd (x, m, x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_max_round_pd (m, x, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "70f60a9688e824afbab516b1e182878bc82b4b7f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxpd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (double *r, double *s1, double *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_max_pd) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_max_pd) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_max_pd) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "564eeb516de4dd724f6c23cdafde073839a49ea5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vmaxps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vmaxps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmaxps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmaxps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmaxps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_max_ps (x, x);\n+  x = _mm512_mask_max_ps (x, m, x, x);\n+  x = _mm512_maskz_max_ps (m, x, x);\n+  x = _mm512_max_round_ps (x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_max_round_ps (x, m, x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_max_round_ps (m, x, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "fc92eaa3aaaa835f85aab830fb426b7c1d5e5009", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxps-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (float *r, float *s1, float *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, ) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_max_ps) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_max_ps) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_max_ps) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a4c993e6431dc7aac62b111094b08b5be9f28a0b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminpd-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminpd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vminpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vminpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vminpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vminpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vminpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminpd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_min_pd (x, x);\n+  x = _mm512_mask_min_pd (x, m, x, x);\n+  x = _mm512_maskz_min_pd (m, x, x);\n+  x = _mm512_min_round_pd (x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_min_round_pd (x, m, x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_min_round_pd (m, x, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "cfb355539e3b2b166533da6d5015e120157e3b3f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminpd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminpd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (double *r, double *s1, double *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_min_pd) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_min_pd) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_min_pd) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "3cd5904bcc56a541f2454243a306f70cc82166ac", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminps-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vminps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vminps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vminps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vminps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vminps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_min_ps (x, x);\n+  x = _mm512_mask_min_ps (x, m, x, x);\n+  x = _mm512_maskz_min_ps (m, x, x);\n+  x = _mm512_min_round_ps (x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_min_round_ps (x, m, x, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_min_round_ps (m, x, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "f619b12fe586a1502118da3dfda9d16b0f057183", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminps-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminps-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+CALC (float *r, float *s1, float *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+    }\n+}\n+\n+void static\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, ) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_min_ps) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_min_ps) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_min_ps) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "9cae38ff3faed0c59b30d5f0da6958e8caef81d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovapd-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+double *p;\n+volatile __m512d x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_mask_mov_pd (x1, m, x2);\n+  x1 = _mm512_maskz_mov_pd (m, x2);\n+\n+  x1 = _mm512_load_pd (p);\n+  x1 = _mm512_mask_load_pd (x1, m, p);\n+  x1 = _mm512_maskz_load_pd (m, p);\n+\n+  _mm512_store_pd (p, x1);\n+  _mm512_mask_store_pd (p, m, x1);\n+}"}, {"sha": "5e720ae8292cfdfb82aafd6535e951bd5940b282", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovapd-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-2.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE ((AVX512F_LEN) / 64)\n+#include \"avx512f-mask-type.h\"\n+#define ALIGN ((AVX512F_LEN) / 8)\n+\n+static void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s2, s3, res1, res3, res4, res5, res6;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double s1[SIZE] __attribute__ ((aligned (ALIGN)));\n+  double res2[SIZE] __attribute__ ((aligned (ALIGN)));\n+  double res7[SIZE] __attribute__ ((aligned (ALIGN)));\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1[i] = 12.34 * (i + 2000) * sign;\n+      s2.a[i] = 56.78 * (i - 30) * sign;\n+      s3.a[i] = 90.12 * (i + 40) * sign;\n+      res3.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res7[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+#if AVX512F_LEN == 512\n+  res1.x = INTRINSIC (_load_pd) (s1);\n+  INTRINSIC (_store_pd) (res2, s2.x);\n+#endif\n+  res3.x = INTRINSIC (_mask_mov_pd) (res3.x, mask, s3.x);\n+  res4.x = INTRINSIC (_maskz_mov_pd) (mask, s3.x);\n+  res5.x = INTRINSIC (_mask_load_pd) (res5.x, mask, s1);\n+  res6.x = INTRINSIC (_maskz_load_pd) (mask, s1);\n+  INTRINSIC (_mask_store_pd) (res7, mask, s2.x);\n+\n+#if AVX512F_LEN == 512\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, s1))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (s2, res2))\n+    abort ();\n+#endif\n+\n+  MASK_MERGE (d) (s3.a, mask, SIZE);\n+  if (checkVd (res3.a, s3.a, SIZE))\n+    abort ();\n+\n+  MASK_ZERO (d) (s3.a, mask, SIZE);\n+  if (checkVd (res4.a, s3.a, SIZE))\n+    abort ();\n+\n+  MASK_MERGE (d) (s1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res5, s1))\n+    abort ();\n+\n+  MASK_ZERO (d) (s1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res6, s1))\n+    abort ();\n+\n+  MASK_MERGE (d) (s2.a, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (s2, res7))\n+    abort ();\n+}"}, {"sha": "217e29ccb38f377cb485aabfcfaac669911601cb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovaps-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovaps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b289d71242e76c2c0bede4f500a15ef0cedb29dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovaps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovaps-1.c?ref=b289d71242e76c2c0bede4f500a15ef0cedb29dd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+float *p;\n+volatile __m512 x1, x2;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_mask_mov_ps (x1, m, x2);\n+  x1 = _mm512_maskz_mov_ps (m, x2);\n+\n+  x1 = _mm512_load_ps (p);\n+  x1 = _mm512_mask_load_ps (x1, m, p);\n+  x1 = _mm512_maskz_load_ps (m, p);\n+\n+  _mm512_store_ps (p, x1);\n+  _mm512_mask_store_ps (p, m, x1);\n+}"}]}