{"sha": "f4720b94c49fa64aad75c309681712f0e94a5059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3MjBiOTRjNDlmYTY0YWFkNzVjMzA5NjgxNzEyZjBlOTRhNTA1OQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-15T12:28:20Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-15T12:28:20Z"}, "message": "[AArch64 array_mode 3/8] Stop using EImode in aarch64-simd.md and iterators.md\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_ld3r<mode>):\n\tChange operand mode from <V_THREE_ELEM> to BLK.\n\t(aarch64_vec_load_lanesci_lane<mode>): Likewise.\n\t(aarch64_vec_store_lanesci_lane<mode>): Likewise.\n\t(aarch64_ld3r<mode>): Generate MEM rtx with BLKmode, call set_mem_size.\n\t(aarch64_ld3_lane<mode>): Likewise.\n\t(aarch64_st3_lane<mode>): Likewise.\n\t* config/aarch64/iterators.md (V_THREE_ELEM): Remove.\n\nFrom-SVN: r227783", "tree": {"sha": "358e96d7d76f4eb0ebe6b906c3507cc6973ef055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/358e96d7d76f4eb0ebe6b906c3507cc6973ef055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4720b94c49fa64aad75c309681712f0e94a5059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4720b94c49fa64aad75c309681712f0e94a5059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4720b94c49fa64aad75c309681712f0e94a5059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4720b94c49fa64aad75c309681712f0e94a5059/comments", "author": null, "committer": null, "parents": [{"sha": "6960bf558f2e6076c901cd57f2c24b5462d8d311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6960bf558f2e6076c901cd57f2c24b5462d8d311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6960bf558f2e6076c901cd57f2c24b5462d8d311"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "44373e1b255755a194dea0041969b02c5f3407d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4720b94c49fa64aad75c309681712f0e94a5059/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4720b94c49fa64aad75c309681712f0e94a5059/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4720b94c49fa64aad75c309681712f0e94a5059", "patch": "@@ -1,3 +1,14 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_ld3r<mode>):\n+\tChange operand mode from <V_THREE_ELEM> to BLK.\n+\t(aarch64_vec_load_lanesci_lane<mode>): Likewise.\n+\t(aarch64_vec_store_lanesci_lane<mode>): Likewise.\n+\t(aarch64_ld3r<mode>): Generate MEM rtx with BLKmode, call set_mem_size.\n+\t(aarch64_ld3_lane<mode>): Likewise.\n+\t(aarch64_st3_lane<mode>): Likewise.\n+\t* config/aarch64/iterators.md (V_THREE_ELEM): Remove.\n+\n 2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md"}, {"sha": "c1048d373c535dd542dfdefafb94885cc1bda0c4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4720b94c49fa64aad75c309681712f0e94a5059/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4720b94c49fa64aad75c309681712f0e94a5059/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f4720b94c49fa64aad75c309681712f0e94a5059", "patch": "@@ -4026,7 +4026,7 @@\n \n (define_insn \"aarch64_simd_ld3r<mode>\"\n   [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n-       (unspec:CI [(match_operand:<V_THREE_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+       (unspec:CI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n                    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY) ]\n                   UNSPEC_LD3_DUP))]\n   \"TARGET_SIMD\"\n@@ -4036,7 +4036,7 @@\n \n (define_insn \"aarch64_vec_load_lanesci_lane<mode>\"\n   [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n-\t(unspec:CI [(match_operand:<V_THREE_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t(unspec:CI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (match_operand:CI 2 \"register_operand\" \"0\")\n \t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n \t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -4080,11 +4080,11 @@\n \n ;; RTL uses GCC vector extension indices, so flip only for assembly.\n (define_insn \"aarch64_vec_store_lanesci_lane<mode>\"\n-  [(set (match_operand:<V_THREE_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:<V_THREE_ELEM> [(match_operand:CI 1 \"register_operand\" \"w\")\n-\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n-\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-\t\t   UNSPEC_ST3_LANE))]\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:CI 1 \"register_operand\" \"w\")\n+\t\t     (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t    UNSPEC_ST3_LANE))]\n   \"TARGET_SIMD\"\n   {\n     operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n@@ -4400,8 +4400,8 @@\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_THREE_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 3);\n \n   emit_insn (gen_aarch64_simd_ld3r<mode> (operands[0], mem));\n   DONE;\n@@ -4625,8 +4625,8 @@\n \t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_THREE_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 3);\n \n   emit_insn (gen_aarch64_vec_load_lanesci_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n@@ -4905,8 +4905,8 @@\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_THREE_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[0]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[0]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 3);\n \n   emit_insn (gen_aarch64_vec_store_lanesci_lane<mode> (mem,\n \t\t\t\t\t\t       operands[1],"}, {"sha": "ca0d299d39d803c951287008beb5a78adb8b0914", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4720b94c49fa64aad75c309681712f0e94a5059/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4720b94c49fa64aad75c309681712f0e94a5059/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f4720b94c49fa64aad75c309681712f0e94a5059", "patch": "@@ -604,15 +604,6 @@\n                               (V4HF \"SF\") (V8HF \"SF\")\n                               (DF \"V2DI\")   (V2DF \"V2DI\")])\n \n-;; Similar, for three elements.\n-(define_mode_attr V_THREE_ELEM [(V8QI \"BLK\") (V16QI \"BLK\")\n-                                (V4HI \"BLK\") (V8HI \"BLK\")\n-                                (V2SI \"BLK\") (V4SI \"BLK\")\n-                                (DI \"EI\")    (V2DI \"EI\")\n-                                (V2SF \"BLK\") (V4SF \"BLK\")\n-                                (V4HF \"BLK\") (V8HF \"BLK\")\n-                                (DF \"EI\")    (V2DF \"EI\")])\n-\n ;; Similar, for four elements.\n (define_mode_attr V_FOUR_ELEM [(V8QI \"SI\")   (V16QI \"SI\")\n                                (V4HI \"V4HI\") (V8HI \"V4HI\")"}]}