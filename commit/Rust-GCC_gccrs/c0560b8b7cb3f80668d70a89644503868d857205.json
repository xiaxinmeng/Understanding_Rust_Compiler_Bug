{"sha": "c0560b8b7cb3f80668d70a89644503868d857205", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1NjBiOGI3Y2IzZjgwNjY4ZDcwYTg5NjQ0NTAzODY4ZDg1NzIwNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-27T22:50:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-27T22:50:04Z"}, "message": "(array_type_nelts): Tighten up code and make more general.\n\n(build_function_type): Allow function to return array.\n(decl_function_context): Treat QUAL_UNION_TYPE like UNION_TYPE.\n\nFrom-SVN: r4771", "tree": {"sha": "6b2c7aaaccc1e8b111bd08617dc968e15565aa8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b2c7aaaccc1e8b111bd08617dc968e15565aa8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0560b8b7cb3f80668d70a89644503868d857205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0560b8b7cb3f80668d70a89644503868d857205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0560b8b7cb3f80668d70a89644503868d857205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0560b8b7cb3f80668d70a89644503868d857205/comments", "author": null, "committer": null, "parents": [{"sha": "62d8b51eb2d07e7fe20703aa379e25584a713409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d8b51eb2d07e7fe20703aa379e25584a713409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d8b51eb2d07e7fe20703aa379e25584a713409"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "82bf4ccc07a223bcc3e79ec574127fcc9caaf0e7", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0560b8b7cb3f80668d70a89644503868d857205/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0560b8b7cb3f80668d70a89644503868d857205/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c0560b8b7cb3f80668d70a89644503868d857205", "patch": "@@ -1,5 +1,5 @@\n /* Language-independent node constructors for parse phase of GNU compiler.\n-   Copyright (C) 1987, 1988, 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1992, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1742,19 +1742,19 @@ int_size_in_bytes (type)\n   size = TREE_INT_CST_LOW (TYPE_SIZE (type));\n   return (size + BITS_PER_UNIT - 1) / BITS_PER_UNIT;\n }\n-\n-/* Return, as an INTEGER_CST node, the number of elements for\n-   TYPE (which is an ARRAY_TYPE) minus one. \n-   This counts only elements of the top array.  */\n+\f\n+/* Return, as a tree node, the number of elements for TYPE (which is an\n+   ARRAY_TYPE) minus one. This counts only elements of the top array.  */\n \n tree\n array_type_nelts (type)\n      tree type;\n {\n   tree index_type = TYPE_DOMAIN (type);\n-  return (tree_int_cst_equal (TYPE_MIN_VALUE (index_type), integer_zero_node)\n+\n+  return (integer_zerop (TYPE_MIN_VALUE (index_type))\n \t  ? TYPE_MAX_VALUE (index_type)\n-\t  : fold (build (MINUS_EXPR, integer_type_node,\n+\t  : fold (build (MINUS_EXPR, TREE_TYPE (TYPE_MAX_VALUE (index_type)),\n \t\t\t TYPE_MAX_VALUE (index_type),\n \t\t\t TYPE_MIN_VALUE (index_type))));\n }\n@@ -2867,10 +2867,9 @@ build_function_type (value_type, arg_types)\n   register tree t;\n   int hashcode;\n \n-  if (TREE_CODE (value_type) == FUNCTION_TYPE\n-      || TREE_CODE (value_type) == ARRAY_TYPE)\n+  if (TREE_CODE (value_type) == FUNCTION_TYPE)\n     {\n-      error (\"function return type cannot be function or array\");\n+      error (\"function return type cannot be function\");\n       value_type = integer_type_node;\n     }\n \n@@ -3268,7 +3267,7 @@ decl_function_context (decl)\n }\n \n /* Return the innermost context enclosing DECL that is\n-   a RECORD_TYPE or UNION_TYPE, or zero if none.\n+   a RECORD_TYPE, UNION_TYPE or QUAL_UNION_TYPE, or zero if none.\n    TYPE_DECLs and FUNCTION_DECLs are transparent to this function.  */\n \n tree\n@@ -3280,7 +3279,8 @@ decl_type_context (decl)\n   while (context)\n     {\n       if (TREE_CODE (context) == RECORD_TYPE\n-\t  || TREE_CODE (context) == UNION_TYPE)\n+\t  || TREE_CODE (context) == UNION_TYPE\n+\t  || TREE_CODE (context) == QUAL_UNION_TYPE)\n \treturn context;\n       if (TREE_CODE (context) == TYPE_DECL\n \t  || TREE_CODE (context) == FUNCTION_DECL)"}]}