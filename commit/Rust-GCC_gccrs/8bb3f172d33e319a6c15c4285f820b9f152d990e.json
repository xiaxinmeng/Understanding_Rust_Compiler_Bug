{"sha": "8bb3f172d33e319a6c15c4285f820b9f152d990e", "node_id": "C_kwDOANBUbNoAKDhiYjNmMTcyZDMzZTMxOWE2YzE1YzQyODVmODIwYjlmMTUyZDk5MGU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-09T15:35:40Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-09T15:56:21Z"}, "message": "Revert op[12]_range operators for PLUS_EXPR and MINUS_EXPR.\n\nRevert the patch below until issues are resolved:\n\n\tcommit 4287e8168f89e90b3dff3a50f3ada40be53e0e01\n\tAuthor: Aldy Hernandez <aldyh@redhat.com>\n\tDate:   Wed Nov 9 01:00:57 2022 +0100\n\n\t    Implement op[12]_range operators for PLUS_EXPR and MINUS_EXPR.\n\n\t    We can implement the op[12]_range entries for plus and minus in terms\n\t    of each other.  These are adapted from the integer versions.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (class foperator_plus): Remove op[12]_range.\n\t(class foperator_minus): Same.", "tree": {"sha": "99ad3fcdb31e4a53c7d581bbf1f1e0570faec727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99ad3fcdb31e4a53c7d581bbf1f1e0570faec727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bb3f172d33e319a6c15c4285f820b9f152d990e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb3f172d33e319a6c15c4285f820b9f152d990e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb3f172d33e319a6c15c4285f820b9f152d990e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb3f172d33e319a6c15c4285f820b9f152d990e/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace0ae09332bbc6b95e084c2c2b17c466339ff76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace0ae09332bbc6b95e084c2c2b17c466339ff76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace0ae09332bbc6b95e084c2c2b17c466339ff76"}], "stats": {"total": 45, "additions": 0, "deletions": 45}, "files": [{"sha": "380142b4c14678cfb1e544363440c243a3cc8a5a", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb3f172d33e319a6c15c4285f820b9f152d990e/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb3f172d33e319a6c15c4285f820b9f152d990e/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=8bb3f172d33e319a6c15c4285f820b9f152d990e", "patch": "@@ -1863,29 +1863,6 @@ foperator_unordered_equal::op1_range (frange &r, tree type,\n \n class foperator_plus : public range_operator_float\n {\n-  using range_operator_float::op1_range;\n-  using range_operator_float::op2_range;\n-public:\n-  virtual bool op1_range (frange &r, tree type,\n-\t\t\t  const frange &lhs,\n-\t\t\t  const frange &op2,\n-\t\t\t  relation_trio = TRIO_VARYING) const final override\n-  {\n-    if (lhs.undefined_p ())\n-      return false;\n-    range_op_handler minus (MINUS_EXPR, type);\n-    if (!minus)\n-      return false;\n-    return minus.fold_range (r, type, lhs, op2);\n-  }\n-  virtual bool op2_range (frange &r, tree type,\n-\t\t\t  const frange &lhs,\n-\t\t\t  const frange &op1,\n-\t\t\t  relation_trio = TRIO_VARYING) const final override\n-  {\n-    return op1_range (r, type, lhs, op1);\n-  }\n-private:\n   void rv_fold (REAL_VALUE_TYPE &lb, REAL_VALUE_TYPE &ub, bool &maybe_nan,\n \t\ttree type,\n \t\tconst REAL_VALUE_TYPE &lh_lb,\n@@ -1910,28 +1887,6 @@ class foperator_plus : public range_operator_float\n \n class foperator_minus : public range_operator_float\n {\n-  using range_operator_float::op1_range;\n-  using range_operator_float::op2_range;\n-public:\n-  virtual bool op1_range (frange &r, tree type,\n-\t\t\t  const frange &lhs,\n-\t\t\t  const frange &op2,\n-\t\t\t  relation_trio = TRIO_VARYING) const final override\n-  {\n-    if (lhs.undefined_p ())\n-      return false;\n-    return fop_plus.fold_range (r, type, lhs, op2);\n-  }\n-  virtual bool op2_range (frange &r, tree type,\n-\t\t\t  const frange &lhs,\n-\t\t\t  const frange &op1,\n-\t\t\t  relation_trio = TRIO_VARYING) const final override\n-  {\n-    if (lhs.undefined_p ())\n-      return false;\n-    return fold_range (r, type, op1, lhs);\n-  }\n-private:\n   void rv_fold (REAL_VALUE_TYPE &lb, REAL_VALUE_TYPE &ub, bool &maybe_nan,\n \t\ttree type,\n \t\tconst REAL_VALUE_TYPE &lh_lb,"}]}