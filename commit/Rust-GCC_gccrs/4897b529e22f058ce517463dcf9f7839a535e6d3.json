{"sha": "4897b529e22f058ce517463dcf9f7839a535e6d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5N2I1MjllMjJmMDU4Y2U1MTc0NjNkY2Y5Zjc4MzlhNTM1ZTZkMw==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-01-29T08:36:38Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-01-29T08:36:38Z"}, "message": "reorg.c (relax_delay_slots): Take account of NOTE_INSN_SWITCH_TEXT_SECTIONS and targetm.can_follow_jump.\n\n* reorg.c (relax_delay_slots): Take account of NOTE_INSN_SWITCH_TEXT_SECTIONS\n  and targetm.can_follow_jump.\n\nFrom-SVN: r220235", "tree": {"sha": "a7eeeda3c5d513c3a360d3bc0e6986901a4f154b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7eeeda3c5d513c3a360d3bc0e6986901a4f154b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4897b529e22f058ce517463dcf9f7839a535e6d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4897b529e22f058ce517463dcf9f7839a535e6d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4897b529e22f058ce517463dcf9f7839a535e6d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4897b529e22f058ce517463dcf9f7839a535e6d3/comments", "author": null, "committer": null, "parents": [{"sha": "f7f049fa4620ada6457ed6163b1fdf0de37a3258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f049fa4620ada6457ed6163b1fdf0de37a3258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f049fa4620ada6457ed6163b1fdf0de37a3258"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "38cb9e509ae9b970156d5042519fd7b5453f0761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4897b529e22f058ce517463dcf9f7839a535e6d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4897b529e22f058ce517463dcf9f7839a535e6d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4897b529e22f058ce517463dcf9f7839a535e6d3", "patch": "@@ -1,3 +1,11 @@\n+2015-01-29  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/64761\n+\t* reorg.c (switch_text_sections_between_p): New function.\n+\t(relax_delay_slots): Call it when testing if the jump insn\n+\tis removable.  Use targetm.can_follow_jump when testing if\n+\tthe conditional branch can follow an unconditional jump.\n+\n 2015-01-27  Caroline Tice  <cmtice@google.com>\n \n \tCommitting VTV Cywin/Ming patch for Patrick Wollgast"}, {"sha": "2be34572d9988b0b15b575076ed27dabbbf526db", "filename": "gcc/reorg.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4897b529e22f058ce517463dcf9f7839a535e6d3/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4897b529e22f058ce517463dcf9f7839a535e6d3/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=4897b529e22f058ce517463dcf9f7839a535e6d3", "patch": "@@ -3213,6 +3213,19 @@ label_before_next_insn (rtx x, rtx scan_limit)\n   return insn;\n }\n \n+/* Return TRUE if there is a NOTE_INSN_SWITCH_TEXT_SECTIONS note in between\n+   BEG and END.  */\n+\n+static bool\n+switch_text_sections_between_p (const rtx_insn *beg, const rtx_insn *end)\n+{\n+  const rtx_insn *p;\n+  for (p = beg; p != end; p = NEXT_INSN (p))\n+    if (NOTE_P (p) && NOTE_KIND (p) == NOTE_INSN_SWITCH_TEXT_SECTIONS)\n+      return true;\n+  return false;\n+}\n+\n \f\n /* Once we have tried two ways to fill a delay slot, make a pass over the\n    code to try to improve the results and to do such things as more jump\n@@ -3249,7 +3262,8 @@ relax_delay_slots (rtx_insn *first)\n \t    target_label = find_end_label (target_label);\n \n \t  if (target_label && next_active_insn (target_label) == next\n-\t      && ! condjump_in_parallel_p (insn))\n+\t      && ! condjump_in_parallel_p (insn)\n+\t      && ! (next && switch_text_sections_between_p (insn, next)))\n \t    {\n \t      delete_jump (insn);\n \t      continue;\n@@ -3264,12 +3278,13 @@ relax_delay_slots (rtx_insn *first)\n \n \t  /* See if this jump conditionally branches around an unconditional\n \t     jump.  If so, invert this jump and point it to the target of the\n-\t     second jump.  */\n+\t     second jump.  Check if it's possible on the target.  */\n \t  if (next && simplejump_or_return_p (next)\n \t      && any_condjump_p (insn)\n \t      && target_label\n \t      && next_active_insn (target_label) == next_active_insn (next)\n-\t      && no_labels_between_p (insn, next))\n+\t      && no_labels_between_p (insn, next)\n+\t      && targetm.can_follow_jump (insn, next))\n \t    {\n \t      rtx label = JUMP_LABEL (next);\n "}]}