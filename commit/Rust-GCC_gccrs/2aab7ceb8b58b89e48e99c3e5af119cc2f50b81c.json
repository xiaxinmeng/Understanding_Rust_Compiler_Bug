{"sha": "2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhYjdjZWI4YjU4Yjg5ZTQ4ZTk5YzNlNWFmMTE5Y2MyZjUwYjgxYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-06T14:40:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-06T14:40:49Z"}, "message": "tree.h (crc32_string): Declare.\n\n\t* tree.h (crc32_string): Declare.\n\t* tree.c (append_random_chars): Remove.\n\t(crc32_string): New.\n\t(get_file_function_name_long): Use crc32_string here.\n\nFrom-SVN: r69004", "tree": {"sha": "10b98969d0af1c81058c7434f9916ecc1e7ae73d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10b98969d0af1c81058c7434f9916ecc1e7ae73d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c/comments", "author": null, "committer": null, "parents": [{"sha": "46c5ad278b15d1db509093032ea1eed00459b3a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c5ad278b15d1db509093032ea1eed00459b3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c5ad278b15d1db509093032ea1eed00459b3a0"}], "stats": {"total": 81, "additions": 36, "deletions": 45}, "files": [{"sha": "54bc84f00dc9e2a3a2e00c4d910c5f7de8f14f94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c", "patch": "@@ -1,3 +1,10 @@\n+2003-07-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.h (crc32_string): Declare.\n+\t* tree.c (append_random_chars): Remove.\n+\t(crc32_string): New.\n+\t(get_file_function_name_long): Use crc32_string here.\n+\n 2003-07-06  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.c: Convert prototypes to ISO C90."}, {"sha": "a0f5414665d9d25793e92ba61207777cbe3ea43f", "filename": "gcc/tree.c", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c", "patch": "@@ -119,7 +119,6 @@ static GTY ((if_marked (\"type_hash_marked_p\"), param_is (struct type_hash)))\n      htab_t type_hash_table;\n \n static void set_type_quals (tree, int);\n-static void append_random_chars (char *);\n static int type_hash_eq (const void *, const void *);\n static hashval_t type_hash_hash (const void *);\n static void print_type_hash_statistics (void);\n@@ -4497,44 +4496,27 @@ default_flag_random_seed (void)\n   flag_random_seed = new_random_seed;\n }\n \n-/* Appends 6 random characters to TEMPLATE to (hopefully) avoid name\n-   clashes in cases where we can't reliably choose a unique name.\n+/* Generate a crc32 of a string.  */\n \n-   Derived from mkstemp.c in libiberty.  */\n-\n-static void\n-append_random_chars (char *template)\n+unsigned\n+crc32_string (unsigned chksum, const char *string)\n {\n-  static const char letters[]\n-    = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n-  unsigned HOST_WIDE_INT v;\n-  size_t i;\n-\n-  default_flag_random_seed ();\n-\n-  /* This isn't a very good hash, but it does guarantee no collisions\n-     when the random string is generated by the code above and the time\n-     delta is small.  */\n-  v = 0;\n-  for (i = 0; i < strlen (flag_random_seed); i++)\n-    v = (v << 4) ^ (v >> (HOST_BITS_PER_WIDE_INT - 4)) ^ flag_random_seed[i];\n-\n-  template += strlen (template);\n-\n-  /* Fill in the random bits.  */\n-  template[0] = letters[v % 62];\n-  v /= 62;\n-  template[1] = letters[v % 62];\n-  v /= 62;\n-  template[2] = letters[v % 62];\n-  v /= 62;\n-  template[3] = letters[v % 62];\n-  v /= 62;\n-  template[4] = letters[v % 62];\n-  v /= 62;\n-  template[5] = letters[v % 62];\n-\n-  template[6] = '\\0';\n+  do\n+    {\n+      unsigned value = *string << 24;\n+      unsigned ix;\n+      \n+      for (ix = 8; ix--; value <<= 1)\n+  \t{\n+  \t  unsigned feedback;\n+  \t  \n+  \t  feedback = (value ^ chksum) & 0x80000000 ? 0x04c11db7 : 0;\n+ \t  chksum <<= 1;\n+ \t  chksum ^= feedback;\n+  \t}\n+    }\n+  while (*string++);\n+  return chksum;\n }\n \n /* P is a string that will be used in a symbol.  Mask out any characters\n@@ -4572,7 +4554,7 @@ get_file_function_name_long (const char *type)\n     {\n       /* We don't have anything that we know to be unique to this translation\n \t unit, so use what we do have and throw in some randomness.  */\n-\n+      unsigned len;\n       const char *name = weak_global_object_name;\n       const char *file = main_input_filename;\n \n@@ -4581,10 +4563,15 @@ get_file_function_name_long (const char *type)\n       if (! file)\n \tfile = input_filename;\n \n-      q = (char *) alloca (7 + strlen (name) + strlen (file));\n+      len = strlen (file);\n+      q = (char *) alloca (9 * 2 + len);\n+      memcpy (q, file, len + 1);\n+      clean_symbol_name (q);\n+\n+      default_flag_random_seed ();\n+      sprintf (q + len, \"_%08X_%08X\", crc32_string (0, name),\n+\t       crc32_string (0, flag_random_seed));\n \n-      sprintf (q, \"%s%s\", name, file);\n-      append_random_chars (q);\n       p = q;\n     }\n \n@@ -4597,10 +4584,6 @@ get_file_function_name_long (const char *type)\n      constraints).  */\n   sprintf (buf, FILE_FUNCTION_FORMAT, type, p);\n \n-  /* Don't need to pull weird characters out of global names.  */\n-  if (p != first_global_object_name)\n-    clean_symbol_name (buf + 11);\n-\n   return get_identifier (buf);\n }\n "}, {"sha": "9be653250a9a95ddf0216a48a09a5539a73512c0", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2aab7ceb8b58b89e48e99c3e5af119cc2f50b81c", "patch": "@@ -2640,6 +2640,7 @@ extern tree builtin_function (const char *, tree, int, enum built_in_class,\n \t\t\t      const char *, tree);\n \f\n /* In tree.c */\n+extern unsigned crc32_string (unsigned, const char *);\n extern void clean_symbol_name (char *);\n extern tree get_file_function_name_long (const char *);\n extern tree get_set_constructor_bits (tree, char *, int);"}]}