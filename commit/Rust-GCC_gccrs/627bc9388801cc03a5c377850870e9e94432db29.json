{"sha": "627bc9388801cc03a5c377850870e9e94432db29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3YmM5Mzg4ODAxY2MwM2E1YzM3Nzg1MDg3MGU5ZTk0NDMyZGIyOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-07-06T19:22:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-07-06T19:22:49Z"}, "message": "re PR c++/44778 (? Behaviour change with pointers to members)\n\n\tPR c++/44778\n\t* init.c (build_offset_ref): If scope isn't dependent,\n\tdon't exit early.  Look at TYPE_MAIN_VARIANT.\n\t* pt.c (tsubst_copy) [OFFSET_REF]: Do substitution.\n\nFrom-SVN: r161879", "tree": {"sha": "e5b2652330ddd7ab680fd4368adab30bba7a3b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b2652330ddd7ab680fd4368adab30bba7a3b18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/627bc9388801cc03a5c377850870e9e94432db29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627bc9388801cc03a5c377850870e9e94432db29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627bc9388801cc03a5c377850870e9e94432db29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627bc9388801cc03a5c377850870e9e94432db29/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89a40f593e2ec518ee7872bb4529529342eb2d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a40f593e2ec518ee7872bb4529529342eb2d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a40f593e2ec518ee7872bb4529529342eb2d3f"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "499bd0d6b0865f2c348e7e81d59fa4ed5dd2bd11", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=627bc9388801cc03a5c377850870e9e94432db29", "patch": "@@ -1,5 +1,10 @@\n 2010-07-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/44778\n+\t* init.c (build_offset_ref): If scope isn't dependent,\n+\tdon't exit early.  Look at TYPE_MAIN_VARIANT.\n+\t* pt.c (tsubst_copy) [OFFSET_REF]: Do substitution.\n+\n \t* error.c (dump_function_decl): Don't crash on null DECL_NAME.\n \n 2010-07-06  Shujing Zhao  <pearly.zhao@oracle.com>"}, {"sha": "20f921db7a78c4efb936431571c5e5c3e493794f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=627bc9388801cc03a5c377850870e9e94432db29", "patch": "@@ -1507,18 +1507,9 @@ build_offset_ref (tree type, tree member, bool address_p)\n   if (TREE_CODE (member) == TEMPLATE_DECL)\n     return member;\n \n-  if (dependent_type_p (type) || type_dependent_expression_p (member))\n-    {\n-      tree ref, mem_type = NULL_TREE;\n-      if (!dependent_scope_p (type))\n-\tmem_type = TREE_TYPE (member);\n-      ref = build_qualified_name (mem_type, type, member,\n+  if (dependent_scope_p (type) || type_dependent_expression_p (member))\n+    return build_qualified_name (NULL_TREE, type, member,\n \t\t\t\t  /*template_p=*/false);\n-      /* Undo convert_from_reference.  */\n-      if (TREE_CODE (ref) == INDIRECT_REF)\n-\tref = TREE_OPERAND (ref, 0);\n-      return ref;\n-    }\n \n   gcc_assert (TYPE_P (type));\n   if (! is_class_type (type, 1))\n@@ -1528,6 +1519,7 @@ build_offset_ref (tree type, tree member, bool address_p)\n   /* Callers should call mark_used before this point.  */\n   gcc_assert (!DECL_P (member) || TREE_USED (member));\n \n+  type = TYPE_MAIN_VARIANT (type);\n   if (!COMPLETE_OR_OPEN_TYPE_P (complete_type (type)))\n     {\n       error (\"incomplete type %qT does not have member %qD\", type, member);"}, {"sha": "80cf7d2e4a6769637b8f29c786c2138707f7f38d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=627bc9388801cc03a5c377850870e9e94432db29", "patch": "@@ -11309,8 +11309,13 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       gcc_unreachable ();\n \n     case OFFSET_REF:\n-      mark_used (TREE_OPERAND (t, 1));\n-      return t;\n+      r = build2\n+\t(code, tsubst (TREE_TYPE (t), args, complain, in_decl),\n+\t tsubst_copy (TREE_OPERAND (t, 0), args, complain, in_decl),\n+\t tsubst_copy (TREE_OPERAND (t, 1), args, complain, in_decl));\n+      PTRMEM_OK_P (r) = PTRMEM_OK_P (t);\n+      mark_used (TREE_OPERAND (r, 1));\n+      return r;\n \n     case EXPR_PACK_EXPANSION:\n       error (\"invalid use of pack expansion expression\");"}, {"sha": "b840179f268039da9b2806df63cc0690e52f000a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=627bc9388801cc03a5c377850870e9e94432db29", "patch": "@@ -1,3 +1,8 @@\n+2010-07-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44778\n+\t* g++.dg/template/ptrmem22.C: New.\n+\n 2010-07-06  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* gcc.target/i386/ms_hook_prologue.c: Add x64 ms_hook_prologue"}, {"sha": "5c5ee3fc30e13772a4c351e4adb1eb7d3394501c", "filename": "gcc/testsuite/g++.dg/template/ptrmem17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem17.C?ref=627bc9388801cc03a5c377850870e9e94432db29", "patch": "@@ -7,4 +7,4 @@ template<int> struct A\n   ~A() { &A::i; } // { dg-error \"reference\" }\n };\n \n-A<0> a; // { dg-message \"instantiated\" }\n+A<0> a;"}, {"sha": "762f377f5b79186dddd2b4af4427683d74e74c19", "filename": "gcc/testsuite/g++.dg/template/ptrmem22.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627bc9388801cc03a5c377850870e9e94432db29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem22.C?ref=627bc9388801cc03a5c377850870e9e94432db29", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/44778\n+\n+enum Healpix_Ordering_Scheme { RING, NEST };\n+\n+class Healpix_Base\n+  {\n+  protected:\n+    Healpix_Ordering_Scheme scheme_;\n+    int nest2ring (int pix) const;\n+    int ring2nest (int pix) const;\n+\n+    typedef int (Healpix_Base::*swapfunc)(int pix) const;\n+  };\n+\n+template<typename T> class Healpix_Map: public Healpix_Base\n+  {\n+  public:\n+    void Import_nograde (const Healpix_Map<T> &orig)\n+      {\n+        swapfunc swapper = (scheme_ == NEST) ?\n+          &Healpix_Map::ring2nest : &Healpix_Map::nest2ring;\n+      }\n+  };\n+\n+int main()\n+  {\n+  Healpix_Map<double> a,b;\n+  a.Import_nograde(b);\n+  }"}]}