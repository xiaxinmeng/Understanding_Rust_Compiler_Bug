{"sha": "9f8139900d3b6be84b303ad505cf5899e95d8ea2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4MTM5OTAwZDNiNmJlODRiMzAzYWQ1MDVjZjU4OTllOTVkOGVhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-08-02T20:26:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-08-02T20:26:57Z"}, "message": "re PR bootstrap/49914 (call to abs(long long) in gcc/fold-const.c)\n\n2011-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR bootstrap/49914\n\t* fold-const.c (fold_plusminus_mult_expr): Use abs_hwi instead\n\tof abs.\n\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Likewise.\n\t* tree-ssa-loop-prefetch.c (prune_ref_by_group_reuse): Likewise.\n\nFrom-SVN: r177212", "tree": {"sha": "e10fd0869574a56b51a64d75685d2375a74ead7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e10fd0869574a56b51a64d75685d2375a74ead7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f8139900d3b6be84b303ad505cf5899e95d8ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8139900d3b6be84b303ad505cf5899e95d8ea2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8139900d3b6be84b303ad505cf5899e95d8ea2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8139900d3b6be84b303ad505cf5899e95d8ea2/comments", "author": null, "committer": null, "parents": [{"sha": "f315a6b438a961737d5a0def08b4957866b348c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f315a6b438a961737d5a0def08b4957866b348c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f315a6b438a961737d5a0def08b4957866b348c7"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "a843f8dd69ef2687178acd2a2b864d3e4033f7bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f8139900d3b6be84b303ad505cf5899e95d8ea2", "patch": "@@ -1,3 +1,11 @@\n+2011-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR bootstrap/49914\n+\t* fold-const.c (fold_plusminus_mult_expr): Use abs_hwi instead\n+\tof abs.\n+\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Likewise.\n+\t* tree-ssa-loop-prefetch.c (prune_ref_by_group_reuse): Likewise.\n+\n 2011-08-02  Richard Henderson  <rth@redhat.com>\n \n \t* config/h8300/h8300.c (push, pop): Return the insn."}, {"sha": "8ad806f9eee82fb45f7f24dff79868faeffd2338", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9f8139900d3b6be84b303ad505cf5899e95d8ea2", "patch": "@@ -7037,8 +7037,7 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n       int11 = TREE_INT_CST_LOW (arg11);\n \n       /* Move min of absolute values to int11.  */\n-      if ((int01 >= 0 ? int01 : -int01)\n-\t  < (int11 >= 0 ? int11 : -int11))\n+      if (abs_hwi (int01) < abs_hwi (int11))\n         {\n \t  tmp = int01, int01 = int11, int11 = tmp;\n \t  alt0 = arg00, arg00 = arg10, arg10 = alt0;\n@@ -7048,7 +7047,7 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n       else\n \tmaybe_same = arg11;\n \n-      if (exact_log2 (abs (int11)) > 0 && int01 % int11 == 0\n+      if (exact_log2 (abs_hwi (int11)) > 0 && int01 % int11 == 0\n \t  /* The remainder should not be a constant, otherwise we\n \t     end up folding i * 4 + 2 to (i * 2 + 1) * 2 which has\n \t     increased the number of multiplications necessary.  */"}, {"sha": "82634cce078f36e3b0d77835e0443a07c50e4560", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=9f8139900d3b6be84b303ad505cf5899e95d8ea2", "patch": "@@ -1,5 +1,6 @@\n /* Array prefetching.\n-   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -794,7 +795,7 @@ prune_ref_by_group_reuse (struct mem_ref *ref, struct mem_ref *by,\n       prefetch_before = (hit_from - delta_r + step - 1) / step;\n \n       /* Do not reduce prefetch_before if we meet beyond cache size.  */\n-      if (prefetch_before > (unsigned) abs (L2_CACHE_SIZE_BYTES / step))\n+      if (prefetch_before > (unsigned) abs_hwi (L2_CACHE_SIZE_BYTES / step))\n         prefetch_before = PREFETCH_ALL;\n       if (prefetch_before < ref->prefetch_before)\n \tref->prefetch_before = prefetch_before;"}, {"sha": "63cc175eaddfa0f286c3ecd2aa149d6df713ffd2", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8139900d3b6be84b303ad505cf5899e95d8ea2/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=9f8139900d3b6be84b303ad505cf5899e95d8ea2", "patch": "@@ -1231,9 +1231,10 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       /* Attempt to fold powi(arg0, abs(n/2)) into multiplies.  If not\n          possible or profitable, give up.  Skip the degenerate case when\n          n is 1 or -1, where the result is always 1.  */\n-      if (abs (n) != 1)\n+      if (abs_hwi (n) != 1)\n \t{\n-\t  powi_x_ndiv2 = gimple_expand_builtin_powi (gsi, loc, arg0, abs(n/2));\n+\t  powi_x_ndiv2 = gimple_expand_builtin_powi (gsi, loc, arg0,\n+\t\t\t\t\t\t     abs_hwi (n / 2));\n \t  if (!powi_x_ndiv2)\n \t    return NULL_TREE;\n \t}\n@@ -1242,7 +1243,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n \t result of the optimal multiply sequence just calculated.  */\n       sqrt_arg0 = build_and_insert_call (gsi, loc, &target, sqrtfn, arg0);\n \n-      if (abs (n) == 1)\n+      if (abs_hwi (n) == 1)\n \tresult = sqrt_arg0;\n       else\n \tresult = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n@@ -1284,10 +1285,10 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       /* Attempt to fold powi(arg0, abs(n/3)) into multiplies.  If not\n          possible or profitable, give up.  Skip the degenerate case when\n          abs(n) < 3, where the result is always 1.  */\n-      if (abs (n) >= 3)\n+      if (abs_hwi (n) >= 3)\n \t{\n \t  powi_x_ndiv3 = gimple_expand_builtin_powi (gsi, loc, arg0,\n-\t\t\t\t\t\t     abs (n / 3));\n+\t\t\t\t\t\t     abs_hwi (n / 3));\n \t  if (!powi_x_ndiv3)\n \t    return NULL_TREE;\n \t}\n@@ -1297,14 +1298,14 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n          either cbrt(x) or cbrt(x) * cbrt(x).  */\n       cbrt_x = build_and_insert_call (gsi, loc, &target, cbrtfn, arg0);\n \n-      if (abs (n) % 3 == 1)\n+      if (abs_hwi (n) % 3 == 1)\n \tpowi_cbrt_x = cbrt_x;\n       else\n \tpowi_cbrt_x = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n \t\t\t\t\t      cbrt_x, cbrt_x);\n \n       /* Multiply the two subexpressions, unless powi(x,abs(n)/3) = 1.  */\n-      if (abs (n) < 3)\n+      if (abs_hwi (n) < 3)\n \tresult = powi_cbrt_x;\n       else\n \tresult = build_and_insert_binop (gsi, loc, target, MULT_EXPR,"}]}