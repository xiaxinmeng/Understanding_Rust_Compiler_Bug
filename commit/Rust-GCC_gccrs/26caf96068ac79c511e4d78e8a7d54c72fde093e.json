{"sha": "26caf96068ac79c511e4d78e8a7d54c72fde093e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZjYWY5NjA2OGFjNzljNTExZTRkNzhlOGE3ZDU0YzcyZmRlMDkzZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-01T23:34:24Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-01T23:34:24Z"}, "message": "* global.c (calculate_reg_pav): Use VEC instead of VARRAY.\n\nFrom-SVN: r99085", "tree": {"sha": "f70c8b4042f902d9f2712e78489f350a1754474d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70c8b4042f902d9f2712e78489f350a1754474d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26caf96068ac79c511e4d78e8a7d54c72fde093e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26caf96068ac79c511e4d78e8a7d54c72fde093e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26caf96068ac79c511e4d78e8a7d54c72fde093e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26caf96068ac79c511e4d78e8a7d54c72fde093e/comments", "author": null, "committer": null, "parents": [{"sha": "ec23484219d001293b71a7b7940a0f0840b71037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23484219d001293b71a7b7940a0f0840b71037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23484219d001293b71a7b7940a0f0840b71037"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "3461dbbee83c98a73c979555deba8fd7971f0fee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26caf96068ac79c511e4d78e8a7d54c72fde093e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26caf96068ac79c511e4d78e8a7d54c72fde093e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26caf96068ac79c511e4d78e8a7d54c72fde093e", "patch": "@@ -3,6 +3,8 @@\n \t* gimplify.c (gimplify_compound_lval): Use VEC instead of\n \tVARRAY.\n \n+\t* global.c (calculate_reg_pav): Use VEC instead of VARRAY.\n+\n 2005-05-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR C++/14391"}, {"sha": "b11e6d7f6c70870b2b5de5b98b9693b202511258", "filename": "gcc/global.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26caf96068ac79c511e4d78e8a7d54c72fde093e/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26caf96068ac79c511e4d78e8a7d54c72fde093e/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=26caf96068ac79c511e4d78e8a7d54c72fde093e", "patch": "@@ -2292,6 +2292,9 @@ rpost_cmp (const void *bb1, const void *bb2)\n /* Temporary bitmap used for live_pavin, live_pavout calculation.  */\n static bitmap temp_bitmap;\n \n+DEF_VEC_P(basic_block);\n+DEF_VEC_ALLOC_P(basic_block,heap);\n+\n /* The function calculates partial register availability according to\n    the following equations:\n \n@@ -2307,22 +2310,22 @@ calculate_reg_pav (void)\n   basic_block bb, succ;\n   edge e;\n   int i, nel;\n-  varray_type bbs, new_bbs, temp;\n+  VEC(basic_block,heap) *bbs, *new_bbs, *temp;\n   basic_block *bb_array;\n   sbitmap wset;\n \n-  VARRAY_BB_INIT (bbs, n_basic_blocks, \"basic blocks\");\n-  VARRAY_BB_INIT (new_bbs, n_basic_blocks, \"basic blocks for the next iter.\");\n+  bbs = VEC_alloc (basic_block, heap, n_basic_blocks);\n+  new_bbs = VEC_alloc (basic_block, heap, n_basic_blocks);\n   temp_bitmap = BITMAP_ALLOC (NULL);\n   FOR_EACH_BB (bb)\n     {\n-      VARRAY_PUSH_BB (bbs, bb);\n+      VEC_quick_push (basic_block, bbs, bb);\n     }\n   wset = sbitmap_alloc (n_basic_blocks + 1);\n-  while (VARRAY_ACTIVE_SIZE (bbs))\n+  while (VEC_length (basic_block, bbs))\n     {\n-      bb_array = &VARRAY_BB (bbs, 0);\n-      nel = VARRAY_ACTIVE_SIZE (bbs);\n+      bb_array = VEC_address (basic_block, bbs);\n+      nel = VEC_length (basic_block, bbs);\n       qsort (bb_array, nel, sizeof (basic_block), rpost_cmp);\n       sbitmap_zero (wset);\n       for (i = 0; i < nel; i++)\n@@ -2356,18 +2359,20 @@ calculate_reg_pav (void)\n \t\t      && !TEST_BIT (wset, succ->index))\n \t\t    {\n \t\t      SET_BIT (wset, succ->index);\n-\t\t      VARRAY_PUSH_BB (new_bbs, succ);\n+\t\t      VEC_quick_push (basic_block, new_bbs, succ);\n \t\t    }\n \t\t}\n \t    }\n \t}\n       temp = bbs;\n       bbs = new_bbs;\n       new_bbs = temp;\n-      VARRAY_POP_ALL (new_bbs);\n+      VEC_truncate (basic_block, new_bbs, 0);\n     }\n   sbitmap_free (wset);\n   BITMAP_FREE (temp_bitmap);\n+  VEC_free (basic_block, heap, new_bbs);\n+  VEC_free (basic_block, heap, bbs);\n }\n \n /* The function modifies partial availability information for two"}]}