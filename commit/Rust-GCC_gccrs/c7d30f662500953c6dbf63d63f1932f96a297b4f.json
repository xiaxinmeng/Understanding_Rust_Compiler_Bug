{"sha": "c7d30f662500953c6dbf63d63f1932f96a297b4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkMzBmNjYyNTAwOTUzYzZkYmY2M2Q2M2YxOTMyZjk2YTI5N2I0Zg==", "commit": {"author": {"name": "Dennis Glatting", "email": "dglattin@gnu.org", "date": "1992-08-31T21:15:02Z"}, "committer": {"name": "Dennis Glatting", "email": "dglattin@gnu.org", "date": "1992-08-31T21:15:02Z"}, "message": "minor documentation changes.\n\nFrom-SVN: r2008", "tree": {"sha": "2567b7aef7fdca25b8509ec06eddabca112d3426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2567b7aef7fdca25b8509ec06eddabca112d3426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d30f662500953c6dbf63d63f1932f96a297b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d30f662500953c6dbf63d63f1932f96a297b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d30f662500953c6dbf63d63f1932f96a297b4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d30f662500953c6dbf63d63f1932f96a297b4f/comments", "author": null, "committer": null, "parents": [{"sha": "893cc9583065edc1366e16fbeadd68a11e492a04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893cc9583065edc1366e16fbeadd68a11e492a04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893cc9583065edc1366e16fbeadd68a11e492a04"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "42f14342feb1e7e343e505c3af240e8df5d7b152", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d30f662500953c6dbf63d63f1932f96a297b4f/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d30f662500953c6dbf63d63f1932f96a297b4f/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=c7d30f662500953c6dbf63d63f1932f96a297b4f", "patch": "@@ -25,10 +25,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    the executable file might be covered by the GNU General Public License.  */\n \n /* \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/dispatch.common/RCS/hash.h,v 0.9 1992/04/13 11:43:08 dennisg Exp dennisg $\n-  $Author: dennisg $\n-  $Date: 1992/04/13 11:43:08 $\n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/dispatch/RCS/hash.h,v 0.10 1992/08/18 04:46:58 dglattin Exp $\n+  $Author: dglattin $\n+  $Date: 1992/08/18 04:46:58 $\n   $Log: hash.h,v $\n+ * Revision 0.10  1992/08/18  04:46:58  dglattin\n+ * Saving a working version before release.\n+ *\n  * Revision 0.9  1992/04/13  11:43:08  dennisg\n  * Check in after array version of run-time works.\n  * Expect more changes as hash version and other changes are made.\n@@ -148,24 +151,24 @@ typedef struct cache {\n                                                     a power of two. */\n               entriesInHash,                      /* Current number of entries\n                                                     in the hash table. */\n-                                                        mask;                                                                                                                           /* Precomputed mask. */\n+              mask;                               /* Precomputed mask. */\n   /*\n    * Variables used to implement indexing\n    *  through the hash table.\n    */\n   u_int       lastBucket;                         /* Tracks which entry in the\n                                                     array where the last value\n                                                     was returned. */\n-                                                                                                                                                                                                        /* Function used to compute\n-                                                                                                                                                                                                                a hash code given a key. \n-                                                                                                                                                                                                                This function is specified \n-                                                                                                                                                                                                                when the hash table is \n-                                                                                                                                                                                                                created. */\n-        HashFunc                hashFunc;\n-                                                                                                                                                                                                        /* Function used to compare \n-                                                                                                                                                                                                                two hash keys to determine\n-                                                                                                                                                                                                                if they are equal. */\n-        CompareFunc     compareFunc;\n+                                                  /* Function used to compute\n+\t\t\t\t\t\t     a hash code given a key. \n+\t\t\t\t\t\t     This function is \n+\t\t\t\t\t\t     specified when the hash \n+\t\t\t\t\t\t     table is created. */\n+  HashFunc    hashFunc;\n+                                                  /* Function used to compare \n+\t\t\t\t\t\t     two hash keys to determine\n+\t\t\t\t\t\t     if they are equal. */\n+  CompareFunc compareFunc;\n } Cache, *Cache_t;\n \n \n@@ -211,9 +214,9 @@ hash_remove (Cache_t theCache, void* aKey);\n CacheNode_t \n hash_next (Cache_t theCache, CacheNode_t aCacheNode);\n \n-                                                                                                                                                                                                /* Used to return a value from \n-                                                                                                                                                                                                        a hash table using a given \n-                                                                                                                                                                                                        key.  */\n+                                               /* Used to return a value from \n+\t\t\t\t\t\t  a hash table using a given \n+\t\t\t\t\t\t  key.  */\n void* \n hash_value_for_key (Cache_t theCache, void* aKey);\n \n@@ -227,37 +230,38 @@ hash_value_for_key (Cache_t theCache, void* aKey);\n ************************************************/\n \n                                                 /* Calculate a hash code by \n-                                                                                                                                                                                                        performing some manipulation \n-                                                                                                                                                                                                        of the key pointer. */\n+\t\t\t\t\t\t   performing some \n+\t\t\t\t\t\t   manipulation of the key \n+\t\t\t\t\t\t   pointer. */\n static inline u_int \n intHash(Cache_t theCache, void* aKey) {\n \n \n   assert(sizeof (u_int) == sizeof (aKey));\n \n-        return ((u_int)aKey >> (sizeof(void*) - 1)) & theCache->mask ;\n+  return ((u_int)aKey >> (sizeof(void*) - 1)) & theCache->mask ;\n }\n \n                                                 /* Calculate a hash code by \n-                                                                                                                                                                                                        iterating over a NULL \n-                                                                                                                                                                                                        terminate string. */\n+\t\t\t\t\t\t   iterating over a NULL \n+\t\t\t\t\t\t   terminate string. */\n static inline u_int \n strHash(Cache_t theCache, void* aKey) {\n \n-        u_int   ret = 0;\n-        u_int   ctr = 0;\n+  u_int   ret = 0;\n+  u_int   ctr = 0;\n         \n         \n-        while(*(char*)aKey) {\n-                ret ^= *(char*)aKey++ << ctr;\n-                ctr = (ctr + 1) % sizeof(void*);\n-        }\n+  while(*(char*)aKey) {\n+    ret ^= *(char*)aKey++ << ctr;\n+    ctr = (ctr + 1) % sizeof(void*);\n+  }\n \n-        return ret & theCache->mask ;\n+  return ret & theCache->mask ;\n }\n \n \n-                                                                                                                                                                                                /* Compare two integers. */\n+/* Compare two integers. */\n static inline int \n intCmp(void* k1, void* k2) {\n \n@@ -266,12 +270,12 @@ intCmp(void* k1, void* k2) {\n }\n \n \n-                                                                                                                                                                                                /* Compare two strings. */\n+/* Compare two strings. */\n static inline int \n strCmp(void* k1, void* k2) {\n \n \n-        return !strcmp( k1, k2 );\n+  return !strcmp( k1, k2 );\n }\n \n "}]}