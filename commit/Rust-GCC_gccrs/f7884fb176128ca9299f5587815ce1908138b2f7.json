{"sha": "f7884fb176128ca9299f5587815ce1908138b2f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4ODRmYjE3NjEyOGNhOTI5OWY1NTg3ODE1Y2UxOTA4MTM4YjJmNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-02T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-02T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "fe588872407161c90ca6402131ddd26093708f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe588872407161c90ca6402131ddd26093708f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7884fb176128ca9299f5587815ce1908138b2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7884fb176128ca9299f5587815ce1908138b2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7884fb176128ca9299f5587815ce1908138b2f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7884fb176128ca9299f5587815ce1908138b2f7/comments", "author": null, "committer": null, "parents": [{"sha": "850e5878f8f57244571858f604f28da646be498d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850e5878f8f57244571858f604f28da646be498d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850e5878f8f57244571858f604f28da646be498d"}], "stats": {"total": 263, "additions": 262, "deletions": 1}, "files": [{"sha": "98453b0768747eb95ab228f28a19b88aaf9b8349", "filename": "gcc/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1,3 +1,96 @@\n+2021-02-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (rshrn, rshrn2):\n+\tDefine builtins.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rshrn<mode>_insn_le):\n+\tDefine.\n+\t(aarch64_rshrn<mode>_insn_be): Likewise.\n+\t(aarch64_rshrn<mode>): Likewise.\n+\t(aarch64_rshrn2<mode>_insn_le): Likewise.\n+\t(aarch64_rshrn2<mode>_insn_be): Likewise.\n+\t(aarch64_rshrn2<mode>): Likewise.\n+\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_RSHRN.\n+\t* config/aarch64/arm_neon.h (vrshrn_high_n_s16): Reimplement\n+\tusing builtin.\n+\t(vrshrn_high_n_s32): Likewise.\n+\t(vrshrn_high_n_s64): Likewise.\n+\t(vrshrn_high_n_u16): Likewise.\n+\t(vrshrn_high_n_u32): Likewise.\n+\t(vrshrn_high_n_u64): Likewise.\n+\t(vrshrn_n_s16): Likewise.\n+\t(vrshrn_n_s32): Likewise.\n+\t(vrshrn_n_s64): Likewise.\n+\t(vrshrn_n_u16): Likewise.\n+\t(vrshrn_n_u32): Likewise.\n+\t(vrshrn_n_u64): Likewise.\n+\n+2021-02-01  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR tree-optimization/98499\n+\t* ipa-modref.c (analyze_ssa_name_flags): treat RVO\n+\tconservatively and assume all possible side-effects.\n+\n+2021-02-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (vec_unpacks_hi,\n+\tvec_unpacku_hi_): Define builtins.\n+\t* config/aarch64/arm_neon.h (vmovl_high_s8): Reimplement using\n+\tbuiltin.\n+\t(vmovl_high_s16): Likewise.\n+\t(vmovl_high_s32): Likewise.\n+\t(vmovl_high_u8): Likewise.\n+\t(vmovl_high_u16): Likewise.\n+\t(vmovl_high_u32): Likewise.\n+\n+2021-02-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (sabdl, uabdl):\n+\tDefine builtins.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abdl<mode>): New\n+\tpattern.\n+\t* config/aarch64/aarch64.md (unspec): Define UNSPEC_SABDL,\n+\tUNSPEC_UABDL.\n+\t* config/aarch64/arm_neon.h (vabdl_s8): Reimplemet using\n+\tbuiltin.\n+\t(vabdl_s16): Likewise.\n+\t(vabdl_s32): Likewise.\n+\t(vabdl_u8): Likewise.\n+\t(vabdl_u16): Likewise.\n+\t(vabdl_u32): Likewise.\n+\t* config/aarch64/iterators.md (ABDL): New int iterator.\n+\t(sur): Handle UNSPEC_SABDL, UNSPEC_UABDL.\n+\n+2021-02-01  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree.h (BLOCK_VARS): Add comment.\n+\t(BLOCK_SUBBLOCKS): Same.\n+\t(BLOCK_SUPERCONTEXT): Same.\n+\t(BLOCK_ABSTRACT_ORIGIN): Same.\n+\t(inlined_function_outer_scope_p): Same.\n+\n+2021-02-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97172\n+\t* attribs.c (attr_access::free_lang_data): Define new function.\n+\t* attribs.h (attr_access::free_lang_data): Declare new function.\n+\n+2021-02-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* vec.h (auto_vec::auto_vec): Add memory stat parameters\n+\tand pass them on.\n+\t* bitmap.h (auto_bitmap::auto_bitmap): Likewise.\n+\n+2021-02-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlal_n<mode>,\n+\taarch64_<su>mlsl<mode>, aarch64_<su>mlsl_n<mode>): Flip mult operands.\n+\n+2021-02-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/98863\n+\t* config/i386/i386-features.c (convert_scalars_to_vector):\n+\tSet DF_RD_PRUNE_DEAD_DEFS.\n+\n 2021-01-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* system.h (SIZE_MAX): Define if not already defined."}, {"sha": "43c7f94fa42822cd88e03724c07aead23b7aee61", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1 +1 @@\n-20210201\n+20210202"}, {"sha": "197df6063f64f554f3b180e240b8ec7da69a7c46", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1,3 +1,12 @@\n+2021-02-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98918\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_initial_value):\n+\tFold the initial value of *UNKNOWN_PTR to an UNKNOWN value.\n+\t(region_model_manager::get_field_region): Fold the value\n+\tof UNKNOWN_PTR->FIELD to *UNKNOWN_PTR_OF_&FIELD_TYPE.\n+\n 2021-01-29  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.cc (event_kind_to_string): Handle"}, {"sha": "9afa103384fe516e68fa4e968ab8fd0a1d123c6e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1,3 +1,9 @@\n+2021-02-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97172\n+\t* c-decl.c (free_attr_access_data): New function.\n+\t(c_parse_final_cleanups): Call free_attr_access_data.\n+\n 2021-01-16  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_clause_detach): New."}, {"sha": "bac41f11591ef93be605e4043122b50cc391efff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1,3 +1,34 @@\n+2021-02-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98295\n+\t* constexpr.c (cxx_eval_array_reference): Also set\n+\tnew_ctx.object when setting new_ctx.ctor.\n+\n+2021-02-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98355\n+\t* parser.c (cp_parser_has_attribute_expression): Use\n+\tuses_template_parms instead of type_dependent_expression_p.\n+\n+2021-02-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98570\n+\t* cp-tree.h: Declare it.\n+\t* pt.c (comparing_dependent_aliases): New flag.\n+\t(template_args_equal, spec_hasher::equal): Set it.\n+\t(dependent_alias_template_spec_p): Assert that we don't\n+\tget non-types other than error_mark_node.\n+\t(instantiate_alias_template): SET_TYPE_STRUCTURAL_EQUALITY\n+\ton complex alias specializations.  Set TYPE_DEPENDENT_P here.\n+\t(tsubst_decl): Not here.\n+\t* module.cc (module_state::read_cluster): Set\n+\tcomparing_dependent_aliases instead of\n+\tcomparing_specializations.\n+\t* tree.c (cp_tree_equal): Remove comparing_specializations\n+\tmodule handling.\n+\t* typeck.c (structural_comptypes): Adjust.\n+\t(comptypes): Remove comparing_specializations handling.\n+\n 2021-01-29  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/98843"}, {"sha": "0614da10449a9c7a716027a703e8e988eb701c71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1,3 +1,103 @@\n+2021-02-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_high-intrinsics.c: Adjust rshrn2\n+\tassembly scan.\n+\n+2021-02-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98918\n+\t* gcc.dg/analyzer/pr98918.c: New test.\n+\n+2021-02-01  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR tree-optimization/98499\n+\t* g++.dg/pr98499.C: new test.\n+\n+2021-02-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vmovl_high_1.c: New test.\n+\n+2021-02-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97172\n+\t* gcc.dg/pr97172.c: New test.\n+\n+2021-02-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/98835\n+\t* g++.dg/Wclass-memaccess-6.C: New test.\n+\n+2021-02-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98295\n+\t* g++.dg/cpp0x/constexpr-98295.C: New test.\n+\n+2021-02-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98355\n+\t* g++.dg/ext/builtin-has-attribute2.C: New test.\n+\n+2021-02-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98570\n+\t* g++.dg/cpp0x/alias-decl-targ1.C: New test.\n+\n+2021-02-01  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high.inc:\n+\tNew test template.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_lane.inc:\n+\tNew test template.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_laneq.inc:\n+\tNew test template.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_n.inc:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high_lane.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high_laneq.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high_n.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_lane.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_laneq.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_n.c:\n+\tNew test.\n+\n+2021-02-01  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high_lane.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high_laneq.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high_n.c:\n+\tNew test.\n+\n+2021-02-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/smlal-smlsl-mull-optimized.c: New test.\n+\n+2021-02-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/84494\n+\t* g++.dg/cpp1y/constexpr-84494.C: New test.\n+\n+2021-02-01  Xing GUO  <higuoxing@gmail.com>\n+\n+\t* gcc.target/riscv/attribute-18.c: Add -mriscv-attribute option.\n+\n+2021-02-01  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pr79251.p8.c: Update store count regex.\n+\t* gcc.target/powerpc/pr79251.p9.c: Likewise.\n+\n 2021-01-31  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* c-c++-common/attr-used-5.c: Skip for Darwin."}, {"sha": "e47255335b2d3af75ff04219a7febe379f9de8b7", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1,3 +1,8 @@\n+2021-02-01  Martin Sebor  <msebor@redhat.com>\n+\n+\t* dyn-string.c (dyn_string_insert_cstr): Use memcpy instead of strncpy\n+\tto avoid -Wstringop-truncation.\n+\n 2021-01-04  Martin Liska  <mliska@suse.cz>\n \n \t* strverscmp.c: Convert to utf8 from iso8859."}, {"sha": "e745b1b643e0e47cca8896f7073cfbc1501012e7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7884fb176128ca9299f5587815ce1908138b2f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7884fb176128ca9299f5587815ce1908138b2f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f7884fb176128ca9299f5587815ce1908138b2f7", "patch": "@@ -1,3 +1,20 @@\n+2021-02-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/70303\n+\t* include/bits/stl_deque.h (std::deque<>::operator-(iterator, iterator)):\n+\tReturn 0 if both iterators are value-initialized.\n+\t* testsuite/23_containers/deque/70303.cc: New test.\n+\t* testsuite/23_containers/vector/70303.cc: New test.\n+\n+2021-02-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2011.xml: Update std::call_once\n+\tstatus.\n+\t* doc/xml/manual/status_cxx2014.xml: Likewise.\n+\t* doc/xml/manual/status_cxx2017.xml: Likewise. Update\n+\tstd::from_chars and std::to_chars status. Fix formatting.\n+\t* doc/html/manual/status.html: Regenerate.\n+\n 2021-01-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/bits/numeric_traits.h: Update copyright"}]}