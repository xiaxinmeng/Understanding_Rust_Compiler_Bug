{"sha": "5ba5e856f327b1d6b69d51a11ef63ce89bfbc868", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhNWU4NTZmMzI3YjFkNmI2OWQ1MWExMWVmNjNjZTg5YmZiYzg2OA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-03-08T12:23:49Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-24T13:37:50Z"}, "message": "arm: Auto-vectorization for MVE: vld2/vst2\n\nThis patch enables MVE vld2/vst2 instructions for auto-vectorization.\nWe move the existing expanders from neon.md and enable them for MVE,\ncalling the respective emitter.\n\n2021-03-12  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/neon.md (vec_load_lanesoi<mode>)\n\t(vec_store_lanesoi<mode>): Move ...\n\t* config/arm/vec-common.md: here.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vld2.c: New test, derived from\n\tslp-perm-2.c", "tree": {"sha": "9fa98c8cac83b4b091bbb81d96491722f367c874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fa98c8cac83b4b091bbb81d96491722f367c874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868/comments", "author": null, "committer": null, "parents": [{"sha": "0f3cd532fa02d1787960bdd380d0a3f78343f024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3cd532fa02d1787960bdd380d0a3f78343f024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3cd532fa02d1787960bdd380d0a3f78343f024"}], "stats": {"total": 137, "additions": 123, "deletions": 14}, "files": [{"sha": "25d42528855228f6ced83f9886c3e9fca9bb5c3c", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=5ba5e856f327b1d6b69d51a11ef63ce89bfbc868", "patch": "@@ -5066,13 +5066,6 @@ if (BYTES_BIG_ENDIAN)\n                     (const_string \"neon_load2_2reg<q>\")))]\n )\n \n-(define_expand \"vec_load_lanesoi<mode>\"\n-  [(set (match_operand:OI 0 \"s_register_operand\")\n-        (unspec:OI [(match_operand:OI 1 \"neon_struct_operand\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n-\t\t   UNSPEC_VLD2))]\n-  \"TARGET_NEON\")\n-\n (define_insn \"neon_vld2<mode>\"\n   [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n         (unspec:OI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n@@ -5200,13 +5193,6 @@ if (BYTES_BIG_ENDIAN)\n                     (const_string \"neon_store2_one_lane<q>\")))]\n )\n \n-(define_expand \"vec_store_lanesoi<mode>\"\n-  [(set (match_operand:OI 0 \"neon_struct_operand\")\n-\t(unspec:OI [(match_operand:OI 1 \"s_register_operand\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n-                   UNSPEC_VST2))]\n-  \"TARGET_NEON\")\n-\n (define_insn \"neon_vst2<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n \t(unspec:OI [(match_operand:OI 1 \"s_register_operand\" \"w\")"}, {"sha": "0b79e687abf6fd3125543cec39f00abc94227396", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=5ba5e856f327b1d6b69d51a11ef63ce89bfbc868", "patch": "@@ -483,6 +483,33 @@\n     }\n   else\n     gcc_unreachable ();\n+  DONE;\n+})\n \n+(define_expand \"vec_load_lanesoi<mode>\"\n+  [(set (match_operand:OI 0 \"s_register_operand\")\n+        (unspec:OI [(match_operand:OI 1 \"neon_struct_operand\")\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_VLD2))]\n+  \"TARGET_NEON || TARGET_HAVE_MVE\"\n+{\n+  if (TARGET_NEON)\n+    emit_insn (gen_neon_vld2<mode> (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_mve_vld2q<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"vec_store_lanesoi<mode>\"\n+  [(set (match_operand:OI 0 \"neon_struct_operand\")\n+\t(unspec:OI [(match_operand:OI 1 \"s_register_operand\")\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                   UNSPEC_VST2))]\n+  \"TARGET_NEON || TARGET_HAVE_MVE\"\n+{\n+  if (TARGET_NEON)\n+    emit_insn (gen_neon_vst2<mode> (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_mve_vst2q<mode> (operands[0], operands[1]));\n   DONE;\n })"}, {"sha": "9c7c3f5a29aadc3fcfe31272247ab920321eb060", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vld2.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vld2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5e856f327b1d6b69d51a11ef63ce89bfbc868/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vld2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vld2.c?ref=5ba5e856f327b1d6b69d51a11ef63ce89bfbc868", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define M00 100\n+#define M10 216\n+#define M01 1322\n+#define M11 13\n+\n+#define N 128\n+\n+\n+/* Integer tests.  */\n+#define FUNC(SIGN, TYPE, BITS)\t\t\t\t\t\t\\\n+  void foo_##SIGN##BITS##x (TYPE##BITS##_t *__restrict__ pInput,\t\\\n+\t\t\t    TYPE##BITS##_t *__restrict__ pOutput)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned int i;\t\t\t\t\t\t\t\\\n+    TYPE##BITS##_t  a, b;\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N / BITS; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ta = *pInput++;\t\t\t\t\t\t\t\\\n+\tb = *pInput++;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t*pOutput++ = M00 * a + M01 * b;\t\t\t\t\t\\\n+\t*pOutput++ = M10 * a + M11 * b;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+FUNC(s, int, 8)\n+FUNC(u, uint, 8)\n+FUNC(s, int, 16)\n+FUNC(u, uint, 16)\n+FUNC(s, int, 32)\n+FUNC(u, uint, 32)\n+\n+/* float test, keep the macro because it's similar to the above, but does not\n+   need the ##BITS##_t.  */\n+#define FUNC_FLOAT(SIGN, TYPE, BITS)\t\t\t\t\t\\\n+  void foo_##SIGN##BITS##x (TYPE *__restrict__ pInput,\t\t\t\\\n+\t\t\t    TYPE *__restrict__ pOutput)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned int i;\t\t\t\t\t\t\t\\\n+    TYPE a, b;\t\t\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N / BITS; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ta = *pInput++;\t\t\t\t\t\t\t\\\n+\tb = *pInput++;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t*pOutput++ = M00 * a + M01 * b;\t\t\t\t\t\\\n+\t*pOutput++ = M10 * a + M11 * b;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+FUNC_FLOAT(f, float, 32)\n+\n+/* __fp16 test, needs explicit casts to avoid conversions to floating-point and\n+   failure to vectorize.  */\n+__fp16 M00_fp16 = 100.0f16;\n+__fp16 M10_fp16 = 216.0f16;\n+__fp16 M01_fp16 = 1322.0f16;\n+__fp16 M11_fp16 = 13.0f16;\n+\n+#define FUNC_FLOAT_FP16(SIGN, TYPE, BITS)\t\t\t\t\\\n+  void foo_##SIGN##BITS##x (TYPE *__restrict__ pInput,\t\t\t\\\n+\t\t\t    TYPE *__restrict__ pOutput)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned int i;\t\t\t\t\t\t\t\\\n+    TYPE a, b;\t\t\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N / BITS; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ta = *pInput++;\t\t\t\t\t\t\t\\\n+\tb = *pInput++;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t*pOutput++ = (__fp16)(M00_fp16 * a) + (__fp16)(M01_fp16 * b);\t\\\n+\t*pOutput++ = (__fp16)(M10_fp16 * a) + (__fp16)(M11_fp16 * b);\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+FUNC_FLOAT_FP16(f, __fp16, 16)\n+\n+/* vld2X.8 is used for signed and unsigned chars: 2 pairs.  */\n+/* vld2X.16 is used for signed and unsigned shorts and __fp16: 3 pairs.  */\n+/* vld2X.32 is used for signed and unsigned ints and float: 3 pairs.  */\n+/* { dg-final { scan-assembler-times {vld2[01].8\\t.q[0-9]+, q[0-9]+., } 4 } } */\n+/* { dg-final { scan-assembler-times {vld2[01].16\\t.q[0-9]+, q[0-9]+., } 6 } } */\n+/* { dg-final { scan-assembler-times {vld2[01].32\\t.q[0-9]+, q[0-9]+., } 6 } } */\n+/* { dg-final { scan-assembler-times {vst2[01].8\\t.q[0-9]+, q[0-9]+., } 4 } } */\n+/* { dg-final { scan-assembler-times {vst2[01].16\\t.q[0-9]+, q[0-9]+., } 6 } } */\n+/* { dg-final { scan-assembler-times {vst2[01].32\\t.q[0-9]+, q[0-9]+., } 6 } } */"}]}