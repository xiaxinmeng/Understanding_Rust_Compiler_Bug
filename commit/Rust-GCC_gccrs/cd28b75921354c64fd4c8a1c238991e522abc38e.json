{"sha": "cd28b75921354c64fd4c8a1c238991e522abc38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QyOGI3NTkyMTM1NGM2NGZkNGM4YTFjMjM4OTkxZTUyMmFiYzM4ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-10T21:47:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-11T18:32:51Z"}, "message": "analyzer: fix ICE with equiv_class constant (PR 93649)\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93649\n\t* constraint-manager.cc (constraint_manager::add_constraint): When\n\tmerging equivalence classes and updating m_constant, also update\n\tm_cst_sid.\n\t(constraint_manager::validate): If m_constant is non-NULL assert\n\tthat m_cst_sid is non-null and is valid.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93649\n\t* gcc.dg/analyzer/torture/pr93649.c: New test.", "tree": {"sha": "42067c26f5d8b61751c50b6b73e10b91fa50deb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42067c26f5d8b61751c50b6b73e10b91fa50deb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd28b75921354c64fd4c8a1c238991e522abc38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd28b75921354c64fd4c8a1c238991e522abc38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd28b75921354c64fd4c8a1c238991e522abc38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd28b75921354c64fd4c8a1c238991e522abc38e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e17c1bdadbbd5606d869b1178ed3e653f931cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e17c1bdadbbd5606d869b1178ed3e653f931cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e17c1bdadbbd5606d869b1178ed3e653f931cda"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "38afa69da648a151b45a3f050e65a97281fb5352", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=cd28b75921354c64fd4c8a1c238991e522abc38e", "patch": "@@ -1,3 +1,12 @@\n+2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93649\n+\t* constraint-manager.cc (constraint_manager::add_constraint): When\n+\tmerging equivalence classes and updating m_constant, also update\n+\tm_cst_sid.\n+\t(constraint_manager::validate): If m_constant is non-NULL assert\n+\tthat m_cst_sid is non-null and is valid.\n+\n 2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93657"}, {"sha": "a62354356816da896382f92fc0cb3d20d8764422", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=cd28b75921354c64fd4c8a1c238991e522abc38e", "patch": "@@ -686,8 +686,8 @@ constraint_manager::add_constraint (equiv_class_id lhs_ec_id,\n \n \tif (rhs_ec_obj.m_constant)\n \t  {\n-\t    //gcc_assert (lhs_ec_obj.m_constant == NULL);\n \t    lhs_ec_obj.m_constant = rhs_ec_obj.m_constant;\n+\t    lhs_ec_obj.m_cst_sid = rhs_ec_obj.m_cst_sid;\n \t  }\n \n \t/* Drop rhs equivalence class, overwriting it with the\n@@ -1516,7 +1516,11 @@ constraint_manager::validate () const\n \t  gcc_assert (sid->as_int () < get_num_svalues ());\n \t}\n       if (ec->m_constant)\n-\tgcc_assert (CONSTANT_CLASS_P (ec->m_constant));\n+\t{\n+\t  gcc_assert (CONSTANT_CLASS_P (ec->m_constant));\n+\t  gcc_assert (!ec->m_cst_sid.null_p ());\n+\t  gcc_assert (ec->m_cst_sid.as_int () < get_num_svalues ());\n+\t}\n #if 0\n       else\n \tgcc_assert (ec->m_vars.length () > 0);"}, {"sha": "2ca519c51c410fd839c38da12025d1a80516d0a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd28b75921354c64fd4c8a1c238991e522abc38e", "patch": "@@ -1,3 +1,8 @@\n+2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93649\n+\t* gcc.dg/analyzer/torture/pr93649.c: New test.\n+\n 2020-02-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/pr70010-2.c: Add -maltivec."}, {"sha": "9d929395bb485f84cca35a6b9c8d1bef79ba4e57", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93649.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93649.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd28b75921354c64fd4c8a1c238991e522abc38e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93649.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93649.c?ref=cd28b75921354c64fd4c8a1c238991e522abc38e", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-additional-options \"-Wno-incompatible-pointer-types -Wno-analyzer-too-complex\" } */\n+/* TODO: ideally we shouldn't have -Wno-analyzer-too-complex above; it\n+   appears to be needed due to the recursion.  */\n+\n+struct tz {\n+  int qc;\n+};\n+\n+struct wp {\n+  struct tz *p2;\n+} *ov;\n+\n+struct dz {\n+  struct wp *r5;\n+};\n+\n+void\n+za (void);\n+\n+void\n+h5 (struct dz *);\n+\n+int\n+e7 (struct wp *f2)\n+{\n+  return f2 == ov;\n+}\n+\n+void\n+wr (struct wp *sw)\n+{\n+  if (sw != 0)\n+    za ();\n+}\n+\n+void\n+m6 (const struct dz *gq)\n+{\n+  wr (gq->r5);\n+\n+  asm (\"\" : \"+m\" (gq));\n+\n+  if (0)\n+    {\n+      asm (\"\" : \"+m\" (gq->r5->p2->qc));\n+      asm (\"\" : \"+m\" (gq->r5->p2->qc));\n+    }\n+\n+  asm (\"\" : \"+m\" (gq->r5->p2->qc));\n+\n+  if (e7 (gq->r5))\n+    za ();\n+}\n+\n+void\n+ts (struct dz *cx)\n+{\n+  struct dz nt;\n+\n+  if (nt.r5)\n+    {\n+      m6 (cx);\n+      h5 (cx);\n+      ts (&cx);\n+    }\n+}"}]}