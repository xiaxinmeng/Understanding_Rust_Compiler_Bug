{"sha": "9069e9484cec2ff981c87c75b226ad738847ca07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2OWU5NDg0Y2VjMmZmOTgxYzg3Yzc1YjIyNmFkNzM4ODQ3Y2EwNw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-02-24T16:54:21Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-02-24T16:54:21Z"}, "message": "RISC-V: Adjust floating point code gen for LTGT compare\n\n - Using gcc.dg/torture/pr91323.c as testcase, so no new testcase\n   introduced.\n\n - We use 3 eq compare for LTGT compare before, in order to prevent exception\n   flags setting when any input is NaN.\n\n - According latest GCC document LTGT and discussion on pr91323\n   LTGT should signals on NaNs, like GE/GT/LE/LT.\n\n - So we expand (LTGT a b) to ((LT a b) | (GT a b)) for fit the document.\n\n - Tested rv64gc/rv32gc bare-metal/linux on qemu and\n   rv64gc on HiFive unleashed board with linux.\n\nChangeLog\n\ngcc/\n\nKito Cheng  <kito.cheng@sifive.com>\n\n\t* config/riscv/riscv.c (riscv_emit_float_compare): Change the code gen\n\tfor LTGT.\n\t(riscv_rtx_costs): Update cost model for LTGT.", "tree": {"sha": "b92c9906f8485db33dbc35636fbc9099e0e4e64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b92c9906f8485db33dbc35636fbc9099e0e4e64c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9069e9484cec2ff981c87c75b226ad738847ca07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9069e9484cec2ff981c87c75b226ad738847ca07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9069e9484cec2ff981c87c75b226ad738847ca07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9069e9484cec2ff981c87c75b226ad738847ca07/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7bfe1aaa39ffe694744bfbf8fa128556a7e766c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7bfe1aaa39ffe694744bfbf8fa128556a7e766c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7bfe1aaa39ffe694744bfbf8fa128556a7e766c"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "49986c0e10d5bb83c6598bb1c386981c587f6eba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069e9484cec2ff981c87c75b226ad738847ca07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069e9484cec2ff981c87c75b226ad738847ca07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9069e9484cec2ff981c87c75b226ad738847ca07", "patch": "@@ -1,3 +1,9 @@\n+2020-02-24  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.c (riscv_emit_float_compare): Change the code gen\n+\tfor LTGT.\n+\t(riscv_rtx_costs): Update cost model for LTGT.\n+\n 2020-02-23  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/93564"}, {"sha": "d45b19d861b23ee8a4119075e9211ccee8dbe9c4", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069e9484cec2ff981c87c75b226ad738847ca07/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069e9484cec2ff981c87c75b226ad738847ca07/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=9069e9484cec2ff981c87c75b226ad738847ca07", "patch": "@@ -1703,12 +1703,17 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n       return false;\n \n     case UNEQ:\n-    case LTGT:\n       /* (FEQ(A, A) & FEQ(B, B)) compared against FEQ(A, B).  */\n       mode = GET_MODE (XEXP (x, 0));\n       *total = tune_info->fp_add[mode == DFmode] + COSTS_N_INSNS (3);\n       return false;\n \n+    case LTGT:\n+      /* (FLT(A, A) || FGT(B, B)).  */\n+      mode = GET_MODE (XEXP (x, 0));\n+      *total = tune_info->fp_add[mode == DFmode] + COSTS_N_INSNS (2);\n+      return false;\n+\n     case UNGE:\n     case UNGT:\n     case UNLE:\n@@ -2239,9 +2244,8 @@ riscv_emit_float_compare (enum rtx_code *code, rtx *op0, rtx *op1)\n       break;\n \n     case UNEQ:\n-    case LTGT:\n       /* ordered(a, b) > (a == b) */\n-      *code = fp_code == LTGT ? GTU : EQ;\n+      *code = EQ;\n       tmp0 = riscv_force_binary (word_mode, EQ, cmp_op0, cmp_op0);\n       tmp1 = riscv_force_binary (word_mode, EQ, cmp_op1, cmp_op1);\n       *op0 = riscv_force_binary (word_mode, AND, tmp0, tmp1);\n@@ -2293,6 +2297,13 @@ riscv_emit_float_compare (enum rtx_code *code, rtx *op0, rtx *op1)\n       *op1 = const0_rtx;\n       break;\n \n+    case LTGT:\n+      /* (a < b) | (a > b) */\n+      *code = IOR;\n+      *op0 = riscv_force_binary (word_mode, LT, cmp_op0, cmp_op1);\n+      *op1 = riscv_force_binary (word_mode, GT, cmp_op0, cmp_op1);\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}]}