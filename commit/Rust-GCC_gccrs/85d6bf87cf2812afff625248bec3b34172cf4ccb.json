{"sha": "85d6bf87cf2812afff625248bec3b34172cf4ccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkNmJmODdjZjI4MTJhZmZmNjI1MjQ4YmVjM2IzNDE3MmNmNGNjYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T14:13:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T14:13:53Z"}, "message": "[multiple changes]\n\n2014-02-06  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Analyze pragma\n\tDebug rewritten node before rewriting it as a null statement in\n\tGNATprove mode.\n\n2014-02-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Min_Max): New procedure.\n\t(Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements): New\n\tprocedure.\n\nFrom-SVN: r207558", "tree": {"sha": "0b66567da08068f6ca2f78f8c9f5b5edba3b7104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b66567da08068f6ca2f78f8c9f5b5edba3b7104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d6bf87cf2812afff625248bec3b34172cf4ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d6bf87cf2812afff625248bec3b34172cf4ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d6bf87cf2812afff625248bec3b34172cf4ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d6bf87cf2812afff625248bec3b34172cf4ccb/comments", "author": null, "committer": null, "parents": [{"sha": "c3b266d690835cacdc42f2278c5b4eabf9fa99d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b266d690835cacdc42f2278c5b4eabf9fa99d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b266d690835cacdc42f2278c5b4eabf9fa99d1"}], "stats": {"total": 119, "additions": 75, "deletions": 44}, "files": [{"sha": "01f2489ba5cbfdc05629324125d21f1b17fd0ab7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d6bf87cf2812afff625248bec3b34172cf4ccb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d6bf87cf2812afff625248bec3b34172cf4ccb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=85d6bf87cf2812afff625248bec3b34172cf4ccb", "patch": "@@ -1,3 +1,15 @@\n+2014-02-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Analyze pragma\n+\tDebug rewritten node before rewriting it as a null statement in\n+\tGNATprove mode.\n+\n+2014-02-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb (Min_Max): New procedure.\n+\t(Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements): New\n+\tprocedure.\n+\n 2014-02-06  Sergey Rybin  <rybin@adacore.com frybin>\n \n \t* gnat_ugn.texi, vms_data.ads: Add documentation of '-t' option for"}, {"sha": "2fb2251a2dba14188311301747ccab45fd736a50", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 50, "deletions": 33, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d6bf87cf2812afff625248bec3b34172cf4ccb/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d6bf87cf2812afff625248bec3b34172cf4ccb/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=85d6bf87cf2812afff625248bec3b34172cf4ccb", "patch": "@@ -396,6 +396,13 @@ package body Sem_Attr is\n       --  Common processing for attributes Definite and Has_Discriminants.\n       --  Checks that prefix is generic indefinite formal type.\n \n+      procedure Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements;\n+      --  Common processing for attributes Max_Alignment_For_Allocation and\n+      --  Max_Size_In_Storage_Elements.\n+\n+      procedure Min_Max;\n+      --  Common processing for attributes Max and Min\n+\n       procedure Standard_Attribute (Val : Int);\n       --  Used to process attributes whose prefix is package Standard which\n       --  yield values of type Universal_Integer. The attribute reference\n@@ -2189,6 +2196,40 @@ package body Sem_Attr is\n          Set_Etype (N, Standard_Boolean);\n       end Legal_Formal_Attribute;\n \n+      ---------------------------------------------------------------\n+      -- Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements --\n+      ---------------------------------------------------------------\n+\n+      procedure Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements is\n+      begin\n+         Check_E0;\n+         Check_Type;\n+         Check_Not_Incomplete_Type;\n+         Set_Etype (N, Universal_Integer);\n+      end Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements;\n+\n+      -------------\n+      -- Min_Max --\n+      -------------\n+\n+      procedure Min_Max is\n+      begin\n+         Check_E2;\n+         Check_Scalar_Type;\n+         Resolve (E1, P_Base_Type);\n+         Resolve (E2, P_Base_Type);\n+         Set_Etype (N, P_Base_Type);\n+\n+         --  Check for comparison on unordered enumeration type\n+\n+         if Bad_Unordered_Enumeration_Reference (N, P_Base_Type) then\n+            Error_Msg_Sloc := Sloc (P_Base_Type);\n+            Error_Msg_NE\n+              (\"comparison on unordered enumeration type& declared#?U?\",\n+               N, P_Base_Type);\n+         end if;\n+      end Min_Max;\n+\n       ------------------------\n       -- Standard_Attribute --\n       ------------------------\n@@ -4107,32 +4148,21 @@ package body Sem_Attr is\n       ---------\n \n       when Attribute_Max =>\n-         Check_E2;\n-         Check_Scalar_Type;\n-         Resolve (E1, P_Base_Type);\n-         Resolve (E2, P_Base_Type);\n-         Set_Etype (N, P_Base_Type);\n+         Min_Max;\n \n-         --  Check for comparison on unordered enumeration type\n+      ----------------------------------\n+      -- Max_Alignment_For_Allocation --\n+      ----------------------------------\n \n-         if Bad_Unordered_Enumeration_Reference (N, P_Base_Type) then\n-            Error_Msg_Sloc := Sloc (P_Base_Type);\n-            Error_Msg_NE\n-              (\"comparison on unordered enumeration type& declared#?U?\",\n-               N, P_Base_Type);\n-         end if;\n+      when Attribute_Max_Size_In_Storage_Elements =>\n+         Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements;\n \n       ----------------------------------\n-      -- Max_Alignment_For_Allocation --\n       -- Max_Size_In_Storage_Elements --\n       ----------------------------------\n \n-      when Attribute_Max_Alignment_For_Allocation |\n-        Attribute_Max_Size_In_Storage_Elements =>\n-         Check_E0;\n-         Check_Type;\n-         Check_Not_Incomplete_Type;\n-         Set_Etype (N, Universal_Integer);\n+      when Attribute_Max_Alignment_For_Allocation =>\n+         Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements;\n \n       -----------------------\n       -- Maximum_Alignment --\n@@ -4177,20 +4207,7 @@ package body Sem_Attr is\n       ---------\n \n       when Attribute_Min =>\n-         Check_E2;\n-         Check_Scalar_Type;\n-         Resolve (E1, P_Base_Type);\n-         Resolve (E2, P_Base_Type);\n-         Set_Etype (N, P_Base_Type);\n-\n-         --  Check for comparison on unordered enumeration type\n-\n-         if Bad_Unordered_Enumeration_Reference (N, P_Base_Type) then\n-            Error_Msg_Sloc := Sloc (P_Base_Type);\n-            Error_Msg_NE\n-              (\"comparison on unordered enumeration type& declared#?U?\",\n-               N, P_Base_Type);\n-         end if;\n+         Min_Max;\n \n       ---------\n       -- Mod --"}, {"sha": "4b304dbbb782ab58a4aa7e08f624393f60f0155e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d6bf87cf2812afff625248bec3b34172cf4ccb/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d6bf87cf2812afff625248bec3b34172cf4ccb/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=85d6bf87cf2812afff625248bec3b34172cf4ccb", "patch": "@@ -12622,21 +12622,23 @@ package body Sem_Prag is\n                Freeze_Before (N, Entity (Name (Call)));\n             end if;\n \n-            --  Ignore pragma Debug in GNATprove mode\n+            Rewrite (N, Make_Implicit_If_Statement (N,\n+              Condition       => Cond,\n+              Then_Statements => New_List (\n+                Make_Block_Statement (Loc,\n+                  Handled_Statement_Sequence =>\n+                    Make_Handled_Sequence_Of_Statements (Loc,\n+                      Statements => New_List (Relocate_Node (Call)))))));\n+            Analyze (N);\n+\n+            --  Ignore pragma Debug in GNATprove mode. Do this rewriting\n+            --  after analysis of the normally rewritten node, to capture all\n+            --  references to entities, which avoids issuing wrong warnings\n+            --  about unused entities.\n \n             if GNATprove_Mode then\n                Rewrite (N, Make_Null_Statement (Loc));\n-            else\n-               Rewrite (N, Make_Implicit_If_Statement (N,\n-                 Condition => Cond,\n-                    Then_Statements => New_List (\n-                      Make_Block_Statement (Loc,\n-                        Handled_Statement_Sequence =>\n-                          Make_Handled_Sequence_Of_Statements (Loc,\n-                            Statements => New_List (Relocate_Node (Call)))))));\n             end if;\n-\n-            Analyze (N);\n          end Debug;\n \n          ------------------"}]}