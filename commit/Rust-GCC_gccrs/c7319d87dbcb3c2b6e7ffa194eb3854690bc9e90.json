{"sha": "c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczMTlkODdkYmNiM2MyYjZlN2ZmYTE5NGViMzg1NDY5MGJjOWU5MA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2000-10-13T15:54:16Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2000-10-13T15:54:16Z"}, "message": "arm.c: Include obstack.h\n\n* arm.c: Include obstack.h\n(minipool_obstack, minipool_startobj): Define.\n(arm_add_gc_roots): Initialize them.\n(create_fix_barrier): Use our new obstack.\n(push_minipool_barrier, push_minipool_fix): Likewise.\n(arm_reorg): Release obstack memory.\n\nFrom-SVN: r36860", "tree": {"sha": "08f1a2be928b0dd472802b5f0a077306e1773ed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f1a2be928b0dd472802b5f0a077306e1773ed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90/comments", "author": null, "committer": null, "parents": [{"sha": "fccf9848508741311fc9d64abc69a799e8162ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccf9848508741311fc9d64abc69a799e8162ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccf9848508741311fc9d64abc69a799e8162ee8"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "fccc2b70346d0cd37eef2917ba6a70ae95164f68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90", "patch": "@@ -1,3 +1,12 @@\n+2000-10-13  Richard Earnshaw <rearnsha@arm.com>\n+\n+\t* arm.c: Include obstack.h\n+\t(minipool_obstack, minipool_startobj): Define.\n+\t(arm_add_gc_roots): Initialize them.\n+\t(create_fix_barrier): Use our new obstack.\n+\t(push_minipool_barrier, push_minipool_fix): Likewise.\n+\t(arm_reorg): Release obstack memory.\n+\n 2000-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.md (nonlocal_goto_receiver): Remove."}, {"sha": "854835d19320a6133bea76c881b9f378bf657df4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c7319d87dbcb3c2b6e7ffa194eb3854690bc9e90", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"obstack.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"real.h\"\n@@ -99,6 +100,13 @@ static int       current_file_function_operand\tPARAMS ((rtx));\n #undef Mmode\n #undef Ulong\n \n+/* Obstack for minipool constant handling.  */\n+static struct obstack minipool_obstack;\n+static char *minipool_startobj;\n+\n+#define obstack_chunk_alloc xmalloc\n+#define obstack_chunk_free free\n+\n /* The maximum number of insns skipped which will be conditionalised if\n    possible.  */\n static int max_insns_skipped = 5;\n@@ -662,7 +670,9 @@ arm_add_gc_roots ()\n   ggc_add_rtx_root (&arm_compare_op0, 1);\n   ggc_add_rtx_root (&arm_compare_op1, 1);\n   ggc_add_rtx_root (&arm_target_insn, 1); /* Not sure this is really a root */\n-  /* XXX: What about the minipool tables?  */\n+\n+  gcc_obstack_init(&minipool_obstack);\n+  minipool_startobj = (char *) obstack_alloc (&minipool_obstack, 0);\n }\n \f\n /* Return 1 if it is possible to return using a single instruction.  */\n@@ -5375,7 +5385,7 @@ create_fix_barrier (fix, max_address)\n   emit_label_after (label, barrier);\n \n   /* Create a minipool barrier entry for the new barrier.  */\n-  new_fix = (Mfix *) oballoc (sizeof (* new_fix));\n+  new_fix = (Mfix *) obstack_alloc (&minipool_obstack, sizeof (* new_fix));\n   new_fix->insn = barrier;\n   new_fix->address = selected_address;\n   new_fix->next = fix->next;\n@@ -5391,7 +5401,7 @@ push_minipool_barrier (insn, address)\n      rtx insn;\n      HOST_WIDE_INT address;\n {\n-  Mfix * fix = (Mfix *) oballoc (sizeof (* fix));\n+  Mfix * fix = (Mfix *) obstack_alloc (&minipool_obstack, sizeof (* fix));\n \n   fix->insn = insn;\n   fix->address = address;\n@@ -5418,7 +5428,7 @@ push_minipool_fix (insn, address, loc, mode, value)\n      enum machine_mode mode;\n      rtx value;\n {\n-  Mfix * fix = (Mfix *) oballoc (sizeof (* fix));\n+  Mfix * fix = (Mfix *) obstack_alloc (&minipool_obstack, sizeof (* fix));\n \n #ifdef AOF_ASSEMBLER\n   /* PIC symbol refereneces need to be converted into offsets into the\n@@ -5671,6 +5681,9 @@ arm_reorg (first)\n      directly.  This can happen if the RTL gets split during final\n      instruction generation.  */\n   after_arm_reorg = 1;\n+\n+  /* Free the minipool memory.  */\n+  obstack_free (&minipool_obstack, minipool_startobj);\n }\n \f\n /* Routines to output assembly language.  */"}]}