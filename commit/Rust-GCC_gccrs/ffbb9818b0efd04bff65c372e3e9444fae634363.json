{"sha": "ffbb9818b0efd04bff65c372e3e9444fae634363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiYjk4MThiMGVmZDA0YmZmNjVjMzcyZTNlOTQ0NGZhZTYzNDM2Mw==", "commit": {"author": {"name": "Ilia Diachkov", "email": "ilia.diachkov@optimitech.com", "date": "2019-07-23T01:29:34Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-07-23T01:29:34Z"}, "message": "RISC-V: Add -malign-data= option.\n\n\tgcc/\n\tIlia Diachkov  <ilia.diachkov@optimitech.com>\n\t* config/riscv/riscv-opts.h (struct riscv_align_data): New.\n\t* config/riscv/riscv.c (riscv_constant_alignment): Use\n\triscv_align_data_type.\n\t* config/riscv/riscv.h (RISCV_EXPAND_ALIGNMENT): New.\n\t(DATA_ALIGNMENT): Use RISCV_EXPAND_ALIGNMENT.\n\t(LOCAL_ALIGNMENT): Use RISCV_EXPAND_ALIGNMENT.\n\t* config/riscv/riscv.opt (malign-data): New.\n\t* doc/invoke.texi (RISC-V Options): Document -malign-data=.\n\nFrom-SVN: r273714", "tree": {"sha": "76e6f330d40b40313cb182a14bd72177b0e8abe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e6f330d40b40313cb182a14bd72177b0e8abe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffbb9818b0efd04bff65c372e3e9444fae634363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbb9818b0efd04bff65c372e3e9444fae634363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffbb9818b0efd04bff65c372e3e9444fae634363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbb9818b0efd04bff65c372e3e9444fae634363/comments", "author": null, "committer": null, "parents": [{"sha": "1d46067b347ab1814de3cdd7f620f5c8ca73232a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d46067b347ab1814de3cdd7f620f5c8ca73232a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d46067b347ab1814de3cdd7f620f5c8ca73232a"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "fd00041dac335c2c47169ed29fc045c9b955a23a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffbb9818b0efd04bff65c372e3e9444fae634363", "patch": "@@ -1,3 +1,14 @@\n+2019-07-22  Ilia Diachkov  <ilia.diachkov@optimitech.com>\n+\n+\t* config/riscv/riscv-opts.h (struct riscv_align_data): New.\n+\t* config/riscv/riscv.c (riscv_constant_alignment): Use\n+\triscv_align_data_type.\n+\t* config/riscv/riscv.h (RISCV_EXPAND_ALIGNMENT): New.\n+\t(DATA_ALIGNMENT): Use RISCV_EXPAND_ALIGNMENT.\n+\t(LOCAL_ALIGNMENT): Use RISCV_EXPAND_ALIGNMENT.\n+\t* config/riscv/riscv.opt (malign-data): New.\n+\t* doc/invoke.texi (RISC-V Options): Document -malign-data=.\n+\n 2019-07-02  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n \n \t* cgraph.c (dump_graphviz): New function."}, {"sha": "d00fbe20f27df80a836408d225a63e0ffa8daef4", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=ffbb9818b0efd04bff65c372e3e9444fae634363", "patch": "@@ -46,4 +46,9 @@ enum riscv_microarchitecture_type {\n };\n extern enum riscv_microarchitecture_type riscv_microarchitecture;\n \n+enum riscv_align_data {\n+  riscv_align_data_type_xlen,\n+  riscv_align_data_type_natural\n+};\n+\n #endif /* ! GCC_RISCV_OPTS_H */"}, {"sha": "e274f1bd10feffcafa56c4d136004f7787261ce7", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=ffbb9818b0efd04bff65c372e3e9444fae634363", "patch": "@@ -4904,7 +4904,8 @@ riscv_can_change_mode_class (machine_mode, machine_mode, reg_class_t rclass)\n static HOST_WIDE_INT\n riscv_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n {\n-  if (TREE_CODE (exp) == STRING_CST || TREE_CODE (exp) == CONSTRUCTOR)\n+  if ((TREE_CODE (exp) == STRING_CST || TREE_CODE (exp) == CONSTRUCTOR)\n+      && (riscv_align_data_type == riscv_align_data_type_xlen))\n     return MAX (align, BITS_PER_WORD);\n   return align;\n }"}, {"sha": "5fc9be8edbf212454623b1c978fc940803f56917", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=ffbb9818b0efd04bff65c372e3e9444fae634363", "patch": "@@ -168,6 +168,13 @@ along with GCC; see the file COPYING3.  If not see\n    mode that should actually be used.  We allow pairs of registers.  */\n #define MAX_FIXED_MODE_SIZE GET_MODE_BITSIZE (TARGET_64BIT ? TImode : DImode)\n \n+/* DATA_ALIGNMENT and LOCAL_ALIGNMENT common definition.  */\n+#define RISCV_EXPAND_ALIGNMENT(COND, TYPE, ALIGN)\t\t\t\\\n+  (((COND) && ((ALIGN) < BITS_PER_WORD)\t\t\t\t\t\\\n+    && (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\\n+\t|| TREE_CODE (TYPE) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (TYPE) == RECORD_TYPE)) ? BITS_PER_WORD : (ALIGN))\n+\n /* If defined, a C expression to compute the alignment for a static\n    variable.  TYPE is the data type, and ALIGN is the alignment that\n    the object would ordinarily have.  The value of this macro is used\n@@ -180,18 +187,16 @@ along with GCC; see the file COPYING3.  If not see\n    cause character arrays to be word-aligned so that `strcpy' calls\n    that copy constants to character arrays can be done inline.  */\n \n-#define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n-  ((((ALIGN) < BITS_PER_WORD)\t\t\t\t\t\t\\\n-    && (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\\n-\t|| TREE_CODE (TYPE) == UNION_TYPE\t\t\t\t\\\n-\t|| TREE_CODE (TYPE) == RECORD_TYPE)) ? BITS_PER_WORD : (ALIGN))\n+#define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\t\\\n+  RISCV_EXPAND_ALIGNMENT (riscv_align_data_type == riscv_align_data_type_xlen,\t\\\n+\t\t\t  TYPE, ALIGN)\n \n /* We need this for the same reason as DATA_ALIGNMENT, namely to cause\n    character arrays to be word-aligned so that `strcpy' calls that copy\n    constants to character arrays can be done inline, and 'strcmp' can be\n    optimised to use word loads. */\n #define LOCAL_ALIGNMENT(TYPE, ALIGN) \\\n-  DATA_ALIGNMENT (TYPE, ALIGN)\n+  RISCV_EXPAND_ALIGNMENT (true, TYPE, ALIGN)\n \n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */"}, {"sha": "7f0c35e9e9c85617c7e25289309c6defef9ea224", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=ffbb9818b0efd04bff65c372e3e9444fae634363", "patch": "@@ -131,3 +131,17 @@ Mask(RVE)\n mriscv-attribute\n Target Report Var(riscv_emit_attribute_p) Init(-1)\n Emit RISC-V ELF attribute.\n+\n+malign-data=\n+Target RejectNegative Joined Var(riscv_align_data_type) Enum(riscv_align_data) Init(riscv_align_data_type_xlen)\n+Use the given data alignment.\n+\n+Enum\n+Name(riscv_align_data) Type(enum riscv_align_data)\n+Known data alignment choices (for use with the -malign-data= option):\n+\n+EnumValue\n+Enum(riscv_align_data) String(xlen) Value(riscv_align_data_type_xlen)\n+\n+EnumValue\n+Enum(riscv_align_data) String(natural) Value(riscv_align_data_type_natural)"}, {"sha": "77a2d561e38bb93d5695da645c3a11c677a38f94", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbb9818b0efd04bff65c372e3e9444fae634363/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ffbb9818b0efd04bff65c372e3e9444fae634363", "patch": "@@ -1068,7 +1068,8 @@ See RS/6000 and PowerPC Options.\n -mcmodel=medlow  -mcmodel=medany @gol\n -mexplicit-relocs  -mno-explicit-relocs @gol\n -mrelax  -mno-relax @gol\n--mriscv-attribute  -mmo-riscv-attribute}\n+-mriscv-attribute  -mmo-riscv-attribute @gol\n+-malign-data=@var{type}}\n \n @emph{RL78 Options}\n @gccoptlist{-msim  -mmul=none  -mmul=g13  -mmul=g14  -mallregs @gol\n@@ -24039,6 +24040,13 @@ linker relaxations.\n @itemx -mno-emit-attribute\n Emit (do not emit) RISC-V attribute to record extra information into ELF\n objects.  This feature requires at least binutils 2.32.\n+\n+@item -malign-data=@var{type}\n+@opindex malign-data\n+Control how GCC aligns variables and constants of array, structure, or union\n+types.  Supported values for @var{type} are @samp{xlen} which uses x register\n+width as the alignment value, and @samp{natural} which uses natural alignment.\n+@samp{xlen} is the default.\n @end table\n \n @node RL78 Options"}]}