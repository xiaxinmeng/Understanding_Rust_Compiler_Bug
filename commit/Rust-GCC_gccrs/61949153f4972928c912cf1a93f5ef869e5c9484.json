{"sha": "61949153f4972928c912cf1a93f5ef869e5c9484", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5NDkxNTNmNDk3MjkyOGM5MTJjZjFhOTNmNWVmODY5ZTVjOTQ4NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-04-24T19:33:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-04-24T19:33:54Z"}, "message": "cpplib.h (enum c_lang): Add CLK_GNUCXX1Y and CLK_CXX1Y.\n\n/libcpp\n2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/cpplib.h (enum c_lang): Add CLK_GNUCXX1Y and CLK_CXX1Y.\n\t* init.c (lang_defaults): Add defaults for the latter.\n\t(cpp_init_builtins): Define __cplusplus as 201300L for the latter.\n\t* lex.c (_cpp_lex_direct): Update.\n\n/gcc/c-family\n2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* c-opts.c (set_std_cxx11): Use CLK_CXX1Y and CLK_GNUCXX1Y.\n\n/gcc/testsuite\n2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp1y/cplusplus.C: New.\n\nFrom-SVN: r198261", "tree": {"sha": "91930b32804dd6992b551ef2b873cca0c78f0181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91930b32804dd6992b551ef2b873cca0c78f0181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61949153f4972928c912cf1a93f5ef869e5c9484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61949153f4972928c912cf1a93f5ef869e5c9484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61949153f4972928c912cf1a93f5ef869e5c9484", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61949153f4972928c912cf1a93f5ef869e5c9484/comments", "author": null, "committer": null, "parents": [{"sha": "5576178bbdd88f7e5a3ceb27c1de3d6bf4856de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5576178bbdd88f7e5a3ceb27c1de3d6bf4856de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5576178bbdd88f7e5a3ceb27c1de3d6bf4856de0"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "39390db6bbfa4d4dc7cca8d95525b4018a706c3d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -1,3 +1,7 @@\n+2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* c-opts.c (set_std_cxx11): Use CLK_CXX1Y and CLK_GNUCXX1Y.\n+\n 2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Do not define"}, {"sha": "ea5a605891c2ccfbd57a80360aac3965d972769e", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -1471,7 +1471,7 @@ set_std_cxx11 (int iso)\n static void\n set_std_cxx1y (int iso)\n {\n-  cpp_set_lang (parse_in, iso ? CLK_CXX11: CLK_GNUCXX11);\n+  cpp_set_lang (parse_in, iso ? CLK_CXX1Y: CLK_GNUCXX1Y);\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;"}, {"sha": "e3b4a56f73afefbe566c027010e168be7b1fdf59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -1,3 +1,7 @@\n+2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp1y/cplusplus.C: New.\n+\n 2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp1y/cxx1y_macro.C: Remove."}, {"sha": "0b695932df673fdc622f1451024dfa61fe977f58", "filename": "gcc/testsuite/g++.dg/cpp1y/cplusplus.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus.C?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"-std=c++1y\" }\n+\n+#if __cplusplus <= 201103L\n+#error\n+#endif"}, {"sha": "329f5e0b9384cae5c7a9002295987af1340289fd", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -1,3 +1,10 @@\n+2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/cpplib.h (enum c_lang): Add CLK_GNUCXX1Y and CLK_CXX1Y.\n+\t* init.c (lang_defaults): Add defaults for the latter.\n+\t(cpp_init_builtins): Define __cplusplus as 201300L for the latter.\n+\t* lex.c (_cpp_lex_direct): Update.\n+\n 2013-04-03  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \tPR target/56771\n@@ -46,7 +53,7 @@\n 2013-02-13  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/55582\n-\t* libcpp/lex.c (lex_raw_string): Allow string literal with suffix\n+\t* lex.c (lex_raw_string): Allow string literal with suffix\n \tbeginning with 's' to be parsed as a C++11 user-defined literal.\n \n 2013-01-14  Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "3084a11a8538dfcf3afbe58e5a1b044663f558b9", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -165,7 +165,8 @@ enum cpp_ttype\n /* C language kind, used when calling cpp_create_reader.  */\n enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11,\n \t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11,\n-\t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11, CLK_ASM};\n+\t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,\n+\t     CLK_GNUCXX1Y, CLK_CXX1Y, CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n struct GTY(()) cpp_string {"}, {"sha": "c3fa4af178beba492fc963ea8f38e1980cb660d8", "filename": "libcpp/init.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -98,11 +98,13 @@ static const struct lang_flags lang_defaults[] =\n   /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0,   0,    0 },\n   /* GNUCXX11 */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,    1 },\n   /* CXX11    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,    1 },\n+  /* GNUCXX1Y */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,    1 },\n+  /* CXX1Y    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,    1 },\n   /* ASM      */  { 0,  0,  1,   0,  0,   1,   0,   0,   0,    0 }\n-  /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX11, and\n-     CXX11 when no longer experimental (when all uses of identifiers\n-     in the compiler have been audited for correct handling of\n-     extended identifiers).  */\n+  /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX11, CXX11,\n+     GNUCXX1Y, and CXX1Y when no longer experimental (when all uses of\n+     identifiers in the compiler have been audited for correct handling\n+     of extended identifiers).  */\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -476,8 +478,11 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n \n   if (CPP_OPTION (pfile, cplusplus))\n     {\n-      if (CPP_OPTION (pfile, lang) == CLK_CXX11\n-\t   || CPP_OPTION (pfile, lang) == CLK_GNUCXX11)\n+      if (CPP_OPTION (pfile, lang) == CLK_CXX1Y\n+\t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX1Y)\n+\t_cpp_define_builtin (pfile, \"__cplusplus 201300L\");\n+      else if (CPP_OPTION (pfile, lang) == CLK_CXX11\n+\t       || CPP_OPTION (pfile, lang) == CLK_GNUCXX11)\n \t_cpp_define_builtin (pfile, \"__cplusplus 201103L\");\n       else\n \t_cpp_define_builtin (pfile, \"__cplusplus 199711L\");"}, {"sha": "3e59d40d32e3f1a4a1192276dec5f0b358651b17", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61949153f4972928c912cf1a93f5ef869e5c9484/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=61949153f4972928c912cf1a93f5ef869e5c9484", "patch": "@@ -2298,8 +2298,8 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t\t is neither : nor >, the < is treated as a preprocessor\n \t\t token by itself\".  */\n \t      if (CPP_OPTION (pfile, cplusplus)\n-\t\t  && (CPP_OPTION (pfile, lang) == CLK_CXX11\n-\t\t      || CPP_OPTION (pfile, lang) == CLK_GNUCXX11)\n+\t\t  && CPP_OPTION (pfile, lang) != CLK_CXX98\n+\t\t  && CPP_OPTION (pfile, lang) != CLK_GNUCXX\n \t\t  && buffer->cur[1] == ':'\n \t\t  && buffer->cur[2] != ':' && buffer->cur[2] != '>')\n \t\tbreak;"}]}