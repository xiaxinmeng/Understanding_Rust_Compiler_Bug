{"sha": "7712736376b2ee775f88976117b4e8b4ea37841b", "node_id": "C_kwDOANBUbNoAKDc3MTI3MzYzNzZiMmVlNzc1Zjg4OTc2MTE3YjRlOGI0ZWEzNzg0MWI", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2023-03-21T08:47:25Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2023-03-23T01:17:14Z"}, "message": "Remove TARGET_GEN_MEMSET_SCRATCH_RTX since it's not used anymore.\n\nThe target hook is only used by i386, and the current definition is\nsame as default gen_reg_rtx.\n\ngcc/ChangeLog:\n\n\t* builtins.cc (builtin_memset_read_str): Replace\n\ttargetm.gen_memset_scratch_rtx with gen_reg_rtx.\n\t(builtin_memset_gen_str): Ditto.\n\t* config/i386/i386-expand.cc\n\t(ix86_convert_const_wide_int_to_broadcast): Replace\n\tix86_gen_scratch_sse_rtx with gen_reg_rtx.\n\t(ix86_expand_vector_move): Ditto.\n\t* config/i386/i386-protos.h (ix86_gen_scratch_sse_rtx):\n\tRemoved.\n\t* config/i386/i386.cc (ix86_gen_scratch_sse_rtx): Removed.\n\t(TARGET_GEN_MEMSET_SCRATCH_RTX): Removed.\n\t* doc/tm.texi: Remove TARGET_GEN_MEMSET_SCRATCH_RTX.\n\t* doc/tm.texi.in: Ditto.\n\t* target.def: Ditto.", "tree": {"sha": "b94990a05c4d286bcc270d826cfdb350e8d9013e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b94990a05c4d286bcc270d826cfdb350e8d9013e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7712736376b2ee775f88976117b4e8b4ea37841b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7712736376b2ee775f88976117b4e8b4ea37841b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7712736376b2ee775f88976117b4e8b4ea37841b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7712736376b2ee775f88976117b4e8b4ea37841b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50bd9c41d503497b3774476805c7e956fb9d5131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bd9c41d503497b3774476805c7e956fb9d5131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bd9c41d503497b3774476805c7e956fb9d5131"}], "stats": {"total": 42, "additions": 5, "deletions": 37}, "files": [{"sha": "8026e2001b752f30cd5b9abb88673c2bae5e464e", "filename": "gcc/builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=7712736376b2ee775f88976117b4e8b4ea37841b", "patch": "@@ -4212,7 +4212,7 @@ builtin_memset_read_str (void *data, void *prev,\n \treturn const_vec;\n \n       /* Use the move expander with CONST_VECTOR.  */\n-      target = targetm.gen_memset_scratch_rtx (mode);\n+      target = gen_reg_rtx (mode);\n       emit_move_insn (target, const_vec);\n       return target;\n     }\n@@ -4256,7 +4256,7 @@ builtin_memset_gen_str (void *data, void *prev,\n \t the memset expander.  */\n       insn_code icode = optab_handler (vec_duplicate_optab, mode);\n \n-      target = targetm.gen_memset_scratch_rtx (mode);\n+      target = gen_reg_rtx (mode);\n       class expand_operand ops[2];\n       create_output_operand (&ops[0], target, mode);\n       create_input_operand (&ops[1], (rtx) data, QImode);"}, {"sha": "1e3ce4b7c3ff4cfbee836460f5d8786c78df30d9", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=7712736376b2ee775f88976117b4e8b4ea37841b", "patch": "@@ -338,7 +338,7 @@ ix86_convert_const_wide_int_to_broadcast (machine_mode mode, rtx op)\n   machine_mode vector_mode;\n   if (!mode_for_vector (broadcast_mode, nunits).exists (&vector_mode))\n     gcc_unreachable ();\n-  rtx target = ix86_gen_scratch_sse_rtx (vector_mode);\n+  rtx target = gen_reg_rtx (vector_mode);\n   bool ok = ix86_expand_vector_init_duplicate (false, vector_mode,\n \t\t\t\t\t       target,\n \t\t\t\t\t       GEN_INT (val_broadcast));\n@@ -686,7 +686,7 @@ ix86_expand_vector_move (machine_mode mode, rtx operands[])\n       if (!register_operand (op0, mode)\n \t  && !register_operand (op1, mode))\n \t{\n-\t  rtx scratch = ix86_gen_scratch_sse_rtx (mode);\n+\t  rtx scratch = gen_reg_rtx (mode);\n \t  emit_move_insn (scratch, op1);\n \t  op1 = scratch;\n \t}\n@@ -728,7 +728,7 @@ ix86_expand_vector_move (machine_mode mode, rtx operands[])\n       && !register_operand (op0, mode)\n       && !register_operand (op1, mode))\n     {\n-      rtx tmp = ix86_gen_scratch_sse_rtx (GET_MODE (op0));\n+      rtx tmp = gen_reg_rtx (GET_MODE (op0));\n       emit_move_insn (tmp, op1);\n       emit_move_insn (op0, tmp);\n       return;"}, {"sha": "71ae95ffef7bd171583100bca01e785abd1a9c2a", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7712736376b2ee775f88976117b4e8b4ea37841b", "patch": "@@ -50,8 +50,6 @@ extern void ix86_reset_previous_fndecl (void);\n \n extern bool ix86_using_red_zone (void);\n \n-extern rtx ix86_gen_scratch_sse_rtx (machine_mode);\n-\n extern unsigned int ix86_regmode_natural_size (machine_mode);\n extern bool ix86_check_builtin_isa_match (unsigned int fcode);\n #ifdef RTX_CODE"}, {"sha": "6a8734c234630a9ab72484674e3689799084d1ee", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=7712736376b2ee775f88976117b4e8b4ea37841b", "patch": "@@ -24197,15 +24197,6 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n     }\n }\n \n-/* Implement the TARGET_GEN_MEMSET_SCRATCH_RTX hook.  Return a scratch\n-   register in MODE for vector load and store.  */\n-\n-rtx\n-ix86_gen_scratch_sse_rtx (machine_mode mode)\n-{\n-  return gen_reg_rtx (mode);\n-}\n-\n /* Address space support.\n \n    This is not \"far pointers\" in the 16-bit sense, but an easy way\n@@ -25253,9 +25244,6 @@ static bool ix86_libc_has_fast_function (int fcode ATTRIBUTE_UNUSED)\n #undef TARGET_LIBC_HAS_FAST_FUNCTION\n #define TARGET_LIBC_HAS_FAST_FUNCTION ix86_libc_has_fast_function\n \n-#undef TARGET_GEN_MEMSET_SCRATCH_RTX\n-#define TARGET_GEN_MEMSET_SCRATCH_RTX ix86_gen_scratch_sse_rtx\n-\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::ix86_run_selftests"}, {"sha": "4bb48c5428c1976fadc2072be7a34557aaac14f9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7712736376b2ee775f88976117b4e8b4ea37841b", "patch": "@@ -12001,13 +12001,6 @@ This function prepares to emit a conditional comparison within a sequence\n  @var{bit_code} is @code{AND} or @code{IOR}, which is the op on the compares.\n @end deftypefn\n \n-@deftypefn {Target Hook} rtx TARGET_GEN_MEMSET_SCRATCH_RTX (machine_mode @var{mode})\n-This hook should return an rtx for a scratch register in @var{mode} to\n-be used when expanding memset calls.  The backend can use a hard scratch\n-register to avoid stack realignment when expanding memset.  The default\n-is @code{gen_reg_rtx}.\n-@end deftypefn\n-\n @deftypefn {Target Hook} unsigned TARGET_LOOP_UNROLL_ADJUST (unsigned @var{nunroll}, class loop *@var{loop})\n This target hook returns a new value for the number of times @var{loop}\n should be unrolled. The parameter @var{nunroll} is the number of times"}, {"sha": "f7ab5d48a634ab624ed2574fb75662d80c600225", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=7712736376b2ee775f88976117b4e8b4ea37841b", "patch": "@@ -7787,8 +7787,6 @@ lists.\n \n @hook TARGET_GEN_CCMP_NEXT\n \n-@hook TARGET_GEN_MEMSET_SCRATCH_RTX\n-\n @hook TARGET_LOOP_UNROLL_ADJUST\n \n @defmac POWI_MAX_MULTS"}, {"sha": "1b9c882229efae041b9189570c86344b28ddb91e", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7712736376b2ee775f88976117b4e8b4ea37841b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7712736376b2ee775f88976117b4e8b4ea37841b", "patch": "@@ -2738,15 +2738,6 @@ DEFHOOK\n  rtx, (rtx_insn **prep_seq, rtx_insn **gen_seq, rtx prev, int cmp_code, tree op0, tree op1, int bit_code),\n  NULL)\n \n-DEFHOOK\n-(gen_memset_scratch_rtx,\n- \"This hook should return an rtx for a scratch register in @var{mode} to\\n\\\n-be used when expanding memset calls.  The backend can use a hard scratch\\n\\\n-register to avoid stack realignment when expanding memset.  The default\\n\\\n-is @code{gen_reg_rtx}.\",\n- rtx, (machine_mode mode),\n- gen_reg_rtx)\n-\n /* Return a new value for loop unroll size.  */\n DEFHOOK\n (loop_unroll_adjust,"}]}