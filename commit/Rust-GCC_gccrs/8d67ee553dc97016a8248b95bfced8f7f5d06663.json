{"sha": "8d67ee553dc97016a8248b95bfced8f7f5d06663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2N2VlNTUzZGM5NzAxNmE4MjQ4Yjk1YmZjZWQ4ZjdmNWQwNjY2Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:06:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:06:13Z"}, "message": "hash-table.h: Update comments.\n\ngcc/\n\t* hash-table.h: Update comments.\n\t* hash-traits.h (pointer_hash): Don't inherit from typed_noop_remove.\n\t(nofree_ptr_hash): New class.\n\t* asan.c (asan_mem_ref_hasher): Inherit from nofree_ptr_hash rather\n\tthan typed_noop_remove.  Remove redudant typedefs.\n\t* attribs.c (attribute_hasher): Likewise.\n\t* cfg.c (bb_copy_hasher): Likewise.\n\t* cselib.c (cselib_hasher): Likewise.\n\t* dse.c (invariant_group_base_hasher): Likewise.\n\t* dwarf2cfi.c (trace_info_hasher): Likewise.\n\t* dwarf2out.c (macinfo_entry_hasher): Likewise.\n\t(comdat_type_hasher, loc_list_hasher): Likewise.\n\t* gcse.c (pre_ldst_expr_hasher): Likewise.\n\t* genmatch.c (id_base): Likewise.\n\t* genrecog.c (test_pattern_hasher): Likewise.\n\t* gimple-ssa-strength-reduction.c (cand_chain_hasher): Likewise.\n\t* haifa-sched.c (delay_i1_hasher): Likewise.\n\t* hard-reg-set.h (simplifiable_subregs_hasher): Likewise.\n\t* ipa-icf.h (congruence_class_group_hash): Likewise.\n\t* ipa-profile.c (histogram_hash): Likewise.\n\t* ira-color.c (allocno_hard_regs_hasher): Likewise.\n\t* lto-streamer.h (string_slot_hasher): Likewise.\n\t* lto-streamer.c (tree_entry_hasher): Likewise.\n\t* plugin.c (event_hasher): Likewise.\n\t* postreload-gcse.c (expr_hasher): Likewise.\n\t* store-motion.c (st_expr_hasher): Likewise.\n\t* tree-sra.c (uid_decl_hasher): Likewise.\n\t* tree-ssa-coalesce.c (coalesce_pair_hasher): Likewise.\n\t(ssa_name_var_hash): Likewise.\n\t* tree-ssa-live.c (tree_int_map_hasher): Likewise.\n\t* tree-ssa-loop-im.c (mem_ref_hasher): Likewise.\n\t* tree-ssa-pre.c (pre_expr_d): Likewise.\n\t* tree-ssa-sccvn.c (vn_nary_op_hasher): Likewise.\n\t* vtable-verify.h (registration_hasher): Likewise.\n\t* vtable-verify.c (vtbl_map_hasher): Likewise.\n\t* config/arm/arm.c (libcall_hasher): Likewise.\n\t* config/i386/winnt.c (wrapped_symbol_hasher): Likewise.\n\t* config/ia64/ia64.c (bundle_state_hasher): Likewise.\n\t* config/sol2.c (comdat_entry_hasher): Likewise.\n\t* fold-const.c (fold): Use nofree_ptr_hash instead of pointer_hash.\n\t(print_fold_checksum, fold_checksum_tree): Likewise.\n\t(debug_fold_checksum, fold_build1_stat_loc): Likewise.\n\t(fold_build2_stat_loc, fold_build3_stat_loc): Likewise.\n\t(fold_build_call_array_loc): Likewise.\n\t* tree-ssa-ccp.c (gimple_htab): Likewise.\n\t* tree-browser.c (tree_upper_hasher): Inherit from nofree_ptr_hash\n\trather than pointer_type.\n\ngcc/c/\n\t* c-decl.c (detect_field_duplicates_hash): Use nofree_ptr_hash\n\tinstead of pointer_hash.\n\t(detect_field_duplicates): Likewise.\n\ngcc/cp/\n\t* class.c (fixed_type_or_null_ref_ht): Inherit from nofree_ptr_hash\n\trather than pointer_hash.\n\t(fixed_type_or_null): Use nofree_ptr_hash instead of pointer_hash.\n\t* semantics.c (nrv_data): Likewise.\n\t* tree.c (verify_stmt_tree_r, verify_stmt_tree): Likewise.\n\ngcc/java/\n\t* jcf-io.c (charstar_hash): Inherit from nofree_ptr_hash rather\n\tthan typed_noop_remove.  Remove redudant typedefs.\n\ngcc/lto/\n\t* lto.c (tree_scc_hasher): Inherit from nofree_ptr_hash rather\n\tthan typed_noop_remove.  Remove redudant typedefs.\n\ngcc/objc/\n\t* objc-act.c (decl_name_hash): Inherit from nofree_ptr_hash rather\n\tthan typed_noop_remove.  Remove redudant typedefs.\n\nlibcc1/\n\t* plugin.cc (string_hasher): Inherit from nofree_ptr_hash rather\n\tthan typed_noop_remove.  Remove redudant typedefs.\n\t(plugin_context): Use nofree_ptr_hash rather than pointer_hash.\n\t(plugin_context::mark): Likewise.\n\nFrom-SVN: r224957", "tree": {"sha": "49353408ed45020614e34cb5c114aa00f12df49b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49353408ed45020614e34cb5c114aa00f12df49b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d67ee553dc97016a8248b95bfced8f7f5d06663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d67ee553dc97016a8248b95bfced8f7f5d06663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d67ee553dc97016a8248b95bfced8f7f5d06663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d67ee553dc97016a8248b95bfced8f7f5d06663/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "843adf8844d4ec43d13dd05f7269cabc7058c027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843adf8844d4ec43d13dd05f7269cabc7058c027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843adf8844d4ec43d13dd05f7269cabc7058c027"}], "stats": {"total": 306, "additions": 160, "deletions": 146}, "files": [{"sha": "3957e1932e4c2ca023a0ca15c0103125c86efb63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1,3 +1,53 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-table.h: Update comments.\n+\t* hash-traits.h (pointer_hash): Don't inherit from typed_noop_remove.\n+\t(nofree_ptr_hash): New class.\n+\t* asan.c (asan_mem_ref_hasher): Inherit from nofree_ptr_hash rather\n+\tthan typed_noop_remove.  Remove redudant typedefs.\n+\t* attribs.c (attribute_hasher): Likewise.\n+\t* cfg.c (bb_copy_hasher): Likewise.\n+\t* cselib.c (cselib_hasher): Likewise.\n+\t* dse.c (invariant_group_base_hasher): Likewise.\n+\t* dwarf2cfi.c (trace_info_hasher): Likewise.\n+\t* dwarf2out.c (macinfo_entry_hasher): Likewise.\n+\t(comdat_type_hasher, loc_list_hasher): Likewise.\n+\t* gcse.c (pre_ldst_expr_hasher): Likewise.\n+\t* genmatch.c (id_base): Likewise.\n+\t* genrecog.c (test_pattern_hasher): Likewise.\n+\t* gimple-ssa-strength-reduction.c (cand_chain_hasher): Likewise.\n+\t* haifa-sched.c (delay_i1_hasher): Likewise.\n+\t* hard-reg-set.h (simplifiable_subregs_hasher): Likewise.\n+\t* ipa-icf.h (congruence_class_group_hash): Likewise.\n+\t* ipa-profile.c (histogram_hash): Likewise.\n+\t* ira-color.c (allocno_hard_regs_hasher): Likewise.\n+\t* lto-streamer.h (string_slot_hasher): Likewise.\n+\t* lto-streamer.c (tree_entry_hasher): Likewise.\n+\t* plugin.c (event_hasher): Likewise.\n+\t* postreload-gcse.c (expr_hasher): Likewise.\n+\t* store-motion.c (st_expr_hasher): Likewise.\n+\t* tree-sra.c (uid_decl_hasher): Likewise.\n+\t* tree-ssa-coalesce.c (coalesce_pair_hasher): Likewise.\n+\t(ssa_name_var_hash): Likewise.\n+\t* tree-ssa-live.c (tree_int_map_hasher): Likewise.\n+\t* tree-ssa-loop-im.c (mem_ref_hasher): Likewise.\n+\t* tree-ssa-pre.c (pre_expr_d): Likewise.\n+\t* tree-ssa-sccvn.c (vn_nary_op_hasher): Likewise.\n+\t* vtable-verify.h (registration_hasher): Likewise.\n+\t* vtable-verify.c (vtbl_map_hasher): Likewise.\n+\t* config/arm/arm.c (libcall_hasher): Likewise.\n+\t* config/i386/winnt.c (wrapped_symbol_hasher): Likewise.\n+\t* config/ia64/ia64.c (bundle_state_hasher): Likewise.\n+\t* config/sol2.c (comdat_entry_hasher): Likewise.\n+\t* fold-const.c (fold): Use nofree_ptr_hash instead of pointer_hash.\n+\t(print_fold_checksum, fold_checksum_tree): Likewise.\n+\t(debug_fold_checksum, fold_build1_stat_loc): Likewise.\n+\t(fold_build2_stat_loc, fold_build3_stat_loc): Likewise.\n+\t(fold_build_call_array_loc): Likewise.\n+\t* tree-ssa-ccp.c (gimple_htab): Likewise.\n+\t* tree-browser.c (tree_upper_hasher): Inherit from nofree_ptr_hash\n+\trather than pointer_type.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-traits.h (pointer_hash::mark_deleted, pointer_hash::mark_empty)"}, {"sha": "3d72240917d17673caeb52163734452de97e1f21", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -426,12 +426,8 @@ asan_mem_ref_get_end (const asan_mem_ref *ref, tree len)\n   return asan_mem_ref_get_end (ref->start, len);\n }\n \n-struct asan_mem_ref_hasher\n-  : typed_noop_remove <asan_mem_ref>\n+struct asan_mem_ref_hasher : nofree_ptr_hash <asan_mem_ref>\n {\n-  typedef asan_mem_ref *value_type;\n-  typedef asan_mem_ref *compare_type;\n-\n   static inline hashval_t hash (const asan_mem_ref *);\n   static inline bool equal (const asan_mem_ref *, const asan_mem_ref *);\n };"}, {"sha": "265009b47a2e945bd3178533212b235eabd48429", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -57,9 +57,8 @@ substring_hash (const char *str, int l)\n \n /* Used for attribute_hash.  */\n \n-struct attribute_hasher : typed_noop_remove <attribute_spec>\n+struct attribute_hasher : nofree_ptr_hash <attribute_spec>\n {\n-  typedef attribute_spec *value_type;\n   typedef substring *compare_type;\n   static inline hashval_t hash (const attribute_spec *);\n   static inline bool equal (const attribute_spec *, const substring *);"}, {"sha": "e727fb51288e14d52d96c06073fd7ca0f432251b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1,3 +1,9 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-decl.c (detect_field_duplicates_hash): Use nofree_ptr_hash\n+\tinstead of pointer_hash.\n+\t(detect_field_duplicates): Likewise.\n+\n 2015-06-25  Marek Polacek  <polacek@redhat.com>\n \n \t* c-array-notation.c: Use VAR_P throughout."}, {"sha": "862151597a618433b7140866efe7527831b970cc", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -7399,7 +7399,7 @@ is_duplicate_field (tree x, tree y)\n \n static void\n detect_field_duplicates_hash (tree fieldlist,\n-\t\t\t      hash_table<pointer_hash <tree_node> > *htab)\n+\t\t\t      hash_table<nofree_ptr_hash <tree_node> > *htab)\n {\n   tree x, y;\n   tree_node **slot;\n@@ -7499,7 +7499,7 @@ detect_field_duplicates (tree fieldlist)\n     }\n   else\n     {\n-      hash_table<pointer_hash <tree_node> > htab (37);\n+      hash_table<nofree_ptr_hash <tree_node> > htab (37);\n       detect_field_duplicates_hash (fieldlist, &htab);\n     }\n }"}, {"sha": "fb13b7de06a19bee08477cc18027769b55cf1cae", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1023,10 +1023,8 @@ struct htab_bb_copy_original_entry\n   int index2;\n };\n \n-struct bb_copy_hasher : typed_noop_remove <htab_bb_copy_original_entry>\n+struct bb_copy_hasher : nofree_ptr_hash <htab_bb_copy_original_entry>\n {\n-  typedef htab_bb_copy_original_entry *value_type;\n-  typedef htab_bb_copy_original_entry *compare_type;\n   static inline hashval_t hash (const htab_bb_copy_original_entry *);\n   static inline bool equal (const htab_bb_copy_original_entry *existing,\n \t\t\t    const htab_bb_copy_original_entry * candidate);"}, {"sha": "2f711be29bf2197a0edb05a7ec77c6cc3f796726", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -5038,10 +5038,8 @@ arm_function_value(const_tree type, const_tree func,\n \n /* libcall hashtable helpers.  */\n \n-struct libcall_hasher : typed_noop_remove <rtx_def>\n+struct libcall_hasher : nofree_ptr_hash <const rtx_def>\n {\n-  typedef const rtx_def *value_type;\n-  typedef const rtx_def *compare_type;\n   static inline hashval_t hash (const rtx_def *);\n   static inline bool equal (const rtx_def *, const rtx_def *);\n   static inline void remove (rtx_def *);"}, {"sha": "47ea87a3113dbd85815f767e265b672a3397df61", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -709,10 +709,8 @@ i386_pe_record_stub (const char *name)\n \n /* Hashtable helpers.  */\n \n-struct wrapped_symbol_hasher : typed_noop_remove <char>\n+struct wrapped_symbol_hasher : nofree_ptr_hash <const char>\n {\n-  typedef const char *value_type;\n-  typedef const char *compare_type;\n   static inline hashval_t hash (const char *);\n   static inline bool equal (const char *, const char *);\n   static inline void remove (const char *);"}, {"sha": "508532e5fbaa8d4446c1a7eeeca91524447fd9c7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -8579,10 +8579,8 @@ finish_bundle_states (void)\n \n /* Hashtable helpers.  */\n \n-struct bundle_state_hasher : typed_noop_remove <bundle_state>\n+struct bundle_state_hasher : nofree_ptr_hash <bundle_state>\n {\n-  typedef bundle_state *value_type;\n-  typedef bundle_state *compare_type;\n   static inline hashval_t hash (const bundle_state *);\n   static inline bool equal (const bundle_state *, const bundle_state *);\n };"}, {"sha": "168c89511253931006ff63af9c810da7eb471cff", "filename": "gcc/config/sol2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -172,10 +172,8 @@ typedef struct comdat_entry\n \n /* Helpers for maintaining solaris_comdat_htab.  */\n \n-struct comdat_entry_hasher : typed_noop_remove <comdat_entry>\n+struct comdat_entry_hasher : nofree_ptr_hash <comdat_entry>\n {\n-  typedef comdat_entry *value_type;\n-  typedef comdat_entry *compare_type;\n   static inline hashval_t hash (const comdat_entry *);\n   static inline bool equal (const comdat_entry *, const comdat_entry *);\n   static inline void remove (comdat_entry *);"}, {"sha": "6bc2962255b2caa93ec617ed21b7ba49eab25397", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1,3 +1,11 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* class.c (fixed_type_or_null_ref_ht): Inherit from nofree_ptr_hash\n+\trather than pointer_hash.\n+\t(fixed_type_or_null): Use nofree_ptr_hash instead of pointer_hash.\n+\t* semantics.c (nrv_data): Likewise.\n+\t* tree.c (verify_stmt_tree_r, verify_stmt_tree): Likewise.\n+\n 2015-06-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/66647"}, {"sha": "007c49e4ce09f6c856e2f689c8c4190b84e322e8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -6916,7 +6916,7 @@ finish_struct (tree t, tree attributes)\n }\n \f\n /* Hash table to avoid endless recursion when handling references.  */\n-static hash_table<pointer_hash<tree_node> > *fixed_type_or_null_ref_ht;\n+static hash_table<nofree_ptr_hash<tree_node> > *fixed_type_or_null_ref_ht;\n \n /* Return the dynamic type of INSTANCE, if known.\n    Used to determine whether the virtual function table is needed\n@@ -7035,7 +7035,7 @@ fixed_type_or_null (tree instance, int *nonnull, int *cdtorp)\n \t  /* We only need one hash table because it is always left empty.  */\n \t  if (!fixed_type_or_null_ref_ht)\n \t    fixed_type_or_null_ref_ht\n-\t      = new hash_table<pointer_hash<tree_node> > (37); \n+\t      = new hash_table<nofree_ptr_hash<tree_node> > (37);\n \n \t  /* Reference variables should be references to objects.  */\n \t  if (nonnull)"}, {"sha": "cf34ddba19617e1c3d44e2eb393bb5c412792643", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -4126,7 +4126,7 @@ struct nrv_data\n \n   tree var;\n   tree result;\n-  hash_table<pointer_hash <tree_node> > visited;\n+  hash_table<nofree_ptr_hash <tree_node> > visited;\n };\n \n /* Helper function for walk_tree, used by finalize_nrv below.  */"}, {"sha": "3ee2f347258123df9e70acf950deae032a44dc2b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -2197,8 +2197,8 @@ static tree\n verify_stmt_tree_r (tree* tp, int * /*walk_subtrees*/, void* data)\n {\n   tree t = *tp;\n-  hash_table<pointer_hash <tree_node> > *statements\n-      = static_cast <hash_table<pointer_hash <tree_node> > *> (data);\n+  hash_table<nofree_ptr_hash <tree_node> > *statements\n+      = static_cast <hash_table<nofree_ptr_hash <tree_node> > *> (data);\n   tree_node **slot;\n \n   if (!STATEMENT_CODE_P (TREE_CODE (t)))\n@@ -2221,7 +2221,7 @@ verify_stmt_tree_r (tree* tp, int * /*walk_subtrees*/, void* data)\n void\n verify_stmt_tree (tree t)\n {\n-  hash_table<pointer_hash <tree_node> > statements (37);\n+  hash_table<nofree_ptr_hash <tree_node> > statements (37);\n   cp_walk_tree (&t, verify_stmt_tree_r, &statements, NULL);\n }\n "}, {"sha": "6c04813dcc126f837cfae47377ab489a7716df26", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -106,9 +106,8 @@ static rtx cselib_expand_value_rtx_1 (rtx, struct expand_value_data *, int);\n      this involves walking the table entries for a given value and comparing\n      the locations of the entries with the rtx we are looking up.  */\n \n-struct cselib_hasher : typed_noop_remove <cselib_val>\n+struct cselib_hasher : nofree_ptr_hash <cselib_val>\n {\n-  typedef cselib_val *value_type;\n   struct key {\n     /* The rtx value and its mode (needed separately for constant\n        integers).  */"}, {"sha": "0a4ba8f85698ccce1828a919e698d40d3f25949c", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -732,10 +732,8 @@ clear_alias_set_lookup (alias_set_type alias_set)\n /* Hashtable callbacks for maintaining the \"bases\" field of\n    store_group_info, given that the addresses are function invariants.  */\n \n-struct invariant_group_base_hasher : typed_noop_remove <group_info>\n+struct invariant_group_base_hasher : nofree_ptr_hash <group_info>\n {\n-  typedef group_info *value_type;\n-  typedef group_info *compare_type;\n   static inline hashval_t hash (const group_info *);\n   static inline bool equal (const group_info *, const group_info *);\n };"}, {"sha": "e7117fffcc130b44ed4d5b7e953b2248eb9abe1a", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -167,10 +167,8 @@ typedef dw_trace_info *dw_trace_info_ref;\n \n /* Hashtable helpers.  */\n \n-struct trace_info_hasher : typed_noop_remove <dw_trace_info>\n+struct trace_info_hasher : nofree_ptr_hash <dw_trace_info>\n {\n-  typedef dw_trace_info *value_type;\n-  typedef dw_trace_info *compare_type;\n   static inline hashval_t hash (const dw_trace_info *);\n   static inline bool equal (const dw_trace_info *, const dw_trace_info *);\n };"}, {"sha": "3999b727f9e199b6ebe108095bb92aa57b9aee5e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -22779,10 +22779,8 @@ dwarf2out_undef (unsigned int lineno ATTRIBUTE_UNUSED,\n \n /* Helpers to manipulate hash table of CUs.  */\n \n-struct macinfo_entry_hasher : typed_noop_remove <macinfo_entry>\n+struct macinfo_entry_hasher : nofree_ptr_hash <macinfo_entry>\n {\n-  typedef macinfo_entry *value_type;\n-  typedef macinfo_entry *compare_type;\n   static inline hashval_t hash (const macinfo_entry *);\n   static inline bool equal (const macinfo_entry *, const macinfo_entry *);\n };\n@@ -23871,10 +23869,8 @@ file_table_relative_p (dwarf_file_data **slot, bool *p)\n \n /* Helpers to manipulate hash table of comdat type units.  */\n \n-struct comdat_type_hasher : typed_noop_remove <comdat_type_node>\n+struct comdat_type_hasher : nofree_ptr_hash <comdat_type_node>\n {\n-  typedef comdat_type_node *value_type;\n-  typedef comdat_type_node *compare_type;\n   static inline hashval_t hash (const comdat_type_node *);\n   static inline bool equal (const comdat_type_node *, const comdat_type_node *);\n };\n@@ -24984,10 +24980,8 @@ compare_locs (dw_loc_descr_ref x, dw_loc_descr_ref y)\n \n /* Hashtable helpers.  */\n \n-struct loc_list_hasher : typed_noop_remove <dw_loc_list_struct>\n+struct loc_list_hasher : nofree_ptr_hash <dw_loc_list_struct>\n {\n-  typedef dw_loc_list_struct *value_type;\n-  typedef dw_loc_list_struct *compare_type;\n   static inline hashval_t hash (const dw_loc_list_struct *);\n   static inline bool equal (const dw_loc_list_struct *,\n \t\t\t    const dw_loc_list_struct *);"}, {"sha": "c32ac3d0a9a601d0f042c58af729472400dc7137", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -13868,7 +13868,7 @@ fold (tree expr)\n #undef fold\n \n static void fold_checksum_tree (const_tree, struct md5_ctx *,\n-\t\t\t\thash_table<pointer_hash<const tree_node> > *);\n+\t\t\t\thash_table<nofree_ptr_hash<const tree_node> > *);\n static void fold_check_failed (const_tree, const_tree);\n void print_fold_checksum (const_tree);\n \n@@ -13882,7 +13882,7 @@ fold (tree expr)\n   tree ret;\n   struct md5_ctx ctx;\n   unsigned char checksum_before[16], checksum_after[16];\n-  hash_table<pointer_hash<const tree_node> > ht (32);\n+  hash_table<nofree_ptr_hash<const tree_node> > ht (32);\n \n   md5_init_ctx (&ctx);\n   fold_checksum_tree (expr, &ctx, &ht);\n@@ -13906,7 +13906,7 @@ print_fold_checksum (const_tree expr)\n {\n   struct md5_ctx ctx;\n   unsigned char checksum[16], cnt;\n-  hash_table<pointer_hash<const tree_node> > ht (32);\n+  hash_table<nofree_ptr_hash<const tree_node> > ht (32);\n \n   md5_init_ctx (&ctx);\n   fold_checksum_tree (expr, &ctx, &ht);\n@@ -13924,7 +13924,7 @@ fold_check_failed (const_tree expr ATTRIBUTE_UNUSED, const_tree ret ATTRIBUTE_UN\n \n static void\n fold_checksum_tree (const_tree expr, struct md5_ctx *ctx,\n-\t\t    hash_table<pointer_hash <const tree_node> > *ht)\n+\t\t    hash_table<nofree_ptr_hash <const tree_node> > *ht)\n {\n   const tree_node **slot;\n   enum tree_code code;\n@@ -14085,7 +14085,7 @@ debug_fold_checksum (const_tree t)\n   int i;\n   unsigned char checksum[16];\n   struct md5_ctx ctx;\n-  hash_table<pointer_hash<const tree_node> > ht (32);\n+  hash_table<nofree_ptr_hash<const tree_node> > ht (32);\n \n   md5_init_ctx (&ctx);\n   fold_checksum_tree (t, &ctx, &ht);\n@@ -14113,7 +14113,7 @@ fold_build1_stat_loc (location_t loc,\n #ifdef ENABLE_FOLD_CHECKING\n   unsigned char checksum_before[16], checksum_after[16];\n   struct md5_ctx ctx;\n-  hash_table<pointer_hash<const tree_node> > ht (32);\n+  hash_table<nofree_ptr_hash<const tree_node> > ht (32);\n \n   md5_init_ctx (&ctx);\n   fold_checksum_tree (op0, &ctx, &ht);\n@@ -14154,7 +14154,7 @@ fold_build2_stat_loc (location_t loc,\n \t\tchecksum_after_op0[16],\n \t\tchecksum_after_op1[16];\n   struct md5_ctx ctx;\n-  hash_table<pointer_hash<const tree_node> > ht (32);\n+  hash_table<nofree_ptr_hash<const tree_node> > ht (32);\n \n   md5_init_ctx (&ctx);\n   fold_checksum_tree (op0, &ctx, &ht);\n@@ -14208,7 +14208,7 @@ fold_build3_stat_loc (location_t loc, enum tree_code code, tree type,\n \t\tchecksum_after_op1[16],\n \t\tchecksum_after_op2[16];\n   struct md5_ctx ctx;\n-  hash_table<pointer_hash<const tree_node> > ht (32);\n+  hash_table<nofree_ptr_hash<const tree_node> > ht (32);\n \n   md5_init_ctx (&ctx);\n   fold_checksum_tree (op0, &ctx, &ht);\n@@ -14274,7 +14274,7 @@ fold_build_call_array_loc (location_t loc, tree type, tree fn,\n \t\tchecksum_after_fn[16],\n \t\tchecksum_after_arglist[16];\n   struct md5_ctx ctx;\n-  hash_table<pointer_hash<const tree_node> > ht (32);\n+  hash_table<nofree_ptr_hash<const tree_node> > ht (32);\n   int i;\n \n   md5_init_ctx (&ctx);"}, {"sha": "bcd7c8fb694b54953104356f97cce7556ed1fb05", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -374,9 +374,8 @@ struct ls_expr\n /* Head of the list of load/store memory refs.  */\n static struct ls_expr * pre_ldst_mems = NULL;\n \n-struct pre_ldst_expr_hasher : typed_noop_remove <ls_expr>\n+struct pre_ldst_expr_hasher : nofree_ptr_hash <ls_expr>\n {\n-  typedef ls_expr *value_type;\n   typedef value_type compare_type;\n   static inline hashval_t hash (const ls_expr *);\n   static inline bool equal (const ls_expr *, const ls_expr *);"}, {"sha": "265210517edd2fa0add67dab87946d3ecc8bd227", "filename": "gcc/genmatch.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -178,7 +178,7 @@ END_BUILTINS\n \n /* Base class for all identifiers the parser knows.  */\n \n-struct id_base : typed_noop_remove<id_base>\n+struct id_base : nofree_ptr_hash<id_base>\n {\n   enum id_kind { CODE, FN, PREDICATE, USER } kind;\n \n@@ -189,8 +189,6 @@ struct id_base : typed_noop_remove<id_base>\n   const char *id;\n \n   /* hash_table support.  */\n-  typedef id_base *value_type;\n-  typedef id_base *compare_type;\n   static inline hashval_t hash (const id_base *);\n   static inline int equal (const id_base *, const id_base *);\n };"}, {"sha": "b2e233571b994f21459b41b157fa696596a584ed", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -2519,10 +2519,8 @@ merge_relative_positions (position **roota, position *a,\n \n /* A hasher of states that treats two states as \"equal\" if they might be\n    merged (but trying to be more discriminating than \"return true\").  */\n-struct test_pattern_hasher : typed_noop_remove <merge_state_info>\n+struct test_pattern_hasher : nofree_ptr_hash <merge_state_info>\n {\n-  typedef merge_state_info *value_type;\n-  typedef merge_state_info *compare_type;\n   static inline hashval_t hash (const value_type &);\n   static inline bool equal (const value_type &, const compare_type &);\n };"}, {"sha": "1d666676c31aa434509e22f3fedf338f9b9d7243", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -424,10 +424,8 @@ lookup_cand (cand_idx idx)\n \n /* Helper for hashing a candidate chain header.  */\n \n-struct cand_chain_hasher : typed_noop_remove <cand_chain>\n+struct cand_chain_hasher : nofree_ptr_hash <cand_chain>\n {\n-  typedef cand_chain *value_type;\n-  typedef cand_chain *compare_type;\n   static inline hashval_t hash (const cand_chain *);\n   static inline bool equal (const cand_chain *, const cand_chain *);\n };"}, {"sha": "5879282ed6844d0c9fa4c4700a26715076f453c3", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -613,9 +613,8 @@ struct delay_pair\n \n /* Helpers for delay hashing.  */\n \n-struct delay_i1_hasher : typed_noop_remove <delay_pair>\n+struct delay_i1_hasher : nofree_ptr_hash <delay_pair>\n {\n-  typedef delay_pair *value_type;\n   typedef void *compare_type;\n   static inline hashval_t hash (const delay_pair *);\n   static inline bool equal (const delay_pair *, const void *);"}, {"sha": "f90ae5d0b5f2e6685bb384abade4ef4d79ef516e", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -616,9 +616,8 @@ extern char global_regs[FIRST_PSEUDO_REGISTER];\n struct simplifiable_subreg;\n struct subreg_shape;\n \n-struct simplifiable_subregs_hasher : typed_noop_remove <simplifiable_subreg>\n+struct simplifiable_subregs_hasher : nofree_ptr_hash <simplifiable_subreg>\n {\n-  typedef simplifiable_subreg *value_type;\n   typedef const subreg_shape *compare_type;\n \n   static inline hashval_t hash (const simplifiable_subreg *);"}, {"sha": "31440f6f44e49485e00ebc25929f8dc11990803f", "filename": "gcc/hash-table.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -118,12 +118,10 @@ along with GCC; see the file COPYING3.  If not see\n    Suppose you want to put some_type into the hash table.  You could define\n    the descriptor type as follows.\n \n-      struct some_type_hasher : typed_noop_remove <some_type>\n-      // Deriving from typed_noop_remove means that we get a 'remove' that does\n+      struct some_type_hasher : nofree_ptr_hash <some_type>\n+      // Deriving from nofree_ptr_hash means that we get a 'remove' that does\n       // nothing.  This choice is good for raw values.\n       {\n-        typedef some_type value_type;\n-        typedef some_type compare_type;\n         static inline hashval_t hash (const value_type *);\n         static inline bool equal (const value_type *, const compare_type *);\n       };"}, {"sha": "5afcc1103d623c3c8ec2497a57291c74623dea10", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -57,10 +57,12 @@ typed_noop_remove <Type>::remove (Type *p ATTRIBUTE_UNUSED)\n }\n \n \n-/* Pointer hash with a no-op remove method.  */\n+/* Pointer hasher based on pointer equality.  Other types of pointer hash\n+   can inherit this and override the hash and equal functions with some\n+   other form of equality (such as string equality).  */\n \n template <typename Type>\n-struct pointer_hash : typed_noop_remove <Type>\n+struct pointer_hash\n {\n   typedef Type *value_type;\n   typedef Type *compare_type;\n@@ -165,4 +167,10 @@ struct ggc_cache_hasher : ggc_hasher<T>\n   }\n };\n \n+/* Traits for pointer elements that should not be freed when an element\n+   is deleted.  */\n+\n+template <typename T>\n+struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T> {};\n+\n #endif"}, {"sha": "f229ca18ecf151181bd4759627d161a6ec92f4e5", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -439,11 +439,8 @@ struct congruence_class_group\n };\n \n /* Congruence class set structure.  */\n-struct congruence_class_group_hash: typed_noop_remove <congruence_class_group>\n+struct congruence_class_group_hash : nofree_ptr_hash <congruence_class_group>\n {\n-  typedef congruence_class_group *value_type;\n-  typedef congruence_class_group *compare_type;\n-\n   static inline hashval_t hash (const congruence_class_group *item)\n   {\n     return item->hash;"}, {"sha": "9f2d67c08d5aa87bd4f90b6d30fb77870bc9ad04", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -102,10 +102,8 @@ static pool_allocator<histogram_entry> histogram_pool\n \n /* Hashtable support for storing SSA names hashed by their SSA_NAME_VAR.  */\n \n-struct histogram_hash : typed_noop_remove <histogram_entry>\n+struct histogram_hash : nofree_ptr_hash <histogram_entry>\n {\n-  typedef histogram_entry *value_type;\n-  typedef histogram_entry *compare_type;\n   static inline hashval_t hash (const histogram_entry *);\n   static inline int equal (const histogram_entry *, const histogram_entry *);\n };"}, {"sha": "972a053402fd03dcc40adaa09bd93d1e85ac5f65", "filename": "gcc/ira-color.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -228,10 +228,8 @@ static vec<ira_allocno_t> allocno_stack_vec;\n /* Vector of unique allocno hard registers.  */\n static vec<allocno_hard_regs_t> allocno_hard_regs_vec;\n \n-struct allocno_hard_regs_hasher : typed_noop_remove <allocno_hard_regs>\n+struct allocno_hard_regs_hasher : nofree_ptr_hash <allocno_hard_regs>\n {\n-  typedef allocno_hard_regs *value_type;\n-  typedef allocno_hard_regs *compare_type;\n   static inline hashval_t hash (const allocno_hard_regs *);\n   static inline bool equal (const allocno_hard_regs *,\n \t\t\t    const allocno_hard_regs *);"}, {"sha": "edc2c552361abfd2dd7847c906f99aa87651b2fc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* jcf-io.c (charstar_hash): Inherit from nofree_ptr_hash rather\n+\tthan typed_noop_remove.  Remove redudant typedefs.\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* boehm.c: Do not include input.h, line-map.h or is-a.h."}, {"sha": "91fe952fdb9158acd524c7defcadf955d3f3c3e7", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -275,10 +275,8 @@ find_classfile (char *filename, JCF *jcf, const char *dep_name)\n \n /* Hash table helper.  */\n \n-struct charstar_hash : typed_noop_remove <char>\n+struct charstar_hash : nofree_ptr_hash <const char>\n {\n-  typedef const char *value_type;\n-  typedef const char *compare_type;\n   static inline hashval_t hash (const char *candidate);\n   static inline bool equal (const char *existing, const char *candidate);\n };"}, {"sha": "c3badf8f6de592297366fc7d3c24efd951cef915", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -281,10 +281,8 @@ struct tree_hash_entry\n   intptr_t value;\n };\n \n-struct tree_entry_hasher : typed_noop_remove <tree_hash_entry>\n+struct tree_entry_hasher : nofree_ptr_hash <tree_hash_entry>\n {\n-  typedef tree_hash_entry value_type;\n-  typedef tree_hash_entry compare_type;\n   static inline hashval_t hash (const value_type *);\n   static inline bool equal (const value_type *, const compare_type *);\n };"}, {"sha": "1463dd99fcfb17e5a92c93fd27e8f1a836b99a79", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -652,10 +652,8 @@ struct string_slot\n \n /* Hashtable helpers.  */\n \n-struct string_slot_hasher : typed_noop_remove <string_slot>\n+struct string_slot_hasher : nofree_ptr_hash <string_slot>\n {\n-  typedef string_slot *value_type;\n-  typedef string_slot *compare_type;\n   static inline hashval_t hash (const string_slot *);\n   static inline bool equal (const string_slot *, const string_slot *);\n };"}, {"sha": "08fb86d4049f087068fa17663141a1f07d26fc28", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lto.c (tree_scc_hasher): Inherit from nofree_ptr_hash rather\n+\tthan typed_noop_remove.  Remove redudant typedefs.\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* lto-lang.c: Do not include input.h, line-map.h or is-a.h."}, {"sha": "08234d8448cc20b3a91ab01c73326007db7cf845", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -937,10 +937,8 @@ struct tree_scc\n   tree entries[1];\n };\n \n-struct tree_scc_hasher : typed_noop_remove <tree_scc>\n+struct tree_scc_hasher : nofree_ptr_hash <tree_scc>\n {\n-  typedef tree_scc *value_type;\n-  typedef tree_scc *compare_type;\n   static inline hashval_t hash (const tree_scc *);\n   static inline bool equal (const tree_scc *, const tree_scc *);\n };"}, {"sha": "5d618ab1cd057c383d5c0fef6e6f5854446b17a3", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* objc-act.c (decl_name_hash): Inherit from nofree_ptr_hash rather\n+\tthan typed_noop_remove.  Remove redudant typedefs.\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* objc-act.c: Do not include input.h, line-map.h or is-a.h."}, {"sha": "53e50e55d64fae2d967cec7af71f9d212060f263", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -3856,10 +3856,8 @@ objc_get_class_ivars (tree class_name)\n    more like a set).  So, we store the DECLs, but define equality as\n    DECLs having the same name, and hash as the hash of the name.  */\n \n-struct decl_name_hash : typed_noop_remove <tree_node>\n+struct decl_name_hash : nofree_ptr_hash <tree_node>\n {\n-  typedef tree_node *value_type;\n-  typedef tree_node *compare_type;\n   static inline hashval_t hash (const tree_node *);\n   static inline bool equal (const tree_node *, const tree_node *);\n };"}, {"sha": "93e2e3a6a097cf6c3b50266b9c4b15e2d6fdf453", "filename": "gcc/plugin.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -55,10 +55,8 @@ const char **plugin_event_name = plugin_event_name_init;\n \n /* Event hashtable helpers.  */\n \n-struct event_hasher : typed_noop_remove <const char *>\n+struct event_hasher : nofree_ptr_hash <const char *>\n {\n-  typedef const char **value_type;\n-  typedef const char **compare_type;\n   static inline hashval_t hash (const char **);\n   static inline bool equal (const char **, const char **);\n };"}, {"sha": "a1ffdb4d632c78bf1d2f535ec42f265458d2ee18", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -120,10 +120,8 @@ struct expr\n \n /* Hashtable helpers.  */\n \n-struct expr_hasher : typed_noop_remove <expr>\n+struct expr_hasher : nofree_ptr_hash <expr>\n {\n-  typedef expr *value_type;\n-  typedef expr *compare_type;\n   static inline hashval_t hash (const expr *);\n   static inline bool equal (const expr *, const expr *);\n };"}, {"sha": "802c6004d4edaf929f74ec9fa027ecc4a50c527b", "filename": "gcc/store-motion.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fstore-motion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fstore-motion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -122,10 +122,8 @@ static struct edge_list *edge_list;\n \n /* Hashtable helpers.  */\n \n-struct st_expr_hasher : typed_noop_remove <st_expr>\n+struct st_expr_hasher : nofree_ptr_hash <st_expr>\n {\n-  typedef st_expr *value_type;\n-  typedef st_expr *compare_type;\n   static inline hashval_t hash (const st_expr *);\n   static inline bool equal (const st_expr *, const st_expr *);\n };"}, {"sha": "6a1a9f33be9e4b1ea425b335e99de76bae81db75", "filename": "gcc/tree-browser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-browser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-browser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-browser.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -104,7 +104,7 @@ static tree TB_history_prev (void);\n void browse_tree (tree);\n \n /* Hashtable helpers.  */\n-struct tree_upper_hasher : pointer_hash<tree_node>\n+struct tree_upper_hasher : nofree_ptr_hash<tree_node>\n {\n   static inline bool equal (const value_type &, const compare_type &);\n };"}, {"sha": "7cf9f7eb551addf3bab12aa1f4acd01675f24690", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -341,10 +341,8 @@ static hash_map<tree, auto_vec<access_p> > *base_access_vec;\n \n /* Candidate hash table helpers.  */\n \n-struct uid_decl_hasher : typed_noop_remove <tree_node>\n+struct uid_decl_hasher : nofree_ptr_hash <tree_node>\n {\n-  typedef tree_node *value_type;\n-  typedef tree_node *compare_type;\n   static inline hashval_t hash (const tree_node *);\n   static inline bool equal (const tree_node *, const tree_node *);\n };"}, {"sha": "496d84006fd7460245c739b0ba8be35fdb9cb47d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1972,7 +1972,7 @@ evaluate_stmt (gimple stmt)\n   return val;\n }\n \n-typedef hash_table<pointer_hash<gimple_statement_base> > gimple_htab;\n+typedef hash_table<nofree_ptr_hash<gimple_statement_base> > gimple_htab;\n \n /* Given a BUILT_IN_STACK_SAVE value SAVED_VAL, insert a clobber of VAR before\n    each matching BUILT_IN_STACK_RESTORE.  Mark visited phis in VISITED.  */"}, {"sha": "ee30c5ca9e81fec0a745650a5da00c424c1e1f13", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -69,10 +69,8 @@ typedef const struct coalesce_pair *const_coalesce_pair_p;\n \n /* Coalesce pair hashtable helpers.  */\n \n-struct coalesce_pair_hasher : typed_noop_remove <coalesce_pair>\n+struct coalesce_pair_hasher : nofree_ptr_hash <coalesce_pair>\n {\n-  typedef coalesce_pair *value_type;\n-  typedef coalesce_pair *compare_type;\n   static inline hashval_t hash (const coalesce_pair *);\n   static inline bool equal (const coalesce_pair *, const coalesce_pair *);\n };\n@@ -1239,10 +1237,8 @@ coalesce_partitions (var_map map, ssa_conflicts_p graph, coalesce_list_p cl,\n \n /* Hashtable support for storing SSA names hashed by their SSA_NAME_VAR.  */\n \n-struct ssa_name_var_hash : typed_noop_remove <tree_node>\n+struct ssa_name_var_hash : nofree_ptr_hash <tree_node>\n {\n-  typedef union tree_node *value_type;\n-  typedef union tree_node *compare_type;\n   static inline hashval_t hash (const tree_node *);\n   static inline int equal (const tree_node *, const tree_node *);\n };"}, {"sha": "45d969763940f90b049aa4ce62eb5fae2315b229", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -89,10 +89,8 @@ static void  verify_live_on_entry (tree_live_info_p);\n \n /* Hashtable helpers.  */\n \n-struct tree_int_map_hasher : typed_noop_remove <tree_int_map>\n+struct tree_int_map_hasher : nofree_ptr_hash <tree_int_map>\n {\n-  typedef tree_int_map *value_type;\n-  typedef tree_int_map *compare_type;\n   static inline hashval_t hash (const tree_int_map *);\n   static inline bool equal (const tree_int_map *, const tree_int_map *);\n };"}, {"sha": "477f373e89d6c08a35f378864486b0a330c884b9", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -159,9 +159,8 @@ typedef struct im_mem_ref\n \n /* Mem_ref hashtable helpers.  */\n \n-struct mem_ref_hasher : typed_noop_remove <im_mem_ref>\n+struct mem_ref_hasher : nofree_ptr_hash <im_mem_ref>\n {\n-  typedef im_mem_ref *value_type;\n   typedef tree_node *compare_type;\n   static inline hashval_t hash (const im_mem_ref *);\n   static inline bool equal (const im_mem_ref *, const tree_node *);"}, {"sha": "f766f9caf28a4974bd905edc803f01cc237e4c15", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -207,15 +207,13 @@ typedef union pre_expr_union_d\n   vn_reference_t reference;\n } pre_expr_union;\n \n-typedef struct pre_expr_d : typed_noop_remove <pre_expr_d>\n+typedef struct pre_expr_d : nofree_ptr_hash <pre_expr_d>\n {\n   enum pre_expr_kind kind;\n   unsigned int id;\n   pre_expr_union u;\n \n   /* hash_table support.  */\n-  typedef pre_expr_d *value_type;\n-  typedef pre_expr_d *compare_type;\n   static inline hashval_t hash (const pre_expr_d *);\n   static inline int equal (const pre_expr_d *, const pre_expr_d *);\n } *pre_expr;"}, {"sha": "fc8fbeeb08d415ed641db0bbb8429705c6fabeb9", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -137,9 +137,8 @@ static vn_lookup_kind default_vn_walk_kind;\n \n /* vn_nary_op hashtable helpers.  */\n \n-struct vn_nary_op_hasher : typed_noop_remove <vn_nary_op_s>\n+struct vn_nary_op_hasher : nofree_ptr_hash <vn_nary_op_s>\n {\n-  typedef vn_nary_op_s *value_type;\n   typedef vn_nary_op_s *compare_type;\n   static inline hashval_t hash (const vn_nary_op_s *);\n   static inline bool equal (const vn_nary_op_s *, const vn_nary_op_s *);"}, {"sha": "8e24c924cc20e6938b1a9b549cfa1e3369a1b863", "filename": "gcc/vtable-verify.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fvtable-verify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fvtable-verify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.c?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -282,10 +282,8 @@ registration_hasher::equal (const vtable_registration *p1,\n \n /* Hashtable definition and functions for vtbl_map_hash.  */\n \n-struct vtbl_map_hasher : typed_noop_remove <struct vtbl_map_node>\n+struct vtbl_map_hasher : nofree_ptr_hash <struct vtbl_map_node>\n {\n-  typedef struct vtbl_map_node *value_type;\n-  typedef struct vtbl_map_node *compare_type;\n   static inline hashval_t hash (const vtbl_map_node *);\n   static inline bool equal (const vtbl_map_node *, const vtbl_map_node *);\n };"}, {"sha": "dda6f069dba41a9a29e6ea65e8da7c09efb9f954", "filename": "gcc/vtable-verify.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fvtable-verify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/gcc%2Fvtable-verify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.h?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -55,10 +55,8 @@ struct vtable_registration\n   vec<unsigned> offsets;       /* The offsets array.                        */\n };\n \n-struct registration_hasher : typed_noop_remove <struct vtable_registration>\n+struct registration_hasher : nofree_ptr_hash <struct vtable_registration>\n {\n-  typedef struct vtable_registration *value_type;\n-  typedef struct vtable_registration *compare_type;\n   static inline hashval_t hash (const vtable_registration *);\n   static inline bool equal (const vtable_registration *,\n \t\t\t    const vtable_registration *);"}, {"sha": "aba33b9c1581123b2309550df7297d030a1ee9f7", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -1,3 +1,10 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* plugin.cc (string_hasher): Inherit from nofree_ptr_hash rather\n+\tthan typed_noop_remove.  Remove redudant typedefs.\n+\t(plugin_context): Use nofree_ptr_hash rather than pointer_hash.\n+\t(plugin_context::mark): Likewise.\n+\n 2015-05-13  Michael Haubenwallner  <michael.haubenwallner@ssi-schaefer.com>\n \n \t* Makefile.in: Regenerated with automake-1.11.6."}, {"sha": "4c268c32fe6a84d813e860b4458eaae43550778c", "filename": "libcc1/plugin.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67ee553dc97016a8248b95bfced8f7f5d06663/libcc1%2Fplugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67ee553dc97016a8248b95bfced8f7f5d06663/libcc1%2Fplugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fplugin.cc?ref=8d67ee553dc97016a8248b95bfced8f7f5d06663", "patch": "@@ -134,11 +134,8 @@ decl_addr_hasher::equal (const decl_addr_value *p1, const decl_addr_value *p2)\n \n \f\n \n-struct string_hasher : typed_noop_remove<const char>\n+struct string_hasher : nofree_ptr_hash<const char>\n {\n-  typedef const char *value_type;\n-  typedef const char *compare_type;\n-\n   static inline hashval_t hash (const char *s)\n   {\n     return htab_hash_string (s);\n@@ -176,7 +173,7 @@ struct plugin_context : public cc1_plugin::connection\n   hash_table<decl_addr_hasher> address_map;\n \n   // A collection of trees that are preserved for the GC.\n-  hash_table< pointer_hash<tree_node> > preserved;\n+  hash_table< nofree_ptr_hash<tree_node> > preserved;\n \n   // File name cache.\n   hash_table<string_hasher> file_names;\n@@ -245,9 +242,8 @@ plugin_context::mark ()\n       ggc_mark ((*it)->address);\n     }\n \n-  for (hash_table< pointer_hash<tree_node> >::iterator it = preserved.begin ();\n-       it != preserved.end ();\n-       ++it)\n+  for (hash_table< nofree_ptr_hash<tree_node> >::iterator\n+\t it = preserved.begin (); it != preserved.end (); ++it)\n     ggc_mark (&*it);\n }\n "}]}