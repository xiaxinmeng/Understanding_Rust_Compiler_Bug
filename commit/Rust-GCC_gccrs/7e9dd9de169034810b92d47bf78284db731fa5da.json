{"sha": "7e9dd9de169034810b92d47bf78284db731fa5da", "node_id": "C_kwDOANBUbNoAKDdlOWRkOWRlMTY5MDM0ODEwYjkyZDQ3YmY3ODI4NGRiNzMxZmE1ZGE", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-01-29T20:25:40Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-02-21T14:12:19Z"}, "message": "d: Only handle the left-to-right evaluation of a call expression during gimplify\n\nRemoves an unnecessary rewriting of the front-end AST during lowering.\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (d_build_call): Remove front-end expansion of\n\tside-effects in a call expression.\n\t* d-gimplify.cc (d_gimplify_call_expr): Gimplify the callee before its\n\targuments.", "tree": {"sha": "6a4ab0d6e1969dad90e6845d1d06545a22a69be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a4ab0d6e1969dad90e6845d1d06545a22a69be8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e9dd9de169034810b92d47bf78284db731fa5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9dd9de169034810b92d47bf78284db731fa5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9dd9de169034810b92d47bf78284db731fa5da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9dd9de169034810b92d47bf78284db731fa5da/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8063de4a8cde958c34fbd2af4a25080709263c74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8063de4a8cde958c34fbd2af4a25080709263c74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8063de4a8cde958c34fbd2af4a25080709263c74"}], "stats": {"total": 38, "additions": 12, "deletions": 26}, "files": [{"sha": "0e8e07366ee08c5a2bb5971214d311897e69260e", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9dd9de169034810b92d47bf78284db731fa5da/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9dd9de169034810b92d47bf78284db731fa5da/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=7e9dd9de169034810b92d47bf78284db731fa5da", "patch": "@@ -2172,7 +2172,6 @@ d_build_call (TypeFunction *tf, tree callable, tree object,\n \n   /* Build the argument list for the call.  */\n   vec <tree, va_gc> *args = NULL;\n-  tree saved_args = NULL_TREE;\n   bool noreturn_call = false;\n \n   /* If this is a delegate call or a nested function being called as\n@@ -2182,23 +2181,6 @@ d_build_call (TypeFunction *tf, tree callable, tree object,\n \n   if (arguments)\n     {\n-      /* First pass, evaluated expanded tuples in function arguments.  */\n-      for (size_t i = 0; i < arguments->length; ++i)\n-\t{\n-\tLagain:\n-\t  Expression *arg = (*arguments)[i];\n-\t  gcc_assert (arg->op != EXP::tuple);\n-\n-\t  if (arg->op == EXP::comma)\n-\t    {\n-\t      CommaExp *ce = arg->isCommaExp ();\n-\t      tree tce = build_expr (ce->e1);\n-\t      saved_args = compound_expr (saved_args, tce);\n-\t      (*arguments)[i] = ce->e2;\n-\t      goto Lagain;\n-\t    }\n-\t}\n-\n       const size_t nparams = tf->parameterList.length ();\n       /* if _arguments[] is the first argument.  */\n       const size_t varargs = tf->isDstyleVariadic ();\n@@ -2257,17 +2239,12 @@ d_build_call (TypeFunction *tf, tree callable, tree object,\n \t}\n     }\n \n-  /* Evaluate the callee before calling it.  */\n-  if (TREE_SIDE_EFFECTS (callee))\n-    {\n-      callee = d_save_expr (callee);\n-      saved_args = compound_expr (callee, saved_args);\n-    }\n-\n   /* If we saw a `noreturn` parameter, any unreachable argument evaluations\n      after it are discarded, as well as the function call itself.  */\n   if (noreturn_call)\n     {\n+      tree saved_args = NULL_TREE;\n+\n       if (TREE_SIDE_EFFECTS (callee))\n \tsaved_args = compound_expr (callee, saved_args);\n \n@@ -2297,7 +2274,7 @@ d_build_call (TypeFunction *tf, tree callable, tree object,\n       result = force_target_expr (result);\n     }\n \n-  return compound_expr (saved_args, result);\n+  return result;\n }\n \n /* Build and return the correct call to fmod depending on TYPE."}, {"sha": "04cb631244cda8e9a72b59d47c32b77bf99946ac", "filename": "gcc/d/d-gimplify.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9dd9de169034810b92d47bf78284db731fa5da/gcc%2Fd%2Fd-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9dd9de169034810b92d47bf78284db731fa5da/gcc%2Fd%2Fd-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-gimplify.cc?ref=7e9dd9de169034810b92d47bf78284db731fa5da", "patch": "@@ -162,6 +162,15 @@ d_gimplify_call_expr (tree *expr_p, gimple_seq *pre_p)\n   if (!has_side_effects)\n     return GS_UNHANDLED;\n \n+  /* Evaluate the callee before calling it.  */\n+  tree new_call_fn = CALL_EXPR_FN (*expr_p);\n+\n+  if (gimplify_expr (&new_call_fn, pre_p, NULL,\n+\t\t     is_gimple_call_addr, fb_rvalue) == GS_ERROR)\n+    return GS_ERROR;\n+\n+  CALL_EXPR_FN (*expr_p) = new_call_fn;\n+\n   /* Leave the last argument for gimplify_call_expr.  */\n   for (int i = 0; i < nargs - 1; i++)\n     {"}]}