{"sha": "03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "node_id": "C_kwDOANBUbNoAKDAzYmNlMWQwODQ3YmZmNTg3MGU4ZWQxODc5OWE4YjJjNmFiNDcyOGQ", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-24T22:17:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-24T23:23:18Z"}, "message": "gccrs: Fix ICE on parsing trait object missing dyn keyword\n\nTrait objects are not required to use the 'dyn' keyword though it is\ndepreciated in later editions/version of Rustc. This patch handles the case\nwhen we query the type for an HIR::Item which happens to be an HIR::Trait\nand return a trait object or error.\n\nFixes #2037\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-item.cc (TypeCheckItem::visit): return a TraitObject\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2037.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "42e7b59d60d990d90fc2bb10e242bfbf1e45627b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42e7b59d60d990d90fc2bb10e242bfbf1e45627b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bce1d0847bff5870e8ed18799a8b2c6ab4728d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c02b9135e54e181ea6bdd8892a243c50cb6c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c02b9135e54e181ea6bdd8892a243c50cb6c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c02b9135e54e181ea6bdd8892a243c50cb6c7a"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "c8265369556d36fc708cfae7c2038b59ce80ee40", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bce1d0847bff5870e8ed18799a8b2c6ab4728d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bce1d0847bff5870e8ed18799a8b2c6ab4728d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc?ref=03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "patch": "@@ -456,7 +456,17 @@ TypeCheckItem::visit (HIR::Module &module)\n void\n TypeCheckItem::visit (HIR::Trait &trait)\n {\n-  TraitResolver::Resolve (trait);\n+  TraitReference *trait_ref = TraitResolver::Resolve (trait);\n+  if (trait_ref->is_error ())\n+    {\n+      infered = new TyTy::ErrorType (trait.get_mappings ().get_hirid ());\n+      return;\n+    }\n+\n+  RustIdent ident{CanonicalPath::create_empty (), trait.get_locus ()};\n+  infered = new TyTy::DynamicObjectType (\n+    trait.get_mappings ().get_hirid (), ident,\n+    {TyTy::TypeBoundPredicate (*trait_ref, trait.get_locus ())});\n }\n \n void"}, {"sha": "ec27a0d10dcf1c2592b6c8df329e1ada980ce1cc", "filename": "gcc/testsuite/rust/compile/issue-2037.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bce1d0847bff5870e8ed18799a8b2c6ab4728d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2037.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bce1d0847bff5870e8ed18799a8b2c6ab4728d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2037.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2037.rs?ref=03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "patch": "@@ -0,0 +1,13 @@\n+trait Foo {\n+    fn bar(&mut self, other: &mut Foo);\n+}\n+\n+struct Baz;\n+\n+impl Foo for Baz {\n+    fn bar(&mut self, other: &Foo) {}\n+    // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"method .bar. has an incompatible type for trait .Foo.\" \"\" { target *-*-* } .-2 }\n+}\n+\n+fn main() {}"}]}