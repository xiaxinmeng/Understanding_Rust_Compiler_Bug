{"sha": "ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY3NmYwYjVmNmU2YTQxNDRmYWJiOWFlOTg0YTllZTlkY2FhMmQwOA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-09-12T16:27:47Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-09-12T16:27:47Z"}, "message": "Remove '*' from movsi/di/ti patterns\n\nRemove the remaining uses of '*' from the movsi/di/ti patterns.\nUsing '*' in alternatives is typically incorrect at it tells the register\nallocator to ignore those alternatives.  So remove these from all the\ninteger move patterns.  This removes unnecessary int to float moves, for\nexample gcc.target/aarch64/pr62178.c no longer generates a redundant fmov\nsince the w = m variant is now allowed.\n\n    gcc/\n\t* config/aarch64/aarch64.md (movsi_aarch64): Remove all '*'.\n\t(movdi_aarch64): Likewise.\n\t(movti_aarch64): Likewise.\n\nFrom-SVN: r252033", "tree": {"sha": "7c26e31da45770497211be9a1446f5a34d506638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c26e31da45770497211be9a1446f5a34d506638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08/comments", "author": null, "committer": null, "parents": [{"sha": "7d843469d535284337793796ae38ec67b44e1ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d843469d535284337793796ae38ec67b44e1ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d843469d535284337793796ae38ec67b44e1ef3"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "d73074d4b744ef2f082cfb9b8fba9047be253191", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08", "patch": "@@ -1,4 +1,10 @@\n-2017-09-02 Simon Wright <simon@pushface.org>\n+2017-09-12  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (movsi_aarch64): Remove all '*'.\n+\t(movdi_aarch64): Likewise.\n+\t(movti_aarch64): Likewise.\n+\n+2017-09-12 Simon Wright <simon@pushface.org>\n \n \tPR target/80204\n \t* config/darwin-driver.c (darwin_find_version_from_kernel): Eliminate\n@@ -15,16 +21,16 @@\n \n 2017-09-12  Carl Love  <cel@us.ibm.com>\n \n-        * config/rs6000/altivec.md (vec_widen_umult_even_v4si,\n+\t* config/rs6000/altivec.md (vec_widen_umult_even_v4si,\n \tvec_widen_smult_even_v4si): Add define expands for vmuleuw, vmulesw,\n \tvmulouw, vmulosw.\n-        * config/rs6000/rs6000-builtin.def (VMLEUW, VMULESW, VMULOUW,\n-        VMULOSW): Add definitions.\n-        * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n-        ALTIVEC_BUILTIN_VMULESW, ALTIVEC_BUILTIN_VMULEUW,\n-        ALTIVEC_BUILTIN_VMULOSW, ALTIVEC_BUILTIN_VMULOUW entries.\n-        * config/rs6000/rs6000.c (rs6000_gimple_fold_builtin,\n-        builtin_function_type): Add ALTIVEC_BUILTIN_* case statements.\n+\t* config/rs6000/rs6000-builtin.def (VMLEUW, VMULESW, VMULOUW,\n+\tVMULOSW): Add definitions.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\tALTIVEC_BUILTIN_VMULESW, ALTIVEC_BUILTIN_VMULEUW,\n+\tALTIVEC_BUILTIN_VMULOSW, ALTIVEC_BUILTIN_VMULOUW entries.\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin,\n+\tbuiltin_function_type): Add ALTIVEC_BUILTIN_* case statements.\n \n 2017-09-12  James Greenhalgh  <james.greenhalgh@arm.com>\n "}, {"sha": "f8cdb063546afaf3ca977d078da6417729af88a6", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=ff76f0b5f6e6a4144fabb9ae984a9ee9dcaa2d08", "patch": "@@ -932,8 +932,8 @@\n )\n \n (define_insn_and_split \"*movsi_aarch64\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r  ,*w, r,*w,w\")\n-\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,m, m,rZ,*w,Usa,Ush,rZ,w,*w,Ds\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,w, m, m,  r,  r, w,r,w, w\")\n+\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,m,m,rZ,*w,Usa,Ush,rZ,w,w,Ds\"))]\n   \"(register_operand (operands[0], SImode)\n     || aarch64_reg_or_zero (operands[1], SImode))\"\n   \"@\n@@ -966,8 +966,8 @@\n )\n \n (define_insn_and_split \"*movdi_aarch64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,r,*w,m,  m,r,r,  *w,r,*w,w\")\n-\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,M,n,m, m,rZ,*w,Usa,Ush,rZ,w,*w,Dd\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,r,w, m,m,  r,  r, w,r,w, w\")\n+\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,M,n,m,m,rZ,w,Usa,Ush,rZ,w,w,Dd\"))]\n   \"(register_operand (operands[0], DImode)\n     || aarch64_reg_or_zero (operands[1], DImode))\"\n   \"@\n@@ -1023,9 +1023,9 @@\n \n (define_insn \"*movti_aarch64\"\n   [(set (match_operand:TI 0\n-\t \"nonimmediate_operand\"  \"=r, *w,r ,*w,r,m,m,*w,m\")\n+\t \"nonimmediate_operand\"  \"=r, w,r,w,r,m,m,w,m\")\n \t(match_operand:TI 1\n-\t \"aarch64_movti_operand\" \" rn,r ,*w,*w,m,r,Z, m,*w\"))]\n+\t \"aarch64_movti_operand\" \" rn,r,w,w,m,r,Z,m,w\"))]\n   \"(register_operand (operands[0], TImode)\n     || aarch64_reg_or_zero (operands[1], TImode))\"\n   \"@"}]}