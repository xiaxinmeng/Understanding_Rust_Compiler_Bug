{"sha": "a51ef16068f350109187c28722c998509898fc54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxZWYxNjA2OGYzNTAxMDkxODdjMjg3MjJjOTk4NTA5ODk4ZmM1NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@cygnus.com", "date": "2000-05-18T04:41:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-18T04:41:24Z"}, "message": "mkcheck.in: Enable shared library testing.\n\n\n2000-05-17  Benjamin Kosnik  <bkoz@cygnus.com>\n\n\t* mkcheck.in: Enable shared library testing.\n\nFrom-SVN: r33975", "tree": {"sha": "495008f323e1070af0a847e8f2cdc75bdc8a7f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/495008f323e1070af0a847e8f2cdc75bdc8a7f92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51ef16068f350109187c28722c998509898fc54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51ef16068f350109187c28722c998509898fc54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51ef16068f350109187c28722c998509898fc54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51ef16068f350109187c28722c998509898fc54/comments", "author": null, "committer": null, "parents": [{"sha": "fda73e4137e774f0ccdb8bcd839f605745d6ab1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda73e4137e774f0ccdb8bcd839f605745d6ab1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda73e4137e774f0ccdb8bcd839f605745d6ab1b"}], "stats": {"total": 141, "additions": 87, "deletions": 54}, "files": [{"sha": "2a771ef8b0ce330c6ba323af13c21fbc72e592ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51ef16068f350109187c28722c998509898fc54/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51ef16068f350109187c28722c998509898fc54/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a51ef16068f350109187c28722c998509898fc54", "patch": "@@ -1,3 +1,7 @@\n+2000-05-17  Benjamin Kosnik  <bkoz@cygnus.com>\n+\n+\t* mkcheck.in: Enable shared library testing.\n+\n 2000-05-17  Nathan C. Myers  <ncm@cantrip.org>\n \n \t* bits/std_cmath.h: fix sqrt(float)"}, {"sha": "856b6d8c2aebd19ce5cf506d40109ba552bc4ebd", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 83, "deletions": 54, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51ef16068f350109187c28722c998509898fc54/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51ef16068f350109187c28722c998509898fc54/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=a51ef16068f350109187c28722c998509898fc54", "patch": "@@ -1,13 +1,16 @@\n #!/usr/bin/env bash\n \n-# 1999-07-19 bkoz \n-# Script to do automated testing and data collection for\n-# various test files, and avoid doing this on every test file.\n-# It attempts to collect some diagnostic info about size\n-# and speed that should be useful in the future as the library gets\n-# tuned for size and speed.\n+# 2000-05-17 bkoz \n \n-# invocation == mkcheck [01] (path to build) (path to src) (path to install)\n+# Script to do automated testing and data collection\n+# for various test files, so that we don't have to do this by hand on\n+# every test file.  It attempts to collect some diagnostic info about\n+# size and speed that should be useful in the future as the library\n+# gets tuned for size and speed. In addition, it tests static and\n+# shared linkage.\n+\n+# Invocation \n+# mkcheck [01] (path to build) (path to src) (path to install)\n \n if [ $# != 3 ] && [ $# != 4 ]; then\n     echo 'Usage: mkcheck 0 (path to build) (path to src)'\n@@ -71,7 +74,7 @@ fi\n CXX_FLAG=\"-g -DDEBUG_ASSERT \"\n \n # a specific flag to force the use of shared libraries, if any\n-SH_FLAG=\n+SH_FLAG=\"\"\n \n # a specific flag to force the use of static libraries, if any\n ST_FLAG=\"-static\"\n@@ -136,13 +139,13 @@ cp $SRC_DIR/testsuite/27_io/*.tst $TEST_DIR\n # Emit useful info about compiler and platform\n echo \"host: $(uname -mrsv)\" >> $RESULTS_FILE\n echo \"compiler: $($CXX --version)\" >> $RESULTS_FILE\n-echo \"compiler flags: $CXX_FLAG $ST_FLAG\" >> $RESULTS_FILE\n+echo \"compiler flags: $CXX_FLAG\" >> $RESULTS_FILE\n echo \"date: $(date +%Y%m%d)\" >> $RESULTS_FILE\n echo \"\" >> $RESULTS_FILE\n \n echo \"p == pass/fail execution test\" >> $RESULTS_FILE\n echo \"ctime == time to compile and link\" >> $RESULTS_FILE\n-echo \"etime == time for executable to run (take with salt)\" >> $RESULTS_FILE\n+echo \"etime == time for executable to run\" >> $RESULTS_FILE\n echo \"text == size of the executable text section\" >> $RESULTS_FILE\n echo \"data == size of the executable data section\" >> $RESULTS_FILE\n echo \"total == size of the executable\" >> $RESULTS_FILE\n@@ -158,13 +161,14 @@ echo \"\" >> $RESULTS_FILE\n #\n # 3: compile, link, execute, time\n #\n-for NAME in `cat $TESTS_FILE`\n-do\n-    echo \"$NAME\"\n-    PRE_NAME=\"$TEST_DIR/`basename $NAME`\"\n-    ST_NAME=\"`echo $PRE_NAME | sed 's/cc$/st-exe/'`\"\n-    SH_NAME=\"`echo $PRE_NAME | sed 's/cc$/sh-exe/'`\"\n-    CNAME=\"$SRC_DIR/testsuite/$NAME\"\n+# Abstract out the common code for compiling, linking, executing and printing.\n+test_file()\n+{\n+    # NB: S_FLAG has to be last argument because it may be null, and\n+    # error checking hasn't been invented yet.\n+    FILENAME=$1\n+    EXENAME=$2\n+    S_FLAG=$3\n \n     # This would be deliciously easy if GNU date's %s were always around.\n     # There are three ways to do this:  1) use the builtin 'time' like we\n@@ -174,8 +178,8 @@ do\n     # eventually have to calculate time_t anyhow.  Or 3) just grab two\n     # time_t's (no more overhead than grabbing two date(1)'s).\n     COMP_TIME_START=$($TEST_DIR/printnow)\n-    $CXX $CXX_FLAG $ST_FLAG $INC_PATH $LIB_PATH $CNAME \\\n-\t -o $ST_NAME 2>> $LOG_FILE\n+    $CXX $CXX_FLAG $S_FLAG $INC_PATH $LIB_PATH $FILENAME \\\n+\t -o $EXENAME 2>> $LOG_FILE\n     COMP_TIME_END=$($TEST_DIR/printnow)\n \n     if [ $COMP_TIME_START -lt $COMP_TIME_END ]; then\n@@ -184,41 +188,40 @@ do\n \tC_TIME=\"0\"\n     fi\n \n-    if [ -f $ST_NAME ]; then\n+    if [ -f $EXENAME ]; then\n         case @host_os@ in\n           *solaris*)\n             # These numbers seem to match up to text/data/total,\n             # although their meanings seem to be different.  Very\n             # important to not compare these numbers across platforms.\n-            ST_TEXT=\"$(size $ST_NAME | awk '{print $1}')\"\n-            ST_DATA=\"$(size $ST_NAME | awk '{print $3}')\"\n-            ST_SIZE=\"$(size $ST_NAME | awk '{print $7}')\"\n+            TEXT=\"$(size $EXENAME | awk '{print $1}')\"\n+            DATA=\"$(size $EXENAME | awk '{print $3}')\"\n+            SIZE=\"$(size $EXENAME | awk '{print $7}')\"\n             ;;\n           *)\n-            ST_TEXT=\"$(size -A $ST_NAME | grep text | awk '{print $2}')\"\n-            ST_DATA=\"$(size -A $ST_NAME | grep data | awk '{print $2}')\"\n-            ST_SIZE=\"$(size -A $ST_NAME | grep otal | awk '{print $2}')\"\n+            TEXT=\"$(size -A $EXENAME | grep text | awk '{print $2}')\"\n+            DATA=\"$(size -A $EXENAME | grep data | awk '{print $2}')\"\n+            SIZE=\"$(size -A $EXENAME | grep otal | awk '{print $2}')\"\n             ;;\n         esac\n \n         # Actually run the executable and time it . . .\n         TIMEFORMAT='timemark %R'\n-        E_TIME_TEXT=\"$(exec 2>&1; time $ST_NAME)\"\n+        E_TIME_TEXT=\"$(exec 2>&1; time $EXENAME)\"\n \tE_ABNORMAL_TERMINATION=$?\n         E_TIME=\"$(echo $E_TIME_TEXT | awk '{print $2}')\"\n         # joining those two commands does not work due to quoting problems:\n-        #E_TIME=\"$(exec 2>&1; time $ST_NAME | awk '{print $2}')\"\n+        #E_TIME=\"$(exec 2>&1; time $EXENAME | awk '{print $2}')\"\n         # this will work as a fallback on certain systems...?\n-        #E_TIME=$(exec 2>&1; time $ST_NAME | cut -d ' ' -f 2)\n+        #E_TIME=$(exec 2>&1; time $EXENAME | cut -d ' ' -f 2)\n  \n        if [ \"$E_ABNORMAL_TERMINATION\" -ne 0 ]; then\n-            ST_EXEC='-'\n-            echo \"st_fail\" | awk '{printf(\"\\t%s\\n\", $1)}'\n+            RESULT='-'\n \t    rm -f ./*core\n \t    # sometimes you want to save all core files for review:\n-\t    #mv ./core $ST_NAME.core\n+\t    #mv ./core $EXENAME.core\n \t    # sometimes the OS names core files as programname.core:\n-\t    #mv ./*core $ST_NAME.core\n+\t    #mv ./*core $EXENAME.core\n \telse\n \t    # XXX this should probably be a function? \n \n@@ -241,63 +244,84 @@ do\n \t    DIFF_FILE=\"`echo $PRE_NAME | sed 's/cc$/diff/'`\"\n \t    # construct wildcard names,ie for $NAME=filebuf.cc, makes\n \t    # \"filebuf*.tst\"\n-\t    ST_DATA_FILES=\"`echo $NAME | sed 's/\\.cc/\\*\\.tst/g'`\"\n+\t    DATA_FILES=\"`echo $NAME | sed 's/\\.cc/\\*\\.tst/g'`\"\n \t    # make sure there is at least one, then go\n \t    ST_E=\"`echo $NAME | sed 's/\\.cc/\\-1\\.tst/g'`\"\n \t    if [ -f $ST_E ]; then\n \t\t# list of actual files that match the wildcard above, ie\n \t\t# \"filebuf-1.tst\"\n-\t\tST_MATCH_LIST=\"`ls $ST_DATA_FILES`\"\n+\t\tST_MATCH_LIST=\"`ls $DATA_FILES`\"\n \t\tfor i in $ST_MATCH_LIST\n \t\t    do\n \t\t\t# ST_OUT_FILE is generated in the build directory.\n \t\t\tPRE_NAME2=\"$TEST_DIR/`basename $i`\"\n \t\t\tST_OUT_FILE=\"`echo $PRE_NAME2 | sed 's/tst$/txt/'`\"\n \t\t\tdiff $ST_OUT_FILE $i > $DIFF_FILE\n \t\t\tif [ -s $DIFF_FILE ]; then\n-\t\t\t    ST_EXEC=\"-\"\n-\t\t\t    echo \"st_fail\" | awk '{printf(\"\\t%s\\n\", $1)}'\n+\t\t\t    RESULT=\"-\"\n \t\t\t    echo \"$ST_OUT_FILE has some problems, dude\"\n \t\t\telse\n-\t\t\t    ST_EXEC=\"+\"\n-\t\t\t    echo \"st_pass\" | awk '{printf(\"\\t%s\\n\", $1)}'\n+\t\t\t    RESULT=\"+\"\n \t\t\tfi\n \t\t\trm $DIFF_FILE\n \t\t    done\n \t\telse\n \t\t    # the file does no output, and didn't abnormally\n \t\t    # terminate, so assume passed.\n-\t\t    ST_EXEC=\"+\"\n-\t\t    echo \"st_pass\" | awk '{printf(\"\\t%s\\t\", $1)}'\n+\t\t    RESULT=\"+\"\n \t\tfi\n \t    fi\n-\trm \"$ST_NAME\"\n+\trm \"$EXENAME\"\n \t# sometimes you want to save all failing exe files for review:\n-\t#if [ \"$ST_EXEC\" = \"+\" ]; then\n-\t#    rm \"$ST_NAME\"\n+\t#if [ \"$RESULT\" = \"+\" ]; then\n+\t#    rm \"$EXENAME\"\n \t#fi\n     else\n         # the file did not compile. Write out compilation info to the log file.\n-\techo \"$CXX $CXX_FLAG $ST_FLAG $INC_PATH $LIB_PATH $CNAME -o $ST_NAME\" \\\n+\techo \"$CXX $CXX_FLAG $ST_FLAG $INC_PATH $LIB_PATH $CNAME -o $EXENAME\" \\\n         2>> $LOG_FILE\n \n-\tST_EXEC=\"-\"\n-\techo \"st_fail\" | awk '{printf(\"\\t%s\\t\", $1)}'\n-\tST_TEXT=\"0\"\n-\tST_DATA=\"0\"\n-\tST_SIZE=\"0\"\n+\tRESULT=\"-\"\n+\tTEXT=\"0\"\n+\tDATA=\"0\"\n+\tSIZE=\"0\"\n     fi\n \n-    echo $ST_EXEC | awk '{printf (\"%.1s \", $1)}'>>$RESULTS_FILE\n+    echo $RESULT | awk '{printf(\"%s\\t\", $1)}'\n+    echo $RESULT | awk '{printf (\"%.1s \", $1)}'>>$RESULTS_FILE\n     echo $C_TIME $E_TIME |awk '{printf(\"%d\\t%.3f\\t\", $1, $2)}'>>$RESULTS_FILE\n-    echo $ST_TEXT $ST_DATA | awk '{printf(\"%s\\t%s\\t\", $1, $2)}'>>$RESULTS_FILE\n-    echo $ST_SIZE | awk '{printf(\"%s\\t\", $1)}'>>$RESULTS_FILE\n+    echo $TEXT $DATA | awk '{printf(\"%s\\t%s\\t\", $1, $2)}'>>$RESULTS_FILE\n+    echo $SIZE | awk '{printf(\"%s\\t\", $1)}'>>$RESULTS_FILE\n     echo $NAME | awk '{printf(\"%s\\n\", $1)}'>>$RESULTS_FILE\n+};    \n+\n+echo \"detailed test information in $RESULTS_FILE\"\n+echo \"------------------------------------------------------------------------\"\n+echo \"static\" | awk '{printf(\"%s\\t\", $1)}'\n+echo \"shared\" | awk '{printf(\"%s\\t\", $1)}'\n+echo \"test\" | awk '{printf(\"%s\\n\", $1)}'\n+echo \"------------------------------------------------------------------------\"\n+\n+TEST_TIME_START=$($TEST_DIR/printnow)\n+for NAME in `cat $TESTS_FILE`\n+do\n+    PRE_NAME=\"$TEST_DIR/`basename $NAME`\"\n+    ST_NAME=\"`echo $PRE_NAME | sed 's/cc$/st-exe/'`\"\n+    SH_NAME=\"`echo $PRE_NAME | sed 's/cc$/sh-exe/'`\"\n+    CNAME=\"$SRC_DIR/testsuite/$NAME\"\n+\n+    test_file $CNAME $ST_NAME $ST_FLAG \n+    test_file $CNAME $SH_NAME $SH_FLAG \n+    echo \"$NAME\" | awk '{printf(\"%s\\n\", $1)}'\n \n     echo \"\" >> $RESULTS_FILE\n-    echo \"\"\n done\n+TEST_TIME_END=$($TEST_DIR/printnow)\n \n+\n+#\n+# 4: summary\n+#\n # grep can count faster than we can...\n total_failures=$(egrep -c \"^\\-\" $RESULTS_FILE)\n total_successes=$(egrep -c \"^\\+\" $RESULTS_FILE)\n@@ -309,5 +333,10 @@ sed -e \"/^date:/a\\\\\n $resultstext\" $RESULTS_FILE > ${RESULTS_FILE}.tmp\n mv ${RESULTS_FILE}.tmp $RESULTS_FILE\n \n+if [ $TEST_TIME_START -lt $TEST_TIME_END ]; then\n+    TEST_TIME=$[ $TEST_TIME_END - $TEST_TIME_START ]\n+    echo \"testrun == $TEST_TIME\"\n+fi\n+\n exit 0\n "}]}