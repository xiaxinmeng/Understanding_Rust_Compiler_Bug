{"sha": "e78d8e5137ccd2a55617befdc052d1860e7f09f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4ZDhlNTEzN2NjZDJhNTU2MTdiZWZkYzA1MmQxODYwZTdmMDlmMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2001-08-13T15:56:51Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-13T15:56:51Z"}, "message": "expr.h: Split out optab- and libfunc-related code to...\n\n\t* expr.h: Split out optab- and libfunc-related code to...\n\t* optabs.h, libfuncs.h: ... these new headers.\n\n\t* Makefile.in (CONFIG_H, EXPR_H): Take out insn-codes.h.\n\t(OPTABS_H): New.\n\t(various .o rules): Add $(OPTABS_H) and/or libfuncs.h to\n\tdependencies.\n\t* mkconfig.sh: Don't include insn-codes.h from config.h.\n\n\t* reload.h: Use #ifdef GCC_INSN_CODES_H to decide whether\n\tenum insn_code is available.  Move reload_in_optab and\n\treload_out_optab array declarations to optabs.h.\n\t* regmove.c (gen_add3_insn): Move to optabs.c, export from\n\tthere, prototype in expr.h.\n\t* gencodes.c: Cleanup: zap global variables, don't use\n\tprintf where puts will do, don't bother defining MAX_INSN_CODE\n\twhich nothing uses, let CODE_FOR_nothing get its value implicitly.\n\n\t* genemit.c, genopinit.c: Include optabs.h in generated file.\n\t* genoutput.c: Include insn-codes.h in generated file.\n\t* builtins.c, caller-save.c, combine.c, doloop.c, explow.c,\n\texpmed.c, expr.c, function.c, ifcvt.c, loop.c, optabs.c, profile.c,\n\treload1.c, simplify-rtx.c, stmt.c, unroll.c, config/alpha/alpha.c,\n\tconfig/arm/arm.c, config/c4x/c4x.c, config/clipper/clipper.c,\n\tconfig/i386/i386.c, config/ia64/ia64.c, config/mn10300/mn10300.c,\n\tconfig/pj/pj.c, config/sh/sh.c, config/sparc/sparc.c:\n\tInclude optabs.h.\n\t* builtins.c, calls.c, dwarf2out.c, except.c, expr.c, function.c,\n\toptabs.c, stmt.c, config/c4x/c4x.c, config/clipper/clipper.c,\n\tconfig/m88k/m88k.c, config/sparc/sparc.c:\n\tInclude libfuncs.h.\n\t* reload.c: Include expr.h and optabs.h before reload.h.\n\t* config/alpha/alpha.c: Include tree.h before reload.h.\n\t* config/pa/pa.c: Include expr.h, optabs.h, libfuncs.h,\n\tand reload.h in that order.\n\t* config/sparc/sparc.c: Include debug.h.\n\t* recog.c: Include insn-codes.h.\n\ncp:\n\t* Make-lang.in (cp/except.o): Add libfuncs.h to dependencies.\n\t* except.c: Include libfuncs.h.\njava:\n\t* Make-lang.in (java/decl.o): Update dependencies.\n\t* decl.c: Include libfuncs.h, don't include toplev.h.\n\nFrom-SVN: r44858", "tree": {"sha": "0bf63396b6452b6ba1bd93f734ade1e7f708db6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf63396b6452b6ba1bd93f734ade1e7f708db6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e78d8e5137ccd2a55617befdc052d1860e7f09f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78d8e5137ccd2a55617befdc052d1860e7f09f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78d8e5137ccd2a55617befdc052d1860e7f09f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78d8e5137ccd2a55617befdc052d1860e7f09f1/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "050e4ca284c3028c7df662ba953be93f5b8fb47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050e4ca284c3028c7df662ba953be93f5b8fb47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050e4ca284c3028c7df662ba953be93f5b8fb47b"}], "stats": {"total": 1539, "additions": 844, "deletions": 695}, "files": [{"sha": "e5bc41615aa448aa9f889f816c340e4fed8d5c0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -1,3 +1,43 @@\n+2001-08-13  Zack Weinberg  <zackw@panix.com>\n+\n+\t* expr.h: Split out optab- and libfunc-related code to...\n+\t* optabs.h, libfuncs.h: ... these new headers.\n+\n+\t* Makefile.in (CONFIG_H, EXPR_H): Take out insn-codes.h.\n+\t(OPTABS_H): New.\n+\t(various .o rules): Add $(OPTABS_H) and/or libfuncs.h to\n+\tdependencies.\n+\t* mkconfig.sh: Don't include insn-codes.h from config.h.\n+\n+\t* reload.h: Use #ifdef GCC_INSN_CODES_H to decide whether\n+\tenum insn_code is available.  Move reload_in_optab and\n+\treload_out_optab array declarations to optabs.h.\n+\t* regmove.c (gen_add3_insn): Move to optabs.c, export from\n+\tthere, prototype in expr.h.\n+\t* gencodes.c: Cleanup: zap global variables, don't use\n+\tprintf where puts will do, don't bother defining MAX_INSN_CODE\n+\twhich nothing uses, let CODE_FOR_nothing get its value implicitly.\n+\n+\t* genemit.c, genopinit.c: Include optabs.h in generated file.\n+\t* genoutput.c: Include insn-codes.h in generated file.\n+\t* builtins.c, caller-save.c, combine.c, doloop.c, explow.c,\n+\texpmed.c, expr.c, function.c, ifcvt.c, loop.c, optabs.c, profile.c, \n+\treload1.c, simplify-rtx.c, stmt.c, unroll.c, config/alpha/alpha.c, \n+\tconfig/arm/arm.c, config/c4x/c4x.c, config/clipper/clipper.c,\n+\tconfig/i386/i386.c, config/ia64/ia64.c, config/mn10300/mn10300.c,\n+\tconfig/pj/pj.c, config/sh/sh.c, config/sparc/sparc.c:\n+\tInclude optabs.h.\n+\t* builtins.c, calls.c, dwarf2out.c, except.c, expr.c, function.c, \n+\toptabs.c, stmt.c, config/c4x/c4x.c, config/clipper/clipper.c,\n+\tconfig/m88k/m88k.c, config/sparc/sparc.c:\n+\tInclude libfuncs.h.\n+\t* reload.c: Include expr.h and optabs.h before reload.h.\n+\t* config/alpha/alpha.c: Include tree.h before reload.h.\n+\t* config/pa/pa.c: Include expr.h, optabs.h, libfuncs.h,\n+\tand reload.h in that order.\n+\t* config/sparc/sparc.c: Include debug.h.\n+\t* recog.c: Include insn-codes.h.\n+\n 2001-08-13  Andreas Jaeger  <aj@suse.de>\n \n \t* config.gcc: Use t-slibgcc-elf to build shared libgcc_s on"}, {"sha": "ba8ca46c0f02b9bb7a02ebd482fee1d460bab504", "filename": "gcc/Makefile.in", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -547,7 +547,7 @@ all: all.indirect\n # several files generated by those generators.\n GCONFIG_H = config.h $(host_xm_file_list)\n HCONFIG_H = hconfig.h $(build_xm_file_list)\n-CONFIG_H = $(GCONFIG_H) insn-constants.h insn-codes.h insn-flags.h\n+CONFIG_H = $(GCONFIG_H) insn-constants.h insn-flags.h\n TCONFIG_H = tconfig.h $(xm_file_list)\n TARGET_H = target.h\n TARGET_DEF_H = target-def.h\n@@ -561,7 +561,8 @@ TREE_H = tree.h real.h tree.def $(MACHMODE_H) tree-check.h version.h builtins.de\n BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n-EXPR_H = expr.h insn-codes.h\n+EXPR_H = expr.h\n+OPTABS_H = optabs.h insn-codes.h\n REGS_H = regs.h varray.h $(MACHMODE_H)\n INTEGRATE_H = integrate.h varray.h\n LOOP_H = loop.h varray.h bitmap.h\n@@ -1376,33 +1377,33 @@ varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    output.h c-pragma.h toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H)\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-   function.h $(EXPR_H) $(REGS_H) hard-reg-set.h \\\n+   function.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h hash.h $(GGC_H) $(TM_P_H)\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n-   insn-config.h hard-reg-set.h $(EXPR_H) except.h \\\n+   insn-config.h hard-reg-set.h $(EXPR_H) $(OPTABS_H) libfuncs.h except.h \\\n    $(LOOP_H) $(RECOG_H) toplev.h output.h varray.h $(GGC_H) $(TM_P_H)\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-   except.h function.h $(EXPR_H) integrate.h \\\n+   except.h function.h $(EXPR_H) libfuncs.h integrate.h \\\n    insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    dwarf2asm.h dwarf2out.h toplev.h $(HASHTAB_H) intl.h $(GGC_H)\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h function.h \\\n-   $(REGS_H) $(EXPR_H) insn-config.h $(RECOG_H) \\\n+   $(REGS_H) $(EXPR_H) $(OPTABS_H) libfuncs.h insn-config.h $(RECOG_H) \\\n    output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h except.h \\\n    reload.h $(GGC_H) intl.h $(TM_P_H)\n builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-   $(TARGET_H) function.h $(REGS_H) $(EXPR_H) insn-config.h \\\n+   $(TARGET_H) function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n-   except.h $(TM_P_H) $(PREDICT_H)\n+   except.h $(TM_P_H) $(PREDICT_H) libfuncs.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h $(EXPR_H) \\\n-   $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H)\n+   libfuncs.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H)\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h  \\\n-   insn-config.h $(EXPR_H) $(RECOG_H) real.h \\\n+   insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) real.h \\\n    toplev.h $(TM_P_H)\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-   hard-reg-set.h insn-config.h $(EXPR_H) $(RECOG_H) \\\n+   hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n    toplev.h function.h $(TM_P_H)\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h  \\\n-   insn-config.h $(EXPR_H) $(RECOG_H) reload.h \\\n+   insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(RECOG_H) reload.h \\\n    toplev.h $(GGC_H) real.h $(TM_P_H) except.h\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n     $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) \\\n@@ -1417,7 +1418,7 @@ dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n    debug.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf2.h \\\n    debug.h flags.h insn-config.h reload.h output.h diagnostic.h \\\n-   hard-reg-set.h $(REGS_H) $(EXPR_H) toplev.h dwarf2out.h varray.h \\\n+   hard-reg-set.h $(REGS_H) $(EXPR_H) libfuncs.h toplev.h dwarf2out.h varray.h \\\n    $(GGC_H) except.h dwarf2asm.h $(TM_P_H)\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\\n    output.h dwarf2asm.h $(TM_P_H)\n@@ -1438,7 +1439,7 @@ jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h hard-reg-set.h $(REGS_H\n \n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n-   output.h function.h $(GGC_H) $(OBSTACK_H) $(TM_P_H)\n+   $(OPTABS_H) output.h function.h $(GGC_H) $(OBSTACK_H) $(TM_P_H)\n cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n    output.h function.h cselib.h $(GGC_H) $(OBSTACK_H) $(TM_P_H)\n@@ -1469,23 +1470,24 @@ df.o : df.c $(CONFIG_H) system.h $(RTL_H) insn-config.h $(RECOG_H) \\\n conflict.o : conflict.c $(CONFIG_H) $(SYSTEM_H) $(OBSTACK_H) $(HASHTAB_H) \\\n    $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-   insn-config.h output.h $(REGS_H) $(EXPR_H) function.h \\\n+   insn-config.h output.h $(REGS_H) $(EXPR_H) $(OPTABS_H) function.h \\\n    gcov-io.h toplev.h $(GGC_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TARGET_H)\n-loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h $(LOOP_H) insn-config.h \\\n-   $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) real.h $(PREDICT_H) \\\n-   $(BASIC_BLOCK_H) function.h toplev.h varray.h except.h cselib.h $(TM_P_H)\n+loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h $(LOOP_H) \\\n+   insn-config.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) \\\n+   $(OPTABS_H) real.h $(PREDICT_H) $(BASIC_BLOCK_H) function.h \\\n+   toplev.h varray.h except.h cselib.h $(TM_P_H)\n doloop.o : doloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h $(LOOP_H) \\\n-   $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) toplev.h\n+   $(EXPR_H) $(OPTABS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) toplev.h\n unroll.o : unroll.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) insn-config.h function.h \\\n    $(INTEGRATE_H) $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) $(LOOP_H) toplev.h \\\n-   hard-reg-set.h varray.h $(BASIC_BLOCK_H) $(TM_P_H) $(PREDICT_H)\n+   hard-reg-set.h varray.h $(BASIC_BLOCK_H) $(TM_P_H) $(PREDICT_H) $(OPTABS_H)\n flow.o : flow.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    function.h except.h $(EXPR_H) ssa.h $(GGC_H) $(TM_P_H)\n dominance.o : dominance.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) hard-reg-set.h \\\n    $(BASIC_BLOCK_H)\n combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h function.h \\\n-   insn-config.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) \\\n+   insn-config.h $(INSN_ATTR_H) $(OPTABS_H) $(REGS_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h $(TM_P_H)\n regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) hard-reg-set.h flags.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(RECOG_H) reload.h real.h \\\n@@ -1501,16 +1503,16 @@ global.o : global.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h reload.h function.h\n    $(TM_P_H)\n varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) varray.h $(RTL_H) $(TREE_H) bitmap.h \\\n    errors.h\n-reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h output.h $(EXPR_H) \\\n-   reload.h $(RECOG_H) hard-reg-set.h insn-config.h $(REGS_H) \\\n-   function.h real.h toplev.h $(TM_P_H)\n-reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) real.h flags.h $(EXPR_H) \\\n-   reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n+reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h output.h \\\n+   $(EXPR_H) $(OPTABS_H) reload.h $(RECOG_H) hard-reg-set.h insn-config.h \\\n+   $(REGS_H) function.h real.h toplev.h $(TM_P_H)\n+reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) real.h flags.h \\\n+   $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) output.h function.h toplev.h cselib.h $(TM_P_H) \\\n    except.h\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h \\\n    $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) function.h \\\n-   $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H)\n+   $(RECOG_H) reload.h $(EXPR_H) $(OPTABS_H) toplev.h $(TM_P_H)\n reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) conditions.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(INSN_ATTR_H) \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H)\n@@ -1540,7 +1542,7 @@ final.o : final.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h intl.h \\\n    toplev.h reload.h dwarf2out.h $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) function.h $(BASIC_BLOCK_H) \\\n    $(REGS_H) $(RECOG_H) $(EXPR_H) hard-reg-set.h flags.h insn-config.h \\\n-   $(INSN_ATTR_H) real.h toplev.h output.h reload.h $(TM_P_H)\n+   $(INSN_ATTR_H) insn-codes.h real.h toplev.h output.h reload.h $(TM_P_H)\n reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) $(RECOG_H) \\\n    $(REGS_H) hard-reg-set.h flags.h insn-config.h toplev.h reload.h \\\n    varray.h function.h $(TM_P_H)\n@@ -1557,15 +1559,15 @@ regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) insn-config.h \\\n    resource.h $(OBSTACK_H) flags.h $(TM_P_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(REGS_H) toplev.h \\\n    flags.h insn-config.h function.h $(RECOG_H) $(BASIC_BLOCK_H) $(EXPR_H) \\\n-   output.h $(TM_P_H)\n+   $(OPTABS_H) output.h $(TM_P_H)\n dependence.o : dependence.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) \\\n    $(C_COMMON_H) flags.h varray.h $(EXPR_H)\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) $(PARAMS_H) toplev.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n-   output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(TARGET_H) \\\n-   $(TARGET_DEF_H) function.h sched-int.h $(TM_P_H)\n+   output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(TARGET_H) libfuncs.h \\\n+   $(TARGET_DEF_H) function.h sched-int.h $(TM_P_H) $(EXPR_H) $(OPTABS_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n \n@@ -1635,7 +1637,7 @@ s-constants : $(md_file) genconstants$(build_exeext) $(srcdir)/move-if-change\n \t$(STAMP) s-constants\n \n insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) $(EXPR_H) real.h output.h \\\n-  insn-config.h $(SYSTEM_H) reload.h $(RECOG_H) toplev.h \\\n+  insn-config.h $(OPTABS_H) $(SYSTEM_H) reload.h $(RECOG_H) toplev.h \\\n   function.h flags.h hard-reg-set.h resource.h $(TM_P_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c\n \n@@ -1657,7 +1659,7 @@ s-recog : $(md_file) genrecog$(build_exeext) $(srcdir)/move-if-change\n \t$(STAMP) s-recog\n \n insn-opinit.o : insn-opinit.c $(CONFIG_H) $(RTL_H) \\\n-  insn-config.h flags.h $(RECOG_H) $(EXPR_H) reload.h $(SYSTEM_H)\n+  insn-config.h flags.h $(RECOG_H) $(EXPR_H) $(OPTABS_H) reload.h $(SYSTEM_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-opinit.c\n \n insn-opinit.c: s-opinit ; @true"}, {"sha": "c427f57fa2d545d302a3e0014831df93aeec529f", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -32,6 +32,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"insn-config.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"recog.h\"\n #include \"output.h\"\n #include \"typeclass.h\""}, {"sha": "48153d07594f2d70e7ae7ab840092153335bd195", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n "}, {"sha": "8a2033316f48f60f6d01dbfcdab8a8fd956152d0", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"expr.h\"\n+#include \"libfuncs.h\"\n #include \"function.h\"\n #include \"regs.h\"\n #include \"toplev.h\""}, {"sha": "b6ea18b0abd693fbd4fb67cba30614322378ed96", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -86,6 +86,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n /* Include expr.h after insn-config.h so we get HAVE_conditional_move.  */\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"insn-attr.h\"\n #include \"recog.h\"\n #include \"real.h\""}, {"sha": "aa2f979a1b3a3ec87eaa840a646e91417608bff9", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"rtl.h\"\n+#include \"tree.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"real.h\"\n@@ -33,9 +34,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"flags.h\"\n #include \"recog.h\"\n-#include \"reload.h\"\n-#include \"tree.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"reload.h\"\n #include \"obstack.h\"\n #include \"except.h\"\n #include \"function.h\""}, {"sha": "265a79b034a40931132e8220bbf1c11b3eb65672", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"recog.h\"\n #include \"ggc.h\""}, {"sha": "f6c987b36b5e761a0a266b8c1ac713c085477450", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -37,6 +37,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"flags.h\"\n #include \"loop.h\"\n #include \"recog.h\""}, {"sha": "8104b859fceb795eb09dfd30c19b213d0b807774", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -32,6 +32,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"tree.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"c-tree.h\"\n #include \"function.h\"\n #include \"flags.h\""}, {"sha": "b182de41f805e14959e51a51aacd6d33d775a4ec", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -36,6 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"ggc.h\""}, {"sha": "d7474acffb07c0e41008c08a4e78e2945942a882", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"obstack.h\"\n #include \"except.h\"\n #include \"function.h\""}, {"sha": "c1b9a6b7c3499dd3b9609daf4fc46015240270fb", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"libfuncs.h\"\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"recog.h\""}, {"sha": "66c8e8d3c8a89dce5c891565e3f8cdfcd4f71000", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"function.h\"\n #include \"obstack.h\"\n #include \"toplev.h\""}, {"sha": "d4fe968008e2cd78a9cbb854bec5052fc76b3501", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -32,8 +32,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n-#include \"reload.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n+#include \"reload.h\"\n #include \"c-tree.h\"\n #include \"integrate.h\"\n #include \"function.h\""}, {"sha": "870960b0f9b2296828e1637834a6d0d2843094e5", "filename": "gcc/config/pj/pj.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fpj%2Fpj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fpj%2Fpj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -95,6 +95,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"ggc.h\""}, {"sha": "d643d9288b61bc82e0568e767df2943d67503949", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"function.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\""}, {"sha": "d47b985227ae044852bdb386fc2d36effca7a160", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -36,10 +36,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"recog.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n+#include \"debug.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n "}, {"sha": "b5f90a07ec7ecc4960066b64d109b0870e21501b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -1,3 +1,8 @@\n+2001-08-13  Zack Weinberg  <zackw@panix.com>\n+\n+\t* Make-lang.in (cp/except.o): Add libfuncs.h to dependencies.\n+\t* except.c: Include libfuncs.h.\n+\n 2001-08-11  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* decl.c (grokdeclarator): Clarify diagnostic message."}, {"sha": "b4794145df081a3dc6e5e7ddbbc76b1d968d1466", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -264,7 +264,7 @@ cp/tree.o: cp/tree.c $(CXX_TREE_H) flags.h toplev.h $(GGC_H) $(RTL_H) \\\n cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(SYSTEM_H)\n cp/rtti.o: cp/rtti.c $(CXX_TREE_H) flags.h toplev.h\n cp/except.o: cp/except.c $(CXX_TREE_H) flags.h $(RTL_H) except.h toplev.h \\\n-  cp/cfns.h $(EXPR_H) cp/decl.h $(OBSTACK_H)\n+  cp/cfns.h $(EXPR_H) libfuncs.h cp/decl.h $(OBSTACK_H)\n cp/expr.o: cp/expr.c $(CXX_TREE_H) $(RTL_H) flags.h $(EXPR_H) toplev.h \\\n   except.h $(TM_P_H)\n cp/xref.o: cp/xref.c $(CXX_TREE_H) input.h toplev.h"}, {"sha": "003c3e6e595679e011dcbecb25879d0cffcce967", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n+#include \"libfuncs.h\"\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"obstack.h\""}, {"sha": "6ccc53941a9dbe7635b2ece4734344a17afcb64c", "filename": "gcc/doloop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"loop.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\""}, {"sha": "711b1e3f018b4084170b19a4ee431c50d8af28b6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -47,6 +47,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"output.h\"\n #include \"expr.h\"\n+#include \"libfuncs.h\"\n #include \"except.h\"\n #include \"dwarf2.h\"\n #include \"dwarf2out.h\""}, {"sha": "b480f5f076d23c8ae1b5994b2318ea909e757614", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -54,6 +54,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"libfuncs.h\"\n #include \"insn-config.h\"\n #include \"except.h\"\n #include \"integrate.h\""}, {"sha": "0900a3f61dd563190528d784423be5905ba64c27", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"hard-reg-set.h\"\n #include \"insn-config.h\"\n #include \"recog.h\""}, {"sha": "830ef9e3ac3316117e536da8b3937eead9f37c1a", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"real.h\"\n #include \"recog.h\"\n "}, {"sha": "27ad3f62953012cdce326ca026d76665e9250469", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -33,6 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n /* Include expr.h after insn-config.h so we get HAVE_conditional_move.  */\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"output.h\""}, {"sha": "3a651b0eefb238dd84eec8aa68fe95b435e2d267", "filename": "gcc/expr.h", "status": "modified", "additions": 19, "deletions": 596, "changes": 615, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -253,577 +253,29 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n #define STACK_CHECK_MAX_VAR_SIZE (STACK_CHECK_MAX_FRAME_SIZE / 100)\n #endif\n \f\n-/* Optabs are tables saying how to generate insn bodies\n-   for various machine modes and numbers of operands.\n-   Each optab applies to one operation.\n-   For example, add_optab applies to addition.\n-\n-   The insn_code slot is the enum insn_code that says how to\n-   generate an insn for this operation on a particular machine mode.\n-   It is CODE_FOR_nothing if there is no such insn on the target machine.\n-\n-   The `lib_call' slot is the name of the library function that\n-   can be used to perform the operation.\n-\n-   A few optabs, such as move_optab and cmp_optab, are used\n-   by special code.  */\n-\n-typedef struct optab\n-{\n-  enum rtx_code code;\n-  struct {\n-    enum insn_code insn_code;\n-    rtx libfunc;\n-  } handlers [NUM_MACHINE_MODES];\n-} * optab;\n-\n-/* Given an enum insn_code, access the function to construct\n-   the body of that kind of insn.  */\n-#define GEN_FCN(CODE) (*insn_data[(int) (CODE)].genfun)\n-\n-/* Enumeration of valid indexes into optab_table.  */\n-enum optab_index\n-{\n-  OTI_add,\n-  OTI_addv,\n-  OTI_sub,\n-  OTI_subv,\n-\n-  /* Signed and fp multiply */\n-  OTI_smul,\n-  OTI_smulv,\n-  /* Signed multiply, return high word */\n-  OTI_smul_highpart,\n-  OTI_umul_highpart,\n-  /* Signed multiply with result one machine mode wider than args */\n-  OTI_smul_widen,\n-  OTI_umul_widen,\n-\n-  /* Signed divide */\n-  OTI_sdiv,\n-  OTI_sdivv,\n-  /* Signed divide-and-remainder in one */\n-  OTI_sdivmod,\n-  OTI_udiv,\n-  OTI_udivmod,\n-  /* Signed remainder */\n-  OTI_smod,\n-  OTI_umod,\n-  /* Optab for floating divide. */\n-  OTI_flodiv,\n-  /* Convert float to integer in float fmt */\n-  OTI_ftrunc,\n-\n-  /* Logical and */\n-  OTI_and,\n-  /* Logical or */\n-  OTI_ior,\n-  /* Logical xor */\n-  OTI_xor,\n-\n-  /* Arithmetic shift left */\n-  OTI_ashl,\n-  /* Logical shift right */\n-  OTI_lshr,  \n-  /* Arithmetic shift right */\n-  OTI_ashr,\n-  /* Rotate left */\n-  OTI_rotl,\n-  /* Rotate right */\n-  OTI_rotr,\n-  /* Signed and floating-point minimum value */\n-  OTI_smin,\n-  /* Signed and floating-point maximum value */\n-  OTI_smax,\n-  /* Unsigned minimum value */\n-  OTI_umin,\n-  /* Unsigned maximum value */\n-  OTI_umax,\n-\n-  /* Move instruction.  */\n-  OTI_mov,\n-  /* Move, preserving high part of register.  */\n-  OTI_movstrict,\n-\n-  /* Unary operations */\n-  /* Negation */\n-  OTI_neg,\n-  OTI_negv,\n-  /* Abs value */\n-  OTI_abs,\n-  OTI_absv,\n-  /* Bitwise not */\n-  OTI_one_cmpl,\n-  /* Find first bit set */\n-  OTI_ffs,\n-  /* Square root */\n-  OTI_sqrt,\n-  /* Sine */\n-  OTI_sin,\n-  /* Cosine */\n-  OTI_cos,\n-\n-  /* Compare insn; two operands.  */\n-  OTI_cmp,\n-  /* Used only for libcalls for unsigned comparisons.  */\n-  OTI_ucmp,\n-  /* tst insn; compare one operand against 0 */\n-  OTI_tst,\n-\n-  /* String length */\n-  OTI_strlen,\n-\n-  /* Combined compare & jump/store flags/move operations.  */\n-  OTI_cbranch,\n-  OTI_cmov,\n-  OTI_cstore,\n-    \n-  /* Push instruction.  */\n-  OTI_push,\n-\n-  OTI_MAX\n-};\n-\n-extern optab optab_table[OTI_MAX];\n-\n-#define add_optab (optab_table[OTI_add])\n-#define sub_optab (optab_table[OTI_sub])\n-#define smul_optab (optab_table[OTI_smul])\n-#define addv_optab (optab_table[OTI_addv])\n-#define subv_optab (optab_table[OTI_subv])\n-#define smul_highpart_optab (optab_table[OTI_smul_highpart])\n-#define umul_highpart_optab (optab_table[OTI_umul_highpart])\n-#define smul_widen_optab (optab_table[OTI_smul_widen])\n-#define umul_widen_optab (optab_table[OTI_umul_widen])\n-#define sdiv_optab (optab_table[OTI_sdiv])\n-#define smulv_optab (optab_table[OTI_smulv])\n-#define sdivv_optab (optab_table[OTI_sdivv])\n-#define sdivmod_optab (optab_table[OTI_sdivmod])\n-#define udiv_optab (optab_table[OTI_udiv])\n-#define udivmod_optab (optab_table[OTI_udivmod])\n-#define smod_optab (optab_table[OTI_smod])\n-#define umod_optab (optab_table[OTI_umod])\n-#define flodiv_optab (optab_table[OTI_flodiv])\n-#define ftrunc_optab (optab_table[OTI_ftrunc])\n-#define and_optab (optab_table[OTI_and])\n-#define ior_optab (optab_table[OTI_ior])\n-#define xor_optab (optab_table[OTI_xor])\n-#define ashl_optab (optab_table[OTI_ashl])\n-#define lshr_optab (optab_table[OTI_lshr])\n-#define ashr_optab (optab_table[OTI_ashr])\n-#define rotl_optab (optab_table[OTI_rotl])\n-#define rotr_optab (optab_table[OTI_rotr])\n-#define smin_optab (optab_table[OTI_smin])\n-#define smax_optab (optab_table[OTI_smax])\n-#define umin_optab (optab_table[OTI_umin])\n-#define umax_optab (optab_table[OTI_umax])\n-\n-#define mov_optab (optab_table[OTI_mov])\n-#define movstrict_optab (optab_table[OTI_movstrict])\n-\n-#define neg_optab (optab_table[OTI_neg])\n-#define negv_optab (optab_table[OTI_negv])\n-#define abs_optab (optab_table[OTI_abs])\n-#define absv_optab (optab_table[OTI_absv])\n-#define one_cmpl_optab (optab_table[OTI_one_cmpl])\n-#define ffs_optab (optab_table[OTI_ffs])\n-#define sqrt_optab (optab_table[OTI_sqrt])\n-#define sin_optab (optab_table[OTI_sin])\n-#define cos_optab (optab_table[OTI_cos])\n-\n-#define cmp_optab (optab_table[OTI_cmp])\n-#define ucmp_optab (optab_table[OTI_ucmp])\n-#define tst_optab (optab_table[OTI_tst])\n-\n-#define strlen_optab (optab_table[OTI_strlen])\n-\n-#define cbranch_optab (optab_table[OTI_cbranch])\n-#define cmov_optab (optab_table[OTI_cmov])\n-#define cstore_optab (optab_table[OTI_cstore])\n-#define push_optab (optab_table[OTI_push])\n-\n-/* Tables of patterns for extending one integer mode to another.  */\n-extern enum insn_code extendtab[MAX_MACHINE_MODE][MAX_MACHINE_MODE][2];\n-\n-/* Tables of patterns for converting between fixed and floating point. */\n-extern enum insn_code fixtab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n-extern enum insn_code fixtrunctab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n-extern enum insn_code floattab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n-\n-/* Contains the optab used for each rtx code.  */\n-extern optab code_to_optab[NUM_RTX_CODE + 1];\n-\n-/* Passed to expand_binop and expand_unop to say which options to try to use\n-   if the requested operation can't be open-coded on the requisite mode.\n-   Either OPTAB_LIB or OPTAB_LIB_WIDEN says try using a library call.\n-   Either OPTAB_WIDEN or OPTAB_LIB_WIDEN says try using a wider mode.\n-   OPTAB_MUST_WIDEN says try widening and don't try anything else.  */\n-\n-enum optab_methods\n-{\n-  OPTAB_DIRECT,\n-  OPTAB_LIB,\n-  OPTAB_WIDEN,\n-  OPTAB_LIB_WIDEN,\n-  OPTAB_MUST_WIDEN\n-};\n-\n-/* Enumeration of indexes into libfunc_table.  */\n-enum libfunc_index\n-{\n-  LTI_extendsfdf2,\n-  LTI_extendsfxf2,\n-  LTI_extendsftf2,\n-  LTI_extenddfxf2,\n-  LTI_extenddftf2,\n-\n-  LTI_truncdfsf2,\n-  LTI_truncxfsf2,\n-  LTI_trunctfsf2,\n-  LTI_truncxfdf2,\n-  LTI_trunctfdf2,\n-\n-  LTI_memcpy,\n-  LTI_memmove,\n-  LTI_bcopy,\n-  LTI_memcmp,\n-  LTI_bcmp,\n-  LTI_memset,\n-  LTI_bzero,\n-\n-  LTI_unwind_resume,\n-  LTI_eh_personality,\n-  LTI_setjmp,\n-  LTI_longjmp,\n-  LTI_unwind_sjlj_register,\n-  LTI_unwind_sjlj_unregister,\n-\n-  LTI_eqhf2,\n-  LTI_nehf2,\n-  LTI_gthf2,\n-  LTI_gehf2,\n-  LTI_lthf2,\n-  LTI_lehf2,\n-  LTI_unordhf2,\n-\n-  LTI_eqsf2,\n-  LTI_nesf2,\n-  LTI_gtsf2,\n-  LTI_gesf2,\n-  LTI_ltsf2,\n-  LTI_lesf2,\n-  LTI_unordsf2,\n-\n-  LTI_eqdf2,\n-  LTI_nedf2,\n-  LTI_gtdf2,\n-  LTI_gedf2,\n-  LTI_ltdf2,\n-  LTI_ledf2,\n-  LTI_unorddf2,\n-\n-  LTI_eqxf2,\n-  LTI_nexf2,\n-  LTI_gtxf2,\n-  LTI_gexf2,\n-  LTI_ltxf2,\n-  LTI_lexf2,\n-  LTI_unordxf2,\n-\n-  LTI_eqtf2,\n-  LTI_netf2,\n-  LTI_gttf2,\n-  LTI_getf2,\n-  LTI_lttf2,\n-  LTI_letf2,\n-  LTI_unordtf2,\n-\n-  LTI_floatsisf,\n-  LTI_floatdisf,\n-  LTI_floattisf,\n-\n-  LTI_floatsidf,\n-  LTI_floatdidf,\n-  LTI_floattidf,\n-\n-  LTI_floatsixf,\n-  LTI_floatdixf,\n-  LTI_floattixf,\n-\n-  LTI_floatsitf,\n-  LTI_floatditf,\n-  LTI_floattitf,\n-\n-  LTI_fixsfsi,\n-  LTI_fixsfdi,\n-  LTI_fixsfti,\n-\n-  LTI_fixdfsi,\n-  LTI_fixdfdi,\n-  LTI_fixdfti,\n-\n-  LTI_fixxfsi,\n-  LTI_fixxfdi,\n-  LTI_fixxfti,\n-\n-  LTI_fixtfsi,\n-  LTI_fixtfdi,\n-  LTI_fixtfti,\n-\n-  LTI_fixunssfsi,\n-  LTI_fixunssfdi,\n-  LTI_fixunssfti,\n-\n-  LTI_fixunsdfsi,\n-  LTI_fixunsdfdi,\n-  LTI_fixunsdfti,\n-\n-  LTI_fixunsxfsi,\n-  LTI_fixunsxfdi,\n-  LTI_fixunsxfti,\n-\n-  LTI_fixunstfsi,\n-  LTI_fixunstfdi,\n-  LTI_fixunstfti,\n-\n-  LTI_chkr_check_addr,\n-  LTI_chkr_set_right,\n-  LTI_chkr_copy_bitmap,\n-  LTI_chkr_check_exec,\n-  LTI_chkr_check_str,\n-\n-  LTI_profile_function_entry,\n-  LTI_profile_function_exit,\n-\n-  LTI_MAX\n-};\n-\n-/* SYMBOL_REF rtx's for the library functions that are called\n-   implicitly and not via optabs.  */\n-extern rtx libfunc_table[LTI_MAX];\n-\n-/* Accessor macros for libfunc_table.  */\n-#define extendsfdf2_libfunc\t(libfunc_table[LTI_extendsfdf2])\n-#define extendsfxf2_libfunc\t(libfunc_table[LTI_extendsfxf2])\n-#define extendsftf2_libfunc\t(libfunc_table[LTI_extendsftf2])\n-#define extenddfxf2_libfunc\t(libfunc_table[LTI_extenddfxf2])\n-#define extenddftf2_libfunc\t(libfunc_table[LTI_extenddftf2])\n-\n-#define truncdfsf2_libfunc\t(libfunc_table[LTI_truncdfsf2])\n-#define truncxfsf2_libfunc\t(libfunc_table[LTI_truncxfsf2])\n-#define trunctfsf2_libfunc\t(libfunc_table[LTI_trunctfsf2])\n-#define truncxfdf2_libfunc\t(libfunc_table[LTI_truncxfdf2])\n-#define trunctfdf2_libfunc\t(libfunc_table[LTI_trunctfdf2])\n-\n-#define memcpy_libfunc\t(libfunc_table[LTI_memcpy])\n-#define memmove_libfunc\t(libfunc_table[LTI_memmove])\n-#define bcopy_libfunc\t(libfunc_table[LTI_bcopy])\n-#define memcmp_libfunc\t(libfunc_table[LTI_memcmp])\n-#define bcmp_libfunc\t(libfunc_table[LTI_bcmp])\n-#define memset_libfunc\t(libfunc_table[LTI_memset])\n-#define bzero_libfunc\t(libfunc_table[LTI_bzero])\n-\n-#define unwind_resume_libfunc\t(libfunc_table[LTI_unwind_resume])\n-#define eh_personality_libfunc\t(libfunc_table[LTI_eh_personality])\n-#define setjmp_libfunc\t(libfunc_table[LTI_setjmp])\n-#define longjmp_libfunc\t(libfunc_table[LTI_longjmp])\n-#define unwind_sjlj_register_libfunc (libfunc_table[LTI_unwind_sjlj_register])\n-#define unwind_sjlj_unregister_libfunc \\\n-  (libfunc_table[LTI_unwind_sjlj_unregister])\n-\n-#define eqhf2_libfunc\t(libfunc_table[LTI_eqhf2])\n-#define nehf2_libfunc\t(libfunc_table[LTI_nehf2])\n-#define gthf2_libfunc\t(libfunc_table[LTI_gthf2])\n-#define gehf2_libfunc\t(libfunc_table[LTI_gehf2])\n-#define lthf2_libfunc\t(libfunc_table[LTI_lthf2])\n-#define lehf2_libfunc\t(libfunc_table[LTI_lehf2])\n-#define unordhf2_libfunc\t(libfunc_table[LTI_unordhf2])\n-\n-#define eqsf2_libfunc\t(libfunc_table[LTI_eqsf2])\n-#define nesf2_libfunc\t(libfunc_table[LTI_nesf2])\n-#define gtsf2_libfunc\t(libfunc_table[LTI_gtsf2])\n-#define gesf2_libfunc\t(libfunc_table[LTI_gesf2])\n-#define ltsf2_libfunc\t(libfunc_table[LTI_ltsf2])\n-#define lesf2_libfunc\t(libfunc_table[LTI_lesf2])\n-#define unordsf2_libfunc\t(libfunc_table[LTI_unordsf2])\n-\n-#define eqdf2_libfunc\t(libfunc_table[LTI_eqdf2])\n-#define nedf2_libfunc\t(libfunc_table[LTI_nedf2])\n-#define gtdf2_libfunc\t(libfunc_table[LTI_gtdf2])\n-#define gedf2_libfunc\t(libfunc_table[LTI_gedf2])\n-#define ltdf2_libfunc\t(libfunc_table[LTI_ltdf2])\n-#define ledf2_libfunc\t(libfunc_table[LTI_ledf2])\n-#define unorddf2_libfunc\t(libfunc_table[LTI_unorddf2])\n-\n-#define eqxf2_libfunc\t(libfunc_table[LTI_eqxf2])\n-#define nexf2_libfunc\t(libfunc_table[LTI_nexf2])\n-#define gtxf2_libfunc\t(libfunc_table[LTI_gtxf2])\n-#define gexf2_libfunc\t(libfunc_table[LTI_gexf2])\n-#define ltxf2_libfunc\t(libfunc_table[LTI_ltxf2])\n-#define lexf2_libfunc\t(libfunc_table[LTI_lexf2])\n-#define unordxf2_libfunc\t(libfunc_table[LTI_unordxf2])\n-\n-#define eqtf2_libfunc\t(libfunc_table[LTI_eqtf2])\n-#define netf2_libfunc\t(libfunc_table[LTI_netf2])\n-#define gttf2_libfunc\t(libfunc_table[LTI_gttf2])\n-#define getf2_libfunc\t(libfunc_table[LTI_getf2])\n-#define lttf2_libfunc\t(libfunc_table[LTI_lttf2])\n-#define letf2_libfunc\t(libfunc_table[LTI_letf2])\n-#define unordtf2_libfunc\t(libfunc_table[LTI_unordtf2])\n-\n-#define floatsisf_libfunc\t(libfunc_table[LTI_floatsisf])\n-#define floatdisf_libfunc\t(libfunc_table[LTI_floatdisf])\n-#define floattisf_libfunc\t(libfunc_table[LTI_floattisf])\n-\n-#define floatsidf_libfunc\t(libfunc_table[LTI_floatsidf])\n-#define floatdidf_libfunc\t(libfunc_table[LTI_floatdidf])\n-#define floattidf_libfunc\t(libfunc_table[LTI_floattidf])\n-\n-#define floatsixf_libfunc\t(libfunc_table[LTI_floatsixf])\n-#define floatdixf_libfunc\t(libfunc_table[LTI_floatdixf])\n-#define floattixf_libfunc\t(libfunc_table[LTI_floattixf])\n-\n-#define floatsitf_libfunc\t(libfunc_table[LTI_floatsitf])\n-#define floatditf_libfunc\t(libfunc_table[LTI_floatditf])\n-#define floattitf_libfunc\t(libfunc_table[LTI_floattitf])\n-\n-#define fixsfsi_libfunc\t(libfunc_table[LTI_fixsfsi])\n-#define fixsfdi_libfunc\t(libfunc_table[LTI_fixsfdi])\n-#define fixsfti_libfunc\t(libfunc_table[LTI_fixsfti])\n-\n-#define fixdfsi_libfunc\t(libfunc_table[LTI_fixdfsi])\n-#define fixdfdi_libfunc\t(libfunc_table[LTI_fixdfdi])\n-#define fixdfti_libfunc\t(libfunc_table[LTI_fixdfti])\n-\n-#define fixxfsi_libfunc\t(libfunc_table[LTI_fixxfsi])\n-#define fixxfdi_libfunc\t(libfunc_table[LTI_fixxfdi])\n-#define fixxfti_libfunc\t(libfunc_table[LTI_fixxfti])\n-\n-#define fixtfsi_libfunc\t(libfunc_table[LTI_fixtfsi])\n-#define fixtfdi_libfunc\t(libfunc_table[LTI_fixtfdi])\n-#define fixtfti_libfunc\t(libfunc_table[LTI_fixtfti])\n-\n-#define fixunssfsi_libfunc\t(libfunc_table[LTI_fixunssfsi])\n-#define fixunssfdi_libfunc\t(libfunc_table[LTI_fixunssfdi])\n-#define fixunssfti_libfunc\t(libfunc_table[LTI_fixunssfti])\n-\n-#define fixunsdfsi_libfunc\t(libfunc_table[LTI_fixunsdfsi])\n-#define fixunsdfdi_libfunc\t(libfunc_table[LTI_fixunsdfdi])\n-#define fixunsdfti_libfunc\t(libfunc_table[LTI_fixunsdfti])\n-\n-#define fixunsxfsi_libfunc\t(libfunc_table[LTI_fixunsxfsi])\n-#define fixunsxfdi_libfunc\t(libfunc_table[LTI_fixunsxfdi])\n-#define fixunsxfti_libfunc\t(libfunc_table[LTI_fixunsxfti])\n-\n-#define fixunstfsi_libfunc\t(libfunc_table[LTI_fixunstfsi])\n-#define fixunstfdi_libfunc\t(libfunc_table[LTI_fixunstfdi])\n-#define fixunstfti_libfunc\t(libfunc_table[LTI_fixunstfti])\n-\n-#define chkr_check_addr_libfunc\t(libfunc_table[LTI_chkr_check_addr])\n-#define chkr_set_right_libfunc\t(libfunc_table[LTI_chkr_set_right])\n-#define chkr_copy_bitmap_libfunc\t(libfunc_table[LTI_chkr_copy_bitmap])\n-#define chkr_check_exec_libfunc\t(libfunc_table[LTI_chkr_check_exec])\n-#define chkr_check_str_libfunc\t(libfunc_table[LTI_chkr_check_str])\n-\n-#define profile_function_entry_libfunc\t(libfunc_table[LTI_profile_function_entry])\n-#define profile_function_exit_libfunc\t(libfunc_table[LTI_profile_function_exit])\n-\f\n-typedef rtx (*rtxfun) PARAMS ((rtx));\n-\n-/* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n-   gives the gen_function to make a branch to test that condition.  */\n-\n-extern rtxfun bcc_gen_fctn[NUM_RTX_CODE];\n-\n-/* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n-   gives the insn code to make a store-condition insn\n-   to test that condition.  */\n-\n-extern enum insn_code setcc_gen_code[NUM_RTX_CODE];\n-\n-#ifdef HAVE_conditional_move\n-/* Indexed by the machine mode, gives the insn code to make a conditional\n-   move insn.  */\n-\n-extern enum insn_code movcc_gen_code[NUM_MACHINE_MODES];\n-#endif\n-\n-/* This array records the insn_code of insns to perform block moves.  */\n-extern enum insn_code movstr_optab[NUM_MACHINE_MODES];\n-\n-/* This array records the insn_code of insns to perform block clears.  */\n-extern enum insn_code clrstr_optab[NUM_MACHINE_MODES];\n-\n-/* Define functions given in optabs.c.  */\n-\n-/* Expand a binary operation given optab and rtx operands.  */\n-extern rtx expand_binop PARAMS ((enum machine_mode, optab, rtx, rtx, rtx,\n-\t\t\t\t int, enum optab_methods));\n-\n-/* Expand a binary operation with both signed and unsigned forms.  */\n-extern rtx sign_expand_binop PARAMS ((enum machine_mode, optab, optab, rtx,\n-\t\t\t\t      rtx, rtx, int, enum optab_methods));\n-\n-/* Generate code to perform an operation on two operands with two results.  */\n-extern int expand_twoval_binop PARAMS ((optab, rtx, rtx, rtx, rtx, int));\n-\n-/* Expand a unary arithmetic operation given optab rtx operand.  */\n-extern rtx expand_unop PARAMS ((enum machine_mode, optab, rtx, rtx, int));\n-\n-/* Expand the absolute value operation.  */\n-extern rtx expand_abs PARAMS ((enum machine_mode, rtx, rtx, int, int));\n-\n-/* Expand the complex absolute value operation.  */\n-extern rtx expand_complex_abs PARAMS ((enum machine_mode, rtx, rtx, int));\n-\n-/* Generate an instruction with a given INSN_CODE with an output and\n-   an input.  */\n-extern void emit_unop_insn PARAMS ((int, rtx, rtx, enum rtx_code));\n-\n-/* Emit code to perform a series of operations on a multi-word quantity, one\n-   word at a time.  */\n-extern rtx emit_no_conflict_block PARAMS ((rtx, rtx, rtx, rtx, rtx));\n+/* Functions from optabs.c, commonly used, and without need for the optabs\n+   tables:  */\n \n /* Emit code to make a call to a constant function or a library call. */\n extern void emit_libcall_block PARAMS ((rtx, rtx, rtx, rtx));\n \n-/* Emit one rtl instruction to store zero in specified rtx.  */\n-extern void emit_clr_insn PARAMS ((rtx));\n-\n-/* Emit one rtl insn to store 1 in specified rtx assuming it contains 0.  */\n-extern void emit_0_to_1_insn PARAMS ((rtx));\n-\n-/* Emit one rtl insn to compare two rtx's.  */\n-extern void emit_cmp_insn PARAMS ((rtx, rtx, enum rtx_code, rtx,\n-\t\t\t\t   enum machine_mode, int, unsigned int));\n+/* Create but don't emit one rtl instruction to perform certain operations.\n+   Modes must match; operands must meet the operation's predicates.\n+   Likewise for subtraction and for just copying.\n+   These do not call protect_from_queue; caller must do so.  */\n+extern rtx gen_add2_insn PARAMS ((rtx, rtx));\n+extern rtx gen_add3_insn PARAMS ((rtx, rtx, rtx));\n+extern rtx gen_sub2_insn PARAMS ((rtx, rtx));\n+extern rtx gen_move_insn PARAMS ((rtx, rtx));\n+extern int have_add2_insn PARAMS ((rtx, rtx));\n+extern int have_sub2_insn PARAMS ((rtx, rtx));\n \n /* Emit a pair of rtl insns to compare two rtx's and to jump \n    to a label if the comparison is true.  */\n extern void emit_cmp_and_jump_insns PARAMS ((rtx, rtx, enum rtx_code, rtx,\n \t\t\t\t\t     enum machine_mode, int,\n \t\t\t\t\t     unsigned int, rtx));\n \n-/* The various uses that a comparison can have; used by can_compare_p:\n-   jumps, conditional moves, store flag operations.  */\n-enum can_compare_purpose\n-{\n-  ccp_jump,\n-  ccp_cmov,\n-  ccp_store_flag\n-};\n-\n-/* Nonzero if a compare of mode MODE can be done straightforwardly\n-   (without splitting it into pieces).  */\n-extern int can_compare_p PARAMS ((enum rtx_code, enum machine_mode,\n-\t\t\t\t  enum can_compare_purpose));\n-\n-extern void prepare_cmp_insn PARAMS ((rtx *, rtx *, enum rtx_code *, rtx,\n-\t\t\t\t      enum machine_mode *, int *, int,\n-\t\t\t\t      enum can_compare_purpose));\n-\n-extern rtx prepare_operand PARAMS ((int, rtx, int, enum machine_mode,\n-\t\t\t\t    enum machine_mode, int));\n-\n /* Generate code to indirectly jump to a location given in the rtx LOC.  */\n extern void emit_indirect_jump PARAMS ((rtx));\n \n@@ -838,42 +290,6 @@ int can_conditionally_move_p PARAMS ((enum machine_mode mode));\n \n #endif\n \n-/* Create but don't emit one rtl instruction to add one rtx into another.\n-   Modes must match; operands must meet the operation's predicates.\n-   Likewise for subtraction and for just copying.\n-   These do not call protect_from_queue; caller must do so.  */\n-extern rtx gen_add2_insn PARAMS ((rtx, rtx));\n-extern rtx gen_sub2_insn PARAMS ((rtx, rtx));\n-extern rtx gen_move_insn PARAMS ((rtx, rtx));\n-extern int have_add2_insn PARAMS ((rtx, rtx));\n-extern int have_sub2_insn PARAMS ((rtx, rtx));\n-\n-/* Return the INSN_CODE to use for an extend operation.  */\n-extern enum insn_code can_extend_p PARAMS ((enum machine_mode,\n-\t\t\t\t\t    enum machine_mode, int));\n-\n-/* Generate the body of an insn to extend Y (with mode MFROM)\n-   into X (with mode MTO).  Do zero-extension if UNSIGNEDP is nonzero.  */\n-extern rtx gen_extend_insn PARAMS ((rtx, rtx, enum machine_mode,\n-\t\t\t\t    enum machine_mode, int));\n-\n-/* Initialize the tables that control conversion between fixed and\n-   floating values.  */\n-extern void init_fixtab PARAMS ((void));\n-extern void init_floattab PARAMS ((void));\n-\n-/* Generate code for a FLOAT_EXPR.  */\n-extern void expand_float PARAMS ((rtx, rtx, int));\n-\n-/* Generate code for a FIX_EXPR.  */\n-extern void expand_fix PARAMS ((rtx, rtx, int));\n-\n-/* Call this to initialize an optab function entry.  */\n-extern rtx init_one_libfunc PARAMS ((const char *));\n-\n-/* Call this once to initialize the contents of the optabs\n-   appropriately for the current target machine.  */\n-extern void init_optabs\tPARAMS ((void));\n \f\n /* Functions from expmed.c:  */\n \n@@ -1304,7 +720,14 @@ extern int safe_from_p PARAMS ((rtx, tree, int));\n extern int (*lang_safe_from_p) PARAMS ((rtx, tree));\n #endif\n \n+/* Call this once to initialize the contents of the optabs\n+   appropriately for the current target machine.  */\n+extern void init_optabs\t\t\t\tPARAMS ((void));\n extern void init_all_optabs\t\t\tPARAMS ((void));\n+\n+/* Call this to initialize an optab function entry.  */\n+extern rtx init_one_libfunc\t\t\tPARAMS ((const char *));\n+\n extern void do_jump_by_parts_equality_rtx\tPARAMS ((rtx, rtx, rtx));\n extern void do_jump_by_parts_greater_rtx\tPARAMS ((enum machine_mode,\n \t\t\t\t\t\t\t int, rtx, rtx, rtx,"}, {"sha": "450c400a4c5bc868edeef12ed7d470ab9ce8f554", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -46,6 +46,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"insn-config.h\""}, {"sha": "ffcd18762157c0f10b174cd5ef5c950e559fd208", "filename": "gcc/gencodes.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -28,20 +28,18 @@ Boston, MA 02111-1307, USA.  */\n #include \"errors.h\"\n #include \"gensupport.h\"\n \n-static int insn_code_number;\n-\n-static void gen_insn PARAMS ((rtx));\n+static void gen_insn PARAMS ((const char *, int));\n \n static void\n-gen_insn (insn)\n-     rtx insn;\n+gen_insn (name, code)\n+     const char *name;\n+     int code;\n {\n   /* Don't mention instructions whose names are the null string\n      or begin with '*'.  They are in the machine description just\n      to be recognized.  */\n-  if (XSTR (insn, 0)[0] != 0 && XSTR (insn, 0)[0] != '*')\n-    printf (\"  CODE_FOR_%s = %d,\\n\", XSTR (insn, 0),\n-\t    insn_code_number);\n+  if (name[0] != 0 && name[0] != '*')\n+    printf (\"  CODE_FOR_%s = %d,\\n\", name, code);\n }\n \n extern int main PARAMS ((int, char **));\n@@ -61,33 +59,34 @@ main (argc, argv)\n   if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n \n-  puts (\"/* Generated automatically by the program `gencodes'\");\n-  puts (\"   from the machine description file `md'.  */\\n\");\n-  puts (\"#ifndef GCC_INSN_CODES_H\");\n-  puts (\"#define GCC_INSN_CODES_H\\n\");\n+  puts (\"\\\n+/* Generated automatically by the program `gencodes'\\n\\\n+   from the machine description file `md'.  */\\n\\\n+\\n\\\n+#ifndef GCC_INSN_CODES_H\\n\\\n+#define GCC_INSN_CODES_H\\n\\\n+\\n\\\n+enum insn_code {\");\n \n   /* Read the machine description.  */\n \n-  insn_code_number = 0;\n-  printf (\"enum insn_code {\\n\");\n-\n   while (1)\n     {\n       int line_no;\n+      int insn_code_number;\n \n       desc = read_md_rtx (&line_no, &insn_code_number);\n       if (desc == NULL)\n \tbreak;\n \n       if (GET_CODE (desc) == DEFINE_INSN || GET_CODE (desc) == DEFINE_EXPAND)\n-\tgen_insn (desc);\n+\tgen_insn (XSTR (desc, 0), insn_code_number);\n     }\n \n-  printf (\"  CODE_FOR_nothing = %d };\\n\", insn_code_number + 1);\n-\n-  printf (\"\\n#define MAX_INSN_CODE ((int) CODE_FOR_nothing)\\n\\n\");\n-\n-  puts(\"\\n#endif /* GCC_INSN_CODES_H */\");\n+  puts (\"CODE_FOR_nothing\\n\\\n+};\\n\\\n+\\n\\\n+#endif /* GCC_INSN_CODES_H */\");\n \n   if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n     return FATAL_EXIT_CODE;"}, {"sha": "45a102ebf229dba08b84403c455c2f32354f8922", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -809,6 +809,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"tm_p.h\\\"\\n\");\n   printf (\"#include \\\"function.h\\\"\\n\");\n   printf (\"#include \\\"expr.h\\\"\\n\");\n+  printf (\"#include \\\"optabs.h\\\"\\n\");\n   printf (\"#include \\\"real.h\\\"\\n\");\n   printf (\"#include \\\"flags.h\\\"\\n\");\n   printf (\"#include \\\"output.h\\\"\\n\");"}, {"sha": "ee4dbf2fad91b59970f4aba84118a28dbcc8f345", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -330,6 +330,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"insn-config.h\\\"\\n\");\n   printf (\"#include \\\"recog.h\\\"\\n\");\n   printf (\"#include \\\"expr.h\\\"\\n\");\n+  printf (\"#include \\\"optabs.h\\\"\\n\");\n   printf (\"#include \\\"reload.h\\\"\\n\\n\");\n \n   printf (\"void\\ninit_all_optabs ()\\n{\\n\");"}, {"sha": "f44360514ed69cea83158eeac160757e5daaa1ed", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -223,6 +223,7 @@ output_prologue ()\n   printf (\"#include \\\"ggc.h\\\"\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\");\n   printf (\"#include \\\"expr.h\\\"\\n\");\n+  printf (\"#include \\\"insn-codes.h\\\"\\n\");\n   printf (\"#include \\\"tm_p.h\\\"\\n\");\n   printf (\"#include \\\"function.h\\\"\\n\");\n   printf (\"#include \\\"regs.h\\\"\\n\");"}, {"sha": "77d585c28a4933f30e58ccb004814907e07f6c1c", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -30,6 +30,7 @@\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"real.h\"\n #include \"output.h\"\n #include \"toplev.h\""}, {"sha": "c4589c3c26f5cb71a83f5441d245dfd272419bf1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -1,3 +1,8 @@\n+2001-08-13  Zack Weinberg  <zackw@panix.com>\n+\n+\t* Make-lang.in (java/decl.o): Update dependencies.\n+\t* decl.c: Include libfuncs.h, don't include toplev.h.\n+\n 2001-08-12  David Edelsohn  <edelsohn@gnu.org>\n \n \tRevert:"}, {"sha": "67ae036b163914a20f9eeb13fe35998bf33314f0", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -248,11 +248,12 @@ java/class.o: java/class.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\\n   java/parse.h toplev.h $(SYSTEM_H) output.h $(GGC_H) $(TARGET_H) function.h\n java/constants.o: java/constants.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   toplev.h $(SYSTEM_H) $(GGC_H)\n-java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n-  toplev.h $(SYSTEM_H) function.h gcc.h\n+java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\\n+  toplev.h flags.h $(SYSTEM_H) function.h expr.h libfuncs.h except.h \\\n+  java/java-except.h $(GGC_H)\n java/except.o: java/except.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n   $(RTL_H) java/javaop.h java/java-opcodes.h except.h java/java-except.h \\\n-  toplev.h $(SYSTEM_H) function.h\n+  toplev.h $(SYSTEM_H) function.h \n java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n   $(RTL_H) $(EXPR_H) java/javaop.h java/java-opcodes.h except.h \\\n   java/java-except.h java/java-except.h java/parse.h toplev.h \\"}, {"sha": "abb49fa5acf4917680e7753c37d66ad3494512bf", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -34,9 +34,9 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"flags.h\"\n #include \"java-tree.h\"\n #include \"jcf.h\"\n-#include \"toplev.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"libfuncs.h\"\n #include \"except.h\"\n #include \"java-except.h\"\n #include \"ggc.h\""}, {"sha": "c1e7eb1edada6ac3a872823218d0db8dc9f7c719", "filename": "gcc/libfuncs.h", "status": "added", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -0,0 +1,284 @@\n+/* Definitions for code generation pass of GNU compiler.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef GCC_LIBFUNCS_H\n+#define GCC_LIBFUNCS_H\n+\n+/* Enumeration of indexes into libfunc_table.  */\n+enum libfunc_index\n+{\n+  LTI_extendsfdf2,\n+  LTI_extendsfxf2,\n+  LTI_extendsftf2,\n+  LTI_extenddfxf2,\n+  LTI_extenddftf2,\n+\n+  LTI_truncdfsf2,\n+  LTI_truncxfsf2,\n+  LTI_trunctfsf2,\n+  LTI_truncxfdf2,\n+  LTI_trunctfdf2,\n+\n+  LTI_memcpy,\n+  LTI_memmove,\n+  LTI_bcopy,\n+  LTI_memcmp,\n+  LTI_bcmp,\n+  LTI_memset,\n+  LTI_bzero,\n+\n+  LTI_unwind_resume,\n+  LTI_eh_personality,\n+  LTI_setjmp,\n+  LTI_longjmp,\n+  LTI_unwind_sjlj_register,\n+  LTI_unwind_sjlj_unregister,\n+\n+  LTI_eqhf2,\n+  LTI_nehf2,\n+  LTI_gthf2,\n+  LTI_gehf2,\n+  LTI_lthf2,\n+  LTI_lehf2,\n+  LTI_unordhf2,\n+\n+  LTI_eqsf2,\n+  LTI_nesf2,\n+  LTI_gtsf2,\n+  LTI_gesf2,\n+  LTI_ltsf2,\n+  LTI_lesf2,\n+  LTI_unordsf2,\n+\n+  LTI_eqdf2,\n+  LTI_nedf2,\n+  LTI_gtdf2,\n+  LTI_gedf2,\n+  LTI_ltdf2,\n+  LTI_ledf2,\n+  LTI_unorddf2,\n+\n+  LTI_eqxf2,\n+  LTI_nexf2,\n+  LTI_gtxf2,\n+  LTI_gexf2,\n+  LTI_ltxf2,\n+  LTI_lexf2,\n+  LTI_unordxf2,\n+\n+  LTI_eqtf2,\n+  LTI_netf2,\n+  LTI_gttf2,\n+  LTI_getf2,\n+  LTI_lttf2,\n+  LTI_letf2,\n+  LTI_unordtf2,\n+\n+  LTI_floatsisf,\n+  LTI_floatdisf,\n+  LTI_floattisf,\n+\n+  LTI_floatsidf,\n+  LTI_floatdidf,\n+  LTI_floattidf,\n+\n+  LTI_floatsixf,\n+  LTI_floatdixf,\n+  LTI_floattixf,\n+\n+  LTI_floatsitf,\n+  LTI_floatditf,\n+  LTI_floattitf,\n+\n+  LTI_fixsfsi,\n+  LTI_fixsfdi,\n+  LTI_fixsfti,\n+\n+  LTI_fixdfsi,\n+  LTI_fixdfdi,\n+  LTI_fixdfti,\n+\n+  LTI_fixxfsi,\n+  LTI_fixxfdi,\n+  LTI_fixxfti,\n+\n+  LTI_fixtfsi,\n+  LTI_fixtfdi,\n+  LTI_fixtfti,\n+\n+  LTI_fixunssfsi,\n+  LTI_fixunssfdi,\n+  LTI_fixunssfti,\n+\n+  LTI_fixunsdfsi,\n+  LTI_fixunsdfdi,\n+  LTI_fixunsdfti,\n+\n+  LTI_fixunsxfsi,\n+  LTI_fixunsxfdi,\n+  LTI_fixunsxfti,\n+\n+  LTI_fixunstfsi,\n+  LTI_fixunstfdi,\n+  LTI_fixunstfti,\n+\n+  LTI_chkr_check_addr,\n+  LTI_chkr_set_right,\n+  LTI_chkr_copy_bitmap,\n+  LTI_chkr_check_exec,\n+  LTI_chkr_check_str,\n+\n+  LTI_profile_function_entry,\n+  LTI_profile_function_exit,\n+\n+  LTI_MAX\n+};\n+\n+/* SYMBOL_REF rtx's for the library functions that are called\n+   implicitly and not via optabs.  */\n+extern rtx libfunc_table[LTI_MAX];\n+\n+/* Accessor macros for libfunc_table.  */\n+#define extendsfdf2_libfunc\t(libfunc_table[LTI_extendsfdf2])\n+#define extendsfxf2_libfunc\t(libfunc_table[LTI_extendsfxf2])\n+#define extendsftf2_libfunc\t(libfunc_table[LTI_extendsftf2])\n+#define extenddfxf2_libfunc\t(libfunc_table[LTI_extenddfxf2])\n+#define extenddftf2_libfunc\t(libfunc_table[LTI_extenddftf2])\n+\n+#define truncdfsf2_libfunc\t(libfunc_table[LTI_truncdfsf2])\n+#define truncxfsf2_libfunc\t(libfunc_table[LTI_truncxfsf2])\n+#define trunctfsf2_libfunc\t(libfunc_table[LTI_trunctfsf2])\n+#define truncxfdf2_libfunc\t(libfunc_table[LTI_truncxfdf2])\n+#define trunctfdf2_libfunc\t(libfunc_table[LTI_trunctfdf2])\n+\n+#define memcpy_libfunc\t(libfunc_table[LTI_memcpy])\n+#define memmove_libfunc\t(libfunc_table[LTI_memmove])\n+#define bcopy_libfunc\t(libfunc_table[LTI_bcopy])\n+#define memcmp_libfunc\t(libfunc_table[LTI_memcmp])\n+#define bcmp_libfunc\t(libfunc_table[LTI_bcmp])\n+#define memset_libfunc\t(libfunc_table[LTI_memset])\n+#define bzero_libfunc\t(libfunc_table[LTI_bzero])\n+\n+#define unwind_resume_libfunc\t(libfunc_table[LTI_unwind_resume])\n+#define eh_personality_libfunc\t(libfunc_table[LTI_eh_personality])\n+#define setjmp_libfunc\t(libfunc_table[LTI_setjmp])\n+#define longjmp_libfunc\t(libfunc_table[LTI_longjmp])\n+#define unwind_sjlj_register_libfunc (libfunc_table[LTI_unwind_sjlj_register])\n+#define unwind_sjlj_unregister_libfunc \\\n+  (libfunc_table[LTI_unwind_sjlj_unregister])\n+\n+#define eqhf2_libfunc\t(libfunc_table[LTI_eqhf2])\n+#define nehf2_libfunc\t(libfunc_table[LTI_nehf2])\n+#define gthf2_libfunc\t(libfunc_table[LTI_gthf2])\n+#define gehf2_libfunc\t(libfunc_table[LTI_gehf2])\n+#define lthf2_libfunc\t(libfunc_table[LTI_lthf2])\n+#define lehf2_libfunc\t(libfunc_table[LTI_lehf2])\n+#define unordhf2_libfunc\t(libfunc_table[LTI_unordhf2])\n+\n+#define eqsf2_libfunc\t(libfunc_table[LTI_eqsf2])\n+#define nesf2_libfunc\t(libfunc_table[LTI_nesf2])\n+#define gtsf2_libfunc\t(libfunc_table[LTI_gtsf2])\n+#define gesf2_libfunc\t(libfunc_table[LTI_gesf2])\n+#define ltsf2_libfunc\t(libfunc_table[LTI_ltsf2])\n+#define lesf2_libfunc\t(libfunc_table[LTI_lesf2])\n+#define unordsf2_libfunc\t(libfunc_table[LTI_unordsf2])\n+\n+#define eqdf2_libfunc\t(libfunc_table[LTI_eqdf2])\n+#define nedf2_libfunc\t(libfunc_table[LTI_nedf2])\n+#define gtdf2_libfunc\t(libfunc_table[LTI_gtdf2])\n+#define gedf2_libfunc\t(libfunc_table[LTI_gedf2])\n+#define ltdf2_libfunc\t(libfunc_table[LTI_ltdf2])\n+#define ledf2_libfunc\t(libfunc_table[LTI_ledf2])\n+#define unorddf2_libfunc\t(libfunc_table[LTI_unorddf2])\n+\n+#define eqxf2_libfunc\t(libfunc_table[LTI_eqxf2])\n+#define nexf2_libfunc\t(libfunc_table[LTI_nexf2])\n+#define gtxf2_libfunc\t(libfunc_table[LTI_gtxf2])\n+#define gexf2_libfunc\t(libfunc_table[LTI_gexf2])\n+#define ltxf2_libfunc\t(libfunc_table[LTI_ltxf2])\n+#define lexf2_libfunc\t(libfunc_table[LTI_lexf2])\n+#define unordxf2_libfunc\t(libfunc_table[LTI_unordxf2])\n+\n+#define eqtf2_libfunc\t(libfunc_table[LTI_eqtf2])\n+#define netf2_libfunc\t(libfunc_table[LTI_netf2])\n+#define gttf2_libfunc\t(libfunc_table[LTI_gttf2])\n+#define getf2_libfunc\t(libfunc_table[LTI_getf2])\n+#define lttf2_libfunc\t(libfunc_table[LTI_lttf2])\n+#define letf2_libfunc\t(libfunc_table[LTI_letf2])\n+#define unordtf2_libfunc\t(libfunc_table[LTI_unordtf2])\n+\n+#define floatsisf_libfunc\t(libfunc_table[LTI_floatsisf])\n+#define floatdisf_libfunc\t(libfunc_table[LTI_floatdisf])\n+#define floattisf_libfunc\t(libfunc_table[LTI_floattisf])\n+\n+#define floatsidf_libfunc\t(libfunc_table[LTI_floatsidf])\n+#define floatdidf_libfunc\t(libfunc_table[LTI_floatdidf])\n+#define floattidf_libfunc\t(libfunc_table[LTI_floattidf])\n+\n+#define floatsixf_libfunc\t(libfunc_table[LTI_floatsixf])\n+#define floatdixf_libfunc\t(libfunc_table[LTI_floatdixf])\n+#define floattixf_libfunc\t(libfunc_table[LTI_floattixf])\n+\n+#define floatsitf_libfunc\t(libfunc_table[LTI_floatsitf])\n+#define floatditf_libfunc\t(libfunc_table[LTI_floatditf])\n+#define floattitf_libfunc\t(libfunc_table[LTI_floattitf])\n+\n+#define fixsfsi_libfunc\t(libfunc_table[LTI_fixsfsi])\n+#define fixsfdi_libfunc\t(libfunc_table[LTI_fixsfdi])\n+#define fixsfti_libfunc\t(libfunc_table[LTI_fixsfti])\n+\n+#define fixdfsi_libfunc\t(libfunc_table[LTI_fixdfsi])\n+#define fixdfdi_libfunc\t(libfunc_table[LTI_fixdfdi])\n+#define fixdfti_libfunc\t(libfunc_table[LTI_fixdfti])\n+\n+#define fixxfsi_libfunc\t(libfunc_table[LTI_fixxfsi])\n+#define fixxfdi_libfunc\t(libfunc_table[LTI_fixxfdi])\n+#define fixxfti_libfunc\t(libfunc_table[LTI_fixxfti])\n+\n+#define fixtfsi_libfunc\t(libfunc_table[LTI_fixtfsi])\n+#define fixtfdi_libfunc\t(libfunc_table[LTI_fixtfdi])\n+#define fixtfti_libfunc\t(libfunc_table[LTI_fixtfti])\n+\n+#define fixunssfsi_libfunc\t(libfunc_table[LTI_fixunssfsi])\n+#define fixunssfdi_libfunc\t(libfunc_table[LTI_fixunssfdi])\n+#define fixunssfti_libfunc\t(libfunc_table[LTI_fixunssfti])\n+\n+#define fixunsdfsi_libfunc\t(libfunc_table[LTI_fixunsdfsi])\n+#define fixunsdfdi_libfunc\t(libfunc_table[LTI_fixunsdfdi])\n+#define fixunsdfti_libfunc\t(libfunc_table[LTI_fixunsdfti])\n+\n+#define fixunsxfsi_libfunc\t(libfunc_table[LTI_fixunsxfsi])\n+#define fixunsxfdi_libfunc\t(libfunc_table[LTI_fixunsxfdi])\n+#define fixunsxfti_libfunc\t(libfunc_table[LTI_fixunsxfti])\n+\n+#define fixunstfsi_libfunc\t(libfunc_table[LTI_fixunstfsi])\n+#define fixunstfdi_libfunc\t(libfunc_table[LTI_fixunstfdi])\n+#define fixunstfti_libfunc\t(libfunc_table[LTI_fixunstfti])\n+\n+#define chkr_check_addr_libfunc\t(libfunc_table[LTI_chkr_check_addr])\n+#define chkr_set_right_libfunc\t(libfunc_table[LTI_chkr_set_right])\n+#define chkr_copy_bitmap_libfunc\t(libfunc_table[LTI_chkr_copy_bitmap])\n+#define chkr_check_exec_libfunc\t(libfunc_table[LTI_chkr_check_exec])\n+#define chkr_check_str_libfunc\t(libfunc_table[LTI_chkr_check_str])\n+\n+#define profile_function_entry_libfunc\t(libfunc_table[LTI_profile_function_entry])\n+#define profile_function_exit_libfunc\t(libfunc_table[LTI_profile_function_exit])\n+\n+#endif /* GCC_LIBFUNCS_H */"}, {"sha": "55fa91217629abcdc4ec11427e8bb26cb8ded846", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"insn-config.h\""}, {"sha": "7de903cbc5fb2944401a82934407e9c9e412921a", "filename": "gcc/mkconfig.sh", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fmkconfig.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fmkconfig.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkconfig.sh?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -51,9 +51,8 @@ done\n \n # If this is tm_p.h, include tm-preds.h unconditionally.\n # If this is tconfig.h or hconfig.h, include no more files.\n-# Otherwise, include insn-constants.h, insn-flags.h, and insn-codes.h,\n-# but only if GENERATOR_FILE is not defined. (The last of those is\n-# slated to be removed.)\n+# Otherwise, include insn-constants.h and insn-flags.h,\n+# but only if GENERATOR_FILE is not defined.\n case $output in\n     *tm_p.h)\n \techo \"#include \\\"tm-preds.h\\\"\"\n@@ -63,7 +62,6 @@ case $output in\n     *)\n \techo \"#ifndef GENERATOR_FILE\"\n \techo \"# include \\\"insn-constants.h\\\"\"\n-\techo \"# include \\\"insn-codes.h\\\"\"\n \techo \"# include \\\"insn-flags.h\\\"\"\n \techo \"#endif\"\n     ;;"}, {"sha": "285555392d9ceb094cafbb6265cace3f3ef5b2e8", "filename": "gcc/optabs.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -34,6 +34,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"except.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"ggc.h\"\n@@ -3738,7 +3740,7 @@ can_conditionally_move_p (mode)\n \n #endif /* HAVE_conditional_move */\n \f\n-/* These three functions generate an insn body and return it\n+/* These functions generate an insn body and return it\n    rather than emitting the insn.\n \n    They do not protect from queued increments,\n@@ -3764,6 +3766,26 @@ gen_add2_insn (x, y)\n   return (GEN_FCN (icode) (x, x, y));\n }\n \n+/* Generate and return an insn body to add r1 and c,\n+   storing the result in r0.  */\n+rtx\n+gen_add3_insn (r0, r1, c)\n+     rtx r0, r1, c;\n+{\n+  int icode = (int) add_optab->handlers[(int) GET_MODE (r0)].insn_code;\n+\n+    if (icode == CODE_FOR_nothing\n+      || ! ((*insn_data[icode].operand[0].predicate)\n+\t    (r0, insn_data[icode].operand[0].mode))\n+      || ! ((*insn_data[icode].operand[1].predicate)\n+\t    (r1, insn_data[icode].operand[1].mode))\n+      || ! ((*insn_data[icode].operand[2].predicate)\n+\t    (c, insn_data[icode].operand[2].mode)))\n+    return NULL_RTX;\n+\n+  return (GEN_FCN (icode) (r0, r1, c));\n+}\n+\n int\n have_add2_insn (x, y)\n      rtx x, y;"}, {"sha": "2f249c182db9c03ee38c88fdbda5aa4f67f993d6", "filename": "gcc/optabs.h", "status": "added", "additions": 355, "deletions": 0, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -0,0 +1,355 @@\n+/* Definitions for code generation pass of GNU compiler.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef GCC_OPTABS_H\n+#define GCC_OPTABS_H\n+\n+#include \"insn-codes.h\"\n+\n+/* Optabs are tables saying how to generate insn bodies\n+   for various machine modes and numbers of operands.\n+   Each optab applies to one operation.\n+   For example, add_optab applies to addition.\n+\n+   The insn_code slot is the enum insn_code that says how to\n+   generate an insn for this operation on a particular machine mode.\n+   It is CODE_FOR_nothing if there is no such insn on the target machine.\n+\n+   The `lib_call' slot is the name of the library function that\n+   can be used to perform the operation.\n+\n+   A few optabs, such as move_optab and cmp_optab, are used\n+   by special code.  */\n+\n+typedef struct optab\n+{\n+  enum rtx_code code;\n+  struct {\n+    enum insn_code insn_code;\n+    rtx libfunc;\n+  } handlers [NUM_MACHINE_MODES];\n+} * optab;\n+\n+/* Given an enum insn_code, access the function to construct\n+   the body of that kind of insn.  */\n+#define GEN_FCN(CODE) (*insn_data[(int) (CODE)].genfun)\n+\n+/* Enumeration of valid indexes into optab_table.  */\n+enum optab_index\n+{\n+  OTI_add,\n+  OTI_addv,\n+  OTI_sub,\n+  OTI_subv,\n+\n+  /* Signed and fp multiply */\n+  OTI_smul,\n+  OTI_smulv,\n+  /* Signed multiply, return high word */\n+  OTI_smul_highpart,\n+  OTI_umul_highpart,\n+  /* Signed multiply with result one machine mode wider than args */\n+  OTI_smul_widen,\n+  OTI_umul_widen,\n+\n+  /* Signed divide */\n+  OTI_sdiv,\n+  OTI_sdivv,\n+  /* Signed divide-and-remainder in one */\n+  OTI_sdivmod,\n+  OTI_udiv,\n+  OTI_udivmod,\n+  /* Signed remainder */\n+  OTI_smod,\n+  OTI_umod,\n+  /* Optab for floating divide. */\n+  OTI_flodiv,\n+  /* Convert float to integer in float fmt */\n+  OTI_ftrunc,\n+\n+  /* Logical and */\n+  OTI_and,\n+  /* Logical or */\n+  OTI_ior,\n+  /* Logical xor */\n+  OTI_xor,\n+\n+  /* Arithmetic shift left */\n+  OTI_ashl,\n+  /* Logical shift right */\n+  OTI_lshr,  \n+  /* Arithmetic shift right */\n+  OTI_ashr,\n+  /* Rotate left */\n+  OTI_rotl,\n+  /* Rotate right */\n+  OTI_rotr,\n+  /* Signed and floating-point minimum value */\n+  OTI_smin,\n+  /* Signed and floating-point maximum value */\n+  OTI_smax,\n+  /* Unsigned minimum value */\n+  OTI_umin,\n+  /* Unsigned maximum value */\n+  OTI_umax,\n+\n+  /* Move instruction.  */\n+  OTI_mov,\n+  /* Move, preserving high part of register.  */\n+  OTI_movstrict,\n+\n+  /* Unary operations */\n+  /* Negation */\n+  OTI_neg,\n+  OTI_negv,\n+  /* Abs value */\n+  OTI_abs,\n+  OTI_absv,\n+  /* Bitwise not */\n+  OTI_one_cmpl,\n+  /* Find first bit set */\n+  OTI_ffs,\n+  /* Square root */\n+  OTI_sqrt,\n+  /* Sine */\n+  OTI_sin,\n+  /* Cosine */\n+  OTI_cos,\n+\n+  /* Compare insn; two operands.  */\n+  OTI_cmp,\n+  /* Used only for libcalls for unsigned comparisons.  */\n+  OTI_ucmp,\n+  /* tst insn; compare one operand against 0 */\n+  OTI_tst,\n+\n+  /* String length */\n+  OTI_strlen,\n+\n+  /* Combined compare & jump/store flags/move operations.  */\n+  OTI_cbranch,\n+  OTI_cmov,\n+  OTI_cstore,\n+    \n+  /* Push instruction.  */\n+  OTI_push,\n+\n+  OTI_MAX\n+};\n+\n+extern optab optab_table[OTI_MAX];\n+\n+#define add_optab (optab_table[OTI_add])\n+#define sub_optab (optab_table[OTI_sub])\n+#define smul_optab (optab_table[OTI_smul])\n+#define addv_optab (optab_table[OTI_addv])\n+#define subv_optab (optab_table[OTI_subv])\n+#define smul_highpart_optab (optab_table[OTI_smul_highpart])\n+#define umul_highpart_optab (optab_table[OTI_umul_highpart])\n+#define smul_widen_optab (optab_table[OTI_smul_widen])\n+#define umul_widen_optab (optab_table[OTI_umul_widen])\n+#define sdiv_optab (optab_table[OTI_sdiv])\n+#define smulv_optab (optab_table[OTI_smulv])\n+#define sdivv_optab (optab_table[OTI_sdivv])\n+#define sdivmod_optab (optab_table[OTI_sdivmod])\n+#define udiv_optab (optab_table[OTI_udiv])\n+#define udivmod_optab (optab_table[OTI_udivmod])\n+#define smod_optab (optab_table[OTI_smod])\n+#define umod_optab (optab_table[OTI_umod])\n+#define flodiv_optab (optab_table[OTI_flodiv])\n+#define ftrunc_optab (optab_table[OTI_ftrunc])\n+#define and_optab (optab_table[OTI_and])\n+#define ior_optab (optab_table[OTI_ior])\n+#define xor_optab (optab_table[OTI_xor])\n+#define ashl_optab (optab_table[OTI_ashl])\n+#define lshr_optab (optab_table[OTI_lshr])\n+#define ashr_optab (optab_table[OTI_ashr])\n+#define rotl_optab (optab_table[OTI_rotl])\n+#define rotr_optab (optab_table[OTI_rotr])\n+#define smin_optab (optab_table[OTI_smin])\n+#define smax_optab (optab_table[OTI_smax])\n+#define umin_optab (optab_table[OTI_umin])\n+#define umax_optab (optab_table[OTI_umax])\n+\n+#define mov_optab (optab_table[OTI_mov])\n+#define movstrict_optab (optab_table[OTI_movstrict])\n+\n+#define neg_optab (optab_table[OTI_neg])\n+#define negv_optab (optab_table[OTI_negv])\n+#define abs_optab (optab_table[OTI_abs])\n+#define absv_optab (optab_table[OTI_absv])\n+#define one_cmpl_optab (optab_table[OTI_one_cmpl])\n+#define ffs_optab (optab_table[OTI_ffs])\n+#define sqrt_optab (optab_table[OTI_sqrt])\n+#define sin_optab (optab_table[OTI_sin])\n+#define cos_optab (optab_table[OTI_cos])\n+\n+#define cmp_optab (optab_table[OTI_cmp])\n+#define ucmp_optab (optab_table[OTI_ucmp])\n+#define tst_optab (optab_table[OTI_tst])\n+\n+#define strlen_optab (optab_table[OTI_strlen])\n+\n+#define cbranch_optab (optab_table[OTI_cbranch])\n+#define cmov_optab (optab_table[OTI_cmov])\n+#define cstore_optab (optab_table[OTI_cstore])\n+#define push_optab (optab_table[OTI_push])\n+\n+/* Tables of patterns for extending one integer mode to another.  */\n+extern enum insn_code extendtab[MAX_MACHINE_MODE][MAX_MACHINE_MODE][2];\n+\n+/* Tables of patterns for converting between fixed and floating point. */\n+extern enum insn_code fixtab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n+extern enum insn_code fixtrunctab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n+extern enum insn_code floattab[NUM_MACHINE_MODES][NUM_MACHINE_MODES][2];\n+\n+/* These arrays record the insn_code of insns that may be needed to\n+   perform input and output reloads of special objects.  They provide a\n+   place to pass a scratch register.  */\n+extern enum insn_code reload_in_optab[NUM_MACHINE_MODES];\n+extern enum insn_code reload_out_optab[NUM_MACHINE_MODES];\n+\n+/* Contains the optab used for each rtx code.  */\n+extern optab code_to_optab[NUM_RTX_CODE + 1];\n+\n+/* Passed to expand_binop and expand_unop to say which options to try to use\n+   if the requested operation can't be open-coded on the requisite mode.\n+   Either OPTAB_LIB or OPTAB_LIB_WIDEN says try using a library call.\n+   Either OPTAB_WIDEN or OPTAB_LIB_WIDEN says try using a wider mode.\n+   OPTAB_MUST_WIDEN says try widening and don't try anything else.  */\n+\n+enum optab_methods\n+{\n+  OPTAB_DIRECT,\n+  OPTAB_LIB,\n+  OPTAB_WIDEN,\n+  OPTAB_LIB_WIDEN,\n+  OPTAB_MUST_WIDEN\n+};\n+\n+\f\n+typedef rtx (*rtxfun) PARAMS ((rtx));\n+\n+/* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n+   gives the gen_function to make a branch to test that condition.  */\n+\n+extern rtxfun bcc_gen_fctn[NUM_RTX_CODE];\n+\n+/* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n+   gives the insn code to make a store-condition insn\n+   to test that condition.  */\n+\n+extern enum insn_code setcc_gen_code[NUM_RTX_CODE];\n+\n+#ifdef HAVE_conditional_move\n+/* Indexed by the machine mode, gives the insn code to make a conditional\n+   move insn.  */\n+\n+extern enum insn_code movcc_gen_code[NUM_MACHINE_MODES];\n+#endif\n+\n+/* This array records the insn_code of insns to perform block moves.  */\n+extern enum insn_code movstr_optab[NUM_MACHINE_MODES];\n+\n+/* This array records the insn_code of insns to perform block clears.  */\n+extern enum insn_code clrstr_optab[NUM_MACHINE_MODES];\n+\n+/* Define functions given in optabs.c.  */\n+\n+/* Expand a binary operation given optab and rtx operands.  */\n+extern rtx expand_binop PARAMS ((enum machine_mode, optab, rtx, rtx, rtx,\n+\t\t\t\t int, enum optab_methods));\n+\n+/* Expand a binary operation with both signed and unsigned forms.  */\n+extern rtx sign_expand_binop PARAMS ((enum machine_mode, optab, optab, rtx,\n+\t\t\t\t      rtx, rtx, int, enum optab_methods));\n+\n+/* Generate code to perform an operation on two operands with two results.  */\n+extern int expand_twoval_binop PARAMS ((optab, rtx, rtx, rtx, rtx, int));\n+\n+/* Expand a unary arithmetic operation given optab rtx operand.  */\n+extern rtx expand_unop PARAMS ((enum machine_mode, optab, rtx, rtx, int));\n+\n+/* Expand the absolute value operation.  */\n+extern rtx expand_abs PARAMS ((enum machine_mode, rtx, rtx, int, int));\n+\n+/* Expand the complex absolute value operation.  */\n+extern rtx expand_complex_abs PARAMS ((enum machine_mode, rtx, rtx, int));\n+\n+/* Generate an instruction with a given INSN_CODE with an output and\n+   an input.  */\n+extern void emit_unop_insn PARAMS ((int, rtx, rtx, enum rtx_code));\n+\n+/* Emit code to perform a series of operations on a multi-word quantity, one\n+   word at a time.  */\n+extern rtx emit_no_conflict_block PARAMS ((rtx, rtx, rtx, rtx, rtx));\n+\n+/* Emit one rtl instruction to store zero in specified rtx.  */\n+extern void emit_clr_insn PARAMS ((rtx));\n+\n+/* Emit one rtl insn to store 1 in specified rtx assuming it contains 0.  */\n+extern void emit_0_to_1_insn PARAMS ((rtx));\n+\n+/* Emit one rtl insn to compare two rtx's.  */\n+extern void emit_cmp_insn PARAMS ((rtx, rtx, enum rtx_code, rtx,\n+\t\t\t\t   enum machine_mode, int, unsigned int));\n+\n+/* The various uses that a comparison can have; used by can_compare_p:\n+   jumps, conditional moves, store flag operations.  */\n+enum can_compare_purpose\n+{\n+  ccp_jump,\n+  ccp_cmov,\n+  ccp_store_flag\n+};\n+\n+/* Nonzero if a compare of mode MODE can be done straightforwardly\n+   (without splitting it into pieces).  */\n+extern int can_compare_p PARAMS ((enum rtx_code, enum machine_mode,\n+\t\t\t\t  enum can_compare_purpose));\n+\n+extern void prepare_cmp_insn PARAMS ((rtx *, rtx *, enum rtx_code *, rtx,\n+\t\t\t\t      enum machine_mode *, int *, int,\n+\t\t\t\t      enum can_compare_purpose));\n+\n+extern rtx prepare_operand PARAMS ((int, rtx, int, enum machine_mode,\n+\t\t\t\t    enum machine_mode, int));\n+\n+/* Return the INSN_CODE to use for an extend operation.  */\n+extern enum insn_code can_extend_p PARAMS ((enum machine_mode,\n+\t\t\t\t\t    enum machine_mode, int));\n+\n+/* Generate the body of an insn to extend Y (with mode MFROM)\n+   into X (with mode MTO).  Do zero-extension if UNSIGNEDP is nonzero.  */\n+extern rtx gen_extend_insn PARAMS ((rtx, rtx, enum machine_mode,\n+\t\t\t\t    enum machine_mode, int));\n+\n+/* Initialize the tables that control conversion between fixed and\n+   floating values.  */\n+extern void init_fixtab PARAMS ((void));\n+extern void init_floattab PARAMS ((void));\n+\n+/* Generate code for a FLOAT_EXPR.  */\n+extern void expand_float PARAMS ((rtx, rtx, int));\n+\n+/* Generate code for a FIX_EXPR.  */\n+extern void expand_fix PARAMS ((rtx, rtx, int));\n+\n+#endif /* GCC_OPTABS_H */"}, {"sha": "39b259f38709b35a777e5501b137c1358c430295", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -42,6 +42,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"regs.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"function.h\"\n #include \"toplev.h\"\n #include \"ggc.h\""}, {"sha": "f2e046f3a83a188d44438879d5aafb9b10146fd0", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"regs.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"function.h\"\n #include \"flags.h\"\n #include \"real.h\""}, {"sha": "de8e3e4380ed1e2fdbade96f7f74988797f3ac6d", "filename": "gcc/regmove.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -55,7 +55,6 @@ static int perhaps_ends_bb_p\tPARAMS ((rtx));\n static int optimize_reg_copy_1\tPARAMS ((rtx, rtx, rtx));\n static void optimize_reg_copy_2\tPARAMS ((rtx, rtx, rtx));\n static void optimize_reg_copy_3\tPARAMS ((rtx, rtx, rtx));\n-static rtx gen_add3_insn\tPARAMS ((rtx, rtx, rtx));\n static void copy_src_to_dest\tPARAMS ((rtx, rtx, rtx, int));\n static int *regmove_bb_head;\n \n@@ -94,27 +93,6 @@ regclass_compatible_p (class0, class1)\n \t      && ! CLASS_LIKELY_SPILLED_P (class1)));\n }\n \n-/* Generate and return an insn body to add r1 and c,\n-   storing the result in r0.  */\n-static rtx\n-gen_add3_insn (r0, r1, c)\n-     rtx r0, r1, c;\n-{\n-  int icode = (int) add_optab->handlers[(int) GET_MODE (r0)].insn_code;\n-\n-    if (icode == CODE_FOR_nothing\n-      || ! ((*insn_data[icode].operand[0].predicate)\n-\t    (r0, insn_data[icode].operand[0].mode))\n-      || ! ((*insn_data[icode].operand[1].predicate)\n-\t    (r1, insn_data[icode].operand[1].mode))\n-      || ! ((*insn_data[icode].operand[2].predicate)\n-\t    (c, insn_data[icode].operand[2].mode)))\n-    return NULL_RTX;\n-\n-  return (GEN_FCN (icode) (r0, r1, c));\n-}\n-\n-\n /* INC_INSN is an instruction that adds INCREMENT to REG.\n    Try to fold INC_INSN as a post/pre in/decrement into INSN.\n    Iff INC_INSN_SET is nonzero, inc_insn has a destination different from src."}, {"sha": "989c224d280f55858feb888753854b8dd7f6fada", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -91,6 +91,8 @@ a register with any other reload.  */\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"insn-config.h\"\n+#include \"expr.h\"\n+#include \"optabs.h\"\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"regs.h\"\n@@ -99,7 +101,6 @@ a register with any other reload.  */\n #include \"real.h\"\n #include \"output.h\"\n #include \"function.h\"\n-#include \"expr.h\"\n #include \"toplev.h\"\n \n #ifndef REGISTER_MOVE_COST"}, {"sha": "32ddfe5d5646b93174fb95f8f2dc819fe5ec048f", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -82,7 +82,7 @@ enum reload_type\n   RELOAD_OTHER, RELOAD_FOR_OTHER_ADDRESS\n };\n \n-#ifdef MAX_INSN_CODE\n+#ifdef GCC_INSN_CODES_H\n /* Each reload is recorded with a structure like this.  */\n struct reload\n {\n@@ -192,14 +192,6 @@ extern char double_reg_address_ok;\n \n extern int num_not_at_initial_offset;\n \n-#ifdef MAX_INSN_CODE\n-/* These arrays record the insn_code of insns that may be needed to\n-   perform input and output reloads of special objects.  They provide a\n-   place to pass a scratch register.  */\n-extern enum insn_code reload_in_optab[];\n-extern enum insn_code reload_out_optab[];\n-#endif\n-\n struct needs\n {\n   /* [0] is normal, [1] is nongroup.  */"}, {"sha": "02f4aa518039b40d4d4e5f4c4e3173392a7dd1df", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"regs.h\"\n #include \"basic-block.h\"\n #include \"reload.h\""}, {"sha": "a29e4850f89c06c4c63f0999488abc3d7e2754a2", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\""}, {"sha": "593fe4de4dac2029438ba158d6ed9a07388d011d", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -44,6 +44,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"insn-config.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"libfuncs.h\"\n #include \"hard-reg-set.h\"\n #include \"obstack.h\"\n #include \"loop.h\""}, {"sha": "f888089da9fdd4c17ca3a6cec075109371575766", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8e5137ccd2a55617befdc052d1860e7f09f1/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=e78d8e5137ccd2a55617befdc052d1860e7f09f1", "patch": "@@ -163,6 +163,7 @@ enum unroll_types\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"loop.h\"\n #include \"toplev.h\"\n #include \"hard-reg-set.h\""}]}