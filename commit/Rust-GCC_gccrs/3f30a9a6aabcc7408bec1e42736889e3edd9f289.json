{"sha": "3f30a9a6aabcc7408bec1e42736889e3edd9f289", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzMGE5YTZhYWJjYzc0MDhiZWMxZTQyNzM2ODg5ZTNlZGQ5ZjI4OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-07-10T08:23:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-07-10T08:23:39Z"}, "message": "Add VEC_WIDEN_MULT_EVEN/ODD_EXPR\n\n        * tree.def (VEC_WIDEN_MULT_EVEN_EXPR, VEC_WIDEN_MULT_ODD_EXPR): New.\n        * cfgexpand.c (expand_debug_expr): Handle them.\n        * expr.c (expand_expr_real_2): Likewise.\n        * fold-const.c (fold_binary_loc): Likewise.\n        * gimple-pretty-print.c (dump_binary_rhs): Likewise.\n        * optabs.c (optab_for_tree_code): Likewise.\n        * tree-cfg.c (verify_gimple_assign_binary): Likewise.\n        * tree-inline.c (estimate_operator_cost): Likewise.\n        * tree-pretty-print.c (dump_generic_node): Likewise.\n        * tree.c (commutative_tree_code): Likewise.\n        * tree-vect-generic.c (expand_vector_operations_1): Likewise.\n        Handle type change before looking up optab.\n        * optabs.h (OTI_vec_widen_umult_even, OTI_vec_widen_umult_odd): New.\n        (OTI_vec_widen_smult_even, OTI_vec_widen_smult_odd): New.\n        (vec_widen_umult_even_optab, vec_widen_umult_odd_optab): New.\n        (vec_widen_smult_even_optab, vec_widen_smult_odd_optab): New.\n        * genopinit.c (optabs): Initialize them.\n        * doc/md.texi: Document them.\n\nFrom-SVN: r189403", "tree": {"sha": "3004b5ca9b3236230ebbc1657f1529e32ff03d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3004b5ca9b3236230ebbc1657f1529e32ff03d51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f30a9a6aabcc7408bec1e42736889e3edd9f289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f30a9a6aabcc7408bec1e42736889e3edd9f289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f30a9a6aabcc7408bec1e42736889e3edd9f289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f30a9a6aabcc7408bec1e42736889e3edd9f289/comments", "author": null, "committer": null, "parents": [{"sha": "e53a3e778e70af499292522144fb8d4bea5279cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53a3e778e70af499292522144fb8d4bea5279cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53a3e778e70af499292522144fb8d4bea5279cb"}], "stats": {"total": 201, "additions": 124, "deletions": 77}, "files": [{"sha": "a65b78e38ea48d195df6feb5463974b7bbb92969", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -1,3 +1,24 @@\n+2012-07-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree.def (VEC_WIDEN_MULT_EVEN_EXPR, VEC_WIDEN_MULT_ODD_EXPR): New.\n+\t* cfgexpand.c (expand_debug_expr): Handle them.\n+\t* expr.c (expand_expr_real_2): Likewise.\n+\t* fold-const.c (fold_binary_loc): Likewise.\n+\t* gimple-pretty-print.c (dump_binary_rhs): Likewise.\n+\t* optabs.c (optab_for_tree_code): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree.c (commutative_tree_code): Likewise.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n+\tHandle type change before looking up optab.\n+\t* optabs.h (OTI_vec_widen_umult_even, OTI_vec_widen_umult_odd): New.\n+\t(OTI_vec_widen_smult_even, OTI_vec_widen_smult_odd): New.\n+\t(vec_widen_umult_even_optab, vec_widen_umult_odd_optab): New.\n+\t(vec_widen_smult_even_optab, vec_widen_smult_odd_optab): New.\n+\t* genopinit.c (optabs): Initialize them.\n+\t* doc/md.texi: Document them.\n+\n 2012-07-10  Dehao Chen  <dehao@google.com>\n \n \t* tree.h (phi_arg_d): New field."}, {"sha": "c8d09c76e61fe088fe69026f3d2f17f4865da725", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -1,5 +1,5 @@\n /* A pass for lowering trees to RTL.\n-   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -3410,6 +3410,8 @@ expand_debug_expr (tree exp)\n     case VEC_UNPACK_LO_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n     case VEC_PERM_EXPR:"}, {"sha": "99f6528b63e08cb138751a2e2a815801d853d8eb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -4561,15 +4561,21 @@ floating point conversion and place the resulting N/2 values of size 2*S in\n the output vector (operand 0).\n \n @cindex @code{vec_widen_umult_hi_@var{m}} instruction pattern\n-@cindex @code{vec_widen_umult_lo__@var{m}} instruction pattern\n+@cindex @code{vec_widen_umult_lo_@var{m}} instruction pattern\n @cindex @code{vec_widen_smult_hi_@var{m}} instruction pattern\n @cindex @code{vec_widen_smult_lo_@var{m}} instruction pattern\n+@cindex @code{vec_widen_umult_even_@var{m}} instruction pattern\n+@cindex @code{vec_widen_umult_odd_@var{m}} instruction pattern\n+@cindex @code{vec_widen_smult_even_@var{m}} instruction pattern\n+@cindex @code{vec_widen_smult_odd_@var{m}} instruction pattern\n @item @samp{vec_widen_umult_hi_@var{m}}, @samp{vec_widen_umult_lo_@var{m}}\n @itemx @samp{vec_widen_smult_hi_@var{m}}, @samp{vec_widen_smult_lo_@var{m}}\n+@itemx @samp{vec_widen_umult_even_@var{m}}, @samp{vec_widen_umult_odd_@var{m}}\n+@itemx @samp{vec_widen_smult_even_@var{m}}, @samp{vec_widen_smult_odd_@var{m}}\n Signed/Unsigned widening multiplication.  The two inputs (operands 1 and 2)\n are vectors with N signed/unsigned elements of size S@.  Multiply the high/low\n-elements of the two vectors, and put the N/2 products of size 2*S in the\n-output vector (operand 0).\n+or even/odd elements of the two vectors, and put the N/2 products of size 2*S\n+in the output vector (operand 0).\n \n @cindex @code{vec_widen_ushiftl_hi_@var{m}} instruction pattern\n @cindex @code{vec_widen_ushiftl_lo_@var{m}} instruction pattern"}, {"sha": "c56b0e517a17cceb299b50ce7c291273673e3678", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -8917,29 +8917,15 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n-      {\n-\ttree oprnd0 = treeop0;\n-\ttree oprnd1 = treeop1;\n-\n-\texpand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n-\ttarget = expand_widen_pattern_expr (ops, op0, op1, NULL_RTX,\n-\t\t\t\t\t    target, unsignedp);\n-\tgcc_assert (target);\n-\treturn target;\n-      }\n-\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n-      {\n-        tree oprnd0 = treeop0;\n-        tree oprnd1 = treeop1;\n-\n-        expand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n-        target = expand_widen_pattern_expr (ops, op0, op1, NULL_RTX,\n-                                            target, unsignedp);\n-        gcc_assert (target);\n-        return target;\n-      }\n+      expand_operands (treeop0, treeop1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n+      target = expand_widen_pattern_expr (ops, op0, op1, NULL_RTX,\n+\t\t\t\t\t  target, unsignedp);\n+      gcc_assert (target);\n+      return target;\n \n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:"}, {"sha": "a491499b98f19ef7969a13be5e0c5ac7dbf08bfd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -13657,8 +13657,11 @@ fold_binary_loc (location_t loc,\n \n     case VEC_WIDEN_MULT_LO_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n       {\n-\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type);\n+\tunsigned int out, ofs, scale;\n \ttree *elts;\n \n \tgcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0)) == nelts * 2\n@@ -13671,19 +13674,28 @@ fold_binary_loc (location_t loc,\n \t    || !vec_cst_ctor_to_array (arg1, elts + nelts * 2))\n \t  return NULL_TREE;\n \n-\tif ((!BYTES_BIG_ENDIAN) ^ (code == VEC_WIDEN_MULT_LO_EXPR))\n-\t  elts += nelts;\n-\n-\tfor (i = 0; i < nelts; i++)\n+\tif (code == VEC_WIDEN_MULT_LO_EXPR)\n+\t  scale = 0, ofs = BYTES_BIG_ENDIAN ? nelts : 0;\n+\telse if (code == VEC_WIDEN_MULT_HI_EXPR)\n+\t  scale = 0, ofs = BYTES_BIG_ENDIAN ? 0 : nelts;\n+\telse if (code == VEC_WIDEN_MULT_EVEN_EXPR)\n+\t  scale = 1, ofs = 0;\n+\telse /* if (code == VEC_WIDEN_MULT_ODD_EXPR) */\n+\t  scale = 1, ofs = 1;\n+\t\n+\tfor (out = 0; out < nelts; out++)\n \t  {\n-\t    elts[i] = fold_convert_const (NOP_EXPR, TREE_TYPE (type), elts[i]);\n-\t    elts[i + nelts * 2]\n-\t      = fold_convert_const (NOP_EXPR, TREE_TYPE (type),\n-\t\t\t\t    elts[i + nelts * 2]);\n-\t    if (elts[i] == NULL_TREE || elts[i + nelts * 2] == NULL_TREE)\n+\t    unsigned int in1 = (out << scale) + ofs;\n+\t    unsigned int in2 = in1 + nelts * 2;\n+\t    tree t1, t2;\n+\n+\t    t1 = fold_convert_const (NOP_EXPR, TREE_TYPE (type), elts[in1]);\n+\t    t2 = fold_convert_const (NOP_EXPR, TREE_TYPE (type), elts[in2]);\n+\n+\t    if (t1 == NULL_TREE || t2 == NULL_TREE)\n \t      return NULL_TREE;\n-\t    elts[i] = const_binop (MULT_EXPR, elts[i], elts[i + nelts * 2]);\n-\t    if (elts[i] == NULL_TREE || !CONSTANT_CLASS_P (elts[i]))\n+\t    elts[out] = const_binop (MULT_EXPR, t1, t2);\n+\t    if (elts[out] == NULL_TREE || !CONSTANT_CLASS_P (elts[out]))\n \t      return NULL_TREE;\n \t  }\n "}, {"sha": "2d6757ec6887cb951e7abb1db1684966eaef670a", "filename": "gcc/genopinit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -289,6 +289,10 @@ static const char * const optabs[] =\n   \"set_optab_handler (vec_widen_umult_lo_optab, $A, CODE_FOR_$(vec_widen_umult_lo_$a$))\",\n   \"set_optab_handler (vec_widen_smult_hi_optab, $A, CODE_FOR_$(vec_widen_smult_hi_$a$))\",\n   \"set_optab_handler (vec_widen_smult_lo_optab, $A, CODE_FOR_$(vec_widen_smult_lo_$a$))\",\n+  \"set_optab_handler (vec_widen_umult_even_optab, $A, CODE_FOR_$(vec_widen_umult_even_$a$))\",\n+  \"set_optab_handler (vec_widen_umult_odd_optab, $A, CODE_FOR_$(vec_widen_umult_odd_$a$))\",\n+  \"set_optab_handler (vec_widen_smult_even_optab, $A, CODE_FOR_$(vec_widen_smult_even_$a$))\",\n+  \"set_optab_handler (vec_widen_smult_odd_optab, $A, CODE_FOR_$(vec_widen_smult_odd_$a$))\",\n   \"set_optab_handler (vec_widen_ushiftl_hi_optab, $A, CODE_FOR_$(vec_widen_ushiftl_hi_$a$))\",\n   \"set_optab_handler (vec_widen_ushiftl_lo_optab, $A, CODE_FOR_$(vec_widen_ushiftl_lo_$a$))\",\n   \"set_optab_handler (vec_widen_sshiftl_hi_optab, $A, CODE_FOR_$(vec_widen_sshiftl_hi_$a$))\","}, {"sha": "648597a4f0a2f55f9f2985c3c4f514ce14e1f4d2", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -342,6 +342,8 @@ dump_binary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     case MAX_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:"}, {"sha": "fbea87976f40b50f148f28688e5b8d88e4d8e3de", "filename": "gcc/optabs.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -483,6 +483,14 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n       return TYPE_UNSIGNED (type) ?\n \tvec_widen_umult_lo_optab : vec_widen_smult_lo_optab;\n \n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+      return TYPE_UNSIGNED (type) ?\n+\tvec_widen_umult_even_optab : vec_widen_smult_even_optab;\n+\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n+      return TYPE_UNSIGNED (type) ?\n+\tvec_widen_umult_odd_optab : vec_widen_smult_odd_optab;\n+\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n       return TYPE_UNSIGNED (type) ?\n         vec_widen_ushiftl_hi_optab : vec_widen_sshiftl_hi_optab;"}, {"sha": "37a6bfd9415dd6c117e4918b1e29339ba1d584c4", "filename": "gcc/optabs.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -340,12 +340,16 @@ enum optab_index\n   OTI_vec_shr,\n   /* Extract specified elements from vectors, for vector load.  */\n   OTI_vec_realign_load,\n-  /* Widening multiplication.\n-     The high/low part of the resulting vector of products is returned.  */\n+  /* Widening multiplication.  The high/low/even/odd part of the\n+     resulting vector of products is returned.  */\n   OTI_vec_widen_umult_hi,\n   OTI_vec_widen_umult_lo,\n   OTI_vec_widen_smult_hi,\n   OTI_vec_widen_smult_lo,\n+  OTI_vec_widen_umult_even,\n+  OTI_vec_widen_umult_odd,\n+  OTI_vec_widen_smult_even,\n+  OTI_vec_widen_smult_odd,\n   /* Widening shift left.\n      The high/low part of the resulting vector is returned.  */\n   OTI_vec_widen_ushiftl_hi,\n@@ -565,6 +569,10 @@ enum optab_index\n #define vec_widen_umult_lo_optab (&optab_table[OTI_vec_widen_umult_lo])\n #define vec_widen_smult_hi_optab (&optab_table[OTI_vec_widen_smult_hi])\n #define vec_widen_smult_lo_optab (&optab_table[OTI_vec_widen_smult_lo])\n+#define vec_widen_umult_even_optab (&optab_table[OTI_vec_widen_umult_even])\n+#define vec_widen_umult_odd_optab (&optab_table[OTI_vec_widen_umult_odd])\n+#define vec_widen_smult_even_optab (&optab_table[OTI_vec_widen_smult_even])\n+#define vec_widen_smult_odd_optab (&optab_table[OTI_vec_widen_smult_odd])\n #define vec_widen_ushiftl_hi_optab (&optab_table[OTI_vec_widen_ushiftl_hi])\n #define vec_widen_ushiftl_lo_optab (&optab_table[OTI_vec_widen_ushiftl_lo])\n #define vec_widen_sshiftl_hi_optab (&optab_table[OTI_vec_widen_sshiftl_hi])"}, {"sha": "d8a396f90eadfe43abb6a1f0b3b34d83ede99c0b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -3724,6 +3724,8 @@ verify_gimple_assign_binary (gimple stmt)\n     case WIDEN_SUM_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:"}, {"sha": "f576ee5f168cd0c12f73c8197fbf1652a836f5c8", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -3456,6 +3456,8 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n \n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_UNPACK_HI_EXPR:\n     case VEC_UNPACK_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:"}, {"sha": "cdf3f28a8d4f6c1b0fbb0d26f1d05d489f66d96a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -602,6 +602,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n   tree op0, op1;\n   const char *str;\n   bool is_expr;\n+  enum tree_code code;\n \n   if (node == NULL_TREE)\n     return spc;\n@@ -614,7 +615,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n   if ((flags & TDF_LINENO) && EXPR_HAS_LOCATION (node))\n     dump_location (buffer, EXPR_LOCATION (node));\n \n-  switch (TREE_CODE (node))\n+  code = TREE_CODE (node);\n+  switch (code)\n     {\n     case ERROR_MARK:\n       pp_string (buffer, \"<<< error >>>\");\n@@ -2336,31 +2338,15 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case VEC_WIDEN_MULT_HI_EXPR:\n-      pp_string (buffer, \" VEC_WIDEN_MULT_HI_EXPR < \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \", \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_string (buffer, \" > \");\n-      break;\n-\n     case VEC_WIDEN_MULT_LO_EXPR:\n-      pp_string (buffer, \" VEC_WIDEN_MULT_LO_EXPR < \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \", \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_string (buffer, \" > \");\n-      break;\n-\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n-      pp_string (buffer, \" VEC_WIDEN_LSHIFT_HI_EXPR < \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \", \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_string (buffer, \" > \");\n-      break;\n-\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n-      pp_string (buffer, \" VEC_WIDEN_LSHIFT_HI_EXPR < \");\n+      pp_character (buffer, ' ');\n+      for (str = tree_code_name [code]; *str; str++)\n+\tpp_character (buffer, TOUPPER (*str));\n+      pp_string (buffer, \" < \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);"}, {"sha": "e37c631becf64b0899fd2098ebf48441a92c8a91", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -1361,6 +1361,23 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       || code == VEC_UNPACK_FLOAT_LO_EXPR)\n     type = TREE_TYPE (rhs1);\n \n+  /* For widening/narrowing vector operations, the relevant type is of the\n+     arguments, not the widened result.  VEC_UNPACK_FLOAT_*_EXPR is\n+     calculated in the same way above.  */\n+  if (code == WIDEN_SUM_EXPR\n+      || code == VEC_WIDEN_MULT_HI_EXPR\n+      || code == VEC_WIDEN_MULT_LO_EXPR\n+      || code == VEC_WIDEN_MULT_EVEN_EXPR\n+      || code == VEC_WIDEN_MULT_ODD_EXPR\n+      || code == VEC_UNPACK_HI_EXPR\n+      || code == VEC_UNPACK_LO_EXPR\n+      || code == VEC_PACK_TRUNC_EXPR\n+      || code == VEC_PACK_SAT_EXPR\n+      || code == VEC_PACK_FIX_TRUNC_EXPR\n+      || code == VEC_WIDEN_LSHIFT_HI_EXPR\n+      || code == VEC_WIDEN_LSHIFT_LO_EXPR)\n+    type = TREE_TYPE (rhs1);\n+\n   /* Choose between vector shift/rotate by vector and vector shift/rotate by\n      scalar */\n   if (code == LSHIFT_EXPR\n@@ -1409,21 +1426,6 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   else\n     op = optab_for_tree_code (code, type, optab_default);\n \n-  /* For widening/narrowing vector operations, the relevant type is of the\n-     arguments, not the widened result.  VEC_UNPACK_FLOAT_*_EXPR is\n-     calculated in the same way above.  */\n-  if (code == WIDEN_SUM_EXPR\n-      || code == VEC_WIDEN_MULT_HI_EXPR\n-      || code == VEC_WIDEN_MULT_LO_EXPR\n-      || code == VEC_UNPACK_HI_EXPR\n-      || code == VEC_UNPACK_LO_EXPR\n-      || code == VEC_PACK_TRUNC_EXPR\n-      || code == VEC_PACK_SAT_EXPR\n-      || code == VEC_PACK_FIX_TRUNC_EXPR\n-      || code == VEC_WIDEN_LSHIFT_HI_EXPR\n-      || code == VEC_WIDEN_LSHIFT_LO_EXPR)\n-    type = TREE_TYPE (rhs1);\n-\n   /* Optabs will try converting a negation into a subtraction, so\n      look for it as well.  TODO: negation of floating-point vectors\n      might be turned into an exclusive OR toggling the sign bit.  */"}, {"sha": "d10b9abc1728b4d98c5391ae06d4ddea1d22b052", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -6927,6 +6927,8 @@ commutative_tree_code (enum tree_code code)\n     case WIDEN_MULT_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n       return true;\n \n     default:"}, {"sha": "70188ff052415061393c0291b2202cafe3001956", "filename": "gcc/tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30a9a6aabcc7408bec1e42736889e3edd9f289/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=3f30a9a6aabcc7408bec1e42736889e3edd9f289", "patch": "@@ -1171,6 +1171,10 @@ DEFTREECODE (VEC_RSHIFT_EXPR, \"vec_rshift_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_WIDEN_MULT_HI_EXPR, \"widen_mult_hi_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_WIDEN_MULT_LO_EXPR, \"widen_mult_lo_expr\", tcc_binary, 2)\n \n+/* Similarly, but return the even or odd N/2 products.  */\n+DEFTREECODE (VEC_WIDEN_MULT_EVEN_EXPR, \"widen_mult_even_expr\", tcc_binary, 2)\n+DEFTREECODE (VEC_WIDEN_MULT_ODD_EXPR, \"widen_mult_odd_expr\", tcc_binary, 2)\n+\n /* Unpack (extract and promote/widen) the high/low elements of the input\n    vector into the output vector.  The input vector has twice as many\n    elements as the output vector, that are half the size of the elements"}]}