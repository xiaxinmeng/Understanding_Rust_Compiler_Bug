{"sha": "6e61611091c9446c62eb88c2257d5f43ad396fc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU2MTYxMTA5MWM5NDQ2YzYyZWI4OGMyMjU3ZDVmNDNhZDM5NmZjMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-31T09:00:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-31T09:00:54Z"}, "message": "re PR middle-end/53073 (464.h264ref in SPEC CPU 2006 miscompiled)\n\n2013-01-31  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/53073\n\t* common.opt (faggressive-loop-optimizations): New flag,\n\tenabled by default.\n\t* doc/invoke.texi (faggressive-loop-optimizations): Document.\n\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Guard\n\tinfer_loop_bounds_from_undefined by it.\n\nFrom-SVN: r195610", "tree": {"sha": "d6aeb452f86b1642240ab74d863ba99b6bd83792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6aeb452f86b1642240ab74d863ba99b6bd83792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e61611091c9446c62eb88c2257d5f43ad396fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e61611091c9446c62eb88c2257d5f43ad396fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e61611091c9446c62eb88c2257d5f43ad396fc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e61611091c9446c62eb88c2257d5f43ad396fc2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "636f59cfb37b743bf162e42d79e10385f44e0f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636f59cfb37b743bf162e42d79e10385f44e0f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636f59cfb37b743bf162e42d79e10385f44e0f9b"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "a8d2d640ed386645e02813a0030df0cdbdcc1eff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e61611091c9446c62eb88c2257d5f43ad396fc2", "patch": "@@ -1,3 +1,12 @@\n+2013-01-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/53073\n+\t* common.opt (faggressive-loop-optimizations): New flag,\n+\tenabled by default.\n+\t* doc/invoke.texi (faggressive-loop-optimizations): Document.\n+\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Guard\n+\tinfer_loop_bounds_from_undefined by it.\n+\n 2013-01-31  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56150"}, {"sha": "b6592e09aaaf08ab20bd377ab5b93e4f7666a368", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6e61611091c9446c62eb88c2257d5f43ad396fc2", "patch": "@@ -792,6 +792,10 @@ Driver Undocumented\n fabi-version=\n Common Joined RejectNegative UInteger Var(flag_abi_version) Init(2)\n \n+faggressive-loop-optimizations\n+Common Report Var(flag_aggressive_loop_optimizations) Optimization Init(1) \n+Aggressively optimize loops using language constraints\n+\n falign-functions\n Common Report Var(align_functions,0) Optimization UInteger\n Align the start of functions"}, {"sha": "ef06b0b285189284a96d1e2b52d59c8c4f8c0f5d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6e61611091c9446c62eb88c2257d5f43ad396fc2", "patch": "@@ -349,7 +349,8 @@ Objective-C and Objective-C++ Dialects}.\n \n @item Optimization Options\n @xref{Optimize Options,,Options that Control Optimization}.\n-@gccoptlist{-falign-functions[=@var{n}] -falign-jumps[=@var{n}] @gol\n+@gccoptlist{-faggressive-loop-optimizations -falign-functions[=@var{n}] @gol\n+-falign-jumps[=@var{n}] @gol\n -falign-labels[=@var{n}] -falign-loops[=@var{n}] @gol\n -fassociative-math -fauto-inc-dec -fbranch-probabilities @gol\n -fbranch-target-load-optimize -fbranch-target-load-optimize2 @gol\n@@ -6988,6 +6989,16 @@ When @option{-fgcse-after-reload} is enabled, a redundant load elimination\n pass is performed after reload.  The purpose of this pass is to clean up\n redundant spilling.\n \n+@item -faggressive-loop-optimizations\n+@opindex faggressive-loop-optimizations\n+This option tells the loop optimizer to use language constraints to\n+derive bounds for the number of iterations of a loop.  This assumes that\n+loop code does not invoke undefined behavior by for example causing signed\n+integer overflows or out-of-bound array accesses.  The bounds for the\n+number of iterations of a loop are used to guide loop unrolling and peeling\n+and loop exit test optimizations.\n+This option is enabled by default.\n+\n @item -funsafe-loop-optimizations\n @opindex funsafe-loop-optimizations\n This option tells the loop optimizer to assume that loop indices do not"}, {"sha": "7ba7416f37af5f3a0a15028cf8a8e7ec8941643f", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e61611091c9446c62eb88c2257d5f43ad396fc2/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=6e61611091c9446c62eb88c2257d5f43ad396fc2", "patch": "@@ -3336,7 +3336,8 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n     }\n   exits.release ();\n \n-  infer_loop_bounds_from_undefined (loop);\n+  if (flag_aggressive_loop_optimizations)\n+    infer_loop_bounds_from_undefined (loop);\n \n   discover_iteration_bound_by_body_walk (loop);\n "}]}