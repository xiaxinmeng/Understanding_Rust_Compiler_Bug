{"sha": "6b6788f8c2748060d922cc22173ff7f8500917e9", "node_id": "C_kwDOANBUbNoAKDZiNjc4OGY4YzI3NDgwNjBkOTIyY2MyMjE3M2ZmN2Y4NTAwOTE3ZTk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-11T11:08:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-11T19:34:16Z"}, "message": "libstdc++: Add valid range assertions to std::basic_regex [PR89927]\n\nThis adds some debug assertions to basic_regex. They don't actually\ndiagnose the error in the PR yet, but I have another patch to make them\nmore effective.\n\nAlso change the __glibcxx_assert(false) consistency checks to include a\nstring literal that tells the user a bit more about why the process\naborted. We could consider adding a __glibcxx_bug or\n__glibcxx_internal_error macro for this purpose, but ideally we'll never\nhit such bugs anyway so it shouldn't be needed.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/89927\n\t* include/bits/regex.h (basic_regex(const _Ch_type*, size_t)):\n\tAdd __glibcxx_requires_string_len assertion.\n\t(basic_regex::assign(InputIterator, InputIterator)): Add\n\t__glibcxx_requires_valid_range assertion.\n\t* include/bits/regex_scanner.tcc (_Scanner::_M_advance())\n\t(_Scanner::_M_scan_normal()): Use string literal in assertions.", "tree": {"sha": "4d7c6314f1168a8b0e33d11e8cfb6c6da5d6adc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d7c6314f1168a8b0e33d11e8cfb6c6da5d6adc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6788f8c2748060d922cc22173ff7f8500917e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6788f8c2748060d922cc22173ff7f8500917e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6788f8c2748060d922cc22173ff7f8500917e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6788f8c2748060d922cc22173ff7f8500917e9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84088dc4bb6a546c896a068dc201463493babf43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84088dc4bb6a546c896a068dc201463493babf43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84088dc4bb6a546c896a068dc201463493babf43"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "3c44bcd7e33f86843040beaaddcf9e7d251011a2", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6788f8c2748060d922cc22173ff7f8500917e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6788f8c2748060d922cc22173ff7f8500917e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=6b6788f8c2748060d922cc22173ff7f8500917e9", "patch": "@@ -467,7 +467,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_regex(const _Ch_type* __p, std::size_t __len,\n \t\t  flag_type __f = ECMAScript)\n-      { _M_compile(__p, __p + __len, __f); }\n+      {\n+\t__glibcxx_requires_string_len(__p, __len);\n+\t_M_compile(__p, __p + __len, __f);\n+      }\n \n       /**\n        * @brief Copy-constructs a basic regular expression.\n@@ -684,6 +687,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  if constexpr (__detail::__is_contiguous_iter<_InputIterator>::value\n \t\t\t&& is_same_v<_ValT, value_type>)\n \t    {\n+\t      __glibcxx_requires_valid_range(__first, __last);\n \t      const auto __len = __last - __first;\n \t      const _Ch_type* __p = std::__to_address(__first);\n \t      _M_compile(__p, __p + __len, __flags);"}, {"sha": "2fa2303f27bf14c7f465c039f03e8b94d20cc17a", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6788f8c2748060d922cc22173ff7f8500917e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6788f8c2748060d922cc22173ff7f8500917e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=6b6788f8c2748060d922cc22173ff7f8500917e9", "patch": "@@ -83,7 +83,7 @@ namespace __detail\n \t_M_scan_in_brace();\n       else\n \t{\n-\t  __glibcxx_assert(false);\n+\t  __glibcxx_assert(!\"unexpected state while processing regex\");\n \t}\n     }\n \n@@ -195,7 +195,7 @@ namespace __detail\n \t\t_M_token = __it->second;\n \t\treturn;\n \t      }\n-\t  __glibcxx_assert(false);\n+\t  __glibcxx_assert(!\"unexpected special character in regex\");\n \t}\n       else\n \t{"}]}