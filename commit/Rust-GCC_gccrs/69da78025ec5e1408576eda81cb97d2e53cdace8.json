{"sha": "69da78025ec5e1408576eda81cb97d2e53cdace8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlkYTc4MDI1ZWM1ZTE0MDg1NzZlZGE4MWNiOTdkMmU1M2NkYWNlOA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-01-23T16:01:47Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-01-23T16:01:47Z"}, "message": "PR c++/58109 - alignas() fails to compile with constant expression\n\nPR c++/58109 - alignas() fails to compile with constant expression\nPR c++/69022 - attribute vector_size ignored with dependent bytes\n    \ngcc/testsuite/ChangeLog:\n2016-01-23  Martin Sebor  <msebor@redhat.com>\n    \n\tPR c++/58109\n\tPR c++/69022\n\t* g++.dg/cpp0x/alignas5.C: New test.\n\t* g++.dg/ext/vector29.C: Same.\n    \ngcc/cp/ChangeLog:\n2016-01-23  Martin Sebor  <msebor@redhat.com>\n    \n\tPR c++/58109\n\tPR c++/69022\n\t* decl2.c (is_late_template_attribute): Handle dependent argument\n \tto attribute align and attribute vector_size.\n\nFrom-SVN: r232766", "tree": {"sha": "e9b91070a11e2d484f40225f0a340529e27fe643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b91070a11e2d484f40225f0a340529e27fe643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69da78025ec5e1408576eda81cb97d2e53cdace8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69da78025ec5e1408576eda81cb97d2e53cdace8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69da78025ec5e1408576eda81cb97d2e53cdace8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69da78025ec5e1408576eda81cb97d2e53cdace8/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6af801f52a1459111cdac2097f50d431a80f70cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af801f52a1459111cdac2097f50d431a80f70cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af801f52a1459111cdac2097f50d431a80f70cb"}], "stats": {"total": 117, "additions": 112, "deletions": 5}, "files": [{"sha": "07fcef44987d9e0ba13ed5d74de8262e65121331", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=69da78025ec5e1408576eda81cb97d2e53cdace8", "patch": "@@ -1,3 +1,10 @@\n+2016-01-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/58109\n+\tPR c++/69022\n+\t* decl2.c (is_late_template_attribute): Handle dependent argument\n+\tto attribute align and attribute vector_size.\n+\n 2016-01-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/69392"}, {"sha": "7d68961cd20530b2f8574f3b0d301d09c3b9bfda", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=69da78025ec5e1408576eda81cb97d2e53cdace8", "patch": "@@ -1193,7 +1193,8 @@ is_late_template_attribute (tree attr, tree decl)\n \t second and following arguments.  Attributes like mode, format,\n \t cleanup and several target specific attributes aren't late\n \t just because they have an IDENTIFIER_NODE as first argument.  */\n-      if (arg == args && identifier_p (t))\n+      if (arg == args && attribute_takes_identifier_p (name)\n+\t  && identifier_p (t))\n \tcontinue;\n \n       if (value_dependent_expression_p (t)"}, {"sha": "27d03891419339a035f7a66e6e3ffd82fc27e021", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69da78025ec5e1408576eda81cb97d2e53cdace8", "patch": "@@ -1,3 +1,10 @@\n+2016-01-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/58109\n+\tPR c++/69022\n+\t* g++.dg/cpp0x/alignas5.C: New test.\n+\t* g++.dg/ext/vector29.C: Same.\n+\n 2016-01-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/chkp-strlen-2.c: Define _GNU_SOURCE."}, {"sha": "2dcc41fae8a00c881421aba62414090a7159c660", "filename": "gcc/testsuite/g++.dg/cpp0x/alignas5.C", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas5.C?ref=69da78025ec5e1408576eda81cb97d2e53cdace8", "patch": "@@ -1,6 +1,45 @@\n-// { dg-do compile { target c++11 } }\n+// PR c++/58109  - alignas() fails to compile with constant expression\n+// { dg-do compile }\n \n-#define SA(X) static_assert(X,#X)\n+template <typename T>\n+struct Base {\n+  static const int Align = sizeof (T);\n+};\n \n-enum alignas(16) E {};\n-SA(alignof(E) == 16);\n+// Never instantiated.\n+template <typename T>\n+struct Derived: Base<T>\n+{\n+#if __cplusplus >= 201102L\n+  // This is the meat of the (simplified) regression test for c++/58109.\n+  using B = Base<T>;\n+  using B::Align;\n+\n+  alignas (Align) char a [1];\n+  alignas (Align) T b [1];\n+#else\n+  // Fake the test for C++ 98.\n+#  define Align Base<T>::Align\n+#endif\n+\n+  char __attribute__ ((aligned (Align))) c [1];\n+  T __attribute__ ((aligned (Align))) d [1];\n+};\n+\n+// Instantiated to verify that the code is accepted even when instantiated.\n+template <typename T>\n+struct InstDerived: Base<T>\n+{\n+#if __cplusplus >= 201102L\n+  using B = Base<T>;\n+  using B::Align;\n+\n+  alignas (Align) char a [1];\n+  alignas (Align) T b [1];\n+#endif\n+\n+  char __attribute__ ((aligned (Align))) c [1];\n+  T __attribute__ ((aligned (Align))) d [1];\n+};\n+\n+InstDerived<int> dx;"}, {"sha": "4a130092a3f17ddedc69d20f7907825840d2e25f", "filename": "gcc/testsuite/g++.dg/ext/vector29.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69da78025ec5e1408576eda81cb97d2e53cdace8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector29.C?ref=69da78025ec5e1408576eda81cb97d2e53cdace8", "patch": "@@ -0,0 +1,53 @@\n+// PR c++/69022 - attribute vector_size ignored with dependent bytes\n+// { dg-do compile }\n+\n+template <int N>\n+struct A { static const int X = N; };\n+\n+#if __cplusplus >= 201202L\n+#  define ASSERT(e) static_assert (e, #e)\n+#else\n+#  define ASSERT(e)   \\\n+  do { struct S { bool: !!(e); } asrt; (void)&asrt; } while (0)\n+#endif\n+\n+template <class T, int N>\n+struct B: A<N>\n+{\n+#if __cplusplus >= 201202L\n+  using A<N>::X;\n+#  define VecSize X\n+#else\n+#  define VecSize A<N>::X\n+#endif\n+\n+    static void foo ()\n+    {\n+        char a __attribute__ ((vector_size (N)));\n+        ASSERT (sizeof a == N);\n+\n+        T b __attribute__ ((vector_size (N)));\n+        ASSERT (sizeof b == N);\n+    }\n+\n+    static void bar ()\n+    {\n+        char c1 __attribute__ ((vector_size (VecSize)));\n+        ASSERT (sizeof c1 == VecSize);\n+\n+        char c2 __attribute__ ((vector_size (A<N>::X)));\n+        ASSERT (sizeof c2 == A<N>::X);\n+\n+        T d1 __attribute__ ((vector_size (VecSize)));\n+        ASSERT (sizeof d1 == VecSize);\n+\n+        T d2 __attribute__ ((vector_size (A<N>::X)));\n+        ASSERT (sizeof d2 == A<N>::X);\n+    }\n+};\n+\n+void bar ()\n+{\n+    B<int, 16>::foo ();\n+    B<int, 16>::bar ();\n+}"}]}