{"sha": "a93eac6a845d79a77646068b98cbd90a9be7b58a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzZWFjNmE4NDVkNzlhNzc2NDYwNjhiOThjYmQ5MGE5YmU3YjU4YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-06-22T14:42:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-06-22T14:42:30Z"}, "message": "Implement -fdiagnostics-parseable-fixits\n\ngcc/ChangeLog:\n\t* common.opt (fdiagnostics-parseable-fixits): New option.\n\t* diagnostic.c: Include \"selftest.h\".\n\t(print_escaped_string): New function.\n\t(print_parseable_fixits): New function.\n\t(diagnostic_report_diagnostic): Call print_parseable_fixits.\n\t(selftest::assert_print_escaped_string): New function.\n\t(ASSERT_PRINT_ESCAPED_STRING_STREQ): New macro.\n\t(selftest::test_print_escaped_string): New function.\n\t(selftest::test_print_parseable_fixits_none): New function.\n\t(selftest::test_print_parseable_fixits_insert): New function.\n\t(selftest::test_print_parseable_fixits_remove): New function.\n\t(selftest::test_print_parseable_fixits_replace): New function.\n\t(selftest::diagnostic_c_tests): New function.\n\t* diagnostic.h (struct diagnostic_context): Add field\n\t\"parseable_fixits_p\".\n\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n\t-fdiagnostics-parseable-fixits.\n\t(-fdiagnostics-parseable-fixits): New option.\n\t* opts.c (common_handle_option): Handle\n\t-fdiagnostics-parseable-fixits.\n\t* selftest-run-tests.c (selftest::run_tests): Call\n\tselftest::diagnostic_c_tests.\n\t* selftest.h (selftest::diagnostic_c_tests): New prototype.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-show-locus-parseable-fixits.c: New\n\tfile.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add\n\tdiagnostic-test-show-locus-parseable-fixits.c to sources for\n\tdiagnostic_plugin_test_show_locus.c.\n\t* lib/gcc-defs.exp (freeform_regexps): New global.\n\t(dg-regexp): New function.\n\t(handle-dg-regexps): New function.\n\t* lib/gcc-dg.exp (cleanup-after-saved-dg-test): Reset\n\tfreeform_regexps to the empty list.\n\t* lib/prune.exp (prune_gcc_output): Call handle-dg-regexps.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (fixit_hint::get_start_loc): New pure virtual\n\tfunction.\n\t(fixit_hint::maybe_get_end_loc): Likewise.\n\t(fixit_insert::get_start_loc): New function, implementing\n\tfixit_hint::get_start_loc.\n\t(fixit_insert::maybe_get_end_loc): New function, implementing\n\tfixit_hint::maybe_get_end_loc.\n\t(fixit_remove::get_start_loc): New function, implementing\n\tfixit_hint::get_start_loc.\n\t(fixit_remove::maybe_get_end_loc): New function, implementing\n\tfixit_hint::maybe_get_end_loc.\n\t(fixit_replace::get_start_loc): New function, implementing\n\tfixit_hint::get_start_loc.\n\t(fixit_replace::maybe_get_end_loc): New function, implementing\n\tfixit_hint::maybe_get_end_loc.\n\nFrom-SVN: r237712", "tree": {"sha": "8d46c6412fd67294b9c6633443b3ccd90df9a278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d46c6412fd67294b9c6633443b3ccd90df9a278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a93eac6a845d79a77646068b98cbd90a9be7b58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93eac6a845d79a77646068b98cbd90a9be7b58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93eac6a845d79a77646068b98cbd90a9be7b58a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93eac6a845d79a77646068b98cbd90a9be7b58a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d53c0398155c0374fd73764bb208d0229b7a7ff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53c0398155c0374fd73764bb208d0229b7a7ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d53c0398155c0374fd73764bb208d0229b7a7ff1"}], "stats": {"total": 480, "additions": 478, "deletions": 2}, "files": [{"sha": "1a985a3d69ac38ef07a2a1f9c824cb320bc253ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -1,3 +1,29 @@\n+2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* common.opt (fdiagnostics-parseable-fixits): New option.\n+\t* diagnostic.c: Include \"selftest.h\".\n+\t(print_escaped_string): New function.\n+\t(print_parseable_fixits): New function.\n+\t(diagnostic_report_diagnostic): Call print_parseable_fixits.\n+\t(selftest::assert_print_escaped_string): New function.\n+\t(ASSERT_PRINT_ESCAPED_STRING_STREQ): New macro.\n+\t(selftest::test_print_escaped_string): New function.\n+\t(selftest::test_print_parseable_fixits_none): New function.\n+\t(selftest::test_print_parseable_fixits_insert): New function.\n+\t(selftest::test_print_parseable_fixits_remove): New function.\n+\t(selftest::test_print_parseable_fixits_replace): New function.\n+\t(selftest::diagnostic_c_tests): New function.\n+\t* diagnostic.h (struct diagnostic_context): Add field\n+\t\"parseable_fixits_p\".\n+\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n+\t-fdiagnostics-parseable-fixits.\n+\t(-fdiagnostics-parseable-fixits): New option.\n+\t* opts.c (common_handle_option): Handle\n+\t-fdiagnostics-parseable-fixits.\n+\t* selftest-run-tests.c (selftest::run_tests): Call\n+\tselftest::diagnostic_c_tests.\n+\t* selftest.h (selftest::diagnostic_c_tests): New prototype.\n+\n 2016-06-22  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR middle-end/71488"}, {"sha": "5d90385eaead0c13f1a018205a5bd5a77965c79d", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -1185,6 +1185,10 @@ Enum(diagnostic_color_rule) String(always) Value(DIAGNOSTICS_COLOR_YES)\n EnumValue\n Enum(diagnostic_color_rule) String(auto) Value(DIAGNOSTICS_COLOR_AUTO)\n \n+fdiagnostics-parseable-fixits\n+Common Var(flag_diagnostics_parseable_fixits)\n+Print fixit hints in machine-readable form.\n+\n fdiagnostics-show-option\n Common Var(flag_diagnostics_show_option) Init(1)\n Amend appropriate diagnostic messages with the command line option that controls them."}, {"sha": "d39afff6622891738bfeea00d91d71bc6ca29c95", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"backtrace.h\"\n #include \"diagnostic.h\"\n #include \"diagnostic-color.h\"\n+#include \"selftest.h\"\n \n #ifdef HAVE_TERMIOS_H\n # include <termios.h>\n@@ -667,6 +668,112 @@ diagnostic_pop_diagnostics (diagnostic_context *context, location_t where)\n   context->n_classification_history ++;\n }\n \n+/* Helper function for print_parseable_fixits.  Print TEXT to PP, obeying the\n+   escaping rules for -fdiagnostics-parseable-fixits.  */\n+\n+static void\n+print_escaped_string (pretty_printer *pp, const char *text)\n+{\n+  gcc_assert (pp);\n+  gcc_assert (text);\n+\n+  pp_character (pp, '\"');\n+  for (const char *ch = text; *ch; ch++)\n+    {\n+      switch (*ch)\n+\t{\n+\tcase '\\\\':\n+\t  /* Escape backslash as two backslashes.  */\n+\t  pp_string (pp, \"\\\\\\\\\");\n+\t  break;\n+\tcase '\\t':\n+\t  /* Escape tab as \"\\t\".  */\n+\t  pp_string (pp, \"\\\\t\");\n+\t  break;\n+\tcase '\\n':\n+\t  /* Escape newline as \"\\n\".  */\n+\t  pp_string (pp, \"\\\\n\");\n+\t  break;\n+\tcase '\"':\n+\t  /* Escape doublequotes as \\\".  */\n+\t  pp_string (pp, \"\\\\\\\"\");\n+\t  break;\n+\tdefault:\n+\t  if (ISPRINT (*ch))\n+\t    pp_character (pp, *ch);\n+\t  else\n+\t    /* Use octal for non-printable chars.  */\n+\t    {\n+\t      unsigned char c = (*ch & 0xff);\n+\t      pp_printf (pp, \"\\\\%o%o%o\", (c / 64), (c / 8) & 007, c & 007);\n+\t    }\n+\t  break;\n+\t}\n+    }\n+  pp_character (pp, '\"');\n+}\n+\n+/* Implementation of -fdiagnostics-parseable-fixits.  Print a\n+   machine-parseable version of all fixits in RICHLOC to PP.  */\n+\n+static void\n+print_parseable_fixits (pretty_printer *pp, rich_location *richloc)\n+{\n+  gcc_assert (pp);\n+  gcc_assert (richloc);\n+\n+  for (unsigned i = 0; i < richloc->get_num_fixit_hints (); i++)\n+    {\n+      const fixit_hint *hint = richloc->get_fixit_hint (i);\n+      source_location start_loc = hint->get_start_loc ();\n+      expanded_location start_exploc = expand_location (start_loc);\n+      pp_string (pp, \"fix-it:\");\n+      print_escaped_string (pp, start_exploc.file);\n+      source_location end_loc;\n+\n+      /* For compatibility with clang, print as a half-open range.  */\n+      if (hint->maybe_get_end_loc (&end_loc))\n+\t{\n+\t  expanded_location end_exploc = expand_location (end_loc);\n+\t  pp_printf (pp, \":{%i:%i-%i:%i}:\",\n+\t\t     start_exploc.line, start_exploc.column,\n+\t\t     end_exploc.line, end_exploc.column + 1);\n+\t}\n+      else\n+\t{\n+\t  pp_printf (pp, \":{%i:%i-%i:%i}:\",\n+\t\t     start_exploc.line, start_exploc.column,\n+\t\t     start_exploc.line, start_exploc.column);\n+\t}\n+      switch (hint->get_kind ())\n+\t{\n+\t  case fixit_hint::INSERT:\n+\t    {\n+\t      const fixit_insert *insert\n+\t\t= static_cast <const fixit_insert *> (hint);\n+\t      print_escaped_string (pp, insert->get_string ());\n+\t    }\n+\t    break;\n+\n+\t  case fixit_hint::REMOVE:\n+\t    print_escaped_string (pp, \"\");\n+\t    break;\n+\n+\t  case fixit_hint::REPLACE:\n+\t    {\n+\t      const fixit_replace *replace\n+\t\t= static_cast <const fixit_replace *> (hint);\n+\t      print_escaped_string (pp, replace->get_string ());\n+\t    }\n+\t    break;\n+\n+\t  default:\n+\t    gcc_unreachable ();\n+\t}\n+      pp_newline (pp);\n+    }\n+}\n+\n /* Report a diagnostic message (an error or a warning) as specified by\n    DC.  This function is *the* subroutine in terms of which front-ends\n    should implement their specific diagnostic handling modules.  The\n@@ -828,6 +935,11 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   (*diagnostic_starter (context)) (context, diagnostic);\n   pp_output_formatted_text (context->printer);\n   (*diagnostic_finalizer (context)) (context, diagnostic);\n+  if (context->parseable_fixits_p)\n+    {\n+      print_parseable_fixits (context->printer, diagnostic->richloc);\n+      pp_flush (context->printer);\n+    }\n   diagnostic_action_after_output (context, diagnostic->kind);\n   diagnostic->message.format_spec = saved_format_spec;\n   diagnostic->x_data = NULL;\n@@ -1290,3 +1402,149 @@ real_abort (void)\n {\n   abort ();\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Helper function for test_print_escaped_string.  */\n+\n+static void\n+assert_print_escaped_string (const location &loc, const char *expected_output,\n+\t\t\t     const char *input)\n+{\n+  pretty_printer pp;\n+  print_escaped_string (&pp, input);\n+  ASSERT_STREQ_AT (loc, expected_output, pp_formatted_text (&pp));\n+}\n+\n+#define ASSERT_PRINT_ESCAPED_STRING_STREQ(EXPECTED_OUTPUT, INPUT) \\\n+    assert_print_escaped_string (SELFTEST_LOCATION, EXPECTED_OUTPUT, INPUT)\n+\n+/* Tests of print_escaped_string.  */\n+\n+static void\n+test_print_escaped_string ()\n+{\n+  /* Empty string.  */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"\\\"\", \"\");\n+\n+  /* Non-empty string.  */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"hello world\\\"\", \"hello world\");\n+\n+  /* Various things that need to be escaped:  */\n+  /* Backslash.  */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"before\\\\\\\\after\\\"\",\n+\t\t\t\t     \"before\\\\after\");\n+  /* Tab.  */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"before\\\\tafter\\\"\",\n+\t\t\t\t     \"before\\tafter\");\n+  /* Newline.  */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"before\\\\nafter\\\"\",\n+\t\t\t\t     \"before\\nafter\");\n+  /* Double quote.  */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"before\\\\\\\"after\\\"\",\n+\t\t\t\t     \"before\\\"after\");\n+\n+  /* Non-printable characters: BEL: '\\a': 0x07 */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"before\\\\007after\\\"\",\n+\t\t\t\t     \"before\\aafter\");\n+  /* Non-printable characters: vertical tab: '\\v': 0x0b */\n+  ASSERT_PRINT_ESCAPED_STRING_STREQ (\"\\\"before\\\\013after\\\"\",\n+\t\t\t\t     \"before\\vafter\");\n+}\n+\n+/* Tests of print_parseable_fixits.  */\n+\n+/* Verify that print_parseable_fixits emits the empty string if there\n+   are no fixits.  */\n+\n+static void\n+test_print_parseable_fixits_none ()\n+{\n+  pretty_printer pp;\n+  rich_location richloc (line_table, UNKNOWN_LOCATION);\n+\n+  print_parseable_fixits (&pp, &richloc);\n+  ASSERT_STREQ (\"\", pp_formatted_text (&pp));\n+}\n+\n+/* Verify that print_parseable_fixits does the right thing if there\n+   is an insertion fixit hint.  */\n+\n+static void\n+test_print_parseable_fixits_insert ()\n+{\n+  pretty_printer pp;\n+  rich_location richloc (line_table, UNKNOWN_LOCATION);\n+\n+  linemap_add (line_table, LC_ENTER, false, \"test.c\", 0);\n+  linemap_line_start (line_table, 5, 100);\n+  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n+  location_t where = linemap_position_for_column (line_table, 10);\n+  richloc.add_fixit_insert (where, \"added content\");\n+\n+  print_parseable_fixits (&pp, &richloc);\n+  ASSERT_STREQ (\"fix-it:\\\"test.c\\\":{5:10-5:10}:\\\"added content\\\"\\n\",\n+\t\tpp_formatted_text (&pp));\n+}\n+\n+/* Verify that print_parseable_fixits does the right thing if there\n+   is an removal fixit hint.  */\n+\n+static void\n+test_print_parseable_fixits_remove ()\n+{\n+  pretty_printer pp;\n+  rich_location richloc (line_table, UNKNOWN_LOCATION);\n+\n+  linemap_add (line_table, LC_ENTER, false, \"test.c\", 0);\n+  linemap_line_start (line_table, 5, 100);\n+  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n+  source_range where;\n+  where.m_start = linemap_position_for_column (line_table, 10);\n+  where.m_finish = linemap_position_for_column (line_table, 20);\n+  richloc.add_fixit_remove (where);\n+\n+  print_parseable_fixits (&pp, &richloc);\n+  ASSERT_STREQ (\"fix-it:\\\"test.c\\\":{5:10-5:21}:\\\"\\\"\\n\",\n+\t\tpp_formatted_text (&pp));\n+}\n+\n+/* Verify that print_parseable_fixits does the right thing if there\n+   is an replacement fixit hint.  */\n+\n+static void\n+test_print_parseable_fixits_replace ()\n+{\n+  pretty_printer pp;\n+  rich_location richloc (line_table, UNKNOWN_LOCATION);\n+\n+  linemap_add (line_table, LC_ENTER, false, \"test.c\", 0);\n+  linemap_line_start (line_table, 5, 100);\n+  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n+  source_range where;\n+  where.m_start = linemap_position_for_column (line_table, 10);\n+  where.m_finish = linemap_position_for_column (line_table, 20);\n+  richloc.add_fixit_replace (where, \"replacement\");\n+\n+  print_parseable_fixits (&pp, &richloc);\n+  ASSERT_STREQ (\"fix-it:\\\"test.c\\\":{5:10-5:21}:\\\"replacement\\\"\\n\",\n+\t\tpp_formatted_text (&pp));\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+diagnostic_c_tests ()\n+{\n+  test_print_escaped_string ();\n+  test_print_parseable_fixits_none ();\n+  test_print_parseable_fixits_insert ();\n+  test_print_parseable_fixits_remove ();\n+  test_print_parseable_fixits_replace ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */"}, {"sha": "afce2850882891564ca5ed11fe468a7ea4c727a6", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -205,6 +205,10 @@ struct diagnostic_context\n   /* Usable by plugins; if true, print a debugging ruler above the\n      source output.  */\n   bool show_ruler_p;\n+\n+  /* If true, print fixits in machine-parseable form after the\n+     rest of the diagnostic.  */\n+  bool parseable_fixits_p;\n };\n \n static inline void"}, {"sha": "2c87c53d3d1d1aff3674a674684e24b5abb34901", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -246,7 +246,8 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-fmessage-length=@var{n}  @gol\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n--fno-diagnostics-show-option -fno-diagnostics-show-caret}\n+-fno-diagnostics-show-option -fno-diagnostics-show-caret @gol\n+-fdiagnostics-parseable-fixits}\n \n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n@@ -3389,6 +3390,37 @@ the @option{-fmessage-length=n} option is given.  When the output is done\n to the terminal, the width is limited to the width given by the\n @env{COLUMNS} environment variable or, if not set, to the terminal width.\n \n+@item -fdiagnostics-parseable-fixits\n+@opindex fdiagnostics-parseable-fixits\n+Emit fix-it hints in a machine-parseable format, suitable for consumption\n+by IDEs.  For each fix-it, a line will be printed after the relevant\n+diagnostic, starting with the string ``fix-it:''.  For example:\n+\n+@smallexample\n+fix-it:\"test.c\":@{45:3-45:21@}:\"gtk_widget_show_all\"\n+@end smallexample\n+\n+The location is expressed as a half-open range, expressed as a count of\n+bytes, starting at byte 1 for the initial column.  In the above example,\n+bytes 3 through 20 of line 45 of ``test.c'' are to be replaced with the\n+given string:\n+\n+@smallexample\n+00000000011111111112222222222\n+12345678901234567890123456789\n+  gtk_widget_showall (dlg);\n+  ^^^^^^^^^^^^^^^^^^\n+  gtk_widget_show_all\n+@end smallexample\n+\n+The filename and replacement string escape backslash as ``\\\\\", tab as ``\\t'',\n+newline as ``\\n'', double quotes as ``\\\"'', non-printable characters as octal\n+(e.g. vertical tab as ``\\013'').\n+\n+An empty replacement string indicates that the given range is to be removed.\n+An empty range (e.g. ``45:3-45:3'') indicates that the string is to\n+be inserted at the given position.\n+\n @end table\n \n @node Warning Options"}, {"sha": "74062106895d2b994c83cecaf419e0cbbaa70517", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -1871,6 +1871,10 @@ common_handle_option (struct gcc_options *opts,\n       diagnostic_color_init (dc, value);\n       break;\n \n+    case OPT_fdiagnostics_parseable_fixits:\n+      dc->parseable_fixits_p = value;\n+      break;\n+\n     case OPT_fdiagnostics_show_option:\n       dc->show_option_requested = value;\n       break;"}, {"sha": "bddf0b2d9a91fe0add7c6941a49bcc84f09bf093", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -59,6 +59,7 @@ selftest::run_tests ()\n   /* Higher-level tests, or for components that other selftests don't\n      rely on.  */\n   diagnostic_show_locus_c_tests ();\n+  diagnostic_c_tests ();\n   fold_const_c_tests ();\n   spellcheck_c_tests ();\n   spellcheck_tree_c_tests ();"}, {"sha": "c6becdd01dfb381868e547db1420cc7b00600175", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -72,6 +72,7 @@ extern void assert_streq (const location &loc,\n /* Declarations for specific families of tests (by source file), in\n    alphabetical order.  */\n extern void bitmap_c_tests ();\n+extern void diagnostic_c_tests ();\n extern void diagnostic_show_locus_c_tests ();\n extern void et_forest_c_tests ();\n extern void fold_const_c_tests ();"}, {"sha": "8cac69489d65c295d548aef29b2b25cf3482dbfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -1,3 +1,17 @@\n+2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-parseable-fixits.c: New\n+\tfile.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add\n+\tdiagnostic-test-show-locus-parseable-fixits.c to sources for\n+\tdiagnostic_plugin_test_show_locus.c.\n+\t* lib/gcc-defs.exp (freeform_regexps): New global.\n+\t(dg-regexp): New function.\n+\t(handle-dg-regexps): New function.\n+\t* lib/gcc-dg.exp (cleanup-after-saved-dg-test): Reset\n+\tfreeform_regexps to the empty list.\n+\t* lib/prune.exp (prune_gcc_output): Call handle-dg-regexps.\n+\n 2016-06-22  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR middle-end/71488"}, {"sha": "1490c981e4533b457cbcb318e9bf43136d7f911a", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-parseable-fixits.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-parseable-fixits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-parseable-fixits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-parseable-fixits.c?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdiagnostics-parseable-fixits\" } */\n+\n+/* This is a collection of unittests for diagnostic_show_locus;\n+   see the overview in diagnostic_plugin_test_show_locus.c.\n+\n+   In particular, note the discussion of why we need a very long line here:\n+01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n+   and that we can't use macros in this file.  */\n+\n+/* Unit test for rendering of insertion fixit hints\n+   (example taken from PR 62316).  */\n+\n+void test_fixit_insert (void)\n+{\n+#if 0\n+   int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{17:20-17:20\\\\}:.*\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{17:24-17:24\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"remove\" fixit hints.  */\n+\n+void test_fixit_remove (void)\n+{\n+#if 0\n+  int a;; /* { dg-warning \"example of a removal hint\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{28:9-28:10\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"replace\" fixit hints.  */\n+\n+void test_fixit_replace (void)\n+{\n+#if 0\n+  gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{38:3-38:21\\\\}:.*\" } */\n+#endif\n+}"}, {"sha": "f039c8de35f6fd38ba83b4cc4942c6bde40236cc", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -65,7 +65,8 @@ set plugin_test_list [list \\\n     { wide-int_plugin.c wide-int-test-1.c } \\\n     { diagnostic_plugin_test_show_locus.c \\\n \t  diagnostic-test-show-locus-bw.c \\\n-\t  diagnostic-test-show-locus-color.c } \\\n+\t  diagnostic-test-show-locus-color.c \\\n+\t  diagnostic-test-show-locus-parseable-fixits.c } \\\n     { diagnostic_plugin_test_tree_expression_range.c \\\n \t  diagnostic-test-expressions-1.c } \\\n     { diagnostic_plugin_show_trees.c \\"}, {"sha": "1186e5ba1a35f82ec3a338651a95988d89dc170b", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -352,3 +352,54 @@ proc gcc-set-multilib-library-path { compiler } {\n \n     return $libpath\n }\n+\n+# A list of all uses of dg-regexp, each entry of the form:\n+#   line-number regexp\n+# This is cleared at the end of each test by gcc-dg.exp's wrapper for dg-test.\n+set freeform_regexps []\n+\n+# Directive for looking for a regexp, without any line numbers or other\n+# prefixes.\n+\n+proc dg-regexp { args } {\n+    verbose \"dg-regexp: args: $args\" 2\n+\n+    global freeform_regexps\n+    lappend freeform_regexps $args\n+}\n+\n+# Hook to be called by prune.exp's prune_gcc_output to\n+# look for the expected dg-regexp expressions, pruning them,\n+# reporting PASS for those that are found, and FAIL for\n+# those that weren't found.\n+#\n+# It returns a pruned version of its output.\n+\n+proc handle-dg-regexps { text } {\n+    global freeform_regexps\n+    global testname_with_flags\n+\n+    foreach entry $freeform_regexps {\n+\tverbose \"  entry: $entry\" 3\n+\n+\tset linenum [lindex $entry 0]\n+\tset rexp [lindex $entry 1]\n+\n+\t# Escape newlines in $rexp so that we can print them in\n+\t# pass/fail results.\n+\tset escaped_regex [string map {\"\\n\" \"\\\\n\"} $rexp]\n+\tverbose \"escaped_regex: ${escaped_regex}\" 4\n+\n+\tset title \"$testname_with_flags dg-regexp $linenum\"\n+\n+\t# Use \"regsub\" to attempt to prune the pattern from $text\n+\tif {[regsub -line $rexp $text \"\" text]} {\n+\t    # Success; the multiline pattern was pruned.\n+\t    pass \"$title was found: \\\"$escaped_regex\\\"\"\n+\t} else {\n+\t    fail \"$title not found: \\\"$escaped_regex\\\"\"\n+\t}\n+    }\n+\n+    return $text\n+}"}, {"sha": "b7f0ff7838a99b183249535a383dcc795f741d31", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -899,6 +899,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tglobal saved_compiler_env_var\n \tglobal keep_saved_temps_suffixes\n \tglobal multiline_expected_outputs\n+\tglobal freeform_regexps\n \n \tset additional_files \"\"\n \tset additional_sources \"\"\n@@ -924,6 +925,7 @@ if { [info procs saved-dg-test] == [list] } {\n \t    unset testname_with_flags\n \t}\n \tset multiline_expected_outputs []\n+\tset freeform_regexps []\n     }\n \n     proc dg-test { args } {"}, {"sha": "d3ff4930276a1a4bd65b19c0bdd1ac01a6dfe80f", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -73,6 +73,9 @@ proc prune_gcc_output { text } {\n     # Call into multiline.exp to handle any multiline output directives.\n     set text [handle-multiline-outputs $text]\n \n+    # Handle any freeform regexps.\n+    set text [handle-dg-regexps $text]\n+\n     #send_user \"After:$text\\n\"\n \n     return $text"}, {"sha": "65bfe2612e2f836ac5466855a549b4afe063bd57", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -1,3 +1,21 @@\n+2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (fixit_hint::get_start_loc): New pure virtual\n+\tfunction.\n+\t(fixit_hint::maybe_get_end_loc): Likewise.\n+\t(fixit_insert::get_start_loc): New function, implementing\n+\tfixit_hint::get_start_loc.\n+\t(fixit_insert::maybe_get_end_loc): New function, implementing\n+\tfixit_hint::maybe_get_end_loc.\n+\t(fixit_remove::get_start_loc): New function, implementing\n+\tfixit_hint::get_start_loc.\n+\t(fixit_remove::maybe_get_end_loc): New function, implementing\n+\tfixit_hint::maybe_get_end_loc.\n+\t(fixit_replace::get_start_loc): New function, implementing\n+\tfixit_hint::get_start_loc.\n+\t(fixit_replace::maybe_get_end_loc): New function, implementing\n+\tfixit_hint::maybe_get_end_loc.\n+\n 2016-06-21  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* line-map.c (location_adhoc_data_update): Use int64_t instead of"}, {"sha": "416419c59d9905971470f85cfc93e77502b26623", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93eac6a845d79a77646068b98cbd90a9be7b58a/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93eac6a845d79a77646068b98cbd90a9be7b58a/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=a93eac6a845d79a77646068b98cbd90a9be7b58a", "patch": "@@ -1418,6 +1418,8 @@ class fixit_hint\n \n   virtual enum kind get_kind () const = 0;\n   virtual bool affects_line_p (const char *file, int line) = 0;\n+  virtual source_location get_start_loc () const = 0;\n+  virtual bool maybe_get_end_loc (source_location *out) const = 0;\n };\n \n class fixit_insert : public fixit_hint\n@@ -1428,6 +1430,8 @@ class fixit_insert : public fixit_hint\n   ~fixit_insert ();\n   enum kind get_kind () const { return INSERT; }\n   bool affects_line_p (const char *file, int line);\n+  source_location get_start_loc () const { return m_where; }\n+  bool maybe_get_end_loc (source_location *) const { return false; }\n \n   source_location get_location () const { return m_where; }\n   const char *get_string () const { return m_bytes; }\n@@ -1447,6 +1451,12 @@ class fixit_remove : public fixit_hint\n \n   enum kind get_kind () const { return REMOVE; }\n   bool affects_line_p (const char *file, int line);\n+  source_location get_start_loc () const { return m_src_range.m_start; }\n+  bool maybe_get_end_loc (source_location *out) const\n+  {\n+    *out = m_src_range.m_finish;\n+    return true;\n+  }\n \n   source_range get_range () const { return m_src_range; }\n \n@@ -1463,6 +1473,12 @@ class fixit_replace : public fixit_hint\n \n   enum kind get_kind () const { return REPLACE; }\n   bool affects_line_p (const char *file, int line);\n+  source_location get_start_loc () const { return m_src_range.m_start; }\n+  bool maybe_get_end_loc (source_location *out) const\n+  {\n+    *out = m_src_range.m_finish;\n+    return true;\n+  }\n \n   source_range get_range () const { return m_src_range; }\n   const char *get_string () const { return m_bytes; }"}]}