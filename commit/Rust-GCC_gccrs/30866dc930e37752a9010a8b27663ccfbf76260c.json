{"sha": "30866dc930e37752a9010a8b27663ccfbf76260c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4NjZkYzkzMGUzNzc1MmE5MDEwYThiMjc2NjNjY2ZiZjc2MjYwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-18T11:45:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-18T11:45:17Z"}, "message": "tree-pass.h (make_pass_dce_loop): Remove.\n\n2014-06-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-pass.h (make_pass_dce_loop): Remove.\n\t* passes.def: Replace pass_dce_loop with pass_dce.\n\t* tree-ssa-dce.c (perform_tree_ssa_dce): If something\n\tchanged free niter estimates and reset the scev cache.\n\t(tree_ssa_dce_loop, pass_data_dce_loop, pass_dce_loop,\n\tmake_pass_dce_loop): Remove.\n\t* tree-ssa-copy.c: Include tree-ssa-loop-niter.h.\n\t(fini_copy_prop): Return whether something changed.  Always\n\tlet substitute_and_fold perform DCE and free niter estimates\n\tand reset the scev cache if so.\n\t(execute_copy_prop): If sth changed schedule cleanup-cfg.\n\t(pass_data_copy_prop): Do not unconditionally schedule\n\tcleanup-cfg or update-ssa.\n\n\t* gcc.dg/vect/vect.exp: Remove dump-tree-dceloop-* processing.\n\t* gcc.dg/vect/dump-tree-dceloop-pr26359.c: Rename to ...\n\t* gcc.dg/vect/pr26359.c: ... this and adjust appropriately.\n\nFrom-SVN: r211781", "tree": {"sha": "3015c25206b2e29ed9f184938da40ddc8e57fbec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3015c25206b2e29ed9f184938da40ddc8e57fbec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30866dc930e37752a9010a8b27663ccfbf76260c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30866dc930e37752a9010a8b27663ccfbf76260c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30866dc930e37752a9010a8b27663ccfbf76260c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30866dc930e37752a9010a8b27663ccfbf76260c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "560c75e960fafc380191bf162a8e428a35e5fb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/560c75e960fafc380191bf162a8e428a35e5fb67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/560c75e960fafc380191bf162a8e428a35e5fb67"}], "stats": {"total": 132, "additions": 63, "deletions": 69}, "files": [{"sha": "b7acf344edb1c2a8b2a5b30b4afdb41f8a32c8a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -1,3 +1,19 @@\n+2014-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-pass.h (make_pass_dce_loop): Remove.\n+\t* passes.def: Replace pass_dce_loop with pass_dce.\n+\t* tree-ssa-dce.c (perform_tree_ssa_dce): If something\n+\tchanged free niter estimates and reset the scev cache.\n+\t(tree_ssa_dce_loop, pass_data_dce_loop, pass_dce_loop,\n+\tmake_pass_dce_loop): Remove.\n+\t* tree-ssa-copy.c: Include tree-ssa-loop-niter.h.\n+\t(fini_copy_prop): Return whether something changed.  Always\n+\tlet substitute_and_fold perform DCE and free niter estimates\n+\tand reset the scev cache if so.\n+\t(execute_copy_prop): If sth changed schedule cleanup-cfg.\n+\t(pass_data_copy_prop): Do not unconditionally schedule\n+\tcleanup-cfg or update-ssa.\n+\n 2014-06-18  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/61518"}, {"sha": "26b30c938f1b8a2c723977e776f064a1e16dfbed", "filename": "gcc/passes.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -203,7 +203,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_tree_loop_init);\n \t  NEXT_PASS (pass_lim);\n \t  NEXT_PASS (pass_copy_prop);\n-\t  NEXT_PASS (pass_dce_loop);\n+\t  NEXT_PASS (pass_dce);\n \t  NEXT_PASS (pass_tree_unswitch);\n \t  NEXT_PASS (pass_scev_cprop);\n \t  NEXT_PASS (pass_record_bounds);\n@@ -215,7 +215,7 @@ along with GCC; see the file COPYING3.  If not see\n \t      NEXT_PASS (pass_graphite_transforms);\n \t      NEXT_PASS (pass_lim);\n \t      NEXT_PASS (pass_copy_prop);\n-\t      NEXT_PASS (pass_dce_loop);\n+\t      NEXT_PASS (pass_dce);\n \t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_iv_canon);\n \t  NEXT_PASS (pass_parallelize_loops);\n@@ -224,7 +224,7 @@ along with GCC; see the file COPYING3.  If not see\n \t     Please do not add any other passes in between.  */\n \t  NEXT_PASS (pass_vectorize);\n           PUSH_INSERT_PASSES_WITHIN (pass_vectorize)\n-\t      NEXT_PASS (pass_dce_loop);\n+\t      NEXT_PASS (pass_dce);\n           POP_INSERT_PASSES ()\n           NEXT_PASS (pass_predcom);\n \t  NEXT_PASS (pass_complete_unroll);"}, {"sha": "52c4bef538fc7a563418fc73264b429404a936bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -1,3 +1,23 @@\n+2014-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-pass.h (make_pass_dce_loop): Remove.\n+\t* passes.def: Replace pass_dce_loop with pass_dce.\n+\t* tree-ssa-dce.c (perform_tree_ssa_dce): If something\n+\tchanged free niter estimates and reset the scev cache.\n+\t(tree_ssa_dce_loop, pass_data_dce_loop, pass_dce_loop,\n+\tmake_pass_dce_loop): Remove.\n+\t* tree-ssa-copy.c: Include tree-ssa-loop-niter.h.\n+\t(fini_copy_prop): Return whether something changed.  Always\n+\tlet substitute_and_fold perform DCE and free niter estimates\n+\tand reset the scev cache if so.\n+\t(execute_copy_prop): If sth changed schedule cleanup-cfg.\n+\t(pass_data_copy_prop): Do not unconditionally schedule\n+\tcleanup-cfg or update-ssa.\n+\n+\t* gcc.dg/vect/vect.exp: Remove dump-tree-dceloop-* processing.\n+\t* gcc.dg/vect/dump-tree-dceloop-pr26359.c: Rename to ...\n+\t* gcc.dg/vect/pr26359.c: ... this and adjust appropriately.\n+\n 2014-06-18  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/61518"}, {"sha": "f4e2a379cf10c74c44e2656c1335428759b02e55", "filename": "gcc/testsuite/gcc.dg/vect/pr26359.c", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr26359.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr26359.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr26359.c?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fdump-tree-dce5-details\" } */\n \n int a[256], b[256], c[256];\n \n@@ -11,6 +12,6 @@ foo () {\n   }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Deleting : vect_\" 0 \"dceloop3\" } } */\n-/* { dg-final { cleanup-tree-dump \"dceloop\\[1-3\\]\" } } */\n+/* { dg-final { scan-tree-dump-times \"Deleting : vect_\" 0 \"dce5\" } } */\n+/* { dg-final { cleanup-tree-dump \"dce\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */", "previous_filename": "gcc/testsuite/gcc.dg/vect/dump-tree-dceloop-pr26359.c"}, {"sha": "9fc8c18160e8d76a404ef5b5d43938183011014d", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -138,12 +138,6 @@ lappend DEFAULT_VECTCFLAGS \"-ftrapv\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/trapv-*.\\[cS\\]]]  \\\n \t\"\" $DEFAULT_VECTCFLAGS\n \n-# -fdump-tree-dceloop-details tests\n-set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n-lappend DEFAULT_VECTCFLAGS \"-fdump-tree-dceloop-details\"\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/dump-tree-dceloop-*.\\[cS\\]]]  \\\n-        \"\" $DEFAULT_VECTCFLAGS\n-\n # -fno-tree-dce tests\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"-fno-tree-dce\""}, {"sha": "bdaf673e3a42ad1ccdd205a2e800c5c3e332bd36", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -382,7 +382,6 @@ extern gimple_opt_pass *make_pass_build_alias (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_build_ealias (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_dominator (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_dce (gcc::context *ctxt);\n-extern gimple_opt_pass *make_pass_dce_loop (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_cd_dce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_call_cdce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_merge_phi (gcc::context *ctxt);"}, {"sha": "1d404d27b14488512deaae84d8a281b82b284e79", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -45,6 +45,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"tree-ssa-dom.h\"\n+#include \"tree-ssa-loop-niter.h\"\n+\n \n /* This file implements the copy propagation pass and provides a\n    handful of interfaces for performing const/copy propagation and\n@@ -542,7 +544,7 @@ get_value (tree name)\n /* Deallocate memory used in copy propagation and do final\n    substitution.  */\n \n-static void\n+static bool\n fini_copy_prop (void)\n {\n   unsigned i;\n@@ -594,10 +596,17 @@ fini_copy_prop (void)\n \t}\n     }\n \n-  /* Don't do DCE if SCEV is initialized.  It would destroy the scev cache.  */\n-  substitute_and_fold (get_value, NULL, !scev_initialized_p ());\n+  bool changed = substitute_and_fold (get_value, NULL, true);\n+  if (changed)\n+    {\n+      free_numbers_of_iterations_estimates ();\n+      if (scev_initialized_p ())\n+\tscev_reset ();\n+    }\n \n   free (copy_of);\n+\n+  return changed;\n }\n \n \n@@ -639,7 +648,8 @@ execute_copy_prop (void)\n {\n   init_copy_prop ();\n   ssa_propagate (copy_prop_visit_stmt, copy_prop_visit_phi_node);\n-  fini_copy_prop ();\n+  if (fini_copy_prop ())\n+    return TODO_cleanup_cfg;\n   return 0;\n }\n \n@@ -656,7 +666,7 @@ const pass_data pass_data_copy_prop =\n   0, /* properties_provided */\n   0, /* properties_destroyed */\n   0, /* todo_flags_start */\n-  ( TODO_cleanup_cfg | TODO_update_ssa ), /* todo_flags_finish */\n+  0, /* todo_flags_finish */\n };\n \n class pass_copy_prop : public gimple_opt_pass"}, {"sha": "171d216135ee713eada93107d7c50e32b39c1094", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 6, "deletions": 52, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30866dc930e37752a9010a8b27663ccfbf76260c/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=30866dc930e37752a9010a8b27663ccfbf76260c", "patch": "@@ -1479,7 +1479,12 @@ perform_tree_ssa_dce (bool aggressive)\n   tree_dce_done (aggressive);\n \n   if (something_changed)\n-    return TODO_update_ssa | TODO_cleanup_cfg;\n+    {\n+      free_numbers_of_iterations_estimates ();\n+      if (scev_initialized_p)\n+\tscev_reset ();\n+      return TODO_update_ssa | TODO_cleanup_cfg;\n+    }\n   return 0;\n }\n \n@@ -1490,19 +1495,6 @@ tree_ssa_dce (void)\n   return perform_tree_ssa_dce (/*aggressive=*/false);\n }\n \n-static unsigned int\n-tree_ssa_dce_loop (void)\n-{\n-  unsigned int todo;\n-  todo = perform_tree_ssa_dce (/*aggressive=*/false);\n-  if (todo)\n-    {\n-      free_numbers_of_iterations_estimates ();\n-      scev_reset ();\n-    }\n-  return todo;\n-}\n-\n static unsigned int\n tree_ssa_cd_dce (void)\n {\n@@ -1549,44 +1541,6 @@ make_pass_dce (gcc::context *ctxt)\n \n namespace {\n \n-const pass_data pass_data_dce_loop =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"dceloop\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  true, /* has_execute */\n-  TV_TREE_DCE, /* tv_id */\n-  ( PROP_cfg | PROP_ssa ), /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_dce_loop : public gimple_opt_pass\n-{\n-public:\n-  pass_dce_loop (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_dce_loop, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dce_loop (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_dce != 0; }\n-  virtual unsigned int execute (function *) { return tree_ssa_dce_loop (); }\n-\n-}; // class pass_dce_loop\n-\n-} // anon namespace\n-\n-gimple_opt_pass *\n-make_pass_dce_loop (gcc::context *ctxt)\n-{\n-  return new pass_dce_loop (ctxt);\n-}\n-\n-namespace {\n-\n const pass_data pass_data_cd_dce =\n {\n   GIMPLE_PASS, /* type */"}]}