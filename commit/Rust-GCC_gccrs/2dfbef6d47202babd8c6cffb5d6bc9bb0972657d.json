{"sha": "2dfbef6d47202babd8c6cffb5d6bc9bb0972657d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmYmVmNmQ0NzIwMmJhYmQ4YzZjZmZiNWQ2YmM5YmIwOTcyNjU3ZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-05-25T14:18:54Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-05-25T14:18:54Z"}, "message": "Makefile.tpl (stage[+id+]-start): Iterate over target module as well.\n\n2005-05-25  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.tpl (stage[+id+]-start): Iterate over target module as well.\n\t(Dependencies): Consider target modules for bootstrap dependencies.\n\tMake target bootstrap modules depend on each stage's gcc.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r100151", "tree": {"sha": "c508171503a85db522d11f6afe8bda6c6960481c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c508171503a85db522d11f6afe8bda6c6960481c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14ac4d9143f1249b0c415741a6a20311666b9afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ac4d9143f1249b0c415741a6a20311666b9afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ac4d9143f1249b0c415741a6a20311666b9afe"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "897a621ad1c8d42e48b71c369b67effc089a2ec9", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2dfbef6d47202babd8c6cffb5d6bc9bb0972657d", "patch": "@@ -1,3 +1,10 @@\n+2005-05-25  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.tpl (stage[+id+]-start): Iterate over target module as well.\n+\t(Dependencies): Consider target modules for bootstrap dependencies.\n+\tMake target bootstrap modules depend on each stage's gcc.\n+\t* Makefile.in: Regenerate.\n+\n 2005-05-20  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.def (configure-gcc): Depend on binutils having been built."}, {"sha": "1e080926569313b2c29af15b1ef6d3e5a7706d17", "filename": "Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=2dfbef6d47202babd8c6cffb5d6bc9bb0972657d", "patch": "@@ -33414,7 +33414,7 @@ stage1-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stage1 > stage_current ; \\\n \techo stage1 > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)\n @if bfd\n \t@cd $(HOST_SUBDIR); [ -d stage1-bfd ] || \\\n \t  mkdir stage1-bfd; \\\n@@ -33557,7 +33557,7 @@ stage2-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stage2 > stage_current ; \\\n \techo stage2 > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)\n @if bfd\n \t@cd $(HOST_SUBDIR); [ -d stage2-bfd ] || \\\n \t  mkdir stage2-bfd; \\\n@@ -33743,7 +33743,7 @@ stage3-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stage3 > stage_current ; \\\n \techo stage3 > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)\n @if bfd\n \t@cd $(HOST_SUBDIR); [ -d stage3-bfd ] || \\\n \t  mkdir stage3-bfd; \\\n@@ -33960,7 +33960,7 @@ stage4-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stage4 > stage_current ; \\\n \techo stage4 > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)\n @if bfd\n \t@cd $(HOST_SUBDIR); [ -d stage4-bfd ] || \\\n \t  mkdir stage4-bfd; \\\n@@ -34174,7 +34174,7 @@ stageprofile-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stageprofile > stage_current ; \\\n \techo stageprofile > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)\n @if bfd\n \t@cd $(HOST_SUBDIR); [ -d stageprofile-bfd ] || \\\n \t  mkdir stageprofile-bfd; \\\n@@ -34357,7 +34357,7 @@ stagefeedback-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stagefeedback > stage_current ; \\\n \techo stagefeedback > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)\n @if bfd\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-bfd ] || \\\n \t  mkdir stagefeedback-bfd; \\\n@@ -34654,6 +34654,7 @@ configure-target-qthreads: maybe-all-target-newlib maybe-all-target-libgloss\n \n \n \n+\n # With all the machinery above in place, it is pretty easy to generate\n # dependencies.  Host dependencies are a bit more complex because we have\n # to check for bootstrap/prebootstrap dependencies.  To resolve"}, {"sha": "365301d73aa55f0db652a771de6206f76165a653", "filename": "Makefile.tpl", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfbef6d47202babd8c6cffb5d6bc9bb0972657d/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=2dfbef6d47202babd8c6cffb5d6bc9bb0972657d", "patch": "@@ -1340,7 +1340,7 @@ stage[+id+]-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stage[+id+] > stage_current ; \\\n \techo stage[+id+] > stage_last; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)[+\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)[+\n    FOR host_modules +][+ IF bootstrap +]\n @if [+ module +]\n \t@cd $(HOST_SUBDIR); [ -d stage[+id+]-[+module+] ] || \\\n@@ -1349,7 +1349,16 @@ stage[+id+]-start::\n \t@CREATE_LINK_TO_DIR@ [+ IF prev +] ; \\\n \tset stage[+prev+]-[+module+] prev-[+module+] ; \\\n \t@CREATE_LINK_TO_DIR@ [+ ENDIF prev +]\n-@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]\n+@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +][+\n+   FOR target_modules +][+ IF bootstrap +]\n+@if target-[+ module +]\n+\t@cd $(TARGET_SUBDIR); [ -d stage[+id+]-[+module+] ] || \\\n+\t  mkdir stage[+id+]-[+module+]; \\\n+\tset stage[+id+]-[+module+] [+module+] ; \\\n+\t@CREATE_LINK_TO_DIR@ [+ IF prev +] ; \\\n+\tset stage[+prev+]-[+module+] prev-[+module+] ; \\\n+\t@CREATE_LINK_TO_DIR@ [+ ENDIF prev +]\n+@endif target-[+ module +][+ ENDIF bootstrap +][+ ENDFOR target_modules +]\n \n stage[+id+]-end::\n \t@rm -f stage_current[+ FOR host_modules +][+ IF bootstrap +]\n@@ -1358,7 +1367,14 @@ stage[+id+]-end::\n \t@UNDO_LINK_TO_DIR@ [+ IF prev +] ; \\\n \tset prev-[+module+] stage[+prev+]-[+module+] ; \\\n \t@UNDO_LINK_TO_DIR@ [+ ENDIF prev +]\n-@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]\n+@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +][+\n+   FOR target_modules +][+ IF bootstrap +]\n+@if target-[+ module +]\n+\t@cd $(HOST_SUBDIR); set [+module+] stage[+id+]-[+module+] ; \\\n+\t@UNDO_LINK_TO_DIR@ [+ IF prev +] ; \\\n+\tset prev-[+module+] stage[+prev+]-[+module+] ; \\\n+\t@UNDO_LINK_TO_DIR@ [+ ENDIF prev +]\n+@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR target_modules +]\n \n # Bubble a bugfix through all the stages up to stage [+id+].  They\n # are remade, but not reconfigured.  The next stage (if any) will not\n@@ -1467,7 +1483,10 @@ do-distclean: distclean-stage1\n # --------------------------------------\n \n # Generic dependencies for target modules on host stuff, especially gcc\n-[+ FOR target_modules +]\n+[+ FOR target_modules +][+ IF bootstrap +]\n+@if gcc-bootstrap[+ FOR bootstrap_stage +]\n+configure-stage[+id+]-target-[+module+]: maybe-all-stage[+id+]-gcc[+ ENDFOR +]\n+@endif gcc-bootstrap[+ ENDIF bootstrap +]\n configure-target-[+module+]: maybe-all-gcc\n [+ ENDFOR target_modules +]\n \n@@ -1535,7 +1554,6 @@ configure-target-[+module+]: maybe-all-target-newlib maybe-all-target-libgloss\n \t  \"prebootstrap\"\n \n \t  (if (or (= (dep-subtarget \"on\") \"install-\")\n-\t\t  (=* (dep-module \"on\") \"target-\")\n \t\t  (not (hash-ref boot-modules (dep-module \"module\")))\n \t\t  (not (hash-ref boot-modules (dep-module \"on\"))))\n               \"normal\"\n@@ -1549,6 +1567,10 @@ configure-target-[+module+]: maybe-all-target-newlib maybe-all-target-libgloss\n    (if (exist? \"bootstrap\")\n        (hash-create-handle! boot-modules (get \"module\") #t))\n    \"\" +][+ ENDFOR host_modules +]\n+[+ FOR target_modules +][+\n+   (if (exist? \"bootstrap\")\n+       (hash-create-handle! boot-modules (string-append \"target-\" (get \"module\")) #t))\n+   \"\" +][+ ENDFOR target_modules +]\n \n # With all the machinery above in place, it is pretty easy to generate\n # dependencies.  Host dependencies are a bit more complex because we have"}]}