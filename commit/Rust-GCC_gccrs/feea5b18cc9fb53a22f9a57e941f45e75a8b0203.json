{"sha": "feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlYTViMThjYzlmYjUzYTIyZjlhNTdlOTQxZjQ1ZTc1YThiMDIwMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-05-12T13:06:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-05-12T13:06:15Z"}, "message": "c-common.h (statement_code_p): Don't declare.\n\n./:\t* c-common.h (statement_code_p): Don't declare.\n\t(STATEMENT_CODE_P): Don't define.\n\t(INIT_STATEMENT_CODES): Don't define.\n\t* c-common.c (statement_code_p): Don't define.\ncp/:\n\t* cp-tree.h (cp_stmt_codes): Don't define.\n\t(statement_code_p): Declare.\n\t(STATEMENT_CODE_P): Define.\n\t* lex.c (statement_code_p): Define.\n\t(cxx_init): Use actual codes in stmt_codes initializer, not\n\tcp_stmt_codes macro.  Initialize statement_code_p directly, rather\n\tthan using INIT_STATEMENT_CODES.\n\nFrom-SVN: r99615", "tree": {"sha": "4e17142256d0c3131e7b10149f5c50c1ea1b9850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e17142256d0c3131e7b10149f5c50c1ea1b9850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a8c20ce52bf512a5578b3eae578ecc7b86f8cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8c20ce52bf512a5578b3eae578ecc7b86f8cb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a8c20ce52bf512a5578b3eae578ecc7b86f8cb8"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "0822e0cb3003e7af999903c7e00c25db5724494b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "patch": "@@ -1,3 +1,10 @@\n+2005-05-12  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* c-common.h (statement_code_p): Don't declare.\n+\t(STATEMENT_CODE_P): Don't define.\n+\t(INIT_STATEMENT_CODES): Don't define.\n+\t* c-common.c (statement_code_p): Don't define.\n+\n 2005-05-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.h: Remove dead code."}, {"sha": "b2ba01e7e9181d63b754301bad77be4acfd7f9b2", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "patch": "@@ -191,11 +191,6 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n */\n \n tree c_global_trees[CTI_MAX];\n-\n-/* TRUE if a code represents a statement.  The front end init\n-   langhook should take care of initialization of this array.  */\n-\n-bool statement_code_p[MAX_TREE_CODES];\n \f\n /* Switches common to the C front ends.  */\n "}, {"sha": "94532cc1e6e80c4c37c3b687b1d9849ee79a91c5", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "patch": "@@ -735,20 +735,6 @@ enum c_tree_code {\n \n #undef DEFTREECODE\n \n-/* TRUE if a code represents a statement.  The front end init\n-   langhook should take care of initialization of this array.  */\n-extern bool statement_code_p[MAX_TREE_CODES];\n-\n-#define STATEMENT_CODE_P(CODE) statement_code_p[(int) (CODE)]\n-\n-#define INIT_STATEMENT_CODES(STMT_CODES)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    unsigned int i;\t\t\t\t\t\t\\\n-    memset (&statement_code_p, 0, sizeof (statement_code_p));\t\\\n-    for (i = 0; i < ARRAY_SIZE (STMT_CODES); i++)\t\t\\\n-      statement_code_p[STMT_CODES[i]] = true;\t\t\t\\\n-  } while (0)\n-\n extern int stmts_are_full_exprs_p (void);\n extern int anon_aggr_type_p (tree);\n "}, {"sha": "e3e43b72a4bdadcbf4a3ded526ae756a2f6b559c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "patch": "@@ -1,3 +1,13 @@\n+2005-05-12  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* cp-tree.h (cp_stmt_codes): Don't define.\n+\t(statement_code_p): Declare.\n+\t(STATEMENT_CODE_P): Define.\n+\t* lex.c (statement_code_p): Define.\n+\t(cxx_init): Use actual codes in stmt_codes initializer, not\n+\tcp_stmt_codes macro.  Initialize statement_code_p directly, rather\n+\tthan using INIT_STATEMENT_CODES.\n+\n 2005-05-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* typeck.c (build_unary_op): Do not resort to address arithmetic"}, {"sha": "39d472bdc082408b1717a97015d6f69180b8d07b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "patch": "@@ -843,12 +843,11 @@ enum cplus_tree_code {\n };\n #undef DEFTREECODE\n \n-#define cp_stmt_codes\t\t\t\t\t\\\n-   CTOR_INITIALIZER,\tTRY_BLOCK,\tHANDLER,\t\\\n-   EH_SPEC_BLOCK,\tUSING_STMT,\tTAG_DEFN,\t\\\n-   IF_STMT,\t\tCLEANUP_STMT,\tFOR_STMT,\t\\\n-   WHILE_STMT,\t\tDO_STMT,\tBREAK_STMT,\t\\\n-   CONTINUE_STMT,\tSWITCH_STMT,\tEXPR_STMT\n+/* TRUE if a tree code represents a statement.  */\n+extern bool statement_code_p[MAX_TREE_CODES];\n+\n+#define STATEMENT_CODE_P(CODE) statement_code_p[(int) (CODE)]\n+\n enum languages { lang_c, lang_cplusplus, lang_java };\n \n /* Macros to make error reporting functions' lives easier.  */"}, {"sha": "dacac18286f6d2c8c94918af96d2f1d329530e66", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feea5b18cc9fb53a22f9a57e941f45e75a8b0203/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=feea5b18cc9fb53a22f9a57e941f45e75a8b0203", "patch": "@@ -312,18 +312,29 @@ init_cp_pragma (void)\n   c_register_pragma (\"GCC\", \"java_exceptions\", handle_pragma_java_exceptions);\n }\n \f\n+/* TRUE if a code represents a statement.  */\n+\n+bool statement_code_p[MAX_TREE_CODES];\n+\n /* Initialize the C++ front end.  This function is very sensitive to\n    the exact order that things are done here.  It would be nice if the\n    initialization done by this routine were moved to its subroutines,\n    and the ordering dependencies clarified and reduced.  */\n bool\n cxx_init (void)\n {\n+  unsigned int i;\n   static const enum tree_code stmt_codes[] = {\n-    cp_stmt_codes\n+   CTOR_INITIALIZER,\tTRY_BLOCK,\tHANDLER,\n+   EH_SPEC_BLOCK,\tUSING_STMT,\tTAG_DEFN,\n+   IF_STMT,\t\tCLEANUP_STMT,\tFOR_STMT,\n+   WHILE_STMT,\t\tDO_STMT,\tBREAK_STMT,\n+   CONTINUE_STMT,\tSWITCH_STMT,\tEXPR_STMT\n   };\n \n-  INIT_STATEMENT_CODES (stmt_codes);\n+  memset (&statement_code_p, 0, sizeof (statement_code_p));\n+  for (i = 0; i < ARRAY_SIZE (stmt_codes); i++)\n+    statement_code_p[stmt_codes[i]] = true;\n \n   /* We cannot just assign to input_filename because it has already\n      been initialized and will be used later as an N_BINCL for stabs+"}]}