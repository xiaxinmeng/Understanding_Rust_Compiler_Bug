{"sha": "73d10efa86de15b218ab2030a9d02d4e396afe2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkMTBlZmE4NmRlMTViMjE4YWIyMDMwYTlkMDJkNGUzOTZhZmUyYw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2004-06-08T19:24:07Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2004-06-08T19:24:07Z"}, "message": "toplev.c (floor_log2_wide): Replace loop with faster bit operations.\n\n* toplev.c (floor_log2_wide): Replace loop with faster bit\noperations.\n(exact_log2_wide): Define in terms of the above.\n* toplev.h (floor_log2): Use _builtin_clz family of builtins if\navailable.\n\nFrom-SVN: r82778", "tree": {"sha": "887165390ca703d20364aad9a0a6ada538084ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/887165390ca703d20364aad9a0a6ada538084ea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d10efa86de15b218ab2030a9d02d4e396afe2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d10efa86de15b218ab2030a9d02d4e396afe2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d10efa86de15b218ab2030a9d02d4e396afe2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d10efa86de15b218ab2030a9d02d4e396afe2c/comments", "author": null, "committer": null, "parents": [{"sha": "3b48085e661950a1e6fdaf1997cda53ed8388064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b48085e661950a1e6fdaf1997cda53ed8388064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b48085e661950a1e6fdaf1997cda53ed8388064"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "d150c60822dae09791cc6aa5b36284a22977779c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d10efa86de15b218ab2030a9d02d4e396afe2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d10efa86de15b218ab2030a9d02d4e396afe2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73d10efa86de15b218ab2030a9d02d4e396afe2c", "patch": "@@ -1,3 +1,11 @@\n+2004-06-08  DJ Delorie  <dj@redhat.com>\n+\n+\t* toplev.c (floor_log2_wide): Replace loop with faster bit\n+\toperations.\n+\t(exact_log2_wide): Define in terms of the above.\n+\t* toplev.h (floor_log2): Use _builtin_clz family of builtins if\n+\tavailable.\n+\n 2004-06-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/rs6000/rs6000.c (print_operand, <case 'z'>):"}, {"sha": "e1803943d9c509ac898c452403fb74e9fb03670c", "filename": "gcc/toplev.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d10efa86de15b218ab2030a9d02d4e396afe2c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d10efa86de15b218ab2030a9d02d4e396afe2c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=73d10efa86de15b218ab2030a9d02d4e396afe2c", "patch": "@@ -1248,36 +1248,48 @@ read_integral_parameter (const char *p, const char *pname, const int  defval)\n   return atoi (p);\n }\n \n-/* Return the logarithm of X, base 2, considering X unsigned,\n-   if X is a power of 2.  Otherwise, returns -1.\n+/* Given X, an unsigned number, return the largest int Y such that 2**Y <= X.\n+   If X is 0, return -1.\n \n-   This should be used via the `exact_log2' macro.  */\n+   This should be used via the floor_log2 macro.  */\n \n int\n-exact_log2_wide (unsigned HOST_WIDE_INT x)\n+floor_log2_wide (unsigned HOST_WIDE_INT x)\n {\n-  int log = 0;\n-  /* Test for 0 or a power of 2.  */\n-  if (x == 0 || x != (x & -x))\n+  int t=0;\n+  if (x == 0)\n     return -1;\n-  while ((x >>= 1) != 0)\n-    log++;\n-  return log;\n+  if (sizeof (HOST_WIDE_INT)*8 > 64)\n+    if (x >= (unsigned HOST_WIDE_INT)(1 << (t+64)))\n+      t += 64;\n+  if (sizeof (HOST_WIDE_INT)*8 > 32)\n+    if (x >= (unsigned HOST_WIDE_INT)(1 << (t+32)))\n+      t += 32;\n+  if (x >= (unsigned HOST_WIDE_INT)(1 << (t+16)))\n+    t += 16;\n+  if (x >= (unsigned HOST_WIDE_INT)(1 << (t+8)))\n+    t += 8;\n+  if (x >= (unsigned HOST_WIDE_INT)(1 << (t+4)))\n+    t += 4;\n+  if (x >= (unsigned HOST_WIDE_INT)(1 << (t+2)))\n+    t += 2;\n+  if (x >= (unsigned HOST_WIDE_INT)(1 << (t+1)))\n+    t += 1;\n+  return t;\n }\n \n-/* Given X, an unsigned number, return the largest int Y such that 2**Y <= X.\n-   If X is 0, return -1.\n+/* Return the logarithm of X, base 2, considering X unsigned,\n+   if X is a power of 2.  Otherwise, returns -1.\n \n-   This should be used via the floor_log2 macro.  */\n+   This should be used via the `exact_log2' macro.  */\n \n int\n-floor_log2_wide (unsigned HOST_WIDE_INT x)\n+exact_log2_wide (unsigned HOST_WIDE_INT x)\n {\n-  int log = -1;\n-  while (x != 0)\n-    log++,\n-    x >>= 1;\n-  return log;\n+  /* Test for 0 or a power of 2.  */\n+  if (x == 0 || x != (x & -x))\n+    return -1;\n+  return floor_log2_wide (x);\n }\n \n /* Handler for fatal signals, such as SIGSEGV.  These are transformed"}, {"sha": "f12102e9f7b46a00c745661a0f7ee147f40ee820", "filename": "gcc/toplev.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d10efa86de15b218ab2030a9d02d4e396afe2c/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d10efa86de15b218ab2030a9d02d4e396afe2c/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=73d10efa86de15b218ab2030a9d02d4e396afe2c", "patch": "@@ -152,7 +152,30 @@ extern bool fast_math_flags_set_p\t(void);\n \n #ifndef exact_log2\n #define exact_log2(N) exact_log2_wide ((unsigned HOST_WIDE_INT) (N))\n+\n+#if (__GNUC__ * 1000 + __GNUC_MINOR__) >= 3004\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONGLONG\n+#define FL2T__ HOST_WIDE_INT\n+#define FL2T_CLZ__ __builtin_clzll\n+#else\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+#define FL2T__ HOST_WIDE_INT\n+#define FL2T_CLZ__ __builtin_clzl\n+#else\n+#define FL2T__ int\n+#define FL2T_CLZ__ __builtin_clz\n+#endif\n+#endif\n+static inline int floor_log2(FL2T__ n)\n+{\n+  if (n)\n+    return (sizeof(FL2T__)*8-1) - (int)FL2T_CLZ__(n);\n+  return -1;\n+}\n+#else\n #define floor_log2(N) floor_log2_wide ((unsigned HOST_WIDE_INT) (N))\n+#endif\n+\n #endif\n extern int exact_log2_wide             (unsigned HOST_WIDE_INT);\n extern int floor_log2_wide             (unsigned HOST_WIDE_INT);"}]}