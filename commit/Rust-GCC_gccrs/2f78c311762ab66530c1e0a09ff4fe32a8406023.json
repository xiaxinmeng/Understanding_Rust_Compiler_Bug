{"sha": "2f78c311762ab66530c1e0a09ff4fe32a8406023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3OGMzMTE3NjJhYjY2NTMwYzFlMGEwOWZmNGZlMzJhODQwNjAyMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-17T20:29:21Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-17T20:29:21Z"}, "message": "system.h: Forward-declare struct rtx_def, struct rtvec_def, and union tree_node.\n\n\t* system.h: Forward-declare struct rtx_def, struct rtvec_def,\n\tand union tree_node.  Typedef rtx, rtvec, and tree.  Fix comment.\n\t* rtl.h: Don't forward-declare union tree_node here.  Don't\n\ttypedef rtx or rtvec here.  Change all uses of struct rtx_def *,\n\tstruct rtvec_def *, or union tree_node * to use rtx, rtvec,\n\tand tree respectively.\n\t* tree.h: Don't forward-declare struct rtx_def here.  Don't\n\ttypedef tree here.  Change all uses of struct rtx_def *,\n\tstruct rtvec_def *, or union tree_node * to use rtx, rtvec,\n\tand tree respectively.\n\nFrom-SVN: r44980", "tree": {"sha": "4bd6d1fe0235550c272807e7302e8461a3c02f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bd6d1fe0235550c272807e7302e8461a3c02f44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f78c311762ab66530c1e0a09ff4fe32a8406023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f78c311762ab66530c1e0a09ff4fe32a8406023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f78c311762ab66530c1e0a09ff4fe32a8406023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f78c311762ab66530c1e0a09ff4fe32a8406023/comments", "author": null, "committer": null, "parents": [{"sha": "91625004b2e16ac5e92b7e22fbfa4189b6818786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91625004b2e16ac5e92b7e22fbfa4189b6818786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91625004b2e16ac5e92b7e22fbfa4189b6818786"}], "stats": {"total": 202, "additions": 107, "deletions": 95}, "files": [{"sha": "16296da74cddfb7f6de2478e0104257ff18b57f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f78c311762ab66530c1e0a09ff4fe32a8406023", "patch": "@@ -1,11 +1,24 @@\n+2001-08-17  Zack Weinberg  <zackw@panix.com>\n+\n+\t* system.h: Forward-declare struct rtx_def, struct rtvec_def,\n+\tand union tree_node.  Typedef rtx, rtvec, and tree.  Fix comment.\n+\t* rtl.h: Don't forward-declare union tree_node here.  Don't\n+\ttypedef rtx or rtvec here.  Change all uses of struct rtx_def *,\n+\tstruct rtvec_def *, or union tree_node * to use rtx, rtvec,\n+\tand tree respectively.\n+\t* tree.h: Don't forward-declare struct rtx_def here.  Don't\n+\ttypedef tree here.  Change all uses of struct rtx_def *,\n+\tstruct rtvec_def *, or union tree_node * to use rtx, rtvec,\n+\tand tree respectively.\n+\n 2001-08-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/mips/elf.h, config/mips/elf64.h, config/mips/netbsd.h,\n \tconfig/mips/openbsd.h: Fix typos last change.\n \n 2001-08-17  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n-\t* doc/invoke.texi (Optimize Options): The default for \n+\t* doc/invoke.texi (Optimize Options): The default for\n \t-finline-limit is 600.\n \n 2001-08-17  Richard Henderson  <rth@redhat.com>\n@@ -71,7 +84,7 @@ Fri Aug 17 15:41:35 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* output.h: Update prototypes.\n \n \t* target.h (target.asm_out.named_section): Remove align parameter.\n-\t* varasm.c, config/a29k/a29k.c, config/alpha/alpha.c, \n+\t* varasm.c, config/a29k/a29k.c, config/alpha/alpha.c,\n \tconfig/arm/arm.c, config/c4x/c4x.c, config/h8300/h8300.c,\n \tconfig/i386/i386.c, config/i386/winnt.c, config/m68k/m68k.c,\n \tconfig/mcore/mcore.c, config/mips/mips.c, config/rs6000/rs6000.c,\n@@ -93,7 +106,7 @@ Fri Aug 17 15:41:35 CEST 2001  Jan Hubicka  <jh@suse.cz>\n 2001-08-16  Zack Weinberg  <zackw@panix.com>\n \n \t* doc/tm.texi: Remove extra @table command.\n- \n+\n 2001-08-16  Zack Weinberg  <zackw@panix.com>\n \n \t* final.c (shorten_branches): Clear the end of the label_align"}, {"sha": "3450ef37b5902b397adc3233f115dcda9bbeb0f8", "filename": "gcc/rtl.h", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2f78c311762ab66530c1e0a09ff4fe32a8406023", "patch": "@@ -31,10 +31,6 @@ struct function;\n #undef ABS /* Likewise.  */\n #undef PC /* Likewise.  */\n \n-#ifndef TREE_CODE\n-union tree_node;\n-#endif\n-\n /* Value used by some passes to \"recognize\" noop moves as valid instructions.\n  */\n #define NOOP_MOVE_INSN_CODE\tINT_MAX\n@@ -93,19 +89,19 @@ typedef union rtunion_def\n   int rtint;\n   unsigned int rtuint;\n   const char *rtstr;\n-  struct rtx_def *rtx;\n-  struct rtvec_def *rtvec;\n+  rtx rtx;\n+  rtvec rtvec;\n   enum machine_mode rttype;\n   addr_diff_vec_flags rt_addr_diff_vec_flags;\n   struct cselib_val_struct *rt_cselib;\n   struct bitmap_head_def *rtbit;\n-  union tree_node *rttree;\n+  tree rttree;\n   struct basic_block_def *bb;\n } rtunion;\n \n /* RTL expression (\"rtx\").  */\n \n-typedef struct rtx_def\n+struct rtx_def\n {\n   /* The kind of expression this is.  */\n   ENUM_BITFIELD(rtx_code) code: 16;\n@@ -183,7 +179,7 @@ typedef struct rtx_def\n      The number of operands and their types are controlled\n      by the `code' field, according to rtl.def.  */\n   rtunion fld[1];\n-} *rtx;\n+};\n \n #define NULL_RTX (rtx) 0\n \n@@ -203,10 +199,10 @@ typedef struct rtx_def\n    for a variable number of things.  The principle use is inside\n    PARALLEL expressions.  */\n \n-typedef struct rtvec_def{\n+struct rtvec_def {\n   int num_elem;\t\t/* number of elements */\n-  struct rtx_def *elem[1];\n-} *rtvec;\n+  rtx elem[1];\n+};\n \n #define NULL_RTVEC (rtvec) 0\n \n@@ -1147,7 +1143,7 @@ extern int ceil_log2\t\t\tPARAMS ((unsigned HOST_WIDE_INT));\n #define plus_constant(X,C) plus_constant_wide (X, (HOST_WIDE_INT) (C))\n \n /* In builtins.c */\n-extern rtx expand_builtin_expect_jump\tPARAMS ((union tree_node *, rtx, rtx));\n+extern rtx expand_builtin_expect_jump\tPARAMS ((tree, rtx, rtx));\n \n /* In explow.c */\n extern void set_stack_check_libfunc PARAMS ((rtx));\n@@ -1237,8 +1233,7 @@ extern rtx assign_stack_local\t\tPARAMS ((enum machine_mode,\n \t\t\t\t\t       HOST_WIDE_INT, int));\n extern rtx assign_stack_temp\t\tPARAMS ((enum machine_mode,\n \t\t\t\t\t       HOST_WIDE_INT, int));\n-extern rtx assign_temp\t\t\tPARAMS ((union tree_node *,\n-\t\t\t\t\t       int, int, int));\n+extern rtx assign_temp\t\t\tPARAMS ((tree, int, int, int));\n /* In emit-rtl.c */\n extern rtx emit_insn_before\t\tPARAMS ((rtx, rtx));\n extern rtx emit_jump_insn_before\tPARAMS ((rtx, rtx));\n@@ -1348,7 +1343,7 @@ extern rtx simplify_rtx\t\t\tPARAMS ((rtx));\n extern rtx avoid_constant_pool_reference PARAMS ((rtx));\n \n /* In function.c  */\n-extern rtx gen_mem_addressof\t\tPARAMS ((rtx, union tree_node *));\n+extern rtx gen_mem_addressof\t\tPARAMS ((rtx, tree));\n \n /* In regclass.c  */\n extern enum machine_mode choose_hard_reg_mode PARAMS ((unsigned int,\n@@ -1636,8 +1631,8 @@ extern rtx gen_lowpart_SUBREG PARAMS ((enum machine_mode, rtx));\n \n extern rtx find_next_ref\t\tPARAMS ((rtx, rtx));\n \n-extern rtx output_constant_def\t\tPARAMS ((union tree_node *, int));\n-extern rtx immed_real_const\t\tPARAMS ((union tree_node *));\n+extern rtx output_constant_def\t\tPARAMS ((tree, int));\n+extern rtx immed_real_const\t\tPARAMS ((tree));\n \n /* Define a default value for STORE_FLAG_VALUE.  */\n "}, {"sha": "58d0925a67b0c00605b3919c462d47b716b3f0db", "filename": "gcc/system.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2f78c311762ab66530c1e0a09ff4fe32a8406023", "patch": "@@ -491,8 +491,8 @@ extern void abort PARAMS ((void));\n #endif\n \n /* Provide some sort of boolean type.  We use stdbool.h if it's\n-  available.  This is dead last because various system headers might\n-  mess us up.  */\n+  available.  This must be after all inclusion of system headers,\n+  as some of them will mess us up.  */\n #undef bool\n #undef true\n #undef false\n@@ -513,6 +513,18 @@ typedef char _Bool;\n #define TRUE true\n #define FALSE false\n \n+/* Provide three core typedefs used by everything, if we are compiling\n+   GCC.  These used to be found in rtl.h and tree.h, but this is no\n+   longer practical.  */\n+#ifdef IN_GCC\n+struct rtx_def;\n+struct rtvec_def;\n+union tree_node;\n+typedef struct rtx_def *rtx;\n+typedef struct rtvec_def *rtvec;\n+typedef union tree_node *tree;\n+#endif\n+\n /* As the last action in this file, we poison the identifiers that\n    shouldn't be used.  Note, luckily gcc-3.0's token-based integrated\n    preprocessor won't trip on poisoned identifiers that arrive from"}, {"sha": "e5c0c2a15b18a0db9923ef3a7446cf60da1757fc", "filename": "gcc/tree.h", "status": "modified", "additions": 64, "deletions": 72, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f78c311762ab66530c1e0a09ff4fe32a8406023/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2f78c311762ab66530c1e0a09ff4fe32a8406023", "patch": "@@ -22,10 +22,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"machmode.h\"\n #include \"version.h\"\n \n-#ifndef RTX_CODE\n-struct rtx_def;\n-#endif\n-\n /* Codes of tree nodes */\n \n #define DEFTREECODE(SYM, STRING, TYPE, NARGS)   SYM,\n@@ -98,7 +94,7 @@ enum built_in_function\n extern const char *const built_in_names[(int) END_BUILTINS];\n \n /* An array of _DECL trees for the above.  */\n-extern union tree_node *built_in_decls[(int) END_BUILTINS];\n+extern tree built_in_decls[(int) END_BUILTINS];\n \f\n /* The definition of tree nodes fills the next several pages.  */\n \n@@ -116,10 +112,6 @@ extern union tree_node *built_in_decls[(int) END_BUILTINS];\n    fields as well.  The fields of a node are never accessed directly,\n    always through accessor macros.  */\n \n-/* This type is used everywhere to refer to a tree node.  */\n-\n-typedef union tree_node *tree;\n-\n /* Every kind of tree node starts with this structure,\n    so all nodes have these fields.\n \n@@ -128,8 +120,8 @@ typedef union tree_node *tree;\n \n struct tree_common\n {\n-  union tree_node *chain;\n-  union tree_node *type;\n+  tree chain;\n+  tree type;\n   void *aux;\n   ENUM_BITFIELD(tree_code) code : 8;\n   unsigned side_effects_flag : 1;\n@@ -670,7 +662,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n struct tree_int_cst\n {\n   struct tree_common common;\n-  struct rtx_def *rtl;\t/* acts as link to register transfer language\n+  rtx rtl;\t/* acts as link to register transfer language\n \t\t\t   (rtl) info */\n   /* A sub-struct is necessary here because the function `const_hash'\n      wants to scan both words as a unit and taking the address of the\n@@ -699,7 +691,7 @@ struct tree_int_cst\n struct tree_real_cst\n {\n   struct tree_common common;\n-  struct rtx_def *rtl;\t/* acts as link to register transfer language\n+  rtx rtl;\t/* acts as link to register transfer language\n \t\t\t\t   (rtl) info */\n   REAL_VALUE_TYPE real_cst;\n };\n@@ -711,7 +703,7 @@ struct tree_real_cst\n struct tree_string\n {\n   struct tree_common common;\n-  struct rtx_def *rtl;\t/* acts as link to register transfer language\n+  rtx rtl;\t/* acts as link to register transfer language\n \t\t\t\t   (rtl) info */\n   int length;\n   const char *pointer;\n@@ -724,10 +716,10 @@ struct tree_string\n struct tree_complex\n {\n   struct tree_common common;\n-  struct rtx_def *rtl;\t/* acts as link to register transfer language\n+  rtx rtl;\t/* acts as link to register transfer language\n \t\t\t\t   (rtl) info */\n-  union tree_node *real;\n-  union tree_node *imag;\n+  tree real;\n+  tree imag;\n };\n \f\n #include \"hashtable.h\"\n@@ -760,8 +752,8 @@ struct tree_identifier\n struct tree_list\n {\n   struct tree_common common;\n-  union tree_node *purpose;\n-  union tree_node *value;\n+  tree purpose;\n+  tree value;\n };\n \n /* In a TREE_VEC node.  */\n@@ -773,14 +765,14 @@ struct tree_vec\n {\n   struct tree_common common;\n   int length;\n-  union tree_node *a[1];\n+  tree a[1];\n };\n \n /* Define fields and accessors for some nodes that represent expressions.  */\n \n /* In a SAVE_EXPR node.  */\n #define SAVE_EXPR_CONTEXT(NODE) TREE_OPERAND(NODE, 1)\n-#define SAVE_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[2])\n+#define SAVE_EXPR_RTL(NODE) (*(rtx *) &EXPR_CHECK (NODE)->exp.operands[2])\n #define SAVE_EXPR_NOPLACEHOLDER(NODE) TREE_UNSIGNED (NODE)\n /* Nonzero if the SAVE_EXPRs value should be kept, even if it occurs\n    both in normal code and in a handler.  (Normally, in a handler, all\n@@ -789,12 +781,12 @@ struct tree_vec\n #define SAVE_EXPR_PERSISTENT_P(NODE) TREE_ASM_WRITTEN (NODE)\n \n /* In a RTL_EXPR node.  */\n-#define RTL_EXPR_SEQUENCE(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[0])\n-#define RTL_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[1])\n+#define RTL_EXPR_SEQUENCE(NODE) (*(rtx *) &EXPR_CHECK (NODE)->exp.operands[0])\n+#define RTL_EXPR_RTL(NODE) (*(rtx *) &EXPR_CHECK (NODE)->exp.operands[1])\n \n /* In a WITH_CLEANUP_EXPR node.  */\n #define WITH_CLEANUP_EXPR_RTL(NODE) \\\n-  (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[2])\n+  (*(rtx *) &EXPR_CHECK (NODE)->exp.operands[2])\n \n /* In a CONSTRUCTOR node.  */\n #define CONSTRUCTOR_ELTS(NODE) TREE_OPERAND (NODE, 1)\n@@ -830,7 +822,7 @@ struct tree_exp\n {\n   struct tree_common common;\n   int complexity;\n-  union tree_node *operands[1];\n+  tree operands[1];\n };\n \f\n /* In a BLOCK node.  */\n@@ -887,12 +879,12 @@ struct tree_block\n   unsigned abstract_flag : 1;\n   unsigned block_num : 30;\n \n-  union tree_node *vars;\n-  union tree_node *subblocks;\n-  union tree_node *supercontext;\n-  union tree_node *abstract_origin;\n-  union tree_node *fragment_origin;\n-  union tree_node *fragment_chain;\n+  tree vars;\n+  tree subblocks;\n+  tree supercontext;\n+  tree abstract_origin;\n+  tree fragment_origin;\n+  tree fragment_chain;\n };\n \f\n /* Define fields and accessors for nodes representing data types.  */\n@@ -1159,10 +1151,10 @@ struct tree_block\n struct tree_type\n {\n   struct tree_common common;\n-  union tree_node *values;\n-  union tree_node *size;\n-  union tree_node *size_unit;\n-  union tree_node *attributes;\n+  tree values;\n+  tree size;\n+  tree size_unit;\n+  tree attributes;\n   unsigned int uid;\n \n   unsigned int precision : 9;\n@@ -1186,17 +1178,17 @@ struct tree_type\n   unsigned user_align : 1;\n \n   unsigned int align;\n-  union tree_node *pointer_to;\n-  union tree_node *reference_to;\n+  tree pointer_to;\n+  tree reference_to;\n   union {int address; char *pointer; } symtab;\n-  union tree_node *name;\n-  union tree_node *minval;\n-  union tree_node *maxval;\n-  union tree_node *next_variant;\n-  union tree_node *main_variant;\n-  union tree_node *binfo;\n-  union tree_node *noncopied_parts;\n-  union tree_node *context;\n+  tree name;\n+  tree minval;\n+  tree maxval;\n+  tree next_variant;\n+  tree main_variant;\n+  tree binfo;\n+  tree noncopied_parts;\n+  tree context;\n   HOST_WIDE_INT alias_set;\n   /* Points to a structure whose details depend on the language in use.  */\n   struct lang_type *lang_specific;\n@@ -1692,7 +1684,7 @@ struct tree_decl\n   const char *filename;\n   int linenum;\n   unsigned int uid;\n-  union tree_node *size;\n+  tree size;\n   ENUM_BITFIELD(machine_mode) mode : 8;\n \n   unsigned external_flag : 1;\n@@ -1749,18 +1741,18 @@ struct tree_decl\n     struct {unsigned int align : 24; unsigned int off_align : 8;} a;\n   } u1;\n \n-  union tree_node *size_unit;\n-  union tree_node *name;\n-  union tree_node *context;\n-  union tree_node *arguments;\t/* Also used for DECL_FIELD_OFFSET */\n-  union tree_node *result;\t/* Also used for DECL_BIT_FIELD_TYPE */\n-  union tree_node *initial;\t/* Also used for DECL_QUALIFIER */\n-  union tree_node *abstract_origin;\n-  union tree_node *assembler_name;\n-  union tree_node *section_name;\n-  union tree_node *machine_attributes;\n-  struct rtx_def *rtl;\t/* RTL representation for object.  */\n-  struct rtx_def *live_range_rtl;\n+  tree size_unit;\n+  tree name;\n+  tree context;\n+  tree arguments;\t/* Also used for DECL_FIELD_OFFSET */\n+  tree result;\t/* Also used for DECL_BIT_FIELD_TYPE */\n+  tree initial;\t/* Also used for DECL_QUALIFIER */\n+  tree abstract_origin;\n+  tree assembler_name;\n+  tree section_name;\n+  tree machine_attributes;\n+  rtx rtl;\t/* RTL representation for object.  */\n+  rtx live_range_rtl;\n \n   /* In FUNCTION_DECL, if it is inline, holds the saved insn chain.\n      In FIELD_DECL, is DECL_FIELD_BIT_OFFSET.\n@@ -1769,12 +1761,12 @@ struct tree_decl\n      Used by Chill and Java in LABEL_DECL and by C++ and Java in VAR_DECL.  */\n   union {\n     struct function *f;\n-    struct rtx_def *r;\n-    union tree_node *t;\n+    rtx r;\n+    tree t;\n     int i;\n   } u2;\n \n-  union tree_node *vindex;\n+  tree vindex;\n   HOST_WIDE_INT pointer_alias_set;\n   /* Points to a structure whose details depend on the language in use.  */\n   struct lang_decl *lang_specific;\n@@ -2054,15 +2046,15 @@ extern HOST_WIDE_INT tree_low_cst\tPARAMS ((tree, int));\n extern int tree_int_cst_msb\t\tPARAMS ((tree));\n extern int tree_int_cst_sgn\t\tPARAMS ((tree));\n extern int tree_expr_nonnegative_p\tPARAMS ((tree));\n-extern int rtl_expr_nonnegative_p\tPARAMS ((struct rtx_def *));\n+extern int rtl_expr_nonnegative_p\tPARAMS ((rtx));\n extern int index_type_equal\t\tPARAMS ((tree, tree));\n extern tree get_inner_array_type\tPARAMS ((tree));\n \n /* From expmed.c.  Since rtl.h is included after tree.h, we can't\n    put the prototype here.  Rtl.h does declare the prototype if\n    tree.h had been included.  */\n \n-extern tree make_tree\t\t\tPARAMS ((tree, struct rtx_def *));\n+extern tree make_tree\t\t\tPARAMS ((tree, rtx));\n \f\n /* Return a type like TTYPE except that its TYPE_ATTRIBUTES\n    is ATTRIBUTE.\n@@ -2575,7 +2567,7 @@ extern int type_num_arguments                   PARAMS ((tree));\n /* In stmt.c */\n \n extern int in_control_zone_p\t\t\tPARAMS ((void));\n-extern void expand_fixups\t\t\tPARAMS ((struct rtx_def *));\n+extern void expand_fixups\t\t\tPARAMS ((rtx));\n extern tree expand_start_stmt_expr\t\tPARAMS ((void));\n extern tree expand_end_stmt_expr\t\tPARAMS ((tree));\n extern void expand_expr_stmt\t\t\tPARAMS ((tree));\n@@ -2602,7 +2594,7 @@ extern int expand_exit_loop_if_false\t\tPARAMS ((struct nesting *,\n extern int expand_exit_something\t\tPARAMS ((void));\n \n extern void expand_return\t\t\tPARAMS ((tree));\n-extern int optimize_tail_recursion\t\tPARAMS ((tree, struct rtx_def *));\n+extern int optimize_tail_recursion\t\tPARAMS ((tree, rtx));\n extern void expand_start_bindings_and_block     PARAMS ((int, tree));\n #define expand_start_bindings(flags) \\\n   expand_start_bindings_and_block(flags, NULL_TREE)\n@@ -2796,12 +2788,12 @@ extern void combine_temp_slots\t\tPARAMS ((void));\n extern void free_temp_slots\t\tPARAMS ((void));\n extern void pop_temp_slots\t\tPARAMS ((void));\n extern void push_temp_slots\t\tPARAMS ((void));\n-extern void preserve_temp_slots\t\tPARAMS ((struct rtx_def *));\n+extern void preserve_temp_slots\t\tPARAMS ((rtx));\n extern void preserve_rtl_expr_temps\tPARAMS ((tree));\n extern int aggregate_value_p\t\tPARAMS ((tree));\n extern void free_temps_for_rtl_expr\tPARAMS ((tree));\n-extern void instantiate_virtual_regs\tPARAMS ((tree, struct rtx_def *));\n-extern void unshare_all_rtl\t\tPARAMS ((tree, struct rtx_def *));\n+extern void instantiate_virtual_regs\tPARAMS ((tree, rtx));\n+extern void unshare_all_rtl\t\tPARAMS ((tree, rtx));\n extern int max_parm_reg_num\t\tPARAMS ((void));\n extern void push_function_context\tPARAMS ((void));\n extern void pop_function_context\tPARAMS ((void));\n@@ -2810,7 +2802,7 @@ extern void pop_function_context_from\tPARAMS ((tree));\n \n /* In print-rtl.c */\n #ifdef BUFSIZ\n-extern void print_rtl\t\t\tPARAMS ((FILE *, struct rtx_def *));\n+extern void print_rtl\t\t\tPARAMS ((FILE *, rtx));\n #endif\n \n /* In print-tree.c */\n@@ -2825,13 +2817,13 @@ extern void indent_to\t\t\tPARAMS ((FILE *, int));\n \n /* In expr.c */\n extern int apply_args_register_offset\t\tPARAMS ((int));\n-extern struct rtx_def *expand_builtin_return_addr\n-\tPARAMS ((enum built_in_function, int, struct rtx_def *));\n+extern rtx expand_builtin_return_addr\n+\tPARAMS ((enum built_in_function, int, rtx));\n extern void check_max_integer_computation_mode\tPARAMS ((tree));\n \n /* In emit-rtl.c */\n extern void start_sequence_for_rtl_expr\t\tPARAMS ((tree));\n-extern struct rtx_def *emit_line_note\t\tPARAMS ((const char *, int));\n+extern rtx emit_line_note\t\tPARAMS ((const char *, int));\n \n /* In calls.c */\n "}]}