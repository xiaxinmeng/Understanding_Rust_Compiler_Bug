{"sha": "f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3YWNkZjliMTA4OWY3NGNkNWNhOTUzZmJlNTA4YWU3ZTllMzRjMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-18T23:21:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-18T23:21:34Z"}, "message": "re PR c/27676 (gcc is overly strict in assignment to read-only data)\n\n\tPR c/27676\n\t* c-typeck.c (readonly_warning): new.\n\t(build_unary_op, build_modify_expr): Use readonly_warning for\n\tstoring into something readonly but not const-qualified.\n\ntestsuite:\n\t* gcc.dg/lvalue-5.c: New test.\n\nFrom-SVN: r146336", "tree": {"sha": "9cf337c7fba41b385386e352cb0ce692c4edb4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf337c7fba41b385386e352cb0ce692c4edb4cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d0a3061a8364ff56ace51413f29b50416fda3a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0a3061a8364ff56ace51413f29b50416fda3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d0a3061a8364ff56ace51413f29b50416fda3a0"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "405aefa6983676b1c2d47023f75c64c65e249639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "patch": "@@ -1,3 +1,10 @@\n+2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/27676\n+\t* c-typeck.c (readonly_warning): new.\n+\t(build_unary_op, build_modify_expr): Use readonly_warning for\n+\tstoring into something readonly but not const-qualified.\n+\n 2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/22367"}, {"sha": "77eafbff0098dfac88fc6b82bf66ce75034b22b6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "patch": "@@ -107,6 +107,7 @@ static void set_nonincremental_init (void);\n static void set_nonincremental_init_from_string (tree);\n static tree find_init_member (tree);\n static void readonly_error (tree, enum lvalue_use);\n+static void readonly_warning (tree, enum lvalue_use);\n static int lvalue_or_else (const_tree, enum lvalue_use);\n static int lvalue_p (const_tree);\n static void record_maybe_used_decl (tree);\n@@ -3323,14 +3324,19 @@ build_unary_op (location_t location,\n \t  }\n \n \t/* Report a read-only lvalue.  */\n-\tif (TREE_READONLY (arg))\n+\tif (TYPE_READONLY (argtype))\n \t  {\n \t    readonly_error (arg,\n \t\t\t    ((code == PREINCREMENT_EXPR\n \t\t\t      || code == POSTINCREMENT_EXPR)\n \t\t\t     ? lv_increment : lv_decrement));\n \t    return error_mark_node;\n \t  }\n+\telse if (TREE_READONLY (arg))\n+\t  readonly_warning (arg,\n+\t\t\t    ((code == PREINCREMENT_EXPR\n+\t\t\t      || code == POSTINCREMENT_EXPR)\n+\t\t\t     ? lv_increment : lv_decrement));\n \n \tif (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE)\n \t  val = boolean_increment (code, arg);\n@@ -3540,6 +3546,29 @@ readonly_error (tree arg, enum lvalue_use use)\n \t   arg);\n }\n \n+/* Give a warning for storing in something that is read-only in GCC\n+   terms but not const in ISO C terms.  */\n+\n+static void\n+readonly_warning (tree arg, enum lvalue_use use)\n+{\n+  switch (use)\n+    {\n+    case lv_assign:\n+      warning (0, \"assignment of read-only location %qE\", arg);\n+      break;\n+    case lv_increment:\n+      warning (0, \"increment of read-only location %qE\", arg);\n+      break;\n+    case lv_decrement:\n+      warning (0, \"decrement of read-only location %qE\", arg);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  return;\n+}\n+\n \n /* Return nonzero if REF is an lvalue valid for this language;\n    otherwise, print an error message and return zero.  USE says\n@@ -4292,14 +4321,16 @@ build_modify_expr (location_t location,\n \n   /* Give an error for storing in something that is 'const'.  */\n \n-  if (TREE_READONLY (lhs) || TYPE_READONLY (lhstype)\n+  if (TYPE_READONLY (lhstype)\n       || ((TREE_CODE (lhstype) == RECORD_TYPE\n \t   || TREE_CODE (lhstype) == UNION_TYPE)\n \t  && C_TYPE_FIELDS_READONLY (lhstype)))\n     {\n       readonly_error (lhs, lv_assign);\n       return error_mark_node;\n     }\n+  else if (TREE_READONLY (lhs))\n+    readonly_warning (lhs, lv_assign);\n \n   /* If storing into a structure or union member,\n      it has probably been given type `int'."}, {"sha": "c87827bd08b36899e09799871a01ba4860c6eac9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "patch": "@@ -1,3 +1,8 @@\n+2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/27676\n+\t* gcc.dg/lvalue-5.c: New test.\n+\n 2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/22367"}, {"sha": "514f35ed802bfb860a3f870b268406c033bc1842", "filename": "gcc/testsuite/gcc.dg/lvalue-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-5.c?ref=f37acdf9b1089f74cd5ca953fbe508ae7e9e34c0", "patch": "@@ -0,0 +1,14 @@\n+/* Test assignment to elements of a string literal is a warning, not\n+   an error.  PR 27676.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+void\n+f (void)\n+{\n+  \"foo\"[0] = 0; /* { dg-warning \"assignment of read-only location\" } */\n+  \"foo\"[0]++; /* { dg-warning \"increment of read-only location\" } */\n+  \"foo\"[0]--; /* { dg-warning \"decrement of read-only location\" } */\n+  ++\"foo\"[0]; /* { dg-warning \"increment of read-only location\" } */\n+  --\"foo\"[0]; /* { dg-warning \"decrement of read-only location\" } */\n+}"}]}