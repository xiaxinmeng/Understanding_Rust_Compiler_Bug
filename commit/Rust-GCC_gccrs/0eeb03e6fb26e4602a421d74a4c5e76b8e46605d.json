{"sha": "0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlYjAzZTZmYjI2ZTQ2MDJhNDIxZDc0YTRjNWU3NmI4ZTQ2NjA1ZA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-04-18T15:18:21Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-04-18T15:18:21Z"}, "message": "re PR tree-optimization/20922 (missed always false conditional)\n\n2005-04-18  James A. Morrison  <phython@gcc.gnu.org>\n\n        PR tree-optimization/20922\n        * fold-const.c (fold_binary): Fold X - c > X and X + c < X to false.\n        Fold X + c >= X and fold X - c <= X to true.\n\nFrom-SVN: r98321", "tree": {"sha": "9a986aa5b5fe42c3e7cb2e30a5bd0d19a609233d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a986aa5b5fe42c3e7cb2e30a5bd0d19a609233d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/comments", "author": null, "committer": null, "parents": [{"sha": "8f6c5889021fd7fdba2505d1b7fe51e2e59316cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6c5889021fd7fdba2505d1b7fe51e2e59316cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6c5889021fd7fdba2505d1b7fe51e2e59316cb"}], "stats": {"total": 270, "additions": 270, "deletions": 0}, "files": [{"sha": "f1e108db68242a8a5744ae4fa1554d3e07e033bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -1,3 +1,9 @@\n+2005-04-18  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/20922\n+\t* fold-const.c (fold_binary): Fold X - c > X and X + c < X to false.\n+\tFold X + c >= X and fold X - c <= X to true.\n+\n 2005-04-18  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* config/ia64/unwind-ia64.c (emergency_reg_state_free): Make an"}, {"sha": "1e1ecc1470bf84ed9719a64e20735c37c352066b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -8848,6 +8848,77 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    }\n \t}\n \n+      /* Transform comparisons of the form X +- C CMP X.  */\n+      if ((code != EQ_EXPR && code != NE_EXPR)\n+\t  && (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n+\t  && ((TREE_CODE (TREE_OPERAND (arg0, 1)) == REAL_CST\n+\t       && !HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0))))\n+\t      || (TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n+\t          && !TYPE_UNSIGNED (TREE_TYPE (arg1))\n+\t\t  && !(flag_wrapv || flag_trapv))))\n+\t{\n+\t  tree arg01 = TREE_OPERAND (arg0, 1);\n+\t  enum tree_code code0 = TREE_CODE (arg0);\n+\t  int is_positive;\n+\n+\t  if (TREE_CODE (arg01) == REAL_CST)\n+\t    is_positive = REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg01)) ? -1 : 1;\n+\t  else\n+\t    is_positive = tree_int_cst_sgn (arg01);\n+\n+\t  /* (X - c) > X becomes false.  */\n+\t  if (code == GT_EXPR\n+\t      && ((code0 == MINUS_EXPR && is_positive >= 0)\n+\t\t  || (code0 == PLUS_EXPR && is_positive <= 0)))\n+\t    return constant_boolean_node (0, type);\n+\n+\t  /* Likewise (X + c) < X becomes false.  */\n+\t  if (code == LT_EXPR\n+\t      && ((code0 == PLUS_EXPR && is_positive >= 0)\n+\t\t  || (code0 == MINUS_EXPR && is_positive <= 0)))\n+\t    return constant_boolean_node (0, type);\n+\n+\t  /* Convert (X - c) <= X to true.  */\n+\t  if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg1)))\n+\t      && code == LE_EXPR\n+\t      && ((code0 == MINUS_EXPR && is_positive >= 0)\n+\t\t  || (code0 == PLUS_EXPR && is_positive <= 0)))\n+\t    return constant_boolean_node (1, type);\n+\n+\t  /* Convert (X + c) >= X to true.  */\n+\t  if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg1)))\n+\t      && code == GE_EXPR\n+\t      && ((code0 == PLUS_EXPR && is_positive >= 0)\n+\t\t  || (code0 == MINUS_EXPR && is_positive <= 0)))\n+\t    return constant_boolean_node (1, type);\n+\n+\t  if (TREE_CODE (arg01) == INTEGER_CST)\n+\t    {\n+\t      /* Convert X + c > X and X - c < X to true for integers.  */\n+\t      if (code == GT_EXPR\n+\t          && ((code0 == PLUS_EXPR && is_positive > 0)\n+\t\t      || (code0 == MINUS_EXPR && is_positive < 0)))\n+\t\treturn constant_boolean_node (1, type);\n+\n+\t      if (code == LT_EXPR\n+\t          && ((code0 == MINUS_EXPR && is_positive > 0)\n+\t\t      || (code0 == PLUS_EXPR && is_positive < 0)))\n+\t\treturn constant_boolean_node (1, type);\n+\n+\t      /* Convert X + c <= X and X - c >= X to false for integers.  */\n+\t      if (code == LE_EXPR\n+\t          && ((code0 == PLUS_EXPR && is_positive > 0)\n+\t\t      || (code0 == MINUS_EXPR && is_positive < 0)))\n+\t\treturn constant_boolean_node (0, type);\n+\n+\t      if (code == GE_EXPR\n+\t          && ((code0 == MINUS_EXPR && is_positive > 0)\n+\t\t      || (code0 == PLUS_EXPR && is_positive < 0)))\n+\t\treturn constant_boolean_node (0, type);\n+\t    }\n+\t}\n+\n       if (FLOAT_TYPE_P (TREE_TYPE (arg0)))\n \t{\n \t  tree targ0 = strip_float_extensions (arg0);"}, {"sha": "81e1aa792a43ed48ddb58f9d583e91425a127a07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -1,3 +1,13 @@\n+2005-04-18  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/20922\n+\t* gcc.dg/pr20922-1.c: New test.\n+\t* gcc.dg/pr20922-2.c: New test.\n+\t* gcc.dg/pr20922-3.c: New test.\n+\t* gcc.dg/pr20922-4.c: New test.\n+\t* gcc.dg/pr20922-5.c: New test.\n+\t* gcc.dg/pr20922-6.c: New test.\n+\n 2005-04-11  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/20950"}, {"sha": "c016356c8abe6b299e9918d9a26aa4c5acc267a5", "filename": "gcc/testsuite/gcc.dg/pr20922-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-1.c?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-wrapv -fdump-tree-generic\" } */\n+int f(int i)\n+{\n+  return (i - 2) > i;\n+}\n+\n+int g(int i)\n+{\n+  return (i + 2) < i;\n+}\n+\n+int h(int i)\n+{\n+  return (i + (-2)) > i;\n+}\n+\n+int j(int i)\n+{\n+  return (i - (-2)) < i;\n+}\n+\n+int x(double i)\n+{\n+  return (i - 2.0) > i;\n+}\n+\n+int y(double i)\n+{\n+  return (i + 2.0) < i;\n+}\n+\n+int z(double i)\n+{\n+  return (i + (-2.0)) > i;\n+}\n+/* { dg-final { scan-tree-dump-times \" = 0\" 7 \"generic\" } } */\n+/* { dg-final { cleanup-tree-dump \"generic\" } } */"}, {"sha": "3c4380f8d0017340516f50497303fdd5933aa54b", "filename": "gcc/testsuite/gcc.dg/pr20922-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-2.c?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fwrapv -fdump-tree-generic\" } */\n+int f (int i)\n+{\n+  return (i - 2) > i;\n+}\n+\n+int g (int i)\n+{\n+  return (i + 2) < i;\n+}\n+\n+int h (double i)\n+{\n+  return (i + 2.0) <= i;\n+}\n+/* { dg-final { scan-tree-dump-times \" = 0\" 0 \"generic\" } } */\n+/* { dg-final { cleanup-tree-dump \"generic\" } } */"}, {"sha": "476eb540e2a82a0e8b863cabc0a888917818dc87", "filename": "gcc/testsuite/gcc.dg/pr20922-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-3.c?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ffast-math -fno-wrapv -fdump-tree-generic\" } */\n+int f(int i)\n+{\n+  return (i - 2) <= i;\n+}\n+\n+int g(int i)\n+{\n+  return (i + 2) >= i;\n+}\n+\n+int h(int i)\n+{\n+  return (i + (-2)) <= i;\n+}\n+\n+int x(double i)\n+{\n+  return (i - 2.0) <= i;\n+}\n+\n+int y(double i)\n+{\n+  return (i + 2.0) >= i;\n+}\n+\n+int z(double i)\n+{\n+  return (i + (-2.0)) <= i;\n+}\n+/* { dg-final { scan-tree-dump-times \" = 1\" 6 \"generic\" } } */\n+/* { dg-final { cleanup-tree-dump \"generic\" } } */"}, {"sha": "664a62f4e4c707c74f41bf4d0ac898f6c27e5167", "filename": "gcc/testsuite/gcc.dg/pr20922-4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-4.c?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-wrapv -fdump-tree-generic\" } */\n+int f(int i)\n+{\n+  return i < (i - 2);\n+}\n+\n+int g(int i)\n+{\n+  return i > (i + 2);\n+}\n+\n+int h(int i)\n+{\n+  return i < (i + (-2));\n+}\n+\n+int j(int i)\n+{\n+  return i > (i - (-2));\n+}\n+\n+int x(double i)\n+{\n+  return i < (i - 2.0);\n+}\n+\n+int y(double i)\n+{\n+  return i > (i + 2.0);\n+}\n+\n+int z(double i)\n+{\n+  return i < (i + (-2.0));\n+}\n+/* { dg-final { scan-tree-dump-times \" = 0\" 7 \"generic\" } } */\n+/* { dg-final { cleanup-tree-dump \"generic\" } } */"}, {"sha": "7377badd1358d9f4ce77b2a701a694c92716fdb3", "filename": "gcc/testsuite/gcc.dg/pr20922-5.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-5.c?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsignaling-nans -fwrapv -fdump-tree-generic\" } */\n+int f(int i)\n+{\n+  return i < (i - 2);\n+}\n+\n+int g(int i)\n+{\n+  return i > (i + 2);\n+}\n+\n+int h (double i)\n+{\n+  return i >= i + 2.0;\n+}\n+\n+int j (double i)\n+{\n+  return i > i + 2.0;\n+}\n+/* { dg-final { scan-tree-dump-times \" = 0\" 0 \"generic\" } } */\n+/* { dg-final { cleanup-tree-dump \"generic\" } } */"}, {"sha": "ff1d519e2a8fc87894a7711863c5c15bc7b57c57", "filename": "gcc/testsuite/gcc.dg/pr20922-6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-6.c?ref=0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ffast-math -fno-wrapv -fdump-tree-generic\" } */\n+int f(int i)\n+{\n+  return i >= (i - 2);\n+}\n+\n+int g(int i)\n+{\n+  return i <= (i + 2);\n+}\n+\n+int h(int i)\n+{\n+  return i >= (i + (-2));\n+}\n+\n+int x(double i)\n+{\n+  return i >= (i - 2.0);\n+}\n+\n+int y(double i)\n+{\n+  return i <= (i + 2.0);\n+}\n+\n+int z(double i)\n+{\n+  return i >= (i + (-2.0));\n+}\n+/* { dg-final { scan-tree-dump-times \" = 1\" 6 \"generic\" } } */\n+/* { dg-final { cleanup-tree-dump \"generic\" } } */"}]}