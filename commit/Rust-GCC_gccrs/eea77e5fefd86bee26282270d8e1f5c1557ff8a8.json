{"sha": "eea77e5fefd86bee26282270d8e1f5c1557ff8a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhNzdlNWZlZmQ4NmJlZTI2MjgyMjcwZDhlMWY1YzE1NTdmZjhhOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-01T06:19:45Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-01T06:19:45Z"}, "message": "(USER_H): Files in ginclude now.  Add stdarg.h,\n\nstddef.h, varargs.h.\n(all.cross, rest.encap): Move LIBGCC after stmp-headers.  Add\nobjc-runtime, and SYSCALLS.c.X.\n(for-bootstrap): Delete.\n(OBJC, OBJECTIVE-C): Delete objc-runtime.\n(proto): Delete SYSCALLS.c.X.\n(*.o): Delete gvarargs.h dependencies.\n(stmp-int-hdrs): Delete gvarargs.h, gstdarg.h, gstddef.h deps, and\ncode to copy them.\n\nFrom-SVN: r6955", "tree": {"sha": "48306694df56a63f14e56a728826adcda6a24a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48306694df56a63f14e56a728826adcda6a24a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea77e5fefd86bee26282270d8e1f5c1557ff8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea77e5fefd86bee26282270d8e1f5c1557ff8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea77e5fefd86bee26282270d8e1f5c1557ff8a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea77e5fefd86bee26282270d8e1f5c1557ff8a8/comments", "author": null, "committer": null, "parents": [{"sha": "2822d96ec195c0189edb31e25a64943a3f95b962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2822d96ec195c0189edb31e25a64943a3f95b962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2822d96ec195c0189edb31e25a64943a3f95b962"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "4d3274bcf423f0e3c0dc65595a6cfeec350cd52c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77e5fefd86bee26282270d8e1f5c1557ff8a8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77e5fefd86bee26282270d8e1f5c1557ff8a8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=eea77e5fefd86bee26282270d8e1f5c1557ff8a8", "patch": "@@ -339,7 +339,8 @@ all: all.indirect\n \n all.indirect: $(ALL)\n \n-# IN_GCC tells obstack.h to use gstddef.h.\n+# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.\n+# ??? IN_GCC should be obsolete now.\n INTERNAL_CFLAGS = $(CROSS) -DIN_GCC\n \n # This is the variable actually used when we compile.\n@@ -468,8 +469,11 @@ LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \\\n \n # Header files that are made available under the same name\n # to programs compiled with GCC.\n-USER_H = va-alpha.h va-h8300.h va-i860.h va-i960.h va-mips.h va-m88k.h \\\n-    va-pa.h va-pyr.h va-sparc.h va-clipper.h va-spur.h proto.h $(EXTRA_HEADERS)\n+USER_H = ginclude/stdarg.h ginclude/stddef.h ginclude/varargs.h \\\n+    ginclude/va-alpha.h ginclude/va-h8300.h ginclude/va-i860.h \\\n+    ginclude/va-i960.h ginclude/va-mips.h ginclude/va-m88k.h ginclude/va-pa.h \\\n+    ginclude/va-pyr.h ginclude/va-sparc.h ginclude/va-clipper.h \\\n+    ginclude/va-spur.h ginclude/proto.h $(EXTRA_HEADERS)\n \n # The files that \"belong\" in CONFIG_H are deliberately omitted\n # because having them there would not be useful in actual practice.\n@@ -495,15 +499,13 @@ all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n # Note that we can compile enquire using the cross-compiler just build,\n # although we can't run it on this machine.\n-all.cross: native gcc-cross g++-cross specs $(LIBGCC) stmp-headers $(STMP_FIXPROTO) $(CROSS_TEST) $(ENQUIRE) $(EXTRA_PARTS)\n+all.cross: native gcc-cross g++-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO) objc-runtime SYSCALLS.c.X $(CROSS_TEST) $(ENQUIRE) $(EXTRA_PARTS)\n # This is what to compile if making gcc with a cross-compiler.\n all.build: native xgcc g++ $(EXTRA_PARTS)\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc g++ specs $(LIBGCC1) xlimits.h\n-# Use this to make a GCC that will be used only to recompile GCC.\n-for-bootstrap: start.encap $(LIBGCC)\n-# These can't be made, with COFF encapsulation, until after GCC can run.\n-rest.encap: $(LIBGCC) stmp-headers $(STMP_FIXPROTO) $(EXTRA_PARTS)\n+# These can't be made until after GCC can run.\n+rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) objc-runtime SYSCALLS.c.X $(EXTRA_PARTS)\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n@@ -514,8 +516,8 @@ native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_C\n # to do the right thing within all.cross.\n C c: cc1\n C++ c++: cc1plus\n-OBJC objc: cc1obj objc-runtime\n-OBJECTIVE-C objective-c: cc1obj objc-runtime\n+OBJC objc: cc1obj\n+OBJECTIVE-C objective-c: cc1obj\n PROTO: proto\n \n # Really, really stupid make features, such as SUN's KEEP_STATE, may force\n@@ -804,9 +806,6 @@ crtend.o:\tcrtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n \n # Note that dependencies on obstack.h are not written\n # because that file is not part of GCC.\n-# Dependencies on gvarargs.h are not written\n-# because all that file does, when not compiling with GCC,\n-# is include the system varargs.h.\n \n # C language specific files.\n \n@@ -873,7 +872,7 @@ cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h\n cp-error.o : cp-error.c $(CONFIG_H) $(CPLUS_TREE_H)\n cp-errfn.o : cp-errfn.c $(CONFIG_H) $(CPLUS_TREE_H)\n \n-g++.o : g++.c $(CONFIG_H) gvarargs.h\n+g++.o : g++.c $(CONFIG_H)\n \n # To make a configuration always use collect2, set USE_COLLECT2 to ld.\n ld: collect2\n@@ -911,7 +910,7 @@ c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h\n \n # Language-independent files.\n \n-gcc.o: gcc.c $(CONFIG_H) gvarargs.h config.status\n+gcc.o: gcc.c $(CONFIG_H) config.status\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n   -DSTANDARD_STARTFILE_PREFIX=\\\"$(libdir)/\\\" \\\n   -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc-lib/\\\" \\\n@@ -928,7 +927,7 @@ obstack.o: obstack.c\n \n convert.o: convert.c $(CONFIG_H) $(TREE_H) flags.h convert.h\n \n-tree.o : tree.c $(CONFIG_H) $(TREE_H) gvarargs.h flags.h function.h\n+tree.o : tree.c $(CONFIG_H) $(TREE_H) flags.h function.h\n print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) function.h\n fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h \n@@ -958,7 +957,7 @@ expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n    typeclass.h bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h \\\n    bc-emit.h modemap.def\n calls.o : calls.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h expr.h insn-codes.h \\\n-   insn-flags.h gvarargs.h \n+   insn-flags.h\n expmed.o : expmed.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h expr.h recog.h real.h\n explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h \\\n@@ -972,7 +971,7 @@ sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) gsyms.h flags.h \\\n dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf.h flags.h \\\n    insn-config.h reload.h output.h defaults.h\n xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoffout.h flags.h\n-emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h gvarargs.h \\\n+emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h regs.h insn-config.h insn-codes.h real.h expr.h bytecode.h \\\n    bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h bc-emit.h bc-opname.h\n real.o : real.c $(CONFIG_H) $(TREE_H)\n@@ -994,7 +993,7 @@ unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h insn-codes.h \\\n    integrate.h regs.h flags.h expr.h loop.h\n flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h \\\n    basic-block.h regs.h hard-reg-set.h output.h\n-combine.o : combine.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h  \\\n+combine.o : combine.c $(CONFIG_H) $(RTL_H) flags.h  \\\n    insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h \\\n    basic-block.h recog.h real.h hard-reg-set.h\n regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h \\\n@@ -1016,7 +1015,7 @@ reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h \\\n    flags.h output.h\n sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \\\n    flags.h insn-config.h insn-attr.h\n-final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) gvarargs.h flags.h regs.h \\\n+final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h regs.h \\\n    recog.h conditions.h insn-config.h insn-attr.h real.h output.h \\\n    hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h\n recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n@@ -1411,7 +1410,7 @@ cccp.o: cccp.c $(CONFIG_H) pcp.h version.c config.status\n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon).\n \n-proto: config.status protoize unprotoize SYSCALLS.c.X\n+proto: config.status protoize unprotoize\n \n protoize: protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) \\\n@@ -1489,8 +1488,7 @@ test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)\n \n # Build the include directory except for float.h (which depends upon\n # enquire).\n-stmp-int-hdrs: stmp-fixinc $(USER_H) gvarargs.h gstdarg.h gstddef.h \\\n-  xlimits.h objc-headers\n+stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h objc-headers\n # Copy in the headers provided with gcc.\n # The sed command gets just the last file name component;\n # this is necessary because VPATH could add a dirname.\n@@ -1500,18 +1498,9 @@ stmp-int-hdrs: stmp-fixinc $(USER_H) gvarargs.h gstdarg.h gstddef.h \\\n \tfor file in $(USER_H); do \\\n \t  realfile=`echo $$file | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n \t  rm -f $$objdir/include/$$realfile; \\\n-\t  cp $$realfile $$objdir/include; \\\n+\t  cp ginclude/$$realfile $$objdir/include; \\\n \t  chmod a+r $$objdir/include/$$realfile; \\\n \tdone\n-\trm -f include/varargs.h\n-\tcp $(srcdir)/gvarargs.h include/varargs.h\n-\tchmod a+r include/varargs.h\n-\trm -f include/stdarg.h\n-\tcp $(srcdir)/gstdarg.h include/stdarg.h\n-\tchmod a+r include/stdarg.h\n-\trm -f include/stddef.h\n-\tcp $(srcdir)/gstddef.h include/stddef.h\n-\tchmod a+r include/stddef.h\n \trm -f include/limits.h\n \tcp xlimits.h include/limits.h\n \tchmod a+r include/limits.h"}]}