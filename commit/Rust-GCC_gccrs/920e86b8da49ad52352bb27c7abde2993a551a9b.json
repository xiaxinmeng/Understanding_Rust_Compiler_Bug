{"sha": "920e86b8da49ad52352bb27c7abde2993a551a9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwZTg2YjhkYTQ5YWQ1MjM1MmJiMjdjN2FiZGUyOTkzYTU1MWE5Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-11-27T03:46:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-27T03:46:50Z"}, "message": "h8300.c: Adjust spacing.\n\n\t* config/h8300/h8300.c: Adjust spacing.\n\t* config/h8300/h8300.h: Likewise.\n\nFrom-SVN: r59557", "tree": {"sha": "620b97e2b32e48cb5e006204e4f732b9c6ef6e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/620b97e2b32e48cb5e006204e4f732b9c6ef6e61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/920e86b8da49ad52352bb27c7abde2993a551a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920e86b8da49ad52352bb27c7abde2993a551a9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920e86b8da49ad52352bb27c7abde2993a551a9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920e86b8da49ad52352bb27c7abde2993a551a9b/comments", "author": null, "committer": null, "parents": [{"sha": "7b1bd3c534986f4ceffcdc726e83cb668293d39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1bd3c534986f4ceffcdc726e83cb668293d39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1bd3c534986f4ceffcdc726e83cb668293d39e"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "3ea3f355a5e898838f5925768efd3dcbdefc9674", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920e86b8da49ad52352bb27c7abde2993a551a9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920e86b8da49ad52352bb27c7abde2993a551a9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=920e86b8da49ad52352bb27c7abde2993a551a9b", "patch": "@@ -1,3 +1,8 @@\n+2002-11-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c: Adjust spacing.\n+\t* config/h8300/h8300.h: Likewise.\n+\n 2002-11-26  Richard Henderson  <rth@redhat.com>\n \n \t* hooks.c (hook_bool_void_false, hook_void_tree_int,"}, {"sha": "54dc57d3f4eef2caee34d9336b55db6ffeae9a8d", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920e86b8da49ad52352bb27c7abde2993a551a9b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920e86b8da49ad52352bb27c7abde2993a551a9b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=920e86b8da49ad52352bb27c7abde2993a551a9b", "patch": "@@ -314,7 +314,7 @@ h8300_init_once ()\n       error (\"-ms2600 is used without -ms\");\n       target_flags |= MASK_H8300S;\n     }\n-  \n+\n   if (TARGET_H8300 && TARGET_NORMAL_MODE)\n     {\n       error (\"-mn is used without -mh or -ms\");"}, {"sha": "96cd0bb5ffcb8eea1773d9b6ca47fbbe99de12b6", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920e86b8da49ad52352bb27c7abde2993a551a9b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920e86b8da49ad52352bb27c7abde2993a551a9b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=920e86b8da49ad52352bb27c7abde2993a551a9b", "patch": "@@ -42,7 +42,7 @@ extern const char * const *h8_reg_names;\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       if (TARGET_H8300H)\t\t\t\t\\\n-        {\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n \t  builtin_define (\"__H8300H__\");\t\t\\\n \t  builtin_assert (\"cpu=h8300h\");\t\t\\\n \t  builtin_assert (\"machine=h8300h\");\t\t\\\n@@ -52,7 +52,7 @@ extern const char * const *h8_reg_names;\n \t    }\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       else if (TARGET_H8300S)\t\t\t\t\\\n-        {\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n \t  builtin_define (\"__H8300S__\");\t\t\\\n \t  builtin_assert (\"cpu=h8300s\");\t\t\\\n \t  builtin_assert (\"machine=h8300s\");\t\t\\\n@@ -62,7 +62,7 @@ extern const char * const *h8_reg_names;\n \t    }\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n \t  builtin_define (\"__H8300__\");\t\t\t\\\n \t  builtin_assert (\"cpu=h8300\");\t\t\t\\\n \t  builtin_assert (\"machine=h8300\");\t\t\\\n@@ -74,14 +74,14 @@ extern const char * const *h8_reg_names;\n \n #define LIB_SPEC \"%{mrelax:-relax} %{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n \n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE)\t\t\t\t  \\\n-  do\t\t\t\t\t\t\t\t\t  \\\n-    {                                                                     \\\n-      /* Basic block reordering is only beneficial on targets with cache  \\\n-\t and/or variable-cycle branches where (cycle count taken !=\t  \\\n-\t cycle count not taken).  */            \t\t\t  \\\n-      flag_reorder_blocks = 0;                                        \t  \\\n-    }\t\t\t\t\t\t\t\t\t  \\\n+#define OPTIMIZATION_OPTIONS(LEVEL, SIZE)\t\t\t\t \\\n+  do\t\t\t\t\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      /* Basic block reordering is only beneficial on targets with cache \\\n+\t and/or variable-cycle branches where (cycle count taken !=\t \\\n+\t cycle count not taken).  */\t\t\t\t\t \\\n+      flag_reorder_blocks = 0;\t\t\t\t\t\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n   while (0)\n \n /* Print subsidiary information on the compiler version in use.  */\n@@ -162,7 +162,7 @@ extern int target_flags;\n   {\"relax\",\t\t MASK_RELAX, N_(\"Enable linker relaxing\")},\t    \\\n   {\"rtl-dump\",\t\t MASK_RTL_DUMP, NULL},\t\t\t\t    \\\n   {\"h\",\t\t\t MASK_H8300H, N_(\"Generate H8/300H code\")},\t    \\\n-  {\"n\",                  MASK_NORMAL_MODE, N_(\"Enable the normal mode\")},   \\\n+  {\"n\",\t\t\t MASK_NORMAL_MODE, N_(\"Enable the normal mode\")},   \\\n   {\"no-h\",\t\t-MASK_H8300H, N_(\"Do not generate H8/300H code\")},  \\\n   {\"align-300\",\t\t MASK_ALIGN_300, N_(\"Use H8/300 alignment rules\")}, \\\n   { \"\",\t\t\t TARGET_DEFAULT, NULL}}\n@@ -870,11 +870,11 @@ struct cum_arg\n    || (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == SYMBOL_REF\t\\\n        && TARGET_H8300S)\t\t\t\t\t\t\\\n    || ((GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == CONST\t\\\n-        && GET_CODE (XEXP (XEXP (OP, 0), 0)) == PLUS\t\t\t\\\n-        && GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 0)) == SYMBOL_REF\t\\\n-        && GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 1)) == CONST_INT)\t\\\n-        && (TARGET_H8300S\t\t\t\t\t\t\\\n-\t    || SYMBOL_REF_FLAG (XEXP (XEXP (XEXP (OP, 0), 0), 0))))\t\\\n+\t&& GET_CODE (XEXP (XEXP (OP, 0), 0)) == PLUS\t\t\t\\\n+\t&& GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 0)) == SYMBOL_REF\t\\\n+\t&& GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 1)) == CONST_INT)\t\\\n+       && (TARGET_H8300S\t\t\t\t\t\t\\\n+\t   || SYMBOL_REF_FLAG (XEXP (XEXP (XEXP (OP, 0), 0), 0))))\t\\\n    || (GET_CODE (OP) == MEM\t\t\t\t\t\t\\\n        && h8300_eightbit_constant_address_p (XEXP (OP, 0)))\t\t\\\n    || (GET_CODE (OP) == MEM && TARGET_H8300S\t\t\t\t\\"}]}