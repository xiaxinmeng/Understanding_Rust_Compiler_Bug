{"sha": "b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmNDc1N2Y4ZWI5NGQ0YjE0NTYxM2VlNTA0N2YzZjk1NDUyZjlkMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-01-10T21:54:09Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-01-10T21:54:09Z"}, "message": "Fix issues with unrepresentable column numbers (PR c++/77949)\n\nPR c++/77949 identifies an ICE when the C++ frontend attempts to emit a\nfix-it hint inserting a missing semicolon at column 4097 of a source file.\n\nThis column value exceeds LINE_MAP_MAX_COLUMN_NUMBER and hence isn't\nrepresentable using a location_t.\n\nAttempting to do so leads to these problems, which this patch fixes:\n\n(a) when encountering a column number > LINE_MAP_MAX_COLUMN_NUMBER we\ncreate a new linemap with m_column_and_range_bits == 0, but\nlinemap_position_for_column doesn't check for this, and hence can emit\na bogus location_t value that's calculated relative to the previous\nlinemap start, but which will be decoded relative to the new linemap,\nleading to very large incorrect line values.\n\n(b) when encountering a column number that can't be represented, and\nfor which the linemap was pre-existing, the code would hit this assertion:\n  if (linemap_assert_fails (column < (1u << map->m_column_and_range_bits)))\naround a bail-out condition.  The patch replaces this assertion with a\nsimple conditional, to stop the ICE when this occurs, and fixes the\nbit count (effective column bits, vs column+range bits)\n\n(c) the C++ frontend wasn't checking for failure of\nlinemap_position_for_loc_and_offset when considering emitting the fix-it\nhint.  The patch adds a conditional, so that no fix-it hint is emitted\nif the location is bogus.\n\ngcc/cp/ChangeLog:\n\tPR c++/77949\n\t* parser.c (cp_parser_class_specifier_1): Only suggest inserting\n\ta missing semicolon if we have a valid insertion location for\n\tthe fix-it hint.\n\ngcc/ChangeLog:\n\tPR c++/77949\n\t* input.c (selftest::test_accessing_ordinary_linemaps): Verify\n\tthat we correctly handle column numbers greater than\n\tLINE_MAP_MAX_COLUMN_NUMBER.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/77949\n\t* g++.dg/diagnostic/pr77949.C: New test case.\n\nlibcpp/ChangeLog:\n\tPR c++/77949\n\t* line-map.c (linemap_position_for_column): When calling\n\tlinemap_start_line, detect if a new linemap was created with\n\t0 column bits, and bail out early if this is the case.\n\t(linemap_position_for_loc_and_offset): Replace overzealous\n\tlinemap_assert_fails with a simple conditional; use correct\n\tbit count.\n\nFrom-SVN: r244292", "tree": {"sha": "4f329935d56c10c19a73497a7006a9a709292f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f329935d56c10c19a73497a7006a9a709292f4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fcb740ac456e4703b337584b26305a77a5c5038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fcb740ac456e4703b337584b26305a77a5c5038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fcb740ac456e4703b337584b26305a77a5c5038"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "ff8dac4edddb1f7408e03957a2563faa2bc17126", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -1,3 +1,10 @@\n+2017-01-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/77949\n+\t* input.c (selftest::test_accessing_ordinary_linemaps): Verify\n+\tthat we correctly handle column numbers greater than\n+\tLINE_MAP_MAX_COLUMN_NUMBER.\n+\n 2017-01-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/78775"}, {"sha": "892651a7eeb98b9ab56844be6e3e71ccd7e8cecb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -1,3 +1,10 @@\n+2017-01-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/77949\n+\t* parser.c (cp_parser_class_specifier_1): Only suggest inserting\n+\ta missing semicolon if we have a valid insertion location for\n+\tthe fix-it hint.\n+\n 2017-01-10  Jason Merrill  <jason@redhat.com>\n \n \tFI 20, decomposition declaration with parenthesized initializer."}, {"sha": "7b3ee30345ef843077fb83bfa1e265c992be00f1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -22164,7 +22164,10 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t  next_loc = linemap_position_for_loc_and_offset (line_table, loc, 1);\n \n \trich_location richloc (line_table, next_loc);\n-\trichloc.add_fixit_insert_before (next_loc, \";\");\n+\n+\t/* If we successfully offset the location, suggest the fix-it.  */\n+\tif (next_loc != loc)\n+\t  richloc.add_fixit_insert_before (next_loc, \";\");\n \n \tif (CLASSTYPE_DECLARED_CLASS (type))\n \t  error_at_rich_loc (&richloc,"}, {"sha": "3e67314932a1faf08a7db2fb59fc119bb2a913f2", "filename": "gcc/input.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -1699,6 +1699,22 @@ test_accessing_ordinary_linemaps (const line_table_case &case_)\n       ASSERT_EQ (7, map->m_column_and_range_bits - map->m_range_bits);\n     }\n \n+  /* Example of a line that will eventually be seen to be longer\n+     than LINE_MAP_MAX_COLUMN_NUMBER; the initially seen width is\n+     below that.  */\n+  linemap_line_start (line_table, 5, 2000);\n+\n+  location_t loc_start_of_very_long_line\n+    = linemap_position_for_column (line_table, 2000);\n+  location_t loc_too_wide\n+    = linemap_position_for_column (line_table, 4097);\n+  location_t loc_too_wide_2\n+    = linemap_position_for_column (line_table, 4098);\n+\n+  /* ...and back to a sane line length.  */\n+  linemap_line_start (line_table, 6, 100);\n+  location_t loc_sane_again = linemap_position_for_column (line_table, 10);\n+\n   linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n \n   /* Multiple files.  */\n@@ -1714,6 +1730,16 @@ test_accessing_ordinary_linemaps (const line_table_case &case_)\n   assert_loceq (\"foo.c\", 2, 17, loc_d);\n   assert_loceq (\"foo.c\", 3, 700, loc_e);\n   assert_loceq (\"foo.c\", 4, 100, loc_back_to_short);\n+\n+  /* In the very wide line, the initial location should be fully tracked.  */\n+  assert_loceq (\"foo.c\", 5, 2000, loc_start_of_very_long_line);\n+  /* ...but once we exceed LINE_MAP_MAX_COLUMN_NUMBER column-tracking should\n+     be disabled.  */\n+  assert_loceq (\"foo.c\", 5, 0, loc_too_wide);\n+  assert_loceq (\"foo.c\", 5, 0, loc_too_wide_2);\n+  /*...and column-tracking should be re-enabled for subsequent lines.  */\n+  assert_loceq (\"foo.c\", 6, 10, loc_sane_again);\n+\n   assert_loceq (\"bar.c\", 1, 150, loc_f);\n \n   ASSERT_FALSE (is_location_from_builtin_token (loc_a));"}, {"sha": "59a2fcfbef4242476df2f3cfccb42ec374a05c04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -1,3 +1,8 @@\n+2017-01-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/77949\n+\t* g++.dg/diagnostic/pr77949.C: New test case.\n+\n 2017-01-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/78775"}, {"sha": "0d8b333a2ad8425b6b87377b33b35ac05f451427", "filename": "gcc/testsuite/g++.dg/diagnostic/pr77949.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr77949.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr77949.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr77949.C?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -0,0 +1,7 @@\n+// Ensure that no fix-it hints are emitted\n+// { dg-options \"-fdiagnostics-parseable-fixits\" }\n+\n+/* Very long line, where a missing semicolon would be suggested for\n+   insertion at column 4097.  */\n+class test {}   \n+// { dg-error \"0: expected .;. after class definition\" \"\" { target *-*-* } .-1 }"}, {"sha": "208e1d52e6f5a4a711631eb0ece9ceff5a753114", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -1,3 +1,13 @@\n+2017-01-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/77949\n+\t* line-map.c (linemap_position_for_column): When calling\n+\tlinemap_start_line, detect if a new linemap was created with\n+\t0 column bits, and bail out early if this is the case.\n+\t(linemap_position_for_loc_and_offset): Replace overzealous\n+\tlinemap_assert_fails with a simple conditional; use correct\n+\tbit count.\n+\n 2017-01-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/72803"}, {"sha": "949489eb1a1b645e6b7b58f307a5d27b9a23a0f7", "filename": "libcpp/line-map.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f4757f8eb94d4b145613ee5047f3f95452f9d2/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "patch": "@@ -816,8 +816,22 @@ linemap_position_for_column (struct line_maps *set, unsigned int to_column)\n \t}\n       else\n \t{\n+\t  /* Otherwise, attempt to start a new line that can hold TO_COLUMN,\n+\t     with some space to spare.  This may or may not lead to a new\n+\t     linemap being created.  */\n \t  line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (set);\n \t  r = linemap_line_start (set, SOURCE_LINE (map, r), to_column + 50);\n+\t  map = LINEMAPS_LAST_ORDINARY_MAP (set);\n+\t  if (map->m_column_and_range_bits == 0)\n+\t    {\n+\t      /* ...then the linemap has column-tracking disabled,\n+\t\t presumably due to exceeding either\n+\t\t LINE_MAP_MAX_LOCATION_WITH_COLS (overall) or\n+\t\t LINE_MAP_MAX_COLUMN_NUMBER (within this line).\n+\t\t Return the start of the linemap, which encodes column 0, for\n+\t\t the whole line.  */\n+\t      return r;\n+\t    }\n \t}\n     }\n   line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (set);\n@@ -905,7 +919,10 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n     }\n \n   column += column_offset;\n-  if (linemap_assert_fails (column < (1u << map->m_column_and_range_bits)))\n+\n+  /* Bail out if the column is not representable within the existing\n+     linemap.  */\n+  if (column >= (1u << (map->m_column_and_range_bits - map->m_range_bits)))\n     return loc;\n \n   source_location r = "}]}