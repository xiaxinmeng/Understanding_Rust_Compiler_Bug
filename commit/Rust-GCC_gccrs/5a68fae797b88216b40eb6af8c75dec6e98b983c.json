{"sha": "5a68fae797b88216b40eb6af8c75dec6e98b983c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2OGZhZTc5N2I4ODIxNmI0MGViNmFmOGM3NWRlYzZlOThiOTgzYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-04-03T21:15:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-04-03T21:15:36Z"}, "message": "PR sanitizer/79993 - ICE with VLA initialization from string\n\n\tPR c++/69487 - wrong VLA initialization from string\n\t* init.c (finish_length_check): Split out from build_vec_init.\n\t(build_vec_init): Handle STRING_CST.\n\t* typeck2.c (split_nonconstant_init): Handle STRING_CST.\n\t(digest_init_r): Don't give a STRING_CST VLA type.\n\nFrom-SVN: r246662", "tree": {"sha": "28f3a1d200fa86ca4057f09c132ba79749c015a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28f3a1d200fa86ca4057f09c132ba79749c015a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a68fae797b88216b40eb6af8c75dec6e98b983c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a68fae797b88216b40eb6af8c75dec6e98b983c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a68fae797b88216b40eb6af8c75dec6e98b983c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a68fae797b88216b40eb6af8c75dec6e98b983c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0dfb235e837330a5f91ff14092aa76684fee24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0dfb235e837330a5f91ff14092aa76684fee24d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0dfb235e837330a5f91ff14092aa76684fee24d"}], "stats": {"total": 136, "additions": 108, "deletions": 28}, "files": [{"sha": "f3c668b870de1d7af9cbf16f169323620dc1b74c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a68fae797b88216b40eb6af8c75dec6e98b983c", "patch": "@@ -1,3 +1,12 @@\n+2017-04-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR sanitizer/79993 - ICE with VLA initialization from string\n+\tPR c++/69487 - wrong VLA initialization from string\n+\t* init.c (finish_length_check): Split out from build_vec_init.\n+\t(build_vec_init): Handle STRING_CST.\n+\t* typeck2.c (split_nonconstant_init): Handle STRING_CST.\n+\t(digest_init_r): Don't give a STRING_CST VLA type.\n+\n 2017-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79572"}, {"sha": "2015205efd66ff01871076a84318c2da57652b16", "filename": "gcc/cp/init.c", "status": "modified", "additions": 65, "deletions": 27, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=5a68fae797b88216b40eb6af8c75dec6e98b983c", "patch": "@@ -3884,6 +3884,35 @@ vec_copy_assign_is_trivial (tree inner_elt_type, tree init)\n   return is_trivially_xible (MODIFY_EXPR, inner_elt_type, fromtype);\n }\n \n+/* Subroutine of build_vec_init: Check that the array has at least N\n+   elements.  Other parameters are local variables in build_vec_init.  */\n+\n+void\n+finish_length_check (tree atype, tree iterator, tree obase, unsigned n)\n+{\n+  tree nelts = build_int_cst (ptrdiff_type_node, n - 1);\n+  if (TREE_CODE (atype) != ARRAY_TYPE)\n+    {\n+      if (flag_exceptions)\n+\t{\n+\t  tree c = fold_build2 (LT_EXPR, boolean_type_node, iterator,\n+\t\t\t\tnelts);\n+\t  c = build3 (COND_EXPR, void_type_node, c,\n+\t\t      throw_bad_array_new_length (), void_node);\n+\t  finish_expr_stmt (c);\n+\t}\n+      /* Don't check an array new when -fno-exceptions.  */\n+    }\n+  else if (flag_sanitize & SANITIZE_BOUNDS\n+\t   && do_ubsan_in_current_function ())\n+    {\n+      /* Make sure the last element of the initializer is in bounds. */\n+      finish_expr_stmt\n+\t(ubsan_instrument_bounds\n+\t (input_location, obase, &nelts, /*ignore_off_by_one*/false));\n+    }\n+}\n+\n /* `build_vec_init' returns tree structure that performs\n    initialization of a vector of aggregate types.\n \n@@ -3932,6 +3961,8 @@ build_vec_init (tree base, tree maxindex, tree init,\n   tree obase = base;\n   bool xvalue = false;\n   bool errors = false;\n+  location_t loc = (init ? EXPR_LOC_OR_LOC (init, input_location)\n+\t\t    : location_of (base));\n \n   if (TREE_CODE (atype) == ARRAY_TYPE && TYPE_DOMAIN (atype))\n     maxindex = array_type_nelts (atype);\n@@ -3963,10 +3994,12 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t}\n     }\n \n-  /* If we have a braced-init-list, make sure that the array\n+  /* If we have a braced-init-list or string constant, make sure that the array\n      is big enough for all the initializers.  */\n-  bool length_check = (init && TREE_CODE (init) == CONSTRUCTOR\n-\t\t       && CONSTRUCTOR_NELTS (init) > 0\n+  bool length_check = (init\n+\t\t       && (TREE_CODE (init) == STRING_CST\n+\t\t\t   || (TREE_CODE (init) == CONSTRUCTOR\n+\t\t\t       && CONSTRUCTOR_NELTS (init) > 0))\n \t\t       && !TREE_CONSTANT (maxindex));\n \n   if (init\n@@ -4105,30 +4138,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n       from_array = 0;\n \n       if (length_check)\n-\t{\n-\t  tree nelts = build_int_cst (ptrdiff_type_node,\n-\t\t\t\t      CONSTRUCTOR_NELTS (init) - 1);\n-\t  if (TREE_CODE (atype) != ARRAY_TYPE)\n-\t    {\n-\t      if (flag_exceptions)\n-\t\t{\n-\t\t  tree c = fold_build2 (LT_EXPR, boolean_type_node, iterator,\n-\t\t\t\t\tnelts);\n-\t\t  c = build3 (COND_EXPR, void_type_node, c,\n-\t\t\t      throw_bad_array_new_length (), void_node);\n-\t\t  finish_expr_stmt (c);\n-\t\t}\n-\t      /* Don't check an array new when -fno-exceptions.  */\n-\t    }\n-\t  else if (flag_sanitize & SANITIZE_BOUNDS\n-\t\t   && do_ubsan_in_current_function ())\n-\t    {\n-\t      /* Make sure the last element of the initializer is in bounds. */\n-\t      finish_expr_stmt\n-\t\t(ubsan_instrument_bounds\n-\t\t (input_location, obase, &nelts, /*ignore_off_by_one*/false));\n-\t    }\n-\t}\n+\tfinish_length_check (atype, iterator, obase, CONSTRUCTOR_NELTS (init));\n \n       if (try_const)\n \tvec_alloc (const_vec, CONSTRUCTOR_NELTS (init));\n@@ -4196,6 +4206,34 @@ build_vec_init (tree base, tree maxindex, tree init,\n       /* Any elements without explicit initializers get T{}.  */\n       empty_list = true;\n     }\n+  else if (init && TREE_CODE (init) == STRING_CST)\n+    {\n+      /* Check that the array is at least as long as the string.  */\n+      if (length_check)\n+\tfinish_length_check (atype, iterator, obase,\n+\t\t\t     TREE_STRING_LENGTH (init));\n+      tree length = build_int_cst (ptrdiff_type_node,\n+\t\t\t\t   TREE_STRING_LENGTH (init));\n+\n+      /* Copy the string to the first part of the array.  */\n+      tree alias_set = build_int_cst (build_pointer_type (type), 0);\n+      tree lhs = build2 (MEM_REF, TREE_TYPE (init), base, alias_set);\n+      tree stmt = build2 (MODIFY_EXPR, void_type_node, lhs, init);\n+      finish_expr_stmt (stmt);\n+\n+      /* Adjust the counter and pointer.  */\n+      stmt = cp_build_binary_op (loc, MINUS_EXPR, iterator, length, complain);\n+      stmt = build2 (MODIFY_EXPR, void_type_node, iterator, stmt);\n+      finish_expr_stmt (stmt);\n+\n+      stmt = cp_build_binary_op (loc, PLUS_EXPR, base, length, complain);\n+      stmt = build2 (MODIFY_EXPR, void_type_node, base, stmt);\n+      finish_expr_stmt (stmt);\n+\n+      /* And set the rest of the array to NUL.  */\n+      from_array = 0;\n+      explicit_value_init_p = true;\n+    }\n   else if (from_array)\n     {\n       if (init)"}, {"sha": "d1a393059a49bb12a3cdac0994e62258bac2001d", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=5a68fae797b88216b40eb6af8c75dec6e98b983c", "patch": "@@ -749,6 +749,10 @@ split_nonconstant_init (tree dest, tree init)\n       DECL_INITIAL (dest) = init;\n       TREE_READONLY (dest) = 0;\n     }\n+  else if (TREE_CODE (init) == STRING_CST\n+\t   && array_of_runtime_bound_p (TREE_TYPE (dest)))\n+    code = build_vec_init (dest, NULL_TREE, init, /*value-init*/false,\n+\t\t\t   /*from array*/1, tf_warning_or_error);\n   else\n     code = build2 (INIT_EXPR, TREE_TYPE (dest), dest, init);\n \n@@ -1066,7 +1070,8 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n \t\t}\n \t    }\n \n-\t  if (type != TREE_TYPE (init))\n+\t  if (type != TREE_TYPE (init)\n+\t      && !variably_modified_type_p (type, NULL_TREE))\n \t    {\n \t      init = copy_node (init);\n \t      TREE_TYPE (init) = type;"}, {"sha": "931ef44a966f0a42b8824406a0f668cc1dd1daa4", "filename": "gcc/testsuite/g++.dg/asan/pr78201.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr78201.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr78201.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr78201.C?ref=5a68fae797b88216b40eb6af8c75dec6e98b983c", "patch": "@@ -0,0 +1,13 @@\n+// PR middle-end/78201\n+// { dg-do compile }\n+// { dg-options \"-O2 -fsanitize=address\" }\n+\n+struct B { long d (); } *c;\n+long e;\n+\n+void\n+foo ()\n+{\n+  char a[e] = \"\";\n+  c && c->d();\n+}"}, {"sha": "431167cb48e8a17999f8c050e77425d32c28070c", "filename": "gcc/testsuite/g++.dg/ext/vla17.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a68fae797b88216b40eb6af8c75dec6e98b983c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla17.C?ref=5a68fae797b88216b40eb6af8c75dec6e98b983c", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/69487\n+// { dg-do run }\n+// { dg-options -Wno-vla }\n+\n+int size = 6;\n+\n+int main()\n+{\n+  char buffer[size] = \"\";\n+  for (int i = 0; i != size; ++i)\n+    {\n+      if (buffer[i] != 0)\n+\t__builtin_abort();\n+    }\n+}"}]}