{"sha": "eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFiMDljZGYxYTQ1ZDcwZjg2ZDQ4MTM4ZDgxYzg1NDFiYWU5YjJkNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-10-22T19:29:27Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-10-22T19:29:27Z"}, "message": "re PR libgcj/12416 (java.lang.Class.getFields returns duplicate entries.)\n\n\tPR libgcj/12416:\n\t* java/lang/Class.h: Updated.\n\t* java/lang/natClass.cc (_getFields): Removed.\n\t(getFields): Likewise.\n\t(getDeclaredFields): Added `public_only' parameter.\n\t* java/lang/Class.java (getFields): Now implemented in java; from\n\tClasspath.\n\t(getDeclaredFields): Likewise.\n\t(getDeclaredFields(boolean)): Declare.\n\t(_getFields): Removed.\n\t(internalGetFields): New method, from Classpath.\n\nFrom-SVN: r72818", "tree": {"sha": "000f378fa5f1a46ba806b0c30692c3bb5de11c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/000f378fa5f1a46ba806b0c30692c3bb5de11c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/comments", "author": null, "committer": null, "parents": [{"sha": "ab3ec830b3a476677a07494e17abb645ebdad6b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab3ec830b3a476677a07494e17abb645ebdad6b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab3ec830b3a476677a07494e17abb645ebdad6b3"}], "stats": {"total": 151, "additions": 89, "deletions": 62}, "files": [{"sha": "6c5c4d10e7bbcfcf581d68e04c131861fe0f6bfe", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "patch": "@@ -1,5 +1,17 @@\n 2003-10-22  Tom Tromey  <tromey@redhat.com>\n \n+\tPR libgcj/12416:\n+\t* java/lang/Class.h: Updated.\n+\t* java/lang/natClass.cc (_getFields): Removed.\n+\t(getFields): Likewise.\n+\t(getDeclaredFields): Added `public_only' parameter.\n+\t* java/lang/Class.java (getFields): Now implemented in java; from\n+\tClasspath.\n+\t(getDeclaredFields): Likewise.\n+\t(getDeclaredFields(boolean)): Declare.\n+\t(_getFields): Removed.\n+\t(internalGetFields): New method, from Classpath.\n+\n \tPR libgcj/12656:\n \t* gnu/gcj/runtime/natFirstThread.cc (call_main): Use\n \t_Jv_LookupDeclaredMethod, not _Jv_GetMethodLocal."}, {"sha": "cdfdd7d2349bb39284f09e86fcd7b1d334178bc1", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "patch": "@@ -157,7 +157,8 @@ class java::lang::Class : public java::lang::Object\n   java::lang::reflect::Constructor *getDeclaredConstructor (JArray<jclass> *);\n   JArray<java::lang::reflect::Constructor *> *getDeclaredConstructors (void);\n   java::lang::reflect::Field *getDeclaredField (jstring);\n-  JArray<java::lang::reflect::Field *> *getDeclaredFields (void);\n+  JArray<java::lang::reflect::Field *> *getDeclaredFields ();\n+  JArray<java::lang::reflect::Field *> *getDeclaredFields (jboolean);\n   java::lang::reflect::Method *getDeclaredMethod (jstring, JArray<jclass> *);\n   JArray<java::lang::reflect::Method *> *getDeclaredMethods (void);\n \n@@ -166,7 +167,7 @@ class java::lang::Class : public java::lang::Object\n \n   java::lang::reflect::Field *getField (jstring);\n private:\n-  jint _getFields (JArray<java::lang::reflect::Field *> *result, jint offset);\n+  JArray<java::lang::reflect::Field *> internalGetFields ();\n   JArray<java::lang::reflect::Constructor *> *_getConstructors (jboolean);\n   java::lang::reflect::Field *getField (jstring, jint);\n   jint _getMethods (JArray<java::lang::reflect::Method *> *result,"}, {"sha": "8943da45aa753694638bc498d8b8f21d46ef7e1d", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "patch": "@@ -13,6 +13,8 @@\n import java.io.InputStream;\n import java.lang.reflect.*;\n import java.security.*;\n+import java.util.Arrays;\n+import java.util.HashSet;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -64,7 +66,26 @@ public Constructor[] getDeclaredConstructors () throws SecurityException\n \n   public native Field getDeclaredField (String fieldName)\n     throws NoSuchFieldException, SecurityException;\n-  public native Field[] getDeclaredFields () throws SecurityException;\n+\n+  /**\n+   * Get all the declared fields in this class, but not those inherited from\n+   * superclasses. This returns an array of length 0 if there are no fields,\n+   * including for primitive types. This does not return the implicit length\n+   * field of arrays. A security check may be performed, with\n+   * <code>checkMemberAccess(this, Member.DECLARED)</code> as well as\n+   * <code>checkPackageAccess</code> both having to succeed.\n+   *\n+   * @return all declared fields in this class\n+   * @throws SecurityException if the security check fails\n+   * @since 1.1\n+   */\n+  public Field[] getDeclaredFields()\n+  {\n+    memberAccessCheck(Member.DECLARED);\n+    return getDeclaredFields(false);\n+  }\n+\n+  native Field[] getDeclaredFields (boolean publicOnly);\n \n   private native Method _getDeclaredMethod (String methodName,\n \t\t\t\t\t    Class[] parameterTypes);\n@@ -101,8 +122,39 @@ public Field getField (String fieldName)\n     return fld;\n   }\n \n-  private native Field[] _getFields (Field[] result, int offset);\n-  public native Field[] getFields () throws SecurityException;\n+  /**\n+   * Get all the public fields declared in this class or inherited from\n+   * superclasses. This returns an array of length 0 if there are no fields,\n+   * including for primitive types. This does not return the implicit length\n+   * field of arrays. A security check may be performed, with\n+   * <code>checkMemberAccess(this, Member.PUBLIC)</code> as well as\n+   * <code>checkPackageAccess</code> both having to succeed.\n+   *\n+   * @return all public fields in this class\n+   * @throws SecurityException if the security check fails\n+   * @since 1.1\n+   */\n+  public Field[] getFields()\n+  {\n+    memberAccessCheck(Member.PUBLIC);\n+    return internalGetFields();\n+  }\n+\n+  /**\n+   * Like <code>getFields()</code> but without the security checks.\n+   */\n+  private Field[] internalGetFields()\n+  {\n+    HashSet set = new HashSet();\n+    set.addAll(Arrays.asList(getDeclaredFields(true)));\n+    Class[] interfaces = getInterfaces();\n+    for (int i = 0; i < interfaces.length; i++)\n+      set.addAll(Arrays.asList(interfaces[i].internalGetFields()));\n+    Class superClass = getSuperclass();\n+    if (superClass != null)\n+      set.addAll(Arrays.asList(superClass.internalGetFields()));\n+    return (Field[])set.toArray(new Field[set.size()]);\n+  }\n \n   /**\n    * Returns the <code>Package</code> in which this class is defined"}, {"sha": "c9b70147b6181e24c19b997f6f8e79bc3791378a", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 19, "deletions": 57, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab09cdf1a45d70f86d48138d81c8541bae9b2d4/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "patch": "@@ -295,16 +295,32 @@ java::lang::Class::getDeclaredField (jstring name)\n }\n \n JArray<java::lang::reflect::Field *> *\n-java::lang::Class::getDeclaredFields (void)\n+java::lang::Class::getDeclaredFields (jboolean public_only)\n {\n-  memberAccessCheck(java::lang::reflect::Member::DECLARED);\n+  int size;\n+  if (public_only)\n+    {\n+      size = 0;\n+      for (int i = 0; i < field_count; ++i)\n+\t{\n+\t  _Jv_Field *field = &fields[i];\n+\t  if ((field->flags & java::lang::reflect::Modifier::PUBLIC))\n+\t    ++size;\n+\t}\n+    }\n+  else\n+    size = field_count;\n+\n   JArray<java::lang::reflect::Field *> *result\n     = (JArray<java::lang::reflect::Field *> *)\n-    JvNewObjectArray (field_count, &java::lang::reflect::Field::class$, NULL);\n+    JvNewObjectArray (size, &java::lang::reflect::Field::class$, NULL);\n   java::lang::reflect::Field** fptr = elements (result);\n   for (int i = 0;  i < field_count;  i++)\n     {\n       _Jv_Field *field = &fields[i];\n+      if (public_only\n+\t  && ! (field->flags & java::lang::reflect::Modifier::PUBLIC))\n+\tcontinue;\n       java::lang::reflect::Field* rfield = new java::lang::reflect::Field ();\n       rfield->offset = (char*) field - (char*) fields;\n       rfield->declaringClass = this;\n@@ -461,60 +477,6 @@ java::lang::Class::getDeclaringClass (void)\n   return NULL;\n }\n \n-jint\n-java::lang::Class::_getFields (JArray<java::lang::reflect::Field *> *result,\n-\t\t\t       jint offset)\n-{\n-  int count = 0;\n-  for (int i = 0;  i < field_count;  i++)\n-    {\n-      _Jv_Field *field = &fields[i];\n-      if (! (field->getModifiers() & java::lang::reflect::Modifier::PUBLIC))\n-\tcontinue;\n-      ++count;\n-\n-      if (result != NULL)\n-\t{\n-\t  java::lang::reflect::Field *rfield\n-\t    = new java::lang::reflect::Field ();\n-\t  rfield->offset = (char *) field - (char *) fields;\n-\t  rfield->declaringClass = this;\n-\t  rfield->name = _Jv_NewStringUtf8Const (field->name);\n-\t  (elements (result))[offset++] = rfield;\n-\t}\n-    }\n-  jclass superclass = getSuperclass();\n-  if (superclass != NULL)\n-    {\n-      int s_count = superclass->_getFields (result, offset);\n-      count += s_count;\n-      offset += s_count;\n-    }\n-  for (int i = 0; i < interface_count; ++i)\n-    {\n-      int f_count = interfaces[i]->_getFields (result, offset);\n-      count += f_count;\n-      offset += f_count;\n-    }\n-  return count;\n-}\n-\n-JArray<java::lang::reflect::Field *> *\n-java::lang::Class::getFields (void)\n-{\n-  memberAccessCheck(java::lang::reflect::Member::PUBLIC);\n-\n-  int count = _getFields (NULL, 0);\n-\n-  JArray<java::lang::reflect::Field *> *result\n-    = ((JArray<java::lang::reflect::Field *> *)\n-       JvNewObjectArray (count, &java::lang::reflect::Field::class$, NULL));\n-\n-  _getFields (result, 0);\n-\n-  return result;\n-}\n-\n JArray<jclass> *\n java::lang::Class::getInterfaces (void)\n {"}]}