{"sha": "464b277ba2697cc48d75cc5a343f4209338291d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0YjI3N2JhMjY5N2NjNDhkNzVjYzVhMzQzZjQyMDkzMzgyOTFkNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-11T12:29:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-11T12:29:31Z"}, "message": "type_traits: Implement alignment_of and aligned_storage.\n\n2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement alignment_of and aligned_storage.\n\t* testsuite/tr1/4_metaprogramming/other_transformations/\n\taligned_storage/aligned_storage.cc: New.\n\t* testsuite/tr1/4_metaprogramming/other_transformations/\n\taligned_storage/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\talignment_of/alignment_of.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\talignment_of/typedefs.cc: Likewise.\n\nFrom-SVN: r93183", "tree": {"sha": "04eac163a1c3bea2e7c37ba3b5f1b292e8f9ea82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04eac163a1c3bea2e7c37ba3b5f1b292e8f9ea82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/464b277ba2697cc48d75cc5a343f4209338291d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464b277ba2697cc48d75cc5a343f4209338291d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464b277ba2697cc48d75cc5a343f4209338291d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464b277ba2697cc48d75cc5a343f4209338291d5/comments", "author": null, "committer": null, "parents": [{"sha": "6b78f6bee5f2b59657ecb652fcb289e8db3af8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b78f6bee5f2b59657ecb652fcb289e8db3af8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b78f6bee5f2b59657ecb652fcb289e8db3af8dd"}], "stats": {"total": 274, "additions": 269, "deletions": 5}, "files": [{"sha": "bb1599cae1e062ab05490fab087991f4a3e19487", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=464b277ba2697cc48d75cc5a343f4209338291d5", "patch": "@@ -1,3 +1,15 @@\n+2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement alignment_of and aligned_storage.\n+\t* testsuite/tr1/4_metaprogramming/other_transformations/\n+\taligned_storage/aligned_storage.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/other_transformations/\n+\taligned_storage/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\talignment_of/alignment_of.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\talignment_of/typedefs.cc: Likewise.\n+\n 2005-01-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* Makefile.in: Regenerate."}, {"sha": "1cb847c760e985157abf0e2ea2e2e184860938ce", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 80, "deletions": 5, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=464b277ba2697cc48d75cc5a343f4209338291d5", "patch": "@@ -1,6 +1,6 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -144,10 +144,10 @@ namespace tr1\n   // template<typename>\n   //   struct is_member_function_pointer\n   //   : public false_type { };\n-  //   _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n-  //\t            is_function<_Tp>::value)\n-\n-  // Ugly, temporary workaround for member functions with up to 15 arguments.\n+  // _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n+  //\t          is_function<_Tp>::value)\n+  //\n+  // Temporary workaround for member functions with up to 15 arguments:\n   template<typename>\n     struct __is_mfp_helper\n     { static const bool __value = false; };\n@@ -516,6 +516,10 @@ namespace tr1\n   template<typename>\n     struct has_virtual_destructor\n     : public false_type { };\n+\n+  template<typename _Tp>\n+    struct alignment_of\n+    : public integral_constant<std::size_t, __alignof__(_Tp)> { };\n   \n   template<typename>\n     struct rank\n@@ -652,6 +656,77 @@ namespace tr1\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n   /// @brief  other transformations [4.8].\n+  \n+  // Due to c++/19163 and c++/17743, for the time being we cannot use\n+  // the correct, neat implementation :-(\n+  // \n+  // template<std::size_t _Len, std::size_t _Align>\n+  //   struct aligned_storage\n+  //   { typedef char type[_Len] __attribute__((aligned(_Align))); }\n+  //\n+  // Temporary workaround, useful for Align up to 32:\n+  template<std::size_t, std::size_t>\n+    struct aligned_storage { };\n+\n+  template<std::size_t _Len>\n+    struct aligned_storage<_Len, 1>\n+    {\n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tchar __align __attribute__((aligned(1)));\n+      };\n+    };\n+\n+  template<std::size_t _Len>\n+    struct aligned_storage<_Len, 2>\n+    {\n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tchar __align __attribute__((aligned(2)));\n+      };\n+    };\n+\n+  template<std::size_t _Len>\n+    struct aligned_storage<_Len, 4>\n+    {\n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tchar __align __attribute__((aligned(4)));\n+      };\n+    };\n+\n+  template<std::size_t _Len>\n+    struct aligned_storage<_Len, 8>\n+    {\n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tchar __align __attribute__((aligned(8)));\n+      };\n+    };\n+\n+  template<std::size_t _Len>\n+    struct aligned_storage<_Len, 16>\n+    {\n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tchar __align __attribute__((aligned(16)));\n+      };\n+    };\n+  \n+  template<std::size_t _Len>\n+    struct aligned_storage<_Len, 32>\n+    {\n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tchar __align __attribute__((aligned(32)));\n+      };\n+    };\n \n #undef _DEFINE_SPEC_0_HELPER\n #undef _DEFINE_SPEC_1_HELPER"}, {"sha": "de04f979c5718102e6429e95d5493d88a771cdc6", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/other_transformations/aligned_storage/aligned_storage.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fother_transformations%2Faligned_storage%2Faligned_storage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fother_transformations%2Faligned_storage%2Faligned_storage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fother_transformations%2Faligned_storage%2Faligned_storage.cc?ref=464b277ba2697cc48d75cc5a343f4209338291d5", "patch": "@@ -0,0 +1,63 @@\n+// 2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.8 Other transformations\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::aligned_storage;\n+  using std::tr1::alignment_of;\n+  using namespace __gnu_test;\n+  \n+  const std::size_t align_c = alignment_of<char>::value;\n+  VERIFY( (sizeof(aligned_storage<4, align_c>::type) >= 4) );\n+  VERIFY( (__alignof__(aligned_storage<4, align_c>::type) == align_c) );\n+\n+  const std::size_t align_s = alignment_of<short>::value;\n+  VERIFY( (sizeof(aligned_storage<1, align_s>::type) >= 1) );\n+  VERIFY( (__alignof__(aligned_storage<1, align_s>::type) == align_s) );\n+\n+  const std::size_t align_i = alignment_of<int>::value;\n+  VERIFY( (sizeof(aligned_storage<7, align_i>::type) >= 7) );\n+  VERIFY( (__alignof__(aligned_storage<7, align_i>::type) == align_i) );\n+\n+  const std::size_t align_d = alignment_of<double>::value;\n+  VERIFY( (sizeof(aligned_storage<2, align_d>::type) >= 2) );\n+  VERIFY( (__alignof__(aligned_storage<2, align_d>::type) == align_d) );\n+\n+  const std::size_t align_ai = alignment_of<int[4]>::value;\n+  VERIFY( (sizeof(aligned_storage<20, align_ai>::type) >= 20) );\n+  VERIFY( (__alignof__(aligned_storage<20, align_ai>::type) == align_ai) );\n+\n+  const std::size_t align_ct = alignment_of<ClassType>::value;\n+  VERIFY( (sizeof(aligned_storage<11, align_ct>::type) >= 11) );\n+  VERIFY( (__alignof__(aligned_storage<11, align_ct>::type) == align_ct) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d6b42fb20821587819e347cbad17c376bb2b49f6", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/other_transformations/aligned_storage/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fother_transformations%2Faligned_storage%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fother_transformations%2Faligned_storage%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fother_transformations%2Faligned_storage%2Ftypedefs.cc?ref=464b277ba2697cc48d75cc5a343f4209338291d5", "patch": "@@ -0,0 +1,33 @@\n+// 2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::aligned_storage<1, 1>     test_type;\n+  typedef test_type::type                     type;\n+}"}, {"sha": "b10fd3350c31f86b7bb183697317268736106f0e", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/alignment_of/alignment_of.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Falignment_of%2Falignment_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Falignment_of%2Falignment_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Falignment_of%2Falignment_of.cc?ref=464b277ba2697cc48d75cc5a343f4209338291d5", "patch": "@@ -0,0 +1,45 @@\n+// 2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::alignment_of;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_property<alignment_of, char>(__alignof__(char))) );\n+  VERIFY( (test_property<alignment_of, short>(__alignof__(short))) );\n+  VERIFY( (test_property<alignment_of, int>(__alignof__(int))) );\n+  VERIFY( (test_property<alignment_of, double>(__alignof__(double))) );\n+  VERIFY( (test_property<alignment_of, int[4]>(__alignof__(int[4]))) );\n+  VERIFY( (test_property<alignment_of, ClassType>(__alignof__(ClassType))) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "01c193a994a3db9bace6ef636530e7d6406f05e7", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/alignment_of/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Falignment_of%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b277ba2697cc48d75cc5a343f4209338291d5/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Falignment_of%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Falignment_of%2Ftypedefs.cc?ref=464b277ba2697cc48d75cc5a343f4209338291d5", "patch": "@@ -0,0 +1,36 @@\n+// 2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::alignment_of<int>         test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}