{"sha": "e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5Y2M5YjQwMjY1ODEzZjY2ZWFmOGEwZTc4M2Q3YThhMGM1MDM3ZA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2008-05-18T04:37:59Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2008-05-18T04:37:59Z"}, "message": "comment/style fixes\n\nFrom-SVN: r135493", "tree": {"sha": "bcad50aadbbbf65014158765baa0db53144c63f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcad50aadbbbf65014158765baa0db53144c63f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afa55b38c8e3d00810c57227513bea54b133b5c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa55b38c8e3d00810c57227513bea54b133b5c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afa55b38c8e3d00810c57227513bea54b133b5c0"}], "stats": {"total": 143, "additions": 92, "deletions": 51}, "files": [{"sha": "e52412498bd25b8bcbe5b05a34891bd3385275dd", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "patch": "@@ -1,13 +1,11 @@\n \n+2008-05-18 Xinliang David Li   <davidxl@google.com>\n+\n+\t* ChangeLog: Remove wrong ChangeLog entry. \n+\n 2008-05-17 Xinliang David Li   <davidxl@google.com>\n \n-        * gcc/tree-ssa-dce.c : conditional dead call elimination\n-        * gcc/opts.c         : enable the optimization at >=O2\n-        * gcc/common.opt      : new flag for control the optimization\n-        * gcc/doc/invoke.texi : documentation change\n-        * gcc/testsuite/gcc.dg/cdce1.c : new test case\n-        * gcc/testsuite/gcc.dg/cdce2.c : new test case\n-        *MAINTAINERS  : Add myself (write after approval) \n+\t* MAINTAINERS (Write After Approval): Add myself.\n \n 2008-05-15  Janus Weil  <janus@gcc.gnu.org>\n "}, {"sha": "1d1bab76a21bfccbefa2369967e8f5d7f9465cb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "patch": "@@ -1,3 +1,17 @@\n+2008-05-18 Xinliang David Li   <davidxl@google.com>\n+\n+\t* gcc/tree-ssa-dce.c: Coding style fix.\n+\t(check_pow): Documentation comment. \n+\t(check_log): Documenation comment. Coding style fix.\n+\t(is_unnecessary_except_errno_call): Ditto.\n+\t(gen_conditions_for_pow): Ditto.\n+\t(gen_conditions_for_log): Ditto.\n+\t(gen_shrink_wrap_conditions): Ditto.\n+\t(shrink_wrap_one_built_in_calls): Ditto.\n+\t* gcc/doc/invoke.texi: Better documentation string.\n+\t* ChangeLog: Fix wrong change log entries from \n+\tMay 17 checkin on function call DCE.\n+\n 2008-05-17  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_output_mi_thunk): Update the use of\n@@ -12,6 +26,25 @@\n \t* fold-const.c (fold_unary) <CASE_CONVERT>: Fold the cast into\n \ta BIT_AND_EXPR only for an INTEGER_TYPE.\n \n+2008-05-17 Xinliang David Li   <davidxl@google.com>\n+\n+\t* gcc/tree-ssa-dce.c (cond_dead_built_in_calls): New static variable.\n+\t(check_pow, check_log, is_unnecessary_except_errno_call): New \n+\tfunctions to check for eliminating math functions that are pure \n+\texcept for setting errno.\n+\t(gen_conditions_for_pow, gen_conditionas_for_log): New functions to\n+\tgeneral condition expressions for shrink-wrapping pow/log calls.\n+\t(gen_shrink_wrap_conditions): Ditto.\n+\t(shrink_wrap_one_built_in_call): Ditto.\n+\t(shrink_wrap_conditional_dead_built_in_calls): Ditto.\n+\t(mark_operand_necessary): If debugging, output if OP is necessary.\n+\t(eliminate_unnecessary_stmts): Eliminate pow, log calls that are\n+\tunnecessary.\n+\t* gcc/opts.c (decode_options): set flag_tree_builtin_dce to 1 when\n+\topt level >= 2.\n+\t* gcc/common.opt: New user flag -ftree-builtin-dce.\n+\t* gcc/doc/invoke.texi (-ftree-builtin-dce): New option.\n+\n 2008-05-16  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/linux.h (NO_PROFILE_COUNTERS): Undef before"}, {"sha": "7d138f79ab61f3510048b2eb2599f362cf70f349", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "patch": "@@ -5876,9 +5876,9 @@ default at @option{-O} and higher.\n \n @item -ftree-builtin-dce\n @opindex ftree-builtin-dce\n-Perform conditional dead code elimination (DCE) on builtin calls that\n-may set errno but are otherwise side-effect free.  This flag is enabled by\n-default at @option{-O} and higher.\n+Perform conditional dead code elimination (DCE) for calls to builtin functions \n+that may set errno but are otherwise side-effect free.  This flag is enabled by\n+default at @option{-O2} and higher.\n \n @item -ftree-dominator-opts\n @opindex ftree-dominator-opts"}, {"sha": "65aa1e23ddefc3e580a714f8891da782a1eca915", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "patch": "@@ -1,3 +1,8 @@\n+2008-05-17  Xinliang David Li <davidxl@google.com>\n+\n+\t* gcc.dg/cdce1.c: New test\n+\t* gcc.dg/cdce2.c: New test\n+\n 2008-05-17  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/initialization_19.f90: New test."}, {"sha": "91fb5ab966a8dfde0a5b707f7c5404324e338aa7", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29cc9b40265813f66eaf8a0e783d7a8a0c5037d/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=e29cc9b40265813f66eaf8a0e783d7a8a0c5037d", "patch": "@@ -217,7 +217,7 @@ find_all_control_dependences (struct edge_list *el)\n         if (error_cond(args))\n              built_in_call(args)\n \n-   ( An actual simple exampl is :\n+    An actual simple exampl is :\n          log (x);   // Mostly dead call\n      ==>\n          if (x < 0)\n@@ -226,7 +226,7 @@ find_all_control_dependences (struct edge_list *el)\n      in majority of the cases, log won't be called with x out of \n      range. The branch is totally predicatible, so the branch cost\n      is low.  Such optimization improves the performance of  \n-     an important application in a big search company by 20% )\n+     an important application in a big search company. \n    \n    Note that library functions are not supposed to clear errno to zero without\n    error.\n@@ -245,6 +245,10 @@ find_all_control_dependences (struct edge_list *el)\n    inlining).  */\n \n \n+/* A helper method to help select calls to pow that are suitable for\n+   conditional DCE transformation. Returns true if the pow call is \n+   a candidate.*/\n+\n static bool\n check_pow (tree pow_call)\n {\n@@ -325,6 +329,10 @@ check_pow (tree pow_call)\n     return false;\n }\n \n+/* A helper function to help select candidate calls to log that are \n+   suitable for conditional DCE. Returns true if the log call is a\n+    candidate. */\n+\n static bool\n check_log (tree log_call)\n {\n@@ -340,8 +348,9 @@ check_log (tree log_call)\n }\n \n \n-/*  A helper function to determine if a builtin function\n-    call is a candidate for conditional DCE.  */\n+/* A helper function to determine if a builtin function call is a \n+   candidate for conditional DCE. Returns true if the builtin call\n+   is a candidate. */\n \n static bool\n is_unnecessary_except_errno_call (tree call)\n@@ -353,34 +362,29 @@ is_unnecessary_except_errno_call (tree call)\n   if (!flag_tree_builtin_dce) \n     return false;\n \n-  gcc_assert (call);\n-  gcc_assert (!DECL_P (call));\n-  gcc_assert (TREE_CODE (call) == CALL_EXPR);\n+  gcc_assert (call && TREE_CODE (call) == CALL_EXPR);\n \n   fn = get_callee_fndecl (call);\n   if (!fn || !DECL_BUILT_IN (fn)) \n     return false;\n \n   fnc = DECL_FUNCTION_CODE (fn);\n   switch (fnc)\n-   {\n-     CASE_FLT_FN (BUILT_IN_POW): \n-         if (check_pow (call))\n-           is_unnecessary_except_errno = true;\n-     break;\n+    {\n+    CASE_FLT_FN (BUILT_IN_POW): \n+      if (check_pow (call))\n+        is_unnecessary_except_errno = true;\n+      break;\n \n-     CASE_FLT_FN (BUILT_IN_LOG):\n-         if (check_log (call))\n-           is_unnecessary_except_errno = true;\n-     break;\n-     default : \n-       is_unnecessary_except_errno = false;\n-     break;\n+    CASE_FLT_FN (BUILT_IN_LOG):\n+      if (check_log (call))\n+        is_unnecessary_except_errno = true;\n+      break;\n+    default : \n+      is_unnecessary_except_errno = false;\n+      break;\n    }\n \n-  if (!is_unnecessary_except_errno) \n-    return false;\n-\n   return is_unnecessary_except_errno;\n }\n \n@@ -717,10 +721,11 @@ propagate_necessity (struct edge_list *el)\n     }\n }\n \n-/*  Method to generate conditional statements for guarding condionally\n-    dead calls to pow. One or more statements can be generated for \n-    each logical condition. Statement groups of different conditions\n-    are separated by a NULL tree.  */\n+/* Method to generate conditional statements for guarding condionally\n+   dead calls to pow. One or more statements can be generated for \n+   each logical condition. Statement groups of different conditions\n+   are separated by a NULL tree and they are stored in the VEC \n+   conds. The number of logical conditions are stored in *nconds. */\n static void\n gen_conditions_for_pow (tree pow_call, enum built_in_function fnc, \n                         VEC (tree, heap)* conds, unsigned * nconds)\n@@ -872,7 +877,7 @@ gen_conditions_for_pow (tree pow_call, enum built_in_function fnc,\n      VEC_safe_push (tree, heap, conds, stmt3);\n      (*nconds)++;\n \n-     /* now a seperator*/\n+     /* Now a seperator*/\n      VEC_safe_push (tree, heap, conds, NULL);\n \n      temp1 = create_tmp_var (int_typ, \"DCE_COND1\");\n@@ -893,8 +898,8 @@ gen_conditions_for_pow (tree pow_call, enum built_in_function fnc,\n     gcc_unreachable ();\n }\n \n-/*  The method to generate error condition guard code for log(x)\n-    calls.  */\n+/* The method to generate error condition guard code for log(x)\n+   calls. */\n static void\n gen_conditions_for_log (tree call, enum built_in_function fnc, \n                         VEC (tree, heap)* conds, unsigned * nconds)\n@@ -956,8 +961,8 @@ gen_shrink_wrap_conditions (tree bi_call, VEC (tree, heap)* conds, unsigned int\n   enum built_in_function fnc; \n   gcc_assert (nconds && conds);\n   gcc_assert (VEC_length(tree, conds) == 0);\n-  gcc_assert (TREE_CODE (bi_call) == GIMPLE_MODIFY_STMT ||\n-             TREE_CODE (bi_call) == CALL_EXPR);\n+  gcc_assert (TREE_CODE (bi_call) == GIMPLE_MODIFY_STMT \n+              || TREE_CODE (bi_call) == CALL_EXPR);\n \n   call = bi_call;\n   if (TREE_CODE (call) == GIMPLE_MODIFY_STMT)\n@@ -969,19 +974,17 @@ gen_shrink_wrap_conditions (tree bi_call, VEC (tree, heap)* conds, unsigned int\n   *nconds = 0;\n \n   switch (fnc)\n-   {\n-     /*CASE_FLT_FN(BUILT_IN_POW)*/\n+    {\n      case BUILT_IN_POW:\n        gen_conditions_for_pow (call, fnc, conds, nconds);\n-     break;\n-     /*CASE_FLT_FN(BUILT_IN_LOG):*/\n+       break;\n      case BUILT_IN_LOG:\n      case BUILT_IN_LOGF:\n      case BUILT_IN_LOGL:\n        gen_conditions_for_log (call, fnc, conds, nconds);\n-     break;\n+       break;\n      default : \n-       gcc_assert (0);\n+       gcc_unreachable();\n      break;\n    }\n \n@@ -990,6 +993,7 @@ gen_shrink_wrap_conditions (tree bi_call, VEC (tree, heap)* conds, unsigned int\n }\n \n \n+/* Propability of the branch (to the call) is taken. */\n #define ERR_PROB 0.01\n \n /*  The method to shrink wrap a partially  dead builtin call \n@@ -1044,15 +1048,16 @@ shrink_wrap_one_built_in_call (tree bi_call)\n    {\n      tree c = VEC_index (tree, conds, ci);\n      gcc_assert ( c || ci != 0 );\n-     if (!c) break;\n+     if (!c) \n+       break;\n      bsi_insert_before (&bi_call_bsi, c, BSI_SAME_STMT);\n      cond_expr = c;\n    }\n   nconds --;\n   ci ++;\n   gcc_assert (cond_expr && TREE_CODE (cond_expr) == COND_EXPR);\n \n-  /* now the label*/\n+  /* Now the label*/\n   bi_call_label_decl = create_artificial_label ();\n   bi_call_label = build1 (LABEL_EXPR, void_type_node, bi_call_label_decl);\n   bsi_insert_before (&bi_call_bsi, bi_call_label, BSI_SAME_STMT);\n@@ -1068,7 +1073,7 @@ shrink_wrap_one_built_in_call (tree bi_call)\n   join_tgt_in_edge_fall_thru->probability = \n       REG_BR_PROB_BASE - bi_call_in_edge0->probability;\n \n-  /* code generation for the rest of the conditions */\n+  /* Code generation for the rest of the conditions */\n   guard_bb = guard_bb0;\n   for (; nconds > 0; )\n    {\n@@ -1095,7 +1100,7 @@ shrink_wrap_one_built_in_call (tree bi_call)\n \n      bi_call_in_edge = make_edge (guard_bb, bi_call_bb, EDGE_TRUE_VALUE);\n \n-     bi_call_in_edge->probability = REG_BR_PROB_BASE*ERR_PROB;\n+     bi_call_in_edge->probability = REG_BR_PROB_BASE * ERR_PROB;\n      guard_bb_in_edge->probability = \n          REG_BR_PROB_BASE - bi_call_in_edge->probability;\n "}]}