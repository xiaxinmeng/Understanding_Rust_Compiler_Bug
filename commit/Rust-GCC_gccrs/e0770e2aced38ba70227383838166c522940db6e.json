{"sha": "e0770e2aced38ba70227383838166c522940db6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3NzBlMmFjZWQzOGJhNzAyMjczODM4MzgxNjZjNTIyOTQwZGI2ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-12T09:09:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-12T09:09:51Z"}, "message": "i386-builtin-types.def: Add USHORT_FTYPE_VOID.\n\n\t* config/i386/i386-builtin-types.def: Add USHORT_FTYPE_VOID.\n\tRemove VOID_FTYPE_PUSHORT.\n\t* config/i386/i386.c (bdesc_special_args) <__builtin_ia32_fnstsw>:\n\tChange code to USHORT_FTYPE_VOID.\n\t(ix86_expand_special_args_builtin): Handle USHORT_FTYPE_VOID.\n\t(ix86_expand_builtin): Remove IX86_BUILTIN_FNSTSW handling.\n\t(ix86_atomic_assign_expand_fenv): Update for\n\t__builtin_ia32_fnstsw changes.\n\t* config/i386/i386.md (x86_fnstsw_1): Set length unconditionally to 2.\n\t(fnstsw): Change operand 0 to nonimmediate operand.\n\nFrom-SVN: r212478", "tree": {"sha": "4f0a49599fe1a79de78fcf2bdcac7efc06b251d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f0a49599fe1a79de78fcf2bdcac7efc06b251d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0770e2aced38ba70227383838166c522940db6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0770e2aced38ba70227383838166c522940db6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0770e2aced38ba70227383838166c522940db6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0770e2aced38ba70227383838166c522940db6e/comments", "author": null, "committer": null, "parents": [{"sha": "c35146e77fcc9085a9107af85eed7863f4c90039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35146e77fcc9085a9107af85eed7863f4c90039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35146e77fcc9085a9107af85eed7863f4c90039"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "8c111551ac86737f4ed0ef550633f19b7927c92a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0770e2aced38ba70227383838166c522940db6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0770e2aced38ba70227383838166c522940db6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0770e2aced38ba70227383838166c522940db6e", "patch": "@@ -1,3 +1,16 @@\n+2014-07-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-builtin-types.def: Add USHORT_FTYPE_VOID.\n+\tRemove VOID_FTYPE_PUSHORT.\n+\t* config/i386/i386.c (bdesc_special_args) <__builtin_ia32_fnstsw>:\n+\tChange code to USHORT_FTYPE_VOID.\n+\t(ix86_expand_special_args_builtin): Handle USHORT_FTYPE_VOID.\n+\t(ix86_expand_builtin): Remove IX86_BUILTIN_FNSTSW handling.\n+\t(ix86_atomic_assign_expand_fenv): Update for\n+\t__builtin_ia32_fnstsw changes.\n+\t* config/i386/i386.md (x86_fnstsw_1): Set length unconditionally to 2.\n+\t(fnstsw): Change operand 0 to nonimmediate operand.\n+\n 2014-07-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* vapool.c: Include tree-ssa-alias.h, gimple.h and lto-streamer.h\n@@ -14,7 +27,7 @@\n \t(varpool_ctor_useable_for_folding_p): New function.\n \t* lto-streamer-out.c (get_symbol_initial_value): Take encoder\n \tparameter; return error_mark_node for non-trivial constructors.\n-\t(lto_write_tree_1, DFS_write_tree): UPdate use of\n+\t(lto_write_tree_1, DFS_write_tree): Update use of\n \tget_symbol_initial_value.\n \t(output_function): Update initialization of symbol.\n \t(output_constructor): New function.\n@@ -23,8 +36,7 @@\n \t(lto_output): Output variable sections.\n \t* lto-streamer-in.c (input_constructor): New function.\n \t(lto_read_body): Rename from ...\n-\t(lto_read_body_or_constructor): ... this one; handle vars\n-\ttoo.\n+\t(lto_read_body_or_constructor): ... this one; handle vars too.\n \t(lto_input_variable_constructor): New function.\n \t* ipa-prop.c (ipa_prop_write_jump_functions,\n \tipa_prop_write_all_agg_replacement): Update.\n@@ -59,13 +71,12 @@\n \t(ata5831): Same.\n \t* config/avr/avr-tables.opt: Regenerate.\n \t* config/avr/avr.h: Add declaration for text section start handler.\n-\t(EXTRA_SPEC_FUNCTIONS): Add text section start handler to SPEC function=\n-s.\n+\t(EXTRA_SPEC_FUNCTIONS): Add text section start handler to\n+\tSPEC functions.\n \t(LINK_SPEC): Include text section start handler to linker spec.\n \t* config/avr/driver-avr.c (avr_device_to_text_start): New function to\n-\tpass -Ttext option to linker if the text section start for the device i=\n-s\n-\tnot zero.\n+\tpass -Ttext option to linker if the text section start for the device\n+\tis not zero.\n \t* config/avr/t-multilib: Regenerate.\n \t* doc/avr-mmcu.texi: Regenerate.\n \n@@ -79,8 +90,7 @@ s\n \n 2014-07-11  Roman Gareev  <gareevroman@gmail.com>\n \n-\t* graphite-isl-ast-to-gimple.c (gmp_cst_to_tree):\n-\tNew function.\n+\t* graphite-isl-ast-to-gimple.c (gmp_cst_to_tree): New function.\n \t(graphite_verify): New function.\n \t(ivs_params_clear): New function.\n \t(gcc_expression_from_isl_ast_expr_id): New function.\n@@ -109,9 +119,8 @@ s\n 2014-07-11  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/61473\n-\t* builtins.c (fold_builtin_memory_op): Inline memory moves\n-\tthat can be implemented with a single load followed by a\n-\tsingle store.\n+\t* builtins.c (fold_builtin_memory_op): Inline memory moves that\n+\tcan be implemented with a single load followed by a single store.\n \t(c_strlen): Only warn when only_value is not 2.\n \n 2014-07-11  Evgeny Stupachenko  <evstupac@gmail.com>\n@@ -123,7 +132,7 @@ s\n \tPR target/61561\n \t* config/arm/arm.md (*movhi_insn_arch4): Handle stack pointer.\n \t(*movhi_bytes): Likewise.\n-\t(*arm_movqi_insn): Likewise. \n+\t(*arm_movqi_insn): Likewise.\n \n 2014-07-11  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "35c0035a0e6e417dbd6b26d76947b6dc4d835324", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0770e2aced38ba70227383838166c522940db6e/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0770e2aced38ba70227383838166c522940db6e/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=e0770e2aced38ba70227383838166c522940db6e", "patch": "@@ -162,6 +162,7 @@ DEF_POINTER_TYPE (PCV16SI, V16SI, CONST)\n DEF_FUNCTION_TYPE (FLOAT128)\n DEF_FUNCTION_TYPE (UINT64)\n DEF_FUNCTION_TYPE (UNSIGNED)\n+DEF_FUNCTION_TYPE (USHORT)\n DEF_FUNCTION_TYPE (INT)\n DEF_FUNCTION_TYPE (VOID)\n DEF_FUNCTION_TYPE (PVOID)\n@@ -256,7 +257,6 @@ DEF_FUNCTION_TYPE (VOID, PCVOID)\n DEF_FUNCTION_TYPE (VOID, PVOID)\n DEF_FUNCTION_TYPE (VOID, UINT64)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED)\n-DEF_FUNCTION_TYPE (VOID, PUSHORT)\n DEF_FUNCTION_TYPE (INT, PUSHORT)\n DEF_FUNCTION_TYPE (INT, PUNSIGNED)\n DEF_FUNCTION_TYPE (INT, PULONGLONG)"}, {"sha": "e13f4058d4076f227e417130fdd3f4252fee60d2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0770e2aced38ba70227383838166c522940db6e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0770e2aced38ba70227383838166c522940db6e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e0770e2aced38ba70227383838166c522940db6e", "patch": "@@ -28994,7 +28994,7 @@ static const struct builtin_description bdesc_special_args[] =\n   /* 80387 (for use internally for atomic compound assignment).  */\n   { 0, CODE_FOR_fnstenv, \"__builtin_ia32_fnstenv\", IX86_BUILTIN_FNSTENV, UNKNOWN, (int) VOID_FTYPE_PVOID },\n   { 0, CODE_FOR_fldenv, \"__builtin_ia32_fldenv\", IX86_BUILTIN_FLDENV, UNKNOWN, (int) VOID_FTYPE_PCVOID },\n-  { 0, CODE_FOR_fnstsw, \"__builtin_ia32_fnstsw\", IX86_BUILTIN_FNSTSW, UNKNOWN, (int) VOID_FTYPE_PUSHORT },\n+  { 0, CODE_FOR_fnstsw, \"__builtin_ia32_fnstsw\", IX86_BUILTIN_FNSTSW, UNKNOWN, (int) USHORT_FTYPE_VOID },\n   { 0, CODE_FOR_fnclex, \"__builtin_ia32_fnclex\", IX86_BUILTIN_FNCLEX, UNKNOWN, (int) VOID_FTYPE_VOID },\n \n   /* MMX */\n@@ -34598,6 +34598,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       break;\n \n     case INT_FTYPE_VOID:\n+    case USHORT_FTYPE_VOID:\n     case UINT64_FTYPE_VOID:\n     case UNSIGNED_FTYPE_VOID:\n       nargs = 0;\n@@ -35283,7 +35284,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n     case IX86_BUILTIN_FXRSTOR64:\n     case IX86_BUILTIN_FNSTENV:\n     case IX86_BUILTIN_FLDENV:\n-    case IX86_BUILTIN_FNSTSW:\n       mode0 = BLKmode;\n       switch (fcode)\n \t{\n@@ -35305,10 +35305,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \tcase IX86_BUILTIN_FLDENV:\n \t  icode = CODE_FOR_fldenv;\n \t  break;\n-\tcase IX86_BUILTIN_FNSTSW:\n-\t  icode = CODE_FOR_fnstsw;\n-\t  mode0 = HImode;\n-\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -46894,15 +46890,14 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \t\t      hold_fnclex);\n       *clear = build_call_expr (fnclex, 0);\n       tree sw_var = create_tmp_var (short_unsigned_type_node, NULL);\n-      mark_addressable (sw_var);\n-      tree su_ptr = build_pointer_type (short_unsigned_type_node);\n-      tree sw_addr = build1 (ADDR_EXPR, su_ptr, sw_var);\n-      tree fnstsw_call = build_call_expr (fnstsw, 1, sw_addr);\n+      tree fnstsw_call = build_call_expr (fnstsw, 0);\n+      tree sw_mod = build2 (MODIFY_EXPR, short_unsigned_type_node,\n+\t\t\t    sw_var, fnstsw_call);\n       tree exceptions_x87 = fold_convert (integer_type_node, sw_var);\n       tree update_mod = build2 (MODIFY_EXPR, integer_type_node,\n \t\t\t\texceptions_var, exceptions_x87);\n       *update = build2 (COMPOUND_EXPR, integer_type_node,\n-\t\t\tfnstsw_call, update_mod);\n+\t\t\tsw_mod, update_mod);\n       tree update_fldenv = build_call_expr (fldenv, 1, fenv_addr);\n       *update = build2 (COMPOUND_EXPR, void_type_node, *update, update_fldenv);\n     }"}, {"sha": "3cb8b672515e936b7b311a7ab877ad7b1ffdaccb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0770e2aced38ba70227383838166c522940db6e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0770e2aced38ba70227383838166c522940db6e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e0770e2aced38ba70227383838166c522940db6e", "patch": "@@ -1532,8 +1532,7 @@\n \t(unspec:HI [(reg:CCFP FPSR_REG)] UNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n   \"fnstsw\\t%0\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"unit\" \"i387\")])\n \n@@ -18114,12 +18113,12 @@\n         (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))])\n \n (define_insn \"fnstsw\"\n-  [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=a,m\")\n \t(unspec_volatile:HI [(const_int 0)] UNSPECV_FNSTSW))]\n   \"TARGET_80387\"\n   \"fnstsw\\t%0\"\n-  [(set_attr \"type\" \"other\")\n-   (set_attr \"memory\" \"store\")\n+  [(set_attr \"type\" \"other,other\")\n+   (set_attr \"memory\" \"none,store\")\n    (set (attr \"length\")\n         (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))])\n "}]}