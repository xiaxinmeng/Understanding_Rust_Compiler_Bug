{"sha": "9be7ee44c48f431a95def4d3f373c3325c2d2c22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJlN2VlNDRjNDhmNDMxYTk1ZGVmNGQzZjM3M2MzMzI1YzJkMmMyMg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-12-19T20:10:11Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-12-19T20:10:11Z"}, "message": "re PR tree-optimization/24793 (ICE: expected ssa_name, have var_decl in verify_ssa, at tree-ssa.c:746)\n\n\tPR tree-optimization/24793\n\t* tree-ssa-loop-ivopts.c (get_ref_tag): Remember the\n\toriginal reference if there are subvars.\n\t* tree-ssa-operands.c (get_tmr_operands): Handle subvars.\n\nFrom-SVN: r108808", "tree": {"sha": "c083ed688da6e07dceabf6e632488d095cee358b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c083ed688da6e07dceabf6e632488d095cee358b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9be7ee44c48f431a95def4d3f373c3325c2d2c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be7ee44c48f431a95def4d3f373c3325c2d2c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be7ee44c48f431a95def4d3f373c3325c2d2c22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be7ee44c48f431a95def4d3f373c3325c2d2c22/comments", "author": null, "committer": null, "parents": [{"sha": "0bae56c4603aa45147cac966e83d264df65847e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bae56c4603aa45147cac966e83d264df65847e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bae56c4603aa45147cac966e83d264df65847e8"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "fdaf09f670e7d42bf72c594a10d0e078c1b6740b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be7ee44c48f431a95def4d3f373c3325c2d2c22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be7ee44c48f431a95def4d3f373c3325c2d2c22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9be7ee44c48f431a95def4d3f373c3325c2d2c22", "patch": "@@ -1,4 +1,12 @@\n+2005-12-19  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/24793\n+\t* tree-ssa-loop-ivopts.c (get_ref_tag): Remember the\n+\toriginal reference if there are subvars.\n+\t* tree-ssa-operands.c (get_tmr_operands): Handle subvars.\n+\n 2005-12-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n \t* df.c (df_analyze_1, df_analyze_subcfg, iterative_dataflow):\n \tCorrected basic block number calculations for changes in entry and\n \texit numbering."}, {"sha": "6e7dd61673eeecdb80e2a0a76181228bbcdaa591", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be7ee44c48f431a95def4d3f373c3325c2d2c22/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be7ee44c48f431a95def4d3f373c3325c2d2c22/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=9be7ee44c48f431a95def4d3f373c3325c2d2c22", "patch": "@@ -5490,10 +5490,21 @@ unshare_and_remove_ssa_names (tree ref)\n    and extracts this single useful piece of information.  */\n \n static tree\n-get_ref_tag (tree ref)\n+get_ref_tag (tree ref, tree orig)\n {\n   tree var = get_base_address (ref);\n-  tree tag;\n+  tree aref = NULL_TREE, tag, sv;\n+  HOST_WIDE_INT offset, size, maxsize;\n+\n+  for (sv = orig; handled_component_p (sv); sv = TREE_OPERAND (sv, 0))\n+    {\n+      aref = get_ref_base_and_extent (sv, &offset, &size, &maxsize);\n+      if (ref)\n+\tbreak;\n+    }\n+\n+  if (aref && SSA_VAR_P (aref) && get_subvars_for_var (aref))\n+    return unshare_expr (sv);\n \n   if (!var)\n     return NULL_TREE;\n@@ -5540,8 +5551,8 @@ copy_ref_info (tree new_ref, tree old_ref)\n     copy_mem_ref_info (new_ref, old_ref);\n   else\n     {\n-      TMR_TAG (new_ref) = get_ref_tag (old_ref);\n       TMR_ORIGINAL (new_ref) = unshare_and_remove_ssa_names (old_ref);\n+      TMR_TAG (new_ref) = get_ref_tag (old_ref, TMR_ORIGINAL (new_ref));\n     }\n }\n "}, {"sha": "01bf7f21ae0122525350269faeb49c074056e54a", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be7ee44c48f431a95def4d3f373c3325c2d2c22/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be7ee44c48f431a95def4d3f373c3325c2d2c22/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=9be7ee44c48f431a95def4d3f373c3325c2d2c22", "patch": "@@ -1465,7 +1465,10 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags)\n static void\n get_tmr_operands (tree stmt, tree expr, int flags)\n {\n-  tree tag = TMR_TAG (expr);\n+  tree tag = TMR_TAG (expr), ref;\n+  HOST_WIDE_INT offset, size, maxsize;\n+  subvar_t svars, sv;\n+  stmt_ann_t s_ann = stmt_ann (stmt);\n \n   /* First record the real operands.  */\n   get_expr_operands (stmt, &TMR_BASE (expr), opf_none);\n@@ -1480,11 +1483,33 @@ get_tmr_operands (tree stmt, tree expr, int flags)\n       add_to_addressable_set (TMR_SYMBOL (expr), &ann->addresses_taken);\n     }\n \n-  if (tag)\n-    get_expr_operands (stmt, &tag, flags);\n-  else\n-    /* Something weird, so ensure that we will be careful.  */\n-    stmt_ann (stmt)->has_volatile_ops = true;\n+  if (!tag)\n+    {\n+      /* Something weird, so ensure that we will be careful.  */\n+      stmt_ann (stmt)->has_volatile_ops = true;\n+      return;\n+    }\n+\n+  if (DECL_P (tag))\n+    {\n+      get_expr_operands (stmt, &tag, flags);\n+      return;\n+    }\n+\n+  ref = get_ref_base_and_extent (tag, &offset, &size, &maxsize);\n+  gcc_assert (ref != NULL_TREE);\n+  svars = get_subvars_for_var (ref);\n+  for (sv = svars; sv; sv = sv->next)\n+    {\n+      bool exact;\t\t\n+      if (overlap_subvar (offset, maxsize, sv, &exact))\n+\t{\n+\t  int subvar_flags = flags;\n+\t  if (!exact || size != maxsize)\n+\t    subvar_flags &= ~opf_kill_def;\n+\t  add_stmt_operand (&sv->var, s_ann, subvar_flags);\n+\t}\n+    }\n }\n \n /* A subroutine of get_expr_operands to handle CALL_EXPR.  */"}]}