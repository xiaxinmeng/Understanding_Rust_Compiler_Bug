{"sha": "402b8cf659febc5377dc1680d35a60060ed72799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyYjhjZjY1OWZlYmM1Mzc3ZGMxNjgwZDM1YTYwMDYwZWQ3Mjc5OQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2008-09-15T22:24:18Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-09-15T22:24:18Z"}, "message": "crash16.C: Function name is the correct location for an error regarding a function.\n\ntestsuite/\n        * g++.old-deja/g++.brendan/crash16.C: Function name is the correct \n        location for an error regarding a function.\n        * g++.old-deja/g++.other/pmf3.C: Same.\n        * g++.old-deja/g++.law/ctors5.C: Same.\n        * g++.old-deja/g++.pt/explicit34.C: Same.\n        * g++.dg/parse/error28.C: Same.\n        * g++.dg/parse/error17.C: Same.\n        * g++.dg/template/friend44.C: Same.\ncp/\n        * decl.c (duplicate_decls): Call error_at.\n        (grokfndecl): New location argument.  Use location if available.\n        (grokdeclarator): Pass declarator location to grokfndecl.\n        * cp-tree.h (struct cp_declarator): Update comment for id_loc.\n        * decl2.c (check_classfn): Use error_at.\n        * parser.c (cp_parser_init_declarator): Set function_start_locus\n        to brace location.\n        (cp_parser_member_declaration): Set id_loc for function declarators.\n\nFrom-SVN: r140379", "tree": {"sha": "c7fecdbe7fcb04db014bde6d44be92149b600735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7fecdbe7fcb04db014bde6d44be92149b600735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402b8cf659febc5377dc1680d35a60060ed72799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402b8cf659febc5377dc1680d35a60060ed72799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402b8cf659febc5377dc1680d35a60060ed72799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402b8cf659febc5377dc1680d35a60060ed72799/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0eeb22402c9694e375f3a2b9113bcf94d30205cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eeb22402c9694e375f3a2b9113bcf94d30205cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eeb22402c9694e375f3a2b9113bcf94d30205cf"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "5b36ffc1e9c127e9662295a68f39d88479c14a41", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -1,3 +1,14 @@\n+2008-09-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* decl.c (duplicate_decls): Call error_at.\n+\t(grokfndecl): New location argument.  Use location if available.\n+\t(grokdeclarator): Pass declarator location to grokfndecl.\n+\t* cp-tree.h (struct cp_declarator): Update comment for id_loc.\n+\t* decl2.c (check_classfn): Use error_at.\n+\t* parser.c (cp_parser_init_declarator): Set function_start_locus\n+\tto brace location.\n+\t(cp_parser_member_declaration): Set id_loc for function declarators.\n+\n 2008-09-09  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/37500"}, {"sha": "065e47de147308e15c94523dd0b7543f4ecf8a74", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -4089,7 +4089,7 @@ struct cp_declarator {\n   /* For all but cdk_id and cdk_error, the contained declarator.  For\n      cdk_id and cdk_error, guaranteed to be NULL.  */\n   cp_declarator *declarator;\n-  location_t id_loc; /* Currently only set for cdk_id. */\n+  location_t id_loc; /* Currently only set for cdk_id and cdk_function. */\n   union {\n     /* For identifiers.  */\n     struct {"}, {"sha": "d699f89be32eb22ade8490d40f81987b432a4838", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -1459,7 +1459,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       const char *errmsg = redeclaration_error_message (newdecl, olddecl);\n       if (errmsg)\n \t{\n-\t  error (errmsg, newdecl);\n+\t  error_at (DECL_SOURCE_LOCATION (newdecl), errmsg, newdecl);\n \t  if (DECL_NAME (olddecl) != NULL_TREE)\n \t    error ((DECL_INITIAL (olddecl) && namespace_bindings_p ())\n \t\t\t ? \"%q+#D previously defined here\"\n@@ -6497,7 +6497,8 @@ grokfndecl (tree ctype,\n \t    bool funcdef_flag,\n \t    int template_count,\n \t    tree in_namespace,\n-\t    tree* attrlist)\n+\t    tree* attrlist,\n+\t    location_t location)\n {\n   tree decl;\n   int staticp = ctype && TREE_CODE (type) == FUNCTION_TYPE;\n@@ -6507,6 +6508,12 @@ grokfndecl (tree ctype,\n     type = build_exception_variant (type, raises);\n \n   decl = build_lang_decl (FUNCTION_DECL, declarator, type);\n+\n+  /* If we have an explicit location, use it, otherwise use whatever\n+     build_lang_decl used (probably input_location).  */\n+  if (location != UNKNOWN_LOCATION)\n+    DECL_SOURCE_LOCATION (decl) = location;\n+\n   if (TREE_CODE (type) == METHOD_TYPE)\n     {\n       tree parm;\n@@ -9018,7 +9025,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       virtualp, flags, memfn_quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, publicp, inlinep,\n \t\t\t       sfk,\n-\t\t\t       funcdef_flag, template_count, in_namespace, attrlist);\n+\t\t\t       funcdef_flag, template_count, in_namespace,\n+\t\t\t       attrlist, declarator->id_loc);\n \t    if (decl == NULL_TREE)\n \t      return error_mark_node;\n #if 0\n@@ -9060,7 +9068,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       virtualp, flags, memfn_quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, 1, 0, sfk,\n \t\t\t       funcdef_flag, template_count, in_namespace,\n-\t\t\t       attrlist);\n+\t\t\t       attrlist,\n+\t\t\t       declarator->id_loc);\n \t    if (decl == NULL_TREE)\n \t      return error_mark_node;\n \t  }\n@@ -9255,7 +9264,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t   virtualp, flags, memfn_quals, raises,\n \t\t\t   1, friendp,\n \t\t\t   publicp, inlinep, sfk, funcdef_flag,\n-\t\t\t   template_count, in_namespace, attrlist);\n+\t\t\t   template_count, in_namespace, attrlist,\n+\t\t\t   declarator->id_loc);\n \tif (decl == NULL_TREE)\n \t  return error_mark_node;\n "}, {"sha": "5aecf3c114c1e4a3aa06b08ae776c96ea5aaf431", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -638,8 +638,9 @@ check_classfn (tree ctype, tree function, tree template_parms)\n \t  return OVL_CURRENT (fndecls);\n \t}\n       \n-      error (\"prototype for %q#D does not match any in class %qT\",\n-\t     function, ctype);\n+      error_at (DECL_SOURCE_LOCATION (function),\n+\t\t\"prototype for %q#D does not match any in class %qT\",\n+\t\tfunction, ctype);\n       is_conv_op = DECL_CONV_FN_P (fndecl);\n \n       if (is_conv_op)"}, {"sha": "f28c76d9177926bb870d278b6cfdab2f59158bf8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -12563,6 +12563,9 @@ cp_parser_init_declarator (cp_parser* parser,\n \t}\n       else\n \t{\n+\t  location_t func_brace_location\n+\t    = cp_lexer_peek_token (parser->lexer)->location;\n+\n \t  /* Neither attributes nor an asm-specification are allowed\n \t     on a function-definition.  */\n \t  if (asm_specification)\n@@ -12586,6 +12589,13 @@ cp_parser_init_declarator (cp_parser* parser,\n \t      = (cp_parser_function_definition_from_specifiers_and_declarator\n \t\t (parser, decl_specifiers, prefix_attributes, declarator));\n \n+\t  if (decl != error_mark_node && DECL_STRUCT_FUNCTION (decl))\n+\t    {\n+\t      /* This is where the prologue starts...  */\n+\t      DECL_STRUCT_FUNCTION (decl)->function_start_locus\n+\t\t= func_brace_location;\n+\t    }\n+\n \t  return decl;\n \t}\n     }\n@@ -15791,6 +15801,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t  return;\n \t\t}\n \t      else\n+\t\tif (declarator->kind == cdk_function)\n+\t\t  declarator->id_loc = token->location;\n \t\t/* Create the declaration.  */\n \t\tdecl = grokfield (declarator, &decl_specifiers,\n \t\t\t\t  initializer, /*init_const_expr_p=*/true,"}, {"sha": "028862084d8eac493629b43bc1192b76c50fb588", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -1,3 +1,14 @@\n+2008-09-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.old-deja/g++.brendan/crash16.C: Function name is the correct \n+\tlocation for an error regarding a function.\n+\t* g++.old-deja/g++.other/pmf3.C: Same.\n+\t* g++.old-deja/g++.law/ctors5.C: Same.\n+\t* g++.old-deja/g++.pt/explicit34.C: Same.\n+\t* g++.dg/parse/error28.C: Same.\n+\t* g++.dg/parse/error17.C: Same.\n+\t* g++.dg/template/friend44.C: Same.\n+\n 2008-09-13  Raksit Ashok <raksit@google.com>\n \n \tPR rtl-optimization/37489"}, {"sha": "defd708982d95423e3d9071dfec2c128404ed183", "filename": "gcc/testsuite/g++.dg/parse/error17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror17.C?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -2,7 +2,7 @@\n // PR c++/16965\n \n template <typename T> struct B { \n-  static int Bar(T); // { dg-error \"19: error: candidates are: |19: error:  \" }\n+  static int Bar(T); // { dg-error \"14: error: candidates are: |14: error:  \" }\n }; \n struct D : B<int>, B<char> {}; \n  "}, {"sha": "7162afa3a02074e2aab3fe9ba9bbec5955482544", "filename": "gcc/testsuite/g++.dg/parse/error28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror28.C?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -3,7 +3,7 @@\n \n struct virt { virt () {} virt (int i) {} };\n struct der : public virtual virt { // { dg-error \"34: note:                 der::der\" }\n-  der (int i) : virt(i) {} // { dg-error \"13: note: candidates are: der\" }\n+  der (int i) : virt(i) {} // { dg-error \"3: note: candidates are: der\" }\n };\n struct top : public der { \n   top () {} // { dg-bogus \"der\\\\(const\" }"}, {"sha": "04d68c3e0f0225ab5269b55c5abd5dc53373e34c", "filename": "gcc/testsuite/g++.dg/template/friend44.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend44.C?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -1,8 +1,9 @@\n+// { dg-options \"-fshow-column\" }\n //PR c++/28260\n \n template<int> struct A\n {\n-  friend int foo(); // { dg-error \"new declaration\" }\n+  friend int foo(); // { dg-error \"14: error: new declaration\" }\n };\n \n-void foo() { A<0> a; } // { dg-error \"ambiguates old declaration\" } \n+void foo() { A<0> a; } // { dg-error \"6: error: ambiguates old declaration\" } "}, {"sha": "d05c73b8015163448cd5b7d93aeeff21422199a0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash16.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -5,10 +5,10 @@\n class Graph { // { dg-error \"1: error: new types|1: note: \\\\(perhaps\" }\n public:\n       unsigned         char N;\n-      Graph(void) {} // { dg-error \"17: error: 'Graph\" }\n+      Graph(void) {} // { dg-error \"7: error: 'Graph\" }\n }\n \n-Graph::Graph(void) // { dg-error \"18: error: return type|18: error: redefinition\" }\n+Graph::Graph(void) // { dg-error \"18: error: return type|1: error: redefinition\" }\n {    N = 10;\n }\n "}, {"sha": "c9851bf21b705be35285397dc395b3ceb7e13e13", "filename": "gcc/testsuite/g++.old-deja/g++.law/ctors5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -21,7 +21,7 @@ class Y // { dg-error \"1: error: new types may not be defined in a return type|1\n   public:\n     Y();\n }\n-X::X( int xi ) // { dg-error \"14: error: return type specification for constructor invalid|14: note: candidates are: X::X\\\\(int\\\\)\" }\n+X::X( int xi ) // { dg-error \"14: error: return type specification for constructor invalid|1: note: candidates are: X::X\\\\(int\\\\)\" }\n {\n     x = xi;\n }"}, {"sha": "fa9e92ec99855865edbd484deed6ccac8f31aeac", "filename": "gcc/testsuite/g++.old-deja/g++.other/pmf3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf3.C?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -3,9 +3,9 @@\n // Bug: g++ was crashing after giving errors.\n \n template<class T>\n-  void connect_to_method(\n+  void connect_to_method( // { dg-error \"candidates are\" }\n     T *receiver,\n-    void (T::*method)()) // { dg-error \"candidates are\" }\n+    void (T::*method)())\n   {}\n \n class Gtk_Base"}, {"sha": "f90b4becb17d80b8a57ce1ba86adefc036ace0b9", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit34.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402b8cf659febc5377dc1680d35a60060ed72799/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit34.C?ref=402b8cf659febc5377dc1680d35a60060ed72799", "patch": "@@ -1,10 +1,11 @@\n // { dg-do assemble  }\n+// { dg-options \"-fshow-column\" }\n // GROUPS passed templates\n template <class T>\n void foo(T t);\n \n template <>\n-void foo(int) {}; // { dg-error \"\" } previously defined here.\n+void foo(int) {}; // { dg-error \"6:\" } previously defined here.\n \n template <>\n-void foo<int>(int) {} // { dg-error \"\" } duplicate specialization.\n+void foo<int>(int) {} // { dg-error \"6:\" } duplicate specialization."}]}