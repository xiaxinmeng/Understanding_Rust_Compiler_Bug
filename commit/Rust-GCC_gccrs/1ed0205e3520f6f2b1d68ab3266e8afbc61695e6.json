{"sha": "1ed0205e3520f6f2b1d68ab3266e8afbc61695e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkMDIwNWUzNTIwZjZmMmIxZDY4YWIzMjY2ZThhZmJjNjE2OTVlNg==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@cygnus.com", "date": "1998-07-28T12:54:04Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1998-07-28T12:54:04Z"}, "message": "cse.c (cse_insn): Enable subsitution inside libcall only for REG, SUBREG, MEM.\n\n\ufffd\n\t* cse.c (cse_insn): Enable subsitution inside libcall only for REG,\n\tSUBREG, MEM.\n\t* rtlanal.c (replace_rtx): Prohibit replaces in\tCONST_DOUBLE.\n\nFrom-SVN: r21435", "tree": {"sha": "397ded5aa1d2ca77c11ef93e982306030a77bfa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/397ded5aa1d2ca77c11ef93e982306030a77bfa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6/comments", "author": null, "committer": null, "parents": [{"sha": "4d17a06f32ff0fad8f8783e39ef34083174ba3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d17a06f32ff0fad8f8783e39ef34083174ba3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d17a06f32ff0fad8f8783e39ef34083174ba3e6"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "498879e976ed366c51c1628c22724401570cf8d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ed0205e3520f6f2b1d68ab3266e8afbc61695e6", "patch": "@@ -1,3 +1,9 @@\n+1998-07-28  Vladimir N. Makarov  <vmakarov@cygnus.com>\n+\n+\t* cse.c (cse_insn): Enable subsitution inside libcall only for REG,\n+\tSUBREG, MEM.\n+\t* rtlanal.c (replace_rtx): Prohibit replaces in\tCONST_DOUBLE. \n+\n Tue Jul 28 11:33:09 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cplus-dem.c (type_kind_t): New type."}, {"sha": "5d121870afb0a7153c8e3249f880a335b2312cca", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=1ed0205e3520f6f2b1d68ab3266e8afbc61695e6", "patch": "@@ -6117,8 +6117,9 @@ record_jump_cond (code, mode, op0, op1, reversed_nonequality)\n    Then install the new sources and destinations in the table\n    of available values. \n \n-   If IN_LIBCALL_BLOCK is nonzero, don't record any equivalence made in\n-   the insn.  */\n+   If LIBCALL_INSN is nonzero, don't record any equivalence made in\n+   the insn.  It means that INSN is inside libcall block.  In this\n+   case LIBCALL_INSN is the corresponding insn with REG_LIBCALL. */\n \n /* Data on one SET contained in the instruction.  */\n \n@@ -6948,7 +6949,10 @@ cse_insn (insn, libcall_insn)\n \t      /* If we just made a substitution inside a libcall, then we\n \t\t need to make the same substitution in any notes attached\n \t\t to the RETVAL insn.  */\n-\t      if (libcall_insn)\n+\t      if (libcall_insn\n+\t\t  && (GET_CODE (old_src) == REG\n+\t\t      || GET_CODE (old_src) == SUBREG\n+\t\t      ||  GET_CODE (old_src) == MEM))\n \t\treplace_rtx (REG_NOTES (libcall_insn), old_src, \n \t\t\t     canon_reg (SET_SRC (sets[i].rtl), insn));\n "}, {"sha": "221b3fae4c139ef9d9f98d857727cded06481263", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed0205e3520f6f2b1d68ab3266e8afbc61695e6/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=1ed0205e3520f6f2b1d68ab3266e8afbc61695e6", "patch": "@@ -1765,7 +1765,8 @@ inequality_comparisons_p (x)\n   return 0;\n }\n \f\n-/* Replace any occurrence of FROM in X with TO.\n+/* Replace any occurrence of FROM in X with TO.  The function does\n+   not enter into CONST_DOUBLE for the replace.\n \n    Note that copying is not done so X must not be shared unless all copies\n    are to be modified.  */\n@@ -1777,6 +1778,11 @@ replace_rtx (x, from, to)\n   register int i, j;\n   register char *fmt;\n \n+  /* The following prevents loops occurrence when we change MEM in\n+     CONST_DOUBLE onto the same CONST_DOUBLE. */\n+  if (x != 0 && GET_CODE (x) == CONST_DOUBLE)\n+    return x;\n+\n   if (x == from)\n     return to;\n "}]}