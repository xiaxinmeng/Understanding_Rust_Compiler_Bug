{"sha": "5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0NzFlYTY1YjJkN2VlMzhjOGVjOTkxZmU4YjFkZWQ4NzY2YWNjMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-12-01T13:58:52Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-12-01T13:58:52Z"}, "message": "common.opt (flag_stack_check): New Variable entry.\n\n\t* common.opt (flag_stack_check): New Variable entry.\n\t(fcompare-debug-second): Use Var.\n\t* flags.h (flag_compare_debug, flag_stack_check): Remove.\n\t* opts.c (flag_compare_debug): Remove.\n\t(common_handle_option): Don't handle OPT_fcompare_debug_second.\n\tSet opts->x_flag_stack_check for OPT_fstack_check_.\n\t* toplev.c (flag_stack_check): Remove.\n\nada:\n\t* gcc-interface/misc.c (flag_compare_debug, flag_stack_check):\n\tUndefine as macros then define as variables.\n\t(gnat_post_options): Set variables from global_options.\n\nFrom-SVN: r167331", "tree": {"sha": "22ef034e385c243309503680ac6ccdcaafcc7e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ef034e385c243309503680ac6ccdcaafcc7e75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1208a579981b33f86535e7d1fb42ea843d04737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1208a579981b33f86535e7d1fb42ea843d04737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1208a579981b33f86535e7d1fb42ea843d04737"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "8d8c120700a6566ef5abf72cb1c08a21ad0dc012", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "patch": "@@ -1,3 +1,13 @@\n+2010-12-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (flag_stack_check): New Variable entry.\n+\t(fcompare-debug-second): Use Var.\n+\t* flags.h (flag_compare_debug, flag_stack_check): Remove.\n+\t* opts.c (flag_compare_debug): Remove.\n+\t(common_handle_option): Don't handle OPT_fcompare_debug_second.\n+\tSet opts->x_flag_stack_check for OPT_fstack_check_.\n+\t* toplev.c (flag_stack_check): Remove.\n+\n 2010-12-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common.opt (main_input_filename, main_input_basename,"}, {"sha": "c747696ef2318b86012fb7006d2aeda3fbb6096d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "patch": "@@ -1,3 +1,9 @@\n+2010-12-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/misc.c (flag_compare_debug, flag_stack_check):\n+\tUndefine as macros then define as variables.\n+\t(gnat_post_options): Set variables from global_options.\n+\n 2010-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/46574"}, {"sha": "360ebab8aed346af6332369d237c530677af0777", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "patch": "@@ -221,8 +221,12 @@ gnat_init_options (unsigned int decoded_options_count,\n    of the global_options structure.  */\n #undef optimize\n #undef optimize_size\n+#undef flag_compare_debug\n+#undef flag_stack_check\n int optimize;\n int optimize_size;\n+int flag_compare_debug;\n+enum stack_check_type flag_stack_check = NO_STACK_CHECK;\n \n /* Post-switch processing.  */\n \n@@ -252,6 +256,8 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n \n   optimize = global_options.x_optimize;\n   optimize_size = global_options.x_optimize_size;\n+  flag_compare_debug = global_options.x_flag_compare_debug;\n+  flag_stack_check = global_options.x_flag_stack_check;\n \n   return false;\n }"}, {"sha": "c21c6769164077c64956147bde503e294c349e2a", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "patch": "@@ -129,6 +129,10 @@ unsigned int initial_max_fld_align = TARGET_DEFAULT_PACK_STRUCT\n Variable\n enum vect_verbosity_levels user_vect_verbosity_level = MAX_VERBOSITY_LEVEL\n \n+; Type of stack check.\n+Variable\n+enum stack_check_type flag_stack_check = NO_STACK_CHECK\n+\n ; -dA causes debug commentary information to be produced in\n ; the generated assembly code (to make it more readable).  This option\n ; is generally only of use to those who actually need to read the\n@@ -831,7 +835,7 @@ Common Driver JoinedOrMissing RejectNegative Var(flag_compare_debug_opt)\n -fcompare-debug[=<opts>]\tCompile with and without e.g. -gtoggle, and compare the final-insns dump\n \n fcompare-debug-second\n-Common Driver RejectNegative\n+Common Driver RejectNegative Var(flag_compare_debug)\n Run only the second compilation of -fcompare-debug\n \n fconserve-stack"}, {"sha": "41049557ea9427bfca678ed28f9a460e2d817d33", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "patch": "@@ -34,11 +34,6 @@ extern const char *const debug_type_names[];\n extern void strip_off_ending (char *, int);\n extern int base_of_path (const char *path, const char **base_out);\n \n-/* Run the second compilation of -fcompare-debug.  Not defined using\n-   Var in common.opt because this is used in Ada code and so must be\n-   an actual variable not a macro.  */\n-extern int flag_compare_debug;\n-\n /* True if this is the LTO front end (lto1).  This is used to disable\n    gimple generation and lowering passes that are normally run on the\n    output of a front end.  These passes must be bypassed for lto since\n@@ -120,8 +115,6 @@ extern struct target_flag_state *this_target_flag_state;\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n \n-extern enum stack_check_type flag_stack_check;\n-\n /* Returns TRUE if generated code should match ABI version N or\n    greater is in use.  */\n "}, {"sha": "281aab65752be6cdddeb167c900457e6e108a3c2", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "patch": "@@ -35,11 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING and DELAY_SLOTS.  */\n #include \"target.h\"\n \n-/* Run the second compilation of -fcompare-debug.  Not defined using\n-   Var in common.opt because this is used in Ada code and so must be\n-   an actual variable not a macro.  */\n-int flag_compare_debug;\n-\n /* Parse the -femit-struct-debug-detailed option value\n    and set the flag variables. */\n \n@@ -1447,10 +1442,6 @@ common_handle_option (struct gcc_options *opts,\n       /* Deferred.  */\n       break;\n \n-    case OPT_fcompare_debug_second:\n-      flag_compare_debug = value;\n-      break;\n-\n     case OPT_fdbg_cnt_:\n     case OPT_fdbg_cnt_list:\n       /* Deferred.  */\n@@ -1602,15 +1593,15 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_fstack_check_:\n       if (!strcmp (arg, \"no\"))\n-\tflag_stack_check = NO_STACK_CHECK;\n+\topts->x_flag_stack_check = NO_STACK_CHECK;\n       else if (!strcmp (arg, \"generic\"))\n \t/* This is the old stack checking method.  */\n-\tflag_stack_check = STACK_CHECK_BUILTIN\n+\topts->x_flag_stack_check = STACK_CHECK_BUILTIN\n \t\t\t   ? FULL_BUILTIN_STACK_CHECK\n \t\t\t   : GENERIC_STACK_CHECK;\n       else if (!strcmp (arg, \"specific\"))\n \t/* This is the new stack checking method.  */\n-\tflag_stack_check = STACK_CHECK_BUILTIN\n+\topts->x_flag_stack_check = STACK_CHECK_BUILTIN\n \t\t\t   ? FULL_BUILTIN_STACK_CHECK\n \t\t\t   : STACK_CHECK_STATIC_BUILTIN\n \t\t\t     ? STATIC_BUILTIN_STACK_CHECK"}, {"sha": "78985cbbfc872a548be29e7289599d948e88de7d", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5e471ea65b2d7ee38c8ec991fe8b1ded8766acc2", "patch": "@@ -170,9 +170,6 @@ int flag_permissive = 0;\n    the support provided depends on the backend.  */\n rtx stack_limit_rtx;\n \n-/* Type of stack check.  */\n-enum stack_check_type flag_stack_check = NO_STACK_CHECK;\n-\n /* True if the user has tagged the function with the 'section'\n    attribute.  */\n "}]}