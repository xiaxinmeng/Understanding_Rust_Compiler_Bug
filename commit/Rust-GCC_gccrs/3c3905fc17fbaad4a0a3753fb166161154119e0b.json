{"sha": "3c3905fc17fbaad4a0a3753fb166161154119e0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MzOTA1ZmMxN2ZiYWFkNGEwYTM3NTNmYjE2NjE2MTE1NDExOWUwYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-06T21:18:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-06T21:18:35Z"}, "message": "re PR c++/9381 (attribute on member function pointer have no effect)\n\n\tPR c++/9381\n\t* decl2.c (build_memfn_type): Preserve attributes.\n\t(cp_reconstruct_complex_type): Likewise.\n\t(maybe_retrofit_in_chrg): Likewise.\n\t* call.c (standard_conversion): Use build_memfn_type.\n\t* pt.c (tsubst): Likewise.\n\t* decl.c (build_ptrmem_type): Likewise\n\t(check_function_type): Preserve attributes.\n\t* tree.c (cp_build_type_attribute_variant): Propagate exception\n\tspecs on METHOD_TYPE, too.\n\t(strip_typedefs): Preserve exception specs and attributes.\n\nFrom-SVN: r153977", "tree": {"sha": "f9094fc4cf47ff01a50904d19522921bff716411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9094fc4cf47ff01a50904d19522921bff716411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c3905fc17fbaad4a0a3753fb166161154119e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3905fc17fbaad4a0a3753fb166161154119e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3905fc17fbaad4a0a3753fb166161154119e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3905fc17fbaad4a0a3753fb166161154119e0b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7"}], "stats": {"total": 117, "additions": 93, "deletions": 24}, "files": [{"sha": "36f7255efee665a9652d391774ae0caa7bcbd632", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -1,3 +1,17 @@\n+2009-11-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/9381\n+\t* decl2.c (build_memfn_type): Preserve attributes.\n+\t(cp_reconstruct_complex_type): Likewise.\n+\t(maybe_retrofit_in_chrg): Likewise.\n+\t* call.c (standard_conversion): Use build_memfn_type.\n+\t* pt.c (tsubst): Likewise.\n+\t* decl.c (build_ptrmem_type): Likewise\n+\t(check_function_type): Preserve attributes.\n+\t* tree.c (cp_build_type_attribute_variant): Propagate exception\n+\tspecs on METHOD_TYPE, too.\n+\t(strip_typedefs): Preserve exception specs and attributes.\n+\n 2009-11-06  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c++/41536"}, {"sha": "1aebaac8cd53d8a2d400c8b5782a53bfcdb4c09c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -896,10 +896,7 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t  || cp_type_quals (fbase) != cp_type_quals (tbase))\n \treturn NULL;\n \n-      from = cp_build_qualified_type (tbase, cp_type_quals (fbase));\n-      from = build_method_type_directly (from,\n-\t\t\t\t\t TREE_TYPE (fromfn),\n-\t\t\t\t\t TREE_CHAIN (TYPE_ARG_TYPES (fromfn)));\n+      from = build_memfn_type (fromfn, tbase, cp_type_quals (tbase));\n       from = build_ptrmemfunc_type (build_pointer_type (from));\n       conv = build_conv (ck_pmem, from, conv);\n       conv->base_p = true;"}, {"sha": "c798ba2833f98f005b9d3637db71cec09db5afce", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -4104,6 +4104,7 @@ adjust_clone_args (tree decl)\n \t      /* A default parameter has been added. Adjust the\n \t\t clone's parameters.  */\n \t      tree exceptions = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (clone));\n+\t      tree attrs = TYPE_ATTRIBUTES (TREE_TYPE (clone));\n \t      tree basetype = TYPE_METHOD_BASETYPE (TREE_TYPE (clone));\n \t      tree type;\n \n@@ -4121,6 +4122,8 @@ adjust_clone_args (tree decl)\n \t\t\t\t\t\t clone_parms);\n \t      if (exceptions)\n \t\ttype = build_exception_variant (type, exceptions);\n+\t      if (attrs)\n+\t\ttype = cp_build_type_attribute_variant (type, attrs);\n \t      TREE_TYPE (clone) = type;\n \n \t      clone_parms = NULL_TREE;"}, {"sha": "5e2f85fd9d4d911edb610a995934db8b8b2775f6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -7170,16 +7170,9 @@ build_ptrmem_type (tree class_type, tree member_type)\n {\n   if (TREE_CODE (member_type) == METHOD_TYPE)\n     {\n-      tree arg_types;\n-\n-      arg_types = TYPE_ARG_TYPES (member_type);\n-      class_type = (cp_build_qualified_type\n-\t\t    (class_type,\n-\t\t     cp_type_quals (TREE_TYPE (TREE_VALUE (arg_types)))));\n-      member_type\n-\t= build_method_type_directly (class_type,\n-\t\t\t\t      TREE_TYPE (member_type),\n-\t\t\t\t      TREE_CHAIN (arg_types));\n+      tree arg_types = TYPE_ARG_TYPES (member_type);\n+      cp_cv_quals quals = cp_type_quals (TREE_TYPE (TREE_VALUE (arg_types)));\n+      member_type = build_memfn_type (member_type, class_type, quals);\n       return build_ptrmemfunc_type (build_pointer_type (member_type));\n     }\n   else\n@@ -11551,7 +11544,7 @@ lookup_enumerator (tree enumtype, tree name)\n }\n \n \f\n-/* We're defining DECL.  Make sure that it's type is OK.  */\n+/* We're defining DECL.  Make sure that its type is OK.  */\n \n static void\n check_function_type (tree decl, tree current_function_parms)\n@@ -11585,9 +11578,12 @@ check_function_type (tree decl, tree current_function_parms)\n \t\t\t\t\t     TREE_CHAIN (args));\n       else\n \tfntype = build_function_type (void_type_node, args);\n-      TREE_TYPE (decl)\n+      fntype\n \t= build_exception_variant (fntype,\n \t\t\t\t   TYPE_RAISES_EXCEPTIONS (TREE_TYPE (decl)));\n+      fntype = (cp_build_type_attribute_variant\n+\t\t(fntype, TYPE_ATTRIBUTES (TREE_TYPE (decl))));\n+      TREE_TYPE (decl) = fntype;\n     }\n   else\n     abstract_virtuals_error (decl, TREE_TYPE (fntype));"}, {"sha": "53f66ad73fccb302a5a1cfb507efaee9afb0686f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -114,20 +114,27 @@ tree\n build_memfn_type (tree fntype, tree ctype, cp_cv_quals quals)\n {\n   tree raises;\n+  tree attrs;\n   int type_quals;\n \n   if (fntype == error_mark_node || ctype == error_mark_node)\n     return error_mark_node;\n \n+  gcc_assert (TREE_CODE (fntype) == FUNCTION_TYPE\n+\t      || TREE_CODE (fntype) == METHOD_TYPE);\n+\n   type_quals = quals & ~TYPE_QUAL_RESTRICT;\n   ctype = cp_build_qualified_type (ctype, type_quals);\n+  raises = TYPE_RAISES_EXCEPTIONS (fntype);\n+  attrs = TYPE_ATTRIBUTES (fntype);\n   fntype = build_method_type_directly (ctype, TREE_TYPE (fntype),\n \t\t\t\t       (TREE_CODE (fntype) == METHOD_TYPE\n \t\t\t\t\t? TREE_CHAIN (TYPE_ARG_TYPES (fntype))\n \t\t\t\t\t: TYPE_ARG_TYPES (fntype)));\n-  raises = TYPE_RAISES_EXCEPTIONS (fntype);\n   if (raises)\n     fntype = build_exception_variant (fntype, raises);\n+  if (attrs)\n+    fntype = cp_build_type_attribute_variant (fntype, attrs);\n \n   return fntype;\n }\n@@ -237,6 +244,9 @@ maybe_retrofit_in_chrg (tree fn)\n   if (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)))\n     fntype = build_exception_variant (fntype,\n \t\t\t\t      TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)));\n+  if (TYPE_ATTRIBUTES (TREE_TYPE (fn)))\n+    fntype = (cp_build_type_attribute_variant\n+\t      (fntype, TYPE_ATTRIBUTES (TREE_TYPE (fn))));\n   TREE_TYPE (fn) = fntype;\n \n   /* Now we've got the in-charge parameter.  */\n@@ -1219,6 +1229,8 @@ cp_reconstruct_complex_type (tree type, tree bottom)\n   else\n     return bottom;\n \n+  if (TYPE_ATTRIBUTES (type))\n+    outer = cp_build_type_attribute_variant (outer, TYPE_ATTRIBUTES (type));\n   return cp_build_qualified_type (outer, TYPE_QUALS (type));\n }\n "}, {"sha": "dd453c526cc18a353b968dd7dcc582c8333853cf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -10015,13 +10015,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  {\n \t    /* The type of the implicit object parameter gets its\n \t       cv-qualifiers from the FUNCTION_TYPE. */\n-\t    tree method_type;\n-\t    tree this_type = cp_build_qualified_type (TYPE_MAIN_VARIANT (r),\n-\t\t\t\t\t\t      cp_type_quals (type));\n \t    tree memptr;\n-\t    method_type = build_method_type_directly (this_type,\n-\t\t\t\t\t\t      TREE_TYPE (type),\n-\t\t\t\t\t\t      TYPE_ARG_TYPES (type));\n+\t    tree method_type = build_memfn_type (type, r, cp_type_quals (type));\n \t    memptr = build_ptrmemfunc_type (build_pointer_type (method_type));\n \t    return cp_build_qualified_type_real (memptr, cp_type_quals (t),\n \t\t\t\t\t\t complain);"}, {"sha": "5aea55e792f5f9b99b1a2618824c12a5f02b6af9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -1050,6 +1050,10 @@ strip_typedefs (tree t)\n \telse\n \t    result = build_function_type (type,\n \t\t\t\t\t  arg_types);\n+\n+\tif (TYPE_RAISES_EXCEPTIONS (t))\n+\t  result = build_exception_variant (result,\n+\t\t\t\t\t    TYPE_RAISES_EXCEPTIONS (t));\n       }\n       break;\n     default:\n@@ -1058,6 +1062,8 @@ strip_typedefs (tree t)\n \n   if (!result)\n       result = TYPE_MAIN_VARIANT (t);\n+  if (TYPE_ATTRIBUTES (t))\n+    result = cp_build_type_attribute_variant (result, TYPE_ATTRIBUTES (t));\n   return cp_build_qualified_type (result, cp_type_quals (t));\n }\n \n@@ -2609,7 +2615,8 @@ cp_build_type_attribute_variant (tree type, tree attributes)\n   tree new_type;\n \n   new_type = build_type_attribute_variant (type, attributes);\n-  if (TREE_CODE (new_type) == FUNCTION_TYPE\n+  if ((TREE_CODE (new_type) == FUNCTION_TYPE\n+       || TREE_CODE (new_type) == METHOD_TYPE)\n       && (TYPE_RAISES_EXCEPTIONS (new_type)\n \t  != TYPE_RAISES_EXCEPTIONS (type)))\n     new_type = build_exception_variant (new_type,"}, {"sha": "be66e312bf1f7d7d721b0b10e4dda5566956721d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -1,3 +1,8 @@\n+2009-11-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/9381\n+\t* g++.dg/abi/regparm1.C: New.\n+\n 2009-11-06  Basile Starynkevitch  <basile@starynkevitch.net>\n \n \t* g++.dg/plugin/pragma_plugin-test-1.C: new testcase for"}, {"sha": "a83c4777850117f54332deb969d5f95bf333709b", "filename": "gcc/testsuite/g++.dg/abi/regparm1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fregparm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3905fc17fbaad4a0a3753fb166161154119e0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fregparm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fregparm1.C?ref=3c3905fc17fbaad4a0a3753fb166161154119e0b", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/29911 (9381)\n+// { dg-options -std=c++0x }\n+// { dg-do run { target i?86-*-* x86_64-*-* } }\n+\n+extern \"C\" int printf(const char *, ...);\n+\n+void *save_this;\n+int *save_addr1, *save_addr2;\n+\n+struct Base\n+{\n+  __attribute((regparm(3))) void\n+  set(int *addr1, int *addr2)\n+  {\n+    if (this != save_this)\n+      printf(\"error! this == %p, should be %p\\n\", this, save_this);\n+    if (addr1 != save_addr1)\n+      printf(\"error! addr1 == %p, should be %p\\n\", addr1, save_addr1);\n+    if (addr2 != save_addr2)\n+      printf(\"error! addr2 == %p, should be %p\\n\", addr2, save_addr1);\n+  }\n+};\n+\n+int main()\n+{\n+  void (__attribute((regparm(3))) Base::* pfm)(int *, int *) = &Base::set;\n+  __typeof (&Base::set) pfm2 = &Base::set;\n+  decltype (&Base::set) pfm3 = &Base::set;\n+  auto pfm4 = &Base::set;\n+\n+  Base obj; save_this = &obj;\n+  int x, y; save_addr1 = &x; save_addr2 = &y;\n+\n+  (obj.* pfm) (&x, &y);\n+  (obj.* pfm2) (&x, &y);\n+  (obj.* pfm3) (&x, &y);\n+  (obj.* pfm4) (&x, &y);\n+\n+  return 0;\n+}"}]}