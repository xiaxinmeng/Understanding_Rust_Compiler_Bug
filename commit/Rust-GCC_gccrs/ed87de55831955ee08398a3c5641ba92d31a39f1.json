{"sha": "ed87de55831955ee08398a3c5641ba92d31a39f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4N2RlNTU4MzE5NTVlZTA4Mzk4YTNjNTY0MWJhOTJkMzFhMzlmMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-03-24T12:19:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-03-24T12:19:56Z"}, "message": "re PR middle-end/70370 (ICE in execute_todo, at passes.c:2003 when using __real__ or __imag__ as lvalue in asm)\n\n2016-03-24  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/70370\n\t* gimplify.c (gimplify_asm_expr): Handle !allows_mem outputs\n\twith register bases.\n\n\t* gcc.dg/torture/pr70370.c: New testcase.\n\nFrom-SVN: r234453", "tree": {"sha": "b905e18c16436656a0109ffc550c078d5d5e84df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b905e18c16436656a0109ffc550c078d5d5e84df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed87de55831955ee08398a3c5641ba92d31a39f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed87de55831955ee08398a3c5641ba92d31a39f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed87de55831955ee08398a3c5641ba92d31a39f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed87de55831955ee08398a3c5641ba92d31a39f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea064934b695dfdb57b9f339eb1f6357d3eae83a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea064934b695dfdb57b9f339eb1f6357d3eae83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea064934b695dfdb57b9f339eb1f6357d3eae83a"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "a4ade25c6ca17d983a168fe04dff70075b3a4a5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed87de55831955ee08398a3c5641ba92d31a39f1", "patch": "@@ -1,3 +1,9 @@\n+2016-03-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70370\n+\t* gimplify.c (gimplify_asm_expr): Handle !allows_mem outputs\n+\twith register bases.\n+\n 2016-03-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/70372"}, {"sha": "b9757db4c893f64c5766662daf19439b2c9b5cdc", "filename": "gcc/gimplify.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ed87de55831955ee08398a3c5641ba92d31a39f1", "patch": "@@ -5191,6 +5191,32 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  ret = tret;\n \t}\n \n+      /* If the constraint does not allow memory make sure we gimplify\n+         it to a register if it is not already but its base is.  This\n+\t happens for complex and vector components.  */\n+      if (!allows_mem)\n+\t{\n+\t  tree op = TREE_VALUE (link);\n+\t  if (! is_gimple_val (op)\n+\t      && is_gimple_reg_type (TREE_TYPE (op))\n+\t      && is_gimple_reg (get_base_address (op)))\n+\t    {\n+\t      tree tem = create_tmp_reg (TREE_TYPE (op));\n+\t      tree ass;\n+\t      if (is_inout)\n+\t\t{\n+\t\t  ass = build2 (MODIFY_EXPR, TREE_TYPE (tem),\n+\t\t\t\ttem, unshare_expr (op));\n+\t\t  gimplify_and_add (ass, pre_p);\n+\t\t}\n+\t      ass = build2 (MODIFY_EXPR, TREE_TYPE (tem), op, tem);\n+\t      gimplify_and_add (ass, post_p);\n+\n+\t      TREE_VALUE (link) = tem;\n+\t      tret = GS_OK;\n+\t    }\n+\t}\n+\n       vec_safe_push (outputs, link);\n       TREE_CHAIN (link) = NULL_TREE;\n "}, {"sha": "73cb726f644fe37968324ecc4b027ad8af4e6d8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed87de55831955ee08398a3c5641ba92d31a39f1", "patch": "@@ -1,3 +1,8 @@\n+2016-03-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70370\n+\t* gcc.dg/torture/pr70370.c: New testcase.\n+\n 2016-03-24  Tom de Vries  <tom@codesourcery.com>\n \n \t* gfortran.dg/goacc/data-tree.f95: Add missing initialization."}, {"sha": "d077bee3f0fc231a5891ccfec9069bbe87dd3dde", "filename": "gcc/testsuite/gcc.dg/torture/pr70370.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed87de55831955ee08398a3c5641ba92d31a39f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70370.c?ref=ed87de55831955ee08398a3c5641ba92d31a39f1", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+\n+_Complex float\n+test1 (_Complex float f)\n+{\n+  __asm__ (\"\" : \"+r\" (__real f));\n+  return f;\n+}\n+\n+_Complex float\n+test2 (_Complex float f)\n+{\n+  __asm__ (\"\" : \"=r\" (__real f));\n+  return f;\n+}\n+\n+struct X { int i; };\n+\n+struct X \n+test3 (struct X x)\n+{\n+  __asm__ (\"\" : \"=r\" (x.i));\n+  return x;\n+}\n+\n+struct X\n+test4 (struct X x)\n+{\n+  __asm__ (\"\" : \"+r\" (x.i));\n+  return x;\n+}\n+\n+struct X \n+test5 (struct X x)\n+{\n+  __asm__ (\"\" : \"=r\" (x));\n+  return x;\n+}\n+\n+struct X\n+test6 (struct X x)\n+{\n+  __asm__ (\"\" : \"+r\" (x));\n+  return x;\n+}"}]}