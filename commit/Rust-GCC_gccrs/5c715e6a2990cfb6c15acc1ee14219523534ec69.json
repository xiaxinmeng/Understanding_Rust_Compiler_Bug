{"sha": "5c715e6a2990cfb6c15acc1ee14219523534ec69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM3MTVlNmEyOTkwY2ZiNmMxNWFjYzFlZTE0MjE5NTIzNTM0ZWM2OQ==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-28T20:28:08Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-28T20:32:59Z"}, "message": "PR fortran/95373 - ICE in build_reference_type, at tree.c:7942\n\nThe use of KIND, LEN, RE, and IM inquiry references for applicable intrinsic\ntypes is valid only for suffienctly new Fortran standards.  Add appropriate\ncheck.\n\n2020-05-28  Harald Anlauf  <anlauf@gmx.de>\n\ngcc/fortran/\n\tPR fortran/95373\n\t* primary.c (is_inquiry_ref): Check validity of inquiry\n\treferences against selected Fortran standard.\n\ngcc/testsuite/\n\tPR fortran/95373\n\t* gfortran.dg/pr95373_1.f90: New test.\n\t* gfortran.dg/pr95373_2.f90: New test.", "tree": {"sha": "c9a5e2a6e742f4dab84fc91fab4600fc2c7ae539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9a5e2a6e742f4dab84fc91fab4600fc2c7ae539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c715e6a2990cfb6c15acc1ee14219523534ec69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c715e6a2990cfb6c15acc1ee14219523534ec69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c715e6a2990cfb6c15acc1ee14219523534ec69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c715e6a2990cfb6c15acc1ee14219523534ec69/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce3d791dfcba469e709935aba5743640f7d4959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce3d791dfcba469e709935aba5743640f7d4959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce3d791dfcba469e709935aba5743640f7d4959"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "67105cc9ab1f2d02a59a983a19b5072c71a00270", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c715e6a2990cfb6c15acc1ee14219523534ec69/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c715e6a2990cfb6c15acc1ee14219523534ec69/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=5c715e6a2990cfb6c15acc1ee14219523534ec69", "patch": "@@ -1998,6 +1998,28 @@ is_inquiry_ref (const char *name, gfc_ref **ref)\n   else\n     return false;\n \n+  switch (type)\n+    {\n+    case INQUIRY_RE:\n+    case INQUIRY_IM:\n+      if (!gfc_notify_std (GFC_STD_F2008, \"RE or IM part_ref at %C\"))\n+\treturn false;\n+      break;\n+\n+    case INQUIRY_KIND:\n+      if (!gfc_notify_std (GFC_STD_F2003, \"KIND part_ref at %C\"))\n+\treturn false;\n+      break;\n+\n+    case INQUIRY_LEN:\n+      if (!gfc_notify_std (GFC_STD_F2003, \"LEN part_ref at %C\"))\n+\treturn false;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n   if (ref)\n     {\n       *ref = gfc_get_ref ();"}, {"sha": "f39b6a723467c6475710c7ad02936901469f4b0a", "filename": "gcc/testsuite/gfortran.dg/pr95373_1.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c715e6a2990cfb6c15acc1ee14219523534ec69/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95373_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c715e6a2990cfb6c15acc1ee14219523534ec69/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95373_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95373_1.f90?ref=5c715e6a2990cfb6c15acc1ee14219523534ec69", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+! PR fortran/95373 - ICE in build_reference_type, at tree.c:7942\n+\n+subroutine s (x)\n+  complex, parameter :: z = 3\n+  real(z% kind)      :: x       ! { dg-error \"nonderived-type variable\" }\n+  type t\n+     real    :: kind\n+     logical :: re\n+  end type t\n+  type(t) :: b\n+  print *, b% kind, b% re\n+  print *, z% re                ! { dg-error \"nonderived-type variable\" }\n+end"}, {"sha": "2a654b43faad125fc59ca9980a86b806c4a66d3d", "filename": "gcc/testsuite/gfortran.dg/pr95373_2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c715e6a2990cfb6c15acc1ee14219523534ec69/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95373_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c715e6a2990cfb6c15acc1ee14219523534ec69/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95373_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95373_2.f90?ref=5c715e6a2990cfb6c15acc1ee14219523534ec69", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+! PR fortran/95373 - ICE in build_reference_type, at tree.c:7942\n+\n+subroutine s (x)\n+  complex, parameter :: z = 3\n+  real(z% kind)      :: x\n+  type t\n+     real    :: kind\n+     logical :: re\n+  end type t\n+  type(t) :: b\n+  print *, b% kind, b% re\n+  print *, z% re                ! { dg-error \"nonderived-type variable\" }\n+end"}]}