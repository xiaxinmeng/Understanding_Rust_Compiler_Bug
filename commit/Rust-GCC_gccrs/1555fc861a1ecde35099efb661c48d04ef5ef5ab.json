{"sha": "1555fc861a1ecde35099efb661c48d04ef5ef5ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1NWZjODYxYTFlY2RlMzUwOTllZmI2NjFjNDhkMDRlZjVlZjVhYg==", "commit": {"author": {"name": "David Billinghurst", "email": "David.Billinghurst@riotinto.com", "date": "2004-07-08T23:29:43Z"}, "committer": {"name": "David Billinghurst", "email": "billingd@gcc.gnu.org", "date": "2004-07-08T23:29:43Z"}, "message": "7388.f: Copy from g77.dg\n\n2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n\n\t* gfortran.dg/g77/7388.f: Copy from g77.dg\n\t* gfortran.dg/g77/f77-edit-i-out.f: Likewise\n\t* gfortran.dg/g77/f77-edit-apostrophe-out.f: Likewise\n\t* gfortran.dg/g77/f77-edit-slash-out.f: Likewise\n\t* gfortran.dg/g77/f77-edit-colon-out.f: Likewise\n\t* gfortran.dg/g77/f77-edit-t-out.f: Likewise\n\t* gfortran.dg/g77/f77-edit-h-out.f: Likewise\n\t* gfortran.dg/g77/strlen0.f: Likewise\n\nFrom-SVN: r84325", "tree": {"sha": "c725cc22732b31e9bc6983790e77216a50ec955a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c725cc22732b31e9bc6983790e77216a50ec955a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1555fc861a1ecde35099efb661c48d04ef5ef5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1555fc861a1ecde35099efb661c48d04ef5ef5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1555fc861a1ecde35099efb661c48d04ef5ef5ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1555fc861a1ecde35099efb661c48d04ef5ef5ab/comments", "author": null, "committer": null, "parents": [{"sha": "e726a6f67932dc804921195d1644fb15156c1eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e726a6f67932dc804921195d1644fb15156c1eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e726a6f67932dc804921195d1644fb15156c1eee"}], "stats": {"total": 209, "additions": 209, "deletions": 0}, "files": [{"sha": "642e0be4efd042c901a6d79017f947dd0097a35c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -1,3 +1,14 @@\n+2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n+\n+\t* gfortran.dg/g77/7388.f: Copy from g77.dg\n+\t* gfortran.dg/g77/f77-edit-i-out.f: Likewise\n+\t* gfortran.dg/g77/f77-edit-apostrophe-out.f: Likewise  \n+\t* gfortran.dg/g77/f77-edit-slash-out.f: Likewise\n+\t* gfortran.dg/g77/f77-edit-colon-out.f: Likewise\n+\t* gfortran.dg/g77/f77-edit-t-out.f: Likewise\n+\t* gfortran.dg/g77/f77-edit-h-out.f: Likewise\n+\t* gfortran.dg/g77/strlen0.f: Likewise\n+\n 2004-07-09   David Billinghurst (David.Billinghurst@riotinto.com)\n \n  \t* lib/gfortran-dg.exp: New file (adapted from lib/g77-dg.exp)"}, {"sha": "0b8374646b053258f68700638080247bb0bfb4cf", "filename": "gcc/testsuite/gfortran.dg/g77/7388.f", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F7388.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F7388.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F7388.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,12 @@\n+C { dg-do run }\n+C { dg-options \"-fbounds-check\" }\n+      character*25 buff(0:10)\n+      character*80 line\n+      integer i, m1, m2\n+      i  = 1\n+      m1 = 1\n+      m2 = 7\n+      buff(i) = 'tcase0a'\n+      write(line,*) buff(i)(m1:m2)\n+      if (line .ne. ' tcase0a') call abort\n+      end"}, {"sha": "aa51bc05c2580dac13ae2ae21ed0f9156e06d609", "filename": "gcc/testsuite/gfortran.dg/g77/f77-edit-apostrophe-out.f", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-apostrophe-out.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-apostrophe-out.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-apostrophe-out.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,21 @@\n+C Test Fortran 77 apostrophe edit descriptor \n+C      (ANSI X3.9-1978 Section 13.5.1)\n+C\n+C Origin: David Billinghurst <David.Billinghurst@riotinto.com>\n+C\n+C { dg-do run }\n+C { dg-output \"^\" }\n+ 10   format('abcde') \n+ 20   format('and an apostrophe -''-')\n+ 30   format('''a leading apostrophe')\n+ 40   format('a trailing apostrophe''')\n+ 50   format('''and all of the above -''-''')\n+\n+      write(*,10)        ! { dg-output \"abcde(\\n|\\r\\n|\\r)\" } \n+      write(*,20)        ! { dg-output \"and an apostrophe -'-(\\n|\\r\\n|\\r)\" }\n+      write(*,30)        ! { dg-output \"'a leading apostrophe(\\n|\\r\\n|\\r)\" }\n+      write(*,40)        ! { dg-output \"a trailing apostrophe'(\\n|\\r\\n|\\r)\" }\n+      write(*,50)        ! { dg-output \"'and all of the above -'-'(\\n|\\r\\n|\\r)\" }\n+\n+C { dg-output \"\\$\" }\n+      end"}, {"sha": "4feef755f5772aa827ce8a54e80e8ddbe0c062a5", "filename": "gcc/testsuite/gfortran.dg/g77/f77-edit-colon-out.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-colon-out.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-colon-out.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-colon-out.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,9 @@\n+C Test Fortran 77 colon edit descriptor \n+C      (ANSI X3.9-1978 Section 13.5.5)\n+C\n+C Origin: David Billinghurst <David.Billinghurst@riotinto.com>\n+C\n+C { dg-do run }\n+C { dg-output \"^123(\\n|\\r\\n|\\r)45(\\n|\\r\\n|\\r)\\$\" }\n+      write(*,'((3(I1:)))')  (I,I=1,5)\n+      end"}, {"sha": "78e6f017b7e5a22d1d39be4d3b646e6f707a4dc4", "filename": "gcc/testsuite/gfortran.dg/g77/f77-edit-h-out.f", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-h-out.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-h-out.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-h-out.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,14 @@\n+C Test Fortran 77 H edit descriptor\n+C      (ANSI X3.9-1978 Section 13.5.2)\n+C\n+C Origin: David Billinghurst <David.Billinghurst@riotinto.com>\n+C\n+C { dg-do run }\n+C { dg-output \"^\" }\n+ 10   format(1H1)\n+ 20   format(6H     6)\n+      write(*,10)        ! { dg-output \"1(\\n|\\r\\n|\\r)\" }\n+      write(*,20)        ! { dg-output \"     6(\\n|\\r\\n|\\r)\" }\n+      write(*,'(16H''apostrophe'' fun)') ! { dg-output \"'apostrophe' fun(\\n|\\r\\n|\\r)\" }\n+C { dg-output \"\\$\" }\n+      end"}, {"sha": "9887704c716febe304c49589a4416682a1cfdf09", "filename": "gcc/testsuite/gfortran.dg/g77/f77-edit-i-out.f", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-i-out.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-i-out.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-i-out.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,26 @@\n+C Test Fortran 77 I edit descriptor for output\n+C      (ANSI X3.9-1978 Section 13.5.9.1)\n+C\n+C Origin: David Billinghurst <David.Billinghurst@riotinto.com>\n+C\n+C { dg-do run }\n+C { dg-output \"^\" }\n+\n+      write(*,'(I1)')    1  ! { dg-output \"1(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I1)')   -1  ! { dg-output \"\\\\*(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I2)')    2  ! { dg-output \" 2(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I2)')   -2  ! { dg-output \"-2(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I3)')    3  ! { dg-output \"  3(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I3)')   -3  ! { dg-output \" -3(\\n|\\r\\n|\\r)\" }\n+\n+      write(*,'(I2.0)')  0  ! { dg-output \"  (\\n|\\r\\n|\\r)\" }\n+      write(*,'(I1.1)')  4  ! { dg-output \"4(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I1.1)') -4  ! { dg-output \"\\\\*(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I2.1)')  5  ! { dg-output \" 5(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I2.1)') -5  ! { dg-output \"-5(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I2.2)')  6  ! { dg-output \"06(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I2.2)') -6  ! { dg-output \"\\\\*\\\\*(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I3.2)')  7  ! { dg-output \" 07(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I3.2)') -7  ! { dg-output \"-07(\\n|\\r\\n|\\r)\" }\n+\n+      end"}, {"sha": "6cc9a8842d6216bd1754a0cdf04efa40ccfa66df", "filename": "gcc/testsuite/gfortran.dg/g77/f77-edit-slash-out.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-slash-out.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-slash-out.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-slash-out.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,9 @@\n+C Test Fortran 77 colon slash descriptor \n+C      (ANSI X3.9-1978 Section 13.5.4)\n+C\n+C Origin: David Billinghurst <David.Billinghurst@riotinto.com>\n+C\n+C { dg-do run }\n+C { dg-output \"^123(\\n|\\r\\n|\\r)45(\\n|\\r\\n|\\r)\\$\" }\n+      write(*,'(3(I1)/2(I1))')  (I,I=1,5)\n+      end"}, {"sha": "8e411888f2b04cd9f0ff96fc3b57736d16b89abc", "filename": "gcc/testsuite/gfortran.dg/g77/f77-edit-t-out.f", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-t-out.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-t-out.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff77-edit-t-out.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,12 @@\n+C Test Fortran 77 T edit descriptor \n+C      (ANSI X3.9-1978 Section 13.5.3.2)\n+C\n+C Origin: David Billinghurst <David.Billinghurst@riotinto.com>\n+C\n+C { dg-do run }\n+C ( dg-output \"^\" }\n+      write(*,'(I4,T8,I1)')     1234,8 ! { dg-output \"1234   8(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I4,TR3,I1)')    1234,8 ! { dg-output \"1234   8(\\n|\\r\\n|\\r)\" }\n+      write(*,'(I4,5X,TL2,I1)') 1234,8 ! { dg-output \"1234   8(\\n|\\r\\n|\\r)\" }\n+C ( dg-output \"\\$\" }\n+      end"}, {"sha": "765c8b61190c23862bbca4c9657284ead5322762", "filename": "gcc/testsuite/gfortran.dg/g77/strlen0.f", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fstrlen0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1555fc861a1ecde35099efb661c48d04ef5ef5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fstrlen0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fstrlen0.f?ref=1555fc861a1ecde35099efb661c48d04ef5ef5ab", "patch": "@@ -0,0 +1,95 @@\n+C     Substring range checking test program, to check behavior with respect\n+C     to X3J3/90.4 paragraph 5.7.1.\n+C\n+C     Patches relax substring checking for subscript expressions in order to\n+C     simplify coding (elimination of length checks for strings passed as\n+C     parameters) and to avoid contradictory behavior of subscripted substring\n+C     expressions with respect to unsubscripted string expressions.\n+C\n+C     Key part of 5.7.1 interpretation comes down to statement that in the\n+C     substring expression,\n+C        v ( e1 : e2 )\n+C     1 <= e1 <= e2 <= len to be valid, yet the expression\n+C        v ( : )\n+C     is equivalent to\n+C        v(1:len(v))\n+C\n+C     meaning that any statement that reads\n+C        str = v // 'tail'\n+C     (where v is a string passed as a parameter) would require coding as\n+C        if (len(v) .gt. 0) then\n+C           str = v // 'tail'\n+C        else\n+C           str = 'tail'\n+C        endif\n+C     to comply with the standard specification.  Under the stricter\n+C     interpretation, functions strcat and strlat would be incorrect as\n+C     written for null values of str1 and/or str2.\n+C\n+C     This code compiles and runs without error on\n+C       SunOS 4.1.3 f77 (-C option)\n+C       SUNWspro SPARCcompiler 4.2 f77 (-C option)\n+C       (and with proposed patches, gcc-2.9.2 -fbounds-check except for test 6,\n+C        which is a genuine, deliberate error - comment out to make further\n+C        tests)\n+C\n+C { dg-do run }\n+C { dg-options \"-fbounds-check\" }\n+C\n+C     G. Helffrich/Tokyo Inst. Technology Jul 24 2001\n+\n+      character str*8,strres*16,strfun*16,strcat*16,strlat*16\n+\n+      str='Hi there'\n+\n+C     Test 1 - (current+patched) two char substring result\n+      strres=strfun(str,1,2)\n+      write(*,*) 'strres is ',strres\n+\n+C     Test 2 - (current+patched) null string result\n+      strres=strfun(str,5,4)\n+      write(*,*) 'strres is ',strres\n+\n+C     Test 3 - (current+patched) null string result\n+      strres=strfun(str,8,7)\n+      write(*,*) 'strres is ',strres\n+\n+C     Test 4 - (current) error; (patched) null string result\n+      strres=strfun(str,9,8)\n+      write(*,*) 'strres is ',strres\n+\n+C     Test 5 - (current) error; (patched) null string result\n+      strres=strfun(str,1,0)\n+      write(*,*) 'strres is ',strres\n+\n+C     Test 6 - (current+patched) error\n+C     strres=strfun(str,20,20)\n+C     write(*,*) 'strres is ',strres\n+\n+C     Test 7 - (current+patched) str result\n+      strres=strcat(str,'')\n+      write(*,*) 'strres is ',strres\n+\n+C     Test 8 - (current) error; (patched) str result\n+      strres=strlat('',str)\n+      write(*,*) 'strres is ',strres\n+\n+      end\n+\n+      character*(*) function strfun(str,i,j)\n+      character str*(*)\n+\n+      strfun = str(i:j)\n+      end\n+\n+      character*(*) function strcat(str1,str2)\n+      character str1*(*), str2*(*)\n+\n+      strcat = str1 // str2\n+      end\n+\n+      character*(*) function strlat(str1,str2)\n+      character str1*(*), str2*(*)\n+\n+      strlat = str1(1:len(str1)) // str2(1:len(str2))\n+      end"}]}