{"sha": "a338ab5a5a0f6421a4ce6823451784de6b724424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMzOGFiNWE1YTBmNjQyMWE0Y2U2ODIzNDUxNzg0ZGU2YjcyNDQyNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-22T18:02:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-22T18:02:08Z"}, "message": "re PR tree-optimization/17512 (ICE in regex.c)\n\n\tPR tree-optimization/17512\n\t* convert.c (convert_to_integer): Don't handle TRUTH_*_EXPR as\n\tspecial cases.\n\n\t* testsuite/gcc.c-torture/compile/20040916-1.c.\n\nFrom-SVN: r87870", "tree": {"sha": "9b217f4e713dd67beaf547cca130461eff1ca273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b217f4e713dd67beaf547cca130461eff1ca273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a338ab5a5a0f6421a4ce6823451784de6b724424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a338ab5a5a0f6421a4ce6823451784de6b724424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a338ab5a5a0f6421a4ce6823451784de6b724424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a338ab5a5a0f6421a4ce6823451784de6b724424/comments", "author": null, "committer": null, "parents": [{"sha": "39cf49a1136b328c90d2ed6fdfb50269ae8c85ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39cf49a1136b328c90d2ed6fdfb50269ae8c85ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39cf49a1136b328c90d2ed6fdfb50269ae8c85ab"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "4ee9eda85e9e0f4c137c4028901d681c7109ede9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a338ab5a5a0f6421a4ce6823451784de6b724424", "patch": "@@ -1,3 +1,9 @@\n+2004-09-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/17512\n+\t* convert.c (convert_to_integer): Don't handle TRUTH_*_EXPR as\n+\tspecial cases.\n+\n 2004-09-22  David Edelsohn  <edelsohn@gnu.org>\n \n \t* dbxout.c (get_lang_number): Do not define if"}, {"sha": "005d3e2089b2c2c50e481025a1791678070919e2", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=a338ab5a5a0f6421a4ce6823451784de6b724424", "patch": "@@ -397,9 +397,7 @@ convert_to_integer (tree type, tree expr)\n     case BOOLEAN_TYPE:\n     case CHAR_TYPE:\n       /* If this is a logical operation, which just returns 0 or 1, we can\n-\t change the type of the expression.  For some logical operations,\n-\t we must also change the types of the operands to maintain type\n-\t correctness.  */\n+\t change the type of the expression.  */\n \n       if (TREE_CODE_CLASS (ex_form) == tcc_comparison)\n \t{\n@@ -408,25 +406,6 @@ convert_to_integer (tree type, tree expr)\n \t  return expr;\n \t}\n \n-      else if (ex_form == TRUTH_AND_EXPR || ex_form == TRUTH_ANDIF_EXPR\n-\t       || ex_form == TRUTH_OR_EXPR || ex_form == TRUTH_ORIF_EXPR\n-\t       || ex_form == TRUTH_XOR_EXPR)\n-\t{\n-\t  expr = copy_node (expr);\n-\t  TREE_OPERAND (expr, 0) = convert (type, TREE_OPERAND (expr, 0));\n-\t  TREE_OPERAND (expr, 1) = convert (type, TREE_OPERAND (expr, 1));\n-\t  TREE_TYPE (expr) = type;\n-\t  return expr;\n-\t}\n-\n-      else if (ex_form == TRUTH_NOT_EXPR)\n-\t{\n-\t  expr = copy_node (expr);\n-\t  TREE_OPERAND (expr, 0) = convert (type, TREE_OPERAND (expr, 0));\n-\t  TREE_TYPE (expr) = type;\n-\t  return expr;\n-\t}\n-\n       /* If we are widening the type, put in an explicit conversion.\n \t Similarly if we are not changing the width.  After this, we know\n \t we are truncating EXPR.  */"}, {"sha": "d6226d5f85d116acd3dfc0b44b8a82f9b83cd1fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a338ab5a5a0f6421a4ce6823451784de6b724424", "patch": "@@ -1,3 +1,8 @@\n+2004-09-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/17512\n+\t* gcc.c-torture/compile/20040916-1.c.\n+\n 2004-09-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/pragma-re-3.c: New test."}, {"sha": "1a6a9f47fe8f2d1418dc25cf639ccbe7888a087a", "filename": "gcc/testsuite/gcc.c-torture/compile/20040916-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040916-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a338ab5a5a0f6421a4ce6823451784de6b724424/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040916-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040916-1.c?ref=a338ab5a5a0f6421a4ce6823451784de6b724424", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/17512\n+\n+   We used to try to fold \"(char) (X ^ Y)\", where '^' is\n+   TRUTH_XOR_EXPR into ((char) X ^ (char) Y), creating TRUTH_XOR_EXPR\n+   with its operands being of type char, which is invalid.  */\n+\n+char\n+foo (int p)\n+{\n+  int q = p;\n+  return (p != 0) == (p == q);\n+}"}]}