{"sha": "dd3eed93e9e8da1604b38c895c718c90238cf2c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzZWVkOTNlOWU4ZGExNjA0YjM4Yzg5NWM3MThjOTAyMzhjZjJjNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T14:17:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T14:17:25Z"}, "message": "df-*.c: Use rtx_insn\n\ngcc/\n\t* df-core.c (df_bb_regno_first_def_find): Strengthen local \"insn\"\n\tfrom rtx to rtx_insn *.\n\t(df_bb_regno_last_def_find): Likewise.\n\n\t* df-problems.c (df_rd_bb_local_compute): Likewise.\n\t(df_lr_bb_local_compute): Likewise.\n\t(df_live_bb_local_compute): Likewise.\n\t(df_chain_remove_problem): Likewise.\n\t(df_chain_create_bb): Likewise.\n\t(df_word_lr_bb_local_compute): Likewise.\n\t(df_remove_dead_eq_notes): Likewise for param \"insn\".\n\t(df_note_bb_compute): Likewise for local \"insn\".\n\t(simulate_backwards_to_point): Likewise.\n\t(df_md_bb_local_compute): Likewise.\n\n\t* df-scan.c (df_scan_free_bb_info): Likewise.\n\t(df_scan_start_dump): Likewise.\n\t(df_scan_start_block): Likewise.\n\t(df_install_ref_incremental): Likewise for local \"insn\".\n\t(df_insn_rescan_all): Likewise.\n\t(df_reorganize_refs_by_reg_by_insn): Likewise.\n\t(df_reorganize_refs_by_insn_bb): Likewise.\n\t(df_recompute_luids): Likewise.\n\t(df_bb_refs_record): Likewise.\n\t(df_update_entry_exit_and_calls): Likewise.\n\t(df_bb_verify): Likewise.\n\nFrom-SVN: r214318", "tree": {"sha": "4b9a2316fbf53c53c4124f01301de3c5cc6d4b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b9a2316fbf53c53c4124f01301de3c5cc6d4b50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd3eed93e9e8da1604b38c895c718c90238cf2c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3eed93e9e8da1604b38c895c718c90238cf2c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3eed93e9e8da1604b38c895c718c90238cf2c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3eed93e9e8da1604b38c895c718c90238cf2c6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9774f20d040b8068d9f55e2df7e1d3d3c02f0819"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "f6f8d0d40479388681ed8ac5b1a357b08e7c6098", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd3eed93e9e8da1604b38c895c718c90238cf2c6", "patch": "@@ -1,3 +1,32 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* df-core.c (df_bb_regno_first_def_find): Strengthen local \"insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(df_bb_regno_last_def_find): Likewise.\n+\n+\t* df-problems.c (df_rd_bb_local_compute): Likewise.\n+\t(df_lr_bb_local_compute): Likewise.\n+\t(df_live_bb_local_compute): Likewise.\n+\t(df_chain_remove_problem): Likewise.\n+\t(df_chain_create_bb): Likewise.\n+\t(df_word_lr_bb_local_compute): Likewise.\n+\t(df_remove_dead_eq_notes): Likewise for param \"insn\".\n+\t(df_note_bb_compute): Likewise for local \"insn\".\n+\t(simulate_backwards_to_point): Likewise.\n+\t(df_md_bb_local_compute): Likewise.\n+\n+\t* df-scan.c (df_scan_free_bb_info): Likewise.\n+\t(df_scan_start_dump): Likewise.\n+\t(df_scan_start_block): Likewise.\n+\t(df_install_ref_incremental): Likewise for local \"insn\".\n+\t(df_insn_rescan_all): Likewise.\n+\t(df_reorganize_refs_by_reg_by_insn): Likewise.\n+\t(df_reorganize_refs_by_insn_bb): Likewise.\n+\t(df_recompute_luids): Likewise.\n+\t(df_bb_refs_record): Likewise.\n+\t(df_update_entry_exit_and_calls): Likewise.\n+\t(df_bb_verify): Likewise.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ddg.h (struct ddg_node): Strengthen fields \"insn\" and"}, {"sha": "5c5b1ae2784a27de1064a9106930e4e98e97f9d3", "filename": "gcc/df-core.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=dd3eed93e9e8da1604b38c895c718c90238cf2c6", "patch": "@@ -1943,7 +1943,7 @@ df_set_clean_cfg (void)\n df_ref\n df_bb_regno_first_def_find (basic_block bb, unsigned int regno)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   df_ref def;\n \n   FOR_BB_INSNS (bb, insn)\n@@ -1964,7 +1964,7 @@ df_bb_regno_first_def_find (basic_block bb, unsigned int regno)\n df_ref\n df_bb_regno_last_def_find (basic_block bb, unsigned int regno)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   df_ref def;\n \n   FOR_BB_INSNS_REVERSE (bb, insn)"}, {"sha": "65f9b4cb047db1176594934077e0ae3ff3fa709e", "filename": "gcc/df-problems.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=dd3eed93e9e8da1604b38c895c718c90238cf2c6", "patch": "@@ -348,7 +348,7 @@ df_rd_bb_local_compute (unsigned int bb_index)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_rd_bb_info *bb_info = df_rd_get_bb_info (bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n \n   bitmap_clear (&seen_in_block);\n   bitmap_clear (&seen_in_insn);\n@@ -828,7 +828,7 @@ df_lr_bb_local_compute (unsigned int bb_index)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_lr_bb_info *bb_info = df_lr_get_bb_info (bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n   df_ref def, use;\n \n   /* Process the registers set in an exception handler.  */\n@@ -1435,7 +1435,7 @@ df_live_bb_local_compute (unsigned int bb_index)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_live_bb_info *bb_info = df_live_get_bb_info (bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n   df_ref def;\n   int luid = 0;\n \n@@ -1951,7 +1951,7 @@ df_chain_remove_problem (void)\n \n   EXECUTE_IF_SET_IN_BITMAP (df_chain->out_of_date_transfer_functions, 0, bb_index, bi)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       df_ref def, use;\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \n@@ -2067,7 +2067,7 @@ df_chain_create_bb (unsigned int bb_index)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_rd_bb_info *bb_info = df_rd_get_bb_info (bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n   bitmap_head cpy;\n \n   bitmap_initialize (&cpy, &bitmap_default_obstack);\n@@ -2462,7 +2462,7 @@ df_word_lr_bb_local_compute (unsigned int bb_index)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_word_lr_bb_info *bb_info = df_word_lr_get_bb_info (bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n   df_ref def, use;\n \n   /* Ensure that artificial refs don't contain references to pseudos.  */\n@@ -2796,7 +2796,7 @@ df_remove_dead_and_unused_notes (rtx insn)\n    as the bitmap of currently live registers.  */\n \n static void\n-df_remove_dead_eq_notes (rtx insn, bitmap live)\n+df_remove_dead_eq_notes (rtx_insn *insn, bitmap live)\n {\n   rtx *pprev = &REG_NOTES (insn);\n   rtx link = *pprev;\n@@ -3063,7 +3063,7 @@ df_note_bb_compute (unsigned int bb_index,\n \t\t    bitmap live, bitmap do_not_gen, bitmap artificial_uses)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n   df_ref def, use;\n   struct dead_debug_local debug;\n \n@@ -3632,7 +3632,7 @@ find_memory_stores (rtx x, const_rtx pat ATTRIBUTE_UNUSED,\n void\n simulate_backwards_to_point (basic_block bb, regset live, rtx point)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   bitmap_copy (live, df_get_live_out (bb));\n   df_simulate_initialize_backwards (bb, live);\n \n@@ -4113,7 +4113,7 @@ df_md_bb_local_compute (unsigned int bb_index)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_md_bb_info *bb_info = df_md_get_bb_info (bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* Artificials are only hard regs.  */\n   if (!(df->changeable_flags & DF_NO_HARD_REGS))"}, {"sha": "a8539143da8b9591732cd8ba23093160b240d4f1", "filename": "gcc/df-scan.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3eed93e9e8da1604b38c895c718c90238cf2c6/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=dd3eed93e9e8da1604b38c895c718c90238cf2c6", "patch": "@@ -229,7 +229,7 @@ df_scan_free_bb_info (basic_block bb, void *vbb_info)\n {\n   struct df_scan_bb_info *bb_info = (struct df_scan_bb_info *) vbb_info;\n   unsigned int bb_index = bb->index;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   FOR_BB_INSNS (bb, insn)\n     if (INSN_P (insn))\n@@ -344,7 +344,7 @@ df_scan_start_dump (FILE *file ATTRIBUTE_UNUSED)\n   int icount = 0;\n   int ccount = 0;\n   basic_block bb;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   fprintf (file, \";;  invalidated by call \\t\");\n   df_print_regset (file, regs_invalidated_by_call_regset);\n@@ -423,7 +423,7 @@ df_scan_start_block (basic_block bb, FILE *file)\n     }\n #if 0\n   {\n-    rtx insn;\n+    rtx_insn *insn;\n     FOR_BB_INSNS (bb, insn)\n       if (INSN_P (insn))\n \tdf_insn_debug (insn, false, file);\n@@ -643,7 +643,7 @@ df_install_ref_incremental (df_ref ref)\n   df_ref *ref_ptr;\n   bool add_to_table;\n \n-  rtx insn = DF_REF_INSN (ref);\n+  rtx_insn *insn = DF_REF_INSN (ref);\n   basic_block bb = BLOCK_FOR_INSN (insn);\n \n   if (DF_REF_REG_DEF_P (ref))\n@@ -1210,7 +1210,7 @@ df_insn_rescan_all (void)\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       FOR_BB_INSNS (bb, insn)\n \t{\n \t  df_insn_rescan (insn);\n@@ -1431,7 +1431,7 @@ df_reorganize_refs_by_reg_by_insn (struct df_ref_info *ref_info,\n   EXECUTE_IF_SET_IN_BITMAP (df->blocks_to_analyze, 0, bb_index, bi)\n     {\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n-      rtx insn;\n+      rtx_insn *insn;\n       df_ref def, use;\n \n       if (include_defs)\n@@ -1485,7 +1485,7 @@ df_reorganize_refs_by_reg_by_insn (struct df_ref_info *ref_info,\n   EXECUTE_IF_SET_IN_BITMAP (df->blocks_to_analyze, 0, bb_index, bi)\n     {\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n-      rtx insn;\n+      rtx_insn *insn;\n       df_ref def, use;\n \n       if (include_defs)\n@@ -1611,7 +1611,7 @@ df_reorganize_refs_by_insn_bb (basic_block bb, unsigned int offset,\n \t\t\t       bool include_defs, bool include_uses,\n \t\t\t       bool include_eq_uses)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (include_defs)\n     offset = df_add_refs_to_table (offset, ref_info,\n@@ -3272,7 +3272,7 @@ df_insn_refs_collect (struct df_collection_rec *collection_rec,\n void\n df_recompute_luids (basic_block bb)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   int luid = 0;\n \n   df_grow_insn_info ();\n@@ -3366,7 +3366,7 @@ void\n df_bb_refs_record (int bb_index, bool scan_insns)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n   int luid = 0;\n \n   if (!df)\n@@ -3903,7 +3903,7 @@ df_update_entry_exit_and_calls (void)\n      in the set of registers clobbered across the call.  */\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       FOR_BB_INSNS (bb, insn)\n \t{\n \t  if (INSN_P (insn) && CALL_P (insn))\n@@ -4165,7 +4165,7 @@ df_insn_refs_verify (struct df_collection_rec *collection_rec,\n static bool\n df_bb_verify (basic_block bb)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   struct df_scan_bb_info *bb_info = df_scan_get_bb_info (bb->index);\n   struct df_collection_rec collection_rec;\n "}]}