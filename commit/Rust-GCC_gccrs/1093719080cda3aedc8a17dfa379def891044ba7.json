{"sha": "1093719080cda3aedc8a17dfa379def891044ba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5MzcxOTA4MGNkYTNhZWRjOGExN2RmYTM3OWRlZjg5MTA0NGJhNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-09-15T07:24:54Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-09-15T07:24:54Z"}, "message": "alpha.c (alpha_expand_prologue): If stack checking is enabled, probe up to frame_size + STACK_CHECK_PROTECT bytes.\n\n\t* config/alpha/alpha.c (alpha_expand_prologue): If stack checking\n\tis enabled, probe up to frame_size + STACK_CHECK_PROTECT bytes.\n\nFrom-SVN: r164298", "tree": {"sha": "7a7bbf6ea76010c32901f754bc2bb91ca3476895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a7bbf6ea76010c32901f754bc2bb91ca3476895"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1093719080cda3aedc8a17dfa379def891044ba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1093719080cda3aedc8a17dfa379def891044ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1093719080cda3aedc8a17dfa379def891044ba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1093719080cda3aedc8a17dfa379def891044ba7/comments", "author": null, "committer": null, "parents": [{"sha": "6c175675c07f0298cc936272b854a93aec562da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c175675c07f0298cc936272b854a93aec562da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c175675c07f0298cc936272b854a93aec562da7"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "5cfa7b47da3ba59041946ec73a5b82a4bf2010c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1093719080cda3aedc8a17dfa379def891044ba7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1093719080cda3aedc8a17dfa379def891044ba7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1093719080cda3aedc8a17dfa379def891044ba7", "patch": "@@ -1,3 +1,8 @@\n+2010-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/alpha/alpha.c (alpha_expand_prologue): If stack checking\n+\tis enabled, probe up to frame_size + STACK_CHECK_PROTECT bytes.\n+\n 2010-09-15  Olivier Hainque  <hainque@adacore.com>\n             Jose Ruiz  <ruiz@adacore.com>\n "}, {"sha": "aec33831c28164e29cda83193b714b2ce1fd72cb", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1093719080cda3aedc8a17dfa379def891044ba7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1093719080cda3aedc8a17dfa379def891044ba7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1093719080cda3aedc8a17dfa379def891044ba7", "patch": "@@ -7814,6 +7814,9 @@ alpha_expand_prologue (void)\n   HOST_WIDE_INT sa_size;\n   /* Complete stack size needed.  */\n   HOST_WIDE_INT frame_size;\n+  /* Probed stack size; it additionally includes the size of\n+     the \"reserve region\" if any.  */\n+  HOST_WIDE_INT probed_size;\n   /* Offset from base reg to register save area.  */\n   HOST_WIDE_INT reg_offset;\n   rtx sa_reg;\n@@ -7859,20 +7862,26 @@ alpha_expand_prologue (void)\n \n      Note that we are only allowed to adjust sp once in the prologue.  */\n \n-  if (frame_size <= 32768)\n+  probed_size = frame_size;\n+  if (flag_stack_check)\n+    probed_size += STACK_CHECK_PROTECT;\n+\n+  if (probed_size <= 32768)\n     {\n-      if (frame_size > 4096)\n+      if (probed_size > 4096)\n \t{\n \t  int probed;\n \n-\t  for (probed = 4096; probed < frame_size; probed += 8192)\n+\t  for (probed = 4096; probed < probed_size; probed += 8192)\n \t    emit_insn (gen_probe_stack (GEN_INT (TARGET_ABI_UNICOSMK\n \t\t\t\t\t\t ? -probed + 64\n \t\t\t\t\t\t : -probed)));\n \n-\t  /* We only have to do this probe if we aren't saving registers.  */\n-\t  if (sa_size == 0 && frame_size > probed - 4096)\n-\t    emit_insn (gen_probe_stack (GEN_INT (-frame_size)));\n+\t  /* We only have to do this probe if we aren't saving registers or\n+\t     if we are probing beyond the frame because of -fstack-check.  */\n+\t  if ((sa_size == 0 && probed_size > probed - 4096)\n+\t      || flag_stack_check)\n+\t    emit_insn (gen_probe_stack (GEN_INT (-probed_size)));\n \t}\n \n       if (frame_size != 0)\n@@ -7887,10 +7896,11 @@ alpha_expand_prologue (void)\n \t number of 8192 byte blocks to probe.  We then probe each block\n \t in the loop and then set SP to the proper location.  If the\n \t amount remaining is > 4096, we have to do one more probe if we\n-\t are not saving any registers.  */\n+\t are not saving any registers or if we are probing beyond the\n+\t frame because of -fstack-check.  */\n \n-      HOST_WIDE_INT blocks = (frame_size + 4096) / 8192;\n-      HOST_WIDE_INT leftover = frame_size + 4096 - blocks * 8192;\n+      HOST_WIDE_INT blocks = (probed_size + 4096) / 8192;\n+      HOST_WIDE_INT leftover = probed_size + 4096 - blocks * 8192;\n       rtx ptr = gen_rtx_REG (DImode, 22);\n       rtx count = gen_rtx_REG (DImode, 23);\n       rtx seq;\n@@ -7903,20 +7913,23 @@ alpha_expand_prologue (void)\n \t late in the compilation, generate the loop as a single insn.  */\n       emit_insn (gen_prologue_stack_probe_loop (count, ptr));\n \n-      if (leftover > 4096 && sa_size == 0)\n+      if ((leftover > 4096 && sa_size == 0) || flag_stack_check)\n \t{\n \t  rtx last = gen_rtx_MEM (DImode, plus_constant (ptr, -leftover));\n \t  MEM_VOLATILE_P (last) = 1;\n \t  emit_move_insn (last, const0_rtx);\n \t}\n \n-      if (TARGET_ABI_WINDOWS_NT)\n+      if (TARGET_ABI_WINDOWS_NT || flag_stack_check)\n \t{\n \t  /* For NT stack unwind (done by 'reverse execution'), it's\n \t     not OK to take the result of a loop, even though the value\n \t     is already in ptr, so we reload it via a single operation\n \t     and subtract it to sp.\n \n+\t     Same if -fstack-check is specified, because the probed stack\n+\t     size is not equal to the frame size.\n+\n \t     Yes, that's correct -- we have to reload the whole constant\n \t     into a temporary via ldah+lda then subtract from sp.  */\n "}]}