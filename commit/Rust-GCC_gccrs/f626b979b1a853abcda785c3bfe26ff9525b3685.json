{"sha": "f626b979b1a853abcda785c3bfe26ff9525b3685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyNmI5NzliMWE4NTNhYmNkYTc4NWMzYmZlMjZmZjk1MjViMzY4NQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-01-05T13:28:20Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-01-05T13:28:20Z"}, "message": "spu.c (emit_nop_for_insn): Set INSN_LOCATOR for newly inserted insns.\n\n\t* config/spu/spu.c (emit_nop_for_insn): Set INSN_LOCATOR for\n\tnewly inserted insns.\n\t(pad_bb): Likewise.\n\t(spu_emit_branch_hint): Likewise.\n\t(insert_hbrp_for_ilb_runout): Likewise.\n\t(spu_machine_dependent_reorg): Call df_finish_pass after\n\tschedule_insns returns.\n\nFrom-SVN: r168510", "tree": {"sha": "61d63060b706dd87db186776caf99ec4a773e2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d63060b706dd87db186776caf99ec4a773e2ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f626b979b1a853abcda785c3bfe26ff9525b3685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f626b979b1a853abcda785c3bfe26ff9525b3685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f626b979b1a853abcda785c3bfe26ff9525b3685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f626b979b1a853abcda785c3bfe26ff9525b3685/comments", "author": null, "committer": null, "parents": [{"sha": "4c825c024007b313832669a38a803200df525fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c825c024007b313832669a38a803200df525fa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c825c024007b313832669a38a803200df525fa6"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "14397ef9b61a7ba6982c80f350de63aae3cc189f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f626b979b1a853abcda785c3bfe26ff9525b3685/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f626b979b1a853abcda785c3bfe26ff9525b3685/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f626b979b1a853abcda785c3bfe26ff9525b3685", "patch": "@@ -1,3 +1,13 @@\n+2011-01-05  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu.c (emit_nop_for_insn): Set INSN_LOCATOR for\n+\tnewly inserted insns.\n+\t(pad_bb): Likewise.\n+\t(spu_emit_branch_hint): Likewise.\n+\t(insert_hbrp_for_ilb_runout): Likewise.\n+\t(spu_machine_dependent_reorg): Call df_finish_pass after\n+\tschedule_insns returns.\n+\n 2011-01-05  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.c (spu_expand_prologue): Support -fstack-usage."}, {"sha": "8e31655f1d30abbfafb611acca13372a2fa7220a", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f626b979b1a853abcda785c3bfe26ff9525b3685/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f626b979b1a853abcda785c3bfe26ff9525b3685/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=f626b979b1a853abcda785c3bfe26ff9525b3685", "patch": "@@ -2266,6 +2266,7 @@ emit_nop_for_insn (rtx insn)\n   else\n     new_insn = emit_insn_after (gen_lnop (), insn);\n   recog_memoized (new_insn);\n+  INSN_LOCATOR (new_insn) = INSN_LOCATOR (insn);\n }\n \n /* Insert nops in basic blocks to meet dual issue alignment\n@@ -2304,6 +2305,7 @@ pad_bb(void)\n \t\t  prev_insn = emit_insn_before (gen_lnop (), insn);\n \t\t  PUT_MODE (prev_insn, GET_MODE (insn));\n \t\t  PUT_MODE (insn, TImode);\n+\t\t  INSN_LOCATOR (prev_insn) = INSN_LOCATOR (insn);\n \t\t  length += 4;\n \t\t}\n \t    }\n@@ -2372,6 +2374,7 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n \n   hint = emit_insn_before (gen_hbr (branch_label, target), before);\n   recog_memoized (hint);\n+  INSN_LOCATOR (hint) = INSN_LOCATOR (branch);\n   HINTED_P (branch) = 1;\n \n   if (GET_CODE (target) == LABEL_REF)\n@@ -2392,7 +2395,9 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n     {\n       /* Make sure the hint isn't scheduled any earlier than this point,\n          which could make it too far for the branch offest to fit */\n-      recog_memoized (emit_insn_before (gen_blockage (), hint));\n+      insn = emit_insn_before (gen_blockage (), hint);\n+      recog_memoized (insn);\n+      INSN_LOCATOR (insn) = INSN_LOCATOR (hint);\n     }\n   else if (distance <= 8 * 4)\n     {\n@@ -2404,14 +2409,21 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n \t  insn =\n \t    emit_insn_after (gen_nopn_nv (gen_rtx_REG (SImode, 127)), hint);\n \t  recog_memoized (insn);\n+\t  INSN_LOCATOR (insn) = INSN_LOCATOR (hint);\n \t}\n \n       /* Make sure any nops inserted aren't scheduled before the hint. */\n-      recog_memoized (emit_insn_after (gen_blockage (), hint));\n+      insn = emit_insn_after (gen_blockage (), hint);\n+      recog_memoized (insn);\n+      INSN_LOCATOR (insn) = INSN_LOCATOR (hint);\n \n       /* Make sure any nops inserted aren't scheduled after the call. */\n       if (CALL_P (branch) && distance < 8 * 4)\n-\trecog_memoized (emit_insn_before (gen_blockage (), branch));\n+\t{\n+\t  insn = emit_insn_before (gen_blockage (), branch);\n+\t  recog_memoized (insn);\n+\t  INSN_LOCATOR (insn) = INSN_LOCATOR (branch);\n+\t}\n     }\n }\n \n@@ -2596,6 +2608,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\tinsn =\n \t\t  emit_insn_before (gen_iprefetch (GEN_INT (1)), before_4);\n \t\trecog_memoized (insn);\n+\t\tINSN_LOCATOR (insn) = INSN_LOCATOR (before_4);\n \t\tINSN_ADDRESSES_NEW (insn,\n \t\t\t\t    INSN_ADDRESSES (INSN_UID (before_4)));\n \t\tPUT_MODE (insn, GET_MODE (before_4));\n@@ -2604,6 +2617,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\t  {\n \t\t    insn = emit_insn_before (gen_lnop (), before_4);\n \t\t    recog_memoized (insn);\n+\t\t    INSN_LOCATOR (insn) = INSN_LOCATOR (before_4);\n \t\t    INSN_ADDRESSES_NEW (insn,\n \t\t\t\t\tINSN_ADDRESSES (INSN_UID (before_4)));\n \t\t    PUT_MODE (insn, TImode);\n@@ -2615,6 +2629,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\tinsn =\n \t\t  emit_insn_before (gen_iprefetch (GEN_INT (2)), before_16);\n \t\trecog_memoized (insn);\n+\t\tINSN_LOCATOR (insn) = INSN_LOCATOR (before_16);\n \t\tINSN_ADDRESSES_NEW (insn,\n \t\t\t\t    INSN_ADDRESSES (INSN_UID (before_16)));\n \t\tPUT_MODE (insn, GET_MODE (before_16));\n@@ -2623,6 +2638,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\t  {\n \t\t    insn = emit_insn_before (gen_lnop (), before_16);\n \t\t    recog_memoized (insn);\n+\t\t    INSN_LOCATOR (insn) = INSN_LOCATOR (before_16);\n \t\t    INSN_ADDRESSES_NEW (insn,\n \t\t\t\t\tINSN_ADDRESSES (INSN_UID\n \t\t\t\t\t\t\t(before_16)));\n@@ -2865,6 +2881,7 @@ spu_machine_dependent_reorg (void)\n \n   /* The hints need to be scheduled, so call it again. */\n   schedule_insns ();\n+  df_finish_pass (true);\n \n   insert_hbrp ();\n "}]}