{"sha": "22564ca91644d357ff2f08e1238abf142c45a807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1NjRjYTkxNjQ0ZDM1N2ZmMmYwOGUxMjM4YWJmMTQyYzQ1YTgwNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-01-21T11:10:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-01-21T11:10:00Z"}, "message": "sem_eval.adb (Compile_Time_Compare): Reinstate the expr+literal (etc) optimizations when...\n\n\t* sem_eval.adb (Compile_Time_Compare): Reinstate the expr+literal (etc)\n\toptimizations when the type is modular and the offsets are equal.\n\nFrom-SVN: r244745", "tree": {"sha": "e7cfdc9eb13bfe8b6dcd07c62aa6303563ed703d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7cfdc9eb13bfe8b6dcd07c62aa6303563ed703d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22564ca91644d357ff2f08e1238abf142c45a807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22564ca91644d357ff2f08e1238abf142c45a807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22564ca91644d357ff2f08e1238abf142c45a807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22564ca91644d357ff2f08e1238abf142c45a807/comments", "author": null, "committer": null, "parents": [{"sha": "51f03c6b11a46d756ae05c67e34cca2ccb4fafaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f03c6b11a46d756ae05c67e34cca2ccb4fafaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f03c6b11a46d756ae05c67e34cca2ccb4fafaa"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "71927a618bd43ea9457c5db209f4ed9bcd5688b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22564ca91644d357ff2f08e1238abf142c45a807/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22564ca91644d357ff2f08e1238abf142c45a807/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22564ca91644d357ff2f08e1238abf142c45a807", "patch": "@@ -1,3 +1,8 @@\n+2017-01-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.adb (Compile_Time_Compare): Reinstate the expr+literal (etc)\n+\toptimizations when the type is modular and the offsets are equal.\n+\n 2017-01-20  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_warn.adb (Warn_On_Useless_Assignment): Adjust wording of warning"}, {"sha": "0d135cf3d60a388b9db795fc15a2d7f24d41780c", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22564ca91644d357ff2f08e1238abf142c45a807/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22564ca91644d357ff2f08e1238abf142c45a807/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=22564ca91644d357ff2f08e1238abf142c45a807", "patch": "@@ -1329,35 +1329,38 @@ package body Sem_Eval is\n          --  J .. J + 1. This code can conclude LT with a difference of 1,\n          --  even if the range of J is not known.\n \n-         --  This would be wrong for modular types (e.g. X < X + 1 is False if\n-         --  X is the largest number).\n+         declare\n+            Lnode : Node_Id;\n+            Loffs : Uint;\n+            Rnode : Node_Id;\n+            Roffs : Uint;\n \n-         if not Is_Modular_Integer_Type (Ltyp)\n-           and then not Is_Modular_Integer_Type (Rtyp)\n-         then\n-            declare\n-               Lnode : Node_Id;\n-               Loffs : Uint;\n-               Rnode : Node_Id;\n-               Roffs : Uint;\n+         begin\n+            Compare_Decompose (L, Lnode, Loffs);\n+            Compare_Decompose (R, Rnode, Roffs);\n \n-            begin\n-               Compare_Decompose (L, Lnode, Loffs);\n-               Compare_Decompose (R, Rnode, Roffs);\n+            if Is_Same_Value (Lnode, Rnode) then\n+               if Loffs = Roffs then\n+                  return EQ;\n+               end if;\n \n-               if Is_Same_Value (Lnode, Rnode) then\n-                  if Loffs = Roffs then\n-                     return EQ;\n-                  elsif Loffs < Roffs then\n+               --  When the offsets are not equal, we can go farther only if\n+               --  the types are not modular (e.g. X < X + 1 is False if X is\n+               --  the largest number).\n+\n+               if not Is_Modular_Integer_Type (Ltyp)\n+                 and then not Is_Modular_Integer_Type (Rtyp)\n+               then\n+                  if Loffs < Roffs then\n                      Diff.all := Roffs - Loffs;\n                      return LT;\n                   else\n                      Diff.all := Loffs - Roffs;\n                      return GT;\n                   end if;\n                end if;\n-            end;\n-         end if;\n+            end if;\n+         end;\n \n          --  Next, try range analysis and see if operand ranges are disjoint\n "}]}