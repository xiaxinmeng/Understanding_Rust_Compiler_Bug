{"sha": "eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlYWY3MTk5YTEwYjYxYzE4ODc4NWU3YTg2Y2QzY2RlY2JhMDdjMw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-11-21T14:10:11Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-11-21T14:10:11Z"}, "message": "re PR tree-optimization/78413 (ICE in single_pred_edge, at basic-block.h:361)\n\n[gcc]\n\n2016-11-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/78413\n\t* tree-if-conv.c (versionable_outer_loop_p): Require that both\n\tinner and outer loop latches have single predecessors.\n\n[gcc/testsuite]\n\n2016-11-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/78413\n\t* gcc.dg/tree-ssa/pr78413.c: New test.\n\nFrom-SVN: r242661", "tree": {"sha": "46c5cc1f63ccd0f4d4fcab3d29aee80683832ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46c5cc1f63ccd0f4d4fcab3d29aee80683832ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0706cfb3313ea4af04f8de91127f14bac4cbf65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0706cfb3313ea4af04f8de91127f14bac4cbf65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0706cfb3313ea4af04f8de91127f14bac4cbf65"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "9fbecbd167a03b1ec413d87967302077fae1263c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "patch": "@@ -1,3 +1,9 @@\n+2016-11-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/78413\n+\t* tree-if-conv.c (versionable_outer_loop_p): Require that both\n+\tinner and outer loop latches have single predecessors.\n+\n 2016-11-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/78093"}, {"sha": "379c4f0490a28e7d24b9d5e19d215897756d3454", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "patch": "@@ -1,3 +1,8 @@\n+2016-11-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/78413\n+\t* gcc.dg/tree-ssa/pr78413.c: New test.\n+\n 2016-11-21  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/empty_fiq_handler.c: Skip if -mthumb is passed in and"}, {"sha": "049ecd79d4c0ba7b1de9dee1087395240128ec81", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr78413.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78413.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78413.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78413.c?ref=eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "patch": "@@ -0,0 +1,35 @@\n+/* PR78413.  These previously failed in tree if-conversion due to a loop\n+   latch with multiple predecessors that the code did not anticipate.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ffast-math -fno-strict-aliasing\" } */\n+\n+extern long long int llrint(double x);\n+int a;\n+double b;\n+__attribute__((cold)) void decode_init() {\n+  int c, d = 0;\n+  for (; d < 12; d++) {\n+    if (d)\n+      b = 0;\n+    c = 0;\n+    for (; c < 6; c++)\n+      a = b ? llrint(b) : 0;\n+  }\n+}\n+\n+struct S {\n+  _Bool bo;\n+};\n+int a, bb, c, d;\n+void fn1() {\n+  do\n+    do\n+      do {\n+\tstruct S *e = (struct S *)1;\n+\tdo\n+\t  bb = a / (e->bo ? 2 : 1);\n+\twhile (bb);\n+      } while (0);\n+    while (d);\n+  while (c);\n+}"}, {"sha": "dc43d950cf11fa94aa05ba9a567e248c5e10b959", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeaf7199a10b61c188785e7a86cd3cdecba07c3/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "patch": "@@ -2575,6 +2575,8 @@ version_loop_for_if_conversion (struct loop *loop)\n     - The loop has a single exit.\n     - The loop header has a single successor, which is the inner\n       loop header.\n+    - Each of the inner and outer loop latches have a single\n+      predecessor.\n     - The loop exit block has a single predecessor, which is the\n       inner loop's exit block.  */\n \n@@ -2586,7 +2588,9 @@ versionable_outer_loop_p (struct loop *loop)\n       || loop->inner->next\n       || !single_exit (loop)\n       || !single_succ_p (loop->header)\n-      || single_succ (loop->header) != loop->inner->header)\n+      || single_succ (loop->header) != loop->inner->header\n+      || !single_pred_p (loop->latch)\n+      || !single_pred_p (loop->inner->latch))\n     return false;\n   \n   basic_block outer_exit = single_pred (loop->latch);"}]}