{"sha": "7e1792c953ec544e4bc0182b50026b41720fce2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxNzkyYzk1M2VjNTQ0ZTRiYzAxODJiNTAwMjZiNDE3MjBmY2UyZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-12T10:08:04Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-12T10:08:04Z"}, "message": "Include new generated gcc/params.opt file.\n\n2019-11-12  Martin Liska  <mliska@suse.cz>\n\n\t* Makefile.in: Include params.opt.\n\t* flag-types.h (enum parloops_schedule_type): Add\n\tparloops_schedule_type used in params.opt.\n\t* params.opt: New file.\n\nFrom-SVN: r278084", "tree": {"sha": "055884aa31fd33c957e0c05340b6bb1161948c75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/055884aa31fd33c957e0c05340b6bb1161948c75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e1792c953ec544e4bc0182b50026b41720fce2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1792c953ec544e4bc0182b50026b41720fce2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1792c953ec544e4bc0182b50026b41720fce2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1792c953ec544e4bc0182b50026b41720fce2e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76c26af90ea3af7487e701e451a4591a81727e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c26af90ea3af7487e701e451a4591a81727e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c26af90ea3af7487e701e451a4591a81727e8a"}], "stats": {"total": 991, "additions": 990, "deletions": 1}, "files": [{"sha": "d4de69a271f85d5ff3e05f2f2caba8a7ae67233a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e1792c953ec544e4bc0182b50026b41720fce2e", "patch": "@@ -1,3 +1,10 @@\n+2019-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Include params.opt.\n+\t* flag-types.h (enum parloops_schedule_type): Add\n+\tparloops_schedule_type used in params.opt.\n+\t* params.opt: New file.\n+\n 2019-11-12  Martin Liska  <mliska@suse.cz>\n \n \t* common.opt: Remove --param and --param= options."}, {"sha": "ff9a2841d52038aec67e7667cf1b4d568c811e38", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7e1792c953ec544e4bc0182b50026b41720fce2e", "patch": "@@ -567,7 +567,7 @@ xm_include_list=@xm_include_list@\n xm_defines=@xm_defines@\n lang_checks=\n lang_checks_parallelized=\n-lang_opt_files=@lang_opt_files@ $(srcdir)/c-family/c.opt $(srcdir)/common.opt\n+lang_opt_files=@lang_opt_files@ $(srcdir)/c-family/c.opt $(srcdir)/common.opt $(srcdir)/params.opt\n lang_specs_files=@lang_specs_files@\n lang_tree_files=@lang_tree_files@\n target_cpu_default=@target_cpu_default@"}, {"sha": "0c23aadefed3d41797586763d4732a46fba0418e", "filename": "gcc/flag-types.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=7e1792c953ec544e4bc0182b50026b41720fce2e", "patch": "@@ -370,4 +370,15 @@ enum cf_protection_level\n   CF_FULL = CF_BRANCH | CF_RETURN,\n   CF_SET = 1 << 2\n };\n+\n+/* Parloops schedule type.  */\n+enum parloops_schedule_type\n+{\n+  PARLOOPS_SCHEDULE_STATIC = 0,\n+  PARLOOPS_SCHEDULE_DYNAMIC,\n+  PARLOOPS_SCHEDULE_GUIDED,\n+  PARLOOPS_SCHEDULE_AUTO,\n+  PARLOOPS_SCHEDULE_RUNTIME\n+};\n+\n #endif /* ! GCC_FLAG_TYPES_H */"}, {"sha": "be0a3a15598356e52d567dcf56eb499610d2327c", "filename": "gcc/params.opt", "status": "added", "additions": 971, "deletions": 0, "changes": 971, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1792c953ec544e4bc0182b50026b41720fce2e/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=7e1792c953ec544e4bc0182b50026b41720fce2e", "patch": "@@ -0,0 +1,971 @@\n+; Parameter options of the compiler.\n+\n+; Copyright (C) 2019 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+; See the GCC internals manual (options.texi) for a description of this file's format.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+-param=align-loop-iterations=\n+Common Joined UInteger Var(param_align_loop_iterations) Init(4) Param\n+Loops iterating at least selected number of iterations will get loop alignment.\n+\n+-param=align-threshold=\n+Common Joined UInteger Var(param_align_threshold) Init(100) IntegerRange(1, 65536) Param\n+Select fraction of the maximal frequency of executions of basic block in function given basic block get alignment.\n+\n+-param=asan-globals=\n+Common Joined UInteger Var(param_asan_globals) Init(1) IntegerRange(0, 1) Param\n+Enable asan globals protection.\n+\n+-param=asan-instrument-allocas=\n+Common Joined UInteger Var(param_asan_protect_allocas) Init(1) IntegerRange(0, 1) Param\n+Enable asan allocas/VLAs protection.\n+\n+-param=asan-instrument-reads=\n+Common Joined UInteger Var(param_asan_instrument_reads) Init(1) IntegerRange(0, 1) Param\n+Enable asan load operations protection.\n+\n+-param=asan-instrument-writes=\n+Common Joined UInteger Var(param_asan_instrument_writes) Init(1) IntegerRange(0, 1) Param\n+Enable asan store operations protection.\n+\n+-param=asan-instrumentation-with-call-threshold=\n+Common Joined UInteger Var(param_asan_instrumentation_with_call_threshold) Init(7000) Param\n+Use callbacks instead of inline code if number of accesses in function becomes greater or equal to this number.\n+\n+-param=asan-memintrin=\n+Common Joined UInteger Var(param_asan_memintrin) Init(1) IntegerRange(0, 1) Param\n+Enable asan builtin functions protection.\n+\n+-param=asan-stack=\n+Common Joined UInteger Var(param_asan_stack) Init(1) IntegerRange(0, 1) Param\n+Enable asan stack protection.\n+\n+-param=asan-use-after-return=\n+Common Joined UInteger Var(param_asan_use_after_return) Init(1) IntegerRange(0, 1) Param\n+Enable asan detection of use-after-return bugs.\n+\n+-param=avg-loop-niter=\n+Common Joined UInteger Var(param_avg_loop_niter) Init(10) IntegerRange(1, 65536) Param\n+Average number of iterations of a loop.\n+\n+-param=avoid-fma-max-bits=\n+Common Joined UInteger Var(param_avoid_fma_max_bits) IntegerRange(0, 512) Param\n+Maximum number of bits for which we avoid creating FMAs.\n+\n+-param=builtin-expect-probability=\n+Common Joined UInteger Var(param_builtin_expect_probability) Init(90) IntegerRange(0, 100) Param\n+Set the estimated probability in percentage for builtin expect. The default value is 90% probability.\n+\n+-param=builtin-string-cmp-inline-length=\n+Common Joined UInteger Var(param_builtin_string_cmp_inline_length) Init(3) IntegerRange(0, 100) Param\n+The maximum length of a constant string for a builtin string cmp call eligible for inlining. The default value is 3.\n+\n+-param=case-values-threshold=\n+Common Joined UInteger Var(param_case_values_threshold) Param\n+The smallest number of different values for which it is best to use a jump-table instead of a tree of conditional branches, if 0, use the default for the machine.\n+\n+-param=comdat-sharing-probability=\n+Common Joined UInteger Var(param_comdat_sharing_probability) Init(20) Param\n+Probability that COMDAT function will be shared with different compilation unit.\n+\n+-param=cxx-max-namespaces-for-diagnostic-help=\n+Common Joined UInteger Var(param_cxx_max_namespaces_for_diagnostic_help) Init(1000) Param\n+Maximum number of namespaces to search for alternatives when name lookup fails.\n+\n+-param=dse-max-alias-queries-per-store=\n+Common Joined UInteger Var(param_dse_max_alias_queries_per_store) Init(256) Param\n+Maximum number of queries into the alias oracle per store.\n+\n+-param=dse-max-object-size=\n+Common Joined UInteger Var(param_dse_max_object_size) Init(256) Param\n+Maximum size (in bytes) of objects tracked bytewise by dead store elimination.\n+\n+-param=early-inlining-insns=\n+Common Joined UInteger Var(param_early_inlining_insns) Init(14) Param\n+Maximal estimated growth of function body caused by early inlining of single call with -O3 and -Ofast.\n+\n+-param=early-inlining-insns-O2=\n+Common Joined UInteger Var(param_early_inlining_insns_o2) Init(6) Param\n+Maximal estimated growth of function body caused by early inlining of single call with -O1 and -O2.\n+\n+-param=fsm-maximum-phi-arguments=\n+Common Joined UInteger Var(param_fsm_maximum_phi_arguments) Init(100) IntegerRange(1, 999999) Param\n+Maximum number of arguments a PHI may have before the FSM threader will not try to thread through its block.\n+\n+-param=fsm-scale-path-blocks=\n+Common Joined UInteger Var(param_fsm_scale_path_blocks) Init(3) IntegerRange(1, 10) Param\n+Scale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.\n+\n+-param=fsm-scale-path-stmts=\n+Common Joined UInteger Var(param_fsm_scale_path_stmts) Init(2) IntegerRange(1, 10) Param\n+Scale factor to apply to the number of statements in a threading path when comparing to the number of (scaled) blocks.\n+\n+-param=gcse-after-reload-critical-fraction=\n+Common Joined UInteger Var(param_gcse_after_reload_critical_fraction) Init(10) Param\n+The threshold ratio of critical edges execution count that permit performing redundancy elimination after reload.\n+\n+-param=gcse-after-reload-partial-fraction=\n+Common Joined UInteger Var(param_gcse_after_reload_partial_fraction) Init(3) Param\n+The threshold ratio for performing partial redundancy elimination after reload.\n+\n+-param=gcse-cost-distance-ratio=\n+Common Joined UInteger Var(param_gcse_cost_distance_ratio) Init(10) Param\n+Scaling factor in calculation of maximum distance an expression can be moved by GCSE optimizations.\n+\n+-param=gcse-unrestricted-cost=\n+Common Joined UInteger Var(param_gcse_unrestricted_cost) Init(3) Param\n+Cost at which GCSE optimizations will not constraint the distance an expression can travel.\n+\n+-param=ggc-min-expand=\n+Common Joined UInteger Var(param_ggc_min_expand) Init(30) Param\n+Minimum heap expansion to trigger garbage collection, as a percentage of the total size of the heap.\n+\n+-param=ggc-min-heapsize=\n+Common Joined UInteger Var(param_ggc_min_heapsize) Init(4096) Param\n+Minimum heap size before we start collecting garbage, in kilobytes.\n+\n+-param=gimple-fe-computed-hot-bb-threshold=\n+Common Joined UInteger Var(param_gimple_fe_computed_hot_bb_threshold) Param\n+The number of executions of a basic block which is considered hot. The parameter is used only in GIMPLE FE.\n+\n+-param=graphite-allow-codegen-errors=\n+Common Joined UInteger Var(param_graphite_allow_codegen_errors) IntegerRange(0, 1) Param\n+Whether codegen errors should be ICEs when -fchecking.\n+\n+-param=graphite-max-arrays-per-scop=\n+Common Joined UInteger Var(param_graphite_max_arrays_per_scop) Init(100) Param\n+Maximum number of arrays per SCoP.\n+\n+-param=graphite-max-nb-scop-params=\n+Common Joined UInteger Var(param_graphite_max_nb_scop_params) Init(10) Param\n+Maximum number of parameters in a SCoP.\n+\n+-param=hash-table-verification-limit=\n+Common Joined UInteger Var(param_hash_table_verification_limit) Init(10) Param\n+The number of elements for which hash table verification is done for each searched element.\n+\n+-param=hot-bb-count-fraction=\n+Common Joined UInteger Var(param_hot_bb_count_fraction) Init(10000) Param\n+The denominator n of fraction 1/n of the maximal execution count of a basic block in the entire program that a basic block needs to at least have in order to be considered hot (used in non-LTO mode).\n+\n+-param=hot-bb-count-ws-permille=\n+Common Joined UInteger Var(param_hot_bb_count_ws_permille) Init(990) IntegerRange(0, 1000) Param\n+The number of most executed permilles of the profiled execution of the entire program to which the execution count of a basic block must be part of in order to be considered hot (used in LTO mode).\n+\n+-param=hot-bb-frequency-fraction=\n+Common Joined UInteger Var(param_hot_bb_frequency_fraction) Init(1000) Param\n+The denominator n of fraction 1/n of the execution frequency of the entry block of a function that a basic block of this function needs to at least have in order to be considered hot.\n+\n+-param=hsa-gen-debug-stores=\n+Common Joined UInteger Var(param_hsa_gen_debug_stores) IntegerRange(0, 1) Param\n+Level of hsa debug stores verbosity.\n+\n+-param=inline-heuristics-hint-percent=\n+Common Joined UInteger Var(param_inline_heuristics_hint_percent) Init(600) IntegerRange(100, 1000000) Param\n+The scale (in percents) applied to inline-insns-single and auto limits when heuristics hints that inlining is very profitable with -O3 and -Ofast.\n+\n+-param=inline-heuristics-hint-percent-O2=\n+Common Joined UInteger Var(param_inline_heuristics_hint_percent_o2) Init(200) IntegerRange(100, 1000000) Param\n+The scale (in percents) applied to inline-insns-single and auto limits when heuristics hints that inlining is very profitable.\n+\n+-param=inline-min-speedup=\n+Common Joined UInteger Var(param_inline_min_speedup) Init(15) IntegerRange(0, 100) Param\n+The minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-insns-auto with -O3 and -Ofast.\n+\n+-param=inline-min-speedup-O2=\n+Common Joined UInteger Var(param_inline_min_speedup_o2) Init(30) IntegerRange(0, 100) Param\n+The minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-insns-auto.\n+\n+-param=inline-unit-growth=\n+Common Joined UInteger Var(param_inline_unit_growth) Init(40) Param\n+How much can given compilation unit grow because of the inlining (in percent).\n+\n+-param=integer-share-limit=\n+Common Joined UInteger Var(param_integer_share_limit) Init(251) IntegerRange(2, 65536) Param\n+The upper bound for sharing integer constants.\n+\n+-param=ipa-cp-eval-threshold=\n+Common Joined UInteger Var(param_ipa_cp_eval_threshold) Init(500) Param\n+Threshold ipa-cp opportunity evaluation that is still considered beneficial to clone.\n+\n+-param=ipa-cp-loop-hint-bonus=\n+Common Joined UInteger Var(param_ipa_cp_loop_hint_bonus) Init(64) Param\n+Compile-time bonus IPA-CP assigns to candidates which make loop bounds or strides known.\n+\n+-param=ipa-cp-recursion-penalty=\n+Common Joined UInteger Var(param_ipa_cp_recursion_penalty) Init(40) IntegerRange(0, 100) Param\n+Percentage penalty the recursive functions will receive when they are evaluated for cloning.\n+\n+-param=ipa-cp-single-call-penalty=\n+Common Joined UInteger Var(param_ipa_cp_single_call_penalty) Init(15) IntegerRange(0, 100) Param\n+Percentage penalty functions containing a single call to another function will receive when they are evaluated for cloning.\n+\n+-param=ipa-cp-value-list-size=\n+Common Joined UInteger Var(param_ipa_cp_value_list_size) Init(8) Param\n+Maximum size of a list of values associated with each parameter for interprocedural constant propagation.\n+\n+-param=ipa-max-aa-steps=\n+Common Joined UInteger Var(param_ipa_max_aa_steps) Init(25000) Param\n+Maximum number of statements that will be visited by IPA formal parameter analysis based on alias analysis in any given function.\n+\n+-param=ipa-max-agg-items=\n+Common Joined UInteger Var(param_ipa_max_agg_items) Init(16) Param\n+Maximum number of aggregate content items for a parameter in jump functions and lattices.\n+\n+-param=ipa-max-param-expr-ops=\n+Common Joined UInteger Var(param_ipa_max_param_expr_ops) Init(10) Param\n+Maximum number of operations in a parameter expression that can be handled by IPA analysis.\n+\n+-param=ipa-max-switch-predicate-bounds=\n+Common Joined UInteger Var(param_ipa_max_switch_predicate_bounds) Init(5) Param\n+Maximal number of boundary endpoints of case ranges of switch statement used during IPA functoin summary generation.\n+\n+-param=ipa-sra-max-replacements=\n+Common Joined UInteger Var(param_ipa_sra_max_replacements) Init(8) IntegerRange(0, 16) Param\n+Maximum pieces that IPA-SRA tracks per formal parameter, as a consequence, also the maximum number of replacements of a formal parameter.\n+\n+-param=ipa-sra-ptr-growth-factor=\n+Common Joined UInteger Var(param_ipa_sra_ptr_growth_factor) Init(2) Param\n+Maximum allowed growth of number and total size of new parameters that ipa-sra replaces a pointer to an aggregate with.\n+\n+-param=ipcp-unit-growth=\n+Common Joined UInteger Var(param_ipcp_unit_growth) Init(10) Param\n+How much can given compilation unit grow because of the interprocedural constant propagation (in percent).\n+\n+-param=ira-loop-reserved-regs=\n+Common Joined UInteger Var(param_ira_loop_reserved_regs) Init(2) Param\n+The number of registers in each class kept unused by loop invariant motion.\n+\n+-param=ira-max-conflict-table-size=\n+Common Joined UInteger Var(param_ira_max_conflict_table_size) Init(1000) Param\n+Max size of conflict table in MB.\n+\n+-param=ira-max-loops-num=\n+Common Joined UInteger Var(param_ira_max_loops_num) Init(100) Param\n+Max loops number for regional RA.\n+\n+-param=iv-always-prune-cand-set-bound=\n+Common Joined UInteger Var(param_iv_always_prune_cand_set_bound) Init(10) Param\n+If number of candidates in the set is smaller, we always try to remove unused ivs during its optimization.\n+\n+-param=iv-consider-all-candidates-bound=\n+Common Joined UInteger Var(param_iv_consider_all_candidates_bound) Init(40) Param\n+Bound on number of candidates below that all candidates are considered in iv optimizations.\n+\n+-param=iv-max-considered-uses=\n+Common Joined UInteger Var(param_iv_max_considered_uses) Init(250) Param\n+Bound on number of iv uses in loop optimized in iv optimizations.\n+\n+-param=jump-table-max-growth-ratio-for-size=\n+Common Joined UInteger Var(param_jump_table_max_growth_ratio_for_size) Init(300) Param\n+The maximum code size growth ratio when expanding into a jump table (in percent).  The parameter is used when optimizing for size.\n+\n+-param=jump-table-max-growth-ratio-for-speed=\n+Common Joined UInteger Var(param_jump_table_max_growth_ratio_for_speed) Init(800) Param\n+The maximum code size growth ratio when expanding into a jump table (in percent).  The parameter is used when optimizing for speed.\n+\n+-param=l1-cache-line-size=\n+Common Joined UInteger Var(param_l1_cache_line_size) Init(32) Param\n+The size of L1 cache line.\n+\n+-param=l1-cache-size=\n+Common Joined UInteger Var(param_l1_cache_size) Init(64) Param\n+The size of L1 cache.\n+\n+-param=l2-cache-size=\n+Common Joined UInteger Var(param_l2_cache_size) Init(512) Param\n+The size of L2 cache.\n+\n+-param=large-function-growth=\n+Common Joined UInteger Var(param_large_function_growth) Init(100) Param\n+Maximal growth due to inlining of large function (in percent).\n+\n+-param=large-function-insns=\n+Common Joined UInteger Var(param_large_function_insns) Init(2700) Param\n+The size of function body to be considered large.\n+\n+-param=large-stack-frame=\n+Common Joined UInteger Var(param_large_stack_frame) Init(256) Param\n+The size of stack frame to be considered large.\n+\n+-param=large-stack-frame-growth=\n+Common Joined UInteger Var(param_stack_frame_growth) Init(1000) Param\n+Maximal stack frame growth due to inlining (in percent).\n+\n+-param=large-unit-insns=\n+Common Joined UInteger Var(param_large_unit_insns) Init(10000) Param\n+The size of translation unit to be considered large.\n+\n+-param=lim-expensive=\n+Common Joined UInteger Var(param_lim_expensive) Init(20) Param\n+The minimum cost of an expensive expression in the loop invariant motion.\n+\n+-param=logical-op-non-short-circuit=\n+Common Joined UInteger Var(param_logical_op_non_short_circuit) Init(-1) IntegerRange(-1, 1) Param\n+True if a non-short-circuit operation is optimal.\n+\n+-param=loop-block-tile-size=\n+Common Joined UInteger Var(param_loop_block_tile_size) Init(51) Param\n+Size of tiles for loop blocking.\n+\n+-param=loop-interchange-max-num-stmts=\n+Common Joined UInteger Var(param_loop_interchange_max_num_stmts) Init(64) Param\n+The maximum number of stmts in loop nest for loop interchange.\n+\n+-param=loop-interchange-stride-ratio=\n+Common Joined UInteger Var(param_loop_interchange_stride_ratio) Init(2) Param\n+The minimum stride ratio for loop interchange to be profitable.\n+\n+-param=loop-invariant-max-bbs-in-loop=\n+Common Joined UInteger Var(param_loop_invariant_max_bbs_in_loop) Init(10000) Param\n+Max basic blocks number in loop for loop invariant motion.\n+\n+-param=loop-max-datarefs-for-datadeps=\n+Common Joined UInteger Var(param_loop_max_datarefs_for_datadeps) Init(1000) Param\n+Maximum number of datarefs in loop for building loop data dependencies.\n+\n+-param=loop-versioning-max-inner-insns=\n+Common Joined UInteger Var(param_loop_versioning_max_inner_insns) Init(200) Param\n+The maximum number of instructions in an inner loop that is being considered for versioning.\n+\n+-param=loop-versioning-max-outer-insns=\n+Common Joined UInteger Var(param_loop_versioning_max_outer_insns) Init(100) Param\n+The maximum number of instructions in an outer loop that is being considered for versioning, on top of the instructions in inner loops.\n+\n+-param=lra-inheritance-ebb-probability-cutoff=\n+Common Joined UInteger Var(param_lra_inheritance_ebb_probability_cutoff) Init(40) IntegerRange(0, 100) Param\n+Minimal fall-through edge probability in percentage used to add BB to inheritance EBB in LRA.\n+\n+-param=lra-max-considered-reload-pseudos=\n+Common Joined UInteger Var(param_lra_max_considered_reload_pseudos) Init(500) Param\n+The max number of reload pseudos which are considered during spilling a non-reload pseudo.\n+\n+-param=lto-max-partition=\n+Common Joined UInteger Var(param_max_partition_size) Init(1000000) Param\n+Maximal size of a partition for LTO (in estimated instructions).\n+\n+-param=lto-max-streaming-parallelism=\n+Common Joined UInteger Var(param_max_lto_streaming_parallelism) Init(32) IntegerRange(1, 65536) Param\n+maximal number of LTO partitions streamed in parallel.\n+\n+-param=lto-min-partition=\n+Common Joined UInteger Var(param_min_partition_size) Init(10000) Param\n+Minimal size of a partition for LTO (in estimated instructions).\n+\n+-param=lto-partitions=\n+Common Joined UInteger Var(param_lto_partitions) Init(128) IntegerRange(1, 65536) Param\n+Number of partitions the program should be split to.\n+\n+-param=max-average-unrolled-insns=\n+Common Joined UInteger Var(param_max_average_unrolled_insns) Init(80) Param\n+The maximum number of instructions to consider to unroll in a loop on average.\n+\n+-param=max-combine-insns=\n+Common Joined UInteger Var(param_max_combine_insns) Init(4) IntegerRange(2, 4) Param\n+The maximum number of insns combine tries to combine.\n+\n+-param=max-completely-peel-loop-nest-depth=\n+Common Joined UInteger Var(param_max_unroll_iterations) Init(8) Param\n+The maximum depth of a loop nest we completely peel.\n+\n+-param=max-completely-peel-times=\n+Common Joined UInteger Var(param_max_completely_peel_times) Init(16) Param\n+The maximum number of peelings of a single loop that is peeled completely.\n+\n+-param=max-completely-peeled-insns=\n+Common Joined UInteger Var(param_max_completely_peeled_insns) Init(200) Param\n+The maximum number of insns of a completely peeled loop.\n+\n+-param=max-crossjump-edges=\n+Common Joined UInteger Var(param_max_crossjump_edges) Init(100) Param\n+The maximum number of incoming edges to consider for crossjumping.\n+\n+-param=max-cse-insns=\n+Common Joined UInteger Var(param_max_cse_insns) Init(1000) Param\n+The maximum instructions CSE process before flushing.\n+\n+-param=max-cse-path-length=\n+Common Joined UInteger Var(param_max_cse_path_length) Init(10) IntegerRange(1, 65536) Param\n+The maximum length of path considered in cse.\n+\n+-param=max-cselib-memory-locations=\n+Common Joined UInteger Var(param_max_cselib_memory_locations) Init(500) Param\n+The maximum memory locations recorded by cselib.\n+\n+-param=max-debug-marker-count=\n+Common Joined UInteger Var(param_max_debug_marker_count) Init(100000) Param\n+Max. count of debug markers to expand or inline.\n+\n+-param=max-delay-slot-insn-search=\n+Common Joined UInteger Var(param_max_delay_slot_insn_search) Init(100) Param\n+The maximum number of instructions to consider to fill a delay slot.\n+\n+-param=max-delay-slot-live-search=\n+Common Joined UInteger Var(param_max_delay_slot_live_search) Init(333) Param\n+The maximum number of instructions to consider to find accurate live register information.\n+\n+-param=max-dse-active-local-stores=\n+Common Joined UInteger Var(param_max_dse_active_local_stores) Init(5000) Param\n+Maximum number of active local stores in RTL dead store elimination.\n+\n+-param=max-early-inliner-iterations=\n+Common Joined UInteger Var(param_early_inliner_max_iterations) Init(1) Param\n+The maximum number of nested indirect inlining performed by early inliner.\n+\n+-param=max-fields-for-field-sensitive=\n+Common Joined UInteger Var(param_max_fields_for_field_sensitive) Param\n+Maximum number of fields in a structure before pointer analysis treats the structure as a single variable.\n+\n+-param=max-fsm-thread-length=\n+Common Joined UInteger Var(param_max_fsm_thread_length) Init(10) IntegerRange(1, 999999) Param\n+Maximum number of basic blocks on a finite state automaton jump thread path.\n+\n+-param=max-fsm-thread-path-insns=\n+Common Joined UInteger Var(param_max_fsm_thread_path_insns) Init(100) IntegerRange(1, 999999) Param\n+Maximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread path.\n+\n+-param=max-fsm-thread-paths=\n+Common Joined UInteger Var(param_max_fsm_thread_paths) Init(50) IntegerRange(1, 999999) Param\n+Maximum number of new jump thread paths to create for a finite state automaton.\n+\n+-param=max-gcse-insertion-ratio=\n+Common Joined UInteger Var(param_max_gcse_insertion_ratio) Init(20) Param\n+The maximum ratio of insertions to deletions of expressions in GCSE.\n+\n+-param=max-gcse-memory=\n+Common Joined UInteger Var(param_max_gcse_memory) Init(134217728) Param\n+The maximum amount of memory to be allocated by GCSE.\n+\n+-param=max-goto-duplication-insns=\n+Common Joined UInteger Var(param_max_goto_duplication_insns) Init(8) Param\n+The maximum number of insns to duplicate when unfactoring computed gotos.\n+\n+-param=max-grow-copy-bb-insns=\n+Common Joined UInteger Var(param_max_grow_copy_bb_insns) Init(8) Param\n+The maximum expansion factor when copying basic blocks.\n+\n+-param=max-hoist-depth=\n+Common Joined UInteger Var(param_max_hoist_depth) Init(30) Param\n+Maximum depth of search in the dominator tree for expressions to hoist.\n+\n+-param=max-inline-insns-auto=\n+Common Joined UInteger Var(param_max_inline_insns_auto) Init(30) Param\n+The maximum number of instructions when automatically inlining with -O3 and -Ofast.\n+\n+-param=max-inline-insns-auto-O2=\n+Common Joined UInteger Var(param_max_inline_insns_auto_o2) Init(15) Param\n+The maximum number of instructions when automatically inlining.\n+\n+-param=max-inline-insns-recursive=\n+Common Joined UInteger Var(param_max_inline_insns_recursive) Init(450) Param\n+The maximum number of instructions inline function can grow to via recursive inlining.\n+\n+-param=max-inline-insns-recursive-auto=\n+Common Joined UInteger Var(param_max_inline_insns_recursive_auto) Init(450) Param\n+The maximum number of instructions non-inline function can grow to via recursive inlining.\n+\n+-param=max-inline-insns-single=\n+Common Joined UInteger Var(param_max_inline_insns_single) Init(200) Param\n+The maximum number of instructions in a single function eligible for inlining with -O3 and -Ofast.\n+\n+-param=max-inline-insns-single-O2=\n+Common Joined UInteger Var(param_max_inline_insns_single_o2) Init(30) Param\n+The maximum number of instructions in a single function eligible for inlining.\n+\n+-param=max-inline-insns-size=\n+Common Joined UInteger Var(param_max_inline_insns_size) Param\n+The maximum number of instructions when inlining for size.\n+\n+-param=max-inline-insns-small=\n+Common Joined UInteger Var(param_max_inline_insns_small) Param\n+The maximum number of instructions when automatically inlining small functions.\n+\n+-param=max-inline-recursive-depth=\n+Common Joined UInteger Var(param_max_inline_recursive_depth) Init(8) Param\n+The maximum depth of recursive inlining for inline functions.\n+\n+-param=max-inline-recursive-depth-auto=\n+Common Joined UInteger Var(param_max_inline_recursive_depth_auto) Init(8) Param\n+The maximum depth of recursive inlining for non-inline functions.\n+\n+-param=max-isl-operations=\n+Common Joined UInteger Var(param_max_isl_operations) Init(350000) Param\n+Maximum number of isl operations, 0 means unlimited.\n+\n+-param=max-iterations-computation-cost=\n+Common Joined UInteger Var(param_max_iterations_computation_cost) Init(10) Param\n+Bound on the cost of an expression to compute the number of iterations.\n+\n+-param=max-iterations-to-track=\n+Common Joined UInteger Var(param_max_iterations_to_track) Init(1000) Param\n+Bound on the number of iterations the brute force # of iterations analysis algorithm evaluates.\n+\n+-param=max-jump-thread-duplication-stmts=\n+Common Joined UInteger Var(param_max_jump_thread_duplication_stmts) Init(15) Param\n+Maximum number of statements allowed in a block that needs to be duplicated when threading jumps.\n+\n+-param=max-last-value-rtl=\n+Common Joined UInteger Var(param_max_last_value_rtl) Init(10000) Param\n+The maximum number of RTL nodes that can be recorded as combiner's last value.\n+\n+-param=max-loop-header-insns=\n+Common Joined UInteger Var(param_max_loop_header_insns) Init(20) Param\n+The maximum number of insns in loop header duplicated by the copy loop headers pass.\n+\n+-param=max-modulo-backtrack-attempts=\n+Common Joined UInteger Var(param_max_modulo_backtrack_attempts) Init(40) Param\n+The maximum number of backtrack attempts the scheduler should make when modulo scheduling a loop.\n+\n+-param=max-partial-antic-length=\n+Common Joined UInteger Var(param_max_partial_antic_length) Init(100) Param\n+Maximum length of partial antic set when performing tree pre optimization.\n+\n+-param=max-peel-branches=\n+Common Joined UInteger Var(param_max_peel_branches) Init(32) Param\n+The maximum number of branches on the path through the peeled sequence.\n+\n+-param=max-peel-times=\n+Common Joined UInteger Var(param_max_peel_times) Init(16) Param\n+The maximum number of peelings of a single loop.\n+\n+-param=max-peeled-insns=\n+Common Joined UInteger Var(param_max_peeled_insns) Init(100) Param\n+The maximum number of insns of a peeled loop.\n+\n+-param=max-pending-list-length=\n+Common Joined UInteger Var(param_max_pending_list_length) Init(32) Param\n+The maximum length of scheduling's pending operations list.\n+\n+-param=max-pipeline-region-blocks=\n+Common Joined UInteger Var(param_max_pipeline_region_blocks) Init(15) Param\n+The maximum number of blocks in a region to be considered for interblock scheduling.\n+\n+-param=max-pipeline-region-insns=\n+Common Joined UInteger Var(param_max_pipeline_region_insns) Init(200) Param\n+The maximum number of insns in a region to be considered for interblock scheduling.\n+\n+-param=max-pow-sqrt-depth=\n+Common Joined UInteger Var(param_max_pow_sqrt_depth) Init(5) IntegerRange(1, 32) Param\n+Maximum depth of sqrt chains to use when synthesizing exponentiation by a real constant.\n+\n+-param=max-predicted-iterations=\n+Common Joined UInteger Var(param_max_predicted_iterations) Init(100) Param\n+The maximum number of loop iterations we predict statically.\n+\n+-param=max-reload-search-insns=\n+Common Joined UInteger Var(param_max_reload_search_insns) Init(100) Param\n+The maximum number of instructions to search backward when looking for equivalent reload.\n+\n+-param=max-rtl-if-conversion-insns=\n+Common Joined UInteger Var(param_max_rtl_if_conversion_insns) Init(10) IntegerRange(0, 99) Param\n+Maximum number of insns in a basic block to consider for RTL if-conversion.\n+\n+-param=max-rtl-if-conversion-predictable-cost=\n+Common Joined UInteger Var(param_max_rtl_if_conversion_predictable_cost) Init(20) IntegerRange(0, 200) Param\n+Maximum permissible cost for the sequence that would be generated by the RTL if-conversion pass for a branch that is considered predictable.\n+\n+-param=max-rtl-if-conversion-unpredictable-cost=\n+Common Joined UInteger Var(param_max_rtl_if_conversion_unpredictable_cost) Init(40) IntegerRange(0, 200) Param\n+Maximum permissible cost for the sequence that would be generated by the RTL if-conversion pass for a branch that is considered unpredictable.\n+\n+-param=max-sched-extend-regions-iters=\n+Common Joined UInteger Var(param_max_sched_extend_regions_iters) Param\n+The maximum number of iterations through CFG to extend regions.\n+\n+-param=max-sched-insn-conflict-delay=\n+Common Joined UInteger Var(param_max_sched_insn_conflict_delay) Init(3) IntegerRange(1, 10) Param\n+The maximum conflict delay for an insn to be considered for speculative motion.\n+\n+-param=max-sched-ready-insns=\n+Common Joined UInteger Var(param_max_sched_ready_insns) Init(100) IntegerRange(1, 65536) Param\n+The maximum number of instructions ready to be issued to be considered by the scheduler during the first scheduling pass.\n+\n+-param=max-sched-region-blocks=\n+Common Joined UInteger Var(param_max_sched_region_blocks) Init(10) Param\n+The maximum number of blocks in a region to be considered for interblock scheduling.\n+\n+-param=max-sched-region-insns=\n+Common Joined UInteger Var(param_max_sched_region_insns) Init(100) Param\n+The maximum number of insns in a region to be considered for interblock scheduling.\n+\n+-param=max-slsr-cand-scan=\n+Common Joined UInteger Var(param_max_slsr_candidate_scan) Init(50) IntegerRange(1, 999999) Param\n+Maximum length of candidate scans for straight-line strength reduction.\n+\n+-param=max-speculative-devirt-maydefs=\n+Common Joined UInteger Var(param_max_speculative_devirt_maydefs) Init(50) Param\n+Maximum number of may-defs visited when devirtualizing speculatively.\n+\n+-param=max-ssa-name-query-depth=\n+Common Joined UInteger Var(param_max_ssa_name_query_depth) Init(3) IntegerRange(1, 10) Param\n+Maximum recursion depth allowed when querying a property of an SSA name.\n+\n+-param=max-stores-to-merge=\n+Common Joined UInteger Var(param_max_stores_to_merge) Init(64) IntegerRange(2, 65536) Param\n+Maximum number of constant stores to merge in the store merging pass.\n+\n+-param=max-stores-to-sink=\n+Common Joined UInteger Var(param_max_stores_to_sink) Init(2) Param\n+Maximum number of conditional store pairs that can be sunk.\n+\n+-param=max-tail-merge-comparisons=\n+Common Joined UInteger Var(param_max_tail_merge_comparisons) Init(10) Param\n+Maximum amount of similar bbs to compare a bb with.\n+\n+-param=max-tail-merge-iterations=\n+Common Joined UInteger Var(param_max_tail_merge_iterations) Init(2) Param\n+Maximum amount of iterations of the pass over a function.\n+\n+-param=max-tracked-strlens=\n+Common Joined UInteger Var(param_max_tracked_strlens) Init(10000) Param\n+Maximum number of strings for which strlen optimization pass will track string lengths.\n+\n+-param=max-tree-if-conversion-phi-args=\n+Common Joined UInteger Var(param_max_tree_if_conversion_phi_args) Init(4) IntegerRange(2, 65536) Param\n+Maximum number of arguments in a PHI supported by TREE if-conversion unless the loop is marked with simd pragma.\n+\n+-param=max-unroll-times=\n+Common Joined UInteger Var(param_max_unroll_times) Init(8) Param\n+The maximum number of unrollings of a single loop.\n+\n+-param=max-unrolled-insns=\n+Common Joined UInteger Var(param_max_unrolled_insns) Init(200) Param\n+The maximum number of instructions to consider to unroll in a loop.\n+\n+-param=max-unswitch-insns=\n+Common Joined UInteger Var(param_max_unswitch_insns) Init(50) Param\n+The maximum number of insns of an unswitched loop.\n+\n+-param=max-unswitch-level=\n+Common Joined UInteger Var(param_max_unswitch_level) Init(3) Param\n+The maximum number of unswitchings in a single loop.\n+\n+-param=max-variable-expansions-in-unroller=\n+Common Joined UInteger Var(param_max_variable_expansions) Init(1) Param\n+If -fvariable-expansion-in-unroller is used, the maximum number of times that an individual variable will be expanded during loop unrolling.\n+\n+-param=max-vartrack-expr-depth=\n+Common Joined UInteger Var(param_max_vartrack_expr_depth) Init(12) Param\n+Max. recursion depth for expanding var tracking expressions.\n+\n+-param=max-vartrack-reverse-op-size=\n+Common Joined UInteger Var(param_max_vartrack_reverse_op_size) Init(50) Param\n+Max. size of loc list for which reverse ops should be added.\n+\n+-param=max-vartrack-size=\n+Common Joined UInteger Var(param_max_vartrack_size) Init(50000000) Param\n+Max. size of var tracking hash tables.\n+\n+-param=max-vrp-switch-assertions=\n+Common Joined UInteger Var(param_max_vrp_switch_assertions) Init(10) Param\n+Maximum number of assertions to add along the default edge of a switch statement during VRP.\n+\n+-param=min-crossjump-insns=\n+Common Joined UInteger Var(param_min_crossjump_insns) Init(5) IntegerRange(1, 65536) Param\n+The minimum number of matching instructions to consider for crossjumping.\n+\n+-param=min-inline-recursive-probability=\n+Common Joined UInteger Var(param_min_inline_recursive_probability) Init(10) Param\n+Inline recursively only when the probability of call being executed exceeds the parameter.\n+\n+-param=min-insn-to-prefetch-ratio=\n+Common Joined UInteger Var(param_min_insn_to_prefetch_ratio) Init(9) Param\n+Min. ratio of insns to prefetches to enable prefetching for a loop with an unknown trip count.\n+\n+-param=min-loop-cond-split-prob=\n+Common Joined UInteger Var(param_min_loop_cond_split_prob) Init(30) IntegerRange(0, 100) Param\n+The minimum threshold for probability of semi-invariant condition statement to trigger loop split.\n+\n+-param=min-nondebug-insn-uid=\n+Common Joined UInteger Var(param_min_nondebug_insn_uid) Param\n+The minimum UID to be used for a nondebug insn.\n+\n+-param=min-size-for-stack-sharing=\n+Common Joined UInteger Var(param_min_size_for_stack_sharing) Init(32) Param\n+The minimum size of variables taking part in stack slot sharing when not optimizing.\n+\n+-param=min-spec-prob=\n+Common Joined UInteger Var(param_min_spec_prob) Init(40) Param\n+The minimum probability of reaching a source block for interblock speculative scheduling.\n+\n+-param=min-vect-loop-bound=\n+Common Joined UInteger Var(param_min_vect_loop_bound) Param\n+If -ftree-vectorize is used, the minimal loop bound of a loop to be considered for vectorization.\n+\n+-param=parloops-chunk-size=\n+Common Joined UInteger Var(param_parloops_chunk_size) Param\n+Chunk size of omp schedule for loops parallelized by parloops.\n+\n+-param=parloops-min-per-thread=\n+Common Joined UInteger Var(param_parloops_min_per_thread) Init(100) IntegerRange(2, 65536) Param\n+Minimum number of iterations per thread of an innermost parallelized loop.\n+\n+-param=parloops-schedule=\n+Common Joined Var(param_parloops_schedule) Enum(parloops_schedule_type) Param\n+--param=parloops-schedule=[static|dynamic|guided|auto|runtime]\tSchedule type of omp schedule for loops parallelized by parloops.\n+\n+Enum\n+Name(parloops_schedule_type) Type(int)\n+\n+EnumValue\n+Enum(parloops_schedule_type) String(static) Value(PARLOOPS_SCHEDULE_STATIC)\n+\n+EnumValue\n+Enum(parloops_schedule_type) String(dynamic) Value(PARLOOPS_SCHEDULE_DYNAMIC)\n+\n+EnumValue\n+Enum(parloops_schedule_type) String(guided) Value(PARLOOPS_SCHEDULE_GUIDED)\n+\n+EnumValue\n+Enum(parloops_schedule_type) String(auto) Value(PARLOOPS_SCHEDULE_AUTO)\n+\n+EnumValue\n+Enum(parloops_schedule_type) String(runtime) Value(PARLOOPS_SCHEDULE_RUNTIME)\n+\n+-param=partial-inlining-entry-probability=\n+Common Joined UInteger Var(param_partial_inlining_entry_probability) Init(70) IntegerRange(0, 100) Param\n+Maximum probability of the entry BB of split region (in percent relative to entry BB of the function) to make partial inlining happen.\n+\n+-param=predictable-branch-outcome=\n+Common Joined UInteger Var(param_predictable_branch_outcome) Init(2) IntegerRange(0, 50) Param\n+Maximal estimated outcome of branch considered predictable.\n+\n+-param=prefetch-dynamic-strides=\n+Common Joined UInteger Var(param_prefetch_dynamic_strides) Init(1) IntegerRange(0, 1) Param\n+Whether software prefetch hints should be issued for non-constant strides.\n+\n+-param=prefetch-latency=\n+Common Joined UInteger Var(param_prefetch_latency) Init(200) Param\n+The number of insns executed before prefetch is completed.\n+\n+-param=prefetch-min-insn-to-mem-ratio=\n+Common Joined UInteger Var(param_prefetch_min_insn_to_mem_ratio) Init(3) Param\n+Min. ratio of insns to mem ops to enable prefetching in a loop.\n+\n+-param=prefetch-minimum-stride=\n+Common Joined UInteger Var(param_prefetch_minimum_stride) Init(-1) Param\n+The minimum constant stride beyond which we should use prefetch hints for.\n+\n+-param=profile-func-internal-id=\n+Common Joined UInteger Var(param_profile_func_internal_id) IntegerRange(0, 1) Param\n+Use internal function id in profile lookup.\n+\n+-param=rpo-vn-max-loop-depth=\n+Common Joined UInteger Var(param_rpo_vn_max_loop_depth) Init(7) IntegerRange(2, 65536) Param\n+Maximum depth of a loop nest to fully value-number optimistically.\n+\n+-param=sccvn-max-alias-queries-per-access=\n+Common Joined UInteger Var(param_sccvn_max_alias_queries_per_access) Init(1000) Param\n+Maximum number of disambiguations to perform per memory access.\n+\n+-param=scev-max-expr-complexity=\n+Common Joined UInteger Var(param_scev_max_expr_complexity) Init(10) Param\n+Bound on the complexity of the expressions in the scalar evolutions analyzer.\n+\n+-param=scev-max-expr-size=\n+Common Joined UInteger Var(param_scev_max_expr_size) Init(100) Param\n+Bound on size of expressions used in the scalar evolutions analyzer.\n+\n+-param=sched-autopref-queue-depth=\n+Common Joined UInteger Var(param_sched_autopref_queue_depth) Init(-1) Param\n+Hardware autoprefetcher scheduler model control flag.  Number of lookahead cycles the model looks into, at '0' only enable instruction sorting heuristic.  Disabled by default.\n+\n+-param=sched-mem-true-dep-cost=\n+Common Joined UInteger Var(param_sched_mem_true_dep_cost) Init(1) Param\n+Minimal distance between possibly conflicting store and load.\n+\n+-param=sched-pressure-algorithm=\n+Common Joined UInteger Var(param_sched_pressure_algorithm) Init(1) IntegerRange(1, 2) Param\n+Which -fsched-pressure algorithm to apply.\n+\n+-param=sched-spec-prob-cutoff=\n+Common Joined UInteger Var(param_sched_spec_prob_cutoff) Init(40) IntegerRange(0, 100) Param\n+The minimal probability of speculation success (in percents), so that speculative insn will be scheduled.\n+\n+-param=sched-state-edge-prob-cutoff=\n+Common Joined UInteger Var(param_sched_state_edge_prob_cutoff) Init(10) IntegerRange(0, 100) Param\n+The minimum probability an edge must have for the scheduler to save its state across it.\n+\n+-param=selsched-insns-to-rename=\n+Common Joined UInteger Var(param_selsched_insns_to_rename) Init(2) Param\n+Maximum number of instructions in the ready list that are considered eligible for renaming.\n+\n+-param=selsched-max-lookahead=\n+Common Joined UInteger Var(param_selsched_max_lookahead) Init(50) Param\n+The maximum size of the lookahead window of selective scheduling.\n+\n+-param=selsched-max-sched-times=\n+Common Joined UInteger Var(param_selsched_max_sched_times) Init(2) IntegerRange(1, 65536) Param\n+Maximum number of times that an insn could be scheduled.\n+\n+-param=simultaneous-prefetches=\n+Common Joined UInteger Var(param_simultaneous_prefetches) Init(3) Param\n+The number of prefetches that can run at the same time.\n+\n+-param=sink-frequency-threshold=\n+Common Joined UInteger Var(param_sink_frequency_threshold) Init(75) IntegerRange(0, 100) Param\n+Target block's relative execution frequency (as a percentage) required to sink a statement.\n+\n+-param=slp-max-insns-in-bb=\n+Common Joined UInteger Var(param_slp_max_insns_in_bb) Init(1000) Param\n+Maximum number of instructions in basic block to be considered for SLP vectorization.\n+\n+-param=sms-dfa-history=\n+Common Joined UInteger Var(param_sms_dfa_history) Param\n+The number of cycles the swing modulo scheduler considers when checking conflicts using DFA.\n+\n+-param=sms-loop-average-count-threshold=\n+Common Joined UInteger Var(param_sms_loop_average_count_threshold) Param\n+A threshold on the average loop count considered by the swing modulo scheduler.\n+\n+-param=sms-max-ii-factor=\n+Common Joined UInteger Var(param_sms_max_ii_factor) Init(100) Param\n+A factor for tuning the upper bound that swing modulo scheduler uses for scheduling a loop.\n+\n+-param=sms-min-sc=\n+Common Joined UInteger Var(param_sms_min_sc) Init(2) IntegerRange(1, 65536) Param\n+The minimum value of stage count that swing modulo scheduler will generate.\n+\n+-param=sra-max-scalarization-size-Osize=\n+Common Joined UInteger Var(param_sra_max_scalarization_size_size) Param\n+Maximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for size.\n+\n+-param=sra-max-scalarization-size-Ospeed=\n+Common Joined UInteger Var(param_sra_max_scalarization_size_speed) Param\n+Maximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for speed.\n+\n+-param=ssa-name-def-chain-limit=\n+Common Joined UInteger Var(param_ssa_name_def_chain_limit) Init(512) Param\n+The maximum number of SSA_NAME assignments to follow in determining a value.\n+\n+-param=ssp-buffer-size=\n+Common Joined UInteger Var(param_ssp_buffer_size) Init(8) IntegerRange(1, 65536) Param\n+The lower bound for a buffer to be considered for stack smashing protection.\n+\n+-param=stack-clash-protection-guard-size=\n+Common Joined UInteger Var(param_stack_clash_protection_guard_size) Init(12) IntegerRange(12, 30) Param\n+Size of the stack guard expressed as a power of two in bytes.\n+\n+-param=stack-clash-protection-probe-interval=\n+Common Joined UInteger Var(param_stack_clash_protection_probe_interval) Init(12) IntegerRange(10, 16) Param\n+Interval in which to probe the stack expressed as a power of two in bytes.\n+\n+-param=store-merging-allow-unaligned=\n+Common Joined UInteger Var(param_store_merging_allow_unaligned) Init(1) IntegerRange(0, 1) Param\n+Allow the store merging pass to introduce unaligned stores if it is legal to do so.\n+\n+-param=store-merging-max-size=\n+Common Joined UInteger Var(param_store_merging_max_size) Init(65536) IntegerRange(1, 65536) Param\n+Maximum size of a single store merging region in bytes.\n+\n+-param=switch-conversion-max-branch-ratio=\n+Common Joined UInteger Var(param_switch_conversion_branch_ratio) Init(8) IntegerRange(1, 65536) Param\n+The maximum ratio between array size and switch branches for a switch conversion to take place.\n+\n+-param=tm-max-aggregate-size=\n+Common Joined UInteger Var(param_tm_max_aggregate_size) Init(9) Param\n+Size in bytes after which thread-local aggregates should be instrumented with the logging functions instead of save/restore pairs.\n+\n+-param=tracer-dynamic-coverage=\n+Common Joined UInteger Var(param_tracer_dynamic_coverage) Init(75) IntegerRange(0, 100) Param\n+The percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is not available.\n+\n+-param=tracer-dynamic-coverage-feedback=\n+Common Joined UInteger Var(param_tracer_dynamic_coverage_feedback) Init(95) IntegerRange(0, 100) Param\n+The percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is available.\n+\n+-param=tracer-max-code-growth=\n+Common Joined UInteger Var(param_tracer_max_code_growth) Init(100) Param\n+Maximal code growth caused by tail duplication (in percent).\n+\n+-param=tracer-min-branch-probability=\n+Common Joined UInteger Var(param_tracer_min_branch_probability) Init(50) IntegerRange(0, 100) Param\n+Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is not available.\n+\n+-param=tracer-min-branch-probability-feedback=\n+Common Joined UInteger Var(param_tracer_min_branch_probability_feedback) Init(80) IntegerRange(0, 100) Param\n+Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is available.\n+\n+-param=tracer-min-branch-ratio=\n+Common Joined UInteger Var(param_tracer_min_branch_ratio) Init(10) IntegerRange(0, 100) Param\n+Stop reverse growth if the reverse probability of best edge is less than this threshold (in percent).\n+\n+-param=tree-reassoc-width=\n+Common Joined UInteger Var(param_tree_reassoc_width) Param\n+Set the maximum number of instructions executed in parallel in reassociated tree.  If 0, use the target dependent heuristic.\n+\n+-param=uninit-control-dep-attempts=\n+Common Joined UInteger Var(param_uninit_control_dep_attempts) Init(1000) IntegerRange(1, 65536) Param\n+Maximum number of nested calls to search for control dependencies during uninitialized variable analysis.\n+\n+-param=uninlined-function-insns=\n+Common Joined UInteger Var(param_uninlined_function_insns) Init(2) IntegerRange(0, 1000000) Param\n+Instruction accounted for function prologue, epilogue and other overhead.\n+\n+-param=uninlined-function-time=\n+Common Joined UInteger Var(param_uninlined_function_time) IntegerRange(0, 1000000) Param\n+Time accounted for function prologue, epilogue and other overhead.\n+\n+-param=uninlined-thunk-insns=\n+Common Joined UInteger Var(param_uninlined_function_thunk_insns) Init(2) IntegerRange(0, 1000000) Param\n+Instruction accounted for function thunk overhead.\n+\n+-param=uninlined-thunk-time=\n+Common Joined UInteger Var(param_uninlined_function_thunk_time) Init(2) IntegerRange(0, 1000000) Param\n+Time accounted for function thunk overhead.\n+\n+-param=unlikely-bb-count-fraction=\n+Common Joined UInteger Var(param_unlikely_bb_count_fraction) Init(20) Param\n+The denominator n of fraction 1/n of the number of profiled runs of the entire program below which the execution count of a basic block must be in order for the basic block to be considered unlikely.\n+\n+-param=unroll-jam-max-unroll=\n+Common Joined UInteger Var(param_unroll_jam_max_unroll) Init(4) Param\n+Maximum unroll factor for the unroll-and-jam transformation.\n+\n+-param=unroll-jam-min-percent=\n+Common Joined UInteger Var(param_unroll_jam_min_percent) Init(1) IntegerRange(0, 100) Param\n+Minimum percentage of memrefs that must go away for unroll-and-jam to be considered profitable.\n+\n+-param=use-after-scope-direct-emission-threshold=\n+Common Joined UInteger Var(param_use_after_scope_direct_emission_threshold) Init(256) Param\n+Use direct poisoning/unpoisoning instructions for variables smaller or equal to this number.\n+\n+-param=use-canonical-types=\n+Common Joined UInteger Var(param_use_canonical_types) Init(1) IntegerRange(0, 1) Param\n+Whether to use canonical types.\n+\n+-param=vect-epilogues-nomask=\n+Common Joined UInteger Var(param_vect_epilogues_nomask) Init(1) IntegerRange(0, 1) Param\n+Enable loop epilogue vectorization using smaller vector size.\n+\n+-param=vect-max-peeling-for-alignment=\n+Common Joined UInteger Var(param_vect_max_peeling_for_alignment) Init(-1) IntegerRange(-1, 64) Param\n+Maximum number of loop peels to enhance alignment of data references in a loop.\n+\n+-param=vect-max-version-for-alias-checks=\n+Common Joined UInteger Var(param_vect_max_version_for_alias_checks) Init(10) Param\n+Bound on number of runtime checks inserted by the vectorizer's loop versioning for alias check.\n+\n+-param=vect-max-version-for-alignment-checks=\n+Common Joined UInteger Var(param_vect_max_version_for_alignment_checks) Init(6) Param\n+Bound on number of runtime checks inserted by the vectorizer's loop versioning for alignment check.\n+\n+; This comment is to ensure we retain the blank line above."}]}