{"sha": "4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY1OGZlMzZjMTQxYzJhMzI4YjYwODFiZTdkOWNkZjIwM2NmMmZjZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-09-09T08:39:13Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-09-09T08:39:13Z"}, "message": "[AArch64][1/3] Expand signed mod by power of 2 using CSNEG\n\n\t* config/aarch64/aarch64.md (mod<mode>3): New define_expand.\n\t(*neg<mode>2_compare0): Rename to...\n\t(neg<mode>2_compare0): ... This.\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs, MOD case):\n\tMove check for speed inside the if-then-elses.  Reflect\n\tCSNEG sequence in MOD by power of 2 case.\n\nFrom-SVN: r227585", "tree": {"sha": "029f6807ac622b179c0baa4c28b32bfe41ca019e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/029f6807ac622b179c0baa4c28b32bfe41ca019e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cbf37c3d58bd0dbd5f79c6b2e24b35764e6fb0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbf37c3d58bd0dbd5f79c6b2e24b35764e6fb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbf37c3d58bd0dbd5f79c6b2e24b35764e6fb0a"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "25ecf5a89a5531dcd4f7ff5053074b43a4678692", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "patch": "@@ -1,3 +1,12 @@\n+2015-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (mod<mode>3): New define_expand.\n+\t(*neg<mode>2_compare0): Rename to...\n+\t(neg<mode>2_compare0): ... This.\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs, MOD case):\n+\tMove check for speed inside the if-then-elses.  Reflect\n+\tCSNEG sequence in MOD by power of 2 case.\n+\n 2015-09-09  Alan Modra  <amodra@gmail.com>\n \n \tPR target/67378"}, {"sha": "b2a481b4c29bca692a77cb573ed0d6d152db272f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "patch": "@@ -6769,6 +6769,25 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n       return true;\n \n     case MOD:\n+    /* We can expand signed mod by power of 2 using a NEGS, two parallel\n+       ANDs and a CSNEG.  Assume here that CSNEG is the same as the cost of\n+       an unconditional negate.  This case should only ever be reached through\n+       the set_smod_pow2_cheap check in expmed.c.  */\n+      if (CONST_INT_P (XEXP (x, 1))\n+\t  && exact_log2 (INTVAL (XEXP (x, 1))) > 0\n+\t  && (mode == SImode || mode == DImode))\n+\t{\n+\t  /* We expand to 4 instructions.  Reset the baseline.  */\n+\t  *cost = COSTS_N_INSNS (4);\n+\n+\t  if (speed)\n+\t    *cost += 2 * extra_cost->alu.logical\n+\t\t     + 2 * extra_cost->alu.arith;\n+\n+\t  return true;\n+\t}\n+\n+    /* Fall-through.  */\n     case UMOD:\n       if (speed)\n \t{"}, {"sha": "594bef005c669bbe8960e7cdd8c8bbb119b69b85", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "patch": "@@ -313,6 +313,62 @@\n   }\n )\n \n+;; Expansion of signed mod by a power of 2 using CSNEG.\n+;; For x0 % n where n is a power of 2 produce:\n+;; negs   x1, x0\n+;; and    x0, x0, #(n - 1)\n+;; and    x1, x1, #(n - 1)\n+;; csneg  x0, x0, x1, mi\n+\n+(define_expand \"mod<mode>3\"\n+  [(match_operand:GPI 0 \"register_operand\" \"\")\n+   (match_operand:GPI 1 \"register_operand\" \"\")\n+   (match_operand:GPI 2 \"const_int_operand\" \"\")]\n+  \"\"\n+  {\n+    HOST_WIDE_INT val = INTVAL (operands[2]);\n+\n+    if (val <= 0\n+       || exact_log2 (val) <= 0\n+       || !aarch64_bitmask_imm (val - 1, <MODE>mode))\n+      FAIL;\n+\n+    rtx mask = GEN_INT (val - 1);\n+\n+    /* In the special case of x0 % 2 we can do the even shorter:\n+\tcmp    x0, xzr\n+\tand    x0, x0, 1\n+\tcneg   x0, x0, lt.  */\n+    if (val == 2)\n+      {\n+\trtx masked = gen_reg_rtx (<MODE>mode);\n+\trtx ccreg = aarch64_gen_compare_reg (LT, operands[1], const0_rtx);\n+\temit_insn (gen_and<mode>3 (masked, operands[1], mask));\n+\trtx x = gen_rtx_LT (VOIDmode, ccreg, const0_rtx);\n+\temit_insn (gen_csneg3<mode>_insn (operands[0], x, masked, masked));\n+\tDONE;\n+      }\n+\n+    rtx neg_op = gen_reg_rtx (<MODE>mode);\n+    rtx_insn *insn = emit_insn (gen_neg<mode>2_compare0 (neg_op, operands[1]));\n+\n+    /* Extract the condition register and mode.  */\n+    rtx cmp = XVECEXP (PATTERN (insn), 0, 0);\n+    rtx cc_reg = SET_DEST (cmp);\n+    rtx cond = gen_rtx_GE (VOIDmode, cc_reg, const0_rtx);\n+\n+    rtx masked_pos = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_and<mode>3 (masked_pos, operands[1], mask));\n+\n+    rtx masked_neg = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_and<mode>3 (masked_neg, neg_op, mask));\n+\n+    emit_insn (gen_csneg3<mode>_insn (operands[0], cond,\n+\t\t\t\t       masked_neg, masked_pos));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"*condjump\"\n   [(set (pc) (if_then_else (match_operator 0 \"aarch64_comparison_operator\"\n \t\t\t    [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n@@ -2457,7 +2513,7 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n-(define_insn \"*neg<mode>2_compare0\"\n+(define_insn \"neg<mode>2_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ (neg:GPI (match_operand:GPI 1 \"register_operand\" \"r\"))\n \t\t       (const_int 0)))"}]}