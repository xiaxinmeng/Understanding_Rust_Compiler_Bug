{"sha": "1b6c8b1231b2825c1de1d8649d83285f567418f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI2YzhiMTIzMWIyODI1YzFkZTFkODY0OWQ4MzI4NWY1Njc0MThmMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T07:16:22Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T07:16:22Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r898", "tree": {"sha": "8bfe9578f9d392ca5726dea81e6cad82b198e9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bfe9578f9d392ca5726dea81e6cad82b198e9f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b6c8b1231b2825c1de1d8649d83285f567418f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6c8b1231b2825c1de1d8649d83285f567418f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6c8b1231b2825c1de1d8649d83285f567418f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6c8b1231b2825c1de1d8649d83285f567418f2/comments", "author": null, "committer": null, "parents": [{"sha": "4ad05694eabf86cd042941e7ee68b11ca782d657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad05694eabf86cd042941e7ee68b11ca782d657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad05694eabf86cd042941e7ee68b11ca782d657"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "07fc88206edbf7436d582675a1d7eff66cf301d4", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6c8b1231b2825c1de1d8649d83285f567418f2/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6c8b1231b2825c1de1d8649d83285f567418f2/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=1b6c8b1231b2825c1de1d8649d83285f567418f2", "patch": "@@ -330,7 +330,11 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, FRAME_POINTER_REG, STACK_POI\n    In general this is just CLASS; but on some machines\n    in some cases it is preferable to use a more restrictive class.  */\n \n-#define PREFERRED_RELOAD_CLASS(X,CLASS)  (CLASS)\n+/* We return GENERAL_REGS instead of GEN_AND_MEM_REGS.\n+   The latter offers no real additional possibilities\n+   and can cause spurious secondary reloading.  */ \n+#define PREFERRED_RELOAD_CLASS(X,CLASS) \\\n+ ((CLASS) == GEN_AND_MEM_REGS ? GENERAL_REGS : (CLASS))\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */"}]}