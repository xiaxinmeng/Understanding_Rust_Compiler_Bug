{"sha": "8e82c473f504c32c840daf09a347795b62b46fa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU4MmM0NzNmNTA0YzMyYzg0MGRhZjA5YTM0Nzc5NWI2MmI0NmZhMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-10-31T12:42:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-10-31T12:42:35Z"}, "message": "[C++ PATCH] Simplify overloads\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-10/msg02026.html\n\tgcc/cp/\n\t* cp-tree.h (OVL_DEDUP_P): New.\n\t* name-lookup.c (name_lookup::add_overload): Check OVL_DEDUP_P.\n\t(get_class_binding_direct): Likwise.\n\t* tree.c (ovl_make): Propagate OVL_DEDUP_P.\n\t(ovl_copy): Copy it.\n\t(ovl_insert): Do not keep using-decls ordered.\n\t(lookup_maybe_add): Adjust comment.\n\n\tgcc/testsuite/\n\t* g++.dg/lookup/using60.C: New.\n\nFrom-SVN: r265679", "tree": {"sha": "ee26394844175b85128db36fa5c68d04f2c8e7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee26394844175b85128db36fa5c68d04f2c8e7a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e82c473f504c32c840daf09a347795b62b46fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e82c473f504c32c840daf09a347795b62b46fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e82c473f504c32c840daf09a347795b62b46fa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e82c473f504c32c840daf09a347795b62b46fa3/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0db78d0a5e95572841a98754dca6c3513a3a334d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db78d0a5e95572841a98754dca6c3513a3a334d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db78d0a5e95572841a98754dca6c3513a3a334d"}], "stats": {"total": 92, "additions": 61, "deletions": 31}, "files": [{"sha": "8e586a1f51450e51e1542494681968a39b14973b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e82c473f504c32c840daf09a347795b62b46fa3", "patch": "@@ -1,3 +1,13 @@\n+2018-10-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (OVL_DEDUP_P): New.\n+\t* name-lookup.c (name_lookup::add_overload): Check OVL_DEDUP_P.\n+\t(get_class_binding_direct): Likwise.\n+\t* tree.c (ovl_make): Propagate OVL_DEDUP_P.\n+\t(ovl_copy): Copy it.\n+\t(ovl_insert): Do not keep using-decls ordered.\n+\t(lookup_maybe_add): Adjust comment.\n+\n 2018-10-30  Marek Polacek  <polacek@redhat.com>\n \n \tImplement P0892R2, explicit(bool)."}, {"sha": "03e88838cbe28c282297e87ba8767e796b425a49", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8e82c473f504c32c840daf09a347795b62b46fa3", "patch": "@@ -409,6 +409,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       SWITCH_STMT_ALL_CASES_P (in SWITCH_STMT)\n       REINTERPRET_CAST_P (in NOP_EXPR)\n       ALIGNOF_EXPR_STD_P (in ALIGNOF_EXPR)\n+      OVL_DEDUP_P (in OVERLOAD)\n    1: IDENTIFIER_KIND_BIT_1 (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -695,6 +696,8 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define OVL_CHAIN(NODE) \\\n   (((struct tree_overload*)OVERLOAD_CHECK (NODE))->common.chain)\n \n+/* If set, this or a subsequent overload contains decls that need deduping.  */\n+#define OVL_DEDUP_P(NODE)\tTREE_LANG_FLAG_0 (OVERLOAD_CHECK (NODE))\n /* If set, this was imported in a using declaration.   */\n #define OVL_USING_P(NODE)\tTREE_LANG_FLAG_1 (OVERLOAD_CHECK (NODE))\n /* If set, this overload is a hidden decl.  */"}, {"sha": "f2d9d2225050dded584257786e21942e532aba08", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8e82c473f504c32c840daf09a347795b62b46fa3", "patch": "@@ -422,7 +422,8 @@ name_lookup::add_overload (tree fns)\n       tree probe = fns;\n       if (flags & LOOKUP_HIDDEN)\n \tprobe = ovl_skip_hidden (probe);\n-      if (probe && TREE_CODE (probe) == OVERLOAD && OVL_USING_P (probe))\n+      if (probe && TREE_CODE (probe) == OVERLOAD\n+\t  && OVL_DEDUP_P (probe))\n \t{\n \t  /* We're about to add something found by a using\n \t     declaration, so need to engage deduping mode.  */\n@@ -1260,7 +1261,8 @@ get_class_binding_direct (tree klass, tree name, int type_or_fns)\n \n       if (type_or_fns < 0)\n \t/* Don't bother looking for field.  We don't want it.  */;\n-      else if (!val || (TREE_CODE (val) == OVERLOAD && OVL_USING_P (val)))\n+      else if (!val || (TREE_CODE (val) == OVERLOAD\n+\t\t\t&& OVL_DEDUP_P (val)))\n \t/* Dependent using declarations are a 'field', make sure we\n \t   return that even if we saw an overload already.  */\n \tif (tree field_val = fields_linear_search (klass, lookup,"}, {"sha": "74018e97bb76c90806c524209bb3b2476308f3b2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8e82c473f504c32c840daf09a347795b62b46fa3", "patch": "@@ -2153,6 +2153,8 @@ ovl_make (tree fn, tree next)\n \n   TREE_TYPE (result) = (next || TREE_CODE (fn) == TEMPLATE_DECL\n \t\t\t? unknown_type_node : TREE_TYPE (fn));\n+  if (next && TREE_CODE (next) == OVERLOAD && OVL_DEDUP_P (next))\n+    OVL_DEDUP_P (result) = true;\n   OVL_FUNCTION (result) = fn;\n   OVL_CHAIN (result) = next;\n   return result;\n@@ -2167,64 +2169,54 @@ ovl_copy (tree ovl)\n   TREE_TYPE (result) = TREE_TYPE (ovl);\n   OVL_FUNCTION (result) = OVL_FUNCTION (ovl);\n   OVL_CHAIN (result) = OVL_CHAIN (ovl);\n+  OVL_DEDUP_P (result) = OVL_DEDUP_P (ovl);\n+  OVL_LOOKUP_P (result) = OVL_LOOKUP_P (ovl);\n   OVL_HIDDEN_P (result) = OVL_HIDDEN_P (ovl);\n   OVL_USING_P (result) = OVL_USING_P (ovl);\n-  OVL_LOOKUP_P (result) = OVL_LOOKUP_P (ovl);\n \n   return result;\n }\n \n /* Add FN to the (potentially NULL) overload set OVL.  USING_P is\n    true, if FN is via a using declaration.  We also pay attention to\n-   DECL_HIDDEN.  Overloads are ordered as hidden, using, regular.  */\n+   DECL_HIDDEN.  We keep the hidden decls first, but remaining ones\n+   are unordered.  */\n \n tree\n ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n {\n-  bool copying = false; /* Checking use only.  */\n-  bool hidden_p = DECL_HIDDEN_P (fn);\n-  int weight = (hidden_p << 1) | (using_p << 0);\n-\n-  tree result = NULL_TREE;\n+  tree result = maybe_ovl;\n   tree insert_after = NULL_TREE;\n \n-  /* Find insertion point.  */\n-  while (maybe_ovl && TREE_CODE (maybe_ovl) == OVERLOAD\n-\t && (weight < ((OVL_HIDDEN_P (maybe_ovl) << 1)\n-\t\t       | (OVL_USING_P (maybe_ovl) << 0))))\n+  /* Skip hidden.  */\n+  for (; maybe_ovl && TREE_CODE (maybe_ovl) == OVERLOAD\n+\t && OVL_HIDDEN_P (maybe_ovl);\n+       maybe_ovl = OVL_CHAIN (maybe_ovl))\n     {\n       gcc_checking_assert (!OVL_LOOKUP_P (maybe_ovl)\n-\t\t\t   && (!copying || OVL_USED_P (maybe_ovl)));\n-      if (OVL_USED_P (maybe_ovl))\n-\t{\n-\t  copying = true;\n-\t  maybe_ovl = ovl_copy (maybe_ovl);\n-\t  if (insert_after)\n-\t    OVL_CHAIN (insert_after) = maybe_ovl;\n-\t}\n-      if (!result)\n-\tresult = maybe_ovl;\n+\t\t\t   && !OVL_USED_P (maybe_ovl));\n       insert_after = maybe_ovl;\n-      maybe_ovl = OVL_CHAIN (maybe_ovl);\n     }\n \n-  tree trail = fn;\n+  bool hidden_p = DECL_HIDDEN_P (fn);\n   if (maybe_ovl || using_p || hidden_p || TREE_CODE (fn) == TEMPLATE_DECL)\n     {\n-      trail = ovl_make (fn, maybe_ovl);\n+      maybe_ovl = ovl_make (fn, maybe_ovl);\n       if (hidden_p)\n-\tOVL_HIDDEN_P (trail) = true;\n+\tOVL_HIDDEN_P (maybe_ovl) = true;\n       if (using_p)\n-\tOVL_USING_P (trail) = true;\n+\tOVL_DEDUP_P (maybe_ovl) = OVL_USING_P (maybe_ovl) = true;\n     }\n+  else\n+    maybe_ovl = fn;\n \n   if (insert_after)\n     {\n-      OVL_CHAIN (insert_after) = trail;\n+      OVL_CHAIN (insert_after) = maybe_ovl;\n       TREE_TYPE (insert_after) = unknown_type_node;\n     }\n   else\n-    result = trail;\n+    result = maybe_ovl;\n \n   return result;\n }\n@@ -2367,7 +2359,8 @@ lookup_maybe_add (tree fns, tree lookup, bool deduping)\n \t    for (; fns != probe; fns = OVL_CHAIN (fns))\n \t      {\n \t\tlookup = lookup_add (OVL_FUNCTION (fns), lookup);\n-\t\t/* Propagate OVL_USING, but OVL_HIDDEN doesn't matter.  */\n+\t\t/* Propagate OVL_USING, but OVL_HIDDEN &\n+\t\t   OVL_DEDUP_P don't matter.  */\n \t\tif (OVL_USING_P (fns))\n \t\t  OVL_USING_P (lookup) = true;\n \t      }"}, {"sha": "18c3ac644788606bc899c31bac1533b6831391df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e82c473f504c32c840daf09a347795b62b46fa3", "patch": "@@ -1,3 +1,7 @@\n+2018-10-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/using60.C: New.\n+\n 2018-10-31  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70359"}, {"sha": "9a275e908fa2b5225fc493a582f97b027ce9aaf6", "filename": "gcc/testsuite/g++.dg/lookup/using60.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e82c473f504c32c840daf09a347795b62b46fa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing60.C?ref=8e82c473f504c32c840daf09a347795b62b46fa3", "patch": "@@ -0,0 +1,18 @@\n+// ICE with overloads not ordering using decls.  Failed to invoke\n+// deduping logic\n+\n+void remove (const char *);\n+\n+namespace std\n+{\n+  using ::remove;\n+\n+  void remove ();\n+}\n+\n+using namespace std;\n+\n+void test01 ()\n+{\n+  remove (0);\n+}"}]}