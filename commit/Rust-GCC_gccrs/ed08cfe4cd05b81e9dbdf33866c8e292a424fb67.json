{"sha": "ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwOGNmZTRjZDA1YjgxZTlkYmRmMzM4NjZjOGUyOTJhNDI0ZmI2Nw==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-09-25T05:05:07Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-09-25T05:05:07Z"}, "message": "2002-09-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramPacket\n\t(DatagramPacket): Exception documentation added.\n\t(setData): Likewise.\n\t(setSocketAddress): Likewise.\n\t* java/net/DatagramSocketImpl.java\n\t(peek): Documentation addded.\n\t(peekData): Documentation addded.\n\t(send): Documentation addded.\n\t(receive): Documentation addded.\n\t(connect): New method.\n\t(disconnect): New method.\n\t(joinGroup): New abstract method.\n\t(leaveGroup): New abstract method.\n\t* java/net/InetSocketAddress.java\n\t(InetSocketAddress): Documentation added.\n\t(equals): final keyword added.\n\t(getAddress): final keyword added.\n\t(getHostName): final keyword added.\n\t(getPort): final keyword added.\n\t(hashCode): final keyword added.\n\t(isUnresolved): final keyword added.\n\t* java/net/MulticastSocket.java\n\t(MulticastSocket): Documentation added.\n\t(MulticastSocket): New method.\n\t(joinGroup): Documentation added.\n\t(joinGroup): New method.\n\t(leaveGroup): Documentation added.\n\t(leaveGroup): New method.\n\t(send): Documentation added.\n\t* java/net/NetworkInterface.java\n\t(getByName): Documentation added.\n\t(getByInetAddress): Documentation added.\n\t(getNetworkInterfaces): Documentation added.\n\t* java/net/PlainDatagramSocketImpl.java\n\t(connect): New method.\n\t(disconnect): New method.\n\t* java/net/SocketImpl.java\n\t(create): Documentation added.\n\t(shutdownInput): Convert public to protected, as it always was.\n\t(shutdownOutput): Convert public to protected, as it always was.\n\t* java/net/SocketOptions.java\n\t(whole file): Reintented.\n\t* java/net/URLClassLoader.java\n\t(URLClassLoader): SecurityManager check added, documentation added.\n\t(findResources): Documentation added.\n\t(findClass): Documentation added.\n\t(newInstance): More correct method arguments.\n\t* java/net/URLConnection.java\n        (connect): Documentation added.\n        (getContent): Documentation added.\n        (getPermission): Documentation added.\n        (getInputStream): Documentation added.\n        (getOutputStream): Documentation added.\n        (setDoInput): Throw correct exception, documentation added.\n        (setDoOutput): Throw correct exception, documentation added.\n        (setAllowUserInteraction): Throw correct exception, documentation added.\n        (setUseCaches): Throw correct exception, documentation added.\n        (setIfModifiedSince): Throw correct exception, documentation added.\n        (setRequestProperty): Throw exception, documentation added.\n        (addRequestProperty): Throw exception, documentation added.\n        (getRequestProperty): Throw exception, documentation added.\n        (getRequestProperties): Documentation added.\n        (setContentHandlerFactory): Documentation added.\n        (guessContentTypeFromName): protected to public.\n        (setFileNameMap): Documentation added.\n        * java/net/URLDecoder.java\n        (URLDecoder): New method.\n        (decode): Documentation added.\n        (whole file): Reindented.\n        * java/net/URLEncoder.java\n        (encode): Documentation added.\n        * java/net/natPlainDatagramSocketImpl.cc\n        (connect): New method.\n        (disconnect): New method.\n        * javax/naming/RefAddr:\n        (addrType): addrType was never final.\n        (equals): Fix typo in method name.\n        * javax/naming/BinaryRefAddr:\n        (equals): Fix typo in method name.\n\nFrom-SVN: r57487", "tree": {"sha": "39ea9a29a7413c3343fed19100ab8885a7a52d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39ea9a29a7413c3343fed19100ab8885a7a52d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/comments", "author": null, "committer": null, "parents": [{"sha": "95ddd785f615b57b28764a3466b9cb167512a414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ddd785f615b57b28764a3466b9cb167512a414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ddd785f615b57b28764a3466b9cb167512a414"}], "stats": {"total": 794, "additions": 584, "deletions": 210}, "files": [{"sha": "62339d037ce3deaf0ef49f56aac69301d1388ba9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 84, "deletions": 2, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -1,3 +1,85 @@\n+2002-09-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramPacket\n+\t(DatagramPacket): Exception documentation added.\n+\t(setData): Likewise.\n+\t(setSocketAddress): Likewise.\n+\t* java/net/DatagramSocketImpl.java\n+\t(peek): Documentation addded.\n+\t(peekData): Documentation addded.\n+\t(send): Documentation addded.\n+\t(receive): Documentation addded.\n+\t(connect): New method.\n+\t(disconnect): New method.\n+\t(joinGroup): New abstract method.\n+\t(leaveGroup): New abstract method.\n+\t* java/net/InetSocketAddress.java\n+\t(InetSocketAddress): Documentation added.\n+\t(equals): final keyword added.\n+\t(getAddress): final keyword added.\n+\t(getHostName): final keyword added.\n+\t(getPort): final keyword added.\n+\t(hashCode): final keyword added.\n+\t(isUnresolved): final keyword added.\n+\t* java/net/MulticastSocket.java\n+\t(MulticastSocket): Documentation added.\n+\t(MulticastSocket): New method.\n+\t(joinGroup): Documentation added.\n+\t(joinGroup): New method.\n+\t(leaveGroup): Documentation added.\n+\t(leaveGroup): New method.\n+\t(send): Documentation added.\n+\t* java/net/NetworkInterface.java\n+\t(getByName): Documentation added.\n+\t(getByInetAddress): Documentation added.\n+\t(getNetworkInterfaces): Documentation added.\n+\t* java/net/PlainDatagramSocketImpl.java\n+\t(connect): New method.\n+\t(disconnect): New method.\n+\t* java/net/SocketImpl.java\n+\t(create): Documentation added.\n+\t(shutdownInput): Convert public to protected, as it always was.\n+\t(shutdownOutput): Convert public to protected, as it always was.\n+\t* java/net/SocketOptions.java\n+\t(whole file): Reintented.\n+\t* java/net/URLClassLoader.java\n+\t(URLClassLoader): SecurityManager check added, documentation added.\n+\t(findResources): Documentation added.\n+\t(findClass): Documentation added.\n+\t(newInstance): More correct method arguments.\n+\t* java/net/URLConnection.java\n+\t(connect): Documentation added.\n+\t(getContent): Documentation added.\n+\t(getPermission): Documentation added.\n+\t(getInputStream): Documentation added.\n+\t(getOutputStream): Documentation added.\n+\t(setDoInput): Throw correct exception, documentation added.\n+\t(setDoOutput): Throw correct exception, documentation added.\n+\t(setAllowUserInteraction): Throw correct exception, documentation added.\n+\t(setUseCaches): Throw correct exception, documentation added.\n+\t(setIfModifiedSince): Throw correct exception, documentation added.\n+\t(setRequestProperty): Throw exception, documentation added.\n+\t(addRequestProperty): Throw exception, documentation added.\n+\t(getRequestProperty): Throw exception, documentation added.\n+\t(getRequestProperties): Documentation added.\n+\t(setContentHandlerFactory): Documentation added.\n+\t(guessContentTypeFromName): protected to public.\n+\t(setFileNameMap): Documentation added.\n+\t* java/net/URLDecoder.java\n+\t(URLDecoder): New method.\n+\t(decode): Documentation added.\n+\t(whole file): Reindented.\n+\t* java/net/URLEncoder.java\n+\t(encode): Documentation added.\n+\t* java/net/natPlainDatagramSocketImpl.cc\n+\t(connect): New method.\n+\t(disconnect): New method.\n+\t* javax/naming/RefAddr:\n+\t(addrType): addrType was never final.\n+\t(equals): Fix typo in method name.\n+\t* javax/naming/BinaryRefAddr:\n+\t(equals): Fix typo in method name.\n+\n 2002-09-22  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/6576:\n@@ -40,8 +122,8 @@\n \n 2002-09-19  Tom Tromey  <tromey@redhat.com>\n \n-\t* java/lang/ClassLoader.java (resolveClass0): Set cause for\n-\tnewly-created exception.\n+       * java/lang/ClassLoader.java (resolveClass0): Set cause for\n+       newly-created exception.\n \n 2002-09-18  Michael Koch  <konqueror@gmx.de>\n "}, {"sha": "7fbb3f8da357c9ac1e165458976cb66600e62c41", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -195,6 +195,7 @@ public DatagramPacket(byte[] buf, int length, InetAddress address, int port)\n    * @param address The socket address to send to\n    *\n    * @exception SocketException If an error occurs\n+   * @exception IllegalArgumentException If address type is not supported\n    *\n    * @since 1.4\n    */\n@@ -215,6 +216,7 @@ public DatagramPacket(byte[] buf, int offset, int length,\n    * @param address The socket address to send to\n    *\n    * @exception SocketException If an error occurs\n+   * @exception IllegalArgumentException If address type is not supported\n    *\n    * @since 1.4\n    */\n@@ -321,7 +323,7 @@ public synchronized void setPort(int iport)\n    *\n    * @param address The socket address of the remove host\n    *\n-   * @exception IllegalArgumentException If an error occurs\n+   * @exception IllegalArgumentException If address type is not supported\n    *\n    * @since 1.4\n    */\n@@ -353,6 +355,8 @@ public SocketAddress getSocketAddress()\n    *\n    * @param buf The new buffer for this packet\n    *\n+   * @exception NullPointerException If the argument is null\n+   *\n    * @since 1.1\n    */\n   public synchronized void setData(byte[] buf)\n@@ -372,6 +376,8 @@ public synchronized void setData(byte[] buf)\n    * @param offset The offset into the buffer to start reading data from.\n    * @param length The number of bytes of data in the buffer.\n    *\n+   * @exception NullPointerException If the argument is null\n+   *\n    * @since 1.2\n    */\n   public synchronized void setData(byte[] buf, int offset, int length)\n@@ -398,6 +404,9 @@ public synchronized void setData(byte[] buf, int offset, int length)\n    *\n    * @param length The new length.  (Where len <= buf.length)\n    *\n+   * @exception IllegalArgumentException f the length is negative or\n+   * if the length is greater than the packet's data buffer length\n+   *\n    * @since 1.1\n    */\n   public synchronized void setLength(int length)"}, {"sha": "5a0aa3e4acdd938831f822c7f61906dbf9caefdd", "filename": "libjava/java/net/DatagramSocketImpl.java", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -108,6 +108,9 @@ protected abstract void bind(int lport, InetAddress laddr)\n    * @return The port number of the sender of the packet\n    *\n    * @exception IOException If an error occurs\n+   * @exception PortUnreachableException May be thrown if the socket is\n+   * connected to a currently unreachable destination. Note, there is no\n+   * guarantee that the exception will be thrown.\n    */\n   protected abstract int peek(InetAddress i) throws IOException;\n \n@@ -120,6 +123,9 @@ protected abstract void bind(int lport, InetAddress laddr)\n    * @return The port number of the sender of the packet.\n    * \n    * @exception IOException If an error occurs\n+   * @exception PortUnreachableException May be thrown if the socket is\n+   * connected to a currently unreachable destination. Note, there is no\n+   * guarantee that the exception will be thrown.\n    * \n    * @since 1.4\n    */\n@@ -132,6 +138,9 @@ protected abstract void bind(int lport, InetAddress laddr)\n    * @param p The packet to send\n    *\n    * @exception IOException If an error occurs\n+   * @exception PortUnreachableException May be thrown if the socket is\n+   * connected to a currently unreachable destination. Note, there is no\n+   * guarantee that the exception will be thrown.\n    */\n   protected abstract void send(DatagramPacket p) throws IOException;\n \n@@ -143,9 +152,37 @@ protected abstract void bind(int lport, InetAddress laddr)\n    * @param p A place to store the incoming packet.\n    *\n    * @exception IOException If an error occurs\n+   * @exception PortUnreachableException May be thrown if the socket is\n+   * connected to a currently unreachable destination. Note, there is no\n+   * guarantee that the exception will be thrown.\n    */\n   protected abstract void receive(DatagramPacket p) throws IOException;\n \n+  /**\n+   * Connects the socket to a host specified by address and port.\n+   *\n+   * @param address The InetAddress of the host to connect to\n+   * @param port The port number of the host to connect to\n+   *\n+   * @exception SocketException If an error occurs\n+   *\n+   * @since 1.4\n+   */\n+  protected void connect (InetAddress address, int port) throws SocketException\n+  {\n+    // This method has to be overwritten by real implementations\n+  }\n+\n+  /**\n+   * Disconnects the socket.\n+   * \n+   * @since 1.4\n+   */\n+  protected void disconnect ()\n+  {\n+    // This method has to be overwritten by real implementations\n+  }\n+\n   /**\n    * Sets the Time to Live (TTL) setting on this socket to the specified\n    * value. <b>Use <code>setTimeToLive(int)</code></b> instead.\n@@ -202,6 +239,35 @@ protected abstract void bind(int lport, InetAddress laddr)\n    */\n   protected abstract void leave(InetAddress inetaddr) throws IOException;\n \n+  /**\n+   * Causes this socket to join the specified multicast group on a specified\n+   * device \n+   * \n+   * @param mcastaddr The address to leave\n+   * @param netIf The specified network interface to join the group at\n+   *\n+   * @exception IOException If an error occurs\n+   * \n+   * @since 1.4\n+   */\n+  protected abstract void joinGroup (SocketAddress mcastaddr,\n+\t\t                     NetworkInterface netIf)\n+    throws IOException;\n+\n+  /**\n+   * Leaves a multicast group\n+   * \n+   * @param mcastaddr The address to join\n+   * @param netIf The specified network interface to leave the group at\n+   *\n+   * @exception IOException If an error occurs\n+   * \n+   * @since 1.4\n+   */\n+  protected abstract void leaveGroup (SocketAddress mcastaddr,\n+\t\t                      NetworkInterface netIf)\n+    throws IOException;\n+  \n   /**\n    * Returns the FileDescriptor for this socket\n    */"}, {"sha": "20ebbfaec5a739215ed96347691b65d8f5029d8c", "filename": "libjava/java/net/InetSocketAddress.java", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FInetSocketAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FInetSocketAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetSocketAddress.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -73,7 +73,7 @@ public InetSocketAddress(InetAddress addr, int port)\n      * \n      * @param port Port if the socket\n      *\n-     * @exception IllegalArgumentException If the port number is illegel\n+     * @exception IllegalArgumentException If the port number is illegal\n      */\n     public InetSocketAddress(int port)\n \tthrows IllegalArgumentException\n@@ -91,9 +91,11 @@ public InetSocketAddress(int port)\n \n     /**\n      * Constructs an InetSocketAddress instance.\n-     * \n+     *\n      * @param addr Address of the socket\n      * @param port Port if the socket\n+     *\n+     * @exception IllegalArgumentException If the port number is illegal\n      */\n     public InetSocketAddress(String hostname, int port)\n \tthrows IllegalArgumentException\n@@ -112,7 +114,7 @@ public InetSocketAddress(String hostname, int port)\n      * Test if obj is a InetSocketAddress and\n      * has the same address & port\n      */\n-    public boolean equals(Object obj)\n+    public final boolean equals(Object obj)\n     {\n \tif (obj instanceof InetSocketAddress)\n \t    {\n@@ -122,33 +124,33 @@ public boolean equals(Object obj)\n \treturn false;\n     }\n \n-    public InetAddress getAddress()\n+    public final InetAddress getAddress()\n     {\n \treturn addr;\n     }\n \n-    public String getHostName()\n+    public final String getHostName()\n     {\n \treturn addr.getHostName();\n     }\n \n-    public int getPort()\n+    public final int getPort()\n     {\n \treturn port;\n     }\n     \n     /**\n      * TODO: see what sun does here.\n      */\n-    public int hashCode()\n+    public final int hashCode()\n     {\n \treturn port + addr.hashCode();\n     }\n \n     /**\n      * TODO: see what sun does here.\n      */\n-    public boolean isUnresolved()\n+    public final boolean isUnresolved()\n     {\n \treturn addr == null;\n     }"}, {"sha": "b3582605a57dff57f3592d17ae8f5c30ff66f4c4", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -73,6 +73,8 @@ public class MulticastSocket extends DatagramSocket\n    * Create a MulticastSocket that this not bound to any address\n    *\n    * @exception IOException If an error occurs\n+   * @exception SecurityException If a security manager exists and its\n+   * checkListen method doesn't allow the operation\n    */\n   public MulticastSocket() throws IOException\n   {\n@@ -85,12 +87,30 @@ public MulticastSocket() throws IOException\n    * @param port The port to bind to\n    *\n    * @exception IOException If an error occurs\n+   * @exception SecurityException If a security manager exists and its\n+   * checkListen method doesn't allow the operation\n    */\n   public MulticastSocket(int port) throws IOException\n   {\n     super(port, null);\n   }\n \n+  /**\n+   * Create a multicast socket bound to the specified SocketAddress.\n+   *\n+   * @param address The SocketAddress the multicast socket will be bound to\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception SecurityException If a security manager exists and its\n+   * checkListen method doesn't allow the operation\n+   *\n+   * @since 1.4\n+   */\n+  public MulticastSocket(SocketAddress address) throws IOException\n+  {\n+    super(address);\n+  }\n+  \n   /**\n    * Returns the interface being used for multicast packets\n    * \n@@ -232,6 +252,7 @@ public void setTimeToLive(int ttl) throws IOException\n    * @param addr The address of the group to join\n    * \n    * @exception IOException If an error occurs\n+   * @exception SecurityException FIXME\n    */\n   public void joinGroup(InetAddress mcastaddr) throws IOException\n   {\n@@ -251,6 +272,7 @@ public void joinGroup(InetAddress mcastaddr) throws IOException\n    * @param addr The address of the group to leave\n    *\n    * @exception IOException If an error occurs\n+   * @exception SecurityException FIXME\n    */\n   public void leaveGroup(InetAddress mcastaddr) throws IOException\n   {\n@@ -264,6 +286,74 @@ public void leaveGroup(InetAddress mcastaddr) throws IOException\n     impl.leave(mcastaddr);\n   }\n \n+  /**\n+   * Joins the specified mulitcast group on a specified interface.\n+   *\n+   * @param mcastaddr The multicast address to join\n+   * @param netIf The local network interface to receive the multicast\n+   * messages on or null to defer the interface set by #setInterface or\n+   * #setNetworkInterface\n+   * \n+   * @exception IOException If an error occurs\n+   * @exception IllegalArgumentException If address type is not supported\n+   * @exception SecurityException FIXME\n+   *\n+   * @see MulticastSocket:setInterface\n+   * @see MulticastSocket:setNetworkInterface\n+   *\n+   * @since 1.4\n+   */\n+  public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n+    throws IOException\n+  {\n+    if (! (mcastaddr instanceof InetSocketAddress))\n+      throw new IllegalArgumentException (\"SocketAddress type not supported\");\n+\n+    InetSocketAddress tmp = (InetSocketAddress) mcastaddr;\n+    \n+    if (! tmp.getAddress ().isMulticastAddress ())\n+      throw new IOException (\"Not a Multicast address\");\n+\n+    // FIXME: check if this check is sufficient. Do we need to check the port ?\n+    SecurityManager s = System.getSecurityManager ();\n+    if (s != null)\n+      s.checkMulticast (tmp.getAddress ());\n+\n+    impl.joinGroup (mcastaddr, netIf);\n+  }\n+  \n+  /**\n+   * Leaves the specified mulitcast group on a specified interface.\n+   *\n+   * @param mcastaddr The multicast address to leave\n+   * @param netIf The local networki interface or null to defer to the\n+   * interface set by setInterface or setNetworkInterface \n+   *\n+   * @exception IOException If an error occurs\n+   * @exception IllegalArgumentException If address type is not supported\n+   * @exception SecurityException FIXME\n+   *\n+   * @see MulticastSocket:setInterface\n+   * @see MulticastSocket:setNetworkInterface\n+   *\n+   * @since 1.4\n+   */\n+  public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n+    throws IOException\n+  {\n+    InetSocketAddress tmp = (InetSocketAddress) mcastaddr;\n+    \n+    if (! tmp.getAddress ().isMulticastAddress ())\n+      throw new IOException (\"Not a Multicast address\");\n+\n+    // FIXME: do we need to check the port too, or is this sufficient ?\n+    SecurityManager s = System.getSecurityManager ();\n+    if (s != null)\n+      s.checkMulticast (tmp.getAddress ());\n+\n+    impl.leaveGroup (mcastaddr, netIf);\n+  }\n+  \n   /**\n    * Sends a packet of data to a multicast address with a TTL that is\n    * different from the default TTL on this socket.  The default TTL for\n@@ -273,6 +363,7 @@ public void leaveGroup(InetAddress mcastaddr) throws IOException\n    * @param ttl The TTL for this packet\n    *\n    * @exception IOException If an error occurs\n+   * @exception SecurityException FIXME\n    */\n   public synchronized void send(DatagramPacket p, byte ttl) throws IOException\n   {"}, {"sha": "f0113d03808fbbb6aefca57933d6a5b5054a6a84", "filename": "libjava/java/net/NetworkInterface.java", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetworkInterface.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -118,6 +118,9 @@ public String getDisplayName ()\n    *  Returns an network interface by name\n    *\n    *  @param name The name of the interface to return\n+   *\n+   *  @exception SocketException If an error occurs\n+   *  @exception NullPointerException If the specified name is null\n    */\n   public static NetworkInterface getByName (String name)\n     throws SocketException\n@@ -141,6 +144,9 @@ public static NetworkInterface getByName (String name)\n    *  Return a network interface by its address\n    *\n    *  @param addr The address of the interface to return\n+   *\n+   *  @exception SocketException If an error occurs\n+   *  @exception NullPointerException If the specified addess is null\n    */\n   public static NetworkInterface getByInetAddress (InetAddress addr)\n     throws SocketException\n@@ -167,6 +173,8 @@ public static NetworkInterface getByInetAddress (InetAddress addr)\n \n   /**\n    *  Return an Enumeration of all available network interfaces\n+   *\n+   *  @exception SocketException If an error occurs\n    */\n   public static Enumeration getNetworkInterfaces ()\n     throws SocketException"}, {"sha": "118021d189f39a85a17f7f56520196ac38884c8e", "filename": "libjava/java/net/PlainDatagramSocketImpl.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -63,6 +63,9 @@ public PlainDatagramSocketImpl()\n \n   protected native void bind(int lport, InetAddress laddr)\n \tthrows SocketException;\n+  protected native void connect (InetAddress i, int port)\n+\tthrows SocketException;\n+  protected native void disconnect ();\n   protected native void create() throws SocketException;\n   protected native int peek(InetAddress i) throws IOException;\n   protected native int peekData (DatagramPacket dp) throws IOException;"}, {"sha": "795e7139beeed0481bb9caca907a58d810251e91", "filename": "libjava/java/net/SocketImpl.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImpl.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -95,6 +95,8 @@ public SocketImpl()\n    * if the stream parameter is false.\n    *\n    * @param stream true for a stream socket, false for a datagram socket\n+   *\n+   * @exception IOException If an error occurs\n    */\n   protected abstract void create(boolean stream) throws IOException;\n \n@@ -311,13 +313,13 @@ public abstract void setOption(int option_id, Object val)\n    *\n    * @exception IOException if an error occurs\n    */\n-  public abstract void shutdownInput () throws IOException;\n+  protected abstract void shutdownInput () throws IOException;\n \n   /**\n    * Shut down the output side of this socket.  Subsequent writes will\n    * fail with an IOException.\n    *\n    * @exception IOException if an error occurs\n    */\n-  public abstract void shutdownOutput () throws IOException;\n+  protected abstract void shutdownOutput () throws IOException;\n }"}, {"sha": "628e08e8de2564829a96a3d8649cefdfe494950a", "filename": "libjava/java/net/SocketOptions.java", "status": "modified", "additions": 116, "deletions": 133, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FSocketOptions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FSocketOptions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketOptions.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -43,142 +43,125 @@\n  */\n \n /**\n-  * This interface is used by <code>SocketImpl</code> and \n-  * <code>DatagramSocketImpl</code> to implement options\n-  * on sockets.  \n-  *\n-  * @since 1.2\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @status should be completely JDK 1.4 compatible\n-  */\n+ * This interface is used by <code>SocketImpl</code> and \n+ * <code>DatagramSocketImpl</code> to implement options\n+ * on sockets.  \n+ *\n+ * @since 1.2\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @status should be completely JDK 1.4 compatible\n+ */\n public interface SocketOptions\n {\n-\n-/*************************************************************************/\n-\n-/*\n- * Static Variables\n- */\n-\n-/**\n- * Option id for the SO_KEEPALIVE value\n- * @since 1.3\n- */\n-static final int SO_KEEPALIVE = 0x8;\n+  /**\n+   * Option id for the SO_KEEPALIVE value\n+   * @since 1.3\n+   */\n+  static final int SO_KEEPALIVE = 0x8;\n \t\n-/**\n-  * Option id for the SO_LINGER value\n-  */\n-static final int SO_LINGER = 0x80; // 128\n-\n-/**\n-  * Option id for the SO_TIMEOUT value\n-  */\n-static final int SO_TIMEOUT = 0x1006; // 4102\n-\n-/**\n-  * Retrieve the local address to which the socket is bound.\n-  */\n-static final int SO_BINDADDR = 0x0F; // 15\n-\n-/**\n-  * Option id for the send buffer size\n-  * @since 1.2\n-  */\n-static final int SO_SNDBUF = 0x1001; // 4097\n-\n-/**\n-  * Option id for the receive buffer size\n-  * @since 1.2\n-  */\n-static final int SO_RCVBUF = 0x1002; // 4098\n-\n-/**\n-  * Sets the SO_REUSEADDR parameter on a socket\n-  */\n-static final int SO_REUSEADDR = 0x04; // 4\n-\n-/**\n- * Sets SO_BROADCAST for a socket\n- * @since 1.4\n- */\n-static final int SO_BROADCAST = 0x20; // 32\n-\n-/**\n- * Sets SO_OOBINLINE for a socket\n- * @since 1.4\n- */\n-static final int SO_OOBINLINE = 0x1003; // 4099\n-\n-/**\n-  * Option id for the TCP_NODELAY value\n-  */\n-static final int TCP_NODELAY = 0x01; // 1\n-\n-/**\n-  * Options id for the IP_MULTICAST_IF value\n-  */\n-static final int IP_MULTICAST_IF = 0x10; // 16\n-\n-/**\n- * same as above\n- * @since 1.4\n- */\n-static final int IP_MULTICAST_IF2 = 0x1F; // 31\n-\n-/**\n- * This option enables or disables local loopback of multicast datagrams.\n- * @since 1.4\n- */\n-static final int IP_MULTICAST_LOOP = 0x12; // 18\n-\n-/**\n- * This option sets the type-of-service or traffic class field in the\n- * IP header for a TCP or UDP socket.\n- * @since 1.4\n- */\n-static final int IP_TOS = 0x03; // 3\n-\n-/*************************************************************************/\n-\n-/*\n- * Interface Methods\n- */\n-\n-/**\n-  * Sets the specified option on a socket to the passed in object.  For\n-  * options that take an integer argument, the passed in object is an\n-  * <code>Integer</code>.  For options that are set to on or off, the\n-  * value passed will be a <code>Boolean</code>.   The <code>option_id</code> \n-  * parameter is one of the defined constants in this interface.\n-  *\n-  * @param option_id The identifier of the option\n-  * @param val The value to set the option to\n-  *\n-  * @exception SocketException If an error occurs\n-  */\n-void\n-setOption(int option_id, Object val) throws SocketException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the current setting of the specified option.  The \n-  * <code>Object</code> returned will be an <code>Integer</code> for options \n-  * that have integer values.  For options that are set to on or off, a \n-  * <code>Boolean</code> will be returned.   The <code>option_id</code>\n-  * is one of the defined constants in this interface.\n-  *\n-  * @param option_id The option identifier\n-  *\n-  * @return The current value of the option\n-  *\n-  * @exception SocketException If an error occurs\n-  */\n-Object\n-getOption(int option_id) throws SocketException;\n+  /**\n+   * Option id for the SO_LINGER value\n+   */\n+  static final int SO_LINGER = 0x80; // 128\n+\n+  /**\n+   * Option id for the SO_TIMEOUT value\n+   */\n+  static final int SO_TIMEOUT = 0x1006; // 4102\n+\n+  /**\n+   * Retrieve the local address to which the socket is bound.\n+   */\n+  static final int SO_BINDADDR = 0x0F; // 15\n+\n+  /**\n+   * Option id for the send buffer size\n+   * @since 1.2\n+   */\n+  static final int SO_SNDBUF = 0x1001; // 4097\n+\n+  /**\n+   * Option id for the receive buffer size\n+   * @since 1.2\n+   */\n+  static final int SO_RCVBUF = 0x1002; // 4098\n+\n+  /**\n+   * Sets the SO_REUSEADDR parameter on a socket\n+   */\n+  static final int SO_REUSEADDR = 0x04; // 4\n+\n+  /**\n+   * Sets SO_BROADCAST for a socket\n+   * @since 1.4\n+   */\n+  static final int SO_BROADCAST = 0x20; // 32\n+\n+  /**\n+   * Sets SO_OOBINLINE for a socket\n+   * @since 1.4\n+   */\n+  static final int SO_OOBINLINE = 0x1003; // 4099\n+\n+  /**\n+    * Option id for the TCP_NODELAY value\n+    */\n+  static final int TCP_NODELAY = 0x01; // 1\n+\n+  /**\n+    * Options id for the IP_MULTICAST_IF value\n+    */\n+  static final int IP_MULTICAST_IF = 0x10; // 16\n+\n+  /**\n+   * same as above\n+   * @since 1.4\n+   */\n+  static final int IP_MULTICAST_IF2 = 0x1F; // 31\n+\n+  /**\n+   * This option enables or disables local loopback of multicast datagrams.\n+   * @since 1.4\n+   */\n+  static final int IP_MULTICAST_LOOP = 0x12; // 18\n+\n+  /**\n+   * This option sets the type-of-service or traffic class field in the\n+   * IP header for a TCP or UDP socket.\n+   * @since 1.4\n+   */\n+  static final int IP_TOS = 0x03; // 3\n+\n+  /**\n+   * Sets the specified option on a socket to the passed in object.  For\n+   * options that take an integer argument, the passed in object is an\n+   * <code>Integer</code>.  For options that are set to on or off, the\n+   * value passed will be a <code>Boolean</code>.   The <code>option_id</code>\n+   * parameter is one of the defined constants in this interface.\n+   *\n+   * @param option_id The identifier of the option\n+   * @param val The value to set the option to\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n+  void setOption(int option_id, Object val) throws SocketException;\n+\n+  /**\n+   * Returns the current setting of the specified option.  The\n+   * <code>Object</code> returned will be an <code>Integer</code> for options\n+   * that have integer values.  For options that are set to on or off, a\n+   * <code>Boolean</code> will be returned.   The <code>option_id</code>\n+   * is one of the defined constants in this interface.\n+   *\n+   * @param option_id The option identifier\n+   *\n+   * @return The current value of the option\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n+  Object getOption(int option_id) throws SocketException;\n \n } // interface SocketOptions\n "}, {"sha": "5e059cf9cb63cb896d21f9acffd5c332d3f959bc", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -40,11 +40,23 @@ private URLStreamHandler getHandler0 (String protocol)\n       return null;\n   }\n \n+  /**\n+   * Createa a new URL class loader object\n+   *\n+   * @exception SecurityException If a security manager exists and its\n+   * checkCreateClassLoader method doesn't allow creation of a class loader\n+   */\n   public URLClassLoader (URL[] urls)\n   { \n     this (urls, null, null);\n   }\n-  \n+ \n+  /**\n+   * Createa a new URL class loader object\n+   *\n+   * @exception SecurityException If a security manager exists and its\n+   * checkCreateClassLoader method doesn't allow creation of a class loader\n+   */\n   public URLClassLoader (URL[] urls, ClassLoader parent)\n   { \n     this (urls, parent, null);\n@@ -100,11 +112,21 @@ protected void addURL (URL url)\n     info.addElement (conn);\n   }\n \n+  /**\n+   * Createa a new URL class loader object\n+   *\n+   * @exception SecurityException If a security manager exists and its\n+   * checkCreateClassLoader method doesn't allow creation of a class loader\n+   */\n   public URLClassLoader (URL[] urls, ClassLoader parent,\n \t\t\t URLStreamHandlerFactory fac)\n   { \n     super (parent);\n \n+    SecurityManager s = System.getSecurityManager();\n+    if (s != null)\n+      s.checkCreateClassLoader();\n+\n     factory = fac;\n \n     if (urls == null || urls.length == 0)\n@@ -150,7 +172,13 @@ public URL[] getURLs ()\n     path.copyInto (urls);\n     return urls;\n   }\n-  \n+ \n+  /**\n+   * Returns an Enumeration of URLs representing all of the resources on the\n+   * URL search path having the specified name\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public Enumeration findResources (String name)\n   {\n     Vector results = new Vector ();\n@@ -224,7 +252,12 @@ public URL findResource (String name)\n     return null;\n   }\n \n-  // and finally, we can implement our class loader functionality.\n+  /**\n+   * Finds and loads the class with the specified name from the\n+   * URL search path\n+   *\n+   * @exception ClassNotFoundException If the class could not be found\n+   */\n   protected Class findClass (String name)\n     throws ClassNotFoundException\n   {\n@@ -404,7 +437,7 @@ protected PermissionCollection getPermissions(CodeSource source)\n    * system class loader.\n    * @param urls the initial URLs used to resolve classes and resources\n    */\n-  public static URLClassLoader newInstance(URL urls[]) throws\n+  public static URLClassLoader newInstance(URL[] urls) throws\n     SecurityException\n   {\n     return new URLClassLoader(urls);\n@@ -416,7 +449,7 @@ public static URLClassLoader newInstance(URL urls[]) throws\n    * @param urls the initial URLs used to resolve classes and resources\n    * @param parent the parent class loader\n    */\n-  public static URLClassLoader newInstance(URL urls[],\n+  public static URLClassLoader newInstance(URL[] urls,\n \t\t\t\t\t   ClassLoader parent)\n     throws SecurityException\n   {"}, {"sha": "91c229d51def519a1d3a5159a838a8809cc3cf0c", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -72,6 +72,8 @@ protected URLConnection(URL url)\n   /**\n    * Creates a real connection to the object references by the URL given\n    * to the constructor\n+   *\n+   * @exception IOException If an error occurs\n    */\n   public abstract void connect() throws IOException;\n \n@@ -229,6 +231,10 @@ public String getHeaderFieldKey(int num)\n \n   /**\n    * Retrieves the content of this URLConnection\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception UnknownServiceException If the protocol does not support the\n+   * content type\n    */\n   public Object getContent() throws IOException\n   {\n@@ -248,6 +254,9 @@ public Object getContent() throws IOException\n    * Returns a permission object representing the permission necessary to make\n    * the connection represented by this object. This method returns null if no\n    * permission is required to make the connection.\n+   *\n+   * @exception IOException If the computation of the permission requires\n+   * network or file I/O and an exception occurs while computing it\n    */\n   public Permission getPermission() throws IOException\n   {\n@@ -257,6 +266,9 @@ public Permission getPermission() throws IOException\n \n   /**\n    * Returns the input stream of the URL connection\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception UnknownServiceException If the protocol does not support input\n    */\n   public InputStream getInputStream() throws IOException\n   {\n@@ -267,6 +279,9 @@ public InputStream getInputStream() throws IOException\n \n   /**\n    * Returns the output stream of the URL connection\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception UnknownServiceException If the protocol does not support output\n    */\n   public OutputStream getOutputStream() throws IOException\n   {\n@@ -287,11 +302,13 @@ public String toString()\n    * Sets tha value of the doInput field.\n    *\n    * @param doinput The new value of the doInput field\n+   *\n+   * @exception IllegalStateException If already connected\n    */\n   public void setDoInput(boolean doinput)\n   {\n     if (connected)\n-      throw new IllegalAccessError(\"Already connected\");\n+      throw new IllegalStateException (\"Already connected\");\n \n     doInput = doinput;\n   }\n@@ -308,11 +325,13 @@ public boolean getDoInput()\n    * Sets the value of the doOutput field\n    *\n    * @param dooutput The new value of the doOutput field\n+   *\n+   * @exception IllegalStateException If already connected\n    */\n   public void setDoOutput(boolean dooutput)\n   {\n     if (connected)\n-      throw new IllegalAccessError(\"Already connected\");\n+      throw new IllegalStateException (\"Already connected\");\n \n     doOutput = dooutput;\n   }\n@@ -329,11 +348,13 @@ public boolean getDoOutput()\n    * Sets a new value to the allowUserInteraction field\n    *\n    * @param allowed The new value\n+   *\n+   * @exception IllegalStateException If already connected\n    */\n   public void setAllowUserInteraction(boolean allowed)\n   {\n     if (connected)\n-      throw new IllegalAccessError(\"Already connected\");\n+      throw new IllegalStateException (\"Already connected\");\n \n     allowUserInteraction = allowed;\n   }\n@@ -368,11 +389,13 @@ public static boolean getDefaultAllowUserInteraction()\n    * Sets a new value to the useCaches field\n    *\n    * @param usecaches The new value\n+   *\n+   * @exception IllegalStateException If already connected\n    */\n   public void setUseCaches(boolean usecaches)\n   {\n     if (connected)\n-      throw new IllegalAccessError(\"Already connected\");\n+      throw new IllegalStateException (\"Already connected\");\n \n     useCaches = usecaches;\n   }\n@@ -390,11 +413,13 @@ public boolean getUseCaches()\n    *\n    * @param ifmodifiedsince The new value in milliseconds\n    * since January 1, 1970 GMT\n+   *\n+   * @exception IllegalStateException If already connected\n    */\n   public void setIfModifiedSince(long ifmodifiedsince)\n   {\n     if (connected)\n-      throw new IllegalAccessError(\"Already connected\");\n+      throw new IllegalStateException (\"Already connected\");\n \n     ifModifiedSince = ifmodifiedsince;\n   }\n@@ -431,11 +456,17 @@ public void setDefaultUseCaches(boolean defaultusecaches)\n    * @param key Key of the property to set\n    * @param value Value of the Property to set\n    *\n+   * @exception IllegalStateException If already connected\n+   * @exception NullPointerException If key is null\n+   *\n    * @see URLConnection:getRequestProperty(String key)\n-   * @see URLConnection:addRequestProperty/String key, String value)\n+   * @see URLConnection:addRequestProperty(String key, String value)\n    */\n   public void setRequestProperty(String key, String value)\n   {\n+    if (connected)\n+      throw new IllegalStateException (\"Already connected\");\n+\n     // Do nothing unless overridden by subclasses that support setting\n     // header fields in the request.\n   }\n@@ -446,6 +477,9 @@ public void setRequestProperty(String key, String value)\n    * \n    * @param key Key of the property to add\n    * @param value Value of the Property to add\n+   *\n+   * @exception IllegalStateException If already connected\n+   * @exception NullPointerException If key is null\n    * \n    * @see URLConnection:getRequestProperty(String key)\n    * @see URLConnection:setRequestProperty(String key, String value)\n@@ -454,6 +488,9 @@ public void setRequestProperty(String key, String value)\n    */\n   public void addRequestProperty(String key, String value)\n   {\n+    if (connected)\n+      throw new IllegalStateException (\"Already connected\");\n+\n     if (getRequestProperty (key) == null)\n       {\n         setRequestProperty (key, value);\n@@ -465,13 +502,18 @@ public void addRequestProperty(String key, String value)\n    *\n    * @param key Key of the property to return\n    *\n+   * @exception IllegalStateException If already connected\n+   *\n    * @see URLConnection:setRequestProperty(String key, String value)\n    * @see URLConnection:addRequestProperty(String key, String value)\n    * \n    * @return Value of the property.\n    */\n   public String getRequestProperty(String key)\n   {\n+    if (connected)\n+      throw new IllegalStateException (\"Already connected\");\n+\n     // Overridden by subclasses that support reading header fields from the\n     // request.\n     return null;\n@@ -480,6 +522,8 @@ public String getRequestProperty(String key)\n   /**\n    * Returns a map that contains all properties of the request\n    *\n+   * @exception IllegalStateException If already connected\n+   *\n    * @return The map of properties\n    */\n   public Map getRequestProperties()\n@@ -526,6 +570,10 @@ public static String getDefaultRequestProperty(String key)\n    * Sets a ContentHandlerFactory\n    *\n    * @param fac The ContentHandlerFactory\n+   *\n+   * @exception Error If the factory has already been defined\n+   * @exception SecurityException If a security manager exists and its\n+   * checkSetFactory method doesn't allow the operation\n    */\n   public static void setContentHandlerFactory(ContentHandlerFactory fac)\n   {\n@@ -545,8 +593,10 @@ public static void setContentHandlerFactory(ContentHandlerFactory fac)\n    * specified file name\n    *\n    * @param fname The filename to guess the content type from\n+   *\n+   * @specnote public since JDK 1.4\n    */\n-  protected static String guessContentTypeFromName(String fname)\n+  public static String guessContentTypeFromName(String fname)\n   {\n     int dot = fname.lastIndexOf (\".\");\n     \n@@ -597,6 +647,9 @@ public static FileNameMap getFileNameMap()\n    * Sets a FileNameMap\n    *\n    * @param map The new FileNameMap\n+   *\n+   * @exception SecurityException If a security manager exists and its\n+   * checkSetFactory method doesn't allow the operation\n    * \n    * @since 1.2\n    */"}, {"sha": "8cdcf94382589821c23ba630e59453a56208b47f", "filename": "libjava/java/net/URLDecoder.java", "status": "modified", "additions": 59, "deletions": 49, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLDecoder.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -39,38 +39,45 @@\n \n import java.io.UnsupportedEncodingException;\n \n- /**\n-  * This utility class contains static methods that converts a \n-  * string encoded in the x-www-form-urlencoded format to the original\n-  * text.  The x-www-form-urlencoded format replaces certain disallowed\n-  * characters with encoded equivalents.  All upper case and lower case\n-  * letters in the US alphabet remain as is, the space character (' ')\n-  * is replaced with '+' sign, and all other characters are converted to a\n-  * \"%XX\" format where XX is the hexadecimal representation of that character\n-  * in a given character encoding (default is \"UTF-8\").\n-  * <p>\n-  * This method is very useful for decoding strings sent to CGI scripts\n-  *\n-  * Written using on-line Java Platform 1.2/1.4 API Specification.\n-  * Status:  Believed complete and correct.\n-  *\n-  * @since 1.2\n-  *\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @author Aaron M. Renn (arenn@urbanophile.com) (documentation comments)\n-  * @author Mark Wielaard (mark@klomp.org)\n-  */\n+/**\n+ * This utility class contains static methods that converts a \n+ * string encoded in the x-www-form-urlencoded format to the original\n+ * text.  The x-www-form-urlencoded format replaces certain disallowed\n+ * characters with encoded equivalents.  All upper case and lower case\n+ * letters in the US alphabet remain as is, the space character (' ')\n+ * is replaced with '+' sign, and all other characters are converted to a\n+ * \"%XX\" format where XX is the hexadecimal representation of that character\n+ * in a given character encoding (default is \"UTF-8\").\n+ * <p>\n+ * This method is very useful for decoding strings sent to CGI scripts\n+ *\n+ * Written using on-line Java Platform 1.2/1.4 API Specification.\n+ * Status:  Believed complete and correct.\n+ *\n+ * @since 1.2\n+ *\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com) (documentation comments)\n+ * @author Mark Wielaard (mark@klomp.org)\n+ */\n public class URLDecoder\n {\n- /**\n-  * This method translates the passed in string from x-www-form-urlencoded\n-  * format using the default encoding \"UTF-8\" to decode the hex encoded\n-  * unsafe characters.\n-  *\n-  * @param s the String to convert\n-  *\n-  * @return the converted String\n-  */\n+  /**\n+   * Constructor for compatibility with Sun's JDK.\n+   */\n+  public URLDecoder ()\n+  {\n+  }\n+\n+  /**\n+   * This method translates the passed in string from x-www-form-urlencoded\n+   * format using the default encoding \"UTF-8\" to decode the hex encoded\n+   * unsafe characters.\n+   *\n+   * @param s the String to convert\n+   *\n+   * @return the converted String\n+   */\n   public static String decode(String s)\n   {\n     try\n@@ -84,25 +91,28 @@ public static String decode(String s)\n       }\n   }\n \n- /**\n-  * This method translates the passed in string from x-www-form-urlencoded\n-  * format using the given character encoding to decode the hex encoded\n-  * unsafe characters.\n-  * <p>\n-  * This implementation will decode the string even if it contains\n-  * unsafe characters (characters that should have been encoded) or if the\n-  * two characters following a % do not represent a hex encoded byte.\n-  * In those cases the unsafe character or the % character will be added\n-  * verbatim to the decoded result.\n-  *\n-  * @param s the String to convert\n-  * @param encoding the character encoding to use the decode the hex encoded\n-  *        unsafe characters\n-  *\n-  * @return the converted String\n-  *\n-  * @since 1.4\n-  */\n+  /**\n+   * This method translates the passed in string from x-www-form-urlencoded\n+   * format using the given character encoding to decode the hex encoded\n+   * unsafe characters.\n+   *\n+   * This implementation will decode the string even if it contains\n+   * unsafe characters (characters that should have been encoded) or if the\n+   * two characters following a % do not represent a hex encoded byte.\n+   * In those cases the unsafe character or the % character will be added\n+   * verbatim to the decoded result.\n+   *\n+   * @param s the String to convert\n+   * @param encoding the character encoding to use the decode the hex encoded\n+   *        unsafe characters\n+   *\n+   * @return the converted String\n+   *\n+   * @exception UnsupportedEncodingException If the named encoding is not\n+   * supported\n+   *\n+   * @since 1.4\n+   */\n   public static String decode(String s, String encoding)\n     throws UnsupportedEncodingException\n   {"}, {"sha": "345ef2404d5063db822a450159c38c945d561c46", "filename": "libjava/java/net/URLEncoder.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLEncoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FURLEncoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLEncoder.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -94,6 +94,9 @@ public static String encode(String s)\n    *\n    * @return The converted String\n    *\n+   * @exception UnsupportedEncodingException If the named encoding is not\n+   * supported\n+   *\n    * @since 1.4\n    */\n   public static String encode(String s, String encoding)"}, {"sha": "82e280631a80c7b638ea2a11c15cace9f1e32d07", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -86,6 +86,20 @@ java::net::PlainDatagramSocketImpl::bind (jint, java::net::InetAddress *)\n     JvNewStringLatin1 (\"DatagramSocketImpl.bind: unimplemented\"));\n }\n \n+void\n+java::net::PlainDatagramSocketImpl::connect (java::net::InetAddress *, jint)\n+{\n+  throw new java::io::SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.connect: unimplemented\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::disconnect ()\n+{\n+  throw new java::io::SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.disconnect: unimplemented\"));\n+}\n+\n jint\n java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *)\n {\n@@ -265,6 +279,21 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n   throw new java::net::BindException (JvNewStringUTF (strerr));\n }\n \n+void\n+java::net::PlainDatagramSocketImpl::connect (java::net::InetAddress *addr,\n+\t\t                             jint  port)\n+{ \n+  throw new ::java::lang::InternalError (\n+    JvNewStringLatin1 (\"PlainDatagramSocketImpl::connect: not implemented yet\"));\n+}\n+\n+void\n+java::net::PlainDatagramSocketImpl::disconnect ()\n+{\n+  throw new ::java::lang::InternalError (\n+    JvNewStringLatin1 (\"PlainDatagramSocketImpl::disconnect: not implemented yet\"));\n+}\n+\n jint\n java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *i)\n {"}, {"sha": "d0a3a030f869b9d1cff97516310579b21e92bea5", "filename": "libjava/javax/naming/BinaryRefAddr.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -97,7 +97,7 @@ public Object getContent ()\n    *         the addrType is the same as this addrType and the bytes of the\n    *         content are the same.\n    */\n-  public boolean equal(Object o)\n+  public boolean equals(Object o)\n   {\n     if (o instanceof BinaryRefAddr)\n       {"}, {"sha": "a1c096c10d8a1cc4a42a49523b9b35a2adba5cec", "filename": "libjava/javax/naming/RefAddr.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjavax%2Fnaming%2FRefAddr.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed08cfe4cd05b81e9dbdf33866c8e292a424fb67/libjava%2Fjavax%2Fnaming%2FRefAddr.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FRefAddr.java?ref=ed08cfe4cd05b81e9dbdf33866c8e292a424fb67", "patch": "@@ -61,7 +61,7 @@ public abstract class RefAddr implements Serializable\n    * The string resprenstation of the type of address.\n    * Set by the constructor and returned by the getType() method.\n    */\n-  protected final String addrType;\n+  protected String addrType;\n \n   /**\n    * Protected constructor for use by subclasses.\n@@ -98,7 +98,7 @@ public String getType()\n    *         is the same as this addrType and the content is equals to the\n    *         content of this object.\n    */\n-  public boolean equal(Object o)\n+  public boolean equals(Object o)\n   {\n     if (o instanceof RefAddr)\n       {"}]}