{"sha": "4f431835313bc7d2c13508e8ed7b465e4c5ad8c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0MzE4MzUzMTNiYzdkMmMxMzUwOGU4ZWQ3YjQ2NWU0YzVhZDhjOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-03-30T15:36:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-03-30T15:36:45Z"}, "message": "re PR bootstrap/48332 (optabs changes (PR48263 fix) broke m68k-linux bootstrap)\n\ngcc/\n\tPR rtl-optimization/48332\n\t* optabs.c (expand_binop_directly): Set xmodeN to the target-mandated\n\tmode of input operand N and modeN to its actual mode.\n\nFrom-SVN: r171733", "tree": {"sha": "139f47c1833e817b3c52c99c3c3298474b0f5bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/139f47c1833e817b3c52c99c3c3298474b0f5bce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8/comments", "author": null, "committer": null, "parents": [{"sha": "f72f4169133572cf62f1e872c5657cdbc4d5de2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72f4169133572cf62f1e872c5657cdbc4d5de2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72f4169133572cf62f1e872c5657cdbc4d5de2c"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "6f575e35dbc2fbf401a4441a7281463d43c0866f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f431835313bc7d2c13508e8ed7b465e4c5ad8c8", "patch": "@@ -1,3 +1,9 @@\n+2011-03-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR rtl-optimization/48332\n+\t* optabs.c (expand_binop_directly): Set xmodeN to the target-mandated\n+\tmode of input operand N and modeN to its actual mode.\n+\n 2011-03-30  Jeff Law  <law@redhat.com>\n \n \t* reload.h (reg_equiv_constant): Move into new structure reg_equivs,"}, {"sha": "e60abf83255b06348f37f972ee3ad826e50d8c9d", "filename": "gcc/optabs.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f431835313bc7d2c13508e8ed7b465e4c5ad8c8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4f431835313bc7d2c13508e8ed7b465e4c5ad8c8", "patch": "@@ -1243,9 +1243,9 @@ expand_binop_directly (enum machine_mode mode, optab binoptab,\n \t\t       rtx last)\n {\n   enum insn_code icode = optab_handler (binoptab, mode);\n-  enum machine_mode mode0 = insn_data[(int) icode].operand[1].mode;\n-  enum machine_mode mode1 = insn_data[(int) icode].operand[2].mode;\n-  enum machine_mode tmp_mode;\n+  enum machine_mode xmode0 = insn_data[(int) icode].operand[1].mode;\n+  enum machine_mode xmode1 = insn_data[(int) icode].operand[2].mode;\n+  enum machine_mode mode0, mode1, tmp_mode;\n   struct expand_operand ops[3];\n   bool commutative_p;\n   rtx pat;\n@@ -1256,38 +1256,38 @@ expand_binop_directly (enum machine_mode mode, optab binoptab,\n      if we would swap the operands, we can save the conversions.  */\n   commutative_p = commutative_optab_p (binoptab);\n   if (commutative_p\n-      && GET_MODE (xop0) != mode0 && GET_MODE (xop1) != mode1\n-      && GET_MODE (xop0) == mode1 && GET_MODE (xop1) == mode1)\n+      && GET_MODE (xop0) != xmode0 && GET_MODE (xop1) != xmode1\n+      && GET_MODE (xop0) == xmode1 && GET_MODE (xop1) == xmode1)\n     {\n       swap = xop0;\n       xop0 = xop1;\n       xop1 = swap;\n     }\n \n   /* If we are optimizing, force expensive constants into a register.  */\n-  xop0 = avoid_expensive_constant (mode0, binoptab, xop0, unsignedp);\n+  xop0 = avoid_expensive_constant (xmode0, binoptab, xop0, unsignedp);\n   if (!shift_optab_p (binoptab))\n-    xop1 = avoid_expensive_constant (mode1, binoptab, xop1, unsignedp);\n+    xop1 = avoid_expensive_constant (xmode1, binoptab, xop1, unsignedp);\n \n   /* In case the insn wants input operands in modes different from\n      those of the actual operands, convert the operands.  It would\n      seem that we don't need to convert CONST_INTs, but we do, so\n      that they're properly zero-extended, sign-extended or truncated\n      for their mode.  */\n \n-  if (GET_MODE (xop0) != mode0 && mode0 != VOIDmode)\n-    xop0 = convert_modes (mode0,\n-\t\t\t  GET_MODE (xop0) != VOIDmode\n-\t\t\t  ? GET_MODE (xop0)\n-\t\t\t  : mode,\n-\t\t\t  xop0, unsignedp);\n-\n-  if (GET_MODE (xop1) != mode1 && mode1 != VOIDmode)\n-    xop1 = convert_modes (mode1,\n-\t\t\t  GET_MODE (xop1) != VOIDmode\n-\t\t\t  ? GET_MODE (xop1)\n-\t\t\t  : mode,\n-\t\t\t  xop1, unsignedp);\n+  mode0 = GET_MODE (xop0) != VOIDmode ? GET_MODE (xop0) : mode;\n+  if (xmode0 != VOIDmode && xmode0 != mode0)\n+    {\n+      xop0 = convert_modes (xmode0, mode0, xop0, unsignedp);\n+      mode0 = xmode0;\n+    }\n+\n+  mode1 = GET_MODE (xop1) != VOIDmode ? GET_MODE (xop1) : mode;\n+  if (xmode1 != VOIDmode && xmode1 != mode1)\n+    {\n+      xop1 = convert_modes (xmode1, mode1, xop1, unsignedp);\n+      mode1 = xmode1;\n+    }\n \n   /* If operation is commutative,\n      try to make the first operand a register."}]}