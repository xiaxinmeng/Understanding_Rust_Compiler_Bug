{"sha": "9074464c14b99872a7ce360c883c1b0dc20c75be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3NDQ2NGMxNGI5OTg3MmE3Y2UzNjBjODgzYzFiMGRjMjBjNzViZQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-07-30T06:43:33Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-07-30T06:43:33Z"}, "message": "cppfiles.c (stack_file): Leave filename as \"\" rather than \"<stdin>\".\n\n\t* cppfiles.c (stack_file): Leave filename as \"\" rather than \"<stdin>\".\n\t* line-map.h (linemap_add): Update comments.\n\t* line-map.c (linemap_add): Update comments, interpret zero-length\n\tfilename as \"<stdin>\".\n\nFrom-SVN: r69952", "tree": {"sha": "05c6ec2250febb5e831a84ba041cdadb3cc76e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c6ec2250febb5e831a84ba041cdadb3cc76e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9074464c14b99872a7ce360c883c1b0dc20c75be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9074464c14b99872a7ce360c883c1b0dc20c75be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9074464c14b99872a7ce360c883c1b0dc20c75be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9074464c14b99872a7ce360c883c1b0dc20c75be/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1516eae87161cfec7d26ec445343718dd684c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1516eae87161cfec7d26ec445343718dd684c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1516eae87161cfec7d26ec445343718dd684c79"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "4bc73f3fdfc31f04967203caee6188ff4e402ffe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9074464c14b99872a7ce360c883c1b0dc20c75be", "patch": "@@ -1,3 +1,10 @@\n+2003-07-29  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* cppfiles.c (stack_file): Leave filename as \"\" rather than \"<stdin>\".\n+\t* line-map.h (linemap_add): Update comments.\n+\t* line-map.c (linemap_add): Update comments, interpret zero-length\n+\tfilename as \"<stdin>\".\n+\n 2003-07-29  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* mkinstalldirs: Import autoconf 2.57 / automake 1.7 version."}, {"sha": "66e4a6a9b0c577ea058860734460157aa46babca", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=9074464c14b99872a7ce360c883c1b0dc20c75be", "patch": "@@ -558,8 +558,6 @@ stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n \n   /* Generate the call back.  */\n   fname = file->name;\n-  if (*fname == '\\0')\n-    fname = \"<stdin>\";\n   _cpp_do_file_change (pfile, LC_ENTER, fname, 1, sysp);\n \n   return true;"}, {"sha": "f04350d780616534c3f3f225881938557f19bd04", "filename": "gcc/line-map.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.c?ref=9074464c14b99872a7ce360c883c1b0dc20c75be", "patch": "@@ -61,11 +61,17 @@ linemap_free (struct line_maps *set)\n }\n \n /* Add a mapping of logical source line to physical source file and\n-   line number.  The text pointed to by TO_FILE must have a lifetime\n-   at least as long as the final call to lookup_line ().\n+   line number.\n+\n+   The text pointed to by TO_FILE must have a lifetime\n+   at least as long as the final call to lookup_line ().  An empty\n+   TO_FILE means standard input.  If reason is LC_LEAVE, and\n+   TO_FILE is NULL, then TO_FILE, TO_LINE and SYSP are given their\n+   natural values considering the file we are returning to.\n \n    FROM_LINE should be monotonic increasing across calls to this\n-   function.  */\n+   function.  A call to this function can relocate the previous set of\n+   maps, so any stored line_map pointers should not be used.  */\n \n const struct line_map *\n linemap_add (struct line_maps *set, enum lc_reason reason,\n@@ -85,6 +91,9 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n \n   map = &set->maps[set->used++];\n \n+  if (to_file && *to_file == '\\0')\n+    to_file = \"<stdin>\";\n+\n   /* If we don't keep our line maps consistent, we can easily\n      segfault.  Don't rely on the client to do it for us.  */\n   if (set->depth == 0)"}, {"sha": "dcb6f7dca482d0b5b9079be090421abec3b6573d", "filename": "gcc/line-map.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9074464c14b99872a7ce360c883c1b0dc20c75be/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=9074464c14b99872a7ce360c883c1b0dc20c75be", "patch": "@@ -74,8 +74,11 @@ extern void linemap_init (struct line_maps *);\n extern void linemap_free (struct line_maps *);\n \n /* Add a mapping of logical source line to physical source file and\n-   line number.  The text pointed to by TO_FILE must have a lifetime\n-   at least as long as the line maps.  If reason is LC_LEAVE, and\n+   line number.\n+\n+   The text pointed to by TO_FILE must have a lifetime\n+   at least as long as the final call to lookup_line ().  An empty\n+   TO_FILE means standard input.  If reason is LC_LEAVE, and\n    TO_FILE is NULL, then TO_FILE, TO_LINE and SYSP are given their\n    natural values considering the file we are returning to.\n "}]}