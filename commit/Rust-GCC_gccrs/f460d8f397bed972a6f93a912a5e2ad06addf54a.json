{"sha": "f460d8f397bed972a6f93a912a5e2ad06addf54a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2MGQ4ZjM5N2JlZDk3MmE2ZjkzYTkxMmE1ZTJhZDA2YWRkZjU0YQ==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2011-11-21T12:02:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T12:02:41Z"}, "message": "sem_util.ads: Update comment describing function Deepest_Access_Level.\n\n2011-11-21  Steve Baird  <baird@adacore.com>\n\n\t* sem_util.ads: Update comment describing function\n\tDeepest_Access_Level.\n\t* sem_util.adb (Deepest_Type_Access_Level): Return Int'Last for a\n\tgeneric formal type.\n\t(Type_Access_Level): Return library level\n\tfor a generic formal type.\n\t* sem_attr.adb (Resolve_Attribute): Replace two Type_Access_Level\n\tcalls with calls to Deepest_Type_Access_Level.\n\t* sem_ch3.adb (Analyze_Component_Declaration): replace a\n\tType_Access_Level call with a call to Deepest_Type_Access_Level.\n\t* sem_res.adb (Resolve_Allocator.Check_Allocator_Discrim_Accessibility):\n\tReplace three Type_Access_Level calls with calls to\n\tDeepest_Type_Access_Level.\n\t(Resolve_Allocator): Replace a Type_Access_Level call with a call to\n\tDeepest_Type_Access_Level.\n\t(Valid_Conversion.Valid_Array_Conversion): Replace a\n\tType_Access_Level call with a call to Deepest_Type_Access_Level.\n\nFrom-SVN: r181570", "tree": {"sha": "3b367f66016a36d268daa922f9355a344b3c86b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b367f66016a36d268daa922f9355a344b3c86b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f460d8f397bed972a6f93a912a5e2ad06addf54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f460d8f397bed972a6f93a912a5e2ad06addf54a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f460d8f397bed972a6f93a912a5e2ad06addf54a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f460d8f397bed972a6f93a912a5e2ad06addf54a/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d673c5c5bd1a95f3e145624149f4ffca3472a583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d673c5c5bd1a95f3e145624149f4ffca3472a583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d673c5c5bd1a95f3e145624149f4ffca3472a583"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "ad67de5d4a9683fc1743cb993fdc02305f9e182d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f460d8f397bed972a6f93a912a5e2ad06addf54a", "patch": "@@ -1,3 +1,23 @@\n+2011-11-21  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.ads: Update comment describing function\n+\tDeepest_Access_Level.\n+\t* sem_util.adb (Deepest_Type_Access_Level): Return Int'Last for a\n+\tgeneric formal type.\n+\t(Type_Access_Level): Return library level\n+\tfor a generic formal type.\n+\t* sem_attr.adb (Resolve_Attribute): Replace two Type_Access_Level\n+\tcalls with calls to Deepest_Type_Access_Level.\n+\t* sem_ch3.adb (Analyze_Component_Declaration): replace a\n+\tType_Access_Level call with a call to Deepest_Type_Access_Level.\n+\t* sem_res.adb (Resolve_Allocator.Check_Allocator_Discrim_Accessibility):\n+\tReplace three Type_Access_Level calls with calls to\n+\tDeepest_Type_Access_Level.\n+\t(Resolve_Allocator): Replace a Type_Access_Level call with a call to\n+\tDeepest_Type_Access_Level.\n+\t(Valid_Conversion.Valid_Array_Conversion): Replace a\n+\tType_Access_Level call with a call to Deepest_Type_Access_Level.\n+\n 2011-11-21  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, s-taprop-vms.adb, opt.ads: Minor reformatting."}, {"sha": "4005ba2426a2d58f062130bf8b56431ace2bebf4", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f460d8f397bed972a6f93a912a5e2ad06addf54a", "patch": "@@ -8648,7 +8648,8 @@ package body Sem_Attr is\n                --  attribute is always legal in such a context.\n \n                if Attr_Id /= Attribute_Unchecked_Access\n-                 and then Object_Access_Level (P) > Type_Access_Level (Btyp)\n+                 and then\n+                   Object_Access_Level (P) > Deepest_Type_Access_Level (Btyp)\n                  and then Ekind (Btyp) = E_General_Access_Type\n                then\n                   Accessibility_Message;\n@@ -8670,7 +8671,7 @@ package body Sem_Attr is\n                --  anonymous_access_to_protected, there are no accessibility\n                --  checks either. Omit check entirely for Unrestricted_Access.\n \n-               elsif Object_Access_Level (P) > Type_Access_Level (Btyp)\n+               elsif Object_Access_Level (P) > Deepest_Type_Access_Level (Btyp)\n                  and then Comes_From_Source (N)\n                  and then Ekind (Btyp) = E_Access_Protected_Subprogram_Type\n                  and then Attr_Id /= Attribute_Unrestricted_Access"}, {"sha": "3587e07685a7b10770a0451a9f7f300d3837ff95", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f460d8f397bed972a6f93a912a5e2ad06addf54a", "patch": "@@ -1896,7 +1896,8 @@ package body Sem_Ch3 is\n             --  (Ada 2005: AI-230): Accessibility check for anonymous\n             --  components\n \n-            if Type_Access_Level (Etype (E)) > Type_Access_Level (T) then\n+            if Type_Access_Level (Etype (E)) >\n+              Deepest_Type_Access_Level (T) then\n                Error_Msg_N\n                  (\"expression has deeper access level than component \" &\n                   \"(RM 3.10.2 (12.2))\", E);"}, {"sha": "30421af048f97f5f076898203221985f161a797b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f460d8f397bed972a6f93a912a5e2ad06addf54a", "patch": "@@ -4086,7 +4086,7 @@ package body Sem_Res is\n       is\n       begin\n          if Type_Access_Level (Etype (Disc_Exp)) >\n-            Type_Access_Level (Alloc_Typ)\n+            Deepest_Type_Access_Level (Alloc_Typ)\n          then\n             Error_Msg_N\n               (\"operand type has deeper level than allocator type\", Disc_Exp);\n@@ -4098,7 +4098,7 @@ package body Sem_Res is\n            and then Get_Attribute_Id (Attribute_Name (Disc_Exp))\n                       = Attribute_Access\n            and then Object_Access_Level (Prefix (Disc_Exp))\n-                      > Type_Access_Level (Alloc_Typ)\n+                      > Deepest_Type_Access_Level (Alloc_Typ)\n          then\n             Error_Msg_N\n               (\"prefix of attribute has deeper level than allocator type\",\n@@ -4110,7 +4110,7 @@ package body Sem_Res is\n          elsif Ekind (Etype (Disc_Exp)) = E_Anonymous_Access_Type\n            and then Nkind (Disc_Exp) = N_Selected_Component\n            and then Object_Access_Level (Prefix (Disc_Exp))\n-                      > Type_Access_Level (Alloc_Typ)\n+                      > Deepest_Type_Access_Level (Alloc_Typ)\n          then\n             Error_Msg_N\n               (\"access discriminant has deeper level than allocator type\",\n@@ -4314,7 +4314,8 @@ package body Sem_Res is\n                Exp_Typ := Entity (E);\n             end if;\n \n-            if Type_Access_Level (Exp_Typ) > Type_Access_Level (Typ) then\n+            if Type_Access_Level (Exp_Typ) >\n+              Deepest_Type_Access_Level (Typ) then\n                if In_Instance_Body then\n                   Error_Msg_N (\"?type in allocator has deeper level than\" &\n                                \" designated class-wide type\", E);\n@@ -10358,7 +10359,7 @@ package body Sem_Res is\n                 Subtypes_Statically_Match (Target_Comp_Type, Opnd_Comp_Type)\n             then\n                if Type_Access_Level (Target_Type) <\n-                   Type_Access_Level (Opnd_Type)\n+                   Deepest_Type_Access_Level (Opnd_Type)\n                then\n                   if In_Instance_Body then\n                      Error_Msg_N (\"?source array type \" &"}, {"sha": "c3fe8f9bbfaa80765396d1a71f43e6ee25f5c4bc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f460d8f397bed972a6f93a912a5e2ad06addf54a", "patch": "@@ -2437,6 +2437,9 @@ package body Sem_Util is\n                          (Defining_Identifier\n                            (Associated_Node_For_Itype (Typ))));\n \n+      elsif Is_Generic_Type (Root_Type (Typ)) then\n+         return UI_From_Int (Int'Last);\n+\n       else\n          return Type_Access_Level (Typ);\n       end if;\n@@ -12714,6 +12717,10 @@ package body Sem_Util is\n          end if;\n       end if;\n \n+      if Is_Generic_Type (Root_Type (Btyp)) then\n+         return Scope_Depth (Standard_Standard);\n+      end if;\n+\n       return Scope_Depth (Enclosing_Dynamic_Scope (Btyp));\n    end Type_Access_Level;\n "}, {"sha": "693ddf2def95cf80f9890d27b84165ea3211350e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f460d8f397bed972a6f93a912a5e2ad06addf54a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=f460d8f397bed972a6f93a912a5e2ad06addf54a", "patch": "@@ -314,7 +314,9 @@ package Sem_Util is\n    --  static accesssibility level of the object. In that case, the dynamic\n    --  accessibility level of the object may take on values in a range. The low\n    --  bound of of that range is returned by Type_Access_Level; this function\n-   --  yields the high bound of that range.\n+   --  yields the high bound of that range. Also differs from Type_Access_Level\n+   --  in the case of a descendant of a generic formal type (returns Int'Last\n+   --  instead of 0).\n \n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the"}]}