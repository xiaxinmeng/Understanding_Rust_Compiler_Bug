{"sha": "423933c298b2dd87ff3c0bf77ae1bba8a6ca715b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIzOTMzYzI5OGIyZGQ4N2ZmM2MwYmY3N2FlMWJiYThhNmNhNzE1Yg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-01-25T04:14:56Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-01-25T04:14:56Z"}, "message": "(emit_conditional_move): Declare it.\n\n(can_conditionally_move_p): Likewise.\n(movcc_gen_code): Likewise.\n\nFrom-SVN: r8798", "tree": {"sha": "a9272e2e7ebb3419e04c3aa8edc428a3abe419ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9272e2e7ebb3419e04c3aa8edc428a3abe419ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/423933c298b2dd87ff3c0bf77ae1bba8a6ca715b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423933c298b2dd87ff3c0bf77ae1bba8a6ca715b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423933c298b2dd87ff3c0bf77ae1bba8a6ca715b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423933c298b2dd87ff3c0bf77ae1bba8a6ca715b/comments", "author": null, "committer": null, "parents": [{"sha": "c4e0f0610e274d228b675c0f679c13db9875afbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e0f0610e274d228b675c0f679c13db9875afbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e0f0610e274d228b675c0f679c13db9875afbc"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "aa235bd69d485c26d725778155cf12112ff21984", "filename": "gcc/expr.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423933c298b2dd87ff3c0bf77ae1bba8a6ca715b/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423933c298b2dd87ff3c0bf77ae1bba8a6ca715b/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=423933c298b2dd87ff3c0bf77ae1bba8a6ca715b", "patch": "@@ -460,6 +460,13 @@ extern rtxfun bcc_gen_fctn[NUM_RTX_CODE];\n \n extern enum insn_code setcc_gen_code[NUM_RTX_CODE];\n \n+#ifdef HAVE_conditional_move\n+/* Indexed by the the machine mode, gives the insn code to make a conditional\n+   move insn.  */\n+\n+extern enum insn_code movcc_gen_code[NUM_MACHINE_MODES];\n+#endif\n+\n /* This array records the insn_code of insns to perform block moves.  */\n extern enum insn_code movstr_optab[NUM_MACHINE_MODES];\n \n@@ -517,6 +524,16 @@ extern void emit_float_lib_cmp PROTO((rtx, rtx, enum rtx_code));\n /* Generate code to indirectly jump to a location given in the rtx LOC.  */\n extern void emit_indirect_jump PROTO((rtx));\n \n+#ifdef HAVE_conditional_move\n+/* Emit a conditional move operation.  */\n+rtx emit_conditional_move PROTO((rtx, enum rtx_code, rtx, rtx,\n+\t\t\t\t enum machine_mode, rtx, rtx,\n+\t\t\t\t enum machine_mode, int));\n+\n+/* Return non-zero if the conditional move is supported.  */\n+int can_conditionally_move_p PROTO((enum machine_mode mode));\n+#endif\n+\n /* Create but don't emit one rtl instruction to add one rtx into another.\n    Modes must match; operands must meet the operation's predicates.\n    Likewise for subtraction and for just copying."}]}