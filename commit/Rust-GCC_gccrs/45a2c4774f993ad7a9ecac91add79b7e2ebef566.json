{"sha": "45a2c4774f993ad7a9ecac91add79b7e2ebef566", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhMmM0Nzc0Zjk5M2FkN2E5ZWNhYzkxYWRkNzliN2UyZWJlZjU2Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-29T15:00:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-29T15:00:04Z"}, "message": "builtins.c (fold_builtin_classify_type): Use integer_type_node for the type of the result.\n\n2011-04-29  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (fold_builtin_classify_type): Use integer_type_node\n\tfor the type of the result.\n\t(fold_builtin_isascii): Likewise.\n\t(fold_builtin_toascii): Use integer_type_node where appropriate.\n\t(fold_builtin_logb): Likewise.\n\t(fold_builtin_frexp): Likewise.\n\t(fold_builtin_strstr): Likewise.\n\t(fold_builtin_strpbrk): Likewise.\n\t(fold_builtin_fputs): Likewise.\n\t(fold_builtin_sprintf): Likewise.\n\t(fold_builtin_snprintf): Likewise.\n\t(fold_builtin_printf): Likewise.\n\t(do_mpfr_remquo): Use a proper type for the assigned constant.\n\t(do_mpfr_lgamma_r): Likewise.\n\t* dwarf2out.c (resolve_one_addr): Use size_int.\n\t* except.c (init_eh): Likewise.\n\t(assign_filter_values): Use integer_type_node for filter values.\n\t(sjlj_emit_dispatch_table): Use integer_type_node for dispatch\n\tindices.\n\t* tree-cfg.c (move_stmt_eh_region_tree_nr): Use integer_type_node\n\tfor EH region numbers.\n\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Use integer_type_node\n\tfor the shift amount.\n\nFrom-SVN: r173167", "tree": {"sha": "6fdd7759300f7da0a22affe74bbed766f62b95e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fdd7759300f7da0a22affe74bbed766f62b95e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a2c4774f993ad7a9ecac91add79b7e2ebef566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a2c4774f993ad7a9ecac91add79b7e2ebef566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a2c4774f993ad7a9ecac91add79b7e2ebef566", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a2c4774f993ad7a9ecac91add79b7e2ebef566/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3f02fe44c80ce4f76b9f24cd17a4abbe412eb4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f02fe44c80ce4f76b9f24cd17a4abbe412eb4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f02fe44c80ce4f76b9f24cd17a4abbe412eb4b"}], "stats": {"total": 84, "additions": 57, "deletions": 27}, "files": [{"sha": "b1ee31f63a04977a3dc83d05fb8dc71d8e1d2189", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45a2c4774f993ad7a9ecac91add79b7e2ebef566", "patch": "@@ -1,3 +1,29 @@\n+2011-04-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (fold_builtin_classify_type): Use integer_type_node\n+\tfor the type of the result.\n+\t(fold_builtin_isascii): Likewise.\n+\t(fold_builtin_toascii): Use integer_type_node where appropriate.\n+\t(fold_builtin_logb): Likewise.\n+\t(fold_builtin_frexp): Likewise.\n+\t(fold_builtin_strstr): Likewise.\n+\t(fold_builtin_strpbrk): Likewise.\n+\t(fold_builtin_fputs): Likewise.\n+\t(fold_builtin_sprintf): Likewise.\n+\t(fold_builtin_snprintf): Likewise.\n+\t(fold_builtin_printf): Likewise.\n+\t(do_mpfr_remquo): Use a proper type for the assigned constant.\n+\t(do_mpfr_lgamma_r): Likewise.\n+\t* dwarf2out.c (resolve_one_addr): Use size_int.\n+\t* except.c (init_eh): Likewise.\n+\t(assign_filter_values): Use integer_type_node for filter values.\n+\t(sjlj_emit_dispatch_table): Use integer_type_node for dispatch\n+\tindices.\n+\t* tree-cfg.c (move_stmt_eh_region_tree_nr): Use integer_type_node\n+\tfor EH region numbers.\n+\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Use integer_type_node\n+\tfor the shift amount.\n+\n 2011-04-29  Richard Guenther  <rguenther@suse.de>\n \n \t* expr.h (expand_shift): Rename to ..."}, {"sha": "bd61f29a616f095e53963c2b1f0b3917b67889d3", "filename": "gcc/builtins.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=45a2c4774f993ad7a9ecac91add79b7e2ebef566", "patch": "@@ -6773,9 +6773,9 @@ static tree\n fold_builtin_classify_type (tree arg)\n {\n   if (arg == 0)\n-    return build_int_cst (NULL_TREE, no_type_class);\n+    return build_int_cst (integer_type_node, no_type_class);\n \n-  return build_int_cst (NULL_TREE, type_to_class (TREE_TYPE (arg)));\n+  return build_int_cst (integer_type_node, type_to_class (TREE_TYPE (arg)));\n }\n \n /* Fold a call to __builtin_strlen with argument ARG.  */\n@@ -9133,10 +9133,10 @@ fold_builtin_isascii (location_t loc, tree arg)\n     {\n       /* Transform isascii(c) -> ((c & ~0x7f) == 0).  */\n       arg = fold_build2 (BIT_AND_EXPR, integer_type_node, arg,\n-\t\t\t build_int_cst (NULL_TREE,\n+\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\t~ (unsigned HOST_WIDE_INT) 0x7f));\n       return fold_build2_loc (loc, EQ_EXPR, integer_type_node,\n-\t\t\t  arg, integer_zero_node);\n+\t\t\t      arg, integer_zero_node);\n     }\n }\n \n@@ -9150,7 +9150,7 @@ fold_builtin_toascii (location_t loc, tree arg)\n \n   /* Transform toascii(c) -> (c & 0x7f).  */\n   return fold_build2_loc (loc, BIT_AND_EXPR, integer_type_node, arg,\n-\t\t      build_int_cst (NULL_TREE, 0x7f));\n+\t\t\t  build_int_cst (integer_type_node, 0x7f));\n }\n \n /* Fold a call to builtin isdigit with argument ARG.  */\n@@ -9341,7 +9341,7 @@ fold_builtin_logb (location_t loc, tree arg, tree rettype)\n \t   exponent and subtract 1.  */\n \tif (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (arg)))->b == 2)\n \t  return fold_convert_loc (loc, rettype,\n-\t\t\t\t   build_int_cst (NULL_TREE,\n+\t\t\t\t   build_int_cst (integer_type_node,\n \t\t\t\t\t\t  REAL_EXP (value)-1));\n \tbreak;\n       }\n@@ -9429,7 +9429,7 @@ fold_builtin_frexp (location_t loc, tree arg0, tree arg1, tree rettype)\n \t  REAL_VALUE_TYPE frac_rvt = *value;\n \t  SET_REAL_EXP (&frac_rvt, 0);\n \t  frac = build_real (rettype, frac_rvt);\n-\t  exp = build_int_cst (NULL_TREE, REAL_EXP (value));\n+\t  exp = build_int_cst (integer_type_node, REAL_EXP (value));\n \t}\n \tbreak;\n       default:\n@@ -11214,7 +11214,8 @@ fold_builtin_strstr (location_t loc, tree s1, tree s2, tree type)\n \n       /* New argument list transforming strstr(s1, s2) to\n \t strchr(s1, s2[0]).  */\n-      return build_call_expr_loc (loc, fn, 2, s1, build_int_cst (NULL_TREE, p2[0]));\n+      return build_call_expr_loc (loc, fn, 2, s1,\n+\t\t\t\t  build_int_cst (integer_type_node, p2[0]));\n     }\n }\n \n@@ -11400,7 +11401,8 @@ fold_builtin_strpbrk (location_t loc, tree s1, tree s2, tree type)\n \n       /* New argument list transforming strpbrk(s1, s2) to\n \t strchr(s1, s2[0]).  */\n-      return build_call_expr_loc (loc, fn, 2, s1, build_int_cst (NULL_TREE, p2[0]));\n+      return build_call_expr_loc (loc, fn, 2, s1,\n+\t\t\t\t  build_int_cst (integer_type_node, p2[0]));\n     }\n }\n \n@@ -11683,7 +11685,8 @@ fold_builtin_fputs (location_t loc, tree arg0, tree arg1,\n \t  {\n  \t    if (fn_fputc)\n \t      return build_call_expr_loc (loc, fn_fputc, 2,\n-\t\t\t\t      build_int_cst (NULL_TREE, p[0]), arg1);\n+\t\t\t\t\t  build_int_cst\n+\t\t\t\t\t    (integer_type_node, p[0]), arg1);\n \t    else\n \t      return NULL_TREE;\n \t  }\n@@ -11855,7 +11858,7 @@ fold_builtin_sprintf (location_t loc, tree dest, tree fmt,\n \t 'format' is known to contain no % formats.  */\n       call = build_call_expr_loc (loc, fn, 2, dest, fmt);\n       if (!ignored)\n-\tretval = build_int_cst (NULL_TREE, strlen (fmt_str));\n+\tretval = build_int_cst (integer_type_node, strlen (fmt_str));\n     }\n \n   /* If the format is \"%s\", use strcpy if the result isn't used.  */\n@@ -11963,7 +11966,7 @@ fold_builtin_snprintf (location_t loc, tree dest, tree destsize, tree fmt,\n       call = build_call_expr_loc (loc, fn, 2, dest, fmt);\n \n       if (!ignored)\n-\tretval = build_int_cst (NULL_TREE, strlen (fmt_str));\n+\tretval = build_int_cst (integer_type_node, strlen (fmt_str));\n     }\n \n   /* If the format is \"%s\", use strcpy if the result isn't used.  */\n@@ -12947,7 +12950,7 @@ fold_builtin_printf (location_t loc, tree fndecl, tree fmt,\n \t  /* Given printf(\"c\"), (where c is any one character,)\n \t     convert \"c\"[0] to an int and pass that to the replacement\n \t     function.  */\n-\t  newarg = build_int_cst (NULL_TREE, str[0]);\n+\t  newarg = build_int_cst (integer_type_node, str[0]);\n \t  if (fn_putchar)\n \t    call = build_call_expr_loc (loc, fn_putchar, 1, newarg);\n \t}\n@@ -13549,9 +13552,10 @@ do_mpfr_remquo (tree arg0, tree arg1, tree arg_quo)\n \t      if (TYPE_MAIN_VARIANT (TREE_TYPE (arg_quo)) == integer_type_node)\n \t        {\n \t\t  /* Set the value. */\n-\t\t  tree result_quo = fold_build2 (MODIFY_EXPR,\n-\t\t\t\t\t\t TREE_TYPE (arg_quo), arg_quo,\n-\t\t\t\t\t\t build_int_cst (NULL, integer_quo));\n+\t\t  tree result_quo\n+\t\t    = fold_build2 (MODIFY_EXPR, TREE_TYPE (arg_quo), arg_quo,\n+\t\t\t\t   build_int_cst (TREE_TYPE (arg_quo),\n+\t\t\t\t\t\t  integer_quo));\n \t\t  TREE_SIDE_EFFECTS (result_quo) = 1;\n \t\t  /* Combine the quo assignment with the rem.  */\n \t\t  result = non_lvalue (fold_build2 (COMPOUND_EXPR, type,\n@@ -13616,7 +13620,7 @@ do_mpfr_lgamma_r (tree arg, tree arg_sg, tree type)\n \t      /* Assign the signgam value into *arg_sg. */\n \t      result_sg = fold_build2 (MODIFY_EXPR,\n \t\t\t\t       TREE_TYPE (arg_sg), arg_sg,\n-\t\t\t\t       build_int_cst (NULL, sg));\n+\t\t\t\t       build_int_cst (TREE_TYPE (arg_sg), sg));\n \t      TREE_SIDE_EFFECTS (result_sg) = 1;\n \t      /* Combine the signgam assignment with the lgamma result.  */\n \t      result = non_lvalue (fold_build2 (COMPOUND_EXPR, type,"}, {"sha": "fb1dd9c77826914343ee13fa27d902efbdd1efb9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=45a2c4774f993ad7a9ecac91add79b7e2ebef566", "patch": "@@ -22966,7 +22966,7 @@ resolve_one_addr (rtx *addr, void *data ATTRIBUTE_UNUSED)\n     {\n       size_t len = strlen (XSTR (rtl, 0)) + 1;\n       tree t = build_string (len, XSTR (rtl, 0));\n-      tree tlen = build_int_cst (NULL_TREE, len - 1);\n+      tree tlen = size_int (len - 1);\n       TREE_TYPE (t)\n \t= build_array_type (char_type_node, build_index_type (tlen));\n       rtl = lookup_constant_def (t);"}, {"sha": "b722fb749215ef7757bef9056caf5232085e6702", "filename": "gcc/except.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=45a2c4774f993ad7a9ecac91add79b7e2ebef566", "patch": "@@ -225,7 +225,7 @@ init_eh (void)\n \t\t\t integer_type_node);\n       DECL_FIELD_CONTEXT (f_cs) = sjlj_fc_type_node;\n \n-      tmp = build_index_type (build_int_cst (NULL_TREE, 4 - 1));\n+      tmp = build_index_type (size_int (4 - 1));\n       tmp = build_array_type (lang_hooks.types.type_for_mode\n \t\t\t\t(targetm.unwind_word_mode (), 1),\n \t\t\t      tmp);\n@@ -245,17 +245,17 @@ init_eh (void)\n \n #ifdef DONT_USE_BUILTIN_SETJMP\n #ifdef JMP_BUF_SIZE\n-      tmp = build_int_cst (NULL_TREE, JMP_BUF_SIZE - 1);\n+      tmp = size_int (JMP_BUF_SIZE - 1);\n #else\n       /* Should be large enough for most systems, if it is not,\n \t JMP_BUF_SIZE should be defined with the proper value.  It will\n \t also tend to be larger than necessary for most systems, a more\n \t optimal port will define JMP_BUF_SIZE.  */\n-      tmp = build_int_cst (NULL_TREE, FIRST_PSEUDO_REGISTER + 2 - 1);\n+      tmp = size_int (FIRST_PSEUDO_REGISTER + 2 - 1);\n #endif\n #else\n       /* builtin_setjmp takes a pointer to 5 words.  */\n-      tmp = build_int_cst (NULL_TREE, 5 * BITS_PER_WORD / POINTER_SIZE - 1);\n+      tmp = size_int (5 * BITS_PER_WORD / POINTER_SIZE - 1);\n #endif\n       tmp = build_index_type (tmp);\n       tmp = build_array_type (ptr_type_node, tmp);\n@@ -857,7 +857,7 @@ assign_filter_values (void)\n \t\t  for ( ; tp_node; tp_node = TREE_CHAIN (tp_node))\n \t\t    {\n \t\t      int flt = add_ttypes_entry (ttypes, TREE_VALUE (tp_node));\n-\t\t      tree flt_node = build_int_cst (NULL_TREE, flt);\n+\t\t      tree flt_node = build_int_cst (integer_type_node, flt);\n \n \t\t      c->filter_list\n \t\t\t= tree_cons (NULL_TREE, flt_node, c->filter_list);\n@@ -868,7 +868,7 @@ assign_filter_values (void)\n \t\t  /* Get a filter value for the NULL list also since it\n \t\t     will need an action record anyway.  */\n \t\t  int flt = add_ttypes_entry (ttypes, NULL);\n-\t\t  tree flt_node = build_int_cst (NULL_TREE, flt);\n+\t\t  tree flt_node = build_int_cst (integer_type_node, flt);\n \n \t\t  c->filter_list\n \t\t    = tree_cons (NULL_TREE, flt_node, NULL);\n@@ -1289,7 +1289,7 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n \n \t    t_label = create_artificial_label (UNKNOWN_LOCATION);\n \t    case_elt = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t       build_int_cst (NULL, disp_index),\n+\t\t\t       build_int_cst (integer_type_node, disp_index),\n \t\t\t       NULL, t_label);\n \t    gimple_switch_set_label (switch_stmt, disp_index, case_elt);\n "}, {"sha": "c3deabd6aa7d5168065afc8e565173d12114fb3f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=45a2c4774f993ad7a9ecac91add79b7e2ebef566", "patch": "@@ -5756,7 +5756,7 @@ move_stmt_eh_region_tree_nr (tree old_t_nr, struct move_stmt_d *p)\n   old_nr = tree_low_cst (old_t_nr, 0);\n   new_nr = move_stmt_eh_region_nr (old_nr, p);\n \n-  return build_int_cst (NULL, new_nr);\n+  return build_int_cst (integer_type_node, new_nr);\n }\n \n /* Like move_stmt_op, but for gimple statements."}, {"sha": "4c66571132542e5c59fd615020010180d7cdbb68", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a2c4774f993ad7a9ecac91add79b7e2ebef566/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=45a2c4774f993ad7a9ecac91add79b7e2ebef566", "patch": "@@ -6909,7 +6909,7 @@ simplify_div_or_mod_using_ranges (gimple stmt)\n \n       if (rhs_code == TRUNC_DIV_EXPR)\n \t{\n-\t  t = build_int_cst (NULL_TREE, tree_log2 (op1));\n+\t  t = build_int_cst (integer_type_node, tree_log2 (op1));\n \t  gimple_assign_set_rhs_code (stmt, RSHIFT_EXPR);\n \t  gimple_assign_set_rhs1 (stmt, op0);\n \t  gimple_assign_set_rhs2 (stmt, t);"}]}