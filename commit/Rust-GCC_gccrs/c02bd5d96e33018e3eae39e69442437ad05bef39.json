{"sha": "c02bd5d96e33018e3eae39e69442437ad05bef39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyYmQ1ZDk2ZTMzMDE4ZTNlYWUzOWU2OTQ0MjQzN2FkMDViZWYzOQ==", "commit": {"author": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-22T18:33:20Z"}, "committer": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-22T18:33:20Z"}, "message": "bytecode fixes\n\nFrom-SVN: r5402", "tree": {"sha": "bff57dfb449a14391c82e0c67ef12c41a3160585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bff57dfb449a14391c82e0c67ef12c41a3160585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c02bd5d96e33018e3eae39e69442437ad05bef39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02bd5d96e33018e3eae39e69442437ad05bef39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02bd5d96e33018e3eae39e69442437ad05bef39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02bd5d96e33018e3eae39e69442437ad05bef39/comments", "author": null, "committer": null, "parents": [{"sha": "e9b7093a9f2c1125a3c0adc8f2a8d77f562631ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b7093a9f2c1125a3c0adc8f2a8d77f562631ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b7093a9f2c1125a3c0adc8f2a8d77f562631ff"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "457d259655a0cb3d527973b9b84886de47e8befa", "filename": "gcc/expr.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bd5d96e33018e3eae39e69442437ad05bef39/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bd5d96e33018e3eae39e69442437ad05bef39/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c02bd5d96e33018e3eae39e69442437ad05bef39", "patch": "@@ -120,6 +120,16 @@ struct move_by_pieces\n   int reverse;\n };\n \n+/* Used to generate bytecodes: keep track of size of local variables,\n+   as well as depth of arithmetic stack. (Notice that variables are\n+   stored on the machine's stack, not the arithmetic stack.) */\n+\n+int local_vars_size;\n+extern int stack_depth;\n+extern int max_stack_depth;\n+struct obstack permanent_obstack;\n+\n+\n static rtx enqueue_insn\t\tPROTO((rtx, rtx));\n static int queued_subexp_p\tPROTO((rtx));\n static void init_queue\t\tPROTO((void));\n@@ -5754,11 +5764,17 @@ bc_expand_expr (exp)\n       \n     case REAL_CST:\n       \n+#if 0\n #ifdef DEBUG_PRINT_CODE\n       fprintf (stderr, \" [%g]\\n\", (double) TREE_INT_CST_LOW (exp));\n #endif\n+      /* FIX THIS: find a better way to pass real_cst's. -bson */\n       bc_emit_instruction (mode_to_const_map[TYPE_MODE (TREE_TYPE (exp))],\n \t\t\t   (double) TREE_REAL_CST (exp));\n+#else\n+      abort ();\n+#endif\n+\n       return;\n       \n     case CALL_EXPR:\n@@ -5875,7 +5891,7 @@ bc_expand_expr (exp)\n       \n     case MODIFY_EXPR:\n       \n-      expand_assignment (TREE_TYPE (exp), TREE_OPERAND (exp, 0), TREE_OPERAND (exp, 1));\n+      expand_assignment (TREE_OPERAND (exp, 0), TREE_OPERAND (exp, 1), 0, 0);\n       return;\n       \n     case ADDR_EXPR:\n@@ -5914,7 +5930,7 @@ bc_expand_expr (exp)\n       bc_expand_expr (TREE_OPERAND (exp, 0));\n       bc_expand_truth_conversion (TREE_TYPE (TREE_OPERAND (exp, 0)));\n       lab = bc_get_bytecode_label ();\n-      bc_emit_bytecode (jumpifnot);\n+      bc_emit_bytecode (xjumpifnot);\n       bc_emit_bytecode_labelref (lab);\n       \n #ifdef DEBUG_PRINT_CODE\n@@ -5936,12 +5952,12 @@ bc_expand_expr (exp)\n       \n     case TRUTH_ANDIF_EXPR:\n       \n-      opcode = jumpifnot;\n+      opcode = xjumpifnot;\n       goto andorif;\n       \n     case TRUTH_ORIF_EXPR:\n       \n-      opcode = jumpif;\n+      opcode = xjumpif;\n       goto andorif;\n       \n     case PLUS_EXPR:\n@@ -6186,10 +6202,10 @@ bc_expand_expr (exp)\n   bc_expand_conversion (TREE_TYPE (TREE_OPERAND (exp, 1)), type);\n   \n   /* Push the address of the lvalue */\n-  expand_expr (build1 (ADDR_EXPR, TYPE_POINTER_TO (type), TREE_OPERAND (exp, 0)));\n+  bc_expand_expr (build1 (ADDR_EXPR, TYPE_POINTER_TO (type), TREE_OPERAND (exp, 0)));\n   \n   /* Perform actual increment */\n-  expand_increment (incroptab, type);\n+  bc_expand_increment (incroptab, type);\n   return;\n }\n \f\n@@ -7634,7 +7650,10 @@ expand_increment (exp, post)\n   int single_insn = 0;\n \n   if (output_bytecode)\n-    return bc_expand_increment (exp, post);\n+    {\n+      bc_expand_expr (exp);\n+      return NULL_RTX;\n+    }\n \n   /* Stabilize any component ref that might need to be\n      evaluated more than once below.  */\n@@ -9198,7 +9217,7 @@ bc_expand_component_address (exp)\n \t  break;\n     }\n \n-  expand_expr (tem);\n+  bc_expand_expr (tem);\n \n \n   /* For bitfields also push their offset and size */"}, {"sha": "e70dd84f103faba23b092b1fde70e251fa501123", "filename": "gcc/varasm.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02bd5d96e33018e3eae39e69442437ad05bef39/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02bd5d96e33018e3eae39e69442437ad05bef39/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c02bd5d96e33018e3eae39e69442437ad05bef39", "patch": "@@ -2516,9 +2516,13 @@ output_constant_def_contents (exp, reloc, labelno)\n   if (align > BITS_PER_UNIT)\n     {\n       if (!output_bytecode)\n-\tASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+\t{\n+\t  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+\t}\n       else\n-\tBC_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+\t{\n+\t  BC_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+\t}\n     }\n \n   /* Output the label itself.  */\n@@ -3613,6 +3617,8 @@ output_constructor (exp, size)\n }\n \n \n+#ifdef HANDLE_SYSV_PRAGMA\n+\n /* Output asm to handle ``#pragma weak'' */\n void\n handle_pragma_weak (what, asm_out_file, name, value)\n@@ -3650,3 +3656,5 @@ handle_pragma_weak (what, asm_out_file, name, value)\n   else if (! (what == ps_done || what == ps_start))\n     warning (\"malformed `#pragma weak'\");\n }\n+\n+#endif /* HANDLE_SYSV_PRAGMA */"}]}