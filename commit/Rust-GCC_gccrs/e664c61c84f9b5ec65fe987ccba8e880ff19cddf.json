{"sha": "e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2NGM2MWM4NGY5YjVlYzY1ZmU5ODdjY2JhOGU4ODBmZjE5Y2RkZg==", "commit": {"author": {"name": "Konstantin Serebryany", "email": "konstantin.s.serebryany@gmail.com", "date": "2013-02-28T21:23:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-28T21:23:23Z"}, "message": "re PR sanitizer/56454 (need to rename attribute no_address_safety_analysis to no_sanitize_address)\n\n\tPR sanitizer/56454\n\t* asan.c (gate_asan): Lookup no_sanitize_address instead of\n\tno_address_safety_analysis attribute.\n\t* doc/extend.texi (no_address_safety_attribute): Rename to\n\tno_sanitize_address attribute, mention no_address_safety_analysis\n\tattribute as deprecated alias.\n\n\t* c-common.c (handle_no_sanitize_address_attribute): New function.\n\t(c_common_attribute_table): Add no_sanitize_address attribute.\n\t(handle_no_address_safety_analysis_attribute): Add\n\tno_sanitize_address attribute, not no_address_safety_analysis\n\tattribute.\n\n\t* g++.dg/asan/default-options-1.C (__asan_default_options): Use\n\tno_sanitize_address attribute rather than no_address_safety_analysis.\n\t* g++.dg/asan/sanitizer_test_utils.h\n\t(ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS): Likewise.\n\t* c-c++-common/asan/attrib-1.c: Test no_sanitize_address attribute\n\tin addition to no_address_safety_analysis.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r196361", "tree": {"sha": "1c2dc482a40284c563034b228989888212c9c1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c2dc482a40284c563034b228989888212c9c1f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/comments", "author": {"login": "kcc", "id": 1789297, "node_id": "MDQ6VXNlcjE3ODkyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1789297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kcc", "html_url": "https://github.com/kcc", "followers_url": "https://api.github.com/users/kcc/followers", "following_url": "https://api.github.com/users/kcc/following{/other_user}", "gists_url": "https://api.github.com/users/kcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kcc/subscriptions", "organizations_url": "https://api.github.com/users/kcc/orgs", "repos_url": "https://api.github.com/users/kcc/repos", "events_url": "https://api.github.com/users/kcc/events{/privacy}", "received_events_url": "https://api.github.com/users/kcc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b5ec8fcd07999ed4d6dc0126fc4880aed36ef1"}], "stats": {"total": 116, "additions": 101, "deletions": 15}, "files": [{"sha": "5dd088a1608e982d2c3d93c805e85d66ccb402a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -1,3 +1,13 @@\n+2013-02-28  Konstantin Serebryany  <konstantin.s.serebryany@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/56454\n+\t* asan.c (gate_asan): Lookup no_sanitize_address instead of\n+\tno_address_safety_analysis attribute.\n+\t* doc/extend.texi (no_address_safety_attribute): Rename to\n+\tno_sanitize_address attribute, mention no_address_safety_analysis\n+\tattribute as deprecated alias.\n+\n 2013-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56461"}, {"sha": "52a2dbc5dfdd95630a777206ddfb696184d231ba", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -2277,7 +2277,7 @@ static bool\n gate_asan (void)\n {\n   return flag_asan != 0\n-\t  && !lookup_attribute (\"no_address_safety_analysis\",\n+\t  && !lookup_attribute (\"no_sanitize_address\",\n \t\t\t\tDECL_ATTRIBUTES (current_function_decl));\n }\n "}, {"sha": "c1ad40b02a7300ec1126e9ba4469cb5e41a0df95", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -1,3 +1,13 @@\n+2013-02-28  Konstantin Serebryany  <konstantin.s.serebryany@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/56454\n+\t* c-common.c (handle_no_sanitize_address_attribute): New function.\n+\t(c_common_attribute_table): Add no_sanitize_address attribute.\n+\t(handle_no_address_safety_analysis_attribute): Add\n+\tno_sanitize_address attribute, not no_address_safety_analysis\n+\tattribute.\n+\n 2013-02-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR target/52555"}, {"sha": "d01de3e40d5f53e986874db748553f2d3daa153d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -307,6 +307,8 @@ static tree handle_common_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_hot_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cold_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_no_sanitize_address_attribute (tree *, tree, tree,\n+\t\t\t\t\t\t  int, bool *);\n static tree handle_no_address_safety_analysis_attribute (tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n@@ -715,6 +717,9 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      0, 0, true, false, false,\n \t\t\t      handle_no_address_safety_analysis_attribute,\n \t\t\t      false },\n+  { \"no_sanitize_address\",    0, 0, true, false, false,\n+\t\t\t      handle_no_sanitize_address_attribute,\n+\t\t\t      false },\n   { \"warning\",\t\t      1, 1, true,  false, false,\n \t\t\t      handle_error_attribute, false },\n   { \"error\",\t\t      1, 1, true,  false, false,\n@@ -6505,12 +6510,12 @@ handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n-/* Handle a \"no_address_safety_analysis\" attribute; arguments as in\n+/* Handle a \"no_sanitize_address\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_no_address_safety_analysis_attribute (tree *node, tree name, tree, int,\n-\t\t\t\t\t     bool *no_add_attrs)\n+handle_no_sanitize_address_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t      bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n@@ -6521,6 +6526,23 @@ handle_no_address_safety_analysis_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"no_address_safety_analysis\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_no_address_safety_analysis_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t\t     bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+  else if (!lookup_attribute (\"no_sanitize_address\", DECL_ATTRIBUTES (*node)))\n+    DECL_ATTRIBUTES (*node)\n+      = tree_cons (get_identifier (\"no_sanitize_address\"),\n+\t\t   NULL_TREE, DECL_ATTRIBUTES (*node));\n+  *no_add_attrs = true;\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"noinline\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "2165983762cea23d37624ccbd7922734cfd4607d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -2133,7 +2133,8 @@ attributes are currently defined for functions on all targets:\n @code{weak}, @code{malloc}, @code{alias}, @code{ifunc},\n @code{warn_unused_result}, @code{nonnull}, @code{gnu_inline},\n @code{externally_visible}, @code{hot}, @code{cold}, @code{artificial},\n-@code{no_address_safety_analysis}, @code{error} and @code{warning}.\n+@code{no_sanitize_address}, @code{no_address_safety_analysis},\n+@code{error} and @code{warning}.\n Several other attributes are defined for functions on particular\n target systems.  Other attributes, including @code{section} are\n supported for variables declarations (@pxref{Variable Attributes})\n@@ -3432,11 +3433,15 @@ with computed goto or @code{asm goto}.\n The @code{cold} attribute on labels is not implemented in GCC versions\n earlier than 4.8.\n \n-@item no_address_safety_analysis\n-@cindex @code{no_address_safety_analysis} function attribute\n-The @code{no_address_safety_analysis} attribute on functions is used\n+@item no_sanitize_address\n+@itemx no_address_safety_analysis\n+@cindex @code{no_sanitize_address} function attribute\n+The @code{no_sanitize_address} attribute on functions is used\n to inform the compiler that it should not instrument memory accesses\n in the function when compiling with the @option{-fsanitize=address} option.\n+The @code{no_address_safety_analysis} is a deprecated alias of the\n+@code{no_sanitize_address} attribute, new code should use\n+@code{no_sanitize_address}.\n \n @item regparm (@var{number})\n @cindex @code{regparm} attribute"}, {"sha": "527fefb0b6c768771c9614484c394af9cf90a954", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -1,3 +1,14 @@\n+2013-02-28  Konstantin Serebryany  <konstantin.s.serebryany@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/56454\n+\t* g++.dg/asan/default-options-1.C (__asan_default_options): Use\n+\tno_sanitize_address attribute rather than no_address_safety_analysis.\n+\t* g++.dg/asan/sanitizer_test_utils.h\n+\t(ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS): Likewise.\n+\t* c-c++-common/asan/attrib-1.c: Test no_sanitize_address attribute\n+\tin addition to no_address_safety_analysis.\n+\n 2013-02-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56481"}, {"sha": "a2a7f7c9f99174a9fe66f9afab90d27213ab9144", "filename": "gcc/testsuite/c-c++-common/asan/attrib-1.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fattrib-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fattrib-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fattrib-1.c?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -1,16 +1,16 @@\n /* PR sanitizer/55435 */\n /* { dg-do compile } */\n \n-__attribute__((no_address_safety_analysis)) int\n+__attribute__((no_sanitize_address)) int\n f1 (int *p, int *q)\n {\n   *p = 42;\n   return *q;\n }\n \n void f2 (char *);\n-void f2 (char *) __attribute__((no_address_safety_analysis));\n-void f2 (char *) __attribute__((no_address_safety_analysis));\n+void f2 (char *) __attribute__((no_sanitize_address));\n+void f2 (char *) __attribute__((no_sanitize_address));\n void f2 (char *);\n \n void\n@@ -20,15 +20,43 @@ f2 (char *p)\n }\n \n void f3 (short *);\n-__typeof (f3) f3  __attribute__((__no_address_safety_analysis__));\n+__typeof (f3) f3  __attribute__((__no_sanitize_address__));\n \n void\n f3 (short *p)\n {\n   *p = 42;\n }\n \n-int v __attribute__((no_address_safety_analysis)); /* { dg-warning \"attribute ignored\" } */\n+__attribute__((no_sanitize_address)) int\n+f4 (int *p, int *q)\n+{\n+  *p = 42;\n+  return *q;\n+}\n+\n+void f5 (char *);\n+void f5 (char *) __attribute__((no_sanitize_address));\n+void f5 (char *) __attribute__((no_sanitize_address));\n+void f5 (char *);\n+\n+void\n+f5 (char *p)\n+{\n+  *p = 42;\n+}\n+\n+void f6 (short *);\n+__typeof (f6) f6  __attribute__((__no_address_safety_analysis__));\n+\n+void\n+f6 (short *p)\n+{\n+  *p = 42;\n+}\n+\n+int v __attribute__((no_sanitize_address)); /* { dg-warning \"attribute ignored\" } */\n+int v2 __attribute__((no_address_safety_analysis)); /* { dg-warning \"attribute ignored\" } */\n \n /* { dg-final { scan-assembler-not \"__asan_report_store\" } } */\n /* { dg-final { scan-assembler-not \"__asan_report_load\" } } */"}, {"sha": "cdcb370d141b5e6328c7727c39a01333408b2d87", "filename": "gcc/testsuite/g++.dg/asan/default-options-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -3,7 +3,7 @@\n const char *kAsanDefaultOptions=\"verbosity=1 foo=bar\";\n \n extern \"C\"\n-__attribute__((no_address_safety_analysis))\n+__attribute__((no_sanitize_address))\n const char *__asan_default_options() {\n   return kAsanDefaultOptions;\n }"}, {"sha": "99720c354fa41045c2510c73396a84916c3a424b", "filename": "gcc/testsuite/g++.dg/asan/sanitizer_test_utils.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fsanitizer_test_utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e664c61c84f9b5ec65fe987ccba8e880ff19cddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fsanitizer_test_utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fsanitizer_test_utils.h?ref=e664c61c84f9b5ec65fe987ccba8e880ff19cddf", "patch": "@@ -36,7 +36,7 @@ typedef __int64          int64_t;\n \n #if __has_feature(address_sanitizer) || defined(__SANITIZE_ADDRESS__)\n # define ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS \\\n-    __attribute__((no_address_safety_analysis))\n+    __attribute__((no_sanitize_address))\n #else\n # define ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS\n #endif"}]}