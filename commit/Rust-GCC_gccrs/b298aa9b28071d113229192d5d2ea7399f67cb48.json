{"sha": "b298aa9b28071d113229192d5d2ea7399f67cb48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5OGFhOWIyODA3MWQxMTMyMjkxOTJkNWQyZWE3Mzk5ZjY3Y2I0OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-06-27T19:19:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-27T19:19:09Z"}, "message": "re PR c++/53563 (ICE in start_decl, at cp/decl.c:4427)\n\n\tPR c++/53563\n\t* parser.c (cp_parser_template_id): Add tag_type parm.\n\t(cp_parser_template_name): Likewise.\n\t(cp_parser_id_expression, cp_parser_unqualified_id): Adjust.\n\t(cp_parser_pseudo_destructor_name, cp_parser_type_name): Adjust.\n\t(cp_parser_simple_type_specifier, cp_parser_class_name): Adjust.\n\t(cp_parser_elaborated_type_specifier, cp_parser_class_head): Adjust.\n\nFrom-SVN: r189024", "tree": {"sha": "5dfc943fa7507ec3eeed35b7a702cfa6d4cf2fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dfc943fa7507ec3eeed35b7a702cfa6d4cf2fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b298aa9b28071d113229192d5d2ea7399f67cb48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b298aa9b28071d113229192d5d2ea7399f67cb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b298aa9b28071d113229192d5d2ea7399f67cb48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b298aa9b28071d113229192d5d2ea7399f67cb48/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a05deb55a534444c2e0611fb76bae28c533a953d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05deb55a534444c2e0611fb76bae28c533a953d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05deb55a534444c2e0611fb76bae28c533a953d"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "425bf7c7f23dafb9454f9955aa80ddafdf880c04", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b298aa9b28071d113229192d5d2ea7399f67cb48", "patch": "@@ -1,3 +1,13 @@\n+2012-06-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53563\n+\t* parser.c (cp_parser_template_id): Add tag_type parm.\n+\t(cp_parser_template_name): Likewise.\n+\t(cp_parser_id_expression, cp_parser_unqualified_id): Adjust.\n+\t(cp_parser_pseudo_destructor_name, cp_parser_type_name): Adjust.\n+\t(cp_parser_simple_type_specifier, cp_parser_class_name): Adjust.\n+\t(cp_parser_elaborated_type_specifier, cp_parser_class_head): Adjust.\n+\n 2012-06-27  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \tPR C++/51033"}, {"sha": "7012caa2e6ae78637519aa22ede3c3810d17b745", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b298aa9b28071d113229192d5d2ea7399f67cb48", "patch": "@@ -2062,9 +2062,9 @@ static tree cp_parser_template_parameter\n static tree cp_parser_type_parameter\n   (cp_parser *, bool *);\n static tree cp_parser_template_id\n-  (cp_parser *, bool, bool, bool);\n+  (cp_parser *, bool, bool, enum tag_types, bool);\n static tree cp_parser_template_name\n-  (cp_parser *, bool, bool, bool, bool *);\n+  (cp_parser *, bool, bool, bool, enum tag_types, bool *);\n static tree cp_parser_template_argument_list\n   (cp_parser *);\n static tree cp_parser_template_argument\n@@ -4466,6 +4466,7 @@ cp_parser_id_expression (cp_parser *parser,\n       id = cp_parser_template_id (parser,\n \t\t\t\t  /*template_keyword_p=*/false,\n \t\t\t\t  /*check_dependency_p=*/true,\n+\t\t\t\t  none_type,\n \t\t\t\t  declarator_p);\n       /* If that worked, we're done.  */\n       if (cp_parser_parse_definitely (parser))\n@@ -4543,6 +4544,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t/* Try a template-id.  */\n \tid = cp_parser_template_id (parser, template_keyword_p,\n \t\t\t\t    check_dependency_p,\n+\t\t\t\t    none_type,\n \t\t\t\t    declarator_p);\n \t/* If it worked, we're done.  */\n \tif (cp_parser_parse_definitely (parser))\n@@ -4554,6 +4556,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n     case CPP_TEMPLATE_ID:\n       return cp_parser_template_id (parser, template_keyword_p,\n \t\t\t\t    check_dependency_p,\n+\t\t\t\t    none_type,\n \t\t\t\t    declarator_p);\n \n     case CPP_COMPL:\n@@ -4769,6 +4772,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t  /* Try a template-id.  */\n \t  id = cp_parser_template_id (parser, template_keyword_p,\n \t\t\t\t      /*check_dependency_p=*/true,\n+\t\t\t\t      none_type,\n \t\t\t\t      declarator_p);\n \t  /* If that worked, we're done.  */\n \t  if (cp_parser_parse_definitely (parser))\n@@ -6280,6 +6284,7 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n       cp_parser_template_id (parser,\n \t\t\t     /*template_keyword_p=*/true,\n \t\t\t     /*check_dependency_p=*/false,\n+\t\t\t     class_type,\n \t\t\t     /*is_declaration=*/true);\n       /* Look for the `::' token.  */\n       cp_parser_require (parser, CPP_SCOPE, RT_SCOPE);\n@@ -12376,6 +12381,7 @@ static tree\n cp_parser_template_id (cp_parser *parser,\n \t\t       bool template_keyword_p,\n \t\t       bool check_dependency_p,\n+\t\t       enum tag_types tag_type,\n \t\t       bool is_declaration)\n {\n   int i;\n@@ -12432,6 +12438,7 @@ cp_parser_template_id (cp_parser *parser,\n   templ = cp_parser_template_name (parser, template_keyword_p,\n \t\t\t\t   check_dependency_p,\n \t\t\t\t   is_declaration,\n+\t\t\t\t   tag_type,\n \t\t\t\t   &is_identifier);\n   if (templ == error_mark_node || is_identifier)\n     {\n@@ -12604,6 +12611,7 @@ cp_parser_template_name (cp_parser* parser,\n \t\t\t bool template_keyword_p,\n \t\t\t bool check_dependency_p,\n \t\t\t bool is_declaration,\n+\t\t\t enum tag_types tag_type,\n \t\t\t bool *is_identifier)\n {\n   tree identifier;\n@@ -12710,7 +12718,7 @@ cp_parser_template_name (cp_parser* parser,\n \n   /* Look up the name.  */\n   decl = cp_parser_lookup_name (parser, identifier,\n-\t\t\t\tnone_type,\n+\t\t\t\ttag_type,\n \t\t\t\t/*is_template=*/true,\n \t\t\t\t/*is_namespace=*/false,\n \t\t\t\tcheck_dependency_p,\n@@ -13699,6 +13707,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t  type = cp_parser_template_id (parser,\n \t\t\t\t\t/*template_keyword_p=*/true,\n \t\t\t\t\t/*check_dependency_p=*/true,\n+\t\t\t\t\tnone_type,\n \t\t\t\t\t/*is_declaration=*/false);\n \t  /* If the template-id did not name a type, we are out of\n \t     luck.  */\n@@ -13811,6 +13820,7 @@ cp_parser_type_name (cp_parser* parser)\n       type_decl = cp_parser_template_id (parser,\n \t\t\t\t\t /*template_keyword_p=*/false,\n \t\t\t\t\t /*check_dependency_p=*/false,\n+\t\t\t\t\t none_type,\n \t\t\t\t\t /*is_declaration=*/false);\n       /* Note that this must be an instantiation of an alias template\n \t because [temp.names]/6 says:\n@@ -14035,6 +14045,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n       token = cp_lexer_peek_token (parser->lexer);\n       decl = cp_parser_template_id (parser, template_p,\n \t\t\t\t    /*check_dependency_p=*/true,\n+\t\t\t\t    tag_type,\n \t\t\t\t    is_declaration);\n       /* If we didn't find a template-id, look for an ordinary\n \t identifier.  */\n@@ -17865,6 +17876,7 @@ cp_parser_class_name (cp_parser *parser,\n       /* Try a template-id.  */\n       decl = cp_parser_template_id (parser, template_keyword_p,\n \t\t\t\t    check_dependency_p,\n+\t\t\t\t    tag_type,\n \t\t\t\t    is_declaration);\n       if (decl == error_mark_node)\n \treturn error_mark_node;\n@@ -18317,7 +18329,7 @@ cp_parser_class_head (cp_parser* parser,\n     = cp_parser_nested_name_specifier_opt (parser,\n \t\t\t\t\t   /*typename_keyword_p=*/false,\n \t\t\t\t\t   /*check_dependency_p=*/false,\n-\t\t\t\t\t   /*type_p=*/false,\n+\t\t\t\t\t   /*type_p=*/true,\n \t\t\t\t\t   /*is_declaration=*/false);\n   /* If there was a nested-name-specifier, then there *must* be an\n      identifier.  */\n@@ -18392,6 +18404,7 @@ cp_parser_class_head (cp_parser* parser,\n       id = cp_parser_template_id (parser,\n \t\t\t\t  /*template_keyword_p=*/false,\n \t\t\t\t  /*check_dependency_p=*/true,\n+\t\t\t\t  class_key,\n \t\t\t\t  /*is_declaration=*/true);\n       /* If that didn't work, it could still be an identifier.  */\n       if (!cp_parser_parse_definitely (parser))"}, {"sha": "ebba545cf3ab1417961c71f0865d4ae73af17dd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b298aa9b28071d113229192d5d2ea7399f67cb48", "patch": "@@ -1,3 +1,9 @@\n+2012-06-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53563\n+\t* g++.dg/parse/template27.C: New.\n+\t* g++.dg/template/crash74.C: Adjust expected output.\n+\n 2012-06-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41951"}, {"sha": "8eee471ffb685a1f77700bcfcde98abe6fae8850", "filename": "gcc/testsuite/g++.dg/parse/template27.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate27.C?ref=b298aa9b28071d113229192d5d2ea7399f67cb48", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/53563\n+\n+template<class T>\n+struct s\n+{\n+ template<class U>\n+ s(){}\n+};\n+\n+int main() {\n+ struct s<void>::s<int> a;\t// { dg-error \"no match\" }\n+}"}, {"sha": "d236947ec5116c341c48b9861bfbec10d7014bd0", "filename": "gcc/testsuite/g++.dg/template/crash74.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b298aa9b28071d113229192d5d2ea7399f67cb48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash74.C?ref=b298aa9b28071d113229192d5d2ea7399f67cb48", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-template<typename F> void foo () { }\n-template<typename F> struct foo<F> { };\t// { dg-error \"redeclared as\" }\n+template<typename F> void foo () { } // { dg-prune-output \"previous\" }\n+template<typename F> struct foo<F> { };\t// { dg-error \"template\" }"}]}