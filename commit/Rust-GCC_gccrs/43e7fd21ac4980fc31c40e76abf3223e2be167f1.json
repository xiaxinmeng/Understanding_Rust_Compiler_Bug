{"sha": "43e7fd21ac4980fc31c40e76abf3223e2be167f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNlN2ZkMjFhYzQ5ODBmYzMxYzQwZTc2YWJmMzIyM2UyYmUxNjdmMQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-28T15:42:21Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-28T15:42:21Z"}, "message": "re PR fortran/34868 (ICE with -ff2c for function returning a complex number)\n\n\tPR fortran/34868\n\n\t* trans-expr.c (gfc_conv_variable): Don't build indirect\n\treferences when explicit interface is mandated.\n\t* resolve.c (resolve_formal_arglist): Set attr.always_explicit\n\ton the result symbol as well as the procedure symbol.\n\n\t* gfortran.dg/f2c_9.f90: New test.\n\nFrom-SVN: r132751", "tree": {"sha": "a13a53820b1a4fc0ec96de75d9fa6c175f09961a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a13a53820b1a4fc0ec96de75d9fa6c175f09961a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43e7fd21ac4980fc31c40e76abf3223e2be167f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e7fd21ac4980fc31c40e76abf3223e2be167f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43e7fd21ac4980fc31c40e76abf3223e2be167f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e7fd21ac4980fc31c40e76abf3223e2be167f1/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbfb21c1c1e1b9d012f4d67838a88a94b5fb5e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbfb21c1c1e1b9d012f4d67838a88a94b5fb5e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbfb21c1c1e1b9d012f4d67838a88a94b5fb5e24"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "2082054df0aab39988aa9dff7e58cdb1635656f1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=43e7fd21ac4980fc31c40e76abf3223e2be167f1", "patch": "@@ -1,3 +1,11 @@\n+2008-02-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/34868\n+\t* trans-expr.c (gfc_conv_variable): Don't build indirect\n+\treferences when explicit interface is mandated.\n+\t* resolve.c (resolve_formal_arglist): Set attr.always_explicit\n+\ton the result symbol as well as the procedure symbol.\n+\n 2008-02-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33387"}, {"sha": "ead60f240af33307467dc1aecf5d2100383430d8", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=43e7fd21ac4980fc31c40e76abf3223e2be167f1", "patch": "@@ -106,7 +106,10 @@ resolve_formal_arglist (gfc_symbol *proc)\n   if (gfc_elemental (proc)\n       || sym->attr.pointer || sym->attr.allocatable\n       || (sym->as && sym->as->rank > 0))\n-    proc->attr.always_explicit = 1;\n+    {\n+      proc->attr.always_explicit = 1;\n+      sym->attr.always_explicit = 1;\n+    }\n \n   formal_arg_flag = 1;\n \n@@ -187,7 +190,11 @@ resolve_formal_arglist (gfc_symbol *proc)\n       if ((sym->as && sym->as->rank > 0 && sym->as->type == AS_ASSUMED_SHAPE)\n \t  || sym->attr.pointer || sym->attr.allocatable || sym->attr.target\n \t  || sym->attr.optional)\n-\tproc->attr.always_explicit = 1;\n+\t{\n+\t  proc->attr.always_explicit = 1;\n+\t  if (proc->result)\n+\t    proc->result->attr.always_explicit = 1;\n+\t}\n \n       /* If the flavor is unknown at this point, it has to be a variable.\n \t A procedure specification would have already set the type.  */"}, {"sha": "a3484510b558a9b663f17213e2f2fc8ee77cf810", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=43e7fd21ac4980fc31c40e76abf3223e2be167f1", "patch": "@@ -513,7 +513,8 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n           /* Dereference scalar hidden result.  */\n \t  if (gfc_option.flag_f2c && sym->ts.type == BT_COMPLEX\n \t      && (sym->attr.function || sym->attr.result)\n-\t      && !sym->attr.dimension && !sym->attr.pointer)\n+\t      && !sym->attr.dimension && !sym->attr.pointer\n+\t      && !sym->attr.always_explicit)\n \t    se->expr = build_fold_indirect_ref (se->expr);\n \n           /* Dereference non-character pointer variables. "}, {"sha": "30d1b0527adaf1b750839a1bdbc145673a8935a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43e7fd21ac4980fc31c40e76abf3223e2be167f1", "patch": "@@ -1,3 +1,8 @@\n+2008-02-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/34868\n+\t* gfortran.dg/f2c_9.f90: New test.\n+\n 2008-02-28  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* testsuite/gcc.dg/tree-ssa/ldist-1.c: New."}, {"sha": "59c3fbe8b4713b123f187e7f220a8d972a5d7d19", "filename": "gcc/testsuite/gfortran.dg/f2c_9.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e7fd21ac4980fc31c40e76abf3223e2be167f1/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_9.f90?ref=43e7fd21ac4980fc31c40e76abf3223e2be167f1", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do run }\n+! { dg-options \"-ff2c\" }\n+! PR 34868\n+\n+function f(a) result(res)\n+  implicit none\n+  real(8), intent(in) :: a(:)\n+  complex(8) :: res\n+\n+  res = cmplx(sum(a),product(a),8)\n+end function f\n+\n+function g(a)\n+  implicit none\n+  real(8), intent(in) :: a(:)\n+  complex(8) :: g\n+\n+  g = cmplx(sum(a),product(a),8)\n+end function g\n+\n+program test\n+  real(8) :: a(1,5)\n+  complex(8) :: c\n+  integer :: i\n+\n+  interface\n+    complex(8) function f(a)\n+      real(8), intent(in) :: a(:)\n+    end function f\n+    function g(a) result(res)\n+      real(8), intent(in) :: a(:)\n+      complex(8) :: res\n+    end function g\n+  end interface\n+\n+  do i = 1, 5\n+    a(1,i) = sqrt(real(i,kind(a)))\n+  end do\n+\n+  c = f(a(1,:))\n+  call check (real(c), sum(a))\n+  call check (imag(c), product(a))\n+\n+  c = g(a(1,:))\n+  call check (real(c), sum(a))\n+  call check (imag(c), product(a))\n+contains\n+  subroutine check (a, b)\n+    real(8), intent(in) :: a, b\n+    if (abs(a - b) > 1.e-10_8) call abort\n+  end subroutine check\n+end program test"}]}