{"sha": "304757d2ceec74e12ac43312b7eab9aa3b092126", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0NzU3ZDJjZWVjNzRlMTJhYzQzMzEyYjdlYWI5YWEzYjA5MjEyNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:38:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:38:28Z"}, "message": "[multiple changes]\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_eval.adb (Subtypes_Statically_Compatible): Remove duplicated\n\tcheck.\n\t(Subtypes_Statically_Match): Remove duplicate check.\n\t* sem_prag.adb (Check_Arg_Is_External_Name): Remove duplicate check.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_aggr.adb (Replace_Type): Remove the special processing\n\tfor selected components.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Merge the\n\tprocessing for attributes Fixed_Value and Integer_Value.\n\t* exp_util.adb (Side_Effect_Free): Merge the processing for\n\tqualified expressions, type conversions, and unchecked type\n\tconversions.\n\t* g-comlin.adb (Is_In_Config): Merge the processing for No_Space\n\tand Optional.\n\t* par-ch3.adb (P_Declarative_Items): Merge the processing for\n\ttokens function, not, overriding, and procedure.\n\t* sem_ch6.adb (Fully_Conformant_Expressions): Merge the processing\n\tfor qualified expressions, type conversions, and unchecked\n\ttype conversions.\n\t* sem_util.adb (Compile_Time_Constraint_Error): Merge the\n\tprocessing for Ada 83 and instances.\n\t(Object_Access_Level): Merge the processing for indexed components\n\tand selected components.\n\t* uname.adb (Add_Node_Name): Merge the processing for stubs.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Install_Primitive_Elaboration_Check):\n\tDo not generate the check when restriction No_Elaboration_Code\n\tis in effect.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.adb (Build_Class_Wide_Check): New subsidiary\n\tof Expand_Dispatching_Call. If the denoted subprogram has a\n\tclass-wide precondition, this is the only precondition that\n\tapplies to the call, rather that the class-wide preconditions\n\tthat may apply to the body that is executed. (This is specified\n\tin AI12-0195).\n\nFrom-SVN: r247333", "tree": {"sha": "b6afea00ffefcdb73958c7c60debc65d8ed50d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6afea00ffefcdb73958c7c60debc65d8ed50d8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/304757d2ceec74e12ac43312b7eab9aa3b092126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304757d2ceec74e12ac43312b7eab9aa3b092126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304757d2ceec74e12ac43312b7eab9aa3b092126", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304757d2ceec74e12ac43312b7eab9aa3b092126/comments", "author": null, "committer": null, "parents": [{"sha": "bfc37f375f608454f7ee960b40ee7d6eefb14f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc37f375f608454f7ee960b40ee7d6eefb14f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc37f375f608454f7ee960b40ee7d6eefb14f3d"}], "stats": {"total": 413, "additions": 227, "deletions": 186}, "files": [{"sha": "1be7e3e06dd99f044024eef9603bc80feb579291", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -1,3 +1,47 @@\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_eval.adb (Subtypes_Statically_Compatible): Remove duplicated\n+\tcheck.\n+\t(Subtypes_Statically_Match): Remove duplicate check.\n+\t* sem_prag.adb (Check_Arg_Is_External_Name): Remove duplicate check.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_aggr.adb (Replace_Type): Remove the special processing\n+\tfor selected components.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Merge the\n+\tprocessing for attributes Fixed_Value and Integer_Value.\n+\t* exp_util.adb (Side_Effect_Free): Merge the processing for\n+\tqualified expressions, type conversions, and unchecked type\n+\tconversions.\n+\t* g-comlin.adb (Is_In_Config): Merge the processing for No_Space\n+\tand Optional.\n+\t* par-ch3.adb (P_Declarative_Items): Merge the processing for\n+\ttokens function, not, overriding, and procedure.\n+\t* sem_ch6.adb (Fully_Conformant_Expressions): Merge the processing\n+\tfor qualified expressions, type conversions, and unchecked\n+\ttype conversions.\n+\t* sem_util.adb (Compile_Time_Constraint_Error): Merge the\n+\tprocessing for Ada 83 and instances.\n+\t(Object_Access_Level): Merge the processing for indexed components\n+\tand selected components.\n+\t* uname.adb (Add_Node_Name): Merge the processing for stubs.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Install_Primitive_Elaboration_Check):\n+\tDo not generate the check when restriction No_Elaboration_Code\n+\tis in effect.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Build_Class_Wide_Check): New subsidiary\n+\tof Expand_Dispatching_Call. If the denoted subprogram has a\n+\tclass-wide precondition, this is the only precondition that\n+\tapplies to the call, rather that the class-wide preconditions\n+\tthat may apply to the body that is executed. (This is specified\n+\tin AI12-0195).\n+\n 2017-04-27  Yannick Moy  <moy@adacore.com>\n \n \t* gnat1drv.adb (Adjust_Global_Switches): Issue"}, {"sha": "fa55615db7f30dda17eda5e57b5436ee2c5b292a", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -7740,7 +7740,6 @@ package body Checks is\n    -----------------------------------------\n \n    procedure Install_Primitive_Elaboration_Check (Subp_Body : Node_Id) is\n-\n       function Within_Compilation_Unit_Instance\n         (Subp_Id : Entity_Id) return Boolean;\n       --  Determine whether subprogram Subp_Id appears within an instance which\n@@ -7796,6 +7795,11 @@ package body Checks is\n       if ASIS_Mode or GNATprove_Mode then\n          return;\n \n+      --  Do not generate an elaboration check if such code is not desirable\n+\n+      elsif Restriction_Active (No_Elaboration_Code) then\n+         return;\n+\n       --  Do not generate an elaboration check if the related subprogram is\n       --  not subjected to accessibility checks.\n "}, {"sha": "0cbbd01875d38387c659fe9a8fd40f23ed6f772b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3042,15 +3042,7 @@ package body Exp_Aggr is\n            and then Root_Type (Etype (N)) = Root_Type (Entity (Prefix (Expr)))\n          then\n             if Is_Entity_Name (Lhs) then\n-               Rewrite (Prefix (Expr),\n-                 New_Occurrence_Of (Entity (Lhs), Loc));\n-\n-            elsif Nkind (Lhs) = N_Selected_Component then\n-               Rewrite (Expr,\n-                 Make_Attribute_Reference (Loc,\n-                   Attribute_Name => Name_Unrestricted_Access,\n-                   Prefix         => New_Copy_Tree (Lhs)));\n-               Set_Analyzed (Parent (Expr), False);\n+               Rewrite (Prefix (Expr), New_Occurrence_Of (Entity (Lhs), Loc));\n \n             else\n                Rewrite (Expr,"}, {"sha": "21a17716acaff35d527b472e08aa1a44a4cf042e", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -3360,24 +3360,30 @@ package body Exp_Attr is\n          end if;\n       end First_Bit_Attr;\n \n-      -----------------\n-      -- Fixed_Value --\n-      -----------------\n+      --------------------------------\n+      -- Fixed_Value, Integer_Value --\n+      --------------------------------\n \n-      --  We transform:\n+      --  We transform\n \n       --     fixtype'Fixed_Value (integer-value)\n+      --     inttype'Fixed_Value (fixed-value)\n \n       --  into\n \n-      --     fixtype(integer-value)\n+      --     fixtype (integer-value)\n+      --     inttype (fixed-value)\n+\n+      --  respectively.\n \n       --  We do all the required analysis of the conversion here, because we do\n       --  not want this to go through the fixed-point conversion circuits. Note\n       --  that the back end always treats fixed-point as equivalent to the\n       --  corresponding integer type anyway.\n \n-      when Attribute_Fixed_Value =>\n+      when Attribute_Fixed_Value\n+         | Attribute_Integer_Value\n+      =>\n          Rewrite (N,\n            Make_Type_Conversion (Loc,\n              Subtype_Mark => New_Occurrence_Of (Entity (Pref), Loc),\n@@ -3923,37 +3929,6 @@ package body Exp_Attr is\n          end if;\n       end Input;\n \n-      -------------------\n-      -- Integer_Value --\n-      -------------------\n-\n-      --  We transform\n-\n-      --    inttype'Fixed_Value (fixed-value)\n-\n-      --  into\n-\n-      --    inttype(integer-value))\n-\n-      --  we do all the required analysis of the conversion here, because we do\n-      --  not want this to go through the fixed-point conversion circuits. Note\n-      --  that the back end always treats fixed-point as equivalent to the\n-      --  corresponding integer type anyway.\n-\n-      when Attribute_Integer_Value =>\n-         Rewrite (N,\n-           Make_Type_Conversion (Loc,\n-             Subtype_Mark => New_Occurrence_Of (Entity (Pref), Loc),\n-             Expression   => Relocate_Node (First (Exprs))));\n-         Set_Etype (N, Entity (Pref));\n-         Set_Analyzed (N);\n-\n-         --  Note: it might appear that a properly analyzed unchecked\n-         --  conversion would be just fine here, but that's not the case, since\n-         --  the full range check performed by the following call is critical.\n-\n-         Apply_Type_Conversion_Checks (N);\n-\n       -------------------\n       -- Invalid_Value --\n       -------------------"}, {"sha": "d1822c4df466e9f082f96ae07f6b1c7c8cd9ede9", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -58,6 +58,7 @@ with Sem_Res;  use Sem_Res;\n with Sem_Type; use Sem_Type;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n+with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n@@ -649,11 +650,112 @@ package body Exp_Disp is\n       Eq_Prim_Op      : Entity_Id := Empty;\n       Controlling_Tag : Node_Id;\n \n+      procedure Build_Class_Wide_Check;\n+      --  If the denoted subprogram has a class-wide precondition, generate\n+      --  a check using that precondition before the dispatching call, because\n+      --  this is the only class-wide precondition that applies to the call.\n+\n       function New_Value (From : Node_Id) return Node_Id;\n       --  From is the original Expression. New_Value is equivalent to a call\n       --  to Duplicate_Subexpr with an explicit dereference when From is an\n       --  access parameter.\n \n+      ----------------------------\n+      -- Build_Class_Wide_Check --\n+      ----------------------------\n+\n+      procedure Build_Class_Wide_Check is\n+         Prec    : Node_Id;\n+         Cond    : Node_Id;\n+         Msg     : Node_Id;\n+         Str_Loc : constant String := Build_Location_String (Loc);\n+\n+         function Replace_Formals (N : Node_Id) return Traverse_Result;\n+         --  Replace occurrences of the formals of the subprogram by the\n+         --  corresponding actuals in the call, given that this check is\n+         --  performed outside of the body of the subprogram.\n+\n+         ---------------------\n+         -- Replace_Formals --\n+         ---------------------\n+\n+         function Replace_Formals (N : Node_Id) return Traverse_Result is\n+         begin\n+            if Is_Entity_Name (N)\n+              and then Present (Entity (N))\n+              and then Is_Formal (Entity (N))\n+            then\n+               declare\n+                  A : Node_Id;\n+                  F : Entity_Id;\n+\n+               begin\n+                  F := First_Formal (Subp);\n+                  A := First_Actual (Call_Node);\n+                  while Present (F) loop\n+                     if F = Entity (N) then\n+                        Rewrite (N, New_Copy_Tree (A));\n+                        exit;\n+                     end if;\n+                     Next_Formal (F);\n+                     Next_Actual (A);\n+                  end loop;\n+               end;\n+            end if;\n+\n+            return OK;\n+         end Replace_Formals;\n+\n+         procedure Update is new Traverse_Proc (Replace_Formals);\n+      begin\n+\n+         --  Locate class-wide precondition, if any\n+\n+         if Present (Contract (Subp))\n+           and then Present (Pre_Post_Conditions (Contract (Subp)))\n+         then\n+            Prec := Pre_Post_Conditions (Contract (Subp));\n+\n+            while Present (Prec) loop\n+               exit when Pragma_Name (Prec) = Name_Precondition\n+                 and then Class_Present (Prec);\n+               Prec := Next_Pragma (Prec);\n+            end loop;\n+\n+            if No (Prec) then\n+               return;\n+            end if;\n+\n+            --  The expression for the precondition is analyzed within the\n+            --  generated pragma. The message text is the last parameter\n+            --  of the generated pragma, indicating source of precondition.\n+\n+            Cond := New_Copy_Tree\n+              (Expression (First (Pragma_Argument_Associations (Prec))));\n+            Update (Cond);\n+\n+            --  Build message indicating the failed precondition and the\n+            --  dispatching call that caused it.\n+\n+            Msg := Expression (Last (Pragma_Argument_Associations (Prec)));\n+            Name_Len := 0;\n+            Append (Global_Name_Buffer, Strval (Msg));\n+            Append (Global_Name_Buffer, \" in dispatching call at \");\n+            Append (Global_Name_Buffer, Str_Loc);\n+            Msg := Make_String_Literal (Loc, Name_Buffer (1 .. Name_Len));\n+\n+            Insert_Action (Call_Node,\n+               Make_If_Statement (Loc,\n+                  Condition => Make_Op_Not (Loc, Cond),\n+                  Then_Statements => New_List (\n+                     Make_Procedure_Call_Statement (Loc,\n+                       Name                   =>\n+                         New_Occurrence_Of\n+                           (RTE (RE_Raise_Assert_Failure), Loc),\n+                       Parameter_Associations => New_List (Msg)))));\n+         end if;\n+      end Build_Class_Wide_Check;\n+\n       ---------------\n       -- New_Value --\n       ---------------\n@@ -714,6 +816,8 @@ package body Exp_Disp is\n          Subp := Alias (Subp);\n       end if;\n \n+      Build_Class_Wide_Check;\n+\n       --  Definition of the class-wide type and the tagged type\n \n       --  If the controlling argument is itself a tag rather than a tagged\n@@ -1174,7 +1278,7 @@ package body Exp_Disp is\n       if not Tagged_Type_Expansion then\n          return;\n \n-      --  A static conversion to an interface type that is not classwide is\n+      --  A static conversion to an interface type that is not class-wide is\n       --  curious but legal if the interface operation is a null procedure.\n       --  If the operation is abstract it will be rejected later.\n \n@@ -1190,7 +1294,7 @@ package body Exp_Disp is\n \n       if not Is_Static then\n \n-         --  Give error if configurable run time and Displace not available\n+         --  Give error if configurable run-time and Displace not available\n \n          if not RTE_Available (RE_Displace) then\n             Error_Msg_CRT (\"dynamic interface conversion\", N);"}, {"sha": "0c87e1f9739dc64c202344f5b4339ba17338fc69", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -12942,10 +12942,13 @@ package body Exp_Util is\n               Side_Effect_Free (Expressions (N), Name_Req, Variable_Ref)\n                 and then Safe_Prefixed_Reference (N);\n \n-         --  A type qualification is side effect free if the expression\n-         --  is side effect free.\n+         --  A type qualification, type conversion, or unchecked expression is\n+         --  side effect free if the expression is side effect free.\n \n-         when N_Qualified_Expression =>\n+         when N_Qualified_Expression\n+            | N_Type_Conversion\n+            | N_Unchecked_Expression\n+         =>\n             return Side_Effect_Free (Expression (N), Name_Req, Variable_Ref);\n \n          --  A selected component is side effect free only if it is a side\n@@ -12969,12 +12972,6 @@ package body Exp_Util is\n                Side_Effect_Free (Discrete_Range (N), Name_Req, Variable_Ref)\n                  and then Safe_Prefixed_Reference (N);\n \n-         --  A type conversion is side effect free if the expression to be\n-         --  converted is side effect free.\n-\n-         when N_Type_Conversion =>\n-            return Side_Effect_Free (Expression (N), Name_Req, Variable_Ref);\n-\n          --  A unary operator is side effect free if the operand\n          --  is side effect free.\n \n@@ -12990,12 +12987,6 @@ package body Exp_Util is\n                 and then Side_Effect_Free\n                            (Expression (N), Name_Req, Variable_Ref);\n \n-         --  An unchecked expression is side effect free if its expression\n-         --  is side effect free.\n-\n-         when N_Unchecked_Expression =>\n-            return Side_Effect_Free (Expression (N), Name_Req, Variable_Ref);\n-\n          --  A literal is side effect free\n \n          when N_Character_Literal"}, {"sha": "978040ea78da0de0425f2bd46c54fad416dfee1f", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2002,12 +2002,9 @@ package body GNAT.Command_Line is\n                   Found_In_Config := True;\n                   return False;\n \n-               when Parameter_No_Space =>\n-                  Callback (Switch, \"\", Parameter, Index);\n-                  Found_In_Config := True;\n-                  return False;\n-\n-               when Parameter_Optional =>\n+               when Parameter_No_Space\n+                  | Parameter_Optional\n+               =>\n                   Callback (Switch, \"\", Parameter, Index);\n                   Found_In_Config := True;\n                   return False;"}, {"sha": "529c501f26dba27c5a79b231d0a75698ce6573be", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4319,7 +4319,11 @@ package body Ch3 is\n       end if;\n \n       case Token is\n-         when Tok_Function =>\n+         when Tok_Function\n+            | Tok_Not\n+            | Tok_Overriding\n+            | Tok_Procedure\n+         =>\n             Check_Bad_Layout;\n             Append (P_Subprogram (Pf_Decl_Gins_Pbod_Rnam_Stub_Pexp), Decls);\n             Done := False;\n@@ -4374,20 +4378,6 @@ package body Ch3 is\n                P_Identifier_Declarations (Decls, Done, In_Spec);\n             end if;\n \n-         --  Ada 2005: A subprogram declaration can start with \"not\" or\n-         --  \"overriding\". In older versions, \"overriding\" is handled\n-         --  like an identifier, with the appropriate messages.\n-\n-         when Tok_Not =>\n-            Check_Bad_Layout;\n-            Append (P_Subprogram (Pf_Decl_Gins_Pbod_Rnam_Stub_Pexp), Decls);\n-            Done := False;\n-\n-         when Tok_Overriding =>\n-            Check_Bad_Layout;\n-            Append (P_Subprogram (Pf_Decl_Gins_Pbod_Rnam_Stub_Pexp), Decls);\n-            Done := False;\n-\n          when Tok_Package =>\n             Check_Bad_Layout;\n             Append (P_Package (Pf_Decl_Gins_Pbod_Rnam_Stub_Pexp), Decls);\n@@ -4397,11 +4387,6 @@ package body Ch3 is\n             Append (P_Pragma, Decls);\n             Done := False;\n \n-         when Tok_Procedure =>\n-            Check_Bad_Layout;\n-            Append (P_Subprogram (Pf_Decl_Gins_Pbod_Rnam_Stub_Pexp), Decls);\n-            Done := False;\n-\n          when Tok_Protected =>\n             Check_Bad_Layout;\n             Scan; -- past PROTECTED"}, {"sha": "9ba68b1ec3f84b588f3e1c98700086acbe94aa68", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -8981,7 +8981,10 @@ package body Sem_Ch6 is\n                    and then FCE (Explicit_Actual_Parameter (E1),\n                                  Explicit_Actual_Parameter (E2));\n \n-            when N_Qualified_Expression =>\n+            when N_Qualified_Expression\n+               | N_Type_Conversion\n+               | N_Unchecked_Type_Conversion\n+            =>\n                return\n                  FCE (Subtype_Mark (E1), Subtype_Mark (E2))\n                    and then\n@@ -9084,24 +9087,12 @@ package body Sem_Ch6 is\n                   end if;\n                end;\n \n-            when N_Type_Conversion =>\n-               return\n-                 FCE (Subtype_Mark (E1), Subtype_Mark (E2))\n-                   and then\n-                 FCE (Expression (E1), Expression (E2));\n-\n             when N_Unary_Op =>\n                return\n                  Entity (E1) = Entity (E2)\n                    and then\n                  FCE (Right_Opnd (E1), Right_Opnd (E2));\n \n-            when N_Unchecked_Type_Conversion =>\n-               return\n-                 FCE (Subtype_Mark (E1), Subtype_Mark (E2))\n-                   and then\n-                 FCE (Expression (E1), Expression (E2));\n-\n             --  All other node types cannot appear in this context. Strictly\n             --  we should raise a fatal internal error. Instead we just ignore\n             --  the nodes. This means that if anyone makes a mistake in the"}, {"sha": "41941ba50b04214053d23703941dd7329f179365", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -5681,14 +5681,6 @@ package body Sem_Eval is\n          then\n             return False;\n \n-         --  If either type has constraint error bounds, then consider that\n-         --  they match to avoid junk cascaded errors here.\n-\n-         elsif not Is_OK_Static_Subtype (T1)\n-           or else not Is_OK_Static_Subtype (T2)\n-         then\n-            return True;\n-\n          --  Base types must match, but we don't check that (should we???) but\n          --  we do at least check that both types are real, or both types are\n          --  not real.\n@@ -5708,37 +5700,38 @@ package body Sem_Eval is\n             begin\n                if Is_Real_Type (T1) then\n                   return\n-                    (Expr_Value_R (LB1) > Expr_Value_R (HB1))\n+                    Expr_Value_R (LB1) > Expr_Value_R (HB1)\n                       or else\n-                    (Expr_Value_R (LB2) <= Expr_Value_R (LB1)\n-                       and then\n-                     Expr_Value_R (HB1) <= Expr_Value_R (HB2));\n+                        (Expr_Value_R (LB2) <= Expr_Value_R (LB1)\n+                          and then Expr_Value_R (HB1) <= Expr_Value_R (HB2));\n \n                else\n                   return\n-                    (Expr_Value (LB1) > Expr_Value (HB1))\n+                    Expr_Value (LB1) > Expr_Value (HB1)\n                       or else\n-                    (Expr_Value (LB2) <= Expr_Value (LB1)\n-                       and then\n-                     Expr_Value (HB1) <= Expr_Value (HB2));\n+                        (Expr_Value (LB2) <= Expr_Value (LB1)\n+                          and then Expr_Value (HB1) <= Expr_Value (HB2));\n                end if;\n             end;\n          end if;\n \n       --  Access types\n \n       elsif Is_Access_Type (T1) then\n-         return (not Is_Constrained (T2)\n-                  or else (Subtypes_Statically_Match\n-                             (Designated_Type (T1), Designated_Type (T2))))\n+         return\n+           (not Is_Constrained (T2)\n+             or else Subtypes_Statically_Match\n+                       (Designated_Type (T1), Designated_Type (T2)))\n            and then not (Can_Never_Be_Null (T2)\n                           and then not Can_Never_Be_Null (T1));\n \n       --  All other cases\n \n       else\n-         return (Is_Composite_Type (T1) and then not Is_Constrained (T2))\n-           or else Subtypes_Statically_Match (T1, T2, Formal_Derived_Matching);\n+         return\n+           (Is_Composite_Type (T1) and then not Is_Constrained (T2))\n+             or else Subtypes_Statically_Match\n+                       (T1, T2, Formal_Derived_Matching);\n       end if;\n    end Subtypes_Statically_Compatible;\n \n@@ -5856,23 +5849,16 @@ package body Sem_Eval is\n \n             else\n                if not Is_OK_Static_Subtype (T1)\n-                 or else not Is_OK_Static_Subtype (T2)\n+                    or else\n+                  not Is_OK_Static_Subtype (T2)\n                then\n                   return False;\n \n-               --  If either type has constraint error bounds, then say that\n-               --  they match to avoid junk cascaded errors here.\n-\n-               elsif not Is_OK_Static_Subtype (T1)\n-                 or else not Is_OK_Static_Subtype (T2)\n-               then\n-                  return True;\n-\n                elsif Is_Real_Type (T1) then\n                   return\n-                    (Expr_Value_R (LB1) = Expr_Value_R (LB2))\n+                    Expr_Value_R (LB1) = Expr_Value_R (LB2)\n                       and then\n-                    (Expr_Value_R (HB1) = Expr_Value_R (HB2));\n+                    Expr_Value_R (HB1) = Expr_Value_R (HB2);\n \n                else\n                   return"}, {"sha": "9cbd22426418af13b2c878f7813e2e701a106241", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -4905,25 +4905,15 @@ package body Sem_Prag is\n             then\n                return;\n \n-            --  Static expression that raises Constraint_Error. This has\n-            --  already been flagged, so just exit from pragma processing.\n-\n-            elsif Is_OK_Static_Expression (Argx) then\n-               raise Pragma_Exit;\n-\n             --  Here we have a real error (non-static expression)\n \n             else\n                Error_Msg_Name_1 := Pname;\n+               Flag_Non_Static_Expr\n+                 (Fix_Error (\"argument for pragma% must be a identifier or \"\n+                  & \"static string expression!\"), Argx);\n \n-               declare\n-                  Msg : constant String :=\n-                          \"argument for pragma% must be a identifier or \"\n-                          & \"static string expression!\";\n-               begin\n-                  Flag_Non_Static_Expr (Fix_Error (Msg), Argx);\n-                  raise Pragma_Exit;\n-               end;\n+               raise Pragma_Exit;\n             end if;\n          end if;\n       end Check_Arg_Is_External_Name;\n@@ -4936,8 +4926,7 @@ package body Sem_Prag is\n          Argx : constant Node_Id := Get_Pragma_Arg (Arg);\n       begin\n          if Nkind (Argx) /= N_Identifier then\n-            Error_Pragma_Arg\n-              (\"argument for pragma% must be identifier\", Argx);\n+            Error_Pragma_Arg (\"argument for pragma% must be identifier\", Argx);\n          end if;\n       end Check_Arg_Is_Identifier;\n "}, {"sha": "b01ee08d2b4765e651675202fe59a59b5d39c614", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -4958,8 +4958,8 @@ package body Sem_Util is\n             Eloc := Sloc (N);\n          end if;\n \n-         --  Copy message to Msgc, converting any ? in the message into\n-         --  < instead, so that we have an error in GNATprove mode.\n+         --  Copy message to Msgc, converting any ? in the message into <\n+         --  instead, so that we have an error in GNATprove mode.\n \n          Msgl := Msg'Length;\n \n@@ -4976,31 +4976,25 @@ package body Sem_Util is\n          if Msg (Msg'Last) = '?' or else Msg (Msg'Last) = '<' then\n             Wmsg := True;\n \n-         --  In Ada 83, all messages are warnings. In the private part and\n-         --  the body of an instance, constraint_checks are only warnings.\n-         --  We also make this a warning if the Warn parameter is set.\n+         --  In Ada 83, all messages are warnings. In the private part and the\n+         --  body of an instance, constraint_checks are only warnings. We also\n+         --  make this a warning if the Warn parameter is set.\n \n          elsif Warn\n            or else (Ada_Version = Ada_83 and then Comes_From_Source (N))\n+           or else In_Instance_Not_Visible\n          then\n             Msgl := Msgl + 1;\n             Msgc (Msgl) := '<';\n             Msgl := Msgl + 1;\n             Msgc (Msgl) := '<';\n             Wmsg := True;\n \n-         elsif In_Instance_Not_Visible then\n-            Msgl := Msgl + 1;\n-            Msgc (Msgl) := '<';\n-            Msgl := Msgl + 1;\n-            Msgc (Msgl) := '<';\n-            Wmsg := True;\n-\n-         --  Otherwise we have a real error message (Ada 95 static case)\n-         --  and we make this an unconditional message. Note that in the\n-         --  warning case we do not make the message unconditional, it seems\n-         --  quite reasonable to delete messages like this (about exceptions\n-         --  that will be raised) in dead code.\n+         --  Otherwise we have a real error message (Ada 95 static case) and we\n+         --  make this an unconditional message. Note that in the warning case\n+         --  we do not make the message unconditional, it seems reasonable to\n+         --  delete messages like this (about exceptions that will be raised)\n+         --  in dead code.\n \n          else\n             Wmsg := False;\n@@ -19118,14 +19112,7 @@ package body Sem_Util is\n             end if;\n          end if;\n \n-      elsif Nkind (Obj) = N_Selected_Component then\n-         if Is_Access_Type (Etype (Prefix (Obj))) then\n-            return Type_Access_Level (Etype (Prefix (Obj)));\n-         else\n-            return Object_Access_Level (Prefix (Obj));\n-         end if;\n-\n-      elsif Nkind (Obj) = N_Indexed_Component then\n+      elsif Nkind_In (Obj, N_Indexed_Component, N_Selected_Component) then\n          if Is_Access_Type (Etype (Prefix (Obj))) then\n             return Type_Access_Level (Etype (Prefix (Obj)));\n          else"}, {"sha": "e5a6c87c2a59874dfedcb415bffa389b9f6f8c9e", "filename": "gcc/ada/uname.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Funame.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304757d2ceec74e12ac43312b7eab9aa3b092126/gcc%2Fada%2Funame.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Funame.adb?ref=304757d2ceec74e12ac43312b7eab9aa3b092126", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -300,12 +300,8 @@ package body Uname is\n                when N_Compilation_Unit =>\n                   Add_Node_Name (Unit (Node));\n \n-               when N_Package_Body_Stub =>\n-                  Add_Node_Name (Get_Parent (Node));\n-                  Add_Char ('.');\n-                  Add_Node_Name (Defining_Identifier (Node));\n-\n-               when N_Protected_Body_Stub\n+               when N_Package_Body_Stub\n+                  | N_Protected_Body_Stub\n                   | N_Task_Body_Stub\n                =>\n                   Add_Node_Name (Get_Parent (Node));"}]}