{"sha": "92c3e7043a4af0a84bd326a043668d4aaa465931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJjM2U3MDQzYTRhZjBhODRiZDMyNmEwNDM2NjhkNGFhYTQ2NTkzMQ==", "commit": {"author": {"name": "Ozkan Sezer", "email": "sezeroz@gmail.com", "date": "2009-04-13T10:45:58Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-04-13T10:45:58Z"}, "message": "re PR target/39397 (libiberty/pex-*, inconsistent/incorrect pid_t usage)\n\n2009-04-13  Ozkan Sezer  <sezeroz@gmail.com>\n\n        PR target/39397\n        * pex-common.h (struct pex_obj): Store pid values as pid_t,\n        not as long (members *children and (*wait))\n        * pex-common.c (pex_run_in_environment): Likewise.\n        * pex-win32.c (pex_win32_wait): Return pid_t and properly check\n        returned pid value.\n        * pex-djgpp.c (pex_djgpp_wait): Return pid_t.\n        * pex-msdos.c (pex_msdos_wait): Likewise.\n\nFrom-SVN: r146001", "tree": {"sha": "645bc54da810c66f07695088c570058ea7c950fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645bc54da810c66f07695088c570058ea7c950fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92c3e7043a4af0a84bd326a043668d4aaa465931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c3e7043a4af0a84bd326a043668d4aaa465931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c3e7043a4af0a84bd326a043668d4aaa465931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c3e7043a4af0a84bd326a043668d4aaa465931/comments", "author": {"login": "sezero", "id": 4222725, "node_id": "MDQ6VXNlcjQyMjI3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4222725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sezero", "html_url": "https://github.com/sezero", "followers_url": "https://api.github.com/users/sezero/followers", "following_url": "https://api.github.com/users/sezero/following{/other_user}", "gists_url": "https://api.github.com/users/sezero/gists{/gist_id}", "starred_url": "https://api.github.com/users/sezero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sezero/subscriptions", "organizations_url": "https://api.github.com/users/sezero/orgs", "repos_url": "https://api.github.com/users/sezero/repos", "events_url": "https://api.github.com/users/sezero/events{/privacy}", "received_events_url": "https://api.github.com/users/sezero/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "266aa80543a9dbf9bc53d8d7123f847124740b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266aa80543a9dbf9bc53d8d7123f847124740b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266aa80543a9dbf9bc53d8d7123f847124740b73"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "c58f63551420074f02c9c1ac2e430a2ea4159f26", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=92c3e7043a4af0a84bd326a043668d4aaa465931", "patch": "@@ -1,3 +1,14 @@\n+2009-04-13  Ozkan Sezer  <sezeroz@gmail.com>\n+\n+        PR target/39397\n+        * pex-common.h (struct pex_obj): Store pid values as pid_t,\n+        not as long (members *children and (*wait))\n+        * pex-common.c (pex_run_in_environment): Likewise.\n+        * pex-win32.c (pex_win32_wait): Return pid_t and properly check\n+        returned pid value.\n+        * pex-djgpp.c (pex_djgpp_wait): Return pid_t.\n+        * pex-msdos.c (pex_msdos_wait): Likewise.\n+\n 2009-04-07  Arnaud Patard <apatard@mandriva.com>\n \n        * libiberty/configure.ac: Fix Linux/MIPS matching rule."}, {"sha": "9a9fe2419570888171fc4460aa8665a10c6bfde3", "filename": "libiberty/pex-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.c?ref=92c3e7043a4af0a84bd326a043668d4aaa465931", "patch": "@@ -160,7 +160,7 @@ pex_run_in_environment (struct pex_obj *obj, int flags, const char *executable,\n   int outname_allocated;\n   int p[2];\n   int toclose;\n-  long pid;\n+  pid_t pid;\n \n   in = -1;\n   out = -1;\n@@ -345,7 +345,7 @@ pex_run_in_environment (struct pex_obj *obj, int flags, const char *executable,\n     goto error_exit;\n \n   ++obj->count;\n-  obj->children = XRESIZEVEC (long, obj->children, obj->count);\n+  obj->children = XRESIZEVEC (pid_t, obj->children, obj->count);\n   obj->children[obj->count - 1] = pid;\n \n   return NULL;"}, {"sha": "af338e6a34b0b6cc26304906e2930b2269c948c8", "filename": "libiberty/pex-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.h?ref=92c3e7043a4af0a84bd326a043668d4aaa465931", "patch": "@@ -70,7 +70,7 @@ struct pex_obj\n   /* Number of child processes.  */\n   int count;\n   /* PIDs of child processes; array allocated using malloc.  */\n-  long *children;\n+  pid_t *children;\n   /* Exit statuses of child processes; array allocated using malloc.  */\n   int *status;\n   /* Time used by child processes; array allocated using malloc.  */\n@@ -126,7 +126,7 @@ struct pex_funcs\n      and time in *TIME (if it is not null).  CHILD is from fork.  DONE\n      is 1 if this is called via pex_free.  ERRMSG and ERR are as in\n      fork.  Return 0 on success, -1 on error.  */\n-  int (*wait) (struct pex_obj *, pid_t /* child */, int * /* status */,\n+  pid_t (*wait) (struct pex_obj *, pid_t /* child */, int * /* status */,\n                struct pex_time * /* time */, int /* done */,\n                const char ** /* errmsg */, int * /* err */);\n   /* Create a pipe (only called if PEX_USE_PIPES is set) storing two"}, {"sha": "0721139954ff993a0c872a5697b4d9c8bdba9eeb", "filename": "libiberty/pex-djgpp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-djgpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-djgpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-djgpp.c?ref=92c3e7043a4af0a84bd326a043668d4aaa465931", "patch": "@@ -49,7 +49,7 @@ static pid_t pex_djgpp_exec_child (struct pex_obj *, int, const char *,\n \t\t\t\t  int, int, int, int,\n \t\t\t\t  const char **, int *);\n static int pex_djgpp_close (struct pex_obj *, int);\n-static int pex_djgpp_wait (struct pex_obj *, pid_t, int *, struct pex_time *,\n+static pid_t pex_djgpp_wait (struct pex_obj *, pid_t, int *, struct pex_time *,\n \t\t\t   int, const char **, int *);\n \n /* The list of functions we pass to the common routines.  */\n@@ -276,7 +276,7 @@ pex_djgpp_exec_child (struct pex_obj *obj, int flags, const char *executable,\n    has already completed, and we just need to return the exit\n    status.  */\n \n-static int\n+static pid_t\n pex_djgpp_wait (struct pex_obj *obj, pid_t pid, int *status,\n \t\tstruct pex_time *time, int done ATTRIBUTE_UNUSED,\n \t\tconst char **errmsg ATTRIBUTE_UNUSED,"}, {"sha": "4b77bf655fb5bc9145d5b69b71036968d7300b64", "filename": "libiberty/pex-msdos.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-msdos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-msdos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-msdos.c?ref=92c3e7043a4af0a84bd326a043668d4aaa465931", "patch": "@@ -59,7 +59,7 @@ static pid_t pex_msdos_exec_child (struct pex_obj *, int, const char *,\n \t\t\t\t  int, int, int, int,\n \t\t\t\t  int, const char **, int *);\n static int pex_msdos_close (struct pex_obj *, int);\n-static int pex_msdos_wait (struct pex_obj *, pid_t, int *, struct pex_time *,\n+static pid_t pex_msdos_wait (struct pex_obj *, pid_t, int *, struct pex_time *,\n \t\t\t   int, const char **, int *);\n static void pex_msdos_cleanup (struct pex_obj *);\n \n@@ -282,7 +282,7 @@ pex_msdos_exec_child (struct pex_obj *obj, int flags, const char *executable,\n    has already completed, and we just need to return the exit\n    status.  */\n \n-static int\n+static pid_t\n pex_msdos_wait (struct pex_obj *obj, pid_t pid, int *status,\n \t\tstruct pex_time *time, int done ATTRIBUTE_UNUSED,\n \t\tconst char **errmsg ATTRIBUTE_UNUSED,"}, {"sha": "3f3775193664a13aa8bbf2cdf3d4c0d4e366dba1", "filename": "libiberty/pex-win32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c3e7043a4af0a84bd326a043668d4aaa465931/libiberty%2Fpex-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-win32.c?ref=92c3e7043a4af0a84bd326a043668d4aaa465931", "patch": "@@ -84,7 +84,7 @@ static pid_t pex_win32_exec_child (struct pex_obj *, int, const char *,\n                                   int, int, int, int,\n \t\t\t\t  const char **, int *);\n static int pex_win32_close (struct pex_obj *, int);\n-static int pex_win32_wait (struct pex_obj *, pid_t, int *,\n+static pid_t pex_win32_wait (struct pex_obj *, pid_t, int *,\n \t\t\t   struct pex_time *, int, const char **, int *);\n static int pex_win32_pipe (struct pex_obj *, int *, int);\n static FILE *pex_win32_fdopenr (struct pex_obj *, int, int);\n@@ -705,7 +705,7 @@ spawn_script (const char *executable, char *const *argv,\n \t\t\t\t     dwCreationFlags, si, pi);\n \t\t  if (executable1 != newex)\n \t\t    free ((char *) newex);\n-\t\t  if ((long) pid < 0)\n+\t\t  if (pid == (pid_t) -1)\n \t\t    {\n \t\t      newex = msys_rootify (executable1);\n \t\t      if (newex != executable1)\n@@ -722,7 +722,7 @@ spawn_script (const char *executable, char *const *argv,\n \t    }\n \t}\n     }\n-  if ((long) pid < 0)\n+  if (pid == (pid_t) -1)\n     errno = save_errno;\n   return pid;\n }\n@@ -840,7 +840,7 @@ pex_win32_exec_child (struct pex_obj *obj ATTRIBUTE_UNUSED, int flags,\n    status == 3.  We fix the status code to conform to the usual WIF*\n    macros.  Note that WIFSIGNALED will never be true under CRTDLL. */\n \n-static int\n+static pid_t\n pex_win32_wait (struct pex_obj *obj ATTRIBUTE_UNUSED, pid_t pid,\n \t\tint *status, struct pex_time *time, int done ATTRIBUTE_UNUSED,\n \t\tconst char **errmsg, int *err)"}]}