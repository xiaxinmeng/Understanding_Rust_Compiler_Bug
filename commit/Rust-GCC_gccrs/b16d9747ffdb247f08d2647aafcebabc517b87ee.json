{"sha": "b16d9747ffdb247f08d2647aafcebabc517b87ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2ZDk3NDdmZmRiMjQ3ZjA4ZDI2NDdhYWZjZWJhYmM1MTdiODdlZQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2009-04-09T09:35:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T09:35:24Z"}, "message": "exp_disp.adb (Export_DT): Addition of a new argument (Index)...\n\n2009-04-09  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Export_DT): Addition of a new argument (Index); used to\n\tretrieve from the Dispatch_Table_Wrappers list the external name.\n\tAddition of documentation.\n\t(Make_Secondary_DT): Addition of a new argument (Suffix_Index) that is\n\tused to export secondary dispatch tables (in the previous version of\n\tthe frontend only primary dispatch tables were exported). Addition of\n\tdocumentation.\n\t(Import_DT): New subprogram (internal of Make_Tags). Used to import a\n\tdispatch table of a given tagged type. \n\t(Make_Tags): Modified to import secondary dispatch tables.\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Code cleanup.\n\t(Constant_Redeclaration): Code cleanup.\n\n\t* einfo.ads (Dispatch_Table_Wrapper): Renamed to\n\tDispatch_Table_Wrappers.  Update documentation.\n\n\t* einfo.adb (Dispatch_Table_Wrapper, Set_Dispatch_Table_Wrapper):\n\tRenamed to Dispatch_Table_Wrappers.\n\n\t* sem_util.adb (Collect_Interface_Components): Improve handling of\n\tprivate types.\n\n\t* atree.ads (Elist26, Set_Elist26): New subprograms\n\n\t* atree.adb (Elist26, Set_Elist26): New subprograms\n\nFrom-SVN: r145811", "tree": {"sha": "3ab08bc8a192f550642f5ccee3b8b0402ffdf1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ab08bc8a192f550642f5ccee3b8b0402ffdf1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b16d9747ffdb247f08d2647aafcebabc517b87ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16d9747ffdb247f08d2647aafcebabc517b87ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16d9747ffdb247f08d2647aafcebabc517b87ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16d9747ffdb247f08d2647aafcebabc517b87ee/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59262ebb3e73d3bca24a863fcad3c5673f416b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59262ebb3e73d3bca24a863fcad3c5673f416b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59262ebb3e73d3bca24a863fcad3c5673f416b44"}], "stats": {"total": 499, "additions": 338, "deletions": 161}, "files": [{"sha": "ebbc4d94553addbd93e4848f8712b57464a36367", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -1,3 +1,32 @@\n+2009-04-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Export_DT): Addition of a new argument (Index); used to\n+\tretrieve from the Dispatch_Table_Wrappers list the external name.\n+\tAddition of documentation.\n+\t(Make_Secondary_DT): Addition of a new argument (Suffix_Index) that is\n+\tused to export secondary dispatch tables (in the previous version of\n+\tthe frontend only primary dispatch tables were exported). Addition of\n+\tdocumentation.\n+\t(Import_DT): New subprogram (internal of Make_Tags). Used to import a\n+\tdispatch table of a given tagged type. \n+\t(Make_Tags): Modified to import secondary dispatch tables.\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Code cleanup.\n+\t(Constant_Redeclaration): Code cleanup.\n+\n+\t* einfo.ads (Dispatch_Table_Wrapper): Renamed to\n+\tDispatch_Table_Wrappers.  Update documentation.\n+\n+\t* einfo.adb (Dispatch_Table_Wrapper, Set_Dispatch_Table_Wrapper):\n+\tRenamed to Dispatch_Table_Wrappers.\n+\n+\t* sem_util.adb (Collect_Interface_Components): Improve handling of\n+\tprivate types.\n+\n+\t* atree.ads (Elist26, Set_Elist26): New subprograms\n+\n+\t* atree.adb (Elist26, Set_Elist26): New subprograms\n+\n 2009-04-09  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Build_Derived_Record_Type): Fix typo."}, {"sha": "2c6a6e33b07a33ba2196a6114d150bce37ef68c9", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -3305,6 +3305,17 @@ package body Atree is\n          end if;\n       end Elist25;\n \n+      function Elist26 (N : Node_Id) return Elist_Id is\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Value : constant Union_Id := Nodes.Table (N + 4).Field8;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n+      end Elist26;\n+\n       function Name1 (N : Node_Id) return Name_Id is\n       begin\n          pragma Assert (N <= Nodes.Last);\n@@ -5422,6 +5433,12 @@ package body Atree is\n          Nodes.Table (N + 4).Field7 := Union_Id (Val);\n       end Set_Elist25;\n \n+      procedure Set_Elist26 (N : Node_Id; Val : Elist_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field8 := Union_Id (Val);\n+      end Set_Elist26;\n+\n       procedure Set_Name1 (N : Node_Id; Val : Name_Id) is\n       begin\n          pragma Assert (N <= Nodes.Last);"}, {"sha": "824e62c4c7afadf9a356d9ae3808bdc41586a60a", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1060,6 +1060,9 @@ package Atree is\n       function Elist25 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist25);\n \n+      function Elist26 (N : Node_Id) return Elist_Id;\n+      pragma Inline (Elist26);\n+\n       function Name1 (N : Node_Id) return Name_Id;\n       pragma Inline (Name1);\n \n@@ -2090,6 +2093,9 @@ package Atree is\n       procedure Set_Elist25 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist25);\n \n+      procedure Set_Elist26 (N : Node_Id; Val : Elist_Id);\n+      pragma Inline (Set_Elist26);\n+\n       procedure Set_Name1 (N : Node_Id; Val : Name_Id);\n       pragma Inline (Set_Name1);\n "}, {"sha": "dcb6ada39b464816a877522df8cdf97e6f1e5e70", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -214,7 +214,7 @@ package body Einfo is\n    --    DT_Offset_To_Top_Func           Node25\n    --    Task_Body_Procedure             Node25\n \n-   --    Dispatch_Table_Wrapper          Node26\n+   --    Dispatch_Table_Wrappers         Elist26\n    --    Last_Assignment                 Node26\n    --    Overridden_Operation            Node26\n    --    Package_Instantiation           Node26\n@@ -851,11 +851,11 @@ package body Einfo is\n       return Uint15 (Id);\n    end Discriminant_Number;\n \n-   function Dispatch_Table_Wrapper (Id : E) return E is\n+   function Dispatch_Table_Wrappers (Id : E) return L is\n    begin\n       pragma Assert (Is_Tagged_Type (Id));\n-      return Node26 (Implementation_Base_Type (Id));\n-   end Dispatch_Table_Wrapper;\n+      return Elist26 (Implementation_Base_Type (Id));\n+   end Dispatch_Table_Wrappers;\n \n    function DT_Entry_Count (Id : E) return U is\n    begin\n@@ -3262,11 +3262,11 @@ package body Einfo is\n       Set_Uint15 (Id, V);\n    end Set_Discriminant_Number;\n \n-   procedure Set_Dispatch_Table_Wrapper (Id : E; V : E) is\n+   procedure Set_Dispatch_Table_Wrappers (Id : E; V : L) is\n    begin\n       pragma Assert (Is_Tagged_Type (Id) and then Id = Base_Type (Id));\n-      Set_Node26 (Id, V);\n-   end Set_Dispatch_Table_Wrapper;\n+      Set_Elist26 (Id, V);\n+   end Set_Dispatch_Table_Wrappers;\n \n    procedure Set_DT_Entry_Count (Id : E; V : U) is\n    begin\n@@ -8659,10 +8659,10 @@ package body Einfo is\n \n          when E_Record_Type                                |\n               E_Record_Type_With_Private                   =>\n-            Write_Str (\"Dispatch_Table_Wrapper\");\n+            Write_Str (\"Dispatch_Table_Wrappers\");\n \n-         when E_In_Out_Parameter                               |\n-              E_Out_Parameter                           |\n+         when E_In_Out_Parameter                           |\n+              E_Out_Parameter                              |\n               E_Variable                                   =>\n             Write_Str (\"Last_Assignment\");\n "}, {"sha": "3f5443f08e5ee7a13a6daee316bf2c8ddc6514e4", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -816,11 +816,11 @@ package Einfo is\n --       the list of discriminants of the type, i.e. a sequential integer\n --       index starting at 1 and ranging up to Number_Discriminants.\n \n---    Dispatch_Table_Wrapper (Node26) [implementation base type only]\n+--    Dispatch_Table_Wrappers (Elist26) [implementation base type only]\n --       Present in library level record type entities if we are generating\n --       statically allocated dispatch tables. For a tagged type, points to\n---       the dispatch table wrapper associated with the tagged type. For a\n---       non-tagged record, contains Empty.\n+--       the list of dispatch table wrappers associated with the tagged type.\n+--       For a non-tagged record, contains No_Elist.\n \n --    DTC_Entity (Node16)\n --       Present in function and procedure entities. Set to Empty unless\n@@ -5360,7 +5360,7 @@ package Einfo is\n    --  E_Record_Subtype\n    --    Primitive_Operations                (Elist15)\n    --    Access_Disp_Table                   (Elist16)  (base type only)\n-   --    Dispatch_Table_Wrapper              (Node26)   (base type only)\n+   --    Dispatch_Table_Wrappers             (Elist26)  (base type only)\n    --    Cloned_Subtype                      (Node16)   (subtype case only)\n    --    First_Entity                        (Node17)\n    --    Corresponding_Concurrent_Type       (Node18)\n@@ -5395,7 +5395,7 @@ package Einfo is\n    --  E_Record_Subtype_With_Private\n    --    Primitive_Operations                (Elist15)\n    --    Access_Disp_Table                   (Elist16)  (base type only)\n-   --    Dispatch_Table_Wrapper              (Node26)   (base type only)\n+   --    Dispatch_Table_Wrappers             (Elist26)  (base type only)\n    --    First_Entity                        (Node17)\n    --    Private_Dependents                  (Elist18)\n    --    Underlying_Full_View                (Node19)\n@@ -5785,7 +5785,7 @@ package Einfo is\n    function Current_Value                       (Id : E) return N;\n    function Debug_Info_Off                      (Id : E) return B;\n    function Debug_Renaming_Link                 (Id : E) return E;\n-   function Dispatch_Table_Wrapper              (Id : E) return E;\n+   function Dispatch_Table_Wrappers             (Id : E) return L;\n    function DTC_Entity                          (Id : E) return E;\n    function DT_Entry_Count                      (Id : E) return U;\n    function DT_Offset_To_Top_Func               (Id : E) return E;\n@@ -6313,7 +6313,7 @@ package Einfo is\n \n    procedure Set_Accept_Address                  (Id : E; V : L);\n    procedure Set_Access_Disp_Table               (Id : E; V : L);\n-   procedure Set_Dispatch_Table_Wrapper          (Id : E; V : E);\n+   procedure Set_Dispatch_Table_Wrappers         (Id : E; V : L);\n    procedure Set_Actual_Subtype                  (Id : E; V : E);\n    procedure Set_Address_Taken                   (Id : E; V : B := True);\n    procedure Set_Alias                           (Id : E; V : E);\n@@ -6994,7 +6994,7 @@ package Einfo is\n    pragma Inline (Current_Value);\n    pragma Inline (Debug_Info_Off);\n    pragma Inline (Debug_Renaming_Link);\n-   pragma Inline (Dispatch_Table_Wrapper);\n+   pragma Inline (Dispatch_Table_Wrappers);\n    pragma Inline (DTC_Entity);\n    pragma Inline (DT_Entry_Count);\n    pragma Inline (DT_Offset_To_Top_Func);\n@@ -7421,7 +7421,7 @@ package Einfo is\n    pragma Inline (Set_Current_Value);\n    pragma Inline (Set_Debug_Info_Off);\n    pragma Inline (Set_Debug_Renaming_Link);\n-   pragma Inline (Set_Dispatch_Table_Wrapper);\n+   pragma Inline (Set_Dispatch_Table_Wrappers);\n    pragma Inline (Set_DTC_Entity);\n    pragma Inline (Set_DT_Entry_Count);\n    pragma Inline (Set_DT_Offset_To_Top_Func);"}, {"sha": "66279a8a103926858ea9f4cffbbf43808b6b89ad", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 251, "deletions": 115, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -3150,13 +3150,19 @@ package body Exp_Disp is\n       --  freezes a tagged type, when one of its primitive operations has a\n       --  type in its profile whose full view has not been analyzed yet.\n \n-      procedure Export_DT (Typ : Entity_Id; DT : Entity_Id);\n-      --  Export the dispatch table entity DT of tagged type Typ. Required to\n-      --  generate forward references and statically allocate the table.\n+      procedure Export_DT (Typ : Entity_Id; DT : Entity_Id; Index : Nat := 0);\n+      --  Export the dispatch table DT of tagged type Typ. Required to generate\n+      --  forward references and statically allocate the table. For primary\n+      --  dispatch tables Index is 0; for secondary dispatch tables the value\n+      --  of index must match the Suffix_Index value assigned to the table by\n+      --  Make_Tags when generating its unique external name, and it is used to\n+      --  retrieve from the Dispatch_Table_Wrappers list associated with Typ\n+      --  the external name generated by Import_DT.\n \n       procedure Make_Secondary_DT\n         (Typ              : Entity_Id;\n          Iface            : Entity_Id;\n+         Suffix_Index     : Int;\n          Num_Iface_Prims  : Nat;\n          Iface_DT_Ptr     : Entity_Id;\n          Predef_Prims_Ptr : Entity_Id;\n@@ -3171,7 +3177,12 @@ package body Exp_Disp is\n       --  calls through interface types; the latter secondary table is\n       --  generated when Build_Thunks is False, and provides support for\n       --  Generic Dispatching Constructors that dispatch calls through\n-      --  interface types.\n+      --  interface types. When constructing this latter table the value\n+      --  of Suffix_Index is -1 to indicate that there is no need to export\n+      --  such table when building statically allocated dispatch tables; a\n+      --  positive value of Suffix_Index must match the Suffix_Index value\n+      --  assigned to this secondary dispatch table by Make_Tags when its\n+      --  unique external name was generated.\n \n       ------------------------------\n       -- Check_Premature_Freezing --\n@@ -3200,14 +3211,29 @@ package body Exp_Disp is\n       -- Export_DT --\n       ---------------\n \n-      procedure Export_DT (Typ : Entity_Id; DT : Entity_Id) is\n+      procedure Export_DT (Typ : Entity_Id; DT : Entity_Id; Index : Nat := 0)\n+      is\n+         Count : Nat;\n+         Elmt  : Elmt_Id;\n+\n       begin\n          Set_Is_Statically_Allocated (DT);\n          Set_Is_True_Constant (DT);\n          Set_Is_Exported (DT);\n \n-         pragma Assert (Present (Dispatch_Table_Wrapper (Typ)));\n-         Get_External_Name (Dispatch_Table_Wrapper (Typ), True);\n+         Count := 0;\n+         Elmt  := First_Elmt (Dispatch_Table_Wrappers (Typ));\n+         while Count /= Index loop\n+            Next_Elmt (Elmt);\n+            Count := Count + 1;\n+         end loop;\n+\n+         pragma Assert (Related_Type (Node (Elmt)) = Typ);\n+\n+         Get_External_Name\n+           (Entity     => Node (Elmt),\n+            Has_Suffix => True);\n+\n          Set_Interface_Name (DT,\n            Make_String_Literal (Loc,\n              Strval => String_From_Name_Buffer));\n@@ -3225,20 +3251,24 @@ package body Exp_Disp is\n       procedure Make_Secondary_DT\n         (Typ              : Entity_Id;\n          Iface            : Entity_Id;\n+         Suffix_Index     : Int;\n          Num_Iface_Prims  : Nat;\n          Iface_DT_Ptr     : Entity_Id;\n          Predef_Prims_Ptr : Entity_Id;\n          Build_Thunks     : Boolean;\n          Result           : List_Id)\n       is\n          Loc                : constant Source_Ptr := Sloc (Typ);\n-         Name_DT            : constant Name_Id := New_Internal_Name ('T');\n+         Exporting_Table    : constant Boolean :=\n+                                Building_Static_DT (Typ)\n+                                  and then Suffix_Index > 0;\n          Iface_DT           : constant Entity_Id :=\n-                                Make_Defining_Identifier (Loc, Name_DT);\n+                                Make_Defining_Identifier (Loc,\n+                                  Chars => New_Internal_Name ('T'));\n          Name_Predef_Prims  : constant Name_Id := New_Internal_Name ('R');\n          Predef_Prims       : constant Entity_Id :=\n                                 Make_Defining_Identifier (Loc,\n-                                  Name_Predef_Prims);\n+                                  Chars => Name_Predef_Prims);\n          DT_Constr_List     : List_Id;\n          DT_Aggr_List       : List_Id;\n          Empty_DT           : Boolean := False;\n@@ -3273,10 +3303,10 @@ package body Exp_Disp is\n             Set_Is_True_Constant (Iface_DT);\n          end if;\n \n-         --  Generate code to create the storage for the Dispatch_Table object.\n-         --  If the number of primitives of Typ is 0 we reserve a dummy single\n-         --  entry for its DT because at run-time the pointer to this dummy\n-         --  entry will be used as the tag.\n+         --  Calculate the number of slots of the dispatch table. If the number\n+         --  of primitives of Typ is 0 we reserve a dummy single entry for its\n+         --  DT because at run-time the pointer to this dummy entry will be\n+         --  used as the tag.\n \n          if Num_Iface_Prims = 0 then\n             Empty_DT := True;\n@@ -3432,6 +3462,7 @@ package body Exp_Disp is\n          --                                  prim-op-2'address,\n          --                                  ...\n          --                                  prim-op-n'address));\n+         --   for Iface_DT'Alignment use Address'Alignment;\n \n          --  Stage 3: Initialize the discriminant and the record components\n \n@@ -3686,65 +3717,85 @@ package body Exp_Disp is\n \n          Append_Elmt (New_Node, DT_Aggr);\n \n+         --  Note: Secondary dispatch tables cannot be declared constant\n+         --  because the component Offset_To_Top is currently initialized\n+         --  by the IP routine.\n+\n          Append_To (Result,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Iface_DT,\n              Aliased_Present     => True,\n+             Constant_Present    => False,\n+\n              Object_Definition   =>\n                Make_Subtype_Indication (Loc,\n                  Subtype_Mark => New_Reference_To\n                                    (RTE (RE_Dispatch_Table_Wrapper), Loc),\n                  Constraint   => Make_Index_Or_Discriminant_Constraint (Loc,\n                                    Constraints => DT_Constr_List)),\n \n-             Expression => Make_Aggregate (Loc,\n-               Expressions => DT_Aggr_List)));\n+             Expression          =>\n+               Make_Aggregate (Loc,\n+                 Expressions => DT_Aggr_List)));\n \n          Append_To (Result,\n            Make_Attribute_Definition_Clause (Loc,\n              Name       => New_Reference_To (Iface_DT, Loc),\n              Chars      => Name_Alignment,\n+\n              Expression =>\n                Make_Attribute_Reference (Loc,\n-                 Prefix =>\n+                 Prefix         =>\n                    New_Reference_To (RTE (RE_Integer_Address), Loc),\n                  Attribute_Name => Name_Alignment)));\n \n+         if Exporting_Table then\n+            Export_DT (Typ, Iface_DT, Suffix_Index);\n+\n          --  Generate code to create the pointer to the dispatch table\n \n-         --    Iface_DT_Ptr : Tag := Tag!(DT'Address);\n+         --    Iface_DT_Ptr : Tag := Tag!(DT.Prims_Ptr'Address);\n \n-         Append_To (Result,\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Iface_DT_Ptr,\n-             Constant_Present    => True,\n-             Object_Definition =>\n-               New_Reference_To (RTE (RE_Interface_Tag), Loc),\n-             Expression =>\n-               Unchecked_Convert_To (RTE (RE_Interface_Tag),\n-                 Make_Attribute_Reference (Loc,\n-                   Prefix =>\n-                     Make_Selected_Component (Loc,\n-                       Prefix => New_Reference_To (Iface_DT, Loc),\n-                     Selector_Name =>\n-                       New_Occurrence_Of\n-                         (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n-                   Attribute_Name => Name_Address))));\n+         --  Note: This declaration is not added here if the table is exported\n+         --  because in such case Make_Tags has already added this declaration.\n+\n+         else\n+            Append_To (Result,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Iface_DT_Ptr,\n+                Constant_Present    => True,\n+\n+                Object_Definition   =>\n+                  New_Reference_To (RTE (RE_Interface_Tag), Loc),\n+\n+                Expression          =>\n+                  Unchecked_Convert_To (RTE (RE_Interface_Tag),\n+                    Make_Attribute_Reference (Loc,\n+                      Prefix         =>\n+                        Make_Selected_Component (Loc,\n+                          Prefix        => New_Reference_To (Iface_DT, Loc),\n+                          Selector_Name =>\n+                            New_Occurrence_Of\n+                              (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n+                      Attribute_Name => Name_Address))));\n+         end if;\n \n          Append_To (Result,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Predef_Prims_Ptr,\n              Constant_Present    => True,\n-             Object_Definition =>\n+\n+             Object_Definition   =>\n                New_Reference_To (RTE (RE_Address), Loc),\n-             Expression =>\n+\n+             Expression          =>\n                Make_Attribute_Reference (Loc,\n-                 Prefix =>\n+                 Prefix         =>\n                    Make_Selected_Component (Loc,\n-                     Prefix => New_Reference_To (Iface_DT, Loc),\n-                   Selector_Name =>\n-                     New_Occurrence_Of\n-                       (RTE_Record_Component (RE_Predef_Prims), Loc)),\n+                     Prefix        => New_Reference_To (Iface_DT, Loc),\n+                     Selector_Name =>\n+                       New_Occurrence_Of\n+                         (RTE_Record_Component (RE_Predef_Prims), Loc)),\n                  Attribute_Name => Name_Address)));\n \n          --  Remember entities containing dispatch tables\n@@ -3927,7 +3978,14 @@ package body Exp_Disp is\n       if Has_Interfaces (Typ) then\n          Collect_Interface_Components (Typ, Typ_Comps);\n \n-         Suffix_Index := 0;\n+         --  Each secondary dispatch table is assigned an unique positive\n+         --  suffix index; such value also corresponds with the location of\n+         --  its entity in the Dispatch_Table_Wrappers list (see Make_Tags).\n+\n+         --  Note: This value must be kept sync with the Suffix_Index values\n+         --  generated by Make_Tags\n+\n+         Suffix_Index := 1;\n          AI_Tag_Elmt  :=\n            Next_Elmt (Next_Elmt (First_Elmt (Access_Disp_Table (Typ))));\n \n@@ -3939,16 +3997,18 @@ package body Exp_Disp is\n             Make_Secondary_DT\n              (Typ             => Typ,\n               Iface           => Base_Type (Related_Type (Node (AI_Tag_Comp))),\n+              Suffix_Index    => Suffix_Index,\n               Num_Iface_Prims => UI_To_Int\n                                    (DT_Entry_Count (Node (AI_Tag_Comp))),\n               Iface_DT_Ptr    => Node (AI_Tag_Elmt),\n               Predef_Prims_Ptr => Node (Next_Elmt (AI_Tag_Elmt)),\n               Build_Thunks    => True,\n               Result          => Result);\n-            Next_Elmt (AI_Tag_Elmt);\n \n-            --  Skip the secondary dispatch table of predefined primitives\n+            --  Skip secondary dispatch table and secondary dispatch table of\n+            --  predefined primitives\n \n+            Next_Elmt (AI_Tag_Elmt);\n             Next_Elmt (AI_Tag_Elmt);\n \n             --  Build the secondary table containing pointers to primitives\n@@ -3957,16 +4017,18 @@ package body Exp_Disp is\n             Make_Secondary_DT\n              (Typ             => Typ,\n               Iface           => Base_Type (Related_Type (Node (AI_Tag_Comp))),\n+              Suffix_Index    => -1,\n               Num_Iface_Prims =>  UI_To_Int\n                                    (DT_Entry_Count (Node (AI_Tag_Comp))),\n               Iface_DT_Ptr    => Node (AI_Tag_Elmt),\n               Predef_Prims_Ptr => Node (Next_Elmt (AI_Tag_Elmt)),\n               Build_Thunks    => False,\n               Result          => Result);\n-            Next_Elmt (AI_Tag_Elmt);\n \n-            --  Skip the secondary dispatch table of predefined primitives\n+            --  Skip secondary dispatch table and secondary dispatch table of\n+            --  predefined primitives\n \n+            Next_Elmt (AI_Tag_Elmt);\n             Next_Elmt (AI_Tag_Elmt);\n \n             Suffix_Index := Suffix_Index + 1;\n@@ -5177,7 +5239,8 @@ package body Exp_Disp is\n          end if;\n       end if;\n \n-      --  Initialize the table of ancestor tags\n+      --  Initialize the table of ancestor tags if not building static\n+      --  dispatch table\n \n       if not Building_Static_DT (Typ)\n         and then not Is_Interface (Typ)\n@@ -5202,11 +5265,10 @@ package body Exp_Disp is\n                  (Node (First_Elmt (Access_Disp_Table (Typ))), Loc)));\n       end if;\n \n-      --  Inherit the dispatch tables of the parent\n-\n-      --  There is no need to inherit anything from the parent when building\n-      --  static dispatch tables because the whole dispatch table (including\n-      --  inherited primitives) has been already built.\n+      --  Inherit the dispatch tables of the parent. There is no need to\n+      --  inherit anything from the parent when building static dispatch tables\n+      --  because the whole dispatch table (including inherited primitives) has\n+      --  been already built.\n \n       if Building_Static_DT (Typ) then\n          null;\n@@ -5486,8 +5548,8 @@ package body Exp_Disp is\n       Analyze_List (Result, Suppress => All_Checks);\n       Set_Has_Dispatch_Table (Typ);\n \n-      --  Mark entities containing dispatch tables. Required by the\n-      --  backend to handle them properly.\n+      --  Mark entities containing dispatch tables. Required by the backend to\n+      --  handle them properly.\n \n       if not Is_Interface (Typ) then\n          declare\n@@ -5687,57 +5749,38 @@ package body Exp_Disp is\n    ---------------\n \n    function Make_Tags (Typ : Entity_Id) return List_Id is\n-      Loc              : constant Source_Ptr := Sloc (Typ);\n-      Tname            : constant Name_Id := Chars (Typ);\n-      Result           : constant List_Id := New_List;\n-      AI_Tag_Comp      : Elmt_Id;\n-      DT               : Node_Id;\n-      DT_Constr_List   : List_Id;\n-      DT_Ptr           : Node_Id;\n-      Predef_Prims_Ptr : Node_Id;\n-      Iface_DT_Ptr     : Node_Id;\n-      Nb_Prim          : Nat;\n-      Suffix_Index     : Int;\n-      Typ_Name         : Name_Id;\n-      Typ_Comps        : Elist_Id;\n-\n-   begin\n-      --  1) Generate the primary and secondary tag entities\n-\n-      --  Collect the components associated with secondary dispatch tables\n-\n-      if Has_Interfaces (Typ) then\n-         Collect_Interface_Components (Typ, Typ_Comps);\n-      end if;\n-\n-      --  1) Generate the primary tag entities\n-\n-      --  Primary dispatch table containing user-defined primitives\n-\n-      DT_Ptr := Make_Defining_Identifier (Loc,\n-                  New_External_Name (Tname, 'P'));\n-      Set_Etype (DT_Ptr, RTE (RE_Tag));\n-\n-      --  Primary dispatch table containing predefined primitives\n-\n-      Predef_Prims_Ptr :=\n-        Make_Defining_Identifier (Loc,\n-          Chars => New_External_Name (Tname, 'Y'));\n-      Set_Etype (Predef_Prims_Ptr, RTE (RE_Address));\n-\n-      --  Import the forward declaration of the Dispatch Table wrapper record\n-      --  (Make_DT will take care of its exportation)\n+      Loc    : constant Source_Ptr := Sloc (Typ);\n+      Result : constant List_Id    := New_List;\n+\n+      procedure Import_DT\n+        (Tag_Typ         : Entity_Id;\n+         DT              : Entity_Id;\n+         Is_Secondary_DT : Boolean);\n+      --  Import the dispatch table DT of tagged type Tag_Typ. Required to\n+      --  generate forward references and statically allocate the table. For\n+      --  primary dispatch tables that require no dispatch table generate:\n+      --     DT : static aliased constant Non_Dispatch_Table_Wrapper;\n+      --     $pragma import (ada, DT);\n+      --  Otherwise generate:\n+      --     DT : static aliased constant Dispatch_Table_Wrapper (Nb_Prim);\n+      --     $pragma import (ada, DT);\n \n-      if Building_Static_DT (Typ) then\n-         DT :=\n-           Make_Defining_Identifier (Loc,\n-             Chars => New_External_Name (Tname, 'T'));\n+      ---------------\n+      -- Import_DT --\n+      ---------------\n \n-         --  Generate:\n-         --    DT : static aliased constant Dispatch_Table_Wrapper (Nb_Prim);\n-         --    $pragma import (ada, DT);\n+      procedure Import_DT\n+        (Tag_Typ         : Entity_Id;\n+         DT              : Entity_Id;\n+         Is_Secondary_DT : Boolean)\n+      is\n+         DT_Constr_List : List_Id;\n+         Nb_Prim        : Nat;\n \n-         Set_Is_Imported (DT);\n+      begin\n+         Set_Is_Imported  (DT);\n+         Set_Ekind        (DT, E_Constant);\n+         Set_Related_Type (DT, Typ);\n \n          --  The scope must be set now to call Get_External_Name\n \n@@ -5754,14 +5797,27 @@ package body Exp_Disp is\n \n          --  Save this entity to allow Make_DT to generate its exportation\n \n-         Set_Dispatch_Table_Wrapper (Typ, DT);\n+         Append_Elmt (DT, Dispatch_Table_Wrappers (Typ));\n \n-         if Has_DT (Typ) then\n+         --  No dispatch table required\n \n+         if not Is_Secondary_DT\n+           and then not Has_DT (Tag_Typ)\n+         then\n+            Append_To (Result,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => DT,\n+                Aliased_Present     => True,\n+                Constant_Present    => True,\n+                Object_Definition   =>\n+                  New_Reference_To (RTE (RE_No_Dispatch_Table_Wrapper), Loc)));\n+\n+         else\n             --  Calculate the number of primitives of the dispatch table and\n             --  the size of the Type_Specific_Data record.\n \n-            Nb_Prim := UI_To_Int (DT_Entry_Count (First_Tag_Component (Typ)));\n+            Nb_Prim :=\n+              UI_To_Int (DT_Entry_Count (First_Tag_Component (Tag_Typ)));\n \n             --  If the tagged type has no primitives we add a dummy slot\n             --  whose address will be the tag of this type.\n@@ -5785,7 +5841,61 @@ package body Exp_Disp is\n                       New_Reference_To (RTE (RE_Dispatch_Table_Wrapper), Loc),\n                     Constraint => Make_Index_Or_Discriminant_Constraint (Loc,\n                                     Constraints => DT_Constr_List))));\n+         end if;\n+      end Import_DT;\n+\n+      --  Local variables\n+\n+      Tname            : constant Name_Id := Chars (Typ);\n+      AI_Tag_Comp      : Elmt_Id;\n+      DT               : Node_Id;\n+      DT_Ptr           : Node_Id;\n+      Predef_Prims_Ptr : Node_Id;\n+      Iface_DT         : Node_Id;\n+      Iface_DT_Ptr     : Node_Id;\n+      Suffix_Index     : Int;\n+      Typ_Name         : Name_Id;\n+      Typ_Comps        : Elist_Id;\n+\n+   --  Start of processing for Make_Tags\n+\n+   begin\n+      --  1) Generate the primary and secondary tag entities\n+\n+      --  Collect the components associated with secondary dispatch tables\n \n+      if Has_Interfaces (Typ) then\n+         Collect_Interface_Components (Typ, Typ_Comps);\n+      end if;\n+\n+      --  1) Generate the primary tag entities\n+\n+      --  Primary dispatch table containing user-defined primitives\n+\n+      DT_Ptr := Make_Defining_Identifier (Loc,\n+                  New_External_Name (Tname, 'P'));\n+      Set_Etype (DT_Ptr, RTE (RE_Tag));\n+\n+      --  Primary dispatch table containing predefined primitives\n+\n+      Predef_Prims_Ptr :=\n+        Make_Defining_Identifier (Loc,\n+          Chars => New_External_Name (Tname, 'Y'));\n+      Set_Etype (Predef_Prims_Ptr, RTE (RE_Address));\n+\n+      --  Import the forward declaration of the Dispatch Table wrapper record\n+      --  (Make_DT will take care of its exportation)\n+\n+      if Building_Static_DT (Typ) then\n+         Set_Dispatch_Table_Wrappers (Typ, New_Elmt_List);\n+\n+         DT :=\n+           Make_Defining_Identifier (Loc,\n+             Chars => New_External_Name (Tname, 'T'));\n+\n+         Import_DT (Typ, DT, Is_Secondary_DT => False);\n+\n+         if Has_DT (Typ) then\n             Append_To (Result,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => DT_Ptr,\n@@ -5821,14 +5931,6 @@ package body Exp_Disp is\n          --  No dispatch table required\n \n          else\n-            Append_To (Result,\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => DT,\n-                Aliased_Present     => True,\n-                Constant_Present    => True,\n-                Object_Definition   =>\n-                  New_Reference_To (RTE (RE_No_Dispatch_Table_Wrapper), Loc)));\n-\n             Append_To (Result,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => DT_Ptr,\n@@ -5858,7 +5960,12 @@ package body Exp_Disp is\n       --  2) Generate the secondary tag entities\n \n       if Has_Interfaces (Typ) then\n-         Suffix_Index := 0;\n+\n+         --  Note: The following value of Suffix_Index must be in sync with\n+         --  the Suffix_Index values of secondary dispatch tables generated\n+         --  by Make_DT.\n+\n+         Suffix_Index := 1;\n \n          --  For each interface type we build an unique external name\n          --  associated with its corresponding secondary dispatch table.\n@@ -5872,9 +5979,19 @@ package body Exp_Disp is\n          while Present (AI_Tag_Comp) loop\n             Get_Secondary_DT_External_Name\n               (Typ, Related_Type (Node (AI_Tag_Comp)), Suffix_Index);\n-\n             Typ_Name := Name_Find;\n \n+            if Building_Static_DT (Typ) then\n+               Iface_DT :=\n+                 Make_Defining_Identifier (Loc,\n+                   Chars => New_External_Name\n+                              (Typ_Name, 'T', Suffix_Index => -1));\n+               Import_DT\n+                 (Tag_Typ => Related_Type (Node (AI_Tag_Comp)),\n+                  DT      => Iface_DT,\n+                  Is_Secondary_DT => True);\n+            end if;\n+\n             --  Secondary dispatch table referencing thunks to user-defined\n             --  primitives covered by this interface.\n \n@@ -5892,6 +6009,25 @@ package body Exp_Disp is\n               (Iface_DT_Ptr, Related_Type (Node (AI_Tag_Comp)));\n             Append_Elmt (Iface_DT_Ptr, Access_Disp_Table (Typ));\n \n+            if Building_Static_DT (Typ) then\n+               Append_To (Result,\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => Iface_DT_Ptr,\n+                   Constant_Present    => True,\n+                   Object_Definition   => New_Reference_To\n+                                            (RTE (RE_Interface_Tag), Loc),\n+                   Expression =>\n+                     Unchecked_Convert_To (RTE (RE_Interface_Tag),\n+                       Make_Attribute_Reference (Loc,\n+                         Prefix =>\n+                           Make_Selected_Component (Loc,\n+                             Prefix => New_Reference_To (Iface_DT, Loc),\n+                           Selector_Name =>\n+                             New_Occurrence_Of\n+                               (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n+                         Attribute_Name => Name_Address))));\n+            end if;\n+\n             --  Secondary dispatch table referencing thunks to predefined\n             --  primitives.\n "}, {"sha": "a67048bfa0e0f8fe0935474be3e3af38e5d275de", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -2416,17 +2416,6 @@ package body Sem_Ch3 is\n       if Constant_Present (N)\n         and then No (E)\n       then\n-         --  We exclude forward references to tags\n-\n-         if Is_Imported (Defining_Identifier (N))\n-           and then\n-             (T = RTE (RE_Tag)\n-               or else\n-                 (Present (Full_View (T))\n-                   and then Full_View (T) = RTE (RE_Tag)))\n-         then\n-            null;\n-\n          --  A deferred constant may appear in the declarative part of the\n          --  following constructs:\n \n@@ -2444,7 +2433,7 @@ package body Sem_Ch3 is\n          --  return statements are flagged as invalid contexts because they do\n          --  not have a declarative part and so cannot accommodate the pragma.\n \n-         elsif Ekind (Current_Scope) = E_Return_Statement then\n+         if Ekind (Current_Scope) = E_Return_Statement then\n             Error_Msg_N\n               (\"invalid context for deferred constant declaration (RM 7.4)\",\n                N);\n@@ -9328,19 +9317,10 @@ package body Sem_Ch3 is\n             Error_Msg_N (\"ALIASED required (see declaration#)\", N);\n          end if;\n \n-         --  Allow incomplete declaration of tags (used to handle forward\n-         --  references to tags). The check on Ada_Tags avoids circularities\n-         --  when rebuilding the compiler.\n-\n-         if RTU_Loaded (Ada_Tags)\n-           and then T = RTE (RE_Tag)\n-         then\n-            null;\n-\n          --  Check that placement is in private part and that the incomplete\n          --  declaration appeared in the visible part.\n \n-         elsif Ekind (Current_Scope) = E_Package\n+         if Ekind (Current_Scope) = E_Package\n            and then not In_Private_Part (Current_Scope)\n          then\n             Error_Msg_Sloc := Sloc (Prev);"}, {"sha": "3f60ebcbedf83429b472b846ce9ba943d5adcdc0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16d9747ffdb247f08d2647aafcebabc517b87ee/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b16d9747ffdb247f08d2647aafcebabc517b87ee", "patch": "@@ -1356,10 +1356,19 @@ package body Sem_Util is\n       -------------\n \n       procedure Collect (Typ : Entity_Id) is\n-         Tag_Comp : Entity_Id;\n+         Tag_Comp   : Entity_Id;\n+         Parent_Typ : Entity_Id;\n \n       begin\n-         if Etype (Typ) /= Typ\n+         --  Handle private types\n+\n+         if Present (Full_View (Etype (Typ))) then\n+            Parent_Typ := Full_View (Etype (Typ));\n+         else\n+            Parent_Typ := Etype (Typ);\n+         end if;\n+\n+         if Parent_Typ /= Typ\n \n             --  Protect the frontend against wrong sources. For example:\n \n@@ -1372,9 +1381,9 @@ package body Sem_Util is\n             --      type C is new B with null record;\n             --    end P;\n \n-           and then Etype (Typ) /= Tagged_Type\n+           and then Parent_Typ /= Tagged_Type\n          then\n-            Collect (Etype (Typ));\n+            Collect (Parent_Typ);\n          end if;\n \n          --  Collect the components containing tags of secondary dispatch"}]}