{"sha": "b8a28a06eafafae47ee92fe640b334a8d1e4758a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhMjhhMDZlYWZhZmFlNDdlZTkyZmU2NDBiMzM0YThkMWU0NzU4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-27T23:21:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-27T23:26:03Z"}, "message": "libstdc++: Define __cpp_lib_ranges macro for C++20\n\nDefine the feature test macro now that ranges support is complete.\n\nThis also changes the preprocessor checks for the __cpp_concepts macro\nso that library components depending on concepts are only enabled when\nC++20 concepts are supported, and not just for the Concepts TS (which\nuses different syntax in places).\n\n\t* include/bits/range_cmp.h (__cpp_lib_ranges): Define.\n\t* include/bits/stl_iterator.h: Check value of __cpp_concepts so that\n\tC++20 concepts are required.\n\t* include/bits/stl_iterator_base_types.h: Likewise.\n\t* include/std/concepts: Likewise.\n\t* include/std/version: Likewise.\n\t* testsuite/std/ranges/headers/ranges/synopsis.cc: Check feature test\n\tmacro.", "tree": {"sha": "a475f6510ae977e8029e70663fa91788ba043402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a475f6510ae977e8029e70663fa91788ba043402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a28a06eafafae47ee92fe640b334a8d1e4758a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a28a06eafafae47ee92fe640b334a8d1e4758a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a28a06eafafae47ee92fe640b334a8d1e4758a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a28a06eafafae47ee92fe640b334a8d1e4758a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a8d137c22953df2ea046466c62cd26c0dba103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a8d137c22953df2ea046466c62cd26c0dba103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a8d137c22953df2ea046466c62cd26c0dba103"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "3b96b23ca8f164054681f9f3b089704ab1bb9843", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -1,5 +1,14 @@\n 2020-03-27  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/range_cmp.h (__cpp_lib_ranges): Define.\n+\t* include/bits/stl_iterator.h: Check value of __cpp_concepts so that\n+\tC++20 concepts are required.\n+\t* include/bits/stl_iterator_base_types.h: Likewise.\n+\t* include/std/concepts: Likewise.\n+\t* include/std/version: Likewise.\n+\t* testsuite/std/ranges/headers/ranges/synopsis.cc: Check feature test\n+\tmacro.\n+\n \t* include/bits/stl_iterator.h (reverse_iterator::iterator_concept)\n \t(reverse_iterator::iterator_category): Define for C++20.\n \t(reverse_iterator): Define comparison operators correctly for C++20."}, {"sha": "0587c599c4be71c93415fddab5fe01384e97654e", "filename": "libstdc++-v3/include/bits/range_cmp.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -55,6 +55,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n #ifdef __cpp_lib_concepts\n+// Define this here, included by all the headers that need to define it.\n+#define __cpp_lib_ranges 201911L\n+\n namespace ranges\n {\n   namespace __detail"}, {"sha": "e68f66a2b8975383da9af7018316823078e8a16b", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -214,7 +214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n-#if __cplusplus > 201703L && defined __cpp_concepts\n+#if __cplusplus > 201703L && __cpp_concepts >= 201907L\n       requires is_pointer_v<_Iterator>\n \t|| requires(const _Iterator __i) { __i.operator->(); }\n #endif"}, {"sha": "aa02af59dc6041931e678d44586e40ade92425b2", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -67,7 +67,7 @@\n # include <type_traits>  // For __void_t, is_convertible\n #endif\n \n-#if __cplusplus > 201703L && __cpp_concepts\n+#if __cplusplus > 201703L && __cpp_concepts >= 201907L\n # include <bits/iterator_concepts.h>\n #endif\n \n@@ -192,7 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201703L\n   /// Partial specialization for object pointer types.\n   template<typename _Tp>\n-#if __cpp_concepts\n+#if __cpp_concepts >= 201907L\n     requires is_object_v<_Tp>\n #endif\n     struct iterator_traits<_Tp*>"}, {"sha": "e8ce1adc93a012bf8726e00b2014cc4fd355c097", "filename": "libstdc++-v3/include/std/concepts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -30,7 +30,7 @@\n #ifndef _GLIBCXX_CONCEPTS\n #define _GLIBCXX_CONCEPTS 1\n \n-#if __cplusplus > 201703L && __cpp_concepts\n+#if __cplusplus > 201703L && __cpp_concepts >= 201907L\n \n #pragma GCC system_header\n "}, {"sha": "d9a47ee8e8a35f63ff9f5ca9b6c0338c8f0c9f2d", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -146,6 +146,7 @@\n #define __cpp_lib_nonmember_container_access 201411\n #define __cpp_lib_not_fn 201603\n #define __cpp_lib_optional 201606L\n+#define __cpp_lib_parallel_algorithm 201603L\n #define __cpp_lib_raw_memory_algorithms 201606L\n #define __cpp_lib_sample 201603\n #ifdef _GLIBCXX_HAS_GTHREADS\n@@ -158,7 +159,6 @@\n #define __cpp_lib_unordered_map_insertion 201411\n #define __cpp_lib_unordered_map_try_emplace 201411\n #define __cpp_lib_variant 201606L\n-#define __cpp_lib_parallel_algorithm 201603L\n #endif\n \n #if __cplusplus > 201703L\n@@ -167,7 +167,7 @@\n #define __cpp_lib_atomic_value_initialization 201911L\n #define __cpp_lib_bitops 201907L\n #define __cpp_lib_bounded_array_traits 201902L\n-#if __cpp_concepts\n+#if __cpp_concepts >= 201907L\n # define __cpp_lib_concepts 201806L\n #endif\n #if __cpp_impl_destroying_delete\n@@ -195,6 +195,9 @@\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n #define __cpp_lib_math_constants 201907L\n+#if __cpp_lib_concepts\n+# define __cpp_lib_ranges 201911L\n+#endif\n #define __cpp_lib_span 202002L\n #if __cpp_impl_three_way_comparison >= 201907L && __cpp_lib_concepts\n # define __cpp_lib_three_way_comparison 201711L"}, {"sha": "eaf307ddf60ade6c0492b3f939b7a92d0ab4906d", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/move_only.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fmove_only.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fmove_only.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fmove_only.cc?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -45,16 +45,17 @@ static_assert(std::input_iterator<move_only_iterator>);\n template<typename T>\n   concept has_member_base = requires (T t) { std::forward<T>(t).base(); };\n \n-static_assert( ! has_member_base<std::move_iterator<move_iterator>&> );\n-static_assert( ! has_member_base<const std::move_iterator<move_iterator>&> );\n-static_assert( has_member_base<std::move_iterator<move_iterator>> );\n-static_assert( ! has_member_base<const std::move_iterator<move_iterator>> );\n+using move_only_move_iterator = std::move_iterator<move_only_iterator>;\n+\n+static_assert( ! has_member_base<move_only_move_iterator&> );\n+static_assert( ! has_member_base<const move_only_move_iterator&> );\n+static_assert( has_member_base<move_only_move_iterator> );\n+static_assert( ! has_member_base<const move_only_move_iterator> );\n \n void\n test01()\n {\n-  std::move_iterator<move_only_iterator> m1, m2;\n-  m1 = std::make_move_iterator(move_only_iterator{});\n+  move_only_move_iterator m1 = std::make_move_iterator(move_only_iterator{});\n+  move_only_move_iterator m2;\n   m2 = std::move(m1);\n-  m1.swap(m2);\n }"}, {"sha": "4e7b9d01e15ff2f933a0561e40c3c4d5f169ebbd", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/rel_ops_c++20.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -48,15 +48,10 @@ struct Iter\n   template<int N> friend Iter operator-(Iter<N>, difference_type);\n   template<int N> friend difference_type operator-(Iter<N>, Iter<N>);\n \n-  // Define the full set of operators for same-type comparisons\n-  template<int N> friend bool operator==(Iter<N>, Iter<N>); // synthesizes !=\n-  template<int N> friend bool operator<(Iter<N>, Iter<N>);\n-  template<int N> friend bool operator>(Iter<N>, Iter<N>);\n-  template<int N> friend bool operator<=(Iter<N>, Iter<N>);\n-  template<int N> friend bool operator>=(Iter<N>, Iter<N>);\n+  template<int N> friend bool operator==(Iter<N>, Iter<N>);\n+  template<int N> friend std::weak_ordering operator<=>(Iter<N>, Iter<N>);\n };\n \n-\n static_assert( std::random_access_iterator<Iter<0>> );\n \n int   operator==(Iter<0>, long*);"}, {"sha": "dd24730398f9d54a4b1ae3eb7bbdfb04d81f3e8f", "filename": "libstdc++-v3/testsuite/std/ranges/headers/ranges/synopsis.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a28a06eafafae47ee92fe640b334a8d1e4758a/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc?ref=b8a28a06eafafae47ee92fe640b334a8d1e4758a", "patch": "@@ -20,6 +20,12 @@\n \n #include <ranges>\n \n+#ifndef __cpp_lib_ranges\n+# error \"Feature test macro for ranges is missing in <ranges>\"\n+#elif __cpp_lib_ranges < 201911L\n+# error \"Feature test macro for ranges has wrong value in <ranges>\"\n+#endif\n+\n struct R { };\n template<> constexpr bool std::ranges::disable_sized_range<R> = true;\n "}]}