{"sha": "44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRkMjNkOWU3NGZmY2I1NWZiODdmZmEwYTFjOWEzNmE1MzA4ZDNkMw==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-04T00:23:14Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-04T00:23:14Z"}, "message": "trans-intrinsic.c (gfc_conv_intrinsic_arith): Introduce parent expression variable.\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic_arith): Introduce parent\n\texpression variable.  Use it.\n\nFrom-SVN: r180919", "tree": {"sha": "633c592c8c1de71d75bd0614c6556a8c9855460f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/633c592c8c1de71d75bd0614c6556a8c9855460f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3/comments", "author": null, "committer": null, "parents": [{"sha": "b1a65f62f9c3a97de52af339382d9832a95532c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a65f62f9c3a97de52af339382d9832a95532c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a65f62f9c3a97de52af339382d9832a95532c8"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "f9bd3eb5718f20f2cd9c688ab0fb850584ecb420", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3", "patch": "@@ -1,3 +1,8 @@\n+2011-11-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_arith): Introduce parent\n+\texpression variable.  Use it.\n+\n 2011-11-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic.c): Introduce current loop"}, {"sha": "25c54fb6db9cbc7e80e3b3adca77b3bb13b15304", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=44d23d9e74ffcb55fb87ffa0a1c9a36a5308d3d3", "patch": "@@ -2574,6 +2574,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   gfc_ss *maskss;\n   gfc_se arrayse;\n   gfc_se maskse;\n+  gfc_se *parent_se;\n   gfc_expr *arrayexpr;\n   gfc_expr *maskexpr;\n \n@@ -2582,6 +2583,8 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n       gfc_conv_intrinsic_funcall (se, expr);\n       return;\n     }\n+  else\n+    parent_se = NULL;\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   /* Initialize the result.  */\n@@ -2654,7 +2657,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   /* If we have a mask, only add this element if the mask is set.  */\n   if (maskexpr && maskexpr->rank > 0)\n     {\n-      gfc_init_se (&maskse, NULL);\n+      gfc_init_se (&maskse, parent_se);\n       gfc_copy_loopinfo_to_se (&maskse, ploop);\n       maskse.ss = maskss;\n       gfc_conv_expr_val (&maskse, maskexpr);\n@@ -2666,7 +2669,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n     gfc_init_block (&block);\n \n   /* Do the actual summation/product.  */\n-  gfc_init_se (&arrayse, NULL);\n+  gfc_init_se (&arrayse, parent_se);\n   gfc_copy_loopinfo_to_se (&arrayse, ploop);\n   arrayse.ss = arrayss;\n   gfc_conv_expr_val (&arrayse, arrayexpr);"}]}