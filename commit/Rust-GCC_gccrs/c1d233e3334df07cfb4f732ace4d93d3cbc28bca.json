{"sha": "c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "node_id": "C_kwDOANBUbNoAKGMxZDIzM2UzMzM0ZGYwN2NmYjRmNzMyYWNlNGQ5M2QzY2JjMjhiY2E", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-03-23T17:39:02Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-03-24T09:34:31Z"}, "message": "tree-optimization/104970: Limit size computation for access attribute\n\nLimit object size computation only to the simple case where access\nattribute has been explicitly specified.  The object passed to\n__builtin_dynamic_object_size could either be a pointer or a VLA whose\nsize has been described using access attribute.\n\nFurther, return a valid size only if the object is a void * pointer or\npoints to (or is a VLA of) a type that has a constant size.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/104970\n\t* tree-object-size.cc (parm_object_size): Restrict size\n\tcomputation scenarios to explicit access attributes.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/104970\n\t* gcc.dg/builtin-dynamic-object-size-0.c (test_parmsz_simple2,\n\ttest_parmsz_simple3, test_parmsz_extern, test_parmsz_internal,\n\ttest_parmsz_internal2, test_parmsz_internal3): New tests.\n\t(main): Use them.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "6d2c3aaf2ed389628746e5f07109011c32cbc1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d2c3aaf2ed389628746e5f07109011c32cbc1ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d233e3334df07cfb4f732ace4d93d3cbc28bca/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72124f487ccb5c8065dd5f7b8fba254600b7e611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72124f487ccb5c8065dd5f7b8fba254600b7e611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72124f487ccb5c8065dd5f7b8fba254600b7e611"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "b5b0b3a677cee15b13178ac7f6977c2ed506e7ba", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d233e3334df07cfb4f732ace4d93d3cbc28bca/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d233e3334df07cfb4f732ace4d93d3cbc28bca/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "patch": "@@ -380,6 +380,22 @@ test_parmsz_simple (void *obj, size_t sz)\n   return __builtin_dynamic_object_size (obj, 0);\n }\n \n+size_t\n+__attribute__ ((access (__read_write__, 2, 1)))\n+__attribute__ ((noinline))\n+test_parmsz_simple2 (size_t sz, char obj[])\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n+/* Implicitly constructed access attributes not supported yet.  */\n+size_t\n+__attribute__ ((noinline))\n+test_parmsz_simple3 (size_t sz, char obj[sz])\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n size_t\n __attribute__ ((noinline))\n __attribute__ ((access (__read_write__, 1, 2)))\n@@ -412,6 +428,38 @@ test_parmsz_unknown (void *obj, void *unknown, size_t sz, int cond)\n   return __builtin_dynamic_object_size (cond ? obj : unknown, 0);\n }\n \n+struct S;\n+size_t\n+__attribute__ ((access (__read_write__, 1, 2)))\n+__attribute__ ((noinline))\n+test_parmsz_extern (struct S *obj, size_t sz)\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n+/* Implicitly constructed access attributes not supported yet.  */\n+size_t\n+__attribute__ ((noinline))\n+test_parmsz_internal (size_t sz, double obj[][sz])\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n+size_t\n+__attribute__ ((access (__read_write__, 2, 1)))\n+__attribute__ ((noinline))\n+test_parmsz_internal2 (size_t sz, double obj[][sz])\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_parmsz_internal3 (size_t sz1, size_t sz2, double obj[sz1][sz2])\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n /* Loops.  */\n \n size_t\n@@ -532,9 +580,22 @@ main (int argc, char **argv)\n   if (test_parmsz_simple (argv[0], __builtin_strlen (argv[0]) + 1)\n       != __builtin_strlen (argv[0]) + 1)\n     FAIL ();\n+  if (test_parmsz_simple2 (__builtin_strlen (argv[0]) + 1, argv[0])\n+      != __builtin_strlen (argv[0]) + 1)\n+    FAIL ();\n+  /* Only explicitly added access attributes are supported for now.  */\n+  if (test_parmsz_simple3 (__builtin_strlen (argv[0]) + 1, argv[0]) != -1)\n+    FAIL ();\n   int arr[42];\n   if (test_parmsz_scaled (arr, 42) != sizeof (arr))\n     FAIL ();\n+  if (test_parmsz_scaled (arr, 40) != 40 * sizeof (int))\n+    FAIL ();\n+  /* __bdos cannot see the actual size of ARR, so it will return what it was\n+     passed.  Fortunately though the overflow warnings see this caller side and\n+     warns of the problematic size.  */\n+  if (test_parmsz_scaled (arr, 44) != 44 * sizeof (int)) /* { dg-warning \"-Wstringop-overflow=\" } */\n+    FAIL ();\n   if (test_parmsz_unknown (argv[0], argv[0], __builtin_strlen (argv[0]) + 1, 0)\n       != -1)\n   if (test_parmsz (argv[0], __builtin_strlen (argv[0]) + 1, -1) != 0)\n@@ -550,6 +611,16 @@ main (int argc, char **argv)\n     FAIL ();\n   if (test_parmsz_scaled_off (arr, 42, 2) != 40 * sizeof (int))\n     FAIL ();\n+  struct S *s;\n+  if (test_parmsz_extern (s, 42) != -1)\n+    FAIL ();\n+  double obj[4][4];\n+  if (test_parmsz_internal (4, obj) != -1)\n+    FAIL ();\n+  if (test_parmsz_internal2 (4, obj) != -1)\n+    FAIL ();\n+  if (test_parmsz_internal3 (4, 4, obj) != -1)\n+    FAIL ();\n   if (test_loop (arr, 42, 0, 32, 1) != 10 * sizeof (int))\n     FAIL ();\n   if (test_loop (arr, 42, 32, -1, -1) != 0)"}, {"sha": "fc062b94d7628d139fea8f9abce4a1e7517d779d", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d233e3334df07cfb4f732ace4d93d3cbc28bca/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d233e3334df07cfb4f732ace4d93d3cbc28bca/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "patch": "@@ -1477,14 +1477,19 @@ parm_object_size (struct object_size_info *osi, tree var)\n   tree typesize = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (parm)));\n   tree sz = NULL_TREE;\n \n-  if (access && access->sizarg != UINT_MAX)\n+  /* If we have an explicit access attribute with a usable size argument... */\n+  if (access && access->sizarg != UINT_MAX && !access->internal_p\n+      /* ... and either PARM is void * or has a type that is complete and has a\n+\t constant size... */\n+      && ((typesize && poly_int_tree_p (typesize))\n+\t  || (!typesize && VOID_TYPE_P (TREE_TYPE (TREE_TYPE (parm))))))\n     {\n       tree fnargs = DECL_ARGUMENTS (fndecl);\n       tree arg = NULL_TREE;\n       unsigned argpos = 0;\n \n-      /* Walk through the parameters to pick the size parameter and safely\n-\t scale it by the type size.  */\n+      /* ... then walk through the parameters to pick the size parameter and\n+\t safely scale it by the type size if needed.  */\n       for (arg = fnargs; arg; arg = TREE_CHAIN (arg), ++argpos)\n \tif (argpos == access->sizarg && INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n \t  {"}]}