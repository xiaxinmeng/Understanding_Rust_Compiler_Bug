{"sha": "bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkNDhkN2ViZDcxMWM0ZTc5ZDZhZTMxNjAyYzlmYjgwNWQyZDViNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-09T09:28:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-09T09:28:07Z"}, "message": "hwint.h (HOST_BITS_PER_WIDE_INT, [...]): Use long long if it's wider than long and the target's long is wider than the...\n\n* hwint.h (HOST_BITS_PER_WIDE_INT, HOST_WIDE_INT): Use long long\nif it's wider than long and the target's long is wider than the\nhost's.\n\nFrom-SVN: r38820", "tree": {"sha": "7c71d9ceb57a1d61ac186ec01a55bcb1a6ae39fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c71d9ceb57a1d61ac186ec01a55bcb1a6ae39fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7/comments", "author": null, "committer": null, "parents": [{"sha": "afe09d12d826c1aa013c54a0572d9b9131c0f32a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe09d12d826c1aa013c54a0572d9b9131c0f32a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe09d12d826c1aa013c54a0572d9b9131c0f32a"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "81bb3f80b171851cb732b3f768bd0ea845775a5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7", "patch": "@@ -1,3 +1,9 @@\n+2001-01-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* hwint.h (HOST_BITS_PER_WIDE_INT, HOST_WIDE_INT): Use long long\n+\tif it's wider than long and the target's long is wider than the\n+\thost's.\n+\n 2001-01-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tRemove support for using UWIN as a host machine."}, {"sha": "767620af506c43e4cb42078f4894532a02891c96", "filename": "gcc/hwint.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=bad48d7ebd711c4e79d6ae31602c9fb805d2d5b7", "patch": "@@ -1,5 +1,5 @@\n /* HOST_WIDE_INT definitions for the GNU compiler.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -15,6 +15,29 @@\n \n /* Find the largest host integer type and set its size and type.  */\n \n+/* Use long long on the host if the target has a wider long type than\n+   the host.  */\n+\n+#if ! defined HOST_BITS_PER_WIDE_INT \\\n+    && defined HOST_BITS_PER_LONGLONG \\\n+    && (HOST_BITS_PER_LONGLONG > HOST_BITS_PER_LONG) \\\n+    && (defined (LONG_LONG_MAX) || defined (LONGLONG_MAX) \\\n+        || defined (LLONG_MAX) || defined (__GNUC__))\n+\n+# ifdef MAX_LONG_TYPE_SIZE\n+#  if MAX_LONG_TYPE_SIZE > HOST_BITS_PER_LONG\n+#   define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONGLONG\n+#   define HOST_WIDE_INT long long\n+#  endif\n+# else\n+#  if LONG_TYPE_SIZE > HOST_BITS_PER_LONG\n+#   define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONGLONG\n+#   define HOST_WIDE_INT long long\n+#  endif\n+# endif\n+\n+#endif\n+\n #ifndef HOST_BITS_PER_WIDE_INT\n \n # if HOST_BITS_PER_LONG > HOST_BITS_PER_INT"}]}