{"sha": "9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwNzgxYjU4MTQ1ZDllNDRmY2UwMzAxMmZjYzlhMWYzMWNhMzViMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-03-30T23:30:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-30T23:30:32Z"}, "message": "cp-tree.h (IDENTIFIER_AS_DESC, [...]): Remove cruft.\n\n\t* cp-tree.h (IDENTIFIER_AS_DESC, IDENTIFIER_AS_LIST,\n\tCLASSTYPE_BASELINK_VEC, CLASSTYPE_N_SUPERCLASSES,\n\tCLASSTYPE_N_BASECLASSES, CLASSTYPE_MAX_DEPTH,\n\tCLASSTYPE_BASE_INIT_LIST, CLASSTYPE_AS_LIST, CLASSTYPE_ID_AS_LIST,\n\tCLASSTYPE_BINFO_AS_LIST): Remove cruft.\n\t* class.c, lex.c, parse.y, ptree.c, search.c, semantics.c,\n\ttree.c: Adjust.\n\nFrom-SVN: r26071", "tree": {"sha": "5117a733b2e579a4d4d81c49b17992fccab3130a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5117a733b2e579a4d4d81c49b17992fccab3130a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/comments", "author": null, "committer": null, "parents": [{"sha": "fa848ee014fd878978c91d4ff158b41c9c2da00c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa848ee014fd878978c91d4ff158b41c9c2da00c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa848ee014fd878978c91d4ff158b41c9c2da00c"}], "stats": {"total": 1341, "additions": 515, "deletions": 826}, "files": [{"sha": "62c1821a0cb61160f5b681446edbde00a761aa60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -1,3 +1,13 @@\n+1999-03-30  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cp-tree.h (IDENTIFIER_AS_DESC, IDENTIFIER_AS_LIST, \n+\tCLASSTYPE_BASELINK_VEC, CLASSTYPE_N_SUPERCLASSES, \n+\tCLASSTYPE_N_BASECLASSES, CLASSTYPE_MAX_DEPTH, \n+\tCLASSTYPE_BASE_INIT_LIST, CLASSTYPE_AS_LIST, CLASSTYPE_ID_AS_LIST,\n+\tCLASSTYPE_BINFO_AS_LIST): Remove cruft.\n+\t* class.c, lex.c, parse.y, ptree.c, search.c, semantics.c, \n+\ttree.c: Adjust.\n+\n 1999-03-29  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (lang_decode_option): Remove -Wsign-promo from -Wall."}, {"sha": "36765e08402bca1ad27d95741cb0b855945ac1b6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 82, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -1295,18 +1295,6 @@ add_method (type, fields, method)\n       /* Actually insert the new method.  */\n       TREE_VEC_ELT (method_vec, slot) \n \t= build_overload (method, TREE_VEC_ELT (method_vec, slot));\n-\n-      if (TYPE_BINFO_BASETYPES (type) && CLASSTYPE_BASELINK_VEC (type))\n-\t{\n-\t  /* ??? May be better to know whether these can be extended?  */\n-\t  tree baselink_vec = CLASSTYPE_BASELINK_VEC (type);\n-\t  \n-\t  TREE_VEC_LENGTH (baselink_vec) += 1;\n-\t  CLASSTYPE_BASELINK_VEC (type) = copy_node (baselink_vec);\n-\t  TREE_VEC_LENGTH (baselink_vec) -= 1;\n-\t  \n-\t  TREE_VEC_ELT (CLASSTYPE_BASELINK_VEC (type), len) = 0;\n-\t}\n     }\n   pop_obstacks ();\n }\n@@ -1641,10 +1629,6 @@ build_class_init_list (type)\n \t  continue;\n \t}\n \n-      if ((blist = CLASSTYPE_BASE_INIT_LIST (BINFO_TYPE (base_binfo))) == NULL_TREE)\n-\t/* Nothing to initialize.  */\n-\tcontinue;\n-\n       /* ...ditto...  */\n       base_init_list = maybe_fixup_vptrs (type, base_binfo, base_init_list);\n \n@@ -1687,30 +1671,15 @@ build_class_init_list (type)\n \t  /* The function expand_aggr_init knows how to do the\n \t     initialization of `basetype' without getting\n \t     an explicit `blist'.  */\n-\t  if (base_init_list)\n-\t    base_init_list = tree_cons (NULL_TREE, base_binfo, base_init_list);\n-\t  else\n-\t    base_init_list = CLASSTYPE_BINFO_AS_LIST (BINFO_TYPE (base_binfo));\n+\t  base_init_list = tree_cons (NULL_TREE, base_binfo, base_init_list);\n \t}\n     }\n-\n-  if (base_init_list)\n-    {\n-      if (member_init_list)\n-\tCLASSTYPE_BASE_INIT_LIST (type) =\n-\t  build_tree_list (base_init_list, member_init_list);\n-      else\n-\tCLASSTYPE_BASE_INIT_LIST (type) = base_init_list;\n-    }\n-  else if (member_init_list)\n-    CLASSTYPE_BASE_INIT_LIST (type) = member_init_list;\n }\n \f\n struct base_info\n {\n   int has_virtual;\n   int max_has_virtual;\n-  int n_ancestors;\n   tree vfield;\n   tree vfields;\n   tree rtti;\n@@ -1793,7 +1762,6 @@ finish_base_struct (t, b)\n \t  && !TYPE_HAS_CONST_ASSIGN_REF (basetype))\n \tb->no_const_asn_ref = 1;\n \n-      b->n_ancestors += CLASSTYPE_N_SUPERCLASSES (basetype);\n       TYPE_NEEDS_CONSTRUCTING (t) |= TYPE_NEEDS_CONSTRUCTING (basetype);\n       TYPE_NEEDS_DESTRUCTOR (t) |= TYPE_NEEDS_DESTRUCTOR (basetype);\n       TYPE_HAS_COMPLEX_ASSIGN_REF (t) |= TYPE_HAS_COMPLEX_ASSIGN_REF (basetype);\n@@ -1803,9 +1771,6 @@ finish_base_struct (t, b)\n       TYPE_OVERLOADS_ARRAY_REF (t) |= TYPE_OVERLOADS_ARRAY_REF (basetype);\n       TYPE_OVERLOADS_ARROW (t) |= TYPE_OVERLOADS_ARROW (basetype);\n \n-      if (! TREE_VIA_VIRTUAL (base_binfo))\n-\tCLASSTYPE_N_SUPERCLASSES (t) += 1;\n-\n       if (TYPE_VIRTUAL_P (basetype))\n \t{\n \t  /* Ensure that this is set from at least a virtual base\n@@ -1960,14 +1925,14 @@ finish_struct_bits (t, max_has_virtual)\n \n   if (n_baseclasses && max_has_virtual)\n     {\n-      /* for a class w/o baseclasses, `finish_struct' has set\n-       * CLASS_TYPE_ABSTRACT_VIRTUALS correctly (by definition). Similarly\n-       * for a class who's base classes do not have vtables. When neither of\n-       * these is true, we might have removed abstract virtuals (by\n-       * providing a definition), added some (by declaring new ones), or\n-       * redeclared ones from a base class. We need to recalculate what's\n-       * really an abstract virtual at this point (by looking in the vtables).\n-       */\n+      /* For a class w/o baseclasses, `finish_struct' has set\n+         CLASS_TYPE_ABSTRACT_VIRTUALS correctly (by definition). Similarly\n+         for a class who's base classes do not have vtables. When neither\n+         of these is true, we might have removed abstract virtuals (by\n+         providing a definition), added some (by declaring new ones), or\n+         redeclared ones from a base class. We need to recalculate what's\n+         really an abstract virtual at this point (by looking in the\n+         vtables).  */\n       CLASSTYPE_ABSTRACT_VIRTUALS (t) = get_abstract_virtuals (t);\n     }\n \n@@ -1983,8 +1948,6 @@ finish_struct_bits (t, max_has_virtual)\n \t  basetype = BINFO_TYPE (TREE_VEC_ELT (binfos, i));\n \n \t  TYPE_HAS_CONVERSION (t) |= TYPE_HAS_CONVERSION (basetype);\n-\t  if (CLASSTYPE_MAX_DEPTH (basetype) >= CLASSTYPE_MAX_DEPTH (t))\n-\t    CLASSTYPE_MAX_DEPTH (t) = CLASSTYPE_MAX_DEPTH (basetype) + 1;\n \t}\n     }\n \n@@ -2185,7 +2148,6 @@ finish_struct_methods (t)\n   tree fn_fields;\n   tree method_vec = CLASSTYPE_METHOD_VEC (t);\n   tree ctor_name = constructor_name (t);\n-  int i, n_baseclasses = CLASSTYPE_N_BASECLASSES (t);\n \n   /* First fill in entry 0 with the constructors, entry 1 with destructors,\n      and the next few with type conversion operators (if any).  */\n@@ -2244,34 +2206,6 @@ finish_struct_methods (t)\n   /* Issue warnings about private constructors and such.  If there are\n      no methods, then some public defaults are generated.  */\n   maybe_warn_about_overly_private_class (t); \n-\n-  /* Now for each member function (except for constructors and\n-     destructors), compute where member functions of the same\n-     name reside in base classes.  */\n-  if (n_baseclasses != 0\n-      && method_vec\n-      && TREE_VEC_LENGTH (method_vec) > 2)\n-    {\n-      int len = TREE_VEC_LENGTH (method_vec);\n-      tree baselink_vec = make_tree_vec (len);\n-      int any_links = 0;\n-      tree baselink_binfo = build_tree_list (NULL_TREE, TYPE_BINFO (t));\n-\n-      for (i = 2; i < len && TREE_VEC_ELT (method_vec, i); i++)\n-\t{\n-\t  tree ovl = TREE_VEC_ELT (method_vec, i);\n-\n-\t  TREE_VEC_ELT (baselink_vec, i)\n-\t    = get_baselinks (baselink_binfo, t, \n-\t\t\t     DECL_NAME (OVL_CURRENT (ovl)));\n-\t  if (TREE_VEC_ELT (baselink_vec, i) != 0)\n-\t    any_links = 1;\n-\t}\n-      if (any_links != 0)\n-\tCLASSTYPE_BASELINK_VEC (t) = baselink_vec;\n-      else\n-\tobstack_free (current_obstack, baselink_vec);\n-    }\n }\n \n /* Emit error when a duplicate definition of a type is seen.  Patch up.  */\n@@ -2310,18 +2244,14 @@ duplicate_tag_error (t)\n \n   if (TYPE_LANG_SPECIFIC (t))\n     {\n-      tree as_list = CLASSTYPE_AS_LIST (t);\n       tree binfo = TYPE_BINFO (t);\n-      tree binfo_as_list = CLASSTYPE_BINFO_AS_LIST (t);\n       int interface_only = CLASSTYPE_INTERFACE_ONLY (t);\n       int interface_unknown = CLASSTYPE_INTERFACE_UNKNOWN (t);\n \n       bzero ((char *) TYPE_LANG_SPECIFIC (t), sizeof (struct lang_type));\n       BINFO_BASETYPES(binfo) = NULL_TREE;\n \n-      CLASSTYPE_AS_LIST (t) = as_list;\n       TYPE_BINFO (t) = binfo;\n-      CLASSTYPE_BINFO_AS_LIST (t) = binfo_as_list;\n       CLASSTYPE_INTERFACE_ONLY (t) = interface_only;\n       SET_CLASSTYPE_INTERFACE_UNKNOWN_X (t, interface_unknown);\n       TYPE_REDEFINED (t) = 1;\n@@ -3370,7 +3300,6 @@ finish_struct_1 (t, warn_anon)\n       CLASSTYPE_VFIELD_PARENT (t) = first_vfn_base_index;\n       has_virtual = base_info.has_virtual;\n       max_has_virtual = base_info.max_has_virtual;\n-      CLASSTYPE_N_SUPERCLASSES (t) += base_info.n_ancestors;\n       vfield = base_info.vfield;\n       vfields = base_info.vfields;\n       CLASSTYPE_RTTI (t) = base_info.rtti;\n@@ -3899,7 +3828,7 @@ finish_struct_1 (t, warn_anon)\n \tfields = vfield;\n #endif\n       empty = 0;\n-      vfields = chainon (vfields, CLASSTYPE_AS_LIST (t));\n+      vfields = chainon (vfields, build_tree_list (NULL_TREE, t));\n     }\n \n   /* Now DECL_INITIAL is null on all members except for zero-width bit-fields.\n@@ -4014,7 +3943,6 @@ finish_struct_1 (t, warn_anon)\n       tree vbases;\n \n       vbases = CLASSTYPE_VBASECLASSES (t);\n-      CLASSTYPE_N_VBASECLASSES (t) = list_length (vbases);\n \n       {\n \t/* Now fixup overrides of all functions in vtables from all"}, {"sha": "6c25aed646d1186405439b1ab92566c9ee145357", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 57, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -104,7 +104,7 @@ struct lang_identifier\n struct lang_id2\n {\n   tree label_value, implicit_decl;\n-  tree type_desc, as_list, error_locus;\n+  tree error_locus;\n };\n \n typedef struct \n@@ -278,14 +278,6 @@ struct tree_srcloc\n #define SET_IDENTIFIER_IMPLICIT_DECL(NODE,VALUE) \\\n \tSET_LANG_ID(NODE, VALUE, implicit_decl)\n \n-#define IDENTIFIER_AS_DESC(NODE)\t    LANG_ID_FIELD(type_desc, NODE)\n-#define SET_IDENTIFIER_AS_DESC(NODE,DESC)\t\\\n-\tSET_LANG_ID(NODE, DESC, type_desc)\n-\n-#define IDENTIFIER_AS_LIST(NODE)\t    LANG_ID_FIELD(as_list, NODE)\n-#define SET_IDENTIFIER_AS_LIST(NODE,LIST)\t\\\n-\tSET_LANG_ID(NODE, LIST, as_list)\n-\n #define IDENTIFIER_ERROR_LOCUS(NODE)\t    LANG_ID_FIELD(error_locus, NODE)\n #define SET_IDENTIFIER_ERROR_LOCUS(NODE,VALUE)\t\\\n \tSET_LANG_ID(NODE, VALUE, error_locus)\n@@ -737,13 +729,9 @@ struct lang_type\n       unsigned dummy : 11;\n     } type_flags;\n \n-  int n_ancestors;\n-  int n_vancestors;\n   int vsize;\n-  int max_depth;\n   int vfield_parent;\n \n-  union tree_node *baselink_vec;\n   union tree_node *vfields;\n   union tree_node *vbases;\n \n@@ -756,11 +744,7 @@ struct lang_type\n \n   union tree_node *size;\n \n-  union tree_node *base_init_list;\n   union tree_node *abstract_virtuals;\n-  union tree_node *as_list;\n-  union tree_node *id_as_list;\n-  union tree_node *binfo_as_list;\n   union tree_node *friend_classes;\n \n   union tree_node *rtti;\n@@ -862,7 +846,7 @@ struct lang_type\n    signature reference type.  */\n #define SIGNATURE_REFERENCE_TO(NODE) (TYPE_LANG_SPECIFIC(NODE)->signature_reference_to)\n \n-/* The is the VAR_DECL that contains NODE's rtti.  */\n+/* The is the basetype that contains NODE's rtti.  */\n #define CLASSTYPE_RTTI(NODE) (TYPE_LANG_SPECIFIC(NODE)->rtti)\n \n /* Nonzero means that this _CLASSTYPE node overloads operator().  */\n@@ -900,10 +884,6 @@ struct lang_type\n     ? TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (NODE), 2) \\\n     : NULL_TREE;\n \n-/* Pointer from any member function to the head of the list of\n-   member functions of the type that member function belongs to.  */\n-#define CLASSTYPE_BASELINK_VEC(NODE) (TYPE_LANG_SPECIFIC(NODE)->baselink_vec)\n-\n /* Mark bits for depth-first and breath-first searches.  */\n \n /* Get the value of the Nth mark bit.  */\n@@ -974,17 +954,6 @@ struct lang_type\n #define CLASSTYPE_N_BASECLASSES(NODE) \\\n   (TYPE_BINFO_BASETYPES (NODE) ? TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES(NODE)) : 0)\n \n-/* Memoize the number of super classes (base classes) that this node\n-   has.  That way we can know immediately (albeit conservatively how\n-   large a multiple-inheritance matrix we need to build to find\n-   derivation information.  */\n-#define CLASSTYPE_N_SUPERCLASSES(NODE) (TYPE_LANG_SPECIFIC(NODE)->n_ancestors)\n-#define CLASSTYPE_N_VBASECLASSES(NODE) (TYPE_LANG_SPECIFIC(NODE)->n_vancestors)\n-\n-/* Record how deep the inheritance is for this class so `void*' conversions\n-   are less favorable than a conversion to the most base type.  */\n-#define CLASSTYPE_MAX_DEPTH(NODE) (TYPE_LANG_SPECIFIC(NODE)->max_depth)\n-\n /* Used for keeping search-specific information.  Any search routine\n    which uses this must define what exactly this slot is used for.  */\n #define CLASSTYPE_SEARCH_SLOT(NODE) (TYPE_LANG_SPECIFIC(NODE)->search_slot)\n@@ -994,17 +963,6 @@ struct lang_type\n #define CLASSTYPE_SIZE(NODE) (TYPE_LANG_SPECIFIC(NODE)->size)\n #define CLASSTYPE_ALIGN(NODE) (TYPE_LANG_SPECIFIC(NODE)->align)\n \n-/* A cons list of structure elements which either have constructors\n-   to be called, or virtual function table pointers which\n-   need initializing.  Depending on what is being initialized,\n-   the TREE_PURPOSE and TREE_VALUE fields have different meanings:\n-\n-   Member initialization: <FIELD_DECL, TYPE>\n-   Base class construction: <NULL_TREE, BASETYPE>\n-   Base class initialization: <BASE_INITIALIZATION, THESE_INITIALIZATIONS>\n-   Whole type: <MEMBER_INIT, BASE_INIT>.  */\n-#define CLASSTYPE_BASE_INIT_LIST(NODE) (TYPE_LANG_SPECIFIC(NODE)->base_init_list)\n-\n /* A cons list of virtual functions which cannot be inherited by\n    derived classes.  When deriving from this type, the derived\n    class must provide its own definition for each of these functions.  */\n@@ -1038,16 +996,6 @@ struct lang_type\n #define CLASSTYPE_HAS_MUTABLE(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.has_mutable)\n #define TYPE_HAS_MUTABLE_P(NODE) (cp_has_mutable_p (NODE))\n \n-/* Many routines need to cons up a list of basetypes for access\n-   checking.  This field contains a TREE_LIST node whose TREE_VALUE\n-   is the main variant of the type, and whose TREE_VIA_PUBLIC\n-   and TREE_VIA_VIRTUAL bits are correctly set.  */\n-#define CLASSTYPE_AS_LIST(NODE) (TYPE_LANG_SPECIFIC(NODE)->as_list)\n-/* Same, but cache a list whose value is the name of this type.  */\n-#define CLASSTYPE_ID_AS_LIST(NODE) (TYPE_LANG_SPECIFIC(NODE)->id_as_list)\n-/* Same, but cache a list whose value is the binfo of this type.  */\n-#define CLASSTYPE_BINFO_AS_LIST(NODE) (TYPE_LANG_SPECIFIC(NODE)->binfo_as_list)\n-\n /* A list of class types of which this type is a friend.  The\n    TREE_VALUE is normally a TYPE, but will be a TEMPLATE_DECL in the\n    case of a template friend.  */\n@@ -3221,8 +3169,6 @@ extern tree lookup_member\t\t\tPROTO((tree, tree, int, int));\n extern tree lookup_nested_tag\t\t\tPROTO((tree, tree));\n extern tree get_matching_virtual\t\tPROTO((tree, tree, int));\n extern tree get_abstract_virtuals\t\tPROTO((tree));\n-extern tree get_baselinks\t\t\tPROTO((tree, tree, tree));\n-extern tree next_baselink\t\t\tPROTO((tree));\n extern tree init_vbase_pointers\t\t\tPROTO((tree, tree));\n extern void expand_indirect_vtbls_init\t\tPROTO((tree, tree, tree));\n extern void clear_search_slots\t\t\tPROTO((tree));\n@@ -3352,7 +3298,6 @@ extern tree build_base_fields\t\t\tPROTO((tree));\n extern tree hash_tree_cons\t\t\tPROTO((int, int, int, tree, tree, tree));\n extern tree hash_tree_chain\t\t\tPROTO((tree, tree));\n extern tree hash_chainon\t\t\tPROTO((tree, tree));\n-extern tree get_decl_list\t\t\tPROTO((tree));\n extern tree make_binfo\t\t\t\tPROTO((tree, tree, tree, tree));\n extern tree binfo_value\t\t\t\tPROTO((tree, tree));\n extern tree reverse_path\t\t\tPROTO((tree));"}, {"sha": "81e99d8cd04194a70f1857a1fc60fde578537d73", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -679,70 +679,28 @@ init_parse (filename)\n   token_buffer = (char *) xmalloc (maxtoken + 2);\n \n   ridpointers[(int) RID_INT] = get_identifier (\"int\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_INT],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_INT]));\n   ridpointers[(int) RID_BOOL] = get_identifier (\"bool\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_BOOL],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_BOOL]));\n   ridpointers[(int) RID_CHAR] = get_identifier (\"char\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_CHAR],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_CHAR]));\n   ridpointers[(int) RID_VOID] = get_identifier (\"void\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_VOID],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_VOID]));\n   ridpointers[(int) RID_FLOAT] = get_identifier (\"float\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_FLOAT],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_FLOAT]));\n   ridpointers[(int) RID_DOUBLE] = get_identifier (\"double\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_DOUBLE],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_DOUBLE]));\n   ridpointers[(int) RID_SHORT] = get_identifier (\"short\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_SHORT],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_SHORT]));\n   ridpointers[(int) RID_LONG] = get_identifier (\"long\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_LONG],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_LONG]));\n   ridpointers[(int) RID_UNSIGNED] = get_identifier (\"unsigned\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_UNSIGNED],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_UNSIGNED]));\n   ridpointers[(int) RID_SIGNED] = get_identifier (\"signed\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_SIGNED],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_SIGNED]));\n   ridpointers[(int) RID_INLINE] = get_identifier (\"inline\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_INLINE],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_INLINE]));\n   ridpointers[(int) RID_CONST] = get_identifier (\"const\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_CONST],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_CONST]));\n   ridpointers[(int) RID_VOLATILE] = get_identifier (\"volatile\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_VOLATILE],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_VOLATILE]));\n   ridpointers[(int) RID_RESTRICT] = get_identifier (\"__restrict\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_RESTRICT],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_RESTRICT]));\n   ridpointers[(int) RID_AUTO] = get_identifier (\"auto\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_AUTO],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_AUTO]));\n   ridpointers[(int) RID_STATIC] = get_identifier (\"static\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_STATIC],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_STATIC]));\n   ridpointers[(int) RID_EXTERN] = get_identifier (\"extern\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_EXTERN],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_EXTERN]));\n   ridpointers[(int) RID_TYPEDEF] = get_identifier (\"typedef\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_TYPEDEF],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_TYPEDEF]));\n   ridpointers[(int) RID_REGISTER] = get_identifier (\"register\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_REGISTER],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_REGISTER]));\n   ridpointers[(int) RID_COMPLEX] = get_identifier (\"__complex\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_COMPLEX],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_COMPLEX]));\n \n   /* C++ extensions. These are probably not correctly named.  */\n   ridpointers[(int) RID_WCHAR] = get_identifier (\"__wchar_t\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_WCHAR],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_WCHAR]));\n   class_type_node = build_int_2 (class_type, 0);\n   TREE_TYPE (class_type_node) = class_type_node;\n   ridpointers[(int) RID_CLASS] = class_type_node;\n@@ -760,34 +718,16 @@ init_parse (filename)\n   ridpointers[(int) RID_ENUM] = enum_type_node;\n \n   ridpointers[(int) RID_VIRTUAL] = get_identifier (\"virtual\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_VIRTUAL],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_VIRTUAL]));\n   ridpointers[(int) RID_EXPLICIT] = get_identifier (\"explicit\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_EXPLICIT],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_EXPLICIT]));\n   ridpointers[(int) RID_EXPORT] = get_identifier (\"export\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_EXPORT],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_EXPORT]));\n   ridpointers[(int) RID_FRIEND] = get_identifier (\"friend\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_FRIEND],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_FRIEND]));\n \n   ridpointers[(int) RID_PUBLIC] = get_identifier (\"public\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_PUBLIC],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_PUBLIC]));\n   ridpointers[(int) RID_PRIVATE] = get_identifier (\"private\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_PRIVATE],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_PRIVATE]));\n   ridpointers[(int) RID_PROTECTED] = get_identifier (\"protected\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_PROTECTED],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_PROTECTED]));\n   ridpointers[(int) RID_TEMPLATE] = get_identifier (\"template\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_TEMPLATE],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_TEMPLATE]));\n   /* This is for ANSI C++.  */\n   ridpointers[(int) RID_MUTABLE] = get_identifier (\"mutable\");\n-  SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_MUTABLE],\n-\t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_MUTABLE]));\n \n   /* Signature handling extensions.  */\n   signature_type_node = build_int_2 (signature_type, 0);\n@@ -4724,12 +4664,9 @@ make_lang_type (code)\n       bzero ((char *) pi, (int) sizeof (struct lang_type));\n \n       TYPE_LANG_SPECIFIC (t) = pi;\n-      CLASSTYPE_AS_LIST (t) = build_expr_list (NULL_TREE, t);\n       SET_CLASSTYPE_INTERFACE_UNKNOWN_X (t, interface_unknown);\n       CLASSTYPE_INTERFACE_ONLY (t) = interface_only;\n       TYPE_BINFO (t) = make_binfo (integer_zero_node, t, NULL_TREE, NULL_TREE);\n-      CLASSTYPE_BINFO_AS_LIST (t) \n-\t= build_tree_list (NULL_TREE, TYPE_BINFO (t));\n \n       /* Make sure this is laid out, for ease of use later.  In the\n \t presence of parse errors, the normal was of assuring this"}, {"sha": "e346e47b6919744d6f1fbce8bdbc9a4440aadca8", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 481, "deletions": 479, "changes": 960, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -193,7 +193,7 @@ parse_decl(declarator, specs_attrs, attributes, initialized, decl)\n   split_specs_attrs (specs_attrs, &current_declspecs, &prefix_attributes);\n   if (current_declspecs\n       && TREE_CODE (current_declspecs) != TREE_LIST)\n-    current_declspecs = get_decl_list (current_declspecs);\n+    current_declspecs = build_decl_list (NULL_TREE, current_declspecs);\n   if (have_extern_spec && !used_extern_spec)\n     {\n       current_declspecs = decl_tree_cons (NULL_TREE, \n@@ -681,57 +681,57 @@ static const short yyrline[] = { 0,\n   1529,  1531,  1533,  1535,  1538,  1540,  1542,  1586,  1589,  1593,\n   1596,  1600,  1603,  1608,  1610,  1614,  1627,  1630,  1637,  1644,\n   1649,  1651,  1656,  1658,  1665,  1667,  1671,  1675,  1681,  1685,\n-  1688,  1691,  1694,  1704,  1706,  1709,  1713,  1716,  1719,  1722,\n-  1725,  1731,  1737,  1739,  1744,  1746,  1755,  1758,  1760,  1763,\n-  1769,  1771,  1781,  1785,  1788,  1791,  1796,  1799,  1807,  1809,\n-  1811,  1813,  1816,  1819,  1834,  1853,  1856,  1858,  1861,  1863,\n-  1867,  1869,  1873,  1875,  1879,  1882,  1886,  1892,  1893,  1905,\n-  1912,  1915,  1921,  1925,  1930,  1936,  1937,  1945,  1948,  1952,\n-  1955,  1959,  1964,  1967,  1971,  1974,  1976,  1978,  1980,  1987,\n-  1989,  1990,  1991,  1995,  1998,  2002,  2005,  2011,  2013,  2016,\n-  2019,  2022,  2028,  2031,  2034,  2036,  2038,  2042,  2048,  2056,\n-  2063,  2067,  2069,  2074,  2077,  2080,  2082,  2084,  2088,  2093,\n-  2100,  2104,  2108,  2115,  2119,  2122,  2125,  2131,  2143,  2145,\n-  2148,  2168,  2170,  2173,  2175,  2180,  2182,  2184,  2186,  2188,\n-  2190,  2194,  2202,  2205,  2207,  2211,  2217,  2222,  2227,  2229,\n-  2233,  2236,  2240,  2246,  2252,  2277,  2283,  2285,  2288,  2291,\n-  2293,  2297,  2299,  2303,  2308,  2314,  2317,  2318,  2339,  2362,\n-  2364,  2368,  2379,  2393,  2398,  2399,  2400,  2401,  2404,  2419,\n-  2424,  2430,  2432,  2437,  2439,  2441,  2443,  2445,  2447,  2450,\n-  2460,  2467,  2492,  2498,  2501,  2504,  2506,  2517,  2522,  2525,\n-  2530,  2533,  2540,  2550,  2553,  2560,  2570,  2572,  2575,  2577,\n-  2580,  2587,  2595,  2602,  2608,  2614,  2622,  2626,  2631,  2635,\n-  2638,  2647,  2649,  2653,  2656,  2661,  2665,  2671,  2682,  2685,\n-  2689,  2693,  2701,  2706,  2712,  2715,  2717,  2719,  2725,  2728,\n-  2730,  2732,  2734,  2738,  2741,  2759,  2769,  2771,  2772,  2776,\n-  2781,  2784,  2786,  2788,  2790,  2794,  2800,  2802,  2810,  2813,\n-  2815,  2817,  2819,  2823,  2826,  2829,  2831,  2833,  2835,  2839,\n-  2842,  2845,  2847,  2849,  2851,  2853,  2860,  2864,  2869,  2873,\n-  2878,  2880,  2884,  2887,  2889,  2892,  2894,  2895,  2898,  2900,\n-  2902,  2908,  2923,  2929,  2935,  2949,  2951,  2955,  2969,  2971,\n-  2973,  2977,  2983,  2996,  2998,  3002,  3015,  3021,  3023,  3024,\n-  3025,  3033,  3038,  3047,  3048,  3052,  3055,  3061,  3067,  3070,\n-  3072,  3074,  3076,  3080,  3084,  3088,  3091,  3096,  3099,  3101,\n-  3103,  3105,  3107,  3109,  3111,  3113,  3117,  3121,  3125,  3129,\n-  3130,  3132,  3134,  3136,  3138,  3140,  3142,  3144,  3146,  3154,\n-  3156,  3157,  3158,  3161,  3167,  3169,  3174,  3176,  3179,  3193,\n-  3196,  3199,  3203,  3206,  3213,  3215,  3218,  3220,  3222,  3225,\n-  3228,  3231,  3234,  3236,  3239,  3243,  3245,  3251,  3253,  3254,\n-  3256,  3261,  3263,  3265,  3267,  3269,  3272,  3273,  3275,  3278,\n-  3279,  3282,  3282,  3285,  3285,  3288,  3288,  3290,  3292,  3294,\n-  3296,  3302,  3308,  3311,  3314,  3320,  3322,  3324,  3328,  3330,\n-  3331,  3332,  3334,  3337,  3344,  3349,  3355,  3359,  3361,  3364,\n-  3366,  3369,  3373,  3375,  3378,  3380,  3383,  3400,  3406,  3414,\n-  3416,  3418,  3422,  3425,  3426,  3434,  3438,  3442,  3445,  3446,\n-  3452,  3455,  3458,  3460,  3464,  3469,  3472,  3482,  3487,  3488,\n-  3495,  3498,  3501,  3503,  3506,  3508,  3518,  3532,  3536,  3539,\n-  3541,  3545,  3549,  3552,  3555,  3557,  3561,  3563,  3570,  3577,\n-  3580,  3583,  3587,  3591,  3597,  3601,  3606,  3608,  3611,  3616,\n-  3622,  3633,  3636,  3638,  3642,  3647,  3649,  3656,  3659,  3661,\n-  3663,  3669,  3674,  3677,  3679,  3681,  3683,  3685,  3687,  3689,\n-  3691,  3693,  3695,  3697,  3699,  3701,  3703,  3705,  3707,  3709,\n-  3711,  3713,  3715,  3717,  3719,  3721,  3723,  3725,  3727,  3729,\n-  3731,  3733,  3735,  3737,  3739,  3742,  3744\n+  1688,  1692,  1695,  1705,  1707,  1710,  1714,  1717,  1720,  1723,\n+  1726,  1732,  1738,  1740,  1745,  1747,  1756,  1759,  1761,  1764,\n+  1770,  1772,  1782,  1786,  1789,  1792,  1797,  1800,  1808,  1810,\n+  1812,  1814,  1817,  1820,  1835,  1854,  1857,  1859,  1862,  1864,\n+  1868,  1870,  1874,  1876,  1880,  1883,  1887,  1893,  1894,  1906,\n+  1913,  1916,  1922,  1926,  1931,  1937,  1938,  1946,  1949,  1953,\n+  1956,  1960,  1965,  1968,  1972,  1975,  1977,  1979,  1981,  1988,\n+  1990,  1991,  1992,  1996,  1999,  2003,  2006,  2012,  2014,  2017,\n+  2020,  2023,  2029,  2032,  2035,  2037,  2039,  2043,  2049,  2057,\n+  2064,  2068,  2070,  2075,  2078,  2081,  2083,  2085,  2089,  2094,\n+  2101,  2105,  2109,  2116,  2120,  2123,  2126,  2132,  2144,  2146,\n+  2149,  2169,  2171,  2174,  2176,  2181,  2183,  2185,  2187,  2189,\n+  2191,  2195,  2203,  2206,  2208,  2212,  2218,  2223,  2228,  2230,\n+  2234,  2237,  2241,  2247,  2253,  2278,  2284,  2286,  2289,  2292,\n+  2294,  2298,  2300,  2304,  2309,  2315,  2318,  2319,  2340,  2363,\n+  2365,  2369,  2380,  2394,  2399,  2400,  2401,  2402,  2405,  2420,\n+  2425,  2431,  2433,  2438,  2440,  2442,  2444,  2446,  2448,  2451,\n+  2461,  2468,  2493,  2499,  2502,  2505,  2507,  2518,  2523,  2526,\n+  2531,  2534,  2541,  2551,  2554,  2561,  2571,  2573,  2576,  2578,\n+  2581,  2588,  2596,  2603,  2609,  2615,  2623,  2627,  2632,  2636,\n+  2639,  2648,  2650,  2654,  2657,  2662,  2666,  2672,  2683,  2686,\n+  2690,  2694,  2702,  2707,  2713,  2716,  2718,  2720,  2726,  2729,\n+  2731,  2733,  2735,  2739,  2742,  2760,  2770,  2772,  2773,  2777,\n+  2782,  2785,  2787,  2789,  2791,  2795,  2801,  2803,  2811,  2814,\n+  2816,  2818,  2820,  2824,  2827,  2830,  2832,  2834,  2836,  2840,\n+  2843,  2846,  2848,  2850,  2852,  2854,  2861,  2865,  2870,  2874,\n+  2879,  2881,  2885,  2888,  2890,  2893,  2895,  2896,  2899,  2901,\n+  2903,  2909,  2924,  2930,  2936,  2950,  2952,  2956,  2970,  2972,\n+  2974,  2978,  2984,  2997,  2999,  3003,  3016,  3022,  3024,  3025,\n+  3026,  3034,  3039,  3048,  3049,  3053,  3056,  3062,  3068,  3071,\n+  3073,  3075,  3077,  3081,  3085,  3089,  3092,  3097,  3100,  3102,\n+  3104,  3106,  3108,  3110,  3112,  3114,  3118,  3122,  3126,  3130,\n+  3131,  3133,  3135,  3137,  3139,  3141,  3143,  3145,  3147,  3155,\n+  3157,  3158,  3159,  3162,  3168,  3170,  3175,  3177,  3180,  3194,\n+  3197,  3200,  3204,  3207,  3214,  3216,  3219,  3221,  3223,  3226,\n+  3229,  3232,  3235,  3237,  3240,  3244,  3246,  3252,  3254,  3255,\n+  3257,  3262,  3264,  3266,  3268,  3270,  3273,  3274,  3276,  3279,\n+  3280,  3283,  3283,  3286,  3286,  3289,  3289,  3291,  3293,  3295,\n+  3297,  3303,  3309,  3312,  3315,  3321,  3323,  3325,  3329,  3331,\n+  3332,  3333,  3335,  3338,  3345,  3350,  3356,  3360,  3362,  3365,\n+  3367,  3370,  3374,  3376,  3379,  3381,  3384,  3401,  3407,  3415,\n+  3417,  3419,  3423,  3426,  3427,  3435,  3439,  3443,  3446,  3447,\n+  3453,  3456,  3459,  3461,  3465,  3470,  3473,  3483,  3488,  3489,\n+  3496,  3499,  3502,  3504,  3507,  3509,  3519,  3533,  3537,  3540,\n+  3542,  3546,  3550,  3553,  3556,  3558,  3562,  3564,  3571,  3578,\n+  3581,  3585,  3589,  3593,  3599,  3603,  3608,  3610,  3613,  3618,\n+  3624,  3635,  3638,  3640,  3644,  3649,  3651,  3658,  3661,  3663,\n+  3665,  3671,  3676,  3679,  3681,  3683,  3685,  3687,  3689,  3691,\n+  3693,  3695,  3697,  3699,  3701,  3703,  3705,  3707,  3709,  3711,\n+  3713,  3715,  3717,  3719,  3721,  3723,  3725,  3727,  3729,  3731,\n+  3733,  3735,  3737,  3739,  3741,  3744,  3746\n };\n #endif\n \n@@ -5629,153 +5629,154 @@ case 370:\n     break;}\n case 371:\n #line 1689 \"parse.y\"\n-{ yyval.ftype.t = build_decl_list (get_decl_list (yyvsp[-1].ftype.t), yyvsp[0].ttype); \n+{ yyval.ftype.t = build_decl_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),\n+\t\t\t\t\t  yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 372:\n-#line 1692 \"parse.y\"\n+#line 1693 \"parse.y\"\n { yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE);\n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;\n     break;}\n case 373:\n-#line 1695 \"parse.y\"\n+#line 1696 \"parse.y\"\n { yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 376:\n-#line 1711 \"parse.y\"\n+#line 1712 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyvsp[-1].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 377:\n-#line 1714 \"parse.y\"\n+#line 1715 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 378:\n-#line 1717 \"parse.y\"\n+#line 1718 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-2].ftype.t, chainon (yyvsp[-1].ttype, yyvsp[0].ttype)); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-2].ftype.new_type_flag; ;\n     break;}\n case 379:\n-#line 1720 \"parse.y\"\n+#line 1721 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, chainon (yyvsp[0].ttype, yyvsp[-2].ttype)); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 380:\n-#line 1723 \"parse.y\"\n+#line 1724 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, chainon (yyvsp[0].ttype, yyvsp[-2].ttype)); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 381:\n-#line 1726 \"parse.y\"\n+#line 1727 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-2].ftype.t,\n \t\t\t\t\t chainon (yyvsp[-1].ttype, chainon (yyvsp[0].ttype, yyvsp[-3].ttype))); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-2].ftype.new_type_flag; ;\n     break;}\n case 382:\n-#line 1733 \"parse.y\"\n+#line 1734 \"parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyval.ttype));\n \t\t  yyval.ttype = build_decl_list (NULL_TREE, yyval.ttype); ;\n     break;}\n case 383:\n-#line 1738 \"parse.y\"\n+#line 1739 \"parse.y\"\n { yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyval.ttype); ;\n     break;}\n case 384:\n-#line 1740 \"parse.y\"\n+#line 1741 \"parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 385:\n-#line 1745 \"parse.y\"\n+#line 1746 \"parse.y\"\n { yyval.ttype = decl_tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 386:\n-#line 1747 \"parse.y\"\n+#line 1748 \"parse.y\"\n { yyval.ttype = decl_tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;\n     break;}\n case 387:\n-#line 1757 \"parse.y\"\n+#line 1758 \"parse.y\"\n { yyval.ttype = yyvsp[0].ftype.t; TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 388:\n-#line 1759 \"parse.y\"\n-{ yyval.ttype = IDENTIFIER_AS_LIST (yyval.ttype); ;\n+#line 1760 \"parse.y\"\n+{ yyval.ttype = build_decl_list (NULL_TREE, yyval.ttype); ;\n     break;}\n case 389:\n-#line 1761 \"parse.y\"\n+#line 1762 \"parse.y\"\n { yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype);\n \t\t  TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 390:\n-#line 1764 \"parse.y\"\n+#line 1765 \"parse.y\"\n { if (extra_warnings && TREE_STATIC (yyval.ttype))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype);\n \t\t  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;\n     break;}\n case 391:\n-#line 1770 \"parse.y\"\n+#line 1771 \"parse.y\"\n { yyval.ttype = decl_tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 392:\n-#line 1772 \"parse.y\"\n+#line 1773 \"parse.y\"\n { yyval.ttype = decl_tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;\n     break;}\n case 393:\n-#line 1783 \"parse.y\"\n-{ yyval.ftype.t = get_decl_list (yyvsp[0].ftype.t); \n+#line 1784 \"parse.y\"\n+{ yyval.ftype.t = build_decl_list (NULL_TREE, yyvsp[0].ftype.t); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 394:\n-#line 1786 \"parse.y\"\n+#line 1787 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyvsp[-1].ftype.t); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 395:\n-#line 1789 \"parse.y\"\n+#line 1790 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 396:\n-#line 1792 \"parse.y\"\n+#line 1793 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, chainon (yyvsp[0].ttype, yyvsp[-2].ftype.t)); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-2].ftype.new_type_flag; ;\n     break;}\n case 397:\n-#line 1798 \"parse.y\"\n+#line 1799 \"parse.y\"\n { yyval.ttype = build_decl_list (NULL_TREE, yyvsp[0].ftype.t); ;\n     break;}\n case 398:\n-#line 1800 \"parse.y\"\n+#line 1801 \"parse.y\"\n { yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyvsp[-1].ttype); ;\n     break;}\n case 400:\n-#line 1810 \"parse.y\"\n+#line 1811 \"parse.y\"\n { yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 401:\n-#line 1812 \"parse.y\"\n+#line 1813 \"parse.y\"\n { yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 402:\n-#line 1814 \"parse.y\"\n+#line 1815 \"parse.y\"\n { yyval.ftype.t = finish_typeof (yyvsp[-1].ttype);\n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 403:\n-#line 1817 \"parse.y\"\n+#line 1818 \"parse.y\"\n { yyval.ftype.t = groktypename (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 404:\n-#line 1820 \"parse.y\"\n+#line 1821 \"parse.y\"\n { tree type = TREE_TYPE (yyvsp[-1].ttype);\n \n                   yyval.ftype.new_type_flag = 0;\n@@ -5792,7 +5793,7 @@ case 404:\n \t\t;\n     break;}\n case 405:\n-#line 1835 \"parse.y\"\n+#line 1836 \"parse.y\"\n { tree type = groktypename (yyvsp[-1].ftype.t);\n \n                   yyval.ftype.new_type_flag = 0;\n@@ -5809,200 +5810,200 @@ case 405:\n \t\t;\n     break;}\n case 406:\n-#line 1855 \"parse.y\"\n+#line 1856 \"parse.y\"\n { yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 407:\n-#line 1857 \"parse.y\"\n+#line 1858 \"parse.y\"\n { yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 410:\n-#line 1864 \"parse.y\"\n+#line 1865 \"parse.y\"\n { check_multiple_declarators (); ;\n     break;}\n case 412:\n-#line 1870 \"parse.y\"\n+#line 1871 \"parse.y\"\n { check_multiple_declarators (); ;\n     break;}\n case 414:\n-#line 1876 \"parse.y\"\n+#line 1877 \"parse.y\"\n { check_multiple_declarators (); ;\n     break;}\n case 415:\n-#line 1881 \"parse.y\"\n+#line 1882 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 416:\n-#line 1883 \"parse.y\"\n+#line 1884 \"parse.y\"\n { if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype); yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 417:\n-#line 1888 \"parse.y\"\n+#line 1889 \"parse.y\"\n { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,\n \t\t\t\t\t  yyvsp[-1].ttype, prefix_attributes); ;\n     break;}\n case 418:\n-#line 1892 \"parse.y\"\n+#line 1893 \"parse.y\"\n { cp_finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype, 1, LOOKUP_ONLYCONVERTING); ;\n     break;}\n case 419:\n-#line 1894 \"parse.y\"\n+#line 1895 \"parse.y\"\n { yyval.ttype = start_decl (yyvsp[-2].ttype, current_declspecs, 0,\n \t\t\t\t\t  yyvsp[0].ttype, prefix_attributes);\n \t\t  cp_finish_decl (yyval.ttype, NULL_TREE, yyvsp[-1].ttype, 1, 0); ;\n     break;}\n case 420:\n-#line 1907 \"parse.y\"\n+#line 1908 \"parse.y\"\n { yyvsp[0].itype = parse_decl (yyvsp[-3].ttype, yyvsp[-4].ttype, \n \t\t\t\t\t   yyvsp[-1].ttype, 1, &yyval.ttype); ;\n     break;}\n case 421:\n-#line 1912 \"parse.y\"\n+#line 1913 \"parse.y\"\n { cp_finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype, 1,\n \t\t\t\t  LOOKUP_ONLYCONVERTING);\n \t\t  yyval.itype = yyvsp[-2].itype; ;\n     break;}\n case 422:\n-#line 1916 \"parse.y\"\n+#line 1917 \"parse.y\"\n { tree d;\n \t\t  yyval.itype = parse_decl (yyvsp[-2].ttype, yyvsp[-3].ttype, yyvsp[0].ttype, 0, &d);\n \t\t  cp_finish_decl (d, NULL_TREE, yyvsp[-1].ttype, 1, 0); ;\n     break;}\n case 423:\n-#line 1923 \"parse.y\"\n+#line 1924 \"parse.y\"\n { yyval.itype = yyvsp[0].itype; ;\n     break;}\n case 424:\n-#line 1927 \"parse.y\"\n+#line 1928 \"parse.y\"\n { yyval.itype = yyvsp[0].itype; ;\n     break;}\n case 425:\n-#line 1932 \"parse.y\"\n+#line 1933 \"parse.y\"\n { /* Set things up as initdcl0_innards expects.  */\n \t      yyvsp[0].ttype = yyvsp[-1].ttype; \n               yyvsp[-1].ttype = NULL_TREE; ;\n     break;}\n case 426:\n-#line 1936 \"parse.y\"\n+#line 1937 \"parse.y\"\n {;\n     break;}\n case 427:\n-#line 1938 \"parse.y\"\n+#line 1939 \"parse.y\"\n { tree d;\n \t\t  parse_decl(yyvsp[-2].ttype, NULL_TREE, yyvsp[0].ttype, 0, &d);\n \t\t  cp_finish_decl (d, NULL_TREE, yyvsp[-1].ttype, 1, 0); ;\n     break;}\n case 428:\n-#line 1947 \"parse.y\"\n+#line 1948 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 429:\n-#line 1949 \"parse.y\"\n+#line 1950 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 430:\n-#line 1954 \"parse.y\"\n+#line 1955 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 431:\n-#line 1956 \"parse.y\"\n+#line 1957 \"parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 432:\n-#line 1961 \"parse.y\"\n+#line 1962 \"parse.y\"\n { yyval.ttype = yyvsp[-2].ttype; ;\n     break;}\n case 433:\n-#line 1966 \"parse.y\"\n+#line 1967 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 434:\n-#line 1968 \"parse.y\"\n+#line 1969 \"parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 435:\n-#line 1973 \"parse.y\"\n+#line 1974 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 436:\n-#line 1975 \"parse.y\"\n+#line 1976 \"parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 437:\n-#line 1977 \"parse.y\"\n+#line 1978 \"parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;\n     break;}\n case 438:\n-#line 1979 \"parse.y\"\n+#line 1980 \"parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;\n     break;}\n case 439:\n-#line 1981 \"parse.y\"\n+#line 1982 \"parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 444:\n-#line 1997 \"parse.y\"\n+#line 1998 \"parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 445:\n-#line 1999 \"parse.y\"\n+#line 2000 \"parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 446:\n-#line 2004 \"parse.y\"\n+#line 2005 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 447:\n-#line 2006 \"parse.y\"\n+#line 2007 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 449:\n-#line 2014 \"parse.y\"\n+#line 2015 \"parse.y\"\n { yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, NULL_TREE);\n \t\t  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;\n     break;}\n case 450:\n-#line 2017 \"parse.y\"\n+#line 2018 \"parse.y\"\n { yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (yyvsp[-1].ttype));\n \t\t  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;\n     break;}\n case 451:\n-#line 2020 \"parse.y\"\n+#line 2021 \"parse.y\"\n { yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (yyvsp[-2].ttype));\n \t\t  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;\n     break;}\n case 452:\n-#line 2023 \"parse.y\"\n+#line 2024 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 453:\n-#line 2030 \"parse.y\"\n+#line 2031 \"parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyval.ttype); ;\n     break;}\n case 454:\n-#line 2032 \"parse.y\"\n+#line 2033 \"parse.y\"\n { yyval.ttype = expr_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 455:\n-#line 2035 \"parse.y\"\n+#line 2036 \"parse.y\"\n { yyval.ttype = build_expr_list (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 456:\n-#line 2037 \"parse.y\"\n+#line 2038 \"parse.y\"\n { yyval.ttype = build_expr_list (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 457:\n-#line 2039 \"parse.y\"\n+#line 2040 \"parse.y\"\n { yyval.ttype = expr_tree_cons (yyvsp[-2].ttype, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 458:\n-#line 2044 \"parse.y\"\n+#line 2045 \"parse.y\"\n { start_function (NULL_TREE, TREE_VALUE (yyvsp[0].ttype),\n \t\t\t\t  NULL_TREE, 2);\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 459:\n-#line 2050 \"parse.y\"\n+#line 2051 \"parse.y\"\n {\n \t\t  int nested = (hack_decl_function_context\n \t\t\t\t(current_function_decl) != NULL_TREE);\n@@ -6011,7 +6012,7 @@ case 459:\n \t\t;\n     break;}\n case 460:\n-#line 2057 \"parse.y\"\n+#line 2058 \"parse.y\"\n { \n \t\t  int nested = (hack_decl_function_context\n \t\t\t\t(current_function_decl) != NULL_TREE);\n@@ -6020,33 +6021,33 @@ case 460:\n \t\t;\n     break;}\n case 461:\n-#line 2064 \"parse.y\"\n+#line 2065 \"parse.y\"\n { process_next_inline (yyvsp[-2].ttype); ;\n     break;}\n case 464:\n-#line 2076 \"parse.y\"\n+#line 2077 \"parse.y\"\n { replace_defarg (yyvsp[-2].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 465:\n-#line 2078 \"parse.y\"\n+#line 2079 \"parse.y\"\n { replace_defarg (yyvsp[-2].ttype, error_mark_node); ;\n     break;}\n case 467:\n-#line 2083 \"parse.y\"\n+#line 2084 \"parse.y\"\n { do_pending_defargs (); ;\n     break;}\n case 468:\n-#line 2085 \"parse.y\"\n+#line 2086 \"parse.y\"\n { do_pending_defargs (); ;\n     break;}\n case 469:\n-#line 2090 \"parse.y\"\n+#line 2091 \"parse.y\"\n { yyvsp[0].itype = suspend_momentary ();\n \t\t  yyval.ttype = current_enum_type;\n \t\t  current_enum_type = start_enum (yyvsp[-1].ttype); ;\n     break;}\n case 470:\n-#line 2094 \"parse.y\"\n+#line 2095 \"parse.y\"\n { TYPE_VALUES (current_enum_type) = yyvsp[-2].ttype;\n \t\t  yyval.ftype.t = finish_enum (current_enum_type);\n \t\t  yyval.ftype.new_type_flag = 1;\n@@ -6055,19 +6056,19 @@ case 470:\n \t\t  check_for_missing_semicolon (yyval.ftype.t); ;\n     break;}\n case 471:\n-#line 2101 \"parse.y\"\n+#line 2102 \"parse.y\"\n { yyval.ftype.t = finish_enum (start_enum (yyvsp[-2].ttype));\n \t\t  yyval.ftype.new_type_flag = 1;\n \t\t  check_for_missing_semicolon (yyval.ftype.t); ;\n     break;}\n case 472:\n-#line 2105 \"parse.y\"\n+#line 2106 \"parse.y\"\n { yyvsp[0].itype = suspend_momentary ();\n \t\t  yyval.ttype = current_enum_type;\n \t\t  current_enum_type = start_enum (make_anon_name ()); ;\n     break;}\n case 473:\n-#line 2109 \"parse.y\"\n+#line 2110 \"parse.y\"\n { TYPE_VALUES (current_enum_type) = yyvsp[-2].ttype;\n \t\t  yyval.ftype.t = finish_enum (current_enum_type);\n \t\t  yyval.ftype.new_type_flag = 1;\n@@ -6076,30 +6077,30 @@ case 473:\n \t\t  check_for_missing_semicolon (yyval.ftype.t); ;\n     break;}\n case 474:\n-#line 2116 \"parse.y\"\n+#line 2117 \"parse.y\"\n { yyval.ftype.t = finish_enum (start_enum (make_anon_name()));\n \t\t  yyval.ftype.new_type_flag = 1;\n \t\t  check_for_missing_semicolon (yyval.ftype.t); ;\n     break;}\n case 475:\n-#line 2120 \"parse.y\"\n+#line 2121 \"parse.y\"\n { yyval.ftype.t = xref_tag (enum_type_node, yyvsp[0].ttype, 1); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 476:\n-#line 2123 \"parse.y\"\n+#line 2124 \"parse.y\"\n { yyval.ftype.t = xref_tag (enum_type_node, yyvsp[0].ttype, 1); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 477:\n-#line 2126 \"parse.y\"\n+#line 2127 \"parse.y\"\n { yyval.ftype.t = yyvsp[0].ttype;\n \t\t  yyval.ftype.new_type_flag = 0; \n \t\t  if (!processing_template_decl)\n \t\t    cp_pedwarn (\"using `typename' outside of template\"); ;\n     break;}\n case 478:\n-#line 2133 \"parse.y\"\n+#line 2134 \"parse.y\"\n { \n \t\t  int semi;\n \n@@ -6111,17 +6112,17 @@ case 478:\n \t\t;\n     break;}\n case 479:\n-#line 2143 \"parse.y\"\n+#line 2144 \"parse.y\"\n { finish_default_args (); ;\n     break;}\n case 480:\n-#line 2145 \"parse.y\"\n+#line 2146 \"parse.y\"\n { yyval.ftype.t = yyvsp[-3].ttype;\n \t\t  yyval.ftype.new_type_flag = 1; \n \t\t  begin_inline_definitions (); ;\n     break;}\n case 481:\n-#line 2149 \"parse.y\"\n+#line 2150 \"parse.y\"\n {\n \t\t  yyval.ftype.new_type_flag = 0;\n \t\t  if (TYPE_BINFO (yyvsp[0].ttype) == NULL_TREE)\n@@ -6141,103 +6142,103 @@ case 481:\n \t\t;\n     break;}\n case 485:\n-#line 2176 \"parse.y\"\n+#line 2177 \"parse.y\"\n { if (pedantic && !in_system_header)\n \t\t    pedwarn (\"comma at end of enumerator list\"); ;\n     break;}\n case 487:\n-#line 2183 \"parse.y\"\n+#line 2184 \"parse.y\"\n { error (\"storage class specifier `%s' not allowed after struct or class\", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;\n     break;}\n case 488:\n-#line 2185 \"parse.y\"\n+#line 2186 \"parse.y\"\n { error (\"type specifier `%s' not allowed after struct or class\", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;\n     break;}\n case 489:\n-#line 2187 \"parse.y\"\n+#line 2188 \"parse.y\"\n { error (\"type qualifier `%s' not allowed after struct or class\", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;\n     break;}\n case 490:\n-#line 2189 \"parse.y\"\n+#line 2190 \"parse.y\"\n { error (\"no body nor ';' separates two class, struct or union declarations\"); ;\n     break;}\n case 491:\n-#line 2191 \"parse.y\"\n+#line 2192 \"parse.y\"\n { yyval.ttype = build_decl_list (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 492:\n-#line 2196 \"parse.y\"\n+#line 2197 \"parse.y\"\n { \n \t\t  current_aggr = yyvsp[-1].ttype; \n \t\t  yyval.ttype = yyvsp[0].ttype; \n \t\t;\n     break;}\n case 493:\n-#line 2204 \"parse.y\"\n+#line 2205 \"parse.y\"\n { current_aggr = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 494:\n-#line 2206 \"parse.y\"\n+#line 2207 \"parse.y\"\n { yyungetc ('{', 1); ;\n     break;}\n case 495:\n-#line 2208 \"parse.y\"\n+#line 2209 \"parse.y\"\n { yyungetc (':', 1); ;\n     break;}\n case 496:\n-#line 2213 \"parse.y\"\n+#line 2214 \"parse.y\"\n {\n \t\t  current_aggr = yyvsp[-2].ttype;\n \t\t  yyval.ttype = handle_class_head (yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 497:\n-#line 2218 \"parse.y\"\n+#line 2219 \"parse.y\"\n {\n \t\t  current_aggr = yyvsp[-3].ttype;\n \t\t  yyval.ttype = handle_class_head (yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 498:\n-#line 2223 \"parse.y\"\n+#line 2224 \"parse.y\"\n {\n \t\t  current_aggr = yyvsp[-2].ttype;\n \t\t  yyval.ttype = handle_class_head (yyvsp[-2].ttype, NULL_TREE, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 499:\n-#line 2228 \"parse.y\"\n+#line 2229 \"parse.y\"\n { current_aggr = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 500:\n-#line 2230 \"parse.y\"\n+#line 2231 \"parse.y\"\n { current_aggr = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 501:\n-#line 2235 \"parse.y\"\n+#line 2236 \"parse.y\"\n { yyval.ttype = xref_tag (current_aggr, yyvsp[0].ttype, 1); ;\n     break;}\n case 502:\n-#line 2237 \"parse.y\"\n+#line 2238 \"parse.y\"\n { yyval.ttype = xref_tag (current_aggr, yyvsp[0].ttype, 0); ;\n     break;}\n case 503:\n-#line 2241 \"parse.y\"\n+#line 2242 \"parse.y\"\n { \n \t\t  yyval.ttype = yyvsp[-1].ttype;\n \t\t  if (yyvsp[0].ttype)\n                     xref_basetypes (current_aggr, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); \n \t\t;\n     break;}\n case 504:\n-#line 2247 \"parse.y\"\n+#line 2248 \"parse.y\"\n { \n \t\t  if (yyvsp[0].ttype != error_mark_node)\n \t\t    push_scope (CP_DECL_CONTEXT (yyvsp[0].ttype)); \n \t\t;\n     break;}\n case 505:\n-#line 2252 \"parse.y\"\n+#line 2253 \"parse.y\"\n { \n \t\t  if (yyvsp[-2].ttype != error_mark_node)\n \t\t    {\n@@ -6263,44 +6264,44 @@ case 505:\n \t\t;\n     break;}\n case 506:\n-#line 2279 \"parse.y\"\n+#line 2280 \"parse.y\"\n { yyval.ttype = xref_tag (yyval.ttype, make_anon_name (), 0);\n \t\t  yyungetc ('{', 1); ;\n     break;}\n case 509:\n-#line 2290 \"parse.y\"\n+#line 2291 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 510:\n-#line 2292 \"parse.y\"\n+#line 2293 \"parse.y\"\n { yyungetc(':', 1); yyval.ttype = NULL_TREE; ;\n     break;}\n case 511:\n-#line 2294 \"parse.y\"\n+#line 2295 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 513:\n-#line 2300 \"parse.y\"\n+#line 2301 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 514:\n-#line 2305 \"parse.y\"\n+#line 2306 \"parse.y\"\n { yyval.ttype = finish_base_specifier (access_default_node, yyvsp[0].ttype,\n \t\t\t\t\t      current_aggr \n \t\t\t\t\t      == signature_type_node); ;\n     break;}\n case 515:\n-#line 2309 \"parse.y\"\n+#line 2310 \"parse.y\"\n { yyval.ttype = finish_base_specifier (yyvsp[-2].ttype, yyvsp[0].ttype, \n \t\t\t\t\t      current_aggr \n \t\t\t\t\t      == signature_type_node); ;\n     break;}\n case 516:\n-#line 2316 \"parse.y\"\n+#line 2317 \"parse.y\"\n { if (yyval.ttype != error_mark_node) yyval.ttype = TYPE_MAIN_DECL (yyvsp[0].ttype); ;\n     break;}\n case 518:\n-#line 2319 \"parse.y\"\n+#line 2320 \"parse.y\"\n {\n \t\t  if (current_aggr == signature_type_node)\n \t\t    {\n@@ -6323,7 +6324,7 @@ case 518:\n \t\t;\n     break;}\n case 519:\n-#line 2340 \"parse.y\"\n+#line 2341 \"parse.y\"\n {\n \t\t  if (current_aggr == signature_type_node)\n \t\t    {\n@@ -6346,13 +6347,13 @@ case 519:\n \t\t;\n     break;}\n case 521:\n-#line 2365 \"parse.y\"\n+#line 2366 \"parse.y\"\n { if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])\n \t\t    cp_error (\"`%D' access\", yyvsp[-1].ttype);\n \t\t  yyval.ttype = access_default_virtual_node; ;\n     break;}\n case 522:\n-#line 2369 \"parse.y\"\n+#line 2370 \"parse.y\"\n {\n \t\t  if (yyvsp[-2].ttype != access_default_virtual_node)\n \t\t    error (\"multiple access specifiers\");\n@@ -6365,7 +6366,7 @@ case 522:\n \t\t;\n     break;}\n case 523:\n-#line 2380 \"parse.y\"\n+#line 2381 \"parse.y\"\n { if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])\n \t\t    cp_error (\"`%D' access\", yyvsp[-1].ttype);\n \t\t  else if (yyval.ttype == access_public_node)\n@@ -6379,11 +6380,11 @@ case 523:\n \t\t;\n     break;}\n case 524:\n-#line 2395 \"parse.y\"\n+#line 2396 \"parse.y\"\n { yyvsp[-1].ttype = begin_class_definition (yyvsp[-1].ttype); ;\n     break;}\n case 529:\n-#line 2406 \"parse.y\"\n+#line 2407 \"parse.y\"\n {\n \t\t  if (current_aggr == signature_type_node)\n \t\t    {\n@@ -6395,49 +6396,49 @@ case 529:\n                 ;\n     break;}\n case 530:\n-#line 2421 \"parse.y\"\n+#line 2422 \"parse.y\"\n { \n \t\t  finish_member_declaration (yyvsp[0].ttype);\n \t\t;\n     break;}\n case 531:\n-#line 2425 \"parse.y\"\n+#line 2426 \"parse.y\"\n { \n \t\t  finish_member_declaration (yyvsp[0].ttype);\n \t\t;\n     break;}\n case 533:\n-#line 2433 \"parse.y\"\n+#line 2434 \"parse.y\"\n { error (\"missing ';' before right brace\");\n \t\t  yyungetc ('}', 0); ;\n     break;}\n case 534:\n-#line 2438 \"parse.y\"\n+#line 2439 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 535:\n-#line 2440 \"parse.y\"\n+#line 2441 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 536:\n-#line 2442 \"parse.y\"\n+#line 2443 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 537:\n-#line 2444 \"parse.y\"\n+#line 2445 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 538:\n-#line 2446 \"parse.y\"\n+#line 2447 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 539:\n-#line 2448 \"parse.y\"\n+#line 2449 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  pedantic = yyvsp[-1].itype; ;\n     break;}\n case 540:\n-#line 2451 \"parse.y\"\n+#line 2452 \"parse.y\"\n {  \n \t\t  if (yyvsp[0].ttype)\n \t\t    yyval.ttype = finish_member_template_decl (yyvsp[0].ttype);\n@@ -6449,14 +6450,14 @@ case 540:\n \t\t;\n     break;}\n case 541:\n-#line 2461 \"parse.y\"\n+#line 2462 \"parse.y\"\n { \n \t\t  yyval.ttype = finish_member_class_template (yyvsp[-1].ftype.t); \n \t\t  finish_template_decl (yyvsp[-2].ttype);\n \t\t;\n     break;}\n case 542:\n-#line 2472 \"parse.y\"\n+#line 2473 \"parse.y\"\n {\n \t\t  /* Most of the productions for component_decl only\n \t\t     allow the creation of one new member, so we call\n@@ -6479,53 +6480,53 @@ case 542:\n \t\t;\n     break;}\n case 543:\n-#line 2493 \"parse.y\"\n+#line 2494 \"parse.y\"\n { \n \t\t  if (!yyvsp[0].itype)\n \t\t    grok_x_components (yyvsp[-1].ttype);\n \t\t  yyval.ttype = NULL_TREE; \n \t\t;\n     break;}\n case 544:\n-#line 2499 \"parse.y\"\n+#line 2500 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;\n     break;}\n case 545:\n-#line 2502 \"parse.y\"\n+#line 2503 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;\n     break;}\n case 546:\n-#line 2505 \"parse.y\"\n+#line 2506 \"parse.y\"\n { yyval.ttype = grokbitfield (NULL_TREE, NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 547:\n-#line 2507 \"parse.y\"\n+#line 2508 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 548:\n-#line 2518 \"parse.y\"\n+#line 2519 \"parse.y\"\n { tree specs, attrs;\n \t\t  split_specs_attrs (yyvsp[-4].ttype, &specs, &attrs);\n \t\t  yyval.ttype = grokfield (yyvsp[-3].ttype, specs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, attrs)); ;\n     break;}\n case 549:\n-#line 2523 \"parse.y\"\n+#line 2524 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;\n     break;}\n case 550:\n-#line 2526 \"parse.y\"\n+#line 2527 \"parse.y\"\n { yyval.ttype = do_class_using_decl (yyvsp[0].ttype); ;\n     break;}\n case 551:\n-#line 2532 \"parse.y\"\n+#line 2533 \"parse.y\"\n { yyval.itype = 0; ;\n     break;}\n case 552:\n-#line 2534 \"parse.y\"\n+#line 2535 \"parse.y\"\n { \n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n \t\t    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);\n@@ -6534,7 +6535,7 @@ case 552:\n \t\t;\n     break;}\n case 553:\n-#line 2541 \"parse.y\"\n+#line 2542 \"parse.y\"\n { \n \t\t  check_multiple_declarators ();\n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n@@ -6544,11 +6545,11 @@ case 553:\n \t\t;\n     break;}\n case 554:\n-#line 2552 \"parse.y\"\n+#line 2553 \"parse.y\"\n { yyval.itype = 0; ;\n     break;}\n case 555:\n-#line 2554 \"parse.y\"\n+#line 2555 \"parse.y\"\n { \n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n \t\t    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);\n@@ -6557,7 +6558,7 @@ case 555:\n \t\t;\n     break;}\n case 556:\n-#line 2561 \"parse.y\"\n+#line 2562 \"parse.y\"\n { \n \t\t  check_multiple_declarators ();\n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n@@ -6567,102 +6568,102 @@ case 556:\n \t\t;\n     break;}\n case 561:\n-#line 2582 \"parse.y\"\n+#line 2583 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 562:\n-#line 2588 \"parse.y\"\n+#line 2589 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 563:\n-#line 2597 \"parse.y\"\n+#line 2598 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 564:\n-#line 2603 \"parse.y\"\n+#line 2604 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 565:\n-#line 2609 \"parse.y\"\n+#line 2610 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 566:\n-#line 2615 \"parse.y\"\n+#line 2616 \"parse.y\"\n { split_specs_attrs (yyvsp[-3].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-3].ttype = current_declspecs;\n \t\t  yyval.ttype = grokbitfield (NULL_TREE, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 567:\n-#line 2624 \"parse.y\"\n+#line 2625 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 568:\n-#line 2627 \"parse.y\"\n+#line 2628 \"parse.y\"\n { yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 569:\n-#line 2633 \"parse.y\"\n+#line 2634 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 570:\n-#line 2636 \"parse.y\"\n+#line 2637 \"parse.y\"\n { yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 571:\n-#line 2639 \"parse.y\"\n+#line 2640 \"parse.y\"\n { yyval.ttype = grokbitfield (NULL_TREE, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 573:\n-#line 2650 \"parse.y\"\n+#line 2651 \"parse.y\"\n { TREE_CHAIN (yyvsp[0].ttype) = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 574:\n-#line 2655 \"parse.y\"\n+#line 2656 \"parse.y\"\n { yyval.ttype = build_enumerator (yyval.ttype, NULL_TREE, current_enum_type); ;\n     break;}\n case 575:\n-#line 2657 \"parse.y\"\n+#line 2658 \"parse.y\"\n { yyval.ttype = build_enumerator (yyval.ttype, yyvsp[0].ttype, current_enum_type); ;\n     break;}\n case 576:\n-#line 2663 \"parse.y\"\n+#line 2664 \"parse.y\"\n { yyval.ftype.t = build_decl_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 577:\n-#line 2666 \"parse.y\"\n+#line 2667 \"parse.y\"\n { yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 578:\n-#line 2673 \"parse.y\"\n+#line 2674 \"parse.y\"\n {\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids array dimensions with parenthesized type in new\");\n@@ -6672,71 +6673,71 @@ case 578:\n \t\t;\n     break;}\n case 579:\n-#line 2684 \"parse.y\"\n+#line 2685 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 580:\n-#line 2686 \"parse.y\"\n+#line 2687 \"parse.y\"\n { yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 581:\n-#line 2691 \"parse.y\"\n-{ yyval.ftype.t = IDENTIFIER_AS_LIST (yyvsp[0].ttype); \n+#line 2692 \"parse.y\"\n+{ yyval.ftype.t = build_decl_list (NULL_TREE, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 582:\n-#line 2694 \"parse.y\"\n+#line 2695 \"parse.y\"\n { yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ftype.t); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 583:\n-#line 2703 \"parse.y\"\n+#line 2704 \"parse.y\"\n { yyval.itype = suspend_momentary (); ;\n     break;}\n case 584:\n-#line 2708 \"parse.y\"\n+#line 2709 \"parse.y\"\n { resume_momentary ((int) yyvsp[-1].itype); yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 585:\n-#line 2714 \"parse.y\"\n+#line 2715 \"parse.y\"\n { resume_momentary ((int) yyvsp[-3].itype); yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 586:\n-#line 2716 \"parse.y\"\n+#line 2717 \"parse.y\"\n { resume_momentary ((int) yyvsp[-3].itype); yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 587:\n-#line 2718 \"parse.y\"\n+#line 2719 \"parse.y\"\n { resume_momentary ((int) yyvsp[-1].itype); yyval.ttype = empty_parms (); ;\n     break;}\n case 588:\n-#line 2720 \"parse.y\"\n+#line 2721 \"parse.y\"\n { resume_momentary ((int) yyvsp[-3].itype); yyval.ttype = NULL_TREE; ;\n     break;}\n case 589:\n-#line 2727 \"parse.y\"\n+#line 2728 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 590:\n-#line 2729 \"parse.y\"\n+#line 2730 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 591:\n-#line 2731 \"parse.y\"\n+#line 2732 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 592:\n-#line 2733 \"parse.y\"\n+#line 2734 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 593:\n-#line 2735 \"parse.y\"\n+#line 2736 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 595:\n-#line 2743 \"parse.y\"\n+#line 2744 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    {\n@@ -6755,7 +6756,7 @@ case 595:\n \t\t;\n     break;}\n case 596:\n-#line 2760 \"parse.y\"\n+#line 2761 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);\n@@ -6765,160 +6766,160 @@ case 596:\n \t\t;\n     break;}\n case 599:\n-#line 2773 \"parse.y\"\n+#line 2774 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 600:\n-#line 2778 \"parse.y\"\n+#line 2779 \"parse.y\"\n { yyval.ttype = get_type_decl (yyvsp[0].ttype); ;\n     break;}\n case 601:\n-#line 2783 \"parse.y\"\n+#line 2784 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 602:\n-#line 2785 \"parse.y\"\n+#line 2786 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 603:\n-#line 2787 \"parse.y\"\n+#line 2788 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;\n     break;}\n case 604:\n-#line 2789 \"parse.y\"\n+#line 2790 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 605:\n-#line 2791 \"parse.y\"\n+#line 2792 \"parse.y\"\n { push_nested_class (yyvsp[-1].ttype, 3);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype);\n \t\t  TREE_COMPLEXITY (yyval.ttype) = current_class_depth; ;\n     break;}\n case 608:\n-#line 2803 \"parse.y\"\n+#line 2804 \"parse.y\"\n {\n \t\t  /* Provide support for '(' attributes '*' declarator ')'\n \t\t     etc */\n \t\t  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);\n \t\t;\n     break;}\n case 609:\n-#line 2812 \"parse.y\"\n+#line 2813 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 610:\n-#line 2814 \"parse.y\"\n+#line 2815 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 611:\n-#line 2816 \"parse.y\"\n+#line 2817 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 612:\n-#line 2818 \"parse.y\"\n+#line 2819 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 613:\n-#line 2820 \"parse.y\"\n+#line 2821 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 615:\n-#line 2828 \"parse.y\"\n+#line 2829 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 616:\n-#line 2830 \"parse.y\"\n+#line 2831 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 617:\n-#line 2832 \"parse.y\"\n+#line 2833 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 618:\n-#line 2834 \"parse.y\"\n+#line 2835 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 619:\n-#line 2836 \"parse.y\"\n+#line 2837 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 621:\n-#line 2844 \"parse.y\"\n+#line 2845 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 622:\n-#line 2846 \"parse.y\"\n+#line 2847 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 623:\n-#line 2848 \"parse.y\"\n+#line 2849 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 624:\n-#line 2850 \"parse.y\"\n+#line 2851 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;\n     break;}\n case 625:\n-#line 2852 \"parse.y\"\n+#line 2853 \"parse.y\"\n { enter_scope_of (yyvsp[0].ttype); ;\n     break;}\n case 626:\n-#line 2854 \"parse.y\"\n+#line 2855 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  enter_scope_of (yyval.ttype);\n \t\t;\n     break;}\n case 627:\n-#line 2862 \"parse.y\"\n+#line 2863 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 628:\n-#line 2865 \"parse.y\"\n+#line 2866 \"parse.y\"\n { got_scope = NULL_TREE;\n  \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 629:\n-#line 2871 \"parse.y\"\n+#line 2872 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 630:\n-#line 2874 \"parse.y\"\n+#line 2875 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 632:\n-#line 2881 \"parse.y\"\n+#line 2882 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 633:\n-#line 2886 \"parse.y\"\n+#line 2887 \"parse.y\"\n { yyval.ttype = build_functional_cast (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;\n     break;}\n case 634:\n-#line 2888 \"parse.y\"\n+#line 2889 \"parse.y\"\n { yyval.ttype = reparse_decl_as_expr (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;\n     break;}\n case 635:\n-#line 2890 \"parse.y\"\n+#line 2891 \"parse.y\"\n { yyval.ttype = reparse_absdcl_as_expr (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 640:\n-#line 2901 \"parse.y\"\n+#line 2902 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 641:\n-#line 2903 \"parse.y\"\n+#line 2904 \"parse.y\"\n { got_scope = yyval.ttype = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 642:\n-#line 2910 \"parse.y\"\n+#line 2911 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)\n \t\t    {\n@@ -6934,31 +6935,31 @@ case 642:\n \t\t;\n     break;}\n case 643:\n-#line 2924 \"parse.y\"\n+#line 2925 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype = TREE_TYPE (yyval.ttype);\n \t\t;\n     break;}\n case 644:\n-#line 2930 \"parse.y\"\n+#line 2931 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype;\n \t\t;\n     break;}\n case 645:\n-#line 2936 \"parse.y\"\n+#line 2937 \"parse.y\"\n { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyvsp[-1].ttype)); ;\n     break;}\n case 647:\n-#line 2952 \"parse.y\"\n+#line 2953 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 648:\n-#line 2957 \"parse.y\"\n+#line 2958 \"parse.y\"\n {\n \t\t  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')\n \t\t    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype);\n@@ -6973,26 +6974,26 @@ case 648:\n \t\t;\n     break;}\n case 649:\n-#line 2970 \"parse.y\"\n+#line 2971 \"parse.y\"\n { yyval.ttype = TREE_TYPE (yyvsp[0].ttype); ;\n     break;}\n case 650:\n-#line 2972 \"parse.y\"\n+#line 2973 \"parse.y\"\n { yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 651:\n-#line 2974 \"parse.y\"\n+#line 2975 \"parse.y\"\n { yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 652:\n-#line 2979 \"parse.y\"\n+#line 2980 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    cp_error (\"`%T' is not a class or namespace\", yyvsp[0].ttype);\n \t\t;\n     break;}\n case 653:\n-#line 2984 \"parse.y\"\n+#line 2985 \"parse.y\"\n {\n \t\t  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')\n \t\t    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype);\n@@ -7007,15 +7008,15 @@ case 653:\n \t\t;\n     break;}\n case 654:\n-#line 2997 \"parse.y\"\n+#line 2998 \"parse.y\"\n { got_scope = yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 655:\n-#line 2999 \"parse.y\"\n+#line 3000 \"parse.y\"\n { got_scope = yyval.ttype = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 656:\n-#line 3004 \"parse.y\"\n+#line 3005 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)\n \t\t    yyvsp[-1].ttype = lastiddecl;\n@@ -7029,31 +7030,31 @@ case 656:\n \t\t;\n     break;}\n case 657:\n-#line 3016 \"parse.y\"\n+#line 3017 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype));\n \t\t;\n     break;}\n case 658:\n-#line 3022 \"parse.y\"\n+#line 3023 \"parse.y\"\n { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype)); ;\n     break;}\n case 661:\n-#line 3026 \"parse.y\"\n+#line 3027 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype;\n \t\t;\n     break;}\n case 662:\n-#line 3035 \"parse.y\"\n+#line 3036 \"parse.y\"\n { yyval.ttype = build_min_nt (TEMPLATE_ID_EXPR, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 663:\n-#line 3040 \"parse.y\"\n+#line 3041 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);\n@@ -7063,148 +7064,148 @@ case 663:\n \t\t;\n     break;}\n case 665:\n-#line 3049 \"parse.y\"\n+#line 3050 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 666:\n-#line 3054 \"parse.y\"\n+#line 3055 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 667:\n-#line 3056 \"parse.y\"\n+#line 3057 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; got_scope = NULL_TREE; ;\n     break;}\n case 668:\n-#line 3063 \"parse.y\"\n+#line 3064 \"parse.y\"\n { got_scope = void_type_node; ;\n     break;}\n case 669:\n-#line 3069 \"parse.y\"\n+#line 3070 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 670:\n-#line 3071 \"parse.y\"\n+#line 3072 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 671:\n-#line 3073 \"parse.y\"\n+#line 3074 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 672:\n-#line 3075 \"parse.y\"\n+#line 3076 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 673:\n-#line 3077 \"parse.y\"\n+#line 3078 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);\n \t\t;\n     break;}\n case 674:\n-#line 3081 \"parse.y\"\n+#line 3082 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 676:\n-#line 3090 \"parse.y\"\n+#line 3091 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 677:\n-#line 3092 \"parse.y\"\n+#line 3093 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 678:\n-#line 3098 \"parse.y\"\n+#line 3099 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 679:\n-#line 3100 \"parse.y\"\n+#line 3101 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 680:\n-#line 3102 \"parse.y\"\n+#line 3103 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ftype.t, NULL_TREE); ;\n     break;}\n case 681:\n-#line 3104 \"parse.y\"\n+#line 3105 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, NULL_TREE); ;\n     break;}\n case 682:\n-#line 3106 \"parse.y\"\n+#line 3107 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 683:\n-#line 3108 \"parse.y\"\n+#line 3109 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 684:\n-#line 3110 \"parse.y\"\n+#line 3111 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[0].ftype.t, NULL_TREE); ;\n     break;}\n case 685:\n-#line 3112 \"parse.y\"\n+#line 3113 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, NULL_TREE); ;\n     break;}\n case 686:\n-#line 3114 \"parse.y\"\n+#line 3115 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);\n \t\t;\n     break;}\n case 687:\n-#line 3118 \"parse.y\"\n+#line 3119 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 689:\n-#line 3127 \"parse.y\"\n+#line 3128 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 691:\n-#line 3131 \"parse.y\"\n+#line 3132 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 692:\n-#line 3133 \"parse.y\"\n+#line 3134 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 693:\n-#line 3135 \"parse.y\"\n+#line 3136 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 694:\n-#line 3137 \"parse.y\"\n+#line 3138 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;\n     break;}\n case 695:\n-#line 3139 \"parse.y\"\n+#line 3140 \"parse.y\"\n { yyval.ttype = make_call_declarator (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 696:\n-#line 3141 \"parse.y\"\n+#line 3142 \"parse.y\"\n { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 697:\n-#line 3143 \"parse.y\"\n+#line 3144 \"parse.y\"\n { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 698:\n-#line 3145 \"parse.y\"\n+#line 3146 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 699:\n-#line 3147 \"parse.y\"\n+#line 3148 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, NULL_TREE); ;\n     break;}\n case 706:\n-#line 3170 \"parse.y\"\n+#line 3171 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids label declarations\"); ;\n     break;}\n case 709:\n-#line 3181 \"parse.y\"\n+#line 3182 \"parse.y\"\n { tree link;\n \t\t  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))\n \t\t    {\n@@ -7215,266 +7216,266 @@ case 709:\n \t\t;\n     break;}\n case 710:\n-#line 3195 \"parse.y\"\n+#line 3196 \"parse.y\"\n {;\n     break;}\n case 712:\n-#line 3201 \"parse.y\"\n+#line 3202 \"parse.y\"\n { yyval.ttype = begin_compound_stmt (0); ;\n     break;}\n case 713:\n-#line 3203 \"parse.y\"\n+#line 3204 \"parse.y\"\n { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;\n     break;}\n case 714:\n-#line 3208 \"parse.y\"\n+#line 3209 \"parse.y\"\n {\n \t\t  yyval.ttype = begin_if_stmt ();\n \t\t  cond_stmt_keyword = \"if\";\n \t\t;\n     break;}\n case 715:\n-#line 3213 \"parse.y\"\n+#line 3214 \"parse.y\"\n { finish_if_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 716:\n-#line 3215 \"parse.y\"\n+#line 3216 \"parse.y\"\n { yyval.ttype = finish_then_clause (yyvsp[-3].ttype); ;\n     break;}\n case 718:\n-#line 3220 \"parse.y\"\n+#line 3221 \"parse.y\"\n { yyval.ttype = begin_compound_stmt (0); ;\n     break;}\n case 719:\n-#line 3222 \"parse.y\"\n+#line 3223 \"parse.y\"\n { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;\n     break;}\n case 720:\n-#line 3227 \"parse.y\"\n+#line 3228 \"parse.y\"\n {;\n     break;}\n case 722:\n-#line 3233 \"parse.y\"\n+#line 3234 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 723:\n-#line 3235 \"parse.y\"\n+#line 3236 \"parse.y\"\n { finish_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 724:\n-#line 3237 \"parse.y\"\n+#line 3238 \"parse.y\"\n { begin_else_clause (); ;\n     break;}\n case 725:\n-#line 3239 \"parse.y\"\n+#line 3240 \"parse.y\"\n { \n \t\t  finish_else_clause (yyvsp[-3].ttype); \n \t\t  finish_if_stmt ();\n \t\t;\n     break;}\n case 726:\n-#line 3244 \"parse.y\"\n+#line 3245 \"parse.y\"\n { finish_if_stmt (); ;\n     break;}\n case 727:\n-#line 3246 \"parse.y\"\n+#line 3247 \"parse.y\"\n {\n \t\t  yyval.ttype = begin_while_stmt ();\n \t\t  cond_stmt_keyword = \"while\";\n \t\t;\n     break;}\n case 728:\n-#line 3251 \"parse.y\"\n+#line 3252 \"parse.y\"\n { finish_while_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 729:\n-#line 3253 \"parse.y\"\n+#line 3254 \"parse.y\"\n { finish_while_stmt (yyvsp[-3].ttype); ;\n     break;}\n case 730:\n-#line 3255 \"parse.y\"\n+#line 3256 \"parse.y\"\n { yyval.ttype = begin_do_stmt (); ;\n     break;}\n case 731:\n-#line 3257 \"parse.y\"\n+#line 3258 \"parse.y\"\n {\n \t\t  finish_do_body (yyvsp[-2].ttype);\n \t\t  cond_stmt_keyword = \"do\";\n \t\t;\n     break;}\n case 732:\n-#line 3262 \"parse.y\"\n+#line 3263 \"parse.y\"\n { finish_do_stmt (yyvsp[-1].ttype, yyvsp[-5].ttype); ;\n     break;}\n case 733:\n-#line 3264 \"parse.y\"\n+#line 3265 \"parse.y\"\n { yyval.ttype = begin_for_stmt (); ;\n     break;}\n case 734:\n-#line 3266 \"parse.y\"\n+#line 3267 \"parse.y\"\n { finish_for_init_stmt (yyvsp[-2].ttype); ;\n     break;}\n case 735:\n-#line 3268 \"parse.y\"\n+#line 3269 \"parse.y\"\n { finish_for_cond (yyvsp[-1].ttype, yyvsp[-5].ttype); ;\n     break;}\n case 736:\n-#line 3270 \"parse.y\"\n+#line 3271 \"parse.y\"\n { finish_for_expr (yyvsp[-1].ttype, yyvsp[-8].ttype); ;\n     break;}\n case 737:\n-#line 3272 \"parse.y\"\n+#line 3273 \"parse.y\"\n { finish_for_stmt (yyvsp[-3].ttype, yyvsp[-10].ttype); ;\n     break;}\n case 738:\n-#line 3274 \"parse.y\"\n+#line 3275 \"parse.y\"\n { begin_switch_stmt (); ;\n     break;}\n case 739:\n-#line 3276 \"parse.y\"\n+#line 3277 \"parse.y\"\n { yyval.ttype = finish_switch_cond (yyvsp[-1].ttype); ;\n     break;}\n case 740:\n-#line 3278 \"parse.y\"\n+#line 3279 \"parse.y\"\n { finish_switch_stmt (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 741:\n-#line 3280 \"parse.y\"\n+#line 3281 \"parse.y\"\n { finish_case_label (yyvsp[-1].ttype, NULL_TREE); ;\n     break;}\n case 743:\n-#line 3283 \"parse.y\"\n+#line 3284 \"parse.y\"\n { finish_case_label (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 745:\n-#line 3286 \"parse.y\"\n+#line 3287 \"parse.y\"\n { finish_case_label (NULL_TREE, NULL_TREE); ;\n     break;}\n case 747:\n-#line 3289 \"parse.y\"\n+#line 3290 \"parse.y\"\n { finish_break_stmt (); ;\n     break;}\n case 748:\n-#line 3291 \"parse.y\"\n+#line 3292 \"parse.y\"\n { finish_continue_stmt (); ;\n     break;}\n case 749:\n-#line 3293 \"parse.y\"\n+#line 3294 \"parse.y\"\n { finish_return_stmt (NULL_TREE); ;\n     break;}\n case 750:\n-#line 3295 \"parse.y\"\n+#line 3296 \"parse.y\"\n { finish_return_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 751:\n-#line 3297 \"parse.y\"\n+#line 3298 \"parse.y\"\n { \n \t\t  finish_asm_stmt (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,\n \t\t\t\t   NULL_TREE); \n \t\t;\n     break;}\n case 752:\n-#line 3303 \"parse.y\"\n+#line 3304 \"parse.y\"\n { \n \t\t  finish_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,\n \t\t\t\t   NULL_TREE); \n \t\t;\n     break;}\n case 753:\n-#line 3309 \"parse.y\"\n+#line 3310 \"parse.y\"\n { finish_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 754:\n-#line 3313 \"parse.y\"\n+#line 3314 \"parse.y\"\n { finish_asm_stmt (yyvsp[-10].ttype, yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype); ;\n     break;}\n case 755:\n-#line 3315 \"parse.y\"\n+#line 3316 \"parse.y\"\n { \n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids computed gotos\");\n \t\t  finish_goto_stmt (yyvsp[-1].ttype);\n \t\t;\n     break;}\n case 756:\n-#line 3321 \"parse.y\"\n+#line 3322 \"parse.y\"\n { finish_goto_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 757:\n-#line 3323 \"parse.y\"\n+#line 3324 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 758:\n-#line 3325 \"parse.y\"\n+#line 3326 \"parse.y\"\n { error (\"label must be followed by statement\");\n \t\t  yyungetc ('}', 0);\n \t\t  finish_stmt (); ;\n     break;}\n case 759:\n-#line 3329 \"parse.y\"\n+#line 3330 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 762:\n-#line 3333 \"parse.y\"\n+#line 3334 \"parse.y\"\n { do_local_using_decl (yyvsp[0].ttype); ;\n     break;}\n case 764:\n-#line 3339 \"parse.y\"\n+#line 3340 \"parse.y\"\n {\n \t\t  if (! current_function_parms_stored)\n \t\t    store_parm_decls ();\n \t\t  expand_start_early_try_stmts ();\n \t\t;\n     break;}\n case 765:\n-#line 3345 \"parse.y\"\n+#line 3346 \"parse.y\"\n { \n                   expand_start_all_catch (); \n                 ;\n     break;}\n case 766:\n-#line 3349 \"parse.y\"\n+#line 3350 \"parse.y\"\n {\n \t\t  expand_end_all_catch ();\n \t\t  yyval.itype = yyvsp[-3].itype;\n \t\t;\n     break;}\n case 767:\n-#line 3357 \"parse.y\"\n+#line 3358 \"parse.y\"\n { yyval.ttype = begin_try_block (); ;\n     break;}\n case 768:\n-#line 3359 \"parse.y\"\n+#line 3360 \"parse.y\"\n { finish_try_block (yyvsp[-1].ttype); ;\n     break;}\n case 769:\n-#line 3361 \"parse.y\"\n+#line 3362 \"parse.y\"\n { finish_handler_sequence (yyvsp[-3].ttype); ;\n     break;}\n case 772:\n-#line 3371 \"parse.y\"\n+#line 3372 \"parse.y\"\n { yyval.ttype = begin_handler(); ;\n     break;}\n case 773:\n-#line 3373 \"parse.y\"\n+#line 3374 \"parse.y\"\n { finish_handler_parms (yyvsp[-1].ttype); ;\n     break;}\n case 774:\n-#line 3375 \"parse.y\"\n+#line 3376 \"parse.y\"\n { finish_handler (yyvsp[-3].ttype); ;\n     break;}\n case 777:\n-#line 3385 \"parse.y\"\n+#line 3386 \"parse.y\"\n { expand_start_catch_block (NULL_TREE, NULL_TREE); ;\n     break;}\n case 778:\n-#line 3401 \"parse.y\"\n+#line 3402 \"parse.y\"\n { check_for_new_type (\"inside exception declarations\", yyvsp[-1].ftype);\n \t\t  expand_start_catch_block (TREE_PURPOSE (yyvsp[-1].ftype.t),\n \t\t\t\t\t    TREE_VALUE (yyvsp[-1].ftype.t)); ;\n     break;}\n case 779:\n-#line 3408 \"parse.y\"\n+#line 3409 \"parse.y\"\n { tree label;\n \t\tdo_label:\n \t\t  label = define_label (input_filename, lineno, yyvsp[-1].ttype);\n@@ -7483,98 +7484,98 @@ case 779:\n \t\t;\n     break;}\n case 780:\n-#line 3415 \"parse.y\"\n+#line 3416 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 781:\n-#line 3417 \"parse.y\"\n+#line 3418 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 782:\n-#line 3419 \"parse.y\"\n+#line 3420 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 783:\n-#line 3424 \"parse.y\"\n+#line 3425 \"parse.y\"\n { if (yyvsp[-1].ttype) cplus_expand_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 785:\n-#line 3427 \"parse.y\"\n+#line 3428 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids compound statements inside for initializations\");\n \t\t;\n     break;}\n case 786:\n-#line 3436 \"parse.y\"\n+#line 3437 \"parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 787:\n-#line 3439 \"parse.y\"\n+#line 3440 \"parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 788:\n-#line 3444 \"parse.y\"\n+#line 3445 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 790:\n-#line 3447 \"parse.y\"\n+#line 3448 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 791:\n-#line 3454 \"parse.y\"\n+#line 3455 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 794:\n-#line 3461 \"parse.y\"\n+#line 3462 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 795:\n-#line 3466 \"parse.y\"\n+#line 3467 \"parse.y\"\n { yyval.ttype = build_tree_list (yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 796:\n-#line 3471 \"parse.y\"\n+#line 3472 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyval.ttype, NULL_TREE); ;\n     break;}\n case 797:\n-#line 3473 \"parse.y\"\n+#line 3474 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 798:\n-#line 3484 \"parse.y\"\n+#line 3485 \"parse.y\"\n {\n \t\t  yyval.ttype = empty_parms();\n \t\t;\n     break;}\n case 800:\n-#line 3489 \"parse.y\"\n+#line 3490 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[0].ftype.t), 0);\n \t\t  check_for_new_type (\"inside parameter list\", yyvsp[0].ftype); ;\n     break;}\n case 801:\n-#line 3497 \"parse.y\"\n+#line 3498 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyval.ttype, 0); ;\n     break;}\n case 802:\n-#line 3499 \"parse.y\"\n+#line 3500 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 803:\n-#line 3502 \"parse.y\"\n+#line 3503 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 804:\n-#line 3504 \"parse.y\"\n+#line 3505 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,\n \t\t\t\t\t\t\t yyvsp[-1].ftype.t), 1); ;\n     break;}\n case 805:\n-#line 3507 \"parse.y\"\n+#line 3508 \"parse.y\"\n { yyval.ttype = finish_parmlist (NULL_TREE, 1); ;\n     break;}\n case 806:\n-#line 3509 \"parse.y\"\n+#line 3510 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7586,7 +7587,7 @@ case 806:\n \t\t;\n     break;}\n case 807:\n-#line 3519 \"parse.y\"\n+#line 3520 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7599,98 +7600,99 @@ case 807:\n \t\t;\n     break;}\n case 808:\n-#line 3534 \"parse.y\"\n+#line 3535 \"parse.y\"\n { maybe_snarf_defarg (); ;\n     break;}\n case 809:\n-#line 3536 \"parse.y\"\n+#line 3537 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 812:\n-#line 3547 \"parse.y\"\n+#line 3548 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;\n     break;}\n case 813:\n-#line 3550 \"parse.y\"\n+#line 3551 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t); ;\n     break;}\n case 814:\n-#line 3553 \"parse.y\"\n+#line 3554 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = chainon (yyval.ttype, yyvsp[0].ftype.t); ;\n     break;}\n case 815:\n-#line 3556 \"parse.y\"\n+#line 3557 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 816:\n-#line 3558 \"parse.y\"\n+#line 3559 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 818:\n-#line 3564 \"parse.y\"\n+#line 3565 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[-1].ftype.t); ;\n     break;}\n case 819:\n-#line 3574 \"parse.y\"\n+#line 3575 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); ;\n     break;}\n case 820:\n-#line 3578 \"parse.y\"\n+#line 3579 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 821:\n-#line 3581 \"parse.y\"\n-{ yyval.ftype.t = build_tree_list (get_decl_list (yyvsp[-1].ftype.t), yyvsp[0].ttype); \n+#line 3582 \"parse.y\"\n+{ yyval.ftype.t = build_tree_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),\n+\t\t\t\t\t  yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 822:\n-#line 3584 \"parse.y\"\n+#line 3586 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 823:\n-#line 3588 \"parse.y\"\n+#line 3590 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[0].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 824:\n-#line 3592 \"parse.y\"\n+#line 3594 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ttype);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 825:\n-#line 3599 \"parse.y\"\n+#line 3601 \"parse.y\"\n { yyval.ftype.t = build_tree_list (NULL_TREE, yyvsp[0].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;\n     break;}\n case 826:\n-#line 3602 \"parse.y\"\n+#line 3604 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;  ;\n     break;}\n case 829:\n-#line 3613 \"parse.y\"\n+#line 3615 \"parse.y\"\n { see_typename (); ;\n     break;}\n case 830:\n-#line 3618 \"parse.y\"\n+#line 3620 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  yyval.ttype = build_tree_list (integer_type_node, NULL_TREE);\n \t\t;\n     break;}\n case 831:\n-#line 3623 \"parse.y\"\n+#line 3625 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  if (TREE_CODE (yyval.ttype) == SCOPE_REF\n@@ -7701,188 +7703,188 @@ case 831:\n \t\t;\n     break;}\n case 832:\n-#line 3635 \"parse.y\"\n+#line 3637 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 833:\n-#line 3637 \"parse.y\"\n+#line 3639 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 834:\n-#line 3639 \"parse.y\"\n+#line 3641 \"parse.y\"\n { yyval.ttype = build_decl_list (NULL_TREE, NULL_TREE); ;\n     break;}\n case 835:\n-#line 3644 \"parse.y\"\n+#line 3646 \"parse.y\"\n { yyval.ttype = build_decl_list (NULL_TREE, groktypename(yyvsp[0].ftype.t)); ;\n     break;}\n case 837:\n-#line 3650 \"parse.y\"\n+#line 3652 \"parse.y\"\n {\n \t\t  TREE_CHAIN (yyvsp[0].ttype) = yyval.ttype;\n \t\t  yyval.ttype = yyvsp[0].ttype;\n \t\t;\n     break;}\n case 838:\n-#line 3658 \"parse.y\"\n+#line 3660 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 839:\n-#line 3660 \"parse.y\"\n+#line 3662 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 840:\n-#line 3662 \"parse.y\"\n+#line 3664 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 841:\n-#line 3664 \"parse.y\"\n+#line 3666 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 842:\n-#line 3671 \"parse.y\"\n+#line 3673 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 843:\n-#line 3676 \"parse.y\"\n+#line 3678 \"parse.y\"\n { yyval.ttype = ansi_opname[MULT_EXPR]; ;\n     break;}\n case 844:\n-#line 3678 \"parse.y\"\n+#line 3680 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_DIV_EXPR]; ;\n     break;}\n case 845:\n-#line 3680 \"parse.y\"\n+#line 3682 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_MOD_EXPR]; ;\n     break;}\n case 846:\n-#line 3682 \"parse.y\"\n+#line 3684 \"parse.y\"\n { yyval.ttype = ansi_opname[PLUS_EXPR]; ;\n     break;}\n case 847:\n-#line 3684 \"parse.y\"\n+#line 3686 \"parse.y\"\n { yyval.ttype = ansi_opname[MINUS_EXPR]; ;\n     break;}\n case 848:\n-#line 3686 \"parse.y\"\n+#line 3688 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_AND_EXPR]; ;\n     break;}\n case 849:\n-#line 3688 \"parse.y\"\n+#line 3690 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_IOR_EXPR]; ;\n     break;}\n case 850:\n-#line 3690 \"parse.y\"\n+#line 3692 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_XOR_EXPR]; ;\n     break;}\n case 851:\n-#line 3692 \"parse.y\"\n+#line 3694 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_NOT_EXPR]; ;\n     break;}\n case 852:\n-#line 3694 \"parse.y\"\n+#line 3696 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPOUND_EXPR]; ;\n     break;}\n case 853:\n-#line 3696 \"parse.y\"\n+#line 3698 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 854:\n-#line 3698 \"parse.y\"\n+#line 3700 \"parse.y\"\n { yyval.ttype = ansi_opname[LT_EXPR]; ;\n     break;}\n case 855:\n-#line 3700 \"parse.y\"\n+#line 3702 \"parse.y\"\n { yyval.ttype = ansi_opname[GT_EXPR]; ;\n     break;}\n case 856:\n-#line 3702 \"parse.y\"\n+#line 3704 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 857:\n-#line 3704 \"parse.y\"\n+#line 3706 \"parse.y\"\n { yyval.ttype = ansi_assopname[yyvsp[0].code]; ;\n     break;}\n case 858:\n-#line 3706 \"parse.y\"\n+#line 3708 \"parse.y\"\n { yyval.ttype = ansi_opname [MODIFY_EXPR]; ;\n     break;}\n case 859:\n-#line 3708 \"parse.y\"\n+#line 3710 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 860:\n-#line 3710 \"parse.y\"\n+#line 3712 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 861:\n-#line 3712 \"parse.y\"\n+#line 3714 \"parse.y\"\n { yyval.ttype = ansi_opname[POSTINCREMENT_EXPR]; ;\n     break;}\n case 862:\n-#line 3714 \"parse.y\"\n+#line 3716 \"parse.y\"\n { yyval.ttype = ansi_opname[PREDECREMENT_EXPR]; ;\n     break;}\n case 863:\n-#line 3716 \"parse.y\"\n+#line 3718 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ANDIF_EXPR]; ;\n     break;}\n case 864:\n-#line 3718 \"parse.y\"\n+#line 3720 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ORIF_EXPR]; ;\n     break;}\n case 865:\n-#line 3720 \"parse.y\"\n+#line 3722 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_NOT_EXPR]; ;\n     break;}\n case 866:\n-#line 3722 \"parse.y\"\n+#line 3724 \"parse.y\"\n { yyval.ttype = ansi_opname[COND_EXPR]; ;\n     break;}\n case 867:\n-#line 3724 \"parse.y\"\n+#line 3726 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 868:\n-#line 3726 \"parse.y\"\n+#line 3728 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPONENT_REF]; ;\n     break;}\n case 869:\n-#line 3728 \"parse.y\"\n+#line 3730 \"parse.y\"\n { yyval.ttype = ansi_opname[MEMBER_REF]; ;\n     break;}\n case 870:\n-#line 3730 \"parse.y\"\n+#line 3732 \"parse.y\"\n { yyval.ttype = ansi_opname[CALL_EXPR]; ;\n     break;}\n case 871:\n-#line 3732 \"parse.y\"\n+#line 3734 \"parse.y\"\n { yyval.ttype = ansi_opname[ARRAY_REF]; ;\n     break;}\n case 872:\n-#line 3734 \"parse.y\"\n+#line 3736 \"parse.y\"\n { yyval.ttype = ansi_opname[NEW_EXPR]; ;\n     break;}\n case 873:\n-#line 3736 \"parse.y\"\n+#line 3738 \"parse.y\"\n { yyval.ttype = ansi_opname[DELETE_EXPR]; ;\n     break;}\n case 874:\n-#line 3738 \"parse.y\"\n+#line 3740 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_NEW_EXPR]; ;\n     break;}\n case 875:\n-#line 3740 \"parse.y\"\n+#line 3742 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_DELETE_EXPR]; ;\n     break;}\n case 876:\n-#line 3743 \"parse.y\"\n+#line 3745 \"parse.y\"\n { yyval.ttype = grokoptypename (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 877:\n-#line 3745 \"parse.y\"\n+#line 3747 \"parse.y\"\n { yyval.ttype = ansi_opname[ERROR_MARK]; ;\n     break;}\n }\n@@ -8083,7 +8085,7 @@ case 877:\n   yystate = yyn;\n   goto yynewstate;\n }\n-#line 3748 \"parse.y\"\n+#line 3750 \"parse.y\"\n \n \n #ifdef SPEW_DEBUG"}, {"sha": "4b263aa19ef6f6fa6efd14364c3d03f052709a39", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -319,7 +319,7 @@ parse_decl(declarator, specs_attrs, attributes, initialized, decl)\n   split_specs_attrs (specs_attrs, &current_declspecs, &prefix_attributes);\n   if (current_declspecs\n       && TREE_CODE (current_declspecs) != TREE_LIST)\n-    current_declspecs = get_decl_list (current_declspecs);\n+    current_declspecs = build_decl_list (NULL_TREE, current_declspecs);\n   if (have_extern_spec && !used_extern_spec)\n     {\n       current_declspecs = decl_tree_cons (NULL_TREE, \n@@ -1686,7 +1686,8 @@ type_id:\n \t\t{ $$.t = build_decl_list ($1.t, $2); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| typespec absdcl\n-\t\t{ $$.t = build_decl_list (get_decl_list ($1.t), $2); \n+\t\t{ $$.t = build_decl_list (build_decl_list (NULL_TREE, $1.t),\n+\t\t\t\t\t  $2); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| typed_typespecs  %prec EMPTY\n \t\t{ $$.t = build_decl_list ($1.t, NULL_TREE);\n@@ -1756,7 +1757,7 @@ declmods:\n \t  nonempty_cv_qualifiers  %prec EMPTY\n \t\t{ $$ = $1.t; TREE_STATIC ($$) = 1; }\n \t| SCSPEC\n-\t\t{ $$ = IDENTIFIER_AS_LIST ($$); }\n+\t\t{ $$ = build_decl_list (NULL_TREE, $$); }\n \t| declmods CV_QUALIFIER\n \t\t{ $$ = decl_tree_cons (NULL_TREE, $2, $$);\n \t\t  TREE_STATIC ($$) = 1; }\n@@ -1780,7 +1781,7 @@ declmods:\n \n typed_typespecs:\n \t  typespec  %prec EMPTY\n-\t\t{ $$.t = get_decl_list ($1.t); \n+\t\t{ $$.t = build_decl_list (NULL_TREE, $1.t); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| nonempty_cv_qualifiers typespec\n \t\t{ $$.t = decl_tree_cons (NULL_TREE, $2.t, $1.t); \n@@ -2688,7 +2689,7 @@ cv_qualifiers:\n \n nonempty_cv_qualifiers:\n \t  CV_QUALIFIER\n-\t\t{ $$.t = IDENTIFIER_AS_LIST ($1); \n+\t\t{ $$.t = build_decl_list (NULL_TREE, $1); \n \t\t  $$.new_type_flag = 0; }\n \t| nonempty_cv_qualifiers CV_QUALIFIER\n \t\t{ $$.t = decl_tree_cons (NULL_TREE, $2, $1.t); \n@@ -3578,7 +3579,8 @@ named_parm:\n \t\t{ $$.t = build_tree_list ($1.t, $2); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| typespec declarator\n-\t\t{ $$.t = build_tree_list (get_decl_list ($1.t), $2); \n+\t\t{ $$.t = build_tree_list (build_decl_list (NULL_TREE, $1.t),\n+\t\t\t\t\t  $2); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| typed_declspecs1 absdcl\n \t\t{ tree specs = strip_attrs ($1.t);"}, {"sha": "1f17aec09c622acd5a1be180e1c28cd32b561129", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -1,5 +1,5 @@\n /* Prints out trees in human readable form.\n-   Copyright (C) 1992, 93-96, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-96, 1998, 1999 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -126,19 +126,14 @@ print_lang_type (file, node, indent)\n \n   if (TREE_CODE (node) == RECORD_TYPE)\n     {\n-      fprintf (file, \" n_parents %d n_ancestors %d\",\n-\t       CLASSTYPE_N_BASECLASSES (node),\n-\t       CLASSTYPE_N_SUPERCLASSES (node));\n+      fprintf (file, \" n_parents %d\", CLASSTYPE_N_BASECLASSES (node));\n       fprintf (file, \" use_template=%d\", CLASSTYPE_USE_TEMPLATE (node));\n       if (CLASSTYPE_INTERFACE_ONLY (node))\n \tfprintf (file, \" interface-only\");\n       if (CLASSTYPE_INTERFACE_UNKNOWN (node))\n \tfprintf (file, \" interface-unknown\");\n       print_node (file, \"member-functions\", CLASSTYPE_METHOD_VEC (node),\n \t\t  indent + 4);\n-      print_node (file, \"baselinks\",\n-\t\t  TYPE_BINFO_BASETYPES (node) ? CLASSTYPE_BASELINK_VEC (node) : NULL_TREE,\n-\t\t  indent + 4);\n     }\n }\n "}, {"sha": "c4c365b147c8d373c85a22c5b3dd0a6d4955d2ff", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 71, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -78,6 +78,7 @@ pop_stack_level (stack)\n static struct search_level *search_stack;\n \n static tree get_abstract_virtuals_1 PROTO((tree, int, tree));\n+static tree next_baselink PROTO((tree));\n static tree get_vbase_1 PROTO((tree, tree, unsigned int *));\n static tree convert_pointer_to_vbase PROTO((tree, tree));\n static tree lookup_field_1 PROTO((tree, tree));\n@@ -2041,77 +2042,7 @@ get_abstract_virtuals (type)\n   return nreverse (abstract_virtuals);\n }\n \n-/* For the type TYPE, return a list of member functions available from\n-   base classes with name NAME.  The TREE_VALUE of the list is a chain of\n-   member functions with name NAME.  The TREE_PURPOSE of the list is a\n-   basetype, or a list of base types (in reverse order) which were\n-   traversed to reach the chain of member functions.  If we reach a base\n-   type which provides a member function of name NAME, and which has at\n-   most one base type itself, then we can terminate the search.  */\n-\n-tree\n-get_baselinks (type_as_binfo_list, type, name)\n-     tree type_as_binfo_list;\n-     tree type, name;\n-{\n-  int head = 0, tail = 0, idx;\n-  tree rval = 0, nval = 0;\n-  tree basetypes = type_as_binfo_list;\n-  tree binfo = TYPE_BINFO (type);\n-\n-  search_stack = push_search_level (search_stack, &search_obstack);\n-\n-  while (1)\n-    {\n-      tree binfos = BINFO_BASETYPES (binfo);\n-      int i, n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n-\n-      /* Process and/or queue base types.  */\n-      for (i = 0; i < n_baselinks; i++)\n-\t{\n-\t  tree base_binfo = TREE_VEC_ELT (binfos, i);\n-\t  tree btypes;\n-\n-\t  btypes = hash_tree_cons (TREE_VIA_PUBLIC (base_binfo),\n-\t\t\t\t   TREE_VIA_VIRTUAL (base_binfo),\n-\t\t\t\t   TREE_VIA_PROTECTED (base_binfo),\n-\t\t\t\t   NULL_TREE, base_binfo,\n-\t\t\t\t   basetypes);\n-\t  obstack_ptr_grow (&search_obstack, btypes);\n-\t  search_stack->first = (tree *)obstack_base (&search_obstack);\n-\t  tail += 1;\n-\t}\n-\n-    dont_queue:\n-      /* Process head of queue, if one exists.  */\n-      if (head >= tail)\n-\tbreak;\n-\n-      basetypes = search_stack->first[head++];\n-      binfo = TREE_VALUE (basetypes);\n-      type = BINFO_TYPE (binfo);\n-      idx = lookup_fnfields_1 (type, name);\n-      if (idx >= 0)\n-\t{\n-\t  nval = TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (type), idx);\n-\t  rval = hash_tree_cons (0, 0, 0, basetypes, nval, rval);\n-\t  if (TYPE_BINFO_BASETYPES (type) == 0)\n-\t    goto dont_queue;\n-\t  else if (TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES (type)) == 1)\n-\t    {\n-\t      if (CLASSTYPE_BASELINK_VEC (type))\n-\t\tTREE_TYPE (rval) = TREE_VEC_ELT (CLASSTYPE_BASELINK_VEC (type), idx);\n-\t      goto dont_queue;\n-\t    }\n-\t}\n-      nval = NULL_TREE;\n-    }\n-\n-  search_stack = pop_search_level (search_stack);\n-  return rval;\n-}\n-\n-tree\n+static tree\n next_baselink (baselink)\n      tree baselink;\n {"}, {"sha": "af66e4ed0c82de8f405c2dcee17e0e5c4e0cb8c0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -1432,12 +1432,6 @@ finish_class_definition (t, attributes, semi)\n      tree attributes;\n      int semi;\n {\n-#if 0\n-  /* Need to rework class nesting in the presence of nested classes,\n-     etc.  */\n-  shadow_tag (CLASSTYPE_AS_LIST (t)); */\n-#endif\n-\n   /* finish_struct nukes this anyway; if finish_exception does too,\n      then it can go.  */\n   if (semi)"}, {"sha": "1f8f72c1b431f3a0e62d579c5ec0172194a53527", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0781b58145d9e44fce03012fcc9a1f31ca35b1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9e0781b58145d9e44fce03012fcc9a1f31ca35b1", "patch": "@@ -28,7 +28,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"toplev.h\"\n \n-static tree get_identifier_list PROTO((tree));\n static tree bot_manip PROTO((tree));\n static tree perm_manip PROTO((tree));\n static tree build_cplus_array_type_1 PROTO((tree, tree));\n@@ -1087,60 +1086,6 @@ hash_chainon (list1, list2)\n   return hash_tree_chain (TREE_VALUE (list1),\n \t\t\t  hash_chainon (TREE_CHAIN (list1), list2));\n }\n-\n-static tree\n-get_identifier_list (value)\n-     tree value;\n-{\n-  tree list = IDENTIFIER_AS_LIST (value);\n-  if (list != NULL_TREE\n-      && (TREE_CODE (list) != TREE_LIST\n-\t  || TREE_VALUE (list) != value))\n-    list = NULL_TREE;\n-  else if (IDENTIFIER_HAS_TYPE_VALUE (value)\n-\t   && TREE_CODE (IDENTIFIER_TYPE_VALUE (value)) == RECORD_TYPE\n-\t   && IDENTIFIER_TYPE_VALUE (value)\n-\t      == TYPE_MAIN_VARIANT (IDENTIFIER_TYPE_VALUE (value)))\n-    {\n-      tree type = IDENTIFIER_TYPE_VALUE (value);\n-\n-      if (TYPE_PTRMEMFUNC_P (type))\n-\tlist = NULL_TREE;\n-      else if (type == current_class_type)\n-\t/* Don't mess up the constructor name.  */\n-\tlist = tree_cons (NULL_TREE, value, NULL_TREE);\n-      else\n-\t{\n-\t  if (! CLASSTYPE_ID_AS_LIST (type))\n-\t    CLASSTYPE_ID_AS_LIST (type)\n-\t      = perm_tree_cons (NULL_TREE, TYPE_IDENTIFIER (type), NULL_TREE);\n-\t  list = CLASSTYPE_ID_AS_LIST (type);\n-\t}\n-    }\n-  return list;\n-}\n-\n-tree\n-get_decl_list (value)\n-     tree value;\n-{\n-  tree list = NULL_TREE;\n-\n-  if (TREE_CODE (value) == IDENTIFIER_NODE)\n-    list = get_identifier_list (value);\n-  else if (TREE_CODE (value) == RECORD_TYPE\n-\t   && TYPE_LANG_SPECIFIC (value)\n-\t   && value == TYPE_MAIN_VARIANT (value))\n-    list = CLASSTYPE_AS_LIST (value);\n-\n-  if (list != NULL_TREE)\n-    {\n-      my_friendly_assert (TREE_CHAIN (list) == NULL_TREE, 301);\n-      return list;\n-    }\n-\n-  return build_decl_list (NULL_TREE, value);\n-}\n \f\n /* Build an association between TYPE and some parameters:\n "}]}