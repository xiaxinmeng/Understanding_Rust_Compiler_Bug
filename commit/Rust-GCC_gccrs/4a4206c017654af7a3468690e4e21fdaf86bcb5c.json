{"sha": "4a4206c017654af7a3468690e4e21fdaf86bcb5c", "node_id": "C_kwDOANBUbNoAKDRhNDIwNmMwMTc2NTRhZjdhMzQ2ODY5MGU0ZTIxZmRhZjg2YmNiNWM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-16T16:09:45Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-17T10:18:31Z"}, "message": "Support extern-blocks defined within blocks\n\nThis adds support for declaring extern blocks within blocks. So this adds\nthe missing name resolution visitor for the statement context. Then we\nextract out a common extern block hir lowering function for both contexts.\n\nThe type resolution step needs to be updated to be like the code-generation\nstep so that we can solve these paths in a query rather than a top down\napproach but this is a known issue.\n\nThe final step was to support query based compilation to extern functions.\n\nFixes #976", "tree": {"sha": "4ddbcbcb3a61bc12b5025c9bf1ea8316cdb5b083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ddbcbcb3a61bc12b5025c9bf1ea8316cdb5b083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a4206c017654af7a3468690e4e21fdaf86bcb5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4206c017654af7a3468690e4e21fdaf86bcb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4206c017654af7a3468690e4e21fdaf86bcb5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4206c017654af7a3468690e4e21fdaf86bcb5c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc"}], "stats": {"total": 238, "additions": 172, "deletions": 66}, "files": [{"sha": "2d701ea25ee6e27ee6298f4b7daa2796dfadb1c7", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -94,6 +94,7 @@ GRS_OBJS = \\\n     rust/rust-ast-resolve-expr.o \\\n     rust/rust-ast-resolve-type.o \\\n     rust/rust-ast-resolve-path.o \\\n+    rust/rust-ast-resolve-stmt.o \\\n     rust/rust-hir-type-check.o \\\n     rust/rust-privacy-check.o \\\n     rust/rust-privacy-ctx.o \\"}, {"sha": "7b0a375439cb5a3e59e719c7e639c20c135926ae", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -343,8 +343,12 @@ HIRCompileBase::compile_locals_for_block (Context *ctx, Resolver::Rib &rib,\n       rust_assert (ok);\n \n       HIR::Stmt *decl = nullptr;\n-      ok = ctx->get_mappings ()->resolve_nodeid_to_stmt (d.parent, &decl);\n-      rust_assert (ok);\n+      if (!ctx->get_mappings ()->resolve_nodeid_to_stmt (d.parent, &decl))\n+\t{\n+\t  // might be an extern block see fix for\n+\t  // https://github.com/Rust-GCC/gccrs/issues/976\n+\t  continue;\n+\t}\n \n       // if its a function we extract this out side of this fn context\n       // and it is not a local to this function"}, {"sha": "c24437deb2f814ab271dfe44c3f48a5d764aa8bb", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -29,11 +29,19 @@ class CompileExternItem : public HIRCompileBase,\n \t\t\t  public HIR::HIRExternalItemVisitor\n {\n public:\n-  static void compile (HIR::ExternalItem *item, Context *ctx,\n-\t\t       TyTy::BaseType *concrete = nullptr)\n+  static tree compile (HIR::ExternalItem *item, Context *ctx,\n+\t\t       TyTy::BaseType *concrete = nullptr,\n+\t\t       bool is_query_mode = false,\n+\t\t       Location ref_locus = Location ())\n   {\n-    CompileExternItem compiler (ctx, concrete);\n+    CompileExternItem compiler (ctx, concrete, ref_locus);\n     item->accept_vis (compiler);\n+\n+    if (is_query_mode && compiler.reference == error_mark_node)\n+      rust_internal_error_at (ref_locus, \"failed to compile extern item: %s\",\n+\t\t\t      item->as_string ().c_str ());\n+\n+    return compiler.reference;\n   }\n \n   void visit (HIR::ExternalStaticItem &item) override\n@@ -58,6 +66,8 @@ class CompileExternItem : public HIRCompileBase,\n \t\t\t\t\t      item.get_locus ());\n     ctx->insert_var_decl (item.get_mappings ().get_hirid (), static_global);\n     ctx->push_var (static_global);\n+\n+    reference = ctx->get_backend ()->var_expression (static_global, ref_locus);\n   }\n \n   void visit (HIR::ExternalFunctionItem &function) override\n@@ -129,14 +139,21 @@ class CompileExternItem : public HIRCompileBase,\n     setup_abi_options (fndecl, fntype->get_abi ());\n \n     ctx->insert_function_decl (fntype, fndecl);\n+\n+    reference\n+      = address_expression (fndecl, build_pointer_type (TREE_TYPE (fndecl)),\n+\t\t\t    ref_locus);\n   }\n \n private:\n-  CompileExternItem (Context *ctx, TyTy::BaseType *concrete)\n-    : HIRCompileBase (ctx), concrete (concrete)\n+  CompileExternItem (Context *ctx, TyTy::BaseType *concrete, Location ref_locus)\n+    : HIRCompileBase (ctx), concrete (concrete), reference (error_mark_node),\n+      ref_locus (ref_locus)\n   {}\n \n   TyTy::BaseType *concrete;\n+  tree reference;\n+  Location ref_locus;\n };\n \n } // namespace Compile"}, {"sha": "ca96a277ea88f6f78b4f19eff5d47bdfd4a392d6", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -23,8 +23,7 @@\n #include \"rust-compile-expr.h\"\n #include \"rust-hir-trait-resolve.h\"\n #include \"rust-hir-path-probe.h\"\n-\n-#include \"print-tree.h\"\n+#include \"rust-compile-extern.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -172,7 +171,11 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n {\n   HIR::Item *resolved_item\n     = ctx->get_mappings ()->lookup_hir_item (mappings.get_crate_num (), ref);\n+  HIR::ExternalItem *resolved_extern_item\n+    = ctx->get_mappings ()->lookup_hir_extern_item (mappings.get_crate_num (),\n+\t\t\t\t\t\t    ref);\n   bool is_hir_item = resolved_item != nullptr;\n+  bool is_hir_extern_item = resolved_extern_item != nullptr;\n   if (is_hir_item)\n     {\n       if (!lookup->has_subsititions_defined ())\n@@ -182,6 +185,15 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \treturn CompileItem::compile (resolved_item, ctx, lookup, true,\n \t\t\t\t     expr_locus);\n     }\n+  else if (is_hir_extern_item)\n+    {\n+      if (!lookup->has_subsititions_defined ())\n+\treturn CompileExternItem::compile (resolved_extern_item, ctx, nullptr,\n+\t\t\t\t\t   true, expr_locus);\n+      else\n+\treturn CompileExternItem::compile (resolved_extern_item, ctx, lookup,\n+\t\t\t\t\t   true, expr_locus);\n+    }\n   else\n     {\n       HirId parent_impl_id = UNKNOWN_HIRID;"}, {"sha": "a482132914839364a77abaaa9d7ae1b5e0048ddd", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -19,6 +19,7 @@\n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-type.h\"\n #include \"rust-ast-lower-pattern.h\"\n+#include \"rust-ast-lower-extern.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -545,11 +546,11 @@ ASTLoweringBase::lower_loop_label (AST::LoopLabel &loop_label)\n   return HIR::LoopLabel (mapping, std::move (life), loop_label.get_locus ());\n }\n \n-std::vector<std::unique_ptr<HIR::GenericParam> >\n+std::vector<std::unique_ptr<HIR::GenericParam>>\n ASTLoweringBase::lower_generic_params (\n-  std::vector<std::unique_ptr<AST::GenericParam> > &params)\n+  std::vector<std::unique_ptr<AST::GenericParam>> &params)\n {\n-  std::vector<std::unique_ptr<HIR::GenericParam> > lowered;\n+  std::vector<std::unique_ptr<HIR::GenericParam>> lowered;\n   for (auto &ast_param : params)\n     {\n       auto hir_param = ASTLowerGenericParam::translate (ast_param.get ());\n@@ -601,7 +602,7 @@ ASTLoweringBase::lower_generic_args (AST::GenericArgs &args)\n       lifetime_args.push_back (std::move (l));\n     }\n \n-  std::vector<std::unique_ptr<HIR::Type> > type_args;\n+  std::vector<std::unique_ptr<HIR::Type>> type_args;\n   for (auto &type : args.get_type_args ())\n     {\n       HIR::Type *t = ASTLoweringType::translate (type.get ());\n@@ -653,7 +654,7 @@ ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n       lifetime_args.push_back (std::move (l));\n     }\n \n-  std::vector<std::unique_ptr<HIR::Type> > type_args;\n+  std::vector<std::unique_ptr<HIR::Type>> type_args;\n   for (auto &type : segment.get_generic_args ().get_type_args ())\n     {\n       HIR::Type *t = ASTLoweringType::translate (type.get ());\n@@ -700,7 +701,7 @@ ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n     }\n   std::unique_ptr<HIR::TypePathSegment> associated_segment (translated_segment);\n \n-  std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n+  std::vector<std::unique_ptr<HIR::TypePathSegment>> translated_segments;\n   for (auto &seg : path.get_segments ())\n     {\n       translated_segment = nullptr;\n@@ -728,7 +729,7 @@ ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n void\n ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n {\n-  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n+  std::vector<std::unique_ptr<HIR::TypeParamBound>> bounds;\n   HIR::TypeParamBound *translated_bound\n     = ASTLoweringTypeBounds::translate (&type.get_trait_bound ());\n   bounds.push_back (std::unique_ptr<HIR::TypeParamBound> (translated_bound));\n@@ -748,7 +749,7 @@ ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n void\n ASTLoweringType::visit (AST::TraitObjectType &type)\n {\n-  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n+  std::vector<std::unique_ptr<HIR::TypeParamBound>> bounds;\n \n   for (auto &bound : type.get_type_param_bounds ())\n     {\n@@ -915,7 +916,7 @@ std::unique_ptr<HIR::TuplePatternItems>\n ASTLoweringBase::lower_tuple_pattern_multiple (\n   AST::TuplePatternItemsMultiple &pattern)\n {\n-  std::vector<std::unique_ptr<HIR::Pattern> > patterns;\n+  std::vector<std::unique_ptr<HIR::Pattern>> patterns;\n   for (auto &p : pattern.get_patterns ())\n     {\n       HIR::Pattern *translated = ASTLoweringPattern::translate (p.get ());\n@@ -930,8 +931,8 @@ std::unique_ptr<TuplePatternItems>\n ASTLoweringBase::lower_tuple_pattern_ranged (\n   AST::TuplePatternItemsRanged &pattern)\n {\n-  std::vector<std::unique_ptr<HIR::Pattern> > lower_patterns;\n-  std::vector<std::unique_ptr<HIR::Pattern> > upper_patterns;\n+  std::vector<std::unique_ptr<HIR::Pattern>> lower_patterns;\n+  std::vector<std::unique_ptr<HIR::Pattern>> upper_patterns;\n \n   for (auto &p : pattern.get_lower_patterns ())\n     {\n@@ -1030,5 +1031,50 @@ ASTLoweringBase::lower_literal (const AST::Literal &literal)\n   return HIR::Literal (literal.as_string (), type, literal.get_type_hint ());\n }\n \n+HIR::ExternBlock *\n+ASTLoweringBase::lower_extern_block (AST::ExternBlock &extern_block)\n+{\n+  HIR::Visibility vis = translate_visibility (extern_block.get_visibility ());\n+\n+  std::vector<std::unique_ptr<HIR::ExternalItem>> extern_items;\n+  for (auto &item : extern_block.get_extern_items ())\n+    {\n+      if (item->is_marked_for_strip ())\n+\tcontinue;\n+\n+      HIR::ExternalItem *lowered\n+\t= ASTLoweringExternItem::translate (item.get ());\n+      extern_items.push_back (std::unique_ptr<HIR::ExternalItem> (lowered));\n+    }\n+\n+  ABI abi = ABI::RUST;\n+  if (extern_block.has_abi ())\n+    {\n+      const std::string &extern_abi = extern_block.get_abi ();\n+      abi = get_abi_from_string (extern_abi);\n+      if (abi == ABI::UNKNOWN)\n+\trust_error_at (extern_block.get_locus (), \"unknown ABI option\");\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  HIR::ExternBlock *hir_extern_block\n+    = new HIR::ExternBlock (mapping, abi, std::move (extern_items),\n+\t\t\t    std::move (vis), extern_block.get_inner_attrs (),\n+\t\t\t    extern_block.get_outer_attrs (),\n+\t\t\t    extern_block.get_locus ());\n+\n+  mappings->insert_defid_mapping (mapping.get_defid (), hir_extern_block);\n+  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t     hir_extern_block);\n+  mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t     extern_block.get_locus ());\n+\n+  return hir_extern_block;\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "aedec50109e1e64333a5791d4079c0b121f2efb7", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -286,6 +286,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   lower_range_pattern_bound (AST::RangePatternBound *bound);\n \n   HIR::Literal lower_literal (const AST::Literal &literal);\n+\n+  HIR::ExternBlock *lower_extern_block (AST::ExternBlock &extern_block);\n };\n \n } // namespace HIR"}, {"sha": "5ab4dae5dab0dc3fad8a7a7aadb5e7dd9f77f0b7", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -752,46 +752,7 @@ ASTLoweringItem::visit (AST::TraitImpl &impl_block)\n void\n ASTLoweringItem::visit (AST::ExternBlock &extern_block)\n {\n-  HIR::Visibility vis = translate_visibility (extern_block.get_visibility ());\n-\n-  std::vector<std::unique_ptr<HIR::ExternalItem>> extern_items;\n-  for (auto &item : extern_block.get_extern_items ())\n-    {\n-      if (item->is_marked_for_strip ())\n-\tcontinue;\n-\n-      HIR::ExternalItem *lowered\n-\t= ASTLoweringExternItem::translate (item.get ());\n-      extern_items.push_back (std::unique_ptr<HIR::ExternalItem> (lowered));\n-    }\n-\n-  ABI abi = ABI::RUST;\n-  if (extern_block.has_abi ())\n-    {\n-      const std::string &extern_abi = extern_block.get_abi ();\n-      abi = get_abi_from_string (extern_abi);\n-      if (abi == ABI::UNKNOWN)\n-\trust_error_at (extern_block.get_locus (), \"unknown ABI option\");\n-    }\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  HIR::ExternBlock *hir_extern_block\n-    = new HIR::ExternBlock (mapping, abi, std::move (extern_items),\n-\t\t\t    std::move (vis), extern_block.get_inner_attrs (),\n-\t\t\t    extern_block.get_outer_attrs (),\n-\t\t\t    extern_block.get_locus ());\n-\n-  translated = hir_extern_block;\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     extern_block.get_locus ());\n+  translated = lower_extern_block (extern_block);\n }\n \n HIR::SimplePath"}, {"sha": "199d146f5d5a69fa51054695772601f40174272d", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -437,6 +437,11 @@ class ASTLoweringStmt : public ASTLoweringBase\n     translated = fn;\n   }\n \n+  void visit (AST::ExternBlock &extern_block) override\n+  {\n+    translated = lower_extern_block (extern_block);\n+  }\n+\n private:\n   ASTLoweringStmt () : translated (nullptr), terminated (false) {}\n "}, {"sha": "6fc929f3e431a5ff0e1e9ef5e02d60154c730417", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-resolve-item.h\"\n+#include \"rust-ast-resolve-stmt.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+void\n+ResolveStmt::visit (AST::ExternBlock &extern_block)\n+{\n+  resolve_visibility (extern_block.get_visibility ());\n+  for (auto &item : extern_block.get_extern_items ())\n+    {\n+      ResolveToplevelExternItem::go (item.get (),\n+\t\t\t\t     CanonicalPath::create_empty ());\n+      ResolveExternItem::go (item.get ());\n+    }\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "c8d42bcc7ca5e698e40ab89ce34aeb6df86b7373", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -406,6 +406,8 @@ class ResolveStmt : public ResolverBase\n     resolver->get_label_scope ().pop ();\n   }\n \n+  void visit (AST::ExternBlock &extern_block) override;\n+\n private:\n   ResolveStmt (NodeId parent, const CanonicalPath &prefix,\n \t       const CanonicalPath &canonical_prefix,"}, {"sha": "b0ffd2a21577f31a4040dd88a3b01aaa05b5b300", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-hir-type-check-type.h\"\n #include \"rust-hir-type-check-expr.h\"\n #include \"rust-hir-type-check-enumitem.h\"\n+#include \"rust-hir-type-check-implitem.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -56,6 +57,14 @@ class TypeCheckStmt : public TypeCheckBase\n       = TyTy::TupleType::get_unit_type (stmt.get_mappings ().get_hirid ());\n   }\n \n+  void visit (HIR::ExternBlock &extern_block) override\n+  {\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tTypeCheckTopLevelExternItem::Resolve (item.get (), extern_block);\n+      }\n+  }\n+\n   void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());"}, {"sha": "60531c0933dd0ba4441234a595ae29c1891e275f", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -90,12 +90,7 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n       if (!s->is_item ())\n \tcontinue;\n \n-      auto resolved = TypeCheckStmt::Resolve (s.get (), inside_loop);\n-      if (resolved == nullptr)\n-\t{\n-\t  rust_error_at (s->get_locus (), \"failure to resolve type\");\n-\t  return;\n-\t}\n+      TypeCheckStmt::Resolve (s.get (), inside_loop);\n     }\n \n   for (auto &s : expr.get_statements ())"}, {"sha": "42cf596fb7d6a947289e0a76b7220c7fb783b4b0", "filename": "gcc/testsuite/rust/execute/torture/issue-976.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-976.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4206c017654af7a3468690e4e21fdaf86bcb5c/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-976.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-976.rs?ref=4a4206c017654af7a3468690e4e21fdaf86bcb5c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-output \"hi\" } */\n+fn main() -> i32 {\n+    {\n+        extern \"C\" {\n+            fn puts(s: *const i8);\n+        }\n+\n+        unsafe {\n+            puts(\"hi\\0\" as *const str as *const i8);\n+        }\n+    }\n+\n+    0\n+}"}]}