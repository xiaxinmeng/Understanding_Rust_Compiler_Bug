{"sha": "c5f379653964a1d2c7037b2de3e947a48370a198", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVmMzc5NjUzOTY0YTFkMmM3MDM3YjJkZTNlOTQ3YTQ4MzcwYTE5OA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-08T16:47:35Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-08T16:47:53Z"}, "message": "x86: Insert ENDBR if function will be called indirectly\n\nSince constant_call_address_operand has\n\n;; Test for a pc-relative call operand\n(define_predicate \"constant_call_address_operand\"\n  (match_code \"symbol_ref\")\n{\n  if (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC\n      || flag_force_indirect_call)\n    return false;\n  if (TARGET_DLLIMPORT_DECL_ATTRIBUTES && SYMBOL_REF_DLLIMPORT_P (op))\n    return false;\n  return true;\n})\n\neven if cgraph_node::get (cfun->decl)->only_called_directly_p () returns\nfalse, the fuction may still be called indirectly.  Copy the logic from\nconstant_call_address_operand to rest_of_insert_endbranch to insert ENDBR\nat function entry if function will be called indirectly.\n\ngcc/\n\n\tPR target/94417\n\t* config/i386/i386-features.c (rest_of_insert_endbranch): Insert\n\tENDBR at function entry if function will be called indirectly.\n\ngcc/testsuite/\n\n\tPR target/94417\n\t* gcc.target/i386/pr94417-1.c: New test.\n\t* gcc.target/i386/pr94417-2.c: Likewise.\n\t* gcc.target/i386/pr94417-3.c: Likewise.", "tree": {"sha": "4c8c0f81228ae562527397802e41a9d0d02e4931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c8c0f81228ae562527397802e41a9d0d02e4931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5f379653964a1d2c7037b2de3e947a48370a198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5f379653964a1d2c7037b2de3e947a48370a198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5f379653964a1d2c7037b2de3e947a48370a198", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5f379653964a1d2c7037b2de3e947a48370a198/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf5faa9c463f0d53ffe835ba03d4502edfb959d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf5faa9c463f0d53ffe835ba03d4502edfb959d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf5faa9c463f0d53ffe835ba03d4502edfb959d"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "ffa8930556dd11ea68eb3e675aaf105e025877ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5f379653964a1d2c7037b2de3e947a48370a198", "patch": "@@ -1,3 +1,9 @@\n+2020-04-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/94417\n+\t* config/i386/i386-features.c (rest_of_insert_endbranch): Insert\n+\tENDBR at function entry if function will be called indirectly.\n+\n 2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94438"}, {"sha": "78fb373db6ef4541ebf8ef764a3a130b53f0e172", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=c5f379653964a1d2c7037b2de3e947a48370a198", "patch": "@@ -1963,7 +1963,12 @@ rest_of_insert_endbranch (void)\n       && (!flag_manual_endbr\n \t  || lookup_attribute (\"cf_check\",\n \t\t\t       DECL_ATTRIBUTES (cfun->decl)))\n-      && !cgraph_node::get (cfun->decl)->only_called_directly_p ())\n+      && (!cgraph_node::get (cfun->decl)->only_called_directly_p ()\n+\t  || ix86_cmodel == CM_LARGE\n+\t  || ix86_cmodel == CM_LARGE_PIC\n+\t  || flag_force_indirect_call\n+\t  || (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\t      && DECL_DLLIMPORT_P (cfun->decl))))\n     {\n       /* Queue ENDBR insertion to x86_function_profiler.  */\n       if (crtl->profile && flag_fentry)"}, {"sha": "e8305cb1c33f669af6cb452aa794ba2e8c764ec1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5f379653964a1d2c7037b2de3e947a48370a198", "patch": "@@ -1,3 +1,10 @@\n+2020-04-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/94417\n+\t* gcc.target/i386/pr94417-1.c: New test.\n+\t* gcc.target/i386/pr94417-2.c: Likewise.\n+\t* gcc.target/i386/pr94417-3.c: Likewise.\n+\n 2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94438"}, {"sha": "5bbe057fa8f4f4468a2dcfc0805d7bb0f5ff5096", "filename": "gcc/testsuite/gcc.target/i386/pr94417-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-1.c?ref=c5f379653964a1d2c7037b2de3e947a48370a198", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fcf-protection -mcmodel=large\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+\n+extern void ext (void);\n+\n+__attribute((noclone, noinline))\n+static\n+void\n+foo (void)\n+{\n+  ext ();\n+}\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "9eb0f5b2141d5c60c69da8fbe84ae4516fd2b191", "filename": "gcc/testsuite/gcc.target/i386/pr94417-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-2.c?ref=c5f379653964a1d2c7037b2de3e947a48370a198", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fpic -mcmodel=large -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+\n+extern void ext (void);\n+\n+__attribute((noclone, noinline))\n+static\n+void\n+foo (void)\n+{\n+  ext ();\n+}\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "07c451796c28d088d1aff2359fc82e09338172dc", "filename": "gcc/testsuite/gcc.target/i386/pr94417-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f379653964a1d2c7037b2de3e947a48370a198/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94417-3.c?ref=c5f379653964a1d2c7037b2de3e947a48370a198", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mforce-indirect-call\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+\n+extern void ext (void);\n+\n+__attribute((noclone, noinline))\n+static\n+void\n+foo (void)\n+{\n+  ext ();\n+}\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}]}