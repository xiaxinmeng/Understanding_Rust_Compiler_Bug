{"sha": "8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZlMjg2ZWE2ZDM4MDcyNTljNDYwNTRlYTFmMTFkMWEyNmVkNGNjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-11T07:42:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-11T07:42:02Z"}, "message": "unique_ptr.h: Replace _Tp_Deleter -> _Dp, and _Up_Deleter -> _Ep.\n\n2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/unique_ptr.h: Replace _Tp_Deleter -> _Dp, and\n\t_Up_Deleter -> _Ep.\n\nFrom-SVN: r163092", "tree": {"sha": "f448f5411bed4ebdab16f61eda28c84cd2e1da3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f448f5411bed4ebdab16f61eda28c84cd2e1da3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0/comments", "author": null, "committer": null, "parents": [{"sha": "4d053ac1a9b71b8b55184460b8dd225e8df1ec77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d053ac1a9b71b8b55184460b8dd225e8df1ec77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d053ac1a9b71b8b55184460b8dd225e8df1ec77"}], "stats": {"total": 115, "additions": 60, "deletions": 55}, "files": [{"sha": "390bbcc1dfc0a016ef1c1cdc728485f0ea12817a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "patch": "@@ -1,3 +1,8 @@\n+2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/unique_ptr.h: Replace _Tp_Deleter -> _Dp, and\n+\t_Up_Deleter -> _Ep.\n+\n 2010-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/shared_ptr_base.h: Remove a few now redundant"}, {"sha": "1dfba0b825e06b667d559b4ca183fee7e6e8c7d0", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe286ea6d3807259c46054ea1f11d1a26ed4cc0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=8fe286ea6d3807259c46054ea1f11d1a26ed4cc0", "patch": "@@ -78,10 +78,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// 20.7.12.2 unique_ptr for single objects.\n-  template <typename _Tp, typename _Tp_Deleter = default_delete<_Tp> > \n+  template <typename _Tp, typename _Dp = default_delete<_Tp> > \n     class unique_ptr\n     {\n-      typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n+      typedef std::tuple<_Tp*, _Dp>  __tuple_type;\n \n       // use SFINAE to determine whether _Del::pointer exists\n       class _Pointer\n@@ -92,7 +92,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \ttemplate<typename _Up>\n \t  static _Tp* __test(...);\n \n-\ttypedef typename remove_reference<_Tp_Deleter>::type _Del;\n+\ttypedef typename remove_reference<_Dp>::type _Del;\n \n       public:\n \ttypedef decltype( __test<_Del>(0) ) type;\n@@ -101,7 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     public:\n       typedef typename _Pointer::type\tpointer;\n       typedef _Tp                       element_type;\n-      typedef _Tp_Deleter               deleter_type;\n+      typedef _Dp               deleter_type;\n \n       // Constructors.\n       unique_ptr()\n@@ -134,24 +134,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       unique_ptr(unique_ptr&& __u) \n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n-      template<typename _Up, typename _Up_Deleter, typename = typename\n+      template<typename _Up, typename _Ep, typename = typename\n \tstd::enable_if\n-\t  <std::is_convertible<typename unique_ptr<_Up, _Up_Deleter>::pointer,\n+\t  <std::is_convertible<typename unique_ptr<_Up, _Ep>::pointer,\n \t\t\t       pointer>::value\n \t   && !std::is_array<_Up>::value\n-\t   && ((std::is_reference<_Tp_Deleter>::value\n-\t\t&& std::is_same<_Up_Deleter, _Tp_Deleter>::value)\n-\t       || (!std::is_reference<_Tp_Deleter>::value\n-\t\t   && std::is_convertible<_Up_Deleter, _Tp_Deleter>::value))>\n+\t   && ((std::is_reference<_Dp>::value\n+\t\t&& std::is_same<_Ep, _Dp>::value)\n+\t       || (!std::is_reference<_Dp>::value\n+\t\t   && std::is_convertible<_Ep, _Dp>::value))>\n              ::type>\n-        unique_ptr(unique_ptr<_Up, _Up_Deleter>&& __u) \n+        unique_ptr(unique_ptr<_Up, _Ep>&& __u) \n         : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter()))\n \t{ }\n \n #if _GLIBCXX_DEPRECATED\n       template<typename _Up, typename = typename\n \tstd::enable_if<std::is_convertible<_Up*, _Tp*>::value\n-\t\t       && std::is_same<_Tp_Deleter,\n+\t\t       && std::is_same<_Dp,\n \t\t\t\t       default_delete<_Tp>>::value>::type>\n         unique_ptr(auto_ptr<_Up>&& __u)\n \t: _M_t(__u.release(), deleter_type()) { }\n@@ -169,13 +169,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         return *this;\n       }\n \n-      template<typename _Up, typename _Up_Deleter, typename = typename\n+      template<typename _Up, typename _Ep, typename = typename\n         std::enable_if\n-\t  <std::is_convertible<typename unique_ptr<_Up, _Up_Deleter>::pointer,\n+\t  <std::is_convertible<typename unique_ptr<_Up, _Ep>::pointer,\n \t\t\t       pointer>::value\n \t   && !std::is_array<_Up>::value>::type> \n         unique_ptr&\n-        operator=(unique_ptr<_Up, _Up_Deleter>&& __u)\n+        operator=(unique_ptr<_Up, _Ep>&& __u)\n \t{\n           reset(__u.release()); \n           get_deleter() = std::move(__u.get_deleter()); \n@@ -256,15 +256,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [unique.ptr.runtime]\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length\n-  template<typename _Tp, typename _Tp_Deleter>\n-    class unique_ptr<_Tp[], _Tp_Deleter>\n+  template<typename _Tp, typename _Dp>\n+    class unique_ptr<_Tp[], _Dp>\n     {\n-      typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n+      typedef std::tuple<_Tp*, _Dp>  __tuple_type;\n \n     public:\n       typedef _Tp*               pointer;\n       typedef _Tp                element_type;      \n-      typedef _Tp_Deleter        deleter_type;\n+      typedef _Dp        deleter_type;\n \n       // Constructors.\n       unique_ptr()\n@@ -298,8 +298,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       unique_ptr(unique_ptr&& __u) \n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n-      template<typename _Up, typename _Up_Deleter> \n-        unique_ptr(unique_ptr<_Up, _Up_Deleter>&& __u) \n+      template<typename _Up, typename _Ep> \n+        unique_ptr(unique_ptr<_Up, _Ep>&& __u) \n \t: _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter()))\n \t{ }\n \n@@ -315,9 +315,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this; \n       }\n \n-      template<typename _Up, typename _Up_Deleter> \n+      template<typename _Up, typename _Ep> \n         unique_ptr&\n-        operator=(unique_ptr<_Up, _Up_Deleter>&& __u)\n+        operator=(unique_ptr<_Up, _Ep>&& __u)\n \t{\n           reset(__u.release());\n           get_deleter() = std::move(__u.get_deleter()); \n@@ -419,63 +419,63 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __tuple_type _M_t;\n   };\n   \n-  template<typename _Tp, typename _Tp_Deleter> \n+  template<typename _Tp, typename _Dp> \n     inline void\n-    swap(unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t unique_ptr<_Tp, _Tp_Deleter>& __y)\n+    swap(unique_ptr<_Tp, _Dp>& __x,\n+\t unique_ptr<_Tp, _Dp>& __y)\n     { __x.swap(__y); }\n \n-  template<typename _Tp, typename _Tp_Deleter,\n-\t   typename _Up, typename _Up_Deleter>\n+  template<typename _Tp, typename _Dp,\n+\t   typename _Up, typename _Ep>\n     inline bool\n-    operator==(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    operator==(const unique_ptr<_Tp, _Dp>& __x,\n+\t       const unique_ptr<_Up, _Ep>& __y)\n     { return __x.get() == __y.get(); }\n \n-  template<typename _Tp, typename _Tp_Deleter,\n-\t   typename _Up, typename _Up_Deleter>\n+  template<typename _Tp, typename _Dp,\n+\t   typename _Up, typename _Ep>\n     inline bool\n-    operator!=(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    operator!=(const unique_ptr<_Tp, _Dp>& __x,\n+\t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__x.get() == __y.get()); }\n \n-  template<typename _Tp, typename _Tp_Deleter,\n-\t   typename _Up, typename _Up_Deleter>\n+  template<typename _Tp, typename _Dp,\n+\t   typename _Up, typename _Ep>\n     inline bool\n-    operator<(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t      const unique_ptr<_Up, _Up_Deleter>& __y)\n+    operator<(const unique_ptr<_Tp, _Dp>& __x,\n+\t      const unique_ptr<_Up, _Ep>& __y)\n     { return __x.get() < __y.get(); }\n \n-  template<typename _Tp, typename _Tp_Deleter,\n-\t   typename _Up, typename _Up_Deleter>\n+  template<typename _Tp, typename _Dp,\n+\t   typename _Up, typename _Ep>\n     inline bool\n-    operator<=(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    operator<=(const unique_ptr<_Tp, _Dp>& __x,\n+\t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__y.get() < __x.get()); }\n \n-  template<typename _Tp, typename _Tp_Deleter,\n-\t   typename _Up, typename _Up_Deleter>\n+  template<typename _Tp, typename _Dp,\n+\t   typename _Up, typename _Ep>\n     inline bool\n-    operator>(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t      const unique_ptr<_Up, _Up_Deleter>& __y)\n+    operator>(const unique_ptr<_Tp, _Dp>& __x,\n+\t      const unique_ptr<_Up, _Ep>& __y)\n     { return __y.get() < __x.get(); }\n \n-  template<typename _Tp, typename _Tp_Deleter,\n-\t   typename _Up, typename _Up_Deleter>\n+  template<typename _Tp, typename _Dp,\n+\t   typename _Up, typename _Ep>\n     inline bool\n-    operator>=(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    operator>=(const unique_ptr<_Tp, _Dp>& __x,\n+\t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__x.get() < __y.get()); }\n \n   /// std::hash specialization for unique_ptr.\n-  template<typename _Tp, typename _Tp_Deleter>\n-    struct hash<unique_ptr<_Tp, _Tp_Deleter>>\n-    : public std::unary_function<unique_ptr<_Tp, _Tp_Deleter>, size_t>\n+  template<typename _Tp, typename _Dp>\n+    struct hash<unique_ptr<_Tp, _Dp>>\n+    : public std::unary_function<unique_ptr<_Tp, _Dp>, size_t>\n     {\n       size_t\n-      operator()(const unique_ptr<_Tp, _Tp_Deleter>& __u) const\n+      operator()(const unique_ptr<_Tp, _Dp>& __u) const\n       {\n-\ttypedef unique_ptr<_Tp, _Tp_Deleter> _UP;\n+\ttypedef unique_ptr<_Tp, _Dp> _UP;\n \treturn std::hash<typename _UP::pointer>()(__u.get());\n       }\n     };"}]}