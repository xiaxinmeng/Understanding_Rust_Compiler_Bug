{"sha": "893aeac17c7edaa313b6404070cc30ea460b0d2f", "node_id": "C_kwDOANBUbNoAKDg5M2FlYWMxN2M3ZWRhYTMxM2I2NDA0MDcwY2MzMGVhNDYwYjBkMmY", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-09T15:49:38Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-11T07:44:07Z"}, "message": "[testsuite] Require alloca support in a few tests\n\nRequire effective target alloca in a few test-cases.\n\nTested on nvptx.\n\ngcc/testsuite/ChangeLog:\n\n2022-02-10  Tom de Vries  <tdevries@suse.de>\n\n\t* c-c++-common/Walloca-larger-than.c: Require effective target alloca.\n\t* c-c++-common/Warray-bounds-9.c: Same.\n\t* c-c++-common/Wdangling-pointer-2.c: Same.\n\t* c-c++-common/Wdangling-pointer-4.c: Same.\n\t* c-c++-common/Wdangling-pointer-5.c: Same.\n\t* c-c++-common/Wdangling-pointer.c: Same.\n\t* c-c++-common/auto-init-11.c: Same.\n\t* c-c++-common/auto-init-12.c: Same.\n\t* c-c++-common/auto-init-15.c: Same.\n\t* c-c++-common/auto-init-16.c: Same.\n\t* c-c++-common/torture/builtin-clear-padding-4.c: Same.\n\t* gcc.c-torture/compile/pr99787-1.c: Same.\n\t* gcc.dg/Walloca-larger-than-4.c: Same.\n\t* gcc.dg/Wdangling-pointer.c: Same.\n\t* gcc.dg/Wfree-nonheap-object-2.c: Same.\n\t* gcc.dg/Wfree-nonheap-object.c: Same.\n\t* gcc.dg/Wstringop-overflow-56.c: Same.\n\t* gcc.dg/Wstringop-overflow-57.c: Same.\n\t* gcc.dg/Wstringop-overflow-67.c: Same.\n\t* gcc.dg/Wstringop-overflow-71.c: Same.\n\t* gcc.dg/Wvla-larger-than-5.c: Same.\n\t* gcc.dg/analyzer/taint-alloc-1.c: Same.\n\t* gcc.dg/analyzer/torture/ubsan-1.c: Same.\n\t* gcc.dg/graphite/pr99085.c: Same.\n\t* gcc.dg/pr100225.c: Same.\n\t* gcc.dg/pr98721-1.c: Same.\n\t* gcc.dg/pr99122-2.c: Same.\n\t* gcc.dg/sso-14.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-25.c: Same.\n\t* gcc.dg/uninit-38.c: Same.\n\t* gcc.dg/uninit-39.c: Same.\n\t* gcc.dg/uninit-41.c: Same.\n\t* gcc.dg/uninit-pr100250.c: Same.\n\t* gcc.dg/uninit-pr101300.c: Same.\n\t* gcc.dg/uninit-pr101494.c: Same.\n\t* gcc.dg/uninit-pr98578.c: Same.\n\t* gcc.dg/uninit-pr98583.c: Same.\n\t* gcc.dg/vla-stexp-1.c: Same.\n\t* gcc.dg/vla-stexp-2.c: Same.\n\t* gcc.dg/vla-stexp-4.c: Same.\n\t* gcc.dg/vla-stexp-5.c: Same.", "tree": {"sha": "470e1ea5b8f82c1557ab8b75e5ac197382aeb8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/470e1ea5b8f82c1557ab8b75e5ac197382aeb8da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/893aeac17c7edaa313b6404070cc30ea460b0d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893aeac17c7edaa313b6404070cc30ea460b0d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893aeac17c7edaa313b6404070cc30ea460b0d2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893aeac17c7edaa313b6404070cc30ea460b0d2f/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd64b09217fbe8fa33b559e61564071e8aca71e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd64b09217fbe8fa33b559e61564071e8aca71e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd64b09217fbe8fa33b559e61564071e8aca71e5"}], "stats": {"total": 90, "additions": 66, "deletions": 24}, "files": [{"sha": "6fdc1de17c9f483a7fc7d8b5819ed478644cfd81", "filename": "gcc/testsuite/c-c++-common/Walloca-larger-than.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWalloca-larger-than.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWalloca-larger-than.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWalloca-larger-than.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/100425 - missing -Walloca-larger-than with -O0\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall -Walloca-larger-than=128\" } */\n+   { dg-options \"-O0 -Wall -Walloca-larger-than=128\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "3b5cdfe12a2aeef04032629f75df5256399e3d87", "filename": "gcc/testsuite/c-c++-common/Warray-bounds-9.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-9.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* PR tree-optimization/99121 - ICE in -Warray-bounds on a multidimensional\n    VLA\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n \n #define NOIPA __attribute__ ((noipa))\n "}, {"sha": "20f11b227d647f8db28fc0489591d1ad8c407b83", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-2.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -2,7 +2,8 @@\n    variable within the same function\n    Exercise basic cases of -Wdangling-pointer with optimization.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall -Wno-uninitialized -Wno-return-local-addr -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Wall -Wno-uninitialized -Wno-return-local-addr -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __INTPTR_TYPE__ intptr_t;\n typedef __SIZE_TYPE__   size_t;"}, {"sha": "a747aabd28881c2b1dcf03d8e238f98e4de988b7", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-4.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -2,7 +2,8 @@\n    variable within the same function\n    Exercise -Wdangling-pointer for VLAs.\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O0 -Wall -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n \n void sink (void*, ...);\n "}, {"sha": "2a165cea767688a03e6ed38f772f5fa09384072b", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-5.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -3,7 +3,8 @@\n    Exercise -Wdangling-pointer for escaping stores of addreses of auto\n    variables.\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O0 -Wall -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n \n void* alloca (__SIZE_TYPE__);\n "}, {"sha": "0a18c3c8249e9f2cadcbe3daebea28310d244ce1", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -2,7 +2,8 @@\n    variable within the same function\n    Exercise basic cases of -Wdangling-pointer without optimization.\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall -Wno-uninitialized -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O0 -Wall -Wno-uninitialized -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __INTPTR_TYPE__ intptr_t;\n typedef __SIZE_TYPE__   size_t;"}, {"sha": "aafa2154a062eca0a785eb76dc0a75ce9fd697e5", "filename": "gcc/testsuite/c-c++-common/auto-init-11.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-11.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* Verify zero initialization for VLA automatic variables.  */\n /* { dg-do compile } */\n /* { dg-options \"-ftrivial-auto-var-init=zero -fdump-tree-gimple\" } */\n+/* { dg-require-effective-target alloca } */\n \n extern void bar (int);\n "}, {"sha": "c073bc9a1f8b1dd3923e3cfba86df6f38570c1b7", "filename": "gcc/testsuite/c-c++-common/auto-init-12.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-12.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* Verify zero initialization for VLA automatic variables.  */\n /* { dg-do compile } */\n /* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-tree-gimple\" } */\n+/* { dg-require-effective-target alloca } */\n \n extern void bar (int);\n "}, {"sha": "77710a961747345a1f284543baee7f394455c41b", "filename": "gcc/testsuite/c-c++-common/auto-init-15.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-15.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* Verify the auto initialization of nested VLA.  */\n /* { dg-do compile } */\n /* { dg-options \"-ftrivial-auto-var-init=zero -fdump-tree-gimple\" } */\n+/* { dg-require-effective-target alloca } */\n \n void g(void *);\n "}, {"sha": "3714bc3212568413df214e64052509455069eb3b", "filename": "gcc/testsuite/c-c++-common/auto-init-16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-16.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* Verify the auto initialization of nested VLA.  */\n /* { dg-do compile } */\n /* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-tree-gimple\" } */\n+/* { dg-require-effective-target alloca } */\n \n void g(void *);\n "}, {"sha": "9cb202fc690b5372564fc4c659c43667ef8400f9", "filename": "gcc/testsuite/c-c++-common/torture/builtin-clear-padding-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-clear-padding-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-clear-padding-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-clear-padding-4.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-require-effective-target alloca } */\n+\n /* PR libstdc++/88101 */\n \n struct S { char a; short b; char c; };"}, {"sha": "0e16301ede9e60d4f2578f376024a27b18276065", "filename": "gcc/testsuite/gcc.c-torture/compile/pr99787-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99787-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99787-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99787-1.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,4 +1,5 @@\n /* { dg-options \"-ftree-slp-vectorize -ffp-contract=on -ffloat-store\"  }  */\n+/* { dg-require-effective-target alloca } */\n \n _Complex foo_x_0;\n int foo_n11, foo_i, foo_l;"}, {"sha": "aac8b9732f7540b73b9bad0f445863bdc83323d0", "filename": "gcc/testsuite/gcc.dg/Walloca-larger-than-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-4.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/100425 - missing -Walloca-larger-than with -O0\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall -Walloca-larger-than=128\" } */\n+   { dg-options \"-O0 -Wall -Walloca-larger-than=128\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "89e222038dbc9c4f90e7bb0d4f0b71680e476bd5", "filename": "gcc/testsuite/gcc.dg/Wdangling-pointer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWdangling-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWdangling-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWdangling-pointer.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* Exercise basic C-only cases of -Wdangling-pointer.\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall\" } */\n+   { dg-options \"-O0 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "e9316a5d239cecf0c5961888ccd719298bc78fd2", "filename": "gcc/testsuite/gcc.dg/Wfree-nonheap-object-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object-2.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -2,7 +2,8 @@\n    Verify that attempting to reallocate unallocated objects referenced\n    either directly or through pointers is diagnosed.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall -Wfree-nonheap-object\" }  */\n+   { dg-options \"-O2 -Wall -Wfree-nonheap-object\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "c7c668043a53e1c4fbcfce39191f5042ce90b36e", "filename": "gcc/testsuite/gcc.dg/Wfree-nonheap-object.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -3,7 +3,8 @@\n    or through pointers is diagnosed.  In most cases this doesn't require\n    optimization.\n    { dg-do compile }\n-   { dg-options \"-Wall -Wfree-nonheap-object\" }  */\n+   { dg-options \"-Wall -Wfree-nonheap-object\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __INTPTR_TYPE__ intptr_t;\n typedef __SIZE_TYPE__   size_t;"}, {"sha": "5ba4de48f5a5afe04037e6c5058f2bd91eb73734", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-56.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-56.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* PR middle-end/92942 - missing -Wstringop-overflow for allocations with\n    a negative lower bound size\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n #define SIZE_MAX        __SIZE_MAX__\n #define UINT8_MAX       __UINT8_MAX__"}, {"sha": "6ae8589070f098dcfaa00ba3bfefd8b8bacb8759", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-57.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-57.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* Verify that an anti-range ~[A, B] with small positive A and B\n    is handled correctly and doesn't trigger warnings.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __typeof__ (sizeof 0) size_t;\n "}, {"sha": "0f01082ede4013f66e7a70c8bd6dcd89d0e57ccb", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-67.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-67.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* PR middle-end/100571 - bogus -Wstringop-overflow with VLA of elements\n    larger than byte\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n __attribute__ ((access (read_only, 1, 2))) void fro (int *, int);\n __attribute__ ((access (write_only, 1, 2))) void fwo (int *, int);"}, {"sha": "74311ecf7ff47c7fab4ca610c544d236d32da3ce", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-71.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-71.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -2,7 +2,8 @@\n    a larger scalar into a smaller array\n    Verify warnings for overflow by stores of results of built-in functions.\n    { dg-do compile }\n-   { dg-options \"-O2\" } */\n+   { dg-options \"-O2\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __INT16_TYPE__ int16_t;\n typedef __SIZE_TYPE__  size_t;"}, {"sha": "ebd7fb3e017f742bdb0aef05fab2a566a6dcb17d", "filename": "gcc/testsuite/gcc.dg/Wvla-larger-than-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-5.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/100510 - bogus -Wvla-large-than with -Walloca\n    { dg-do compile }\n-   { dg-options \"-O0 -Walloca -Wvla-larger-than=1000\" } */\n+   { dg-options \"-O0 -Walloca -Wvla-larger-than=1000\" }\n+   { dg-require-effective-target alloca } */\n \n void f (void*);\n "}, {"sha": "bc4f63bb3bd6fd2644336d01b2f15349b9db09ed", "filename": "gcc/testsuite/gcc.dg/analyzer/taint-alloc-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-alloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-alloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-alloc-1.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,5 +1,6 @@\n // TODO: remove need for this option\n /* { dg-additional-options \"-fanalyzer-checker=taint\" } */\n+/* { dg-require-effective-target alloca } */\n \n #include \"analyzer-decls.h\"\n #include <stdio.h>"}, {"sha": "18a5f8d8cc53afce86a43be7b56bd8eeabcbbe63", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/ubsan-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fubsan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fubsan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fubsan-1.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n /* { dg-additional-options \"-fsanitize=bounds\" } */\n+/* { dg-require-effective-target alloca } */\n \n #include <stdlib.h>\n #include \"../analyzer-decls.h\""}, {"sha": "dd068862fb76accfca515f5d18c42b35190a103f", "filename": "gcc/testsuite/gcc.dg/graphite/pr99085.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr99085.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr99085.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr99085.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR target/99085 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fgraphite-identity -fsel-sched-pipelining -fselective-scheduling2\" } */\n+/* { dg-require-effective-target alloca } */\n \n void\n foo (int m, int n, int o, int i)"}, {"sha": "f0efd29fa869b43c3b710933b83c959cde5d8586", "filename": "gcc/testsuite/gcc.dg/pr100225.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100225.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100225.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100225.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR rtl-optimization/100225 */\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fmodulo-sched\" } */\n+/* { dg-require-effective-target alloca } */\n \n void\n vorbis_synthesis_lapout (void);"}, {"sha": "1c7574fb8838a1e2f3166d6cdc9c56b67bcea965", "filename": "gcc/testsuite/gcc.dg/pr98721-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98721-1.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR tree-optimization/98721 */\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target alloca } */\n \n int\n foo (int n)"}, {"sha": "c0c850f141cde0bb8ac0615262828eda61566fd7", "filename": "gcc/testsuite/gcc.dg/pr99122-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-2.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -g -w\" } */\n+/* { dg-require-effective-target alloca } */\n \n static int foo ();\n "}, {"sha": "7b1590ad03a7bb83bd88c5caf54cd9ab7310e053", "filename": "gcc/testsuite/gcc.dg/sso-14.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-14.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -2,6 +2,7 @@\n /* Testcase by George Thopas <george.thopas@gmail.com> */\n \n /* { dg-do compile } */\n+/* { dg-require-effective-target alloca } */\n \n #include <stddef.h>\n #include <stdlib.h>"}, {"sha": "a28f0668c91783eddd8eb2b183dbcdf92ae9ab70", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-25.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-25.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/97373 - missing warning on sprintf into allocated destination\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n \n #include \"../range.h\"\n "}, {"sha": "9a202430b595e2a39b0cc254b993a7ec9223b1fd", "filename": "gcc/testsuite/gcc.dg/uninit-38.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-38.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -6,7 +6,8 @@\n    be adjusted.  Ditto if -Wuninitialized output changes for some\n    other reason.\n    { dg-do compile { target { { lp64 || ilp32 } || llp64 } } }\n-   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0 -fno-ipa-modref\" } */\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0 -fno-ipa-modref\" }\n+   { dg-require-effective-target alloca } */\n \n #define CONCAT(x, y)   x ## y\n #define CAT(x, y)      CONCAT(x, y)"}, {"sha": "4d17f14725f185bb6f16ac548608710bda3b926d", "filename": "gcc/testsuite/gcc.dg/uninit-39.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-39.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* PR c/98592 - ICE in gimple_canonical_types_compatible_p while formatting\n    a MEM_REF\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n void f (int);\n "}, {"sha": "f2e17a81d0922e94799dc9702a763ff740dceb24", "filename": "gcc/testsuite/gcc.dg/uninit-41.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-41.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* Verify that calls to non-modifying built-ins aren't considered\n    potentially modifying.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "d47fc24cc5a768d31ff09fa315c95cc07d03db83", "filename": "gcc/testsuite/gcc.dg/uninit-pr100250.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr100250.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr100250.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr100250.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/100250 - ICE related to -Wmaybe-uninitialized\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n extern void f (int D, const int[D], const int[D]);\n "}, {"sha": "840fd0b2d6274480b17088545a57c4947992f16c", "filename": "gcc/testsuite/gcc.dg/uninit-pr101300.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101300.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* PR middle-end/101300 - -fsanitize=undefined suppresses -Wuninitialized\n    for a VLA read at -O0\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall -fsanitize=undefined\" } */\n+   { dg-options \"-O0 -Wall -fsanitize=undefined\" }\n+   { dg-require-effective-target alloca } */\n \n int warn_vla_rd0 (int n)\n {"}, {"sha": "3c68d1495931906d3691192d1442319be6c9d6b1", "filename": "gcc/testsuite/gcc.dg/uninit-pr101494.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101494.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101494.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101494.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/101494 - bogus -Wmaybe-uninitialized on memrchr of size 0\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "db566c79136919f0f41bd701586a1b7eef3911b2", "filename": "gcc/testsuite/gcc.dg/uninit-pr98578.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98578.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98578.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98578.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/98578 - ICE warning on uninitialized VLA access\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall -fno-ipa-modref\" } */\n+   { dg-options \"-O2 -Wall -fno-ipa-modref\" }\n+   { dg-require-effective-target alloca } */\n \n void* malloc (__SIZE_TYPE__);\n "}, {"sha": "6159c9512f40a06d75f965474a6a06860e2a5eb6", "filename": "gcc/testsuite/gcc.dg/uninit-pr98583.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98583.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98583.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98583.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,7 +1,8 @@\n /* PR middle-end/98583 - missing -Wuninitialized reading from a second VLA\n    in its own block\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-effective-target alloca } */\n \n void f (int*);\n void g (int);"}, {"sha": "baaad36eb12df117ec82e076213d0daebec909af", "filename": "gcc/testsuite/gcc.dg/vla-stexp-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-1.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR29970*/\n /* { dg-do run } */\n /* { dg-options \"-Wall -O0\" } */\n+/* { dg-require-effective-target alloca } */\n \n int foo(void)\n {"}, {"sha": "9f1512567f0fc27708705ea4ac18a5df93073c03", "filename": "gcc/testsuite/gcc.dg/vla-stexp-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-2.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR101838 */\n /* { dg-do run } */\n /* { dg-options \"-Wpedantic -O0\" } */\n+/* { dg-require-effective-target alloca } */\n \n \n int bar0("}, {"sha": "929768cd802734dcf0417c8368507103fe950395", "filename": "gcc/testsuite/gcc.dg/vla-stexp-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-4.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR29970, PR91038 */\n /* { dg-do run } */\n /* { dg-options \"-O0 -Wunused-variable\" } */\n+/* { dg-require-effective-target alloca } */\n \n int foo3b(void)   // should not return 0\n {"}, {"sha": "68614f2d6b98ce5d397f9181a579da9cdd4dd6a8", "filename": "gcc/testsuite/gcc.dg/vla-stexp-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893aeac17c7edaa313b6404070cc30ea460b0d2f/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-5.c?ref=893aeac17c7edaa313b6404070cc30ea460b0d2f", "patch": "@@ -1,6 +1,7 @@\n /* PR29970 */\n /* { dg-do run } */\n /* { dg-options \"-Wunused-variable\" } */\n+/* { dg-require-effective-target alloca } */\n \n \n "}]}