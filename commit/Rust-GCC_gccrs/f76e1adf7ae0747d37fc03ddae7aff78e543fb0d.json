{"sha": "f76e1adf7ae0747d37fc03ddae7aff78e543fb0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2ZTFhZGY3YWUwNzQ3ZDM3ZmMwM2RkYWU3YWZmNzhlNTQzZmIwZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-19T02:01:31Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-19T02:01:31Z"}, "message": "Initial revision\n\nFrom-SVN: r124", "tree": {"sha": "3f255a9877364f5adf1a1e3fed3cdad80e61f9d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f255a9877364f5adf1a1e3fed3cdad80e61f9d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76e1adf7ae0747d37fc03ddae7aff78e543fb0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76e1adf7ae0747d37fc03ddae7aff78e543fb0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76e1adf7ae0747d37fc03ddae7aff78e543fb0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76e1adf7ae0747d37fc03ddae7aff78e543fb0d/comments", "author": null, "committer": null, "parents": [{"sha": "3b4aa0bd8e1444f074a27346277538632bf85aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4aa0bd8e1444f074a27346277538632bf85aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4aa0bd8e1444f074a27346277538632bf85aea"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "dc9a06255e92e3c3279ff74d507267932f28c3e9", "filename": "gcc/ginclude/va-i860.h", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76e1adf7ae0747d37fc03ddae7aff78e543fb0d/gcc%2Fginclude%2Fva-i860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76e1adf7ae0747d37fc03ddae7aff78e543fb0d/gcc%2Fginclude%2Fva-i860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-i860.h?ref=f76e1adf7ae0747d37fc03ddae7aff78e543fb0d", "patch": "@@ -0,0 +1,191 @@\n+/* Note:  We must use the name __builtin_savregs.  GCC attaches special\n+   significance to that name.  In particular, regardless of where in a\n+   function __builtin_saveregs is called, GCC moves the call up to the\n+   very start of the function.  */\n+\n+#if !defined(_STDARG_H)\n+\n+/* varargs support */\n+\n+#define va_alist __builtin_va_alist\n+\n+#define va_dcl\n+\n+#define va_start(pvar) ((pvar) = * (va_list *) __builtin_saveregs ())\n+\n+#else /* ANSI stdarg.h */\n+/* Note that CUMULATIVE_ARGS elements are measured in bytes on the i860,\n+   so we divide by 4 to get # of registers.  */\n+#define va_start(pvar, firstarg) \\\n+ ((pvar) = *(va_list *) __builtin_saveregs (),\t\t\t\\\n+  (pvar).__ireg_used = __builtin_args_info (0) / 4,\t\t\\\n+  (pvar).__freg_used = __builtin_args_info (1) / 4,\t\t\\\n+  (pvar).__mem_ptr = __builtin_next_arg ())\n+\n+#endif /* !defined(_STDARG_H)  ... varargs support */\n+\n+\n+typedef union {\n+  float\t\t__freg[8];\n+  double\t__dreg[4];\n+} __f_regs;\n+\n+typedef struct {\n+#ifdef __SVR4__\n+  __f_regs __float_regs; long __ireg[12];\n+#else /* pre-SVR4 */\n+  long __ireg[12]; __f_regs __float_regs;\n+#endif\n+} __va_saved_regs;\n+\n+#ifndef _VA_LIST\n+#define _VA_LIST\n+#define __GNU_VA_LIST\t/* Field names were properly prefixed with `__'.  */\n+\n+typedef struct {\n+#ifdef __SVR4__\n+  unsigned\t__ireg_used;\t/* How many int regs consumed 'til now? */\n+  unsigned\t__freg_used;\t/* How many flt regs consumed 'til now? */\n+  __va_saved_regs *__reg_base;\t/* Address of where we stored the regs. */\n+  long *\t__mem_ptr;\t/* Address of memory overflow args area. */\n+#else /* pre-SVR4 */\n+  __va_saved_regs *__reg_base;\t/* Address of where we stored the regs. */\n+  long *\t__mem_ptr;\t/* Address of memory overflow args area. */\n+  unsigned\t__ireg_used;\t/* How many int regs consumed 'til now? */\n+  unsigned\t__freg_used;\t/* How many flt regs consumed 'til now? */\n+#endif\n+} va_list;\n+\n+#endif /* !defined(_VA_LIST) */\n+\n+#define va_end(__va)\n+\n+/* Values returned by __builtin_classify_type.  */\n+\n+enum {\n+  __no_type_class = -1,\n+  __void_type_class,\n+  __integer_type_class,\n+  __char_type_class,\n+  __enumeral_type_class,\n+  __boolean_type_class,\n+  __pointer_type_class,\n+  __reference_type_class,\n+  __offset_type_class,\n+  __real_type_class,\n+  __complex_type_class,\n+  __function_type_class,\n+  __method_type_class,\n+  __record_type_class,\n+  __union_type_class,\n+  __array_type_class,\n+  __string_type_class,\n+  __set_type_class,\n+  __file_type_class,\n+  __lang_type_class\n+};\n+\n+#define __NUM_PARM_FREGS\t8\n+#define __NUM_PARM_IREGS\t12\n+\n+#define __savereg(__va) (__va.__reg_base)\n+\n+/* This macro works both for SVR4 and pre-SVR4 environments.  */\n+\n+/* Note that parameters are always aligned at least to a word boundary\n+   (when passed) regardless of what GCC's __alignof__ operator says.  */\n+\n+/* Make allowances here for adding 128-bit (long double) floats someday.  */\n+\n+#ifndef __GNU_VA_LIST\n+#define __ireg_used ireg_used\n+#define __freg_used freg_used\n+#define __mem_ptr mem_ptr\n+#define __reg_base reg_base\n+#endif\n+\n+#define va_arg(__va, __type)\t\t\t\t\t\t\\\n+(* (__type *)\t\t\t\t\t\t\t\t\\\n+({\t\t\t\t\t\t\t\t\t\\\n+  register void *__rv;  /* result value */\t\t\t\t\\\n+  register unsigned __align;\t\t\t\t\t\t\\\n+  switch (__builtin_classify_type (* (__type *) 0))\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+    case __real_type_class:\t\t\t\t\t\t\\\n+      switch (sizeof (__type))\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  case sizeof (float):\t\t\t\t\t\t\\\n+\t  case sizeof (double):\t\t\t\t\t\t\\\n+\t    if (__va.__freg_used < __NUM_PARM_FREGS - 1)\t\t\\\n+\t      {\t\t\t\t\t\t\t\t\\\n+\t        if ((__va.__freg_used & 1) != 0)\t\t\t\\\n+\t          __va.__freg_used++;\t/* skip odd */\t\t\t\\\n+\t        __rv = &__savereg(__va)->__float_regs.__freg[__va.__freg_used];\\\n+\t\t__va.__freg_used += 2;\t\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\t\\\n+\t    else\t\t\t\t\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\t\\\n+\t        if ((((unsigned) __va.__mem_ptr) & (sizeof(double)-1)) != 0) \\\n+\t          __va.__mem_ptr++;\t/* skip odd */\t\t\t\\\n+\t        __rv = __va.__mem_ptr;\t\t\t\t\t\\\n+\t        __va.__mem_ptr += 2;\t\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\t\\\n+\t    if (sizeof (__type) == sizeof (float))\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\t\\\n+\t        *((float *) __rv) = *((double *) __rv);\t\t\t\\\n+\t\t*(((long *) __rv) + 1) = 0xfff00001;\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  default:\t\t\t\t\t\t\t\\\n+\t    abort ();\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    case __void_type_class:\t\t\t\t\t\t\\\n+    case __integer_type_class:\t\t\t\t\t\t\\\n+    case __char_type_class:\t\t\t\t\t\t\\\n+    case __enumeral_type_class:\t\t\t\t\t\t\\\n+    case __boolean_type_class:\t\t\t\t\t\t\\\n+    case __pointer_type_class:\t\t\t\t\t\t\\\n+    case __reference_type_class:\t\t\t\t\t\\\n+    case __offset_type_class:\t\t\t\t\t\t\\\n+      if (sizeof (__type) <= 4)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+          __rv = (__va.__ireg_used < __NUM_PARM_IREGS\t\t\t\\\n+\t          ? (&__savereg(__va)->__ireg[__va.__ireg_used++])\t\\\n+\t          : __va.__mem_ptr++);\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (__va.__ireg_used + sizeof (__type) / 4 <= __NUM_PARM_IREGS) \\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  __rv = &__savereg(__va)->__ireg[__va.__ireg_used];\t\t\\\n+\t  __va.__ireg_used += sizeof (__type) / 4;\t\t\t\\\n+          break;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      /* Fall through to fetch from memory.  */\t\t\t\t\\\n+    case __record_type_class:\t\t\t\t\t\t\\\n+    case __union_type_class:\t\t\t\t\t\t\\\n+      __align = (__alignof__ (__type) < sizeof (long)\t\t\t\\\n+\t\t ? sizeof (long)\t\t\t\t\t\\\n+\t\t : __alignof__ (__type));\t\t\t\t\\\n+      __va.__mem_ptr\t\t\t\t\t\t\t\\\n+\t= (long *)\t\t\t\t\t\t\t\\\n+\t  ((((unsigned) __va.__mem_ptr) + (__align-1)) & ~(__align-1));\t\\\n+      __rv = __va.__mem_ptr;\t\t\t\t\t\t\\\n+      __va.__mem_ptr\t\t\t\t\t\t\t\\\n+\t+= ((sizeof (__type) + sizeof (long) - 1) / sizeof (long));\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    case __complex_type_class:\t\t\t\t\t\t\\\n+    case __function_type_class:\t\t\t\t\t\t\\\n+    case __method_type_class:\t\t\t\t\t\t\\\n+    case __array_type_class:\t\t\t\t\t\t\\\n+    case __string_type_class:\t\t\t\t\t\t\\\n+    case __set_type_class:\t\t\t\t\t\t\\\n+    case __file_type_class:\t\t\t\t\t\t\\\n+    case __lang_type_class:\t\t\t\t\t\t\\\n+    case __no_type_class:\t\t\t\t\t\t\\\n+    default:\t\t\t\t\t\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  __rv;\t\t\t\t\t\t\t\t\t\\\n+}))\n+"}]}