{"sha": "6126f4db33f3719830daeff889aa8591326ca3e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyNmY0ZGIzM2YzNzE5ODMwZGFlZmY4ODlhYTg1OTEzMjZjYTNlNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-10T05:20:15Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-10T05:20:15Z"}, "message": "(initdcl, notype_initdcl, init): Undo previous change.\n\n(init): Use pop_momentary_nofree if the initializer has real data.\n\nFrom-SVN: r5702", "tree": {"sha": "efc3baabee9d2614d04dc8f1a8b8dbc6f4e76e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc3baabee9d2614d04dc8f1a8b8dbc6f4e76e85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6126f4db33f3719830daeff889aa8591326ca3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6126f4db33f3719830daeff889aa8591326ca3e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6126f4db33f3719830daeff889aa8591326ca3e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6126f4db33f3719830daeff889aa8591326ca3e7/comments", "author": null, "committer": null, "parents": [{"sha": "e03bb07275a267f365174aad5a10e1d2d98d4591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03bb07275a267f365174aad5a10e1d2d98d4591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03bb07275a267f365174aad5a10e1d2d98d4591"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "1add87f24bc1c7a310f6087930cfb9637ae5011c", "filename": "gcc/c-parse.in", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6126f4db33f3719830daeff889aa8591326ca3e7/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6126f4db33f3719830daeff889aa8591326ca3e7/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=6126f4db33f3719830daeff889aa8591326ca3e7", "patch": "@@ -1019,16 +1019,12 @@ maybeasm:\n initdcl:\n \t  declarator maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($1, current_declspecs, 1);\n-\t\t  start_init ($<ttype>$, $2, global_bindings_p ());\n-\t\t  /* Note that the call to clear_momentary\n-\t\t     is in process_init_element.  */\n-\t\t  push_momentary (); }\n+\t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_init ();\n \t\t  decl_attributes ($<ttype>5, $3);\n-\t\t  finish_decl ($<ttype>5, $6, $2);\n-\t\t  pop_momentary (); }\n+\t\t  finish_decl ($<ttype>5, $6, $2); }\n \t| declarator maybeasm maybe_attribute\n \t\t{ tree d = start_decl ($1, current_declspecs, 0);\n \t\t  decl_attributes (d, $3);\n@@ -1038,17 +1034,12 @@ initdcl:\n notype_initdcl:\n \t  notype_declarator maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($1, current_declspecs, 1);\n-\t\t  start_init ($<ttype>$, $2, global_bindings_p ());\n-\t\t  /* Note that the call to clear_momentary\n-\t\t     is in process_init_element.  */\n-\t\t  push_momentary (); }\n+\t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_init ();\n \t\t  decl_attributes ($<ttype>5, $3);\n-\t\t  finish_decl ($<ttype>5, $6, $2);\n-\t\t  pop_momentary (); }\n-\n+\t\t  finish_decl ($<ttype>5, $6, $2); }\n \t| notype_declarator maybeasm maybe_attribute\n \t\t{ tree d = start_decl ($1, current_declspecs, 0);\n \t\t  decl_attributes (d, $3);\n@@ -1122,11 +1113,20 @@ attrib\n init:\n \texpr_no_commas\n \t| '{'\n-\t\t{ really_start_incremental_init (NULL_TREE); }\n+\t\t{ really_start_incremental_init (NULL_TREE);\n+\t\t  /* Note that the call to clear_momentary\n+\t\t     is in process_init_element.  */\n+\t\t  push_momentary (); }\n \t  initlist_maybe_comma '}'\n-\t\t{ $$ = pop_init_level (0); }\n+\t\t{ $$ = pop_init_level (0);\n+\t\t  if ($$ == error_mark_node)\n+\t\t    pop_momentary ();\n+\t\t  else\n+\t\t    pop_momentary_nofree (); }\n+\n \t| error\n-\t\t{ $$ = error_mark_node; }\n+\t\t{ $$ = error_mark_node;\n+\t\t  pop_momentary (); }\n \t;\n \n /* `initlist_maybe_comma' is the guts of an initializer in braces.  */"}]}