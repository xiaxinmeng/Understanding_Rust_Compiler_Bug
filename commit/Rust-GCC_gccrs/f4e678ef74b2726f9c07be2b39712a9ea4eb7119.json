{"sha": "f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlNjc4ZWY3NGIyNzI2ZjljMDdiZTJiMzk3MTJhOWVhNGViNzExOQ==", "commit": {"author": {"name": "Nina Dinka Ranns", "email": "dinka.ranns@gmail.com", "date": "2019-05-07T15:30:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-07T15:30:46Z"}, "message": "Make allocator propagation more consistent for operator+(basic_string) (P1165R1)\n\n2019-05-01  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n\n\tMake allocator propagation more consistent for\n\toperator+(basic_string) (P1165R1)\n\t* include/bits/basic_string.h\n\t(operator+(basic_string&&, basic_string&&): Changed resulting\n\tallocator to always be the one from the first parameter.\n\t* include/bits/basic_string.tcc\n\t(operator+(const _CharT*, const basic_string&)): Changed\n\tresulting allocator to be SOCCC on the second parameter's allocator.\n\t(operator+(_CharT, const basic_string&)): Likewise.\n\t* testsuite/21_strings/basic_string/allocator/char/operator_plus.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/operator_plus.cc:\n\tNew.\n\nFrom-SVN: r270953", "tree": {"sha": "5c6609e0b18faeec8b0105b2fcd1bf1ab6efb45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6609e0b18faeec8b0105b2fcd1bf1ab6efb45a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/comments", "author": {"login": "NinaRanns", "id": 57705710, "node_id": "MDQ6VXNlcjU3NzA1NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/57705710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NinaRanns", "html_url": "https://github.com/NinaRanns", "followers_url": "https://api.github.com/users/NinaRanns/followers", "following_url": "https://api.github.com/users/NinaRanns/following{/other_user}", "gists_url": "https://api.github.com/users/NinaRanns/gists{/gist_id}", "starred_url": "https://api.github.com/users/NinaRanns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NinaRanns/subscriptions", "organizations_url": "https://api.github.com/users/NinaRanns/orgs", "repos_url": "https://api.github.com/users/NinaRanns/repos", "events_url": "https://api.github.com/users/NinaRanns/events{/privacy}", "received_events_url": "https://api.github.com/users/NinaRanns/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2313938e75f98487eb83d605e0670e2d108c3353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2313938e75f98487eb83d605e0670e2d108c3353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2313938e75f98487eb83d605e0670e2d108c3353"}], "stats": {"total": 351, "additions": 344, "deletions": 7}, "files": [{"sha": "47b8b42d2aff19f7d8ad252d7f309220895085cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "patch": "@@ -1,3 +1,19 @@\n+2019-05-01  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+\n+\tMake allocator propagation more consistent for\n+\toperator+(basic_string) (P1165R1)\n+\t* include/bits/basic_string.h\n+\t(operator+(basic_string&&, basic_string&&): Changed resulting\n+\tallocator to always be the one from the first parameter.\n+\t* include/bits/basic_string.tcc\n+\t(operator+(const _CharT*, const basic_string&)): Changed\n+\tresulting allocator to be SOCCC on the second parameter's allocator.\n+\t(operator+(_CharT, const basic_string&)): Likewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/operator_plus.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/operator_plus.cc:\n+\tNew.\n+\n 2019-05-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/regex.h: Improve docs."}, {"sha": "5ebe86bad7dcfc5d9a05f3145873facef123d6f9", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "patch": "@@ -6096,11 +6096,21 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n     {\n-      const auto __size = __lhs.size() + __rhs.size();\n-      const bool __cond = (__size > __lhs.capacity()\n-\t\t\t   && __size <= __rhs.capacity());\n-      return __cond ? std::move(__rhs.insert(0, __lhs))\n-\t            : std::move(__lhs.append(__rhs));\n+#if _GLIBCXX_USE_CXX11_ABI\n+      using _Alloc_traits = allocator_traits<_Alloc>;\n+      bool __use_rhs = false;\n+      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})\n+\t__use_rhs = true;\n+      else if (__lhs.get_allocator() == __rhs.get_allocator())\n+\t__use_rhs = true;\n+      if (__use_rhs)\n+#endif\n+\t{\n+\t  const auto __size = __lhs.size() + __rhs.size();\n+\t  if (__size > __lhs.capacity() && __size <= __rhs.capacity())\n+\t    return std::move(__rhs.insert(0, __lhs));\n+\t}\n+      return std::move(__lhs.append(__rhs));\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "e2315cb14678209b5a499b9bf5a22ff51bbf6c38", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "patch": "@@ -1161,8 +1161,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_string(__lhs);\n       typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+\trebind<_CharT>::other _Char_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n       const __size_type __len = _Traits::length(__lhs);\n-      __string_type __str;\n+      __string_type __str(_Alloc_traits::_S_select_on_copy(\n+          __rhs.get_allocator()));\n       __str.reserve(__len + __rhs.size());\n       __str.append(__lhs, __len);\n       __str.append(__rhs);\n@@ -1175,7 +1179,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n-      __string_type __str;\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+\trebind<_CharT>::other _Char_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n+      __string_type __str(_Alloc_traits::_S_select_on_copy(\n+          __rhs.get_allocator()));\n       const __size_type __len = __rhs.size();\n       __str.reserve(__len + 1);\n       __str.append(__size_type(1), __lhs);"}, {"sha": "c4693378d0bf2c291eabe7456e765f9d7e5fe97c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/operator_plus.cc", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Foperator_plus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Foperator_plus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Foperator_plus.cc?ref=f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "patch": "@@ -0,0 +1,151 @@\n+// 2019-04-30  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+#include <ext/throw_allocator.h>\n+\n+using C = char;\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(\"something\",alloc_type(1));\n+  test_type v2(\"something\",alloc_type(2));\n+  auto r1 = v1 + v2;\n+  VERIFY(r1.get_allocator().get_personality() == 1);\n+\n+  auto r2 = v1 + std::move(v2);\n+  VERIFY(r2.get_allocator().get_personality() == 2);\n+\n+  test_type v3(\"something\", alloc_type(3));\n+  test_type v4(\"something\", alloc_type(4));\n+  auto r3 = std::move(v3) + v4;\n+  VERIFY(r3.get_allocator().get_personality() == 3);\n+\n+  auto r4 = std::move(v1) +std::move(v4);\n+  VERIFY(r4.get_allocator().get_personality() == 1);\n+\n+  test_type v5(\"something\", alloc_type(5));\n+  auto r5 = v5 + \"str\";\n+  VERIFY(r5.get_allocator().get_personality() == 5);\n+\n+  auto r6 = v5 + 'c';\n+  VERIFY(r6.get_allocator().get_personality() == 5);\n+\n+  auto r7 = std::move(v5) + \"str\";\n+  VERIFY(r7.get_allocator().get_personality() == 5);\n+\n+  test_type v6(\"something\", alloc_type(6));\n+  auto r8 = std::move(v6) + 'c';\n+  VERIFY(r8.get_allocator().get_personality() == 6);\n+\n+  test_type v7(\"something\", alloc_type(7));\n+  auto r9 = \"str\" + v7;\n+  VERIFY(r9.get_allocator().get_personality() == 7);\n+\n+  auto r10 = 'c' + v7;\n+  VERIFY(r10.get_allocator().get_personality() == 7);\n+\n+  auto r11 = \"str\" + std::move(v7);\n+  VERIFY(r11.get_allocator().get_personality() == 7);\n+\n+  test_type v8(\"something\", alloc_type(8));\n+  auto r12 = 'c' + std::move(v8);\n+  VERIFY(r12.get_allocator().get_personality() == 8);\n+}\n+void test02()\n+{\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(\"something\",alloc_type(1));\n+  test_type v2(\"something\",alloc_type(2));\n+  auto r1 = v1 + v2;\n+  VERIFY(r1.get_allocator().get_personality() != 1);\n+\n+  auto r2 = v1 + std::move(v2);\n+  VERIFY(r2.get_allocator().get_personality() == 2);\n+\n+  test_type v3(\"something\", alloc_type(3));\n+  test_type v4(\"something\", alloc_type(4));\n+  auto r3 = std::move(v3) + v4;\n+  VERIFY(r3.get_allocator().get_personality() == 3);\n+\n+  auto r4 = std::move(v1) +std::move(v4);\n+  VERIFY(r4.get_allocator().get_personality() == 1);\n+\n+  test_type v5(\"something\", alloc_type(5));\n+  auto r5 = v5 + \"str\";\n+  VERIFY(r5.get_allocator().get_personality() != 5);\n+\n+  auto r6 = v5 + 'c';\n+  VERIFY(r6.get_allocator().get_personality() != 5);\n+\n+  auto r7 = std::move(v5) + \"str\";\n+  VERIFY(r7.get_allocator().get_personality() == 5);\n+\n+  test_type v6(\"something\", alloc_type(6));\n+  auto r8 = std::move(v6) + 'c';\n+  VERIFY(r8.get_allocator().get_personality() == 6);\n+\n+  test_type v7(\"something\", alloc_type(7));\n+  auto r9 = \"str\" + v7;\n+  VERIFY(r9.get_allocator().get_personality() != 7);\n+\n+  auto r10 = 'c' + v7;\n+  VERIFY(r10.get_allocator().get_personality() != 7);\n+\n+  auto r11 = \"str\" + std::move(v7);\n+  VERIFY(r11.get_allocator().get_personality() == 7);\n+\n+  test_type v8(\"something\", alloc_type(8));\n+  auto r12 = 'c' + std::move(v8);\n+  VERIFY(r12.get_allocator().get_personality() == 8);\n+}\n+void test03()\n+{\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(\"s\",alloc_type(1));\n+  v1.resize(10);\n+  v1.shrink_to_fit();\n+  test_type v2(10000,'x',alloc_type(2));\n+  v2.reserve(10010);\n+\n+  auto r=std::move(v1)+std::move(v2);\n+  VERIFY(r.get_allocator().get_personality() == 1);\n+}\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "3e1d0c3fbad2613b4cd3d491f7711e9d5b4c3a72", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/operator_plus.cc", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Foperator_plus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e678ef74b2726f9c07be2b39712a9ea4eb7119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Foperator_plus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Foperator_plus.cc?ref=f4e678ef74b2726f9c07be2b39712a9ea4eb7119", "patch": "@@ -0,0 +1,152 @@\n+// 2019-04-30  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+#include <ext/throw_allocator.h>\n+\n+using C = wchar_t;\n+using traits = std::char_traits<C>;\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  typedef propagating_allocator<C, true> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(L\"something\",alloc_type(1));\n+  test_type v2(L\"something\",alloc_type(2));\n+  auto r1 = v1 + v2;\n+  VERIFY(r1.get_allocator().get_personality() == 1);\n+\n+  auto r2 = v1 + std::move(v2);\n+  VERIFY(r2.get_allocator().get_personality() == 2);\n+\n+  test_type v3(L\"something\", alloc_type(3));\n+  test_type v4(L\"something\", alloc_type(4));\n+  auto r3 = std::move(v3) + v4;\n+  VERIFY(r3.get_allocator().get_personality() == 3);\n+\n+  auto r4 = std::move(v1) +std::move(v4);\n+  VERIFY(r4.get_allocator().get_personality() == 1);\n+\n+  test_type v5(L\"something\", alloc_type(5));\n+  auto r5 = v5 + L\"str\";\n+  VERIFY(r5.get_allocator().get_personality() == 5);\n+\n+  auto r6 = v5 + L'c';\n+  VERIFY(r6.get_allocator().get_personality() == 5);\n+\n+  auto r7 = std::move(v5) + L\"str\";\n+  VERIFY(r7.get_allocator().get_personality() == 5);\n+\n+  test_type v6(L\"something\", alloc_type(6));\n+  auto r8 = std::move(v6) + L'c';\n+  VERIFY(r8.get_allocator().get_personality() == 6);\n+\n+  test_type v7(L\"something\", alloc_type(7));\n+  auto r9 = L\"str\" + v7;\n+  VERIFY(r9.get_allocator().get_personality() == 7);\n+\n+  auto r10 = L'c' + v7;\n+  VERIFY(r10.get_allocator().get_personality() == 7);\n+\n+  auto r11 = L\"str\" + std::move(v7);\n+  VERIFY(r11.get_allocator().get_personality() == 7);\n+\n+  test_type v8(L\"something\", alloc_type(8));\n+  auto r12 = L'c' + std::move(v8);\n+  VERIFY(r12.get_allocator().get_personality() == 8);\n+}\n+\n+void test02()\n+{\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(L\"something\",alloc_type(1));\n+  test_type v2(L\"something\",alloc_type(2));\n+  auto r1 = v1 + v2;\n+  VERIFY(r1.get_allocator().get_personality() != 1);\n+\n+  auto r2 = v1 + std::move(v2);\n+  VERIFY(r2.get_allocator().get_personality() == 2);\n+\n+  test_type v3(L\"something\", alloc_type(3));\n+  test_type v4(L\"something\", alloc_type(4));\n+  auto r3 = std::move(v3) + v4;\n+  VERIFY(r3.get_allocator().get_personality() == 3);\n+\n+  auto r4 = std::move(v1) +std::move(v4);\n+  VERIFY(r4.get_allocator().get_personality() == 1);\n+\n+  test_type v5(L\"something\", alloc_type(5));\n+  auto r5 = v5 + L\"str\";\n+  VERIFY(r5.get_allocator().get_personality() != 5);\n+\n+  auto r6 = v5 + L'c';\n+  VERIFY(r6.get_allocator().get_personality() != 5);\n+\n+  auto r7 = std::move(v5) + L\"str\";\n+  VERIFY(r7.get_allocator().get_personality() == 5);\n+\n+  test_type v6(L\"something\", alloc_type(6));\n+  auto r8 = std::move(v6) + L'c';\n+  VERIFY(r8.get_allocator().get_personality() == 6);\n+\n+  test_type v7(L\"something\", alloc_type(7));\n+  auto r9 = L\"str\" + v7;\n+  VERIFY(r9.get_allocator().get_personality() != 7);\n+\n+  auto r10 = L'c' + v7;\n+  VERIFY(r10.get_allocator().get_personality() != 7);\n+\n+  auto r11 = L\"str\" + std::move(v7);\n+  VERIFY(r11.get_allocator().get_personality() == 7);\n+\n+  test_type v8(L\"something\", alloc_type(8));\n+  auto r12 = L'c' + std::move(v8);\n+  VERIFY(r12.get_allocator().get_personality() == 8);\n+}\n+void test03()\n+{\n+  typedef propagating_allocator<C, false> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(L\"s\",alloc_type(1));\n+  v1.resize(10);\n+  v1.shrink_to_fit();\n+  test_type v2(10000,L'x',alloc_type(2));\n+  v2.reserve(10010);\n+\n+  auto r=std::move(v1)+std::move(v2);\n+  VERIFY(r.get_allocator().get_personality() == 1);\n+}\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}]}