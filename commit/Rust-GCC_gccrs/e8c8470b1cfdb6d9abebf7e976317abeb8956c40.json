{"sha": "e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThjODQ3MGIxY2ZkYjZkOWFiZWJmN2U5NzYzMTdhYmViODk1NmM0MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-04-21T18:45:00Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-21T18:45:00Z"}, "message": "flow.c (proagate_one_insn): Remove useless assignment.\n\n\t* flow.c (proagate_one_insn): Remove useless assignment.\n\t* jump.c (delete_insn): Tidy.\n\t* loop.c (try_copy_prop): When deleting an instruction with a\n\tREG_RETVAL note, delete the entire libcall sequence.\n\t(loop_delete_insns): New function.\n\t* unroll.c (initial_reg_note_copy): Copy INSN_LIST notes, even if\n\twe're not substituting into them yet.\n\nFrom-SVN: r41486", "tree": {"sha": "a75bbca9f3fbc9da9d02fb12d35775b6d16bb725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a75bbca9f3fbc9da9d02fb12d35775b6d16bb725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/comments", "author": null, "committer": null, "parents": [{"sha": "51f26c450beaa99fc55f62cfb365fb3d7ce07080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f26c450beaa99fc55f62cfb365fb3d7ce07080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f26c450beaa99fc55f62cfb365fb3d7ce07080"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "f829983bde05e7af029e363107d158a622c1b66c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "patch": "@@ -1,3 +1,13 @@\n+2001-04-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* flow.c (proagate_one_insn): Remove useless assignment.\n+\t* jump.c (delete_insn): Tidy.\n+\t* loop.c (try_copy_prop): When deleting an instruction with a\n+\tREG_RETVAL note, delete the entire libcall sequence.\n+\t(loop_delete_insns): New function.\n+\t* unroll.c (initial_reg_note_copy): Copy INSN_LIST notes, even if\n+\twe're not substituting into them yet.\n+\t\n 2001-04-21  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (general_operand_src): Fix a comment typo."}, {"sha": "a4b334d8e41942b1fb14d07f3100f6468250af1e", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "patch": "@@ -3734,10 +3734,7 @@ propagate_one_insn (pbi, insn)\n       pbi->cc0_live = 0;\n \n       if (libcall_is_dead)\n-\t{\n-\t  prev = propagate_block_delete_libcall (pbi->bb, insn, note);\n-\t  insn = NEXT_INSN (prev);\n-\t}\n+\tprev = propagate_block_delete_libcall (pbi->bb, insn, note);\n       else\n \tpropagate_block_delete_insn (pbi->bb, insn);\n "}, {"sha": "e3ed1b4274714dfffda4cf6f02e62b36bdf0cda0", "filename": "gcc/jump.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "patch": "@@ -2823,16 +2823,15 @@ delete_insn (insn)\n      to special NOTEs instead.  When not optimizing, leave them alone.  */\n   if (was_code_label && LABEL_NAME (insn) != 0)\n     {\n-      if (! optimize)\n-\tdont_really_delete = 1;\n-      else if (! dont_really_delete)\n+      if (optimize)\n \t{\n \t  const char *name = LABEL_NAME (insn);\n \t  PUT_CODE (insn, NOTE);\n \t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED_LABEL;\n \t  NOTE_SOURCE_FILE (insn) = name;\n-\t  dont_really_delete = 1;\n \t}\n+\n+      dont_really_delete = 1;\n     }\n   else\n     /* Mark this insn as deleted.  */"}, {"sha": "965f6efa3ebe9f3263f16aa59a76ae539af407b6", "filename": "gcc/loop.c", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "patch": "@@ -9240,17 +9240,52 @@ try_copy_prop (loop, replacement, regno)\n \tfprintf (loop_dump_stream, \"  Replaced reg %d\", regno);\n       if (store_is_first && replaced_last)\n \t{\n-\t  PUT_CODE (init_insn, NOTE);\n-\t  NOTE_LINE_NUMBER (init_insn) = NOTE_INSN_DELETED;\n-\t  if (loop_dump_stream)\n-\t    fprintf (loop_dump_stream, \", deleting init_insn (%d)\",\n-\t\t     INSN_UID (init_insn));\n+\t  rtx first;\n+\t  rtx retval_note;\n+\n+\t  /* Assume we're just deleting INIT_INSN.  */\n+\t  first = init_insn;\n+\t  /* Look for REG_RETVAL note.  If we're deleting the end of\n+\t     the libcall sequence, the whole sequence can go.  */\n+\t  retval_note = find_reg_note (init_insn, REG_RETVAL, NULL_RTX);\n+\t  /* If we found a REG_RETVAL note, find the first instruction\n+\t     in the sequence.  */\n+\t  if (retval_note)\n+\t    first = XEXP (retval_note, 0);\n+\n+\t  /* Delete the instructions.  */\n+\t  loop_delete_insns (first, init_insn);\n \t}\n       if (loop_dump_stream)\n \tfprintf (loop_dump_stream, \".\\n\");\n     }\n }\n \n+/* Replace all the instructions from FIRST up to and including LAST\n+   with NOTE_INSN_DELETED notes.  */\n+\n+static void\n+loop_delete_insns (first, last)\n+     rtx first;\n+     rtx last;\n+{\n+  while (1)\n+    {\n+      PUT_CODE (first, NOTE);\n+      NOTE_LINE_NUMBER (first) = NOTE_INSN_DELETED;\n+      if (loop_dump_stream)\n+\tfprintf (loop_dump_stream, \", deleting init_insn (%d)\",\n+\t\t INSN_UID (first));\n+\n+      /* If this was the LAST instructions we're supposed to delete,\n+\t we're done.  */\n+      if (first == last)\n+\tbreak;\n+\n+      first = NEXT_INSN (first);\n+    }\n+}\n+\n /* Try to replace occurrences of pseudo REGNO with REPLACEMENT within\n    loop LOOP if the order of the sets of these registers can be\n    swapped.  There must be exactly one insn within the loop that sets"}, {"sha": "bec6aa9030483ece704f93593463d63d0abc1275", "filename": "gcc/testsuite/gcc.c-torture/compile/20010421-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010421-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010421-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010421-1.c?ref=e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "patch": "@@ -0,0 +1,8 @@\n+int j;\n+\n+void residual ()\n+{\n+  long double s;\n+  for (j = 3; j < 9; j++)\n+    s -= 3;\n+}"}, {"sha": "a0ffa956f23fd70accea3fea1ec1033eab426899", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c8470b1cfdb6d9abebf7e976317abeb8956c40/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=e8c8470b1cfdb6d9abebf7e976317abeb8956c40", "patch": "@@ -1672,7 +1672,7 @@ initial_reg_note_copy (notes, map)\n     XEXP (copy, 0) = copy_rtx_and_substitute (XEXP (notes, 0), map, 0);\n   else if (GET_CODE (notes) == INSN_LIST)\n     /* Don't substitute for these yet.  */\n-    XEXP (copy, 0) = XEXP (notes, 0);\n+    XEXP (copy, 0) = copy_rtx (XEXP (notes, 0));\n   else\n     abort ();\n "}]}