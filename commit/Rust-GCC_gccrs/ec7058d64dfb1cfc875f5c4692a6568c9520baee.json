{"sha": "ec7058d64dfb1cfc875f5c4692a6568c9520baee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3MDU4ZDY0ZGZiMWNmYzg3NWY1YzQ2OTJhNjU2OGM5NTIwYmFlZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-02T14:08:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-02T14:08:52Z"}, "message": "bitset (_Base_bitset<>::_M_getdata()): Add.\n\n2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/bitset (_Base_bitset<>::_M_getdata()): Add.\n\t(hash<_GLIBCXX_STD_D::bitset<_Nb>>): Add, use the latter.\n\t* include/debug/bitset (hash<std::__debug::bitset<_Nb>>): Add.\n\t* include/profile/bitset (hash<std::__profile::bitset<_Nb>>): Likewise.\n\t* testsuite/23_containers/bitset/hash/1.cc: New.\n\nFrom-SVN: r157165", "tree": {"sha": "e23eda74f735f0342e9ef1bbfc135a5698e27b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e23eda74f735f0342e9ef1bbfc135a5698e27b00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec7058d64dfb1cfc875f5c4692a6568c9520baee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7058d64dfb1cfc875f5c4692a6568c9520baee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7058d64dfb1cfc875f5c4692a6568c9520baee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7058d64dfb1cfc875f5c4692a6568c9520baee/comments", "author": null, "committer": null, "parents": [{"sha": "d9a6979d96fcd19b2aa2660180c3a6ec26909cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a6979d96fcd19b2aa2660180c3a6ec26909cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a6979d96fcd19b2aa2660180c3a6ec26909cb3"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "ec69d26a3a9714f12ebe20868714c6707a4d77d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec7058d64dfb1cfc875f5c4692a6568c9520baee", "patch": "@@ -1,3 +1,11 @@\n+2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/bitset (_Base_bitset<>::_M_getdata()): Add.\n+\t(hash<_GLIBCXX_STD_D::bitset<_Nb>>): Add, use the latter.\n+\t* include/debug/bitset (hash<std::__debug::bitset<_Nb>>): Add.\n+\t* include/profile/bitset (hash<std::__profile::bitset<_Nb>>): Likewise.\n+\t* testsuite/23_containers/bitset/hash/1.cc: New.\n+\n 2010-03-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/43183"}, {"sha": "d611892e68083fcda30d52d42fe32c5a2177fb47", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=ec7058d64dfb1cfc875f5c4692a6568c9520baee", "patch": "@@ -379,6 +379,23 @@ namespace __debug\n     { return __os << __x._M_base(); }\n \n } // namespace __debug\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  // DR 1182.\n+  /// std::hash specialization for bitset.\n+  template<size_t _Nb>\n+    struct hash<std::__debug::bitset<_Nb>>\n+    : public std::unary_function<std::__debug::bitset<_Nb>, size_t>\n+    {\n+      size_t\n+      operator()(const std::__debug::bitset<_Nb>& __b) const\n+      {\n+\tconst size_t __size = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n+\treturn std::_Fnv_hash::hash(__b._M_base()._M_getdata(), __size);\n+      }\n+    };\n+#endif\n+\n } // namespace std\n \n #endif"}, {"sha": "3a988b5b4378a0b48295cf7f3e7a9ce95f68ec64", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=ec7058d64dfb1cfc875f5c4692a6568c9520baee", "patch": "@@ -353,6 +353,23 @@ namespace __profile\n \t       const bitset<_Nb>& __x)\n     { return __os << __x._M_base(); }\n } // namespace __profile\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  // DR 1182.\n+  /// std::hash specialization for bitset.\n+  template<size_t _Nb>\n+    struct hash<std::__profile::bitset<_Nb>>\n+    : public std::unary_function<std::__profile::bitset<_Nb>, size_t>\n+    {\n+      size_t\n+      operator()(const std::__profile::bitset<_Nb>& __b) const\n+      {\n+\tconst size_t __size = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n+\treturn std::_Fnv_hash::hash(__b._M_base()._M_getdata(), __size);\n+      }\n+    };\n+#endif\n+\n } // namespace std\n \n #endif"}, {"sha": "23a2e157c01894a129272ed8345713cf2cc801b8", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=ec7058d64dfb1cfc875f5c4692a6568c9520baee", "patch": "@@ -114,6 +114,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_getword(size_t __pos) const\n       { return _M_w[_S_whichword(__pos)]; }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const char*\n+      _M_getdata() const\n+      { return reinterpret_cast<const char*>(_M_w); }\n+#endif\n+\n       _WordT&\n       _M_hiword()\n       { return _M_w[_Nw - 1]; }\n@@ -399,6 +405,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_getword(size_t) const\n       { return _M_w; }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const char*\n+      _M_getdata() const\n+      { return reinterpret_cast<const char*>(&_M_w); }\n+#endif\n+\n       _WordT&\n       _M_hiword()\n       { return _M_w; }\n@@ -540,6 +552,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \treturn *new _WordT; \n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const char*\n+      _M_getdata() const\n+      { return reinterpret_cast<const char*>(&_M_getword(0)); }\n+#endif\n+\n       _WordT\n       _M_hiword() const\n       { return 0; }\n@@ -708,6 +726,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    _S_do_sanitize(this->_M_hiword());\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename> friend class hash;\n+#endif\n+\n     public:\n       /**\n        *  This encapsulates the concept of a single bit.  An instance of this\n@@ -1470,6 +1492,25 @@ _GLIBCXX_END_NESTED_NAMESPACE\n #undef _GLIBCXX_BITSET_WORDS\n #undef _GLIBCXX_BITSET_BITS_PER_WORD\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+namespace std\n+{\n+  // DR 1182.\n+  /// std::hash specialization for bitset.\n+  template<size_t _Nb>\n+    struct hash<_GLIBCXX_STD_D::bitset<_Nb>>\n+    : public std::unary_function<_GLIBCXX_STD_D::bitset<_Nb>, size_t>\n+    {\n+      size_t\n+      operator()(const _GLIBCXX_STD_D::bitset<_Nb>& __b) const\n+      {\n+\tconst size_t __size = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n+\treturn std::_Fnv_hash::hash(__b._M_getdata(), __size);\n+      }\n+    };\n+}\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n #ifdef _GLIBCXX_DEBUG\n # include <debug/bitset>\n #endif"}, {"sha": "84dc31aba4a413ba1a86fc24258a4993e7f21340", "filename": "libstdc++-v3/testsuite/23_containers/bitset/hash/1.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fhash%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7058d64dfb1cfc875f5c4692a6568c9520baee/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fhash%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fhash%2F1.cc?ref=ec7058d64dfb1cfc875f5c4692a6568c9520baee", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bitset>\n+\n+// bitset hash\n+std::hash<std::bitset<0>>    h1;\n+std::hash<std::bitset<10>>   h2;\n+std::hash<std::bitset<100>>  h3;\n+std::hash<std::bitset<1000>> h4;"}]}