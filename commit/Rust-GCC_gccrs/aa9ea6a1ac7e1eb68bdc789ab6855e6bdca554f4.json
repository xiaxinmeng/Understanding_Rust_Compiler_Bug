{"sha": "aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5ZWE2YTFhYzdlMWViNjhiZGM3ODlhYjY4NTVlNmJkY2E1NTRmNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:14:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:14:44Z"}, "message": "[multiple changes]\n\n2010-06-17  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (Non_VMS_Usage): Do not issue usage for gnat sync.\n\tUpdate the last line of the usage, indicating what commands do not\n\taccept project file switches.\n\t* vms_conv.adb: Do not issue usage line for GNAT SYNC\n\t* vms_data.ads: Fix errors in the qualifiers /LOGFILE and /MAIN of\n\tGNAT ELIM.\n\t* gnat_ugn.texi: Document the relaxed rules for library directories in\n\texternally built library projects.\n\n2010-06-17  Doug Rupp  <rupp@adacore.com>\n\n\t* s-auxdec-vms_64.ads: Make boolean and arithmetic operations intrinsic\n\twhere possible.\n\t* s-auxdec-vms-alpha.adb: Remove kludges for aforemention.\n\t* gcc-interface/Makefile.in: Update VMS target pairs.\n\n2010-06-17  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* adaint.c: Reorganized in order to avoid use of GetProcessId to stay\n\tcompatible with Windows NT 4.0 which doesn't provide this function.\n\n2010-06-17  Vincent Celier  <celier@adacore.com>\n\n\t* ali-util.adb (Time_Stamp_Mismatch): In Verbose mode, if there is\n\tdifferent timestamps but the checksum is the same, issue a short\n\tmessage saying so.\n\n2010-06-17  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-interr.adb (Finalize): If the Abort_Task signal is set to system,\n\tit means that we cannot reset interrupt handlers since this would\n\trequire potentially sending the abort signal to the Server_Task.\n\nFrom-SVN: r160911", "tree": {"sha": "43db9e38c43410e0eeefdcaa7825c5d85ca120ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43db9e38c43410e0eeefdcaa7825c5d85ca120ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/comments", "author": null, "committer": null, "parents": [{"sha": "498c378f90cfba11e114eca9284664b5ca4b151b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498c378f90cfba11e114eca9284664b5ca4b151b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498c378f90cfba11e114eca9284664b5ca4b151b"}], "stats": {"total": 389, "additions": 115, "deletions": 274}, "files": [{"sha": "b47018ab80d4fa16a04c767dd0d340b63fd0b4ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -1,3 +1,38 @@\n+2010-06-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Non_VMS_Usage): Do not issue usage for gnat sync.\n+\tUpdate the last line of the usage, indicating what commands do not\n+\taccept project file switches.\n+\t* vms_conv.adb: Do not issue usage line for GNAT SYNC\n+\t* vms_data.ads: Fix errors in the qualifiers /LOGFILE and /MAIN of\n+\tGNAT ELIM.\n+\t* gnat_ugn.texi: Document the relaxed rules for library directories in\n+\texternally built library projects.\n+\n+2010-06-17  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-auxdec-vms_64.ads: Make boolean and arithmetic operations intrinsic\n+\twhere possible.\n+\t* s-auxdec-vms-alpha.adb: Remove kludges for aforemention.\n+\t* gcc-interface/Makefile.in: Update VMS target pairs.\n+\n+2010-06-17  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* adaint.c: Reorganized in order to avoid use of GetProcessId to stay\n+\tcompatible with Windows NT 4.0 which doesn't provide this function.\n+\n+2010-06-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* ali-util.adb (Time_Stamp_Mismatch): In Verbose mode, if there is\n+\tdifferent timestamps but the checksum is the same, issue a short\n+\tmessage saying so.\n+\n+2010-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-interr.adb (Finalize): If the Abort_Task signal is set to system,\n+\tit means that we cannot reset interrupt handlers since this would\n+\trequire potentially sending the abort signal to the Server_Task.\n+\n 2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch4.adb: expand NOT for VMS types."}, {"sha": "d73f63dbf291ac96ec0664ab7236eb1520ad2f60", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -2474,7 +2474,7 @@ static HANDLE *HANDLES_LIST = NULL;\n static int *PID_LIST = NULL, plist_length = 0, plist_max_length = 0;\n \n static void\n-add_handle (HANDLE h)\n+add_handle (HANDLE h, int pid)\n {\n \n   /* -------------------- critical section -------------------- */\n@@ -2490,7 +2490,7 @@ add_handle (HANDLE h)\n     }\n \n   HANDLES_LIST[plist_length] = h;\n-  PID_LIST[plist_length] = GetProcessId (h);\n+  PID_LIST[plist_length] = pid;\n   ++plist_length;\n \n   (*Unlock_Task) ();\n@@ -2521,8 +2521,8 @@ __gnat_win32_remove_handle (HANDLE h, int pid)\n   /* -------------------- critical section -------------------- */\n }\n \n-static HANDLE\n-win32_no_block_spawn (char *command, char *args[])\n+static void\n+win32_no_block_spawn (char *command, char *args[], HANDLE *h, int *pid)\n {\n   BOOL result;\n   STARTUPINFO SI;\n@@ -2587,10 +2587,14 @@ win32_no_block_spawn (char *command, char *args[])\n   if (result == TRUE)\n     {\n       CloseHandle (PI.hThread);\n-      return PI.hProcess;\n+      *h = PI.hProcess;\n+      *pid = PI.dwProcessId;\n     }\n   else\n-    return NULL;\n+    {\n+      *h = NULL;\n+      *pid = 0;\n+    }\n }\n \n static int\n@@ -2627,7 +2631,7 @@ win32_wait (int *status)\n   h = hl[res - WAIT_OBJECT_0];\n \n   GetExitCodeProcess (h, &exitcode);\n-  pid = GetProcessId (h);\n+  pid = PID_LIST [res - WAIT_OBJECT_0];\n   __gnat_win32_remove_handle (h, -1);\n \n   free (hl);\n@@ -2661,12 +2665,13 @@ __gnat_portable_no_block_spawn (char *args[])\n #elif defined (_WIN32)\n \n   HANDLE h = NULL;\n+  int pid;\n \n-  h = win32_no_block_spawn (args[0], args);\n+  win32_no_block_spawn (args[0], args, &h, &pid);\n   if (h != NULL)\n     {\n-      add_handle (h);\n-      return GetProcessId (h);\n+      add_handle (h, pid);\n+      return pid;\n     }\n   else\n     return -1;"}, {"sha": "3443fe35da6967c22b9d9c54674163f2f80edf51", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -481,6 +481,14 @@ package body ALI.Util is\n                  (Get_File_Checksum (Sdep.Table (D).Sfile),\n                   Source.Table (Src).Checksum)\n             then\n+               if Verbose_Mode then\n+                  Write_Str (\"   \");\n+                  Write_Str (Get_Name_String (Sdep.Table (D).Sfile));\n+                  Write_Str (\": up to date, different timestamps \" &\n+                             \"but same checksum\");\n+                  Write_Eol;\n+               end if;\n+\n                Sdep.Table (D).Stamp := Source.Table (Src).Stamp;\n             end if;\n "}, {"sha": "a6ceeb0e84c475d67f5f0f7937f3326a36018ac0", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -1476,11 +1476,10 @@ ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ)))\n       g-enblsp.adb<g-enblsp-vms-ia64.adb \\\n       g-trasym.adb<g-trasym-vms-ia64.adb \\\n       s-asthan.adb<s-asthan-vms-ia64.adb \\\n+      s-auxdec.adb<s-auxdec-vms-ia64.adb \\\n       s-osinte.adb<s-osinte-vms-ia64.adb \\\n       s-osinte.ads<s-osinte-vms-ia64.ads \\\n       s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n-      g-trasym.ads<g-trasym-unimplemented.ads \\\n-      g-trasym.adb<g-trasym-unimplemented.adb \\\n       system.ads<system-vms-ia64.ads\n \n     LIBGNAT_TARGET_PAIRS_AUX2 = \\\n@@ -1491,12 +1490,12 @@ ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ)))\n       LIBGNAT_TARGET_PAIRS_AUX1 = \\\n         g-enblsp.adb<g-enblsp-vms-alpha.adb \\\n         g-trasym.adb<g-trasym-vms-alpha.adb \\\n-        s-auxdec.adb<s-auxdec-vms-alpha.adb \\\n-        s-traent.adb<s-traent-vms.adb \\\n-        s-traent.ads<s-traent-vms.ads \\\n         s-asthan.adb<s-asthan-vms-alpha.adb \\\n+        s-auxdec.adb<s-auxdec-vms-alpha.adb \\\n         s-osinte.adb<s-osinte-vms.adb \\\n         s-osinte.ads<s-osinte-vms.ads \\\n+        s-traent.adb<s-traent-vms.adb \\\n+        s-traent.ads<s-traent-vms.ads \\\n         s-vaflop.adb<s-vaflop-vms-alpha.adb \\\n         system.ads<system-vms_64.ads\n "}, {"sha": "ccc2373b78eb568286a3c2f2c233f2ae8850cd67", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -14048,9 +14048,9 @@ to be acceptable on all platforms.\n \n The @code{Library_Dir} attribute has a string value that designates the path\n (absolute or relative) of the directory where the library will reside.\n-It must designate an existing directory, and this directory must be writable,\n-different from the project's object directory and from any source directory\n-in the project tree.\n+It must designate an existing directory. When the project is not externally\n+built, this directory must be writable, different from the project's object\n+directory and from any source directory in the project tree.\n \n If both @code{Library_Name} and @code{Library_Dir} are specified and\n are legal, then the project file defines a library project.  The optional\n@@ -14073,9 +14073,10 @@ to indicate what kind of library should be build.\n The @code{Library_ALI_Dir} attribute may be specified to indicate the\n directory where the ALI files of the library will be copied. When it is\n not specified, the ALI files are copied to the directory specified in\n-attribute @code{Library_Dir}. The directory specified by @code{Library_ALI_Dir}\n-must be writable and different from the project's object directory and from\n-any source directory in the project tree.\n+attribute @code{Library_Dir}. Except when the project is externally built, the\n+directory specified by @code{Library_ALI_Dir} must be writable and different\n+from the project's object directory and from any source directory in the\n+project tree.\n \n The @code{Library_Version} attribute has a string value whose interpretation\n is platform dependent. It has no effect on VMS and Windows. On Unix, it is"}, {"sha": "57371aa7d17441d35afdfc00d321a85f25bfd8ee", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -1272,7 +1272,10 @@ procedure GNATCmd is\n       New_Line;\n \n       for C in Command_List'Range loop\n-         if not Command_List (C).VMS_Only then\n+\n+         --  No usage for VMS only command or for Sync\n+\n+         if (not Command_List (C).VMS_Only) and then C /= Sync then\n             if Targparm.AAMP_On_Target then\n                Put (\"gnaampcmd \");\n             else\n@@ -1306,7 +1309,7 @@ procedure GNATCmd is\n       end loop;\n \n       New_Line;\n-      Put_Line (\"Commands find, list, metric, pretty, stack, stub and xref \" &\n+      Put_Line (\"All commands except chop, krunch and preprocess \" &\n                 \"accept project file switches -vPx, -Pprj and -Xnam=val\");\n       New_Line;\n    end Non_VMS_Usage;"}, {"sha": "063b296f3ac0a46be77408347e0c7bffcb98c52e", "filename": "gcc/ada/s-auxdec-vms-alpha.adb", "status": "modified", "additions": 2, "deletions": 235, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fs-auxdec-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fs-auxdec-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms-alpha.adb?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -29,83 +29,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  This is the Alpha/VMS version.\n+\n pragma Style_Checks (All_Checks);\n --  Turn off alpha ordering check on subprograms, this unit is laid\n --  out to correspond to the declarations in the DEC 83 System unit.\n \n with System.Machine_Code; use System.Machine_Code;\n package body System.Aux_DEC is\n \n-   -----------------------------------\n-   -- Operations on Largest_Integer --\n-   -----------------------------------\n-\n-   --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects)\n-\n-   type LIU is mod 2 ** Largest_Integer'Size;\n-   --  Unsigned type of same length as Largest_Integer\n-\n-   function To_LI   is new Ada.Unchecked_Conversion (LIU, Largest_Integer);\n-   function From_LI is new Ada.Unchecked_Conversion (Largest_Integer, LIU);\n-\n-   function \"not\" (Left : Largest_Integer) return Largest_Integer is\n-   begin\n-      return To_LI (not From_LI (Left));\n-   end \"not\";\n-\n-   function \"and\" (Left, Right : Largest_Integer) return Largest_Integer is\n-   begin\n-      return To_LI (From_LI (Left) and From_LI (Right));\n-   end \"and\";\n-\n-   function \"or\"  (Left, Right : Largest_Integer) return Largest_Integer is\n-   begin\n-      return To_LI (From_LI (Left) or From_LI (Right));\n-   end \"or\";\n-\n-   function \"xor\" (Left, Right : Largest_Integer) return Largest_Integer is\n-   begin\n-      return To_LI (From_LI (Left) xor From_LI (Right));\n-   end \"xor\";\n-\n-   --------------------------------------\n-   -- Arithmetic Operations on Address --\n-   --------------------------------------\n-\n-   --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects)\n-\n-   Asiz : constant Integer := Integer (Address'Size) - 1;\n-\n-   type SA is range -(2 ** Asiz) .. 2 ** Asiz - 1;\n-   --  Signed type of same size as Address\n-\n-   function To_A   is new Ada.Unchecked_Conversion (SA, Address);\n-   function From_A is new Ada.Unchecked_Conversion (Address, SA);\n-\n-   function \"+\" (Left : Address; Right : Integer) return Address is\n-   begin\n-      return To_A (From_A (Left) + SA (Right));\n-   end \"+\";\n-\n-   function \"+\" (Left : Integer; Right : Address) return Address is\n-   begin\n-      return To_A (SA (Left) + From_A (Right));\n-   end \"+\";\n-\n-   function \"-\" (Left : Address; Right : Address) return Integer is\n-      pragma Unsuppress (All_Checks);\n-      --  Because this can raise Constraint_Error for 64-bit addresses\n-   begin\n-      return Integer (From_A (Left) - From_A (Right));\n-   end \"-\";\n-\n-   function \"-\" (Left : Address; Right : Integer) return Address is\n-   begin\n-      return To_A (From_A (Left) - SA (Right));\n-   end \"-\";\n-\n    ------------------------\n    -- Fetch_From_Address --\n    ------------------------\n@@ -130,171 +62,6 @@ package body System.Aux_DEC is\n       Ptr.all := T;\n    end Assign_To_Address;\n \n-   ---------------------------------\n-   -- Operations on Unsigned_Byte --\n-   ---------------------------------\n-\n-   --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n-\n-   type BU is mod 2 ** Unsigned_Byte'Size;\n-   --  Unsigned type of same length as Unsigned_Byte\n-\n-   function To_B   is new Ada.Unchecked_Conversion (BU, Unsigned_Byte);\n-   function From_B is new Ada.Unchecked_Conversion (Unsigned_Byte, BU);\n-\n-   function \"not\" (Left : Unsigned_Byte) return Unsigned_Byte is\n-   begin\n-      return To_B (not From_B (Left));\n-   end \"not\";\n-\n-   function \"and\" (Left, Right : Unsigned_Byte) return Unsigned_Byte is\n-   begin\n-      return To_B (From_B (Left) and From_B (Right));\n-   end \"and\";\n-\n-   function \"or\"  (Left, Right : Unsigned_Byte) return Unsigned_Byte is\n-   begin\n-      return To_B (From_B (Left) or From_B (Right));\n-   end \"or\";\n-\n-   function \"xor\" (Left, Right : Unsigned_Byte) return Unsigned_Byte is\n-   begin\n-      return To_B (From_B (Left) xor From_B (Right));\n-   end \"xor\";\n-\n-   ---------------------------------\n-   -- Operations on Unsigned_Word --\n-   ---------------------------------\n-\n-   --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n-\n-   type WU is mod 2 ** Unsigned_Word'Size;\n-   --  Unsigned type of same length as Unsigned_Word\n-\n-   function To_W   is new Ada.Unchecked_Conversion (WU, Unsigned_Word);\n-   function From_W is new Ada.Unchecked_Conversion (Unsigned_Word, WU);\n-\n-   function \"not\" (Left : Unsigned_Word) return Unsigned_Word is\n-   begin\n-      return To_W (not From_W (Left));\n-   end \"not\";\n-\n-   function \"and\" (Left, Right : Unsigned_Word) return Unsigned_Word is\n-   begin\n-      return To_W (From_W (Left) and From_W (Right));\n-   end \"and\";\n-\n-   function \"or\"  (Left, Right : Unsigned_Word) return Unsigned_Word is\n-   begin\n-      return To_W (From_W (Left) or From_W (Right));\n-   end \"or\";\n-\n-   function \"xor\" (Left, Right : Unsigned_Word) return Unsigned_Word is\n-   begin\n-      return To_W (From_W (Left) xor From_W (Right));\n-   end \"xor\";\n-\n-   -------------------------------------\n-   -- Operations on Unsigned_Longword --\n-   -------------------------------------\n-\n-   --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n-\n-   type LWU is mod 2 ** Unsigned_Longword'Size;\n-   --  Unsigned type of same length as Unsigned_Longword\n-\n-   function To_LW   is new Ada.Unchecked_Conversion (LWU, Unsigned_Longword);\n-   function From_LW is new Ada.Unchecked_Conversion (Unsigned_Longword, LWU);\n-\n-   function \"not\" (Left : Unsigned_Longword) return Unsigned_Longword is\n-   begin\n-      return To_LW (not From_LW (Left));\n-   end \"not\";\n-\n-   function \"and\" (Left, Right : Unsigned_Longword) return Unsigned_Longword is\n-   begin\n-      return To_LW (From_LW (Left) and From_LW (Right));\n-   end \"and\";\n-\n-   function \"or\"  (Left, Right : Unsigned_Longword) return Unsigned_Longword is\n-   begin\n-      return To_LW (From_LW (Left) or From_LW (Right));\n-   end \"or\";\n-\n-   function \"xor\" (Left, Right : Unsigned_Longword) return Unsigned_Longword is\n-   begin\n-      return To_LW (From_LW (Left) xor From_LW (Right));\n-   end \"xor\";\n-\n-   -------------------------------\n-   -- Operations on Unsigned_32 --\n-   -------------------------------\n-\n-   --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n-\n-   type U32 is mod 2 ** Unsigned_32'Size;\n-   --  Unsigned type of same length as Unsigned_32\n-\n-   function To_U32   is new Ada.Unchecked_Conversion (U32, Unsigned_32);\n-   function From_U32 is new Ada.Unchecked_Conversion (Unsigned_32, U32);\n-\n-   function \"not\" (Left : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return To_U32 (not From_U32 (Left));\n-   end \"not\";\n-\n-   function \"and\" (Left, Right : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return To_U32 (From_U32 (Left) and From_U32 (Right));\n-   end \"and\";\n-\n-   function \"or\"  (Left, Right : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return To_U32 (From_U32 (Left) or From_U32 (Right));\n-   end \"or\";\n-\n-   function \"xor\" (Left, Right : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return To_U32 (From_U32 (Left) xor From_U32 (Right));\n-   end \"xor\";\n-\n-   -------------------------------------\n-   -- Operations on Unsigned_Quadword --\n-   -------------------------------------\n-\n-   --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n-\n-   type QWU is mod 2 ** 64;  -- 64 = Unsigned_Quadword'Size\n-   --  Unsigned type of same length as Unsigned_Quadword\n-\n-   function To_QW   is new Ada.Unchecked_Conversion (QWU, Unsigned_Quadword);\n-   function From_QW is new Ada.Unchecked_Conversion (Unsigned_Quadword, QWU);\n-\n-   function \"not\" (Left : Unsigned_Quadword) return Unsigned_Quadword is\n-   begin\n-      return To_QW (not From_QW (Left));\n-   end \"not\";\n-\n-   function \"and\" (Left, Right : Unsigned_Quadword) return Unsigned_Quadword is\n-   begin\n-      return To_QW (From_QW (Left) and From_QW (Right));\n-   end \"and\";\n-\n-   function \"or\"  (Left, Right : Unsigned_Quadword) return Unsigned_Quadword is\n-   begin\n-      return To_QW (From_QW (Left) or From_QW (Right));\n-   end \"or\";\n-\n-   function \"xor\" (Left, Right : Unsigned_Quadword) return Unsigned_Quadword is\n-   begin\n-      return To_QW (From_QW (Left) xor From_QW (Right));\n-   end \"xor\";\n-\n    -----------------------\n    -- Clear_Interlocked --\n    -----------------------"}, {"sha": "3a6d221911d9f8a1c35b4d8d639fbfa193fe0395", "filename": "gcc/ada/s-auxdec-vms_64.ads", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fs-auxdec-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fs-auxdec-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms_64.ads?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -107,10 +107,13 @@ package System.Aux_DEC is\n    Address_Size       : constant := Standard'Address_Size;\n    Short_Address_Size : constant := 32;\n \n-   function \"+\" (Left : Address; Right : Integer) return Address;\n-   function \"+\" (Left : Integer; Right : Address) return Address;\n-   function \"-\" (Left : Address; Right : Address) return Integer;\n-   function \"-\" (Left : Address; Right : Integer) return Address;\n+   function \"+\" (Left : Address; Right : Long_Integer) return Address;\n+   function \"+\" (Left : Long_Integer; Right : Address) return Address;\n+   function \"-\" (Left : Address; Right : Address) return Long_Integer;\n+   function \"-\" (Left : Address; Right : Long_Integer) return Address;\n+\n+   pragma Import (Intrinsic, \"+\");\n+   pragma Import (Intrinsic, \"-\");\n \n    generic\n       type Target is private;\n@@ -461,12 +464,10 @@ private\n    --  them intrinsic, since the backend can handle them, but the front\n    --  end is not prepared to deal with them, so at least inline them.\n \n-   pragma Inline_Always (\"+\");\n-   pragma Inline_Always (\"-\");\n-   pragma Inline_Always (\"not\");\n-   pragma Inline_Always (\"and\");\n-   pragma Inline_Always (\"or\");\n-   pragma Inline_Always (\"xor\");\n+   pragma Import (Intrinsic, \"not\");\n+   pragma Import (Intrinsic, \"and\");\n+   pragma Import (Intrinsic, \"or\");\n+   pragma Import (Intrinsic, \"xor\");\n \n    --  Other inlined subprograms\n "}, {"sha": "3d33f6c9e13f75807de85ab868e18035497a8da2", "filename": "gcc/ada/s-interr.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.adb?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -367,11 +367,27 @@ package body System.Interrupts is\n    --------------\n \n    procedure Finalize (Object : in out Static_Interrupt_Protection) is\n+      function State\n+        (Int : System.Interrupt_Management.Interrupt_ID) return Character;\n+      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+      --  Get interrupt state for interrupt number Int. Defined in init.c\n+\n+      Default : constant Character := 's';\n+      --    's'   Interrupt_State pragma set state to System (use \"default\"\n+      --           system handler)\n+\n    begin\n       --  ??? loop to be executed only when we're not doing library level\n       --  finalization, since in this case all interrupt tasks are gone.\n \n-      if not Interrupt_Manager'Terminated then\n+      --  If the Abort_Task signal is set to system, it means that we cannot\n+      --  reset interrupt handlers since this would require sending the abort\n+      --  signal to the Server_Task\n+\n+      if not Interrupt_Manager'Terminated\n+        and then State (System.Interrupt_Management.Abort_Task_Interrupt)\n+                  /= Default\n+      then\n          for N in reverse Object.Previous_Handlers'Range loop\n             Interrupt_Manager.Attach_Handler\n               (New_Handler => Object.Previous_Handlers (N).Handler,"}, {"sha": "e9aba4906eb937a819d56b0e2e835cf612da03c7", "filename": "gcc/ada/vms_conv.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fvms_conv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fvms_conv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_conv.adb?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -2274,9 +2274,15 @@ package body VMS_Conv is\n          New_Line;\n \n          while Commands /= null loop\n-            Put (Commands.Usage.all);\n-            Set_Col (53);\n-            Put_Line (Commands.Unix_String.all);\n+\n+            --  No usage for GNAT SYNC\n+\n+            if Commands.Command /= Sync then\n+               Put (Commands.Usage.all);\n+               Set_Col (53);\n+               Put_Line (Commands.Unix_String.all);\n+            end if;\n+\n             Commands := Commands.Next;\n          end loop;\n "}, {"sha": "564deb34284a7df86c7930f1b85aadb20682e186", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "patch": "@@ -3637,14 +3637,14 @@ package VMS_Data is\n    --\n    --   Duplicate all the output sent to Stderr into a default log file.\n \n-   S_Elim_Logfile : aliased constant S := \"/LOGFILE=@ \"                    &\n+   S_Elim_Logfile : aliased constant S := \"/LOGFILE=@\"                     &\n                                           \"-l@\";\n \n    --      /LOGFILE=logfilename\n    --\n    --   Duplicate all the output sent to Stderr into a specified log file.\n \n-   S_Elim_Main    : aliased constant S := \"/MAIN=@ \"                       &\n+   S_Elim_Main    : aliased constant S := \"/MAIN=@\"                        &\n                                           \"-main=@\";\n \n    --      /MAIN=filename"}]}