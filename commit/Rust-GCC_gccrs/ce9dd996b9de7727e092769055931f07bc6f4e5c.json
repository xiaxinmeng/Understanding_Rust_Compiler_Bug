{"sha": "ce9dd996b9de7727e092769055931f07bc6f4e5c", "node_id": "C_kwDOANBUbNoAKGNlOWRkOTk2YjlkZTc3MjdlMDkyNzY5MDU1OTMxZjA3YmM2ZjRlNWM", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:28:00Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:21Z"}, "message": "arm: improve tests for viwdupq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u8.c: Likewise.", "tree": {"sha": "9ac0578ac2289c550d22c83240ea6ace8496b02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac0578ac2289c550d22c83240ea6ace8496b02a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce9dd996b9de7727e092769055931f07bc6f4e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9dd996b9de7727e092769055931f07bc6f4e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9dd996b9de7727e092769055931f07bc6f4e5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9dd996b9de7727e092769055931f07bc6f4e5c/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63992a20ae196be73acc0098a957b6e11dbca53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63992a20ae196be73acc0098a957b6e11dbca53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63992a20ae196be73acc0098a957b6e11dbca53"}], "stats": {"total": 764, "additions": 658, "deletions": 106}, "files": [{"sha": "67a2465f435afe5e1ee91931a7edbde15b235320", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_n_u16.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u16.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m_n_u16 (inactive, a, b, 2, p);\n+  return viwdupq_m_n_u16 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m (inactive, a, b, 2, p);\n+  return viwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9fc2518acc59aa8266fd2705c4904965b671b356", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_n_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u32.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m_n_u32 (inactive, a, b, 4, p);\n+  return viwdupq_m_n_u32 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m (inactive, a, b, 4, p);\n+  return viwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "39f4071bfa11be8fe6a45ad1dfdec1a3bc4de8c6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_n_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u8.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m_n_u8 (inactive, a, b, 8, p);\n+  return viwdupq_m_n_u8 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m (inactive, a, b, 8, p);\n+  return viwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8bb680e0d77c7a39b7bc8f911b12825c23802323", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u16.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u16.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m_wb_u16 (inactive, a, b, 2, p);\n+  return viwdupq_m_wb_u16 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m (inactive, a, b, 2, p);\n+  return viwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2dc8d5f3442a0617312ce0b827c9c3e16586c682", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u32.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m_wb_u32 (inactive, a, b, 4, p);\n+  return viwdupq_m_wb_u32 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m (inactive, a, b, 4, p);\n+  return viwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ff3a5f520e8443541cf5db181c8d7bad9930530d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u8.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m_wb_u8 (inactive, a, b, 8, p);\n+  return viwdupq_m_wb_u8 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_m (inactive, a, b, 8, p);\n+  return viwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5f37290759a6472e571f8cc4634971471dfd29ea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_n_u16.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u16.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tviwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a, uint32_t b)\n {\n-  return viwdupq_n_u16 (a, b, 2);\n+  return viwdupq_n_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tviwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a, uint32_t b)\n {\n-  return viwdupq_u16 (a, b, 2);\n+  return viwdupq_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tviwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return viwdupq_u16 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "de93f8a7ec45bd095ad30b8be364c30707da1ea6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_n_u32.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u32.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tviwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a, uint32_t b)\n {\n-  return viwdupq_n_u32 (a, b, 4);\n+  return viwdupq_n_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tviwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a, uint32_t b)\n {\n-  return viwdupq_u32 (a, b, 4);\n+  return viwdupq_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tviwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return viwdupq_u32 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "089025c340108c1886813597cab266e5399b86eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_n_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u8.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tviwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a, uint32_t b)\n {\n   return viwdupq_n_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tviwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a, uint32_t b)\n {\n   return viwdupq_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tviwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return viwdupq_u8 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fc3e9c6fac44e1c4cc83ce0d0b100ec80aeb1b1b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_wb_u16.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u16.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tviwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (uint32_t * a, uint32_t b)\n+foo (uint32_t *a, uint32_t b)\n {\n-  return viwdupq_wb_u16 (a, b, 4);\n+  return viwdupq_wb_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tviwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (uint32_t * a, uint32_t b)\n+foo1 (uint32_t *a, uint32_t b)\n {\n-  return viwdupq_u16 (a, b, 4);\n+  return viwdupq_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tviwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return viwdupq_u16 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4c098dd8f02b56770123861190d4218d4907bbb2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_wb_u32.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u32.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tviwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (uint32_t * a, uint32_t b)\n+foo (uint32_t *a, uint32_t b)\n {\n-  return viwdupq_wb_u32 (a, b, 8);\n+  return viwdupq_wb_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tviwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (uint32_t * a, uint32_t b)\n+foo1 (uint32_t *a, uint32_t b)\n {\n-  return viwdupq_u32 (a, b, 8);\n+  return viwdupq_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tviwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return viwdupq_u32 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "44cb53fe344ef1e6cf4e45678cb5861cb47c0b37", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_wb_u8.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u8.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tviwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (uint32_t * a, uint32_t b)\n+foo (uint32_t *a, uint32_t b)\n {\n-  return viwdupq_wb_u8 (a, b, 2);\n+  return viwdupq_wb_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tviwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (uint32_t * a, uint32_t b)\n+foo1 (uint32_t *a, uint32_t b)\n {\n-  return viwdupq_u8 (a, b, 2);\n+  return viwdupq_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tviwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return viwdupq_u8 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2242877881f676d0c2504f6e279f381391f13079", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_n_u16.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u16.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_n_u16 (a, b, 2, p);\n+  return viwdupq_x_n_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_u16 (a, b, 2, p);\n+  return viwdupq_x_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (mve_pred16_t p)\n+{\n+  return viwdupq_x_u16 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4b2b650e21a4a1d705acee07ab44e89f9aadb3c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_n_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u32.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_n_u32 (a, b, 4, p);\n+  return viwdupq_x_n_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_u32 (a, b, 4, p);\n+  return viwdupq_x_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (mve_pred16_t p)\n+{\n+  return viwdupq_x_u32 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "873952b6c2eec1221a426edda00806b4d80dc203", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_n_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u8.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_n_u8 (a, b, 8, p);\n+  return viwdupq_x_n_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_u8 (a, b, 8, p);\n+  return viwdupq_x_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (mve_pred16_t p)\n+{\n+  return viwdupq_x_u8 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b6c9479738083263e0180d765a6b9d5f6cef4bec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u16.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u16.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_wb_u16 (a, b, 8, p);\n+  return viwdupq_x_wb_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_u16 (a, b, 8, p);\n+  return viwdupq_x_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (mve_pred16_t p)\n+{\n+  return viwdupq_x_u16 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5fd84963d019ddc784ee0cfd0475a70b1ee68ad5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u32.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u32.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_wb_u32 (a, b, 2, p);\n+  return viwdupq_x_wb_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_u32 (a, b, 2, p);\n+  return viwdupq_x_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (mve_pred16_t p)\n+{\n+  return viwdupq_x_u32 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "abbb40fa8da92c083d069fdceef137febd848d1b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u8.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9dd996b9de7727e092769055931f07bc6f4e5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u8.c?ref=ce9dd996b9de7727e092769055931f07bc6f4e5c", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_wb_u8 (a, b, 4, p);\n+  return viwdupq_x_wb_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return viwdupq_x_u8 (a, b, 4, p);\n+  return viwdupq_x_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tviwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (mve_pred16_t p)\n+{\n+  return viwdupq_x_u8 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}