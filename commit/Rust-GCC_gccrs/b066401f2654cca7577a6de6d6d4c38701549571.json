{"sha": "b066401f2654cca7577a6de6d6d4c38701549571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2NjQwMWYyNjU0Y2NhNzU3N2E2ZGU2ZDZkNGMzODcwMTU0OTU3MQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-08-05T04:00:57Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-05T04:00:57Z"}, "message": "pretty-print.h (pp_base): Remove.\n\n\t* pretty-print.h (pp_base): Remove.  Adjust dependent macros.\n\t* diagnostic.h (diagnostic_flush_buffer): Adjust.\n\t* pretty-print.c (pp_formatted_text_data): Likewise.\n\t(pp_indent): Rename from pp_base_indent.\n\t(pp_format): Rename from pp_base_format.\n\t(pp_output_formatted_text): Rename from pp_base_output_formatted_text.\n\t(pp_format_verbatim): Rename from pp_base_format_verbatim.\n\t(pp_flush): Rename from pp_base_flush.\n\t(pp_set_line_maximum_length): Rename from\n\tpp_base_set_line_maximum_length.\n\t(pp_clear_output_area): Rename from pp_base_clear_output_area.\n\t(pp_set_prefix): Rename from pp_base_set_prefix.\n\t(pp_destroy_prefix): Rename from pp_base_destroy_prefix.\n\t(pp_emit_prefix): Rename from pp_base_emit_prefix.\n\t(pp_append_text): Rename from pp_base_append_text.\n\t(pp_formatted_text): Rename from pp_base_formatted_text.\n\t(pp_last_position_in_text): Rename from pp_base_last_position_in_text.\n\t(pp_remaining_character_count_for_line): Rename from\n\tpp_base_remaining_character_count_for_line.\n\t(pp_newline): Rename from pp_base_newline.\n\t(pp_character): Rename from pp_base_character.\n\t(pp_string): Rename from pp_base_string.\n\t(pp_maybe_space): Rename from pp_base_maybe_space.\n\t* asan.c (asan_pp_string): Adjust.\n\t(asan_emit_stack_protection): Likewise.\n\t(asan_add_global): Likewise.\n\t* sched-vis.c (str_pattern_slim): Adjust pretty printer function call.\n\t* tree-mudflap.c (mf_varname_tree): Likewise.\n\t* tree-pretty-print.c (pp_tree_identifier): Rename from\n\tpp_base_tree_identifier.\n\t* tree-pretty-print.h (pp_tree_identifier): Remove macro definition.\n\tDeclare as function.\n\nc/\n\t* c-objc-common.c (c_initialize_diagnostics): Don't call pp_base.\n\nc-family/\n\t* c-pretty-print.h (c_pretty_printer): Derive from pretty_printer.\n\t(pp_base): Remove.\n\t(pp_c_base): Likewise.  Adjust users.\n\t* c-pretty-print.c (pp_c_maybe_whitespace): Adjust.\n\t(pp_c_whitespace): Do not call pp_base.\n\t(pp_c_left_paren): Likewise.\n\t(pp_c_right_paren): Likewise.\n\t(pp_c_left_brace): Likewise.\n\t(pp_c_right_brace): Likewise.\n\t(pp_c_left_bracket): Likewise.\n\t(pp_c_right_bracket): Likewise.\n\t(pp_c_dot): Likewise.\n\t(pp_c_ampersand): Likewise.\n\t(pp_c_star): Likewise.\n\t(pp_c_arrow): Likewise.\n\t(pp_c_semicolon): Likewise.\n\t(pp_c_complement): Likewise.\n\t(pp_c_exclamation): Likewise.\n\t(pp_c_direct_declarator): Likewise.\n\t(pp_c_ws_string): Likewise.\n\t(pp_c_identifier): Likewise.\n\t(pp_c_statement): Likewise.\n\t(print_c_tree): Likewise.\n\ncp/\n\t* cxx-pretty-print.h (pp_c_base): Remove.\n\t(cxx_pretty_printer): Derive from c_pretty_printer.\n\tAdjust macros using pp_c_base.\n\t* cp-objcp-common.c (cxx_initialize_diagnostics): Do not call pp_base.\n\t* cxx-pretty-print.c (pp_cxx_nonconsecutive_character): Likewise.\n\t(pp_cxx_colon_colon): Likewise.\n\t(pp_cxx_separate_with): Likewise.\n\t(pp_cxx_storage_class_specifier): Do not call pp_c_base.\n\t(pp_cxx_expression_list): Likewise.\n\t(pp_cxx_space_for_pointer_operator): Likewise.\n\t(pp_cxx_init_declarator): Likewise.\n\t(pp_cxx_call_argument_list): Likewise.\n\t(pp_cxx_constant): Likewise.\n\t(pp_cxx_postfix_expression): Likewise.\n\t(pp_cxx_new_expression): Likewise.\n\t(pp_cxx_unary_expression): Likewise.\n\t(pp_cxx_cast_expression): Likewise.\n\t(pp_cxx_conditional_expression): Likewise.\n\t(pp_cxx_assignment_expression): Likewise.\n\t(pp_cxx_expression): Likewise.\n\t(pp_cxx_function_specifier): Likewise.\n\t(pp_cxx_decl_specifier_seq): Likewise.\n\t(pp_cxx_simple_type_specifier): Likewise.\n\t(pp_cxx_type_specifier_seq): Likewise.\n\t(pp_cxx_ptr_operator): Likewise.\n\t(pp_cxx_parameter_declaration_clause): Likewise.\n\t(pp_cxx_direct_declarator): Likewise.\n\t(pp_cxx_direct_abstract_declarator): Likewise.\n\t(pp_cxx_type_id): Likewise.\n\t(pp_cxx_statement): Likewise.\n\t(pp_cxx_pretty_printer_init): Tidy.\n\t* error.c (init_error): Do not use pp_base.\n\t(dump_aggr_type): Likewise.\n\t(dump_type_prefix): Likewise.\n\t(dump_type_suffix): Likewise.\n\t(dump_global_iord): Likewise.\n\t(dump_decl): Likewise.\n\t(dump_function_decl): Likewise.\n\t(dump_ref_qualifier): Likewise.\n\t(reinit_cxx_pp): Likewise.\n\t(decl_as_dwarf_string): Likewise.\n\t(lang_decl_dwarf_name): Likewise.\n\t(type_to_string): Likewise.\n\t(cv_to_string): Likewise.\n\t(cxx_print_error_function): Likewise.\n\t(cp_diagnostic_starter): Likewise.\n\t(cp_diagnostic_finalizer): Likewise.\n\t(cp_print_error_function): Likewise.\n\t(print_instantiation_context): Likewise.\n\t(cp_printer): Likewise.\n\nFrom-SVN: r201479", "tree": {"sha": "2a3052c426aacb44697e1d70381e8bd33a240377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a3052c426aacb44697e1d70381e8bd33a240377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b066401f2654cca7577a6de6d6d4c38701549571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b066401f2654cca7577a6de6d6d4c38701549571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b066401f2654cca7577a6de6d6d4c38701549571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b066401f2654cca7577a6de6d6d4c38701549571/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5edf2c603c09e44850606837dc767e4bca501eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edf2c603c09e44850606837dc767e4bca501eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edf2c603c09e44850606837dc767e4bca501eca"}], "stats": {"total": 705, "additions": 373, "deletions": 332}, "files": [{"sha": "0c8a9d1d50b0facd151bf41b010b669174509f11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -1,3 +1,38 @@\n+2013-08-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* pretty-print.h (pp_base): Remove.  Adjust dependent macros.\n+\t* diagnostic.h (diagnostic_flush_buffer): Adjust.\n+\t* pretty-print.c (pp_formatted_text_data): Likewise.\n+\t(pp_indent): Rename from pp_base_indent.\n+\t(pp_format): Rename from pp_base_format.\n+\t(pp_output_formatted_text): Rename from pp_base_output_formatted_text.\n+\t(pp_format_verbatim): Rename from pp_base_format_verbatim.\n+\t(pp_flush): Rename from pp_base_flush.\n+\t(pp_set_line_maximum_length): Rename from\n+\tpp_base_set_line_maximum_length.\n+\t(pp_clear_output_area): Rename from pp_base_clear_output_area.\n+\t(pp_set_prefix): Rename from pp_base_set_prefix.\n+\t(pp_destroy_prefix): Rename from pp_base_destroy_prefix.\n+\t(pp_emit_prefix): Rename from pp_base_emit_prefix.\n+\t(pp_append_text): Rename from pp_base_append_text.\n+\t(pp_formatted_text): Rename from pp_base_formatted_text.\n+\t(pp_last_position_in_text): Rename from pp_base_last_position_in_text.\n+\t(pp_remaining_character_count_for_line): Rename from\n+\tpp_base_remaining_character_count_for_line.\n+\t(pp_newline): Rename from pp_base_newline.\n+\t(pp_character): Rename from pp_base_character.\n+\t(pp_string): Rename from pp_base_string.\n+\t(pp_maybe_space): Rename from pp_base_maybe_space.\n+\t* asan.c (asan_pp_string): Adjust.\n+\t(asan_emit_stack_protection): Likewise.\n+\t(asan_add_global): Likewise.\n+\t* sched-vis.c (str_pattern_slim): Adjust pretty printer function call.\n+\t* tree-mudflap.c (mf_varname_tree): Likewise.\n+\t* tree-pretty-print.c (pp_tree_identifier): Rename from\n+\tpp_base_tree_identifier.\n+\t* tree-pretty-print.h (pp_tree_identifier): Remove macro definition.\n+\tDeclare as function.\n+\n 2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* pretty-print.h (pp_bar_bar): New."}, {"sha": "50cbb6f62840556b48cda5520986a69cf674753a", "filename": "gcc/asan.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -860,7 +860,7 @@ asan_pp_initialize (void)\n static tree\n asan_pp_string (void)\n {\n-  const char *buf = pp_base_formatted_text (&asan_pp);\n+  const char *buf = pp_formatted_text (&asan_pp);\n   size_t len = strlen (buf);\n   tree ret = build_string (len + 1, buf);\n   TREE_TYPE (ret)\n@@ -955,7 +955,7 @@ asan_emit_stack_protection (rtx base, HOST_WIDE_INT *offsets, tree *decls,\n \n   pp_clear_output_area (&asan_pp);\n   if (DECL_NAME (current_function_decl))\n-    pp_base_tree_identifier (&asan_pp, DECL_NAME (current_function_decl));\n+    pp_tree_identifier (&asan_pp, DECL_NAME (current_function_decl));\n   else\n     pp_string (&asan_pp, \"<unknown>\");\n   pp_space (&asan_pp);\n@@ -972,7 +972,7 @@ asan_emit_stack_protection (rtx base, HOST_WIDE_INT *offsets, tree *decls,\n \t{\n \t  pp_decimal_int (&asan_pp, IDENTIFIER_LENGTH (DECL_NAME (decl)));\n \t  pp_space (&asan_pp);\n-\t  pp_base_tree_identifier (&asan_pp, DECL_NAME (decl));\n+\t  pp_tree_identifier (&asan_pp, DECL_NAME (decl));\n \t}\n       else\n \tpp_string (&asan_pp, \"9 <unknown>\");\n@@ -1981,7 +1981,7 @@ asan_add_global (tree decl, tree type, vec<constructor_elt, va_gc> *v)\n \n   pp_clear_output_area (&asan_pp);\n   if (DECL_NAME (decl))\n-    pp_base_tree_identifier (&asan_pp, DECL_NAME (decl));\n+    pp_tree_identifier (&asan_pp, DECL_NAME (decl));\n   else\n     pp_string (&asan_pp, \"<unknown>\");\n   pp_space (&asan_pp);"}, {"sha": "d985360365eda3830369c4f63b51143b561f490d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -1,3 +1,29 @@\n+2013-08-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.h (c_pretty_printer): Derive from pretty_printer.\n+\t(pp_base): Remove.\n+\t(pp_c_base): Likewise.  Adjust users.\n+\t* c-pretty-print.c (pp_c_maybe_whitespace): Adjust.\n+\t(pp_c_whitespace): Do not call pp_base.\n+\t(pp_c_left_paren): Likewise.\n+\t(pp_c_right_paren): Likewise.\n+\t(pp_c_left_brace): Likewise.\n+\t(pp_c_right_brace): Likewise.\n+\t(pp_c_left_bracket): Likewise.\n+\t(pp_c_right_bracket): Likewise.\n+\t(pp_c_dot): Likewise.\n+\t(pp_c_ampersand): Likewise.\n+\t(pp_c_star): Likewise.\n+\t(pp_c_arrow): Likewise.\n+\t(pp_c_semicolon): Likewise.\n+\t(pp_c_complement): Likewise.\n+\t(pp_c_exclamation): Likewise.\n+\t(pp_c_direct_declarator): Likewise.\n+\t(pp_c_ws_string): Likewise.\n+\t(pp_c_identifier): Likewise.\n+\t(pp_c_statement): Likewise.\n+\t(print_c_tree): Likewise.\n+\n 2013-08-04  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/58072"}, {"sha": "a453117ea341c0aaedf208c876ba45f484fff6c2", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -43,7 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define pp_c_maybe_whitespace(PP)            \\\n    do {                                      \\\n-     if (pp_base (PP)->padding == pp_before) \\\n+     if ((PP)->padding == pp_before) \\\n        pp_c_whitespace (PP);                 \\\n    } while (0)\n \n@@ -75,98 +75,98 @@ void\n pp_c_whitespace (c_pretty_printer *pp)\n {\n   pp_space (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_left_paren (c_pretty_printer *pp)\n {\n   pp_left_paren (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_right_paren (c_pretty_printer *pp)\n {\n   pp_right_paren (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_left_brace (c_pretty_printer *pp)\n {\n   pp_left_brace (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_right_brace (c_pretty_printer *pp)\n {\n   pp_right_brace (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_left_bracket (c_pretty_printer *pp)\n {\n   pp_left_bracket (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_right_bracket (c_pretty_printer *pp)\n {\n   pp_right_bracket (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_dot (c_pretty_printer *pp)\n {\n   pp_dot (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_ampersand (c_pretty_printer *pp)\n {\n   pp_ampersand (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_star (c_pretty_printer *pp)\n {\n   pp_star (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_arrow (c_pretty_printer *pp)\n {\n   pp_arrow (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_semicolon (c_pretty_printer *pp)\n {\n   pp_semicolon (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_complement (c_pretty_printer *pp)\n {\n   pp_complement (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n pp_c_exclamation (c_pretty_printer *pp)\n {\n   pp_exclamation (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n /* Print out the external representation of QUALIFIERS.  */\n@@ -703,7 +703,7 @@ pp_c_direct_declarator (c_pretty_printer *pp, tree t)\n     case FUNCTION_DECL:\n       pp_c_space_for_pointer_operator (pp, TREE_TYPE (TREE_TYPE (t)));\n       pp_c_tree_decl_identifier (pp, t);\n-      if (pp_c_base (pp)->flags & pp_c_flag_abstract)\n+      if (pp->flags & pp_c_flag_abstract)\n \tpp_abstract_declarator (pp, TREE_TYPE (t));\n       else\n \t{\n@@ -1184,7 +1184,7 @@ pp_c_ws_string (c_pretty_printer *pp, const char *str)\n {\n   pp_c_maybe_whitespace (pp);\n   pp_string (pp, str);\n-  pp_base (pp)->padding = pp_before;\n+  pp->padding = pp_before;\n }\n \n /* Pretty-print an IDENTIFIER_NODE, which may contain UTF-8 sequences\n@@ -1196,7 +1196,7 @@ pp_c_identifier (c_pretty_printer *pp, const char *id)\n {\n   pp_c_maybe_whitespace (pp);\n   pp_identifier (pp, id);\n-  pp_base (pp)->padding = pp_before;\n+  pp->padding = pp_before;\n }\n \n /* Pretty-print a C primary-expression.\n@@ -2312,7 +2312,7 @@ pp_c_statement (c_pretty_printer *pp, tree stmt)\n   if (pp_needs_newline (pp))\n     pp_newline_and_indent (pp, 0);\n \n-  dump_generic_node (pp_base (pp), stmt, pp_indentation (pp), 0, true);\n+  dump_generic_node (pp, stmt, pp_indentation (pp), 0, true);\n }\n \n \f\n@@ -2366,11 +2366,11 @@ print_c_tree (FILE *file, tree t)\n   if (!initialized)\n     {\n       initialized = 1;\n-      pp_construct (pp_base (pp), NULL, 0);\n+      pp_construct (pp, NULL, 0);\n       pp_c_pretty_printer_init (pp);\n       pp_needs_newline (pp) = true;\n     }\n-  pp_base (pp)->buffer->stream = file;\n+  pp->buffer->stream = file;\n \n   pp_statement (pp, t);\n "}, {"sha": "390477d289e45de6d493e03ffb18a2ae2cabe630", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 37, "deletions": 73, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -26,35 +26,29 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pretty-print.h\"\n \n \n-typedef enum\n+enum pp_c_pretty_print_flags\n   {\n      pp_c_flag_abstract = 1 << 1,\n      pp_c_flag_gnu_v3 = 1 << 2,\n      pp_c_flag_last_bit = 3\n-  } pp_c_pretty_print_flags;\n+  };\n \n \n /* The data type used to bundle information necessary for pretty-printing\n    a C or C++ entity.  */\n-typedef struct c_pretty_print_info c_pretty_printer;\n+struct c_pretty_printer;\n \n /* The type of a C pretty-printer 'member' function.  */\n typedef void (*c_pretty_print_fn) (c_pretty_printer *, tree);\n \n /* The datatype that contains information necessary for pretty-printing\n    a tree that represents a C construct.  Any pretty-printer for a\n-   language using C/c++ syntax can derive from this datatype and reuse\n-   facilities provided here.  It can do so by having a subobject of type\n-   c_pretty_printer and override the macro pp_c_base to return a pointer\n-   to that subobject.  Such a pretty-printer has the responsibility to\n-   initialize the pp_base() part, then call pp_c_pretty_printer_init\n-   to set up the components that are specific to the C pretty-printer.\n-   A derived pretty-printer can override any function listed in the\n-   vtable below.  See cp/cxx-pretty-print.h and cp/cxx-pretty-print.c\n-   for an example of derivation.  */\n-struct c_pretty_print_info\n+   language using C syntax can derive from this datatype and reuse\n+   facilities provided here.  A derived pretty-printer can override\n+   any function listed in the vtable below.  See cp/cxx-pretty-print.h\n+   and cp/cxx-pretty-print.c for an example of derivation.  */\n+struct c_pretty_printer : pretty_printer\n {\n-  pretty_printer base;\n   /* Points to the first element of an array of offset-list.\n      Not used yet.  */\n   int *offset_list;\n@@ -91,70 +85,40 @@ struct c_pretty_print_info\n   c_pretty_print_fn expression;\n };\n \n-/* Override the pp_base macro.  Derived pretty-printers should not\n-   touch this macro.  Instead they should override pp_c_base instead.  */\n-#undef pp_base\n-#define pp_base(PP)  (&pp_c_base (PP)->base)\n-\n-\n #define pp_c_tree_identifier(PPI, ID)              \\\n    pp_c_identifier (PPI, IDENTIFIER_POINTER (ID))\n \n-#define pp_declaration(PPI, T)                    \\\n-   pp_c_base (PPI)->declaration (pp_c_base (PPI), T)\n-#define pp_declaration_specifiers(PPI, D)         \\\n-   pp_c_base (PPI)->declaration_specifiers (pp_c_base (PPI), D)\n-#define pp_abstract_declarator(PP, D)             \\\n-   pp_c_base (PP)->abstract_declarator (pp_c_base (PP), D)\n-#define pp_type_specifier_seq(PPI, D)             \\\n-   pp_c_base (PPI)->type_specifier_seq (pp_c_base (PPI), D)\n-#define pp_declarator(PPI, D)                     \\\n-   pp_c_base (PPI)->declarator (pp_c_base (PPI), D)\n-#define pp_direct_declarator(PPI, D)              \\\n-   pp_c_base (PPI)->direct_declarator (pp_c_base (PPI), D)\n+#define pp_declaration(PP, T)           (PP)->declaration (PP, T)\n+#define pp_declaration_specifiers(PP, D)         \\\n+   (PP)->declaration_specifiers (PP, D)\n+#define pp_abstract_declarator(PP, D)   (PP)->abstract_declarator (PP, D)\n+#define pp_type_specifier_seq(PP, D)    (PP)->type_specifier_seq (PP, D)\n+#define pp_declarator(PP, D)            (PP)->declarator (PP, D)\n+#define pp_direct_declarator(PP, D)     (PP)->direct_declarator (PP, D)\n #define pp_direct_abstract_declarator(PP, D)      \\\n-   pp_c_base (PP)->direct_abstract_declarator (pp_c_base (PP), D)\n-#define pp_ptr_operator(PP, D)                    \\\n-   pp_c_base (PP)->ptr_operator (pp_c_base (PP), D)\n-#define pp_parameter_list(PPI, T)                 \\\n-  pp_c_base (PPI)->parameter_list (pp_c_base (PPI), T)\n-#define pp_type_id(PPI, D)                        \\\n-  pp_c_base (PPI)->type_id (pp_c_base (PPI), D)\n-#define pp_simple_type_specifier(PP, T)           \\\n-  pp_c_base (PP)->simple_type_specifier (pp_c_base (PP), T)\n-#define pp_function_specifier(PP, D)              \\\n-  pp_c_base (PP)->function_specifier (pp_c_base (PP), D)\n+   (PP)->direct_abstract_declarator (PP, D)\n+#define pp_ptr_operator(PP, D)          (PP)->ptr_operator (PP, D)\n+#define pp_parameter_list(PP, T)        (PP)->parameter_list (PP, T)\n+#define pp_type_id(PP, D)               (PP)->type_id (PP, D)\n+#define pp_simple_type_specifier(PP, T) (PP)->simple_type_specifier (PP, T)\n+#define pp_function_specifier(PP, D)    (PP)->function_specifier (PP, D)\n #define pp_storage_class_specifier(PP, D)         \\\n-  pp_c_base (PP)->storage_class_specifier (pp_c_base (PP), D);\n-\n-#define pp_statement(PPI, S)                      \\\n-  pp_c_base (PPI)->statement (pp_c_base (PPI), S)\n-\n-#define pp_constant(PP, E) \\\n-  pp_c_base (PP)->constant (pp_c_base (PP), E)\n-#define pp_id_expression(PP, E)  \\\n-  pp_c_base (PP)->id_expression (pp_c_base (PP), E)\n-#define pp_primary_expression(PPI, E)             \\\n-  pp_c_base (PPI)->primary_expression (pp_c_base (PPI), E)\n-#define pp_postfix_expression(PPI, E)             \\\n-  pp_c_base (PPI)->postfix_expression (pp_c_base (PPI), E)\n-#define pp_unary_expression(PPI, E)               \\\n-  pp_c_base (PPI)->unary_expression (pp_c_base (PPI), E)\n-#define pp_initializer(PPI, E)                    \\\n-  pp_c_base (PPI)->initializer (pp_c_base (PPI), E)\n-#define pp_multiplicative_expression(PPI, E)      \\\n-  pp_c_base (PPI)->multiplicative_expression (pp_c_base (PPI), E)\n-#define pp_conditional_expression(PPI, E)         \\\n-  pp_c_base (PPI)->conditional_expression (pp_c_base (PPI), E)\n-#define pp_assignment_expression(PPI, E)          \\\n-   pp_c_base (PPI)->assignment_expression (pp_c_base (PPI), E)\n-#define pp_expression(PP, E)                      \\\n-   pp_c_base (PP)->expression (pp_c_base (PP), E)\n-\n-\n-/* Returns the c_pretty_printer base object of PRETTY-PRINTER.  This\n-   macro must be overridden by any subclass of c_pretty_print_info.  */\n-#define pp_c_base(PP)  (PP)\n+  (PP)->storage_class_specifier (PP, D);\n+\n+#define pp_statement(PP, S)             (PP)->statement (PP, S)\n+\n+#define pp_constant(PP, E)              (PP)->constant (PP, E)\n+#define pp_id_expression(PP, E)         (PP)->id_expression (PP, E)\n+#define pp_primary_expression(PP, E)    (PP)->primary_expression (PP, E)\n+#define pp_postfix_expression(PP, E)    (PP)->postfix_expression (PP, E)\n+#define pp_unary_expression(PP, E)      (PP)->unary_expression (PP, E)\n+#define pp_initializer(PP, E)           (PP)->initializer (PP, E)\n+#define pp_multiplicative_expression(PP, E)      \\\n+  (PP)->multiplicative_expression (PP, E)\n+#define pp_conditional_expression(PP, E) (PP)->conditional_expression (PP, E)\n+#define pp_assignment_expression(PP, E) (PP)->assignment_expression (PP, E)\n+#define pp_expression(PP, E)            (PP)->expression (PP, E)\n+\n \n extern void pp_c_pretty_printer_init (c_pretty_printer *);\n void pp_c_whitespace (c_pretty_printer *);"}, {"sha": "2b9e2f7ae1342048b27f6a8d1f881a26642d8b1c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -1,3 +1,7 @@\n+2013-08-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-objc-common.c (c_initialize_diagnostics): Don't call pp_base.\n+\n 2013-07-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.c (struct c_generic_association): Fix typo."}, {"sha": "d832294c976fed59a60833a36cf8eeacf5303430", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -190,7 +190,7 @@ c_initialize_diagnostics (diagnostic_context *context)\n \n   base = context->printer;\n   pp = XNEW (c_pretty_printer);\n-  memcpy (pp_base (pp), base, sizeof (pretty_printer));\n+  memcpy (pp, base, sizeof (pretty_printer));\n   pp_c_pretty_printer_init (pp);\n   context->printer = (pretty_printer *) pp;\n "}, {"sha": "a52cbc9c9a98296b865ff635a5261f60cff49956", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -1,3 +1,56 @@\n+2013-08-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cxx-pretty-print.h (pp_c_base): Remove.\n+\t(cxx_pretty_printer): Derive from c_pretty_printer.\n+\tAdjust macros using pp_c_base.\n+\t* cp-objcp-common.c (cxx_initialize_diagnostics): Do not call pp_base.\n+\t* cxx-pretty-print.c (pp_cxx_nonconsecutive_character): Likewise.\n+\t(pp_cxx_colon_colon): Likewise.\n+\t(pp_cxx_separate_with): Likewise.\n+\t(pp_cxx_storage_class_specifier): Do not call pp_c_base.\n+\t(pp_cxx_expression_list): Likewise.\n+\t(pp_cxx_space_for_pointer_operator): Likewise.\n+\t(pp_cxx_init_declarator): Likewise.\n+\t(pp_cxx_call_argument_list): Likewise.\n+\t(pp_cxx_constant): Likewise.\n+\t(pp_cxx_postfix_expression): Likewise.\n+\t(pp_cxx_new_expression): Likewise.\n+\t(pp_cxx_unary_expression): Likewise.\n+\t(pp_cxx_cast_expression): Likewise.\n+\t(pp_cxx_conditional_expression): Likewise.\n+\t(pp_cxx_assignment_expression): Likewise.\n+\t(pp_cxx_expression): Likewise.\n+\t(pp_cxx_function_specifier): Likewise.\n+\t(pp_cxx_decl_specifier_seq): Likewise.\n+\t(pp_cxx_simple_type_specifier): Likewise.\n+\t(pp_cxx_type_specifier_seq): Likewise.\n+\t(pp_cxx_ptr_operator): Likewise.\n+\t(pp_cxx_parameter_declaration_clause): Likewise.\n+\t(pp_cxx_direct_declarator): Likewise.\n+\t(pp_cxx_direct_abstract_declarator): Likewise.\n+\t(pp_cxx_type_id): Likewise.\n+\t(pp_cxx_statement): Likewise.\n+\t(pp_cxx_pretty_printer_init): Tidy.\n+\t* error.c (init_error): Do not use pp_base.\n+\t(dump_aggr_type): Likewise.\n+\t(dump_type_prefix): Likewise.\n+\t(dump_type_suffix): Likewise.\n+\t(dump_global_iord): Likewise.\n+\t(dump_decl): Likewise.\n+\t(dump_function_decl): Likewise.\n+\t(dump_ref_qualifier): Likewise.\n+\t(reinit_cxx_pp): Likewise.\n+\t(decl_as_dwarf_string): Likewise.\n+\t(lang_decl_dwarf_name): Likewise.\n+\t(type_to_string): Likewise.\n+\t(cv_to_string): Likewise.\n+\t(cxx_print_error_function): Likewise.\n+\t(cp_diagnostic_starter): Likewise.\n+\t(cp_diagnostic_finalizer): Likewise.\n+\t(cp_print_error_function): Likewise.\n+\t(print_instantiation_context): Likewise.\n+\t(cp_printer): Likewise.\n+\n 2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* error.c (dump_type_prefix): Use specialized pretty printer"}, {"sha": "e568a05947ecb25751ab602101d33a55d0d4e3f7", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -138,7 +138,7 @@ cxx_initialize_diagnostics (diagnostic_context *context)\n \n   base = context->printer;\n   pp = XNEW (cxx_pretty_printer);\n-  memcpy (pp_base (pp), base, sizeof (pretty_printer));\n+  memcpy (pp, base, sizeof (pretty_printer));\n   pp_cxx_pretty_printer_init (pp);\n   context->printer = (pretty_printer *) pp;\n "}, {"sha": "21fc31980add6b73a7704bf62b0f8902a75660f6", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 61, "deletions": 64, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -58,25 +58,25 @@ pp_cxx_nonconsecutive_character (cxx_pretty_printer *pp, int c)\n   if (p != NULL && *p == c)\n     pp_cxx_whitespace (pp);\n   pp_character (pp, c);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n #define pp_cxx_storage_class_specifier(PP, T) \\\n-   pp_c_storage_class_specifier (pp_c_base (PP), T)\n+   pp_c_storage_class_specifier (PP, T)\n #define pp_cxx_expression_list(PP, T)    \\\n-   pp_c_expression_list (pp_c_base (PP), T)\n+   pp_c_expression_list (PP, T)\n #define pp_cxx_space_for_pointer_operator(PP, T)  \\\n-   pp_c_space_for_pointer_operator (pp_c_base (PP), T)\n+   pp_c_space_for_pointer_operator (PP, T)\n #define pp_cxx_init_declarator(PP, T)    \\\n-   pp_c_init_declarator (pp_c_base (PP), T)\n+   pp_c_init_declarator (PP, T)\n #define pp_cxx_call_argument_list(PP, T) \\\n-   pp_c_call_argument_list (pp_c_base (PP), T)\n+   pp_c_call_argument_list (PP, T)\n \n void\n pp_cxx_colon_colon (cxx_pretty_printer *pp)\n {\n   pp_colon_colon (pp);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n void\n@@ -95,7 +95,7 @@ void\n pp_cxx_separate_with (cxx_pretty_printer *pp, int c)\n {\n   pp_separate_with (pp, c);\n-  pp_base (pp)->padding = pp_none;\n+  pp->padding = pp_none;\n }\n \n /* Expressions.  */\n@@ -331,7 +331,7 @@ pp_cxx_constant (cxx_pretty_printer *pp, tree t)\n \tconst bool in_parens = PAREN_STRING_LITERAL_P (t);\n \tif (in_parens)\n \t  pp_cxx_left_paren (pp);\n-\tpp_c_constant (pp_c_base (pp), t);\n+\tpp_c_constant (pp, t);\n \tif (in_parens)\n \t  pp_cxx_right_paren (pp);\n       }\n@@ -346,7 +346,7 @@ pp_cxx_constant (cxx_pretty_printer *pp, tree t)\n       /* else fall through.  */\n \n     default:\n-      pp_c_constant (pp_c_base (pp), t);\n+      pp_c_constant (pp, t);\n       break;\n     }\n }\n@@ -465,7 +465,7 @@ pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_primary_expression (pp_c_base (pp), t);\n+      pp_c_primary_expression (pp, t);\n       break;\n     }\n }\n@@ -643,7 +643,7 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_postfix_expression (pp_c_base (pp), t);\n+      pp_c_postfix_expression (pp, t);\n       break;\n     }\n }\n@@ -699,7 +699,7 @@ pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n \t{\n \t  pp_left_paren (pp);\n \t  if (TREE_CODE (init) == TREE_LIST)\n-\t    pp_c_expression_list (pp_c_base (pp), init);\n+\t    pp_c_expression_list (pp, init);\n \t  else if (init == void_zero_node)\n \t    ;\t\t\t/* OK, empty initializer list.  */\n \t  else\n@@ -736,7 +736,7 @@ pp_cxx_delete_expression (cxx_pretty_printer *pp, tree t)\n \t  pp_right_bracket (pp);\n \t  pp_space (pp);\n \t}\n-      pp_c_cast_expression (pp_c_base (pp), TREE_OPERAND (t, 0));\n+      pp_c_cast_expression (pp, TREE_OPERAND (t, 0));\n       break;\n \n     default:\n@@ -835,7 +835,7 @@ pp_cxx_unary_expression (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_unary_expression (pp_c_base (pp), t);\n+      pp_c_unary_expression (pp, t);\n       break;\n     }\n }\n@@ -856,7 +856,7 @@ pp_cxx_cast_expression (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_cast_expression (pp_c_base (pp), t);\n+      pp_c_cast_expression (pp, t);\n       break;\n     }\n }\n@@ -939,7 +939,7 @@ pp_cxx_conditional_expression (cxx_pretty_printer *pp, tree e)\n {\n   if (TREE_CODE (e) == COND_EXPR)\n     {\n-      pp_c_logical_or_expression (pp_c_base (pp), TREE_OPERAND (e, 0));\n+      pp_c_logical_or_expression (pp, TREE_OPERAND (e, 0));\n       pp_space (pp);\n       pp_question (pp);\n       pp_space (pp);\n@@ -948,7 +948,7 @@ pp_cxx_conditional_expression (cxx_pretty_printer *pp, tree e)\n       pp_cxx_assignment_expression (pp, TREE_OPERAND (e, 2));\n     }\n   else\n-    pp_c_logical_or_expression (pp_c_base (pp), e);\n+    pp_c_logical_or_expression (pp, e);\n }\n \n /* Pretty-print a compound assignment operator token as indicated by T.  */\n@@ -1007,7 +1007,7 @@ pp_cxx_assignment_expression (cxx_pretty_printer *pp, tree e)\n     {\n     case MODIFY_EXPR:\n     case INIT_EXPR:\n-      pp_c_logical_or_expression (pp_c_base (pp), TREE_OPERAND (e, 0));\n+      pp_c_logical_or_expression (pp, TREE_OPERAND (e, 0));\n       pp_space (pp);\n       pp_equal (pp);\n       pp_space (pp);\n@@ -1021,7 +1021,7 @@ pp_cxx_assignment_expression (cxx_pretty_printer *pp, tree e)\n       break;\n \n     case MODOP_EXPR:\n-      pp_c_logical_or_expression (pp_c_base (pp), TREE_OPERAND (e, 0));\n+      pp_c_logical_or_expression (pp, TREE_OPERAND (e, 0));\n       pp_cxx_assignment_operator (pp, TREE_OPERAND (e, 1));\n       pp_cxx_assignment_expression (pp, TREE_OPERAND (e, 2));\n       break;\n@@ -1174,7 +1174,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_expression (pp_c_base (pp), t);\n+      pp_c_expression (pp, t);\n       break;\n     }\n }\n@@ -1198,7 +1198,7 @@ pp_cxx_function_specifier (cxx_pretty_printer *pp, tree t)\n       else if (DECL_CONSTRUCTOR_P (t) && DECL_NONCONVERTING_P (t))\n \tpp_cxx_ws_string (pp, \"explicit\");\n       else\n-\tpp_c_function_specifier (pp_c_base (pp), t);\n+\tpp_c_function_specifier (pp, t);\n \n     default:\n       break;\n@@ -1242,7 +1242,7 @@ pp_cxx_decl_specifier_seq (cxx_pretty_printer *pp, tree t)\n \tpp_cxx_decl_specifier_seq (pp, TREE_TYPE (TREE_TYPE (t)));\n       else\n \tdefault:\n-      pp_c_declaration_specifiers (pp_c_base (pp), t);\n+      pp_c_declaration_specifiers (pp, t);\n       break;\n     }\n }\n@@ -1287,7 +1287,7 @@ pp_cxx_simple_type_specifier (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_type_specifier (pp_c_base (pp), t);\n+      pp_c_type_specifier (pp, t);\n       break;\n     }\n }\n@@ -1342,7 +1342,7 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n \n     default:\n       if (!(TREE_CODE (t) == FUNCTION_DECL && DECL_CONSTRUCTOR_P (t)))\n-\tpp_c_specifier_qualifier_list (pp_c_base (pp), t);\n+\tpp_c_specifier_qualifier_list (pp, t);\n     }\n }\n \n@@ -1362,8 +1362,7 @@ pp_cxx_ptr_operator (cxx_pretty_printer *pp, tree t)\n     case POINTER_TYPE:\n       if (TYPE_PTR_OR_PTRMEM_P (TREE_TYPE (t)))\n \tpp_cxx_ptr_operator (pp, TREE_TYPE (t));\n-      pp_c_attributes_display (pp_c_base (pp),\n-\t\t\t       TYPE_ATTRIBUTES (TREE_TYPE (t)));\n+      pp_c_attributes_display (pp, TYPE_ATTRIBUTES (TREE_TYPE (t)));\n       if (TYPE_PTR_P (t))\n \t{\n \t  pp_star (pp);\n@@ -1436,8 +1435,7 @@ pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n   tree args = TYPE_P (t) ? NULL : FUNCTION_FIRST_USER_PARM (t);\n   tree types =\n     TYPE_P (t) ? TYPE_ARG_TYPES (t) : FUNCTION_FIRST_USER_PARMTYPE (t);\n-  const bool abstract = args == NULL\n-    || pp_c_base (pp)->flags & pp_c_flag_abstract;\n+  const bool abstract = args == NULL || pp->flags & pp_c_flag_abstract;\n   bool first = true;\n \n   /* Skip artificial parameter for nonstatic member functions.  */\n@@ -1451,7 +1449,7 @@ pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n \tpp_cxx_separate_with (pp, ',');\n       first = false;\n       pp_cxx_parameter_declaration (pp, abstract ? TREE_VALUE (types) : args);\n-      if (!abstract && pp_c_base (pp)->flags & pp_cxx_flag_default_argument)\n+      if (!abstract && pp->flags & pp_cxx_flag_default_argument)\n \t{\n \t  pp_cxx_whitespace (pp);\n \t  pp_equal (pp);\n@@ -1557,7 +1555,7 @@ pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n \n       if (DECL_NONSTATIC_MEMBER_FUNCTION_P (t))\n \t{\n-\t  pp_base (pp)->padding = pp_before;\n+\t  pp->padding = pp_before;\n \t  pp_cxx_cv_qualifier_seq (pp, pp_cxx_implicit_parameter_type (t));\n \t}\n \n@@ -1572,7 +1570,7 @@ pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_direct_declarator (pp_c_base (pp), t);\n+      pp_c_direct_declarator (pp, t);\n       break;\n     }\n }\n@@ -1690,7 +1688,7 @@ pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n       pp_cxx_direct_abstract_declarator (pp, TREE_TYPE (t));\n       if (TREE_CODE (t) == METHOD_TYPE)\n \t{\n-\t  pp_base (pp)->padding = pp_before;\n+\t  pp->padding = pp_before;\n \t  pp_cxx_cv_qualifier_seq (pp, class_of_this_parm (t));\n \t}\n       pp_cxx_exception_specification (pp, t);\n@@ -1704,7 +1702,7 @@ pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_direct_abstract_declarator (pp_c_base (pp), t);\n+      pp_c_direct_abstract_declarator (pp, t);\n       break;\n     }\n }\n@@ -1715,8 +1713,8 @@ pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n static void\n pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n {\n-  pp_flags saved_flags = pp_c_base (pp)->flags;\n-  pp_c_base (pp)->flags |= pp_c_flag_abstract;\n+  pp_flags saved_flags = pp->flags;\n+  pp->flags |= pp_c_flag_abstract;\n \n   switch (TREE_CODE (t))\n     {\n@@ -1744,11 +1742,11 @@ pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_type_id (pp_c_base (pp), t);\n+      pp_c_type_id (pp, t);\n       break;\n     }\n \n-  pp_c_base (pp)->flags = saved_flags;\n+  pp->flags = saved_flags;\n }\n \n /* template-argument-list:\n@@ -2021,7 +2019,7 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_statement (pp_c_base (pp), t);\n+      pp_c_statement (pp, t);\n       break;\n     }\n }\n@@ -2437,32 +2435,31 @@ typedef c_pretty_print_fn pp_fun;\n void\n pp_cxx_pretty_printer_init (cxx_pretty_printer *pp)\n {\n-  pp_c_pretty_printer_init (pp_c_base (pp));\n+  pp_c_pretty_printer_init (pp);\n   pp_set_line_maximum_length (pp, 0);\n \n-  pp->c_base.declaration = (pp_fun) pp_cxx_declaration;\n-  pp->c_base.declaration_specifiers = (pp_fun) pp_cxx_decl_specifier_seq;\n-  pp->c_base.function_specifier = (pp_fun) pp_cxx_function_specifier;\n-  pp->c_base.type_specifier_seq = (pp_fun) pp_cxx_type_specifier_seq;\n-  pp->c_base.declarator = (pp_fun) pp_cxx_declarator;\n-  pp->c_base.direct_declarator = (pp_fun) pp_cxx_direct_declarator;\n-  pp->c_base.parameter_list = (pp_fun) pp_cxx_parameter_declaration_clause;\n-  pp->c_base.type_id = (pp_fun) pp_cxx_type_id;\n-  pp->c_base.abstract_declarator = (pp_fun) pp_cxx_abstract_declarator;\n-  pp->c_base.direct_abstract_declarator =\n-    (pp_fun) pp_cxx_direct_abstract_declarator;\n-  pp->c_base.simple_type_specifier = (pp_fun)pp_cxx_simple_type_specifier;\n-\n-  /* pp->c_base.statement = (pp_fun) pp_cxx_statement;  */\n-\n-  pp->c_base.constant = (pp_fun) pp_cxx_constant;\n-  pp->c_base.id_expression = (pp_fun) pp_cxx_id_expression;\n-  pp->c_base.primary_expression = (pp_fun) pp_cxx_primary_expression;\n-  pp->c_base.postfix_expression = (pp_fun) pp_cxx_postfix_expression;\n-  pp->c_base.unary_expression = (pp_fun) pp_cxx_unary_expression;\n-  pp->c_base.multiplicative_expression = (pp_fun) pp_cxx_multiplicative_expression;\n-  pp->c_base.conditional_expression = (pp_fun) pp_cxx_conditional_expression;\n-  pp->c_base.assignment_expression = (pp_fun) pp_cxx_assignment_expression;\n-  pp->c_base.expression = (pp_fun) pp_cxx_expression;\n+  pp->declaration = (pp_fun) pp_cxx_declaration;\n+  pp->declaration_specifiers = (pp_fun) pp_cxx_decl_specifier_seq;\n+  pp->function_specifier = (pp_fun) pp_cxx_function_specifier;\n+  pp->type_specifier_seq = (pp_fun) pp_cxx_type_specifier_seq;\n+  pp->declarator = (pp_fun) pp_cxx_declarator;\n+  pp->direct_declarator = (pp_fun) pp_cxx_direct_declarator;\n+  pp->parameter_list = (pp_fun) pp_cxx_parameter_declaration_clause;\n+  pp->type_id = (pp_fun) pp_cxx_type_id;\n+  pp->abstract_declarator = (pp_fun) pp_cxx_abstract_declarator;\n+  pp->direct_abstract_declarator = (pp_fun) pp_cxx_direct_abstract_declarator;\n+  pp->simple_type_specifier = (pp_fun) pp_cxx_simple_type_specifier;\n+\n+  /* pp->statement = (pp_fun) pp_cxx_statement;  */\n+\n+  pp->constant = (pp_fun) pp_cxx_constant;\n+  pp->id_expression = (pp_fun) pp_cxx_id_expression;\n+  pp->primary_expression = (pp_fun) pp_cxx_primary_expression;\n+  pp->postfix_expression = (pp_fun) pp_cxx_postfix_expression;\n+  pp->unary_expression = (pp_fun) pp_cxx_unary_expression;\n+  pp->multiplicative_expression = (pp_fun) pp_cxx_multiplicative_expression;\n+  pp->conditional_expression = (pp_fun) pp_cxx_conditional_expression;\n+  pp->assignment_expression = (pp_fun) pp_cxx_assignment_expression;\n+  pp->expression = (pp_fun) pp_cxx_expression;\n   pp->enclosing_scope = global_namespace;\n }"}, {"sha": "398bd75c6806a21a9b9cf6072e2594cc125dc73b", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -23,46 +23,41 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"c-family/c-pretty-print.h\"\n \n-#undef pp_c_base\n-#define pp_c_base(PP) (&(PP)->c_base)\n-\n-typedef enum\n+enum cxx_pretty_printer_flags\n {\n   /* Ask for a qualified-id.  */\n   pp_cxx_flag_default_argument = 1 << pp_c_flag_last_bit\n+};\n \n-} cxx_pretty_printer_flags;\n-\n-typedef struct\n+struct cxx_pretty_printer : c_pretty_printer\n {\n-  c_pretty_printer c_base;\n   /* This is the enclosing scope of the entity being pretty-printed.  */\n   tree enclosing_scope;\n-} cxx_pretty_printer;\n+};\n \n #define pp_cxx_cv_qualifier_seq(PP, T)   \\\n-   pp_c_type_qualifier_list (pp_c_base (PP), T)\n+   pp_c_type_qualifier_list (PP, T)\n #define pp_cxx_cv_qualifiers(PP, CV)   \\\n-   pp_c_cv_qualifiers (pp_c_base (PP), CV, false)\n-\n-#define pp_cxx_whitespace(PP)\t\tpp_c_whitespace (pp_c_base (PP))\n-#define pp_cxx_left_paren(PP)\t\tpp_c_left_paren (pp_c_base (PP))\n-#define pp_cxx_right_paren(PP)\t\tpp_c_right_paren (pp_c_base (PP))\n-#define pp_cxx_left_brace(PP)\t\tpp_c_left_brace (pp_c_base (PP))\n-#define pp_cxx_right_brace(PP)\t\tpp_c_right_brace (pp_c_base (PP))\n-#define pp_cxx_left_bracket(PP)\t\tpp_c_left_bracket (pp_c_base (PP))\n-#define pp_cxx_right_bracket(PP)\tpp_c_right_bracket (pp_c_base (PP))\n-#define pp_cxx_dot(PP)\t\t\tpp_c_dot (pp_c_base (PP))\n-#define pp_cxx_ampersand(PP)\t\tpp_c_ampersand (pp_c_base (PP))\n-#define pp_cxx_star(PP)\t\t\tpp_c_star (pp_c_base (PP))\n-#define pp_cxx_arrow(PP)\t\tpp_c_arrow (pp_c_base (PP))\n-#define pp_cxx_semicolon(PP)\t\tpp_c_semicolon (pp_c_base (PP))\n-#define pp_cxx_complement(PP)\t\tpp_c_complement (pp_c_base (PP))\n-\n-#define pp_cxx_ws_string(PP, I)\t\tpp_c_ws_string (pp_c_base (PP), I)\n-#define pp_cxx_identifier(PP, I)\tpp_c_identifier (pp_c_base (PP), I)\n+   pp_c_cv_qualifiers (PP, CV, false)\n+\n+#define pp_cxx_whitespace(PP)\t\tpp_c_whitespace (PP)\n+#define pp_cxx_left_paren(PP)\t\tpp_c_left_paren (PP)\n+#define pp_cxx_right_paren(PP)\t\tpp_c_right_paren (PP)\n+#define pp_cxx_left_brace(PP)\t\tpp_c_left_brace (PP)\n+#define pp_cxx_right_brace(PP)\t\tpp_c_right_brace (PP)\n+#define pp_cxx_left_bracket(PP)\t\tpp_c_left_bracket (PP)\n+#define pp_cxx_right_bracket(PP)\tpp_c_right_bracket (PP)\n+#define pp_cxx_dot(PP)\t\t\tpp_c_dot (PP)\n+#define pp_cxx_ampersand(PP)\t\tpp_c_ampersand (PP)\n+#define pp_cxx_star(PP)\t\t\tpp_c_star (PP)\n+#define pp_cxx_arrow(PP)\t\tpp_c_arrow (PP)\n+#define pp_cxx_semicolon(PP)\t\tpp_c_semicolon (PP)\n+#define pp_cxx_complement(PP)\t\tpp_c_complement (PP)\n+\n+#define pp_cxx_ws_string(PP, I)\t\tpp_c_ws_string (PP, I)\n+#define pp_cxx_identifier(PP, I)\tpp_c_identifier (PP, I)\n #define pp_cxx_tree_identifier(PP, T) \\\n-  pp_c_tree_identifier (pp_c_base (PP), T)\n+  pp_c_tree_identifier (PP, T)\n \n void pp_cxx_pretty_printer_init (cxx_pretty_printer *);\n void pp_cxx_begin_template_argument_list (cxx_pretty_printer *);"}, {"sha": "440169a2d65477918312017c32e66a81675d927f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -108,7 +108,7 @@ init_error (void)\n   diagnostic_finalizer (global_dc) = cp_diagnostic_finalizer;\n   diagnostic_format_decoder (global_dc) = cp_printer;\n \n-  pp_construct (pp_base (cxx_pp), NULL, 0);\n+  pp_construct (cxx_pp, NULL, 0);\n   pp_cxx_pretty_printer_init (cxx_pp);\n }\n \n@@ -654,7 +654,7 @@ dump_aggr_type (tree t, int flags)\n       if (flags & TFF_CLASS_KEY_OR_ENUM)\n \tpp_string (cxx_pp, M_(\"<anonymous>\"));\n       else\n-\tpp_printf (pp_base (cxx_pp), M_(\"<anonymous %s>\"), variety);\n+\tpp_printf (cxx_pp, M_(\"<anonymous %s>\"), variety);\n     }\n   else if (LAMBDA_TYPE_P (t))\n     {\n@@ -706,8 +706,7 @@ dump_type_prefix (tree t, int flags)\n \t  {\n \t    pp_cxx_whitespace (cxx_pp);\n \t    pp_cxx_left_paren (cxx_pp);\n-\t    pp_c_attributes_display (pp_c_base (cxx_pp),\n-\t\t\t\t     TYPE_ATTRIBUTES (sub));\n+\t    pp_c_attributes_display (cxx_pp, TYPE_ATTRIBUTES (sub));\n \t  }\n \tif (TYPE_PTR_P (t))\n \t  pp_star (cxx_pp);\n@@ -718,7 +717,7 @@ dump_type_prefix (tree t, int flags)\n \t  else\n \t    pp_ampersand (cxx_pp);\n \t}\n-\tpp_base (cxx_pp)->padding = pp_before;\n+\tcxx_pp->padding = pp_before;\n \tpp_cxx_cv_qualifier_seq (cxx_pp, t);\n       }\n       break;\n@@ -736,7 +735,7 @@ dump_type_prefix (tree t, int flags)\n \t}\n       pp_cxx_star (cxx_pp);\n       pp_cxx_cv_qualifier_seq (cxx_pp, t);\n-      pp_base (cxx_pp)->padding = pp_before;\n+      cxx_pp->padding = pp_before;\n       break;\n \n       /* This can be reached without a pointer when dealing with\n@@ -782,7 +781,7 @@ dump_type_prefix (tree t, int flags)\n     case FIXED_POINT_TYPE:\n     case NULLPTR_TYPE:\n       dump_type (t, flags);\n-      pp_base (cxx_pp)->padding = pp_before;\n+      cxx_pp->padding = pp_before;\n       break;\n \n     default:\n@@ -829,7 +828,7 @@ dump_type_suffix (tree t, int flags)\n \t   anyway; they may in g++, but we'll just pretend otherwise.  */\n \tdump_parameters (arg, flags & ~TFF_FUNCTION_DEFAULT_ARGUMENTS);\n \n-\tpp_base (cxx_pp)->padding = pp_before;\n+\tcxx_pp->padding = pp_before;\n \tpp_cxx_cv_qualifiers (cxx_pp, type_memfn_quals (t));\n \tdump_ref_qualifier (t, flags);\n \tdump_exception_spec (TYPE_RAISES_EXCEPTIONS (t), flags);\n@@ -918,7 +917,7 @@ dump_global_iord (tree t)\n   else\n     gcc_unreachable ();\n \n-  pp_printf (pp_base (cxx_pp), p, input_filename);\n+  pp_printf (cxx_pp, p, input_filename);\n }\n \n static void\n@@ -1048,7 +1047,7 @@ dump_decl (tree t, int flags)\n \t  flags &= ~TFF_UNQUALIFIED_NAME;\n \t  if (DECL_NAME (t) == NULL_TREE)\n             {\n-              if (!(pp_c_base (cxx_pp)->flags & pp_c_flag_gnu_v3))\n+              if (!(cxx_pp->flags & pp_c_flag_gnu_v3))\n                 pp_cxx_ws_string (cxx_pp, M_(\"{anonymous}\"));\n               else\n                 pp_cxx_ws_string (cxx_pp, M_(\"(anonymous namespace)\"));\n@@ -1457,14 +1456,14 @@ dump_function_decl (tree t, int flags)\n \n       if (TREE_CODE (fntype) == METHOD_TYPE)\n \t{\n-\t  pp_base (cxx_pp)->padding = pp_before;\n+\t  cxx_pp->padding = pp_before;\n \t  pp_cxx_cv_qualifier_seq (cxx_pp, class_of_this_parm (fntype));\n \t  dump_ref_qualifier (fntype, flags);\n \t}\n \n       if (flags & TFF_EXCEPTION_SPECIFICATION)\n \t{\n-\t  pp_base (cxx_pp)->padding = pp_before;\n+\t  cxx_pp->padding = pp_before;\n \t  dump_exception_spec (exceptions, flags);\n \t}\n \n@@ -1549,7 +1548,7 @@ dump_ref_qualifier (tree t, int flags ATTRIBUTE_UNUSED)\n {\n   if (FUNCTION_REF_QUALIFIED (t))\n     {\n-      pp_base (cxx_pp)->padding = pp_before;\n+      cxx_pp->padding = pp_before;\n       if (FUNCTION_RVALUE_QUALIFIED (t))\n         pp_cxx_ws_string (cxx_pp, \"&&\");\n       else\n@@ -2615,7 +2614,7 @@ static void\n reinit_cxx_pp (void)\n {\n   pp_clear_output_area (cxx_pp);\n-  pp_base (cxx_pp)->padding = pp_none;\n+  cxx_pp->padding = pp_none;\n   pp_indentation (cxx_pp) = 0;\n   pp_needs_newline (cxx_pp) = false;\n   cxx_pp->enclosing_scope = current_function_decl;\n@@ -2659,10 +2658,10 @@ decl_as_dwarf_string (tree decl, int flags)\n   const char *name;\n   /* Curiously, reinit_cxx_pp doesn't reset the flags field, so setting the flag\n      here will be adequate to get the desired behaviour.  */\n-  pp_c_base (cxx_pp)->flags |= pp_c_flag_gnu_v3;\n+  cxx_pp->flags |= pp_c_flag_gnu_v3;\n   name = decl_as_string (decl, flags);\n   /* Subsequent calls to the pretty printer shouldn't use this style.  */\n-  pp_c_base (cxx_pp)->flags &= ~pp_c_flag_gnu_v3;\n+  cxx_pp->flags &= ~pp_c_flag_gnu_v3;\n   return name;\n }\n \n@@ -2691,10 +2690,10 @@ lang_decl_dwarf_name (tree decl, int v, bool translate)\n   const char *name;\n   /* Curiously, reinit_cxx_pp doesn't reset the flags field, so setting the flag\n      here will be adequate to get the desired behaviour.  */\n-  pp_c_base (cxx_pp)->flags |= pp_c_flag_gnu_v3;\n+  cxx_pp->flags |= pp_c_flag_gnu_v3;\n   name = lang_decl_name (decl, v, translate);\n   /* Subsequent calls to the pretty printer shouldn't use this style.  */\n-  pp_c_base (cxx_pp)->flags &= ~pp_c_flag_gnu_v3;\n+  cxx_pp->flags &= ~pp_c_flag_gnu_v3;\n   return name;\n }\n \n@@ -2861,7 +2860,7 @@ type_to_string (tree typ, int verbose)\n       && !uses_template_parms (typ))\n     {\n       int aka_start; char *p;\n-      struct obstack *ob = pp_base (cxx_pp)->buffer->obstack;\n+      struct obstack *ob = cxx_pp->buffer->obstack;\n       /* Remember the end of the initial dump.  */\n       int len = obstack_object_size (ob);\n       tree aka = strip_typedefs (typ);\n@@ -2943,7 +2942,7 @@ static const char *\n cv_to_string (tree p, int v)\n {\n   reinit_cxx_pp ();\n-  pp_base (cxx_pp)->padding = v ? pp_before : pp_none;\n+  cxx_pp->padding = v ? pp_before : pp_none;\n   pp_cxx_cv_qualifier_seq (cxx_pp, p);\n   return pp_formatted_text (cxx_pp);\n }\n@@ -2954,7 +2953,7 @@ cxx_print_error_function (diagnostic_context *context, const char *file,\n \t\t\t  diagnostic_info *diagnostic)\n {\n   lhd_print_error_function (context, file, diagnostic);\n-  pp_base_set_prefix (context->printer, file);\n+  pp_set_prefix (context->printer, file);\n   maybe_print_instantiation_context (context);\n }\n \n@@ -2966,7 +2965,7 @@ cp_diagnostic_starter (diagnostic_context *context,\n   cp_print_error_function (context, diagnostic);\n   maybe_print_instantiation_context (context);\n   maybe_print_constexpr_context (context);\n-  pp_base_set_prefix (context->printer, diagnostic_build_prefix (context,\n+  pp_set_prefix (context->printer, diagnostic_build_prefix (context,\n \t\t\t\t\t\t\t\t diagnostic));\n }\n \n@@ -2975,7 +2974,7 @@ cp_diagnostic_finalizer (diagnostic_context *context,\n \t\t\t diagnostic_info *diagnostic)\n {\n   virt_loc_aware_diagnostic_finalizer (context, diagnostic);\n-  pp_base_destroy_prefix (context->printer);\n+  pp_destroy_prefix (context->printer);\n }\n \n /* Print current function onto BUFFER, in the process of reporting\n@@ -2996,10 +2995,10 @@ cp_print_error_function (diagnostic_context *context,\n       char *new_prefix = (file && abstract_origin == NULL)\n \t\t\t ? file_name_as_prefix (context, file) : NULL;\n \n-      pp_base_set_prefix (context->printer, new_prefix);\n+      pp_set_prefix (context->printer, new_prefix);\n \n       if (current_function_decl == NULL)\n-\tpp_base_string (context->printer, _(\"At global scope:\"));\n+\tpp_string (context->printer, _(\"At global scope:\"));\n       else\n \t{\n \t  tree fndecl, ao;\n@@ -3062,8 +3061,8 @@ cp_print_error_function (diagnostic_context *context,\n \t      if (fndecl)\n \t\t{\n \t\t  expanded_location s = expand_location (*locus);\n-\t\t  pp_base_character (context->printer, ',');\n-\t\t  pp_base_newline (context->printer);\n+\t\t  pp_character (context->printer, ',');\n+\t\t  pp_newline (context->printer);\n \t\t  if (s.file != NULL)\n \t\t    {\n \t\t      if (context->show_column && s.column != 0)\n@@ -3083,12 +3082,12 @@ cp_print_error_function (diagnostic_context *context,\n \t\t\t       cxx_printable_name_translate (fndecl, 2));\n \t\t}\n \t    }\n-\t  pp_base_character (context->printer, ':');\n+\t  pp_character (context->printer, ':');\n \t}\n-      pp_base_newline (context->printer);\n+      pp_newline (context->printer);\n \n       diagnostic_set_last_function (context, diagnostic);\n-      pp_base_destroy_prefix (context->printer);\n+      pp_destroy_prefix (context->printer);\n       context->printer->prefix = old_prefix;\n     }\n }\n@@ -3267,7 +3266,7 @@ print_instantiation_partial_context (diagnostic_context *context,\n     }\n   print_instantiation_partial_context_line (context, NULL, loc,\n \t\t\t\t\t    /*recursive_p=*/false);\n-  pp_base_newline (context->printer);\n+  pp_newline (context->printer);\n }\n \n /* Called from cp_thing to print the template context for an error.  */\n@@ -3287,7 +3286,7 @@ print_instantiation_context (void)\n {\n   print_instantiation_partial_context\n     (global_dc, current_instantiation (), input_location);\n-  pp_base_newline (global_dc->printer);\n+  pp_newline (global_dc->printer);\n   diagnostic_flush_buffer (global_dc);\n }\n \f\n@@ -3312,7 +3311,7 @@ maybe_print_constexpr_context (diagnostic_context *context)\n \tpp_verbatim (context->printer,\n \t\t     _(\"%r%s:%d:%R   in constexpr expansion of %qs\"),\n \t\t     \"locus\", xloc.file, xloc.line, s);\n-      pp_base_newline (context->printer);\n+      pp_newline (context->printer);\n     }\n }\n \f\n@@ -3384,7 +3383,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n       return false;\n     }\n \n-  pp_base_string (pp, result);\n+  pp_string (pp, result);\n   if (set_locus && t != NULL)\n     *text->locus = location_of (t);\n   return true;"}, {"sha": "cb38d370cee5e436e700a7cc55e0b394759382ea", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -211,7 +211,7 @@ diagnostic_inhibit_notes (diagnostic_context * context)\n    Zero means don't wrap lines.  */\n #define diagnostic_line_cutoff(DC) ((DC)->printer->wrapping.line_cutoff)\n \n-#define diagnostic_flush_buffer(DC) pp_base_flush ((DC)->printer)\n+#define diagnostic_flush_buffer(DC) pp_flush ((DC)->printer)\n \n /* True if the last module or file in which a diagnostic was reported is\n    different from the current one.  */"}, {"sha": "27fd0d18b1d66b57d3289d4f85d5402509e78275", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -31,7 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* A pointer to the formatted diagnostic message.  */\n #define pp_formatted_text_data(PP) \\\n-   ((const char *) obstack_base (pp_base (PP)->buffer->obstack))\n+   ((const char *) obstack_base ((PP)->buffer->obstack))\n \n /* Format an integer given by va_arg (ARG, type-specifier T) where\n    type-specifier is a precision modifier as indicated by PREC.  F is\n@@ -207,7 +207,7 @@ pp_append_r (pretty_printer *pp, const char *start, int length)\n    the column position to the current indentation level, assuming that a\n    newline has just been written to the buffer.  */\n void\n-pp_base_indent (pretty_printer *pp)\n+pp_indent (pretty_printer *pp)\n {\n   int n = pp_indentation (pp);\n   int i;\n@@ -252,10 +252,10 @@ pp_base_indent (pretty_printer *pp)\n \n /* Formatting phases 1 and 2: render TEXT->format_spec plus\n    TEXT->args_ptr into a series of chunks in PP->buffer->args[].\n-   Phase 3 is in pp_base_format_text.  */\n+   Phase 3 is in pp_format_text.  */\n \n void\n-pp_base_format (pretty_printer *pp, text_info *text)\n+pp_format (pretty_printer *pp, text_info *text)\n {\n   output_buffer *buffer = pp->buffer;\n   const char *p;\n@@ -617,7 +617,7 @@ pp_base_format (pretty_printer *pp, text_info *text)\n \n /* Format of a message pointed to by TEXT.  */\n void\n-pp_base_output_formatted_text (pretty_printer *pp)\n+pp_output_formatted_text (pretty_printer *pp)\n {\n   unsigned int chunk;\n   output_buffer *buffer = pp_buffer (pp);\n@@ -627,7 +627,7 @@ pp_base_output_formatted_text (pretty_printer *pp)\n   gcc_assert (buffer->obstack == &buffer->formatted_obstack);\n   gcc_assert (buffer->line_length == 0);\n \n-  /* This is a third phase, first 2 phases done in pp_base_format_args.\n+  /* This is a third phase, first 2 phases done in pp_format_args.\n      Now we actually print it.  */\n   for (chunk = 0; args[chunk]; chunk++)\n     pp_string (pp, args[chunk]);\n@@ -641,7 +641,7 @@ pp_base_output_formatted_text (pretty_printer *pp)\n /* Helper subroutine of output_verbatim and verbatim. Do the appropriate\n    settings needed by BUFFER for a verbatim formatting.  */\n void\n-pp_base_format_verbatim (pretty_printer *pp, text_info *text)\n+pp_format_verbatim (pretty_printer *pp, text_info *text)\n {\n   /* Set verbatim mode.  */\n   pp_wrapping_mode_t oldmode = pp_set_verbatim_wrapping (pp);\n@@ -656,7 +656,7 @@ pp_base_format_verbatim (pretty_printer *pp, text_info *text)\n \n /* Flush the content of BUFFER onto the attached stream.  */\n void\n-pp_base_flush (pretty_printer *pp)\n+pp_flush (pretty_printer *pp)\n {\n   pp_write_text_to_stream (pp);\n   pp_clear_state (pp);\n@@ -667,23 +667,23 @@ pp_base_flush (pretty_printer *pp)\n    output in line-wrapping mode.  A LENGTH value 0 suppresses\n    line-wrapping.  */\n void\n-pp_base_set_line_maximum_length (pretty_printer *pp, int length)\n+pp_set_line_maximum_length (pretty_printer *pp, int length)\n {\n   pp_line_cutoff (pp) = length;\n   pp_set_real_maximum_length (pp);\n }\n \n /* Clear PRETTY-PRINTER output area text info.  */\n void\n-pp_base_clear_output_area (pretty_printer *pp)\n+pp_clear_output_area (pretty_printer *pp)\n {\n   obstack_free (pp->buffer->obstack, obstack_base (pp->buffer->obstack));\n   pp->buffer->line_length = 0;\n }\n \n /* Set PREFIX for PRETTY-PRINTER.  */\n void\n-pp_base_set_prefix (pretty_printer *pp, const char *prefix)\n+pp_set_prefix (pretty_printer *pp, const char *prefix)\n {\n   pp->prefix = prefix;\n   pp_set_real_maximum_length (pp);\n@@ -693,7 +693,7 @@ pp_base_set_prefix (pretty_printer *pp, const char *prefix)\n \n /* Free PRETTY-PRINTER's prefix, a previously malloc()'d string.  */\n void\n-pp_base_destroy_prefix (pretty_printer *pp)\n+pp_destroy_prefix (pretty_printer *pp)\n {\n   if (pp->prefix != NULL)\n     {\n@@ -704,7 +704,7 @@ pp_base_destroy_prefix (pretty_printer *pp)\n \n /* Write out PRETTY-PRINTER's prefix.  */\n void\n-pp_base_emit_prefix (pretty_printer *pp)\n+pp_emit_prefix (pretty_printer *pp)\n {\n   if (pp->prefix != NULL)\n     {\n@@ -717,7 +717,7 @@ pp_base_emit_prefix (pretty_printer *pp)\n \tcase DIAGNOSTICS_SHOW_PREFIX_ONCE:\n \t  if (pp->emitted_prefix)\n \t    {\n-\t      pp_base_indent (pp);\n+\t      pp_indent (pp);\n \t      break;\n \t    }\n \t  pp_indentation (pp) += 3;\n@@ -757,7 +757,7 @@ pp_construct (pretty_printer *pp, const char *prefix, int maximum_length)\n    whitespace if appropriate.  The caller must ensure that it is\n    safe to do so.  */\n void\n-pp_base_append_text (pretty_printer *pp, const char *start, const char *end)\n+pp_append_text (pretty_printer *pp, const char *start, const char *end)\n {\n   /* Emit prefix and skip whitespace if we're starting a new line.  */\n   if (pp->buffer->line_length == 0)\n@@ -773,7 +773,7 @@ pp_base_append_text (pretty_printer *pp, const char *start, const char *end)\n /* Finishes constructing a NULL-terminated character string representing\n    the PRETTY-PRINTED text.  */\n const char *\n-pp_base_formatted_text (pretty_printer *pp)\n+pp_formatted_text (pretty_printer *pp)\n {\n   obstack_1grow (pp->buffer->obstack, '\\0');\n   return pp_formatted_text_data (pp);\n@@ -782,7 +782,7 @@ pp_base_formatted_text (pretty_printer *pp)\n /*  Return a pointer to the last character emitted in PRETTY-PRINTER's\n     output area.  A NULL pointer means no character available.  */\n const char *\n-pp_base_last_position_in_text (const pretty_printer *pp)\n+pp_last_position_in_text (const pretty_printer *pp)\n {\n   const char *p = NULL;\n   struct obstack *text = pp->buffer->obstack;\n@@ -795,7 +795,7 @@ pp_base_last_position_in_text (const pretty_printer *pp)\n /* Return the amount of characters PRETTY-PRINTER can accept to\n    make a full line.  Meaningful only in line-wrapping mode.  */\n int\n-pp_base_remaining_character_count_for_line (pretty_printer *pp)\n+pp_remaining_character_count_for_line (pretty_printer *pp)\n {\n   return pp->maximum_length - pp->buffer->line_length;\n }\n@@ -839,7 +839,7 @@ pp_verbatim (pretty_printer *pp, const char *msg, ...)\n \n /* Have PRETTY-PRINTER start a new line.  */\n void\n-pp_base_newline (pretty_printer *pp)\n+pp_newline (pretty_printer *pp)\n {\n   obstack_1grow (pp->buffer->obstack, '\\n');\n   pp_needs_newline (pp) = false;\n@@ -848,7 +848,7 @@ pp_base_newline (pretty_printer *pp)\n \n /* Have PRETTY-PRINTER add a CHARACTER.  */\n void\n-pp_base_character (pretty_printer *pp, int c)\n+pp_character (pretty_printer *pp, int c)\n {\n   if (pp_is_wrapping_line (pp)\n       && pp_remaining_character_count_for_line (pp) <= 0)\n@@ -864,20 +864,20 @@ pp_base_character (pretty_printer *pp, int c)\n /* Append a STRING to the output area of PRETTY-PRINTER; the STRING may\n    be line-wrapped if in appropriate mode.  */\n void\n-pp_base_string (pretty_printer *pp, const char *str)\n+pp_string (pretty_printer *pp, const char *str)\n {\n   pp_maybe_wrap_text (pp, str, str + (str ? strlen (str) : 0));\n }\n \n /* Maybe print out a whitespace if needed.  */\n \n void\n-pp_base_maybe_space (pretty_printer *pp)\n+pp_maybe_space (pretty_printer *pp)\n {\n-  if (pp_base (pp)->padding != pp_none)\n+  if (pp->padding != pp_none)\n     {\n       pp_space (pp);\n-      pp_base (pp)->padding = pp_none;\n+      pp->padding = pp_none;\n     }\n }\n \f"}, {"sha": "95577063da57791d40752aaf9319e53c062e2a94", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 43, "deletions": 72, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -29,30 +29,30 @@ along with GCC; see the file COPYING3.  If not see\n \n /* The type of a text to be formatted according a format specification\n    along with a list of things.  */\n-typedef struct\n+struct text_info\n {\n   const char *format_spec;\n   va_list *args_ptr;\n   int err_no;  /* for %m */\n   location_t *locus;\n   void **x_data;\n-} text_info;\n+};\n \n /* How often diagnostics are prefixed by their locations:\n    o DIAGNOSTICS_SHOW_PREFIX_NEVER: never - not yet supported;\n    o DIAGNOSTICS_SHOW_PREFIX_ONCE: emit only once;\n    o DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE: emit each time a physical\n    line is started.  */\n-typedef enum\n+enum diagnostic_prefixing_rule_t\n {\n   DIAGNOSTICS_SHOW_PREFIX_ONCE       = 0x0,\n   DIAGNOSTICS_SHOW_PREFIX_NEVER      = 0x1,\n   DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE = 0x2\n-} diagnostic_prefixing_rule_t;\n+};\n \n /* The chunk_info data structure forms a stack of the results from the\n-   first phase of formatting (pp_base_format) which have not yet been\n-   output (pp_base_output_formatted_text).  A stack is necessary because\n+   first phase of formatting (pp_format) which have not yet been\n+   output (pp_output_formatted_text).  A stack is necessary because\n    the diagnostic starter may decide to generate its own output by way\n    of the formatter.  */\n struct chunk_info\n@@ -71,7 +71,7 @@ struct chunk_info\n \n /* The output buffer datatype.  This is best seen as an abstract datatype\n    whose fields should not be accessed directly by clients.  */\n-typedef struct\n+struct output_buffer\n {\n   /* Obstack where the text is built up.  */\n   struct obstack formatted_obstack;\n@@ -96,37 +96,37 @@ typedef struct\n   /* This must be large enough to hold any printed integer or\n      floating-point value.  */\n   char digit_buffer[128];\n-} output_buffer;\n+};\n \n /* The type of pretty-printer flags passed to clients.  */\n typedef unsigned int pp_flags;\n \n-typedef enum\n+enum pp_padding\n {\n   pp_none, pp_before, pp_after\n-} pp_padding;\n+};\n \n /* Structure for switching in and out of verbatim mode in a convenient\n    manner.  */\n-typedef struct\n+struct pp_wrapping_mode_t\n {\n   /* Current prefixing rule.  */\n   diagnostic_prefixing_rule_t rule;\n \n   /* The ideal upper bound of number of characters per line, as suggested\n      by front-end.  */\n   int line_cutoff;\n-} pp_wrapping_mode_t;\n+};\n \n /* Maximum characters per line in automatic line wrapping mode.\n    Zero means don't wrap lines.  */\n-#define pp_line_cutoff(PP)  pp_base (PP)->wrapping.line_cutoff\n+#define pp_line_cutoff(PP)  (PP)->wrapping.line_cutoff\n \n /* Prefixing rule used in formatting a diagnostic message.  */\n-#define pp_prefixing_rule(PP)  pp_base (PP)->wrapping.rule\n+#define pp_prefixing_rule(PP)  (PP)->wrapping.rule\n \n /* Get or set the wrapping mode as a single entity.  */\n-#define pp_wrapping_mode(PP) pp_base (PP)->wrapping\n+#define pp_wrapping_mode(PP) (PP)->wrapping\n \n /* The type of a hook that formats client-specific data onto a pretty_pinter.\n    A client-supplied formatter returns true if everything goes well,\n@@ -135,24 +135,24 @@ typedef bool (*printer_fn) (pretty_printer *, text_info *, const char *,\n \t\t\t    int, bool, bool, bool);\n \n /* Client supplied function used to decode formats.  */\n-#define pp_format_decoder(PP) pp_base (PP)->format_decoder\n+#define pp_format_decoder(PP) (PP)->format_decoder\n \n /* TRUE if a newline character needs to be added before further\n    formatting.  */\n-#define pp_needs_newline(PP)  pp_base (PP)->need_newline\n+#define pp_needs_newline(PP)  (PP)->need_newline\n \n /* True if PRETTY-PRINTER is in line-wrapping mode.  */\n #define pp_is_wrapping_line(PP) (pp_line_cutoff (PP) > 0)\n \n /* The amount of whitespace to be emitted when starting a new line.  */\n-#define pp_indentation(PP) pp_base (PP)->indent_skip\n+#define pp_indentation(PP) (PP)->indent_skip\n \n /* True if identifiers are translated to the locale character set on\n    output.  */\n-#define pp_translate_identifiers(PP) pp_base (PP)->translate_identifiers\n+#define pp_translate_identifiers(PP) (PP)->translate_identifiers\n \n /* True if colors should be shown.  */\n-#define pp_show_color(PP) pp_base (PP)->show_color\n+#define pp_show_color(PP) (PP)->show_color\n \n /* The data structure that contains the bare minimum required to do\n    proper pretty-printing.  Clients may derived from this structure\n@@ -202,33 +202,8 @@ struct pretty_print_info\n   bool show_color;\n };\n \n-#define pp_set_line_maximum_length(PP, L) \\\n-   pp_base_set_line_maximum_length (pp_base (PP), L)\n-#define pp_set_prefix(PP, P)    pp_base_set_prefix (pp_base (PP), P)\n-#define pp_get_prefix(PP)       pp_base_get_prefix (pp_base (PP))\n static inline const char *\n-pp_base_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n-#define pp_destroy_prefix(PP)   pp_base_destroy_prefix (pp_base (PP))\n-#define pp_remaining_character_count_for_line(PP) \\\n-  pp_base_remaining_character_count_for_line (pp_base (PP))\n-#define pp_clear_output_area(PP) \\\n-  pp_base_clear_output_area (pp_base (PP))\n-#define pp_formatted_text(PP)   pp_base_formatted_text (pp_base (PP))\n-#define pp_last_position_in_text(PP) \\\n-  pp_base_last_position_in_text (pp_base (PP))\n-#define pp_emit_prefix(PP)      pp_base_emit_prefix (pp_base (PP))\n-#define pp_append_text(PP, B, E) \\\n-  pp_base_append_text (pp_base (PP), B, E)\n-#define pp_flush(PP)            pp_base_flush (pp_base (PP))\n-#define pp_format(PP, TI)       pp_base_format (pp_base (PP), TI)\n-#define pp_output_formatted_text(PP) \\\n-  pp_base_output_formatted_text (pp_base (PP))\n-#define pp_format_verbatim(PP, TI) \\\n-  pp_base_format_verbatim (pp_base (PP), TI)\n-\n-#define pp_character(PP, C)     pp_base_character (pp_base (PP), C)\n-#define pp_string(PP, S)        pp_base_string (pp_base (PP), S)\n-#define pp_newline(PP)          pp_base_newline (pp_base (PP))\n+pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n \n #define pp_space(PP)            pp_character (PP, ' ')\n #define pp_left_paren(PP)       pp_character (PP, '(')\n@@ -275,12 +250,11 @@ pp_base_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n   do {                               \\\n     pp_indentation (PP) += N;        \\\n     pp_newline (PP);                 \\\n-    pp_base_indent (pp_base (PP));   \\\n+    pp_indent (PP);                  \\\n     pp_needs_newline (PP) = false;   \\\n   } while (0)\n #define pp_maybe_newline_and_indent(PP, N) \\\n   if (pp_needs_newline (PP)) pp_newline_and_indent (PP, N)\n-#define pp_maybe_space(PP)   pp_base_maybe_space (pp_base (PP))\n #define pp_separate_with(PP, C)     \\\n    do {                             \\\n      pp_character (PP, C);          \\\n@@ -307,21 +281,18 @@ pp_base_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n \t\t\t\t\t  : (ID)))\n \n \n-#define pp_buffer(PP) pp_base (PP)->buffer\n-/* Clients that directly derive from pretty_printer need to override\n-   this macro to return a pointer to the base pretty_printer structure.  */\n-#define pp_base(PP) (PP)\n+#define pp_buffer(PP) (PP)->buffer\n \n extern void pp_construct (pretty_printer *, const char *, int);\n-extern void pp_base_set_line_maximum_length (pretty_printer *, int);\n-extern void pp_base_set_prefix (pretty_printer *, const char *);\n-extern void pp_base_destroy_prefix (pretty_printer *);\n-extern int pp_base_remaining_character_count_for_line (pretty_printer *);\n-extern void pp_base_clear_output_area (pretty_printer *);\n-extern const char *pp_base_formatted_text (pretty_printer *);\n-extern const char *pp_base_last_position_in_text (const pretty_printer *);\n-extern void pp_base_emit_prefix (pretty_printer *);\n-extern void pp_base_append_text (pretty_printer *, const char *, const char *);\n+extern void pp_set_line_maximum_length (pretty_printer *, int);\n+extern void pp_set_prefix (pretty_printer *, const char *);\n+extern void pp_destroy_prefix (pretty_printer *);\n+extern int pp_remaining_character_count_for_line (pretty_printer *);\n+extern void pp_clear_output_area (pretty_printer *);\n+extern const char *pp_formatted_text (pretty_printer *);\n+extern const char *pp_last_position_in_text (const pretty_printer *);\n+extern void pp_emit_prefix (pretty_printer *);\n+extern void pp_append_text (pretty_printer *, const char *, const char *);\n \n /* If we haven't already defined a front-end-specific diagnostics\n    style, use the generic one.  */\n@@ -343,18 +314,18 @@ extern void pp_printf (pretty_printer *, const char *, ...)\n \n extern void pp_verbatim (pretty_printer *, const char *, ...)\n      ATTRIBUTE_GCC_PPDIAG(2,3);\n-extern void pp_base_flush (pretty_printer *);\n-extern void pp_base_format (pretty_printer *, text_info *);\n-extern void pp_base_output_formatted_text (pretty_printer *);\n-extern void pp_base_format_verbatim (pretty_printer *, text_info *);\n-\n-extern void pp_base_indent (pretty_printer *);\n-extern void pp_base_newline (pretty_printer *);\n-extern void pp_base_character (pretty_printer *, int);\n-extern void pp_base_string (pretty_printer *, const char *);\n+extern void pp_flush (pretty_printer *);\n+extern void pp_format (pretty_printer *, text_info *);\n+extern void pp_output_formatted_text (pretty_printer *);\n+extern void pp_format_verbatim (pretty_printer *, text_info *);\n+\n+extern void pp_indent (pretty_printer *);\n+extern void pp_newline (pretty_printer *);\n+extern void pp_character (pretty_printer *, int);\n+extern void pp_string (pretty_printer *, const char *);\n extern void pp_write_text_to_stream (pretty_printer *);\n extern void pp_write_text_as_dot_label_to_stream (pretty_printer *, bool);\n-extern void pp_base_maybe_space (pretty_printer *);\n+extern void pp_maybe_space (pretty_printer *);\n \n /* Switch into verbatim mode and return the old mode.  */\n static inline pp_wrapping_mode_t\n@@ -365,7 +336,7 @@ pp_set_verbatim_wrapping_ (pretty_printer *pp)\n   pp_prefixing_rule (pp) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n   return oldmode;\n }\n-#define pp_set_verbatim_wrapping(PP) pp_set_verbatim_wrapping_ (pp_base (PP))\n+#define pp_set_verbatim_wrapping(PP) pp_set_verbatim_wrapping_ (PP)\n \n extern const char *identifier_to_locale (const char *);\n extern void *(*identifier_to_locale_alloc) (size_t);"}, {"sha": "2cf3d102728c25de988610ef5725ce60d297551e", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -859,7 +859,7 @@ str_pattern_slim (const_rtx x)\n {\n   pretty_printer *pp = init_rtl_slim_pretty_print (NULL);\n   print_pattern (pp, x, 0);\n-  return pp_base_formatted_text (pp);\n+  return pp_formatted_text (pp);\n }\n \n /* Emit a slim dump of X (an insn) to stderr.  */"}, {"sha": "7f24cbf5e4072f1eb9155193821f4102af84476b", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -190,7 +190,7 @@ mf_varname_tree (tree decl)\n   }\n \n   /* Return the lot as a new STRING_CST.  */\n-  buf_contents = pp_base_formatted_text (buf);\n+  buf_contents = pp_formatted_text (buf);\n   result = mf_build_string (buf_contents);\n   pp_clear_output_area (buf);\n "}, {"sha": "f00ac4cdcacf967fc53d2b2dea025315eaf904ca", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -3112,7 +3112,7 @@ percent_K_format (text_info *text)\n /* Print the identifier ID to PRETTY-PRINTER.  */\n \n void\n-pp_base_tree_identifier (pretty_printer *pp, tree id)\n+pp_tree_identifier (pretty_printer *pp, tree id)\n {\n   if (pp_translate_identifiers (pp))\n     {"}, {"sha": "7da8000d5b82c944f7935d4534370fe50ed18c49", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b066401f2654cca7577a6de6d6d4c38701549571/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=b066401f2654cca7577a6de6d6d4c38701549571", "patch": "@@ -24,16 +24,13 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"pretty-print.h\"\n \n-#define pp_tree_identifier(PP, T)                      \\\n-  pp_base_tree_identifier (pp_base (PP), T)\n-\n #define pp_unsupported_tree(PP, T)                         \\\n-  pp_verbatim (pp_base (PP), \"#%qs not supported by %s#\", \\\n+  pp_verbatim (PP, \"#%qs not supported by %s#\", \\\n                tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)\n \n #define pp_ti_abstract_origin(TI) ((tree *) (TI)->x_data)\n \n-extern void pp_base_tree_identifier (pretty_printer *, tree);\n+extern void pp_tree_identifier (pretty_printer *, tree);\n \n /* In tree-pretty-print.c  */\n extern void print_declaration (pretty_printer *, tree, int, int);"}]}