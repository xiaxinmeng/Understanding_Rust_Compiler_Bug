{"sha": "49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkOTg4ZTdlODE2NGQ3MWU3M2MyZGU1YTFmMWM2YTJhZmUyMDVhNA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2008-09-03T20:20:57Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2008-09-03T20:20:57Z"}, "message": "re PR middle-end/37243 (IRA causes wrong code generation)\n\n2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-opt/37243\n\n\t* ira-int.h (ira_loop_tree_node): Rename mentioned_allocnos to\n\tall_allocnos.\n\n\t* ira-color.c (print_loop_title): Use all_allocnos.\n\t(color_pass): Ditto.  Don't add border_allocnos.  Check that\n\tsubloop allocno in the correspdoning bitmap all_allocnos.\n\n\t* ira-emit.c (change_loop): Use all_allocnos.\n\n\t* ira-build.c (create_loop_tree_nodes, finish_loop_tree_node):\n\tDitto.\n\t(ira_create_allocno): Set up all_allocnos bit for the created\n\tallocno.\n\t(create_cap_allocno): Remove setting mentioned_allocnos.\n\t(create_insn_allocnos): Ditto.\n\t(remove_unnecessary_allocnos): Use all_allocnos.\n\t(check_allocno_creation): Check that allocnos are in the\n\tcorresponding bitmap all_allocnos.\n\nFrom-SVN: r139952", "tree": {"sha": "9019b331be1659d737cfbcd55b9525108bc47b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9019b331be1659d737cfbcd55b9525108bc47b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27738602d5c08a8725ef63e43899bc6bfb4eab3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27738602d5c08a8725ef63e43899bc6bfb4eab3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27738602d5c08a8725ef63e43899bc6bfb4eab3c"}], "stats": {"total": 92, "additions": 55, "deletions": 37}, "files": [{"sha": "42f70cd84f9ae6ac1e1f319703fa165e8d4d0c7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "patch": "@@ -4,6 +4,29 @@\n \tmemory barrier to below the test-and-set.\n \t(alpha_split_lock_test_and_set_12): Likewise.\n \n+2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-opt/37243\n+\n+\t* ira-int.h (ira_loop_tree_node): Rename mentioned_allocnos to\n+\tall_allocnos.\n+\n+\t* ira-color.c (print_loop_title): Use all_allocnos.\n+\t(color_pass): Ditto.  Don't add border_allocnos.  Check that\n+\tsubloop allocno in the correspdoning bitmap all_allocnos.\n+\n+\t* ira-emit.c (change_loop): Use all_allocnos.\n+\n+\t* ira-build.c (create_loop_tree_nodes, finish_loop_tree_node):\n+\tDitto.\n+\t(ira_create_allocno): Set up all_allocnos bit for the created\n+\tallocno.\n+\t(create_cap_allocno): Remove setting mentioned_allocnos.\n+\t(create_insn_allocnos): Ditto.\n+\t(remove_unnecessary_allocnos): Use all_allocnos.\n+\t(check_allocno_creation): Check that allocnos are in the\n+\tcorresponding bitmap all_allocnos.\n+\t\n 2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-opt/37243"}, {"sha": "4f2fb8f539623779c6321637d45c89ecb2f6b836", "filename": "gcc/ira-build.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "patch": "@@ -113,7 +113,7 @@ create_loop_tree_nodes (bool loops_p)\n       ira_bb_nodes[i].regno_allocno_map = NULL;\n       memset (ira_bb_nodes[i].reg_pressure, 0,\n \t      sizeof (ira_bb_nodes[i].reg_pressure));\n-      ira_bb_nodes[i].mentioned_allocnos = NULL;\n+      ira_bb_nodes[i].all_allocnos = NULL;\n       ira_bb_nodes[i].modified_regnos = NULL;\n       ira_bb_nodes[i].border_allocnos = NULL;\n       ira_bb_nodes[i].local_copies = NULL;\n@@ -156,7 +156,7 @@ create_loop_tree_nodes (bool loops_p)\n \t      sizeof (ira_allocno_t) * max_regno);\n       memset (ira_loop_nodes[i].reg_pressure, 0,\n \t      sizeof (ira_loop_nodes[i].reg_pressure));\n-      ira_loop_nodes[i].mentioned_allocnos = ira_allocate_bitmap ();\n+      ira_loop_nodes[i].all_allocnos = ira_allocate_bitmap ();\n       ira_loop_nodes[i].modified_regnos = ira_allocate_bitmap ();\n       ira_loop_nodes[i].border_allocnos = ira_allocate_bitmap ();\n       ira_loop_nodes[i].local_copies = ira_allocate_bitmap ();\n@@ -188,7 +188,7 @@ finish_loop_tree_node (ira_loop_tree_node_t loop)\n       ira_free_bitmap (loop->local_copies);\n       ira_free_bitmap (loop->border_allocnos);\n       ira_free_bitmap (loop->modified_regnos);\n-      ira_free_bitmap (loop->mentioned_allocnos);\n+      ira_free_bitmap (loop->all_allocnos);\n       ira_free (loop->regno_allocno_map);\n       loop->regno_allocno_map = NULL;\n     }\n@@ -212,8 +212,8 @@ finish_loop_tree_nodes (void)\n \tira_free_bitmap (ira_bb_nodes[i].border_allocnos);\n       if (ira_bb_nodes[i].modified_regnos != NULL)\n \tira_free_bitmap (ira_bb_nodes[i].modified_regnos);\n-      if (ira_bb_nodes[i].mentioned_allocnos != NULL)\n-\tira_free_bitmap (ira_bb_nodes[i].mentioned_allocnos);\n+      if (ira_bb_nodes[i].all_allocnos != NULL)\n+\tira_free_bitmap (ira_bb_nodes[i].all_allocnos);\n       if (ira_bb_nodes[i].regno_allocno_map != NULL)\n \tira_free (ira_bb_nodes[i].regno_allocno_map);\n     }\n@@ -437,6 +437,7 @@ ira_create_allocno (int regno, bool cap_p, ira_loop_tree_node_t loop_tree_node)\n   ALLOCNO_CAP (a) = NULL;\n   ALLOCNO_CAP_MEMBER (a) = NULL;\n   ALLOCNO_NUM (a) = ira_allocnos_num;\n+  bitmap_set_bit (loop_tree_node->all_allocnos, ALLOCNO_NUM (a));\n   ALLOCNO_CONFLICT_ALLOCNO_ARRAY (a) = NULL;\n   ALLOCNO_CONFLICT_ALLOCNOS_NUM (a) = 0;\n   COPY_HARD_REG_SET (ALLOCNO_CONFLICT_HARD_REGS (a), ira_no_alloc_regs);\n@@ -765,7 +766,6 @@ create_cap_allocno (ira_allocno_t a)\n   ira_set_allocno_cover_class (cap, cover_class);\n   ALLOCNO_AVAILABLE_REGS_NUM (cap) = ALLOCNO_AVAILABLE_REGS_NUM (a);\n   ALLOCNO_CAP_MEMBER (cap) = a;\n-  bitmap_set_bit (parent->mentioned_allocnos, ALLOCNO_NUM (cap));\n   ALLOCNO_CAP (a) = cap;\n   ALLOCNO_COVER_CLASS_COST (cap) = ALLOCNO_COVER_CLASS_COST (a);\n   ALLOCNO_MEMORY_COST (cap) = ALLOCNO_MEMORY_COST (a);\n@@ -1290,8 +1290,6 @@ create_insn_allocnos (rtx x, bool output_p)\n \t  \n \t  ALLOCNO_NREFS (a)++;\n \t  ALLOCNO_FREQ (a) += REG_FREQ_FROM_BB (curr_bb);\n-\t  bitmap_set_bit (ira_curr_loop_tree_node->mentioned_allocnos,\n-\t\t\t  ALLOCNO_NUM (a));\n \t  if (output_p)\n \t    bitmap_set_bit (ira_curr_loop_tree_node->modified_regnos, regno);\n \t}\n@@ -1709,7 +1707,7 @@ remove_unnecessary_allocnos (void)\n \t\tprev_a = a;\n \t\tALLOCNO_LOOP_TREE_NODE (a) = parent;\n \t\tparent->regno_allocno_map[regno] = a;\n-\t\tbitmap_set_bit (parent->mentioned_allocnos, ALLOCNO_NUM (a));\n+\t\tbitmap_set_bit (parent->all_allocnos, ALLOCNO_NUM (a));\n \t      }\n \t    else\n \t      {\n@@ -2358,20 +2356,18 @@ check_allocno_creation (void)\n \n   FOR_EACH_ALLOCNO (a, ai)\n     {\n-      if (ALLOCNO_LOOP_TREE_NODE (a) == ira_loop_tree_root)\n+      loop_tree_node = ALLOCNO_LOOP_TREE_NODE (a);\n+      ira_assert (bitmap_bit_p (loop_tree_node->all_allocnos,\n+\t\t\t\tALLOCNO_NUM (a)));\n+      if (loop_tree_node == ira_loop_tree_root)\n \tcontinue;\n       if (ALLOCNO_CAP_MEMBER (a) != NULL)\n-\t{\n-\t  ira_assert (ALLOCNO_CAP (a) != NULL);\n-\t}\n+\tira_assert (ALLOCNO_CAP (a) != NULL);\n       else if (ALLOCNO_CAP (a) == NULL)\n-\t{\n-\t  loop_tree_node = ALLOCNO_LOOP_TREE_NODE (a);\n-\t  ira_assert (loop_tree_node->parent\n-\t\t      ->regno_allocno_map[ALLOCNO_REGNO (a)] != NULL\n-\t\t      && bitmap_bit_p (loop_tree_node->border_allocnos,\n-\t\t\t\t       ALLOCNO_NUM (a)));\n-\t}\n+\tira_assert (loop_tree_node->parent\n+\t\t    ->regno_allocno_map[ALLOCNO_REGNO (a)] != NULL\n+\t\t    && bitmap_bit_p (loop_tree_node->border_allocnos,\n+\t\t\t\t     ALLOCNO_NUM (a)));\n     }\n }\n #endif"}, {"sha": "8afc01078eef35b68921bb60d81209491e285d12", "filename": "gcc/ira-color.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "patch": "@@ -1606,13 +1606,13 @@ print_loop_title (ira_loop_tree_node_t loop_tree_node)\n \n   ira_assert (loop_tree_node->loop != NULL);\n   fprintf (ira_dump_file,\n-\t   \"\\n  Loop %d (parent %d, header bb%d, depth %d)\\n    ref:\",\n+\t   \"\\n  Loop %d (parent %d, header bb%d, depth %d)\\n    all:\",\n \t   loop_tree_node->loop->num,\n \t   (loop_tree_node->parent == NULL\n \t    ? -1 : loop_tree_node->parent->loop->num),\n \t   loop_tree_node->loop->header->index,\n \t   loop_depth (loop_tree_node->loop));\n-  EXECUTE_IF_SET_IN_BITMAP (loop_tree_node->mentioned_allocnos, 0, j, bi)\n+  EXECUTE_IF_SET_IN_BITMAP (loop_tree_node->all_allocnos, 0, j, bi)\n     fprintf (ira_dump_file, \" %dr%d\", j, ALLOCNO_REGNO (ira_allocnos[j]));\n   fprintf (ira_dump_file, \"\\n    modified regnos:\");\n   EXECUTE_IF_SET_IN_BITMAP (loop_tree_node->modified_regnos, 0, j, bi)\n@@ -1654,8 +1654,7 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n   if (internal_flag_ira_verbose > 1 && ira_dump_file != NULL)\n     print_loop_title (loop_tree_node);\n \n-  bitmap_copy (coloring_allocno_bitmap, loop_tree_node->mentioned_allocnos);\n-  bitmap_ior_into (coloring_allocno_bitmap, loop_tree_node->border_allocnos);\n+  bitmap_copy (coloring_allocno_bitmap, loop_tree_node->all_allocnos);\n   bitmap_copy (consideration_allocno_bitmap, coloring_allocno_bitmap);\n   EXECUTE_IF_SET_IN_BITMAP (consideration_allocno_bitmap, 0, j, bi)\n     {\n@@ -1669,7 +1668,7 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n   /* Process caps.  They are processed just once.  */\n   if (flag_ira_algorithm == IRA_ALGORITHM_MIXED\n       || flag_ira_algorithm == IRA_ALGORITHM_REGIONAL)\n-    EXECUTE_IF_SET_IN_BITMAP (loop_tree_node->mentioned_allocnos, 0, j, bi)\n+    EXECUTE_IF_SET_IN_BITMAP (loop_tree_node->all_allocnos, 0, j, bi)\n       {\n \ta = ira_allocnos[j];\n \tif (ALLOCNO_CAP_MEMBER (a) == NULL)\n@@ -1725,12 +1724,11 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n \t  if (subloop_allocno == NULL\n \t      || ALLOCNO_CAP (subloop_allocno) != NULL)\n \t    continue;\n-\t  if ((flag_ira_algorithm == IRA_ALGORITHM_MIXED\n-\t       && (loop_tree_node->reg_pressure[rclass]\n-\t\t   <= ira_available_class_regs[rclass]))\n-\t      || (hard_regno < 0\n-\t\t  && ! bitmap_bit_p (subloop_node->mentioned_allocnos,\n-\t\t\t\t     ALLOCNO_NUM (subloop_allocno))))\n+\t  ira_assert (bitmap_bit_p (subloop_node->all_allocnos,\n+\t\t\t\t    ALLOCNO_NUM (subloop_allocno)));\n+\t  if (flag_ira_algorithm == IRA_ALGORITHM_MIXED\n+\t      && (loop_tree_node->reg_pressure[rclass]\n+\t\t  <= ira_available_class_regs[rclass]))\n \t    {\n \t      if (! ALLOCNO_ASSIGNED_P (subloop_allocno))\n \t\t{"}, {"sha": "11199237d48bfacc61e38af3d09fce0a2c908299", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "patch": "@@ -424,7 +424,7 @@ change_loop (ira_loop_tree_node_t node)\n      might get the different hard register.  So we need to change\n      ALLOCNO_REG.  */\n   bitmap_and_compl (local_allocno_bitmap,\n-\t\t    ira_curr_loop_tree_node->mentioned_allocnos,\n+\t\t    ira_curr_loop_tree_node->all_allocnos,\n \t\t    ira_curr_loop_tree_node->border_allocnos);\n   EXECUTE_IF_SET_IN_REG_SET (local_allocno_bitmap, 0, i, bi)\n     {"}, {"sha": "5f88e271a480f5d75507b28ad4308fb0c9618dc1", "filename": "gcc/ira-int.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d988e7e8164d71e73c2de5a1f1c6a2afe205a4/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=49d988e7e8164d71e73c2de5a1f1c6a2afe205a4", "patch": "@@ -111,16 +111,17 @@ struct ira_loop_tree_node\n      (defined only for the cover classes).  */\n   int reg_pressure[N_REG_CLASSES];\n \n-  /* Numbers of allocnos referred in the loop node.  */\n-  bitmap mentioned_allocnos;\n+  /* Numbers of allocnos referred or living in the loop node (except\n+     for its subloops).  */\n+  bitmap all_allocnos;\n+\n+  /* Numbers of allocnos living at the loop borders.  */\n+  bitmap border_allocnos;\n \n   /* Regnos of pseudos modified in the loop node (including its\n      subloops).  */\n   bitmap modified_regnos;\n \n-  /* Numbers of allocnos living at the loop borders.  */\n-  bitmap border_allocnos;\n-\n   /* Numbers of copies referred in the corresponding loop.  */\n   bitmap local_copies;\n };"}]}