{"sha": "8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyZmMxYzQ4MTE3OTZhNTVlNDM2NDFkOGY4NjJhODhiMWUwZWFjNQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2007-09-03T05:34:30Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-09-03T05:34:30Z"}, "message": "mips.md (UNSPEC_COMPARE_AND_SWAP, [...]): New define_constants.\n\n2007-09-02  David Daney  <ddaney@avtrex.com>\n\n\t* config/mips/mips.md (UNSPEC_COMPARE_AND_SWAP, UNSPEC_SYNC_OLD_OP,\n\tUNSPEC_SYNC_NEW_OP, UNSPEC_SYNC_EXCHANGE): New define_constants.\n\t(optab, insn): Add more attributes.\n\t(fetchop_bit): New code macro.\n\t(immediate_insn): New code macro attribute.\n\t(sync): Change condition to ISA_HAS_SYNC.\n\t(rdhwr): Change predicate for operand 0 to register_operand.\n\t(memory_barrier): New expand.\n\t(sync_compare_and_swap<mode>, sync_add<mode>, sync_sub<mode>,\n\tsync_old_add<mode>, sync_old_sub<mode>, sync_new_add<mode>,\n\tsync_new_sub<mode>, sync_<optab><mode>,\tsync_old_<optab><mode>,\n\tsync_new_<optab><mode>, sync_nand<mode>, sync_old_nand<mode>,\n\tsync_new_nand<mode>, sync_lock_test_and_set<mode>): New insns.\n\t* config/mips/mips.h (ISA_HAS_SYNC, ISA_HAS_LL_SC): New ISA predicates.\n\t(MIPS_COMPARE_AND_SWAP, MIPS_SYNC_OP, MIPS_SYNC_OLD_OP,\n\tMIPS_SYNC_NEW_OP, MIPS_SYNC_NAND, MIPS_SYNC_OLD_NAND,\n\tMIPS_SYNC_NEW_NAND, MIPS_SYNC_EXCHANGE): New Macros.\n\t\n2007-09-02  David Daney  <ddaney@avtrex.com>\n\t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: New test.\n\t* gcc.target/mips/gcc-have-sync-compare-and-swap-2.c: Ditto.\n\t* gcc.target/mips/atomic-memory-1.c: Ditto.\n\t* testsuite/gcc.target/mips/atomic-memory-2.c: Ditto.\n\nFrom-SVN: r128037", "tree": {"sha": "063226fe667696eeb8a1acd3ac8cb45ca0210bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/063226fe667696eeb8a1acd3ac8cb45ca0210bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/comments", "author": null, "committer": null, "parents": [{"sha": "200c50363b13d9a46c0d94942cbfa34bfecec8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200c50363b13d9a46c0d94942cbfa34bfecec8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200c50363b13d9a46c0d94942cbfa34bfecec8ab"}], "stats": {"total": 513, "additions": 508, "deletions": 5}, "files": [{"sha": "6b10f52b9f89f42893b16572549e81143477351f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -1,3 +1,23 @@\n+2007-09-02  David Daney  <ddaney@avtrex.com>\n+\n+\t* config/mips/mips.md (UNSPEC_COMPARE_AND_SWAP, UNSPEC_SYNC_OLD_OP,\n+\tUNSPEC_SYNC_NEW_OP, UNSPEC_SYNC_EXCHANGE): New define_constants.\n+\t(optab, insn): Add more attributes.\n+\t(fetchop_bit): New code macro.\n+\t(immediate_insn): New code macro attribute.\n+\t(sync): Change condition to ISA_HAS_SYNC.\n+\t(rdhwr): Change predicate for operand 0 to register_operand.\n+\t(memory_barrier): New expand.\n+\t(sync_compare_and_swap<mode>, sync_add<mode>, sync_sub<mode>,\n+\tsync_old_add<mode>, sync_old_sub<mode>, sync_new_add<mode>,\n+\tsync_new_sub<mode>, sync_<optab><mode>,\tsync_old_<optab><mode>,\n+\tsync_new_<optab><mode>, sync_nand<mode>, sync_old_nand<mode>,\n+\tsync_new_nand<mode>, sync_lock_test_and_set<mode>): New insns.\n+\t* config/mips/mips.h (ISA_HAS_SYNC, ISA_HAS_LL_SC): New ISA predicates.\n+\t(MIPS_COMPARE_AND_SWAP, MIPS_SYNC_OP, MIPS_SYNC_OLD_OP,\n+\tMIPS_SYNC_NEW_OP, MIPS_SYNC_NAND, MIPS_SYNC_OLD_NAND,\n+\tMIPS_SYNC_NEW_NAND, MIPS_SYNC_EXCHANGE): New Macros.\n+\t\n 2007-09-03  Jesper Nilsson  <jesper.nilsson@axis.com>\n \t    Hans-Peter Nilsson  <hp@axis.com>\n "}, {"sha": "a44460b08532cf9fc4b01cefde519057aa01685c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -881,6 +881,13 @@ extern enum mips_code_readable_setting mips_code_readable;\n /* ISA includes synci, jr.hb and jalr.hb.  */\n #define ISA_HAS_SYNCI (ISA_MIPS32R2 && !TARGET_MIPS16)\n \n+/* ISA includes sync.  */\n+#define ISA_HAS_SYNC ((mips_isa >= 2 || TARGET_MIPS3900) && !TARGET_MIPS16)\n+\n+/* ISA includes ll and sc.  Note that this implies ISA_HAS_SYNC\n+   because the expanders use both ISA_HAS_SYNC and ISA_HAS_LL_SC\n+   instructions.  */\n+#define ISA_HAS_LL_SC (mips_isa >= 2 && !TARGET_MIPS16)\n \f\n /* Add -G xx support.  */\n \n@@ -2871,3 +2878,140 @@ while (0)\n #ifndef HAVE_AS_TLS\n #define HAVE_AS_TLS 0\n #endif\n+\n+/* Return an asm string that atomically:\n+\n+     - Compares memory reference %1 to register %2 and, if they are\n+       equal, changes %1 to %3.\n+\n+     - Sets register %0 to the old value of memory reference %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\" instructions\n+   and OP is the instruction that should be used to load %3 into a\n+   register.  */\n+#define MIPS_COMPARE_AND_SWAP(SUFFIX, OP)\t\\\n+  \"%(%<%[sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"\\tbne\\t%0,%2,2f\\n\"\t\t\t\t\\\n+  \"\\t\" OP \"\\t%@,%3\\n\"\t\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"2:%]%>%)\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Sets memory reference %0 to %0 INSN %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n+   instructions.  */\n+#define MIPS_SYNC_OP(SUFFIX, INSN)\t\t\\\n+  \"%(%<%[sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n+  \"\\t\" INSN \"\\t%@,%@,%1\\n\"\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop%]%>%)\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Sets memory reference %1 to %1 INSN %2.\n+\n+     - Sets register %0 to the old value of memory reference %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n+   instructions.  */\n+#define MIPS_SYNC_OLD_OP(SUFFIX, INSN)\t\t\\\n+  \"%(%<%[sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"\\t\" INSN \"\\t%@,%0,%2\\n\"\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop%]%>%)\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Sets memory reference %1 to %1 INSN %2.\n+\n+     - Sets register %0 to the new value of memory reference %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n+   instructions.  */\n+#define MIPS_SYNC_NEW_OP(SUFFIX, INSN)\t\t\\\n+  \"%(%<%[sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"\\t\" INSN \"\\t%@,%0,%2\\n\"\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%0,%0,%2%]%>%)\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Sets memory reference %0 to ~%0 AND %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n+   instructions.  INSN is the and instruction needed to and a register\n+   with %2.  */\n+#define MIPS_SYNC_NAND(SUFFIX, INSN)\t\t\\\n+  \"%(%<%[sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n+  \"\\tnor\\t%@,%@,%.\\n\"\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%@,%@,%1\\n\"\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop%]%>%)\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Sets memory reference %1 to ~%1 AND %2.\n+\n+     - Sets register %0 to the old value of memory reference %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n+   instructions.  INSN is the and instruction needed to and a register\n+   with %2.  */\n+#define MIPS_SYNC_OLD_NAND(SUFFIX, INSN)\t\\\n+  \"%(%<%[sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"\\tnor\\t%@,%0,%.\\n\"\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%@,%@,%2\\n\"\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop%]%>%)\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Sets memory reference %1 to ~%1 AND %2.\n+\n+     - Sets register %0 to the new value of memory reference %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n+   instructions.  INSN is the and instruction needed to and a register\n+   with %2.  */\n+#define MIPS_SYNC_NEW_NAND(SUFFIX, INSN)\t\\\n+  \"%(%<%[sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"\\tnor\\t%0,%0,%.\\n\"\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%@,%0,%2\\n\"\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%0,%0,%2%]%>%)\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Sets memory reference %1 to %2.\n+\n+     - Sets register %0 to the old value of memory reference %1.\n+\n+   SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n+   instructions.  OP is the and instruction that should be used to\n+   load %2 into a register.  */\n+#define MIPS_SYNC_EXCHANGE(SUFFIX, OP)\t\t\\\n+  \"%(%<%[\\n\"\t\t\t\t\t\\\n+  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"\\t\" OP \"\\t%@,%2\\n\"\t\t\t\t\\\n+  \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"\\tsync%]%>%)\"\n+"}, {"sha": "368da18077c43d64ab8a840d004621fb01d01368", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 242, "deletions": 5, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -53,7 +53,11 @@\n    (UNSPEC_RDHWR\t\t34)\n    (UNSPEC_SYNCI\t\t35)\n    (UNSPEC_SYNC\t\t\t36)\n-\n+   (UNSPEC_COMPARE_AND_SWAP\t37)\n+   (UNSPEC_SYNC_OLD_OP\t\t38)\n+   (UNSPEC_SYNC_NEW_OP\t\t39)\n+   (UNSPEC_SYNC_EXCHANGE\t40)\n+   \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n    (FAKE_CALL_REGNO\t\t79)\n@@ -576,12 +580,18 @@\n ;; <optab> expands to the name of the optab for a particular code.\n (define_code_attr optab [(ashift \"ashl\")\n \t\t\t (ashiftrt \"ashr\")\n-\t\t\t (lshiftrt \"lshr\")])\n+\t\t\t (lshiftrt \"lshr\")\n+\t\t\t (ior \"ior\")\n+\t\t\t (xor \"xor\")\n+\t\t\t (and \"and\")])\n \n ;; <insn> expands to the name of the insn that implements a particular code.\n (define_code_attr insn [(ashift \"sll\")\n \t\t\t(ashiftrt \"sra\")\n-\t\t\t(lshiftrt \"srl\")])\n+\t\t\t(lshiftrt \"srl\")\n+\t\t\t(ior \"or\")\n+\t\t\t(xor \"xor\")\n+\t\t\t(and \"and\")])\n \n ;; <fcond> is the c.cond.fmt condition associated with a particular code.\n (define_code_attr fcond [(unordered \"un\")\n@@ -597,6 +607,14 @@\n \t\t\t\t (gt \"lt\")\n \t\t\t\t (unge \"ule\")\n \t\t\t\t (ungt \"ult\")])\n+\n+;; Atomic fetch bitwise operations.\n+(define_code_macro fetchop_bit [ior xor and])\n+\n+;; <immediate_insn> expands to the name of the insn that implements\n+;; a particular code to operate in immediate values.\n+(define_code_attr immediate_insn [(ior \"ori\") (xor \"xori\") (and \"andi\")])\n+\n \f\n ;; .........................\n ;;\n@@ -4251,7 +4269,7 @@\n \n (define_insn \"sync\"\n   [(unspec_volatile [(const_int 0)] UNSPEC_SYNC)]\n-  \"ISA_HAS_SYNCI\"\n+  \"ISA_HAS_SYNC\"\n   \"sync\")\n \n (define_insn \"synci\"\n@@ -4261,7 +4279,7 @@\n   \"synci\\t0(%0)\")\n \n (define_insn \"rdhwr\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (unspec_volatile [(match_operand:SI 1 \"const_int_operand\" \"n\")]\n         UNSPEC_RDHWR))]\n   \"ISA_HAS_SYNCI\"\n@@ -4283,6 +4301,225 @@\n          \"\\t.set\\tpop\";\n }\n   [(set_attr \"length\" \"20\")])\n+\n+;; Atomic memory operations.\n+\n+(define_expand \"memory_barrier\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_SYNC)]\n+  \"ISA_HAS_SYNC\"\n+  \"\")\n+\n+(define_insn \"sync_compare_and_swap<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"register_operand\" \"d,d\")\n+\t\t\t      (match_operand:GPR 3 \"arith_operand\" \"I,d\")]\n+\t UNSPEC_COMPARE_AND_SWAP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_COMPARE_AND_SWAP (\"<d>\", \"li\");\n+  else\n+    return MIPS_COMPARE_AND_SWAP (\"<d>\", \"move\");\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_add<mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n+\t(unspec_volatile:GPR\n+          [(plus:GPR (match_dup 0)\n+\t\t\t      (match_operand:GPR 1 \"arith_operand\" \"I,d\"))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OP (\"<d>\", \"<d>addiu\");\t\n+  else\n+    return MIPS_SYNC_OP (\"<d>\", \"<d>addu\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_sub<mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R\")\n+\t(unspec_volatile:GPR\n+          [(minus:GPR (match_dup 0)\n+\t\t\t      (match_operand:GPR 1 \"register_operand\" \"d\"))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+    return MIPS_SYNC_OP (\"<d>\", \"<d>subu\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_old_add<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(plus:GPR (match_dup 1)\n+\t\t     (match_operand:GPR 2 \"arith_operand\" \"I,d\"))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addiu\");\t\n+  else\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addu\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_old_sub<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(minus:GPR (match_dup 1)\n+\t\t      (match_operand:GPR 2 \"register_operand\" \"d\"))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>subu\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_new_add<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+        (plus:GPR (match_operand:GPR 1 \"memory_operand\" \"+R,R\")\n+\t\t  (match_operand:GPR 2 \"arith_operand\" \"I,d\")))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(plus:GPR (match_dup 1) (match_dup 2))]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addiu\");\t\n+  else\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addu\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_new_sub<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+        (minus:GPR (match_operand:GPR 1 \"memory_operand\" \"+R\")\n+\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(minus:GPR (match_dup 1) (match_dup 2))]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>subu\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_<optab><mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n+\t(unspec_volatile:GPR\n+          [(fetchop_bit:GPR (match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")\n+\t\t\t      (match_dup 0))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OP (\"<d>\", \"<immediate_insn>\");\t\n+  else\n+    return MIPS_SYNC_OP (\"<d>\", \"<insn>\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_old_<optab><mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n+\t\t\t    (match_dup 1))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<immediate_insn>\");\t\n+  else\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<insn>\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_new_<optab><mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n+\t\t\t    (match_dup 1))]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<immediate_insn>\");\t\n+  else\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<insn>\");\t\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_insn \"sync_nand<mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n+\t(unspec_volatile:GPR [(match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NAND (\"<d>\", \"andi\");\t\n+  else\n+    return MIPS_SYNC_NAND (\"<d>\", \"and\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_old_nand<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+        (unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OLD_NAND (\"<d>\", \"andi\");\t\n+  else\n+    return MIPS_SYNC_OLD_NAND (\"<d>\", \"and\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_new_nand<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NEW_NAND (\"<d>\", \"andi\");\t\n+  else\n+    return MIPS_SYNC_NEW_NAND (\"<d>\", \"and\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_lock_test_and_set<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"arith_operand\" \"I,d\")]\n+\t UNSPEC_SYNC_EXCHANGE))]\n+  \"ISA_HAS_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_EXCHANGE (\"<d>\", \"li\");\n+  else\n+    return MIPS_SYNC_EXCHANGE (\"<d>\", \"move\");\n+}\n+  [(set_attr \"length\" \"24\")])\n \f\n ;; Block moves, see mips.c for more details.\n ;; Argument 0 is the destination"}, {"sha": "620c7a7202eb1953b835dc9b2496585f85a3429c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -1,3 +1,10 @@\n+2007-09-02  David Daney  <ddaney@avtrex.com>\n+\n+\t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: New test.\n+\t* gcc.target/mips/gcc-have-sync-compare-and-swap-2.c: Ditto.\n+\t* gcc.target/mips/atomic-memory-1.c: Ditto.\n+\t* testsuite/gcc.target/mips/atomic-memory-2.c: Ditto.\n+\n 2007-09-03  Jesper Nilsson  <jesper.nilsson@axis.com>\n \n \t* gcc.target/cris/builtin_clz_v0.c: New testcase."}, {"sha": "1664daa3d71d97aeb4942be53672fc61cddea9b0", "filename": "gcc/testsuite/gcc.target/mips/atomic-memory-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-1.c?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+  unsigned v = 0;\n+  __sync_synchronize ();\n+\n+  if (!__sync_bool_compare_and_swap (&v, 0, 30000))\n+    abort();\n+  if (30000 != __sync_val_compare_and_swap (&v, 30000, 100001))\n+    abort();\n+  __sync_sub_and_fetch (&v, 0x8001);\n+  __sync_sub_and_fetch (&v, 0x7fff);\n+  if (v != 34465)\n+    abort();\n+  if (__sync_nand_and_fetch (&v, 0xff) != 94)\n+    abort();\n+  if (__sync_fetch_and_add (&v, 6) != 94)\n+    abort();\n+  if (v != 100)\n+    abort();\n+  if (__sync_or_and_fetch (&v, 0xf001) != 0xf065)\n+    abort();\n+  if (__sync_and_and_fetch (&v, 0x1000) != 0x1000)\n+    abort();\n+  if (__sync_xor_and_fetch (&v, 0xa51040) != 0xa50040)\n+    abort();\n+  __sync_and_and_fetch (&v, 7);\n+  if (__sync_lock_test_and_set(&v, 1) != 0)\n+    abort();\n+  if (v != 1)\n+    abort();\n+  __sync_lock_release (&v);\n+  if (v != 0)\n+    abort();\n+#endif\n+  exit(0);\n+}"}, {"sha": "b0492be84a03e3566440ab605fae1bc79bfb8ebf", "filename": "gcc/testsuite/gcc.target/mips/atomic-memory-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-2.c?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mips32 -mabi=32\" } */\n+/* { dg-final { scan-assembler \"addiu\" } } */\n+/* { dg-final { scan-assembler-not \"subu\" } } */\n+\n+unsigned long\n+f(unsigned long *p)\n+{\n+    return __sync_fetch_and_sub (p, 5);\n+}"}, {"sha": "315aa464e6e2068f8c5c747365272c4652999785", "filename": "gcc/testsuite/gcc.target/mips/gcc-have-sync-compare-and-swap-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-mips32 -mabi=32\" } */\n+\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n+#error nonono\n+#endif\n+\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n+#error nonono\n+#endif\n+\n+#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+#error nonono\n+#endif\n+\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8\n+#error nonono\n+#endif\n+\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\n+#error nonono\n+#endif"}, {"sha": "f07ebe7ebbd43956973fa97601bbaff8bdce94ef", "filename": "gcc/testsuite/gcc.target/mips/gcc-have-sync-compare-and-swap-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2fc1c4811796a55e43641d8f862a88b1e0eac5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c?ref=8d2fc1c4811796a55e43641d8f862a88b1e0eac5", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do preprocess { target { mips64*-*-* } } } */\n+/* { dg-options \"-mips64 -mabi=64\" } */\n+\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n+#error nonono\n+#endif\n+\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n+#error nonono\n+#endif\n+\n+#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+#error nonono\n+#endif\n+\n+#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8\n+#error nonono\n+#endif\n+\n+#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\n+#error nonono\n+#endif"}]}