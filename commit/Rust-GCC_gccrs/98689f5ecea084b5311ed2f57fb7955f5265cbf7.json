{"sha": "98689f5ecea084b5311ed2f57fb7955f5265cbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg2ODlmNWVjZWEwODRiNTMxMWVkMmY1N2ZiNzk1NWY1MjY1Y2JmNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:12:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:12:41Z"}, "message": "fr30.c (TARGET_ASM_TRAMPOLINE_TEMPLATE, [...]): New.\n\n\t* config/fr30/fr30.c (TARGET_ASM_TRAMPOLINE_TEMPLATE,\n\tTARGET_TRAMPOLINE_INIT, fr30_asm_trampoline_template,\n\tfr30_trampoline_init): New.\n\t* config/fr30/fr30.h (TRAMPOLINE_TEMPLATE): Move code to\n\tfr30_asm_trampoline_template.\n\t(INITIALIZE_TRAMPOLINE): Move code to fr30_trampoline_init;\n\tadjust for target hook parameters.\n\nFrom-SVN: r151991", "tree": {"sha": "01deae7580a91d247788e800a12ea21d86f15b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01deae7580a91d247788e800a12ea21d86f15b03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98689f5ecea084b5311ed2f57fb7955f5265cbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98689f5ecea084b5311ed2f57fb7955f5265cbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98689f5ecea084b5311ed2f57fb7955f5265cbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98689f5ecea084b5311ed2f57fb7955f5265cbf7/comments", "author": null, "committer": null, "parents": [{"sha": "956c97fc6916b5f20595175e8aac7d3e2121a87c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956c97fc6916b5f20595175e8aac7d3e2121a87c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956c97fc6916b5f20595175e8aac7d3e2121a87c"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "2979fd79812faddf3a5e34c51da9ecff223f6cca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98689f5ecea084b5311ed2f57fb7955f5265cbf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98689f5ecea084b5311ed2f57fb7955f5265cbf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98689f5ecea084b5311ed2f57fb7955f5265cbf7", "patch": "@@ -89,6 +89,14 @@\n \n \t* config/crx/crx.h (INITIALIZE_TRAMPOLINE): Remove.\n \n+\t* config/fr30/fr30.c (TARGET_ASM_TRAMPOLINE_TEMPLATE,\n+\tTARGET_TRAMPOLINE_INIT, fr30_asm_trampoline_template,\n+\tfr30_trampoline_init): New.\n+\t* config/fr30/fr30.h (TRAMPOLINE_TEMPLATE): Move code to\n+\tfr30_asm_trampoline_template.\n+\t(INITIALIZE_TRAMPOLINE): Move code to fr30_trampoline_init;\n+\tadjust for target hook parameters.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "faa637cddec7194560a1e2ba5ad3109a33a252d4", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98689f5ecea084b5311ed2f57fb7955f5265cbf7/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98689f5ecea084b5311ed2f57fb7955f5265cbf7/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=98689f5ecea084b5311ed2f57fb7955f5265cbf7", "patch": "@@ -121,6 +121,8 @@ static int fr30_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static bool fr30_frame_pointer_required (void);\n static bool fr30_can_eliminate (const int, const int);\n+static void fr30_asm_trampoline_template (FILE *);\n+static void fr30_trampoline_init (rtx, tree, rtx);\n \n #define FRAME_POINTER_MASK \t(1 << (FRAME_POINTER_REGNUM))\n #define RETURN_POINTER_MASK \t(1 << (RETURN_POINTER_REGNUM))\n@@ -165,6 +167,11 @@ static bool fr30_can_eliminate (const int, const int);\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE fr30_can_eliminate\n \n+#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE fr30_asm_trampoline_template\n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT fr30_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -923,6 +930,50 @@ fr30_frame_pointer_required (void)\n   return (flag_omit_frame_pointer == 0 || crtl->args.pretend_args_size > 0);\n }\n \n+/*}}}*/\n+/*{{{  Trampoline Output Routines  */\n+\n+/* Implement TARGET_ASM_TRAMPOLINE_TEMPLATE.\n+   On the FR30, the trampoline is:\n+\n+   nop\n+   ldi:32 STATIC, r12\n+   nop\n+   ldi:32 FUNCTION, r0\n+   jmp    @r0\n+\n+   The no-ops are to guarantee that the static chain and final\n+   target are 32 bit aligned within the trampoline.  That allows us to\n+   initialize those locations with simple SImode stores.   The alternative\n+   would be to use HImode stores.  */\n+   \n+static void\n+fr30_asm_trampoline_template (FILE *f)\n+{\n+  fprintf (f, \"\\tnop\\n\");\n+  fprintf (f, \"\\tldi:32\\t#0, %s\\n\", reg_names [STATIC_CHAIN_REGNUM]);\n+  fprintf (f, \"\\tnop\\n\");\n+  fprintf (f, \"\\tldi:32\\t#0, %s\\n\", reg_names [COMPILER_SCRATCH_REGISTER]);\n+  fprintf (f, \"\\tjmp\\t@%s\\n\", reg_names [COMPILER_SCRATCH_REGISTER]);\n+}\n+\n+/* Implement TARGET_TRAMPOLINE_INIT.  */\n+\n+static void\n+fr30_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n+\n+  mem = adjust_address (m_tramp, SImode, 4);\n+  emit_move_insn (mem, chain_value);\n+  mem = adjust_address (m_tramp, SImode, 12);\n+  emit_move_insn (mem, fnaddr);\n+}\n+\n /*}}}*/\n /* Local Variables: */\n /* folded-file: t   */"}, {"sha": "20e157173d8eae734aa16dc0ab2571c5b535b28f", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98689f5ecea084b5311ed2f57fb7955f5265cbf7/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98689f5ecea084b5311ed2f57fb7955f5265cbf7/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=98689f5ecea084b5311ed2f57fb7955f5265cbf7", "patch": "@@ -730,31 +730,6 @@ enum reg_class\n /*}}}*/ \f\n /*{{{  Trampolines for Nested Functions.  */ \n \n-/* On the FR30, the trampoline is:\n-\n-   nop\n-   ldi:32 STATIC, r12\n-   nop\n-   ldi:32 FUNCTION, r0\n-   jmp    @r0\n-\n-   The no-ops are to guarantee that the static chain and final\n-   target are 32 bit aligned within the trampoline.  That allows us to\n-   initialize those locations with simple SImode stores.   The alternative\n-   would be to use HImode stores.  */\n-   \n-/* A C statement to output, on the stream FILE, assembler code for a block of\n-   data that contains the constant parts of a trampoline.  This code should not\n-   include a label--the label is taken care of automatically.  */\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tnop\\n\");\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tldi:32\\t#0, %s\\n\", reg_names [STATIC_CHAIN_REGNUM]);\t\\\n-  fprintf (FILE, \"\\tnop\\n\");\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tldi:32\\t#0, %s\\n\", reg_names [COMPILER_SCRATCH_REGISTER]);\t\\\n-  fprintf (FILE, \"\\tjmp\\t@%s\\n\", reg_names [COMPILER_SCRATCH_REGISTER]);\t\\\n-}\n-\n /* A C expression for the size in bytes of the trampoline, as an integer.  */\n #define TRAMPOLINE_SIZE 18\n \n@@ -763,17 +738,6 @@ enum reg_class\n    the trampoline is also aligned on a 32bit boundary.  */\n #define TRAMPOLINE_ALIGNMENT 32\n \n-/* A C statement to initialize the variable parts of a trampoline.  ADDR is an\n-   RTX for the address of the trampoline; FNADDR is an RTX for the address of\n-   the nested function; STATIC_CHAIN is an RTX for the static chain value that\n-   should be passed to the function when it is called.  */\n-#define INITIALIZE_TRAMPOLINE(ADDR, FNADDR, STATIC_CHAIN)\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (ADDR, 4)), STATIC_CHAIN);\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (ADDR, 12)), FNADDR);\t\\\n-} while (0);\n-\n /*}}}*/ \f\n /*{{{  Addressing Modes.  */ \n "}]}