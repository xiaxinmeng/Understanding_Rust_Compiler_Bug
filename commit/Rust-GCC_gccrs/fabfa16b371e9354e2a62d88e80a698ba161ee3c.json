{"sha": "fabfa16b371e9354e2a62d88e80a698ba161ee3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiZmExNmIzNzFlOTM1NGUyYTYyZDg4ZTgwYTY5OGJhMTYxZWUzYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-08-29T01:03:21Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-08-29T01:03:21Z"}, "message": "Replace malloc with xmalloc\n\n\t* argv.c (dupargv): Replace malloc with xmalloc.  Don't check\n\txmalloc return.\n\t(buildargv): Likewise.  Also replace strdup with xstrdup.\n\t(expandargv): Don't check dupargv return.\n\nFrom-SVN: r190767", "tree": {"sha": "d4cc491f04201443b0e7ac3a12dc0f9a9ea9a607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4cc491f04201443b0e7ac3a12dc0f9a9ea9a607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fabfa16b371e9354e2a62d88e80a698ba161ee3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabfa16b371e9354e2a62d88e80a698ba161ee3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabfa16b371e9354e2a62d88e80a698ba161ee3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabfa16b371e9354e2a62d88e80a698ba161ee3c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55529d369ca6e3abb90f1e316e671d69764da19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55529d369ca6e3abb90f1e316e671d69764da19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55529d369ca6e3abb90f1e316e671d69764da19b"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "9afed43585581a14f2c1c43b8361273605a472f3", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabfa16b371e9354e2a62d88e80a698ba161ee3c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabfa16b371e9354e2a62d88e80a698ba161ee3c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=fabfa16b371e9354e2a62d88e80a698ba161ee3c", "patch": "@@ -1,3 +1,10 @@\n+2011-08-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* argv.c (dupargv): Replace malloc with xmalloc.  Don't check\n+\txmalloc return.\n+\t(buildargv): Likewise.  Also replace strdup with xstrdup.\n+\t(expandargv): Don't check dupargv return.\n+\n 2011-08-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/14526"}, {"sha": "f2727e8de95db2d849f57e690e64a9dbc08853ff", "filename": "libiberty/argv.c", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabfa16b371e9354e2a62d88e80a698ba161ee3c/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabfa16b371e9354e2a62d88e80a698ba161ee3c/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=fabfa16b371e9354e2a62d88e80a698ba161ee3c", "patch": "@@ -1,5 +1,5 @@\n /* Create and destroy argument vectors (argv's)\n-   Copyright (C) 1992, 2001, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 2001, 2010, 2012 Free Software Foundation, Inc.\n    Written by Fred Fish @ Cygnus Support\n \n This file is part of the libiberty library.\n@@ -72,20 +72,13 @@ dupargv (char **argv)\n   \n   /* the vector */\n   for (argc = 0; argv[argc] != NULL; argc++);\n-  copy = (char **) malloc ((argc + 1) * sizeof (char *));\n-  if (copy == NULL)\n-    return NULL;\n-  \n+  copy = (char **) xmalloc ((argc + 1) * sizeof (char *));\n+\n   /* the strings */\n   for (argc = 0; argv[argc] != NULL; argc++)\n     {\n       int len = strlen (argv[argc]);\n-      copy[argc] = (char *) malloc (len + 1);\n-      if (copy[argc] == NULL)\n-\t{\n-\t  freeargv (copy);\n-\t  return NULL;\n-\t}\n+      copy[argc] = (char *) xmalloc (len + 1);\n       strcpy (copy[argc], argv[argc]);\n     }\n   copy[argc] = NULL;\n@@ -149,7 +142,7 @@ remains unchanged.  The last element of the vector is followed by a\n @code{NULL} element.\n \n All of the memory for the pointer array and copies of the string\n-is obtained from @code{malloc}.  All of the memory can be returned to the\n+is obtained from @code{xmalloc}.  All of the memory can be returned to the\n system with the single function call @code{freeargv}, which takes the\n returned result of @code{buildargv}, as it's argument.\n \n@@ -205,21 +198,12 @@ char **buildargv (const char *input)\n \t      if (argv == NULL)\n \t\t{\n \t\t  maxargc = INITIAL_MAXARGC;\n-\t\t  nargv = (char **) malloc (maxargc * sizeof (char *));\n+\t\t  nargv = (char **) xmalloc (maxargc * sizeof (char *));\n \t\t}\n \t      else\n \t\t{\n \t\t  maxargc *= 2;\n-\t\t  nargv = (char **) realloc (argv, maxargc * sizeof (char *));\n-\t\t}\n-\t      if (nargv == NULL)\n-\t\t{\n-\t\t  if (argv != NULL)\n-\t\t    {\n-\t\t      freeargv (argv);\n-\t\t      argv = NULL;\n-\t\t    }\n-\t\t  break;\n+\t\t  nargv = (char **) xrealloc (argv, maxargc * sizeof (char *));\n \t\t}\n \t      argv = nargv;\n \t      argv[argc] = NULL;\n@@ -284,13 +268,7 @@ char **buildargv (const char *input)\n \t\t}\n \t    }\n \t  *arg = EOS;\n-\t  argv[argc] = strdup (copybuf);\n-\t  if (argv[argc] == NULL)\n-\t    {\n-\t      freeargv (argv);\n-\t      argv = NULL;\n-\t      break;\n-\t    }\n+\t  argv[argc] = xstrdup (copybuf);\n \t  argc++;\n \t  argv[argc] = NULL;\n \n@@ -457,14 +435,7 @@ expandargv (int *argcp, char ***argvp)\n \tfile_argv = buildargv (buffer);\n       /* If *ARGVP is not already dynamically allocated, copy it.  */\n       if (!argv_dynamic)\n-\t{\n-\t  *argvp = dupargv (*argvp);\n-\t  if (!*argvp)\n-\t    {\n-\t      fputs (\"\\nout of memory\\n\", stderr);\n-\t      xexit (1);\n-\t    }\n-\t}\n+\t*argvp = dupargv (*argvp);\n       /* Count the number of arguments.  */\n       file_argc = 0;\n       while (file_argv[file_argc])"}]}