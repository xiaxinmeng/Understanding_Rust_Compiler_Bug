{"sha": "26358fb6a0c566c2cdca5107ff60d249abfc028b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzNThmYjZhMGM1NjZjMmNkY2E1MTA3ZmY2MGQyNDlhYmZjMDI4Yg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-14T08:20:43Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-14T08:20:43Z"}, "message": "AVX-512. 61/n. Update FP logic insn patterns.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_insn \"<sse>_andnot<VF_128_256:mode>3<mask_name>\"): Add masking,\n\tuse VF_128_256 mode iterator and update assembler emit code.\n\t(define_insn \"<sse>_andnot<VF_512:mode>3<mask_name>\"): New.\n\t(define_expand \"<any_logic:code><VF_128_256:mode>3<mask_name>\"):\n\tAdd masking, use VF_128_256 mode iterator.\n\t(define_expand \"<any_logic:code><VF_512:mode>3<mask_name>\"): New.\n\t(define_insn \"*<any_logic:code><VF_128_256:mode>3<mask_name>\"):\n\tAdd masking, use VF_128_256 mode iterator and update assembler emit\n\tcode.\n\t(define_insn \"*<any_logic:code><VF_512:mode>3<mask_name>\"): New.\n\t(define_mode_attr avx512flogicsuff): Delete.\n\t(define_insn \"avx512f_<logic><mode>\"): Ditto.\n\t(define_insn \"*andnot<mode>3<mask_name>\"): Update MODE_XI, MODE_OI,\n\tMODE_TI.\n\t(define_insn \"<mask_codefor><code><mode>3<mask_name>\"): Ditto.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216179", "tree": {"sha": "e7cb9d40336cf7e6f8904ee66c8ccc126ae3c94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7cb9d40336cf7e6f8904ee66c8ccc126ae3c94b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26358fb6a0c566c2cdca5107ff60d249abfc028b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26358fb6a0c566c2cdca5107ff60d249abfc028b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26358fb6a0c566c2cdca5107ff60d249abfc028b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26358fb6a0c566c2cdca5107ff60d249abfc028b/comments", "author": null, "committer": null, "parents": [{"sha": "06ba0585d67cf607a5141d5bfcd4a6a67607ae70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ba0585d67cf607a5141d5bfcd4a6a67607ae70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ba0585d67cf607a5141d5bfcd4a6a67607ae70"}], "stats": {"total": 232, "additions": 167, "deletions": 65}, "files": [{"sha": "5806e05d6016f4f8ca22c0f409c469c282afdaf7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26358fb6a0c566c2cdca5107ff60d249abfc028b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26358fb6a0c566c2cdca5107ff60d249abfc028b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26358fb6a0c566c2cdca5107ff60d249abfc028b", "patch": "@@ -1,3 +1,29 @@\n+2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_insn \"<sse>_andnot<VF_128_256:mode>3<mask_name>\"): Add masking,\n+\tuse VF_128_256 mode iterator and update assembler emit code.\n+\t(define_insn \"<sse>_andnot<VF_512:mode>3<mask_name>\"): New.\n+\t(define_expand \"<any_logic:code><VF_128_256:mode>3<mask_name>\"):\n+\tAdd masking, use VF_128_256 mode iterator.\n+\t(define_expand \"<any_logic:code><VF_512:mode>3<mask_name>\"): New.\n+\t(define_insn \"*<any_logic:code><VF_128_256:mode>3<mask_name>\"):\n+\tAdd masking, use VF_128_256 mode iterator and update assembler emit\n+\tcode.\n+\t(define_insn \"*<any_logic:code><VF_512:mode>3<mask_name>\"): New.\n+\t(define_mode_attr avx512flogicsuff): Delete.\n+\t(define_insn \"avx512f_<logic><mode>\"): Ditto.\n+\t(define_insn \"*andnot<mode>3<mask_name>\"): Update MODE_XI, MODE_OI,\n+\tMODE_TI.\n+\t(define_insn \"<mask_codefor><code><mode>3<mask_name>\"): Ditto.\n+\n 2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "a760f535341dde1e5040dc86f74376a99b00c97a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 141, "deletions": 65, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26358fb6a0c566c2cdca5107ff60d249abfc028b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26358fb6a0c566c2cdca5107ff60d249abfc028b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=26358fb6a0c566c2cdca5107ff60d249abfc028b", "patch": "@@ -2692,15 +2692,15 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"<sse>_andnot<mode>3\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(and:VF\n-\t  (not:VF\n-\t    (match_operand:VF 1 \"register_operand\" \"0,v\"))\n-\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE\"\n+(define_insn \"<sse>_andnot<mode>3<mask_name>\"\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,v\")\n+\t(and:VF_128_256\n+\t  (not:VF_128_256\n+\t    (match_operand:VF_128_256 1 \"register_operand\" \"0,v\"))\n+\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+  \"TARGET_SSE && <mask_avx512vl_condition>\"\n {\n-  static char buf[32];\n+  static char buf[128];\n   const char *ops;\n   const char *suffix;\n \n@@ -2720,17 +2720,17 @@\n       ops = \"andn%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      ops = \"vandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      ops = \"vandn%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  /* There is no vandnp[sd].  Use vpandnq.  */\n-  if (<MODE_SIZE> == 64)\n+  /* There is no vandnp[sd] in avx512f.  Use vpandn[qd].  */\n+  if (<mask_applied> && !TARGET_AVX512DQ)\n     {\n-      suffix = \"q\";\n-      ops = \"vpandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      suffix = GET_MODE_INNER (<MODE>mode) == DFmode ? \"q\" : \"d\";\n+      ops = \"vpandn%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n     }\n \n   snprintf (buf, sizeof (buf), ops, suffix);\n@@ -2750,30 +2750,63 @@\n \t       ]\n \t       (const_string \"<MODE>\")))])\n \n-(define_expand \"<code><mode>3\"\n+\n+(define_insn \"<sse>_andnot<mode>3<mask_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(and:VF_512\n+\t  (not:VF_512\n+\t    (match_operand:VF_512 1 \"register_operand\" \"v\"))\n+\t  (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  static char buf[128];\n+  const char *ops;\n+  const char *suffix;\n+\n+  suffix = \"<ssemodesuffix>\";\n+  ops = \"\";\n+\n+  /* There is no vandnp[sd] in avx512f.  Use vpandn[qd].  */\n+  if (!TARGET_AVX512DQ)\n+    {\n+      suffix = GET_MODE_INNER (<MODE>mode) == DFmode ? \"q\" : \"d\";\n+      ops = \"p\";\n+    }\n+\n+  snprintf (buf, sizeof (buf),\n+\t    \"v%sandn%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\",\n+\t    ops, suffix);\n+  return buf;\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"<code><mode>3<mask_name>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\")\n-\t(any_logic:VF_128_256\n-\t  (match_operand:VF_128_256 1 \"nonimmediate_operand\")\n-\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE\"\n+       (any_logic:VF_128_256\n+         (match_operand:VF_128_256 1 \"nonimmediate_operand\")\n+         (match_operand:VF_128_256 2 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE && <mask_avx512vl_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_expand \"<code><mode>3\"\n+(define_expand \"<code><mode>3<mask_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\")\n-       (fpint_logic:VF_512\n+       (any_logic:VF_512\n          (match_operand:VF_512 1 \"nonimmediate_operand\")\n          (match_operand:VF_512 2 \"nonimmediate_operand\")))]\n   \"TARGET_AVX512F\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<code><mode>3\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(any_logic:VF\n-\t  (match_operand:VF 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+(define_insn \"*<code><mode>3<mask_name>\"\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,v\")\n+\t(any_logic:VF_128_256\n+\t  (match_operand:VF_128_256 1 \"nonimmediate_operand\" \"%0,v\")\n+\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+  \"TARGET_SSE && <mask_avx512vl_condition>\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  static char buf[32];\n+  static char buf[128];\n   const char *ops;\n   const char *suffix;\n \n@@ -2793,17 +2826,17 @@\n       ops = \"<logic>%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      ops = \"v<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      ops = \"v<logic>%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  /* There is no v<logic>p[sd].  Use vp<logic>q.  */\n-  if (<MODE_SIZE> == 64)\n+  /* There is no v<logic>p[sd] in avx512f.  Use vp<logic>[dq].  */\n+  if (<mask_applied> && !TARGET_AVX512DQ)\n     {\n-      suffix = \"q\";\n-      ops = \"vp<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      suffix = GET_MODE_INNER (<MODE>mode) == DFmode ? \"q\" : \"d\";\n+      ops = \"vp<logic>%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n     }\n \n   snprintf (buf, sizeof (buf), ops, suffix);\n@@ -2823,6 +2856,36 @@\n \t       ]\n \t       (const_string \"<MODE>\")))])\n \n+(define_insn \"*<code><mode>3<mask_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(any_logic:VF_512\n+\t  (match_operand:VF_512 1 \"nonimmediate_operand\" \"%v\")\n+\t  (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+{\n+  static char buf[128];\n+  const char *ops;\n+  const char *suffix;\n+\n+  suffix = \"<ssemodesuffix>\";\n+  ops = \"\";\n+\n+  /* There is no v<logic>p[sd] in avx512f.  Use vp<logic>[dq].  */\n+  if ((<MODE_SIZE> == 64 || <mask_applied>) && !TARGET_AVX512DQ)\n+    {\n+      suffix = GET_MODE_INNER (<MODE>mode) == DFmode ? \"q\" : \"d\";\n+      ops = \"p\";\n+    }\n+\n+  snprintf (buf, sizeof (buf),\n+\t   \"v%s<logic>%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\",\n+\t   ops, suffix);\n+  return buf;\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"copysign<mode>3\"\n   [(set (match_dup 4)\n \t(and:VF\n@@ -3032,23 +3095,6 @@\n \t       ]\n \t       (const_string \"TI\")))])\n \n-;; There are no floating point xor for V16SF and V8DF in avx512f\n-;; but we need them for negation.  Instead we use int versions of\n-;; xor.  Maybe there could be a better way to do that.\n-\n-(define_mode_attr avx512flogicsuff\n-  [(V16SF \"d\") (V8DF \"q\")])\n-\n-(define_insn \"avx512f_<logic><mode>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(fpint_logic:VF_512\n-\t  (match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t  (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512F\"\n-  \"vp<logic><avx512flogicsuff>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")])\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; FMA floating point multiply/accumulate instructions.  These include\n@@ -10539,16 +10585,31 @@\n     {\n     case MODE_XI:\n       gcc_assert (TARGET_AVX512F);\n-\n-      tmp = \"pandn<ssemodesuffix>\";\n-      break;\n-\n     case MODE_OI:\n-      gcc_assert (TARGET_AVX2);\n+      gcc_assert (TARGET_AVX2 || TARGET_AVX512VL);\n     case MODE_TI:\n-      gcc_assert (TARGET_SSE2);\n-\n-      tmp = \"pandn\";\n+      gcc_assert (TARGET_SSE2 || TARGET_AVX512VL);\n+      switch (<MODE>mode)\n+      {\n+        case V16SImode:\n+        case V8DImode:\n+          if (TARGET_AVX512F)\n+          {\n+            tmp = \"pandn<ssemodesuffix>\";\n+            break;\n+          }\n+        case V8SImode:\n+        case V4DImode:\n+        case V4SImode:\n+        case V2DImode:\n+          if (TARGET_AVX512VL)\n+          {\n+            tmp = \"pandn<ssemodesuffix>\";\n+            break;\n+          }\n+        default:\n+          tmp = TARGET_AVX512VL ? \"pandnq\" : \"pandn\";\n+      }\n       break;\n \n    case MODE_V16SF:\n@@ -10633,16 +10694,31 @@\n     {\n     case MODE_XI:\n       gcc_assert (TARGET_AVX512F);\n-\n-      tmp = \"p<logic><ssemodesuffix>\";\n-      break;\n-\n     case MODE_OI:\n-      gcc_assert (TARGET_AVX2);\n+      gcc_assert (TARGET_AVX2 || TARGET_AVX512VL);\n     case MODE_TI:\n-      gcc_assert (TARGET_SSE2);\n-\n-      tmp = \"p<logic>\";\n+      gcc_assert (TARGET_SSE2 || TARGET_AVX512VL);\n+      switch (<MODE>mode)\n+      {\n+        case V16SImode:\n+        case V8DImode:\n+          if (TARGET_AVX512F)\n+          {\n+            tmp = \"p<logic><ssemodesuffix>\";\n+            break;\n+          }\n+        case V8SImode:\n+        case V4DImode:\n+        case V4SImode:\n+        case V2DImode:\n+          if (TARGET_AVX512VL)\n+          {\n+            tmp = \"p<logic><ssemodesuffix>\";\n+            break;\n+          }\n+        default:\n+          tmp = TARGET_AVX512VL ? \"p<logic>q\" : \"p<logic>\";\n+      }\n       break;\n \n    case MODE_V16SF:"}]}