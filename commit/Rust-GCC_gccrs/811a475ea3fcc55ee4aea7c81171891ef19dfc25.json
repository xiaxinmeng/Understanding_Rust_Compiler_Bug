{"sha": "811a475ea3fcc55ee4aea7c81171891ef19dfc25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExYTQ3NWVhM2ZjYzU1ZWU0YWVhN2M4MTE3MTg5MWVmMTlkZmMyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-07T10:01:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-07T10:01:14Z"}, "message": "arm: Fix up arm installed unwind.h for use in pedantic modes [PR93615]\n\nAs the following testcase shows, unwind.h on ARM can't be (starting with GCC\n10) compiled with -std=c* modes, only -std=gnu* modes.\nThe problem is it uses asm keyword, which isn't a keyword in those modes\n(system headers vs. non-system ones don't make a difference here).\nglibc and other installed headers use __asm or __asm__ keywords instead that\nwork fine in both standard and gnu modes.\n\nWhile there, as it is an installed header, I think it is also wrong to\ncompletely ignore any identifier namespace rules.\nThe generic unwind.h defines just _Unwind* namespace identifiers plus\n_sleb128_t/_uleb128_t (but e.g. unlike libstdc++/glibc headers doesn't\nuglify operand names), the ARM unwind.h is much worse here.  I've just\nchanged the gnu_Unwind_Find_got function at least not be in user identifier\nnamespace, but perhaps it would be good to go further and rename e.g.\nor e.g.\n  typedef _Unwind_Reason_Code (*personality_routine) (_Unwind_State,\n      _Unwind_Control_Block *, _Unwind_Context *);\nin unwind-arm-common.h.\n\n2020-02-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93615\n\t* config/arm/unwind-arm.h (gnu_Unwind_Find_got): Rename to ...\n\t(_Unwind_gnu_Find_got): ... this.  Use __asm instead of asm.  Remove\n\ttrailing :s in asm.  Formatting fixes.\n\t(_Unwind_decode_typeinfo_ptr): Adjust caller.\n\n\t* gcc.dg/pr93615.c: New test.", "tree": {"sha": "3e232cdebea5d9ce79d1b327f03c75d14c75dcc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e232cdebea5d9ce79d1b327f03c75d14c75dcc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811a475ea3fcc55ee4aea7c81171891ef19dfc25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811a475ea3fcc55ee4aea7c81171891ef19dfc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811a475ea3fcc55ee4aea7c81171891ef19dfc25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811a475ea3fcc55ee4aea7c81171891ef19dfc25/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82617f229b336d856c18313339b14657e05c129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82617f229b336d856c18313339b14657e05c129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82617f229b336d856c18313339b14657e05c129"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "32aa39c02a4e3cdf2621a64f71f38fd214d08570", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811a475ea3fcc55ee4aea7c81171891ef19dfc25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811a475ea3fcc55ee4aea7c81171891ef19dfc25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=811a475ea3fcc55ee4aea7c81171891ef19dfc25", "patch": "@@ -1,5 +1,8 @@\n 2020-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93615\n+\t* gcc.dg/pr93615.c: New test.\n+\n \tPR target/93611\n \t* gcc.target/i386/pr93611.c: New test.\n "}, {"sha": "2e98f5200c595d8f9993fa8a4bcb875c7ee24886", "filename": "gcc/testsuite/gcc.dg/pr93615.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811a475ea3fcc55ee4aea7c81171891ef19dfc25/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93615.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811a475ea3fcc55ee4aea7c81171891ef19dfc25/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93615.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93615.c?ref=811a475ea3fcc55ee4aea7c81171891ef19dfc25", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+/* { dg-require-effective-target exceptions } */\n+\n+#include <unwind.h>\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "b6e5ffc640d1930a7ea674bab9c85f100df5b039", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811a475ea3fcc55ee4aea7c81171891ef19dfc25/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811a475ea3fcc55ee4aea7c81171891ef19dfc25/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=811a475ea3fcc55ee4aea7c81171891ef19dfc25", "patch": "@@ -1,3 +1,11 @@\n+2020-02-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93615\n+\t* config/arm/unwind-arm.h (gnu_Unwind_Find_got): Rename to ...\n+\t(_Unwind_gnu_Find_got): ... this.  Use __asm instead of asm.  Remove\n+\ttrailing :s in asm.  Formatting fixes.\n+\t(_Unwind_decode_typeinfo_ptr): Adjust caller.\n+\n 2020-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tnios2: Support for GOT-relative DW_EH_PE_datarel encoding."}, {"sha": "e77b769d7824e98cb73fef4facc929f0c90fd42c", "filename": "libgcc/config/arm/unwind-arm.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811a475ea3fcc55ee4aea7c81171891ef19dfc25/libgcc%2Fconfig%2Farm%2Funwind-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811a475ea3fcc55ee4aea7c81171891ef19dfc25/libgcc%2Fconfig%2Farm%2Funwind-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm.h?ref=811a475ea3fcc55ee4aea7c81171891ef19dfc25", "patch": "@@ -43,19 +43,15 @@ extern \"C\" {\n #endif\n _Unwind_Ptr __attribute__((weak)) __gnu_Unwind_Find_got (_Unwind_Ptr);\n \n-static inline _Unwind_Ptr gnu_Unwind_Find_got (_Unwind_Ptr ptr)\n+static inline _Unwind_Ptr _Unwind_gnu_Find_got (_Unwind_Ptr ptr)\n {\n     _Unwind_Ptr res;\n \n     if (__gnu_Unwind_Find_got)\n-\tres =  __gnu_Unwind_Find_got (ptr);\n+\tres = __gnu_Unwind_Find_got (ptr);\n     else\n-      {\n-\tasm volatile (\"mov %[result], r\" XSTR(FDPIC_REGNUM)\n-\t\t      : [result]\"=r\" (res)\n-\t\t      :\n-\t\t      :);\n-      }\n+\t__asm volatile (\"mov %[result], r\" XSTR(FDPIC_REGNUM)\n+\t\t\t: [result] \"=r\" (res));\n \n     return res;\n }\n@@ -75,7 +71,7 @@ static inline _Unwind_Ptr gnu_Unwind_Find_got (_Unwind_Ptr ptr)\n #if __FDPIC__\n       /* For FDPIC, we store the offset of the GOT entry.  */\n       /* So, first get GOT from dynamic linker and then use indirect access.  */\n-      tmp += gnu_Unwind_Find_got (ptr);\n+      tmp += _Unwind_gnu_Find_got (ptr);\n       tmp = *(_Unwind_Word *) tmp;\n #elif (defined(linux) && !defined(__uClinux__)) || defined(__NetBSD__) \\\n     || defined(__FreeBSD__) || defined(__fuchsia__)"}]}