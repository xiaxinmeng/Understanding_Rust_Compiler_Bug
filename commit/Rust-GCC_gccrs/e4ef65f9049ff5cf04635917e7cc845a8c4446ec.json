{"sha": "e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlZjY1ZjkwNDlmZjVjZjA0NjM1OTE3ZTdjYzg0NWE4YzQ0NDZlYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-01-15T10:05:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:45Z"}, "message": "[Ada] Remove more cases of empty loops\n\n2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.ads, sem_util.adb (Side_Effect_Free_Statements,\n\tSide_Effect_Free_Loop): New functions.\n\t(Has_Non_Null_Statements): Consider N_Call_Marker as a null\n\tstatement.\n\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Call\n\tSet_Is_Null_Loop even inside a generic instantiation.\n\t(Analyze_Loop_Statement): Mark for removal loops with no side\n\teffects.", "tree": {"sha": "02e75518fe255a1ddce321c999b53fa879d4ec70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e75518fe255a1ddce321c999b53fa879d4ec70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ef65f9049ff5cf04635917e7cc845a8c4446ec/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415c22da949f15a18c914588e4796b218ccf0db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415c22da949f15a18c914588e4796b218ccf0db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/415c22da949f15a18c914588e4796b218ccf0db5"}], "stats": {"total": 129, "additions": 113, "deletions": 16}, "files": [{"sha": "72e3a521749898550d5cfcacf5f362eb459c06d0", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ef65f9049ff5cf04635917e7cc845a8c4446ec/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ef65f9049ff5cf04635917e7cc845a8c4446ec/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "patch": "@@ -3210,8 +3210,9 @@ package body Sem_Ch5 is\n         and then Is_Discrete_Type (Etype (DS))\n       then\n          declare\n-            L : Node_Id;\n-            H : Node_Id;\n+            L          : Node_Id;\n+            H          : Node_Id;\n+            Null_Range : Boolean := False;\n \n          begin\n             if Nkind (DS) = N_Range then\n@@ -3231,6 +3232,14 @@ package body Sem_Ch5 is\n             --  null range may be detected statically.\n \n             if Compile_Time_Compare (L, H, Assume_Valid => True) = GT then\n+               if Compile_Time_Compare (L, H, Assume_Valid => False) = GT then\n+                  --  Since we know the range of the loop is always null,\n+                  --  set the appropriate flag to remove the loop entirely\n+                  --  during expansion.\n+\n+                  Set_Is_Null_Loop (Loop_Nod);\n+                  Null_Range := True;\n+               end if;\n \n                --  Suppress the warning if inside a generic template or\n                --  instance, since in practice they tend to be dubious in these\n@@ -3241,24 +3250,14 @@ package body Sem_Ch5 is\n                   --  Specialize msg if invalid values could make the loop\n                   --  non-null after all.\n \n-                  if Compile_Time_Compare\n-                       (L, H, Assume_Valid => False) = GT\n-                  then\n-                     --  Since we know the range of the loop is null, set the\n-                     --  appropriate flag to remove the loop entirely during\n-                     --  expansion.\n-\n-                     Set_Is_Null_Loop (Loop_Nod);\n-\n+                  if Null_Range then\n                      if Comes_From_Source (N) then\n                         Error_Msg_N\n                           (\"??loop range is null, loop will not execute\", DS);\n                      end if;\n \n-                     --  Here is where the loop could execute because of\n-                     --  invalid values, so issue appropriate message and in\n-                     --  this case we do not set the Is_Null_Loop flag since\n-                     --  the loop may execute.\n+                  --  Here is where the loop could execute because of\n+                  --  invalid values, so issue appropriate message.\n \n                   elsif Comes_From_Source (N) then\n                      Error_Msg_N\n@@ -3994,6 +3993,12 @@ package body Sem_Ch5 is\n          Analyze_Statements (Statements (N));\n       end if;\n \n+      --  If the loop has no side effects, mark it for removal.\n+\n+      if Side_Effect_Free_Loop (N) then\n+         Set_Is_Null_Loop (N);\n+      end if;\n+\n       --  When the iteration scheme of a loop contains attribute 'Loop_Entry,\n       --  the loop is transformed into a conditional block. Retrieve the loop.\n "}, {"sha": "dff9f81763c4c73f4d4fb2e6849ce5cca93e62de", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ef65f9049ff5cf04635917e7cc845a8c4446ec/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ef65f9049ff5cf04635917e7cc845a8c4446ec/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "patch": "@@ -11536,7 +11536,7 @@ package body Sem_Util is\n          Node := First (L);\n \n          loop\n-            if Nkind (Node) /= N_Null_Statement then\n+            if not Nkind_In (Node, N_Null_Statement, N_Call_Marker) then\n                return True;\n             end if;\n \n@@ -11548,6 +11548,91 @@ package body Sem_Util is\n       return False;\n    end Has_Non_Null_Statements;\n \n+   ---------------------------------\n+   -- Side_Effect_Free_Statements --\n+   ---------------------------------\n+\n+   function Side_Effect_Free_Statements (L : List_Id) return Boolean is\n+      Node : Node_Id;\n+\n+   begin\n+      if Is_Non_Empty_List (L) then\n+         Node := First (L);\n+\n+         loop\n+            case Nkind (Node) is\n+               when N_Null_Statement | N_Call_Marker | N_Raise_xxx_Error =>\n+                  null;\n+               when N_Object_Declaration =>\n+                  if Present (Expression (Node))\n+                    and then not Side_Effect_Free (Expression (Node))\n+                  then\n+                     return False;\n+                  end if;\n+\n+               when others =>\n+                  return False;\n+            end case;\n+\n+            Next (Node);\n+            exit when Node = Empty;\n+         end loop;\n+      end if;\n+\n+      return True;\n+   end Side_Effect_Free_Statements;\n+\n+   ---------------------------\n+   -- Side_Effect_Free_Loop --\n+   ---------------------------\n+\n+   function Side_Effect_Free_Loop (N : Node_Id) return Boolean is\n+      Scheme : Node_Id;\n+      Spec   : Node_Id;\n+      Subt   : Node_Id;\n+\n+   begin\n+      --  If this is not a loop (e.g. because the loop has been rewritten),\n+      --  then return false.\n+\n+      if Nkind (N) /= N_Loop_Statement then\n+         return False;\n+      end if;\n+\n+      --  First check the statements\n+\n+      if Side_Effect_Free_Statements (Statements (N)) then\n+\n+         --  Then check the loop condition/indexes\n+\n+         if Present (Iteration_Scheme (N)) then\n+            Scheme := Iteration_Scheme (N);\n+\n+            if Present (Condition (Scheme))\n+              or else Present (Iterator_Specification (Scheme))\n+            then\n+               return False;\n+            elsif Present (Loop_Parameter_Specification (Scheme)) then\n+               Spec := Loop_Parameter_Specification (Scheme);\n+               Subt := Discrete_Subtype_Definition (Spec);\n+\n+               if Present (Subt) then\n+                  if Nkind (Subt) = N_Range then\n+                     return Side_Effect_Free (Low_Bound (Subt))\n+                       and then Side_Effect_Free (High_Bound (Subt));\n+                  else\n+                     --  subtype indication\n+\n+                     return True;\n+                  end if;\n+               end if;\n+            end if;\n+         end if;\n+      end if;\n+\n+      return False;\n+   end Side_Effect_Free_Loop;\n+\n    ----------------------------------\n    -- Has_Non_Trivial_Precondition --\n    ----------------------------------"}, {"sha": "13bbc6a76f83b9030a28ce6c738264349d218440", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ef65f9049ff5cf04635917e7cc845a8c4446ec/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ef65f9049ff5cf04635917e7cc845a8c4446ec/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "patch": "@@ -1309,6 +1309,13 @@ package Sem_Util is\n    function Has_Non_Null_Statements (L : List_Id) return Boolean;\n    --  Return True if L has non-null statements\n \n+   function Side_Effect_Free_Statements (L : List_Id) return Boolean;\n+   --  Return True if L has no statements with side effects\n+\n+   function Side_Effect_Free_Loop (N : Node_Id) return Boolean;\n+   --  Return True if the loop has no side effect and can therefore be\n+   --  marked for removal. Return False if N is not a N_Loop_Statement.\n+\n    function Has_Overriding_Initialize (T : Entity_Id) return Boolean;\n    --  Predicate to determine whether a controlled type has a user-defined\n    --  Initialize primitive (and, in Ada 2012, whether that primitive is"}]}