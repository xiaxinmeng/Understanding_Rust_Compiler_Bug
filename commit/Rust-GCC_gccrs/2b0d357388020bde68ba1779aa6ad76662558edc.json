{"sha": "2b0d357388020bde68ba1779aa6ad76662558edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwZDM1NzM4ODAyMGJkZTY4YmExNzc5YWE2YWQ3NjY2MjU1OGVkYw==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2010-12-23T10:38:55Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-12-23T10:38:55Z"}, "message": "Fix typos in the manual.\n\ngcc/:\n\t* doc/extend.texi (Function Attributes, Volatiles): Fix typos.\n\t* doc/install.texi (Prerequisites, Specific): Likewise.\n\t* doc/invoke.texi (C Dialect Options, Debugging Options)\n\t(Optimize Options, MicroBlaze Options)\n\t(RS/6000 and PowerPC Options, RX Options, Code Gen Options):\n\tLikewise.\n\t* doc/objc.texi (Method signatures)\n\t(Fast enumeration protocol): Likewise.\n\t* doc/tm.texi.in (Run-time Target, Register Arguments)\n\t(Scheduling, Macros for Initialization, Misc): Likewise.\n\t* doc/tm.texi: Renerate.\n\nFrom-SVN: r168202", "tree": {"sha": "d98085c87cc3d166f2449936d58537759b26bd39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d98085c87cc3d166f2449936d58537759b26bd39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b0d357388020bde68ba1779aa6ad76662558edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0d357388020bde68ba1779aa6ad76662558edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b0d357388020bde68ba1779aa6ad76662558edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0d357388020bde68ba1779aa6ad76662558edc/comments", "author": null, "committer": null, "parents": [{"sha": "939e4075666396b0653b5650686fd0feccb15b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939e4075666396b0653b5650686fd0feccb15b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939e4075666396b0653b5650686fd0feccb15b6b"}], "stats": {"total": 162, "additions": 88, "deletions": 74}, "files": [{"sha": "3b0fedf5799a3adebf7b5ba4985ee2e027d39cfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b0d357388020bde68ba1779aa6ad76662558edc", "patch": "@@ -1,3 +1,17 @@\n+2010-12-23  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/extend.texi (Function Attributes, Volatiles): Fix typos.\n+\t* doc/install.texi (Prerequisites, Specific): Likewise.\n+\t* doc/invoke.texi (C Dialect Options, Debugging Options)\n+\t(Optimize Options, MicroBlaze Options)\n+\t(RS/6000 and PowerPC Options, RX Options, Code Gen Options):\n+\tLikewise.\n+\t* doc/objc.texi (Method signatures)\n+\t(Fast enumeration protocol): Likewise.\n+\t* doc/tm.texi.in (Run-time Target, Register Arguments)\n+\t(Scheduling, Macros for Initialization, Misc): Likewise.\n+\t* doc/tm.texi: Renerate.\n+\n 2010-12-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* doc/objc.texi (Modern GNU Objective-C runtime API): Mention that"}, {"sha": "1ac1d8d6c7a2607bad4a60e2202a6e483ebfdac9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2b0d357388020bde68ba1779aa6ad76662558edc", "patch": "@@ -2692,24 +2692,24 @@ an inlined PLT.\n @item leaf\n @cindex @code{leaf} function attribute\n Calls to external functions with this attribute must return to the current\n-compilation unit only by return or by exception handling. In particular, leaf\n-functions are not allowed to call callback function passed to it from current\n+compilation unit only by return or by exception handling.  In particular, leaf\n+functions are not allowed to call callback function passed to it from the current\n compilation unit or directly call functions exported by the unit or longjmp\n-into the unit.  Still leaf function might call functions from other complation\n-units and thus they are not neccesarily leaf in the sense that they contains no\n+into the unit.  Leaf function might still call functions from other compilation\n+units and thus they are not necessarily leaf in the sense that they contain no\n function calls at all.\n \n The attribute is intended for library functions to improve dataflow analysis.\n-Compiler takes the hint that any data not escaping current compilation unit can\n-not be used or modified by the leaf function.  For example, function @code{sin}\n-is leaf, function @code{qsort} is not.\n+The compiler takes the hint that any data not escaping the current compilation unit can\n+not be used or modified by the leaf function.  For example, the @code{sin} function\n+is a leaf function, but @code{qsort} is not.\n \n-Note that the leaf functions might invoke signals and signal handlers might be\n-defined in the current compilation unit and use static variables. Only\n+Note that leaf functions might invoke signals and signal handlers might be\n+defined in the current compilation unit and use static variables.  The only\n compliant way to write such a signal handler is to declare such variables\n @code{volatile}.\n \n-The attribute has no effect on functions defined within current compilation\n+The attribute has no effect on functions defined within the current compilation\n unit.  This is to allow easy merging of multiple compilation units into one,\n for example, by using the link time optimization.  For this reason the\n attribute is not allowed on types to annotate indirect calls.\n@@ -3589,16 +3589,16 @@ away so that a longer more expensive calling sequence is required.\n \n @item cpu=@var{CPU}\n @cindex @code{target(\"cpu=@var{CPU}\")} attribute\n-Specify the architecture to generate code for in compiling the\n-function.  If you select @code{\"target(\"cpu=power7)\"} attribute when\n+Specify the architecture to generate code for when compiling the\n+function.  If you select the @code{\"target(\"cpu=power7)\"} attribute when\n generating 32-bit code, VSX and Altivec instructions are not generated\n unless you use the @option{-mabi=altivec} option on the command line.\n \n @item tune=@var{TUNE}\n @cindex @code{target(\"tune=@var{TUNE}\")} attribute\n-Specify the architecture to tune for in compiling the function.  If\n+Specify the architecture to tune for when compiling the function.  If\n you do not specify the @code{target(\"tune=@var{TUNE}\")} attribute and\n-you do specifiy the @code{target(\"cpu=@var{CPU}\")} attribute,\n+you do specify the @code{target(\"cpu=@var{CPU}\")} attribute,\n compilation will tune for the @var{CPU} architecture, and not the\n default tuning specified on the command line.\n @end table\n@@ -5358,14 +5358,14 @@ the single copy in the library.\n \n C has the concept of volatile objects.  These are normally accessed by\n pointers and used for accessing hardware or inter-thread\n-communication.  The standard encourage compilers to refrain from\n+communication.  The standard encourages compilers to refrain from\n optimizations concerning accesses to volatile objects, but leaves it\n implementation defined as to what constitutes a volatile access.  The\n minimum requirement is that at a sequence point all previous accesses\n to volatile objects have stabilized and no subsequent accesses have\n occurred.  Thus an implementation is free to reorder and combine\n volatile accesses which occur between sequence points, but cannot do\n-so for accesses across a sequence point.  The use of volatiles does\n+so for accesses across a sequence point.  The use of volatile does\n not allow you to violate the restriction on updating objects multiple\n times between two sequence points.\n \n@@ -5394,7 +5394,7 @@ asm volatile (\"\" : : : \"memory\");\n vobj = 1;\n @end smallexample\n \n-A scalar volatile object is read, when it is accessed in a void context:\n+A scalar volatile object is read when it is accessed in a void context:\n \n @smallexample\n volatile int *src = @var{somevalue};"}, {"sha": "f990b742fe504ea8f038f2576b1cd5d0513da147", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=2b0d357388020bde68ba1779aa6ad76662558edc", "patch": "@@ -450,7 +450,7 @@ and not using @option{--disable-symvers}.\n Necessary when targetting Solaris 2 with Sun @command{ld}, building\n @samp{libstdc++}, and not using @option{--disable-symvers}.  A helper\n scripts needs @samp{Glob.pm}, which is missing from @command{perl} 5.005\n-included in Solaris~8.  The bundled @command{perl} in Solaris~9 and up\n+included in Solaris@tie{}8.  The bundled @command{perl} in Solaris@tie{}9 and up\n works.\n Used by various scripts to generate some files included in SVN (mainly\n Unicode-related and rarely changing) from source tables.\n@@ -3539,10 +3539,10 @@ recommended to use the GNU assembler instead.  There is no bundled\n version, but the current version, from GNU binutils 2.20.1, is known to\n work.\n \n-Solaris~2/x86 doesn't support the execution of SSE/SSE2 instructions\n-before Solaris~9 4/04, even if the CPU supports them.  Programs will\n+Solaris@tie{}2/x86 doesn't support the execution of SSE/SSE2 instructions\n+before Solaris@tie{}9 4/04, even if the CPU supports them.  Programs will\n receive @code{SIGILL} if they try.  The fix is available both in\n-Solaris~9 Update~6 and kernel patch 112234-12 or newer.  There is no\n+Solaris@tie{}9 Update@tie{}6 and kernel patch 112234-12 or newer.  There is no\n corresponding patch for Solaris 8.  To avoid this problem,\n @option{-march} defaults to @samp{pentiumpro} on Solaris 8 and 9.  If\n you have the patch installed, you can configure GCC with an appropriate\n@@ -4228,23 +4228,23 @@ There are patches for Solaris 8 (117350-12 or newer for SPARC,\n 117351-12 or newer for Intel) and Solaris 9 (117171-11 or newer for\n SPARC, 117172-11 or newer for Intel) that address this problem.\n \n-Solaris~8 provides an alternate implementation of the thread libraries,\n+Solaris@tie{}8 provides an alternate implementation of the thread libraries,\n @samp{libpthread} and @samp{libthread}.  They are required for TLS\n-support and have been made the default in Solaris~9, so they are always\n-used on Solaris~8.\n+support and have been made the default in Solaris@tie{}9, so they are always\n+used on Solaris@tie{}8.\n \n-Thread-local storage (TLS) is supported in Solaris~8 and 9, but requires\n+Thread-local storage (TLS) is supported in Solaris@tie{}8 and 9, but requires\n some patches.  The @samp{libthread} patches provide the\n @code{__tls_get_addr} (SPARC, 64-bit x86) resp.@ @code{___tls_get_addr}\n-(32-bit x86) functions.  On Solaris~8, you need 108993-26 or newer on\n-SPARC, 108994-26 or newer on Intel.  On Solaris~9, the necessary support\n-on SPARC is present since FCS, while 114432-05 or newer is reqired on\n-Intel.  Additionally, on Solaris~8, patch 109147-14 or newer on SPARC or\n+(32-bit x86) functions.  On Solaris@tie{}8, you need 108993-26 or newer on\n+SPARC, 108994-26 or newer on Intel.  On Solaris@tie{}9, the necessary support\n+on SPARC is present since FCS, while 114432-05 or newer is required on\n+Intel.  Additionally, on Solaris@tie{}8, patch 109147-14 or newer on SPARC or\n 109148-22 or newer on Intel are required for the Sun @command{ld} and\n-runtime linker (@command{ld.so.1}) support.  Again, Solaris~9/SPARC\n+runtime linker (@command{ld.so.1}) support.  Again, Solaris@tie{}9/SPARC\n works since FCS, while 113986-02 is required on Intel.  The linker\n patches must be installed even if GNU @command{ld} is used. Sun\n-@command{as} in Solaris~8 and 9 doesn't support the necessary\n+@command{as} in Solaris@tie{}8 and 9 doesn't support the necessary\n relocations, so GNU @command{as} must be used.  The @command{configure}\n script checks for those prerequisites and automatically enables TLS\n support if they are met.  Although those minimal patch versions should"}, {"sha": "03d5d3d0ea6d465600b8fda39e85f9a8ed322549", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2b0d357388020bde68ba1779aa6ad76662558edc", "patch": "@@ -1699,7 +1699,7 @@ have support for @option{-pthread}.\n @opindex fms-extensions\n Accept some non-standard constructs used in Microsoft header files.\n \n-It allows for c++ that member-names in structures can be similiar\n+In C++ code, this allows member names in structures to be similar\n to previous types declarations.\n \n @smallexample\n@@ -4844,7 +4844,7 @@ allocation before or after interprocedural optimization.\n @opindex fstack-usage\n Makes the compiler output stack usage information for the program, on a\n per-function basis.  The filename for the dump is made by appending\n-@file{.su} to the AUXNAME.  AUXNAME is generated from the name of\n+@file{.su} to the @var{auxname}.  @var{auxname} is generated from the name of\n the output file, if explicitly specified and it is not an executable,\n otherwise it is the basename of the source file.  An entry is made up\n of three fields:\n@@ -4952,15 +4952,15 @@ more closely, if you do not optimize.\n \n @item -fdbg-cnt-list\n @opindex fdbg-cnt-list\n-Print the name and the counter upperbound for all debug counters.\n+Print the name and the counter upper bound for all debug counters.\n \n @item -fdbg-cnt=@var{counter-value-list}\n @opindex fdbg-cnt\n-Set the internal debug counter upperbound. @var{counter-value-list}\n+Set the internal debug counter upper bound.  @var{counter-value-list}\n is a comma-separated list of @var{name}:@var{value} pairs\n-which sets the upperbound of each debug counter @var{name} to @var{value}.\n-All debug counters have the initial upperbound of @var{UINT_MAX},\n-thus dbg_cnt() returns true always unless the upperbound is set by this option.\n+which sets the upper bound of each debug counter @var{name} to @var{value}.\n+All debug counters have the initial upper bound of @var{UINT_MAX},\n+thus dbg_cnt() returns true always unless the upper bound is set by this option.\n e.g. With -fdbg-cnt=dce:10,tail_call:0\n dbg_cnt(dce) will return true only for first 10 invocations\n and dbg_cnt(tail_call) will return false always.\n@@ -7500,7 +7500,7 @@ The only important thing to keep in mind is that to enable link-time\n optimizations the @option{-flto} flag needs to be passed to both the\n compile and the link commands.\n \n-To make whole program optimization effective, it is necesary to make\n+To make whole program optimization effective, it is necessary to make\n certain whole program assumptions.  The compiler needs to know\n what functions and variables can be accessed by libraries and runtime\n outside of the link time optimized unit.  When supported by the linker,\n@@ -8332,7 +8332,7 @@ late inlining.\n @item comdat-sharing-probability\n @itemx comdat-sharing-probability\n Probability (in percent) that C++ inline function with comdat visibility\n-will be shared acroess multiple compilation units.  The default value is 20.\n+will be shared across multiple compilation units.  The default value is 20.\n \n @item min-vect-loop-bound\n The minimum number of iterations under which a loop will not get vectorized\n@@ -8342,8 +8342,8 @@ to allow vectorization.  The default value is 0.\n \n @item gcse-cost-distance-ratio\n Scaling factor in calculation of maximum distance an expression\n-can be moved by GCSE optimizations.  This is currently supported only in\n-code hoisting pass.  The bigger the ratio, the more agressive code hoisting\n+can be moved by GCSE optimizations.  This is currently supported only in the\n+code hoisting pass.  The bigger the ratio, the more aggressive code hoisting\n will be with simple expressions, i.e., the expressions which have cost\n less than @option{gcse-unrestricted-cost}.  Specifying 0 will disable\n hoisting of simple expressions.  The default value is 10.\n@@ -8352,7 +8352,7 @@ hoisting of simple expressions.  The default value is 10.\n Cost, roughly measured as the cost of a single typical machine\n instruction, at which GCSE optimizations will not constrain\n the distance an expression can travel.  This is currently\n-supported only in code hoisting pass.  The lesser the cost,\n+supported only in the code hoisting pass.  The lesser the cost,\n the more aggressive code hoisting will be.  Specifying 0 will\n allow all expressions to travel unrestricted distances.\n The default value is 3.\n@@ -8812,12 +8812,12 @@ parameter in order to perform devirtualization.\n stores per a single formal parameter of a function.\n \n @item lto-partitions\n-Specify desired nuber of partitions produced during WHOPR copmilation.\n-Number of partitions should exceed number of CPUs used for compilatoin.\n-Default value is 32.\n+Specify desired number of partitions produced during WHOPR compilation.\n+The number of partitions should exceed the number of CPUs used for compilation.\n+The default value is 32.\n \n @item lto-minpartition\n-Size of minimal paritition for WHOPR (in estimated instructions).\n+Size of minimal partition for WHOPR (in estimated instructions).\n This prevents expenses of splitting very small programs into too many\n partitions.\n \n@@ -12339,10 +12339,10 @@ the system libraries and startup modules.\n @item -mvect8-ret-in-mem\n @opindex mvect8-ret-in-mem\n Return 8-byte vectors in memory instead of MMX registers.  This is the\n-default on Solaris~8 and 9 and VxWorks to match the ABI of the Sun\n+default on Solaris@tie{}8 and 9 and VxWorks to match the ABI of the Sun\n Studio compilers until version 12.  Later compiler versions (starting\n-with Studio 12 Update~1) follow the ABI used by other x86 targets, which\n-is the default on Solaris~10 and later.  @emph{Only} use this option if\n+with Studio 12 Update@tie{}1) follow the ABI used by other x86 targets, which\n+is the default on Solaris@tie{}10 and later.  @emph{Only} use this option if\n you need to remain compatible with existing code produced by those\n previous compiler versions or older versions of GCC.\n \n@@ -13938,7 +13938,7 @@ This option is deprecated.  Use @option{-fno-zero-initialized-in-bss} instead.\n Use features of and schedule code for given CPU.\n Supported values are in the format @samp{v@var{X}.@var{YY}.@var{Z}}, \n where @var{X} is a major version, @var{YY} is the minor version, and \n-@var{Z} is compatiblity code.  Example values are @samp{v3.00.a}, \n+@var{Z} is compatibility code.  Example values are @samp{v3.00.a},\n @samp{v4.00.b}, @samp{v5.00.a}, @samp{v5.00.b}, @samp{v5.00.b}, @samp{v6.00.a}. \n \n @item -mxl-soft-mul\n@@ -13975,7 +13975,7 @@ Use multiply high instructions for high part of 32x32 multiply.\n \n @item -mxl-float-convert\n @opindex mxl-float-convert\n-Use hardware floating point converstion instructions.\n+Use hardware floating point conversion instructions.\n \n @item -mxl-float-sqrt\n @opindex mxl-float-sqrt\n@@ -16066,9 +16066,9 @@ roots.\n @opindex mrecip=opt\n This option allows to control which reciprocal estimate instructions\n may be used.  @var{opt} is a comma separated list of options, that may\n-be preceeded by a @code{!} to invert the option:\n+be preceded by a @code{!} to invert the option:\n @code{all}: enable all estimate instructions,\n-@code{default}: enable the default instructions, equvalent to @option{-mrecip},\n+@code{default}: enable the default instructions, equivalent to @option{-mrecip},\n @code{none}: disable all estimate instructions, equivalent to @option{-mno-recip};\n @code{div}: enable the reciprocal approximation instructions for both single and double precision;\n @code{divf}: enable the single precision reciprocal approximation instructions;\n@@ -16178,7 +16178,7 @@ selected.\n @opindex mbig-endian-data\n @opindex mlittle-endian-data\n Store data (but not code) in the big-endian format.  The default is\n-@option{-mlittle-endian-data}, ie to store data in the little endian\n+@option{-mlittle-endian-data}, i.e.@: to store data in the little endian\n format.\n \n @item -msmall-data-limit=@var{N}\n@@ -18123,7 +18123,7 @@ code, provide near-perfect API export and prevent symbol clashes.\n It is @strong{strongly} recommended that you use this in any shared objects\n you distribute.\n \n-Despite the nomenclature, @code{default} always means public ie;\n+Despite the nomenclature, @code{default} always means public; i.e.,\n available to be linked against from outside the shared object.\n @code{protected} and @code{internal} are pretty useless in real-world\n usage so the only other commonly used option will be @code{hidden}.\n@@ -18151,7 +18151,7 @@ the declarations you wish to set visibility for with (for example)\n @samp{#pragma GCC visibility pop}.\n Bear in mind that symbol visibility should be viewed @strong{as\n part of the API interface contract} and thus all new code should\n-always specify visibility when it is not the default ie; declarations\n+always specify visibility when it is not the default; i.e., declarations\n only for use within the local DSO should @strong{always} be marked explicitly\n as hidden as so to avoid PLT indirection overheads---making this\n abundantly clear also aids readability and self-documentation of the code."}, {"sha": "8663c1be1ab05528536887bcae070752d18894a3", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=2b0d357388020bde68ba1779aa6ad76662558edc", "patch": "@@ -557,7 +557,7 @@ functions are part of the public ``API'' and are the preferred way to\n interact with method signatures from user code.\n \n But if you need to debug a problem with method signatures and need to\n-know how they are implemented (ie, the ``ABI''), read on.\n+know how they are implemented (i.e., the ``ABI''), read on.\n \n Methods have their ``signature'' encoded and made available to the\n runtime.  The ``signature'' encodes all the information required to\n@@ -1030,13 +1030,13 @@ enumeration, you need to have it implement the method\n @smallexample\n - (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state \n                                       objects: (id *)objects\n-                                        count: (unsigneld long)len;\n+                                        count: (unsigned long)len;\n @end smallexample\n \n where @code{NSFastEnumerationState} must be defined in your code as follows:\n \n @smallexample\n-typdef struct\n+typedef struct\n @{\n   unsigned long state;\n   id            *itemsPtr;"}, {"sha": "b13ddfb5a59245b8d45dac6da5390c41bc7cc801", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2b0d357388020bde68ba1779aa6ad76662558edc", "patch": "@@ -748,7 +748,7 @@ options to enable at particular sets of optimization levels.  These\n options are processed once\n just after the optimization level is determined and before the remainder\n of the command options have been parsed, so may be overridden by other\n-options passed explicily.\n+options passed explicitly.\n \n This processing is run once at program startup and when the optimization\n options are changed via @code{#pragma GCC optimize} or by using the\n@@ -4224,7 +4224,7 @@ required.\n @end defmac\n \n @deftypefn {Target Hook} {unsigned int} TARGET_FUNCTION_ARG_BOUNDARY (enum machine_mode @var{mode}, const_tree @var{type})\n-This hook returns the the alignment boundary, in bits, of an argument\n+This hook returns the alignment boundary, in bits, of an argument\n with the specified mode and type.  The default hook returns\n @code{PARM_BOUNDARY} for all arguments.\n @end deftypefn\n@@ -4337,7 +4337,7 @@ SSE registers for floating point operations.  On such targets, a good\n strategy may be to return nonzero from this hook for @code{INTEGRAL_MODE_P}\n machine modes but zero for the SSE register classes.\n \n-The default version of this hook retuns false for any mode.  It is always\n+The default version of this hook returns false for any mode.  It is always\n safe to redefine this hook to return with a nonzero value.  But if you\n unnecessarily define it, you will reduce the amount of optimizations\n that can be performed in some cases.  If you do not define this hook\n@@ -6640,11 +6640,11 @@ round of multipass scheduling.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_FIRST_CYCLE_MULTIPASS_INIT (void *@var{data})\n-This hook initilizes target-specific data used in multipass scheduling.\n+This hook initializes target-specific data used in multipass scheduling.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_FIRST_CYCLE_MULTIPASS_FINI (void *@var{data})\n-This hook finilizes target-specific data used in multipass scheduling.\n+This hook finalizes target-specific data used in multipass scheduling.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_SCHED_DFA_NEW_CYCLE (FILE *@var{dump}, int @var{verbose}, rtx @var{insn}, int @var{last_clock}, int @var{clock}, int *@var{sort_p})\n@@ -8437,7 +8437,7 @@ to execute @command{nm}.  The default is to search the path normally for\n @command{collect2} calls @command{nm} to scan object files for static\n constructors and destructors and LTO info.  By default, @option{-n} is\n passed.  Define @code{NM_FLAGS} to a C string constant if other options\n-are needed to get the same output formut as GNU @command{nm -n}\n+are needed to get the same output format as GNU @command{nm -n}\n produces.\n @end defmac\n \n@@ -10510,7 +10510,7 @@ condition code values with less instructions than the corresponding\n machines, define the appropriate patterns.  Use the names @code{incscc}\n and @code{decscc}, respectively, for the patterns which perform\n @code{plus} or @code{minus} operations on condition code values.  See\n-@file{rs6000.md} for some examples.  The GNU Superoptizer can be used to\n+@file{rs6000.md} for some examples.  The GNU Superoptimizer can be used to\n find such instruction sequences on other machines.\n \n If this macro is not defined, the default value, 1, is used.  You need"}, {"sha": "f78eba957176e2fb1009cdfe7ac210f77f753ae9", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0d357388020bde68ba1779aa6ad76662558edc/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2b0d357388020bde68ba1779aa6ad76662558edc", "patch": "@@ -742,7 +742,7 @@ options to enable at particular sets of optimization levels.  These\n options are processed once\n just after the optimization level is determined and before the remainder\n of the command options have been parsed, so may be overridden by other\n-options passed explicily.\n+options passed explicitly.\n \n This processing is run once at program startup and when the optimization\n options are changed via @code{#pragma GCC optimize} or by using the\n@@ -4212,7 +4212,7 @@ required.\n @end defmac\n \n @hook TARGET_FUNCTION_ARG_BOUNDARY\n-This hook returns the the alignment boundary, in bits, of an argument\n+This hook returns the alignment boundary, in bits, of an argument\n with the specified mode and type.  The default hook returns\n @code{PARM_BOUNDARY} for all arguments.\n @end deftypefn\n@@ -4325,7 +4325,7 @@ SSE registers for floating point operations.  On such targets, a good\n strategy may be to return nonzero from this hook for @code{INTEGRAL_MODE_P}\n machine modes but zero for the SSE register classes.\n \n-The default version of this hook retuns false for any mode.  It is always\n+The default version of this hook returns false for any mode.  It is always\n safe to redefine this hook to return with a nonzero value.  But if you\n unnecessarily define it, you will reduce the amount of optimizations\n that can be performed in some cases.  If you do not define this hook\n@@ -6622,11 +6622,11 @@ round of multipass scheduling.\n @end deftypefn\n \n @hook TARGET_SCHED_FIRST_CYCLE_MULTIPASS_INIT\n-This hook initilizes target-specific data used in multipass scheduling.\n+This hook initializes target-specific data used in multipass scheduling.\n @end deftypefn\n \n @hook TARGET_SCHED_FIRST_CYCLE_MULTIPASS_FINI\n-This hook finilizes target-specific data used in multipass scheduling.\n+This hook finalizes target-specific data used in multipass scheduling.\n @end deftypefn\n \n @hook TARGET_SCHED_DFA_NEW_CYCLE\n@@ -8407,7 +8407,7 @@ to execute @command{nm}.  The default is to search the path normally for\n @command{collect2} calls @command{nm} to scan object files for static\n constructors and destructors and LTO info.  By default, @option{-n} is\n passed.  Define @code{NM_FLAGS} to a C string constant if other options\n-are needed to get the same output formut as GNU @command{nm -n}\n+are needed to get the same output format as GNU @command{nm -n}\n produces.\n @end defmac\n \n@@ -10468,7 +10468,7 @@ condition code values with less instructions than the corresponding\n machines, define the appropriate patterns.  Use the names @code{incscc}\n and @code{decscc}, respectively, for the patterns which perform\n @code{plus} or @code{minus} operations on condition code values.  See\n-@file{rs6000.md} for some examples.  The GNU Superoptizer can be used to\n+@file{rs6000.md} for some examples.  The GNU Superoptimizer can be used to\n find such instruction sequences on other machines.\n \n If this macro is not defined, the default value, 1, is used.  You need"}]}