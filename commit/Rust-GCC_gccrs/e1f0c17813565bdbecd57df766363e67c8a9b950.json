{"sha": "e1f0c17813565bdbecd57df766363e67c8a9b950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmMGMxNzgxMzU2NWJkYmVjZDU3ZGY3NjYzNjNlNjdjOGE5Yjk1MA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-11-03T22:57:33Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-11-03T22:57:33Z"}, "message": "input.c (expand_location_to_spelling_point): Fix typo.\n\n2014-11-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* input.c (expand_location_to_spelling_point): Fix typo.\n\t(expansion_point_location_if_in_system_header): Fix comment.\n\nFrom-SVN: r217057", "tree": {"sha": "38bfdda330d93d96e210598d19eafcb158d4e8ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38bfdda330d93d96e210598d19eafcb158d4e8ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1f0c17813565bdbecd57df766363e67c8a9b950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f0c17813565bdbecd57df766363e67c8a9b950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f0c17813565bdbecd57df766363e67c8a9b950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f0c17813565bdbecd57df766363e67c8a9b950/comments", "author": null, "committer": null, "parents": [{"sha": "7ba43edaeac497e40774af340e871735c3c3b023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba43edaeac497e40774af340e871735c3c3b023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba43edaeac497e40774af340e871735c3c3b023"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "9a9e9f6fa4dcf850f365c56e47477a0d7fff4731", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f0c17813565bdbecd57df766363e67c8a9b950/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f0c17813565bdbecd57df766363e67c8a9b950/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1f0c17813565bdbecd57df766363e67c8a9b950", "patch": "@@ -1,3 +1,8 @@\n+2014-11-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* input.c (expand_location_to_spelling_point): Fix typo.\n+\t(expansion_point_location_if_in_system_header): Fix comment.\n+\n 2014-11-03  Pitchumani Sivanupandi <pitchumani.s@atmel.com>\n \n \t* config/avr/gen-avr-mmcu-specs.c: Remove unnecessary format specifier."}, {"sha": "b6147f32e88906d0b91267c53beaf14d48e19823", "filename": "gcc/input.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f0c17813565bdbecd57df766363e67c8a9b950/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f0c17813565bdbecd57df766363e67c8a9b950/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=e1f0c17813565bdbecd57df766363e67c8a9b950", "patch": "@@ -749,19 +749,20 @@ expand_location (source_location loc)\n expanded_location\n expand_location_to_spelling_point (source_location loc)\n {\n-  return expand_location_1 (loc, /*expansion_piont_p=*/false);\n+  return expand_location_1 (loc, /*expansion_point_p=*/false);\n }\n \n-/* If LOCATION is in a system header and if it's a virtual location for\n-   a token coming from the expansion of a macro M, unwind it to the\n-   location of the expansion point of M.  Otherwise, just return\n+/* If LOCATION is in a system header and if it is a virtual location for\n+   a token coming from the expansion of a macro, unwind it to the\n+   location of the expansion point of the macro.  Otherwise, just return\n    LOCATION.\n \n    This is used for instance when we want to emit diagnostics about a\n-   token that is located in a macro that is itself defined in a system\n-   header -- e.g for the NULL macro.  In that case, if LOCATION is\n-   passed to diagnostics emitting functions like warning_at as is, no\n-   diagnostic won't be emitted.  */\n+   token that may be located in a macro that is itself defined in a\n+   system header, for example, for the NULL macro.  In such a case, if\n+   LOCATION were passed directly to diagnostic functions such as\n+   warning_at, the diagnostic would be suppressed (unless\n+   -Wsystem-headers).  */\n \n source_location\n expansion_point_location_if_in_system_header (source_location location)"}]}