{"sha": "73a118c209fcbb73c3439ca70fb233a5dc87daf7", "node_id": "C_kwDOANBUbNoAKDczYTExOGMyMDlmY2JiNzNjMzQzOWNhNzBmYjIzM2E1ZGM4N2RhZjc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-15T13:22:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-17T17:48:04Z"}, "message": "c-family: Remove names of unused parameters\n\nC++ allows unnamed parameters, which means we don't need to call them\n'dummy' and mark them with the unused attribute.\n\ngcc/c-family/ChangeLog:\n\n\t* c-pragma.cc (handle_pragma_pack): Remove parameter name.\n\t(handle_pragma_weak): Likewise.\n\t(handle_pragma_scalar_storage_order): Likewise.\n\t(handle_pragma_redefine_extname): Likewise.\n\t(handle_pragma_visibility): Likewise.\n\t(handle_pragma_diagnostic): Likewise.\n\t(handle_pragma_target): Likewise.\n\t(handle_pragma_optimize): Likewise.\n\t(handle_pragma_push_options): Likewise.\n\t(handle_pragma_pop_options): Likewise.\n\t(handle_pragma_reset_options): Likewise.\n\t(handle_pragma_message): Likewise.\n\t(handle_pragma_float_const_decimal64): Likewise.", "tree": {"sha": "e8c9c14e17db59795bdb6d32ae0a6d055e20e7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8c9c14e17db59795bdb6d32ae0a6d055e20e7b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73a118c209fcbb73c3439ca70fb233a5dc87daf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a118c209fcbb73c3439ca70fb233a5dc87daf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a118c209fcbb73c3439ca70fb233a5dc87daf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a118c209fcbb73c3439ca70fb233a5dc87daf7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6d2f460a4c12e89c02525abdb182828ae8a27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6d2f460a4c12e89c02525abdb182828ae8a27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc6d2f460a4c12e89c02525abdb182828ae8a27e"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "4c80bdd26d6ebc065e433c3e606bf431e134869c", "filename": "gcc/c-family/c-pragma.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a118c209fcbb73c3439ca70fb233a5dc87daf7/gcc%2Fc-family%2Fc-pragma.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a118c209fcbb73c3439ca70fb233a5dc87daf7/gcc%2Fc-family%2Fc-pragma.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.cc?ref=73a118c209fcbb73c3439ca70fb233a5dc87daf7", "patch": "@@ -132,7 +132,7 @@ pop_alignment (tree id)\n    #pragma pack (pop)\n    #pragma pack (pop, ID) */\n static void\n-handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n+handle_pragma_pack (cpp_reader *)\n {\n   location_t loc;\n   tree x, id = 0;\n@@ -355,7 +355,7 @@ maybe_apply_pending_pragma_weaks (void)\n \n /* #pragma weak name [= value] */\n static void\n-handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n+handle_pragma_weak (cpp_reader *)\n {\n   tree name, value, x, decl;\n   enum cpp_ttype t;\n@@ -418,7 +418,7 @@ maybe_apply_pragma_scalar_storage_order (tree type)\n }\n \n static void\n-handle_pragma_scalar_storage_order (cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_scalar_storage_order (cpp_reader *)\n {\n   const char *kind_string;\n   enum cpp_ttype token;\n@@ -499,7 +499,7 @@ static void handle_pragma_redefine_extname (cpp_reader *);\n \n /* #pragma redefine_extname oldname newname */\n static void\n-handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n+handle_pragma_redefine_extname (cpp_reader *)\n {\n   tree oldname, newname, decls, x;\n   enum cpp_ttype t;\n@@ -721,7 +721,7 @@ pop_visibility (int kind)\n    specified on the command line.  */\n \n static void\n-handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n+handle_pragma_visibility (cpp_reader *)\n {\n   /* Form is #pragma GCC visibility push(hidden)|pop */\n   tree x;\n@@ -765,7 +765,7 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n }\n \n static void\n-handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_diagnostic(cpp_reader *)\n {\n   tree x;\n   location_t loc;\n@@ -899,7 +899,7 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n \n /*  Parse #pragma GCC target (xxx) to set target specific options.  */\n static void\n-handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_target(cpp_reader *)\n {\n   location_t loc;\n   enum cpp_ttype token;\n@@ -971,7 +971,7 @@ handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n \n /* Handle #pragma GCC optimize to set optimization options.  */\n static void\n-handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_optimize (cpp_reader *)\n {\n   enum cpp_ttype token;\n   tree x;\n@@ -1057,7 +1057,7 @@ static GTY(()) struct opt_stack * options_stack;\n    options.  */\n \n static void\n-handle_pragma_push_options (cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_push_options (cpp_reader *)\n {\n   enum cpp_ttype token;\n   tree x = 0;\n@@ -1093,7 +1093,7 @@ handle_pragma_push_options (cpp_reader *ARG_UNUSED(dummy))\n    optimization options from a previous push_options.  */\n \n static void\n-handle_pragma_pop_options (cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_pop_options (cpp_reader *)\n {\n   enum cpp_ttype token;\n   tree x = 0;\n@@ -1150,7 +1150,7 @@ handle_pragma_pop_options (cpp_reader *ARG_UNUSED(dummy))\n    optimization options to the original options used on the command line.  */\n \n static void\n-handle_pragma_reset_options (cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_reset_options (cpp_reader *)\n {\n   enum cpp_ttype token;\n   tree x = 0;\n@@ -1186,7 +1186,7 @@ handle_pragma_reset_options (cpp_reader *ARG_UNUSED(dummy))\n /* Print a plain user-specified message.  */\n \n static void\n-handle_pragma_message (cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_message (cpp_reader *)\n {\n   location_t loc;\n   enum cpp_ttype token;\n@@ -1291,7 +1291,7 @@ handle_stdc_pragma (const char *pname)\n    #pragma STDC FLOAT_CONST_DECIMAL64 DEFAULT */\n \n static void\n-handle_pragma_float_const_decimal64 (cpp_reader *ARG_UNUSED (dummy))\n+handle_pragma_float_const_decimal64 (cpp_reader *)\n {\n   if (c_dialect_cxx ())\n     {"}]}