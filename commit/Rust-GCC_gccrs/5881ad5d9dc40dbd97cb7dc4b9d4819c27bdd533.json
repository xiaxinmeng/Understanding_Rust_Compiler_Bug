{"sha": "5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4MWFkNWQ5ZGM0MGRiZDk3Y2I3ZGM0YjlkNDgxOWMyN2JkZDUzMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-27T03:22:18Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-27T03:22:18Z"}, "message": "fold-const.c (fold_binary): Fold (~X & C) eq/ne 0 as (X & C) ne/eq 0, where C is a single bit, i.e.\n\n\n\t* fold-const.c (fold_binary) <EQ_EXPR>:  Fold (~X & C) eq/ne 0 as\n\t(X & C) ne/eq 0, where C is a single bit, i.e. a power of two.\n\tFold both \"((X & C) ^ C) eq/ne 0\" and \"((X ^ C) & C) eq/ne 0\"\n\tas (X & C) ne/eq 0.\n\n\t* gcc.dg/fold-eqandnot-1.c: New test case.\n\nFrom-SVN: r111471", "tree": {"sha": "751d572c91141ad30022081f8277b791e0019f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751d572c91141ad30022081f8277b791e0019f07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/comments", "author": null, "committer": null, "parents": [{"sha": "53f1b560dbbc8485efa92063ef1e953604b40469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f1b560dbbc8485efa92063ef1e953604b40469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f1b560dbbc8485efa92063ef1e953604b40469"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "d54a48f64426d704573a059229c29fba71c7cd99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "patch": "@@ -1,3 +1,10 @@\n+2006-02-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_binary) <EQ_EXPR>:  Fold (~X & C) eq/ne 0 as\n+\t(X & C) ne/eq 0, where C is a single bit, i.e. a power of two.\n+\tFold both \"((X & C) ^ C) eq/ne 0\" and \"((X ^ C) & C) eq/ne 0\"\n+\tas (X & C) ne/eq 0.\n+\n 2006-02-26  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/19983"}, {"sha": "81d5f9fa2512225c1eb461c7d11cf6b5fd5c1800", "filename": "gcc/fold-const.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "patch": "@@ -9868,6 +9868,50 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t    fold_build2 (BIT_XOR_EXPR, TREE_TYPE (arg1),\n \t\t\t\t\t TREE_OPERAND (arg0, 1), arg1));\n \n+      /* Fold (~X & C) == 0 into (X & C) != 0 and (~X & C) != 0 into\n+\t (X & C) == 0 when C is a single bit.  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == BIT_NOT_EXPR\n+\t  && integer_zerop (arg1)\n+\t  && integer_pow2p (TREE_OPERAND (arg0, 1)))\n+\t{\n+\t  tem = fold_build2 (BIT_AND_EXPR, TREE_TYPE (arg0),\n+\t\t\t     TREE_OPERAND (TREE_OPERAND (arg0, 0), 0),\n+\t\t\t     TREE_OPERAND (arg0, 1));\n+\t  return fold_build2 (code == EQ_EXPR ? NE_EXPR : EQ_EXPR,\n+\t\t\t      type, tem, arg1);\n+\t}\n+\n+      /* Fold ((X & C) ^ C) eq/ne 0 into (X & C) ne/eq 0, when the\n+\t constant C is a power of two, i.e. a single bit.  */\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == BIT_AND_EXPR\n+\t  && integer_zerop (arg1)\n+\t  && integer_pow2p (TREE_OPERAND (arg0, 1))\n+\t  && operand_equal_p (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1),\n+\t\t\t      TREE_OPERAND (arg0, 1), OEP_ONLY_CONST))\n+\t{\n+\t  tree arg00 = TREE_OPERAND (arg0, 0);\n+\t  return fold_build2 (code == EQ_EXPR ? NE_EXPR : EQ_EXPR, type,\n+\t\t\t      arg00, build_int_cst (TREE_TYPE (arg00), 0));\n+\t}\n+\n+      /* Likewise, fold ((X ^ C) & C) eq/ne 0 into (X & C) ne/eq 0,\n+\t when is C is a power of two, i.e. a single bit.  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == BIT_XOR_EXPR\n+\t  && integer_zerop (arg1)\n+\t  && integer_pow2p (TREE_OPERAND (arg0, 1))\n+\t  && operand_equal_p (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1),\n+\t\t\t      TREE_OPERAND (arg0, 1), OEP_ONLY_CONST))\n+\t{\n+\t  tree arg000 = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t  tem = fold_build2 (BIT_AND_EXPR, TREE_TYPE (arg000),\n+\t\t\t     arg000, TREE_OPERAND (arg0, 1));\n+\t  return fold_build2 (code == EQ_EXPR ? NE_EXPR : EQ_EXPR, type,\n+\t\t\t      tem, build_int_cst (TREE_TYPE (tem), 0));\n+\t}\n+\n       if (integer_zerop (arg1)\n \t  && tree_expr_nonzero_p (arg0))\n         {"}, {"sha": "d0178e22f55b7f7065cfc5378d2e909092667ac6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "patch": "@@ -1,3 +1,7 @@\n+2006-02-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/fold-eqandnot-1.c: New test case.\n+\n 2006-02-26  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/19983"}, {"sha": "5ed65e8933b2d5c0431a10e9052b9f98858f9bb9", "filename": "gcc/testsuite/gcc.dg/fold-eqandnot-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandnot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandnot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandnot-1.c?ref=5881ad5d9dc40dbd97cb7dc4b9d4819c27bdd533", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+int test1(int a)\n+{\n+  return !(a & 4);\n+}\n+\n+int test2(int b)\n+{\n+  return (b & 4) == 0;\n+}\n+\n+int test3(int c)\n+{\n+  return ((c & 4) ^ 4) != 0;\n+}\n+\n+int test4(int d)\n+{\n+  return ((d ^ 4) & 4) != 0;\n+}\n+\n+int test5(int e)\n+{\n+  return (~e & 4) != 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\(a \\& 4\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(b \\& 4\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(c \\& 4\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(d \\& 4\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(e \\& 4\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}