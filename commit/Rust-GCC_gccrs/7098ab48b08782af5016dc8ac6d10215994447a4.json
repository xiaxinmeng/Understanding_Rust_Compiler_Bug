{"sha": "7098ab48b08782af5016dc8ac6d10215994447a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA5OGFiNDhiMDg3ODJhZjUwMTZkYzhhYzZkMTAyMTU5OTQ0NDdhNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-25T13:03:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-25T13:03:56Z"}, "message": "re PR tree-optimization/92222 (ice in useless_type_conversion_p, at gimple-expr.c:86)\n\n2019-10-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92222\n\t* tree-vect-slp.c (_slp_oprnd_info::first_pattern): Remove.\n\t(_slp_oprnd_info::second_pattern): Likewise.\n\t(_slp_oprnd_info::any_pattern): New.\n\t(vect_create_oprnd_info): Adjust.\n\t(vect_get_and_check_slp_defs): Compute whether any stmt is\n\tin a pattern.\n\t(vect_build_slp_tree_2): Avoid building up a node from scalars\n\tif any of the operand defs, not just the first, is in a pattern.\n\n\t* gcc.dg/torture/pr92222.c: New testcase.\n\nFrom-SVN: r277448", "tree": {"sha": "5d27d2ddaa20b183311d9a7fa54f6a637c3a57c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d27d2ddaa20b183311d9a7fa54f6a637c3a57c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7098ab48b08782af5016dc8ac6d10215994447a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7098ab48b08782af5016dc8ac6d10215994447a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7098ab48b08782af5016dc8ac6d10215994447a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7098ab48b08782af5016dc8ac6d10215994447a4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77100812a3bf4c693cb24c65be54ea367f17a246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77100812a3bf4c693cb24c65be54ea367f17a246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77100812a3bf4c693cb24c65be54ea367f17a246"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "cef0a3f34b6acdbc2d5740a479eb4bd91ee9ab7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7098ab48b08782af5016dc8ac6d10215994447a4", "patch": "@@ -1,3 +1,15 @@\n+2019-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92222\n+\t* tree-vect-slp.c (_slp_oprnd_info::first_pattern): Remove.\n+\t(_slp_oprnd_info::second_pattern): Likewise.\n+\t(_slp_oprnd_info::any_pattern): New.\n+\t(vect_create_oprnd_info): Adjust.\n+\t(vect_get_and_check_slp_defs): Compute whether any stmt is\n+\tin a pattern.\n+\t(vect_build_slp_tree_2): Avoid building up a node from scalars\n+\tif any of the operand defs, not just the first, is in a pattern.\n+\n 2019-10-25  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_get_and_check_slp_defs): Only fail"}, {"sha": "4e0fedd6c19f44e990e86e67d57bd99a3f753d7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7098ab48b08782af5016dc8ac6d10215994447a4", "patch": "@@ -1,3 +1,8 @@\n+2019-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92222\n+\t* gcc.dg/torture/pr92222.c: New testcase.\n+\n 2019-10-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/reduc_strict_3.c (double_reduc1): Prevent"}, {"sha": "f48010d6d31033f5c3e8011b81eadccdca315565", "filename": "gcc/testsuite/gcc.dg/torture/pr92222.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92222.c?ref=7098ab48b08782af5016dc8ac6d10215994447a4", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+unsigned char *a;\n+int b;\n+void f();\n+void c()\n+{\n+  char *d;\n+  int e;\n+  for (; b; b++) {\n+      e = 7;\n+      for (; e >= 0; e--)\n+\t*d++ = a[b] & 1 << e ? '1' : '0';\n+  }\n+  f();\n+}"}, {"sha": "e32731b6db16b06508bee4c373536fd611d07f4d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7098ab48b08782af5016dc8ac6d10215994447a4/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=7098ab48b08782af5016dc8ac6d10215994447a4", "patch": "@@ -177,8 +177,7 @@ typedef struct _slp_oprnd_info\n      stmt.  */\n   tree first_op_type;\n   enum vect_def_type first_dt;\n-  bool first_pattern;\n-  bool second_pattern;\n+  bool any_pattern;\n } *slp_oprnd_info;\n \n \n@@ -199,8 +198,7 @@ vect_create_oprnd_info (int nops, int group_size)\n       oprnd_info->ops.create (group_size);\n       oprnd_info->first_dt = vect_uninitialized_def;\n       oprnd_info->first_op_type = NULL_TREE;\n-      oprnd_info->first_pattern = false;\n-      oprnd_info->second_pattern = false;\n+      oprnd_info->any_pattern = false;\n       oprnds_info.quick_push (oprnd_info);\n     }\n \n@@ -339,13 +337,11 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n   tree oprnd;\n   unsigned int i, number_of_oprnds;\n   enum vect_def_type dt = vect_uninitialized_def;\n-  bool pattern = false;\n   slp_oprnd_info oprnd_info;\n   int first_op_idx = 1;\n   unsigned int commutative_op = -1U;\n   bool first_op_cond = false;\n   bool first = stmt_num == 0;\n-  bool second = stmt_num == 1;\n \n   if (gcall *stmt = dyn_cast <gcall *> (stmt_info->stmt))\n     {\n@@ -418,13 +414,12 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t  return -1;\n \t}\n \n-      if (second)\n-\toprnd_info->second_pattern = pattern;\n+      if (def_stmt_info && is_pattern_stmt_p (def_stmt_info))\n+\toprnd_info->any_pattern = true;\n \n       if (first)\n \t{\n \t  oprnd_info->first_dt = dt;\n-\t  oprnd_info->first_pattern = pattern;\n \t  oprnd_info->first_op_type = TREE_TYPE (oprnd);\n \t}\n       else\n@@ -1311,7 +1306,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t      /* ???  Rejecting patterns this way doesn't work.  We'd have to\n \t\t do extra work to cancel the pattern so the uses see the\n \t\t scalar version.  */\n-\t      && !is_pattern_stmt_p (SLP_TREE_SCALAR_STMTS (child)[0]))\n+\t      && !oprnd_info->any_pattern)\n \t    {\n \t      slp_tree grandchild;\n \n@@ -1358,7 +1353,8 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  /* ???  Rejecting patterns this way doesn't work.  We'd have to\n \t     do extra work to cancel the pattern so the uses see the\n \t     scalar version.  */\n-\t  && !is_pattern_stmt_p (stmt_info))\n+\t  && !is_pattern_stmt_p (stmt_info)\n+\t  && !oprnd_info->any_pattern)\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n@@ -1447,7 +1443,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t  /* ???  Rejecting patterns this way doesn't work.  We'd have\n \t\t     to do extra work to cancel the pattern so the uses see the\n \t\t     scalar version.  */\n-\t\t  && !is_pattern_stmt_p (SLP_TREE_SCALAR_STMTS (child)[0]))\n+\t\t  && !oprnd_info->any_pattern)\n \t\t{\n \t\t  unsigned int j;\n \t\t  slp_tree grandchild;"}]}