{"sha": "2e733703c0328d10098ced65abcc9803b4e5616d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU3MzM3MDNjMDMyOGQxMDA5OGNlZDY1YWJjYzk4MDNiNGU1NjE2ZA==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-12-02T17:11:52Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-12-02T17:11:52Z"}, "message": "fix invalid bounds on array refs\n\nWhile enabling graphite in -O3 we found a Fortran testcase that fails\nbecause the max of the type domain is -1.  We used to add that as a constraint\nto the elements accessed by the array, leading to a unfeasible constraint:\n0 <= i <= -1.  Having that constraint, drops the data reference as that says\nthat there are no elements accessed in the array.\n\n\t* graphite-dependences.c (scop_get_reads): Add extra dumps.\n\t(scop_get_must_writes): Same.\n\t(scop_get_may_writes): Same.\n\t(compute_deps): Same.\n\t* graphite-sese-to-poly.c (bounds_are_valid): New.\n\t(pdr_add_data_dimensions): Call bounds_are_valid.\n\n\t* gfortran.dg/graphite/run-id-3.f90: New.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r231191", "tree": {"sha": "1e81e6d67ce52610d9ca4e70944d0e99453388dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e81e6d67ce52610d9ca4e70944d0e99453388dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e733703c0328d10098ced65abcc9803b4e5616d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e733703c0328d10098ced65abcc9803b4e5616d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e733703c0328d10098ced65abcc9803b4e5616d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e733703c0328d10098ced65abcc9803b4e5616d/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c36240fc2df7a749772bb02df8632c5d5acec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c36240fc2df7a749772bb02df8632c5d5acec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c36240fc2df7a749772bb02df8632c5d5acec6"}], "stats": {"total": 174, "additions": 129, "deletions": 45}, "files": [{"sha": "a3d9854aecddda8aa2de24fa6830bc6591ebe592", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e733703c0328d10098ced65abcc9803b4e5616d", "patch": "@@ -1,3 +1,13 @@\n+2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-dependences.c (scop_get_reads): Add extra dumps.\n+\t(scop_get_must_writes): Same.\n+\t(scop_get_may_writes): Same.\n+\t(compute_deps): Same.\n+\t* graphite-sese-to-poly.c (bounds_are_valid): New.\n+\t(pdr_add_data_dimensions): Call bounds_are_valid.\n+\n 2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "bb81ae3ebaa159ed3c433f3eccdb13e2bce1b49c", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=2e733703c0328d10098ced65abcc9803b4e5616d", "patch": "@@ -87,7 +87,11 @@ scop_get_reads (scop_p scop, vec<poly_bb_p> pbbs)\n     {\n       FOR_EACH_VEC_ELT (PBB_DRS (pbb), j, pdr)\n \tif (pdr_read_p (pdr))\n-\t  res = isl_union_map_add_map (res, add_pdr_constraints (pdr, pbb));\n+\t  {\n+\t    if (dump_file)\n+\t      print_pdr (dump_file, pdr);\n+\t    res = isl_union_map_add_map (res, add_pdr_constraints (pdr, pbb));\n+\t  }\n     }\n \n   return res;\n@@ -108,7 +112,11 @@ scop_get_must_writes (scop_p scop, vec<poly_bb_p> pbbs)\n     {\n       FOR_EACH_VEC_ELT (PBB_DRS (pbb), j, pdr)\n \tif (pdr_write_p (pdr))\n-\t  res = isl_union_map_add_map (res, add_pdr_constraints (pdr, pbb));\n+\t  {\n+\t    if (dump_file)\n+\t      print_pdr (dump_file, pdr);\n+\t    res = isl_union_map_add_map (res, add_pdr_constraints (pdr, pbb));\n+\t  }\n     }\n \n   return res;\n@@ -129,7 +137,12 @@ scop_get_may_writes (scop_p scop, vec<poly_bb_p> pbbs)\n     {\n       FOR_EACH_VEC_ELT (PBB_DRS (pbb), j, pdr)\n \tif (pdr_may_write_p (pdr))\n-\t  res = isl_union_map_add_map (res, add_pdr_constraints (pdr, pbb));\n+\t  {\n+\t    if (dump_file)\n+\t      print_pdr (dump_file, pdr);\n+\n+\t    res = isl_union_map_add_map (res, add_pdr_constraints (pdr, pbb));\n+\t  }\n     }\n \n   return res;\n@@ -313,6 +326,36 @@ compute_deps (scop_p scop, vec<poly_bb_p> pbbs,\n   isl_union_map *empty = isl_union_map_empty (space);\n   isl_union_map *original = scop_get_original_schedule (scop, pbbs);\n \n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"\\n--- Documentation for datarefs dump: ---\\n\");\n+      fprintf (dump_file, \"Statements on the iteration domain are mapped to\"\n+\t       \" array references.\\n\");\n+      fprintf (dump_file, \"  To read the following data references:\\n\\n\");\n+      fprintf (dump_file, \"  S_5[i0] -> [106] : i0 >= 0 and i0 <= 3\\n\");\n+      fprintf (dump_file, \"  S_8[i0] -> [1, i0] : i0 >= 0 and i0 <= 3\\n\\n\");\n+\n+      fprintf (dump_file, \"  S_5[i0] is the dynamic instance of statement\"\n+\t       \" bb_5 in a loop that accesses all iterations 0 <= i0 <= 3.\\n\");\n+      fprintf (dump_file, \"  [1, i0] is a 'memref' with alias set 1\"\n+\t       \" and first subscript access i0.\\n\");\n+      fprintf (dump_file, \"  [106] is a 'scalar reference' which is the sum of\"\n+\t       \" SSA_NAME_VERSION 6\"\n+\t       \" and --param graphite-max-arrays-per-scop=100\\n\");\n+      fprintf (dump_file, \"-----------------------\\n\\n\");\n+\n+      fprintf (dump_file, \"data references (\\n\");\n+      fprintf (dump_file, \"  reads: \");\n+      print_isl_union_map (dump_file, reads);\n+      fprintf (dump_file, \"  must_writes: \");\n+      print_isl_union_map (dump_file, must_writes);\n+      fprintf (dump_file, \"  may_writes: \");\n+      print_isl_union_map (dump_file, may_writes);\n+      fprintf (dump_file, \"  all_writes: \");\n+      print_isl_union_map (dump_file, all_writes);\n+      fprintf (dump_file, \")\\n\");\n+    }\n+\n   isl_union_map_compute_flow (isl_union_map_copy (reads),\n \t\t\t      isl_union_map_copy (must_writes),\n \t\t\t      isl_union_map_copy (may_writes),"}, {"sha": "887c2125447e76a0abc265a4bec17a25f204d9d9", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 56, "deletions": 42, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=2e733703c0328d10098ced65abcc9803b4e5616d", "patch": "@@ -922,6 +922,33 @@ pdr_add_memory_accesses (isl_map *acc, dr_info &dri)\n   return acc;\n }\n \n+/* Return true when the LOW and HIGH bounds of an array reference REF are valid\n+   to extract constraints on accessed elements of the array.  Returning false is\n+   the conservative answer.  */\n+\n+static bool\n+bounds_are_valid (tree ref, tree low, tree high)\n+{\n+  if (!high)\n+    return false;\n+\n+  if (!tree_fits_shwi_p (low)\n+      || !tree_fits_shwi_p (high))\n+    return false;\n+\n+  /* 1-element arrays at end of structures may extend over\n+     their declared size.  */\n+  if (array_at_struct_end_p (ref)\n+      && operand_equal_p (low, high, 0))\n+    return false;\n+\n+  /* Fortran has some arrays where high bound is -1 and low is 0.  */\n+  if (integer_onep (fold_build2 (LT_EXPR, boolean_type_node, high, low)))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Add constrains representing the size of the accessed data to the\n    ACCESSES polyhedron.  ACCESSP_NB_DIMS is the dimension of the\n    ACCESSES polyhedron, DOM_NB_DIMS is the dimension of the iteration\n@@ -942,48 +969,35 @@ pdr_add_data_dimensions (isl_set *subscript_sizes, scop_p scop,\n       tree low = array_ref_low_bound (ref);\n       tree high = array_ref_up_bound (ref);\n \n-      /* XXX The PPL code dealt separately with\n-         subscript - low >= 0 and high - subscript >= 0 in case one of\n-\t the two bounds isn't known.  Do the same here?  */\n-\n-      if (tree_fits_shwi_p (low)\n-\t  && high\n-\t  && tree_fits_shwi_p (high)\n-\t  /* 1-element arrays at end of structures may extend over\n-\t     their declared size.  */\n-\t  && !(array_at_struct_end_p (ref)\n-\t       && operand_equal_p (low, high, 0)))\n-\t{\n-\t  isl_id *id;\n-\t  isl_aff *aff;\n-\t  isl_set *univ, *lbs, *ubs;\n-\t  isl_pw_aff *index;\n-\t  isl_set *valid;\n-\t  isl_space *space = isl_set_get_space (subscript_sizes);\n-\t  isl_pw_aff *lb = extract_affine_int (low, isl_space_copy (space));\n-\t  isl_pw_aff *ub = extract_affine_int (high, isl_space_copy (space));\n-\n-\t  /* high >= 0 */\n-\t  valid = isl_pw_aff_nonneg_set (isl_pw_aff_copy (ub));\n-\t  valid = isl_set_project_out (valid, isl_dim_set, 0,\n-\t\t\t\t       isl_set_dim (valid, isl_dim_set));\n-\t  scop->param_context = isl_set_intersect (scop->param_context, valid);\n-\n-\t  aff = isl_aff_zero_on_domain (isl_local_space_from_space (space));\n-\t  aff = isl_aff_add_coefficient_si (aff, isl_dim_in, i + 1, 1);\n-\t  univ = isl_set_universe (isl_space_domain (isl_aff_get_space (aff)));\n-\t  index = isl_pw_aff_alloc (univ, aff);\n-\n-\t  id = isl_set_get_tuple_id (subscript_sizes);\n-\t  lb = isl_pw_aff_set_tuple_id (lb, isl_dim_in, isl_id_copy (id));\n-\t  ub = isl_pw_aff_set_tuple_id (ub, isl_dim_in, id);\n-\n-\t  /* low <= sub_i <= high */\n-\t  lbs = isl_pw_aff_ge_set (isl_pw_aff_copy (index), lb);\n-\t  ubs = isl_pw_aff_le_set (index, ub);\n-\t  subscript_sizes = isl_set_intersect (subscript_sizes, lbs);\n-\t  subscript_sizes = isl_set_intersect (subscript_sizes, ubs);\n-\t}\n+      if (!bounds_are_valid (ref, low, high))\n+\tcontinue;\n+\n+      isl_space *space = isl_set_get_space (subscript_sizes);\n+      isl_pw_aff *lb = extract_affine_int (low, isl_space_copy (space));\n+      isl_pw_aff *ub = extract_affine_int (high, isl_space_copy (space));\n+\n+      /* high >= 0 */\n+      isl_set *valid = isl_pw_aff_nonneg_set (isl_pw_aff_copy (ub));\n+      valid = isl_set_project_out (valid, isl_dim_set, 0,\n+\t\t\t\t   isl_set_dim (valid, isl_dim_set));\n+      scop->param_context = isl_set_intersect (scop->param_context, valid);\n+\n+      isl_aff *aff\n+\t= isl_aff_zero_on_domain (isl_local_space_from_space (space));\n+      aff = isl_aff_add_coefficient_si (aff, isl_dim_in, i + 1, 1);\n+      isl_set *univ\n+\t= isl_set_universe (isl_space_domain (isl_aff_get_space (aff)));\n+      isl_pw_aff *index = isl_pw_aff_alloc (univ, aff);\n+\n+      isl_id *id = isl_set_get_tuple_id (subscript_sizes);\n+      lb = isl_pw_aff_set_tuple_id (lb, isl_dim_in, isl_id_copy (id));\n+      ub = isl_pw_aff_set_tuple_id (ub, isl_dim_in, id);\n+\n+      /* low <= sub_i <= high */\n+      isl_set *lbs = isl_pw_aff_ge_set (isl_pw_aff_copy (index), lb);\n+      isl_set *ubs = isl_pw_aff_le_set (index, ub);\n+      subscript_sizes = isl_set_intersect (subscript_sizes, lbs);\n+      subscript_sizes = isl_set_intersect (subscript_sizes, ubs);\n     }\n \n   return subscript_sizes;"}, {"sha": "edbed47c6b6df99c6e5e46c3c25a92260b699a29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e733703c0328d10098ced65abcc9803b4e5616d", "patch": "@@ -1,3 +1,8 @@\n+2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* gfortran.dg/graphite/run-id-3.f90: New.\n+\n 2015-12-02  David Sherwood  <david.sherwood@arm.com>\n \n         * gcc.target/aarch64/fmaxmin.c: New test."}, {"sha": "54139efcc8f1424ada6151fc0694a7ea9cbd9f20", "filename": "gcc/testsuite/gfortran.dg/graphite/run-id-3.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Frun-id-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e733703c0328d10098ced65abcc9803b4e5616d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Frun-id-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Frun-id-3.f90?ref=2e733703c0328d10098ced65abcc9803b4e5616d", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize -floop-nest-optimize\" }\n+! PR 56872 - wrong front-end optimization with a single constructor.\n+! Original bug report by Rich Townsend.\n+  integer :: k\n+  real :: s\n+  integer :: m\n+  s = 2.0\n+  m = 4\n+  res = SUM([(s**(REAL(k-1)/REAL(m-1)),k=1,m)])\n+  if (abs(res - 5.84732246) > 1e-6) call abort\n+  end"}]}