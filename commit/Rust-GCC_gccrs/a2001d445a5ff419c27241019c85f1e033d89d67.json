{"sha": "a2001d445a5ff419c27241019c85f1e033d89d67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwMDFkNDQ1YTVmZjQxOWMyNzI0MTAxOWM4NWYxZTAzM2Q4OWQ2Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-08-05T12:30:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-08-05T12:30:49Z"}, "message": "re PR tree-optimization/91169 (cd2a31a FAILs)\n\n2019-08-05  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/91169\n\t* fold-const.c (get_array_ctor_element_at_index): Create\n\toffset_ints according to the sign of the index type and treat\n\tthat as signed if it is obviously so.\n\n\t* gnat.dg/array37.adb: New testcase.\n\nFrom-SVN: r274114", "tree": {"sha": "dc77436e1a45df7a781ad4909f4d5a16fd3c9700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc77436e1a45df7a781ad4909f4d5a16fd3c9700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2001d445a5ff419c27241019c85f1e033d89d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2001d445a5ff419c27241019c85f1e033d89d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2001d445a5ff419c27241019c85f1e033d89d67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2001d445a5ff419c27241019c85f1e033d89d67/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a"}], "stats": {"total": 84, "additions": 69, "deletions": 15}, "files": [{"sha": "c118e4ddca982c1a733ba4d98d6d70682d87faef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2001d445a5ff419c27241019c85f1e033d89d67", "patch": "@@ -1,3 +1,10 @@\n+2019-08-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/91169\n+\t* fold-const.c (get_array_ctor_element_at_index): Create\n+\toffset_ints according to the sign of the index type and treat\n+\tthat as signed if it is obviously so.\n+\n 2019-08-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91341"}, {"sha": "716d7397b49bb4a4be4441396ade09692f9221d2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a2001d445a5ff419c27241019c85f1e033d89d67", "patch": "@@ -11850,6 +11850,7 @@ get_array_ctor_element_at_index (tree ctor, offset_int access_index,\n \t\t\t\t unsigned *ctor_idx)\n {\n   tree index_type = NULL_TREE;\n+  signop index_sgn = UNSIGNED;\n   offset_int low_bound = 0;\n \n   if (TREE_CODE (TREE_TYPE (ctor)) == ARRAY_TYPE)\n@@ -11860,22 +11861,37 @@ get_array_ctor_element_at_index (tree ctor, offset_int access_index,\n \t  /* Static constructors for variably sized objects makes no sense.  */\n \t  gcc_assert (TREE_CODE (TYPE_MIN_VALUE (domain_type)) == INTEGER_CST);\n \t  index_type = TREE_TYPE (TYPE_MIN_VALUE (domain_type));\n-\t  low_bound = wi::to_offset (TYPE_MIN_VALUE (domain_type));\n+\t  /* ???  When it is obvious that the range is signed, treat it so.  */\n+\t  if (TYPE_UNSIGNED (index_type)\n+\t      && TYPE_MAX_VALUE (domain_type)\n+\t      && tree_int_cst_lt (TYPE_MAX_VALUE (domain_type),\n+\t\t\t\t  TYPE_MIN_VALUE (domain_type)))\n+\t    {\n+\t      index_sgn = SIGNED;\n+\t      low_bound\n+\t\t= offset_int::from (wi::to_wide (TYPE_MIN_VALUE (domain_type)),\n+\t\t\t\t    SIGNED);\n+\t    }\n+\t  else\n+\t    {\n+\t      index_sgn = TYPE_SIGN (index_type);\n+\t      low_bound = wi::to_offset (TYPE_MIN_VALUE (domain_type));\n+\t    }\n \t}\n     }\n \n   if (index_type)\n     access_index = wi::ext (access_index, TYPE_PRECISION (index_type),\n-\t\t\t    TYPE_SIGN (index_type));\n+\t\t\t    index_sgn);\n \n-  offset_int index = low_bound - 1;\n+  offset_int index = low_bound;\n   if (index_type)\n-    index = wi::ext (index, TYPE_PRECISION (index_type),\n-\t\t     TYPE_SIGN (index_type));\n+    index = wi::ext (index, TYPE_PRECISION (index_type), index_sgn);\n \n-  offset_int max_index;\n+  offset_int max_index = index;\n   unsigned cnt;\n   tree cfield, cval;\n+  bool first_p = true;\n \n   FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), cnt, cfield, cval)\n     {\n@@ -11885,27 +11901,34 @@ get_array_ctor_element_at_index (tree ctor, offset_int access_index,\n       if (cfield)\n \t{\n \t  if (TREE_CODE (cfield) == INTEGER_CST)\n-\t    max_index = index = wi::to_offset (cfield);\n+\t    max_index = index\n+\t      = offset_int::from (wi::to_wide (cfield), index_sgn);\n \t  else\n \t    {\n \t      gcc_assert (TREE_CODE (cfield) == RANGE_EXPR);\n-\t      index = wi::to_offset (TREE_OPERAND (cfield, 0));\n-\t      max_index = wi::to_offset (TREE_OPERAND (cfield, 1));\n+\t      index = offset_int::from (wi::to_wide (TREE_OPERAND (cfield, 0)),\n+\t\t\t\t\tindex_sgn);\n+\t      max_index\n+\t        = offset_int::from (wi::to_wide (TREE_OPERAND (cfield, 1)),\n+\t\t\t\t    index_sgn);\n+\t      gcc_checking_assert (wi::le_p (index, max_index, index_sgn));\n \t    }\n \t}\n-      else\n+      else if (!first_p)\n \t{\n-\t  index += 1;\n+\t  index = max_index + 1;\n \t  if (index_type)\n-\t    index = wi::ext (index, TYPE_PRECISION (index_type),\n-\t\t\t     TYPE_SIGN (index_type));\n+\t    index = wi::ext (index, TYPE_PRECISION (index_type), index_sgn);\n+\t  gcc_checking_assert (wi::gt_p (index, max_index, index_sgn));\n \t  max_index = index;\n \t}\n+      else\n+\tfirst_p = false;\n \n       /* Do we have match?  */\n-      if (wi::cmpu (access_index, index) >= 0)\n+      if (wi::cmp (access_index, index, index_sgn) >= 0)\n \t{\n-\t  if (wi::cmpu (access_index, max_index) <= 0)\n+\t  if (wi::cmp (access_index, max_index, index_sgn) <= 0)\n \t    {\n \t      if (ctor_idx)\n \t\t*ctor_idx = cnt;"}, {"sha": "5dc9d11140b99b145b41dd4c9c96db6fb7b56d25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2001d445a5ff419c27241019c85f1e033d89d67", "patch": "@@ -1,3 +1,8 @@\n+2019-08-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/91169\n+\t* gnat.dg/array37.adb: New testcase.\n+\n 2019-08-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91341"}, {"sha": "f1ee385d1a55a48473aa68b2c119cd7ee85cb79f", "filename": "gcc/testsuite/gnat.dg/array37.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2Ftestsuite%2Fgnat.dg%2Farray37.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2001d445a5ff419c27241019c85f1e033d89d67/gcc%2Ftestsuite%2Fgnat.dg%2Farray37.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray37.adb?ref=a2001d445a5ff419c27241019c85f1e033d89d67", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+procedure Array37 is\n+\n+  type Arr is array (Integer range -1 .. 1) of Integer;\n+\n+  A : Arr := (-100, 0, 100);\n+\n+  function Ident (I : Integer) return Integer IS\n+  begin\n+    return I;\n+  end;\n+\n+begin\n+  if Ident (A (1)) <= Ident (A (0)) then\n+    raise Program_Error;\n+  end if;\n+end;"}]}