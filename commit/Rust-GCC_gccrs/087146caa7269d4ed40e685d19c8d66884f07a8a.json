{"sha": "087146caa7269d4ed40e685d19c8d66884f07a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3MTQ2Y2FhNzI2OWQ0ZWQ0MGU2ODVkMTljOGQ2Njg4NGYwN2E4YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2016-04-27T17:32:40Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-04-27T17:32:40Z"}, "message": "Extend STV pass to 64-bit mode\n\n128-bit SSE load and store instructions can be used for load and store\nof 128-bit integers if they are the only operations on 128-bit integers.\nTo convert load and store of 128-bit integers to 128-bit SSE load and\nstore, the original STV pass, which is designed to convert 64-bit integer\noperations to SSE2 operations in 32-bit mode, is extended to 64-bit mode\nin the following ways:\n\n1. Class scalar_chain is turned into base class.  The 32-bit specific\nmember functions are moved to the new derived class, dimode_scalar_chain.\nThe new derived class, timode_scalar_chain, is added to convert oad and\nstore of 128-bit integers to 128-bit SSE load and store.\n2. Add the 64-bit version of scalar_to_vector_candidate_p and\nremove_non_convertible_regs.  Only TImode load and store are allowed\nfor conversion.  If one instruction on the chain of dependent\ninstructions aren't TImode load or store, the chain of instructions\nwon't be converted.\n3. In 64-bit, we only convert from TImode to V1TImode, which have the\nsame size.  The difference is only vector registers are allowed in\nTImode so that 128-bit SSE load and store instructions will be used\nfor load and store of 128-bit integers.\n4. Put the 64-bit STV pass before the CSE pass so that instructions\nchanged or generated by the STV pass can be CSEed.\n\nconvert_scalars_to_vector calls free_dominance_info in 64-bit mode to\nwork around ICE in fwprop pass:\n\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=70807\n\nwhen building libgcc on Linux/x86-64.\n\ngcc/\n\n\tPR target/70155\n\t* config/i386/i386.c (scalar_to_vector_candidate_p): Renamed\n\tto ...\n\t(dimode_scalar_to_vector_candidate_p): This.\n\t(timode_scalar_to_vector_candidate_p): New function.\n\t(scalar_to_vector_candidate_p): Likewise.\n\t(timode_check_non_convertible_regs): Likewise.\n\t(timode_remove_non_convertible_regs): Likewise.\n\t(remove_non_convertible_regs): Likewise.\n\t(remove_non_convertible_regs): Renamed to ...\n\t(dimode_remove_non_convertible_regs): This.\n\t(scalar_chain::~scalar_chain): Make it virtual.\n\t(scalar_chain::compute_convert_gain): Make it pure virtual.\n\t(scalar_chain::mark_dual_mode_def): Likewise.\n\t(scalar_chain::convert_insn): Likewise.\n\t(scalar_chain::convert_registers): Likewise.\n\t(scalar_chain::add_to_queue): Make it protected.\n\t(scalar_chain::emit_conversion_insns): Likewise.\n\t(scalar_chain::replace_with_subreg): Likewise.\n\t(scalar_chain::replace_with_subreg_in_insn): Likewise.\n\t(scalar_chain::convert_op): Likewise.\n\t(scalar_chain::convert_reg): Likewise.\n\t(scalar_chain::make_vector_copies): Likewise.\n\t(scalar_chain::convert_registers): New pure virtual function.\n\t(class dimode_scalar_chain): New class.\n\t(class timode_scalar_chain): Likewise.\n\t(scalar_chain::mark_dual_mode_def): Renamed to ...\n\t(dimode_scalar_chain::mark_dual_mode_def): This.\n\t(timode_scalar_chain::mark_dual_mode_def): New function.\n\t(timode_scalar_chain::convert_insn): Likewise.\n\t(dimode_scalar_chain::convert_registers): Likewise.\n\t(scalar_chain::compute_convert_gain): Renamed to ...\n\t(dimode_scalar_chain::compute_convert_gain): This.\n\t(scalar_chain::replace_with_subreg): Renamed to ...\n\t(dimode_scalar_chain::replace_with_subreg): This.\n\t(scalar_chain::replace_with_subreg_in_insn): Renamed to ...\n\t(dimode_scalar_chain::replace_with_subreg_in_insn): This.\n\t(scalar_chain::make_vector_copies): Renamed to ...\n\t(dimode_scalar_chain::make_vector_copies): This.\n\t(scalar_chain::convert_reg): Renamed to ...\n\t(dimode_scalar_chain::convert_reg ): This.\n\t(scalar_chain::convert_op): Renamed to ...\n\t(dimode_scalar_chain::convert_op): This.\n\t(scalar_chain::convert_insn): Renamed to ...\n\t(dimode_scalar_chain::convert_insn): This.\n\t(scalar_chain::convert): Call convert_registers.\n\t(convert_scalars_to_vector): Change to scalar_chain pointer to\n\tuse timode_scalar_chain in 64-bit mode and dimode_scalar_chain\n\tin 32-bit mode.  Delete scalar_chain pointer.  Call\n\tfree_dominance_info in 64-bit mode.\n\t(pass_stv::gate): Remove TARGET_64BIT check.\n\t(ix86_option_override): Put the 64-bit STV pass before the CSE\n\tpass.\n\ngcc/testsuite/\n\n\tPR target/70155\n\t* gcc.target/i386/pr55247-2.c: Updated to check movti_internal\n\tand movv1ti_internal patterns\n\t* gcc.target/i386/pr70155-1.c: New test.\n\t* gcc.target/i386/pr70155-2.c: Likewise.\n\t* gcc.target/i386/pr70155-3.c: Likewise.\n\t* gcc.target/i386/pr70155-4.c: Likewise.\n\t* gcc.target/i386/pr70155-5.c: Likewise.\n\t* gcc.target/i386/pr70155-6.c: Likewise.\n\t* gcc.target/i386/pr70155-7.c: Likewise.\n\t* gcc.target/i386/pr70155-8.c: Likewise.\n\t* gcc.target/i386/pr70155-9.c: Likewise.\n\t* gcc.target/i386/pr70155-10.c: Likewise.\n\t* gcc.target/i386/pr70155-11.c: Likewise.\n\t* gcc.target/i386/pr70155-12.c: Likewise.\n\t* gcc.target/i386/pr70155-13.c: Likewise.\n\t* gcc.target/i386/pr70155-14.c: Likewise.\n\t* gcc.target/i386/pr70155-15.c: Likewise.\n\t* gcc.target/i386/pr70155-16.c: Likewise.\n\t* gcc.target/i386/pr70155-17.c: Likewise.\n\t* gcc.target/i386/pr70155-18.c: Likewise.\n\t* gcc.target/i386/pr70155-19.c: Likewise.\n\t* gcc.target/i386/pr70155-20.c: Likewise.\n\t* gcc.target/i386/pr70155-21.c: Likewise.\n\t* gcc.target/i386/pr70155-22.c: Likewise.\n\nFrom-SVN: r235518", "tree": {"sha": "85e205b1046453d116bfa3c21640d6205fa371da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85e205b1046453d116bfa3c21640d6205fa371da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/087146caa7269d4ed40e685d19c8d66884f07a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/087146caa7269d4ed40e685d19c8d66884f07a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/087146caa7269d4ed40e685d19c8d66884f07a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/087146caa7269d4ed40e685d19c8d66884f07a8a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92329f9f80b7dd1de256f629454a66bb63422572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92329f9f80b7dd1de256f629454a66bb63422572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92329f9f80b7dd1de256f629454a66bb63422572"}], "stats": {"total": 833, "additions": 794, "deletions": 39}, "files": [{"sha": "71c7d1f78b8431146b1e387cabbe3904bcedd27a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -1,3 +1,59 @@\n+2016-04-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/70155\n+\t* config/i386/i386.c (scalar_to_vector_candidate_p): Renamed\n+\tto ...\n+\t(dimode_scalar_to_vector_candidate_p): This.\n+\t(timode_scalar_to_vector_candidate_p): New function.\n+\t(scalar_to_vector_candidate_p): Likewise.\n+\t(timode_check_non_convertible_regs): Likewise.\n+\t(timode_remove_non_convertible_regs): Likewise.\n+\t(remove_non_convertible_regs): Likewise.\n+\t(remove_non_convertible_regs): Renamed to ...\n+\t(dimode_remove_non_convertible_regs): This.\n+\t(scalar_chain::~scalar_chain): Make it virtual.\n+\t(scalar_chain::compute_convert_gain): Make it pure virtual.\n+\t(scalar_chain::mark_dual_mode_def): Likewise.\n+\t(scalar_chain::convert_insn): Likewise.\n+\t(scalar_chain::convert_registers): Likewise.\n+\t(scalar_chain::add_to_queue): Make it protected.\n+\t(scalar_chain::emit_conversion_insns): Likewise.\n+\t(scalar_chain::replace_with_subreg): Likewise.\n+\t(scalar_chain::replace_with_subreg_in_insn): Likewise.\n+\t(scalar_chain::convert_op): Likewise.\n+\t(scalar_chain::convert_reg): Likewise.\n+\t(scalar_chain::make_vector_copies): Likewise.\n+\t(scalar_chain::convert_registers): New pure virtual function.\n+\t(class dimode_scalar_chain): New class.\n+\t(class timode_scalar_chain): Likewise.\n+\t(scalar_chain::mark_dual_mode_def): Renamed to ...\n+\t(dimode_scalar_chain::mark_dual_mode_def): This.\n+\t(timode_scalar_chain::mark_dual_mode_def): New function.\n+\t(timode_scalar_chain::convert_insn): Likewise.\n+\t(dimode_scalar_chain::convert_registers): Likewise.\n+\t(scalar_chain::compute_convert_gain): Renamed to ...\n+\t(dimode_scalar_chain::compute_convert_gain): This.\n+\t(scalar_chain::replace_with_subreg): Renamed to ...\n+\t(dimode_scalar_chain::replace_with_subreg): This.\n+\t(scalar_chain::replace_with_subreg_in_insn): Renamed to ...\n+\t(dimode_scalar_chain::replace_with_subreg_in_insn): This.\n+\t(scalar_chain::make_vector_copies): Renamed to ...\n+\t(dimode_scalar_chain::make_vector_copies): This.\n+\t(scalar_chain::convert_reg): Renamed to ...\n+\t(dimode_scalar_chain::convert_reg ): This.\n+\t(scalar_chain::convert_op): Renamed to ...\n+\t(dimode_scalar_chain::convert_op): This.\n+\t(scalar_chain::convert_insn): Renamed to ...\n+\t(dimode_scalar_chain::convert_insn): This.\n+\t(scalar_chain::convert): Call convert_registers.\n+\t(convert_scalars_to_vector): Change to scalar_chain pointer to\n+\tuse timode_scalar_chain in 64-bit mode and dimode_scalar_chain\n+\tin 32-bit mode.  Delete scalar_chain pointer.  Call\n+\tfree_dominance_info in 64-bit mode.\n+\t(pass_stv::gate): Remove TARGET_64BIT check.\n+\t(ix86_option_override): Put the 64-bit STV pass before the CSE\n+\tpass.\n+\n 2016-04-27  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* dwarf2out.h (struct dw_loc_descr_node): Remove the"}, {"sha": "fa23a266d746a51bf0c88e7cce1ac12c68d324f9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 351, "deletions": 37, "changes": 388, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -2769,11 +2769,10 @@ convertible_comparison_p (rtx_insn *insn)\n   return true;\n }\n \n-/* Return 1 if INSN may be converted into vector\n-   instruction.  */\n+/* The DImode version of scalar_to_vector_candidate_p.  */\n \n static bool\n-scalar_to_vector_candidate_p (rtx_insn *insn)\n+dimode_scalar_to_vector_candidate_p (rtx_insn *insn)\n {\n   rtx def_set = single_set (insn);\n \n@@ -2833,16 +2832,75 @@ scalar_to_vector_candidate_p (rtx_insn *insn)\n   return true;\n }\n \n-/* For a given bitmap of insn UIDs scans all instruction and\n-   remove insn from CANDIDATES in case it has both convertible\n-   and not convertible definitions.\n+/* The TImode version of scalar_to_vector_candidate_p.  */\n \n-   All insns in a bitmap are conversion candidates according to\n-   scalar_to_vector_candidate_p.  Currently it implies all insns\n-   are single_set.  */\n+static bool\n+timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n+{\n+  rtx def_set = single_set (insn);\n+\n+  if (!def_set)\n+    return false;\n+\n+  if (has_non_address_hard_reg (insn))\n+    return false;\n+\n+  rtx src = SET_SRC (def_set);\n+  rtx dst = SET_DEST (def_set);\n+\n+  /* Only TImode load and store are allowed.  */\n+  if (GET_MODE (dst) != TImode)\n+    return false;\n+\n+  if (MEM_P (dst))\n+    {\n+      /* Check for store.  Only support store from register or standard\n+\t SSE constants.  Memory must be aligned or unaligned store is\n+\t optimal.  */\n+      if (misaligned_operand (dst, TImode)\n+\t  && !TARGET_SSE_UNALIGNED_STORE_OPTIMAL)\n+\treturn false;\n+\n+      switch (GET_CODE (src))\n+\t{\n+\tdefault:\n+\t  return false;\n+\n+\tcase REG:\n+\t  return true;\n+\n+\tcase CONST_INT:\n+\t  return standard_sse_constant_p (src, TImode);\n+\t}\n+    }\n+  else if (MEM_P (src))\n+    {\n+      /* Check for load.  Memory must be aligned or unaligned load is\n+\t optimal.  */\n+      return (REG_P (dst)\n+\t      && (!misaligned_operand (src, TImode)\n+\t\t  || TARGET_SSE_UNALIGNED_LOAD_OPTIMAL));\n+    }\n+\n+  return false;\n+}\n+\n+/* Return 1 if INSN may be converted into vector\n+   instruction.  */\n+\n+static bool\n+scalar_to_vector_candidate_p (rtx_insn *insn)\n+{\n+  if (TARGET_64BIT)\n+    return timode_scalar_to_vector_candidate_p (insn);\n+  else\n+    return dimode_scalar_to_vector_candidate_p (insn);\n+}\n+\n+/* The DImode version of remove_non_convertible_regs.  */\n \n static void\n-remove_non_convertible_regs (bitmap candidates)\n+dimode_remove_non_convertible_regs (bitmap candidates)\n {\n   bitmap_iterator bi;\n   unsigned id;\n@@ -2893,11 +2951,132 @@ remove_non_convertible_regs (bitmap candidates)\n   BITMAP_FREE (regs);\n }\n \n+/* For a register REGNO, scan instructions for its defs and uses.\n+   Put REGNO in REGS if a def or use isn't in CANDIDATES.  */\n+\n+static void\n+timode_check_non_convertible_regs (bitmap candidates, bitmap regs,\n+\t\t\t\t   unsigned int regno)\n+{\n+  for (df_ref def = DF_REG_DEF_CHAIN (regno);\n+       def;\n+       def = DF_REF_NEXT_REG (def))\n+    {\n+      if (!bitmap_bit_p (candidates, DF_REF_INSN_UID (def)))\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file,\n+\t\t     \"r%d has non convertible def in insn %d\\n\",\n+\t\t     regno, DF_REF_INSN_UID (def));\n+\n+\t  bitmap_set_bit (regs, regno);\n+\t  break;\n+\t}\n+    }\n+\n+  for (df_ref ref = DF_REG_USE_CHAIN (regno);\n+       ref;\n+       ref = DF_REF_NEXT_REG (ref))\n+    {\n+      /* Debug instructions are skipped.  */\n+      if (NONDEBUG_INSN_P (DF_REF_INSN (ref))\n+\t  && !bitmap_bit_p (candidates, DF_REF_INSN_UID (ref)))\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file,\n+\t\t     \"r%d has non convertible use in insn %d\\n\",\n+\t\t     regno, DF_REF_INSN_UID (ref));\n+\n+\t  bitmap_set_bit (regs, regno);\n+\t  break;\n+\t}\n+    }\n+}\n+\n+/* The TImode version of remove_non_convertible_regs.  */\n+\n+static void\n+timode_remove_non_convertible_regs (bitmap candidates)\n+{\n+  bitmap_iterator bi;\n+  unsigned id;\n+  bitmap regs = BITMAP_ALLOC (NULL);\n+\n+  EXECUTE_IF_SET_IN_BITMAP (candidates, 0, id, bi)\n+    {\n+      rtx def_set = single_set (DF_INSN_UID_GET (id)->insn);\n+      rtx dest = SET_DEST (def_set);\n+      rtx src = SET_SRC (def_set);\n+\n+      if ((!REG_P (dest)\n+\t   || bitmap_bit_p (regs, REGNO (dest))\n+\t   || HARD_REGISTER_P (dest))\n+\t  && (!REG_P (src)\n+\t      || bitmap_bit_p (regs, REGNO (src))\n+\t      || HARD_REGISTER_P (src)))\n+\tcontinue;\n+\n+      if (REG_P (dest))\n+\ttimode_check_non_convertible_regs (candidates, regs,\n+\t\t\t\t\t   REGNO (dest));\n+\n+      if (REG_P (src))\n+\ttimode_check_non_convertible_regs (candidates, regs,\n+\t\t\t\t\t   REGNO (src));\n+    }\n+\n+  EXECUTE_IF_SET_IN_BITMAP (regs, 0, id, bi)\n+    {\n+      for (df_ref def = DF_REG_DEF_CHAIN (id);\n+\t   def;\n+\t   def = DF_REF_NEXT_REG (def))\n+\tif (bitmap_bit_p (candidates, DF_REF_INSN_UID (def)))\n+\t  {\n+\t    if (dump_file)\n+\t      fprintf (dump_file, \"Removing insn %d from candidates list\\n\",\n+\t\t       DF_REF_INSN_UID (def));\n+\n+\t    bitmap_clear_bit (candidates, DF_REF_INSN_UID (def));\n+\t  }\n+\n+      for (df_ref ref = DF_REG_USE_CHAIN (id);\n+\t   ref;\n+\t   ref = DF_REF_NEXT_REG (ref))\n+\tif (bitmap_bit_p (candidates, DF_REF_INSN_UID (ref)))\n+\t  {\n+\t    if (dump_file)\n+\t      fprintf (dump_file, \"Removing insn %d from candidates list\\n\",\n+\t\t       DF_REF_INSN_UID (ref));\n+\n+\t    bitmap_clear_bit (candidates, DF_REF_INSN_UID (ref));\n+\t  }\n+    }\n+\n+  BITMAP_FREE (regs);\n+}\n+\n+/* For a given bitmap of insn UIDs scans all instruction and\n+   remove insn from CANDIDATES in case it has both convertible\n+   and not convertible definitions.\n+\n+   All insns in a bitmap are conversion candidates according to\n+   scalar_to_vector_candidate_p.  Currently it implies all insns\n+   are single_set.  */\n+\n+static void\n+remove_non_convertible_regs (bitmap candidates)\n+{\n+  if (TARGET_64BIT)\n+    timode_remove_non_convertible_regs (candidates);\n+  else\n+    dimode_remove_non_convertible_regs (candidates);\n+}\n+\n class scalar_chain\n {\n  public:\n   scalar_chain ();\n-  ~scalar_chain ();\n+  virtual ~scalar_chain ();\n \n   static unsigned max_id;\n \n@@ -2913,21 +3092,47 @@ class scalar_chain\n   bitmap defs_conv;\n \n   void build (bitmap candidates, unsigned insn_uid);\n-  int compute_convert_gain ();\n+  virtual int compute_convert_gain () = 0;\n   int convert ();\n \n+ protected:\n+  void add_to_queue (unsigned insn_uid);\n+  void emit_conversion_insns (rtx insns, rtx_insn *pos);\n+\n  private:\n   void add_insn (bitmap candidates, unsigned insn_uid);\n-  void add_to_queue (unsigned insn_uid);\n-  void mark_dual_mode_def (df_ref def);\n   void analyze_register_chain (bitmap candidates, df_ref ref);\n+  virtual void mark_dual_mode_def (df_ref def) = 0;\n+  virtual void convert_insn (rtx_insn *insn) = 0;\n+  virtual void convert_registers () = 0;\n+};\n+\n+class dimode_scalar_chain : public scalar_chain\n+{\n+ public:\n+  int compute_convert_gain ();\n+ private:\n+  void mark_dual_mode_def (df_ref def);\n   rtx replace_with_subreg (rtx x, rtx reg, rtx subreg);\n-  void emit_conversion_insns (rtx insns, rtx_insn *pos);\n   void replace_with_subreg_in_insn (rtx_insn *insn, rtx reg, rtx subreg);\n   void convert_insn (rtx_insn *insn);\n   void convert_op (rtx *op, rtx_insn *insn);\n   void convert_reg (unsigned regno);\n   void make_vector_copies (unsigned regno);\n+  void convert_registers ();\n+};\n+\n+class timode_scalar_chain : public scalar_chain\n+{\n+ public:\n+  /* Convert from TImode to V1TImode is always faster.  */\n+  int compute_convert_gain () { return 1; }\n+\n+ private:\n+  void mark_dual_mode_def (df_ref def);\n+  void convert_insn (rtx_insn *insn);\n+  /* We don't convert registers to difference size.  */\n+  void convert_registers () {}\n };\n \n unsigned scalar_chain::max_id = 0;\n@@ -2973,10 +3178,11 @@ scalar_chain::add_to_queue (unsigned insn_uid)\n   bitmap_set_bit (queue, insn_uid);\n }\n \n-/* Mark register defined by DEF as requiring conversion.  */\n+/* For DImode conversion, mark register defined by DEF as requiring\n+   conversion.  */\n \n void\n-scalar_chain::mark_dual_mode_def (df_ref def)\n+dimode_scalar_chain::mark_dual_mode_def (df_ref def)\n {\n   gcc_assert (DF_REF_REG_DEF_P (def));\n \n@@ -2991,6 +3197,14 @@ scalar_chain::mark_dual_mode_def (df_ref def)\n   bitmap_set_bit (defs_conv, DF_REF_REGNO (def));\n }\n \n+/* For TImode conversion, it is unused.  */\n+\n+void\n+timode_scalar_chain::mark_dual_mode_def (df_ref)\n+{\n+  gcc_unreachable ();\n+}\n+\n /* Check REF's chain to add new insns into a queue\n    and find registers requiring conversion.  */\n \n@@ -3117,7 +3331,7 @@ scalar_chain::build (bitmap candidates, unsigned insn_uid)\n /* Compute a gain for chain conversion.  */\n \n int\n-scalar_chain::compute_convert_gain ()\n+dimode_scalar_chain::compute_convert_gain ()\n {\n   bitmap_iterator bi;\n   unsigned insn_uid;\n@@ -3174,7 +3388,7 @@ scalar_chain::compute_convert_gain ()\n /* Replace REG in X with a V2DI subreg of NEW_REG.  */\n \n rtx\n-scalar_chain::replace_with_subreg (rtx x, rtx reg, rtx new_reg)\n+dimode_scalar_chain::replace_with_subreg (rtx x, rtx reg, rtx new_reg)\n {\n   if (x == reg)\n     return gen_rtx_SUBREG (V2DImode, new_reg, 0);\n@@ -3197,7 +3411,8 @@ scalar_chain::replace_with_subreg (rtx x, rtx reg, rtx new_reg)\n /* Replace REG in INSN with a V2DI subreg of NEW_REG.  */\n \n void\n-scalar_chain::replace_with_subreg_in_insn (rtx_insn *insn, rtx reg, rtx new_reg)\n+dimode_scalar_chain::replace_with_subreg_in_insn (rtx_insn *insn,\n+\t\t\t\t\t\t  rtx reg, rtx new_reg)\n {\n   replace_with_subreg (single_set (insn), reg, new_reg);\n }\n@@ -3227,7 +3442,7 @@ scalar_chain::emit_conversion_insns (rtx insns, rtx_insn *after)\n    and replace its uses in a chain.  */\n \n void\n-scalar_chain::make_vector_copies (unsigned regno)\n+dimode_scalar_chain::make_vector_copies (unsigned regno)\n {\n   rtx reg = regno_reg_rtx[regno];\n   rtx vreg = gen_reg_rtx (DImode);\n@@ -3298,7 +3513,7 @@ scalar_chain::make_vector_copies (unsigned regno)\n    in case register is used in not convertible insn.  */\n \n void\n-scalar_chain::convert_reg (unsigned regno)\n+dimode_scalar_chain::convert_reg (unsigned regno)\n {\n   bool scalar_copy = bitmap_bit_p (defs_conv, regno);\n   rtx reg = regno_reg_rtx[regno];\n@@ -3390,7 +3605,7 @@ scalar_chain::convert_reg (unsigned regno)\n    registers conversion.  */\n \n void\n-scalar_chain::convert_op (rtx *op, rtx_insn *insn)\n+dimode_scalar_chain::convert_op (rtx *op, rtx_insn *insn)\n {\n   *op = copy_rtx_if_shared (*op);\n \n@@ -3434,7 +3649,7 @@ scalar_chain::convert_op (rtx *op, rtx_insn *insn)\n /* Convert INSN to vector mode.  */\n \n void\n-scalar_chain::convert_insn (rtx_insn *insn)\n+dimode_scalar_chain::convert_insn (rtx_insn *insn)\n {\n   rtx def_set = single_set (insn);\n   rtx src = SET_SRC (def_set);\n@@ -3511,6 +3726,89 @@ scalar_chain::convert_insn (rtx_insn *insn)\n   df_insn_rescan (insn);\n }\n \n+/* Convert INSN from TImode to V1T1mode.  */\n+\n+void\n+timode_scalar_chain::convert_insn (rtx_insn *insn)\n+{\n+  rtx def_set = single_set (insn);\n+  rtx src = SET_SRC (def_set);\n+  rtx dst = SET_DEST (def_set);\n+\n+  switch (GET_CODE (dst))\n+    {\n+    case REG:\n+      {\n+\trtx tmp = find_reg_equal_equiv_note (insn);\n+\tif (tmp)\n+\t  PUT_MODE (XEXP (tmp, 0), V1TImode);\n+      }\n+      /* FALLTHRU */\n+    case MEM:\n+      PUT_MODE (dst, V1TImode);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  switch (GET_CODE (src))\n+    {\n+    case REG:\n+    case MEM:\n+      PUT_MODE (src, V1TImode);\n+      break;\n+\n+    case CONST_INT:\n+      switch (standard_sse_constant_p (src, TImode))\n+\t{\n+\tcase 1:\n+\t  src = CONST0_RTX (GET_MODE (dst));\n+\t  break;\n+\tcase 2:\n+\t  src = CONSTM1_RTX (GET_MODE (dst));\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      if (NONDEBUG_INSN_P (insn))\n+\t{\n+\t  rtx tmp = gen_reg_rtx (V1TImode);\n+\t  /* Since there are no instructions to store standard SSE\n+\t     constant, temporary register usage is required.  */\n+\t  emit_conversion_insns (gen_rtx_SET (dst, tmp), insn);\n+\t  dst = tmp;\n+\t}\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  SET_SRC (def_set) = src;\n+  SET_DEST (def_set) = dst;\n+\n+  /* Drop possible dead definitions.  */\n+  PATTERN (insn) = def_set;\n+\n+  INSN_CODE (insn) = -1;\n+  recog_memoized (insn);\n+  df_insn_rescan (insn);\n+}\n+\n+void\n+dimode_scalar_chain::convert_registers ()\n+{\n+  bitmap_iterator bi;\n+  unsigned id;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (defs, 0, id, bi)\n+    convert_reg (id);\n+\n+  EXECUTE_IF_AND_COMPL_IN_BITMAP (defs_conv, defs, 0, id, bi)\n+    make_vector_copies (id);\n+}\n+\n /* Convert whole chain creating required register\n    conversions and copies.  */\n \n@@ -3527,11 +3825,7 @@ scalar_chain::convert ()\n   if (dump_file)\n     fprintf (dump_file, \"Converting chain #%d...\\n\", chain_id);\n \n-  EXECUTE_IF_SET_IN_BITMAP (defs, 0, id, bi)\n-    convert_reg (id);\n-\n-  EXECUTE_IF_AND_COMPL_IN_BITMAP (defs_conv, defs, 0, id, bi)\n-    make_vector_copies (id);\n+  convert_registers ();\n \n   EXECUTE_IF_SET_IN_BITMAP (insns, 0, id, bi)\n     {\n@@ -3588,19 +3882,26 @@ convert_scalars_to_vector ()\n   while (!bitmap_empty_p (candidates))\n     {\n       unsigned uid = bitmap_first_set_bit (candidates);\n-      scalar_chain chain;\n+      scalar_chain *chain;\n+\n+      if (TARGET_64BIT)\n+\tchain = new timode_scalar_chain;\n+      else\n+\tchain = new dimode_scalar_chain;\n \n       /* Find instructions chain we want to convert to vector mode.\n \t Check all uses and definitions to estimate all required\n \t conversions.  */\n-      chain.build (candidates, uid);\n+      chain->build (candidates, uid);\n \n-      if (chain.compute_convert_gain () > 0)\n-\tconverted_insns += chain.convert ();\n+      if (chain->compute_convert_gain () > 0)\n+\tconverted_insns += chain->convert ();\n       else\n \tif (dump_file)\n \t  fprintf (dump_file, \"Chain #%d conversion is not profitable\\n\",\n-\t\t   chain.chain_id);\n+\t\t   chain->chain_id);\n+\n+      delete chain;\n     }\n \n   if (dump_file)\n@@ -3610,6 +3911,13 @@ convert_scalars_to_vector ()\n   bitmap_obstack_release (NULL);\n   df_process_deferred_rescans ();\n \n+  /* FIXME: Since the CSE pass may change dominance info, which isn't\n+     expected by the fwprop pass, call free_dominance_info to\n+     invalidate dominance info.  Otherwise, the fwprop pass may crash\n+     when dominance info is changed.  */\n+  if (TARGET_64BIT)\n+    free_dominance_info (CDI_DOMINATORS);\n+\n   /* Conversion means we may have 128bit register spills/fills\n      which require aligned stack.  */\n   if (converted_insns)\n@@ -3683,7 +3991,7 @@ class pass_stv : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return !TARGET_64BIT && TARGET_STV && TARGET_SSE2 && optimize > 1;\n+      return TARGET_STV && TARGET_SSE2 && optimize > 1;\n     }\n \n   virtual unsigned int execute (function *)\n@@ -5596,17 +5904,23 @@ ix86_option_override (void)\n \t1, PASS_POS_INSERT_AFTER\n       };\n   opt_pass *pass_stv = make_pass_stv (g);\n-  struct register_pass_info stv_info\n+  struct register_pass_info stv_info_dimode\n     = { pass_stv, \"combine\",\n \t1, PASS_POS_INSERT_AFTER\n       };\n+  /* Run the 64-bit STV pass before the CSE pass so that CONST0_RTX and\n+     CONSTM1_RTX generated by the STV pass can be CSEed.  */\n+  struct register_pass_info stv_info_timode\n+    = { pass_stv, \"cse2\",\n+\t1, PASS_POS_INSERT_BEFORE\n+      };\n \n   ix86_option_override_internal (true, &global_options, &global_options_set);\n \n \n   /* This needs to be done at start up.  It's convenient to do it here.  */\n   register_pass (&insert_vzeroupper_info);\n-  register_pass (&stv_info);\n+  register_pass (TARGET_64BIT ? &stv_info_timode : &stv_info_dimode);\n }\n \n /* Implement the TARGET_OFFLOAD_OPTIONS hook.  */"}, {"sha": "2aada78812fb568405649d320eddd706962fc1d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -1,3 +1,31 @@\n+2016-04-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/70155\n+\t* gcc.target/i386/pr55247-2.c: Updated to check movti_internal\n+\tand movv1ti_internal patterns\n+\t* gcc.target/i386/pr70155-1.c: New test.\n+\t* gcc.target/i386/pr70155-2.c: Likewise.\n+\t* gcc.target/i386/pr70155-3.c: Likewise.\n+\t* gcc.target/i386/pr70155-4.c: Likewise.\n+\t* gcc.target/i386/pr70155-5.c: Likewise.\n+\t* gcc.target/i386/pr70155-6.c: Likewise.\n+\t* gcc.target/i386/pr70155-7.c: Likewise.\n+\t* gcc.target/i386/pr70155-8.c: Likewise.\n+\t* gcc.target/i386/pr70155-9.c: Likewise.\n+\t* gcc.target/i386/pr70155-10.c: Likewise.\n+\t* gcc.target/i386/pr70155-11.c: Likewise.\n+\t* gcc.target/i386/pr70155-12.c: Likewise.\n+\t* gcc.target/i386/pr70155-13.c: Likewise.\n+\t* gcc.target/i386/pr70155-14.c: Likewise.\n+\t* gcc.target/i386/pr70155-15.c: Likewise.\n+\t* gcc.target/i386/pr70155-16.c: Likewise.\n+\t* gcc.target/i386/pr70155-17.c: Likewise.\n+\t* gcc.target/i386/pr70155-18.c: Likewise.\n+\t* gcc.target/i386/pr70155-19.c: Likewise.\n+\t* gcc.target/i386/pr70155-20.c: Likewise.\n+\t* gcc.target/i386/pr70155-21.c: Likewise.\n+\t* gcc.target/i386/pr70155-22.c: Likewise.\n+\n 2016-04-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx512vl-vmovdqa64-1.c: Replace \".{5}\" with"}, {"sha": "77901afaf23bc3decb03b05a0b24e28c5fb0b32f", "filename": "gcc/testsuite/gcc.target/i386/pr55247-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247-2.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-require-effective-target maybe_x32 } */\n-/* { dg-options \"-O2 -mx32 -mtune=generic -maddress-mode=long\" } */\n+/* { dg-options \"-O2 -mx32 -mtune=generic -maddress-mode=long -dp\" } */\n \n typedef unsigned int uint32_t;\n typedef uint32_t Elf32_Word;\n@@ -34,4 +34,5 @@ _dl_profile_fixup (struct link_map *l, Elf32_Word reloc_arg)\n   symbind32 (&sym);\n }\n \n-/* { dg-final { scan-assembler-not \"%xmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"movti_internal\" } } */"}, {"sha": "3500364bf263123092be1c6fc4789c48e9c96d2a", "filename": "gcc/testsuite/gcc.target/i386/pr70155-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-1.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a, b;\n+\n+void\n+foo (void)\n+{\n+  a = b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "2d0b91f5250b51af3b052e5df65d4fb9f1c03cdb", "filename": "gcc/testsuite/gcc.target/i386/pr70155-10.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-10.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -dp\" } */\n+\n+extern __int128 a;\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  a = x.i;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "b00aa13d48f455473a586cbe22f7545abbd7083c", "filename": "gcc/testsuite/gcc.target/i386/pr70155-11.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-11.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -dp\" } */\n+\n+extern __int128 a;\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = a;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "dd0edf0ceb15cebc625e9f714c7369e23b975d90", "filename": "gcc/testsuite/gcc.target/i386/pr70155-12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-12.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "67182904722e930658b7418874dd3700c4c3d8aa", "filename": "gcc/testsuite/gcc.target/i386/pr70155-13.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-13.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = -1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "a43de2e0467e202c3a12d7be2459dfbb37e1e61d", "filename": "gcc/testsuite/gcc.target/i386/pr70155-14.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-14.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = 2;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "e9cafccc43797d4ef801b8423bf72aaa37c6a7ea", "filename": "gcc/testsuite/gcc.target/i386/pr70155-15.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-15.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -mtune-ctrl=sse_unaligned_store_optimal -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "7750b582042e0bf81d85ccfd20bfced664983954", "filename": "gcc/testsuite/gcc.target/i386/pr70155-16.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-16.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -mtune-ctrl=sse_unaligned_load_optimal -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "a9427e6d6a2f212840d94b1e7d8b2f000835dfe0", "filename": "gcc/testsuite/gcc.target/i386/pr70155-17.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-17.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a, b, c, d, e, f;\n+\n+void\n+foo (void)\n+{\n+  a = 0;\n+  b = -1;\n+  c = 0;\n+  d = -1;\n+  e = 0;\n+  f = -1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 8 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "eb9db683ae56c04b2b95b025a7e4f84ed59cbd9b", "filename": "gcc/testsuite/gcc.target/i386/pr70155-18.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-18.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern char *src, *dst;\n+\n+char *\n+foo1 (void)\n+{\n+  return __builtin_memcpy (dst, src, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */"}, {"sha": "e2e73aabafae84d45d3de60b1006fdd97c61f17b", "filename": "gcc/testsuite/gcc.target/i386/pr70155-19.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-19.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern char *src, *dst;\n+\n+char *\n+foo1 (void)\n+{\n+  return __builtin_mempcpy (dst, src, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */"}, {"sha": "af2ddc6d2f6c529092b7b4400506749137412feb", "filename": "gcc/testsuite/gcc.target/i386/pr70155-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-2.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x, y;\n+\n+void\n+foo (void)\n+{\n+  x = y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "10b8c45e4ffebd885277717ec987f6d8b46aba3f", "filename": "gcc/testsuite/gcc.target/i386/pr70155-20.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-20.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a, b;\n+\n+__int128\n+foo (void)\n+{\n+  a = b;\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "be76e5f9614f027a662dc3af3cf9c1705bad52c2", "filename": "gcc/testsuite/gcc.target/i386/pr70155-21.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-21.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a, b, c;\n+\n+void\n+foo (void)\n+{\n+  a = b;\n+  c = a + 1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}, {"sha": "ff5cbcee73604661ad88d9d605b81659514b91d4", "filename": "gcc/testsuite/gcc.target/i386/pr70155-22.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-22.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a, b, c;\n+\n+void\n+foo (void)\n+{\n+  a = b;\n+  c++;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "01b38aaa3fc7d45e985cbbf35ff6574c8c8df5b1", "filename": "gcc/testsuite/gcc.target/i386/pr70155-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-3.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a;\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  a = x.i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "31bc0a743a45a45f8f21e116225044837a04a0a4", "filename": "gcc/testsuite/gcc.target/i386/pr70155-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-4.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a;\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = a;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "964745295245dd574495605a7d0199798bfdd437", "filename": "gcc/testsuite/gcc.target/i386/pr70155-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-5.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a;\n+\n+void\n+foo (void)\n+{\n+  a = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "7e074a73da34910ed4e26a479359b401d85cf0c8", "filename": "gcc/testsuite/gcc.target/i386/pr70155-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-6.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+extern __int128 a;\n+\n+void\n+foo (void)\n+{\n+  a = -1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "93c6fc038e624e9372227e9ba2ccb4bab2cf2514", "filename": "gcc/testsuite/gcc.target/i386/pr70155-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-7.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "f304a4e164dc98376f84e6785d6d9d2e94d120e1", "filename": "gcc/testsuite/gcc.target/i386/pr70155-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-8.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x;\n+\n+void\n+foo (void)\n+{\n+  x.i = -1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movv1ti_internal\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\*movdi_internal\" } } */"}, {"sha": "5dc3a76036b87a6e26956461d7fe141fd58d21fc", "filename": "gcc/testsuite/gcc.target/i386/pr70155-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087146caa7269d4ed40e685d19c8d66884f07a8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70155-9.c?ref=087146caa7269d4ed40e685d19c8d66884f07a8a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -dp\" } */\n+\n+struct foo\n+{\n+  __int128 i;\n+}__attribute__ ((packed));\n+\n+extern struct foo x, y;\n+\n+void\n+foo (void)\n+{\n+  x = y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movv1ti_internal\" } } */"}]}