{"sha": "772d76acb5aead98eb3c47a78363d867287d5e77", "node_id": "C_kwDOANBUbNoAKDc3MmQ3NmFjYjVhZWFkOThlYjNjNDdhNzgzNjNkODY3Mjg3ZDVlNzc", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:31:00Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:31:00Z"}, "message": "vect: Remove vec_outside/inside_cost fields\n\nThe vector costs now use a common base class instead of being\ncompletely abstract.  This means that there's no longer a\nneed to record the inside and outside costs separately.\n\ngcc/\n\t* tree-vectorizer.h (_loop_vec_info): Remove vec_outside_cost\n\tand vec_inside_cost.\n\t(vector_costs::outside_cost): New function.\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Update\n\tafter above.\n\t(vect_estimate_min_profitable_iters): Likewise.\n\t(vect_better_loop_vinfo_p): Get the inside and outside costs\n\tfrom the loop_vec_infos' vector_costs.", "tree": {"sha": "7e869ef49d54c0c480c4f5e23e192d7ac830fff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e869ef49d54c0c480c4f5e23e192d7ac830fff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/772d76acb5aead98eb3c47a78363d867287d5e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772d76acb5aead98eb3c47a78363d867287d5e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/772d76acb5aead98eb3c47a78363d867287d5e77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772d76acb5aead98eb3c47a78363d867287d5e77/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4725f62789f25b17967695203d7ee821221e2dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4725f62789f25b17967695203d7ee821221e2dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4725f62789f25b17967695203d7ee821221e2dd6"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "11ffc59bfd17e5ba498f1fb303005853150d7639", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772d76acb5aead98eb3c47a78363d867287d5e77/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772d76acb5aead98eb3c47a78363d867287d5e77/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=772d76acb5aead98eb3c47a78363d867287d5e77", "patch": "@@ -840,8 +840,6 @@ _loop_vec_info::_loop_vec_info (class loop *loop_in, vec_info_shared *shared)\n     scan_map (NULL),\n     slp_unrolling_factor (1),\n     single_scalar_iteration_cost (0),\n-    vec_outside_cost (0),\n-    vec_inside_cost (0),\n     inner_loop_cost_factor (param_vect_inner_loop_cost_factor),\n     vectorizable (false),\n     can_use_partial_vectors_p (param_vect_partial_vector_usage != 0),\n@@ -2845,10 +2843,10 @@ vect_better_loop_vinfo_p (loop_vec_info new_loop_vinfo,\n       /* Compute the costs by multiplying the inside costs with the factor and\n \t add the outside costs for a more complete picture.  The factor is the\n \t amount of times we are expecting to iterate this epilogue.  */\n-      old_cost = old_loop_vinfo->vec_inside_cost * old_factor;\n-      new_cost = new_loop_vinfo->vec_inside_cost * new_factor;\n-      old_cost += old_loop_vinfo->vec_outside_cost;\n-      new_cost += new_loop_vinfo->vec_outside_cost;\n+      old_cost = old_loop_vinfo->vector_costs->body_cost () * old_factor;\n+      new_cost = new_loop_vinfo->vector_costs->body_cost () * new_factor;\n+      old_cost += old_loop_vinfo->vector_costs->outside_cost ();\n+      new_cost += new_loop_vinfo->vector_costs->outside_cost ();\n       return new_cost < old_cost;\n     }\n \n@@ -2865,8 +2863,8 @@ vect_better_loop_vinfo_p (loop_vec_info new_loop_vinfo,\n \n   /* Check whether the (fractional) cost per scalar iteration is lower\n      or higher: new_inside_cost / new_vf vs. old_inside_cost / old_vf.  */\n-  poly_int64 rel_new = new_loop_vinfo->vec_inside_cost * old_vf;\n-  poly_int64 rel_old = old_loop_vinfo->vec_inside_cost * new_vf;\n+  poly_int64 rel_new = new_loop_vinfo->vector_costs->body_cost () * old_vf;\n+  poly_int64 rel_old = old_loop_vinfo->vector_costs->body_cost () * new_vf;\n \n   HOST_WIDE_INT est_rel_new_min\n     = estimated_poly_value (rel_new, POLY_VALUE_MIN);\n@@ -2918,8 +2916,10 @@ vect_better_loop_vinfo_p (loop_vec_info new_loop_vinfo,\n \n   /* If there's nothing to choose between the loop bodies, see whether\n      there's a difference in the prologue and epilogue costs.  */\n-  if (new_loop_vinfo->vec_outside_cost != old_loop_vinfo->vec_outside_cost)\n-    return new_loop_vinfo->vec_outside_cost < old_loop_vinfo->vec_outside_cost;\n+  auto old_outside_cost = old_loop_vinfo->vector_costs->outside_cost ();\n+  auto new_outside_cost = new_loop_vinfo->vector_costs->outside_cost ();\n+  if (new_outside_cost != old_outside_cost)\n+    return new_outside_cost < old_outside_cost;\n \n   return false;\n }\n@@ -4272,10 +4272,6 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \n   vec_outside_cost = (int)(vec_prologue_cost + vec_epilogue_cost);\n \n-  /* Stash the costs so that we can compare two loop_vec_infos.  */\n-  loop_vinfo->vec_inside_cost = vec_inside_cost;\n-  loop_vinfo->vec_outside_cost = vec_outside_cost;\n-\n   if (dump_enabled_p ())\n     {\n       dump_printf_loc (MSG_NOTE, vect_location, \"Cost model analysis: \\n\");"}, {"sha": "72eed9851074a64e2a1c5b5c1e31baa60e18cd52", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772d76acb5aead98eb3c47a78363d867287d5e77/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772d76acb5aead98eb3c47a78363d867287d5e77/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=772d76acb5aead98eb3c47a78363d867287d5e77", "patch": "@@ -724,13 +724,6 @@ typedef class _loop_vec_info : public vec_info {\n   /* Cost of a single scalar iteration.  */\n   int single_scalar_iteration_cost;\n \n-  /* The cost of the vector prologue and epilogue, including peeled\n-     iterations and set-up code.  */\n-  int vec_outside_cost;\n-\n-  /* The cost of the vector loop body.  */\n-  int vec_inside_cost;\n-\n   /* The factor used to over weight those statements in an inner loop\n      relative to the loop being vectorized.  */\n   unsigned int inner_loop_cost_factor;\n@@ -1429,6 +1422,7 @@ class vector_costs\n   unsigned int prologue_cost () const;\n   unsigned int body_cost () const;\n   unsigned int epilogue_cost () const;\n+  unsigned int outside_cost () const;\n \n protected:\n   unsigned int record_stmt_cost (stmt_vec_info, vect_cost_model_location,\n@@ -1489,6 +1483,14 @@ vector_costs::epilogue_cost () const\n   return m_costs[vect_epilogue];\n }\n \n+/* Return the cost of the prologue and epilogue code (in abstract units).  */\n+\n+inline unsigned int\n+vector_costs::outside_cost () const\n+{\n+  return prologue_cost () + epilogue_cost ();\n+}\n+\n #define VECT_MAX_COST 1000\n \n /* The maximum number of intermediate steps required in multi-step type"}]}