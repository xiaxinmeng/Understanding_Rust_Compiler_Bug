{"sha": "d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxMjMyZmIzYmQwMmY4ODYyNDc4ZmU1ZjFhN2IwZmE2NzUxYjU3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-09-13T07:42:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-09-13T07:42:55Z"}, "message": "re PR middle-end/87290 (Optimize signed x % pow2p == cst)\n\n\tPR middle-end/87290\n\t* expr.c (maybe_optimize_pow2p_mod_cmp): New function.\n\t(maybe_optimize_mod_cmp): Use it if integer_pow2p treeop1.\n\n\t* gcc.target/i386/pr87290.c: New test.\n\t* gcc.c-torture/execute/pr87290.c: New test.\n\nCo-Authored-By: Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n\nFrom-SVN: r264261", "tree": {"sha": "76ec1d59f13617c835fa7cd3c63348e8a479f11f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76ec1d59f13617c835fa7cd3c63348e8a479f11f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "392750c53e09334eb509aae4db52a4db18c413be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392750c53e09334eb509aae4db52a4db18c413be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392750c53e09334eb509aae4db52a4db18c413be"}], "stats": {"total": 210, "additions": 208, "deletions": 2}, "files": [{"sha": "a9a3d39fcc0e800f0eb71964585f5e3f5c0bd774", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "patch": "@@ -1,3 +1,10 @@\n+2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR middle-end/87290\n+\t* expr.c (maybe_optimize_pow2p_mod_cmp): New function.\n+\t(maybe_optimize_mod_cmp): Use it if integer_pow2p treeop1.\n+\n 2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/87287"}, {"sha": "cf75234f7b4c4f2e377f2003c5f0228c82031088", "filename": "gcc/expr.c", "status": "modified", "additions": 97, "deletions": 2, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "patch": "@@ -11523,6 +11523,98 @@ mod_inv (const wide_int &a, const wide_int &b)\n   return x1;\n }\n \n+/* Optimize x % C1 == C2 for signed modulo if C1 is a power of two and C2\n+   is non-zero and C3 ((1<<(prec-1)) | (C1 - 1)):\n+   for C2 > 0 to x & C3 == C2\n+   for C2 < 0 to x & C3 == (C2 & C3).  */\n+enum tree_code\n+maybe_optimize_pow2p_mod_cmp (enum tree_code code, tree *arg0, tree *arg1)\n+{\n+  gimple *stmt = get_def_for_expr (*arg0, TRUNC_MOD_EXPR);\n+  tree treeop0 = gimple_assign_rhs1 (stmt);\n+  tree treeop1 = gimple_assign_rhs2 (stmt);\n+  tree type = TREE_TYPE (*arg0);\n+  scalar_int_mode mode;\n+  if (!is_a <scalar_int_mode> (TYPE_MODE (type), &mode))\n+    return code;\n+  if (GET_MODE_BITSIZE (mode) != TYPE_PRECISION (type)\n+      || TYPE_PRECISION (type) <= 1\n+      || TYPE_UNSIGNED (type)\n+      /* Signed x % c == 0 should have been optimized into unsigned modulo\n+\t earlier.  */\n+      || integer_zerop (*arg1)\n+      /* If c is known to be non-negative, modulo will be expanded as unsigned\n+\t modulo.  */\n+      || get_range_pos_neg (treeop0) == 1)\n+    return code;\n+\n+  /* x % c == d where d < 0 && d <= -c should be always false.  */\n+  if (tree_int_cst_sgn (*arg1) == -1\n+      && -wi::to_widest (treeop1) >= wi::to_widest (*arg1))\n+    return code;\n+\n+  int prec = TYPE_PRECISION (type);\n+  wide_int w = wi::to_wide (treeop1) - 1;\n+  w |= wi::shifted_mask (0, prec - 1, true, prec);\n+  tree c3 = wide_int_to_tree (type, w);\n+  tree c4 = *arg1;\n+  if (tree_int_cst_sgn (*arg1) == -1)\n+    c4 = wide_int_to_tree (type, w & wi::to_wide (*arg1));\n+\n+  rtx op0 = expand_normal (treeop0);\n+  treeop0 = make_tree (TREE_TYPE (treeop0), op0);\n+\n+  bool speed_p = optimize_insn_for_speed_p ();\n+\n+  do_pending_stack_adjust ();\n+\n+  location_t loc = gimple_location (stmt);\n+  struct separate_ops ops;\n+  ops.code = TRUNC_MOD_EXPR;\n+  ops.location = loc;\n+  ops.type = TREE_TYPE (treeop0);\n+  ops.op0 = treeop0;\n+  ops.op1 = treeop1;\n+  ops.op2 = NULL_TREE;\n+  start_sequence ();\n+  rtx mor = expand_expr_real_2 (&ops, NULL_RTX, TYPE_MODE (ops.type),\n+\t\t\t\tEXPAND_NORMAL);\n+  rtx_insn *moinsns = get_insns ();\n+  end_sequence ();\n+\n+  unsigned mocost = seq_cost (moinsns, speed_p);\n+  mocost += rtx_cost (mor, mode, EQ, 0, speed_p);\n+  mocost += rtx_cost (expand_normal (*arg1), mode, EQ, 1, speed_p);\n+\n+  ops.code = BIT_AND_EXPR;\n+  ops.location = loc;\n+  ops.type = TREE_TYPE (treeop0);\n+  ops.op0 = treeop0;\n+  ops.op1 = c3;\n+  ops.op2 = NULL_TREE;\n+  start_sequence ();\n+  rtx mur = expand_expr_real_2 (&ops, NULL_RTX, TYPE_MODE (ops.type),\n+\t\t\t\tEXPAND_NORMAL);\n+  rtx_insn *muinsns = get_insns ();\n+  end_sequence ();\n+\n+  unsigned mucost = seq_cost (muinsns, speed_p);\n+  mucost += rtx_cost (mur, mode, EQ, 0, speed_p);\n+  mucost += rtx_cost (expand_normal (c4), mode, EQ, 1, speed_p);\n+\n+  if (mocost <= mucost)\n+    {\n+      emit_insn (moinsns);\n+      *arg0 = make_tree (TREE_TYPE (*arg0), mor);\n+      return code;\n+    }\n+\n+  emit_insn (muinsns);\n+  *arg0 = make_tree (TREE_TYPE (*arg0), mur);\n+  *arg1 = c4;\n+  return code;\n+}\n+\n /* Attempt to optimize unsigned (X % C1) == C2 (or (X % C1) != C2).\n    If C1 is odd to:\n    (X - C2) * C3 <= C4 (or >), where\n@@ -11561,8 +11653,6 @@ maybe_optimize_mod_cmp (enum tree_code code, tree *arg0, tree *arg1)\n   tree treeop1 = gimple_assign_rhs2 (stmt);\n   if (TREE_CODE (treeop0) != SSA_NAME\n       || TREE_CODE (treeop1) != INTEGER_CST\n-      /* x % pow2 is handled right already.  */\n-      || integer_pow2p (treeop1)\n       /* Don't optimize the undefined behavior case x % 0;\n \t x % 1 should have been optimized into zero, punt if\n \t it makes it here for whatever reason;\n@@ -11572,6 +11662,11 @@ maybe_optimize_mod_cmp (enum tree_code code, tree *arg0, tree *arg1)\n       || tree_int_cst_le (treeop1, *arg1))\n     return code;\n \n+  /* Unsigned x % pow2 is handled right already, for signed\n+     modulo handle it in maybe_optimize_pow2p_mod_cmp.  */\n+  if (integer_pow2p (treeop1))\n+    return maybe_optimize_pow2p_mod_cmp (code, arg0, arg1);\n+\n   tree type = TREE_TYPE (*arg0);\n   scalar_int_mode mode;\n   if (!is_a <scalar_int_mode> (TYPE_MODE (type), &mode))"}, {"sha": "1e5f8827ac9c5c89288448f41b23787881cf9cf1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "patch": "@@ -1,3 +1,10 @@\n+2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR middle-end/87290\n+\t* gcc.target/i386/pr87290.c: New test.\n+\t* gcc.c-torture/execute/pr87290.c: New test.\n+\n 2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/87287"}, {"sha": "31bbdd69b6eb5581d04d75f1222d43c42bb09981", "filename": "gcc/testsuite/gcc.c-torture/execute/pr87290.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr87290.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr87290.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr87290.c?ref=d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "patch": "@@ -0,0 +1,63 @@\n+/* PR middle-end/87290 */\n+\n+int c;\n+\n+__attribute__((noipa)) void\n+f0 (void)\n+{\n+  c++;\n+}\n+\n+__attribute__((noipa)) int\n+f1 (int x)\n+{\n+  return x % 16 == 13;\n+}\n+\n+__attribute__((noipa)) int\n+f2 (int x)\n+{\n+  return x % 16 == -13;\n+}\n+\n+__attribute__((noipa)) void\n+f3 (int x)\n+{\n+  if (x % 16 == 13)\n+    f0 ();\n+}\n+\n+__attribute__((noipa)) void\n+f4 (int x)\n+{\n+  if (x % 16 == -13)\n+    f0 ();\n+}\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  for (i = -30; i < 30; i++)\n+    {\n+      if (f1 (13 + i * 16) != (i >= 0) || f2 (-13 + i * 16) != (i <= 0))\n+\t__builtin_abort ();\n+      f3 (13 + i * 16);\n+      if (c != (i >= 0))\n+\t__builtin_abort ();\n+      f4 (-13 + i * 16);\n+      if (c != 1 + (i == 0))\n+\t__builtin_abort ();\n+      for (j = 1; j < 16; j++)\n+\t{\n+\t  if (f1 (13 + i * 16 + j) || f2 (-13 + i * 16 + j))\n+\t    __builtin_abort ();\n+\t  f3 (13 + i * 16 + j);\n+\t  f4 (-13 + i * 16 + j);\n+\t}\n+      if (c != 1 + (i == 0))\n+\t__builtin_abort ();\n+      c = 0;\n+    }\n+  return 0;\n+}"}, {"sha": "c61fe818fd4a941e338f50812582320ef1454e86", "filename": "gcc/testsuite/gcc.target/i386/pr87290.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87290.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51232fb3bd02f8862478fe5f1a7b0fa6751b573/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87290.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87290.c?ref=d51232fb3bd02f8862478fe5f1a7b0fa6751b573", "patch": "@@ -0,0 +1,34 @@\n+/* PR middle-end/87290 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"and\\[^\\n\\r]*-2147483633\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\t\\\\\\$13,\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\t\\\\\\$-2147483645,\" 2 } } */\n+\n+void f0 (void);\n+\n+int\n+f1 (int x)\n+{\n+  return x % 16 == 13;\n+}\n+\n+int\n+f2 (int x)\n+{\n+  return x % 16 == -13;\n+}\n+\n+void\n+f3 (int x)\n+{\n+  if (x % 16 == 13)\n+    f0 ();\n+}\n+\n+void\n+f4 (int x)\n+{\n+  if (x % 16 == -13)\n+    f0 ();\n+}"}]}