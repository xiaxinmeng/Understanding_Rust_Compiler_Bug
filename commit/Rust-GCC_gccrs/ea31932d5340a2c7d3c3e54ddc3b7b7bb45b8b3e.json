{"sha": "ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzMTkzMmQ1MzQwYTJjN2QzYzNlNTRkZGMzYjdiN2JiNDViOGIzZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-05T10:24:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-05T10:24:08Z"}, "message": "[multiple changes]\n\n2008-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/ratio: Prefer __INTMAX_MAX__ to INTMAX_MAX (INTMAX_MIN).\n\n2008-07-05  Chris Fairles  <chris.fairles@gmail.com>\n\n        * include/std/ratio: Documentation for std::ratio class. Add conditions \n        to ratio_less to prevent overflow.\n        * testsuite/20_util/ratio/comparisons/comp2.cc: New.\n        * testsuite/20_util/ratio/cons/cons_overflow.cc: Update dg-error line\n        numbers.\n\nFrom-SVN: r137504", "tree": {"sha": "54b98c51fa82d085b2a0df4d28045dbfdb75dd14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b98c51fa82d085b2a0df4d28045dbfdb75dd14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/comments", "author": null, "committer": null, "parents": [{"sha": "752929c698155492e4a7ff954bda3bce544bd46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752929c698155492e4a7ff954bda3bce544bd46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752929c698155492e4a7ff954bda3bce544bd46e"}], "stats": {"total": 121, "additions": 110, "deletions": 11}, "files": [{"sha": "55b93899b0d48a4514c66d02602e0d6a0832a95d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "patch": "@@ -1,3 +1,15 @@\n+2008-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/ratio: Prefer __INTMAX_MAX__ to INTMAX_MAX (INTMAX_MIN).\n+\n+2008-07-05  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * include/std/ratio: Documentation for std::ratio class. Add conditions \n+        to ratio_less to prevent overflow.\n+        * testsuite/20_util/ratio/comparisons/comp2.cc: New.\n+        * testsuite/20_util/ratio/cons/cons_overflow.cc: Update dg-error line\n+        numbers.\n+\n 2008-07-04  Chris Fairles  <chris.fairles@gmail.com>\n \n \t* include/std/ratio: New, per N2661."}, {"sha": "9980571f160f1e8df799d6eb957b2f76f9d49e84", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "patch": "@@ -96,10 +96,10 @@ namespace std\n         \"overflow in multiplication\");\n       static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1), \n         \"overflow in multiplication\");\n-      static_assert(__b0 * __a0 <= INTMAX_MAX, \n+      static_assert(__b0 * __a0 <= __INTMAX_MAX__, \n         \"overflow in multiplication\");\n       static_assert((__a0 * __b1 + __b0 * __a1) * __c <= \n-        INTMAX_MAX -  __b0 * __a0, \"overflow in multiplication\");\n+        __INTMAX_MAX__ -  __b0 * __a0, \"overflow in multiplication\");\n \n     public:\n       static const intmax_t value = _Pn * _Qn;\n@@ -108,12 +108,12 @@ namespace std\n   // Helpers for __safe_add\n   template<intmax_t _Pn, intmax_t _Qn, bool>\n     struct __add_overflow_check_impl\n-    : integral_constant<bool, (_Pn <= INTMAX_MAX - _Qn)>\n+    : integral_constant<bool, (_Pn <= __INTMAX_MAX__ - _Qn)>\n     { };\n \n   template<intmax_t _Pn, intmax_t _Qn>\n     struct __add_overflow_check_impl<_Pn, _Qn, false>\n-    : integral_constant<bool, (_Pn >= -INTMAX_MAX - _Qn)>\n+    : integral_constant<bool, (_Pn >= -__INTMAX_MAX__ - _Qn)>\n     { };\n \n   template<intmax_t _Pn, intmax_t _Qn>\n@@ -130,12 +130,27 @@ namespace std\n       static const intmax_t value = _Pn + _Qn;\n     };\n \n+  /**\n+   *  @brief Provides compile-time rational arithmetic.\n+   * \n+   *  This class template represents any finite rational number with a\n+   *  numerator and denominator representable by compile-time constants of\n+   *  type intmax_t. The ratio is simplified when instantiated.\n+   *\n+   *  For example:\n+   *  @code\n+   *    std::ratio<7,-21>::num == -1;\n+   *    std::ratio<7,-21>::den == 3;\n+   *  @endcode\n+   *  \n+  */\n   template<intmax_t _Num, intmax_t _Den = 1>\n     struct ratio\n     {\n       static_assert(_Den != 0, \"denominator cannot be zero\");\n-      static_assert(_Num > INTMAX_MIN && _Den > INTMAX_MIN, \"out of range\");\n-      \n+      static_assert(_Num >= -__INTMAX_MAX__ && _Den >= -__INTMAX_MAX__,\n+\t\t    \"out of range\");\n+\n       // Note: sign(N) * abs(N) == N\n       static const intmax_t num =\n         _Num * __static_sign<_Den>::value / __static_gcd<_Num, _Den>::value;\n@@ -211,10 +226,26 @@ namespace std\n     { };\n   \n   template<typename _R1, typename _R2>\n-    struct ratio_less\n+    struct __ratio_less_simple_impl\n     : integral_constant<bool,\n-        (__safe_multiply<_R1::num, _R2::den>::value < \n-         __safe_multiply<_R2::num, _R1::den>::value)>        \n+\t\t\t(__safe_multiply<_R1::num, _R2::den>::value\n+\t\t\t < __safe_multiply<_R2::num, _R1::den>::value)>\n+    { };\n+\n+  // If the denominators are equal or the signs differ, we can just compare\n+  // numerators, otherwise fallback to the simple cross-multiply method.\n+  template<typename _R1, typename _R2>\n+    struct __ratio_less_impl\n+    : conditional<(_R1::den == _R2::den\n+\t\t   || (__static_sign<_R1::num>::value\n+\t\t       != __static_sign<_R2::num>::value)),\n+      integral_constant<bool, (_R1::num < _R2::num)>,\n+      __ratio_less_simple_impl<_R1, _R2>>::type\n+    { };\n+\n+  template<typename _R1, typename _R2>\n+    struct ratio_less\n+    : __ratio_less_impl<_R1, _R2>::type\n     { };\n     \n   template<typename _R1, typename _R2>"}, {"sha": "1d378d528802951f88ae59b6d730a6e28d459679", "filename": "libstdc++-v3/testsuite/20_util/ratio/comparisons/comp2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp2.cc?ref=ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+static const std::intmax_t M = INTMAX_MAX;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+ \n+  //no overflow with same denominator\n+  VERIFY(( std::ratio_less<std::ratio<M - 2, M>,\n+           std::ratio<M - 1, M>>::value == 1 ) );\n+  \n+  VERIFY(( std::ratio_less<std::ratio<M - 1, M>,\n+           std::ratio<M - 2, M>>::value == 0 ) );\n+           \n+  //no overflow if signs differ\n+  VERIFY(( std::ratio_less<std::ratio<-M, M - 1>,\n+           std::ratio<M - 1, M - 2>>::value == 1 ) );\n+  \n+  VERIFY(( std::ratio_less<std::ratio<M - 1, M - 2>,\n+           std::ratio<-M, M - 1>>::value == 0 ) );\n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+int main()\n+{\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  test01();\n+#endif\n+  return 0;\n+}"}, {"sha": "05daee5ea32b756f00ca5ec4348d123be1bfb005", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc?ref=ea31932d5340a2c7d3c3e54ddc3b7b7bb45b8b3e", "patch": "@@ -51,8 +51,8 @@ test04()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 48 }\n-// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 136 }\n-// { dg-error \"out of range\" \"\" { target *-*-* } 137 }\n+// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 150 }\n+// { dg-error \"out of range\" \"\" { target *-*-* } 151 }\n // { dg-excess-errors \"In instantiation of\" }\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1"}]}