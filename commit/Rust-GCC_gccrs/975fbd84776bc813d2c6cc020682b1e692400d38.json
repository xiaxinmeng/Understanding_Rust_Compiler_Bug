{"sha": "975fbd84776bc813d2c6cc020682b1e692400d38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1ZmJkODQ3NzZiYzgxM2QyYzZjYzAyMDY4MmIxZTY5MjQwMGQzOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-01T01:29:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-01T01:29:45Z"}, "message": "compiler: Don't crash with self-referential types.\n\nFixes issue 6637.\n\nFrom-SVN: r218199", "tree": {"sha": "85d3bba7ae43598fe57d332fbb7e5e0a3f012a12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85d3bba7ae43598fe57d332fbb7e5e0a3f012a12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/975fbd84776bc813d2c6cc020682b1e692400d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975fbd84776bc813d2c6cc020682b1e692400d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975fbd84776bc813d2c6cc020682b1e692400d38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975fbd84776bc813d2c6cc020682b1e692400d38/comments", "author": null, "committer": null, "parents": [{"sha": "4368bc458974b45ad284780fef222242046ad9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4368bc458974b45ad284780fef222242046ad9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4368bc458974b45ad284780fef222242046ad9f9"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "024b2c4b2ee0df932a535d3597fa080ee0a87821", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=975fbd84776bc813d2c6cc020682b1e692400d38", "patch": "@@ -8735,7 +8735,11 @@ Call_expression::do_flatten(Gogo* gogo, Named_object*,\n   // Add temporary variables for all arguments that require type\n   // conversion.\n   Function_type* fntype = this->get_function_type();\n-  go_assert(fntype != NULL);\n+  if (fntype == NULL)\n+    {\n+      go_assert(saw_errors());\n+      return this;\n+    }\n   if (this->args_ != NULL && !this->args_->empty()\n       && fntype->parameters() != NULL && !fntype->parameters()->empty())\n     {\n@@ -10901,9 +10905,8 @@ Interface_field_reference_expression::do_traverse(Traverse* traverse)\n // interface.  So introduce a temporary variable if necessary.\n \n Expression*\n-Interface_field_reference_expression::do_lower(Gogo*, Named_object*,\n-\t\t\t\t\t       Statement_inserter* inserter,\n-\t\t\t\t\t       int)\n+Interface_field_reference_expression::do_flatten(Gogo*, Named_object*,\n+\t\t\t\t\t\t Statement_inserter* inserter)\n {\n   if (!this->expr_->is_variable())\n     {"}, {"sha": "d96df28bbc13e40a75f543107d212545fd770258", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=975fbd84776bc813d2c6cc020682b1e692400d38", "patch": "@@ -2397,7 +2397,7 @@ class Interface_field_reference_expression : public Expression\n   do_traverse(Traverse* traverse);\n \n   Expression*\n-  do_lower(Gogo*, Named_object*, Statement_inserter*, int);\n+  do_flatten(Gogo*, Named_object*, Statement_inserter*);\n \n   Type*\n   do_type();"}, {"sha": "7035524033a4b465530aaa855ba3309d16f21a42", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=975fbd84776bc813d2c6cc020682b1e692400d38", "patch": "@@ -6361,7 +6361,13 @@ Array_type::do_reflection(Gogo* gogo, std::string* ret) const\n       unsigned long val;\n       if (!this->length_->numeric_constant_value(&nc)\n \t  || nc.to_unsigned_long(&val) != Numeric_constant::NC_UL_VALID)\n-\terror_at(this->length_->location(), \"invalid array length\");\n+\t{\n+\t  if (!this->issued_length_error_)\n+\t    {\n+\t      error_at(this->length_->location(), \"invalid array length\");\n+\t      this->issued_length_error_ = true;\n+\t    }\n+\t}\n       else\n \t{\n \t  char buf[50];\n@@ -6488,7 +6494,13 @@ Array_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n       unsigned long val;\n       if (!this->length_->numeric_constant_value(&nc)\n \t  || nc.to_unsigned_long(&val) != Numeric_constant::NC_UL_VALID)\n-\terror_at(this->length_->location(), \"invalid array length\");\n+\t{\n+\t  if (!this->issued_length_error_)\n+\t    {\n+\t      error_at(this->length_->location(), \"invalid array length\");\n+\t      this->issued_length_error_ = true;\n+\t    }\n+\t}\n       else\n \t{\n \t  char buf[50];\n@@ -10221,7 +10233,12 @@ Type*\n Forward_declaration_type::real_type()\n {\n   if (this->is_defined())\n-    return this->named_object()->type_value();\n+    {\n+      Named_type* nt = this->named_object()->type_value();\n+      if (!nt->is_valid())\n+\treturn Type::make_error_type();\n+      return this->named_object()->type_value();\n+    }\n   else\n     {\n       this->warn();\n@@ -10233,7 +10250,12 @@ const Type*\n Forward_declaration_type::real_type() const\n {\n   if (this->is_defined())\n-    return this->named_object()->type_value();\n+    {\n+      const Named_type* nt = this->named_object()->type_value();\n+      if (!nt->is_valid())\n+\treturn Type::make_error_type();\n+      return this->named_object()->type_value();\n+    }\n   else\n     {\n       this->warn();"}, {"sha": "4f000b12717146b1de6f43bb2f7e20f2376deee0", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975fbd84776bc813d2c6cc020682b1e692400d38/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=975fbd84776bc813d2c6cc020682b1e692400d38", "patch": "@@ -2360,7 +2360,8 @@ class Array_type : public Type\n  public:\n   Array_type(Type* element_type, Expression* length)\n     : Type(TYPE_ARRAY),\n-      element_type_(element_type), length_(length), blength_(NULL)\n+      element_type_(element_type), length_(length), blength_(NULL),\n+      issued_length_error_(false)\n   { }\n \n   // Return the element type.\n@@ -2479,6 +2480,9 @@ class Array_type : public Type\n   // The backend representation of the length.\n   // We only want to compute this once.\n   Bexpression* blength_;\n+  // Whether or not an invalid length error has been issued for this type,\n+  // to avoid knock-on errors.\n+  mutable bool issued_length_error_;\n };\n \n // The type of a map.\n@@ -2926,6 +2930,11 @@ class Named_type : public Type\n   bool\n   is_alias() const;\n \n+  // Whether this named type is valid.  A recursive named type is invalid.\n+  bool\n+  is_valid() const\n+  { return !this->is_error_; }\n+\n   // Whether this is a circular type: a pointer or function type that\n   // refers to itself, which is not possible in C.\n   bool"}]}