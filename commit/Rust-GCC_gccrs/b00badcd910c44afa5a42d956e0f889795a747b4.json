{"sha": "b00badcd910c44afa5a42d956e0f889795a747b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwYmFkY2Q5MTBjNDRhZmE1YTQyZDk1NmUwZjg4OTc5NWE3NDdiNA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-08-01T15:19:01Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-08-01T15:19:01Z"}, "message": "ffi.c (ffi_prep_args64): Modify for changed gcc structure passing.\n\n\t* src/powerpc/ffi.c (ffi_prep_args64): Modify for changed gcc\n\tstructure passing.\n\t(ffi_closure_helper_LINUX64): Likewise.\n\t* src/powerpc/linux64.S: Remove code writing to parm save area.\n\t* src/powerpc/linux64_closure.S (ffi_closure_LINUX64): Use return\n\taddress in lr from ffi_closure_helper_LINUX64 call to calculate\n\ttable address.  Optimize function tail.\n\nFrom-SVN: r70050", "tree": {"sha": "37e36dba4ae31ad926ac9e8e71f52fdcd2ba3ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e36dba4ae31ad926ac9e8e71f52fdcd2ba3ace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b00badcd910c44afa5a42d956e0f889795a747b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00badcd910c44afa5a42d956e0f889795a747b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00badcd910c44afa5a42d956e0f889795a747b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00badcd910c44afa5a42d956e0f889795a747b4/comments", "author": null, "committer": null, "parents": [{"sha": "2f18d7a1a8277ecc9538214375e3aad461b98b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f18d7a1a8277ecc9538214375e3aad461b98b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f18d7a1a8277ecc9538214375e3aad461b98b2c"}], "stats": {"total": 176, "additions": 81, "deletions": 95}, "files": [{"sha": "cf2adc0deb40e9828822f09e47283587fabfd543", "filename": "libffi/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=b00badcd910c44afa5a42d956e0f889795a747b4", "patch": "@@ -1,3 +1,13 @@\n+2003-08-02  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* src/powerpc/ffi.c (ffi_prep_args64): Modify for changed gcc\n+\tstructure passing.\n+\t(ffi_closure_helper_LINUX64): Likewise.\n+\t* src/powerpc/linux64.S: Remove code writing to parm save area.\n+\t* src/powerpc/linux64_closure.S (ffi_closure_LINUX64): Use return\n+\taddress in lr from ffi_closure_helper_LINUX64 call to calculate\n+\ttable address.  Optimize function tail.\n+\n 2003-07-28  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* src/sparc/ffi.c: Handle all floating point registers."}, {"sha": "30ab7efb0c60b29f7dc2a3808ac3ac9d87ffb876", "filename": "libffi/src/powerpc/ffi.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fffi.c?ref=b00badcd910c44afa5a42d956e0f889795a747b4", "patch": "@@ -288,7 +288,7 @@ enum { ASM_NEEDS_REGISTERS64 = 4 };\n    |--------------------------------------------| |\n    |   TOC save area\t\t\t8\t| |\n    |--------------------------------------------| |\tstack\t|\n-   |   Linker doubleword\t\t8\t| |\tgorws\t|\n+   |   Linker doubleword\t\t8\t| |\tgrows\t|\n    |--------------------------------------------| |\tdown\tV\n    |   Compiler doubleword\t\t8\t| |\n    |--------------------------------------------| |\tlower addresses\n@@ -384,15 +384,14 @@ void hidden ffi_prep_args64(extended_cif *ecif, unsigned long *const stack)\n \t    }\n \t  else\n \t    {\n-\t      /* Structures with 1, 2 and 4 byte sizes are passed left-padded\n-\t\t if they are in the first 8 arguments.  */\n-\t      if (next_arg >= gpr_base\n-\t\t  && (*ptr)->size < 8\n-\t\t  && ((*ptr)->size & ~((*ptr)->size - 1)) == (*ptr)->size)\n-\t\tmemcpy((char *) next_arg + 8 - (*ptr)->size,\n-\t\t       (char *) *p_argv, (*ptr)->size);\n-\t      else\n-\t\tmemcpy((char *) next_arg, (char *) *p_argv, (*ptr)->size);\n+\t      char *where = (char *) next_arg;\n+\n+\t      /* Structures with size less than eight bytes are passed\n+\t\t left-padded.  */\n+\t      if ((*ptr)->size < 8)\n+\t\twhere += 8 - (*ptr)->size;\n+\n+\t      memcpy (where, (char *) *p_argv, (*ptr)->size);\n \t      next_arg += words;\n \t      if (next_arg == gpr_end)\n \t\tnext_arg = rest;\n@@ -1027,12 +1026,9 @@ ffi_closure_helper_LINUX64 (ffi_closure* closure, void * rvalue,\n #if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n \tcase FFI_TYPE_LONGDOUBLE:\n #endif\n-\t  /* Structures with 1, 2 and 4 byte sizes are passed left-padded\n-\t     if they are in the first 8 arguments.  */\n-\t  if (ng < NUM_GPR_ARG_REGISTERS64\n-\t      && arg_types[i]->size < 8\n-\t      && ((arg_types[i]->size & ~(arg_types[i]->size - 1))\n-\t\t  == arg_types[i]->size))\n+\t  /* Structures with size less than eight bytes are passed\n+\t     left-padded.  */\n+\t  if (arg_types[i]->size < 8)\n \t    avalue[i] = (char *) pst + 8 - arg_types[i]->size;\n \t  else\n \t    avalue[i] = pst;"}, {"sha": "d8af13b108a93a03820d1dee84d6c946ecadea0e", "filename": "libffi/src/powerpc/linux64.S", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2Fsrc%2Fpowerpc%2Flinux64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2Fsrc%2Fpowerpc%2Flinux64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Flinux64.S?ref=b00badcd910c44afa5a42d956e0f889795a747b4", "patch": "@@ -95,17 +95,6 @@ ffi_call_LINUX64:\n \tlfd\t%f12, -32-(10*8)(%r28)\n \tlfd\t%f13, -32-(9*8)(%r28)\n 2:\n-\t/* FIXME: Shouldn't gcc use %r3-%r10 in this case\n-\t   and not the parm save area?  */\n-\tstd\t%r3, 48+(0*8)(%r1)\n-\tstd\t%r4, 48+(1*8)(%r1)\n-\tstd\t%r5, 48+(2*8)(%r1)\n-\tstd\t%r6, 48+(3*8)(%r1)\n-\tstd\t%r7, 48+(4*8)(%r1)\n-\tstd\t%r8, 48+(5*8)(%r1)\n-\tstd\t%r9, 48+(6*8)(%r1)\n-\tstd\t%r10, 48+(7*8)(%r1)\n-\t/* end of FIXME.  */\n \n \t/* Make the call.  */\n \tbctrl"}, {"sha": "6cad16ad77df5114dc8181a12d817ad8ef356048", "filename": "libffi/src/powerpc/linux64_closure.S", "status": "modified", "additions": 59, "deletions": 68, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00badcd910c44afa5a42d956e0f889795a747b4/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S?ref=b00badcd910c44afa5a42d956e0f889795a747b4", "patch": "@@ -64,17 +64,18 @@ ffi_closure_LINUX64:\n \n \t# make the call\n \tbl .ffi_closure_helper_LINUX64\n+.Lret:\n \n \t# now r3 contains the return type\n \t# so use it to look up in a table\n \t# so we know how to deal with each type\n \n \t# look up the proper starting point in table \n \t# by using return type as offset\n-\taddi %r5, %r1, 112\t# get pointer to results area\n-\tbl .Lget_ret_type0_addr # get pointer to .Lret_type0 into LR\n-\tmflr %r4\t\t# move to r4\n+\tmflr %r4\t\t# move address of .Lret to r4\n \tsldi %r3, %r3, 4\t# now multiply return type by 16\n+\taddi %r4, %r4, .Lret_type0 - .Lret\n+\tld %r0, 224+16(%r1)\n \tadd %r3, %r3, %r4\t# add contents of table to table address\n \tmtctr %r3\n \tbctr\t\t\t# jump to it\n@@ -84,94 +85,84 @@ ffi_closure_LINUX64:\n # first.\n \t.align 4\n \n-\tnop\n-\tnop\n-\tnop\n-.Lget_ret_type0_addr:\n-\tblrl\n-\n .Lret_type0:\n # case FFI_TYPE_VOID\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n \tnop\n # case FFI_TYPE_INT\n-\tlwa %r3, 4(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlwa %r3, 112+4(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_FLOAT\n-\tlfs %f1, 4(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlfs %f1, 112+4(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_DOUBLE\n-\tlfd %f1, 0(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlfd %f1, 112+0(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_LONGDOUBLE\n-\tlfd %f1, 0(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlfd %f1, 112+0(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_UINT8\n-\tlbz %r3, 7(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlbz %r3, 112+7(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_SINT8\n-\tlbz %r3, 7(%r5)\n+\tlbz %r3, 112+7(%r1)\n \textsb %r3,%r3\n+\tmtlr %r0\n \tb .Lfinish\n-\tnop\n # case FFI_TYPE_UINT16\n-\tlhz %r3, 6(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlhz %r3, 112+6(%r1)\n+\tmtlr %r0\n+.Lfinish:\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_SINT16\n-\tlha %r3, 6(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlha %r3, 112+6(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_UINT32\n-\tlwz %r3, 4(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlwz %r3, 112+4(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_SINT32\n-\tlwa %r3, 4(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tlwa %r3, 112+4(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_UINT64\n-\tld %r3, 0(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tld %r3, 112+0(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_SINT64\n-\tld %r3, 0(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tld %r3, 112+0(%r1)\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n # case FFI_TYPE_STRUCT\n-\tb .Lfinish\n-\tnop\n-\tnop\n+\tmtlr %r0\n+\taddi %r1, %r1, 224\n+\tblr\n \tnop\n # case FFI_TYPE_POINTER\n-\tld %r3, 0(%r5)\n-\tb .Lfinish\n-\tnop\n-\tnop\n-# esac\n-.Lfinish:\n-\tld %r0, 224+16(%r1)\n+\tld %r3, 112+0(%r1)\n \tmtlr %r0\n \taddi %r1, %r1, 224\n \tblr\n+# esac\n .LFE1:\n \t.long\t0\n \t.byte\t0,12,0,1,128,0,0,0"}]}