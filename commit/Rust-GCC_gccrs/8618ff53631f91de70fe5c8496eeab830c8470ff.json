{"sha": "8618ff53631f91de70fe5c8496eeab830c8470ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxOGZmNTM2MzFmOTFkZTcwZmU1Yzg0OTZlZWFiODMwYzg0NzBmZg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-10-29T02:13:03Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-10-29T02:13:03Z"}, "message": "tree-into-ssa.c (rewrite_virtual_phi_arguments): New function.\n\n2004-10-28  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-into-ssa.c (rewrite_virtual_phi_arguments): New function.\n\t(rewrite_blocks): Modify argument, and use it to decide which\n\tfunction to call.\n\t(rewrite_def_def_chains): Call rewrite_blocks with true here.\n\t(rewrite_into_ssa): and call it with false here.\n\nFrom-SVN: r89802", "tree": {"sha": "e6be8850c8565c316d2a545e3074c554060f1985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6be8850c8565c316d2a545e3074c554060f1985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8618ff53631f91de70fe5c8496eeab830c8470ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8618ff53631f91de70fe5c8496eeab830c8470ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8618ff53631f91de70fe5c8496eeab830c8470ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8618ff53631f91de70fe5c8496eeab830c8470ff/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6af9a152749a805593d48c347ac9e0f5cff1f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6af9a152749a805593d48c347ac9e0f5cff1f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6af9a152749a805593d48c347ac9e0f5cff1f5e"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "da0f46531b9fa89e5a28424621d843a9dacffdef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8618ff53631f91de70fe5c8496eeab830c8470ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8618ff53631f91de70fe5c8496eeab830c8470ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8618ff53631f91de70fe5c8496eeab830c8470ff", "patch": "@@ -1,3 +1,11 @@\n+2004-10-28  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-into-ssa.c (rewrite_virtual_phi_arguments): New function.\n+\t(rewrite_blocks): Modify argument, and use it to decide which\n+\tfunction to call.\n+\t(rewrite_def_def_chains): Call rewrite_blocks with true here.\n+\t(rewrite_into_ssa): and call it with false here.\n+\t\n 2004-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (add_phi_arg): Turn an \"if\" that always"}, {"sha": "e5dc30b33ab5e56ddae80ff92e4585debac704fc", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8618ff53631f91de70fe5c8496eeab830c8470ff/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8618ff53631f91de70fe5c8496eeab830c8470ff/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=8618ff53631f91de70fe5c8496eeab830c8470ff", "patch": "@@ -799,6 +799,42 @@ rewrite_add_phi_arguments (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n     }\n }\n \n+/*  Rewrite existing virtual PHI arguments so that they have the correct\n+    reaching definitions.  BB is the basic block whose successors contain the\n+    phi nodes we want to add arguments for.  */\n+\n+static void\n+rewrite_virtual_phi_arguments (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED, \n+\t\t\t       basic_block bb)\n+{\n+  edge e;\n+  use_operand_p op;\n+  edge_iterator ei;\n+\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    {\n+      tree phi;\n+\n+      if (e->dest == EXIT_BLOCK_PTR)\n+\tcontinue;\n+\n+      for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+\t{\n+\t  tree result = PHI_RESULT (phi);\n+\t  op = PHI_ARG_DEF_PTR_FROM_EDGE (phi, e);\n+\t  \n+\t  if (is_gimple_reg (result) \n+\t      || !bitmap_bit_p (vars_to_rename, \n+\t\t\t\tvar_ann (SSA_NAME_VAR (result))->uid))\n+\t    continue;\n+\n+\t  SET_USE (op, get_reaching_def (SSA_NAME_VAR (result)));\n+\t  if (e->flags & EDGE_ABNORMAL)\n+\t    SSA_NAME_OCCURS_IN_ABNORMAL_PHI (USE_FROM_PTR (op)) = 1;\n+\t}\n+    }\n+}\n+\n /* Ditto, for ssa name rewriting.  */\n \n static void\n@@ -821,9 +857,9 @@ ssa_rewrite_phi_arguments (struct dom_walk_data *walk_data, basic_block bb)\n \t  op = PHI_ARG_DEF_PTR_FROM_EDGE (phi, e);\n \t  if (TREE_CODE (USE_FROM_PTR (op)) != SSA_NAME)\n \t    continue;\n-\n+\t  \n \t  if (!TEST_BIT (names_to_rename, SSA_NAME_VERSION (USE_FROM_PTR (op))))\n-\t    continue;\n+\t    continue; \n \n \t  SET_USE (op, get_reaching_def (USE_FROM_PTR (op)));\n \t  if (e->flags & EDGE_ABNORMAL)\n@@ -1383,14 +1419,16 @@ invalidate_name_tags (bitmap vars_to_rename)\n }\n \n /* Rewrite the actual blocks, statements, and phi arguments, to be in SSA\n-   form.  ADD_PHI_ARGS is true if we should be adding arguments to phi nodes,\n-   because they may have been just inserted.  */\n+   form.  FIX_VIRTUAL_PHIS is true if we should only be fixing up virtual\n+   phi arguments, instead of adding new phi arguments for just added phi\n+   nodes.  */\n+\n \n static void\n-rewrite_blocks (bool add_phi_args)\n+rewrite_blocks (bool fix_virtual_phis)\n {\n   struct dom_walk_data walk_data;\n-\n+  \n   /* Rewrite all the basic blocks in the program.  */\n   timevar_push (TV_TREE_SSA_REWRITE_BLOCKS);\n \n@@ -1401,8 +1439,11 @@ rewrite_blocks (bool add_phi_args)\n   walk_data.before_dom_children_before_stmts = rewrite_initialize_block;\n   walk_data.before_dom_children_walk_stmts = rewrite_stmt;\n   walk_data.before_dom_children_after_stmts = NULL;\n-  if (add_phi_args)\n-    walk_data.before_dom_children_after_stmts = rewrite_add_phi_arguments; \n+  if (!fix_virtual_phis)\n+    walk_data.before_dom_children_after_stmts = rewrite_add_phi_arguments;\n+  else\n+    walk_data.before_dom_children_after_stmts = rewrite_virtual_phi_arguments;\n+  \n   walk_data.after_dom_children_before_stmts =  NULL;\n   walk_data.after_dom_children_walk_stmts =  NULL;\n   walk_data.after_dom_children_after_stmts =  rewrite_finalize_block;\n@@ -1549,7 +1590,7 @@ rewrite_into_ssa (bool all)\n   /* Insert PHI nodes at dominance frontiers of definition blocks.  */\n   insert_phi_nodes (dfs, NULL);\n \n-  rewrite_blocks (true);\n+  rewrite_blocks (false);\n \n   /* Debugging dumps.  */\n   if (dump_file && (dump_flags & TDF_STATS))\n@@ -1576,7 +1617,7 @@ rewrite_def_def_chains (void)\n   /* Ensure that the dominance information is OK.  */\n   calculate_dominance_info (CDI_DOMINATORS);\n   mark_def_site_blocks ();\n-  rewrite_blocks (false);\n+  rewrite_blocks (true);\n \n }\n /* The marked ssa names may have more than one definition;"}]}