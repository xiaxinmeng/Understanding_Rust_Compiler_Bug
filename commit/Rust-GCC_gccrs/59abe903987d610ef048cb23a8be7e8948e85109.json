{"sha": "59abe903987d610ef048cb23a8be7e8948e85109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhYmU5MDM5ODdkNjEwZWYwNDhjYjIzYThiZTdlODk0OGU4NTEwOQ==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@arm.com", "date": "2017-10-08T03:57:36Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2017-10-08T03:57:36Z"}, "message": "aarch64.md (*aarch64_reg_<optab>_minus<mode>3): New pattern.\n\n2017-10-07  Michael Collison <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64.md (*aarch64_reg_<optab>_minus<mode>3):\n\tNew pattern.\n\n2017-10-07  Michael Collison <michael.collison@arm.com>\n\n\t* gcc.target/aarch64/var_shift_mask_2.c: New test.\n\nFrom-SVN: r253520", "tree": {"sha": "f8a43ed2d5feef1c0896b12a8777d3990a28181f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8a43ed2d5feef1c0896b12a8777d3990a28181f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59abe903987d610ef048cb23a8be7e8948e85109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59abe903987d610ef048cb23a8be7e8948e85109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59abe903987d610ef048cb23a8be7e8948e85109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59abe903987d610ef048cb23a8be7e8948e85109/comments", "author": null, "committer": null, "parents": [{"sha": "ecd8dec2ca4844ad31ce3b838e263a061ffb0939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd8dec2ca4844ad31ce3b838e263a061ffb0939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd8dec2ca4844ad31ce3b838e263a061ffb0939"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "f1c391bc99ee6ab08ab5549fc1478a07312f5666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59abe903987d610ef048cb23a8be7e8948e85109", "patch": "@@ -1,3 +1,8 @@\n+2017-10-07  Michael Collison <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*aarch64_reg_<optab>_minus<mode>3):\n+\tNew pattern.\n+\n 2017-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* builtins.def (BUILT_IN_SETJMP): Declare as library builtin instead"}, {"sha": "389f2f9d31aadce4b3f758508279bdf2ffaf52e3", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=59abe903987d610ef048cb23a8be7e8948e85109", "patch": "@@ -4125,6 +4125,35 @@\n   [(set_attr \"type\" \"shift_reg\")]\n )\n \n+(define_insn_and_split \"*aarch64_reg_<optab>_minus<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=&r\")\n+\t(ASHIFT:GPI\n+\t  (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t  (minus:QI (match_operand 2 \"const_int_operand\" \"n\")\n+\t\t    (match_operand:QI 3 \"register_operand\" \"r\"))))]\n+  \"INTVAL (operands[2]) == GET_MODE_BITSIZE (<MODE>mode)\"\n+  \"#\"\n+  \"&& true\"\n+  [(const_int 0)]\n+  {\n+    rtx subreg_tmp = gen_lowpart (SImode, operands[3]);\n+\n+    rtx tmp = (can_create_pseudo_p () ? gen_reg_rtx (SImode)\n+\t       : gen_lowpart (SImode, operands[0]));\n+\n+    emit_insn (gen_negsi2 (tmp, subreg_tmp));\n+\n+    rtx and_op = gen_rtx_AND (SImode, tmp,\n+\t\t\t      GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 1));\n+\n+    rtx subreg_tmp2 = gen_lowpart_SUBREG (QImode, and_op);\n+\n+    emit_insn (gen_<optab><mode>3 (operands[0], operands[1], subreg_tmp2));\n+    DONE;\n+  }\n+  [(set_attr \"length\" \"8\")]\n+)\n+\n ;; Logical left shift using SISD or Integer instruction\n (define_insn \"*aarch64_ashl_sisd_or_int_<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w,w\")"}, {"sha": "4c80e4bd9ecfd0e41a8eee91f28db55bb7cd1c31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59abe903987d610ef048cb23a8be7e8948e85109", "patch": "@@ -1,3 +1,7 @@\n+2017-10-07  Michael Collison <michael.collison@arm.com>\n+\n+\t* gcc.target/aarch64/var_shift_mask_2.c: New test.\n+\n 2017-10-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82375"}, {"sha": "c1fe691820ba36ca9d9ae0e9789ac7e06bc2c93a", "filename": "gcc/testsuite/gcc.target/aarch64/var_shift_mask_2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvar_shift_mask_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59abe903987d610ef048cb23a8be7e8948e85109/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvar_shift_mask_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvar_shift_mask_2.c?ref=59abe903987d610ef048cb23a8be7e8948e85109", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long\n+f1 (long long x, int i)\n+{\n+\n+  return x >> (64 - i);\n+}\n+\n+unsigned long long\n+f2 (unsigned long long x, unsigned int i)\n+{\n+\n+  return x >> (64 - i);\n+}\n+\n+int\n+f3 (int x, int i)\n+{\n+\n+  return x >> (32 - i);\n+}\n+\n+unsigned int\n+f4 (unsigned int x, unsigned int i)\n+{\n+\n+  return x >> (32 - i);\n+}\n+\n+int\n+f5 (int x, int i)\n+{\n+  return x << (32 - i);\n+}\n+\n+long long\n+f6 (long long x, int i)\n+{\n+  return x << (64 - i);\n+}\n+\n+/* { dg-final { scan-assembler \"lsl\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"lsl\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"lsr\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"lsr\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"asr\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"asr\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"neg\\tw\\[0-9\\]+, w\\[0-9\\]+\" 6 } } */\n+/* { dg-final { scan-assembler-not \"sub\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */"}]}