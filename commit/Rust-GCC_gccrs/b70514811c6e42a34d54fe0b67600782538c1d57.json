{"sha": "b70514811c6e42a34d54fe0b67600782538c1d57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcwNTE0ODExYzZlNDJhMzRkNTRmZTBiNjc2MDA3ODI1MzhjMWQ1Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-12T10:15:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-12T10:15:46Z"}, "message": "[multiple changes]\n\n2017-09-12  Bob Duff  <duff@adacore.com>\n\n\t* sem_warn.adb: Minor comment.\n\n2017-09-12  Bob Duff  <duff@adacore.com>\n\n\t* libgnat/a-cbdlli.adb, libgnat/a-cbhama.adb,\n\tlibgnat/a-cbmutr.adb, libgnat/a-cborma.adb: Rename New_Item to\n\tbe Default_Initialized_Item, and apply pragma Unmodified to it,\n\tto suppress the warning.\n\n2017-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Add early return\n\tfor access types.\n\n2017-09-12  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Consider Refined_Global\n\ttogether with Global when ignoring one in CodePeer mode.\n\n2017-09-12  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): In nested\n\tpackage declarations that have a private part enable missing check\n\tof the RM rule 13.1.1(11/3): usage names in aspect definitions are\n\tresolved at the end of the immediately enclosing declaration list.\n\nFrom-SVN: r252001", "tree": {"sha": "0fc311673695a51a20d8d0f7fa04a7f15ec67262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fc311673695a51a20d8d0f7fa04a7f15ec67262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b70514811c6e42a34d54fe0b67600782538c1d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70514811c6e42a34d54fe0b67600782538c1d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70514811c6e42a34d54fe0b67600782538c1d57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70514811c6e42a34d54fe0b67600782538c1d57/comments", "author": null, "committer": null, "parents": [{"sha": "fb69239a00b85f787c649b0454f0e93cc03132f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb69239a00b85f787c649b0454f0e93cc03132f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb69239a00b85f787c649b0454f0e93cc03132f8"}], "stats": {"total": 87, "additions": 64, "deletions": 23}, "files": [{"sha": "afa7b1b3f9b3565deb9ce3aca5bd35f7a0ba6794", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -1,3 +1,31 @@\n+2017-09-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_warn.adb: Minor comment.\n+\n+2017-09-12  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-cbdlli.adb, libgnat/a-cbhama.adb,\n+\tlibgnat/a-cbmutr.adb, libgnat/a-cborma.adb: Rename New_Item to\n+\tbe Default_Initialized_Item, and apply pragma Unmodified to it,\n+\tto suppress the warning.\n+\n+2017-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Add early return\n+\tfor access types.\n+\n+2017-09-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Consider Refined_Global\n+\ttogether with Global when ignoring one in CodePeer mode.\n+\n+2017-09-12  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): In nested\n+\tpackage declarations that have a private part enable missing check\n+\tof the RM rule 13.1.1(11/3): usage names in aspect definitions are\n+\tresolved at the end of the immediately enclosing declaration list.\n+\n 2017-09-12  Bob Duff  <duff@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Expression_Function): Initialize Def_Id to"}, {"sha": "b493d53115adbcb2e02fff2d6535caa8611e41d0", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -66,7 +66,7 @@ with Sem_Type;\n with Set_Targ;\n with Sinfo;    use Sinfo;\n with Sinput.L; use Sinput.L;\n-with Snames;\n+with Snames;   use Snames;\n with Sprint;   use Sprint;\n with Stringt;\n with Stylesw;  use Stylesw;\n@@ -272,9 +272,13 @@ procedure Gnat1drv is\n          Restrict.Restrictions.Set   (Max_Asynchronous_Select_Nesting) := True;\n          Restrict.Restrictions.Value (Max_Asynchronous_Select_Nesting) := 0;\n \n-         --  Enable pragma Ignore_Pragma (Global) to support legacy code\n+         --  Enable pragma Ignore_Pragma (Global) to support legacy code. As a\n+         --  consequence, Refined_Global pragma should be ignored as well, as\n+         --  it is only allowed on a body when pragma Global is given for the\n+         --  spec.\n \n-         Set_Name_Table_Boolean3 (Name_Id'(Name_Find (\"global\")), True);\n+         Set_Name_Table_Boolean3 (Name_Global, True);\n+         Set_Name_Table_Boolean3 (Name_Refined_Global, True);\n \n          --  Suppress division by zero checks since they are handled\n          --  implicitly by CodePeer."}, {"sha": "3dc22e3fb897cbf073167ff3cddf452b9cdfdb98", "filename": "gcc/ada/libgnat/a-cbdlli.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -1016,9 +1016,13 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       Count     : Count_Type := 1)\n    is\n       pragma Warnings (Off);\n-      New_Item : Element_Type;\n+      Default_Initialized_Item : Element_Type;\n+      pragma Unmodified (Default_Initialized_Item);\n       --  OK to reference, see below. Note that we need to suppress both the\n-      --  front end warning and the back end warning.\n+      --  front end warning and the back end warning. In addition, pragma\n+      --  Unmodified is needed to suppress the warning ``actual type for\n+      --  \"Element_Type\" should be fully initialized type'' on certain\n+      --  instantiations.\n \n    begin\n       --  There is no explicit element provided, but in an instance the element\n@@ -1027,7 +1031,7 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       --  initialization, so insert the specified number of possibly\n       --  initialized elements at the given position.\n \n-      Insert (Container, Before, New_Item, Position, Count);\n+      Insert (Container, Before, Default_Initialized_Item, Position, Count);\n       pragma Warnings (On);\n    end Insert;\n "}, {"sha": "825babe3e2c70fd95d5d39c5fb21d3c781d5f718", "filename": "gcc/ada/libgnat/a-cbhama.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -578,8 +578,9 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       -----------------\n \n       procedure Assign_Key (Node : in out Node_Type) is\n-         New_Item : Element_Type;\n-         pragma Unmodified (New_Item);\n+         pragma Warnings (Off);\n+         Default_Initialized_Item : Element_Type;\n+         pragma Unmodified (Default_Initialized_Item);\n          --  Default-initialized element (ok to reference, see below)\n \n       begin\n@@ -591,7 +592,8 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n          --  default initialization, so insert a possibly initialized element\n          --  under the given key.\n \n-         Node.Element := New_Item;\n+         Node.Element := Default_Initialized_Item;\n+         pragma Warnings (On);\n       end Assign_Key;\n \n       --------------"}, {"sha": "00e394c210000cc6aebad0f21e0dc1c47a87d25f", "filename": "gcc/ada/libgnat/a-cbmutr.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -1581,8 +1581,9 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       First : Count_Type;\n       Last  : Count_Type;\n \n-      New_Item : Element_Type;\n-      pragma Unmodified (New_Item);\n+      pragma Warnings (Off);\n+      Default_Initialized_Item : Element_Type;\n+      pragma Unmodified (Default_Initialized_Item);\n       --  OK to reference, see below\n \n    begin\n@@ -1629,12 +1630,13 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       --  initialization, so insert the specified number of possibly\n       --  initialized elements at the given position.\n \n-      Allocate_Node (Container, New_Item, First);\n+      Allocate_Node (Container, Default_Initialized_Item, First);\n       Nodes (First).Parent := Parent.Node;\n \n       Last := First;\n       for J in Count_Type'(2) .. Count loop\n-         Allocate_Node (Container, New_Item, Nodes (Last).Next);\n+         Allocate_Node\n+           (Container, Default_Initialized_Item, Nodes (Last).Next);\n          Nodes (Nodes (Last).Next).Parent := Parent.Node;\n          Nodes (Nodes (Last).Next).Prev := Last;\n \n@@ -1651,6 +1653,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       Container.Count := Container.Count + Count;\n \n       Position := Cursor'(Parent.Container, First);\n+      pragma Warnings (On);\n    end Insert_Child;\n \n    -------------------------"}, {"sha": "1bff46d9cc32b2da46a6d14698faf648252f6dc2", "filename": "gcc/ada/libgnat/a-cborma.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Flibgnat%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborma.adb?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -851,8 +851,9 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       ------------\n \n       procedure Assign (Node : in out Node_Type) is\n-         New_Item : Element_Type;\n-         pragma Unmodified (New_Item);\n+         pragma Warnings (Off);\n+         Default_Initialized_Item : Element_Type;\n+         pragma Unmodified (Default_Initialized_Item);\n          --  Default-initialized element (ok to reference, see below)\n \n       begin\n@@ -863,7 +864,8 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       --  with such a scalar component or with defaulted components, so insert\n       --  possibly initialized elements at the given position.\n \n-         Node.Element := New_Item;\n+         Node.Element := Default_Initialized_Item;\n+         pragma Warnings (On);\n       end Assign;\n \n       --------------"}, {"sha": "46d83494883c46b535decf7d9e867619f48dad6e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -2676,14 +2676,11 @@ package body Sem_Ch3 is\n               and then not Is_Child_Unit (Current_Scope)\n               and then No (Generic_Parent (Parent (L)))\n             then\n-               --  This is needed in all cases to catch visibility errors in\n-               --  aspect expressions, but several large user tests are now\n-               --  rejected. Pending notification we restrict this call to\n-               --  ASIS mode.\n+               --  ARM rule 13.1.1(11/3): usage names in aspect definitions are\n+               --  resolved at the end of the immediately enclosing declaration\n+               --  list (AI05-0183-1).\n \n-               if ASIS_Mode then\n-                  Resolve_Aspects;\n-               end if;\n+               Resolve_Aspects;\n \n             elsif L /= Visible_Declarations (Parent (L))\n               or else No (Private_Declarations (Parent (L)))"}, {"sha": "278d6b6bd214b1c1571fa782b420648b5e38088c", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70514811c6e42a34d54fe0b67600782538c1d57/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=b70514811c6e42a34d54fe0b67600782538c1d57", "patch": "@@ -2798,6 +2798,7 @@ package body Sem_Warn is\n \n          --  Note: use of OR instead of OR ELSE here is deliberate, we want\n          --  to mess with Unmodified flags on both body and spec entities.\n+         --  Has_Unmodified has side effects!\n \n          return Has_Unmodified (E)\n                   or"}]}