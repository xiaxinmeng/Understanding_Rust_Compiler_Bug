{"sha": "b552441bd8164790aff92c815e63ecb1308882a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1MjQ0MWJkODE2NDc5MGFmZjkyYzgxNWU2M2VjYjEzMDg4ODJhNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-20T15:17:50Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-20T15:17:50Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r805", "tree": {"sha": "8fe072289a90f8895c36cb778fa2f17bb4709164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fe072289a90f8895c36cb778fa2f17bb4709164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b552441bd8164790aff92c815e63ecb1308882a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b552441bd8164790aff92c815e63ecb1308882a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b552441bd8164790aff92c815e63ecb1308882a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b552441bd8164790aff92c815e63ecb1308882a4/comments", "author": null, "committer": null, "parents": [{"sha": "7f211789248b7d17496b281d37692c171e3c6567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f211789248b7d17496b281d37692c171e3c6567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f211789248b7d17496b281d37692c171e3c6567"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "029ceb059b8a4eb3e22b079e76edd1906090750e", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b552441bd8164790aff92c815e63ecb1308882a4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b552441bd8164790aff92c815e63ecb1308882a4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b552441bd8164790aff92c815e63ecb1308882a4", "patch": "@@ -2935,11 +2935,27 @@ expand_expr (exp, target, tmode, modifier)\n   switch (code)\n     {\n     case LABEL_DECL:\n-      if (modifier == EXPAND_INITIALIZER)\n-\tforced_labels = gen_rtx (EXPR_LIST, VOIDmode,\n-\t\t\t\t label_rtx (exp), forced_labels);\n-      return gen_rtx (MEM, FUNCTION_MODE,\n-\t\t      gen_rtx (LABEL_REF, Pmode, label_rtx (exp)));\n+      {\n+\ttree function = decl_function_context (exp);\n+\t/* Handle using a label in a containing function.  */\n+\tif (function != current_function_decl && function != 0)\n+\t  {\n+\t    struct function *p = find_function_data (function);\n+\t    /* Allocate in the memory associated with the function\n+\t       that the label is in.  */\n+\t    push_obstacks (p->function_obstack,\n+\t\t\t   p->function_maybepermanent_obstack);\n+\n+\t    p->forced_labels = gen_rtx (EXPR_LIST, VOIDmode,\n+\t\t\t\t\tlabel_rtx (exp), p->forced_labels);\n+\t    pop_obstacks ();\n+\t  }\n+\telse if (modifier == EXPAND_INITIALIZER)\n+\t  forced_labels = gen_rtx (EXPR_LIST, VOIDmode,\n+\t\t\t\t   label_rtx (exp), forced_labels);\n+\treturn gen_rtx (MEM, FUNCTION_MODE,\n+\t\t\tgen_rtx (LABEL_REF, Pmode, label_rtx (exp)));\n+      }\n \n     case PARM_DECL:\n       if (DECL_RTL (exp) == 0)\n@@ -3148,8 +3164,11 @@ expand_expr (exp, target, tmode, modifier)\n       if (TREE_STATIC (exp) && (mode == BLKmode || TREE_ADDRESSABLE (exp)))\n \t{\n \t  rtx constructor = output_constant_def (exp);\n-\t  if (! memory_address_p (GET_MODE (constructor),\n-\t\t\t\t  XEXP (constructor, 0)))\n+\t  if (modifier != EXPAND_CONST_ADDRESS\n+\t      && modifier != EXPAND_INITIALIZER\n+\t      && modifier != EXPAND_SUM\n+\t      && !memory_address_p (GET_MODE (constructor),\n+\t\t\t\t    XEXP (constructor, 0)))\n \t    constructor = change_address (constructor, VOIDmode,\n \t\t\t\t\t  XEXP (constructor, 0));\n \t  return constructor;"}]}