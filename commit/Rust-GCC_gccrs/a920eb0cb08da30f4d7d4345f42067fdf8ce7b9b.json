{"sha": "a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyMGViMGNiMDhkYTMwZjRkN2Q0MzQ1ZjQyMDY3ZmRmOGNlN2I5Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-03T23:02:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-03T23:02:43Z"}, "message": "runtime: remove unnecessary functions calling between C and Go\n    \n    These functions were needed during the transition of the runtime from\n    C to Go, but are no longer necessary.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/179879\n\nFrom-SVN: r271890", "tree": {"sha": "2c48ef25fbdf64d208fc06549ae1c878dda60f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c48ef25fbdf64d208fc06549ae1c878dda60f07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/comments", "author": null, "committer": null, "parents": [{"sha": "fbd4b7f39ee26f1258aff5b86ad0fba06f3edd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd4b7f39ee26f1258aff5b86ad0fba06f3edd5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd4b7f39ee26f1258aff5b86ad0fba06f3edd5e"}], "stats": {"total": 93, "additions": 2, "deletions": 91}, "files": [{"sha": "b1b36b2ac945461c491f6453610a3f67428e2b8f", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "patch": "@@ -1,4 +1,4 @@\n-2e623bff8a5855bb6268c69bb04eb37cac8f2dc2\n+95784e8eec75cfeb2363fb22b51085380e564af9\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "530997b292e00060121208bb8ff879f95aa30168", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 1, "deletions": 63, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "patch": "@@ -310,13 +310,6 @@ func errno() int\n func entersyscall()\n func entersyscallblock()\n \n-// For gccgo to call from C code, so that the C code and the Go code\n-// can share the memstats variable for now.\n-//go:linkname getMstats runtime.getMstats\n-func getMstats() *mstats {\n-\treturn &memstats\n-}\n-\n // Get signal trampoline, written in C.\n func getSigtramp() uintptr\n \n@@ -338,48 +331,12 @@ func dumpregs(*_siginfo_t, unsafe.Pointer)\n // Implemented in C for gccgo.\n func setRandomNumber(uint32)\n \n-// Temporary for gccgo until we port proc.go.\n-//go:linkname getsched runtime.getsched\n-func getsched() *schedt {\n-\treturn &sched\n-}\n-\n-// Temporary for gccgo until we port proc.go.\n-//go:linkname getCgoHasExtraM runtime.getCgoHasExtraM\n-func getCgoHasExtraM() *bool {\n-\treturn &cgoHasExtraM\n-}\n-\n-// Temporary for gccgo until we port proc.go.\n-//go:linkname getAllP runtime.getAllP\n-func getAllP() **p {\n-\treturn &allp[0]\n-}\n-\n-// Temporary for gccgo until we port proc.go.\n+// Called by gccgo's proc.c.\n //go:linkname allocg runtime.allocg\n func allocg() *g {\n \treturn new(g)\n }\n \n-// Temporary for gccgo until we port the garbage collector.\n-//go:linkname getallglen runtime.getallglen\n-func getallglen() uintptr {\n-\treturn allglen\n-}\n-\n-// Temporary for gccgo until we port the garbage collector.\n-//go:linkname getallg runtime.getallg\n-func getallg(i int) *g {\n-\treturn allgs[i]\n-}\n-\n-// Temporary for gccgo until we port the garbage collector.\n-//go:linkname getallm runtime.getallm\n-func getallm() *m {\n-\treturn allm\n-}\n-\n // Throw and rethrow an exception.\n func throwException()\n func rethrowException()\n@@ -388,13 +345,6 @@ func rethrowException()\n // used by the stack unwinder.\n func unwindExceptionSize() uintptr\n \n-// Temporary for gccgo until C code no longer needs it.\n-//go:nosplit\n-//go:linkname getPanicking runtime.getPanicking\n-func getPanicking() uint32 {\n-\treturn panicking\n-}\n-\n // Called by C code to set the number of CPUs.\n //go:linkname setncpu runtime.setncpu\n func setncpu(n int32) {\n@@ -409,18 +359,6 @@ func setpagesize(s uintptr) {\n \t}\n }\n \n-// Called by C code during library initialization.\n-//go:linkname runtime_m0 runtime.runtime_m0\n-func runtime_m0() *m {\n-\treturn &m0\n-}\n-\n-// Temporary for gccgo until we port mgc.go.\n-//go:linkname runtime_g0 runtime.runtime_g0\n-func runtime_g0() *g {\n-\treturn &g0\n-}\n-\n const uintptrMask = 1<<(8*sys.PtrSize) - 1\n \n type bitvector struct {"}, {"sha": "f3795690e043140e7f54913200da15861e0205c8", "filename": "libgo/runtime/go-libmain.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fgo-libmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fgo-libmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-libmain.c?ref=a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "patch": "@@ -230,7 +230,6 @@ gostart (void *arg)\n   runtime_args (a->argc, (byte **) a->argv);\n   setncpu (getproccount ());\n   setpagesize (getpagesize ());\n-  runtime_sched = runtime_getsched();\n   runtime_schedinit ();\n   __go_go ((uintptr)(runtime_main), NULL);\n   runtime_mstart (runtime_m ());"}, {"sha": "51ce15fdbc14d109c77e725c80f3244b95579596", "filename": "libgo/runtime/go-main.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fgo-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fgo-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-main.c?ref=a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "patch": "@@ -54,7 +54,6 @@ main (int argc, char **argv)\n   runtime_args (argc, (byte **) argv);\n   setncpu (getproccount ());\n   setpagesize (getpagesize ());\n-  runtime_sched = runtime_getsched();\n   runtime_schedinit ();\n   __go_go ((uintptr)(runtime_main), NULL);\n   runtime_mstart (runtime_m ());"}, {"sha": "26125ccf1619bef02c8961e4c93902275edfb1d6", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "patch": "@@ -378,8 +378,6 @@ runtime_mcall(FuncVal *fv)\n extern G* allocg(void)\n   __asm__ (GOSYM_PREFIX \"runtime.allocg\");\n \n-Sched*\truntime_sched;\n-\n bool\truntime_isarchive;\n \n extern void kickoff(void)\n@@ -888,11 +886,3 @@ resetNewG(G *newg, void **sp, uintptr *spsize)\n   newg->gcnextsp2 = (uintptr)(newg->gcinitialsp2);\n #endif\n }\n-\n-// Return whether we are waiting for a GC.  This gc toolchain uses\n-// preemption instead.\n-bool\n-runtime_gcwaiting(void)\n-{\n-\treturn runtime_sched->gcwaiting;\n-}"}, {"sha": "6da7bdf497f89ce0c87127f2dc2cc4f250a67894", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=a920eb0cb08da30f4d7d4345f42067fdf8ce7b9b", "patch": "@@ -115,11 +115,6 @@ extern M*\truntime_m(void);\n extern G*\truntime_g(void)\n   __asm__(GOSYM_PREFIX \"runtime.getg\");\n \n-extern M*\truntime_m0(void)\n-  __asm__(GOSYM_PREFIX \"runtime.runtime_m0\");\n-extern G*\truntime_g0(void)\n-  __asm__(GOSYM_PREFIX \"runtime.runtime_g0\");\n-\n enum\n {\n \ttrue\t= 1,\n@@ -196,15 +191,6 @@ void\truntime_hashinit(void);\n  */\n extern\tuintptr* runtime_getZerobase(void)\n   __asm__(GOSYM_PREFIX \"runtime.getZerobase\");\n-extern G* runtime_getallg(intgo)\n-  __asm__(GOSYM_PREFIX \"runtime.getallg\");\n-extern uintptr runtime_getallglen(void)\n-  __asm__(GOSYM_PREFIX \"runtime.getallglen\");\n-extern\tM*\truntime_getallm(void)\n-  __asm__(GOSYM_PREFIX \"runtime.getallm\");\n-extern\tSched*  runtime_sched;\n-extern\tuint32\truntime_panicking(void)\n-  __asm__ (GOSYM_PREFIX \"runtime.getPanicking\");\n \n extern\tbool\truntime_isstarted;\n extern\tbool\truntime_isarchive;\n@@ -447,7 +433,6 @@ int32 getproccount(void);\n \n #define PREFETCH(p) __builtin_prefetch(p)\n \n-bool\truntime_gcwaiting(void);\n void\truntime_badsignal(int);\n Defer*\truntime_newdefer(void);\n void\truntime_freedefer(Defer*);"}]}