{"sha": "707f991907e5c97c56a05654fee49f4940158994", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3Zjk5MTkwN2U1Yzk3YzU2YTA1NjU0ZmVlNDlmNDk0MDE1ODk5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-07-04T18:53:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-07-04T18:53:56Z"}, "message": "re PR rtl-optimization/49472 (Compiler segfault on valid code)\n\n\tPR rtl-optimization/49472\n\t* simplify-rtx.c (simplify_unary_operation_1) <case NEG>: When\n\tnegating MULT, negate the second operand instead of first.\n\t(simplify_binary_operation_1) <case MULT>: If one operand is\n\ta NEG and the other is MULT, don't attempt to optimize by\n\tnegation of the MULT operand if it only moves the NEG operation\n\taround.\n\n\t* gfortran.dg/pr49472.f90: New test.\n\nFrom-SVN: r175821", "tree": {"sha": "b9c8211932e2c4b13367e217f110ffc882b8f5cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c8211932e2c4b13367e217f110ffc882b8f5cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/707f991907e5c97c56a05654fee49f4940158994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707f991907e5c97c56a05654fee49f4940158994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707f991907e5c97c56a05654fee49f4940158994", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707f991907e5c97c56a05654fee49f4940158994/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15923c25df505b21061fda148dcb2b036af4735a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15923c25df505b21061fda148dcb2b036af4735a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15923c25df505b21061fda148dcb2b036af4735a"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "509efb8cea0ce04ed27005b74d0d7ca92f523c7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707f991907e5c97c56a05654fee49f4940158994/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707f991907e5c97c56a05654fee49f4940158994/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=707f991907e5c97c56a05654fee49f4940158994", "patch": "@@ -1,5 +1,13 @@\n 2011-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/49472\n+\t* simplify-rtx.c (simplify_unary_operation_1) <case NEG>: When\n+\tnegating MULT, negate the second operand instead of first.\n+\t(simplify_binary_operation_1) <case MULT>: If one operand is\n+\ta NEG and the other is MULT, don't attempt to optimize by\n+\tnegation of the MULT operand if it only moves the NEG operation\n+\taround.\n+\n \tPR debug/49602\n \t* tree-into-ssa.c (rewrite_debug_stmt_uses): Disregard\n \tget_current_def return value if it can't be trusted to be"}, {"sha": "bcd55b27fbc4dd4c3088cdcaeaad44b668d366f1", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707f991907e5c97c56a05654fee49f4940158994/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707f991907e5c97c56a05654fee49f4940158994/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=707f991907e5c97c56a05654fee49f4940158994", "patch": "@@ -686,13 +686,13 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  return simplify_gen_binary (MINUS, mode, temp, XEXP (op, 1));\n \t}\n \n-      /* (neg (mult A B)) becomes (mult (neg A) B).\n+      /* (neg (mult A B)) becomes (mult A (neg B)).\n \t This works even for floating-point values.  */\n       if (GET_CODE (op) == MULT\n \t  && !HONOR_SIGN_DEPENDENT_ROUNDING (mode))\n \t{\n-\t  temp = simplify_gen_unary (NEG, mode, XEXP (op, 0), mode);\n-\t  return simplify_gen_binary (MULT, mode, temp, XEXP (op, 1));\n+\t  temp = simplify_gen_unary (NEG, mode, XEXP (op, 1), mode);\n+\t  return simplify_gen_binary (MULT, mode, XEXP (op, 0), temp);\n \t}\n \n       /* NEG commutes with ASHIFT since it is multiplication.  Only do\n@@ -2271,12 +2271,34 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       if (GET_CODE (op0) == NEG)\n \t{\n \t  rtx temp = simplify_unary_operation (NEG, mode, op1, mode);\n+\t  /* If op1 is a MULT as well and simplify_unary_operation\n+\t     just moved the NEG to the second operand, simplify_gen_binary\n+\t     below could through simplify_associative_operation move\n+\t     the NEG around again and recurse endlessly.  */\n+\t  if (temp\n+\t      && GET_CODE (op1) == MULT\n+\t      && GET_CODE (temp) == MULT\n+\t      && XEXP (op1, 0) == XEXP (temp, 0)\n+\t      && GET_CODE (XEXP (temp, 1)) == NEG\n+\t      && XEXP (op1, 1) == XEXP (XEXP (temp, 1), 0))\n+\t    temp = NULL_RTX;\n \t  if (temp)\n \t    return simplify_gen_binary (MULT, mode, XEXP (op0, 0), temp);\n \t}\n       if (GET_CODE (op1) == NEG)\n \t{\n \t  rtx temp = simplify_unary_operation (NEG, mode, op0, mode);\n+\t  /* If op0 is a MULT as well and simplify_unary_operation\n+\t     just moved the NEG to the second operand, simplify_gen_binary\n+\t     below could through simplify_associative_operation move\n+\t     the NEG around again and recurse endlessly.  */\n+\t  if (temp\n+\t      && GET_CODE (op0) == MULT\n+\t      && GET_CODE (temp) == MULT\n+\t      && XEXP (op0, 0) == XEXP (temp, 0)\n+\t      && GET_CODE (XEXP (temp, 1)) == NEG\n+\t      && XEXP (op0, 1) == XEXP (XEXP (temp, 1), 0))\n+\t    temp = NULL_RTX;\n \t  if (temp)\n \t    return simplify_gen_binary (MULT, mode, temp, XEXP (op1, 0));\n \t}"}, {"sha": "02c926afe94e235fe2f95b0fb12847180a10b0fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707f991907e5c97c56a05654fee49f4940158994/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707f991907e5c97c56a05654fee49f4940158994/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=707f991907e5c97c56a05654fee49f4940158994", "patch": "@@ -1,5 +1,8 @@\n 2011-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/49472\n+\t* gfortran.dg/pr49472.f90: New test.\n+\n \tPR debug/49602\n \t* gcc.dg/pr49602.c: New test.\n "}, {"sha": "1baf82e8b113e604067e54d20cd4aa22dfc4e200", "filename": "gcc/testsuite/gfortran.dg/pr49472.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707f991907e5c97c56a05654fee49f4940158994/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49472.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707f991907e5c97c56a05654fee49f4940158994/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49472.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49472.f90?ref=707f991907e5c97c56a05654fee49f4940158994", "patch": "@@ -0,0 +1,15 @@\n+! PR rtl-optimization/49472\n+! { dg-do compile }\n+! { dg-options \"-O -fcompare-debug -ffast-math\" }\n+subroutine pr49472\n+  integer, parameter :: n = 3\n+  real(8) :: a, b, c, d, e (n+1)\n+  integer :: i\n+  do i=2, (n+1)\n+    b = 1. / ((i - 1.5d0) * 1.)\n+    c = b * a\n+    d = -b * c / (1. + b * b) ** 1.5d0\n+    e(i) = d\n+  end do\n+  call dummy (e)\n+end subroutine"}]}